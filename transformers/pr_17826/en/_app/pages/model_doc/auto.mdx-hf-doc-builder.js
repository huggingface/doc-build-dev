import{S as tHt,i as aHt,s as nHt,e as a,k as l,w as F,t as o,M as sHt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as lHt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as hat}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function iHt($){let g,v,p,m,_,d,h,Co,yi,Bf,lt,xi,$i,lL,Nf,Oe,We,ki,Pn,iL,Bn,Nn,dL,Si,In,cL,Ri,If,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),yi=a("code"),Bf=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),xi=a("code"),$i=o('"new-model"'),lL=o(")."),Nf=l(),Oe=a("p"),We=o("Likewise, if your "),ki=a("code"),Pn=o("NewModel"),iL=o(" is a subclass of "),Bn=a("a"),Nn=o("PreTrainedModel"),dL=o(`, make sure its
`),Si=a("code"),In=o("config_class"),cL=o(` attribute is set to the same class you use when registering the model (here
`),Ri=a("code"),If=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var VS=s(p);m=r(VS,"NewModelConfig"),VS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Pi=s(d);h=r(Pi,"PretrainedConfig"),Pi.forEach(t),Co=r(Ae,`, make sure its
`),yi=n(Ae,"CODE",{});var XS=s(yi);Bf=r(XS,"model_type"),XS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),xi=n(Ae,"CODE",{});var zS=s(xi);$i=r(zS,'"new-model"'),zS.forEach(t),lL=r(Ae,")."),Ae.forEach(t),Nf=i(He),Oe=n(He,"P",{});var wo=s(Oe);We=r(wo,"Likewise, if your "),ki=n(wo,"CODE",{});var Ra=s(ki);Pn=r(Ra,"NewModel"),Ra.forEach(t),iL=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var QS=s(Bn);Nn=r(QS,"PreTrainedModel"),QS.forEach(t),dL=r(wo,`, make sure its
`),Si=n(wo,"CODE",{});var qf=s(Si);In=r(qf,"config_class"),qf.forEach(t),cL=r(wo,` attribute is set to the same class you use when registering the model (here
`),Ri=n(wo,"CODE",{});var WS=s(Ri);If=r(WS,"NewModelConfig"),WS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Co),e(g,yi),e(yi,Bf),e(g,lt),e(g,xi),e(xi,$i),e(g,lL),b(He,Nf,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,ki),e(ki,Pn),e(Oe,iL),e(Oe,Bn),e(Bn,Nn),e(Oe,dL),e(Oe,Si),e(Si,In),e(Oe,cL),e(Oe,Ri),e(Ri,If),e(Oe,Sa)},d(He){He&&t(g),He&&t(Nf),He&&t(Oe)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lJt($){let g,v,p,m,_,d,h,Co,yi,Bf,lt,xi,$i,lL,Nf,Oe,We,ki,Pn,iL,Bn,Nn,dL,Si,In,cL,Ri,If,Sa,He,Ae,VS,Pi,XS,zS,wo,Ra,QS,qf,WS,GHe,AXe,Bi,jf,qae,fL,OHe,jae,VHe,LXe,qn,XHe,Dae,zHe,QHe,Gae,WHe,HHe,yXe,mL,xXe,HS,UHe,$Xe,Df,kXe,Ni,Gf,Oae,gL,JHe,Vae,YHe,SXe,Ao,hL,KHe,pL,ZHe,US,eUe,oUe,rUe,_L,tUe,Xae,aUe,nUe,sUe,Lr,uL,lUe,zae,iUe,dUe,Ii,cUe,Qae,fUe,mUe,Wae,gUe,hUe,pUe,A,Of,Hae,_Ue,uUe,JS,bUe,vUe,FUe,Vf,Uae,TUe,MUe,YS,EUe,CUe,wUe,Xf,Jae,AUe,LUe,KS,yUe,xUe,$Ue,zf,Yae,kUe,SUe,ZS,RUe,PUe,BUe,Qf,Kae,NUe,IUe,eR,qUe,jUe,DUe,Wf,Zae,GUe,OUe,oR,VUe,XUe,zUe,Hf,ene,QUe,WUe,rR,HUe,UUe,JUe,Uf,one,YUe,KUe,tR,ZUe,eJe,oJe,Jf,rne,rJe,tJe,aR,aJe,nJe,sJe,Yf,tne,lJe,iJe,nR,dJe,cJe,fJe,Kf,ane,mJe,gJe,sR,hJe,pJe,_Je,Zf,nne,uJe,bJe,lR,vJe,FJe,TJe,em,sne,MJe,EJe,iR,CJe,wJe,AJe,om,lne,LJe,yJe,dR,xJe,$Je,kJe,rm,ine,SJe,RJe,cR,PJe,BJe,NJe,tm,dne,IJe,qJe,fR,jJe,DJe,GJe,am,cne,OJe,VJe,mR,XJe,zJe,QJe,nm,fne,WJe,HJe,gR,UJe,JJe,YJe,sm,mne,KJe,ZJe,hR,eYe,oYe,rYe,lm,gne,tYe,aYe,pR,nYe,sYe,lYe,im,hne,iYe,dYe,_R,cYe,fYe,mYe,dm,pne,gYe,hYe,uR,pYe,_Ye,uYe,cm,_ne,bYe,vYe,bR,FYe,TYe,MYe,fm,une,EYe,CYe,vR,wYe,AYe,LYe,mm,bne,yYe,xYe,FR,$Ye,kYe,SYe,gm,vne,RYe,PYe,TR,BYe,NYe,IYe,hm,Fne,qYe,jYe,MR,DYe,GYe,OYe,pm,Tne,VYe,XYe,ER,zYe,QYe,WYe,_m,Mne,HYe,UYe,CR,JYe,YYe,KYe,um,Ene,ZYe,eKe,wR,oKe,rKe,tKe,bm,Cne,aKe,nKe,AR,sKe,lKe,iKe,vm,wne,dKe,cKe,LR,fKe,mKe,gKe,Fm,Ane,hKe,pKe,yR,_Ke,uKe,bKe,Tm,Lne,vKe,FKe,xR,TKe,MKe,EKe,Mm,yne,CKe,wKe,$R,AKe,LKe,yKe,Em,xne,xKe,$Ke,kR,kKe,SKe,RKe,Cm,$ne,PKe,BKe,SR,NKe,IKe,qKe,wm,kne,jKe,DKe,RR,GKe,OKe,VKe,Am,Sne,XKe,zKe,PR,QKe,WKe,HKe,Lm,Rne,UKe,JKe,BR,YKe,KKe,ZKe,ym,Pne,eZe,oZe,NR,rZe,tZe,aZe,xm,Bne,nZe,sZe,IR,lZe,iZe,dZe,$m,Nne,cZe,fZe,qR,mZe,gZe,hZe,km,Ine,pZe,_Ze,jR,uZe,bZe,vZe,Sm,qne,FZe,TZe,DR,MZe,EZe,CZe,Rm,jne,wZe,AZe,GR,LZe,yZe,xZe,Pm,Dne,$Ze,kZe,OR,SZe,RZe,PZe,Bm,Gne,BZe,NZe,VR,IZe,qZe,jZe,Nm,One,DZe,GZe,XR,OZe,VZe,XZe,Im,Vne,zZe,QZe,zR,WZe,HZe,UZe,qm,Xne,JZe,YZe,QR,KZe,ZZe,eeo,jm,zne,oeo,reo,WR,teo,aeo,neo,Dm,Qne,seo,leo,HR,ieo,deo,ceo,Gm,Wne,feo,meo,UR,geo,heo,peo,Om,Hne,_eo,ueo,JR,beo,veo,Feo,Vm,Une,Teo,Meo,YR,Eeo,Ceo,weo,Xm,Jne,Aeo,Leo,KR,yeo,xeo,$eo,zm,Yne,keo,Seo,ZR,Reo,Peo,Beo,Qm,Kne,Neo,Ieo,eP,qeo,jeo,Deo,Wm,Zne,Geo,Oeo,oP,Veo,Xeo,zeo,Hm,ese,Qeo,Weo,rP,Heo,Ueo,Jeo,Um,ose,Yeo,Keo,tP,Zeo,eoo,ooo,Jm,rse,roo,too,aP,aoo,noo,soo,Ym,tse,loo,ioo,nP,doo,coo,foo,Km,ase,moo,goo,sP,hoo,poo,_oo,Zm,nse,uoo,boo,lP,voo,Foo,Too,eg,sse,Moo,Eoo,iP,Coo,woo,Aoo,og,lse,Loo,yoo,dP,xoo,$oo,koo,rg,ise,Soo,Roo,cP,Poo,Boo,Noo,tg,dse,Ioo,qoo,fP,joo,Doo,Goo,ag,cse,Ooo,Voo,mP,Xoo,zoo,Qoo,ng,fse,Woo,Hoo,gP,Uoo,Joo,Yoo,sg,mse,Koo,Zoo,hP,ero,oro,rro,lg,gse,tro,aro,pP,nro,sro,lro,ig,hse,iro,dro,_P,cro,fro,mro,dg,pse,gro,hro,uP,pro,_ro,uro,cg,_se,bro,vro,bP,Fro,Tro,Mro,fg,use,Ero,Cro,vP,wro,Aro,Lro,mg,bse,yro,xro,FP,$ro,kro,Sro,gg,vse,Rro,Pro,TP,Bro,Nro,Iro,hg,Fse,qro,jro,MP,Dro,Gro,Oro,pg,Tse,Vro,Xro,EP,zro,Qro,Wro,_g,Mse,Hro,Uro,CP,Jro,Yro,Kro,ug,Ese,Zro,eto,wP,oto,rto,tto,bg,Cse,ato,nto,AP,sto,lto,ito,vg,wse,dto,cto,LP,fto,mto,gto,Fg,Ase,hto,pto,yP,_to,uto,bto,Tg,Lse,vto,Fto,xP,Tto,Mto,Eto,Mg,yse,Cto,wto,$P,Ato,Lto,yto,Eg,xse,xto,$to,kP,kto,Sto,Rto,Cg,$se,Pto,Bto,SP,Nto,Ito,qto,wg,kse,jto,Dto,RP,Gto,Oto,Vto,Ag,Sse,Xto,zto,PP,Qto,Wto,Hto,Lg,Rse,Uto,Jto,BP,Yto,Kto,Zto,yg,Pse,eao,oao,NP,rao,tao,aao,xg,Bse,nao,sao,IP,lao,iao,dao,$g,Nse,cao,fao,qP,mao,gao,hao,kg,Ise,pao,_ao,jP,uao,bao,vao,Sg,qse,Fao,Tao,DP,Mao,Eao,Cao,Rg,jse,wao,Aao,GP,Lao,yao,xao,Pg,Dse,$ao,kao,OP,Sao,Rao,Pao,Bg,Gse,Bao,Nao,VP,Iao,qao,jao,Ng,Ose,Dao,Gao,XP,Oao,Vao,Xao,Ig,Vse,zao,Qao,zP,Wao,Hao,Uao,qg,Xse,Jao,Yao,QP,Kao,Zao,eno,jg,zse,ono,rno,WP,tno,ano,nno,Dg,Qse,sno,lno,HP,ino,dno,cno,Gg,Wse,fno,mno,UP,gno,hno,pno,Og,Hse,_no,uno,JP,bno,vno,Fno,Vg,Use,Tno,Mno,YP,Eno,Cno,wno,Xg,Jse,Ano,Lno,KP,yno,xno,$no,zg,Yse,kno,Sno,ZP,Rno,Pno,Bno,Qg,Kse,Nno,Ino,eB,qno,jno,Dno,Wg,Zse,Gno,Ono,oB,Vno,Xno,zno,Hg,ele,Qno,Wno,rB,Hno,Uno,Jno,Ug,ole,Yno,Kno,tB,Zno,eso,oso,Jg,rle,rso,tso,aB,aso,nso,sso,Yg,tle,lso,iso,nB,dso,cso,fso,Kg,ale,mso,gso,sB,hso,pso,_so,Zg,uso,eh,bL,bso,nle,vso,RXe,qi,oh,sle,vL,Fso,lle,Tso,PXe,Lo,FL,Mso,TL,Eso,lB,Cso,wso,Aso,ML,Lso,ile,yso,xso,$so,yr,EL,kso,dle,Sso,Rso,Pa,Pso,cle,Bso,Nso,fle,Iso,qso,mle,jso,Dso,Gso,k,jn,gle,Oso,Vso,iB,Xso,zso,dB,Qso,Wso,Hso,Dn,hle,Uso,Jso,cB,Yso,Kso,fB,Zso,elo,olo,Gn,ple,rlo,tlo,mB,alo,nlo,gB,slo,llo,ilo,rh,_le,dlo,clo,hB,flo,mlo,glo,On,ule,hlo,plo,pB,_lo,ulo,_B,blo,vlo,Flo,th,ble,Tlo,Mlo,uB,Elo,Clo,wlo,ah,vle,Alo,Llo,bB,ylo,xlo,$lo,nh,Fle,klo,Slo,vB,Rlo,Plo,Blo,Vn,Tle,Nlo,Ilo,FB,qlo,jlo,TB,Dlo,Glo,Olo,Xn,Mle,Vlo,Xlo,MB,zlo,Qlo,EB,Wlo,Hlo,Ulo,zn,Ele,Jlo,Ylo,CB,Klo,Zlo,wB,eio,oio,rio,sh,Cle,tio,aio,AB,nio,sio,lio,lh,wle,iio,dio,LB,cio,fio,mio,ih,Ale,gio,hio,yB,pio,_io,uio,Qn,Lle,bio,vio,xB,Fio,Tio,$B,Mio,Eio,Cio,dh,yle,wio,Aio,kB,Lio,yio,xio,Wn,xle,$io,kio,SB,Sio,Rio,RB,Pio,Bio,Nio,Hn,$le,Iio,qio,PB,jio,Dio,BB,Gio,Oio,Vio,Un,kle,Xio,zio,NB,Qio,Wio,IB,Hio,Uio,Jio,Jn,Sle,Yio,Kio,qB,Zio,edo,jB,odo,rdo,tdo,ch,Rle,ado,ndo,DB,sdo,ldo,ido,Yn,Ple,ddo,cdo,GB,fdo,mdo,OB,gdo,hdo,pdo,Kn,Ble,_do,udo,VB,bdo,vdo,XB,Fdo,Tdo,Mdo,Zn,Nle,Edo,Cdo,zB,wdo,Ado,QB,Ldo,ydo,xdo,es,Ile,$do,kdo,WB,Sdo,Rdo,HB,Pdo,Bdo,Ndo,os,qle,Ido,qdo,UB,jdo,Ddo,JB,Gdo,Odo,Vdo,rs,jle,Xdo,zdo,YB,Qdo,Wdo,KB,Hdo,Udo,Jdo,fh,Dle,Ydo,Kdo,ZB,Zdo,eco,oco,ts,Gle,rco,tco,eN,aco,nco,oN,sco,lco,ico,mh,Ole,dco,cco,rN,fco,mco,gco,as,Vle,hco,pco,tN,_co,uco,aN,bco,vco,Fco,ns,Xle,Tco,Mco,nN,Eco,Cco,sN,wco,Aco,Lco,ss,zle,yco,xco,lN,$co,kco,iN,Sco,Rco,Pco,gh,Qle,Bco,Nco,dN,Ico,qco,jco,ls,Wle,Dco,Gco,cN,Oco,Vco,fN,Xco,zco,Qco,is,Hle,Wco,Hco,mN,Uco,Jco,gN,Yco,Kco,Zco,ds,Ule,efo,ofo,hN,rfo,tfo,pN,afo,nfo,sfo,hh,Jle,lfo,ifo,_N,dfo,cfo,ffo,cs,Yle,mfo,gfo,uN,hfo,pfo,bN,_fo,ufo,bfo,ph,Kle,vfo,Ffo,Zle,Tfo,Mfo,Efo,fs,eie,Cfo,wfo,vN,Afo,Lfo,FN,yfo,xfo,$fo,ms,oie,kfo,Sfo,TN,Rfo,Pfo,MN,Bfo,Nfo,Ifo,gs,rie,qfo,jfo,EN,Dfo,Gfo,CN,Ofo,Vfo,Xfo,hs,tie,zfo,Qfo,wN,Wfo,Hfo,AN,Ufo,Jfo,Yfo,ps,aie,Kfo,Zfo,LN,emo,omo,yN,rmo,tmo,amo,_s,nie,nmo,smo,xN,lmo,imo,$N,dmo,cmo,fmo,us,sie,mmo,gmo,kN,hmo,pmo,SN,_mo,umo,bmo,_h,lie,vmo,Fmo,RN,Tmo,Mmo,Emo,bs,iie,Cmo,wmo,PN,Amo,Lmo,BN,ymo,xmo,$mo,uh,die,kmo,Smo,NN,Rmo,Pmo,Bmo,bh,cie,Nmo,Imo,IN,qmo,jmo,Dmo,vs,fie,Gmo,Omo,qN,Vmo,Xmo,jN,zmo,Qmo,Wmo,Fs,mie,Hmo,Umo,DN,Jmo,Ymo,GN,Kmo,Zmo,ego,Ts,gie,ogo,rgo,ON,tgo,ago,VN,ngo,sgo,lgo,vh,hie,igo,dgo,XN,cgo,fgo,mgo,Ms,pie,ggo,hgo,zN,pgo,_go,QN,ugo,bgo,vgo,Es,_ie,Fgo,Tgo,WN,Mgo,Ego,HN,Cgo,wgo,Ago,Cs,uie,Lgo,ygo,UN,xgo,$go,JN,kgo,Sgo,Rgo,ws,bie,Pgo,Bgo,YN,Ngo,Igo,KN,qgo,jgo,Dgo,As,vie,Ggo,Ogo,ZN,Vgo,Xgo,eI,zgo,Qgo,Wgo,Ls,Fie,Hgo,Ugo,oI,Jgo,Ygo,rI,Kgo,Zgo,eho,ys,Tie,oho,rho,tI,tho,aho,aI,nho,sho,lho,xs,Mie,iho,dho,nI,cho,fho,sI,mho,gho,hho,Fh,Eie,pho,_ho,lI,uho,bho,vho,$s,Cie,Fho,Tho,iI,Mho,Eho,dI,Cho,who,Aho,Th,wie,Lho,yho,cI,xho,$ho,kho,Mh,Aie,Sho,Rho,fI,Pho,Bho,Nho,Eh,Lie,Iho,qho,mI,jho,Dho,Gho,Ch,yie,Oho,Vho,gI,Xho,zho,Qho,ks,xie,Who,Hho,hI,Uho,Jho,pI,Yho,Kho,Zho,wh,$ie,epo,opo,_I,rpo,tpo,apo,Ss,kie,npo,spo,uI,lpo,ipo,bI,dpo,cpo,fpo,Rs,Sie,mpo,gpo,vI,hpo,ppo,FI,_po,upo,bpo,Ps,Rie,vpo,Fpo,TI,Tpo,Mpo,MI,Epo,Cpo,wpo,Bs,Pie,Apo,Lpo,EI,ypo,xpo,CI,$po,kpo,Spo,Ns,Bie,Rpo,Ppo,wI,Bpo,Npo,AI,Ipo,qpo,jpo,Is,Nie,Dpo,Gpo,LI,Opo,Vpo,yI,Xpo,zpo,Qpo,Ah,Iie,Wpo,Hpo,xI,Upo,Jpo,Ypo,Lh,qie,Kpo,Zpo,$I,e_o,o_o,r_o,qs,jie,t_o,a_o,kI,n_o,s_o,SI,l_o,i_o,d_o,js,Die,c_o,f_o,RI,m_o,g_o,PI,h_o,p_o,__o,Ds,Gie,u_o,b_o,BI,v_o,F_o,NI,T_o,M_o,E_o,yh,Oie,C_o,w_o,II,A_o,L_o,y_o,xh,Vie,x_o,$_o,qI,k_o,S_o,R_o,$h,Xie,P_o,B_o,jI,N_o,I_o,q_o,Gs,zie,j_o,D_o,DI,G_o,O_o,GI,V_o,X_o,z_o,Os,Qie,Q_o,W_o,OI,H_o,U_o,VI,J_o,Y_o,K_o,kh,Wie,Z_o,euo,XI,ouo,ruo,tuo,Sh,Hie,auo,nuo,zI,suo,luo,iuo,Rh,Uie,duo,cuo,QI,fuo,muo,guo,Vs,Jie,huo,puo,WI,_uo,uuo,HI,buo,vuo,Fuo,Ph,Yie,Tuo,Muo,UI,Euo,Cuo,wuo,Bh,Kie,Auo,Luo,JI,yuo,xuo,$uo,Xs,Zie,kuo,Suo,YI,Ruo,Puo,KI,Buo,Nuo,Iuo,zs,ede,quo,juo,ZI,Duo,Guo,eq,Ouo,Vuo,Xuo,Qs,ode,zuo,Quo,oq,Wuo,Huo,rq,Uuo,Juo,Yuo,Ws,rde,Kuo,Zuo,tq,e2o,o2o,aq,r2o,t2o,a2o,Nh,n2o,Ih,CL,s2o,tde,l2o,BXe,ji,qh,ade,wL,i2o,nde,d2o,NXe,yo,AL,c2o,LL,f2o,nq,m2o,g2o,h2o,yL,p2o,sde,_2o,u2o,b2o,Ue,xL,v2o,lde,F2o,T2o,Ba,M2o,ide,E2o,C2o,dde,w2o,A2o,cde,L2o,y2o,x2o,Y,jh,fde,$2o,k2o,sq,S2o,R2o,P2o,Dh,mde,B2o,N2o,lq,I2o,q2o,j2o,Gh,gde,D2o,G2o,iq,O2o,V2o,X2o,Oh,hde,z2o,Q2o,dq,W2o,H2o,U2o,Vh,pde,J2o,Y2o,cq,K2o,Z2o,e1o,Xh,_de,o1o,r1o,fq,t1o,a1o,n1o,zh,ude,s1o,l1o,mq,i1o,d1o,c1o,Qh,bde,f1o,m1o,gq,g1o,h1o,p1o,Wh,vde,_1o,u1o,hq,b1o,v1o,F1o,Hh,Fde,T1o,M1o,pq,E1o,C1o,w1o,Uh,Tde,A1o,L1o,_q,y1o,x1o,$1o,Jh,Mde,k1o,S1o,uq,R1o,P1o,B1o,Yh,Ede,N1o,I1o,bq,q1o,j1o,D1o,Kh,Cde,G1o,O1o,vq,V1o,X1o,z1o,Zh,wde,Q1o,W1o,Fq,H1o,U1o,J1o,ep,Ade,Y1o,K1o,Tq,Z1o,ebo,obo,op,Lde,rbo,tbo,Mq,abo,nbo,sbo,rp,yde,lbo,ibo,Eq,dbo,cbo,fbo,tp,xde,mbo,gbo,Cq,hbo,pbo,_bo,ap,$de,ubo,bbo,wq,vbo,Fbo,Tbo,np,kde,Mbo,Ebo,Aq,Cbo,wbo,Abo,sp,Sde,Lbo,ybo,Lq,xbo,$bo,kbo,lp,Rde,Sbo,Rbo,yq,Pbo,Bbo,Nbo,ip,Pde,Ibo,qbo,xq,jbo,Dbo,Gbo,dp,Bde,Obo,Vbo,$q,Xbo,zbo,Qbo,cp,Nde,Wbo,Hbo,kq,Ubo,Jbo,Ybo,fp,Ide,Kbo,Zbo,Sq,evo,ovo,rvo,mp,qde,tvo,avo,Rq,nvo,svo,lvo,gp,jde,ivo,dvo,Pq,cvo,fvo,mvo,hp,Dde,gvo,hvo,Bq,pvo,_vo,uvo,pp,Gde,bvo,vvo,Nq,Fvo,Tvo,Mvo,_p,Ode,Evo,Cvo,Iq,wvo,Avo,Lvo,up,Vde,yvo,xvo,qq,$vo,kvo,Svo,bp,Xde,Rvo,Pvo,jq,Bvo,Nvo,Ivo,vp,qvo,Fp,jvo,Tp,$L,Dvo,zde,Gvo,IXe,Di,Mp,Qde,kL,Ovo,Wde,Vvo,qXe,xo,SL,Xvo,RL,zvo,Dq,Qvo,Wvo,Hvo,PL,Uvo,Hde,Jvo,Yvo,Kvo,Je,BL,Zvo,Ude,eFo,oFo,Gi,rFo,Jde,tFo,aFo,Yde,nFo,sFo,lFo,pe,Ep,Kde,iFo,dFo,Gq,cFo,fFo,mFo,Cp,Zde,gFo,hFo,ece,pFo,_Fo,uFo,wp,oce,bFo,vFo,Oq,FFo,TFo,MFo,Ap,rce,EFo,CFo,Vq,wFo,AFo,LFo,Lp,tce,yFo,xFo,Xq,$Fo,kFo,SFo,yp,ace,RFo,PFo,zq,BFo,NFo,IFo,xp,nce,qFo,jFo,Qq,DFo,GFo,OFo,$p,sce,VFo,XFo,Wq,zFo,QFo,WFo,kp,lce,HFo,UFo,Hq,JFo,YFo,KFo,Sp,ice,ZFo,e6o,Uq,o6o,r6o,t6o,Rp,dce,a6o,n6o,Jq,s6o,l6o,i6o,Pp,cce,d6o,c6o,Yq,f6o,m6o,g6o,Bp,fce,h6o,p6o,Kq,_6o,u6o,b6o,Np,mce,v6o,F6o,Zq,T6o,M6o,E6o,Ip,gce,C6o,w6o,ej,A6o,L6o,y6o,qp,hce,x6o,$6o,oj,k6o,S6o,R6o,jp,pce,P6o,B6o,rj,N6o,I6o,q6o,Dp,_ce,j6o,D6o,tj,G6o,O6o,V6o,Gp,X6o,Op,z6o,Vp,NL,Q6o,uce,W6o,jXe,Oi,Xp,bce,IL,H6o,vce,U6o,DXe,$o,qL,J6o,Vi,Y6o,aj,K6o,Z6o,nj,eTo,oTo,rTo,jL,tTo,Fce,aTo,nTo,sTo,it,DL,lTo,Tce,iTo,dTo,Xi,cTo,Mce,fTo,mTo,sj,gTo,hTo,pTo,zp,_To,Ye,GL,uTo,Ece,bTo,vTo,Na,FTo,Cce,TTo,MTo,wce,ETo,CTo,Ace,wTo,ATo,LTo,y,Qp,Lce,yTo,xTo,lj,$To,kTo,STo,Wp,yce,RTo,PTo,ij,BTo,NTo,ITo,Hp,xce,qTo,jTo,dj,DTo,GTo,OTo,Up,$ce,VTo,XTo,cj,zTo,QTo,WTo,Jp,kce,HTo,UTo,fj,JTo,YTo,KTo,Yp,Sce,ZTo,e7o,mj,o7o,r7o,t7o,Kp,Rce,a7o,n7o,gj,s7o,l7o,i7o,Zp,Pce,d7o,c7o,hj,f7o,m7o,g7o,e_,Bce,h7o,p7o,pj,_7o,u7o,b7o,o_,Nce,v7o,F7o,_j,T7o,M7o,E7o,r_,Ice,C7o,w7o,uj,A7o,L7o,y7o,t_,qce,x7o,$7o,bj,k7o,S7o,R7o,a_,jce,P7o,B7o,vj,N7o,I7o,q7o,n_,Dce,j7o,D7o,Fj,G7o,O7o,V7o,s_,Gce,X7o,z7o,Tj,Q7o,W7o,H7o,l_,Oce,U7o,J7o,Mj,Y7o,K7o,Z7o,i_,Vce,e8o,o8o,Ej,r8o,t8o,a8o,d_,Xce,n8o,s8o,Cj,l8o,i8o,d8o,c_,zce,c8o,f8o,wj,m8o,g8o,h8o,f_,Qce,p8o,_8o,Aj,u8o,b8o,v8o,m_,Wce,F8o,T8o,Lj,M8o,E8o,C8o,g_,Hce,w8o,A8o,yj,L8o,y8o,x8o,h_,Uce,$8o,k8o,xj,S8o,R8o,P8o,p_,Jce,B8o,N8o,$j,I8o,q8o,j8o,__,Yce,D8o,G8o,kj,O8o,V8o,X8o,u_,Kce,z8o,Q8o,Sj,W8o,H8o,U8o,b_,Zce,J8o,Y8o,Rj,K8o,Z8o,eMo,v_,efe,oMo,rMo,Pj,tMo,aMo,nMo,F_,ofe,sMo,lMo,Bj,iMo,dMo,cMo,T_,rfe,fMo,mMo,Nj,gMo,hMo,pMo,M_,tfe,_Mo,uMo,Ij,bMo,vMo,FMo,E_,afe,TMo,MMo,qj,EMo,CMo,wMo,C_,nfe,AMo,LMo,jj,yMo,xMo,$Mo,w_,sfe,kMo,SMo,Dj,RMo,PMo,BMo,Hs,lfe,NMo,IMo,Gj,qMo,jMo,Oj,DMo,GMo,OMo,A_,ife,VMo,XMo,Vj,zMo,QMo,WMo,L_,dfe,HMo,UMo,Xj,JMo,YMo,KMo,y_,cfe,ZMo,e4o,zj,o4o,r4o,t4o,x_,ffe,a4o,n4o,Qj,s4o,l4o,i4o,$_,mfe,d4o,c4o,Wj,f4o,m4o,g4o,k_,gfe,h4o,p4o,Hj,_4o,u4o,b4o,S_,hfe,v4o,F4o,Uj,T4o,M4o,E4o,R_,pfe,C4o,w4o,Jj,A4o,L4o,y4o,P_,_fe,x4o,$4o,Yj,k4o,S4o,R4o,B_,ufe,P4o,B4o,bfe,N4o,I4o,q4o,N_,vfe,j4o,D4o,Kj,G4o,O4o,V4o,I_,Ffe,X4o,z4o,Zj,Q4o,W4o,H4o,q_,Tfe,U4o,J4o,eD,Y4o,K4o,Z4o,j_,Mfe,eEo,oEo,oD,rEo,tEo,aEo,D_,Efe,nEo,sEo,rD,lEo,iEo,dEo,G_,Cfe,cEo,fEo,tD,mEo,gEo,hEo,O_,wfe,pEo,_Eo,aD,uEo,bEo,vEo,V_,Afe,FEo,TEo,nD,MEo,EEo,CEo,X_,Lfe,wEo,AEo,sD,LEo,yEo,xEo,z_,yfe,$Eo,kEo,lD,SEo,REo,PEo,Q_,xfe,BEo,NEo,iD,IEo,qEo,jEo,W_,$fe,DEo,GEo,dD,OEo,VEo,XEo,H_,kfe,zEo,QEo,cD,WEo,HEo,UEo,U_,Sfe,JEo,YEo,fD,KEo,ZEo,eCo,J_,Rfe,oCo,rCo,mD,tCo,aCo,nCo,Y_,Pfe,sCo,lCo,gD,iCo,dCo,cCo,K_,Bfe,fCo,mCo,hD,gCo,hCo,pCo,Z_,Nfe,_Co,uCo,pD,bCo,vCo,FCo,eu,Ife,TCo,MCo,_D,ECo,CCo,wCo,ou,qfe,ACo,LCo,uD,yCo,xCo,$Co,ru,jfe,kCo,SCo,bD,RCo,PCo,BCo,tu,Dfe,NCo,ICo,vD,qCo,jCo,DCo,au,Gfe,GCo,OCo,FD,VCo,XCo,zCo,nu,Ofe,QCo,WCo,TD,HCo,UCo,JCo,su,Vfe,YCo,KCo,MD,ZCo,e5o,o5o,lu,Xfe,r5o,t5o,ED,a5o,n5o,s5o,iu,zfe,l5o,i5o,CD,d5o,c5o,f5o,du,Qfe,m5o,g5o,wD,h5o,p5o,_5o,cu,Wfe,u5o,b5o,AD,v5o,F5o,T5o,fu,Hfe,M5o,E5o,LD,C5o,w5o,A5o,mu,Ufe,L5o,y5o,yD,x5o,$5o,k5o,gu,Jfe,S5o,R5o,xD,P5o,B5o,N5o,hu,Yfe,I5o,q5o,$D,j5o,D5o,G5o,pu,Kfe,O5o,V5o,kD,X5o,z5o,Q5o,_u,Zfe,W5o,H5o,SD,U5o,J5o,Y5o,uu,eme,K5o,Z5o,RD,e3o,o3o,r3o,bu,ome,t3o,a3o,PD,n3o,s3o,l3o,vu,rme,i3o,d3o,BD,c3o,f3o,m3o,Fu,tme,g3o,h3o,ND,p3o,_3o,u3o,Tu,ame,b3o,v3o,ID,F3o,T3o,M3o,Mu,nme,E3o,C3o,qD,w3o,A3o,L3o,Eu,sme,y3o,x3o,jD,$3o,k3o,S3o,Cu,lme,R3o,P3o,DD,B3o,N3o,I3o,wu,ime,q3o,j3o,GD,D3o,G3o,O3o,Au,dme,V3o,X3o,OD,z3o,Q3o,W3o,Lu,cme,H3o,U3o,VD,J3o,Y3o,K3o,yu,fme,Z3o,e0o,XD,o0o,r0o,t0o,xu,mme,a0o,n0o,zD,s0o,l0o,i0o,$u,gme,d0o,c0o,QD,f0o,m0o,g0o,ku,hme,h0o,p0o,WD,_0o,u0o,b0o,Su,pme,v0o,F0o,HD,T0o,M0o,E0o,Ru,_me,C0o,w0o,UD,A0o,L0o,y0o,Pu,ume,x0o,$0o,JD,k0o,S0o,R0o,Bu,bme,P0o,B0o,YD,N0o,I0o,q0o,Nu,vme,j0o,D0o,KD,G0o,O0o,V0o,Iu,Fme,X0o,z0o,ZD,Q0o,W0o,H0o,qu,Tme,U0o,J0o,eG,Y0o,K0o,Z0o,ju,Mme,ewo,owo,oG,rwo,two,awo,Du,Eme,nwo,swo,rG,lwo,iwo,dwo,Gu,Cme,cwo,fwo,tG,mwo,gwo,hwo,Ou,wme,pwo,_wo,aG,uwo,bwo,vwo,Vu,Ame,Fwo,Two,nG,Mwo,Ewo,Cwo,Xu,Lme,wwo,Awo,sG,Lwo,ywo,xwo,zu,yme,$wo,kwo,lG,Swo,Rwo,Pwo,Qu,xme,Bwo,Nwo,iG,Iwo,qwo,jwo,Wu,$me,Dwo,Gwo,dG,Owo,Vwo,Xwo,Hu,kme,zwo,Qwo,cG,Wwo,Hwo,Uwo,Uu,Sme,Jwo,Ywo,fG,Kwo,Zwo,eAo,Ju,oAo,Rme,rAo,tAo,Pme,aAo,nAo,Yu,GXe,zi,Ku,Bme,OL,sAo,Nme,lAo,OXe,ko,VL,iAo,Qi,dAo,mG,cAo,fAo,gG,mAo,gAo,hAo,XL,pAo,Ime,_Ao,uAo,bAo,dt,zL,vAo,qme,FAo,TAo,Wi,MAo,jme,EAo,CAo,hG,wAo,AAo,LAo,Zu,yAo,Ke,QL,xAo,Dme,$Ao,kAo,Ia,SAo,Gme,RAo,PAo,Ome,BAo,NAo,Vme,IAo,qAo,jAo,G,e2,Xme,DAo,GAo,pG,OAo,VAo,XAo,o2,zme,zAo,QAo,_G,WAo,HAo,UAo,r2,Qme,JAo,YAo,uG,KAo,ZAo,eLo,t2,Wme,oLo,rLo,bG,tLo,aLo,nLo,a2,Hme,sLo,lLo,vG,iLo,dLo,cLo,n2,Ume,fLo,mLo,FG,gLo,hLo,pLo,s2,Jme,_Lo,uLo,TG,bLo,vLo,FLo,l2,Yme,TLo,MLo,MG,ELo,CLo,wLo,i2,Kme,ALo,LLo,EG,yLo,xLo,$Lo,d2,Zme,kLo,SLo,CG,RLo,PLo,BLo,c2,ege,NLo,ILo,wG,qLo,jLo,DLo,f2,oge,GLo,OLo,AG,VLo,XLo,zLo,m2,rge,QLo,WLo,LG,HLo,ULo,JLo,g2,tge,YLo,KLo,yG,ZLo,eyo,oyo,h2,age,ryo,tyo,xG,ayo,nyo,syo,p2,nge,lyo,iyo,$G,dyo,cyo,fyo,_2,sge,myo,gyo,kG,hyo,pyo,_yo,u2,lge,uyo,byo,SG,vyo,Fyo,Tyo,b2,ige,Myo,Eyo,RG,Cyo,wyo,Ayo,v2,dge,Lyo,yyo,PG,xyo,$yo,kyo,F2,cge,Syo,Ryo,BG,Pyo,Byo,Nyo,T2,fge,Iyo,qyo,NG,jyo,Dyo,Gyo,M2,mge,Oyo,Vyo,IG,Xyo,zyo,Qyo,E2,gge,Wyo,Hyo,qG,Uyo,Jyo,Yyo,C2,hge,Kyo,Zyo,jG,e9o,o9o,r9o,w2,pge,t9o,a9o,DG,n9o,s9o,l9o,A2,_ge,i9o,d9o,GG,c9o,f9o,m9o,L2,uge,g9o,h9o,OG,p9o,_9o,u9o,y2,bge,b9o,v9o,VG,F9o,T9o,M9o,x2,vge,E9o,C9o,XG,w9o,A9o,L9o,$2,Fge,y9o,x9o,zG,$9o,k9o,S9o,k2,Tge,R9o,P9o,QG,B9o,N9o,I9o,S2,Mge,q9o,j9o,WG,D9o,G9o,O9o,R2,Ege,V9o,X9o,HG,z9o,Q9o,W9o,P2,Cge,H9o,U9o,UG,J9o,Y9o,K9o,B2,wge,Z9o,exo,JG,oxo,rxo,txo,N2,Age,axo,nxo,YG,sxo,lxo,ixo,I2,Lge,dxo,cxo,KG,fxo,mxo,gxo,q2,yge,hxo,pxo,ZG,_xo,uxo,bxo,j2,xge,vxo,Fxo,eO,Txo,Mxo,Exo,D2,$ge,Cxo,wxo,oO,Axo,Lxo,yxo,G2,kge,xxo,$xo,rO,kxo,Sxo,Rxo,O2,Sge,Pxo,Bxo,tO,Nxo,Ixo,qxo,V2,Rge,jxo,Dxo,aO,Gxo,Oxo,Vxo,X2,Pge,Xxo,zxo,nO,Qxo,Wxo,Hxo,z2,Uxo,Bge,Jxo,Yxo,Nge,Kxo,Zxo,Q2,VXe,Hi,W2,Ige,WL,e$o,qge,o$o,XXe,So,HL,r$o,Ui,t$o,sO,a$o,n$o,lO,s$o,l$o,i$o,UL,d$o,jge,c$o,f$o,m$o,ct,JL,g$o,Dge,h$o,p$o,Ji,_$o,Gge,u$o,b$o,iO,v$o,F$o,T$o,H2,M$o,Ze,YL,E$o,Oge,C$o,w$o,qa,A$o,Vge,L$o,y$o,Xge,x$o,$$o,zge,k$o,S$o,R$o,z,U2,Qge,P$o,B$o,dO,N$o,I$o,q$o,J2,Wge,j$o,D$o,cO,G$o,O$o,V$o,Y2,Hge,X$o,z$o,fO,Q$o,W$o,H$o,K2,Uge,U$o,J$o,mO,Y$o,K$o,Z$o,Z2,Jge,eko,oko,gO,rko,tko,ako,e1,Yge,nko,sko,hO,lko,iko,dko,o1,Kge,cko,fko,pO,mko,gko,hko,r1,Zge,pko,_ko,_O,uko,bko,vko,t1,ehe,Fko,Tko,uO,Mko,Eko,Cko,a1,ohe,wko,Ako,bO,Lko,yko,xko,n1,rhe,$ko,kko,vO,Sko,Rko,Pko,s1,the,Bko,Nko,FO,Iko,qko,jko,l1,ahe,Dko,Gko,TO,Oko,Vko,Xko,i1,nhe,zko,Qko,MO,Wko,Hko,Uko,d1,she,Jko,Yko,EO,Kko,Zko,eSo,c1,lhe,oSo,rSo,CO,tSo,aSo,nSo,f1,ihe,sSo,lSo,wO,iSo,dSo,cSo,m1,dhe,fSo,mSo,AO,gSo,hSo,pSo,g1,che,_So,uSo,LO,bSo,vSo,FSo,h1,fhe,TSo,MSo,yO,ESo,CSo,wSo,p1,mhe,ASo,LSo,xO,ySo,xSo,$So,_1,ghe,kSo,SSo,$O,RSo,PSo,BSo,u1,hhe,NSo,ISo,kO,qSo,jSo,DSo,b1,phe,GSo,OSo,SO,VSo,XSo,zSo,v1,_he,QSo,WSo,RO,HSo,USo,JSo,F1,uhe,YSo,KSo,PO,ZSo,eRo,oRo,T1,bhe,rRo,tRo,BO,aRo,nRo,sRo,M1,vhe,lRo,iRo,NO,dRo,cRo,fRo,E1,Fhe,mRo,gRo,IO,hRo,pRo,_Ro,C1,The,uRo,bRo,qO,vRo,FRo,TRo,w1,Mhe,MRo,ERo,jO,CRo,wRo,ARo,A1,Ehe,LRo,yRo,DO,xRo,$Ro,kRo,L1,Che,SRo,RRo,GO,PRo,BRo,NRo,y1,whe,IRo,qRo,OO,jRo,DRo,GRo,x1,Ahe,ORo,VRo,VO,XRo,zRo,QRo,$1,Lhe,WRo,HRo,XO,URo,JRo,YRo,k1,yhe,KRo,ZRo,zO,ePo,oPo,rPo,S1,xhe,tPo,aPo,QO,nPo,sPo,lPo,R1,$he,iPo,dPo,WO,cPo,fPo,mPo,P1,khe,gPo,hPo,HO,pPo,_Po,uPo,B1,bPo,She,vPo,FPo,Rhe,TPo,MPo,N1,zXe,Yi,I1,Phe,KL,EPo,Bhe,CPo,QXe,Ro,ZL,wPo,Ki,APo,UO,LPo,yPo,JO,xPo,$Po,kPo,ey,SPo,Nhe,RPo,PPo,BPo,ft,oy,NPo,Ihe,IPo,qPo,Zi,jPo,qhe,DPo,GPo,YO,OPo,VPo,XPo,q1,zPo,eo,ry,QPo,jhe,WPo,HPo,ja,UPo,Dhe,JPo,YPo,Ghe,KPo,ZPo,Ohe,eBo,oBo,rBo,W,j1,Vhe,tBo,aBo,KO,nBo,sBo,lBo,D1,Xhe,iBo,dBo,ZO,cBo,fBo,mBo,G1,zhe,gBo,hBo,eV,pBo,_Bo,uBo,O1,Qhe,bBo,vBo,oV,FBo,TBo,MBo,V1,Whe,EBo,CBo,rV,wBo,ABo,LBo,X1,Hhe,yBo,xBo,tV,$Bo,kBo,SBo,z1,Uhe,RBo,PBo,aV,BBo,NBo,IBo,Q1,Jhe,qBo,jBo,nV,DBo,GBo,OBo,W1,Yhe,VBo,XBo,sV,zBo,QBo,WBo,H1,Khe,HBo,UBo,lV,JBo,YBo,KBo,U1,Zhe,ZBo,eNo,iV,oNo,rNo,tNo,J1,epe,aNo,nNo,dV,sNo,lNo,iNo,Y1,ope,dNo,cNo,cV,fNo,mNo,gNo,K1,rpe,hNo,pNo,fV,_No,uNo,bNo,Z1,tpe,vNo,FNo,mV,TNo,MNo,ENo,eb,ape,CNo,wNo,gV,ANo,LNo,yNo,ob,npe,xNo,$No,hV,kNo,SNo,RNo,rb,spe,PNo,BNo,pV,NNo,INo,qNo,tb,lpe,jNo,DNo,_V,GNo,ONo,VNo,ab,ipe,XNo,zNo,uV,QNo,WNo,HNo,nb,dpe,UNo,JNo,bV,YNo,KNo,ZNo,sb,cpe,eIo,oIo,vV,rIo,tIo,aIo,lb,fpe,nIo,sIo,FV,lIo,iIo,dIo,ib,mpe,cIo,fIo,TV,mIo,gIo,hIo,db,gpe,pIo,_Io,MV,uIo,bIo,vIo,cb,hpe,FIo,TIo,EV,MIo,EIo,CIo,fb,ppe,wIo,AIo,CV,LIo,yIo,xIo,mb,_pe,$Io,kIo,wV,SIo,RIo,PIo,gb,upe,BIo,NIo,AV,IIo,qIo,jIo,hb,bpe,DIo,GIo,LV,OIo,VIo,XIo,pb,vpe,zIo,QIo,yV,WIo,HIo,UIo,_b,Fpe,JIo,YIo,xV,KIo,ZIo,eqo,ub,Tpe,oqo,rqo,$V,tqo,aqo,nqo,bb,Mpe,sqo,lqo,Epe,iqo,dqo,cqo,vb,Cpe,fqo,mqo,kV,gqo,hqo,pqo,Fb,wpe,_qo,uqo,SV,bqo,vqo,Fqo,Tb,Ape,Tqo,Mqo,RV,Eqo,Cqo,wqo,Mb,Lpe,Aqo,Lqo,PV,yqo,xqo,$qo,Eb,kqo,ype,Sqo,Rqo,xpe,Pqo,Bqo,Cb,WXe,ed,wb,$pe,ty,Nqo,kpe,Iqo,HXe,Po,ay,qqo,od,jqo,BV,Dqo,Gqo,NV,Oqo,Vqo,Xqo,ny,zqo,Spe,Qqo,Wqo,Hqo,mt,sy,Uqo,Rpe,Jqo,Yqo,rd,Kqo,Ppe,Zqo,ejo,IV,ojo,rjo,tjo,Ab,ajo,oo,ly,njo,Bpe,sjo,ljo,Da,ijo,Npe,djo,cjo,Ipe,fjo,mjo,qpe,gjo,hjo,pjo,fe,Lb,jpe,_jo,ujo,qV,bjo,vjo,Fjo,yb,Dpe,Tjo,Mjo,jV,Ejo,Cjo,wjo,xb,Gpe,Ajo,Ljo,DV,yjo,xjo,$jo,$b,Ope,kjo,Sjo,GV,Rjo,Pjo,Bjo,kb,Vpe,Njo,Ijo,OV,qjo,jjo,Djo,Sb,Xpe,Gjo,Ojo,VV,Vjo,Xjo,zjo,Rb,zpe,Qjo,Wjo,XV,Hjo,Ujo,Jjo,Pb,Qpe,Yjo,Kjo,zV,Zjo,eDo,oDo,Bb,Wpe,rDo,tDo,QV,aDo,nDo,sDo,Nb,Hpe,lDo,iDo,WV,dDo,cDo,fDo,Ib,Upe,mDo,gDo,HV,hDo,pDo,_Do,qb,Jpe,uDo,bDo,UV,vDo,FDo,TDo,jb,Ype,MDo,EDo,JV,CDo,wDo,ADo,Db,Kpe,LDo,yDo,YV,xDo,$Do,kDo,Gb,Zpe,SDo,RDo,KV,PDo,BDo,NDo,Ob,e_e,IDo,qDo,ZV,jDo,DDo,GDo,Vb,o_e,ODo,VDo,eX,XDo,zDo,QDo,Xb,r_e,WDo,HDo,oX,UDo,JDo,YDo,zb,t_e,KDo,ZDo,rX,eGo,oGo,rGo,Qb,tGo,a_e,aGo,nGo,n_e,sGo,lGo,Wb,UXe,td,Hb,s_e,iy,iGo,l_e,dGo,JXe,Bo,dy,cGo,ad,fGo,tX,mGo,gGo,aX,hGo,pGo,_Go,cy,uGo,i_e,bGo,vGo,FGo,gt,fy,TGo,d_e,MGo,EGo,nd,CGo,c_e,wGo,AGo,nX,LGo,yGo,xGo,Ub,$Go,ro,my,kGo,f_e,SGo,RGo,Ga,PGo,m_e,BGo,NGo,g_e,IGo,qGo,h_e,jGo,DGo,GGo,B,Jb,p_e,OGo,VGo,sX,XGo,zGo,QGo,Yb,__e,WGo,HGo,lX,UGo,JGo,YGo,Kb,u_e,KGo,ZGo,iX,eOo,oOo,rOo,Zb,b_e,tOo,aOo,dX,nOo,sOo,lOo,ev,v_e,iOo,dOo,cX,cOo,fOo,mOo,ov,F_e,gOo,hOo,fX,pOo,_Oo,uOo,rv,T_e,bOo,vOo,mX,FOo,TOo,MOo,tv,M_e,EOo,COo,gX,wOo,AOo,LOo,av,E_e,yOo,xOo,hX,$Oo,kOo,SOo,nv,C_e,ROo,POo,pX,BOo,NOo,IOo,sv,w_e,qOo,jOo,_X,DOo,GOo,OOo,lv,A_e,VOo,XOo,uX,zOo,QOo,WOo,iv,L_e,HOo,UOo,bX,JOo,YOo,KOo,dv,y_e,ZOo,eVo,vX,oVo,rVo,tVo,cv,x_e,aVo,nVo,FX,sVo,lVo,iVo,fv,$_e,dVo,cVo,TX,fVo,mVo,gVo,mv,k_e,hVo,pVo,MX,_Vo,uVo,bVo,gv,S_e,vVo,FVo,EX,TVo,MVo,EVo,hv,R_e,CVo,wVo,CX,AVo,LVo,yVo,pv,P_e,xVo,$Vo,wX,kVo,SVo,RVo,_v,B_e,PVo,BVo,AX,NVo,IVo,qVo,uv,N_e,jVo,DVo,LX,GVo,OVo,VVo,bv,I_e,XVo,zVo,yX,QVo,WVo,HVo,vv,q_e,UVo,JVo,xX,YVo,KVo,ZVo,Fv,j_e,eXo,oXo,$X,rXo,tXo,aXo,Tv,D_e,nXo,sXo,kX,lXo,iXo,dXo,Mv,G_e,cXo,fXo,SX,mXo,gXo,hXo,Ev,O_e,pXo,_Xo,RX,uXo,bXo,vXo,Cv,V_e,FXo,TXo,PX,MXo,EXo,CXo,wv,X_e,wXo,AXo,BX,LXo,yXo,xXo,Av,z_e,$Xo,kXo,NX,SXo,RXo,PXo,Lv,Q_e,BXo,NXo,IX,IXo,qXo,jXo,yv,W_e,DXo,GXo,qX,OXo,VXo,XXo,xv,H_e,zXo,QXo,jX,WXo,HXo,UXo,$v,U_e,JXo,YXo,DX,KXo,ZXo,ezo,kv,J_e,ozo,rzo,GX,tzo,azo,nzo,Sv,Y_e,szo,lzo,OX,izo,dzo,czo,Rv,K_e,fzo,mzo,VX,gzo,hzo,pzo,Pv,Z_e,_zo,uzo,XX,bzo,vzo,Fzo,Bv,eue,Tzo,Mzo,zX,Ezo,Czo,wzo,Nv,oue,Azo,Lzo,QX,yzo,xzo,$zo,Iv,rue,kzo,Szo,WX,Rzo,Pzo,Bzo,qv,tue,Nzo,Izo,HX,qzo,jzo,Dzo,jv,aue,Gzo,Ozo,UX,Vzo,Xzo,zzo,Dv,nue,Qzo,Wzo,JX,Hzo,Uzo,Jzo,Gv,sue,Yzo,Kzo,YX,Zzo,eQo,oQo,Ov,lue,rQo,tQo,KX,aQo,nQo,sQo,Vv,iue,lQo,iQo,ZX,dQo,cQo,fQo,Xv,due,mQo,gQo,ez,hQo,pQo,_Qo,zv,cue,uQo,bQo,oz,vQo,FQo,TQo,Qv,fue,MQo,EQo,rz,CQo,wQo,AQo,Wv,LQo,mue,yQo,xQo,gue,$Qo,kQo,Hv,YXe,sd,Uv,hue,gy,SQo,pue,RQo,KXe,No,hy,PQo,ld,BQo,tz,NQo,IQo,az,qQo,jQo,DQo,py,GQo,_ue,OQo,VQo,XQo,ht,_y,zQo,uue,QQo,WQo,id,HQo,bue,UQo,JQo,nz,YQo,KQo,ZQo,Jv,eWo,to,uy,oWo,vue,rWo,tWo,Oa,aWo,Fue,nWo,sWo,Tue,lWo,iWo,Mue,dWo,cWo,fWo,Z,Yv,Eue,mWo,gWo,sz,hWo,pWo,_Wo,Kv,Cue,uWo,bWo,lz,vWo,FWo,TWo,Zv,wue,MWo,EWo,iz,CWo,wWo,AWo,eF,Aue,LWo,yWo,dz,xWo,$Wo,kWo,oF,Lue,SWo,RWo,cz,PWo,BWo,NWo,rF,yue,IWo,qWo,fz,jWo,DWo,GWo,tF,xue,OWo,VWo,mz,XWo,zWo,QWo,aF,$ue,WWo,HWo,gz,UWo,JWo,YWo,nF,kue,KWo,ZWo,hz,eHo,oHo,rHo,sF,Sue,tHo,aHo,pz,nHo,sHo,lHo,lF,Rue,iHo,dHo,_z,cHo,fHo,mHo,iF,Pue,gHo,hHo,uz,pHo,_Ho,uHo,dF,Bue,bHo,vHo,bz,FHo,THo,MHo,cF,Nue,EHo,CHo,vz,wHo,AHo,LHo,fF,Iue,yHo,xHo,Fz,$Ho,kHo,SHo,mF,que,RHo,PHo,Tz,BHo,NHo,IHo,gF,jue,qHo,jHo,Mz,DHo,GHo,OHo,hF,Due,VHo,XHo,Ez,zHo,QHo,WHo,pF,Gue,HHo,UHo,Cz,JHo,YHo,KHo,_F,Oue,ZHo,eUo,wz,oUo,rUo,tUo,uF,Vue,aUo,nUo,Az,sUo,lUo,iUo,bF,Xue,dUo,cUo,Lz,fUo,mUo,gUo,vF,zue,hUo,pUo,yz,_Uo,uUo,bUo,FF,Que,vUo,FUo,xz,TUo,MUo,EUo,TF,Wue,CUo,wUo,$z,AUo,LUo,yUo,MF,Hue,xUo,$Uo,kz,kUo,SUo,RUo,EF,Uue,PUo,BUo,Sz,NUo,IUo,qUo,CF,Jue,jUo,DUo,Rz,GUo,OUo,VUo,wF,Yue,XUo,zUo,Pz,QUo,WUo,HUo,AF,Kue,UUo,JUo,Bz,YUo,KUo,ZUo,LF,eJo,Zue,oJo,rJo,e2e,tJo,aJo,yF,ZXe,dd,xF,o2e,by,nJo,r2e,sJo,eze,Io,vy,lJo,cd,iJo,Nz,dJo,cJo,Iz,fJo,mJo,gJo,Fy,hJo,t2e,pJo,_Jo,uJo,pt,Ty,bJo,a2e,vJo,FJo,fd,TJo,n2e,MJo,EJo,qz,CJo,wJo,AJo,$F,LJo,ao,My,yJo,s2e,xJo,$Jo,Va,kJo,l2e,SJo,RJo,i2e,PJo,BJo,d2e,NJo,IJo,qJo,qo,kF,c2e,jJo,DJo,jz,GJo,OJo,VJo,SF,f2e,XJo,zJo,Dz,QJo,WJo,HJo,RF,m2e,UJo,JJo,Gz,YJo,KJo,ZJo,PF,g2e,eYo,oYo,Oz,rYo,tYo,aYo,BF,h2e,nYo,sYo,Vz,lYo,iYo,dYo,NF,p2e,cYo,fYo,Xz,mYo,gYo,hYo,IF,pYo,_2e,_Yo,uYo,u2e,bYo,vYo,qF,oze,md,jF,b2e,Ey,FYo,v2e,TYo,rze,jo,Cy,MYo,gd,EYo,zz,CYo,wYo,Qz,AYo,LYo,yYo,wy,xYo,F2e,$Yo,kYo,SYo,_t,Ay,RYo,T2e,PYo,BYo,hd,NYo,M2e,IYo,qYo,Wz,jYo,DYo,GYo,DF,OYo,no,Ly,VYo,E2e,XYo,zYo,Xa,QYo,C2e,WYo,HYo,w2e,UYo,JYo,A2e,YYo,KYo,ZYo,U,GF,L2e,eKo,oKo,Hz,rKo,tKo,aKo,OF,y2e,nKo,sKo,Uz,lKo,iKo,dKo,VF,x2e,cKo,fKo,Jz,mKo,gKo,hKo,XF,$2e,pKo,_Ko,Yz,uKo,bKo,vKo,zF,k2e,FKo,TKo,Kz,MKo,EKo,CKo,QF,S2e,wKo,AKo,Zz,LKo,yKo,xKo,WF,R2e,$Ko,kKo,eQ,SKo,RKo,PKo,HF,P2e,BKo,NKo,oQ,IKo,qKo,jKo,UF,B2e,DKo,GKo,rQ,OKo,VKo,XKo,JF,N2e,zKo,QKo,tQ,WKo,HKo,UKo,YF,I2e,JKo,YKo,aQ,KKo,ZKo,eZo,KF,q2e,oZo,rZo,nQ,tZo,aZo,nZo,ZF,j2e,sZo,lZo,sQ,iZo,dZo,cZo,e6,D2e,fZo,mZo,lQ,gZo,hZo,pZo,o6,G2e,_Zo,uZo,iQ,bZo,vZo,FZo,r6,O2e,TZo,MZo,dQ,EZo,CZo,wZo,t6,V2e,AZo,LZo,cQ,yZo,xZo,$Zo,a6,X2e,kZo,SZo,fQ,RZo,PZo,BZo,n6,z2e,NZo,IZo,mQ,qZo,jZo,DZo,s6,Q2e,GZo,OZo,gQ,VZo,XZo,zZo,l6,W2e,QZo,WZo,hQ,HZo,UZo,JZo,i6,H2e,YZo,KZo,pQ,ZZo,eer,oer,d6,U2e,rer,ter,_Q,aer,ner,ser,c6,J2e,ler,ier,uQ,der,cer,fer,f6,Y2e,mer,ger,bQ,her,per,_er,m6,K2e,uer,ber,vQ,ver,Fer,Ter,g6,Z2e,Mer,Eer,FQ,Cer,wer,Aer,h6,e1e,Ler,yer,TQ,xer,$er,ker,p6,o1e,Ser,Rer,MQ,Per,Ber,Ner,_6,r1e,Ier,qer,EQ,jer,Der,Ger,u6,t1e,Oer,Ver,CQ,Xer,zer,Qer,b6,a1e,Wer,Her,wQ,Uer,Jer,Yer,v6,n1e,Ker,Zer,AQ,eor,oor,ror,F6,s1e,tor,aor,LQ,nor,sor,lor,T6,l1e,ior,dor,yQ,cor,mor,gor,M6,i1e,hor,por,xQ,_or,uor,bor,E6,vor,d1e,For,Tor,c1e,Mor,Eor,C6,tze,pd,w6,f1e,yy,Cor,m1e,wor,aze,Do,xy,Aor,_d,Lor,$Q,yor,xor,kQ,$or,kor,Sor,$y,Ror,g1e,Por,Bor,Nor,ut,ky,Ior,h1e,qor,jor,ud,Dor,p1e,Gor,Oor,SQ,Vor,Xor,zor,A6,Qor,so,Sy,Wor,_1e,Hor,Uor,za,Jor,u1e,Yor,Kor,b1e,Zor,err,v1e,orr,rrr,trr,V,L6,F1e,arr,nrr,RQ,srr,lrr,irr,y6,T1e,drr,crr,PQ,frr,mrr,grr,x6,M1e,hrr,prr,BQ,_rr,urr,brr,$6,E1e,vrr,Frr,NQ,Trr,Mrr,Err,k6,C1e,Crr,wrr,IQ,Arr,Lrr,yrr,S6,w1e,xrr,$rr,qQ,krr,Srr,Rrr,R6,A1e,Prr,Brr,jQ,Nrr,Irr,qrr,P6,L1e,jrr,Drr,DQ,Grr,Orr,Vrr,B6,y1e,Xrr,zrr,GQ,Qrr,Wrr,Hrr,N6,x1e,Urr,Jrr,OQ,Yrr,Krr,Zrr,I6,$1e,etr,otr,VQ,rtr,ttr,atr,q6,k1e,ntr,str,XQ,ltr,itr,dtr,j6,S1e,ctr,ftr,zQ,mtr,gtr,htr,D6,R1e,ptr,_tr,QQ,utr,btr,vtr,G6,P1e,Ftr,Ttr,WQ,Mtr,Etr,Ctr,O6,B1e,wtr,Atr,HQ,Ltr,ytr,xtr,V6,N1e,$tr,ktr,UQ,Str,Rtr,Ptr,X6,I1e,Btr,Ntr,JQ,Itr,qtr,jtr,z6,q1e,Dtr,Gtr,YQ,Otr,Vtr,Xtr,Q6,j1e,ztr,Qtr,KQ,Wtr,Htr,Utr,W6,D1e,Jtr,Ytr,ZQ,Ktr,Ztr,ear,H6,G1e,oar,rar,eW,tar,aar,nar,U6,O1e,sar,lar,oW,iar,dar,car,J6,V1e,far,mar,rW,gar,har,par,Y6,X1e,_ar,uar,tW,bar,Far,Tar,K6,z1e,Mar,Ear,aW,Car,war,Aar,Z6,Q1e,Lar,yar,nW,xar,$ar,kar,eT,W1e,Sar,Rar,sW,Par,Bar,Nar,oT,H1e,Iar,qar,lW,jar,Dar,Gar,rT,U1e,Oar,Var,iW,Xar,zar,Qar,tT,J1e,War,Har,dW,Uar,Jar,Yar,aT,Y1e,Kar,Zar,cW,enr,onr,rnr,nT,K1e,tnr,anr,fW,nnr,snr,lnr,sT,Z1e,inr,dnr,mW,cnr,fnr,mnr,lT,ebe,gnr,hnr,gW,pnr,_nr,unr,iT,obe,bnr,vnr,hW,Fnr,Tnr,Mnr,dT,rbe,Enr,Cnr,pW,wnr,Anr,Lnr,cT,tbe,ynr,xnr,_W,$nr,knr,Snr,fT,abe,Rnr,Pnr,uW,Bnr,Nnr,Inr,mT,nbe,qnr,jnr,bW,Dnr,Gnr,Onr,gT,sbe,Vnr,Xnr,vW,znr,Qnr,Wnr,hT,lbe,Hnr,Unr,FW,Jnr,Ynr,Knr,pT,Znr,ibe,esr,osr,dbe,rsr,tsr,_T,nze,bd,uT,cbe,Ry,asr,fbe,nsr,sze,Go,Py,ssr,vd,lsr,TW,isr,dsr,MW,csr,fsr,msr,By,gsr,mbe,hsr,psr,_sr,bt,Ny,usr,gbe,bsr,vsr,Fd,Fsr,hbe,Tsr,Msr,EW,Esr,Csr,wsr,bT,Asr,lo,Iy,Lsr,pbe,ysr,xsr,Qa,$sr,_be,ksr,Ssr,ube,Rsr,Psr,bbe,Bsr,Nsr,Isr,vbe,vT,Fbe,qsr,jsr,CW,Dsr,Gsr,Osr,FT,Vsr,Tbe,Xsr,zsr,Mbe,Qsr,Wsr,TT,lze,Td,MT,Ebe,qy,Hsr,Cbe,Usr,ize,Oo,jy,Jsr,Md,Ysr,wW,Ksr,Zsr,AW,elr,olr,rlr,Dy,tlr,wbe,alr,nlr,slr,vt,Gy,llr,Abe,ilr,dlr,Ed,clr,Lbe,flr,mlr,LW,glr,hlr,plr,ET,_lr,io,Oy,ulr,ybe,blr,vlr,Wa,Flr,xbe,Tlr,Mlr,$be,Elr,Clr,kbe,wlr,Alr,Llr,ve,CT,Sbe,ylr,xlr,yW,$lr,klr,Slr,wT,Rbe,Rlr,Plr,xW,Blr,Nlr,Ilr,AT,Pbe,qlr,jlr,$W,Dlr,Glr,Olr,LT,Bbe,Vlr,Xlr,kW,zlr,Qlr,Wlr,Us,Nbe,Hlr,Ulr,SW,Jlr,Ylr,RW,Klr,Zlr,eir,yT,Ibe,oir,rir,PW,tir,air,nir,Js,qbe,sir,lir,BW,iir,dir,NW,cir,fir,mir,xT,jbe,gir,hir,IW,pir,_ir,uir,Ft,Dbe,bir,vir,qW,Fir,Tir,jW,Mir,Eir,DW,Cir,wir,Air,$T,Gbe,Lir,yir,GW,xir,$ir,kir,kT,Obe,Sir,Rir,OW,Pir,Bir,Nir,ST,Vbe,Iir,qir,VW,jir,Dir,Gir,RT,Xbe,Oir,Vir,XW,Xir,zir,Qir,PT,zbe,Wir,Hir,zW,Uir,Jir,Yir,BT,Qbe,Kir,Zir,QW,edr,odr,rdr,NT,Wbe,tdr,adr,WW,ndr,sdr,ldr,IT,idr,Hbe,ddr,cdr,Ube,fdr,mdr,qT,dze,Cd,jT,Jbe,Vy,gdr,Ybe,hdr,cze,Vo,Xy,pdr,wd,_dr,HW,udr,bdr,UW,vdr,Fdr,Tdr,zy,Mdr,Kbe,Edr,Cdr,wdr,Tt,Qy,Adr,Zbe,Ldr,ydr,Ad,xdr,eve,$dr,kdr,JW,Sdr,Rdr,Pdr,DT,Bdr,co,Wy,Ndr,ove,Idr,qdr,Ha,jdr,rve,Ddr,Gdr,tve,Odr,Vdr,ave,Xdr,zdr,Qdr,nve,GT,sve,Wdr,Hdr,YW,Udr,Jdr,Ydr,OT,Kdr,lve,Zdr,ecr,ive,ocr,rcr,VT,fze,Ld,XT,dve,Hy,tcr,cve,acr,mze,Xo,Uy,ncr,yd,scr,KW,lcr,icr,ZW,dcr,ccr,fcr,Jy,mcr,fve,gcr,hcr,pcr,Mt,Yy,_cr,mve,ucr,bcr,xd,vcr,gve,Fcr,Tcr,eH,Mcr,Ecr,Ccr,zT,wcr,fo,Ky,Acr,hve,Lcr,ycr,Ua,xcr,pve,$cr,kcr,_ve,Scr,Rcr,uve,Pcr,Bcr,Ncr,bve,QT,vve,Icr,qcr,oH,jcr,Dcr,Gcr,WT,Ocr,Fve,Vcr,Xcr,Tve,zcr,Qcr,HT,gze,$d,UT,Mve,Zy,Wcr,Eve,Hcr,hze,zo,e9,Ucr,kd,Jcr,rH,Ycr,Kcr,tH,Zcr,efr,ofr,o9,rfr,Cve,tfr,afr,nfr,Et,r9,sfr,wve,lfr,ifr,Sd,dfr,Ave,cfr,ffr,aH,mfr,gfr,hfr,JT,pfr,mo,t9,_fr,Lve,ufr,bfr,Ja,vfr,yve,Ffr,Tfr,xve,Mfr,Efr,$ve,Cfr,wfr,Afr,Pe,YT,kve,Lfr,yfr,nH,xfr,$fr,kfr,KT,Sve,Sfr,Rfr,sH,Pfr,Bfr,Nfr,ZT,Rve,Ifr,qfr,lH,jfr,Dfr,Gfr,e7,Pve,Ofr,Vfr,iH,Xfr,zfr,Qfr,o7,Bve,Wfr,Hfr,dH,Ufr,Jfr,Yfr,r7,Nve,Kfr,Zfr,cH,emr,omr,rmr,t7,Ive,tmr,amr,fH,nmr,smr,lmr,a7,qve,imr,dmr,mH,cmr,fmr,mmr,n7,jve,gmr,hmr,gH,pmr,_mr,umr,s7,bmr,Dve,vmr,Fmr,Gve,Tmr,Mmr,l7,pze,Rd,i7,Ove,a9,Emr,Vve,Cmr,_ze,Qo,n9,wmr,Pd,Amr,hH,Lmr,ymr,pH,xmr,$mr,kmr,s9,Smr,Xve,Rmr,Pmr,Bmr,Ct,l9,Nmr,zve,Imr,qmr,Bd,jmr,Qve,Dmr,Gmr,_H,Omr,Vmr,Xmr,d7,zmr,go,i9,Qmr,Wve,Wmr,Hmr,Ya,Umr,Hve,Jmr,Ymr,Uve,Kmr,Zmr,Jve,egr,ogr,rgr,rt,c7,Yve,tgr,agr,uH,ngr,sgr,lgr,f7,Kve,igr,dgr,bH,cgr,fgr,mgr,m7,Zve,ggr,hgr,vH,pgr,_gr,ugr,g7,eFe,bgr,vgr,FH,Fgr,Tgr,Mgr,h7,oFe,Egr,Cgr,TH,wgr,Agr,Lgr,p7,ygr,rFe,xgr,$gr,tFe,kgr,Sgr,_7,uze,Nd,u7,aFe,d9,Rgr,nFe,Pgr,bze,Wo,c9,Bgr,Id,Ngr,MH,Igr,qgr,EH,jgr,Dgr,Ggr,f9,Ogr,sFe,Vgr,Xgr,zgr,wt,m9,Qgr,lFe,Wgr,Hgr,qd,Ugr,iFe,Jgr,Ygr,CH,Kgr,Zgr,ehr,b7,ohr,ho,g9,rhr,dFe,thr,ahr,Ka,nhr,cFe,shr,lhr,fFe,ihr,dhr,mFe,chr,fhr,mhr,Le,v7,gFe,ghr,hhr,wH,phr,_hr,uhr,F7,hFe,bhr,vhr,AH,Fhr,Thr,Mhr,T7,pFe,Ehr,Chr,LH,whr,Ahr,Lhr,M7,_Fe,yhr,xhr,yH,$hr,khr,Shr,E7,uFe,Rhr,Phr,xH,Bhr,Nhr,Ihr,C7,bFe,qhr,jhr,$H,Dhr,Ghr,Ohr,w7,vFe,Vhr,Xhr,kH,zhr,Qhr,Whr,A7,FFe,Hhr,Uhr,SH,Jhr,Yhr,Khr,L7,TFe,Zhr,epr,RH,opr,rpr,tpr,y7,MFe,apr,npr,PH,spr,lpr,ipr,x7,dpr,EFe,cpr,fpr,CFe,mpr,gpr,$7,vze,jd,k7,wFe,h9,hpr,AFe,ppr,Fze,Ho,p9,_pr,Dd,upr,BH,bpr,vpr,NH,Fpr,Tpr,Mpr,_9,Epr,LFe,Cpr,wpr,Apr,At,u9,Lpr,yFe,ypr,xpr,Gd,$pr,xFe,kpr,Spr,IH,Rpr,Ppr,Bpr,S7,Npr,po,b9,Ipr,$Fe,qpr,jpr,Za,Dpr,kFe,Gpr,Opr,SFe,Vpr,Xpr,RFe,zpr,Qpr,Wpr,v9,R7,PFe,Hpr,Upr,qH,Jpr,Ypr,Kpr,P7,BFe,Zpr,e_r,jH,o_r,r_r,t_r,B7,a_r,NFe,n_r,s_r,IFe,l_r,i_r,N7,Tze,Od,I7,qFe,F9,d_r,jFe,c_r,Mze,Uo,T9,f_r,Vd,m_r,DH,g_r,h_r,GH,p_r,__r,u_r,M9,b_r,DFe,v_r,F_r,T_r,Lt,E9,M_r,GFe,E_r,C_r,Xd,w_r,OFe,A_r,L_r,OH,y_r,x_r,$_r,q7,k_r,_o,C9,S_r,VFe,R_r,P_r,en,B_r,XFe,N_r,I_r,zFe,q_r,j_r,QFe,D_r,G_r,O_r,tt,j7,WFe,V_r,X_r,VH,z_r,Q_r,W_r,D7,HFe,H_r,U_r,XH,J_r,Y_r,K_r,G7,UFe,Z_r,eur,zH,our,rur,tur,O7,JFe,aur,nur,QH,sur,lur,iur,V7,YFe,dur,cur,WH,fur,mur,gur,X7,hur,KFe,pur,_ur,ZFe,uur,bur,z7,Eze,zd,Q7,e6e,w9,vur,o6e,Fur,Cze,Jo,A9,Tur,Qd,Mur,HH,Eur,Cur,UH,wur,Aur,Lur,L9,yur,r6e,xur,$ur,kur,yt,y9,Sur,t6e,Rur,Pur,Wd,Bur,a6e,Nur,Iur,JH,qur,jur,Dur,W7,Gur,uo,x9,Our,n6e,Vur,Xur,on,zur,s6e,Qur,Wur,l6e,Hur,Uur,i6e,Jur,Yur,Kur,Hd,H7,d6e,Zur,e2r,YH,o2r,r2r,t2r,U7,c6e,a2r,n2r,KH,s2r,l2r,i2r,J7,f6e,d2r,c2r,ZH,f2r,m2r,g2r,Y7,h2r,m6e,p2r,_2r,g6e,u2r,b2r,K7,wze,Ud,Z7,h6e,$9,v2r,p6e,F2r,Aze,Yo,k9,T2r,Jd,M2r,eU,E2r,C2r,oU,w2r,A2r,L2r,S9,y2r,_6e,x2r,$2r,k2r,xt,R9,S2r,u6e,R2r,P2r,Yd,B2r,b6e,N2r,I2r,rU,q2r,j2r,D2r,e8,G2r,bo,P9,O2r,v6e,V2r,X2r,rn,z2r,F6e,Q2r,W2r,T6e,H2r,U2r,M6e,J2r,Y2r,K2r,B9,o8,E6e,Z2r,e1r,tU,o1r,r1r,t1r,r8,C6e,a1r,n1r,aU,s1r,l1r,i1r,t8,d1r,w6e,c1r,f1r,A6e,m1r,g1r,a8,Lze,Kd,n8,L6e,N9,h1r,y6e,p1r,yze,Ko,I9,_1r,Zd,u1r,nU,b1r,v1r,sU,F1r,T1r,M1r,q9,E1r,x6e,C1r,w1r,A1r,$t,j9,L1r,$6e,y1r,x1r,ec,$1r,k6e,k1r,S1r,lU,R1r,P1r,B1r,s8,N1r,vo,D9,I1r,S6e,q1r,j1r,tn,D1r,R6e,G1r,O1r,P6e,V1r,X1r,B6e,z1r,Q1r,W1r,N6e,l8,I6e,H1r,U1r,iU,J1r,Y1r,K1r,i8,Z1r,q6e,ebr,obr,j6e,rbr,tbr,d8,xze,oc,c8,D6e,G9,abr,G6e,nbr,$ze,Zo,O9,sbr,rc,lbr,dU,ibr,dbr,cU,cbr,fbr,mbr,V9,gbr,O6e,hbr,pbr,_br,kt,X9,ubr,V6e,bbr,vbr,tc,Fbr,X6e,Tbr,Mbr,fU,Ebr,Cbr,wbr,f8,Abr,Fo,z9,Lbr,z6e,ybr,xbr,an,$br,Q6e,kbr,Sbr,W6e,Rbr,Pbr,H6e,Bbr,Nbr,Ibr,at,m8,U6e,qbr,jbr,mU,Dbr,Gbr,Obr,g8,J6e,Vbr,Xbr,gU,zbr,Qbr,Wbr,h8,Y6e,Hbr,Ubr,hU,Jbr,Ybr,Kbr,p8,K6e,Zbr,evr,pU,ovr,rvr,tvr,_8,Z6e,avr,nvr,_U,svr,lvr,ivr,u8,dvr,eTe,cvr,fvr,oTe,mvr,gvr,b8,kze,ac,v8,rTe,Q9,hvr,tTe,pvr,Sze,er,W9,_vr,nc,uvr,uU,bvr,vvr,bU,Fvr,Tvr,Mvr,H9,Evr,aTe,Cvr,wvr,Avr,St,U9,Lvr,nTe,yvr,xvr,sc,$vr,sTe,kvr,Svr,vU,Rvr,Pvr,Bvr,F8,Nvr,To,J9,Ivr,lTe,qvr,jvr,nn,Dvr,iTe,Gvr,Ovr,dTe,Vvr,Xvr,cTe,zvr,Qvr,Wvr,fTe,T8,mTe,Hvr,Uvr,FU,Jvr,Yvr,Kvr,M8,Zvr,gTe,eFr,oFr,hTe,rFr,tFr,E8,Rze,lc,C8,pTe,Y9,aFr,_Te,nFr,Pze,or,K9,sFr,ic,lFr,TU,iFr,dFr,MU,cFr,fFr,mFr,Z9,gFr,uTe,hFr,pFr,_Fr,Rt,ex,uFr,bTe,bFr,vFr,dc,FFr,vTe,TFr,MFr,EU,EFr,CFr,wFr,w8,AFr,xr,ox,LFr,FTe,yFr,xFr,sn,$Fr,TTe,kFr,SFr,MTe,RFr,PFr,ETe,BFr,NFr,IFr,q,A8,CTe,qFr,jFr,CU,DFr,GFr,OFr,L8,wTe,VFr,XFr,wU,zFr,QFr,WFr,y8,ATe,HFr,UFr,AU,JFr,YFr,KFr,x8,LTe,ZFr,e6r,LU,o6r,r6r,t6r,$8,yTe,a6r,n6r,yU,s6r,l6r,i6r,k8,xTe,d6r,c6r,xU,f6r,m6r,g6r,S8,$Te,h6r,p6r,$U,_6r,u6r,b6r,R8,kTe,v6r,F6r,kU,T6r,M6r,E6r,P8,STe,C6r,w6r,SU,A6r,L6r,y6r,B8,RTe,x6r,$6r,RU,k6r,S6r,R6r,N8,PTe,P6r,B6r,PU,N6r,I6r,q6r,I8,BTe,j6r,D6r,BU,G6r,O6r,V6r,q8,NTe,X6r,z6r,NU,Q6r,W6r,H6r,j8,ITe,U6r,J6r,IU,Y6r,K6r,Z6r,D8,qTe,eTr,oTr,qU,rTr,tTr,aTr,G8,jTe,nTr,sTr,jU,lTr,iTr,dTr,O8,DTe,cTr,fTr,DU,mTr,gTr,hTr,V8,GTe,pTr,_Tr,GU,uTr,bTr,vTr,Ys,OTe,FTr,TTr,OU,MTr,ETr,VU,CTr,wTr,ATr,X8,VTe,LTr,yTr,XU,xTr,$Tr,kTr,z8,XTe,STr,RTr,zU,PTr,BTr,NTr,Q8,zTe,ITr,qTr,QU,jTr,DTr,GTr,W8,QTe,OTr,VTr,WU,XTr,zTr,QTr,H8,WTe,WTr,HTr,HU,UTr,JTr,YTr,U8,HTe,KTr,ZTr,UU,e7r,o7r,r7r,J8,UTe,t7r,a7r,JU,n7r,s7r,l7r,Y8,JTe,i7r,d7r,YU,c7r,f7r,m7r,K8,YTe,g7r,h7r,KU,p7r,_7r,u7r,Z8,KTe,b7r,v7r,ZU,F7r,T7r,M7r,eM,ZTe,E7r,C7r,eJ,w7r,A7r,L7r,oM,e7e,y7r,x7r,oJ,$7r,k7r,S7r,rM,o7e,R7r,P7r,rJ,B7r,N7r,I7r,tM,r7e,q7r,j7r,tJ,D7r,G7r,O7r,aM,t7e,V7r,X7r,aJ,z7r,Q7r,W7r,nM,a7e,H7r,U7r,nJ,J7r,Y7r,K7r,sM,n7e,Z7r,e8r,sJ,o8r,r8r,t8r,lM,s7e,a8r,n8r,lJ,s8r,l8r,i8r,iM,l7e,d8r,c8r,iJ,f8r,m8r,g8r,dM,i7e,h8r,p8r,dJ,_8r,u8r,b8r,cM,d7e,v8r,F8r,cJ,T8r,M8r,E8r,fM,c7e,C8r,w8r,fJ,A8r,L8r,y8r,mM,f7e,x8r,$8r,mJ,k8r,S8r,R8r,gM,m7e,P8r,B8r,gJ,N8r,I8r,q8r,hM,g7e,j8r,D8r,hJ,G8r,O8r,V8r,pM,h7e,X8r,z8r,pJ,Q8r,W8r,H8r,_M,p7e,U8r,J8r,_J,Y8r,K8r,Z8r,uM,_7e,eMr,oMr,uJ,rMr,tMr,aMr,bM,u7e,nMr,sMr,bJ,lMr,iMr,dMr,vM,b7e,cMr,fMr,vJ,mMr,gMr,hMr,FM,v7e,pMr,_Mr,FJ,uMr,bMr,vMr,TM,Bze,cc,MM,F7e,rx,FMr,T7e,TMr,Nze,rr,tx,MMr,fc,EMr,TJ,CMr,wMr,MJ,AMr,LMr,yMr,ax,xMr,M7e,$Mr,kMr,SMr,Pt,nx,RMr,E7e,PMr,BMr,mc,NMr,C7e,IMr,qMr,EJ,jMr,DMr,GMr,EM,OMr,$r,sx,VMr,w7e,XMr,zMr,ln,QMr,A7e,WMr,HMr,L7e,UMr,JMr,y7e,YMr,KMr,ZMr,se,CM,x7e,e4r,o4r,CJ,r4r,t4r,a4r,wM,$7e,n4r,s4r,wJ,l4r,i4r,d4r,AM,k7e,c4r,f4r,AJ,m4r,g4r,h4r,LM,S7e,p4r,_4r,LJ,u4r,b4r,v4r,yM,R7e,F4r,T4r,yJ,M4r,E4r,C4r,xM,P7e,w4r,A4r,xJ,L4r,y4r,x4r,$M,B7e,$4r,k4r,$J,S4r,R4r,P4r,kM,N7e,B4r,N4r,kJ,I4r,q4r,j4r,SM,I7e,D4r,G4r,SJ,O4r,V4r,X4r,RM,q7e,z4r,Q4r,RJ,W4r,H4r,U4r,PM,j7e,J4r,Y4r,PJ,K4r,Z4r,eEr,BM,D7e,oEr,rEr,BJ,tEr,aEr,nEr,NM,G7e,sEr,lEr,NJ,iEr,dEr,cEr,IM,O7e,fEr,mEr,IJ,gEr,hEr,pEr,qM,V7e,_Er,uEr,qJ,bEr,vEr,FEr,jM,X7e,TEr,MEr,jJ,EEr,CEr,wEr,DM,z7e,AEr,LEr,DJ,yEr,xEr,$Er,GM,Q7e,kEr,SEr,GJ,REr,PEr,BEr,OM,W7e,NEr,IEr,OJ,qEr,jEr,DEr,VM,H7e,GEr,OEr,VJ,VEr,XEr,zEr,XM,U7e,QEr,WEr,XJ,HEr,UEr,JEr,zM,J7e,YEr,KEr,zJ,ZEr,eCr,oCr,QM,Y7e,rCr,tCr,QJ,aCr,nCr,sCr,WM,Ize,gc,HM,K7e,lx,lCr,Z7e,iCr,qze,tr,ix,dCr,hc,cCr,WJ,fCr,mCr,HJ,gCr,hCr,pCr,dx,_Cr,e8e,uCr,bCr,vCr,Bt,cx,FCr,o8e,TCr,MCr,pc,ECr,r8e,CCr,wCr,UJ,ACr,LCr,yCr,UM,xCr,kr,fx,$Cr,t8e,kCr,SCr,dn,RCr,a8e,PCr,BCr,n8e,NCr,ICr,s8e,qCr,jCr,DCr,Me,JM,l8e,GCr,OCr,JJ,VCr,XCr,zCr,YM,i8e,QCr,WCr,YJ,HCr,UCr,JCr,KM,d8e,YCr,KCr,KJ,ZCr,e5r,o5r,ZM,c8e,r5r,t5r,ZJ,a5r,n5r,s5r,e4,f8e,l5r,i5r,eY,d5r,c5r,f5r,o4,m8e,m5r,g5r,oY,h5r,p5r,_5r,r4,g8e,u5r,b5r,rY,v5r,F5r,T5r,t4,h8e,M5r,E5r,tY,C5r,w5r,A5r,a4,p8e,L5r,y5r,aY,x5r,$5r,k5r,n4,_8e,S5r,R5r,nY,P5r,B5r,N5r,s4,u8e,I5r,q5r,sY,j5r,D5r,G5r,l4,b8e,O5r,V5r,lY,X5r,z5r,Q5r,i4,v8e,W5r,H5r,iY,U5r,J5r,Y5r,d4,jze,_c,c4,F8e,mx,K5r,T8e,Z5r,Dze,ar,gx,e3r,uc,o3r,dY,r3r,t3r,cY,a3r,n3r,s3r,hx,l3r,M8e,i3r,d3r,c3r,Nt,px,f3r,E8e,m3r,g3r,bc,h3r,C8e,p3r,_3r,fY,u3r,b3r,v3r,f4,F3r,Sr,_x,T3r,w8e,M3r,E3r,cn,C3r,A8e,w3r,A3r,L8e,L3r,y3r,y8e,x3r,$3r,k3r,Qe,m4,x8e,S3r,R3r,mY,P3r,B3r,N3r,g4,$8e,I3r,q3r,gY,j3r,D3r,G3r,Ks,k8e,O3r,V3r,hY,X3r,z3r,pY,Q3r,W3r,H3r,h4,S8e,U3r,J3r,_Y,Y3r,K3r,Z3r,p4,R8e,e0r,o0r,uY,r0r,t0r,a0r,_4,P8e,n0r,s0r,bY,l0r,i0r,d0r,u4,B8e,c0r,f0r,vY,m0r,g0r,h0r,b4,Gze,vc,v4,N8e,ux,p0r,I8e,_0r,Oze,nr,bx,u0r,Fc,b0r,FY,v0r,F0r,TY,T0r,M0r,E0r,vx,C0r,q8e,w0r,A0r,L0r,It,Fx,y0r,j8e,x0r,$0r,Tc,k0r,D8e,S0r,R0r,MY,P0r,B0r,N0r,F4,I0r,Rr,Tx,q0r,G8e,j0r,D0r,fn,G0r,O8e,O0r,V0r,V8e,X0r,z0r,X8e,Q0r,W0r,H0r,ie,T4,z8e,U0r,J0r,EY,Y0r,K0r,Z0r,M4,Q8e,ewr,owr,CY,rwr,twr,awr,E4,W8e,nwr,swr,wY,lwr,iwr,dwr,C4,H8e,cwr,fwr,AY,mwr,gwr,hwr,w4,U8e,pwr,_wr,LY,uwr,bwr,vwr,A4,J8e,Fwr,Twr,yY,Mwr,Ewr,Cwr,L4,Y8e,wwr,Awr,xY,Lwr,ywr,xwr,y4,K8e,$wr,kwr,$Y,Swr,Rwr,Pwr,x4,Z8e,Bwr,Nwr,kY,Iwr,qwr,jwr,$4,eMe,Dwr,Gwr,SY,Owr,Vwr,Xwr,k4,oMe,zwr,Qwr,RY,Wwr,Hwr,Uwr,S4,rMe,Jwr,Ywr,PY,Kwr,Zwr,eAr,R4,tMe,oAr,rAr,BY,tAr,aAr,nAr,P4,aMe,sAr,lAr,NY,iAr,dAr,cAr,B4,nMe,fAr,mAr,IY,gAr,hAr,pAr,N4,sMe,_Ar,uAr,qY,bAr,vAr,FAr,I4,lMe,TAr,MAr,jY,EAr,CAr,wAr,q4,iMe,AAr,LAr,DY,yAr,xAr,$Ar,j4,dMe,kAr,SAr,GY,RAr,PAr,BAr,D4,cMe,NAr,IAr,OY,qAr,jAr,DAr,G4,Vze,Mc,O4,fMe,Mx,GAr,mMe,OAr,Xze,sr,Ex,VAr,Ec,XAr,VY,zAr,QAr,XY,WAr,HAr,UAr,Cx,JAr,gMe,YAr,KAr,ZAr,qt,wx,eLr,hMe,oLr,rLr,Cc,tLr,pMe,aLr,nLr,zY,sLr,lLr,iLr,V4,dLr,Pr,Ax,cLr,_Me,fLr,mLr,mn,gLr,uMe,hLr,pLr,bMe,_Lr,uLr,vMe,bLr,vLr,FLr,ye,X4,FMe,TLr,MLr,QY,ELr,CLr,wLr,z4,TMe,ALr,LLr,WY,yLr,xLr,$Lr,Q4,MMe,kLr,SLr,HY,RLr,PLr,BLr,W4,EMe,NLr,ILr,UY,qLr,jLr,DLr,H4,CMe,GLr,OLr,JY,VLr,XLr,zLr,U4,wMe,QLr,WLr,YY,HLr,ULr,JLr,J4,AMe,YLr,KLr,KY,ZLr,eyr,oyr,Y4,LMe,ryr,tyr,ZY,ayr,nyr,syr,K4,yMe,lyr,iyr,eK,dyr,cyr,fyr,Z4,xMe,myr,gyr,oK,hyr,pyr,_yr,eE,zze,wc,oE,$Me,Lx,uyr,kMe,byr,Qze,lr,yx,vyr,Ac,Fyr,rK,Tyr,Myr,tK,Eyr,Cyr,wyr,xx,Ayr,SMe,Lyr,yyr,xyr,jt,$x,$yr,RMe,kyr,Syr,Lc,Ryr,PMe,Pyr,Byr,aK,Nyr,Iyr,qyr,rE,jyr,Br,kx,Dyr,BMe,Gyr,Oyr,gn,Vyr,NMe,Xyr,zyr,IMe,Qyr,Wyr,qMe,Hyr,Uyr,Jyr,te,tE,jMe,Yyr,Kyr,nK,Zyr,e9r,o9r,aE,DMe,r9r,t9r,sK,a9r,n9r,s9r,nE,GMe,l9r,i9r,lK,d9r,c9r,f9r,sE,OMe,m9r,g9r,iK,h9r,p9r,_9r,lE,VMe,u9r,b9r,dK,v9r,F9r,T9r,iE,XMe,M9r,E9r,cK,C9r,w9r,A9r,dE,zMe,L9r,y9r,fK,x9r,$9r,k9r,cE,QMe,S9r,R9r,mK,P9r,B9r,N9r,fE,WMe,I9r,q9r,gK,j9r,D9r,G9r,mE,HMe,O9r,V9r,hK,X9r,z9r,Q9r,gE,UMe,W9r,H9r,pK,U9r,J9r,Y9r,hE,JMe,K9r,Z9r,_K,exr,oxr,rxr,pE,YMe,txr,axr,uK,nxr,sxr,lxr,_E,KMe,ixr,dxr,bK,cxr,fxr,mxr,uE,ZMe,gxr,hxr,vK,pxr,_xr,uxr,bE,e4e,bxr,vxr,FK,Fxr,Txr,Mxr,vE,o4e,Exr,Cxr,TK,wxr,Axr,Lxr,FE,r4e,yxr,xxr,MK,$xr,kxr,Sxr,TE,t4e,Rxr,Pxr,EK,Bxr,Nxr,Ixr,ME,a4e,qxr,jxr,CK,Dxr,Gxr,Oxr,EE,n4e,Vxr,Xxr,wK,zxr,Qxr,Wxr,CE,s4e,Hxr,Uxr,AK,Jxr,Yxr,Kxr,wE,l4e,Zxr,e$r,LK,o$r,r$r,t$r,AE,i4e,a$r,n$r,yK,s$r,l$r,i$r,LE,d4e,d$r,c$r,xK,f$r,m$r,g$r,yE,c4e,h$r,p$r,$K,_$r,u$r,b$r,xE,Wze,yc,$E,f4e,Sx,v$r,m4e,F$r,Hze,ir,Rx,T$r,xc,M$r,kK,E$r,C$r,SK,w$r,A$r,L$r,Px,y$r,g4e,x$r,$$r,k$r,Dt,Bx,S$r,h4e,R$r,P$r,$c,B$r,p4e,N$r,I$r,RK,q$r,j$r,D$r,kE,G$r,Nr,Nx,O$r,_4e,V$r,X$r,hn,z$r,u4e,Q$r,W$r,b4e,H$r,U$r,v4e,J$r,Y$r,K$r,ue,SE,F4e,Z$r,ekr,PK,okr,rkr,tkr,RE,T4e,akr,nkr,BK,skr,lkr,ikr,PE,M4e,dkr,ckr,NK,fkr,mkr,gkr,BE,E4e,hkr,pkr,IK,_kr,ukr,bkr,NE,C4e,vkr,Fkr,qK,Tkr,Mkr,Ekr,IE,w4e,Ckr,wkr,jK,Akr,Lkr,ykr,qE,A4e,xkr,$kr,DK,kkr,Skr,Rkr,jE,L4e,Pkr,Bkr,GK,Nkr,Ikr,qkr,DE,y4e,jkr,Dkr,OK,Gkr,Okr,Vkr,GE,x4e,Xkr,zkr,VK,Qkr,Wkr,Hkr,OE,$4e,Ukr,Jkr,XK,Ykr,Kkr,Zkr,VE,k4e,eSr,oSr,zK,rSr,tSr,aSr,XE,S4e,nSr,sSr,QK,lSr,iSr,dSr,zE,R4e,cSr,fSr,WK,mSr,gSr,hSr,QE,P4e,pSr,_Sr,HK,uSr,bSr,vSr,WE,B4e,FSr,TSr,UK,MSr,ESr,CSr,HE,N4e,wSr,ASr,JK,LSr,ySr,xSr,UE,Uze,kc,JE,I4e,Ix,$Sr,q4e,kSr,Jze,dr,qx,SSr,Sc,RSr,YK,PSr,BSr,KK,NSr,ISr,qSr,jx,jSr,j4e,DSr,GSr,OSr,Gt,Dx,VSr,D4e,XSr,zSr,Rc,QSr,G4e,WSr,HSr,ZK,USr,JSr,YSr,YE,KSr,Ir,Gx,ZSr,O4e,eRr,oRr,pn,rRr,V4e,tRr,aRr,X4e,nRr,sRr,z4e,lRr,iRr,dRr,Ox,KE,Q4e,cRr,fRr,eZ,mRr,gRr,hRr,ZE,W4e,pRr,_Rr,oZ,uRr,bRr,vRr,eC,Yze,Pc,oC,H4e,Vx,FRr,U4e,TRr,Kze,cr,Xx,MRr,Bc,ERr,rZ,CRr,wRr,tZ,ARr,LRr,yRr,zx,xRr,J4e,$Rr,kRr,SRr,Ot,Qx,RRr,Y4e,PRr,BRr,Nc,NRr,K4e,IRr,qRr,aZ,jRr,DRr,GRr,rC,ORr,qr,Wx,VRr,Z4e,XRr,zRr,_n,QRr,eEe,WRr,HRr,oEe,URr,JRr,rEe,YRr,KRr,ZRr,tEe,tC,aEe,ePr,oPr,nZ,rPr,tPr,aPr,aC,Zze,Ic,nC,nEe,Hx,nPr,sEe,sPr,eQe,fr,Ux,lPr,qc,iPr,sZ,dPr,cPr,lZ,fPr,mPr,gPr,Jx,hPr,lEe,pPr,_Pr,uPr,Vt,Yx,bPr,iEe,vPr,FPr,jc,TPr,dEe,MPr,EPr,iZ,CPr,wPr,APr,sC,LPr,jr,Kx,yPr,cEe,xPr,$Pr,un,kPr,fEe,SPr,RPr,mEe,PPr,BPr,gEe,NPr,IPr,qPr,de,lC,hEe,jPr,DPr,dZ,GPr,OPr,VPr,iC,pEe,XPr,zPr,cZ,QPr,WPr,HPr,dC,_Ee,UPr,JPr,fZ,YPr,KPr,ZPr,cC,uEe,eBr,oBr,mZ,rBr,tBr,aBr,fC,bEe,nBr,sBr,gZ,lBr,iBr,dBr,mC,vEe,cBr,fBr,hZ,mBr,gBr,hBr,gC,FEe,pBr,_Br,pZ,uBr,bBr,vBr,hC,TEe,FBr,TBr,_Z,MBr,EBr,CBr,pC,MEe,wBr,ABr,uZ,LBr,yBr,xBr,_C,EEe,$Br,kBr,bZ,SBr,RBr,PBr,uC,CEe,BBr,NBr,vZ,IBr,qBr,jBr,bC,wEe,DBr,GBr,FZ,OBr,VBr,XBr,vC,AEe,zBr,QBr,TZ,WBr,HBr,UBr,FC,LEe,JBr,YBr,MZ,KBr,ZBr,eNr,TC,yEe,oNr,rNr,EZ,tNr,aNr,nNr,MC,xEe,sNr,lNr,CZ,iNr,dNr,cNr,EC,$Ee,fNr,mNr,wZ,gNr,hNr,pNr,CC,kEe,_Nr,uNr,AZ,bNr,vNr,FNr,wC,SEe,TNr,MNr,LZ,ENr,CNr,wNr,AC,REe,ANr,LNr,yZ,yNr,xNr,$Nr,LC,oQe,Dc,yC,PEe,Zx,kNr,BEe,SNr,rQe,mr,e$,RNr,Gc,PNr,xZ,BNr,NNr,$Z,INr,qNr,jNr,o$,DNr,NEe,GNr,ONr,VNr,Xt,r$,XNr,IEe,zNr,QNr,Oc,WNr,qEe,HNr,UNr,kZ,JNr,YNr,KNr,xC,ZNr,Dr,t$,eIr,jEe,oIr,rIr,bn,tIr,DEe,aIr,nIr,GEe,sIr,lIr,OEe,iIr,dIr,cIr,ce,$C,VEe,fIr,mIr,SZ,gIr,hIr,pIr,kC,XEe,_Ir,uIr,RZ,bIr,vIr,FIr,SC,zEe,TIr,MIr,PZ,EIr,CIr,wIr,RC,QEe,AIr,LIr,BZ,yIr,xIr,$Ir,PC,WEe,kIr,SIr,NZ,RIr,PIr,BIr,BC,HEe,NIr,IIr,IZ,qIr,jIr,DIr,NC,UEe,GIr,OIr,qZ,VIr,XIr,zIr,IC,JEe,QIr,WIr,jZ,HIr,UIr,JIr,qC,YEe,YIr,KIr,DZ,ZIr,eqr,oqr,jC,KEe,rqr,tqr,GZ,aqr,nqr,sqr,DC,ZEe,lqr,iqr,OZ,dqr,cqr,fqr,GC,eCe,mqr,gqr,VZ,hqr,pqr,_qr,OC,oCe,uqr,bqr,XZ,vqr,Fqr,Tqr,VC,rCe,Mqr,Eqr,zZ,Cqr,wqr,Aqr,XC,tCe,Lqr,yqr,QZ,xqr,$qr,kqr,zC,aCe,Sqr,Rqr,WZ,Pqr,Bqr,Nqr,QC,nCe,Iqr,qqr,HZ,jqr,Dqr,Gqr,WC,sCe,Oqr,Vqr,UZ,Xqr,zqr,Qqr,HC,lCe,Wqr,Hqr,JZ,Uqr,Jqr,Yqr,UC,iCe,Kqr,Zqr,YZ,ejr,ojr,rjr,JC,tQe,Vc,YC,dCe,a$,tjr,cCe,ajr,aQe,gr,n$,njr,Xc,sjr,KZ,ljr,ijr,ZZ,djr,cjr,fjr,s$,mjr,fCe,gjr,hjr,pjr,zt,l$,_jr,mCe,ujr,bjr,zc,vjr,gCe,Fjr,Tjr,eee,Mjr,Ejr,Cjr,KC,wjr,Gr,i$,Ajr,hCe,Ljr,yjr,vn,xjr,pCe,$jr,kjr,_Ce,Sjr,Rjr,uCe,Pjr,Bjr,Njr,bCe,ZC,vCe,Ijr,qjr,oee,jjr,Djr,Gjr,e5,nQe,Qc,o5,FCe,d$,Ojr,TCe,Vjr,sQe,hr,c$,Xjr,Wc,zjr,ree,Qjr,Wjr,tee,Hjr,Ujr,Jjr,f$,Yjr,MCe,Kjr,Zjr,eDr,Qt,m$,oDr,ECe,rDr,tDr,Hc,aDr,CCe,nDr,sDr,aee,lDr,iDr,dDr,r5,cDr,Or,g$,fDr,wCe,mDr,gDr,Fn,hDr,ACe,pDr,_Dr,LCe,uDr,bDr,yCe,vDr,FDr,TDr,xCe,t5,$Ce,MDr,EDr,nee,CDr,wDr,ADr,a5,lQe,Uc,n5,kCe,h$,LDr,SCe,yDr,iQe,pr,p$,xDr,Jc,$Dr,see,kDr,SDr,lee,RDr,PDr,BDr,_$,NDr,RCe,IDr,qDr,jDr,Wt,u$,DDr,PCe,GDr,ODr,Yc,VDr,BCe,XDr,zDr,iee,QDr,WDr,HDr,s5,UDr,Vr,b$,JDr,NCe,YDr,KDr,Tn,ZDr,ICe,eGr,oGr,qCe,rGr,tGr,jCe,aGr,nGr,sGr,oe,l5,DCe,lGr,iGr,dee,dGr,cGr,fGr,i5,GCe,mGr,gGr,cee,hGr,pGr,_Gr,d5,OCe,uGr,bGr,fee,vGr,FGr,TGr,c5,VCe,MGr,EGr,mee,CGr,wGr,AGr,f5,XCe,LGr,yGr,gee,xGr,$Gr,kGr,m5,zCe,SGr,RGr,hee,PGr,BGr,NGr,g5,QCe,IGr,qGr,pee,jGr,DGr,GGr,h5,WCe,OGr,VGr,_ee,XGr,zGr,QGr,p5,HCe,WGr,HGr,uee,UGr,JGr,YGr,_5,UCe,KGr,ZGr,bee,eOr,oOr,rOr,u5,JCe,tOr,aOr,vee,nOr,sOr,lOr,b5,YCe,iOr,dOr,Fee,cOr,fOr,mOr,v5,KCe,gOr,hOr,Tee,pOr,_Or,uOr,F5,ZCe,bOr,vOr,Mee,FOr,TOr,MOr,T5,e5e,EOr,COr,Eee,wOr,AOr,LOr,M5,o5e,yOr,xOr,Cee,$Or,kOr,SOr,E5,r5e,ROr,POr,wee,BOr,NOr,IOr,C5,t5e,qOr,jOr,Aee,DOr,GOr,OOr,w5,a5e,VOr,XOr,Lee,zOr,QOr,WOr,A5,n5e,HOr,UOr,yee,JOr,YOr,KOr,L5,s5e,ZOr,eVr,xee,oVr,rVr,tVr,y5,l5e,aVr,nVr,$ee,sVr,lVr,iVr,x5,i5e,dVr,cVr,kee,fVr,mVr,gVr,$5,d5e,hVr,pVr,See,_Vr,uVr,bVr,k5,c5e,vVr,FVr,Ree,TVr,MVr,EVr,S5,f5e,CVr,wVr,Pee,AVr,LVr,yVr,R5,m5e,xVr,$Vr,Bee,kVr,SVr,RVr,P5,dQe,Kc,B5,g5e,v$,PVr,h5e,BVr,cQe,_r,F$,NVr,Zc,IVr,Nee,qVr,jVr,Iee,DVr,GVr,OVr,T$,VVr,p5e,XVr,zVr,QVr,Ht,M$,WVr,_5e,HVr,UVr,ef,JVr,u5e,YVr,KVr,qee,ZVr,eXr,oXr,N5,rXr,Xr,E$,tXr,b5e,aXr,nXr,Mn,sXr,v5e,lXr,iXr,F5e,dXr,cXr,T5e,fXr,mXr,gXr,xe,I5,M5e,hXr,pXr,jee,_Xr,uXr,bXr,q5,E5e,vXr,FXr,Dee,TXr,MXr,EXr,j5,C5e,CXr,wXr,Gee,AXr,LXr,yXr,D5,w5e,xXr,$Xr,Oee,kXr,SXr,RXr,G5,A5e,PXr,BXr,Vee,NXr,IXr,qXr,O5,L5e,jXr,DXr,Xee,GXr,OXr,VXr,V5,y5e,XXr,zXr,zee,QXr,WXr,HXr,X5,x5e,UXr,JXr,Qee,YXr,KXr,ZXr,z5,$5e,ezr,ozr,Wee,rzr,tzr,azr,Q5,k5e,nzr,szr,Hee,lzr,izr,dzr,W5,fQe,of,H5,S5e,C$,czr,R5e,fzr,mQe,ur,w$,mzr,rf,gzr,Uee,hzr,pzr,Jee,_zr,uzr,bzr,A$,vzr,P5e,Fzr,Tzr,Mzr,Ut,L$,Ezr,B5e,Czr,wzr,tf,Azr,N5e,Lzr,yzr,Yee,xzr,$zr,kzr,U5,Szr,zr,y$,Rzr,I5e,Pzr,Bzr,En,Nzr,q5e,Izr,qzr,j5e,jzr,Dzr,D5e,Gzr,Ozr,Vzr,Ee,J5,G5e,Xzr,zzr,Kee,Qzr,Wzr,Hzr,Y5,O5e,Uzr,Jzr,Zee,Yzr,Kzr,Zzr,K5,V5e,eQr,oQr,eoe,rQr,tQr,aQr,Z5,X5e,nQr,sQr,ooe,lQr,iQr,dQr,e3,z5e,cQr,fQr,roe,mQr,gQr,hQr,o3,Q5e,pQr,_Qr,toe,uQr,bQr,vQr,r3,W5e,FQr,TQr,aoe,MQr,EQr,CQr,t3,H5e,wQr,AQr,noe,LQr,yQr,xQr,a3,U5e,$Qr,kQr,soe,SQr,RQr,PQr,n3,J5e,BQr,NQr,loe,IQr,qQr,jQr,s3,Y5e,DQr,GQr,ioe,OQr,VQr,XQr,l3,K5e,zQr,QQr,doe,WQr,HQr,UQr,i3,Z5e,JQr,YQr,coe,KQr,ZQr,eWr,d3,gQe,af,c3,e3e,x$,oWr,o3e,rWr,hQe,br,$$,tWr,nf,aWr,foe,nWr,sWr,moe,lWr,iWr,dWr,k$,cWr,r3e,fWr,mWr,gWr,Jt,S$,hWr,t3e,pWr,_Wr,sf,uWr,a3e,bWr,vWr,goe,FWr,TWr,MWr,f3,EWr,Qr,R$,CWr,n3e,wWr,AWr,Cn,LWr,s3e,yWr,xWr,l3e,$Wr,kWr,i3e,SWr,RWr,PWr,$e,m3,d3e,BWr,NWr,hoe,IWr,qWr,jWr,g3,c3e,DWr,GWr,poe,OWr,VWr,XWr,h3,f3e,zWr,QWr,_oe,WWr,HWr,UWr,p3,m3e,JWr,YWr,uoe,KWr,ZWr,eHr,_3,g3e,oHr,rHr,boe,tHr,aHr,nHr,u3,h3e,sHr,lHr,voe,iHr,dHr,cHr,b3,p3e,fHr,mHr,Foe,gHr,hHr,pHr,v3,_3e,_Hr,uHr,Toe,bHr,vHr,FHr,F3,u3e,THr,MHr,Moe,EHr,CHr,wHr,T3,b3e,AHr,LHr,Eoe,yHr,xHr,$Hr,M3,pQe,lf,E3,v3e,P$,kHr,F3e,SHr,_Qe,vr,B$,RHr,df,PHr,Coe,BHr,NHr,woe,IHr,qHr,jHr,N$,DHr,T3e,GHr,OHr,VHr,Yt,I$,XHr,M3e,zHr,QHr,cf,WHr,E3e,HHr,UHr,Aoe,JHr,YHr,KHr,C3,ZHr,Wr,q$,eUr,C3e,oUr,rUr,wn,tUr,w3e,aUr,nUr,A3e,sUr,lUr,L3e,iUr,dUr,cUr,ke,w3,y3e,fUr,mUr,Loe,gUr,hUr,pUr,A3,x3e,_Ur,uUr,yoe,bUr,vUr,FUr,L3,$3e,TUr,MUr,xoe,EUr,CUr,wUr,y3,k3e,AUr,LUr,$oe,yUr,xUr,$Ur,x3,S3e,kUr,SUr,koe,RUr,PUr,BUr,$3,R3e,NUr,IUr,Soe,qUr,jUr,DUr,k3,P3e,GUr,OUr,Roe,VUr,XUr,zUr,S3,B3e,QUr,WUr,Poe,HUr,UUr,JUr,R3,N3e,YUr,KUr,Boe,ZUr,eJr,oJr,P3,I3e,rJr,tJr,Noe,aJr,nJr,sJr,B3,uQe,ff,N3,q3e,j$,lJr,j3e,iJr,bQe,Fr,D$,dJr,mf,cJr,Ioe,fJr,mJr,qoe,gJr,hJr,pJr,G$,_Jr,D3e,uJr,bJr,vJr,Kt,O$,FJr,G3e,TJr,MJr,gf,EJr,O3e,CJr,wJr,joe,AJr,LJr,yJr,I3,xJr,Hr,V$,$Jr,V3e,kJr,SJr,An,RJr,X3e,PJr,BJr,z3e,NJr,IJr,Q3e,qJr,jJr,DJr,Se,q3,W3e,GJr,OJr,Doe,VJr,XJr,zJr,j3,H3e,QJr,WJr,Goe,HJr,UJr,JJr,D3,U3e,YJr,KJr,Ooe,ZJr,eYr,oYr,G3,J3e,rYr,tYr,Voe,aYr,nYr,sYr,O3,Y3e,lYr,iYr,Xoe,dYr,cYr,fYr,V3,K3e,mYr,gYr,zoe,hYr,pYr,_Yr,X3,Z3e,uYr,bYr,Qoe,vYr,FYr,TYr,z3,e0e,MYr,EYr,Woe,CYr,wYr,AYr,Q3,o0e,LYr,yYr,Hoe,xYr,$Yr,kYr,W3,r0e,SYr,RYr,Uoe,PYr,BYr,NYr,H3,vQe,hf,U3,t0e,X$,IYr,a0e,qYr,FQe,Tr,z$,jYr,pf,DYr,Joe,GYr,OYr,Yoe,VYr,XYr,zYr,Q$,QYr,n0e,WYr,HYr,UYr,Zt,W$,JYr,s0e,YYr,KYr,_f,ZYr,l0e,eKr,oKr,Koe,rKr,tKr,aKr,J3,nKr,Ur,H$,sKr,i0e,lKr,iKr,Ln,dKr,d0e,cKr,fKr,c0e,mKr,gKr,f0e,hKr,pKr,_Kr,Re,Y3,m0e,uKr,bKr,Zoe,vKr,FKr,TKr,K3,g0e,MKr,EKr,ere,CKr,wKr,AKr,Z3,h0e,LKr,yKr,ore,xKr,$Kr,kKr,e0,p0e,SKr,RKr,rre,PKr,BKr,NKr,o0,_0e,IKr,qKr,tre,jKr,DKr,GKr,r0,u0e,OKr,VKr,are,XKr,zKr,QKr,t0,b0e,WKr,HKr,nre,UKr,JKr,YKr,a0,v0e,KKr,ZKr,sre,eZr,oZr,rZr,n0,F0e,tZr,aZr,lre,nZr,sZr,lZr,s0,T0e,iZr,dZr,ire,cZr,fZr,mZr,l0,TQe,uf,i0,M0e,U$,gZr,E0e,hZr,MQe,Mr,J$,pZr,bf,_Zr,dre,uZr,bZr,cre,vZr,FZr,TZr,Y$,MZr,C0e,EZr,CZr,wZr,ea,K$,AZr,w0e,LZr,yZr,vf,xZr,A0e,$Zr,kZr,fre,SZr,RZr,PZr,d0,BZr,Jr,Z$,NZr,L0e,IZr,qZr,yn,jZr,y0e,DZr,GZr,x0e,OZr,VZr,$0e,XZr,zZr,QZr,Ve,c0,k0e,WZr,HZr,mre,UZr,JZr,YZr,f0,S0e,KZr,ZZr,gre,eet,oet,ret,m0,R0e,tet,aet,hre,net,set,iet,g0,P0e,det,cet,pre,fet,met,get,h0,B0e,het,pet,_re,_et,uet,bet,p0,N0e,vet,Fet,ure,Tet,Met,Eet,_0,I0e,Cet,wet,bre,Aet,Let,yet,u0,q0e,xet,$et,vre,ket,Set,Ret,b0,EQe,Ff,v0,j0e,ek,Pet,D0e,Bet,CQe,Er,ok,Net,Tf,Iet,Fre,qet,jet,Tre,Det,Get,Oet,rk,Vet,G0e,Xet,zet,Qet,oa,tk,Wet,O0e,Het,Uet,Mf,Jet,V0e,Yet,Ket,Mre,Zet,eot,oot,F0,rot,Yr,ak,tot,X0e,aot,not,xn,sot,z0e,lot,iot,Q0e,dot,cot,W0e,fot,mot,got,Xe,T0,H0e,hot,pot,Ere,_ot,uot,bot,M0,U0e,vot,Fot,Cre,Tot,Mot,Eot,E0,J0e,Cot,wot,wre,Aot,Lot,yot,C0,Y0e,xot,$ot,Are,kot,Sot,Rot,w0,K0e,Pot,Bot,Lre,Not,Iot,qot,A0,Z0e,jot,Dot,yre,Got,Oot,Vot,L0,ewe,Xot,zot,xre,Qot,Wot,Hot,y0,owe,Uot,Jot,$re,Yot,Kot,Zot,x0,wQe,Ef,$0,rwe,nk,ert,twe,ort,AQe,Cr,sk,rrt,Cf,trt,kre,art,nrt,Sre,srt,lrt,irt,lk,drt,awe,crt,frt,mrt,ra,ik,grt,nwe,hrt,prt,wf,_rt,swe,urt,brt,Rre,vrt,Frt,Trt,k0,Mrt,Kr,dk,Ert,lwe,Crt,wrt,$n,Art,iwe,Lrt,yrt,dwe,xrt,$rt,cwe,krt,Srt,Rrt,fwe,S0,mwe,Prt,Brt,Pre,Nrt,Irt,qrt,R0,LQe,Af,P0,gwe,ck,jrt,hwe,Drt,yQe,wr,fk,Grt,Lf,Ort,Bre,Vrt,Xrt,Nre,zrt,Qrt,Wrt,mk,Hrt,pwe,Urt,Jrt,Yrt,ta,gk,Krt,_we,Zrt,ett,yf,ott,uwe,rtt,ttt,Ire,att,ntt,stt,B0,ltt,Zr,hk,itt,bwe,dtt,ctt,kn,ftt,vwe,mtt,gtt,Fwe,htt,ptt,Twe,_tt,utt,btt,pk,N0,Mwe,vtt,Ftt,qre,Ttt,Mtt,Ett,I0,Ewe,Ctt,wtt,jre,Att,Ltt,ytt,q0,xQe,xf,j0,Cwe,_k,xtt,wwe,$tt,$Qe,Ar,uk,ktt,$f,Stt,Dre,Rtt,Ptt,Gre,Btt,Ntt,Itt,bk,qtt,Awe,jtt,Dtt,Gtt,aa,vk,Ott,Lwe,Vtt,Xtt,kf,ztt,ywe,Qtt,Wtt,Ore,Htt,Utt,Jtt,D0,Ytt,et,Fk,Ktt,xwe,Ztt,eat,Sn,oat,$we,rat,tat,kwe,aat,nat,Swe,sat,lat,iat,Rwe,G0,Pwe,dat,cat,Vre,fat,mat,gat,O0,kQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),fL=new re({}),mL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Df=new hat({props:{warning:!0,$$slots:{default:[iHt]},$$scope:{ctx:$}}}),gL=new re({}),hL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L614"}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L637"}}),Zg=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),bL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L760"}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L411"}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17826/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L425"}}),Nh=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),CL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L624"}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17826/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),vp=new hat({props:{$$slots:{default:[fHt]},$$scope:{ctx:$}}}),Fp=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),$L=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L89"}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L103"}}),Gp=new hat({props:{$$slots:{default:[gHt]},$$scope:{ctx:$}}}),Op=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),NL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L256"}}),IL=new re({}),qL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L787"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/jukebox#transformers.JukeboxConfig">JukeboxConfig</a> configuration class: <code>JukeboxModel</code> (Jukebox model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),zp=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Yu=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),OL=new re({}),VL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L794"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Zu=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Q2=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),WL=new re({}),HL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L809"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),H2=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),N1=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L816"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),q1=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Cb=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),ty=new re({}),ay=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L823"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Ab=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Wb=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),iy=new re({}),dy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L832"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Ub=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),gy=new re({}),hy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L877"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),by=new re({}),vy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L884"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),Ey=new re({}),Cy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L870"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),C6=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),yy=new re({}),xy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L841"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),A6=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),Ry=new re({}),Py=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L848"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),qy=new re({}),jy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L893"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),Vy=new re({}),Xy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L932"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),Hy=new re({}),Uy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L859"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),Zy=new re({}),e9=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L939"}}),r9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),l7=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),a9=new re({}),n9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L962"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),d7=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),_7=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),d9=new re({}),c9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L946"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),b7=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),$7=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),h9=new re({}),p9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L953"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),S7=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),N7=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),F9=new re({}),T9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L971"}}),E9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),q7=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),z7=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),w9=new re({}),A9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L978"}}),y9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),W7=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),K7=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),$9=new re({}),k9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L925"}}),R9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),e8=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),a8=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),N9=new re({}),I9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L900"}}),j9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),s8=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),d8=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),G9=new re({}),O9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L907"}}),X9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),f8=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),b8=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),Q9=new re({}),W9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L916"}}),U9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),E8=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),w8=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),TM=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),rx=new re({}),tx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),EM=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),WM=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),lx=new re({}),ix=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),d4=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),mx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),f4=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),ux=new re({}),bx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[bUt]},$$scope:{ctx:$}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[vUt]},$$scope:{ctx:$}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[FUt]},$$scope:{ctx:$}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),$x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[TUt]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[MUt]},$$scope:{ctx:$}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[EUt]},$$scope:{ctx:$}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[CUt]},$$scope:{ctx:$}}}),Ix=new re({}),qx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),Vx=new re({}),Xx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[LUt]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[yUt]},$$scope:{ctx:$}}}),Hx=new re({}),Ux=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[xUt]},$$scope:{ctx:$}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$Ut]},$$scope:{ctx:$}}}),Zx=new re({}),e$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),r$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[kUt]},$$scope:{ctx:$}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[SUt]},$$scope:{ctx:$}}}),a$=new re({}),n$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),l$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[RUt]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[PUt]},$$scope:{ctx:$}}}),d$=new re({}),c$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),m$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[BUt]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[NUt]},$$scope:{ctx:$}}}),h$=new re({}),p$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),u$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[IUt]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[qUt]},$$scope:{ctx:$}}}),v$=new re({}),F$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),M$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[jUt]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[DUt]},$$scope:{ctx:$}}}),C$=new re({}),w$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),L$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),U5=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[GUt]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[OUt]},$$scope:{ctx:$}}}),x$=new re({}),$$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),S$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),f3=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[VUt]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[XUt]},$$scope:{ctx:$}}}),P$=new re({}),B$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),C3=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[zUt]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[QUt]},$$scope:{ctx:$}}}),j$=new re({}),D$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),O$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[WUt]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[HUt]},$$scope:{ctx:$}}}),X$=new re({}),z$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),W$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[UUt]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[JUt]},$$scope:{ctx:$}}}),U$=new re({}),J$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),K$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[YUt]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[KUt]},$$scope:{ctx:$}}}),ek=new re({}),ok=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),tk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),F0=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ZUt]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[eJt]},$$scope:{ctx:$}}}),nk=new re({}),sk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[oJt]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[rJt]},$$scope:{ctx:$}}}),ck=new re({}),fk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[tJt]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),q0=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[aJt]},$$scope:{ctx:$}}}),_k=new re({}),uk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),vk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),D0=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[nJt]},$$scope:{ctx:$}}}),Fk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[sJt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),yi=o("Auto Classes"),Bf=l(),lt=a("p"),xi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=a("code"),lL=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),ki=o("Instantiating one of "),Pn=a("a"),iL=o("AutoConfig"),Bn=o(", "),Nn=a("a"),dL=o("AutoModel"),Si=o(`, and
`),In=a("a"),cL=o("AutoTokenizer"),Ri=o(" will directly create a class of the relevant architecture. For instance"),If=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),VS=o("will create a model that is an instance of "),Pi=a("a"),XS=o("BertModel"),zS=o("."),wo=l(),Ra=a("p"),QS=o("There is one class of "),qf=a("code"),WS=o("AutoModel"),GHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),AXe=l(),Bi=a("h2"),jf=a("a"),qae=a("span"),F(fL.$$.fragment),OHe=l(),jae=a("span"),VHe=o("Extending the Auto Classes"),LXe=l(),qn=a("p"),XHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dae=a("code"),zHe=o("NewModel"),QHe=o(", make sure you have a "),Gae=a("code"),WHe=o("NewModelConfig"),HHe=o(` then you can add those to the auto
classes like this:`),yXe=l(),F(mL.$$.fragment),xXe=l(),HS=a("p"),UHe=o("You will then be able to use the auto classes like you would usually do!"),$Xe=l(),F(Df.$$.fragment),kXe=l(),Ni=a("h2"),Gf=a("a"),Oae=a("span"),F(gL.$$.fragment),JHe=l(),Vae=a("span"),YHe=o("AutoConfig"),SXe=l(),Ao=a("div"),F(hL.$$.fragment),KHe=l(),pL=a("p"),ZHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),US=a("a"),eUe=o("from_pretrained()"),oUe=o(" class method."),rUe=l(),_L=a("p"),tUe=o("This class cannot be instantiated directly using "),Xae=a("code"),aUe=o("__init__()"),nUe=o(" (throws an error)."),sUe=l(),Lr=a("div"),F(uL.$$.fragment),lUe=l(),zae=a("p"),iUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),dUe=l(),Ii=a("p"),cUe=o("The configuration class to instantiate is selected based on the "),Qae=a("code"),fUe=o("model_type"),mUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Wae=a("code"),gUe=o("pretrained_model_name_or_path"),hUe=o(":"),pUe=l(),A=a("ul"),Of=a("li"),Hae=a("strong"),_Ue=o("albert"),uUe=o(" \u2014 "),JS=a("a"),bUe=o("AlbertConfig"),vUe=o(" (ALBERT model)"),FUe=l(),Vf=a("li"),Uae=a("strong"),TUe=o("bart"),MUe=o(" \u2014 "),YS=a("a"),EUe=o("BartConfig"),CUe=o(" (BART model)"),wUe=l(),Xf=a("li"),Jae=a("strong"),AUe=o("beit"),LUe=o(" \u2014 "),KS=a("a"),yUe=o("BeitConfig"),xUe=o(" (BEiT model)"),$Ue=l(),zf=a("li"),Yae=a("strong"),kUe=o("bert"),SUe=o(" \u2014 "),ZS=a("a"),RUe=o("BertConfig"),PUe=o(" (BERT model)"),BUe=l(),Qf=a("li"),Kae=a("strong"),NUe=o("bert-generation"),IUe=o(" \u2014 "),eR=a("a"),qUe=o("BertGenerationConfig"),jUe=o(" (Bert Generation model)"),DUe=l(),Wf=a("li"),Zae=a("strong"),GUe=o("big_bird"),OUe=o(" \u2014 "),oR=a("a"),VUe=o("BigBirdConfig"),XUe=o(" (BigBird model)"),zUe=l(),Hf=a("li"),ene=a("strong"),QUe=o("bigbird_pegasus"),WUe=o(" \u2014 "),rR=a("a"),HUe=o("BigBirdPegasusConfig"),UUe=o(" (BigBird-Pegasus model)"),JUe=l(),Uf=a("li"),one=a("strong"),YUe=o("blenderbot"),KUe=o(" \u2014 "),tR=a("a"),ZUe=o("BlenderbotConfig"),eJe=o(" (Blenderbot model)"),oJe=l(),Jf=a("li"),rne=a("strong"),rJe=o("blenderbot-small"),tJe=o(" \u2014 "),aR=a("a"),aJe=o("BlenderbotSmallConfig"),nJe=o(" (BlenderbotSmall model)"),sJe=l(),Yf=a("li"),tne=a("strong"),lJe=o("bloom"),iJe=o(" \u2014 "),nR=a("a"),dJe=o("BloomConfig"),cJe=o(" (BLOOM model)"),fJe=l(),Kf=a("li"),ane=a("strong"),mJe=o("camembert"),gJe=o(" \u2014 "),sR=a("a"),hJe=o("CamembertConfig"),pJe=o(" (CamemBERT model)"),_Je=l(),Zf=a("li"),nne=a("strong"),uJe=o("canine"),bJe=o(" \u2014 "),lR=a("a"),vJe=o("CanineConfig"),FJe=o(" (CANINE model)"),TJe=l(),em=a("li"),sne=a("strong"),MJe=o("clip"),EJe=o(" \u2014 "),iR=a("a"),CJe=o("CLIPConfig"),wJe=o(" (CLIP model)"),AJe=l(),om=a("li"),lne=a("strong"),LJe=o("codegen"),yJe=o(" \u2014 "),dR=a("a"),xJe=o("CodeGenConfig"),$Je=o(" (CodeGen model)"),kJe=l(),rm=a("li"),ine=a("strong"),SJe=o("convbert"),RJe=o(" \u2014 "),cR=a("a"),PJe=o("ConvBertConfig"),BJe=o(" (ConvBERT model)"),NJe=l(),tm=a("li"),dne=a("strong"),IJe=o("convnext"),qJe=o(" \u2014 "),fR=a("a"),jJe=o("ConvNextConfig"),DJe=o(" (ConvNeXT model)"),GJe=l(),am=a("li"),cne=a("strong"),OJe=o("ctrl"),VJe=o(" \u2014 "),mR=a("a"),XJe=o("CTRLConfig"),zJe=o(" (CTRL model)"),QJe=l(),nm=a("li"),fne=a("strong"),WJe=o("cvt"),HJe=o(" \u2014 "),gR=a("a"),UJe=o("CvtConfig"),JJe=o(" (CvT model)"),YJe=l(),sm=a("li"),mne=a("strong"),KJe=o("data2vec-audio"),ZJe=o(" \u2014 "),hR=a("a"),eYe=o("Data2VecAudioConfig"),oYe=o(" (Data2VecAudio model)"),rYe=l(),lm=a("li"),gne=a("strong"),tYe=o("data2vec-text"),aYe=o(" \u2014 "),pR=a("a"),nYe=o("Data2VecTextConfig"),sYe=o(" (Data2VecText model)"),lYe=l(),im=a("li"),hne=a("strong"),iYe=o("data2vec-vision"),dYe=o(" \u2014 "),_R=a("a"),cYe=o("Data2VecVisionConfig"),fYe=o(" (Data2VecVision model)"),mYe=l(),dm=a("li"),pne=a("strong"),gYe=o("deberta"),hYe=o(" \u2014 "),uR=a("a"),pYe=o("DebertaConfig"),_Ye=o(" (DeBERTa model)"),uYe=l(),cm=a("li"),_ne=a("strong"),bYe=o("deberta-v2"),vYe=o(" \u2014 "),bR=a("a"),FYe=o("DebertaV2Config"),TYe=o(" (DeBERTa-v2 model)"),MYe=l(),fm=a("li"),une=a("strong"),EYe=o("decision_transformer"),CYe=o(" \u2014 "),vR=a("a"),wYe=o("DecisionTransformerConfig"),AYe=o(" (Decision Transformer model)"),LYe=l(),mm=a("li"),bne=a("strong"),yYe=o("deit"),xYe=o(" \u2014 "),FR=a("a"),$Ye=o("DeiTConfig"),kYe=o(" (DeiT model)"),SYe=l(),gm=a("li"),vne=a("strong"),RYe=o("detr"),PYe=o(" \u2014 "),TR=a("a"),BYe=o("DetrConfig"),NYe=o(" (DETR model)"),IYe=l(),hm=a("li"),Fne=a("strong"),qYe=o("distilbert"),jYe=o(" \u2014 "),MR=a("a"),DYe=o("DistilBertConfig"),GYe=o(" (DistilBERT model)"),OYe=l(),pm=a("li"),Tne=a("strong"),VYe=o("dpr"),XYe=o(" \u2014 "),ER=a("a"),zYe=o("DPRConfig"),QYe=o(" (DPR model)"),WYe=l(),_m=a("li"),Mne=a("strong"),HYe=o("dpt"),UYe=o(" \u2014 "),CR=a("a"),JYe=o("DPTConfig"),YYe=o(" (DPT model)"),KYe=l(),um=a("li"),Ene=a("strong"),ZYe=o("electra"),eKe=o(" \u2014 "),wR=a("a"),oKe=o("ElectraConfig"),rKe=o(" (ELECTRA model)"),tKe=l(),bm=a("li"),Cne=a("strong"),aKe=o("encoder-decoder"),nKe=o(" \u2014 "),AR=a("a"),sKe=o("EncoderDecoderConfig"),lKe=o(" (Encoder decoder model)"),iKe=l(),vm=a("li"),wne=a("strong"),dKe=o("flaubert"),cKe=o(" \u2014 "),LR=a("a"),fKe=o("FlaubertConfig"),mKe=o(" (FlauBERT model)"),gKe=l(),Fm=a("li"),Ane=a("strong"),hKe=o("flava"),pKe=o(" \u2014 "),yR=a("a"),_Ke=o("FlavaConfig"),uKe=o(" (FLAVA model)"),bKe=l(),Tm=a("li"),Lne=a("strong"),vKe=o("fnet"),FKe=o(" \u2014 "),xR=a("a"),TKe=o("FNetConfig"),MKe=o(" (FNet model)"),EKe=l(),Mm=a("li"),yne=a("strong"),CKe=o("fsmt"),wKe=o(" \u2014 "),$R=a("a"),AKe=o("FSMTConfig"),LKe=o(" (FairSeq Machine-Translation model)"),yKe=l(),Em=a("li"),xne=a("strong"),xKe=o("funnel"),$Ke=o(" \u2014 "),kR=a("a"),kKe=o("FunnelConfig"),SKe=o(" (Funnel Transformer model)"),RKe=l(),Cm=a("li"),$ne=a("strong"),PKe=o("glpn"),BKe=o(" \u2014 "),SR=a("a"),NKe=o("GLPNConfig"),IKe=o(" (GLPN model)"),qKe=l(),wm=a("li"),kne=a("strong"),jKe=o("gpt2"),DKe=o(" \u2014 "),RR=a("a"),GKe=o("GPT2Config"),OKe=o(" (OpenAI GPT-2 model)"),VKe=l(),Am=a("li"),Sne=a("strong"),XKe=o("gpt_neo"),zKe=o(" \u2014 "),PR=a("a"),QKe=o("GPTNeoConfig"),WKe=o(" (GPT Neo model)"),HKe=l(),Lm=a("li"),Rne=a("strong"),UKe=o("gpt_neox"),JKe=o(" \u2014 "),BR=a("a"),YKe=o("GPTNeoXConfig"),KKe=o(" (GPT NeoX model)"),ZKe=l(),ym=a("li"),Pne=a("strong"),eZe=o("gptj"),oZe=o(" \u2014 "),NR=a("a"),rZe=o("GPTJConfig"),tZe=o(" (GPT-J model)"),aZe=l(),xm=a("li"),Bne=a("strong"),nZe=o("groupvit"),sZe=o(" \u2014 "),IR=a("a"),lZe=o("GroupViTConfig"),iZe=o(" (GroupViT model)"),dZe=l(),$m=a("li"),Nne=a("strong"),cZe=o("hubert"),fZe=o(" \u2014 "),qR=a("a"),mZe=o("HubertConfig"),gZe=o(" (Hubert model)"),hZe=l(),km=a("li"),Ine=a("strong"),pZe=o("ibert"),_Ze=o(" \u2014 "),jR=a("a"),uZe=o("IBertConfig"),bZe=o(" (I-BERT model)"),vZe=l(),Sm=a("li"),qne=a("strong"),FZe=o("imagegpt"),TZe=o(" \u2014 "),DR=a("a"),MZe=o("ImageGPTConfig"),EZe=o(" (ImageGPT model)"),CZe=l(),Rm=a("li"),jne=a("strong"),wZe=o("jukebox"),AZe=o(" \u2014 "),GR=a("a"),LZe=o("JukeboxConfig"),yZe=o(" (Jukebox model)"),xZe=l(),Pm=a("li"),Dne=a("strong"),$Ze=o("layoutlm"),kZe=o(" \u2014 "),OR=a("a"),SZe=o("LayoutLMConfig"),RZe=o(" (LayoutLM model)"),PZe=l(),Bm=a("li"),Gne=a("strong"),BZe=o("layoutlmv2"),NZe=o(" \u2014 "),VR=a("a"),IZe=o("LayoutLMv2Config"),qZe=o(" (LayoutLMv2 model)"),jZe=l(),Nm=a("li"),One=a("strong"),DZe=o("layoutlmv3"),GZe=o(" \u2014 "),XR=a("a"),OZe=o("LayoutLMv3Config"),VZe=o(" (LayoutLMv3 model)"),XZe=l(),Im=a("li"),Vne=a("strong"),zZe=o("led"),QZe=o(" \u2014 "),zR=a("a"),WZe=o("LEDConfig"),HZe=o(" (LED model)"),UZe=l(),qm=a("li"),Xne=a("strong"),JZe=o("levit"),YZe=o(" \u2014 "),QR=a("a"),KZe=o("LevitConfig"),ZZe=o(" (LeViT model)"),eeo=l(),jm=a("li"),zne=a("strong"),oeo=o("longformer"),reo=o(" \u2014 "),WR=a("a"),teo=o("LongformerConfig"),aeo=o(" (Longformer model)"),neo=l(),Dm=a("li"),Qne=a("strong"),seo=o("longt5"),leo=o(" \u2014 "),HR=a("a"),ieo=o("LongT5Config"),deo=o(" (LongT5 model)"),ceo=l(),Gm=a("li"),Wne=a("strong"),feo=o("luke"),meo=o(" \u2014 "),UR=a("a"),geo=o("LukeConfig"),heo=o(" (LUKE model)"),peo=l(),Om=a("li"),Hne=a("strong"),_eo=o("lxmert"),ueo=o(" \u2014 "),JR=a("a"),beo=o("LxmertConfig"),veo=o(" (LXMERT model)"),Feo=l(),Vm=a("li"),Une=a("strong"),Teo=o("m2m_100"),Meo=o(" \u2014 "),YR=a("a"),Eeo=o("M2M100Config"),Ceo=o(" (M2M100 model)"),weo=l(),Xm=a("li"),Jne=a("strong"),Aeo=o("marian"),Leo=o(" \u2014 "),KR=a("a"),yeo=o("MarianConfig"),xeo=o(" (Marian model)"),$eo=l(),zm=a("li"),Yne=a("strong"),keo=o("maskformer"),Seo=o(" \u2014 "),ZR=a("a"),Reo=o("MaskFormerConfig"),Peo=o(" (MaskFormer model)"),Beo=l(),Qm=a("li"),Kne=a("strong"),Neo=o("mbart"),Ieo=o(" \u2014 "),eP=a("a"),qeo=o("MBartConfig"),jeo=o(" (mBART model)"),Deo=l(),Wm=a("li"),Zne=a("strong"),Geo=o("mctct"),Oeo=o(" \u2014 "),oP=a("a"),Veo=o("MCTCTConfig"),Xeo=o(" (M-CTC-T model)"),zeo=l(),Hm=a("li"),ese=a("strong"),Qeo=o("megatron-bert"),Weo=o(" \u2014 "),rP=a("a"),Heo=o("MegatronBertConfig"),Ueo=o(" (Megatron-BERT model)"),Jeo=l(),Um=a("li"),ose=a("strong"),Yeo=o("mobilebert"),Keo=o(" \u2014 "),tP=a("a"),Zeo=o("MobileBertConfig"),eoo=o(" (MobileBERT model)"),ooo=l(),Jm=a("li"),rse=a("strong"),roo=o("mobilevit"),too=o(" \u2014 "),aP=a("a"),aoo=o("MobileViTConfig"),noo=o(" (MobileViT model)"),soo=l(),Ym=a("li"),tse=a("strong"),loo=o("mpnet"),ioo=o(" \u2014 "),nP=a("a"),doo=o("MPNetConfig"),coo=o(" (MPNet model)"),foo=l(),Km=a("li"),ase=a("strong"),moo=o("mt5"),goo=o(" \u2014 "),sP=a("a"),hoo=o("MT5Config"),poo=o(" (MT5 model)"),_oo=l(),Zm=a("li"),nse=a("strong"),uoo=o("mvp"),boo=o(" \u2014 "),lP=a("a"),voo=o("MvpConfig"),Foo=o(" (MVP model)"),Too=l(),eg=a("li"),sse=a("strong"),Moo=o("nezha"),Eoo=o(" \u2014 "),iP=a("a"),Coo=o("NezhaConfig"),woo=o(" (Nezha model)"),Aoo=l(),og=a("li"),lse=a("strong"),Loo=o("nystromformer"),yoo=o(" \u2014 "),dP=a("a"),xoo=o("NystromformerConfig"),$oo=o(" (Nystr\xF6mformer model)"),koo=l(),rg=a("li"),ise=a("strong"),Soo=o("openai-gpt"),Roo=o(" \u2014 "),cP=a("a"),Poo=o("OpenAIGPTConfig"),Boo=o(" (OpenAI GPT model)"),Noo=l(),tg=a("li"),dse=a("strong"),Ioo=o("opt"),qoo=o(" \u2014 "),fP=a("a"),joo=o("OPTConfig"),Doo=o(" (OPT model)"),Goo=l(),ag=a("li"),cse=a("strong"),Ooo=o("pegasus"),Voo=o(" \u2014 "),mP=a("a"),Xoo=o("PegasusConfig"),zoo=o(" (Pegasus model)"),Qoo=l(),ng=a("li"),fse=a("strong"),Woo=o("perceiver"),Hoo=o(" \u2014 "),gP=a("a"),Uoo=o("PerceiverConfig"),Joo=o(" (Perceiver model)"),Yoo=l(),sg=a("li"),mse=a("strong"),Koo=o("plbart"),Zoo=o(" \u2014 "),hP=a("a"),ero=o("PLBartConfig"),oro=o(" (PLBart model)"),rro=l(),lg=a("li"),gse=a("strong"),tro=o("poolformer"),aro=o(" \u2014 "),pP=a("a"),nro=o("PoolFormerConfig"),sro=o(" (PoolFormer model)"),lro=l(),ig=a("li"),hse=a("strong"),iro=o("prophetnet"),dro=o(" \u2014 "),_P=a("a"),cro=o("ProphetNetConfig"),fro=o(" (ProphetNet model)"),mro=l(),dg=a("li"),pse=a("strong"),gro=o("qdqbert"),hro=o(" \u2014 "),uP=a("a"),pro=o("QDQBertConfig"),_ro=o(" (QDQBert model)"),uro=l(),cg=a("li"),_se=a("strong"),bro=o("rag"),vro=o(" \u2014 "),bP=a("a"),Fro=o("RagConfig"),Tro=o(" (RAG model)"),Mro=l(),fg=a("li"),use=a("strong"),Ero=o("realm"),Cro=o(" \u2014 "),vP=a("a"),wro=o("RealmConfig"),Aro=o(" (REALM model)"),Lro=l(),mg=a("li"),bse=a("strong"),yro=o("reformer"),xro=o(" \u2014 "),FP=a("a"),$ro=o("ReformerConfig"),kro=o(" (Reformer model)"),Sro=l(),gg=a("li"),vse=a("strong"),Rro=o("regnet"),Pro=o(" \u2014 "),TP=a("a"),Bro=o("RegNetConfig"),Nro=o(" (RegNet model)"),Iro=l(),hg=a("li"),Fse=a("strong"),qro=o("rembert"),jro=o(" \u2014 "),MP=a("a"),Dro=o("RemBertConfig"),Gro=o(" (RemBERT model)"),Oro=l(),pg=a("li"),Tse=a("strong"),Vro=o("resnet"),Xro=o(" \u2014 "),EP=a("a"),zro=o("ResNetConfig"),Qro=o(" (ResNet model)"),Wro=l(),_g=a("li"),Mse=a("strong"),Hro=o("retribert"),Uro=o(" \u2014 "),CP=a("a"),Jro=o("RetriBertConfig"),Yro=o(" (RetriBERT model)"),Kro=l(),ug=a("li"),Ese=a("strong"),Zro=o("roberta"),eto=o(" \u2014 "),wP=a("a"),oto=o("RobertaConfig"),rto=o(" (RoBERTa model)"),tto=l(),bg=a("li"),Cse=a("strong"),ato=o("roformer"),nto=o(" \u2014 "),AP=a("a"),sto=o("RoFormerConfig"),lto=o(" (RoFormer model)"),ito=l(),vg=a("li"),wse=a("strong"),dto=o("segformer"),cto=o(" \u2014 "),LP=a("a"),fto=o("SegformerConfig"),mto=o(" (SegFormer model)"),gto=l(),Fg=a("li"),Ase=a("strong"),hto=o("sew"),pto=o(" \u2014 "),yP=a("a"),_to=o("SEWConfig"),uto=o(" (SEW model)"),bto=l(),Tg=a("li"),Lse=a("strong"),vto=o("sew-d"),Fto=o(" \u2014 "),xP=a("a"),Tto=o("SEWDConfig"),Mto=o(" (SEW-D model)"),Eto=l(),Mg=a("li"),yse=a("strong"),Cto=o("speech-encoder-decoder"),wto=o(" \u2014 "),$P=a("a"),Ato=o("SpeechEncoderDecoderConfig"),Lto=o(" (Speech Encoder decoder model)"),yto=l(),Eg=a("li"),xse=a("strong"),xto=o("speech_to_text"),$to=o(" \u2014 "),kP=a("a"),kto=o("Speech2TextConfig"),Sto=o(" (Speech2Text model)"),Rto=l(),Cg=a("li"),$se=a("strong"),Pto=o("speech_to_text_2"),Bto=o(" \u2014 "),SP=a("a"),Nto=o("Speech2Text2Config"),Ito=o(" (Speech2Text2 model)"),qto=l(),wg=a("li"),kse=a("strong"),jto=o("splinter"),Dto=o(" \u2014 "),RP=a("a"),Gto=o("SplinterConfig"),Oto=o(" (Splinter model)"),Vto=l(),Ag=a("li"),Sse=a("strong"),Xto=o("squeezebert"),zto=o(" \u2014 "),PP=a("a"),Qto=o("SqueezeBertConfig"),Wto=o(" (SqueezeBERT model)"),Hto=l(),Lg=a("li"),Rse=a("strong"),Uto=o("swin"),Jto=o(" \u2014 "),BP=a("a"),Yto=o("SwinConfig"),Kto=o(" (Swin Transformer model)"),Zto=l(),yg=a("li"),Pse=a("strong"),eao=o("t5"),oao=o(" \u2014 "),NP=a("a"),rao=o("T5Config"),tao=o(" (T5 model)"),aao=l(),xg=a("li"),Bse=a("strong"),nao=o("tapas"),sao=o(" \u2014 "),IP=a("a"),lao=o("TapasConfig"),iao=o(" (TAPAS model)"),dao=l(),$g=a("li"),Nse=a("strong"),cao=o("trajectory_transformer"),fao=o(" \u2014 "),qP=a("a"),mao=o("TrajectoryTransformerConfig"),gao=o(" (Trajectory Transformer model)"),hao=l(),kg=a("li"),Ise=a("strong"),pao=o("transfo-xl"),_ao=o(" \u2014 "),jP=a("a"),uao=o("TransfoXLConfig"),bao=o(" (Transformer-XL model)"),vao=l(),Sg=a("li"),qse=a("strong"),Fao=o("trocr"),Tao=o(" \u2014 "),DP=a("a"),Mao=o("TrOCRConfig"),Eao=o(" (TrOCR model)"),Cao=l(),Rg=a("li"),jse=a("strong"),wao=o("unispeech"),Aao=o(" \u2014 "),GP=a("a"),Lao=o("UniSpeechConfig"),yao=o(" (UniSpeech model)"),xao=l(),Pg=a("li"),Dse=a("strong"),$ao=o("unispeech-sat"),kao=o(" \u2014 "),OP=a("a"),Sao=o("UniSpeechSatConfig"),Rao=o(" (UniSpeechSat model)"),Pao=l(),Bg=a("li"),Gse=a("strong"),Bao=o("van"),Nao=o(" \u2014 "),VP=a("a"),Iao=o("VanConfig"),qao=o(" (VAN model)"),jao=l(),Ng=a("li"),Ose=a("strong"),Dao=o("vilt"),Gao=o(" \u2014 "),XP=a("a"),Oao=o("ViltConfig"),Vao=o(" (ViLT model)"),Xao=l(),Ig=a("li"),Vse=a("strong"),zao=o("vision-encoder-decoder"),Qao=o(" \u2014 "),zP=a("a"),Wao=o("VisionEncoderDecoderConfig"),Hao=o(" (Vision Encoder decoder model)"),Uao=l(),qg=a("li"),Xse=a("strong"),Jao=o("vision-text-dual-encoder"),Yao=o(" \u2014 "),QP=a("a"),Kao=o("VisionTextDualEncoderConfig"),Zao=o(" (VisionTextDualEncoder model)"),eno=l(),jg=a("li"),zse=a("strong"),ono=o("visual_bert"),rno=o(" \u2014 "),WP=a("a"),tno=o("VisualBertConfig"),ano=o(" (VisualBERT model)"),nno=l(),Dg=a("li"),Qse=a("strong"),sno=o("vit"),lno=o(" \u2014 "),HP=a("a"),ino=o("ViTConfig"),dno=o(" (ViT model)"),cno=l(),Gg=a("li"),Wse=a("strong"),fno=o("vit_mae"),mno=o(" \u2014 "),UP=a("a"),gno=o("ViTMAEConfig"),hno=o(" (ViTMAE model)"),pno=l(),Og=a("li"),Hse=a("strong"),_no=o("wav2vec2"),uno=o(" \u2014 "),JP=a("a"),bno=o("Wav2Vec2Config"),vno=o(" (Wav2Vec2 model)"),Fno=l(),Vg=a("li"),Use=a("strong"),Tno=o("wav2vec2-conformer"),Mno=o(" \u2014 "),YP=a("a"),Eno=o("Wav2Vec2ConformerConfig"),Cno=o(" (Wav2Vec2-Conformer model)"),wno=l(),Xg=a("li"),Jse=a("strong"),Ano=o("wavlm"),Lno=o(" \u2014 "),KP=a("a"),yno=o("WavLMConfig"),xno=o(" (WavLM model)"),$no=l(),zg=a("li"),Yse=a("strong"),kno=o("xglm"),Sno=o(" \u2014 "),ZP=a("a"),Rno=o("XGLMConfig"),Pno=o(" (XGLM model)"),Bno=l(),Qg=a("li"),Kse=a("strong"),Nno=o("xlm"),Ino=o(" \u2014 "),eB=a("a"),qno=o("XLMConfig"),jno=o(" (XLM model)"),Dno=l(),Wg=a("li"),Zse=a("strong"),Gno=o("xlm-prophetnet"),Ono=o(" \u2014 "),oB=a("a"),Vno=o("XLMProphetNetConfig"),Xno=o(" (XLM-ProphetNet model)"),zno=l(),Hg=a("li"),ele=a("strong"),Qno=o("xlm-roberta"),Wno=o(" \u2014 "),rB=a("a"),Hno=o("XLMRobertaConfig"),Uno=o(" (XLM-RoBERTa model)"),Jno=l(),Ug=a("li"),ole=a("strong"),Yno=o("xlm-roberta-xl"),Kno=o(" \u2014 "),tB=a("a"),Zno=o("XLMRobertaXLConfig"),eso=o(" (XLM-RoBERTa-XL model)"),oso=l(),Jg=a("li"),rle=a("strong"),rso=o("xlnet"),tso=o(" \u2014 "),aB=a("a"),aso=o("XLNetConfig"),nso=o(" (XLNet model)"),sso=l(),Yg=a("li"),tle=a("strong"),lso=o("yolos"),iso=o(" \u2014 "),nB=a("a"),dso=o("YolosConfig"),cso=o(" (YOLOS model)"),fso=l(),Kg=a("li"),ale=a("strong"),mso=o("yoso"),gso=o(" \u2014 "),sB=a("a"),hso=o("YosoConfig"),pso=o(" (YOSO model)"),_so=l(),F(Zg.$$.fragment),uso=l(),eh=a("div"),F(bL.$$.fragment),bso=l(),nle=a("p"),vso=o("Register a new configuration for this class."),RXe=l(),qi=a("h2"),oh=a("a"),sle=a("span"),F(vL.$$.fragment),Fso=l(),lle=a("span"),Tso=o("AutoTokenizer"),PXe=l(),Lo=a("div"),F(FL.$$.fragment),Mso=l(),TL=a("p"),Eso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lB=a("a"),Cso=o("AutoTokenizer.from_pretrained()"),wso=o(" class method."),Aso=l(),ML=a("p"),Lso=o("This class cannot be instantiated directly using "),ile=a("code"),yso=o("__init__()"),xso=o(" (throws an error)."),$so=l(),yr=a("div"),F(EL.$$.fragment),kso=l(),dle=a("p"),Sso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Rso=l(),Pa=a("p"),Pso=o("The tokenizer class to instantiate is selected based on the "),cle=a("code"),Bso=o("model_type"),Nso=o(` property of the config object (either
passed as an argument or loaded from `),fle=a("code"),Iso=o("pretrained_model_name_or_path"),qso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mle=a("code"),jso=o("pretrained_model_name_or_path"),Dso=o(":"),Gso=l(),k=a("ul"),jn=a("li"),gle=a("strong"),Oso=o("albert"),Vso=o(" \u2014 "),iB=a("a"),Xso=o("AlbertTokenizer"),zso=o(" or "),dB=a("a"),Qso=o("AlbertTokenizerFast"),Wso=o(" (ALBERT model)"),Hso=l(),Dn=a("li"),hle=a("strong"),Uso=o("bart"),Jso=o(" \u2014 "),cB=a("a"),Yso=o("BartTokenizer"),Kso=o(" or "),fB=a("a"),Zso=o("BartTokenizerFast"),elo=o(" (BART model)"),olo=l(),Gn=a("li"),ple=a("strong"),rlo=o("barthez"),tlo=o(" \u2014 "),mB=a("a"),alo=o("BarthezTokenizer"),nlo=o(" or "),gB=a("a"),slo=o("BarthezTokenizerFast"),llo=o(" (BARThez model)"),ilo=l(),rh=a("li"),_le=a("strong"),dlo=o("bartpho"),clo=o(" \u2014 "),hB=a("a"),flo=o("BartphoTokenizer"),mlo=o(" (BARTpho model)"),glo=l(),On=a("li"),ule=a("strong"),hlo=o("bert"),plo=o(" \u2014 "),pB=a("a"),_lo=o("BertTokenizer"),ulo=o(" or "),_B=a("a"),blo=o("BertTokenizerFast"),vlo=o(" (BERT model)"),Flo=l(),th=a("li"),ble=a("strong"),Tlo=o("bert-generation"),Mlo=o(" \u2014 "),uB=a("a"),Elo=o("BertGenerationTokenizer"),Clo=o(" (Bert Generation model)"),wlo=l(),ah=a("li"),vle=a("strong"),Alo=o("bert-japanese"),Llo=o(" \u2014 "),bB=a("a"),ylo=o("BertJapaneseTokenizer"),xlo=o(" (BertJapanese model)"),$lo=l(),nh=a("li"),Fle=a("strong"),klo=o("bertweet"),Slo=o(" \u2014 "),vB=a("a"),Rlo=o("BertweetTokenizer"),Plo=o(" (BERTweet model)"),Blo=l(),Vn=a("li"),Tle=a("strong"),Nlo=o("big_bird"),Ilo=o(" \u2014 "),FB=a("a"),qlo=o("BigBirdTokenizer"),jlo=o(" or "),TB=a("a"),Dlo=o("BigBirdTokenizerFast"),Glo=o(" (BigBird model)"),Olo=l(),Xn=a("li"),Mle=a("strong"),Vlo=o("bigbird_pegasus"),Xlo=o(" \u2014 "),MB=a("a"),zlo=o("PegasusTokenizer"),Qlo=o(" or "),EB=a("a"),Wlo=o("PegasusTokenizerFast"),Hlo=o(" (BigBird-Pegasus model)"),Ulo=l(),zn=a("li"),Ele=a("strong"),Jlo=o("blenderbot"),Ylo=o(" \u2014 "),CB=a("a"),Klo=o("BlenderbotTokenizer"),Zlo=o(" or "),wB=a("a"),eio=o("BlenderbotTokenizerFast"),oio=o(" (Blenderbot model)"),rio=l(),sh=a("li"),Cle=a("strong"),tio=o("blenderbot-small"),aio=o(" \u2014 "),AB=a("a"),nio=o("BlenderbotSmallTokenizer"),sio=o(" (BlenderbotSmall model)"),lio=l(),lh=a("li"),wle=a("strong"),iio=o("bloom"),dio=o(" \u2014 "),LB=a("a"),cio=o("BloomTokenizerFast"),fio=o(" (BLOOM model)"),mio=l(),ih=a("li"),Ale=a("strong"),gio=o("byt5"),hio=o(" \u2014 "),yB=a("a"),pio=o("ByT5Tokenizer"),_io=o(" (ByT5 model)"),uio=l(),Qn=a("li"),Lle=a("strong"),bio=o("camembert"),vio=o(" \u2014 "),xB=a("a"),Fio=o("CamembertTokenizer"),Tio=o(" or "),$B=a("a"),Mio=o("CamembertTokenizerFast"),Eio=o(" (CamemBERT model)"),Cio=l(),dh=a("li"),yle=a("strong"),wio=o("canine"),Aio=o(" \u2014 "),kB=a("a"),Lio=o("CanineTokenizer"),yio=o(" (CANINE model)"),xio=l(),Wn=a("li"),xle=a("strong"),$io=o("clip"),kio=o(" \u2014 "),SB=a("a"),Sio=o("CLIPTokenizer"),Rio=o(" or "),RB=a("a"),Pio=o("CLIPTokenizerFast"),Bio=o(" (CLIP model)"),Nio=l(),Hn=a("li"),$le=a("strong"),Iio=o("codegen"),qio=o(" \u2014 "),PB=a("a"),jio=o("CodeGenTokenizer"),Dio=o(" or "),BB=a("a"),Gio=o("CodeGenTokenizerFast"),Oio=o(" (CodeGen model)"),Vio=l(),Un=a("li"),kle=a("strong"),Xio=o("convbert"),zio=o(" \u2014 "),NB=a("a"),Qio=o("ConvBertTokenizer"),Wio=o(" or "),IB=a("a"),Hio=o("ConvBertTokenizerFast"),Uio=o(" (ConvBERT model)"),Jio=l(),Jn=a("li"),Sle=a("strong"),Yio=o("cpm"),Kio=o(" \u2014 "),qB=a("a"),Zio=o("CpmTokenizer"),edo=o(" or "),jB=a("a"),odo=o("CpmTokenizerFast"),rdo=o(" (CPM model)"),tdo=l(),ch=a("li"),Rle=a("strong"),ado=o("ctrl"),ndo=o(" \u2014 "),DB=a("a"),sdo=o("CTRLTokenizer"),ldo=o(" (CTRL model)"),ido=l(),Yn=a("li"),Ple=a("strong"),ddo=o("data2vec-text"),cdo=o(" \u2014 "),GB=a("a"),fdo=o("RobertaTokenizer"),mdo=o(" or "),OB=a("a"),gdo=o("RobertaTokenizerFast"),hdo=o(" (Data2VecText model)"),pdo=l(),Kn=a("li"),Ble=a("strong"),_do=o("deberta"),udo=o(" \u2014 "),VB=a("a"),bdo=o("DebertaTokenizer"),vdo=o(" or "),XB=a("a"),Fdo=o("DebertaTokenizerFast"),Tdo=o(" (DeBERTa model)"),Mdo=l(),Zn=a("li"),Nle=a("strong"),Edo=o("deberta-v2"),Cdo=o(" \u2014 "),zB=a("a"),wdo=o("DebertaV2Tokenizer"),Ado=o(" or "),QB=a("a"),Ldo=o("DebertaV2TokenizerFast"),ydo=o(" (DeBERTa-v2 model)"),xdo=l(),es=a("li"),Ile=a("strong"),$do=o("distilbert"),kdo=o(" \u2014 "),WB=a("a"),Sdo=o("DistilBertTokenizer"),Rdo=o(" or "),HB=a("a"),Pdo=o("DistilBertTokenizerFast"),Bdo=o(" (DistilBERT model)"),Ndo=l(),os=a("li"),qle=a("strong"),Ido=o("dpr"),qdo=o(" \u2014 "),UB=a("a"),jdo=o("DPRQuestionEncoderTokenizer"),Ddo=o(" or "),JB=a("a"),Gdo=o("DPRQuestionEncoderTokenizerFast"),Odo=o(" (DPR model)"),Vdo=l(),rs=a("li"),jle=a("strong"),Xdo=o("electra"),zdo=o(" \u2014 "),YB=a("a"),Qdo=o("ElectraTokenizer"),Wdo=o(" or "),KB=a("a"),Hdo=o("ElectraTokenizerFast"),Udo=o(" (ELECTRA model)"),Jdo=l(),fh=a("li"),Dle=a("strong"),Ydo=o("flaubert"),Kdo=o(" \u2014 "),ZB=a("a"),Zdo=o("FlaubertTokenizer"),eco=o(" (FlauBERT model)"),oco=l(),ts=a("li"),Gle=a("strong"),rco=o("fnet"),tco=o(" \u2014 "),eN=a("a"),aco=o("FNetTokenizer"),nco=o(" or "),oN=a("a"),sco=o("FNetTokenizerFast"),lco=o(" (FNet model)"),ico=l(),mh=a("li"),Ole=a("strong"),dco=o("fsmt"),cco=o(" \u2014 "),rN=a("a"),fco=o("FSMTTokenizer"),mco=o(" (FairSeq Machine-Translation model)"),gco=l(),as=a("li"),Vle=a("strong"),hco=o("funnel"),pco=o(" \u2014 "),tN=a("a"),_co=o("FunnelTokenizer"),uco=o(" or "),aN=a("a"),bco=o("FunnelTokenizerFast"),vco=o(" (Funnel Transformer model)"),Fco=l(),ns=a("li"),Xle=a("strong"),Tco=o("gpt2"),Mco=o(" \u2014 "),nN=a("a"),Eco=o("GPT2Tokenizer"),Cco=o(" or "),sN=a("a"),wco=o("GPT2TokenizerFast"),Aco=o(" (OpenAI GPT-2 model)"),Lco=l(),ss=a("li"),zle=a("strong"),yco=o("gpt_neo"),xco=o(" \u2014 "),lN=a("a"),$co=o("GPT2Tokenizer"),kco=o(" or "),iN=a("a"),Sco=o("GPT2TokenizerFast"),Rco=o(" (GPT Neo model)"),Pco=l(),gh=a("li"),Qle=a("strong"),Bco=o("gpt_neox"),Nco=o(" \u2014 "),dN=a("a"),Ico=o("GPTNeoXTokenizerFast"),qco=o(" (GPT NeoX model)"),jco=l(),ls=a("li"),Wle=a("strong"),Dco=o("gptj"),Gco=o(" \u2014 "),cN=a("a"),Oco=o("GPT2Tokenizer"),Vco=o(" or "),fN=a("a"),Xco=o("GPT2TokenizerFast"),zco=o(" (GPT-J model)"),Qco=l(),is=a("li"),Hle=a("strong"),Wco=o("groupvit"),Hco=o(" \u2014 "),mN=a("a"),Uco=o("CLIPTokenizer"),Jco=o(" or "),gN=a("a"),Yco=o("CLIPTokenizerFast"),Kco=o(" (GroupViT model)"),Zco=l(),ds=a("li"),Ule=a("strong"),efo=o("herbert"),ofo=o(" \u2014 "),hN=a("a"),rfo=o("HerbertTokenizer"),tfo=o(" or "),pN=a("a"),afo=o("HerbertTokenizerFast"),nfo=o(" (HerBERT model)"),sfo=l(),hh=a("li"),Jle=a("strong"),lfo=o("hubert"),ifo=o(" \u2014 "),_N=a("a"),dfo=o("Wav2Vec2CTCTokenizer"),cfo=o(" (Hubert model)"),ffo=l(),cs=a("li"),Yle=a("strong"),mfo=o("ibert"),gfo=o(" \u2014 "),uN=a("a"),hfo=o("RobertaTokenizer"),pfo=o(" or "),bN=a("a"),_fo=o("RobertaTokenizerFast"),ufo=o(" (I-BERT model)"),bfo=l(),ph=a("li"),Kle=a("strong"),vfo=o("jukebox"),Ffo=o(" \u2014 "),Zle=a("code"),Tfo=o("JukeboxTokenizer"),Mfo=o(" (Jukebox model)"),Efo=l(),fs=a("li"),eie=a("strong"),Cfo=o("layoutlm"),wfo=o(" \u2014 "),vN=a("a"),Afo=o("LayoutLMTokenizer"),Lfo=o(" or "),FN=a("a"),yfo=o("LayoutLMTokenizerFast"),xfo=o(" (LayoutLM model)"),$fo=l(),ms=a("li"),oie=a("strong"),kfo=o("layoutlmv2"),Sfo=o(" \u2014 "),TN=a("a"),Rfo=o("LayoutLMv2Tokenizer"),Pfo=o(" or "),MN=a("a"),Bfo=o("LayoutLMv2TokenizerFast"),Nfo=o(" (LayoutLMv2 model)"),Ifo=l(),gs=a("li"),rie=a("strong"),qfo=o("layoutlmv3"),jfo=o(" \u2014 "),EN=a("a"),Dfo=o("LayoutLMv3Tokenizer"),Gfo=o(" or "),CN=a("a"),Ofo=o("LayoutLMv3TokenizerFast"),Vfo=o(" (LayoutLMv3 model)"),Xfo=l(),hs=a("li"),tie=a("strong"),zfo=o("layoutxlm"),Qfo=o(" \u2014 "),wN=a("a"),Wfo=o("LayoutXLMTokenizer"),Hfo=o(" or "),AN=a("a"),Ufo=o("LayoutXLMTokenizerFast"),Jfo=o(" (LayoutXLM model)"),Yfo=l(),ps=a("li"),aie=a("strong"),Kfo=o("led"),Zfo=o(" \u2014 "),LN=a("a"),emo=o("LEDTokenizer"),omo=o(" or "),yN=a("a"),rmo=o("LEDTokenizerFast"),tmo=o(" (LED model)"),amo=l(),_s=a("li"),nie=a("strong"),nmo=o("longformer"),smo=o(" \u2014 "),xN=a("a"),lmo=o("LongformerTokenizer"),imo=o(" or "),$N=a("a"),dmo=o("LongformerTokenizerFast"),cmo=o(" (Longformer model)"),fmo=l(),us=a("li"),sie=a("strong"),mmo=o("longt5"),gmo=o(" \u2014 "),kN=a("a"),hmo=o("T5Tokenizer"),pmo=o(" or "),SN=a("a"),_mo=o("T5TokenizerFast"),umo=o(" (LongT5 model)"),bmo=l(),_h=a("li"),lie=a("strong"),vmo=o("luke"),Fmo=o(" \u2014 "),RN=a("a"),Tmo=o("LukeTokenizer"),Mmo=o(" (LUKE model)"),Emo=l(),bs=a("li"),iie=a("strong"),Cmo=o("lxmert"),wmo=o(" \u2014 "),PN=a("a"),Amo=o("LxmertTokenizer"),Lmo=o(" or "),BN=a("a"),ymo=o("LxmertTokenizerFast"),xmo=o(" (LXMERT model)"),$mo=l(),uh=a("li"),die=a("strong"),kmo=o("m2m_100"),Smo=o(" \u2014 "),NN=a("a"),Rmo=o("M2M100Tokenizer"),Pmo=o(" (M2M100 model)"),Bmo=l(),bh=a("li"),cie=a("strong"),Nmo=o("marian"),Imo=o(" \u2014 "),IN=a("a"),qmo=o("MarianTokenizer"),jmo=o(" (Marian model)"),Dmo=l(),vs=a("li"),fie=a("strong"),Gmo=o("mbart"),Omo=o(" \u2014 "),qN=a("a"),Vmo=o("MBartTokenizer"),Xmo=o(" or "),jN=a("a"),zmo=o("MBartTokenizerFast"),Qmo=o(" (mBART model)"),Wmo=l(),Fs=a("li"),mie=a("strong"),Hmo=o("mbart50"),Umo=o(" \u2014 "),DN=a("a"),Jmo=o("MBart50Tokenizer"),Ymo=o(" or "),GN=a("a"),Kmo=o("MBart50TokenizerFast"),Zmo=o(" (mBART-50 model)"),ego=l(),Ts=a("li"),gie=a("strong"),ogo=o("megatron-bert"),rgo=o(" \u2014 "),ON=a("a"),tgo=o("BertTokenizer"),ago=o(" or "),VN=a("a"),ngo=o("BertTokenizerFast"),sgo=o(" (Megatron-BERT model)"),lgo=l(),vh=a("li"),hie=a("strong"),igo=o("mluke"),dgo=o(" \u2014 "),XN=a("a"),cgo=o("MLukeTokenizer"),fgo=o(" (mLUKE model)"),mgo=l(),Ms=a("li"),pie=a("strong"),ggo=o("mobilebert"),hgo=o(" \u2014 "),zN=a("a"),pgo=o("MobileBertTokenizer"),_go=o(" or "),QN=a("a"),ugo=o("MobileBertTokenizerFast"),bgo=o(" (MobileBERT model)"),vgo=l(),Es=a("li"),_ie=a("strong"),Fgo=o("mpnet"),Tgo=o(" \u2014 "),WN=a("a"),Mgo=o("MPNetTokenizer"),Ego=o(" or "),HN=a("a"),Cgo=o("MPNetTokenizerFast"),wgo=o(" (MPNet model)"),Ago=l(),Cs=a("li"),uie=a("strong"),Lgo=o("mt5"),ygo=o(" \u2014 "),UN=a("a"),xgo=o("MT5Tokenizer"),$go=o(" or "),JN=a("a"),kgo=o("MT5TokenizerFast"),Sgo=o(" (MT5 model)"),Rgo=l(),ws=a("li"),bie=a("strong"),Pgo=o("mvp"),Bgo=o(" \u2014 "),YN=a("a"),Ngo=o("MvpTokenizer"),Igo=o(" or "),KN=a("a"),qgo=o("MvpTokenizerFast"),jgo=o(" (MVP model)"),Dgo=l(),As=a("li"),vie=a("strong"),Ggo=o("nezha"),Ogo=o(" \u2014 "),ZN=a("a"),Vgo=o("BertTokenizer"),Xgo=o(" or "),eI=a("a"),zgo=o("BertTokenizerFast"),Qgo=o(" (Nezha model)"),Wgo=l(),Ls=a("li"),Fie=a("strong"),Hgo=o("nllb"),Ugo=o(" \u2014 "),oI=a("a"),Jgo=o("NllbTokenizer"),Ygo=o(" or "),rI=a("a"),Kgo=o("NllbTokenizerFast"),Zgo=o(" (NLLB model)"),eho=l(),ys=a("li"),Tie=a("strong"),oho=o("nystromformer"),rho=o(" \u2014 "),tI=a("a"),tho=o("AlbertTokenizer"),aho=o(" or "),aI=a("a"),nho=o("AlbertTokenizerFast"),sho=o(" (Nystr\xF6mformer model)"),lho=l(),xs=a("li"),Mie=a("strong"),iho=o("openai-gpt"),dho=o(" \u2014 "),nI=a("a"),cho=o("OpenAIGPTTokenizer"),fho=o(" or "),sI=a("a"),mho=o("OpenAIGPTTokenizerFast"),gho=o(" (OpenAI GPT model)"),hho=l(),Fh=a("li"),Eie=a("strong"),pho=o("opt"),_ho=o(" \u2014 "),lI=a("a"),uho=o("GPT2Tokenizer"),bho=o(" (OPT model)"),vho=l(),$s=a("li"),Cie=a("strong"),Fho=o("pegasus"),Tho=o(" \u2014 "),iI=a("a"),Mho=o("PegasusTokenizer"),Eho=o(" or "),dI=a("a"),Cho=o("PegasusTokenizerFast"),who=o(" (Pegasus model)"),Aho=l(),Th=a("li"),wie=a("strong"),Lho=o("perceiver"),yho=o(" \u2014 "),cI=a("a"),xho=o("PerceiverTokenizer"),$ho=o(" (Perceiver model)"),kho=l(),Mh=a("li"),Aie=a("strong"),Sho=o("phobert"),Rho=o(" \u2014 "),fI=a("a"),Pho=o("PhobertTokenizer"),Bho=o(" (PhoBERT model)"),Nho=l(),Eh=a("li"),Lie=a("strong"),Iho=o("plbart"),qho=o(" \u2014 "),mI=a("a"),jho=o("PLBartTokenizer"),Dho=o(" (PLBart model)"),Gho=l(),Ch=a("li"),yie=a("strong"),Oho=o("prophetnet"),Vho=o(" \u2014 "),gI=a("a"),Xho=o("ProphetNetTokenizer"),zho=o(" (ProphetNet model)"),Qho=l(),ks=a("li"),xie=a("strong"),Who=o("qdqbert"),Hho=o(" \u2014 "),hI=a("a"),Uho=o("BertTokenizer"),Jho=o(" or "),pI=a("a"),Yho=o("BertTokenizerFast"),Kho=o(" (QDQBert model)"),Zho=l(),wh=a("li"),$ie=a("strong"),epo=o("rag"),opo=o(" \u2014 "),_I=a("a"),rpo=o("RagTokenizer"),tpo=o(" (RAG model)"),apo=l(),Ss=a("li"),kie=a("strong"),npo=o("realm"),spo=o(" \u2014 "),uI=a("a"),lpo=o("RealmTokenizer"),ipo=o(" or "),bI=a("a"),dpo=o("RealmTokenizerFast"),cpo=o(" (REALM model)"),fpo=l(),Rs=a("li"),Sie=a("strong"),mpo=o("reformer"),gpo=o(" \u2014 "),vI=a("a"),hpo=o("ReformerTokenizer"),ppo=o(" or "),FI=a("a"),_po=o("ReformerTokenizerFast"),upo=o(" (Reformer model)"),bpo=l(),Ps=a("li"),Rie=a("strong"),vpo=o("rembert"),Fpo=o(" \u2014 "),TI=a("a"),Tpo=o("RemBertTokenizer"),Mpo=o(" or "),MI=a("a"),Epo=o("RemBertTokenizerFast"),Cpo=o(" (RemBERT model)"),wpo=l(),Bs=a("li"),Pie=a("strong"),Apo=o("retribert"),Lpo=o(" \u2014 "),EI=a("a"),ypo=o("RetriBertTokenizer"),xpo=o(" or "),CI=a("a"),$po=o("RetriBertTokenizerFast"),kpo=o(" (RetriBERT model)"),Spo=l(),Ns=a("li"),Bie=a("strong"),Rpo=o("roberta"),Ppo=o(" \u2014 "),wI=a("a"),Bpo=o("RobertaTokenizer"),Npo=o(" or "),AI=a("a"),Ipo=o("RobertaTokenizerFast"),qpo=o(" (RoBERTa model)"),jpo=l(),Is=a("li"),Nie=a("strong"),Dpo=o("roformer"),Gpo=o(" \u2014 "),LI=a("a"),Opo=o("RoFormerTokenizer"),Vpo=o(" or "),yI=a("a"),Xpo=o("RoFormerTokenizerFast"),zpo=o(" (RoFormer model)"),Qpo=l(),Ah=a("li"),Iie=a("strong"),Wpo=o("speech_to_text"),Hpo=o(" \u2014 "),xI=a("a"),Upo=o("Speech2TextTokenizer"),Jpo=o(" (Speech2Text model)"),Ypo=l(),Lh=a("li"),qie=a("strong"),Kpo=o("speech_to_text_2"),Zpo=o(" \u2014 "),$I=a("a"),e_o=o("Speech2Text2Tokenizer"),o_o=o(" (Speech2Text2 model)"),r_o=l(),qs=a("li"),jie=a("strong"),t_o=o("splinter"),a_o=o(" \u2014 "),kI=a("a"),n_o=o("SplinterTokenizer"),s_o=o(" or "),SI=a("a"),l_o=o("SplinterTokenizerFast"),i_o=o(" (Splinter model)"),d_o=l(),js=a("li"),Die=a("strong"),c_o=o("squeezebert"),f_o=o(" \u2014 "),RI=a("a"),m_o=o("SqueezeBertTokenizer"),g_o=o(" or "),PI=a("a"),h_o=o("SqueezeBertTokenizerFast"),p_o=o(" (SqueezeBERT model)"),__o=l(),Ds=a("li"),Gie=a("strong"),u_o=o("t5"),b_o=o(" \u2014 "),BI=a("a"),v_o=o("T5Tokenizer"),F_o=o(" or "),NI=a("a"),T_o=o("T5TokenizerFast"),M_o=o(" (T5 model)"),E_o=l(),yh=a("li"),Oie=a("strong"),C_o=o("tapas"),w_o=o(" \u2014 "),II=a("a"),A_o=o("TapasTokenizer"),L_o=o(" (TAPAS model)"),y_o=l(),xh=a("li"),Vie=a("strong"),x_o=o("tapex"),$_o=o(" \u2014 "),qI=a("a"),k_o=o("TapexTokenizer"),S_o=o(" (TAPEX model)"),R_o=l(),$h=a("li"),Xie=a("strong"),P_o=o("transfo-xl"),B_o=o(" \u2014 "),jI=a("a"),N_o=o("TransfoXLTokenizer"),I_o=o(" (Transformer-XL model)"),q_o=l(),Gs=a("li"),zie=a("strong"),j_o=o("vilt"),D_o=o(" \u2014 "),DI=a("a"),G_o=o("BertTokenizer"),O_o=o(" or "),GI=a("a"),V_o=o("BertTokenizerFast"),X_o=o(" (ViLT model)"),z_o=l(),Os=a("li"),Qie=a("strong"),Q_o=o("visual_bert"),W_o=o(" \u2014 "),OI=a("a"),H_o=o("BertTokenizer"),U_o=o(" or "),VI=a("a"),J_o=o("BertTokenizerFast"),Y_o=o(" (VisualBERT model)"),K_o=l(),kh=a("li"),Wie=a("strong"),Z_o=o("wav2vec2"),euo=o(" \u2014 "),XI=a("a"),ouo=o("Wav2Vec2CTCTokenizer"),ruo=o(" (Wav2Vec2 model)"),tuo=l(),Sh=a("li"),Hie=a("strong"),auo=o("wav2vec2-conformer"),nuo=o(" \u2014 "),zI=a("a"),suo=o("Wav2Vec2CTCTokenizer"),luo=o(" (Wav2Vec2-Conformer model)"),iuo=l(),Rh=a("li"),Uie=a("strong"),duo=o("wav2vec2_phoneme"),cuo=o(" \u2014 "),QI=a("a"),fuo=o("Wav2Vec2PhonemeCTCTokenizer"),muo=o(" (Wav2Vec2Phoneme model)"),guo=l(),Vs=a("li"),Jie=a("strong"),huo=o("xglm"),puo=o(" \u2014 "),WI=a("a"),_uo=o("XGLMTokenizer"),uuo=o(" or "),HI=a("a"),buo=o("XGLMTokenizerFast"),vuo=o(" (XGLM model)"),Fuo=l(),Ph=a("li"),Yie=a("strong"),Tuo=o("xlm"),Muo=o(" \u2014 "),UI=a("a"),Euo=o("XLMTokenizer"),Cuo=o(" (XLM model)"),wuo=l(),Bh=a("li"),Kie=a("strong"),Auo=o("xlm-prophetnet"),Luo=o(" \u2014 "),JI=a("a"),yuo=o("XLMProphetNetTokenizer"),xuo=o(" (XLM-ProphetNet model)"),$uo=l(),Xs=a("li"),Zie=a("strong"),kuo=o("xlm-roberta"),Suo=o(" \u2014 "),YI=a("a"),Ruo=o("XLMRobertaTokenizer"),Puo=o(" or "),KI=a("a"),Buo=o("XLMRobertaTokenizerFast"),Nuo=o(" (XLM-RoBERTa model)"),Iuo=l(),zs=a("li"),ede=a("strong"),quo=o("xlm-roberta-xl"),juo=o(" \u2014 "),ZI=a("a"),Duo=o("RobertaTokenizer"),Guo=o(" or "),eq=a("a"),Ouo=o("RobertaTokenizerFast"),Vuo=o(" (XLM-RoBERTa-XL model)"),Xuo=l(),Qs=a("li"),ode=a("strong"),zuo=o("xlnet"),Quo=o(" \u2014 "),oq=a("a"),Wuo=o("XLNetTokenizer"),Huo=o(" or "),rq=a("a"),Uuo=o("XLNetTokenizerFast"),Juo=o(" (XLNet model)"),Yuo=l(),Ws=a("li"),rde=a("strong"),Kuo=o("yoso"),Zuo=o(" \u2014 "),tq=a("a"),e2o=o("AlbertTokenizer"),o2o=o(" or "),aq=a("a"),r2o=o("AlbertTokenizerFast"),t2o=o(" (YOSO model)"),a2o=l(),F(Nh.$$.fragment),n2o=l(),Ih=a("div"),F(CL.$$.fragment),s2o=l(),tde=a("p"),l2o=o("Register a new tokenizer in this mapping."),BXe=l(),ji=a("h2"),qh=a("a"),ade=a("span"),F(wL.$$.fragment),i2o=l(),nde=a("span"),d2o=o("AutoFeatureExtractor"),NXe=l(),yo=a("div"),F(AL.$$.fragment),c2o=l(),LL=a("p"),f2o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),nq=a("a"),m2o=o("AutoFeatureExtractor.from_pretrained()"),g2o=o(" class method."),h2o=l(),yL=a("p"),p2o=o("This class cannot be instantiated directly using "),sde=a("code"),_2o=o("__init__()"),u2o=o(" (throws an error)."),b2o=l(),Ue=a("div"),F(xL.$$.fragment),v2o=l(),lde=a("p"),F2o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),T2o=l(),Ba=a("p"),M2o=o("The feature extractor class to instantiate is selected based on the "),ide=a("code"),E2o=o("model_type"),C2o=o(` property of the config object
(either passed as an argument or loaded from `),dde=a("code"),w2o=o("pretrained_model_name_or_path"),A2o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),cde=a("code"),L2o=o("pretrained_model_name_or_path"),y2o=o(":"),x2o=l(),Y=a("ul"),jh=a("li"),fde=a("strong"),$2o=o("beit"),k2o=o(" \u2014 "),sq=a("a"),S2o=o("BeitFeatureExtractor"),R2o=o(" (BEiT model)"),P2o=l(),Dh=a("li"),mde=a("strong"),B2o=o("clip"),N2o=o(" \u2014 "),lq=a("a"),I2o=o("CLIPFeatureExtractor"),q2o=o(" (CLIP model)"),j2o=l(),Gh=a("li"),gde=a("strong"),D2o=o("convnext"),G2o=o(" \u2014 "),iq=a("a"),O2o=o("ConvNextFeatureExtractor"),V2o=o(" (ConvNeXT model)"),X2o=l(),Oh=a("li"),hde=a("strong"),z2o=o("cvt"),Q2o=o(" \u2014 "),dq=a("a"),W2o=o("ConvNextFeatureExtractor"),H2o=o(" (CvT model)"),U2o=l(),Vh=a("li"),pde=a("strong"),J2o=o("data2vec-audio"),Y2o=o(" \u2014 "),cq=a("a"),K2o=o("Wav2Vec2FeatureExtractor"),Z2o=o(" (Data2VecAudio model)"),e1o=l(),Xh=a("li"),_de=a("strong"),o1o=o("data2vec-vision"),r1o=o(" \u2014 "),fq=a("a"),t1o=o("BeitFeatureExtractor"),a1o=o(" (Data2VecVision model)"),n1o=l(),zh=a("li"),ude=a("strong"),s1o=o("deit"),l1o=o(" \u2014 "),mq=a("a"),i1o=o("DeiTFeatureExtractor"),d1o=o(" (DeiT model)"),c1o=l(),Qh=a("li"),bde=a("strong"),f1o=o("detr"),m1o=o(" \u2014 "),gq=a("a"),g1o=o("DetrFeatureExtractor"),h1o=o(" (DETR model)"),p1o=l(),Wh=a("li"),vde=a("strong"),_1o=o("dpt"),u1o=o(" \u2014 "),hq=a("a"),b1o=o("DPTFeatureExtractor"),v1o=o(" (DPT model)"),F1o=l(),Hh=a("li"),Fde=a("strong"),T1o=o("flava"),M1o=o(" \u2014 "),pq=a("a"),E1o=o("FlavaFeatureExtractor"),C1o=o(" (FLAVA model)"),w1o=l(),Uh=a("li"),Tde=a("strong"),A1o=o("glpn"),L1o=o(" \u2014 "),_q=a("a"),y1o=o("GLPNFeatureExtractor"),x1o=o(" (GLPN model)"),$1o=l(),Jh=a("li"),Mde=a("strong"),k1o=o("groupvit"),S1o=o(" \u2014 "),uq=a("a"),R1o=o("CLIPFeatureExtractor"),P1o=o(" (GroupViT model)"),B1o=l(),Yh=a("li"),Ede=a("strong"),N1o=o("hubert"),I1o=o(" \u2014 "),bq=a("a"),q1o=o("Wav2Vec2FeatureExtractor"),j1o=o(" (Hubert model)"),D1o=l(),Kh=a("li"),Cde=a("strong"),G1o=o("imagegpt"),O1o=o(" \u2014 "),vq=a("a"),V1o=o("ImageGPTFeatureExtractor"),X1o=o(" (ImageGPT model)"),z1o=l(),Zh=a("li"),wde=a("strong"),Q1o=o("layoutlmv2"),W1o=o(" \u2014 "),Fq=a("a"),H1o=o("LayoutLMv2FeatureExtractor"),U1o=o(" (LayoutLMv2 model)"),J1o=l(),ep=a("li"),Ade=a("strong"),Y1o=o("layoutlmv3"),K1o=o(" \u2014 "),Tq=a("a"),Z1o=o("LayoutLMv3FeatureExtractor"),ebo=o(" (LayoutLMv3 model)"),obo=l(),op=a("li"),Lde=a("strong"),rbo=o("levit"),tbo=o(" \u2014 "),Mq=a("a"),abo=o("LevitFeatureExtractor"),nbo=o(" (LeViT model)"),sbo=l(),rp=a("li"),yde=a("strong"),lbo=o("maskformer"),ibo=o(" \u2014 "),Eq=a("a"),dbo=o("MaskFormerFeatureExtractor"),cbo=o(" (MaskFormer model)"),fbo=l(),tp=a("li"),xde=a("strong"),mbo=o("mctct"),gbo=o(" \u2014 "),Cq=a("a"),hbo=o("MCTCTFeatureExtractor"),pbo=o(" (M-CTC-T model)"),_bo=l(),ap=a("li"),$de=a("strong"),ubo=o("mobilevit"),bbo=o(" \u2014 "),wq=a("a"),vbo=o("MobileViTFeatureExtractor"),Fbo=o(" (MobileViT model)"),Tbo=l(),np=a("li"),kde=a("strong"),Mbo=o("perceiver"),Ebo=o(" \u2014 "),Aq=a("a"),Cbo=o("PerceiverFeatureExtractor"),wbo=o(" (Perceiver model)"),Abo=l(),sp=a("li"),Sde=a("strong"),Lbo=o("poolformer"),ybo=o(" \u2014 "),Lq=a("a"),xbo=o("PoolFormerFeatureExtractor"),$bo=o(" (PoolFormer model)"),kbo=l(),lp=a("li"),Rde=a("strong"),Sbo=o("regnet"),Rbo=o(" \u2014 "),yq=a("a"),Pbo=o("ConvNextFeatureExtractor"),Bbo=o(" (RegNet model)"),Nbo=l(),ip=a("li"),Pde=a("strong"),Ibo=o("resnet"),qbo=o(" \u2014 "),xq=a("a"),jbo=o("ConvNextFeatureExtractor"),Dbo=o(" (ResNet model)"),Gbo=l(),dp=a("li"),Bde=a("strong"),Obo=o("segformer"),Vbo=o(" \u2014 "),$q=a("a"),Xbo=o("SegformerFeatureExtractor"),zbo=o(" (SegFormer model)"),Qbo=l(),cp=a("li"),Nde=a("strong"),Wbo=o("speech_to_text"),Hbo=o(" \u2014 "),kq=a("a"),Ubo=o("Speech2TextFeatureExtractor"),Jbo=o(" (Speech2Text model)"),Ybo=l(),fp=a("li"),Ide=a("strong"),Kbo=o("swin"),Zbo=o(" \u2014 "),Sq=a("a"),evo=o("ViTFeatureExtractor"),ovo=o(" (Swin Transformer model)"),rvo=l(),mp=a("li"),qde=a("strong"),tvo=o("van"),avo=o(" \u2014 "),Rq=a("a"),nvo=o("ConvNextFeatureExtractor"),svo=o(" (VAN model)"),lvo=l(),gp=a("li"),jde=a("strong"),ivo=o("vilt"),dvo=o(" \u2014 "),Pq=a("a"),cvo=o("ViltFeatureExtractor"),fvo=o(" (ViLT model)"),mvo=l(),hp=a("li"),Dde=a("strong"),gvo=o("vit"),hvo=o(" \u2014 "),Bq=a("a"),pvo=o("ViTFeatureExtractor"),_vo=o(" (ViT model)"),uvo=l(),pp=a("li"),Gde=a("strong"),bvo=o("vit_mae"),vvo=o(" \u2014 "),Nq=a("a"),Fvo=o("ViTFeatureExtractor"),Tvo=o(" (ViTMAE model)"),Mvo=l(),_p=a("li"),Ode=a("strong"),Evo=o("wav2vec2"),Cvo=o(" \u2014 "),Iq=a("a"),wvo=o("Wav2Vec2FeatureExtractor"),Avo=o(" (Wav2Vec2 model)"),Lvo=l(),up=a("li"),Vde=a("strong"),yvo=o("wav2vec2-conformer"),xvo=o(" \u2014 "),qq=a("a"),$vo=o("Wav2Vec2FeatureExtractor"),kvo=o(" (Wav2Vec2-Conformer model)"),Svo=l(),bp=a("li"),Xde=a("strong"),Rvo=o("yolos"),Pvo=o(" \u2014 "),jq=a("a"),Bvo=o("YolosFeatureExtractor"),Nvo=o(" (YOLOS model)"),Ivo=l(),F(vp.$$.fragment),qvo=l(),F(Fp.$$.fragment),jvo=l(),Tp=a("div"),F($L.$$.fragment),Dvo=l(),zde=a("p"),Gvo=o("Register a new feature extractor for this class."),IXe=l(),Di=a("h2"),Mp=a("a"),Qde=a("span"),F(kL.$$.fragment),Ovo=l(),Wde=a("span"),Vvo=o("AutoProcessor"),qXe=l(),xo=a("div"),F(SL.$$.fragment),Xvo=l(),RL=a("p"),zvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Dq=a("a"),Qvo=o("AutoProcessor.from_pretrained()"),Wvo=o(" class method."),Hvo=l(),PL=a("p"),Uvo=o("This class cannot be instantiated directly using "),Hde=a("code"),Jvo=o("__init__()"),Yvo=o(" (throws an error)."),Kvo=l(),Je=a("div"),F(BL.$$.fragment),Zvo=l(),Ude=a("p"),eFo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),oFo=l(),Gi=a("p"),rFo=o("The processor class to instantiate is selected based on the "),Jde=a("code"),tFo=o("model_type"),aFo=o(` property of the config object (either
passed as an argument or loaded from `),Yde=a("code"),nFo=o("pretrained_model_name_or_path"),sFo=o(" if possible):"),lFo=l(),pe=a("ul"),Ep=a("li"),Kde=a("strong"),iFo=o("clip"),dFo=o(" \u2014 "),Gq=a("a"),cFo=o("CLIPProcessor"),fFo=o(" (CLIP model)"),mFo=l(),Cp=a("li"),Zde=a("strong"),gFo=o("flava"),hFo=o(" \u2014 "),ece=a("code"),pFo=o("FLAVAProcessor"),_Fo=o(" (FLAVA model)"),uFo=l(),wp=a("li"),oce=a("strong"),bFo=o("groupvit"),vFo=o(" \u2014 "),Oq=a("a"),FFo=o("CLIPProcessor"),TFo=o(" (GroupViT model)"),MFo=l(),Ap=a("li"),rce=a("strong"),EFo=o("layoutlmv2"),CFo=o(" \u2014 "),Vq=a("a"),wFo=o("LayoutLMv2Processor"),AFo=o(" (LayoutLMv2 model)"),LFo=l(),Lp=a("li"),tce=a("strong"),yFo=o("layoutlmv3"),xFo=o(" \u2014 "),Xq=a("a"),$Fo=o("LayoutLMv3Processor"),kFo=o(" (LayoutLMv3 model)"),SFo=l(),yp=a("li"),ace=a("strong"),RFo=o("layoutxlm"),PFo=o(" \u2014 "),zq=a("a"),BFo=o("LayoutXLMProcessor"),NFo=o(" (LayoutXLM model)"),IFo=l(),xp=a("li"),nce=a("strong"),qFo=o("sew"),jFo=o(" \u2014 "),Qq=a("a"),DFo=o("Wav2Vec2Processor"),GFo=o(" (SEW model)"),OFo=l(),$p=a("li"),sce=a("strong"),VFo=o("sew-d"),XFo=o(" \u2014 "),Wq=a("a"),zFo=o("Wav2Vec2Processor"),QFo=o(" (SEW-D model)"),WFo=l(),kp=a("li"),lce=a("strong"),HFo=o("speech_to_text"),UFo=o(" \u2014 "),Hq=a("a"),JFo=o("Speech2TextProcessor"),YFo=o(" (Speech2Text model)"),KFo=l(),Sp=a("li"),ice=a("strong"),ZFo=o("speech_to_text_2"),e6o=o(" \u2014 "),Uq=a("a"),o6o=o("Speech2Text2Processor"),r6o=o(" (Speech2Text2 model)"),t6o=l(),Rp=a("li"),dce=a("strong"),a6o=o("trocr"),n6o=o(" \u2014 "),Jq=a("a"),s6o=o("TrOCRProcessor"),l6o=o(" (TrOCR model)"),i6o=l(),Pp=a("li"),cce=a("strong"),d6o=o("unispeech"),c6o=o(" \u2014 "),Yq=a("a"),f6o=o("Wav2Vec2Processor"),m6o=o(" (UniSpeech model)"),g6o=l(),Bp=a("li"),fce=a("strong"),h6o=o("unispeech-sat"),p6o=o(" \u2014 "),Kq=a("a"),_6o=o("Wav2Vec2Processor"),u6o=o(" (UniSpeechSat model)"),b6o=l(),Np=a("li"),mce=a("strong"),v6o=o("vilt"),F6o=o(" \u2014 "),Zq=a("a"),T6o=o("ViltProcessor"),M6o=o(" (ViLT model)"),E6o=l(),Ip=a("li"),gce=a("strong"),C6o=o("vision-text-dual-encoder"),w6o=o(" \u2014 "),ej=a("a"),A6o=o("VisionTextDualEncoderProcessor"),L6o=o(" (VisionTextDualEncoder model)"),y6o=l(),qp=a("li"),hce=a("strong"),x6o=o("wav2vec2"),$6o=o(" \u2014 "),oj=a("a"),k6o=o("Wav2Vec2Processor"),S6o=o(" (Wav2Vec2 model)"),R6o=l(),jp=a("li"),pce=a("strong"),P6o=o("wav2vec2-conformer"),B6o=o(" \u2014 "),rj=a("a"),N6o=o("Wav2Vec2Processor"),I6o=o(" (Wav2Vec2-Conformer model)"),q6o=l(),Dp=a("li"),_ce=a("strong"),j6o=o("wavlm"),D6o=o(" \u2014 "),tj=a("a"),G6o=o("Wav2Vec2Processor"),O6o=o(" (WavLM model)"),V6o=l(),F(Gp.$$.fragment),X6o=l(),F(Op.$$.fragment),z6o=l(),Vp=a("div"),F(NL.$$.fragment),Q6o=l(),uce=a("p"),W6o=o("Register a new processor for this class."),jXe=l(),Oi=a("h2"),Xp=a("a"),bce=a("span"),F(IL.$$.fragment),H6o=l(),vce=a("span"),U6o=o("AutoModel"),DXe=l(),$o=a("div"),F(qL.$$.fragment),J6o=l(),Vi=a("p"),Y6o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aj=a("a"),K6o=o("from_pretrained()"),Z6o=o(" class method or the "),nj=a("a"),eTo=o("from_config()"),oTo=o(` class
method.`),rTo=l(),jL=a("p"),tTo=o("This class cannot be instantiated directly using "),Fce=a("code"),aTo=o("__init__()"),nTo=o(" (throws an error)."),sTo=l(),it=a("div"),F(DL.$$.fragment),lTo=l(),Tce=a("p"),iTo=o("Instantiates one of the base model classes of the library from a configuration."),dTo=l(),Xi=a("p"),cTo=o(`Note:
Loading a model from its configuration file does `),Mce=a("strong"),fTo=o("not"),mTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=a("a"),gTo=o("from_pretrained()"),hTo=o(" to load the model weights."),pTo=l(),F(zp.$$.fragment),_To=l(),Ye=a("div"),F(GL.$$.fragment),uTo=l(),Ece=a("p"),bTo=o("Instantiate one of the base model classes of the library from a pretrained model."),vTo=l(),Na=a("p"),FTo=o("The model class to instantiate is selected based on the "),Cce=a("code"),TTo=o("model_type"),MTo=o(` property of the config object (either
passed as an argument or loaded from `),wce=a("code"),ETo=o("pretrained_model_name_or_path"),CTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ace=a("code"),wTo=o("pretrained_model_name_or_path"),ATo=o(":"),LTo=l(),y=a("ul"),Qp=a("li"),Lce=a("strong"),yTo=o("albert"),xTo=o(" \u2014 "),lj=a("a"),$To=o("AlbertModel"),kTo=o(" (ALBERT model)"),STo=l(),Wp=a("li"),yce=a("strong"),RTo=o("bart"),PTo=o(" \u2014 "),ij=a("a"),BTo=o("BartModel"),NTo=o(" (BART model)"),ITo=l(),Hp=a("li"),xce=a("strong"),qTo=o("beit"),jTo=o(" \u2014 "),dj=a("a"),DTo=o("BeitModel"),GTo=o(" (BEiT model)"),OTo=l(),Up=a("li"),$ce=a("strong"),VTo=o("bert"),XTo=o(" \u2014 "),cj=a("a"),zTo=o("BertModel"),QTo=o(" (BERT model)"),WTo=l(),Jp=a("li"),kce=a("strong"),HTo=o("bert-generation"),UTo=o(" \u2014 "),fj=a("a"),JTo=o("BertGenerationEncoder"),YTo=o(" (Bert Generation model)"),KTo=l(),Yp=a("li"),Sce=a("strong"),ZTo=o("big_bird"),e7o=o(" \u2014 "),mj=a("a"),o7o=o("BigBirdModel"),r7o=o(" (BigBird model)"),t7o=l(),Kp=a("li"),Rce=a("strong"),a7o=o("bigbird_pegasus"),n7o=o(" \u2014 "),gj=a("a"),s7o=o("BigBirdPegasusModel"),l7o=o(" (BigBird-Pegasus model)"),i7o=l(),Zp=a("li"),Pce=a("strong"),d7o=o("blenderbot"),c7o=o(" \u2014 "),hj=a("a"),f7o=o("BlenderbotModel"),m7o=o(" (Blenderbot model)"),g7o=l(),e_=a("li"),Bce=a("strong"),h7o=o("blenderbot-small"),p7o=o(" \u2014 "),pj=a("a"),_7o=o("BlenderbotSmallModel"),u7o=o(" (BlenderbotSmall model)"),b7o=l(),o_=a("li"),Nce=a("strong"),v7o=o("bloom"),F7o=o(" \u2014 "),_j=a("a"),T7o=o("BloomModel"),M7o=o(" (BLOOM model)"),E7o=l(),r_=a("li"),Ice=a("strong"),C7o=o("camembert"),w7o=o(" \u2014 "),uj=a("a"),A7o=o("CamembertModel"),L7o=o(" (CamemBERT model)"),y7o=l(),t_=a("li"),qce=a("strong"),x7o=o("canine"),$7o=o(" \u2014 "),bj=a("a"),k7o=o("CanineModel"),S7o=o(" (CANINE model)"),R7o=l(),a_=a("li"),jce=a("strong"),P7o=o("clip"),B7o=o(" \u2014 "),vj=a("a"),N7o=o("CLIPModel"),I7o=o(" (CLIP model)"),q7o=l(),n_=a("li"),Dce=a("strong"),j7o=o("codegen"),D7o=o(" \u2014 "),Fj=a("a"),G7o=o("CodeGenModel"),O7o=o(" (CodeGen model)"),V7o=l(),s_=a("li"),Gce=a("strong"),X7o=o("convbert"),z7o=o(" \u2014 "),Tj=a("a"),Q7o=o("ConvBertModel"),W7o=o(" (ConvBERT model)"),H7o=l(),l_=a("li"),Oce=a("strong"),U7o=o("convnext"),J7o=o(" \u2014 "),Mj=a("a"),Y7o=o("ConvNextModel"),K7o=o(" (ConvNeXT model)"),Z7o=l(),i_=a("li"),Vce=a("strong"),e8o=o("ctrl"),o8o=o(" \u2014 "),Ej=a("a"),r8o=o("CTRLModel"),t8o=o(" (CTRL model)"),a8o=l(),d_=a("li"),Xce=a("strong"),n8o=o("cvt"),s8o=o(" \u2014 "),Cj=a("a"),l8o=o("CvtModel"),i8o=o(" (CvT model)"),d8o=l(),c_=a("li"),zce=a("strong"),c8o=o("data2vec-audio"),f8o=o(" \u2014 "),wj=a("a"),m8o=o("Data2VecAudioModel"),g8o=o(" (Data2VecAudio model)"),h8o=l(),f_=a("li"),Qce=a("strong"),p8o=o("data2vec-text"),_8o=o(" \u2014 "),Aj=a("a"),u8o=o("Data2VecTextModel"),b8o=o(" (Data2VecText model)"),v8o=l(),m_=a("li"),Wce=a("strong"),F8o=o("data2vec-vision"),T8o=o(" \u2014 "),Lj=a("a"),M8o=o("Data2VecVisionModel"),E8o=o(" (Data2VecVision model)"),C8o=l(),g_=a("li"),Hce=a("strong"),w8o=o("deberta"),A8o=o(" \u2014 "),yj=a("a"),L8o=o("DebertaModel"),y8o=o(" (DeBERTa model)"),x8o=l(),h_=a("li"),Uce=a("strong"),$8o=o("deberta-v2"),k8o=o(" \u2014 "),xj=a("a"),S8o=o("DebertaV2Model"),R8o=o(" (DeBERTa-v2 model)"),P8o=l(),p_=a("li"),Jce=a("strong"),B8o=o("decision_transformer"),N8o=o(" \u2014 "),$j=a("a"),I8o=o("DecisionTransformerModel"),q8o=o(" (Decision Transformer model)"),j8o=l(),__=a("li"),Yce=a("strong"),D8o=o("deit"),G8o=o(" \u2014 "),kj=a("a"),O8o=o("DeiTModel"),V8o=o(" (DeiT model)"),X8o=l(),u_=a("li"),Kce=a("strong"),z8o=o("detr"),Q8o=o(" \u2014 "),Sj=a("a"),W8o=o("DetrModel"),H8o=o(" (DETR model)"),U8o=l(),b_=a("li"),Zce=a("strong"),J8o=o("distilbert"),Y8o=o(" \u2014 "),Rj=a("a"),K8o=o("DistilBertModel"),Z8o=o(" (DistilBERT model)"),eMo=l(),v_=a("li"),efe=a("strong"),oMo=o("dpr"),rMo=o(" \u2014 "),Pj=a("a"),tMo=o("DPRQuestionEncoder"),aMo=o(" (DPR model)"),nMo=l(),F_=a("li"),ofe=a("strong"),sMo=o("dpt"),lMo=o(" \u2014 "),Bj=a("a"),iMo=o("DPTModel"),dMo=o(" (DPT model)"),cMo=l(),T_=a("li"),rfe=a("strong"),fMo=o("electra"),mMo=o(" \u2014 "),Nj=a("a"),gMo=o("ElectraModel"),hMo=o(" (ELECTRA model)"),pMo=l(),M_=a("li"),tfe=a("strong"),_Mo=o("flaubert"),uMo=o(" \u2014 "),Ij=a("a"),bMo=o("FlaubertModel"),vMo=o(" (FlauBERT model)"),FMo=l(),E_=a("li"),afe=a("strong"),TMo=o("flava"),MMo=o(" \u2014 "),qj=a("a"),EMo=o("FlavaModel"),CMo=o(" (FLAVA model)"),wMo=l(),C_=a("li"),nfe=a("strong"),AMo=o("fnet"),LMo=o(" \u2014 "),jj=a("a"),yMo=o("FNetModel"),xMo=o(" (FNet model)"),$Mo=l(),w_=a("li"),sfe=a("strong"),kMo=o("fsmt"),SMo=o(" \u2014 "),Dj=a("a"),RMo=o("FSMTModel"),PMo=o(" (FairSeq Machine-Translation model)"),BMo=l(),Hs=a("li"),lfe=a("strong"),NMo=o("funnel"),IMo=o(" \u2014 "),Gj=a("a"),qMo=o("FunnelModel"),jMo=o(" or "),Oj=a("a"),DMo=o("FunnelBaseModel"),GMo=o(" (Funnel Transformer model)"),OMo=l(),A_=a("li"),ife=a("strong"),VMo=o("glpn"),XMo=o(" \u2014 "),Vj=a("a"),zMo=o("GLPNModel"),QMo=o(" (GLPN model)"),WMo=l(),L_=a("li"),dfe=a("strong"),HMo=o("gpt2"),UMo=o(" \u2014 "),Xj=a("a"),JMo=o("GPT2Model"),YMo=o(" (OpenAI GPT-2 model)"),KMo=l(),y_=a("li"),cfe=a("strong"),ZMo=o("gpt_neo"),e4o=o(" \u2014 "),zj=a("a"),o4o=o("GPTNeoModel"),r4o=o(" (GPT Neo model)"),t4o=l(),x_=a("li"),ffe=a("strong"),a4o=o("gpt_neox"),n4o=o(" \u2014 "),Qj=a("a"),s4o=o("GPTNeoXModel"),l4o=o(" (GPT NeoX model)"),i4o=l(),$_=a("li"),mfe=a("strong"),d4o=o("gptj"),c4o=o(" \u2014 "),Wj=a("a"),f4o=o("GPTJModel"),m4o=o(" (GPT-J model)"),g4o=l(),k_=a("li"),gfe=a("strong"),h4o=o("groupvit"),p4o=o(" \u2014 "),Hj=a("a"),_4o=o("GroupViTModel"),u4o=o(" (GroupViT model)"),b4o=l(),S_=a("li"),hfe=a("strong"),v4o=o("hubert"),F4o=o(" \u2014 "),Uj=a("a"),T4o=o("HubertModel"),M4o=o(" (Hubert model)"),E4o=l(),R_=a("li"),pfe=a("strong"),C4o=o("ibert"),w4o=o(" \u2014 "),Jj=a("a"),A4o=o("IBertModel"),L4o=o(" (I-BERT model)"),y4o=l(),P_=a("li"),_fe=a("strong"),x4o=o("imagegpt"),$4o=o(" \u2014 "),Yj=a("a"),k4o=o("ImageGPTModel"),S4o=o(" (ImageGPT model)"),R4o=l(),B_=a("li"),ufe=a("strong"),P4o=o("jukebox"),B4o=o(" \u2014 "),bfe=a("code"),N4o=o("JukeboxModel"),I4o=o(" (Jukebox model)"),q4o=l(),N_=a("li"),vfe=a("strong"),j4o=o("layoutlm"),D4o=o(" \u2014 "),Kj=a("a"),G4o=o("LayoutLMModel"),O4o=o(" (LayoutLM model)"),V4o=l(),I_=a("li"),Ffe=a("strong"),X4o=o("layoutlmv2"),z4o=o(" \u2014 "),Zj=a("a"),Q4o=o("LayoutLMv2Model"),W4o=o(" (LayoutLMv2 model)"),H4o=l(),q_=a("li"),Tfe=a("strong"),U4o=o("layoutlmv3"),J4o=o(" \u2014 "),eD=a("a"),Y4o=o("LayoutLMv3Model"),K4o=o(" (LayoutLMv3 model)"),Z4o=l(),j_=a("li"),Mfe=a("strong"),eEo=o("led"),oEo=o(" \u2014 "),oD=a("a"),rEo=o("LEDModel"),tEo=o(" (LED model)"),aEo=l(),D_=a("li"),Efe=a("strong"),nEo=o("levit"),sEo=o(" \u2014 "),rD=a("a"),lEo=o("LevitModel"),iEo=o(" (LeViT model)"),dEo=l(),G_=a("li"),Cfe=a("strong"),cEo=o("longformer"),fEo=o(" \u2014 "),tD=a("a"),mEo=o("LongformerModel"),gEo=o(" (Longformer model)"),hEo=l(),O_=a("li"),wfe=a("strong"),pEo=o("longt5"),_Eo=o(" \u2014 "),aD=a("a"),uEo=o("LongT5Model"),bEo=o(" (LongT5 model)"),vEo=l(),V_=a("li"),Afe=a("strong"),FEo=o("luke"),TEo=o(" \u2014 "),nD=a("a"),MEo=o("LukeModel"),EEo=o(" (LUKE model)"),CEo=l(),X_=a("li"),Lfe=a("strong"),wEo=o("lxmert"),AEo=o(" \u2014 "),sD=a("a"),LEo=o("LxmertModel"),yEo=o(" (LXMERT model)"),xEo=l(),z_=a("li"),yfe=a("strong"),$Eo=o("m2m_100"),kEo=o(" \u2014 "),lD=a("a"),SEo=o("M2M100Model"),REo=o(" (M2M100 model)"),PEo=l(),Q_=a("li"),xfe=a("strong"),BEo=o("marian"),NEo=o(" \u2014 "),iD=a("a"),IEo=o("MarianModel"),qEo=o(" (Marian model)"),jEo=l(),W_=a("li"),$fe=a("strong"),DEo=o("maskformer"),GEo=o(" \u2014 "),dD=a("a"),OEo=o("MaskFormerModel"),VEo=o(" (MaskFormer model)"),XEo=l(),H_=a("li"),kfe=a("strong"),zEo=o("mbart"),QEo=o(" \u2014 "),cD=a("a"),WEo=o("MBartModel"),HEo=o(" (mBART model)"),UEo=l(),U_=a("li"),Sfe=a("strong"),JEo=o("mctct"),YEo=o(" \u2014 "),fD=a("a"),KEo=o("MCTCTModel"),ZEo=o(" (M-CTC-T model)"),eCo=l(),J_=a("li"),Rfe=a("strong"),oCo=o("megatron-bert"),rCo=o(" \u2014 "),mD=a("a"),tCo=o("MegatronBertModel"),aCo=o(" (Megatron-BERT model)"),nCo=l(),Y_=a("li"),Pfe=a("strong"),sCo=o("mobilebert"),lCo=o(" \u2014 "),gD=a("a"),iCo=o("MobileBertModel"),dCo=o(" (MobileBERT model)"),cCo=l(),K_=a("li"),Bfe=a("strong"),fCo=o("mobilevit"),mCo=o(" \u2014 "),hD=a("a"),gCo=o("MobileViTModel"),hCo=o(" (MobileViT model)"),pCo=l(),Z_=a("li"),Nfe=a("strong"),_Co=o("mpnet"),uCo=o(" \u2014 "),pD=a("a"),bCo=o("MPNetModel"),vCo=o(" (MPNet model)"),FCo=l(),eu=a("li"),Ife=a("strong"),TCo=o("mt5"),MCo=o(" \u2014 "),_D=a("a"),ECo=o("MT5Model"),CCo=o(" (MT5 model)"),wCo=l(),ou=a("li"),qfe=a("strong"),ACo=o("mvp"),LCo=o(" \u2014 "),uD=a("a"),yCo=o("MvpModel"),xCo=o(" (MVP model)"),$Co=l(),ru=a("li"),jfe=a("strong"),kCo=o("nezha"),SCo=o(" \u2014 "),bD=a("a"),RCo=o("NezhaModel"),PCo=o(" (Nezha model)"),BCo=l(),tu=a("li"),Dfe=a("strong"),NCo=o("nllb"),ICo=o(" \u2014 "),vD=a("a"),qCo=o("M2M100Model"),jCo=o(" (NLLB model)"),DCo=l(),au=a("li"),Gfe=a("strong"),GCo=o("nystromformer"),OCo=o(" \u2014 "),FD=a("a"),VCo=o("NystromformerModel"),XCo=o(" (Nystr\xF6mformer model)"),zCo=l(),nu=a("li"),Ofe=a("strong"),QCo=o("openai-gpt"),WCo=o(" \u2014 "),TD=a("a"),HCo=o("OpenAIGPTModel"),UCo=o(" (OpenAI GPT model)"),JCo=l(),su=a("li"),Vfe=a("strong"),YCo=o("opt"),KCo=o(" \u2014 "),MD=a("a"),ZCo=o("OPTModel"),e5o=o(" (OPT model)"),o5o=l(),lu=a("li"),Xfe=a("strong"),r5o=o("pegasus"),t5o=o(" \u2014 "),ED=a("a"),a5o=o("PegasusModel"),n5o=o(" (Pegasus model)"),s5o=l(),iu=a("li"),zfe=a("strong"),l5o=o("perceiver"),i5o=o(" \u2014 "),CD=a("a"),d5o=o("PerceiverModel"),c5o=o(" (Perceiver model)"),f5o=l(),du=a("li"),Qfe=a("strong"),m5o=o("plbart"),g5o=o(" \u2014 "),wD=a("a"),h5o=o("PLBartModel"),p5o=o(" (PLBart model)"),_5o=l(),cu=a("li"),Wfe=a("strong"),u5o=o("poolformer"),b5o=o(" \u2014 "),AD=a("a"),v5o=o("PoolFormerModel"),F5o=o(" (PoolFormer model)"),T5o=l(),fu=a("li"),Hfe=a("strong"),M5o=o("prophetnet"),E5o=o(" \u2014 "),LD=a("a"),C5o=o("ProphetNetModel"),w5o=o(" (ProphetNet model)"),A5o=l(),mu=a("li"),Ufe=a("strong"),L5o=o("qdqbert"),y5o=o(" \u2014 "),yD=a("a"),x5o=o("QDQBertModel"),$5o=o(" (QDQBert model)"),k5o=l(),gu=a("li"),Jfe=a("strong"),S5o=o("reformer"),R5o=o(" \u2014 "),xD=a("a"),P5o=o("ReformerModel"),B5o=o(" (Reformer model)"),N5o=l(),hu=a("li"),Yfe=a("strong"),I5o=o("regnet"),q5o=o(" \u2014 "),$D=a("a"),j5o=o("RegNetModel"),D5o=o(" (RegNet model)"),G5o=l(),pu=a("li"),Kfe=a("strong"),O5o=o("rembert"),V5o=o(" \u2014 "),kD=a("a"),X5o=o("RemBertModel"),z5o=o(" (RemBERT model)"),Q5o=l(),_u=a("li"),Zfe=a("strong"),W5o=o("resnet"),H5o=o(" \u2014 "),SD=a("a"),U5o=o("ResNetModel"),J5o=o(" (ResNet model)"),Y5o=l(),uu=a("li"),eme=a("strong"),K5o=o("retribert"),Z5o=o(" \u2014 "),RD=a("a"),e3o=o("RetriBertModel"),o3o=o(" (RetriBERT model)"),r3o=l(),bu=a("li"),ome=a("strong"),t3o=o("roberta"),a3o=o(" \u2014 "),PD=a("a"),n3o=o("RobertaModel"),s3o=o(" (RoBERTa model)"),l3o=l(),vu=a("li"),rme=a("strong"),i3o=o("roformer"),d3o=o(" \u2014 "),BD=a("a"),c3o=o("RoFormerModel"),f3o=o(" (RoFormer model)"),m3o=l(),Fu=a("li"),tme=a("strong"),g3o=o("segformer"),h3o=o(" \u2014 "),ND=a("a"),p3o=o("SegformerModel"),_3o=o(" (SegFormer model)"),u3o=l(),Tu=a("li"),ame=a("strong"),b3o=o("sew"),v3o=o(" \u2014 "),ID=a("a"),F3o=o("SEWModel"),T3o=o(" (SEW model)"),M3o=l(),Mu=a("li"),nme=a("strong"),E3o=o("sew-d"),C3o=o(" \u2014 "),qD=a("a"),w3o=o("SEWDModel"),A3o=o(" (SEW-D model)"),L3o=l(),Eu=a("li"),sme=a("strong"),y3o=o("speech_to_text"),x3o=o(" \u2014 "),jD=a("a"),$3o=o("Speech2TextModel"),k3o=o(" (Speech2Text model)"),S3o=l(),Cu=a("li"),lme=a("strong"),R3o=o("splinter"),P3o=o(" \u2014 "),DD=a("a"),B3o=o("SplinterModel"),N3o=o(" (Splinter model)"),I3o=l(),wu=a("li"),ime=a("strong"),q3o=o("squeezebert"),j3o=o(" \u2014 "),GD=a("a"),D3o=o("SqueezeBertModel"),G3o=o(" (SqueezeBERT model)"),O3o=l(),Au=a("li"),dme=a("strong"),V3o=o("swin"),X3o=o(" \u2014 "),OD=a("a"),z3o=o("SwinModel"),Q3o=o(" (Swin Transformer model)"),W3o=l(),Lu=a("li"),cme=a("strong"),H3o=o("t5"),U3o=o(" \u2014 "),VD=a("a"),J3o=o("T5Model"),Y3o=o(" (T5 model)"),K3o=l(),yu=a("li"),fme=a("strong"),Z3o=o("tapas"),e0o=o(" \u2014 "),XD=a("a"),o0o=o("TapasModel"),r0o=o(" (TAPAS model)"),t0o=l(),xu=a("li"),mme=a("strong"),a0o=o("trajectory_transformer"),n0o=o(" \u2014 "),zD=a("a"),s0o=o("TrajectoryTransformerModel"),l0o=o(" (Trajectory Transformer model)"),i0o=l(),$u=a("li"),gme=a("strong"),d0o=o("transfo-xl"),c0o=o(" \u2014 "),QD=a("a"),f0o=o("TransfoXLModel"),m0o=o(" (Transformer-XL model)"),g0o=l(),ku=a("li"),hme=a("strong"),h0o=o("unispeech"),p0o=o(" \u2014 "),WD=a("a"),_0o=o("UniSpeechModel"),u0o=o(" (UniSpeech model)"),b0o=l(),Su=a("li"),pme=a("strong"),v0o=o("unispeech-sat"),F0o=o(" \u2014 "),HD=a("a"),T0o=o("UniSpeechSatModel"),M0o=o(" (UniSpeechSat model)"),E0o=l(),Ru=a("li"),_me=a("strong"),C0o=o("van"),w0o=o(" \u2014 "),UD=a("a"),A0o=o("VanModel"),L0o=o(" (VAN model)"),y0o=l(),Pu=a("li"),ume=a("strong"),x0o=o("vilt"),$0o=o(" \u2014 "),JD=a("a"),k0o=o("ViltModel"),S0o=o(" (ViLT model)"),R0o=l(),Bu=a("li"),bme=a("strong"),P0o=o("vision-text-dual-encoder"),B0o=o(" \u2014 "),YD=a("a"),N0o=o("VisionTextDualEncoderModel"),I0o=o(" (VisionTextDualEncoder model)"),q0o=l(),Nu=a("li"),vme=a("strong"),j0o=o("visual_bert"),D0o=o(" \u2014 "),KD=a("a"),G0o=o("VisualBertModel"),O0o=o(" (VisualBERT model)"),V0o=l(),Iu=a("li"),Fme=a("strong"),X0o=o("vit"),z0o=o(" \u2014 "),ZD=a("a"),Q0o=o("ViTModel"),W0o=o(" (ViT model)"),H0o=l(),qu=a("li"),Tme=a("strong"),U0o=o("vit_mae"),J0o=o(" \u2014 "),eG=a("a"),Y0o=o("ViTMAEModel"),K0o=o(" (ViTMAE model)"),Z0o=l(),ju=a("li"),Mme=a("strong"),ewo=o("wav2vec2"),owo=o(" \u2014 "),oG=a("a"),rwo=o("Wav2Vec2Model"),two=o(" (Wav2Vec2 model)"),awo=l(),Du=a("li"),Eme=a("strong"),nwo=o("wav2vec2-conformer"),swo=o(" \u2014 "),rG=a("a"),lwo=o("Wav2Vec2ConformerModel"),iwo=o(" (Wav2Vec2-Conformer model)"),dwo=l(),Gu=a("li"),Cme=a("strong"),cwo=o("wavlm"),fwo=o(" \u2014 "),tG=a("a"),mwo=o("WavLMModel"),gwo=o(" (WavLM model)"),hwo=l(),Ou=a("li"),wme=a("strong"),pwo=o("xglm"),_wo=o(" \u2014 "),aG=a("a"),uwo=o("XGLMModel"),bwo=o(" (XGLM model)"),vwo=l(),Vu=a("li"),Ame=a("strong"),Fwo=o("xlm"),Two=o(" \u2014 "),nG=a("a"),Mwo=o("XLMModel"),Ewo=o(" (XLM model)"),Cwo=l(),Xu=a("li"),Lme=a("strong"),wwo=o("xlm-prophetnet"),Awo=o(" \u2014 "),sG=a("a"),Lwo=o("XLMProphetNetModel"),ywo=o(" (XLM-ProphetNet model)"),xwo=l(),zu=a("li"),yme=a("strong"),$wo=o("xlm-roberta"),kwo=o(" \u2014 "),lG=a("a"),Swo=o("XLMRobertaModel"),Rwo=o(" (XLM-RoBERTa model)"),Pwo=l(),Qu=a("li"),xme=a("strong"),Bwo=o("xlm-roberta-xl"),Nwo=o(" \u2014 "),iG=a("a"),Iwo=o("XLMRobertaXLModel"),qwo=o(" (XLM-RoBERTa-XL model)"),jwo=l(),Wu=a("li"),$me=a("strong"),Dwo=o("xlnet"),Gwo=o(" \u2014 "),dG=a("a"),Owo=o("XLNetModel"),Vwo=o(" (XLNet model)"),Xwo=l(),Hu=a("li"),kme=a("strong"),zwo=o("yolos"),Qwo=o(" \u2014 "),cG=a("a"),Wwo=o("YolosModel"),Hwo=o(" (YOLOS model)"),Uwo=l(),Uu=a("li"),Sme=a("strong"),Jwo=o("yoso"),Ywo=o(" \u2014 "),fG=a("a"),Kwo=o("YosoModel"),Zwo=o(" (YOSO model)"),eAo=l(),Ju=a("p"),oAo=o("The model is set in evaluation mode by default using "),Rme=a("code"),rAo=o("model.eval()"),tAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=a("code"),aAo=o("model.train()"),nAo=l(),F(Yu.$$.fragment),GXe=l(),zi=a("h2"),Ku=a("a"),Bme=a("span"),F(OL.$$.fragment),sAo=l(),Nme=a("span"),lAo=o("AutoModelForPreTraining"),OXe=l(),ko=a("div"),F(VL.$$.fragment),iAo=l(),Qi=a("p"),dAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mG=a("a"),cAo=o("from_pretrained()"),fAo=o(" class method or the "),gG=a("a"),mAo=o("from_config()"),gAo=o(` class
method.`),hAo=l(),XL=a("p"),pAo=o("This class cannot be instantiated directly using "),Ime=a("code"),_Ao=o("__init__()"),uAo=o(" (throws an error)."),bAo=l(),dt=a("div"),F(zL.$$.fragment),vAo=l(),qme=a("p"),FAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),TAo=l(),Wi=a("p"),MAo=o(`Note:
Loading a model from its configuration file does `),jme=a("strong"),EAo=o("not"),CAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=a("a"),wAo=o("from_pretrained()"),AAo=o(" to load the model weights."),LAo=l(),F(Zu.$$.fragment),yAo=l(),Ke=a("div"),F(QL.$$.fragment),xAo=l(),Dme=a("p"),$Ao=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kAo=l(),Ia=a("p"),SAo=o("The model class to instantiate is selected based on the "),Gme=a("code"),RAo=o("model_type"),PAo=o(` property of the config object (either
passed as an argument or loaded from `),Ome=a("code"),BAo=o("pretrained_model_name_or_path"),NAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=a("code"),IAo=o("pretrained_model_name_or_path"),qAo=o(":"),jAo=l(),G=a("ul"),e2=a("li"),Xme=a("strong"),DAo=o("albert"),GAo=o(" \u2014 "),pG=a("a"),OAo=o("AlbertForPreTraining"),VAo=o(" (ALBERT model)"),XAo=l(),o2=a("li"),zme=a("strong"),zAo=o("bart"),QAo=o(" \u2014 "),_G=a("a"),WAo=o("BartForConditionalGeneration"),HAo=o(" (BART model)"),UAo=l(),r2=a("li"),Qme=a("strong"),JAo=o("bert"),YAo=o(" \u2014 "),uG=a("a"),KAo=o("BertForPreTraining"),ZAo=o(" (BERT model)"),eLo=l(),t2=a("li"),Wme=a("strong"),oLo=o("big_bird"),rLo=o(" \u2014 "),bG=a("a"),tLo=o("BigBirdForPreTraining"),aLo=o(" (BigBird model)"),nLo=l(),a2=a("li"),Hme=a("strong"),sLo=o("bloom"),lLo=o(" \u2014 "),vG=a("a"),iLo=o("BloomForCausalLM"),dLo=o(" (BLOOM model)"),cLo=l(),n2=a("li"),Ume=a("strong"),fLo=o("camembert"),mLo=o(" \u2014 "),FG=a("a"),gLo=o("CamembertForMaskedLM"),hLo=o(" (CamemBERT model)"),pLo=l(),s2=a("li"),Jme=a("strong"),_Lo=o("ctrl"),uLo=o(" \u2014 "),TG=a("a"),bLo=o("CTRLLMHeadModel"),vLo=o(" (CTRL model)"),FLo=l(),l2=a("li"),Yme=a("strong"),TLo=o("data2vec-text"),MLo=o(" \u2014 "),MG=a("a"),ELo=o("Data2VecTextForMaskedLM"),CLo=o(" (Data2VecText model)"),wLo=l(),i2=a("li"),Kme=a("strong"),ALo=o("deberta"),LLo=o(" \u2014 "),EG=a("a"),yLo=o("DebertaForMaskedLM"),xLo=o(" (DeBERTa model)"),$Lo=l(),d2=a("li"),Zme=a("strong"),kLo=o("deberta-v2"),SLo=o(" \u2014 "),CG=a("a"),RLo=o("DebertaV2ForMaskedLM"),PLo=o(" (DeBERTa-v2 model)"),BLo=l(),c2=a("li"),ege=a("strong"),NLo=o("distilbert"),ILo=o(" \u2014 "),wG=a("a"),qLo=o("DistilBertForMaskedLM"),jLo=o(" (DistilBERT model)"),DLo=l(),f2=a("li"),oge=a("strong"),GLo=o("electra"),OLo=o(" \u2014 "),AG=a("a"),VLo=o("ElectraForPreTraining"),XLo=o(" (ELECTRA model)"),zLo=l(),m2=a("li"),rge=a("strong"),QLo=o("flaubert"),WLo=o(" \u2014 "),LG=a("a"),HLo=o("FlaubertWithLMHeadModel"),ULo=o(" (FlauBERT model)"),JLo=l(),g2=a("li"),tge=a("strong"),YLo=o("flava"),KLo=o(" \u2014 "),yG=a("a"),ZLo=o("FlavaForPreTraining"),eyo=o(" (FLAVA model)"),oyo=l(),h2=a("li"),age=a("strong"),ryo=o("fnet"),tyo=o(" \u2014 "),xG=a("a"),ayo=o("FNetForPreTraining"),nyo=o(" (FNet model)"),syo=l(),p2=a("li"),nge=a("strong"),lyo=o("fsmt"),iyo=o(" \u2014 "),$G=a("a"),dyo=o("FSMTForConditionalGeneration"),cyo=o(" (FairSeq Machine-Translation model)"),fyo=l(),_2=a("li"),sge=a("strong"),myo=o("funnel"),gyo=o(" \u2014 "),kG=a("a"),hyo=o("FunnelForPreTraining"),pyo=o(" (Funnel Transformer model)"),_yo=l(),u2=a("li"),lge=a("strong"),uyo=o("gpt2"),byo=o(" \u2014 "),SG=a("a"),vyo=o("GPT2LMHeadModel"),Fyo=o(" (OpenAI GPT-2 model)"),Tyo=l(),b2=a("li"),ige=a("strong"),Myo=o("ibert"),Eyo=o(" \u2014 "),RG=a("a"),Cyo=o("IBertForMaskedLM"),wyo=o(" (I-BERT model)"),Ayo=l(),v2=a("li"),dge=a("strong"),Lyo=o("layoutlm"),yyo=o(" \u2014 "),PG=a("a"),xyo=o("LayoutLMForMaskedLM"),$yo=o(" (LayoutLM model)"),kyo=l(),F2=a("li"),cge=a("strong"),Syo=o("longformer"),Ryo=o(" \u2014 "),BG=a("a"),Pyo=o("LongformerForMaskedLM"),Byo=o(" (Longformer model)"),Nyo=l(),T2=a("li"),fge=a("strong"),Iyo=o("lxmert"),qyo=o(" \u2014 "),NG=a("a"),jyo=o("LxmertForPreTraining"),Dyo=o(" (LXMERT model)"),Gyo=l(),M2=a("li"),mge=a("strong"),Oyo=o("megatron-bert"),Vyo=o(" \u2014 "),IG=a("a"),Xyo=o("MegatronBertForPreTraining"),zyo=o(" (Megatron-BERT model)"),Qyo=l(),E2=a("li"),gge=a("strong"),Wyo=o("mobilebert"),Hyo=o(" \u2014 "),qG=a("a"),Uyo=o("MobileBertForPreTraining"),Jyo=o(" (MobileBERT model)"),Yyo=l(),C2=a("li"),hge=a("strong"),Kyo=o("mpnet"),Zyo=o(" \u2014 "),jG=a("a"),e9o=o("MPNetForMaskedLM"),o9o=o(" (MPNet model)"),r9o=l(),w2=a("li"),pge=a("strong"),t9o=o("mvp"),a9o=o(" \u2014 "),DG=a("a"),n9o=o("MvpForConditionalGeneration"),s9o=o(" (MVP model)"),l9o=l(),A2=a("li"),_ge=a("strong"),i9o=o("nezha"),d9o=o(" \u2014 "),GG=a("a"),c9o=o("NezhaForPreTraining"),f9o=o(" (Nezha model)"),m9o=l(),L2=a("li"),uge=a("strong"),g9o=o("openai-gpt"),h9o=o(" \u2014 "),OG=a("a"),p9o=o("OpenAIGPTLMHeadModel"),_9o=o(" (OpenAI GPT model)"),u9o=l(),y2=a("li"),bge=a("strong"),b9o=o("retribert"),v9o=o(" \u2014 "),VG=a("a"),F9o=o("RetriBertModel"),T9o=o(" (RetriBERT model)"),M9o=l(),x2=a("li"),vge=a("strong"),E9o=o("roberta"),C9o=o(" \u2014 "),XG=a("a"),w9o=o("RobertaForMaskedLM"),A9o=o(" (RoBERTa model)"),L9o=l(),$2=a("li"),Fge=a("strong"),y9o=o("splinter"),x9o=o(" \u2014 "),zG=a("a"),$9o=o("SplinterForPreTraining"),k9o=o(" (Splinter model)"),S9o=l(),k2=a("li"),Tge=a("strong"),R9o=o("squeezebert"),P9o=o(" \u2014 "),QG=a("a"),B9o=o("SqueezeBertForMaskedLM"),N9o=o(" (SqueezeBERT model)"),I9o=l(),S2=a("li"),Mge=a("strong"),q9o=o("t5"),j9o=o(" \u2014 "),WG=a("a"),D9o=o("T5ForConditionalGeneration"),G9o=o(" (T5 model)"),O9o=l(),R2=a("li"),Ege=a("strong"),V9o=o("tapas"),X9o=o(" \u2014 "),HG=a("a"),z9o=o("TapasForMaskedLM"),Q9o=o(" (TAPAS model)"),W9o=l(),P2=a("li"),Cge=a("strong"),H9o=o("transfo-xl"),U9o=o(" \u2014 "),UG=a("a"),J9o=o("TransfoXLLMHeadModel"),Y9o=o(" (Transformer-XL model)"),K9o=l(),B2=a("li"),wge=a("strong"),Z9o=o("unispeech"),exo=o(" \u2014 "),JG=a("a"),oxo=o("UniSpeechForPreTraining"),rxo=o(" (UniSpeech model)"),txo=l(),N2=a("li"),Age=a("strong"),axo=o("unispeech-sat"),nxo=o(" \u2014 "),YG=a("a"),sxo=o("UniSpeechSatForPreTraining"),lxo=o(" (UniSpeechSat model)"),ixo=l(),I2=a("li"),Lge=a("strong"),dxo=o("visual_bert"),cxo=o(" \u2014 "),KG=a("a"),fxo=o("VisualBertForPreTraining"),mxo=o(" (VisualBERT model)"),gxo=l(),q2=a("li"),yge=a("strong"),hxo=o("vit_mae"),pxo=o(" \u2014 "),ZG=a("a"),_xo=o("ViTMAEForPreTraining"),uxo=o(" (ViTMAE model)"),bxo=l(),j2=a("li"),xge=a("strong"),vxo=o("wav2vec2"),Fxo=o(" \u2014 "),eO=a("a"),Txo=o("Wav2Vec2ForPreTraining"),Mxo=o(" (Wav2Vec2 model)"),Exo=l(),D2=a("li"),$ge=a("strong"),Cxo=o("wav2vec2-conformer"),wxo=o(" \u2014 "),oO=a("a"),Axo=o("Wav2Vec2ConformerForPreTraining"),Lxo=o(" (Wav2Vec2-Conformer model)"),yxo=l(),G2=a("li"),kge=a("strong"),xxo=o("xlm"),$xo=o(" \u2014 "),rO=a("a"),kxo=o("XLMWithLMHeadModel"),Sxo=o(" (XLM model)"),Rxo=l(),O2=a("li"),Sge=a("strong"),Pxo=o("xlm-roberta"),Bxo=o(" \u2014 "),tO=a("a"),Nxo=o("XLMRobertaForMaskedLM"),Ixo=o(" (XLM-RoBERTa model)"),qxo=l(),V2=a("li"),Rge=a("strong"),jxo=o("xlm-roberta-xl"),Dxo=o(" \u2014 "),aO=a("a"),Gxo=o("XLMRobertaXLForMaskedLM"),Oxo=o(" (XLM-RoBERTa-XL model)"),Vxo=l(),X2=a("li"),Pge=a("strong"),Xxo=o("xlnet"),zxo=o(" \u2014 "),nO=a("a"),Qxo=o("XLNetLMHeadModel"),Wxo=o(" (XLNet model)"),Hxo=l(),z2=a("p"),Uxo=o("The model is set in evaluation mode by default using "),Bge=a("code"),Jxo=o("model.eval()"),Yxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=a("code"),Kxo=o("model.train()"),Zxo=l(),F(Q2.$$.fragment),VXe=l(),Hi=a("h2"),W2=a("a"),Ige=a("span"),F(WL.$$.fragment),e$o=l(),qge=a("span"),o$o=o("AutoModelForCausalLM"),XXe=l(),So=a("div"),F(HL.$$.fragment),r$o=l(),Ui=a("p"),t$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sO=a("a"),a$o=o("from_pretrained()"),n$o=o(" class method or the "),lO=a("a"),s$o=o("from_config()"),l$o=o(` class
method.`),i$o=l(),UL=a("p"),d$o=o("This class cannot be instantiated directly using "),jge=a("code"),c$o=o("__init__()"),f$o=o(" (throws an error)."),m$o=l(),ct=a("div"),F(JL.$$.fragment),g$o=l(),Dge=a("p"),h$o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),p$o=l(),Ji=a("p"),_$o=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),u$o=o("not"),b$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),v$o=o("from_pretrained()"),F$o=o(" to load the model weights."),T$o=l(),F(H2.$$.fragment),M$o=l(),Ze=a("div"),F(YL.$$.fragment),E$o=l(),Oge=a("p"),C$o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),w$o=l(),qa=a("p"),A$o=o("The model class to instantiate is selected based on the "),Vge=a("code"),L$o=o("model_type"),y$o=o(` property of the config object (either
passed as an argument or loaded from `),Xge=a("code"),x$o=o("pretrained_model_name_or_path"),$$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=a("code"),k$o=o("pretrained_model_name_or_path"),S$o=o(":"),R$o=l(),z=a("ul"),U2=a("li"),Qge=a("strong"),P$o=o("bart"),B$o=o(" \u2014 "),dO=a("a"),N$o=o("BartForCausalLM"),I$o=o(" (BART model)"),q$o=l(),J2=a("li"),Wge=a("strong"),j$o=o("bert"),D$o=o(" \u2014 "),cO=a("a"),G$o=o("BertLMHeadModel"),O$o=o(" (BERT model)"),V$o=l(),Y2=a("li"),Hge=a("strong"),X$o=o("bert-generation"),z$o=o(" \u2014 "),fO=a("a"),Q$o=o("BertGenerationDecoder"),W$o=o(" (Bert Generation model)"),H$o=l(),K2=a("li"),Uge=a("strong"),U$o=o("big_bird"),J$o=o(" \u2014 "),mO=a("a"),Y$o=o("BigBirdForCausalLM"),K$o=o(" (BigBird model)"),Z$o=l(),Z2=a("li"),Jge=a("strong"),eko=o("bigbird_pegasus"),oko=o(" \u2014 "),gO=a("a"),rko=o("BigBirdPegasusForCausalLM"),tko=o(" (BigBird-Pegasus model)"),ako=l(),e1=a("li"),Yge=a("strong"),nko=o("blenderbot"),sko=o(" \u2014 "),hO=a("a"),lko=o("BlenderbotForCausalLM"),iko=o(" (Blenderbot model)"),dko=l(),o1=a("li"),Kge=a("strong"),cko=o("blenderbot-small"),fko=o(" \u2014 "),pO=a("a"),mko=o("BlenderbotSmallForCausalLM"),gko=o(" (BlenderbotSmall model)"),hko=l(),r1=a("li"),Zge=a("strong"),pko=o("bloom"),_ko=o(" \u2014 "),_O=a("a"),uko=o("BloomForCausalLM"),bko=o(" (BLOOM model)"),vko=l(),t1=a("li"),ehe=a("strong"),Fko=o("camembert"),Tko=o(" \u2014 "),uO=a("a"),Mko=o("CamembertForCausalLM"),Eko=o(" (CamemBERT model)"),Cko=l(),a1=a("li"),ohe=a("strong"),wko=o("codegen"),Ako=o(" \u2014 "),bO=a("a"),Lko=o("CodeGenForCausalLM"),yko=o(" (CodeGen model)"),xko=l(),n1=a("li"),rhe=a("strong"),$ko=o("ctrl"),kko=o(" \u2014 "),vO=a("a"),Sko=o("CTRLLMHeadModel"),Rko=o(" (CTRL model)"),Pko=l(),s1=a("li"),the=a("strong"),Bko=o("data2vec-text"),Nko=o(" \u2014 "),FO=a("a"),Iko=o("Data2VecTextForCausalLM"),qko=o(" (Data2VecText model)"),jko=l(),l1=a("li"),ahe=a("strong"),Dko=o("electra"),Gko=o(" \u2014 "),TO=a("a"),Oko=o("ElectraForCausalLM"),Vko=o(" (ELECTRA model)"),Xko=l(),i1=a("li"),nhe=a("strong"),zko=o("gpt2"),Qko=o(" \u2014 "),MO=a("a"),Wko=o("GPT2LMHeadModel"),Hko=o(" (OpenAI GPT-2 model)"),Uko=l(),d1=a("li"),she=a("strong"),Jko=o("gpt_neo"),Yko=o(" \u2014 "),EO=a("a"),Kko=o("GPTNeoForCausalLM"),Zko=o(" (GPT Neo model)"),eSo=l(),c1=a("li"),lhe=a("strong"),oSo=o("gpt_neox"),rSo=o(" \u2014 "),CO=a("a"),tSo=o("GPTNeoXForCausalLM"),aSo=o(" (GPT NeoX model)"),nSo=l(),f1=a("li"),ihe=a("strong"),sSo=o("gptj"),lSo=o(" \u2014 "),wO=a("a"),iSo=o("GPTJForCausalLM"),dSo=o(" (GPT-J model)"),cSo=l(),m1=a("li"),dhe=a("strong"),fSo=o("marian"),mSo=o(" \u2014 "),AO=a("a"),gSo=o("MarianForCausalLM"),hSo=o(" (Marian model)"),pSo=l(),g1=a("li"),che=a("strong"),_So=o("mbart"),uSo=o(" \u2014 "),LO=a("a"),bSo=o("MBartForCausalLM"),vSo=o(" (mBART model)"),FSo=l(),h1=a("li"),fhe=a("strong"),TSo=o("megatron-bert"),MSo=o(" \u2014 "),yO=a("a"),ESo=o("MegatronBertForCausalLM"),CSo=o(" (Megatron-BERT model)"),wSo=l(),p1=a("li"),mhe=a("strong"),ASo=o("mvp"),LSo=o(" \u2014 "),xO=a("a"),ySo=o("MvpForCausalLM"),xSo=o(" (MVP model)"),$So=l(),_1=a("li"),ghe=a("strong"),kSo=o("openai-gpt"),SSo=o(" \u2014 "),$O=a("a"),RSo=o("OpenAIGPTLMHeadModel"),PSo=o(" (OpenAI GPT model)"),BSo=l(),u1=a("li"),hhe=a("strong"),NSo=o("opt"),ISo=o(" \u2014 "),kO=a("a"),qSo=o("OPTForCausalLM"),jSo=o(" (OPT model)"),DSo=l(),b1=a("li"),phe=a("strong"),GSo=o("pegasus"),OSo=o(" \u2014 "),SO=a("a"),VSo=o("PegasusForCausalLM"),XSo=o(" (Pegasus model)"),zSo=l(),v1=a("li"),_he=a("strong"),QSo=o("plbart"),WSo=o(" \u2014 "),RO=a("a"),HSo=o("PLBartForCausalLM"),USo=o(" (PLBart model)"),JSo=l(),F1=a("li"),uhe=a("strong"),YSo=o("prophetnet"),KSo=o(" \u2014 "),PO=a("a"),ZSo=o("ProphetNetForCausalLM"),eRo=o(" (ProphetNet model)"),oRo=l(),T1=a("li"),bhe=a("strong"),rRo=o("qdqbert"),tRo=o(" \u2014 "),BO=a("a"),aRo=o("QDQBertLMHeadModel"),nRo=o(" (QDQBert model)"),sRo=l(),M1=a("li"),vhe=a("strong"),lRo=o("reformer"),iRo=o(" \u2014 "),NO=a("a"),dRo=o("ReformerModelWithLMHead"),cRo=o(" (Reformer model)"),fRo=l(),E1=a("li"),Fhe=a("strong"),mRo=o("rembert"),gRo=o(" \u2014 "),IO=a("a"),hRo=o("RemBertForCausalLM"),pRo=o(" (RemBERT model)"),_Ro=l(),C1=a("li"),The=a("strong"),uRo=o("roberta"),bRo=o(" \u2014 "),qO=a("a"),vRo=o("RobertaForCausalLM"),FRo=o(" (RoBERTa model)"),TRo=l(),w1=a("li"),Mhe=a("strong"),MRo=o("roformer"),ERo=o(" \u2014 "),jO=a("a"),CRo=o("RoFormerForCausalLM"),wRo=o(" (RoFormer model)"),ARo=l(),A1=a("li"),Ehe=a("strong"),LRo=o("speech_to_text_2"),yRo=o(" \u2014 "),DO=a("a"),xRo=o("Speech2Text2ForCausalLM"),$Ro=o(" (Speech2Text2 model)"),kRo=l(),L1=a("li"),Che=a("strong"),SRo=o("transfo-xl"),RRo=o(" \u2014 "),GO=a("a"),PRo=o("TransfoXLLMHeadModel"),BRo=o(" (Transformer-XL model)"),NRo=l(),y1=a("li"),whe=a("strong"),IRo=o("trocr"),qRo=o(" \u2014 "),OO=a("a"),jRo=o("TrOCRForCausalLM"),DRo=o(" (TrOCR model)"),GRo=l(),x1=a("li"),Ahe=a("strong"),ORo=o("xglm"),VRo=o(" \u2014 "),VO=a("a"),XRo=o("XGLMForCausalLM"),zRo=o(" (XGLM model)"),QRo=l(),$1=a("li"),Lhe=a("strong"),WRo=o("xlm"),HRo=o(" \u2014 "),XO=a("a"),URo=o("XLMWithLMHeadModel"),JRo=o(" (XLM model)"),YRo=l(),k1=a("li"),yhe=a("strong"),KRo=o("xlm-prophetnet"),ZRo=o(" \u2014 "),zO=a("a"),ePo=o("XLMProphetNetForCausalLM"),oPo=o(" (XLM-ProphetNet model)"),rPo=l(),S1=a("li"),xhe=a("strong"),tPo=o("xlm-roberta"),aPo=o(" \u2014 "),QO=a("a"),nPo=o("XLMRobertaForCausalLM"),sPo=o(" (XLM-RoBERTa model)"),lPo=l(),R1=a("li"),$he=a("strong"),iPo=o("xlm-roberta-xl"),dPo=o(" \u2014 "),WO=a("a"),cPo=o("XLMRobertaXLForCausalLM"),fPo=o(" (XLM-RoBERTa-XL model)"),mPo=l(),P1=a("li"),khe=a("strong"),gPo=o("xlnet"),hPo=o(" \u2014 "),HO=a("a"),pPo=o("XLNetLMHeadModel"),_Po=o(" (XLNet model)"),uPo=l(),B1=a("p"),bPo=o("The model is set in evaluation mode by default using "),She=a("code"),vPo=o("model.eval()"),FPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=a("code"),TPo=o("model.train()"),MPo=l(),F(N1.$$.fragment),zXe=l(),Yi=a("h2"),I1=a("a"),Phe=a("span"),F(KL.$$.fragment),EPo=l(),Bhe=a("span"),CPo=o("AutoModelForMaskedLM"),QXe=l(),Ro=a("div"),F(ZL.$$.fragment),wPo=l(),Ki=a("p"),APo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UO=a("a"),LPo=o("from_pretrained()"),yPo=o(" class method or the "),JO=a("a"),xPo=o("from_config()"),$Po=o(` class
method.`),kPo=l(),ey=a("p"),SPo=o("This class cannot be instantiated directly using "),Nhe=a("code"),RPo=o("__init__()"),PPo=o(" (throws an error)."),BPo=l(),ft=a("div"),F(oy.$$.fragment),NPo=l(),Ihe=a("p"),IPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qPo=l(),Zi=a("p"),jPo=o(`Note:
Loading a model from its configuration file does `),qhe=a("strong"),DPo=o("not"),GPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=a("a"),OPo=o("from_pretrained()"),VPo=o(" to load the model weights."),XPo=l(),F(q1.$$.fragment),zPo=l(),eo=a("div"),F(ry.$$.fragment),QPo=l(),jhe=a("p"),WPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HPo=l(),ja=a("p"),UPo=o("The model class to instantiate is selected based on the "),Dhe=a("code"),JPo=o("model_type"),YPo=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),KPo=o("pretrained_model_name_or_path"),ZPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=a("code"),eBo=o("pretrained_model_name_or_path"),oBo=o(":"),rBo=l(),W=a("ul"),j1=a("li"),Vhe=a("strong"),tBo=o("albert"),aBo=o(" \u2014 "),KO=a("a"),nBo=o("AlbertForMaskedLM"),sBo=o(" (ALBERT model)"),lBo=l(),D1=a("li"),Xhe=a("strong"),iBo=o("bart"),dBo=o(" \u2014 "),ZO=a("a"),cBo=o("BartForConditionalGeneration"),fBo=o(" (BART model)"),mBo=l(),G1=a("li"),zhe=a("strong"),gBo=o("bert"),hBo=o(" \u2014 "),eV=a("a"),pBo=o("BertForMaskedLM"),_Bo=o(" (BERT model)"),uBo=l(),O1=a("li"),Qhe=a("strong"),bBo=o("big_bird"),vBo=o(" \u2014 "),oV=a("a"),FBo=o("BigBirdForMaskedLM"),TBo=o(" (BigBird model)"),MBo=l(),V1=a("li"),Whe=a("strong"),EBo=o("camembert"),CBo=o(" \u2014 "),rV=a("a"),wBo=o("CamembertForMaskedLM"),ABo=o(" (CamemBERT model)"),LBo=l(),X1=a("li"),Hhe=a("strong"),yBo=o("convbert"),xBo=o(" \u2014 "),tV=a("a"),$Bo=o("ConvBertForMaskedLM"),kBo=o(" (ConvBERT model)"),SBo=l(),z1=a("li"),Uhe=a("strong"),RBo=o("data2vec-text"),PBo=o(" \u2014 "),aV=a("a"),BBo=o("Data2VecTextForMaskedLM"),NBo=o(" (Data2VecText model)"),IBo=l(),Q1=a("li"),Jhe=a("strong"),qBo=o("deberta"),jBo=o(" \u2014 "),nV=a("a"),DBo=o("DebertaForMaskedLM"),GBo=o(" (DeBERTa model)"),OBo=l(),W1=a("li"),Yhe=a("strong"),VBo=o("deberta-v2"),XBo=o(" \u2014 "),sV=a("a"),zBo=o("DebertaV2ForMaskedLM"),QBo=o(" (DeBERTa-v2 model)"),WBo=l(),H1=a("li"),Khe=a("strong"),HBo=o("distilbert"),UBo=o(" \u2014 "),lV=a("a"),JBo=o("DistilBertForMaskedLM"),YBo=o(" (DistilBERT model)"),KBo=l(),U1=a("li"),Zhe=a("strong"),ZBo=o("electra"),eNo=o(" \u2014 "),iV=a("a"),oNo=o("ElectraForMaskedLM"),rNo=o(" (ELECTRA model)"),tNo=l(),J1=a("li"),epe=a("strong"),aNo=o("flaubert"),nNo=o(" \u2014 "),dV=a("a"),sNo=o("FlaubertWithLMHeadModel"),lNo=o(" (FlauBERT model)"),iNo=l(),Y1=a("li"),ope=a("strong"),dNo=o("fnet"),cNo=o(" \u2014 "),cV=a("a"),fNo=o("FNetForMaskedLM"),mNo=o(" (FNet model)"),gNo=l(),K1=a("li"),rpe=a("strong"),hNo=o("funnel"),pNo=o(" \u2014 "),fV=a("a"),_No=o("FunnelForMaskedLM"),uNo=o(" (Funnel Transformer model)"),bNo=l(),Z1=a("li"),tpe=a("strong"),vNo=o("ibert"),FNo=o(" \u2014 "),mV=a("a"),TNo=o("IBertForMaskedLM"),MNo=o(" (I-BERT model)"),ENo=l(),eb=a("li"),ape=a("strong"),CNo=o("layoutlm"),wNo=o(" \u2014 "),gV=a("a"),ANo=o("LayoutLMForMaskedLM"),LNo=o(" (LayoutLM model)"),yNo=l(),ob=a("li"),npe=a("strong"),xNo=o("longformer"),$No=o(" \u2014 "),hV=a("a"),kNo=o("LongformerForMaskedLM"),SNo=o(" (Longformer model)"),RNo=l(),rb=a("li"),spe=a("strong"),PNo=o("luke"),BNo=o(" \u2014 "),pV=a("a"),NNo=o("LukeForMaskedLM"),INo=o(" (LUKE model)"),qNo=l(),tb=a("li"),lpe=a("strong"),jNo=o("mbart"),DNo=o(" \u2014 "),_V=a("a"),GNo=o("MBartForConditionalGeneration"),ONo=o(" (mBART model)"),VNo=l(),ab=a("li"),ipe=a("strong"),XNo=o("megatron-bert"),zNo=o(" \u2014 "),uV=a("a"),QNo=o("MegatronBertForMaskedLM"),WNo=o(" (Megatron-BERT model)"),HNo=l(),nb=a("li"),dpe=a("strong"),UNo=o("mobilebert"),JNo=o(" \u2014 "),bV=a("a"),YNo=o("MobileBertForMaskedLM"),KNo=o(" (MobileBERT model)"),ZNo=l(),sb=a("li"),cpe=a("strong"),eIo=o("mpnet"),oIo=o(" \u2014 "),vV=a("a"),rIo=o("MPNetForMaskedLM"),tIo=o(" (MPNet model)"),aIo=l(),lb=a("li"),fpe=a("strong"),nIo=o("mvp"),sIo=o(" \u2014 "),FV=a("a"),lIo=o("MvpForConditionalGeneration"),iIo=o(" (MVP model)"),dIo=l(),ib=a("li"),mpe=a("strong"),cIo=o("nezha"),fIo=o(" \u2014 "),TV=a("a"),mIo=o("NezhaForMaskedLM"),gIo=o(" (Nezha model)"),hIo=l(),db=a("li"),gpe=a("strong"),pIo=o("nystromformer"),_Io=o(" \u2014 "),MV=a("a"),uIo=o("NystromformerForMaskedLM"),bIo=o(" (Nystr\xF6mformer model)"),vIo=l(),cb=a("li"),hpe=a("strong"),FIo=o("perceiver"),TIo=o(" \u2014 "),EV=a("a"),MIo=o("PerceiverForMaskedLM"),EIo=o(" (Perceiver model)"),CIo=l(),fb=a("li"),ppe=a("strong"),wIo=o("qdqbert"),AIo=o(" \u2014 "),CV=a("a"),LIo=o("QDQBertForMaskedLM"),yIo=o(" (QDQBert model)"),xIo=l(),mb=a("li"),_pe=a("strong"),$Io=o("reformer"),kIo=o(" \u2014 "),wV=a("a"),SIo=o("ReformerForMaskedLM"),RIo=o(" (Reformer model)"),PIo=l(),gb=a("li"),upe=a("strong"),BIo=o("rembert"),NIo=o(" \u2014 "),AV=a("a"),IIo=o("RemBertForMaskedLM"),qIo=o(" (RemBERT model)"),jIo=l(),hb=a("li"),bpe=a("strong"),DIo=o("roberta"),GIo=o(" \u2014 "),LV=a("a"),OIo=o("RobertaForMaskedLM"),VIo=o(" (RoBERTa model)"),XIo=l(),pb=a("li"),vpe=a("strong"),zIo=o("roformer"),QIo=o(" \u2014 "),yV=a("a"),WIo=o("RoFormerForMaskedLM"),HIo=o(" (RoFormer model)"),UIo=l(),_b=a("li"),Fpe=a("strong"),JIo=o("squeezebert"),YIo=o(" \u2014 "),xV=a("a"),KIo=o("SqueezeBertForMaskedLM"),ZIo=o(" (SqueezeBERT model)"),eqo=l(),ub=a("li"),Tpe=a("strong"),oqo=o("tapas"),rqo=o(" \u2014 "),$V=a("a"),tqo=o("TapasForMaskedLM"),aqo=o(" (TAPAS model)"),nqo=l(),bb=a("li"),Mpe=a("strong"),sqo=o("wav2vec2"),lqo=o(" \u2014 "),Epe=a("code"),iqo=o("Wav2Vec2ForMaskedLM"),dqo=o(" (Wav2Vec2 model)"),cqo=l(),vb=a("li"),Cpe=a("strong"),fqo=o("xlm"),mqo=o(" \u2014 "),kV=a("a"),gqo=o("XLMWithLMHeadModel"),hqo=o(" (XLM model)"),pqo=l(),Fb=a("li"),wpe=a("strong"),_qo=o("xlm-roberta"),uqo=o(" \u2014 "),SV=a("a"),bqo=o("XLMRobertaForMaskedLM"),vqo=o(" (XLM-RoBERTa model)"),Fqo=l(),Tb=a("li"),Ape=a("strong"),Tqo=o("xlm-roberta-xl"),Mqo=o(" \u2014 "),RV=a("a"),Eqo=o("XLMRobertaXLForMaskedLM"),Cqo=o(" (XLM-RoBERTa-XL model)"),wqo=l(),Mb=a("li"),Lpe=a("strong"),Aqo=o("yoso"),Lqo=o(" \u2014 "),PV=a("a"),yqo=o("YosoForMaskedLM"),xqo=o(" (YOSO model)"),$qo=l(),Eb=a("p"),kqo=o("The model is set in evaluation mode by default using "),ype=a("code"),Sqo=o("model.eval()"),Rqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=a("code"),Pqo=o("model.train()"),Bqo=l(),F(Cb.$$.fragment),WXe=l(),ed=a("h2"),wb=a("a"),$pe=a("span"),F(ty.$$.fragment),Nqo=l(),kpe=a("span"),Iqo=o("AutoModelForSeq2SeqLM"),HXe=l(),Po=a("div"),F(ay.$$.fragment),qqo=l(),od=a("p"),jqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BV=a("a"),Dqo=o("from_pretrained()"),Gqo=o(" class method or the "),NV=a("a"),Oqo=o("from_config()"),Vqo=o(` class
method.`),Xqo=l(),ny=a("p"),zqo=o("This class cannot be instantiated directly using "),Spe=a("code"),Qqo=o("__init__()"),Wqo=o(" (throws an error)."),Hqo=l(),mt=a("div"),F(sy.$$.fragment),Uqo=l(),Rpe=a("p"),Jqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Yqo=l(),rd=a("p"),Kqo=o(`Note:
Loading a model from its configuration file does `),Ppe=a("strong"),Zqo=o("not"),ejo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),ojo=o("from_pretrained()"),rjo=o(" to load the model weights."),tjo=l(),F(Ab.$$.fragment),ajo=l(),oo=a("div"),F(ly.$$.fragment),njo=l(),Bpe=a("p"),sjo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ljo=l(),Da=a("p"),ijo=o("The model class to instantiate is selected based on the "),Npe=a("code"),djo=o("model_type"),cjo=o(` property of the config object (either
passed as an argument or loaded from `),Ipe=a("code"),fjo=o("pretrained_model_name_or_path"),mjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=a("code"),gjo=o("pretrained_model_name_or_path"),hjo=o(":"),pjo=l(),fe=a("ul"),Lb=a("li"),jpe=a("strong"),_jo=o("bart"),ujo=o(" \u2014 "),qV=a("a"),bjo=o("BartForConditionalGeneration"),vjo=o(" (BART model)"),Fjo=l(),yb=a("li"),Dpe=a("strong"),Tjo=o("bigbird_pegasus"),Mjo=o(" \u2014 "),jV=a("a"),Ejo=o("BigBirdPegasusForConditionalGeneration"),Cjo=o(" (BigBird-Pegasus model)"),wjo=l(),xb=a("li"),Gpe=a("strong"),Ajo=o("blenderbot"),Ljo=o(" \u2014 "),DV=a("a"),yjo=o("BlenderbotForConditionalGeneration"),xjo=o(" (Blenderbot model)"),$jo=l(),$b=a("li"),Ope=a("strong"),kjo=o("blenderbot-small"),Sjo=o(" \u2014 "),GV=a("a"),Rjo=o("BlenderbotSmallForConditionalGeneration"),Pjo=o(" (BlenderbotSmall model)"),Bjo=l(),kb=a("li"),Vpe=a("strong"),Njo=o("encoder-decoder"),Ijo=o(" \u2014 "),OV=a("a"),qjo=o("EncoderDecoderModel"),jjo=o(" (Encoder decoder model)"),Djo=l(),Sb=a("li"),Xpe=a("strong"),Gjo=o("fsmt"),Ojo=o(" \u2014 "),VV=a("a"),Vjo=o("FSMTForConditionalGeneration"),Xjo=o(" (FairSeq Machine-Translation model)"),zjo=l(),Rb=a("li"),zpe=a("strong"),Qjo=o("led"),Wjo=o(" \u2014 "),XV=a("a"),Hjo=o("LEDForConditionalGeneration"),Ujo=o(" (LED model)"),Jjo=l(),Pb=a("li"),Qpe=a("strong"),Yjo=o("longt5"),Kjo=o(" \u2014 "),zV=a("a"),Zjo=o("LongT5ForConditionalGeneration"),eDo=o(" (LongT5 model)"),oDo=l(),Bb=a("li"),Wpe=a("strong"),rDo=o("m2m_100"),tDo=o(" \u2014 "),QV=a("a"),aDo=o("M2M100ForConditionalGeneration"),nDo=o(" (M2M100 model)"),sDo=l(),Nb=a("li"),Hpe=a("strong"),lDo=o("marian"),iDo=o(" \u2014 "),WV=a("a"),dDo=o("MarianMTModel"),cDo=o(" (Marian model)"),fDo=l(),Ib=a("li"),Upe=a("strong"),mDo=o("mbart"),gDo=o(" \u2014 "),HV=a("a"),hDo=o("MBartForConditionalGeneration"),pDo=o(" (mBART model)"),_Do=l(),qb=a("li"),Jpe=a("strong"),uDo=o("mt5"),bDo=o(" \u2014 "),UV=a("a"),vDo=o("MT5ForConditionalGeneration"),FDo=o(" (MT5 model)"),TDo=l(),jb=a("li"),Ype=a("strong"),MDo=o("mvp"),EDo=o(" \u2014 "),JV=a("a"),CDo=o("MvpForConditionalGeneration"),wDo=o(" (MVP model)"),ADo=l(),Db=a("li"),Kpe=a("strong"),LDo=o("nllb"),yDo=o(" \u2014 "),YV=a("a"),xDo=o("M2M100ForConditionalGeneration"),$Do=o(" (NLLB model)"),kDo=l(),Gb=a("li"),Zpe=a("strong"),SDo=o("pegasus"),RDo=o(" \u2014 "),KV=a("a"),PDo=o("PegasusForConditionalGeneration"),BDo=o(" (Pegasus model)"),NDo=l(),Ob=a("li"),e_e=a("strong"),IDo=o("plbart"),qDo=o(" \u2014 "),ZV=a("a"),jDo=o("PLBartForConditionalGeneration"),DDo=o(" (PLBart model)"),GDo=l(),Vb=a("li"),o_e=a("strong"),ODo=o("prophetnet"),VDo=o(" \u2014 "),eX=a("a"),XDo=o("ProphetNetForConditionalGeneration"),zDo=o(" (ProphetNet model)"),QDo=l(),Xb=a("li"),r_e=a("strong"),WDo=o("t5"),HDo=o(" \u2014 "),oX=a("a"),UDo=o("T5ForConditionalGeneration"),JDo=o(" (T5 model)"),YDo=l(),zb=a("li"),t_e=a("strong"),KDo=o("xlm-prophetnet"),ZDo=o(" \u2014 "),rX=a("a"),eGo=o("XLMProphetNetForConditionalGeneration"),oGo=o(" (XLM-ProphetNet model)"),rGo=l(),Qb=a("p"),tGo=o("The model is set in evaluation mode by default using "),a_e=a("code"),aGo=o("model.eval()"),nGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=a("code"),sGo=o("model.train()"),lGo=l(),F(Wb.$$.fragment),UXe=l(),td=a("h2"),Hb=a("a"),s_e=a("span"),F(iy.$$.fragment),iGo=l(),l_e=a("span"),dGo=o("AutoModelForSequenceClassification"),JXe=l(),Bo=a("div"),F(dy.$$.fragment),cGo=l(),ad=a("p"),fGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tX=a("a"),mGo=o("from_pretrained()"),gGo=o(" class method or the "),aX=a("a"),hGo=o("from_config()"),pGo=o(` class
method.`),_Go=l(),cy=a("p"),uGo=o("This class cannot be instantiated directly using "),i_e=a("code"),bGo=o("__init__()"),vGo=o(" (throws an error)."),FGo=l(),gt=a("div"),F(fy.$$.fragment),TGo=l(),d_e=a("p"),MGo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),EGo=l(),nd=a("p"),CGo=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),wGo=o("not"),AGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=a("a"),LGo=o("from_pretrained()"),yGo=o(" to load the model weights."),xGo=l(),F(Ub.$$.fragment),$Go=l(),ro=a("div"),F(my.$$.fragment),kGo=l(),f_e=a("p"),SGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),RGo=l(),Ga=a("p"),PGo=o("The model class to instantiate is selected based on the "),m_e=a("code"),BGo=o("model_type"),NGo=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),IGo=o("pretrained_model_name_or_path"),qGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),jGo=o("pretrained_model_name_or_path"),DGo=o(":"),GGo=l(),B=a("ul"),Jb=a("li"),p_e=a("strong"),OGo=o("albert"),VGo=o(" \u2014 "),sX=a("a"),XGo=o("AlbertForSequenceClassification"),zGo=o(" (ALBERT model)"),QGo=l(),Yb=a("li"),__e=a("strong"),WGo=o("bart"),HGo=o(" \u2014 "),lX=a("a"),UGo=o("BartForSequenceClassification"),JGo=o(" (BART model)"),YGo=l(),Kb=a("li"),u_e=a("strong"),KGo=o("bert"),ZGo=o(" \u2014 "),iX=a("a"),eOo=o("BertForSequenceClassification"),oOo=o(" (BERT model)"),rOo=l(),Zb=a("li"),b_e=a("strong"),tOo=o("big_bird"),aOo=o(" \u2014 "),dX=a("a"),nOo=o("BigBirdForSequenceClassification"),sOo=o(" (BigBird model)"),lOo=l(),ev=a("li"),v_e=a("strong"),iOo=o("bigbird_pegasus"),dOo=o(" \u2014 "),cX=a("a"),cOo=o("BigBirdPegasusForSequenceClassification"),fOo=o(" (BigBird-Pegasus model)"),mOo=l(),ov=a("li"),F_e=a("strong"),gOo=o("bloom"),hOo=o(" \u2014 "),fX=a("a"),pOo=o("BloomForSequenceClassification"),_Oo=o(" (BLOOM model)"),uOo=l(),rv=a("li"),T_e=a("strong"),bOo=o("camembert"),vOo=o(" \u2014 "),mX=a("a"),FOo=o("CamembertForSequenceClassification"),TOo=o(" (CamemBERT model)"),MOo=l(),tv=a("li"),M_e=a("strong"),EOo=o("canine"),COo=o(" \u2014 "),gX=a("a"),wOo=o("CanineForSequenceClassification"),AOo=o(" (CANINE model)"),LOo=l(),av=a("li"),E_e=a("strong"),yOo=o("convbert"),xOo=o(" \u2014 "),hX=a("a"),$Oo=o("ConvBertForSequenceClassification"),kOo=o(" (ConvBERT model)"),SOo=l(),nv=a("li"),C_e=a("strong"),ROo=o("ctrl"),POo=o(" \u2014 "),pX=a("a"),BOo=o("CTRLForSequenceClassification"),NOo=o(" (CTRL model)"),IOo=l(),sv=a("li"),w_e=a("strong"),qOo=o("data2vec-text"),jOo=o(" \u2014 "),_X=a("a"),DOo=o("Data2VecTextForSequenceClassification"),GOo=o(" (Data2VecText model)"),OOo=l(),lv=a("li"),A_e=a("strong"),VOo=o("deberta"),XOo=o(" \u2014 "),uX=a("a"),zOo=o("DebertaForSequenceClassification"),QOo=o(" (DeBERTa model)"),WOo=l(),iv=a("li"),L_e=a("strong"),HOo=o("deberta-v2"),UOo=o(" \u2014 "),bX=a("a"),JOo=o("DebertaV2ForSequenceClassification"),YOo=o(" (DeBERTa-v2 model)"),KOo=l(),dv=a("li"),y_e=a("strong"),ZOo=o("distilbert"),eVo=o(" \u2014 "),vX=a("a"),oVo=o("DistilBertForSequenceClassification"),rVo=o(" (DistilBERT model)"),tVo=l(),cv=a("li"),x_e=a("strong"),aVo=o("electra"),nVo=o(" \u2014 "),FX=a("a"),sVo=o("ElectraForSequenceClassification"),lVo=o(" (ELECTRA model)"),iVo=l(),fv=a("li"),$_e=a("strong"),dVo=o("flaubert"),cVo=o(" \u2014 "),TX=a("a"),fVo=o("FlaubertForSequenceClassification"),mVo=o(" (FlauBERT model)"),gVo=l(),mv=a("li"),k_e=a("strong"),hVo=o("fnet"),pVo=o(" \u2014 "),MX=a("a"),_Vo=o("FNetForSequenceClassification"),uVo=o(" (FNet model)"),bVo=l(),gv=a("li"),S_e=a("strong"),vVo=o("funnel"),FVo=o(" \u2014 "),EX=a("a"),TVo=o("FunnelForSequenceClassification"),MVo=o(" (Funnel Transformer model)"),EVo=l(),hv=a("li"),R_e=a("strong"),CVo=o("gpt2"),wVo=o(" \u2014 "),CX=a("a"),AVo=o("GPT2ForSequenceClassification"),LVo=o(" (OpenAI GPT-2 model)"),yVo=l(),pv=a("li"),P_e=a("strong"),xVo=o("gpt_neo"),$Vo=o(" \u2014 "),wX=a("a"),kVo=o("GPTNeoForSequenceClassification"),SVo=o(" (GPT Neo model)"),RVo=l(),_v=a("li"),B_e=a("strong"),PVo=o("gptj"),BVo=o(" \u2014 "),AX=a("a"),NVo=o("GPTJForSequenceClassification"),IVo=o(" (GPT-J model)"),qVo=l(),uv=a("li"),N_e=a("strong"),jVo=o("ibert"),DVo=o(" \u2014 "),LX=a("a"),GVo=o("IBertForSequenceClassification"),OVo=o(" (I-BERT model)"),VVo=l(),bv=a("li"),I_e=a("strong"),XVo=o("layoutlm"),zVo=o(" \u2014 "),yX=a("a"),QVo=o("LayoutLMForSequenceClassification"),WVo=o(" (LayoutLM model)"),HVo=l(),vv=a("li"),q_e=a("strong"),UVo=o("layoutlmv2"),JVo=o(" \u2014 "),xX=a("a"),YVo=o("LayoutLMv2ForSequenceClassification"),KVo=o(" (LayoutLMv2 model)"),ZVo=l(),Fv=a("li"),j_e=a("strong"),eXo=o("layoutlmv3"),oXo=o(" \u2014 "),$X=a("a"),rXo=o("LayoutLMv3ForSequenceClassification"),tXo=o(" (LayoutLMv3 model)"),aXo=l(),Tv=a("li"),D_e=a("strong"),nXo=o("led"),sXo=o(" \u2014 "),kX=a("a"),lXo=o("LEDForSequenceClassification"),iXo=o(" (LED model)"),dXo=l(),Mv=a("li"),G_e=a("strong"),cXo=o("longformer"),fXo=o(" \u2014 "),SX=a("a"),mXo=o("LongformerForSequenceClassification"),gXo=o(" (Longformer model)"),hXo=l(),Ev=a("li"),O_e=a("strong"),pXo=o("mbart"),_Xo=o(" \u2014 "),RX=a("a"),uXo=o("MBartForSequenceClassification"),bXo=o(" (mBART model)"),vXo=l(),Cv=a("li"),V_e=a("strong"),FXo=o("megatron-bert"),TXo=o(" \u2014 "),PX=a("a"),MXo=o("MegatronBertForSequenceClassification"),EXo=o(" (Megatron-BERT model)"),CXo=l(),wv=a("li"),X_e=a("strong"),wXo=o("mobilebert"),AXo=o(" \u2014 "),BX=a("a"),LXo=o("MobileBertForSequenceClassification"),yXo=o(" (MobileBERT model)"),xXo=l(),Av=a("li"),z_e=a("strong"),$Xo=o("mpnet"),kXo=o(" \u2014 "),NX=a("a"),SXo=o("MPNetForSequenceClassification"),RXo=o(" (MPNet model)"),PXo=l(),Lv=a("li"),Q_e=a("strong"),BXo=o("mvp"),NXo=o(" \u2014 "),IX=a("a"),IXo=o("MvpForSequenceClassification"),qXo=o(" (MVP model)"),jXo=l(),yv=a("li"),W_e=a("strong"),DXo=o("nezha"),GXo=o(" \u2014 "),qX=a("a"),OXo=o("NezhaForSequenceClassification"),VXo=o(" (Nezha model)"),XXo=l(),xv=a("li"),H_e=a("strong"),zXo=o("nystromformer"),QXo=o(" \u2014 "),jX=a("a"),WXo=o("NystromformerForSequenceClassification"),HXo=o(" (Nystr\xF6mformer model)"),UXo=l(),$v=a("li"),U_e=a("strong"),JXo=o("openai-gpt"),YXo=o(" \u2014 "),DX=a("a"),KXo=o("OpenAIGPTForSequenceClassification"),ZXo=o(" (OpenAI GPT model)"),ezo=l(),kv=a("li"),J_e=a("strong"),ozo=o("opt"),rzo=o(" \u2014 "),GX=a("a"),tzo=o("OPTForSequenceClassification"),azo=o(" (OPT model)"),nzo=l(),Sv=a("li"),Y_e=a("strong"),szo=o("perceiver"),lzo=o(" \u2014 "),OX=a("a"),izo=o("PerceiverForSequenceClassification"),dzo=o(" (Perceiver model)"),czo=l(),Rv=a("li"),K_e=a("strong"),fzo=o("plbart"),mzo=o(" \u2014 "),VX=a("a"),gzo=o("PLBartForSequenceClassification"),hzo=o(" (PLBart model)"),pzo=l(),Pv=a("li"),Z_e=a("strong"),_zo=o("qdqbert"),uzo=o(" \u2014 "),XX=a("a"),bzo=o("QDQBertForSequenceClassification"),vzo=o(" (QDQBert model)"),Fzo=l(),Bv=a("li"),eue=a("strong"),Tzo=o("reformer"),Mzo=o(" \u2014 "),zX=a("a"),Ezo=o("ReformerForSequenceClassification"),Czo=o(" (Reformer model)"),wzo=l(),Nv=a("li"),oue=a("strong"),Azo=o("rembert"),Lzo=o(" \u2014 "),QX=a("a"),yzo=o("RemBertForSequenceClassification"),xzo=o(" (RemBERT model)"),$zo=l(),Iv=a("li"),rue=a("strong"),kzo=o("roberta"),Szo=o(" \u2014 "),WX=a("a"),Rzo=o("RobertaForSequenceClassification"),Pzo=o(" (RoBERTa model)"),Bzo=l(),qv=a("li"),tue=a("strong"),Nzo=o("roformer"),Izo=o(" \u2014 "),HX=a("a"),qzo=o("RoFormerForSequenceClassification"),jzo=o(" (RoFormer model)"),Dzo=l(),jv=a("li"),aue=a("strong"),Gzo=o("squeezebert"),Ozo=o(" \u2014 "),UX=a("a"),Vzo=o("SqueezeBertForSequenceClassification"),Xzo=o(" (SqueezeBERT model)"),zzo=l(),Dv=a("li"),nue=a("strong"),Qzo=o("tapas"),Wzo=o(" \u2014 "),JX=a("a"),Hzo=o("TapasForSequenceClassification"),Uzo=o(" (TAPAS model)"),Jzo=l(),Gv=a("li"),sue=a("strong"),Yzo=o("transfo-xl"),Kzo=o(" \u2014 "),YX=a("a"),Zzo=o("TransfoXLForSequenceClassification"),eQo=o(" (Transformer-XL model)"),oQo=l(),Ov=a("li"),lue=a("strong"),rQo=o("xlm"),tQo=o(" \u2014 "),KX=a("a"),aQo=o("XLMForSequenceClassification"),nQo=o(" (XLM model)"),sQo=l(),Vv=a("li"),iue=a("strong"),lQo=o("xlm-roberta"),iQo=o(" \u2014 "),ZX=a("a"),dQo=o("XLMRobertaForSequenceClassification"),cQo=o(" (XLM-RoBERTa model)"),fQo=l(),Xv=a("li"),due=a("strong"),mQo=o("xlm-roberta-xl"),gQo=o(" \u2014 "),ez=a("a"),hQo=o("XLMRobertaXLForSequenceClassification"),pQo=o(" (XLM-RoBERTa-XL model)"),_Qo=l(),zv=a("li"),cue=a("strong"),uQo=o("xlnet"),bQo=o(" \u2014 "),oz=a("a"),vQo=o("XLNetForSequenceClassification"),FQo=o(" (XLNet model)"),TQo=l(),Qv=a("li"),fue=a("strong"),MQo=o("yoso"),EQo=o(" \u2014 "),rz=a("a"),CQo=o("YosoForSequenceClassification"),wQo=o(" (YOSO model)"),AQo=l(),Wv=a("p"),LQo=o("The model is set in evaluation mode by default using "),mue=a("code"),yQo=o("model.eval()"),xQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=a("code"),$Qo=o("model.train()"),kQo=l(),F(Hv.$$.fragment),YXe=l(),sd=a("h2"),Uv=a("a"),hue=a("span"),F(gy.$$.fragment),SQo=l(),pue=a("span"),RQo=o("AutoModelForMultipleChoice"),KXe=l(),No=a("div"),F(hy.$$.fragment),PQo=l(),ld=a("p"),BQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tz=a("a"),NQo=o("from_pretrained()"),IQo=o(" class method or the "),az=a("a"),qQo=o("from_config()"),jQo=o(` class
method.`),DQo=l(),py=a("p"),GQo=o("This class cannot be instantiated directly using "),_ue=a("code"),OQo=o("__init__()"),VQo=o(" (throws an error)."),XQo=l(),ht=a("div"),F(_y.$$.fragment),zQo=l(),uue=a("p"),QQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),WQo=l(),id=a("p"),HQo=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),UQo=o("not"),JQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=a("a"),YQo=o("from_pretrained()"),KQo=o(" to load the model weights."),ZQo=l(),F(Jv.$$.fragment),eWo=l(),to=a("div"),F(uy.$$.fragment),oWo=l(),vue=a("p"),rWo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tWo=l(),Oa=a("p"),aWo=o("The model class to instantiate is selected based on the "),Fue=a("code"),nWo=o("model_type"),sWo=o(` property of the config object (either
passed as an argument or loaded from `),Tue=a("code"),lWo=o("pretrained_model_name_or_path"),iWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=a("code"),dWo=o("pretrained_model_name_or_path"),cWo=o(":"),fWo=l(),Z=a("ul"),Yv=a("li"),Eue=a("strong"),mWo=o("albert"),gWo=o(" \u2014 "),sz=a("a"),hWo=o("AlbertForMultipleChoice"),pWo=o(" (ALBERT model)"),_Wo=l(),Kv=a("li"),Cue=a("strong"),uWo=o("bert"),bWo=o(" \u2014 "),lz=a("a"),vWo=o("BertForMultipleChoice"),FWo=o(" (BERT model)"),TWo=l(),Zv=a("li"),wue=a("strong"),MWo=o("big_bird"),EWo=o(" \u2014 "),iz=a("a"),CWo=o("BigBirdForMultipleChoice"),wWo=o(" (BigBird model)"),AWo=l(),eF=a("li"),Aue=a("strong"),LWo=o("camembert"),yWo=o(" \u2014 "),dz=a("a"),xWo=o("CamembertForMultipleChoice"),$Wo=o(" (CamemBERT model)"),kWo=l(),oF=a("li"),Lue=a("strong"),SWo=o("canine"),RWo=o(" \u2014 "),cz=a("a"),PWo=o("CanineForMultipleChoice"),BWo=o(" (CANINE model)"),NWo=l(),rF=a("li"),yue=a("strong"),IWo=o("convbert"),qWo=o(" \u2014 "),fz=a("a"),jWo=o("ConvBertForMultipleChoice"),DWo=o(" (ConvBERT model)"),GWo=l(),tF=a("li"),xue=a("strong"),OWo=o("data2vec-text"),VWo=o(" \u2014 "),mz=a("a"),XWo=o("Data2VecTextForMultipleChoice"),zWo=o(" (Data2VecText model)"),QWo=l(),aF=a("li"),$ue=a("strong"),WWo=o("deberta-v2"),HWo=o(" \u2014 "),gz=a("a"),UWo=o("DebertaV2ForMultipleChoice"),JWo=o(" (DeBERTa-v2 model)"),YWo=l(),nF=a("li"),kue=a("strong"),KWo=o("distilbert"),ZWo=o(" \u2014 "),hz=a("a"),eHo=o("DistilBertForMultipleChoice"),oHo=o(" (DistilBERT model)"),rHo=l(),sF=a("li"),Sue=a("strong"),tHo=o("electra"),aHo=o(" \u2014 "),pz=a("a"),nHo=o("ElectraForMultipleChoice"),sHo=o(" (ELECTRA model)"),lHo=l(),lF=a("li"),Rue=a("strong"),iHo=o("flaubert"),dHo=o(" \u2014 "),_z=a("a"),cHo=o("FlaubertForMultipleChoice"),fHo=o(" (FlauBERT model)"),mHo=l(),iF=a("li"),Pue=a("strong"),gHo=o("fnet"),hHo=o(" \u2014 "),uz=a("a"),pHo=o("FNetForMultipleChoice"),_Ho=o(" (FNet model)"),uHo=l(),dF=a("li"),Bue=a("strong"),bHo=o("funnel"),vHo=o(" \u2014 "),bz=a("a"),FHo=o("FunnelForMultipleChoice"),THo=o(" (Funnel Transformer model)"),MHo=l(),cF=a("li"),Nue=a("strong"),EHo=o("ibert"),CHo=o(" \u2014 "),vz=a("a"),wHo=o("IBertForMultipleChoice"),AHo=o(" (I-BERT model)"),LHo=l(),fF=a("li"),Iue=a("strong"),yHo=o("longformer"),xHo=o(" \u2014 "),Fz=a("a"),$Ho=o("LongformerForMultipleChoice"),kHo=o(" (Longformer model)"),SHo=l(),mF=a("li"),que=a("strong"),RHo=o("megatron-bert"),PHo=o(" \u2014 "),Tz=a("a"),BHo=o("MegatronBertForMultipleChoice"),NHo=o(" (Megatron-BERT model)"),IHo=l(),gF=a("li"),jue=a("strong"),qHo=o("mobilebert"),jHo=o(" \u2014 "),Mz=a("a"),DHo=o("MobileBertForMultipleChoice"),GHo=o(" (MobileBERT model)"),OHo=l(),hF=a("li"),Due=a("strong"),VHo=o("mpnet"),XHo=o(" \u2014 "),Ez=a("a"),zHo=o("MPNetForMultipleChoice"),QHo=o(" (MPNet model)"),WHo=l(),pF=a("li"),Gue=a("strong"),HHo=o("nezha"),UHo=o(" \u2014 "),Cz=a("a"),JHo=o("NezhaForMultipleChoice"),YHo=o(" (Nezha model)"),KHo=l(),_F=a("li"),Oue=a("strong"),ZHo=o("nystromformer"),eUo=o(" \u2014 "),wz=a("a"),oUo=o("NystromformerForMultipleChoice"),rUo=o(" (Nystr\xF6mformer model)"),tUo=l(),uF=a("li"),Vue=a("strong"),aUo=o("qdqbert"),nUo=o(" \u2014 "),Az=a("a"),sUo=o("QDQBertForMultipleChoice"),lUo=o(" (QDQBert model)"),iUo=l(),bF=a("li"),Xue=a("strong"),dUo=o("rembert"),cUo=o(" \u2014 "),Lz=a("a"),fUo=o("RemBertForMultipleChoice"),mUo=o(" (RemBERT model)"),gUo=l(),vF=a("li"),zue=a("strong"),hUo=o("roberta"),pUo=o(" \u2014 "),yz=a("a"),_Uo=o("RobertaForMultipleChoice"),uUo=o(" (RoBERTa model)"),bUo=l(),FF=a("li"),Que=a("strong"),vUo=o("roformer"),FUo=o(" \u2014 "),xz=a("a"),TUo=o("RoFormerForMultipleChoice"),MUo=o(" (RoFormer model)"),EUo=l(),TF=a("li"),Wue=a("strong"),CUo=o("squeezebert"),wUo=o(" \u2014 "),$z=a("a"),AUo=o("SqueezeBertForMultipleChoice"),LUo=o(" (SqueezeBERT model)"),yUo=l(),MF=a("li"),Hue=a("strong"),xUo=o("xlm"),$Uo=o(" \u2014 "),kz=a("a"),kUo=o("XLMForMultipleChoice"),SUo=o(" (XLM model)"),RUo=l(),EF=a("li"),Uue=a("strong"),PUo=o("xlm-roberta"),BUo=o(" \u2014 "),Sz=a("a"),NUo=o("XLMRobertaForMultipleChoice"),IUo=o(" (XLM-RoBERTa model)"),qUo=l(),CF=a("li"),Jue=a("strong"),jUo=o("xlm-roberta-xl"),DUo=o(" \u2014 "),Rz=a("a"),GUo=o("XLMRobertaXLForMultipleChoice"),OUo=o(" (XLM-RoBERTa-XL model)"),VUo=l(),wF=a("li"),Yue=a("strong"),XUo=o("xlnet"),zUo=o(" \u2014 "),Pz=a("a"),QUo=o("XLNetForMultipleChoice"),WUo=o(" (XLNet model)"),HUo=l(),AF=a("li"),Kue=a("strong"),UUo=o("yoso"),JUo=o(" \u2014 "),Bz=a("a"),YUo=o("YosoForMultipleChoice"),KUo=o(" (YOSO model)"),ZUo=l(),LF=a("p"),eJo=o("The model is set in evaluation mode by default using "),Zue=a("code"),oJo=o("model.eval()"),rJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=a("code"),tJo=o("model.train()"),aJo=l(),F(yF.$$.fragment),ZXe=l(),dd=a("h2"),xF=a("a"),o2e=a("span"),F(by.$$.fragment),nJo=l(),r2e=a("span"),sJo=o("AutoModelForNextSentencePrediction"),eze=l(),Io=a("div"),F(vy.$$.fragment),lJo=l(),cd=a("p"),iJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nz=a("a"),dJo=o("from_pretrained()"),cJo=o(" class method or the "),Iz=a("a"),fJo=o("from_config()"),mJo=o(` class
method.`),gJo=l(),Fy=a("p"),hJo=o("This class cannot be instantiated directly using "),t2e=a("code"),pJo=o("__init__()"),_Jo=o(" (throws an error)."),uJo=l(),pt=a("div"),F(Ty.$$.fragment),bJo=l(),a2e=a("p"),vJo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),FJo=l(),fd=a("p"),TJo=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),MJo=o("not"),EJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),CJo=o("from_pretrained()"),wJo=o(" to load the model weights."),AJo=l(),F($F.$$.fragment),LJo=l(),ao=a("div"),F(My.$$.fragment),yJo=l(),s2e=a("p"),xJo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$Jo=l(),Va=a("p"),kJo=o("The model class to instantiate is selected based on the "),l2e=a("code"),SJo=o("model_type"),RJo=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),PJo=o("pretrained_model_name_or_path"),BJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),NJo=o("pretrained_model_name_or_path"),IJo=o(":"),qJo=l(),qo=a("ul"),kF=a("li"),c2e=a("strong"),jJo=o("bert"),DJo=o(" \u2014 "),jz=a("a"),GJo=o("BertForNextSentencePrediction"),OJo=o(" (BERT model)"),VJo=l(),SF=a("li"),f2e=a("strong"),XJo=o("fnet"),zJo=o(" \u2014 "),Dz=a("a"),QJo=o("FNetForNextSentencePrediction"),WJo=o(" (FNet model)"),HJo=l(),RF=a("li"),m2e=a("strong"),UJo=o("megatron-bert"),JJo=o(" \u2014 "),Gz=a("a"),YJo=o("MegatronBertForNextSentencePrediction"),KJo=o(" (Megatron-BERT model)"),ZJo=l(),PF=a("li"),g2e=a("strong"),eYo=o("mobilebert"),oYo=o(" \u2014 "),Oz=a("a"),rYo=o("MobileBertForNextSentencePrediction"),tYo=o(" (MobileBERT model)"),aYo=l(),BF=a("li"),h2e=a("strong"),nYo=o("nezha"),sYo=o(" \u2014 "),Vz=a("a"),lYo=o("NezhaForNextSentencePrediction"),iYo=o(" (Nezha model)"),dYo=l(),NF=a("li"),p2e=a("strong"),cYo=o("qdqbert"),fYo=o(" \u2014 "),Xz=a("a"),mYo=o("QDQBertForNextSentencePrediction"),gYo=o(" (QDQBert model)"),hYo=l(),IF=a("p"),pYo=o("The model is set in evaluation mode by default using "),_2e=a("code"),_Yo=o("model.eval()"),uYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=a("code"),bYo=o("model.train()"),vYo=l(),F(qF.$$.fragment),oze=l(),md=a("h2"),jF=a("a"),b2e=a("span"),F(Ey.$$.fragment),FYo=l(),v2e=a("span"),TYo=o("AutoModelForTokenClassification"),rze=l(),jo=a("div"),F(Cy.$$.fragment),MYo=l(),gd=a("p"),EYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zz=a("a"),CYo=o("from_pretrained()"),wYo=o(" class method or the "),Qz=a("a"),AYo=o("from_config()"),LYo=o(` class
method.`),yYo=l(),wy=a("p"),xYo=o("This class cannot be instantiated directly using "),F2e=a("code"),$Yo=o("__init__()"),kYo=o(" (throws an error)."),SYo=l(),_t=a("div"),F(Ay.$$.fragment),RYo=l(),T2e=a("p"),PYo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),BYo=l(),hd=a("p"),NYo=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),IYo=o("not"),qYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=a("a"),jYo=o("from_pretrained()"),DYo=o(" to load the model weights."),GYo=l(),F(DF.$$.fragment),OYo=l(),no=a("div"),F(Ly.$$.fragment),VYo=l(),E2e=a("p"),XYo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zYo=l(),Xa=a("p"),QYo=o("The model class to instantiate is selected based on the "),C2e=a("code"),WYo=o("model_type"),HYo=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),UYo=o("pretrained_model_name_or_path"),JYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),YYo=o("pretrained_model_name_or_path"),KYo=o(":"),ZYo=l(),U=a("ul"),GF=a("li"),L2e=a("strong"),eKo=o("albert"),oKo=o(" \u2014 "),Hz=a("a"),rKo=o("AlbertForTokenClassification"),tKo=o(" (ALBERT model)"),aKo=l(),OF=a("li"),y2e=a("strong"),nKo=o("bert"),sKo=o(" \u2014 "),Uz=a("a"),lKo=o("BertForTokenClassification"),iKo=o(" (BERT model)"),dKo=l(),VF=a("li"),x2e=a("strong"),cKo=o("big_bird"),fKo=o(" \u2014 "),Jz=a("a"),mKo=o("BigBirdForTokenClassification"),gKo=o(" (BigBird model)"),hKo=l(),XF=a("li"),$2e=a("strong"),pKo=o("bloom"),_Ko=o(" \u2014 "),Yz=a("a"),uKo=o("BloomForTokenClassification"),bKo=o(" (BLOOM model)"),vKo=l(),zF=a("li"),k2e=a("strong"),FKo=o("camembert"),TKo=o(" \u2014 "),Kz=a("a"),MKo=o("CamembertForTokenClassification"),EKo=o(" (CamemBERT model)"),CKo=l(),QF=a("li"),S2e=a("strong"),wKo=o("canine"),AKo=o(" \u2014 "),Zz=a("a"),LKo=o("CanineForTokenClassification"),yKo=o(" (CANINE model)"),xKo=l(),WF=a("li"),R2e=a("strong"),$Ko=o("convbert"),kKo=o(" \u2014 "),eQ=a("a"),SKo=o("ConvBertForTokenClassification"),RKo=o(" (ConvBERT model)"),PKo=l(),HF=a("li"),P2e=a("strong"),BKo=o("data2vec-text"),NKo=o(" \u2014 "),oQ=a("a"),IKo=o("Data2VecTextForTokenClassification"),qKo=o(" (Data2VecText model)"),jKo=l(),UF=a("li"),B2e=a("strong"),DKo=o("deberta"),GKo=o(" \u2014 "),rQ=a("a"),OKo=o("DebertaForTokenClassification"),VKo=o(" (DeBERTa model)"),XKo=l(),JF=a("li"),N2e=a("strong"),zKo=o("deberta-v2"),QKo=o(" \u2014 "),tQ=a("a"),WKo=o("DebertaV2ForTokenClassification"),HKo=o(" (DeBERTa-v2 model)"),UKo=l(),YF=a("li"),I2e=a("strong"),JKo=o("distilbert"),YKo=o(" \u2014 "),aQ=a("a"),KKo=o("DistilBertForTokenClassification"),ZKo=o(" (DistilBERT model)"),eZo=l(),KF=a("li"),q2e=a("strong"),oZo=o("electra"),rZo=o(" \u2014 "),nQ=a("a"),tZo=o("ElectraForTokenClassification"),aZo=o(" (ELECTRA model)"),nZo=l(),ZF=a("li"),j2e=a("strong"),sZo=o("flaubert"),lZo=o(" \u2014 "),sQ=a("a"),iZo=o("FlaubertForTokenClassification"),dZo=o(" (FlauBERT model)"),cZo=l(),e6=a("li"),D2e=a("strong"),fZo=o("fnet"),mZo=o(" \u2014 "),lQ=a("a"),gZo=o("FNetForTokenClassification"),hZo=o(" (FNet model)"),pZo=l(),o6=a("li"),G2e=a("strong"),_Zo=o("funnel"),uZo=o(" \u2014 "),iQ=a("a"),bZo=o("FunnelForTokenClassification"),vZo=o(" (Funnel Transformer model)"),FZo=l(),r6=a("li"),O2e=a("strong"),TZo=o("gpt2"),MZo=o(" \u2014 "),dQ=a("a"),EZo=o("GPT2ForTokenClassification"),CZo=o(" (OpenAI GPT-2 model)"),wZo=l(),t6=a("li"),V2e=a("strong"),AZo=o("ibert"),LZo=o(" \u2014 "),cQ=a("a"),yZo=o("IBertForTokenClassification"),xZo=o(" (I-BERT model)"),$Zo=l(),a6=a("li"),X2e=a("strong"),kZo=o("layoutlm"),SZo=o(" \u2014 "),fQ=a("a"),RZo=o("LayoutLMForTokenClassification"),PZo=o(" (LayoutLM model)"),BZo=l(),n6=a("li"),z2e=a("strong"),NZo=o("layoutlmv2"),IZo=o(" \u2014 "),mQ=a("a"),qZo=o("LayoutLMv2ForTokenClassification"),jZo=o(" (LayoutLMv2 model)"),DZo=l(),s6=a("li"),Q2e=a("strong"),GZo=o("layoutlmv3"),OZo=o(" \u2014 "),gQ=a("a"),VZo=o("LayoutLMv3ForTokenClassification"),XZo=o(" (LayoutLMv3 model)"),zZo=l(),l6=a("li"),W2e=a("strong"),QZo=o("longformer"),WZo=o(" \u2014 "),hQ=a("a"),HZo=o("LongformerForTokenClassification"),UZo=o(" (Longformer model)"),JZo=l(),i6=a("li"),H2e=a("strong"),YZo=o("megatron-bert"),KZo=o(" \u2014 "),pQ=a("a"),ZZo=o("MegatronBertForTokenClassification"),eer=o(" (Megatron-BERT model)"),oer=l(),d6=a("li"),U2e=a("strong"),rer=o("mobilebert"),ter=o(" \u2014 "),_Q=a("a"),aer=o("MobileBertForTokenClassification"),ner=o(" (MobileBERT model)"),ser=l(),c6=a("li"),J2e=a("strong"),ler=o("mpnet"),ier=o(" \u2014 "),uQ=a("a"),der=o("MPNetForTokenClassification"),cer=o(" (MPNet model)"),fer=l(),f6=a("li"),Y2e=a("strong"),mer=o("nezha"),ger=o(" \u2014 "),bQ=a("a"),her=o("NezhaForTokenClassification"),per=o(" (Nezha model)"),_er=l(),m6=a("li"),K2e=a("strong"),uer=o("nystromformer"),ber=o(" \u2014 "),vQ=a("a"),ver=o("NystromformerForTokenClassification"),Fer=o(" (Nystr\xF6mformer model)"),Ter=l(),g6=a("li"),Z2e=a("strong"),Mer=o("qdqbert"),Eer=o(" \u2014 "),FQ=a("a"),Cer=o("QDQBertForTokenClassification"),wer=o(" (QDQBert model)"),Aer=l(),h6=a("li"),e1e=a("strong"),Ler=o("rembert"),yer=o(" \u2014 "),TQ=a("a"),xer=o("RemBertForTokenClassification"),$er=o(" (RemBERT model)"),ker=l(),p6=a("li"),o1e=a("strong"),Ser=o("roberta"),Rer=o(" \u2014 "),MQ=a("a"),Per=o("RobertaForTokenClassification"),Ber=o(" (RoBERTa model)"),Ner=l(),_6=a("li"),r1e=a("strong"),Ier=o("roformer"),qer=o(" \u2014 "),EQ=a("a"),jer=o("RoFormerForTokenClassification"),Der=o(" (RoFormer model)"),Ger=l(),u6=a("li"),t1e=a("strong"),Oer=o("squeezebert"),Ver=o(" \u2014 "),CQ=a("a"),Xer=o("SqueezeBertForTokenClassification"),zer=o(" (SqueezeBERT model)"),Qer=l(),b6=a("li"),a1e=a("strong"),Wer=o("xlm"),Her=o(" \u2014 "),wQ=a("a"),Uer=o("XLMForTokenClassification"),Jer=o(" (XLM model)"),Yer=l(),v6=a("li"),n1e=a("strong"),Ker=o("xlm-roberta"),Zer=o(" \u2014 "),AQ=a("a"),eor=o("XLMRobertaForTokenClassification"),oor=o(" (XLM-RoBERTa model)"),ror=l(),F6=a("li"),s1e=a("strong"),tor=o("xlm-roberta-xl"),aor=o(" \u2014 "),LQ=a("a"),nor=o("XLMRobertaXLForTokenClassification"),sor=o(" (XLM-RoBERTa-XL model)"),lor=l(),T6=a("li"),l1e=a("strong"),ior=o("xlnet"),dor=o(" \u2014 "),yQ=a("a"),cor=o("XLNetForTokenClassification"),mor=o(" (XLNet model)"),gor=l(),M6=a("li"),i1e=a("strong"),hor=o("yoso"),por=o(" \u2014 "),xQ=a("a"),_or=o("YosoForTokenClassification"),uor=o(" (YOSO model)"),bor=l(),E6=a("p"),vor=o("The model is set in evaluation mode by default using "),d1e=a("code"),For=o("model.eval()"),Tor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c1e=a("code"),Mor=o("model.train()"),Eor=l(),F(C6.$$.fragment),tze=l(),pd=a("h2"),w6=a("a"),f1e=a("span"),F(yy.$$.fragment),Cor=l(),m1e=a("span"),wor=o("AutoModelForQuestionAnswering"),aze=l(),Do=a("div"),F(xy.$$.fragment),Aor=l(),_d=a("p"),Lor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$Q=a("a"),yor=o("from_pretrained()"),xor=o(" class method or the "),kQ=a("a"),$or=o("from_config()"),kor=o(` class
method.`),Sor=l(),$y=a("p"),Ror=o("This class cannot be instantiated directly using "),g1e=a("code"),Por=o("__init__()"),Bor=o(" (throws an error)."),Nor=l(),ut=a("div"),F(ky.$$.fragment),Ior=l(),h1e=a("p"),qor=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jor=l(),ud=a("p"),Dor=o(`Note:
Loading a model from its configuration file does `),p1e=a("strong"),Gor=o("not"),Oor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),Vor=o("from_pretrained()"),Xor=o(" to load the model weights."),zor=l(),F(A6.$$.fragment),Qor=l(),so=a("div"),F(Sy.$$.fragment),Wor=l(),_1e=a("p"),Hor=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Uor=l(),za=a("p"),Jor=o("The model class to instantiate is selected based on the "),u1e=a("code"),Yor=o("model_type"),Kor=o(` property of the config object (either
passed as an argument or loaded from `),b1e=a("code"),Zor=o("pretrained_model_name_or_path"),err=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v1e=a("code"),orr=o("pretrained_model_name_or_path"),rrr=o(":"),trr=l(),V=a("ul"),L6=a("li"),F1e=a("strong"),arr=o("albert"),nrr=o(" \u2014 "),RQ=a("a"),srr=o("AlbertForQuestionAnswering"),lrr=o(" (ALBERT model)"),irr=l(),y6=a("li"),T1e=a("strong"),drr=o("bart"),crr=o(" \u2014 "),PQ=a("a"),frr=o("BartForQuestionAnswering"),mrr=o(" (BART model)"),grr=l(),x6=a("li"),M1e=a("strong"),hrr=o("bert"),prr=o(" \u2014 "),BQ=a("a"),_rr=o("BertForQuestionAnswering"),urr=o(" (BERT model)"),brr=l(),$6=a("li"),E1e=a("strong"),vrr=o("big_bird"),Frr=o(" \u2014 "),NQ=a("a"),Trr=o("BigBirdForQuestionAnswering"),Mrr=o(" (BigBird model)"),Err=l(),k6=a("li"),C1e=a("strong"),Crr=o("bigbird_pegasus"),wrr=o(" \u2014 "),IQ=a("a"),Arr=o("BigBirdPegasusForQuestionAnswering"),Lrr=o(" (BigBird-Pegasus model)"),yrr=l(),S6=a("li"),w1e=a("strong"),xrr=o("camembert"),$rr=o(" \u2014 "),qQ=a("a"),krr=o("CamembertForQuestionAnswering"),Srr=o(" (CamemBERT model)"),Rrr=l(),R6=a("li"),A1e=a("strong"),Prr=o("canine"),Brr=o(" \u2014 "),jQ=a("a"),Nrr=o("CanineForQuestionAnswering"),Irr=o(" (CANINE model)"),qrr=l(),P6=a("li"),L1e=a("strong"),jrr=o("convbert"),Drr=o(" \u2014 "),DQ=a("a"),Grr=o("ConvBertForQuestionAnswering"),Orr=o(" (ConvBERT model)"),Vrr=l(),B6=a("li"),y1e=a("strong"),Xrr=o("data2vec-text"),zrr=o(" \u2014 "),GQ=a("a"),Qrr=o("Data2VecTextForQuestionAnswering"),Wrr=o(" (Data2VecText model)"),Hrr=l(),N6=a("li"),x1e=a("strong"),Urr=o("deberta"),Jrr=o(" \u2014 "),OQ=a("a"),Yrr=o("DebertaForQuestionAnswering"),Krr=o(" (DeBERTa model)"),Zrr=l(),I6=a("li"),$1e=a("strong"),etr=o("deberta-v2"),otr=o(" \u2014 "),VQ=a("a"),rtr=o("DebertaV2ForQuestionAnswering"),ttr=o(" (DeBERTa-v2 model)"),atr=l(),q6=a("li"),k1e=a("strong"),ntr=o("distilbert"),str=o(" \u2014 "),XQ=a("a"),ltr=o("DistilBertForQuestionAnswering"),itr=o(" (DistilBERT model)"),dtr=l(),j6=a("li"),S1e=a("strong"),ctr=o("electra"),ftr=o(" \u2014 "),zQ=a("a"),mtr=o("ElectraForQuestionAnswering"),gtr=o(" (ELECTRA model)"),htr=l(),D6=a("li"),R1e=a("strong"),ptr=o("flaubert"),_tr=o(" \u2014 "),QQ=a("a"),utr=o("FlaubertForQuestionAnsweringSimple"),btr=o(" (FlauBERT model)"),vtr=l(),G6=a("li"),P1e=a("strong"),Ftr=o("fnet"),Ttr=o(" \u2014 "),WQ=a("a"),Mtr=o("FNetForQuestionAnswering"),Etr=o(" (FNet model)"),Ctr=l(),O6=a("li"),B1e=a("strong"),wtr=o("funnel"),Atr=o(" \u2014 "),HQ=a("a"),Ltr=o("FunnelForQuestionAnswering"),ytr=o(" (Funnel Transformer model)"),xtr=l(),V6=a("li"),N1e=a("strong"),$tr=o("gptj"),ktr=o(" \u2014 "),UQ=a("a"),Str=o("GPTJForQuestionAnswering"),Rtr=o(" (GPT-J model)"),Ptr=l(),X6=a("li"),I1e=a("strong"),Btr=o("ibert"),Ntr=o(" \u2014 "),JQ=a("a"),Itr=o("IBertForQuestionAnswering"),qtr=o(" (I-BERT model)"),jtr=l(),z6=a("li"),q1e=a("strong"),Dtr=o("layoutlmv2"),Gtr=o(" \u2014 "),YQ=a("a"),Otr=o("LayoutLMv2ForQuestionAnswering"),Vtr=o(" (LayoutLMv2 model)"),Xtr=l(),Q6=a("li"),j1e=a("strong"),ztr=o("layoutlmv3"),Qtr=o(" \u2014 "),KQ=a("a"),Wtr=o("LayoutLMv3ForQuestionAnswering"),Htr=o(" (LayoutLMv3 model)"),Utr=l(),W6=a("li"),D1e=a("strong"),Jtr=o("led"),Ytr=o(" \u2014 "),ZQ=a("a"),Ktr=o("LEDForQuestionAnswering"),Ztr=o(" (LED model)"),ear=l(),H6=a("li"),G1e=a("strong"),oar=o("longformer"),rar=o(" \u2014 "),eW=a("a"),tar=o("LongformerForQuestionAnswering"),aar=o(" (Longformer model)"),nar=l(),U6=a("li"),O1e=a("strong"),sar=o("lxmert"),lar=o(" \u2014 "),oW=a("a"),iar=o("LxmertForQuestionAnswering"),dar=o(" (LXMERT model)"),car=l(),J6=a("li"),V1e=a("strong"),far=o("mbart"),mar=o(" \u2014 "),rW=a("a"),gar=o("MBartForQuestionAnswering"),har=o(" (mBART model)"),par=l(),Y6=a("li"),X1e=a("strong"),_ar=o("megatron-bert"),uar=o(" \u2014 "),tW=a("a"),bar=o("MegatronBertForQuestionAnswering"),Far=o(" (Megatron-BERT model)"),Tar=l(),K6=a("li"),z1e=a("strong"),Mar=o("mobilebert"),Ear=o(" \u2014 "),aW=a("a"),Car=o("MobileBertForQuestionAnswering"),war=o(" (MobileBERT model)"),Aar=l(),Z6=a("li"),Q1e=a("strong"),Lar=o("mpnet"),yar=o(" \u2014 "),nW=a("a"),xar=o("MPNetForQuestionAnswering"),$ar=o(" (MPNet model)"),kar=l(),eT=a("li"),W1e=a("strong"),Sar=o("mvp"),Rar=o(" \u2014 "),sW=a("a"),Par=o("MvpForQuestionAnswering"),Bar=o(" (MVP model)"),Nar=l(),oT=a("li"),H1e=a("strong"),Iar=o("nezha"),qar=o(" \u2014 "),lW=a("a"),jar=o("NezhaForQuestionAnswering"),Dar=o(" (Nezha model)"),Gar=l(),rT=a("li"),U1e=a("strong"),Oar=o("nystromformer"),Var=o(" \u2014 "),iW=a("a"),Xar=o("NystromformerForQuestionAnswering"),zar=o(" (Nystr\xF6mformer model)"),Qar=l(),tT=a("li"),J1e=a("strong"),War=o("qdqbert"),Har=o(" \u2014 "),dW=a("a"),Uar=o("QDQBertForQuestionAnswering"),Jar=o(" (QDQBert model)"),Yar=l(),aT=a("li"),Y1e=a("strong"),Kar=o("reformer"),Zar=o(" \u2014 "),cW=a("a"),enr=o("ReformerForQuestionAnswering"),onr=o(" (Reformer model)"),rnr=l(),nT=a("li"),K1e=a("strong"),tnr=o("rembert"),anr=o(" \u2014 "),fW=a("a"),nnr=o("RemBertForQuestionAnswering"),snr=o(" (RemBERT model)"),lnr=l(),sT=a("li"),Z1e=a("strong"),inr=o("roberta"),dnr=o(" \u2014 "),mW=a("a"),cnr=o("RobertaForQuestionAnswering"),fnr=o(" (RoBERTa model)"),mnr=l(),lT=a("li"),ebe=a("strong"),gnr=o("roformer"),hnr=o(" \u2014 "),gW=a("a"),pnr=o("RoFormerForQuestionAnswering"),_nr=o(" (RoFormer model)"),unr=l(),iT=a("li"),obe=a("strong"),bnr=o("splinter"),vnr=o(" \u2014 "),hW=a("a"),Fnr=o("SplinterForQuestionAnswering"),Tnr=o(" (Splinter model)"),Mnr=l(),dT=a("li"),rbe=a("strong"),Enr=o("squeezebert"),Cnr=o(" \u2014 "),pW=a("a"),wnr=o("SqueezeBertForQuestionAnswering"),Anr=o(" (SqueezeBERT model)"),Lnr=l(),cT=a("li"),tbe=a("strong"),ynr=o("xlm"),xnr=o(" \u2014 "),_W=a("a"),$nr=o("XLMForQuestionAnsweringSimple"),knr=o(" (XLM model)"),Snr=l(),fT=a("li"),abe=a("strong"),Rnr=o("xlm-roberta"),Pnr=o(" \u2014 "),uW=a("a"),Bnr=o("XLMRobertaForQuestionAnswering"),Nnr=o(" (XLM-RoBERTa model)"),Inr=l(),mT=a("li"),nbe=a("strong"),qnr=o("xlm-roberta-xl"),jnr=o(" \u2014 "),bW=a("a"),Dnr=o("XLMRobertaXLForQuestionAnswering"),Gnr=o(" (XLM-RoBERTa-XL model)"),Onr=l(),gT=a("li"),sbe=a("strong"),Vnr=o("xlnet"),Xnr=o(" \u2014 "),vW=a("a"),znr=o("XLNetForQuestionAnsweringSimple"),Qnr=o(" (XLNet model)"),Wnr=l(),hT=a("li"),lbe=a("strong"),Hnr=o("yoso"),Unr=o(" \u2014 "),FW=a("a"),Jnr=o("YosoForQuestionAnswering"),Ynr=o(" (YOSO model)"),Knr=l(),pT=a("p"),Znr=o("The model is set in evaluation mode by default using "),ibe=a("code"),esr=o("model.eval()"),osr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dbe=a("code"),rsr=o("model.train()"),tsr=l(),F(_T.$$.fragment),nze=l(),bd=a("h2"),uT=a("a"),cbe=a("span"),F(Ry.$$.fragment),asr=l(),fbe=a("span"),nsr=o("AutoModelForTableQuestionAnswering"),sze=l(),Go=a("div"),F(Py.$$.fragment),ssr=l(),vd=a("p"),lsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TW=a("a"),isr=o("from_pretrained()"),dsr=o(" class method or the "),MW=a("a"),csr=o("from_config()"),fsr=o(` class
method.`),msr=l(),By=a("p"),gsr=o("This class cannot be instantiated directly using "),mbe=a("code"),hsr=o("__init__()"),psr=o(" (throws an error)."),_sr=l(),bt=a("div"),F(Ny.$$.fragment),usr=l(),gbe=a("p"),bsr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vsr=l(),Fd=a("p"),Fsr=o(`Note:
Loading a model from its configuration file does `),hbe=a("strong"),Tsr=o("not"),Msr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),Esr=o("from_pretrained()"),Csr=o(" to load the model weights."),wsr=l(),F(bT.$$.fragment),Asr=l(),lo=a("div"),F(Iy.$$.fragment),Lsr=l(),pbe=a("p"),ysr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xsr=l(),Qa=a("p"),$sr=o("The model class to instantiate is selected based on the "),_be=a("code"),ksr=o("model_type"),Ssr=o(` property of the config object (either
passed as an argument or loaded from `),ube=a("code"),Rsr=o("pretrained_model_name_or_path"),Psr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bbe=a("code"),Bsr=o("pretrained_model_name_or_path"),Nsr=o(":"),Isr=l(),vbe=a("ul"),vT=a("li"),Fbe=a("strong"),qsr=o("tapas"),jsr=o(" \u2014 "),CW=a("a"),Dsr=o("TapasForQuestionAnswering"),Gsr=o(" (TAPAS model)"),Osr=l(),FT=a("p"),Vsr=o("The model is set in evaluation mode by default using "),Tbe=a("code"),Xsr=o("model.eval()"),zsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mbe=a("code"),Qsr=o("model.train()"),Wsr=l(),F(TT.$$.fragment),lze=l(),Td=a("h2"),MT=a("a"),Ebe=a("span"),F(qy.$$.fragment),Hsr=l(),Cbe=a("span"),Usr=o("AutoModelForImageClassification"),ize=l(),Oo=a("div"),F(jy.$$.fragment),Jsr=l(),Md=a("p"),Ysr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wW=a("a"),Ksr=o("from_pretrained()"),Zsr=o(" class method or the "),AW=a("a"),elr=o("from_config()"),olr=o(` class
method.`),rlr=l(),Dy=a("p"),tlr=o("This class cannot be instantiated directly using "),wbe=a("code"),alr=o("__init__()"),nlr=o(" (throws an error)."),slr=l(),vt=a("div"),F(Gy.$$.fragment),llr=l(),Abe=a("p"),ilr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dlr=l(),Ed=a("p"),clr=o(`Note:
Loading a model from its configuration file does `),Lbe=a("strong"),flr=o("not"),mlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=a("a"),glr=o("from_pretrained()"),hlr=o(" to load the model weights."),plr=l(),F(ET.$$.fragment),_lr=l(),io=a("div"),F(Oy.$$.fragment),ulr=l(),ybe=a("p"),blr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vlr=l(),Wa=a("p"),Flr=o("The model class to instantiate is selected based on the "),xbe=a("code"),Tlr=o("model_type"),Mlr=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),Elr=o("pretrained_model_name_or_path"),Clr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=a("code"),wlr=o("pretrained_model_name_or_path"),Alr=o(":"),Llr=l(),ve=a("ul"),CT=a("li"),Sbe=a("strong"),ylr=o("beit"),xlr=o(" \u2014 "),yW=a("a"),$lr=o("BeitForImageClassification"),klr=o(" (BEiT model)"),Slr=l(),wT=a("li"),Rbe=a("strong"),Rlr=o("convnext"),Plr=o(" \u2014 "),xW=a("a"),Blr=o("ConvNextForImageClassification"),Nlr=o(" (ConvNeXT model)"),Ilr=l(),AT=a("li"),Pbe=a("strong"),qlr=o("cvt"),jlr=o(" \u2014 "),$W=a("a"),Dlr=o("CvtForImageClassification"),Glr=o(" (CvT model)"),Olr=l(),LT=a("li"),Bbe=a("strong"),Vlr=o("data2vec-vision"),Xlr=o(" \u2014 "),kW=a("a"),zlr=o("Data2VecVisionForImageClassification"),Qlr=o(" (Data2VecVision model)"),Wlr=l(),Us=a("li"),Nbe=a("strong"),Hlr=o("deit"),Ulr=o(" \u2014 "),SW=a("a"),Jlr=o("DeiTForImageClassification"),Ylr=o(" or "),RW=a("a"),Klr=o("DeiTForImageClassificationWithTeacher"),Zlr=o(" (DeiT model)"),eir=l(),yT=a("li"),Ibe=a("strong"),oir=o("imagegpt"),rir=o(" \u2014 "),PW=a("a"),tir=o("ImageGPTForImageClassification"),air=o(" (ImageGPT model)"),nir=l(),Js=a("li"),qbe=a("strong"),sir=o("levit"),lir=o(" \u2014 "),BW=a("a"),iir=o("LevitForImageClassification"),dir=o(" or "),NW=a("a"),cir=o("LevitForImageClassificationWithTeacher"),fir=o(" (LeViT model)"),mir=l(),xT=a("li"),jbe=a("strong"),gir=o("mobilevit"),hir=o(" \u2014 "),IW=a("a"),pir=o("MobileViTForImageClassification"),_ir=o(" (MobileViT model)"),uir=l(),Ft=a("li"),Dbe=a("strong"),bir=o("perceiver"),vir=o(" \u2014 "),qW=a("a"),Fir=o("PerceiverForImageClassificationLearned"),Tir=o(" or "),jW=a("a"),Mir=o("PerceiverForImageClassificationFourier"),Eir=o(" or "),DW=a("a"),Cir=o("PerceiverForImageClassificationConvProcessing"),wir=o(" (Perceiver model)"),Air=l(),$T=a("li"),Gbe=a("strong"),Lir=o("poolformer"),yir=o(" \u2014 "),GW=a("a"),xir=o("PoolFormerForImageClassification"),$ir=o(" (PoolFormer model)"),kir=l(),kT=a("li"),Obe=a("strong"),Sir=o("regnet"),Rir=o(" \u2014 "),OW=a("a"),Pir=o("RegNetForImageClassification"),Bir=o(" (RegNet model)"),Nir=l(),ST=a("li"),Vbe=a("strong"),Iir=o("resnet"),qir=o(" \u2014 "),VW=a("a"),jir=o("ResNetForImageClassification"),Dir=o(" (ResNet model)"),Gir=l(),RT=a("li"),Xbe=a("strong"),Oir=o("segformer"),Vir=o(" \u2014 "),XW=a("a"),Xir=o("SegformerForImageClassification"),zir=o(" (SegFormer model)"),Qir=l(),PT=a("li"),zbe=a("strong"),Wir=o("swin"),Hir=o(" \u2014 "),zW=a("a"),Uir=o("SwinForImageClassification"),Jir=o(" (Swin Transformer model)"),Yir=l(),BT=a("li"),Qbe=a("strong"),Kir=o("van"),Zir=o(" \u2014 "),QW=a("a"),edr=o("VanForImageClassification"),odr=o(" (VAN model)"),rdr=l(),NT=a("li"),Wbe=a("strong"),tdr=o("vit"),adr=o(" \u2014 "),WW=a("a"),ndr=o("ViTForImageClassification"),sdr=o(" (ViT model)"),ldr=l(),IT=a("p"),idr=o("The model is set in evaluation mode by default using "),Hbe=a("code"),ddr=o("model.eval()"),cdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=a("code"),fdr=o("model.train()"),mdr=l(),F(qT.$$.fragment),dze=l(),Cd=a("h2"),jT=a("a"),Jbe=a("span"),F(Vy.$$.fragment),gdr=l(),Ybe=a("span"),hdr=o("AutoModelForVision2Seq"),cze=l(),Vo=a("div"),F(Xy.$$.fragment),pdr=l(),wd=a("p"),_dr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HW=a("a"),udr=o("from_pretrained()"),bdr=o(" class method or the "),UW=a("a"),vdr=o("from_config()"),Fdr=o(` class
method.`),Tdr=l(),zy=a("p"),Mdr=o("This class cannot be instantiated directly using "),Kbe=a("code"),Edr=o("__init__()"),Cdr=o(" (throws an error)."),wdr=l(),Tt=a("div"),F(Qy.$$.fragment),Adr=l(),Zbe=a("p"),Ldr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ydr=l(),Ad=a("p"),xdr=o(`Note:
Loading a model from its configuration file does `),eve=a("strong"),$dr=o("not"),kdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),Sdr=o("from_pretrained()"),Rdr=o(" to load the model weights."),Pdr=l(),F(DT.$$.fragment),Bdr=l(),co=a("div"),F(Wy.$$.fragment),Ndr=l(),ove=a("p"),Idr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qdr=l(),Ha=a("p"),jdr=o("The model class to instantiate is selected based on the "),rve=a("code"),Ddr=o("model_type"),Gdr=o(` property of the config object (either
passed as an argument or loaded from `),tve=a("code"),Odr=o("pretrained_model_name_or_path"),Vdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=a("code"),Xdr=o("pretrained_model_name_or_path"),zdr=o(":"),Qdr=l(),nve=a("ul"),GT=a("li"),sve=a("strong"),Wdr=o("vision-encoder-decoder"),Hdr=o(" \u2014 "),YW=a("a"),Udr=o("VisionEncoderDecoderModel"),Jdr=o(" (Vision Encoder decoder model)"),Ydr=l(),OT=a("p"),Kdr=o("The model is set in evaluation mode by default using "),lve=a("code"),Zdr=o("model.eval()"),ecr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ive=a("code"),ocr=o("model.train()"),rcr=l(),F(VT.$$.fragment),fze=l(),Ld=a("h2"),XT=a("a"),dve=a("span"),F(Hy.$$.fragment),tcr=l(),cve=a("span"),acr=o("AutoModelForVisualQuestionAnswering"),mze=l(),Xo=a("div"),F(Uy.$$.fragment),ncr=l(),yd=a("p"),scr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),KW=a("a"),lcr=o("from_pretrained()"),icr=o(" class method or the "),ZW=a("a"),dcr=o("from_config()"),ccr=o(` class
method.`),fcr=l(),Jy=a("p"),mcr=o("This class cannot be instantiated directly using "),fve=a("code"),gcr=o("__init__()"),hcr=o(" (throws an error)."),pcr=l(),Mt=a("div"),F(Yy.$$.fragment),_cr=l(),mve=a("p"),ucr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),bcr=l(),xd=a("p"),vcr=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),Fcr=o("not"),Tcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),Mcr=o("from_pretrained()"),Ecr=o(" to load the model weights."),Ccr=l(),F(zT.$$.fragment),wcr=l(),fo=a("div"),F(Ky.$$.fragment),Acr=l(),hve=a("p"),Lcr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ycr=l(),Ua=a("p"),xcr=o("The model class to instantiate is selected based on the "),pve=a("code"),$cr=o("model_type"),kcr=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),Scr=o("pretrained_model_name_or_path"),Rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),Pcr=o("pretrained_model_name_or_path"),Bcr=o(":"),Ncr=l(),bve=a("ul"),QT=a("li"),vve=a("strong"),Icr=o("vilt"),qcr=o(" \u2014 "),oH=a("a"),jcr=o("ViltForQuestionAnswering"),Dcr=o(" (ViLT model)"),Gcr=l(),WT=a("p"),Ocr=o("The model is set in evaluation mode by default using "),Fve=a("code"),Vcr=o("model.eval()"),Xcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tve=a("code"),zcr=o("model.train()"),Qcr=l(),F(HT.$$.fragment),gze=l(),$d=a("h2"),UT=a("a"),Mve=a("span"),F(Zy.$$.fragment),Wcr=l(),Eve=a("span"),Hcr=o("AutoModelForAudioClassification"),hze=l(),zo=a("div"),F(e9.$$.fragment),Ucr=l(),kd=a("p"),Jcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rH=a("a"),Ycr=o("from_pretrained()"),Kcr=o(" class method or the "),tH=a("a"),Zcr=o("from_config()"),efr=o(` class
method.`),ofr=l(),o9=a("p"),rfr=o("This class cannot be instantiated directly using "),Cve=a("code"),tfr=o("__init__()"),afr=o(" (throws an error)."),nfr=l(),Et=a("div"),F(r9.$$.fragment),sfr=l(),wve=a("p"),lfr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ifr=l(),Sd=a("p"),dfr=o(`Note:
Loading a model from its configuration file does `),Ave=a("strong"),cfr=o("not"),ffr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),mfr=o("from_pretrained()"),gfr=o(" to load the model weights."),hfr=l(),F(JT.$$.fragment),pfr=l(),mo=a("div"),F(t9.$$.fragment),_fr=l(),Lve=a("p"),ufr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),bfr=l(),Ja=a("p"),vfr=o("The model class to instantiate is selected based on the "),yve=a("code"),Ffr=o("model_type"),Tfr=o(` property of the config object (either
passed as an argument or loaded from `),xve=a("code"),Mfr=o("pretrained_model_name_or_path"),Efr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=a("code"),Cfr=o("pretrained_model_name_or_path"),wfr=o(":"),Afr=l(),Pe=a("ul"),YT=a("li"),kve=a("strong"),Lfr=o("data2vec-audio"),yfr=o(" \u2014 "),nH=a("a"),xfr=o("Data2VecAudioForSequenceClassification"),$fr=o(" (Data2VecAudio model)"),kfr=l(),KT=a("li"),Sve=a("strong"),Sfr=o("hubert"),Rfr=o(" \u2014 "),sH=a("a"),Pfr=o("HubertForSequenceClassification"),Bfr=o(" (Hubert model)"),Nfr=l(),ZT=a("li"),Rve=a("strong"),Ifr=o("sew"),qfr=o(" \u2014 "),lH=a("a"),jfr=o("SEWForSequenceClassification"),Dfr=o(" (SEW model)"),Gfr=l(),e7=a("li"),Pve=a("strong"),Ofr=o("sew-d"),Vfr=o(" \u2014 "),iH=a("a"),Xfr=o("SEWDForSequenceClassification"),zfr=o(" (SEW-D model)"),Qfr=l(),o7=a("li"),Bve=a("strong"),Wfr=o("unispeech"),Hfr=o(" \u2014 "),dH=a("a"),Ufr=o("UniSpeechForSequenceClassification"),Jfr=o(" (UniSpeech model)"),Yfr=l(),r7=a("li"),Nve=a("strong"),Kfr=o("unispeech-sat"),Zfr=o(" \u2014 "),cH=a("a"),emr=o("UniSpeechSatForSequenceClassification"),omr=o(" (UniSpeechSat model)"),rmr=l(),t7=a("li"),Ive=a("strong"),tmr=o("wav2vec2"),amr=o(" \u2014 "),fH=a("a"),nmr=o("Wav2Vec2ForSequenceClassification"),smr=o(" (Wav2Vec2 model)"),lmr=l(),a7=a("li"),qve=a("strong"),imr=o("wav2vec2-conformer"),dmr=o(" \u2014 "),mH=a("a"),cmr=o("Wav2Vec2ConformerForSequenceClassification"),fmr=o(" (Wav2Vec2-Conformer model)"),mmr=l(),n7=a("li"),jve=a("strong"),gmr=o("wavlm"),hmr=o(" \u2014 "),gH=a("a"),pmr=o("WavLMForSequenceClassification"),_mr=o(" (WavLM model)"),umr=l(),s7=a("p"),bmr=o("The model is set in evaluation mode by default using "),Dve=a("code"),vmr=o("model.eval()"),Fmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gve=a("code"),Tmr=o("model.train()"),Mmr=l(),F(l7.$$.fragment),pze=l(),Rd=a("h2"),i7=a("a"),Ove=a("span"),F(a9.$$.fragment),Emr=l(),Vve=a("span"),Cmr=o("AutoModelForAudioFrameClassification"),_ze=l(),Qo=a("div"),F(n9.$$.fragment),wmr=l(),Pd=a("p"),Amr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hH=a("a"),Lmr=o("from_pretrained()"),ymr=o(" class method or the "),pH=a("a"),xmr=o("from_config()"),$mr=o(` class
method.`),kmr=l(),s9=a("p"),Smr=o("This class cannot be instantiated directly using "),Xve=a("code"),Rmr=o("__init__()"),Pmr=o(" (throws an error)."),Bmr=l(),Ct=a("div"),F(l9.$$.fragment),Nmr=l(),zve=a("p"),Imr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),qmr=l(),Bd=a("p"),jmr=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),Dmr=o("not"),Gmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),Omr=o("from_pretrained()"),Vmr=o(" to load the model weights."),Xmr=l(),F(d7.$$.fragment),zmr=l(),go=a("div"),F(i9.$$.fragment),Qmr=l(),Wve=a("p"),Wmr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Hmr=l(),Ya=a("p"),Umr=o("The model class to instantiate is selected based on the "),Hve=a("code"),Jmr=o("model_type"),Ymr=o(` property of the config object (either
passed as an argument or loaded from `),Uve=a("code"),Kmr=o("pretrained_model_name_or_path"),Zmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=a("code"),egr=o("pretrained_model_name_or_path"),ogr=o(":"),rgr=l(),rt=a("ul"),c7=a("li"),Yve=a("strong"),tgr=o("data2vec-audio"),agr=o(" \u2014 "),uH=a("a"),ngr=o("Data2VecAudioForAudioFrameClassification"),sgr=o(" (Data2VecAudio model)"),lgr=l(),f7=a("li"),Kve=a("strong"),igr=o("unispeech-sat"),dgr=o(" \u2014 "),bH=a("a"),cgr=o("UniSpeechSatForAudioFrameClassification"),fgr=o(" (UniSpeechSat model)"),mgr=l(),m7=a("li"),Zve=a("strong"),ggr=o("wav2vec2"),hgr=o(" \u2014 "),vH=a("a"),pgr=o("Wav2Vec2ForAudioFrameClassification"),_gr=o(" (Wav2Vec2 model)"),ugr=l(),g7=a("li"),eFe=a("strong"),bgr=o("wav2vec2-conformer"),vgr=o(" \u2014 "),FH=a("a"),Fgr=o("Wav2Vec2ConformerForAudioFrameClassification"),Tgr=o(" (Wav2Vec2-Conformer model)"),Mgr=l(),h7=a("li"),oFe=a("strong"),Egr=o("wavlm"),Cgr=o(" \u2014 "),TH=a("a"),wgr=o("WavLMForAudioFrameClassification"),Agr=o(" (WavLM model)"),Lgr=l(),p7=a("p"),ygr=o("The model is set in evaluation mode by default using "),rFe=a("code"),xgr=o("model.eval()"),$gr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tFe=a("code"),kgr=o("model.train()"),Sgr=l(),F(_7.$$.fragment),uze=l(),Nd=a("h2"),u7=a("a"),aFe=a("span"),F(d9.$$.fragment),Rgr=l(),nFe=a("span"),Pgr=o("AutoModelForCTC"),bze=l(),Wo=a("div"),F(c9.$$.fragment),Bgr=l(),Id=a("p"),Ngr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),MH=a("a"),Igr=o("from_pretrained()"),qgr=o(" class method or the "),EH=a("a"),jgr=o("from_config()"),Dgr=o(` class
method.`),Ggr=l(),f9=a("p"),Ogr=o("This class cannot be instantiated directly using "),sFe=a("code"),Vgr=o("__init__()"),Xgr=o(" (throws an error)."),zgr=l(),wt=a("div"),F(m9.$$.fragment),Qgr=l(),lFe=a("p"),Wgr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Hgr=l(),qd=a("p"),Ugr=o(`Note:
Loading a model from its configuration file does `),iFe=a("strong"),Jgr=o("not"),Ygr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),Kgr=o("from_pretrained()"),Zgr=o(" to load the model weights."),ehr=l(),F(b7.$$.fragment),ohr=l(),ho=a("div"),F(g9.$$.fragment),rhr=l(),dFe=a("p"),thr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ahr=l(),Ka=a("p"),nhr=o("The model class to instantiate is selected based on the "),cFe=a("code"),shr=o("model_type"),lhr=o(` property of the config object (either
passed as an argument or loaded from `),fFe=a("code"),ihr=o("pretrained_model_name_or_path"),dhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=a("code"),chr=o("pretrained_model_name_or_path"),fhr=o(":"),mhr=l(),Le=a("ul"),v7=a("li"),gFe=a("strong"),ghr=o("data2vec-audio"),hhr=o(" \u2014 "),wH=a("a"),phr=o("Data2VecAudioForCTC"),_hr=o(" (Data2VecAudio model)"),uhr=l(),F7=a("li"),hFe=a("strong"),bhr=o("hubert"),vhr=o(" \u2014 "),AH=a("a"),Fhr=o("HubertForCTC"),Thr=o(" (Hubert model)"),Mhr=l(),T7=a("li"),pFe=a("strong"),Ehr=o("mctct"),Chr=o(" \u2014 "),LH=a("a"),whr=o("MCTCTForCTC"),Ahr=o(" (M-CTC-T model)"),Lhr=l(),M7=a("li"),_Fe=a("strong"),yhr=o("sew"),xhr=o(" \u2014 "),yH=a("a"),$hr=o("SEWForCTC"),khr=o(" (SEW model)"),Shr=l(),E7=a("li"),uFe=a("strong"),Rhr=o("sew-d"),Phr=o(" \u2014 "),xH=a("a"),Bhr=o("SEWDForCTC"),Nhr=o(" (SEW-D model)"),Ihr=l(),C7=a("li"),bFe=a("strong"),qhr=o("unispeech"),jhr=o(" \u2014 "),$H=a("a"),Dhr=o("UniSpeechForCTC"),Ghr=o(" (UniSpeech model)"),Ohr=l(),w7=a("li"),vFe=a("strong"),Vhr=o("unispeech-sat"),Xhr=o(" \u2014 "),kH=a("a"),zhr=o("UniSpeechSatForCTC"),Qhr=o(" (UniSpeechSat model)"),Whr=l(),A7=a("li"),FFe=a("strong"),Hhr=o("wav2vec2"),Uhr=o(" \u2014 "),SH=a("a"),Jhr=o("Wav2Vec2ForCTC"),Yhr=o(" (Wav2Vec2 model)"),Khr=l(),L7=a("li"),TFe=a("strong"),Zhr=o("wav2vec2-conformer"),epr=o(" \u2014 "),RH=a("a"),opr=o("Wav2Vec2ConformerForCTC"),rpr=o(" (Wav2Vec2-Conformer model)"),tpr=l(),y7=a("li"),MFe=a("strong"),apr=o("wavlm"),npr=o(" \u2014 "),PH=a("a"),spr=o("WavLMForCTC"),lpr=o(" (WavLM model)"),ipr=l(),x7=a("p"),dpr=o("The model is set in evaluation mode by default using "),EFe=a("code"),cpr=o("model.eval()"),fpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CFe=a("code"),mpr=o("model.train()"),gpr=l(),F($7.$$.fragment),vze=l(),jd=a("h2"),k7=a("a"),wFe=a("span"),F(h9.$$.fragment),hpr=l(),AFe=a("span"),ppr=o("AutoModelForSpeechSeq2Seq"),Fze=l(),Ho=a("div"),F(p9.$$.fragment),_pr=l(),Dd=a("p"),upr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BH=a("a"),bpr=o("from_pretrained()"),vpr=o(" class method or the "),NH=a("a"),Fpr=o("from_config()"),Tpr=o(` class
method.`),Mpr=l(),_9=a("p"),Epr=o("This class cannot be instantiated directly using "),LFe=a("code"),Cpr=o("__init__()"),wpr=o(" (throws an error)."),Apr=l(),At=a("div"),F(u9.$$.fragment),Lpr=l(),yFe=a("p"),ypr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xpr=l(),Gd=a("p"),$pr=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),kpr=o("not"),Spr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),Rpr=o("from_pretrained()"),Ppr=o(" to load the model weights."),Bpr=l(),F(S7.$$.fragment),Npr=l(),po=a("div"),F(b9.$$.fragment),Ipr=l(),$Fe=a("p"),qpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jpr=l(),Za=a("p"),Dpr=o("The model class to instantiate is selected based on the "),kFe=a("code"),Gpr=o("model_type"),Opr=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),Vpr=o("pretrained_model_name_or_path"),Xpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),zpr=o("pretrained_model_name_or_path"),Qpr=o(":"),Wpr=l(),v9=a("ul"),R7=a("li"),PFe=a("strong"),Hpr=o("speech-encoder-decoder"),Upr=o(" \u2014 "),qH=a("a"),Jpr=o("SpeechEncoderDecoderModel"),Ypr=o(" (Speech Encoder decoder model)"),Kpr=l(),P7=a("li"),BFe=a("strong"),Zpr=o("speech_to_text"),e_r=o(" \u2014 "),jH=a("a"),o_r=o("Speech2TextForConditionalGeneration"),r_r=o(" (Speech2Text model)"),t_r=l(),B7=a("p"),a_r=o("The model is set in evaluation mode by default using "),NFe=a("code"),n_r=o("model.eval()"),s_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IFe=a("code"),l_r=o("model.train()"),i_r=l(),F(N7.$$.fragment),Tze=l(),Od=a("h2"),I7=a("a"),qFe=a("span"),F(F9.$$.fragment),d_r=l(),jFe=a("span"),c_r=o("AutoModelForAudioXVector"),Mze=l(),Uo=a("div"),F(T9.$$.fragment),f_r=l(),Vd=a("p"),m_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),DH=a("a"),g_r=o("from_pretrained()"),h_r=o(" class method or the "),GH=a("a"),p_r=o("from_config()"),__r=o(` class
method.`),u_r=l(),M9=a("p"),b_r=o("This class cannot be instantiated directly using "),DFe=a("code"),v_r=o("__init__()"),F_r=o(" (throws an error)."),T_r=l(),Lt=a("div"),F(E9.$$.fragment),M_r=l(),GFe=a("p"),E_r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),C_r=l(),Xd=a("p"),w_r=o(`Note:
Loading a model from its configuration file does `),OFe=a("strong"),A_r=o("not"),L_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),y_r=o("from_pretrained()"),x_r=o(" to load the model weights."),$_r=l(),F(q7.$$.fragment),k_r=l(),_o=a("div"),F(C9.$$.fragment),S_r=l(),VFe=a("p"),R_r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),P_r=l(),en=a("p"),B_r=o("The model class to instantiate is selected based on the "),XFe=a("code"),N_r=o("model_type"),I_r=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),q_r=o("pretrained_model_name_or_path"),j_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),D_r=o("pretrained_model_name_or_path"),G_r=o(":"),O_r=l(),tt=a("ul"),j7=a("li"),WFe=a("strong"),V_r=o("data2vec-audio"),X_r=o(" \u2014 "),VH=a("a"),z_r=o("Data2VecAudioForXVector"),Q_r=o(" (Data2VecAudio model)"),W_r=l(),D7=a("li"),HFe=a("strong"),H_r=o("unispeech-sat"),U_r=o(" \u2014 "),XH=a("a"),J_r=o("UniSpeechSatForXVector"),Y_r=o(" (UniSpeechSat model)"),K_r=l(),G7=a("li"),UFe=a("strong"),Z_r=o("wav2vec2"),eur=o(" \u2014 "),zH=a("a"),our=o("Wav2Vec2ForXVector"),rur=o(" (Wav2Vec2 model)"),tur=l(),O7=a("li"),JFe=a("strong"),aur=o("wav2vec2-conformer"),nur=o(" \u2014 "),QH=a("a"),sur=o("Wav2Vec2ConformerForXVector"),lur=o(" (Wav2Vec2-Conformer model)"),iur=l(),V7=a("li"),YFe=a("strong"),dur=o("wavlm"),cur=o(" \u2014 "),WH=a("a"),fur=o("WavLMForXVector"),mur=o(" (WavLM model)"),gur=l(),X7=a("p"),hur=o("The model is set in evaluation mode by default using "),KFe=a("code"),pur=o("model.eval()"),_ur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZFe=a("code"),uur=o("model.train()"),bur=l(),F(z7.$$.fragment),Eze=l(),zd=a("h2"),Q7=a("a"),e6e=a("span"),F(w9.$$.fragment),vur=l(),o6e=a("span"),Fur=o("AutoModelForMaskedImageModeling"),Cze=l(),Jo=a("div"),F(A9.$$.fragment),Tur=l(),Qd=a("p"),Mur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HH=a("a"),Eur=o("from_pretrained()"),Cur=o(" class method or the "),UH=a("a"),wur=o("from_config()"),Aur=o(` class
method.`),Lur=l(),L9=a("p"),yur=o("This class cannot be instantiated directly using "),r6e=a("code"),xur=o("__init__()"),$ur=o(" (throws an error)."),kur=l(),yt=a("div"),F(y9.$$.fragment),Sur=l(),t6e=a("p"),Rur=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Pur=l(),Wd=a("p"),Bur=o(`Note:
Loading a model from its configuration file does `),a6e=a("strong"),Nur=o("not"),Iur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),qur=o("from_pretrained()"),jur=o(" to load the model weights."),Dur=l(),F(W7.$$.fragment),Gur=l(),uo=a("div"),F(x9.$$.fragment),Our=l(),n6e=a("p"),Vur=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Xur=l(),on=a("p"),zur=o("The model class to instantiate is selected based on the "),s6e=a("code"),Qur=o("model_type"),Wur=o(` property of the config object (either
passed as an argument or loaded from `),l6e=a("code"),Hur=o("pretrained_model_name_or_path"),Uur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=a("code"),Jur=o("pretrained_model_name_or_path"),Yur=o(":"),Kur=l(),Hd=a("ul"),H7=a("li"),d6e=a("strong"),Zur=o("deit"),e2r=o(" \u2014 "),YH=a("a"),o2r=o("DeiTForMaskedImageModeling"),r2r=o(" (DeiT model)"),t2r=l(),U7=a("li"),c6e=a("strong"),a2r=o("swin"),n2r=o(" \u2014 "),KH=a("a"),s2r=o("SwinForMaskedImageModeling"),l2r=o(" (Swin Transformer model)"),i2r=l(),J7=a("li"),f6e=a("strong"),d2r=o("vit"),c2r=o(" \u2014 "),ZH=a("a"),f2r=o("ViTForMaskedImageModeling"),m2r=o(" (ViT model)"),g2r=l(),Y7=a("p"),h2r=o("The model is set in evaluation mode by default using "),m6e=a("code"),p2r=o("model.eval()"),_2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g6e=a("code"),u2r=o("model.train()"),b2r=l(),F(K7.$$.fragment),wze=l(),Ud=a("h2"),Z7=a("a"),h6e=a("span"),F($9.$$.fragment),v2r=l(),p6e=a("span"),F2r=o("AutoModelForObjectDetection"),Aze=l(),Yo=a("div"),F(k9.$$.fragment),T2r=l(),Jd=a("p"),M2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eU=a("a"),E2r=o("from_pretrained()"),C2r=o(" class method or the "),oU=a("a"),w2r=o("from_config()"),A2r=o(` class
method.`),L2r=l(),S9=a("p"),y2r=o("This class cannot be instantiated directly using "),_6e=a("code"),x2r=o("__init__()"),$2r=o(" (throws an error)."),k2r=l(),xt=a("div"),F(R9.$$.fragment),S2r=l(),u6e=a("p"),R2r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),P2r=l(),Yd=a("p"),B2r=o(`Note:
Loading a model from its configuration file does `),b6e=a("strong"),N2r=o("not"),I2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),q2r=o("from_pretrained()"),j2r=o(" to load the model weights."),D2r=l(),F(e8.$$.fragment),G2r=l(),bo=a("div"),F(P9.$$.fragment),O2r=l(),v6e=a("p"),V2r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),X2r=l(),rn=a("p"),z2r=o("The model class to instantiate is selected based on the "),F6e=a("code"),Q2r=o("model_type"),W2r=o(` property of the config object (either
passed as an argument or loaded from `),T6e=a("code"),H2r=o("pretrained_model_name_or_path"),U2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M6e=a("code"),J2r=o("pretrained_model_name_or_path"),Y2r=o(":"),K2r=l(),B9=a("ul"),o8=a("li"),E6e=a("strong"),Z2r=o("detr"),e1r=o(" \u2014 "),tU=a("a"),o1r=o("DetrForObjectDetection"),r1r=o(" (DETR model)"),t1r=l(),r8=a("li"),C6e=a("strong"),a1r=o("yolos"),n1r=o(" \u2014 "),aU=a("a"),s1r=o("YolosForObjectDetection"),l1r=o(" (YOLOS model)"),i1r=l(),t8=a("p"),d1r=o("The model is set in evaluation mode by default using "),w6e=a("code"),c1r=o("model.eval()"),f1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A6e=a("code"),m1r=o("model.train()"),g1r=l(),F(a8.$$.fragment),Lze=l(),Kd=a("h2"),n8=a("a"),L6e=a("span"),F(N9.$$.fragment),h1r=l(),y6e=a("span"),p1r=o("AutoModelForImageSegmentation"),yze=l(),Ko=a("div"),F(I9.$$.fragment),_1r=l(),Zd=a("p"),u1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nU=a("a"),b1r=o("from_pretrained()"),v1r=o(" class method or the "),sU=a("a"),F1r=o("from_config()"),T1r=o(` class
method.`),M1r=l(),q9=a("p"),E1r=o("This class cannot be instantiated directly using "),x6e=a("code"),C1r=o("__init__()"),w1r=o(" (throws an error)."),A1r=l(),$t=a("div"),F(j9.$$.fragment),L1r=l(),$6e=a("p"),y1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),x1r=l(),ec=a("p"),$1r=o(`Note:
Loading a model from its configuration file does `),k6e=a("strong"),k1r=o("not"),S1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),R1r=o("from_pretrained()"),P1r=o(" to load the model weights."),B1r=l(),F(s8.$$.fragment),N1r=l(),vo=a("div"),F(D9.$$.fragment),I1r=l(),S6e=a("p"),q1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),j1r=l(),tn=a("p"),D1r=o("The model class to instantiate is selected based on the "),R6e=a("code"),G1r=o("model_type"),O1r=o(` property of the config object (either
passed as an argument or loaded from `),P6e=a("code"),V1r=o("pretrained_model_name_or_path"),X1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B6e=a("code"),z1r=o("pretrained_model_name_or_path"),Q1r=o(":"),W1r=l(),N6e=a("ul"),l8=a("li"),I6e=a("strong"),H1r=o("detr"),U1r=o(" \u2014 "),iU=a("a"),J1r=o("DetrForSegmentation"),Y1r=o(" (DETR model)"),K1r=l(),i8=a("p"),Z1r=o("The model is set in evaluation mode by default using "),q6e=a("code"),ebr=o("model.eval()"),obr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j6e=a("code"),rbr=o("model.train()"),tbr=l(),F(d8.$$.fragment),xze=l(),oc=a("h2"),c8=a("a"),D6e=a("span"),F(G9.$$.fragment),abr=l(),G6e=a("span"),nbr=o("AutoModelForSemanticSegmentation"),$ze=l(),Zo=a("div"),F(O9.$$.fragment),sbr=l(),rc=a("p"),lbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dU=a("a"),ibr=o("from_pretrained()"),dbr=o(" class method or the "),cU=a("a"),cbr=o("from_config()"),fbr=o(` class
method.`),mbr=l(),V9=a("p"),gbr=o("This class cannot be instantiated directly using "),O6e=a("code"),hbr=o("__init__()"),pbr=o(" (throws an error)."),_br=l(),kt=a("div"),F(X9.$$.fragment),ubr=l(),V6e=a("p"),bbr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),vbr=l(),tc=a("p"),Fbr=o(`Note:
Loading a model from its configuration file does `),X6e=a("strong"),Tbr=o("not"),Mbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),Ebr=o("from_pretrained()"),Cbr=o(" to load the model weights."),wbr=l(),F(f8.$$.fragment),Abr=l(),Fo=a("div"),F(z9.$$.fragment),Lbr=l(),z6e=a("p"),ybr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),xbr=l(),an=a("p"),$br=o("The model class to instantiate is selected based on the "),Q6e=a("code"),kbr=o("model_type"),Sbr=o(` property of the config object (either
passed as an argument or loaded from `),W6e=a("code"),Rbr=o("pretrained_model_name_or_path"),Pbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=a("code"),Bbr=o("pretrained_model_name_or_path"),Nbr=o(":"),Ibr=l(),at=a("ul"),m8=a("li"),U6e=a("strong"),qbr=o("beit"),jbr=o(" \u2014 "),mU=a("a"),Dbr=o("BeitForSemanticSegmentation"),Gbr=o(" (BEiT model)"),Obr=l(),g8=a("li"),J6e=a("strong"),Vbr=o("data2vec-vision"),Xbr=o(" \u2014 "),gU=a("a"),zbr=o("Data2VecVisionForSemanticSegmentation"),Qbr=o(" (Data2VecVision model)"),Wbr=l(),h8=a("li"),Y6e=a("strong"),Hbr=o("dpt"),Ubr=o(" \u2014 "),hU=a("a"),Jbr=o("DPTForSemanticSegmentation"),Ybr=o(" (DPT model)"),Kbr=l(),p8=a("li"),K6e=a("strong"),Zbr=o("mobilevit"),evr=o(" \u2014 "),pU=a("a"),ovr=o("MobileViTForSemanticSegmentation"),rvr=o(" (MobileViT model)"),tvr=l(),_8=a("li"),Z6e=a("strong"),avr=o("segformer"),nvr=o(" \u2014 "),_U=a("a"),svr=o("SegformerForSemanticSegmentation"),lvr=o(" (SegFormer model)"),ivr=l(),u8=a("p"),dvr=o("The model is set in evaluation mode by default using "),eTe=a("code"),cvr=o("model.eval()"),fvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oTe=a("code"),mvr=o("model.train()"),gvr=l(),F(b8.$$.fragment),kze=l(),ac=a("h2"),v8=a("a"),rTe=a("span"),F(Q9.$$.fragment),hvr=l(),tTe=a("span"),pvr=o("AutoModelForInstanceSegmentation"),Sze=l(),er=a("div"),F(W9.$$.fragment),_vr=l(),nc=a("p"),uvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uU=a("a"),bvr=o("from_pretrained()"),vvr=o(" class method or the "),bU=a("a"),Fvr=o("from_config()"),Tvr=o(` class
method.`),Mvr=l(),H9=a("p"),Evr=o("This class cannot be instantiated directly using "),aTe=a("code"),Cvr=o("__init__()"),wvr=o(" (throws an error)."),Avr=l(),St=a("div"),F(U9.$$.fragment),Lvr=l(),nTe=a("p"),yvr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),xvr=l(),sc=a("p"),$vr=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),kvr=o("not"),Svr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),Rvr=o("from_pretrained()"),Pvr=o(" to load the model weights."),Bvr=l(),F(F8.$$.fragment),Nvr=l(),To=a("div"),F(J9.$$.fragment),Ivr=l(),lTe=a("p"),qvr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jvr=l(),nn=a("p"),Dvr=o("The model class to instantiate is selected based on the "),iTe=a("code"),Gvr=o("model_type"),Ovr=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),Vvr=o("pretrained_model_name_or_path"),Xvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),zvr=o("pretrained_model_name_or_path"),Qvr=o(":"),Wvr=l(),fTe=a("ul"),T8=a("li"),mTe=a("strong"),Hvr=o("maskformer"),Uvr=o(" \u2014 "),FU=a("a"),Jvr=o("MaskFormerForInstanceSegmentation"),Yvr=o(" (MaskFormer model)"),Kvr=l(),M8=a("p"),Zvr=o("The model is set in evaluation mode by default using "),gTe=a("code"),eFr=o("model.eval()"),oFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hTe=a("code"),rFr=o("model.train()"),tFr=l(),F(E8.$$.fragment),Rze=l(),lc=a("h2"),C8=a("a"),pTe=a("span"),F(Y9.$$.fragment),aFr=l(),_Te=a("span"),nFr=o("TFAutoModel"),Pze=l(),or=a("div"),F(K9.$$.fragment),sFr=l(),ic=a("p"),lFr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TU=a("a"),iFr=o("from_pretrained()"),dFr=o(" class method or the "),MU=a("a"),cFr=o("from_config()"),fFr=o(` class
method.`),mFr=l(),Z9=a("p"),gFr=o("This class cannot be instantiated directly using "),uTe=a("code"),hFr=o("__init__()"),pFr=o(" (throws an error)."),_Fr=l(),Rt=a("div"),F(ex.$$.fragment),uFr=l(),bTe=a("p"),bFr=o("Instantiates one of the base model classes of the library from a configuration."),vFr=l(),dc=a("p"),FFr=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),TFr=o("not"),MFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),EFr=o("from_pretrained()"),CFr=o(" to load the model weights."),wFr=l(),F(w8.$$.fragment),AFr=l(),xr=a("div"),F(ox.$$.fragment),LFr=l(),FTe=a("p"),yFr=o("Instantiate one of the base model classes of the library from a pretrained model."),xFr=l(),sn=a("p"),$Fr=o("The model class to instantiate is selected based on the "),TTe=a("code"),kFr=o("model_type"),SFr=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),RFr=o("pretrained_model_name_or_path"),PFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),BFr=o("pretrained_model_name_or_path"),NFr=o(":"),IFr=l(),q=a("ul"),A8=a("li"),CTe=a("strong"),qFr=o("albert"),jFr=o(" \u2014 "),CU=a("a"),DFr=o("TFAlbertModel"),GFr=o(" (ALBERT model)"),OFr=l(),L8=a("li"),wTe=a("strong"),VFr=o("bart"),XFr=o(" \u2014 "),wU=a("a"),zFr=o("TFBartModel"),QFr=o(" (BART model)"),WFr=l(),y8=a("li"),ATe=a("strong"),HFr=o("bert"),UFr=o(" \u2014 "),AU=a("a"),JFr=o("TFBertModel"),YFr=o(" (BERT model)"),KFr=l(),x8=a("li"),LTe=a("strong"),ZFr=o("blenderbot"),e6r=o(" \u2014 "),LU=a("a"),o6r=o("TFBlenderbotModel"),r6r=o(" (Blenderbot model)"),t6r=l(),$8=a("li"),yTe=a("strong"),a6r=o("blenderbot-small"),n6r=o(" \u2014 "),yU=a("a"),s6r=o("TFBlenderbotSmallModel"),l6r=o(" (BlenderbotSmall model)"),i6r=l(),k8=a("li"),xTe=a("strong"),d6r=o("camembert"),c6r=o(" \u2014 "),xU=a("a"),f6r=o("TFCamembertModel"),m6r=o(" (CamemBERT model)"),g6r=l(),S8=a("li"),$Te=a("strong"),h6r=o("clip"),p6r=o(" \u2014 "),$U=a("a"),_6r=o("TFCLIPModel"),u6r=o(" (CLIP model)"),b6r=l(),R8=a("li"),kTe=a("strong"),v6r=o("convbert"),F6r=o(" \u2014 "),kU=a("a"),T6r=o("TFConvBertModel"),M6r=o(" (ConvBERT model)"),E6r=l(),P8=a("li"),STe=a("strong"),C6r=o("convnext"),w6r=o(" \u2014 "),SU=a("a"),A6r=o("TFConvNextModel"),L6r=o(" (ConvNeXT model)"),y6r=l(),B8=a("li"),RTe=a("strong"),x6r=o("ctrl"),$6r=o(" \u2014 "),RU=a("a"),k6r=o("TFCTRLModel"),S6r=o(" (CTRL model)"),R6r=l(),N8=a("li"),PTe=a("strong"),P6r=o("data2vec-vision"),B6r=o(" \u2014 "),PU=a("a"),N6r=o("TFData2VecVisionModel"),I6r=o(" (Data2VecVision model)"),q6r=l(),I8=a("li"),BTe=a("strong"),j6r=o("deberta"),D6r=o(" \u2014 "),BU=a("a"),G6r=o("TFDebertaModel"),O6r=o(" (DeBERTa model)"),V6r=l(),q8=a("li"),NTe=a("strong"),X6r=o("deberta-v2"),z6r=o(" \u2014 "),NU=a("a"),Q6r=o("TFDebertaV2Model"),W6r=o(" (DeBERTa-v2 model)"),H6r=l(),j8=a("li"),ITe=a("strong"),U6r=o("deit"),J6r=o(" \u2014 "),IU=a("a"),Y6r=o("TFDeiTModel"),K6r=o(" (DeiT model)"),Z6r=l(),D8=a("li"),qTe=a("strong"),eTr=o("distilbert"),oTr=o(" \u2014 "),qU=a("a"),rTr=o("TFDistilBertModel"),tTr=o(" (DistilBERT model)"),aTr=l(),G8=a("li"),jTe=a("strong"),nTr=o("dpr"),sTr=o(" \u2014 "),jU=a("a"),lTr=o("TFDPRQuestionEncoder"),iTr=o(" (DPR model)"),dTr=l(),O8=a("li"),DTe=a("strong"),cTr=o("electra"),fTr=o(" \u2014 "),DU=a("a"),mTr=o("TFElectraModel"),gTr=o(" (ELECTRA model)"),hTr=l(),V8=a("li"),GTe=a("strong"),pTr=o("flaubert"),_Tr=o(" \u2014 "),GU=a("a"),uTr=o("TFFlaubertModel"),bTr=o(" (FlauBERT model)"),vTr=l(),Ys=a("li"),OTe=a("strong"),FTr=o("funnel"),TTr=o(" \u2014 "),OU=a("a"),MTr=o("TFFunnelModel"),ETr=o(" or "),VU=a("a"),CTr=o("TFFunnelBaseModel"),wTr=o(" (Funnel Transformer model)"),ATr=l(),X8=a("li"),VTe=a("strong"),LTr=o("gpt2"),yTr=o(" \u2014 "),XU=a("a"),xTr=o("TFGPT2Model"),$Tr=o(" (OpenAI GPT-2 model)"),kTr=l(),z8=a("li"),XTe=a("strong"),STr=o("gptj"),RTr=o(" \u2014 "),zU=a("a"),PTr=o("TFGPTJModel"),BTr=o(" (GPT-J model)"),NTr=l(),Q8=a("li"),zTe=a("strong"),ITr=o("hubert"),qTr=o(" \u2014 "),QU=a("a"),jTr=o("TFHubertModel"),DTr=o(" (Hubert model)"),GTr=l(),W8=a("li"),QTe=a("strong"),OTr=o("layoutlm"),VTr=o(" \u2014 "),WU=a("a"),XTr=o("TFLayoutLMModel"),zTr=o(" (LayoutLM model)"),QTr=l(),H8=a("li"),WTe=a("strong"),WTr=o("led"),HTr=o(" \u2014 "),HU=a("a"),UTr=o("TFLEDModel"),JTr=o(" (LED model)"),YTr=l(),U8=a("li"),HTe=a("strong"),KTr=o("longformer"),ZTr=o(" \u2014 "),UU=a("a"),e7r=o("TFLongformerModel"),o7r=o(" (Longformer model)"),r7r=l(),J8=a("li"),UTe=a("strong"),t7r=o("lxmert"),a7r=o(" \u2014 "),JU=a("a"),n7r=o("TFLxmertModel"),s7r=o(" (LXMERT model)"),l7r=l(),Y8=a("li"),JTe=a("strong"),i7r=o("marian"),d7r=o(" \u2014 "),YU=a("a"),c7r=o("TFMarianModel"),f7r=o(" (Marian model)"),m7r=l(),K8=a("li"),YTe=a("strong"),g7r=o("mbart"),h7r=o(" \u2014 "),KU=a("a"),p7r=o("TFMBartModel"),_7r=o(" (mBART model)"),u7r=l(),Z8=a("li"),KTe=a("strong"),b7r=o("mobilebert"),v7r=o(" \u2014 "),ZU=a("a"),F7r=o("TFMobileBertModel"),T7r=o(" (MobileBERT model)"),M7r=l(),eM=a("li"),ZTe=a("strong"),E7r=o("mpnet"),C7r=o(" \u2014 "),eJ=a("a"),w7r=o("TFMPNetModel"),A7r=o(" (MPNet model)"),L7r=l(),oM=a("li"),e7e=a("strong"),y7r=o("mt5"),x7r=o(" \u2014 "),oJ=a("a"),$7r=o("TFMT5Model"),k7r=o(" (MT5 model)"),S7r=l(),rM=a("li"),o7e=a("strong"),R7r=o("openai-gpt"),P7r=o(" \u2014 "),rJ=a("a"),B7r=o("TFOpenAIGPTModel"),N7r=o(" (OpenAI GPT model)"),I7r=l(),tM=a("li"),r7e=a("strong"),q7r=o("opt"),j7r=o(" \u2014 "),tJ=a("a"),D7r=o("TFOPTModel"),G7r=o(" (OPT model)"),O7r=l(),aM=a("li"),t7e=a("strong"),V7r=o("pegasus"),X7r=o(" \u2014 "),aJ=a("a"),z7r=o("TFPegasusModel"),Q7r=o(" (Pegasus model)"),W7r=l(),nM=a("li"),a7e=a("strong"),H7r=o("regnet"),U7r=o(" \u2014 "),nJ=a("a"),J7r=o("TFRegNetModel"),Y7r=o(" (RegNet model)"),K7r=l(),sM=a("li"),n7e=a("strong"),Z7r=o("rembert"),e8r=o(" \u2014 "),sJ=a("a"),o8r=o("TFRemBertModel"),r8r=o(" (RemBERT model)"),t8r=l(),lM=a("li"),s7e=a("strong"),a8r=o("resnet"),n8r=o(" \u2014 "),lJ=a("a"),s8r=o("TFResNetModel"),l8r=o(" (ResNet model)"),i8r=l(),iM=a("li"),l7e=a("strong"),d8r=o("roberta"),c8r=o(" \u2014 "),iJ=a("a"),f8r=o("TFRobertaModel"),m8r=o(" (RoBERTa model)"),g8r=l(),dM=a("li"),i7e=a("strong"),h8r=o("roformer"),p8r=o(" \u2014 "),dJ=a("a"),_8r=o("TFRoFormerModel"),u8r=o(" (RoFormer model)"),b8r=l(),cM=a("li"),d7e=a("strong"),v8r=o("speech_to_text"),F8r=o(" \u2014 "),cJ=a("a"),T8r=o("TFSpeech2TextModel"),M8r=o(" (Speech2Text model)"),E8r=l(),fM=a("li"),c7e=a("strong"),C8r=o("swin"),w8r=o(" \u2014 "),fJ=a("a"),A8r=o("TFSwinModel"),L8r=o(" (Swin Transformer model)"),y8r=l(),mM=a("li"),f7e=a("strong"),x8r=o("t5"),$8r=o(" \u2014 "),mJ=a("a"),k8r=o("TFT5Model"),S8r=o(" (T5 model)"),R8r=l(),gM=a("li"),m7e=a("strong"),P8r=o("tapas"),B8r=o(" \u2014 "),gJ=a("a"),N8r=o("TFTapasModel"),I8r=o(" (TAPAS model)"),q8r=l(),hM=a("li"),g7e=a("strong"),j8r=o("transfo-xl"),D8r=o(" \u2014 "),hJ=a("a"),G8r=o("TFTransfoXLModel"),O8r=o(" (Transformer-XL model)"),V8r=l(),pM=a("li"),h7e=a("strong"),X8r=o("vit"),z8r=o(" \u2014 "),pJ=a("a"),Q8r=o("TFViTModel"),W8r=o(" (ViT model)"),H8r=l(),_M=a("li"),p7e=a("strong"),U8r=o("vit_mae"),J8r=o(" \u2014 "),_J=a("a"),Y8r=o("TFViTMAEModel"),K8r=o(" (ViTMAE model)"),Z8r=l(),uM=a("li"),_7e=a("strong"),eMr=o("wav2vec2"),oMr=o(" \u2014 "),uJ=a("a"),rMr=o("TFWav2Vec2Model"),tMr=o(" (Wav2Vec2 model)"),aMr=l(),bM=a("li"),u7e=a("strong"),nMr=o("xlm"),sMr=o(" \u2014 "),bJ=a("a"),lMr=o("TFXLMModel"),iMr=o(" (XLM model)"),dMr=l(),vM=a("li"),b7e=a("strong"),cMr=o("xlm-roberta"),fMr=o(" \u2014 "),vJ=a("a"),mMr=o("TFXLMRobertaModel"),gMr=o(" (XLM-RoBERTa model)"),hMr=l(),FM=a("li"),v7e=a("strong"),pMr=o("xlnet"),_Mr=o(" \u2014 "),FJ=a("a"),uMr=o("TFXLNetModel"),bMr=o(" (XLNet model)"),vMr=l(),F(TM.$$.fragment),Bze=l(),cc=a("h2"),MM=a("a"),F7e=a("span"),F(rx.$$.fragment),FMr=l(),T7e=a("span"),TMr=o("TFAutoModelForPreTraining"),Nze=l(),rr=a("div"),F(tx.$$.fragment),MMr=l(),fc=a("p"),EMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TJ=a("a"),CMr=o("from_pretrained()"),wMr=o(" class method or the "),MJ=a("a"),AMr=o("from_config()"),LMr=o(` class
method.`),yMr=l(),ax=a("p"),xMr=o("This class cannot be instantiated directly using "),M7e=a("code"),$Mr=o("__init__()"),kMr=o(" (throws an error)."),SMr=l(),Pt=a("div"),F(nx.$$.fragment),RMr=l(),E7e=a("p"),PMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),BMr=l(),mc=a("p"),NMr=o(`Note:
Loading a model from its configuration file does `),C7e=a("strong"),IMr=o("not"),qMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),jMr=o("from_pretrained()"),DMr=o(" to load the model weights."),GMr=l(),F(EM.$$.fragment),OMr=l(),$r=a("div"),F(sx.$$.fragment),VMr=l(),w7e=a("p"),XMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zMr=l(),ln=a("p"),QMr=o("The model class to instantiate is selected based on the "),A7e=a("code"),WMr=o("model_type"),HMr=o(` property of the config object (either
passed as an argument or loaded from `),L7e=a("code"),UMr=o("pretrained_model_name_or_path"),JMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=a("code"),YMr=o("pretrained_model_name_or_path"),KMr=o(":"),ZMr=l(),se=a("ul"),CM=a("li"),x7e=a("strong"),e4r=o("albert"),o4r=o(" \u2014 "),CJ=a("a"),r4r=o("TFAlbertForPreTraining"),t4r=o(" (ALBERT model)"),a4r=l(),wM=a("li"),$7e=a("strong"),n4r=o("bart"),s4r=o(" \u2014 "),wJ=a("a"),l4r=o("TFBartForConditionalGeneration"),i4r=o(" (BART model)"),d4r=l(),AM=a("li"),k7e=a("strong"),c4r=o("bert"),f4r=o(" \u2014 "),AJ=a("a"),m4r=o("TFBertForPreTraining"),g4r=o(" (BERT model)"),h4r=l(),LM=a("li"),S7e=a("strong"),p4r=o("camembert"),_4r=o(" \u2014 "),LJ=a("a"),u4r=o("TFCamembertForMaskedLM"),b4r=o(" (CamemBERT model)"),v4r=l(),yM=a("li"),R7e=a("strong"),F4r=o("ctrl"),T4r=o(" \u2014 "),yJ=a("a"),M4r=o("TFCTRLLMHeadModel"),E4r=o(" (CTRL model)"),C4r=l(),xM=a("li"),P7e=a("strong"),w4r=o("distilbert"),A4r=o(" \u2014 "),xJ=a("a"),L4r=o("TFDistilBertForMaskedLM"),y4r=o(" (DistilBERT model)"),x4r=l(),$M=a("li"),B7e=a("strong"),$4r=o("electra"),k4r=o(" \u2014 "),$J=a("a"),S4r=o("TFElectraForPreTraining"),R4r=o(" (ELECTRA model)"),P4r=l(),kM=a("li"),N7e=a("strong"),B4r=o("flaubert"),N4r=o(" \u2014 "),kJ=a("a"),I4r=o("TFFlaubertWithLMHeadModel"),q4r=o(" (FlauBERT model)"),j4r=l(),SM=a("li"),I7e=a("strong"),D4r=o("funnel"),G4r=o(" \u2014 "),SJ=a("a"),O4r=o("TFFunnelForPreTraining"),V4r=o(" (Funnel Transformer model)"),X4r=l(),RM=a("li"),q7e=a("strong"),z4r=o("gpt2"),Q4r=o(" \u2014 "),RJ=a("a"),W4r=o("TFGPT2LMHeadModel"),H4r=o(" (OpenAI GPT-2 model)"),U4r=l(),PM=a("li"),j7e=a("strong"),J4r=o("layoutlm"),Y4r=o(" \u2014 "),PJ=a("a"),K4r=o("TFLayoutLMForMaskedLM"),Z4r=o(" (LayoutLM model)"),eEr=l(),BM=a("li"),D7e=a("strong"),oEr=o("lxmert"),rEr=o(" \u2014 "),BJ=a("a"),tEr=o("TFLxmertForPreTraining"),aEr=o(" (LXMERT model)"),nEr=l(),NM=a("li"),G7e=a("strong"),sEr=o("mobilebert"),lEr=o(" \u2014 "),NJ=a("a"),iEr=o("TFMobileBertForPreTraining"),dEr=o(" (MobileBERT model)"),cEr=l(),IM=a("li"),O7e=a("strong"),fEr=o("mpnet"),mEr=o(" \u2014 "),IJ=a("a"),gEr=o("TFMPNetForMaskedLM"),hEr=o(" (MPNet model)"),pEr=l(),qM=a("li"),V7e=a("strong"),_Er=o("openai-gpt"),uEr=o(" \u2014 "),qJ=a("a"),bEr=o("TFOpenAIGPTLMHeadModel"),vEr=o(" (OpenAI GPT model)"),FEr=l(),jM=a("li"),X7e=a("strong"),TEr=o("roberta"),MEr=o(" \u2014 "),jJ=a("a"),EEr=o("TFRobertaForMaskedLM"),CEr=o(" (RoBERTa model)"),wEr=l(),DM=a("li"),z7e=a("strong"),AEr=o("t5"),LEr=o(" \u2014 "),DJ=a("a"),yEr=o("TFT5ForConditionalGeneration"),xEr=o(" (T5 model)"),$Er=l(),GM=a("li"),Q7e=a("strong"),kEr=o("tapas"),SEr=o(" \u2014 "),GJ=a("a"),REr=o("TFTapasForMaskedLM"),PEr=o(" (TAPAS model)"),BEr=l(),OM=a("li"),W7e=a("strong"),NEr=o("transfo-xl"),IEr=o(" \u2014 "),OJ=a("a"),qEr=o("TFTransfoXLLMHeadModel"),jEr=o(" (Transformer-XL model)"),DEr=l(),VM=a("li"),H7e=a("strong"),GEr=o("vit_mae"),OEr=o(" \u2014 "),VJ=a("a"),VEr=o("TFViTMAEForPreTraining"),XEr=o(" (ViTMAE model)"),zEr=l(),XM=a("li"),U7e=a("strong"),QEr=o("xlm"),WEr=o(" \u2014 "),XJ=a("a"),HEr=o("TFXLMWithLMHeadModel"),UEr=o(" (XLM model)"),JEr=l(),zM=a("li"),J7e=a("strong"),YEr=o("xlm-roberta"),KEr=o(" \u2014 "),zJ=a("a"),ZEr=o("TFXLMRobertaForMaskedLM"),eCr=o(" (XLM-RoBERTa model)"),oCr=l(),QM=a("li"),Y7e=a("strong"),rCr=o("xlnet"),tCr=o(" \u2014 "),QJ=a("a"),aCr=o("TFXLNetLMHeadModel"),nCr=o(" (XLNet model)"),sCr=l(),F(WM.$$.fragment),Ize=l(),gc=a("h2"),HM=a("a"),K7e=a("span"),F(lx.$$.fragment),lCr=l(),Z7e=a("span"),iCr=o("TFAutoModelForCausalLM"),qze=l(),tr=a("div"),F(ix.$$.fragment),dCr=l(),hc=a("p"),cCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WJ=a("a"),fCr=o("from_pretrained()"),mCr=o(" class method or the "),HJ=a("a"),gCr=o("from_config()"),hCr=o(` class
method.`),pCr=l(),dx=a("p"),_Cr=o("This class cannot be instantiated directly using "),e8e=a("code"),uCr=o("__init__()"),bCr=o(" (throws an error)."),vCr=l(),Bt=a("div"),F(cx.$$.fragment),FCr=l(),o8e=a("p"),TCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MCr=l(),pc=a("p"),ECr=o(`Note:
Loading a model from its configuration file does `),r8e=a("strong"),CCr=o("not"),wCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),ACr=o("from_pretrained()"),LCr=o(" to load the model weights."),yCr=l(),F(UM.$$.fragment),xCr=l(),kr=a("div"),F(fx.$$.fragment),$Cr=l(),t8e=a("p"),kCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),SCr=l(),dn=a("p"),RCr=o("The model class to instantiate is selected based on the "),a8e=a("code"),PCr=o("model_type"),BCr=o(` property of the config object (either
passed as an argument or loaded from `),n8e=a("code"),NCr=o("pretrained_model_name_or_path"),ICr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s8e=a("code"),qCr=o("pretrained_model_name_or_path"),jCr=o(":"),DCr=l(),Me=a("ul"),JM=a("li"),l8e=a("strong"),GCr=o("bert"),OCr=o(" \u2014 "),JJ=a("a"),VCr=o("TFBertLMHeadModel"),XCr=o(" (BERT model)"),zCr=l(),YM=a("li"),i8e=a("strong"),QCr=o("camembert"),WCr=o(" \u2014 "),YJ=a("a"),HCr=o("TFCamembertForCausalLM"),UCr=o(" (CamemBERT model)"),JCr=l(),KM=a("li"),d8e=a("strong"),YCr=o("ctrl"),KCr=o(" \u2014 "),KJ=a("a"),ZCr=o("TFCTRLLMHeadModel"),e5r=o(" (CTRL model)"),o5r=l(),ZM=a("li"),c8e=a("strong"),r5r=o("gpt2"),t5r=o(" \u2014 "),ZJ=a("a"),a5r=o("TFGPT2LMHeadModel"),n5r=o(" (OpenAI GPT-2 model)"),s5r=l(),e4=a("li"),f8e=a("strong"),l5r=o("gptj"),i5r=o(" \u2014 "),eY=a("a"),d5r=o("TFGPTJForCausalLM"),c5r=o(" (GPT-J model)"),f5r=l(),o4=a("li"),m8e=a("strong"),m5r=o("openai-gpt"),g5r=o(" \u2014 "),oY=a("a"),h5r=o("TFOpenAIGPTLMHeadModel"),p5r=o(" (OpenAI GPT model)"),_5r=l(),r4=a("li"),g8e=a("strong"),u5r=o("opt"),b5r=o(" \u2014 "),rY=a("a"),v5r=o("TFOPTForCausalLM"),F5r=o(" (OPT model)"),T5r=l(),t4=a("li"),h8e=a("strong"),M5r=o("rembert"),E5r=o(" \u2014 "),tY=a("a"),C5r=o("TFRemBertForCausalLM"),w5r=o(" (RemBERT model)"),A5r=l(),a4=a("li"),p8e=a("strong"),L5r=o("roberta"),y5r=o(" \u2014 "),aY=a("a"),x5r=o("TFRobertaForCausalLM"),$5r=o(" (RoBERTa model)"),k5r=l(),n4=a("li"),_8e=a("strong"),S5r=o("roformer"),R5r=o(" \u2014 "),nY=a("a"),P5r=o("TFRoFormerForCausalLM"),B5r=o(" (RoFormer model)"),N5r=l(),s4=a("li"),u8e=a("strong"),I5r=o("transfo-xl"),q5r=o(" \u2014 "),sY=a("a"),j5r=o("TFTransfoXLLMHeadModel"),D5r=o(" (Transformer-XL model)"),G5r=l(),l4=a("li"),b8e=a("strong"),O5r=o("xlm"),V5r=o(" \u2014 "),lY=a("a"),X5r=o("TFXLMWithLMHeadModel"),z5r=o(" (XLM model)"),Q5r=l(),i4=a("li"),v8e=a("strong"),W5r=o("xlnet"),H5r=o(" \u2014 "),iY=a("a"),U5r=o("TFXLNetLMHeadModel"),J5r=o(" (XLNet model)"),Y5r=l(),F(d4.$$.fragment),jze=l(),_c=a("h2"),c4=a("a"),F8e=a("span"),F(mx.$$.fragment),K5r=l(),T8e=a("span"),Z5r=o("TFAutoModelForImageClassification"),Dze=l(),ar=a("div"),F(gx.$$.fragment),e3r=l(),uc=a("p"),o3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dY=a("a"),r3r=o("from_pretrained()"),t3r=o(" class method or the "),cY=a("a"),a3r=o("from_config()"),n3r=o(` class
method.`),s3r=l(),hx=a("p"),l3r=o("This class cannot be instantiated directly using "),M8e=a("code"),i3r=o("__init__()"),d3r=o(" (throws an error)."),c3r=l(),Nt=a("div"),F(px.$$.fragment),f3r=l(),E8e=a("p"),m3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),g3r=l(),bc=a("p"),h3r=o(`Note:
Loading a model from its configuration file does `),C8e=a("strong"),p3r=o("not"),_3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),u3r=o("from_pretrained()"),b3r=o(" to load the model weights."),v3r=l(),F(f4.$$.fragment),F3r=l(),Sr=a("div"),F(_x.$$.fragment),T3r=l(),w8e=a("p"),M3r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),E3r=l(),cn=a("p"),C3r=o("The model class to instantiate is selected based on the "),A8e=a("code"),w3r=o("model_type"),A3r=o(` property of the config object (either
passed as an argument or loaded from `),L8e=a("code"),L3r=o("pretrained_model_name_or_path"),y3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y8e=a("code"),x3r=o("pretrained_model_name_or_path"),$3r=o(":"),k3r=l(),Qe=a("ul"),m4=a("li"),x8e=a("strong"),S3r=o("convnext"),R3r=o(" \u2014 "),mY=a("a"),P3r=o("TFConvNextForImageClassification"),B3r=o(" (ConvNeXT model)"),N3r=l(),g4=a("li"),$8e=a("strong"),I3r=o("data2vec-vision"),q3r=o(" \u2014 "),gY=a("a"),j3r=o("TFData2VecVisionForImageClassification"),D3r=o(" (Data2VecVision model)"),G3r=l(),Ks=a("li"),k8e=a("strong"),O3r=o("deit"),V3r=o(" \u2014 "),hY=a("a"),X3r=o("TFDeiTForImageClassification"),z3r=o(" or "),pY=a("a"),Q3r=o("TFDeiTForImageClassificationWithTeacher"),W3r=o(" (DeiT model)"),H3r=l(),h4=a("li"),S8e=a("strong"),U3r=o("regnet"),J3r=o(" \u2014 "),_Y=a("a"),Y3r=o("TFRegNetForImageClassification"),K3r=o(" (RegNet model)"),Z3r=l(),p4=a("li"),R8e=a("strong"),e0r=o("resnet"),o0r=o(" \u2014 "),uY=a("a"),r0r=o("TFResNetForImageClassification"),t0r=o(" (ResNet model)"),a0r=l(),_4=a("li"),P8e=a("strong"),n0r=o("swin"),s0r=o(" \u2014 "),bY=a("a"),l0r=o("TFSwinForImageClassification"),i0r=o(" (Swin Transformer model)"),d0r=l(),u4=a("li"),B8e=a("strong"),c0r=o("vit"),f0r=o(" \u2014 "),vY=a("a"),m0r=o("TFViTForImageClassification"),g0r=o(" (ViT model)"),h0r=l(),F(b4.$$.fragment),Gze=l(),vc=a("h2"),v4=a("a"),N8e=a("span"),F(ux.$$.fragment),p0r=l(),I8e=a("span"),_0r=o("TFAutoModelForMaskedLM"),Oze=l(),nr=a("div"),F(bx.$$.fragment),u0r=l(),Fc=a("p"),b0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FY=a("a"),v0r=o("from_pretrained()"),F0r=o(" class method or the "),TY=a("a"),T0r=o("from_config()"),M0r=o(` class
method.`),E0r=l(),vx=a("p"),C0r=o("This class cannot be instantiated directly using "),q8e=a("code"),w0r=o("__init__()"),A0r=o(" (throws an error)."),L0r=l(),It=a("div"),F(Fx.$$.fragment),y0r=l(),j8e=a("p"),x0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$0r=l(),Tc=a("p"),k0r=o(`Note:
Loading a model from its configuration file does `),D8e=a("strong"),S0r=o("not"),R0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=a("a"),P0r=o("from_pretrained()"),B0r=o(" to load the model weights."),N0r=l(),F(F4.$$.fragment),I0r=l(),Rr=a("div"),F(Tx.$$.fragment),q0r=l(),G8e=a("p"),j0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),D0r=l(),fn=a("p"),G0r=o("The model class to instantiate is selected based on the "),O8e=a("code"),O0r=o("model_type"),V0r=o(` property of the config object (either
passed as an argument or loaded from `),V8e=a("code"),X0r=o("pretrained_model_name_or_path"),z0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X8e=a("code"),Q0r=o("pretrained_model_name_or_path"),W0r=o(":"),H0r=l(),ie=a("ul"),T4=a("li"),z8e=a("strong"),U0r=o("albert"),J0r=o(" \u2014 "),EY=a("a"),Y0r=o("TFAlbertForMaskedLM"),K0r=o(" (ALBERT model)"),Z0r=l(),M4=a("li"),Q8e=a("strong"),ewr=o("bert"),owr=o(" \u2014 "),CY=a("a"),rwr=o("TFBertForMaskedLM"),twr=o(" (BERT model)"),awr=l(),E4=a("li"),W8e=a("strong"),nwr=o("camembert"),swr=o(" \u2014 "),wY=a("a"),lwr=o("TFCamembertForMaskedLM"),iwr=o(" (CamemBERT model)"),dwr=l(),C4=a("li"),H8e=a("strong"),cwr=o("convbert"),fwr=o(" \u2014 "),AY=a("a"),mwr=o("TFConvBertForMaskedLM"),gwr=o(" (ConvBERT model)"),hwr=l(),w4=a("li"),U8e=a("strong"),pwr=o("deberta"),_wr=o(" \u2014 "),LY=a("a"),uwr=o("TFDebertaForMaskedLM"),bwr=o(" (DeBERTa model)"),vwr=l(),A4=a("li"),J8e=a("strong"),Fwr=o("deberta-v2"),Twr=o(" \u2014 "),yY=a("a"),Mwr=o("TFDebertaV2ForMaskedLM"),Ewr=o(" (DeBERTa-v2 model)"),Cwr=l(),L4=a("li"),Y8e=a("strong"),wwr=o("distilbert"),Awr=o(" \u2014 "),xY=a("a"),Lwr=o("TFDistilBertForMaskedLM"),ywr=o(" (DistilBERT model)"),xwr=l(),y4=a("li"),K8e=a("strong"),$wr=o("electra"),kwr=o(" \u2014 "),$Y=a("a"),Swr=o("TFElectraForMaskedLM"),Rwr=o(" (ELECTRA model)"),Pwr=l(),x4=a("li"),Z8e=a("strong"),Bwr=o("flaubert"),Nwr=o(" \u2014 "),kY=a("a"),Iwr=o("TFFlaubertWithLMHeadModel"),qwr=o(" (FlauBERT model)"),jwr=l(),$4=a("li"),eMe=a("strong"),Dwr=o("funnel"),Gwr=o(" \u2014 "),SY=a("a"),Owr=o("TFFunnelForMaskedLM"),Vwr=o(" (Funnel Transformer model)"),Xwr=l(),k4=a("li"),oMe=a("strong"),zwr=o("layoutlm"),Qwr=o(" \u2014 "),RY=a("a"),Wwr=o("TFLayoutLMForMaskedLM"),Hwr=o(" (LayoutLM model)"),Uwr=l(),S4=a("li"),rMe=a("strong"),Jwr=o("longformer"),Ywr=o(" \u2014 "),PY=a("a"),Kwr=o("TFLongformerForMaskedLM"),Zwr=o(" (Longformer model)"),eAr=l(),R4=a("li"),tMe=a("strong"),oAr=o("mobilebert"),rAr=o(" \u2014 "),BY=a("a"),tAr=o("TFMobileBertForMaskedLM"),aAr=o(" (MobileBERT model)"),nAr=l(),P4=a("li"),aMe=a("strong"),sAr=o("mpnet"),lAr=o(" \u2014 "),NY=a("a"),iAr=o("TFMPNetForMaskedLM"),dAr=o(" (MPNet model)"),cAr=l(),B4=a("li"),nMe=a("strong"),fAr=o("rembert"),mAr=o(" \u2014 "),IY=a("a"),gAr=o("TFRemBertForMaskedLM"),hAr=o(" (RemBERT model)"),pAr=l(),N4=a("li"),sMe=a("strong"),_Ar=o("roberta"),uAr=o(" \u2014 "),qY=a("a"),bAr=o("TFRobertaForMaskedLM"),vAr=o(" (RoBERTa model)"),FAr=l(),I4=a("li"),lMe=a("strong"),TAr=o("roformer"),MAr=o(" \u2014 "),jY=a("a"),EAr=o("TFRoFormerForMaskedLM"),CAr=o(" (RoFormer model)"),wAr=l(),q4=a("li"),iMe=a("strong"),AAr=o("tapas"),LAr=o(" \u2014 "),DY=a("a"),yAr=o("TFTapasForMaskedLM"),xAr=o(" (TAPAS model)"),$Ar=l(),j4=a("li"),dMe=a("strong"),kAr=o("xlm"),SAr=o(" \u2014 "),GY=a("a"),RAr=o("TFXLMWithLMHeadModel"),PAr=o(" (XLM model)"),BAr=l(),D4=a("li"),cMe=a("strong"),NAr=o("xlm-roberta"),IAr=o(" \u2014 "),OY=a("a"),qAr=o("TFXLMRobertaForMaskedLM"),jAr=o(" (XLM-RoBERTa model)"),DAr=l(),F(G4.$$.fragment),Vze=l(),Mc=a("h2"),O4=a("a"),fMe=a("span"),F(Mx.$$.fragment),GAr=l(),mMe=a("span"),OAr=o("TFAutoModelForSeq2SeqLM"),Xze=l(),sr=a("div"),F(Ex.$$.fragment),VAr=l(),Ec=a("p"),XAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VY=a("a"),zAr=o("from_pretrained()"),QAr=o(" class method or the "),XY=a("a"),WAr=o("from_config()"),HAr=o(` class
method.`),UAr=l(),Cx=a("p"),JAr=o("This class cannot be instantiated directly using "),gMe=a("code"),YAr=o("__init__()"),KAr=o(" (throws an error)."),ZAr=l(),qt=a("div"),F(wx.$$.fragment),eLr=l(),hMe=a("p"),oLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rLr=l(),Cc=a("p"),tLr=o(`Note:
Loading a model from its configuration file does `),pMe=a("strong"),aLr=o("not"),nLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=a("a"),sLr=o("from_pretrained()"),lLr=o(" to load the model weights."),iLr=l(),F(V4.$$.fragment),dLr=l(),Pr=a("div"),F(Ax.$$.fragment),cLr=l(),_Me=a("p"),fLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mLr=l(),mn=a("p"),gLr=o("The model class to instantiate is selected based on the "),uMe=a("code"),hLr=o("model_type"),pLr=o(` property of the config object (either
passed as an argument or loaded from `),bMe=a("code"),_Lr=o("pretrained_model_name_or_path"),uLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=a("code"),bLr=o("pretrained_model_name_or_path"),vLr=o(":"),FLr=l(),ye=a("ul"),X4=a("li"),FMe=a("strong"),TLr=o("bart"),MLr=o(" \u2014 "),QY=a("a"),ELr=o("TFBartForConditionalGeneration"),CLr=o(" (BART model)"),wLr=l(),z4=a("li"),TMe=a("strong"),ALr=o("blenderbot"),LLr=o(" \u2014 "),WY=a("a"),yLr=o("TFBlenderbotForConditionalGeneration"),xLr=o(" (Blenderbot model)"),$Lr=l(),Q4=a("li"),MMe=a("strong"),kLr=o("blenderbot-small"),SLr=o(" \u2014 "),HY=a("a"),RLr=o("TFBlenderbotSmallForConditionalGeneration"),PLr=o(" (BlenderbotSmall model)"),BLr=l(),W4=a("li"),EMe=a("strong"),NLr=o("encoder-decoder"),ILr=o(" \u2014 "),UY=a("a"),qLr=o("TFEncoderDecoderModel"),jLr=o(" (Encoder decoder model)"),DLr=l(),H4=a("li"),CMe=a("strong"),GLr=o("led"),OLr=o(" \u2014 "),JY=a("a"),VLr=o("TFLEDForConditionalGeneration"),XLr=o(" (LED model)"),zLr=l(),U4=a("li"),wMe=a("strong"),QLr=o("marian"),WLr=o(" \u2014 "),YY=a("a"),HLr=o("TFMarianMTModel"),ULr=o(" (Marian model)"),JLr=l(),J4=a("li"),AMe=a("strong"),YLr=o("mbart"),KLr=o(" \u2014 "),KY=a("a"),ZLr=o("TFMBartForConditionalGeneration"),eyr=o(" (mBART model)"),oyr=l(),Y4=a("li"),LMe=a("strong"),ryr=o("mt5"),tyr=o(" \u2014 "),ZY=a("a"),ayr=o("TFMT5ForConditionalGeneration"),nyr=o(" (MT5 model)"),syr=l(),K4=a("li"),yMe=a("strong"),lyr=o("pegasus"),iyr=o(" \u2014 "),eK=a("a"),dyr=o("TFPegasusForConditionalGeneration"),cyr=o(" (Pegasus model)"),fyr=l(),Z4=a("li"),xMe=a("strong"),myr=o("t5"),gyr=o(" \u2014 "),oK=a("a"),hyr=o("TFT5ForConditionalGeneration"),pyr=o(" (T5 model)"),_yr=l(),F(eE.$$.fragment),zze=l(),wc=a("h2"),oE=a("a"),$Me=a("span"),F(Lx.$$.fragment),uyr=l(),kMe=a("span"),byr=o("TFAutoModelForSequenceClassification"),Qze=l(),lr=a("div"),F(yx.$$.fragment),vyr=l(),Ac=a("p"),Fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rK=a("a"),Tyr=o("from_pretrained()"),Myr=o(" class method or the "),tK=a("a"),Eyr=o("from_config()"),Cyr=o(` class
method.`),wyr=l(),xx=a("p"),Ayr=o("This class cannot be instantiated directly using "),SMe=a("code"),Lyr=o("__init__()"),yyr=o(" (throws an error)."),xyr=l(),jt=a("div"),F($x.$$.fragment),$yr=l(),RMe=a("p"),kyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Syr=l(),Lc=a("p"),Ryr=o(`Note:
Loading a model from its configuration file does `),PMe=a("strong"),Pyr=o("not"),Byr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),Nyr=o("from_pretrained()"),Iyr=o(" to load the model weights."),qyr=l(),F(rE.$$.fragment),jyr=l(),Br=a("div"),F(kx.$$.fragment),Dyr=l(),BMe=a("p"),Gyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Oyr=l(),gn=a("p"),Vyr=o("The model class to instantiate is selected based on the "),NMe=a("code"),Xyr=o("model_type"),zyr=o(` property of the config object (either
passed as an argument or loaded from `),IMe=a("code"),Qyr=o("pretrained_model_name_or_path"),Wyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=a("code"),Hyr=o("pretrained_model_name_or_path"),Uyr=o(":"),Jyr=l(),te=a("ul"),tE=a("li"),jMe=a("strong"),Yyr=o("albert"),Kyr=o(" \u2014 "),nK=a("a"),Zyr=o("TFAlbertForSequenceClassification"),e9r=o(" (ALBERT model)"),o9r=l(),aE=a("li"),DMe=a("strong"),r9r=o("bert"),t9r=o(" \u2014 "),sK=a("a"),a9r=o("TFBertForSequenceClassification"),n9r=o(" (BERT model)"),s9r=l(),nE=a("li"),GMe=a("strong"),l9r=o("camembert"),i9r=o(" \u2014 "),lK=a("a"),d9r=o("TFCamembertForSequenceClassification"),c9r=o(" (CamemBERT model)"),f9r=l(),sE=a("li"),OMe=a("strong"),m9r=o("convbert"),g9r=o(" \u2014 "),iK=a("a"),h9r=o("TFConvBertForSequenceClassification"),p9r=o(" (ConvBERT model)"),_9r=l(),lE=a("li"),VMe=a("strong"),u9r=o("ctrl"),b9r=o(" \u2014 "),dK=a("a"),v9r=o("TFCTRLForSequenceClassification"),F9r=o(" (CTRL model)"),T9r=l(),iE=a("li"),XMe=a("strong"),M9r=o("deberta"),E9r=o(" \u2014 "),cK=a("a"),C9r=o("TFDebertaForSequenceClassification"),w9r=o(" (DeBERTa model)"),A9r=l(),dE=a("li"),zMe=a("strong"),L9r=o("deberta-v2"),y9r=o(" \u2014 "),fK=a("a"),x9r=o("TFDebertaV2ForSequenceClassification"),$9r=o(" (DeBERTa-v2 model)"),k9r=l(),cE=a("li"),QMe=a("strong"),S9r=o("distilbert"),R9r=o(" \u2014 "),mK=a("a"),P9r=o("TFDistilBertForSequenceClassification"),B9r=o(" (DistilBERT model)"),N9r=l(),fE=a("li"),WMe=a("strong"),I9r=o("electra"),q9r=o(" \u2014 "),gK=a("a"),j9r=o("TFElectraForSequenceClassification"),D9r=o(" (ELECTRA model)"),G9r=l(),mE=a("li"),HMe=a("strong"),O9r=o("flaubert"),V9r=o(" \u2014 "),hK=a("a"),X9r=o("TFFlaubertForSequenceClassification"),z9r=o(" (FlauBERT model)"),Q9r=l(),gE=a("li"),UMe=a("strong"),W9r=o("funnel"),H9r=o(" \u2014 "),pK=a("a"),U9r=o("TFFunnelForSequenceClassification"),J9r=o(" (Funnel Transformer model)"),Y9r=l(),hE=a("li"),JMe=a("strong"),K9r=o("gpt2"),Z9r=o(" \u2014 "),_K=a("a"),exr=o("TFGPT2ForSequenceClassification"),oxr=o(" (OpenAI GPT-2 model)"),rxr=l(),pE=a("li"),YMe=a("strong"),txr=o("gptj"),axr=o(" \u2014 "),uK=a("a"),nxr=o("TFGPTJForSequenceClassification"),sxr=o(" (GPT-J model)"),lxr=l(),_E=a("li"),KMe=a("strong"),ixr=o("layoutlm"),dxr=o(" \u2014 "),bK=a("a"),cxr=o("TFLayoutLMForSequenceClassification"),fxr=o(" (LayoutLM model)"),mxr=l(),uE=a("li"),ZMe=a("strong"),gxr=o("longformer"),hxr=o(" \u2014 "),vK=a("a"),pxr=o("TFLongformerForSequenceClassification"),_xr=o(" (Longformer model)"),uxr=l(),bE=a("li"),e4e=a("strong"),bxr=o("mobilebert"),vxr=o(" \u2014 "),FK=a("a"),Fxr=o("TFMobileBertForSequenceClassification"),Txr=o(" (MobileBERT model)"),Mxr=l(),vE=a("li"),o4e=a("strong"),Exr=o("mpnet"),Cxr=o(" \u2014 "),TK=a("a"),wxr=o("TFMPNetForSequenceClassification"),Axr=o(" (MPNet model)"),Lxr=l(),FE=a("li"),r4e=a("strong"),yxr=o("openai-gpt"),xxr=o(" \u2014 "),MK=a("a"),$xr=o("TFOpenAIGPTForSequenceClassification"),kxr=o(" (OpenAI GPT model)"),Sxr=l(),TE=a("li"),t4e=a("strong"),Rxr=o("rembert"),Pxr=o(" \u2014 "),EK=a("a"),Bxr=o("TFRemBertForSequenceClassification"),Nxr=o(" (RemBERT model)"),Ixr=l(),ME=a("li"),a4e=a("strong"),qxr=o("roberta"),jxr=o(" \u2014 "),CK=a("a"),Dxr=o("TFRobertaForSequenceClassification"),Gxr=o(" (RoBERTa model)"),Oxr=l(),EE=a("li"),n4e=a("strong"),Vxr=o("roformer"),Xxr=o(" \u2014 "),wK=a("a"),zxr=o("TFRoFormerForSequenceClassification"),Qxr=o(" (RoFormer model)"),Wxr=l(),CE=a("li"),s4e=a("strong"),Hxr=o("tapas"),Uxr=o(" \u2014 "),AK=a("a"),Jxr=o("TFTapasForSequenceClassification"),Yxr=o(" (TAPAS model)"),Kxr=l(),wE=a("li"),l4e=a("strong"),Zxr=o("transfo-xl"),e$r=o(" \u2014 "),LK=a("a"),o$r=o("TFTransfoXLForSequenceClassification"),r$r=o(" (Transformer-XL model)"),t$r=l(),AE=a("li"),i4e=a("strong"),a$r=o("xlm"),n$r=o(" \u2014 "),yK=a("a"),s$r=o("TFXLMForSequenceClassification"),l$r=o(" (XLM model)"),i$r=l(),LE=a("li"),d4e=a("strong"),d$r=o("xlm-roberta"),c$r=o(" \u2014 "),xK=a("a"),f$r=o("TFXLMRobertaForSequenceClassification"),m$r=o(" (XLM-RoBERTa model)"),g$r=l(),yE=a("li"),c4e=a("strong"),h$r=o("xlnet"),p$r=o(" \u2014 "),$K=a("a"),_$r=o("TFXLNetForSequenceClassification"),u$r=o(" (XLNet model)"),b$r=l(),F(xE.$$.fragment),Wze=l(),yc=a("h2"),$E=a("a"),f4e=a("span"),F(Sx.$$.fragment),v$r=l(),m4e=a("span"),F$r=o("TFAutoModelForMultipleChoice"),Hze=l(),ir=a("div"),F(Rx.$$.fragment),T$r=l(),xc=a("p"),M$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kK=a("a"),E$r=o("from_pretrained()"),C$r=o(" class method or the "),SK=a("a"),w$r=o("from_config()"),A$r=o(` class
method.`),L$r=l(),Px=a("p"),y$r=o("This class cannot be instantiated directly using "),g4e=a("code"),x$r=o("__init__()"),$$r=o(" (throws an error)."),k$r=l(),Dt=a("div"),F(Bx.$$.fragment),S$r=l(),h4e=a("p"),R$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),P$r=l(),$c=a("p"),B$r=o(`Note:
Loading a model from its configuration file does `),p4e=a("strong"),N$r=o("not"),I$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=a("a"),q$r=o("from_pretrained()"),j$r=o(" to load the model weights."),D$r=l(),F(kE.$$.fragment),G$r=l(),Nr=a("div"),F(Nx.$$.fragment),O$r=l(),_4e=a("p"),V$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),X$r=l(),hn=a("p"),z$r=o("The model class to instantiate is selected based on the "),u4e=a("code"),Q$r=o("model_type"),W$r=o(` property of the config object (either
passed as an argument or loaded from `),b4e=a("code"),H$r=o("pretrained_model_name_or_path"),U$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=a("code"),J$r=o("pretrained_model_name_or_path"),Y$r=o(":"),K$r=l(),ue=a("ul"),SE=a("li"),F4e=a("strong"),Z$r=o("albert"),ekr=o(" \u2014 "),PK=a("a"),okr=o("TFAlbertForMultipleChoice"),rkr=o(" (ALBERT model)"),tkr=l(),RE=a("li"),T4e=a("strong"),akr=o("bert"),nkr=o(" \u2014 "),BK=a("a"),skr=o("TFBertForMultipleChoice"),lkr=o(" (BERT model)"),ikr=l(),PE=a("li"),M4e=a("strong"),dkr=o("camembert"),ckr=o(" \u2014 "),NK=a("a"),fkr=o("TFCamembertForMultipleChoice"),mkr=o(" (CamemBERT model)"),gkr=l(),BE=a("li"),E4e=a("strong"),hkr=o("convbert"),pkr=o(" \u2014 "),IK=a("a"),_kr=o("TFConvBertForMultipleChoice"),ukr=o(" (ConvBERT model)"),bkr=l(),NE=a("li"),C4e=a("strong"),vkr=o("distilbert"),Fkr=o(" \u2014 "),qK=a("a"),Tkr=o("TFDistilBertForMultipleChoice"),Mkr=o(" (DistilBERT model)"),Ekr=l(),IE=a("li"),w4e=a("strong"),Ckr=o("electra"),wkr=o(" \u2014 "),jK=a("a"),Akr=o("TFElectraForMultipleChoice"),Lkr=o(" (ELECTRA model)"),ykr=l(),qE=a("li"),A4e=a("strong"),xkr=o("flaubert"),$kr=o(" \u2014 "),DK=a("a"),kkr=o("TFFlaubertForMultipleChoice"),Skr=o(" (FlauBERT model)"),Rkr=l(),jE=a("li"),L4e=a("strong"),Pkr=o("funnel"),Bkr=o(" \u2014 "),GK=a("a"),Nkr=o("TFFunnelForMultipleChoice"),Ikr=o(" (Funnel Transformer model)"),qkr=l(),DE=a("li"),y4e=a("strong"),jkr=o("longformer"),Dkr=o(" \u2014 "),OK=a("a"),Gkr=o("TFLongformerForMultipleChoice"),Okr=o(" (Longformer model)"),Vkr=l(),GE=a("li"),x4e=a("strong"),Xkr=o("mobilebert"),zkr=o(" \u2014 "),VK=a("a"),Qkr=o("TFMobileBertForMultipleChoice"),Wkr=o(" (MobileBERT model)"),Hkr=l(),OE=a("li"),$4e=a("strong"),Ukr=o("mpnet"),Jkr=o(" \u2014 "),XK=a("a"),Ykr=o("TFMPNetForMultipleChoice"),Kkr=o(" (MPNet model)"),Zkr=l(),VE=a("li"),k4e=a("strong"),eSr=o("rembert"),oSr=o(" \u2014 "),zK=a("a"),rSr=o("TFRemBertForMultipleChoice"),tSr=o(" (RemBERT model)"),aSr=l(),XE=a("li"),S4e=a("strong"),nSr=o("roberta"),sSr=o(" \u2014 "),QK=a("a"),lSr=o("TFRobertaForMultipleChoice"),iSr=o(" (RoBERTa model)"),dSr=l(),zE=a("li"),R4e=a("strong"),cSr=o("roformer"),fSr=o(" \u2014 "),WK=a("a"),mSr=o("TFRoFormerForMultipleChoice"),gSr=o(" (RoFormer model)"),hSr=l(),QE=a("li"),P4e=a("strong"),pSr=o("xlm"),_Sr=o(" \u2014 "),HK=a("a"),uSr=o("TFXLMForMultipleChoice"),bSr=o(" (XLM model)"),vSr=l(),WE=a("li"),B4e=a("strong"),FSr=o("xlm-roberta"),TSr=o(" \u2014 "),UK=a("a"),MSr=o("TFXLMRobertaForMultipleChoice"),ESr=o(" (XLM-RoBERTa model)"),CSr=l(),HE=a("li"),N4e=a("strong"),wSr=o("xlnet"),ASr=o(" \u2014 "),JK=a("a"),LSr=o("TFXLNetForMultipleChoice"),ySr=o(" (XLNet model)"),xSr=l(),F(UE.$$.fragment),Uze=l(),kc=a("h2"),JE=a("a"),I4e=a("span"),F(Ix.$$.fragment),$Sr=l(),q4e=a("span"),kSr=o("TFAutoModelForNextSentencePrediction"),Jze=l(),dr=a("div"),F(qx.$$.fragment),SSr=l(),Sc=a("p"),RSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YK=a("a"),PSr=o("from_pretrained()"),BSr=o(" class method or the "),KK=a("a"),NSr=o("from_config()"),ISr=o(` class
method.`),qSr=l(),jx=a("p"),jSr=o("This class cannot be instantiated directly using "),j4e=a("code"),DSr=o("__init__()"),GSr=o(" (throws an error)."),OSr=l(),Gt=a("div"),F(Dx.$$.fragment),VSr=l(),D4e=a("p"),XSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zSr=l(),Rc=a("p"),QSr=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),WSr=o("not"),HSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=a("a"),USr=o("from_pretrained()"),JSr=o(" to load the model weights."),YSr=l(),F(YE.$$.fragment),KSr=l(),Ir=a("div"),F(Gx.$$.fragment),ZSr=l(),O4e=a("p"),eRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oRr=l(),pn=a("p"),rRr=o("The model class to instantiate is selected based on the "),V4e=a("code"),tRr=o("model_type"),aRr=o(` property of the config object (either
passed as an argument or loaded from `),X4e=a("code"),nRr=o("pretrained_model_name_or_path"),sRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(":"),dRr=l(),Ox=a("ul"),KE=a("li"),Q4e=a("strong"),cRr=o("bert"),fRr=o(" \u2014 "),eZ=a("a"),mRr=o("TFBertForNextSentencePrediction"),gRr=o(" (BERT model)"),hRr=l(),ZE=a("li"),W4e=a("strong"),pRr=o("mobilebert"),_Rr=o(" \u2014 "),oZ=a("a"),uRr=o("TFMobileBertForNextSentencePrediction"),bRr=o(" (MobileBERT model)"),vRr=l(),F(eC.$$.fragment),Yze=l(),Pc=a("h2"),oC=a("a"),H4e=a("span"),F(Vx.$$.fragment),FRr=l(),U4e=a("span"),TRr=o("TFAutoModelForTableQuestionAnswering"),Kze=l(),cr=a("div"),F(Xx.$$.fragment),MRr=l(),Bc=a("p"),ERr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),rZ=a("a"),CRr=o("from_pretrained()"),wRr=o(" class method or the "),tZ=a("a"),ARr=o("from_config()"),LRr=o(` class
method.`),yRr=l(),zx=a("p"),xRr=o("This class cannot be instantiated directly using "),J4e=a("code"),$Rr=o("__init__()"),kRr=o(" (throws an error)."),SRr=l(),Ot=a("div"),F(Qx.$$.fragment),RRr=l(),Y4e=a("p"),PRr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BRr=l(),Nc=a("p"),NRr=o(`Note:
Loading a model from its configuration file does `),K4e=a("strong"),IRr=o("not"),qRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),jRr=o("from_pretrained()"),DRr=o(" to load the model weights."),GRr=l(),F(rC.$$.fragment),ORr=l(),qr=a("div"),F(Wx.$$.fragment),VRr=l(),Z4e=a("p"),XRr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zRr=l(),_n=a("p"),QRr=o("The model class to instantiate is selected based on the "),eEe=a("code"),WRr=o("model_type"),HRr=o(` property of the config object (either
passed as an argument or loaded from `),oEe=a("code"),URr=o("pretrained_model_name_or_path"),JRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=a("code"),YRr=o("pretrained_model_name_or_path"),KRr=o(":"),ZRr=l(),tEe=a("ul"),tC=a("li"),aEe=a("strong"),ePr=o("tapas"),oPr=o(" \u2014 "),nZ=a("a"),rPr=o("TFTapasForQuestionAnswering"),tPr=o(" (TAPAS model)"),aPr=l(),F(aC.$$.fragment),Zze=l(),Ic=a("h2"),nC=a("a"),nEe=a("span"),F(Hx.$$.fragment),nPr=l(),sEe=a("span"),sPr=o("TFAutoModelForTokenClassification"),eQe=l(),fr=a("div"),F(Ux.$$.fragment),lPr=l(),qc=a("p"),iPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sZ=a("a"),dPr=o("from_pretrained()"),cPr=o(" class method or the "),lZ=a("a"),fPr=o("from_config()"),mPr=o(` class
method.`),gPr=l(),Jx=a("p"),hPr=o("This class cannot be instantiated directly using "),lEe=a("code"),pPr=o("__init__()"),_Pr=o(" (throws an error)."),uPr=l(),Vt=a("div"),F(Yx.$$.fragment),bPr=l(),iEe=a("p"),vPr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FPr=l(),jc=a("p"),TPr=o(`Note:
Loading a model from its configuration file does `),dEe=a("strong"),MPr=o("not"),EPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=a("a"),CPr=o("from_pretrained()"),wPr=o(" to load the model weights."),APr=l(),F(sC.$$.fragment),LPr=l(),jr=a("div"),F(Kx.$$.fragment),yPr=l(),cEe=a("p"),xPr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$Pr=l(),un=a("p"),kPr=o("The model class to instantiate is selected based on the "),fEe=a("code"),SPr=o("model_type"),RPr=o(` property of the config object (either
passed as an argument or loaded from `),mEe=a("code"),PPr=o("pretrained_model_name_or_path"),BPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=a("code"),NPr=o("pretrained_model_name_or_path"),IPr=o(":"),qPr=l(),de=a("ul"),lC=a("li"),hEe=a("strong"),jPr=o("albert"),DPr=o(" \u2014 "),dZ=a("a"),GPr=o("TFAlbertForTokenClassification"),OPr=o(" (ALBERT model)"),VPr=l(),iC=a("li"),pEe=a("strong"),XPr=o("bert"),zPr=o(" \u2014 "),cZ=a("a"),QPr=o("TFBertForTokenClassification"),WPr=o(" (BERT model)"),HPr=l(),dC=a("li"),_Ee=a("strong"),UPr=o("camembert"),JPr=o(" \u2014 "),fZ=a("a"),YPr=o("TFCamembertForTokenClassification"),KPr=o(" (CamemBERT model)"),ZPr=l(),cC=a("li"),uEe=a("strong"),eBr=o("convbert"),oBr=o(" \u2014 "),mZ=a("a"),rBr=o("TFConvBertForTokenClassification"),tBr=o(" (ConvBERT model)"),aBr=l(),fC=a("li"),bEe=a("strong"),nBr=o("deberta"),sBr=o(" \u2014 "),gZ=a("a"),lBr=o("TFDebertaForTokenClassification"),iBr=o(" (DeBERTa model)"),dBr=l(),mC=a("li"),vEe=a("strong"),cBr=o("deberta-v2"),fBr=o(" \u2014 "),hZ=a("a"),mBr=o("TFDebertaV2ForTokenClassification"),gBr=o(" (DeBERTa-v2 model)"),hBr=l(),gC=a("li"),FEe=a("strong"),pBr=o("distilbert"),_Br=o(" \u2014 "),pZ=a("a"),uBr=o("TFDistilBertForTokenClassification"),bBr=o(" (DistilBERT model)"),vBr=l(),hC=a("li"),TEe=a("strong"),FBr=o("electra"),TBr=o(" \u2014 "),_Z=a("a"),MBr=o("TFElectraForTokenClassification"),EBr=o(" (ELECTRA model)"),CBr=l(),pC=a("li"),MEe=a("strong"),wBr=o("flaubert"),ABr=o(" \u2014 "),uZ=a("a"),LBr=o("TFFlaubertForTokenClassification"),yBr=o(" (FlauBERT model)"),xBr=l(),_C=a("li"),EEe=a("strong"),$Br=o("funnel"),kBr=o(" \u2014 "),bZ=a("a"),SBr=o("TFFunnelForTokenClassification"),RBr=o(" (Funnel Transformer model)"),PBr=l(),uC=a("li"),CEe=a("strong"),BBr=o("layoutlm"),NBr=o(" \u2014 "),vZ=a("a"),IBr=o("TFLayoutLMForTokenClassification"),qBr=o(" (LayoutLM model)"),jBr=l(),bC=a("li"),wEe=a("strong"),DBr=o("longformer"),GBr=o(" \u2014 "),FZ=a("a"),OBr=o("TFLongformerForTokenClassification"),VBr=o(" (Longformer model)"),XBr=l(),vC=a("li"),AEe=a("strong"),zBr=o("mobilebert"),QBr=o(" \u2014 "),TZ=a("a"),WBr=o("TFMobileBertForTokenClassification"),HBr=o(" (MobileBERT model)"),UBr=l(),FC=a("li"),LEe=a("strong"),JBr=o("mpnet"),YBr=o(" \u2014 "),MZ=a("a"),KBr=o("TFMPNetForTokenClassification"),ZBr=o(" (MPNet model)"),eNr=l(),TC=a("li"),yEe=a("strong"),oNr=o("rembert"),rNr=o(" \u2014 "),EZ=a("a"),tNr=o("TFRemBertForTokenClassification"),aNr=o(" (RemBERT model)"),nNr=l(),MC=a("li"),xEe=a("strong"),sNr=o("roberta"),lNr=o(" \u2014 "),CZ=a("a"),iNr=o("TFRobertaForTokenClassification"),dNr=o(" (RoBERTa model)"),cNr=l(),EC=a("li"),$Ee=a("strong"),fNr=o("roformer"),mNr=o(" \u2014 "),wZ=a("a"),gNr=o("TFRoFormerForTokenClassification"),hNr=o(" (RoFormer model)"),pNr=l(),CC=a("li"),kEe=a("strong"),_Nr=o("xlm"),uNr=o(" \u2014 "),AZ=a("a"),bNr=o("TFXLMForTokenClassification"),vNr=o(" (XLM model)"),FNr=l(),wC=a("li"),SEe=a("strong"),TNr=o("xlm-roberta"),MNr=o(" \u2014 "),LZ=a("a"),ENr=o("TFXLMRobertaForTokenClassification"),CNr=o(" (XLM-RoBERTa model)"),wNr=l(),AC=a("li"),REe=a("strong"),ANr=o("xlnet"),LNr=o(" \u2014 "),yZ=a("a"),yNr=o("TFXLNetForTokenClassification"),xNr=o(" (XLNet model)"),$Nr=l(),F(LC.$$.fragment),oQe=l(),Dc=a("h2"),yC=a("a"),PEe=a("span"),F(Zx.$$.fragment),kNr=l(),BEe=a("span"),SNr=o("TFAutoModelForQuestionAnswering"),rQe=l(),mr=a("div"),F(e$.$$.fragment),RNr=l(),Gc=a("p"),PNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xZ=a("a"),BNr=o("from_pretrained()"),NNr=o(" class method or the "),$Z=a("a"),INr=o("from_config()"),qNr=o(` class
method.`),jNr=l(),o$=a("p"),DNr=o("This class cannot be instantiated directly using "),NEe=a("code"),GNr=o("__init__()"),ONr=o(" (throws an error)."),VNr=l(),Xt=a("div"),F(r$.$$.fragment),XNr=l(),IEe=a("p"),zNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QNr=l(),Oc=a("p"),WNr=o(`Note:
Loading a model from its configuration file does `),qEe=a("strong"),HNr=o("not"),UNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=a("a"),JNr=o("from_pretrained()"),YNr=o(" to load the model weights."),KNr=l(),F(xC.$$.fragment),ZNr=l(),Dr=a("div"),F(t$.$$.fragment),eIr=l(),jEe=a("p"),oIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rIr=l(),bn=a("p"),tIr=o("The model class to instantiate is selected based on the "),DEe=a("code"),aIr=o("model_type"),nIr=o(` property of the config object (either
passed as an argument or loaded from `),GEe=a("code"),sIr=o("pretrained_model_name_or_path"),lIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=a("code"),iIr=o("pretrained_model_name_or_path"),dIr=o(":"),cIr=l(),ce=a("ul"),$C=a("li"),VEe=a("strong"),fIr=o("albert"),mIr=o(" \u2014 "),SZ=a("a"),gIr=o("TFAlbertForQuestionAnswering"),hIr=o(" (ALBERT model)"),pIr=l(),kC=a("li"),XEe=a("strong"),_Ir=o("bert"),uIr=o(" \u2014 "),RZ=a("a"),bIr=o("TFBertForQuestionAnswering"),vIr=o(" (BERT model)"),FIr=l(),SC=a("li"),zEe=a("strong"),TIr=o("camembert"),MIr=o(" \u2014 "),PZ=a("a"),EIr=o("TFCamembertForQuestionAnswering"),CIr=o(" (CamemBERT model)"),wIr=l(),RC=a("li"),QEe=a("strong"),AIr=o("convbert"),LIr=o(" \u2014 "),BZ=a("a"),yIr=o("TFConvBertForQuestionAnswering"),xIr=o(" (ConvBERT model)"),$Ir=l(),PC=a("li"),WEe=a("strong"),kIr=o("deberta"),SIr=o(" \u2014 "),NZ=a("a"),RIr=o("TFDebertaForQuestionAnswering"),PIr=o(" (DeBERTa model)"),BIr=l(),BC=a("li"),HEe=a("strong"),NIr=o("deberta-v2"),IIr=o(" \u2014 "),IZ=a("a"),qIr=o("TFDebertaV2ForQuestionAnswering"),jIr=o(" (DeBERTa-v2 model)"),DIr=l(),NC=a("li"),UEe=a("strong"),GIr=o("distilbert"),OIr=o(" \u2014 "),qZ=a("a"),VIr=o("TFDistilBertForQuestionAnswering"),XIr=o(" (DistilBERT model)"),zIr=l(),IC=a("li"),JEe=a("strong"),QIr=o("electra"),WIr=o(" \u2014 "),jZ=a("a"),HIr=o("TFElectraForQuestionAnswering"),UIr=o(" (ELECTRA model)"),JIr=l(),qC=a("li"),YEe=a("strong"),YIr=o("flaubert"),KIr=o(" \u2014 "),DZ=a("a"),ZIr=o("TFFlaubertForQuestionAnsweringSimple"),eqr=o(" (FlauBERT model)"),oqr=l(),jC=a("li"),KEe=a("strong"),rqr=o("funnel"),tqr=o(" \u2014 "),GZ=a("a"),aqr=o("TFFunnelForQuestionAnswering"),nqr=o(" (Funnel Transformer model)"),sqr=l(),DC=a("li"),ZEe=a("strong"),lqr=o("gptj"),iqr=o(" \u2014 "),OZ=a("a"),dqr=o("TFGPTJForQuestionAnswering"),cqr=o(" (GPT-J model)"),fqr=l(),GC=a("li"),eCe=a("strong"),mqr=o("longformer"),gqr=o(" \u2014 "),VZ=a("a"),hqr=o("TFLongformerForQuestionAnswering"),pqr=o(" (Longformer model)"),_qr=l(),OC=a("li"),oCe=a("strong"),uqr=o("mobilebert"),bqr=o(" \u2014 "),XZ=a("a"),vqr=o("TFMobileBertForQuestionAnswering"),Fqr=o(" (MobileBERT model)"),Tqr=l(),VC=a("li"),rCe=a("strong"),Mqr=o("mpnet"),Eqr=o(" \u2014 "),zZ=a("a"),Cqr=o("TFMPNetForQuestionAnswering"),wqr=o(" (MPNet model)"),Aqr=l(),XC=a("li"),tCe=a("strong"),Lqr=o("rembert"),yqr=o(" \u2014 "),QZ=a("a"),xqr=o("TFRemBertForQuestionAnswering"),$qr=o(" (RemBERT model)"),kqr=l(),zC=a("li"),aCe=a("strong"),Sqr=o("roberta"),Rqr=o(" \u2014 "),WZ=a("a"),Pqr=o("TFRobertaForQuestionAnswering"),Bqr=o(" (RoBERTa model)"),Nqr=l(),QC=a("li"),nCe=a("strong"),Iqr=o("roformer"),qqr=o(" \u2014 "),HZ=a("a"),jqr=o("TFRoFormerForQuestionAnswering"),Dqr=o(" (RoFormer model)"),Gqr=l(),WC=a("li"),sCe=a("strong"),Oqr=o("xlm"),Vqr=o(" \u2014 "),UZ=a("a"),Xqr=o("TFXLMForQuestionAnsweringSimple"),zqr=o(" (XLM model)"),Qqr=l(),HC=a("li"),lCe=a("strong"),Wqr=o("xlm-roberta"),Hqr=o(" \u2014 "),JZ=a("a"),Uqr=o("TFXLMRobertaForQuestionAnswering"),Jqr=o(" (XLM-RoBERTa model)"),Yqr=l(),UC=a("li"),iCe=a("strong"),Kqr=o("xlnet"),Zqr=o(" \u2014 "),YZ=a("a"),ejr=o("TFXLNetForQuestionAnsweringSimple"),ojr=o(" (XLNet model)"),rjr=l(),F(JC.$$.fragment),tQe=l(),Vc=a("h2"),YC=a("a"),dCe=a("span"),F(a$.$$.fragment),tjr=l(),cCe=a("span"),ajr=o("TFAutoModelForVision2Seq"),aQe=l(),gr=a("div"),F(n$.$$.fragment),njr=l(),Xc=a("p"),sjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KZ=a("a"),ljr=o("from_pretrained()"),ijr=o(" class method or the "),ZZ=a("a"),djr=o("from_config()"),cjr=o(` class
method.`),fjr=l(),s$=a("p"),mjr=o("This class cannot be instantiated directly using "),fCe=a("code"),gjr=o("__init__()"),hjr=o(" (throws an error)."),pjr=l(),zt=a("div"),F(l$.$$.fragment),_jr=l(),mCe=a("p"),ujr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bjr=l(),zc=a("p"),vjr=o(`Note:
Loading a model from its configuration file does `),gCe=a("strong"),Fjr=o("not"),Tjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=a("a"),Mjr=o("from_pretrained()"),Ejr=o(" to load the model weights."),Cjr=l(),F(KC.$$.fragment),wjr=l(),Gr=a("div"),F(i$.$$.fragment),Ajr=l(),hCe=a("p"),Ljr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yjr=l(),vn=a("p"),xjr=o("The model class to instantiate is selected based on the "),pCe=a("code"),$jr=o("model_type"),kjr=o(` property of the config object (either
passed as an argument or loaded from `),_Ce=a("code"),Sjr=o("pretrained_model_name_or_path"),Rjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uCe=a("code"),Pjr=o("pretrained_model_name_or_path"),Bjr=o(":"),Njr=l(),bCe=a("ul"),ZC=a("li"),vCe=a("strong"),Ijr=o("vision-encoder-decoder"),qjr=o(" \u2014 "),oee=a("a"),jjr=o("TFVisionEncoderDecoderModel"),Djr=o(" (Vision Encoder decoder model)"),Gjr=l(),F(e5.$$.fragment),nQe=l(),Qc=a("h2"),o5=a("a"),FCe=a("span"),F(d$.$$.fragment),Ojr=l(),TCe=a("span"),Vjr=o("TFAutoModelForSpeechSeq2Seq"),sQe=l(),hr=a("div"),F(c$.$$.fragment),Xjr=l(),Wc=a("p"),zjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ree=a("a"),Qjr=o("from_pretrained()"),Wjr=o(" class method or the "),tee=a("a"),Hjr=o("from_config()"),Ujr=o(` class
method.`),Jjr=l(),f$=a("p"),Yjr=o("This class cannot be instantiated directly using "),MCe=a("code"),Kjr=o("__init__()"),Zjr=o(" (throws an error)."),eDr=l(),Qt=a("div"),F(m$.$$.fragment),oDr=l(),ECe=a("p"),rDr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tDr=l(),Hc=a("p"),aDr=o(`Note:
Loading a model from its configuration file does `),CCe=a("strong"),nDr=o("not"),sDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=a("a"),lDr=o("from_pretrained()"),iDr=o(" to load the model weights."),dDr=l(),F(r5.$$.fragment),cDr=l(),Or=a("div"),F(g$.$$.fragment),fDr=l(),wCe=a("p"),mDr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),gDr=l(),Fn=a("p"),hDr=o("The model class to instantiate is selected based on the "),ACe=a("code"),pDr=o("model_type"),_Dr=o(` property of the config object (either
passed as an argument or loaded from `),LCe=a("code"),uDr=o("pretrained_model_name_or_path"),bDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=a("code"),vDr=o("pretrained_model_name_or_path"),FDr=o(":"),TDr=l(),xCe=a("ul"),t5=a("li"),$Ce=a("strong"),MDr=o("speech_to_text"),EDr=o(" \u2014 "),nee=a("a"),CDr=o("TFSpeech2TextForConditionalGeneration"),wDr=o(" (Speech2Text model)"),ADr=l(),F(a5.$$.fragment),lQe=l(),Uc=a("h2"),n5=a("a"),kCe=a("span"),F(h$.$$.fragment),LDr=l(),SCe=a("span"),yDr=o("FlaxAutoModel"),iQe=l(),pr=a("div"),F(p$.$$.fragment),xDr=l(),Jc=a("p"),$Dr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),see=a("a"),kDr=o("from_pretrained()"),SDr=o(" class method or the "),lee=a("a"),RDr=o("from_config()"),PDr=o(` class
method.`),BDr=l(),_$=a("p"),NDr=o("This class cannot be instantiated directly using "),RCe=a("code"),IDr=o("__init__()"),qDr=o(" (throws an error)."),jDr=l(),Wt=a("div"),F(u$.$$.fragment),DDr=l(),PCe=a("p"),GDr=o("Instantiates one of the base model classes of the library from a configuration."),ODr=l(),Yc=a("p"),VDr=o(`Note:
Loading a model from its configuration file does `),BCe=a("strong"),XDr=o("not"),zDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=a("a"),QDr=o("from_pretrained()"),WDr=o(" to load the model weights."),HDr=l(),F(s5.$$.fragment),UDr=l(),Vr=a("div"),F(b$.$$.fragment),JDr=l(),NCe=a("p"),YDr=o("Instantiate one of the base model classes of the library from a pretrained model."),KDr=l(),Tn=a("p"),ZDr=o("The model class to instantiate is selected based on the "),ICe=a("code"),eGr=o("model_type"),oGr=o(` property of the config object (either
passed as an argument or loaded from `),qCe=a("code"),rGr=o("pretrained_model_name_or_path"),tGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jCe=a("code"),aGr=o("pretrained_model_name_or_path"),nGr=o(":"),sGr=l(),oe=a("ul"),l5=a("li"),DCe=a("strong"),lGr=o("albert"),iGr=o(" \u2014 "),dee=a("a"),dGr=o("FlaxAlbertModel"),cGr=o(" (ALBERT model)"),fGr=l(),i5=a("li"),GCe=a("strong"),mGr=o("bart"),gGr=o(" \u2014 "),cee=a("a"),hGr=o("FlaxBartModel"),pGr=o(" (BART model)"),_Gr=l(),d5=a("li"),OCe=a("strong"),uGr=o("beit"),bGr=o(" \u2014 "),fee=a("a"),vGr=o("FlaxBeitModel"),FGr=o(" (BEiT model)"),TGr=l(),c5=a("li"),VCe=a("strong"),MGr=o("bert"),EGr=o(" \u2014 "),mee=a("a"),CGr=o("FlaxBertModel"),wGr=o(" (BERT model)"),AGr=l(),f5=a("li"),XCe=a("strong"),LGr=o("big_bird"),yGr=o(" \u2014 "),gee=a("a"),xGr=o("FlaxBigBirdModel"),$Gr=o(" (BigBird model)"),kGr=l(),m5=a("li"),zCe=a("strong"),SGr=o("blenderbot"),RGr=o(" \u2014 "),hee=a("a"),PGr=o("FlaxBlenderbotModel"),BGr=o(" (Blenderbot model)"),NGr=l(),g5=a("li"),QCe=a("strong"),IGr=o("blenderbot-small"),qGr=o(" \u2014 "),pee=a("a"),jGr=o("FlaxBlenderbotSmallModel"),DGr=o(" (BlenderbotSmall model)"),GGr=l(),h5=a("li"),WCe=a("strong"),OGr=o("clip"),VGr=o(" \u2014 "),_ee=a("a"),XGr=o("FlaxCLIPModel"),zGr=o(" (CLIP model)"),QGr=l(),p5=a("li"),HCe=a("strong"),WGr=o("distilbert"),HGr=o(" \u2014 "),uee=a("a"),UGr=o("FlaxDistilBertModel"),JGr=o(" (DistilBERT model)"),YGr=l(),_5=a("li"),UCe=a("strong"),KGr=o("electra"),ZGr=o(" \u2014 "),bee=a("a"),eOr=o("FlaxElectraModel"),oOr=o(" (ELECTRA model)"),rOr=l(),u5=a("li"),JCe=a("strong"),tOr=o("gpt2"),aOr=o(" \u2014 "),vee=a("a"),nOr=o("FlaxGPT2Model"),sOr=o(" (OpenAI GPT-2 model)"),lOr=l(),b5=a("li"),YCe=a("strong"),iOr=o("gpt_neo"),dOr=o(" \u2014 "),Fee=a("a"),cOr=o("FlaxGPTNeoModel"),fOr=o(" (GPT Neo model)"),mOr=l(),v5=a("li"),KCe=a("strong"),gOr=o("gptj"),hOr=o(" \u2014 "),Tee=a("a"),pOr=o("FlaxGPTJModel"),_Or=o(" (GPT-J model)"),uOr=l(),F5=a("li"),ZCe=a("strong"),bOr=o("longt5"),vOr=o(" \u2014 "),Mee=a("a"),FOr=o("FlaxLongT5Model"),TOr=o(" (LongT5 model)"),MOr=l(),T5=a("li"),e5e=a("strong"),EOr=o("marian"),COr=o(" \u2014 "),Eee=a("a"),wOr=o("FlaxMarianModel"),AOr=o(" (Marian model)"),LOr=l(),M5=a("li"),o5e=a("strong"),yOr=o("mbart"),xOr=o(" \u2014 "),Cee=a("a"),$Or=o("FlaxMBartModel"),kOr=o(" (mBART model)"),SOr=l(),E5=a("li"),r5e=a("strong"),ROr=o("mt5"),POr=o(" \u2014 "),wee=a("a"),BOr=o("FlaxMT5Model"),NOr=o(" (MT5 model)"),IOr=l(),C5=a("li"),t5e=a("strong"),qOr=o("opt"),jOr=o(" \u2014 "),Aee=a("a"),DOr=o("FlaxOPTModel"),GOr=o(" (OPT model)"),OOr=l(),w5=a("li"),a5e=a("strong"),VOr=o("pegasus"),XOr=o(" \u2014 "),Lee=a("a"),zOr=o("FlaxPegasusModel"),QOr=o(" (Pegasus model)"),WOr=l(),A5=a("li"),n5e=a("strong"),HOr=o("roberta"),UOr=o(" \u2014 "),yee=a("a"),JOr=o("FlaxRobertaModel"),YOr=o(" (RoBERTa model)"),KOr=l(),L5=a("li"),s5e=a("strong"),ZOr=o("roformer"),eVr=o(" \u2014 "),xee=a("a"),oVr=o("FlaxRoFormerModel"),rVr=o(" (RoFormer model)"),tVr=l(),y5=a("li"),l5e=a("strong"),aVr=o("t5"),nVr=o(" \u2014 "),$ee=a("a"),sVr=o("FlaxT5Model"),lVr=o(" (T5 model)"),iVr=l(),x5=a("li"),i5e=a("strong"),dVr=o("vision-text-dual-encoder"),cVr=o(" \u2014 "),kee=a("a"),fVr=o("FlaxVisionTextDualEncoderModel"),mVr=o(" (VisionTextDualEncoder model)"),gVr=l(),$5=a("li"),d5e=a("strong"),hVr=o("vit"),pVr=o(" \u2014 "),See=a("a"),_Vr=o("FlaxViTModel"),uVr=o(" (ViT model)"),bVr=l(),k5=a("li"),c5e=a("strong"),vVr=o("wav2vec2"),FVr=o(" \u2014 "),Ree=a("a"),TVr=o("FlaxWav2Vec2Model"),MVr=o(" (Wav2Vec2 model)"),EVr=l(),S5=a("li"),f5e=a("strong"),CVr=o("xglm"),wVr=o(" \u2014 "),Pee=a("a"),AVr=o("FlaxXGLMModel"),LVr=o(" (XGLM model)"),yVr=l(),R5=a("li"),m5e=a("strong"),xVr=o("xlm-roberta"),$Vr=o(" \u2014 "),Bee=a("a"),kVr=o("FlaxXLMRobertaModel"),SVr=o(" (XLM-RoBERTa model)"),RVr=l(),F(P5.$$.fragment),dQe=l(),Kc=a("h2"),B5=a("a"),g5e=a("span"),F(v$.$$.fragment),PVr=l(),h5e=a("span"),BVr=o("FlaxAutoModelForCausalLM"),cQe=l(),_r=a("div"),F(F$.$$.fragment),NVr=l(),Zc=a("p"),IVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nee=a("a"),qVr=o("from_pretrained()"),jVr=o(" class method or the "),Iee=a("a"),DVr=o("from_config()"),GVr=o(` class
method.`),OVr=l(),T$=a("p"),VVr=o("This class cannot be instantiated directly using "),p5e=a("code"),XVr=o("__init__()"),zVr=o(" (throws an error)."),QVr=l(),Ht=a("div"),F(M$.$$.fragment),WVr=l(),_5e=a("p"),HVr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UVr=l(),ef=a("p"),JVr=o(`Note:
Loading a model from its configuration file does `),u5e=a("strong"),YVr=o("not"),KVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=a("a"),ZVr=o("from_pretrained()"),eXr=o(" to load the model weights."),oXr=l(),F(N5.$$.fragment),rXr=l(),Xr=a("div"),F(E$.$$.fragment),tXr=l(),b5e=a("p"),aXr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nXr=l(),Mn=a("p"),sXr=o("The model class to instantiate is selected based on the "),v5e=a("code"),lXr=o("model_type"),iXr=o(` property of the config object (either
passed as an argument or loaded from `),F5e=a("code"),dXr=o("pretrained_model_name_or_path"),cXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T5e=a("code"),fXr=o("pretrained_model_name_or_path"),mXr=o(":"),gXr=l(),xe=a("ul"),I5=a("li"),M5e=a("strong"),hXr=o("bart"),pXr=o(" \u2014 "),jee=a("a"),_Xr=o("FlaxBartForCausalLM"),uXr=o(" (BART model)"),bXr=l(),q5=a("li"),E5e=a("strong"),vXr=o("bert"),FXr=o(" \u2014 "),Dee=a("a"),TXr=o("FlaxBertForCausalLM"),MXr=o(" (BERT model)"),EXr=l(),j5=a("li"),C5e=a("strong"),CXr=o("big_bird"),wXr=o(" \u2014 "),Gee=a("a"),AXr=o("FlaxBigBirdForCausalLM"),LXr=o(" (BigBird model)"),yXr=l(),D5=a("li"),w5e=a("strong"),xXr=o("electra"),$Xr=o(" \u2014 "),Oee=a("a"),kXr=o("FlaxElectraForCausalLM"),SXr=o(" (ELECTRA model)"),RXr=l(),G5=a("li"),A5e=a("strong"),PXr=o("gpt2"),BXr=o(" \u2014 "),Vee=a("a"),NXr=o("FlaxGPT2LMHeadModel"),IXr=o(" (OpenAI GPT-2 model)"),qXr=l(),O5=a("li"),L5e=a("strong"),jXr=o("gpt_neo"),DXr=o(" \u2014 "),Xee=a("a"),GXr=o("FlaxGPTNeoForCausalLM"),OXr=o(" (GPT Neo model)"),VXr=l(),V5=a("li"),y5e=a("strong"),XXr=o("gptj"),zXr=o(" \u2014 "),zee=a("a"),QXr=o("FlaxGPTJForCausalLM"),WXr=o(" (GPT-J model)"),HXr=l(),X5=a("li"),x5e=a("strong"),UXr=o("opt"),JXr=o(" \u2014 "),Qee=a("a"),YXr=o("FlaxOPTForCausalLM"),KXr=o(" (OPT model)"),ZXr=l(),z5=a("li"),$5e=a("strong"),ezr=o("roberta"),ozr=o(" \u2014 "),Wee=a("a"),rzr=o("FlaxRobertaForCausalLM"),tzr=o(" (RoBERTa model)"),azr=l(),Q5=a("li"),k5e=a("strong"),nzr=o("xglm"),szr=o(" \u2014 "),Hee=a("a"),lzr=o("FlaxXGLMForCausalLM"),izr=o(" (XGLM model)"),dzr=l(),F(W5.$$.fragment),fQe=l(),of=a("h2"),H5=a("a"),S5e=a("span"),F(C$.$$.fragment),czr=l(),R5e=a("span"),fzr=o("FlaxAutoModelForPreTraining"),mQe=l(),ur=a("div"),F(w$.$$.fragment),mzr=l(),rf=a("p"),gzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Uee=a("a"),hzr=o("from_pretrained()"),pzr=o(" class method or the "),Jee=a("a"),_zr=o("from_config()"),uzr=o(` class
method.`),bzr=l(),A$=a("p"),vzr=o("This class cannot be instantiated directly using "),P5e=a("code"),Fzr=o("__init__()"),Tzr=o(" (throws an error)."),Mzr=l(),Ut=a("div"),F(L$.$$.fragment),Ezr=l(),B5e=a("p"),Czr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wzr=l(),tf=a("p"),Azr=o(`Note:
Loading a model from its configuration file does `),N5e=a("strong"),Lzr=o("not"),yzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=a("a"),xzr=o("from_pretrained()"),$zr=o(" to load the model weights."),kzr=l(),F(U5.$$.fragment),Szr=l(),zr=a("div"),F(y$.$$.fragment),Rzr=l(),I5e=a("p"),Pzr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Bzr=l(),En=a("p"),Nzr=o("The model class to instantiate is selected based on the "),q5e=a("code"),Izr=o("model_type"),qzr=o(` property of the config object (either
passed as an argument or loaded from `),j5e=a("code"),jzr=o("pretrained_model_name_or_path"),Dzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=a("code"),Gzr=o("pretrained_model_name_or_path"),Ozr=o(":"),Vzr=l(),Ee=a("ul"),J5=a("li"),G5e=a("strong"),Xzr=o("albert"),zzr=o(" \u2014 "),Kee=a("a"),Qzr=o("FlaxAlbertForPreTraining"),Wzr=o(" (ALBERT model)"),Hzr=l(),Y5=a("li"),O5e=a("strong"),Uzr=o("bart"),Jzr=o(" \u2014 "),Zee=a("a"),Yzr=o("FlaxBartForConditionalGeneration"),Kzr=o(" (BART model)"),Zzr=l(),K5=a("li"),V5e=a("strong"),eQr=o("bert"),oQr=o(" \u2014 "),eoe=a("a"),rQr=o("FlaxBertForPreTraining"),tQr=o(" (BERT model)"),aQr=l(),Z5=a("li"),X5e=a("strong"),nQr=o("big_bird"),sQr=o(" \u2014 "),ooe=a("a"),lQr=o("FlaxBigBirdForPreTraining"),iQr=o(" (BigBird model)"),dQr=l(),e3=a("li"),z5e=a("strong"),cQr=o("electra"),fQr=o(" \u2014 "),roe=a("a"),mQr=o("FlaxElectraForPreTraining"),gQr=o(" (ELECTRA model)"),hQr=l(),o3=a("li"),Q5e=a("strong"),pQr=o("longt5"),_Qr=o(" \u2014 "),toe=a("a"),uQr=o("FlaxLongT5ForConditionalGeneration"),bQr=o(" (LongT5 model)"),vQr=l(),r3=a("li"),W5e=a("strong"),FQr=o("mbart"),TQr=o(" \u2014 "),aoe=a("a"),MQr=o("FlaxMBartForConditionalGeneration"),EQr=o(" (mBART model)"),CQr=l(),t3=a("li"),H5e=a("strong"),wQr=o("mt5"),AQr=o(" \u2014 "),noe=a("a"),LQr=o("FlaxMT5ForConditionalGeneration"),yQr=o(" (MT5 model)"),xQr=l(),a3=a("li"),U5e=a("strong"),$Qr=o("roberta"),kQr=o(" \u2014 "),soe=a("a"),SQr=o("FlaxRobertaForMaskedLM"),RQr=o(" (RoBERTa model)"),PQr=l(),n3=a("li"),J5e=a("strong"),BQr=o("roformer"),NQr=o(" \u2014 "),loe=a("a"),IQr=o("FlaxRoFormerForMaskedLM"),qQr=o(" (RoFormer model)"),jQr=l(),s3=a("li"),Y5e=a("strong"),DQr=o("t5"),GQr=o(" \u2014 "),ioe=a("a"),OQr=o("FlaxT5ForConditionalGeneration"),VQr=o(" (T5 model)"),XQr=l(),l3=a("li"),K5e=a("strong"),zQr=o("wav2vec2"),QQr=o(" \u2014 "),doe=a("a"),WQr=o("FlaxWav2Vec2ForPreTraining"),HQr=o(" (Wav2Vec2 model)"),UQr=l(),i3=a("li"),Z5e=a("strong"),JQr=o("xlm-roberta"),YQr=o(" \u2014 "),coe=a("a"),KQr=o("FlaxXLMRobertaForMaskedLM"),ZQr=o(" (XLM-RoBERTa model)"),eWr=l(),F(d3.$$.fragment),gQe=l(),af=a("h2"),c3=a("a"),e3e=a("span"),F(x$.$$.fragment),oWr=l(),o3e=a("span"),rWr=o("FlaxAutoModelForMaskedLM"),hQe=l(),br=a("div"),F($$.$$.fragment),tWr=l(),nf=a("p"),aWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),foe=a("a"),nWr=o("from_pretrained()"),sWr=o(" class method or the "),moe=a("a"),lWr=o("from_config()"),iWr=o(` class
method.`),dWr=l(),k$=a("p"),cWr=o("This class cannot be instantiated directly using "),r3e=a("code"),fWr=o("__init__()"),mWr=o(" (throws an error)."),gWr=l(),Jt=a("div"),F(S$.$$.fragment),hWr=l(),t3e=a("p"),pWr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Wr=l(),sf=a("p"),uWr=o(`Note:
Loading a model from its configuration file does `),a3e=a("strong"),bWr=o("not"),vWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),goe=a("a"),FWr=o("from_pretrained()"),TWr=o(" to load the model weights."),MWr=l(),F(f3.$$.fragment),EWr=l(),Qr=a("div"),F(R$.$$.fragment),CWr=l(),n3e=a("p"),wWr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),AWr=l(),Cn=a("p"),LWr=o("The model class to instantiate is selected based on the "),s3e=a("code"),yWr=o("model_type"),xWr=o(` property of the config object (either
passed as an argument or loaded from `),l3e=a("code"),$Wr=o("pretrained_model_name_or_path"),kWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=a("code"),SWr=o("pretrained_model_name_or_path"),RWr=o(":"),PWr=l(),$e=a("ul"),m3=a("li"),d3e=a("strong"),BWr=o("albert"),NWr=o(" \u2014 "),hoe=a("a"),IWr=o("FlaxAlbertForMaskedLM"),qWr=o(" (ALBERT model)"),jWr=l(),g3=a("li"),c3e=a("strong"),DWr=o("bart"),GWr=o(" \u2014 "),poe=a("a"),OWr=o("FlaxBartForConditionalGeneration"),VWr=o(" (BART model)"),XWr=l(),h3=a("li"),f3e=a("strong"),zWr=o("bert"),QWr=o(" \u2014 "),_oe=a("a"),WWr=o("FlaxBertForMaskedLM"),HWr=o(" (BERT model)"),UWr=l(),p3=a("li"),m3e=a("strong"),JWr=o("big_bird"),YWr=o(" \u2014 "),uoe=a("a"),KWr=o("FlaxBigBirdForMaskedLM"),ZWr=o(" (BigBird model)"),eHr=l(),_3=a("li"),g3e=a("strong"),oHr=o("distilbert"),rHr=o(" \u2014 "),boe=a("a"),tHr=o("FlaxDistilBertForMaskedLM"),aHr=o(" (DistilBERT model)"),nHr=l(),u3=a("li"),h3e=a("strong"),sHr=o("electra"),lHr=o(" \u2014 "),voe=a("a"),iHr=o("FlaxElectraForMaskedLM"),dHr=o(" (ELECTRA model)"),cHr=l(),b3=a("li"),p3e=a("strong"),fHr=o("mbart"),mHr=o(" \u2014 "),Foe=a("a"),gHr=o("FlaxMBartForConditionalGeneration"),hHr=o(" (mBART model)"),pHr=l(),v3=a("li"),_3e=a("strong"),_Hr=o("roberta"),uHr=o(" \u2014 "),Toe=a("a"),bHr=o("FlaxRobertaForMaskedLM"),vHr=o(" (RoBERTa model)"),FHr=l(),F3=a("li"),u3e=a("strong"),THr=o("roformer"),MHr=o(" \u2014 "),Moe=a("a"),EHr=o("FlaxRoFormerForMaskedLM"),CHr=o(" (RoFormer model)"),wHr=l(),T3=a("li"),b3e=a("strong"),AHr=o("xlm-roberta"),LHr=o(" \u2014 "),Eoe=a("a"),yHr=o("FlaxXLMRobertaForMaskedLM"),xHr=o(" (XLM-RoBERTa model)"),$Hr=l(),F(M3.$$.fragment),pQe=l(),lf=a("h2"),E3=a("a"),v3e=a("span"),F(P$.$$.fragment),kHr=l(),F3e=a("span"),SHr=o("FlaxAutoModelForSeq2SeqLM"),_Qe=l(),vr=a("div"),F(B$.$$.fragment),RHr=l(),df=a("p"),PHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Coe=a("a"),BHr=o("from_pretrained()"),NHr=o(" class method or the "),woe=a("a"),IHr=o("from_config()"),qHr=o(` class
method.`),jHr=l(),N$=a("p"),DHr=o("This class cannot be instantiated directly using "),T3e=a("code"),GHr=o("__init__()"),OHr=o(" (throws an error)."),VHr=l(),Yt=a("div"),F(I$.$$.fragment),XHr=l(),M3e=a("p"),zHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QHr=l(),cf=a("p"),WHr=o(`Note:
Loading a model from its configuration file does `),E3e=a("strong"),HHr=o("not"),UHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=a("a"),JHr=o("from_pretrained()"),YHr=o(" to load the model weights."),KHr=l(),F(C3.$$.fragment),ZHr=l(),Wr=a("div"),F(q$.$$.fragment),eUr=l(),C3e=a("p"),oUr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rUr=l(),wn=a("p"),tUr=o("The model class to instantiate is selected based on the "),w3e=a("code"),aUr=o("model_type"),nUr=o(` property of the config object (either
passed as an argument or loaded from `),A3e=a("code"),sUr=o("pretrained_model_name_or_path"),lUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L3e=a("code"),iUr=o("pretrained_model_name_or_path"),dUr=o(":"),cUr=l(),ke=a("ul"),w3=a("li"),y3e=a("strong"),fUr=o("bart"),mUr=o(" \u2014 "),Loe=a("a"),gUr=o("FlaxBartForConditionalGeneration"),hUr=o(" (BART model)"),pUr=l(),A3=a("li"),x3e=a("strong"),_Ur=o("blenderbot"),uUr=o(" \u2014 "),yoe=a("a"),bUr=o("FlaxBlenderbotForConditionalGeneration"),vUr=o(" (Blenderbot model)"),FUr=l(),L3=a("li"),$3e=a("strong"),TUr=o("blenderbot-small"),MUr=o(" \u2014 "),xoe=a("a"),EUr=o("FlaxBlenderbotSmallForConditionalGeneration"),CUr=o(" (BlenderbotSmall model)"),wUr=l(),y3=a("li"),k3e=a("strong"),AUr=o("encoder-decoder"),LUr=o(" \u2014 "),$oe=a("a"),yUr=o("FlaxEncoderDecoderModel"),xUr=o(" (Encoder decoder model)"),$Ur=l(),x3=a("li"),S3e=a("strong"),kUr=o("longt5"),SUr=o(" \u2014 "),koe=a("a"),RUr=o("FlaxLongT5ForConditionalGeneration"),PUr=o(" (LongT5 model)"),BUr=l(),$3=a("li"),R3e=a("strong"),NUr=o("marian"),IUr=o(" \u2014 "),Soe=a("a"),qUr=o("FlaxMarianMTModel"),jUr=o(" (Marian model)"),DUr=l(),k3=a("li"),P3e=a("strong"),GUr=o("mbart"),OUr=o(" \u2014 "),Roe=a("a"),VUr=o("FlaxMBartForConditionalGeneration"),XUr=o(" (mBART model)"),zUr=l(),S3=a("li"),B3e=a("strong"),QUr=o("mt5"),WUr=o(" \u2014 "),Poe=a("a"),HUr=o("FlaxMT5ForConditionalGeneration"),UUr=o(" (MT5 model)"),JUr=l(),R3=a("li"),N3e=a("strong"),YUr=o("pegasus"),KUr=o(" \u2014 "),Boe=a("a"),ZUr=o("FlaxPegasusForConditionalGeneration"),eJr=o(" (Pegasus model)"),oJr=l(),P3=a("li"),I3e=a("strong"),rJr=o("t5"),tJr=o(" \u2014 "),Noe=a("a"),aJr=o("FlaxT5ForConditionalGeneration"),nJr=o(" (T5 model)"),sJr=l(),F(B3.$$.fragment),uQe=l(),ff=a("h2"),N3=a("a"),q3e=a("span"),F(j$.$$.fragment),lJr=l(),j3e=a("span"),iJr=o("FlaxAutoModelForSequenceClassification"),bQe=l(),Fr=a("div"),F(D$.$$.fragment),dJr=l(),mf=a("p"),cJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ioe=a("a"),fJr=o("from_pretrained()"),mJr=o(" class method or the "),qoe=a("a"),gJr=o("from_config()"),hJr=o(` class
method.`),pJr=l(),G$=a("p"),_Jr=o("This class cannot be instantiated directly using "),D3e=a("code"),uJr=o("__init__()"),bJr=o(" (throws an error)."),vJr=l(),Kt=a("div"),F(O$.$$.fragment),FJr=l(),G3e=a("p"),TJr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MJr=l(),gf=a("p"),EJr=o(`Note:
Loading a model from its configuration file does `),O3e=a("strong"),CJr=o("not"),wJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=a("a"),AJr=o("from_pretrained()"),LJr=o(" to load the model weights."),yJr=l(),F(I3.$$.fragment),xJr=l(),Hr=a("div"),F(V$.$$.fragment),$Jr=l(),V3e=a("p"),kJr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SJr=l(),An=a("p"),RJr=o("The model class to instantiate is selected based on the "),X3e=a("code"),PJr=o("model_type"),BJr=o(` property of the config object (either
passed as an argument or loaded from `),z3e=a("code"),NJr=o("pretrained_model_name_or_path"),IJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q3e=a("code"),qJr=o("pretrained_model_name_or_path"),jJr=o(":"),DJr=l(),Se=a("ul"),q3=a("li"),W3e=a("strong"),GJr=o("albert"),OJr=o(" \u2014 "),Doe=a("a"),VJr=o("FlaxAlbertForSequenceClassification"),XJr=o(" (ALBERT model)"),zJr=l(),j3=a("li"),H3e=a("strong"),QJr=o("bart"),WJr=o(" \u2014 "),Goe=a("a"),HJr=o("FlaxBartForSequenceClassification"),UJr=o(" (BART model)"),JJr=l(),D3=a("li"),U3e=a("strong"),YJr=o("bert"),KJr=o(" \u2014 "),Ooe=a("a"),ZJr=o("FlaxBertForSequenceClassification"),eYr=o(" (BERT model)"),oYr=l(),G3=a("li"),J3e=a("strong"),rYr=o("big_bird"),tYr=o(" \u2014 "),Voe=a("a"),aYr=o("FlaxBigBirdForSequenceClassification"),nYr=o(" (BigBird model)"),sYr=l(),O3=a("li"),Y3e=a("strong"),lYr=o("distilbert"),iYr=o(" \u2014 "),Xoe=a("a"),dYr=o("FlaxDistilBertForSequenceClassification"),cYr=o(" (DistilBERT model)"),fYr=l(),V3=a("li"),K3e=a("strong"),mYr=o("electra"),gYr=o(" \u2014 "),zoe=a("a"),hYr=o("FlaxElectraForSequenceClassification"),pYr=o(" (ELECTRA model)"),_Yr=l(),X3=a("li"),Z3e=a("strong"),uYr=o("mbart"),bYr=o(" \u2014 "),Qoe=a("a"),vYr=o("FlaxMBartForSequenceClassification"),FYr=o(" (mBART model)"),TYr=l(),z3=a("li"),e0e=a("strong"),MYr=o("roberta"),EYr=o(" \u2014 "),Woe=a("a"),CYr=o("FlaxRobertaForSequenceClassification"),wYr=o(" (RoBERTa model)"),AYr=l(),Q3=a("li"),o0e=a("strong"),LYr=o("roformer"),yYr=o(" \u2014 "),Hoe=a("a"),xYr=o("FlaxRoFormerForSequenceClassification"),$Yr=o(" (RoFormer model)"),kYr=l(),W3=a("li"),r0e=a("strong"),SYr=o("xlm-roberta"),RYr=o(" \u2014 "),Uoe=a("a"),PYr=o("FlaxXLMRobertaForSequenceClassification"),BYr=o(" (XLM-RoBERTa model)"),NYr=l(),F(H3.$$.fragment),vQe=l(),hf=a("h2"),U3=a("a"),t0e=a("span"),F(X$.$$.fragment),IYr=l(),a0e=a("span"),qYr=o("FlaxAutoModelForQuestionAnswering"),FQe=l(),Tr=a("div"),F(z$.$$.fragment),jYr=l(),pf=a("p"),DYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Joe=a("a"),GYr=o("from_pretrained()"),OYr=o(" class method or the "),Yoe=a("a"),VYr=o("from_config()"),XYr=o(` class
method.`),zYr=l(),Q$=a("p"),QYr=o("This class cannot be instantiated directly using "),n0e=a("code"),WYr=o("__init__()"),HYr=o(" (throws an error)."),UYr=l(),Zt=a("div"),F(W$.$$.fragment),JYr=l(),s0e=a("p"),YYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KYr=l(),_f=a("p"),ZYr=o(`Note:
Loading a model from its configuration file does `),l0e=a("strong"),eKr=o("not"),oKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Koe=a("a"),rKr=o("from_pretrained()"),tKr=o(" to load the model weights."),aKr=l(),F(J3.$$.fragment),nKr=l(),Ur=a("div"),F(H$.$$.fragment),sKr=l(),i0e=a("p"),lKr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iKr=l(),Ln=a("p"),dKr=o("The model class to instantiate is selected based on the "),d0e=a("code"),cKr=o("model_type"),fKr=o(` property of the config object (either
passed as an argument or loaded from `),c0e=a("code"),mKr=o("pretrained_model_name_or_path"),gKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=a("code"),hKr=o("pretrained_model_name_or_path"),pKr=o(":"),_Kr=l(),Re=a("ul"),Y3=a("li"),m0e=a("strong"),uKr=o("albert"),bKr=o(" \u2014 "),Zoe=a("a"),vKr=o("FlaxAlbertForQuestionAnswering"),FKr=o(" (ALBERT model)"),TKr=l(),K3=a("li"),g0e=a("strong"),MKr=o("bart"),EKr=o(" \u2014 "),ere=a("a"),CKr=o("FlaxBartForQuestionAnswering"),wKr=o(" (BART model)"),AKr=l(),Z3=a("li"),h0e=a("strong"),LKr=o("bert"),yKr=o(" \u2014 "),ore=a("a"),xKr=o("FlaxBertForQuestionAnswering"),$Kr=o(" (BERT model)"),kKr=l(),e0=a("li"),p0e=a("strong"),SKr=o("big_bird"),RKr=o(" \u2014 "),rre=a("a"),PKr=o("FlaxBigBirdForQuestionAnswering"),BKr=o(" (BigBird model)"),NKr=l(),o0=a("li"),_0e=a("strong"),IKr=o("distilbert"),qKr=o(" \u2014 "),tre=a("a"),jKr=o("FlaxDistilBertForQuestionAnswering"),DKr=o(" (DistilBERT model)"),GKr=l(),r0=a("li"),u0e=a("strong"),OKr=o("electra"),VKr=o(" \u2014 "),are=a("a"),XKr=o("FlaxElectraForQuestionAnswering"),zKr=o(" (ELECTRA model)"),QKr=l(),t0=a("li"),b0e=a("strong"),WKr=o("mbart"),HKr=o(" \u2014 "),nre=a("a"),UKr=o("FlaxMBartForQuestionAnswering"),JKr=o(" (mBART model)"),YKr=l(),a0=a("li"),v0e=a("strong"),KKr=o("roberta"),ZKr=o(" \u2014 "),sre=a("a"),eZr=o("FlaxRobertaForQuestionAnswering"),oZr=o(" (RoBERTa model)"),rZr=l(),n0=a("li"),F0e=a("strong"),tZr=o("roformer"),aZr=o(" \u2014 "),lre=a("a"),nZr=o("FlaxRoFormerForQuestionAnswering"),sZr=o(" (RoFormer model)"),lZr=l(),s0=a("li"),T0e=a("strong"),iZr=o("xlm-roberta"),dZr=o(" \u2014 "),ire=a("a"),cZr=o("FlaxXLMRobertaForQuestionAnswering"),fZr=o(" (XLM-RoBERTa model)"),mZr=l(),F(l0.$$.fragment),TQe=l(),uf=a("h2"),i0=a("a"),M0e=a("span"),F(U$.$$.fragment),gZr=l(),E0e=a("span"),hZr=o("FlaxAutoModelForTokenClassification"),MQe=l(),Mr=a("div"),F(J$.$$.fragment),pZr=l(),bf=a("p"),_Zr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dre=a("a"),uZr=o("from_pretrained()"),bZr=o(" class method or the "),cre=a("a"),vZr=o("from_config()"),FZr=o(` class
method.`),TZr=l(),Y$=a("p"),MZr=o("This class cannot be instantiated directly using "),C0e=a("code"),EZr=o("__init__()"),CZr=o(" (throws an error)."),wZr=l(),ea=a("div"),F(K$.$$.fragment),AZr=l(),w0e=a("p"),LZr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yZr=l(),vf=a("p"),xZr=o(`Note:
Loading a model from its configuration file does `),A0e=a("strong"),$Zr=o("not"),kZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=a("a"),SZr=o("from_pretrained()"),RZr=o(" to load the model weights."),PZr=l(),F(d0.$$.fragment),BZr=l(),Jr=a("div"),F(Z$.$$.fragment),NZr=l(),L0e=a("p"),IZr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qZr=l(),yn=a("p"),jZr=o("The model class to instantiate is selected based on the "),y0e=a("code"),DZr=o("model_type"),GZr=o(` property of the config object (either
passed as an argument or loaded from `),x0e=a("code"),OZr=o("pretrained_model_name_or_path"),VZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$0e=a("code"),XZr=o("pretrained_model_name_or_path"),zZr=o(":"),QZr=l(),Ve=a("ul"),c0=a("li"),k0e=a("strong"),WZr=o("albert"),HZr=o(" \u2014 "),mre=a("a"),UZr=o("FlaxAlbertForTokenClassification"),JZr=o(" (ALBERT model)"),YZr=l(),f0=a("li"),S0e=a("strong"),KZr=o("bert"),ZZr=o(" \u2014 "),gre=a("a"),eet=o("FlaxBertForTokenClassification"),oet=o(" (BERT model)"),ret=l(),m0=a("li"),R0e=a("strong"),tet=o("big_bird"),aet=o(" \u2014 "),hre=a("a"),net=o("FlaxBigBirdForTokenClassification"),set=o(" (BigBird model)"),iet=l(),g0=a("li"),P0e=a("strong"),det=o("distilbert"),cet=o(" \u2014 "),pre=a("a"),fet=o("FlaxDistilBertForTokenClassification"),met=o(" (DistilBERT model)"),get=l(),h0=a("li"),B0e=a("strong"),het=o("electra"),pet=o(" \u2014 "),_re=a("a"),_et=o("FlaxElectraForTokenClassification"),uet=o(" (ELECTRA model)"),bet=l(),p0=a("li"),N0e=a("strong"),vet=o("roberta"),Fet=o(" \u2014 "),ure=a("a"),Tet=o("FlaxRobertaForTokenClassification"),Met=o(" (RoBERTa model)"),Eet=l(),_0=a("li"),I0e=a("strong"),Cet=o("roformer"),wet=o(" \u2014 "),bre=a("a"),Aet=o("FlaxRoFormerForTokenClassification"),Let=o(" (RoFormer model)"),yet=l(),u0=a("li"),q0e=a("strong"),xet=o("xlm-roberta"),$et=o(" \u2014 "),vre=a("a"),ket=o("FlaxXLMRobertaForTokenClassification"),Set=o(" (XLM-RoBERTa model)"),Ret=l(),F(b0.$$.fragment),EQe=l(),Ff=a("h2"),v0=a("a"),j0e=a("span"),F(ek.$$.fragment),Pet=l(),D0e=a("span"),Bet=o("FlaxAutoModelForMultipleChoice"),CQe=l(),Er=a("div"),F(ok.$$.fragment),Net=l(),Tf=a("p"),Iet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Fre=a("a"),qet=o("from_pretrained()"),jet=o(" class method or the "),Tre=a("a"),Det=o("from_config()"),Get=o(` class
method.`),Oet=l(),rk=a("p"),Vet=o("This class cannot be instantiated directly using "),G0e=a("code"),Xet=o("__init__()"),zet=o(" (throws an error)."),Qet=l(),oa=a("div"),F(tk.$$.fragment),Wet=l(),O0e=a("p"),Het=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Uet=l(),Mf=a("p"),Jet=o(`Note:
Loading a model from its configuration file does `),V0e=a("strong"),Yet=o("not"),Ket=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=a("a"),Zet=o("from_pretrained()"),eot=o(" to load the model weights."),oot=l(),F(F0.$$.fragment),rot=l(),Yr=a("div"),F(ak.$$.fragment),tot=l(),X0e=a("p"),aot=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),not=l(),xn=a("p"),sot=o("The model class to instantiate is selected based on the "),z0e=a("code"),lot=o("model_type"),iot=o(` property of the config object (either
passed as an argument or loaded from `),Q0e=a("code"),dot=o("pretrained_model_name_or_path"),cot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W0e=a("code"),fot=o("pretrained_model_name_or_path"),mot=o(":"),got=l(),Xe=a("ul"),T0=a("li"),H0e=a("strong"),hot=o("albert"),pot=o(" \u2014 "),Ere=a("a"),_ot=o("FlaxAlbertForMultipleChoice"),uot=o(" (ALBERT model)"),bot=l(),M0=a("li"),U0e=a("strong"),vot=o("bert"),Fot=o(" \u2014 "),Cre=a("a"),Tot=o("FlaxBertForMultipleChoice"),Mot=o(" (BERT model)"),Eot=l(),E0=a("li"),J0e=a("strong"),Cot=o("big_bird"),wot=o(" \u2014 "),wre=a("a"),Aot=o("FlaxBigBirdForMultipleChoice"),Lot=o(" (BigBird model)"),yot=l(),C0=a("li"),Y0e=a("strong"),xot=o("distilbert"),$ot=o(" \u2014 "),Are=a("a"),kot=o("FlaxDistilBertForMultipleChoice"),Sot=o(" (DistilBERT model)"),Rot=l(),w0=a("li"),K0e=a("strong"),Pot=o("electra"),Bot=o(" \u2014 "),Lre=a("a"),Not=o("FlaxElectraForMultipleChoice"),Iot=o(" (ELECTRA model)"),qot=l(),A0=a("li"),Z0e=a("strong"),jot=o("roberta"),Dot=o(" \u2014 "),yre=a("a"),Got=o("FlaxRobertaForMultipleChoice"),Oot=o(" (RoBERTa model)"),Vot=l(),L0=a("li"),ewe=a("strong"),Xot=o("roformer"),zot=o(" \u2014 "),xre=a("a"),Qot=o("FlaxRoFormerForMultipleChoice"),Wot=o(" (RoFormer model)"),Hot=l(),y0=a("li"),owe=a("strong"),Uot=o("xlm-roberta"),Jot=o(" \u2014 "),$re=a("a"),Yot=o("FlaxXLMRobertaForMultipleChoice"),Kot=o(" (XLM-RoBERTa model)"),Zot=l(),F(x0.$$.fragment),wQe=l(),Ef=a("h2"),$0=a("a"),rwe=a("span"),F(nk.$$.fragment),ert=l(),twe=a("span"),ort=o("FlaxAutoModelForNextSentencePrediction"),AQe=l(),Cr=a("div"),F(sk.$$.fragment),rrt=l(),Cf=a("p"),trt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kre=a("a"),art=o("from_pretrained()"),nrt=o(" class method or the "),Sre=a("a"),srt=o("from_config()"),lrt=o(` class
method.`),irt=l(),lk=a("p"),drt=o("This class cannot be instantiated directly using "),awe=a("code"),crt=o("__init__()"),frt=o(" (throws an error)."),mrt=l(),ra=a("div"),F(ik.$$.fragment),grt=l(),nwe=a("p"),hrt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),prt=l(),wf=a("p"),_rt=o(`Note:
Loading a model from its configuration file does `),swe=a("strong"),urt=o("not"),brt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rre=a("a"),vrt=o("from_pretrained()"),Frt=o(" to load the model weights."),Trt=l(),F(k0.$$.fragment),Mrt=l(),Kr=a("div"),F(dk.$$.fragment),Ert=l(),lwe=a("p"),Crt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wrt=l(),$n=a("p"),Art=o("The model class to instantiate is selected based on the "),iwe=a("code"),Lrt=o("model_type"),yrt=o(` property of the config object (either
passed as an argument or loaded from `),dwe=a("code"),xrt=o("pretrained_model_name_or_path"),$rt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cwe=a("code"),krt=o("pretrained_model_name_or_path"),Srt=o(":"),Rrt=l(),fwe=a("ul"),S0=a("li"),mwe=a("strong"),Prt=o("bert"),Brt=o(" \u2014 "),Pre=a("a"),Nrt=o("FlaxBertForNextSentencePrediction"),Irt=o(" (BERT model)"),qrt=l(),F(R0.$$.fragment),LQe=l(),Af=a("h2"),P0=a("a"),gwe=a("span"),F(ck.$$.fragment),jrt=l(),hwe=a("span"),Drt=o("FlaxAutoModelForImageClassification"),yQe=l(),wr=a("div"),F(fk.$$.fragment),Grt=l(),Lf=a("p"),Ort=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Bre=a("a"),Vrt=o("from_pretrained()"),Xrt=o(" class method or the "),Nre=a("a"),zrt=o("from_config()"),Qrt=o(` class
method.`),Wrt=l(),mk=a("p"),Hrt=o("This class cannot be instantiated directly using "),pwe=a("code"),Urt=o("__init__()"),Jrt=o(" (throws an error)."),Yrt=l(),ta=a("div"),F(gk.$$.fragment),Krt=l(),_we=a("p"),Zrt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ett=l(),yf=a("p"),ott=o(`Note:
Loading a model from its configuration file does `),uwe=a("strong"),rtt=o("not"),ttt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ire=a("a"),att=o("from_pretrained()"),ntt=o(" to load the model weights."),stt=l(),F(B0.$$.fragment),ltt=l(),Zr=a("div"),F(hk.$$.fragment),itt=l(),bwe=a("p"),dtt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ctt=l(),kn=a("p"),ftt=o("The model class to instantiate is selected based on the "),vwe=a("code"),mtt=o("model_type"),gtt=o(` property of the config object (either
passed as an argument or loaded from `),Fwe=a("code"),htt=o("pretrained_model_name_or_path"),ptt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Twe=a("code"),_tt=o("pretrained_model_name_or_path"),utt=o(":"),btt=l(),pk=a("ul"),N0=a("li"),Mwe=a("strong"),vtt=o("beit"),Ftt=o(" \u2014 "),qre=a("a"),Ttt=o("FlaxBeitForImageClassification"),Mtt=o(" (BEiT model)"),Ett=l(),I0=a("li"),Ewe=a("strong"),Ctt=o("vit"),wtt=o(" \u2014 "),jre=a("a"),Att=o("FlaxViTForImageClassification"),Ltt=o(" (ViT model)"),ytt=l(),F(q0.$$.fragment),xQe=l(),xf=a("h2"),j0=a("a"),Cwe=a("span"),F(_k.$$.fragment),xtt=l(),wwe=a("span"),$tt=o("FlaxAutoModelForVision2Seq"),$Qe=l(),Ar=a("div"),F(uk.$$.fragment),ktt=l(),$f=a("p"),Stt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Dre=a("a"),Rtt=o("from_pretrained()"),Ptt=o(" class method or the "),Gre=a("a"),Btt=o("from_config()"),Ntt=o(` class
method.`),Itt=l(),bk=a("p"),qtt=o("This class cannot be instantiated directly using "),Awe=a("code"),jtt=o("__init__()"),Dtt=o(" (throws an error)."),Gtt=l(),aa=a("div"),F(vk.$$.fragment),Ott=l(),Lwe=a("p"),Vtt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xtt=l(),kf=a("p"),ztt=o(`Note:
Loading a model from its configuration file does `),ywe=a("strong"),Qtt=o("not"),Wtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ore=a("a"),Htt=o("from_pretrained()"),Utt=o(" to load the model weights."),Jtt=l(),F(D0.$$.fragment),Ytt=l(),et=a("div"),F(Fk.$$.fragment),Ktt=l(),xwe=a("p"),Ztt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),eat=l(),Sn=a("p"),oat=o("The model class to instantiate is selected based on the "),$we=a("code"),rat=o("model_type"),tat=o(` property of the config object (either
passed as an argument or loaded from `),kwe=a("code"),aat=o("pretrained_model_name_or_path"),nat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Swe=a("code"),sat=o("pretrained_model_name_or_path"),lat=o(":"),iat=l(),Rwe=a("ul"),G0=a("li"),Pwe=a("strong"),dat=o("vision-encoder-decoder"),cat=o(" \u2014 "),Vre=a("a"),fat=o("FlaxVisionEncoderDecoderModel"),mat=o(" (Vision Encoder decoder model)"),gat=l(),F(O0.$$.fragment),this.h()},l(f){const u=sHt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Tk=s(p);m=n(Tk,"A",{id:!0,class:!0,href:!0});var Bwe=s(m);_=n(Bwe,"SPAN",{});var Nwe=s(_);T(d.$$.fragment,Nwe),Nwe.forEach(t),Bwe.forEach(t),h=i(Tk),Co=n(Tk,"SPAN",{});var Iwe=s(Co);yi=r(Iwe,"Auto Classes"),Iwe.forEach(t),Tk.forEach(t),Bf=i(f),lt=n(f,"P",{});var Mk=s(lt);xi=r(Mk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=n(Mk,"CODE",{});var qwe=s($i);lL=r(qwe,"from_pretrained()"),qwe.forEach(t),Nf=r(Mk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Mk.forEach(t),Oe=i(f),We=n(f,"P",{});var Rn=s(We);ki=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var jwe=s(Pn);iL=r(jwe,"AutoConfig"),jwe.forEach(t),Bn=r(Rn,", "),Nn=n(Rn,"A",{href:!0});var Dwe=s(Nn);dL=r(Dwe,"AutoModel"),Dwe.forEach(t),Si=r(Rn,`, and
`),In=n(Rn,"A",{href:!0});var Gwe=s(In);cL=r(Gwe,"AutoTokenizer"),Gwe.forEach(t),Ri=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),If=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var Ek=s(Ae);VS=r(Ek,"will create a model that is an instance of "),Pi=n(Ek,"A",{href:!0});var Owe=s(Pi);XS=r(Owe,"BertModel"),Owe.forEach(t),zS=r(Ek,"."),Ek.forEach(t),wo=i(f),Ra=n(f,"P",{});var Ck=s(Ra);QS=r(Ck,"There is one class of "),qf=n(Ck,"CODE",{});var Vwe=s(qf);WS=r(Vwe,"AutoModel"),Vwe.forEach(t),GHe=r(Ck," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ck.forEach(t),AXe=i(f),Bi=n(f,"H2",{class:!0});var wk=s(Bi);jf=n(wk,"A",{id:!0,class:!0,href:!0});var Xwe=s(jf);qae=n(Xwe,"SPAN",{});var zwe=s(qae);T(fL.$$.fragment,zwe),zwe.forEach(t),Xwe.forEach(t),OHe=i(wk),jae=n(wk,"SPAN",{});var Qwe=s(jae);VHe=r(Qwe,"Extending the Auto Classes"),Qwe.forEach(t),wk.forEach(t),LXe=i(f),qn=n(f,"P",{});var Sf=s(qn);XHe=r(Sf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dae=n(Sf,"CODE",{});var Wwe=s(Dae);zHe=r(Wwe,"NewModel"),Wwe.forEach(t),QHe=r(Sf,", make sure you have a "),Gae=n(Sf,"CODE",{});var Hwe=s(Gae);WHe=r(Hwe,"NewModelConfig"),Hwe.forEach(t),HHe=r(Sf,` then you can add those to the auto
classes like this:`),Sf.forEach(t),yXe=i(f),T(mL.$$.fragment,f),xXe=i(f),HS=n(f,"P",{});var Uwe=s(HS);UHe=r(Uwe,"You will then be able to use the auto classes like you would usually do!"),Uwe.forEach(t),$Xe=i(f),T(Df.$$.fragment,f),kXe=i(f),Ni=n(f,"H2",{class:!0});var Ak=s(Ni);Gf=n(Ak,"A",{id:!0,class:!0,href:!0});var Jwe=s(Gf);Oae=n(Jwe,"SPAN",{});var Ywe=s(Oae);T(gL.$$.fragment,Ywe),Ywe.forEach(t),Jwe.forEach(t),JHe=i(Ak),Vae=n(Ak,"SPAN",{});var Kwe=s(Vae);YHe=r(Kwe,"AutoConfig"),Kwe.forEach(t),Ak.forEach(t),SXe=i(f),Ao=n(f,"DIV",{class:!0});var nt=s(Ao);T(hL.$$.fragment,nt),KHe=i(nt),pL=n(nt,"P",{});var Lk=s(pL);ZHe=r(Lk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),US=n(Lk,"A",{href:!0});var Zwe=s(US);eUe=r(Zwe,"from_pretrained()"),Zwe.forEach(t),oUe=r(Lk," class method."),Lk.forEach(t),rUe=i(nt),_L=n(nt,"P",{});var yk=s(_L);tUe=r(yk,"This class cannot be instantiated directly using "),Xae=n(yk,"CODE",{});var eAe=s(Xae);aUe=r(eAe,"__init__()"),eAe.forEach(t),nUe=r(yk," (throws an error)."),yk.forEach(t),sUe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(uL.$$.fragment,st),lUe=i(st),zae=n(st,"P",{});var oAe=s(zae);iUe=r(oAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),oAe.forEach(t),dUe=i(st),Ii=n(st,"P",{});var Rf=s(Ii);cUe=r(Rf,"The configuration class to instantiate is selected based on the "),Qae=n(Rf,"CODE",{});var rAe=s(Qae);fUe=r(rAe,"model_type"),rAe.forEach(t),mUe=r(Rf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Wae=n(Rf,"CODE",{});var tAe=s(Wae);gUe=r(tAe,"pretrained_model_name_or_path"),tAe.forEach(t),hUe=r(Rf,":"),Rf.forEach(t),pUe=i(st),A=n(st,"UL",{});var L=s(A);Of=n(L,"LI",{});var V0=s(Of);Hae=n(V0,"STRONG",{});var aAe=s(Hae);_Ue=r(aAe,"albert"),aAe.forEach(t),uUe=r(V0," \u2014 "),JS=n(V0,"A",{href:!0});var nAe=s(JS);bUe=r(nAe,"AlbertConfig"),nAe.forEach(t),vUe=r(V0," (ALBERT model)"),V0.forEach(t),FUe=i(L),Vf=n(L,"LI",{});var X0=s(Vf);Uae=n(X0,"STRONG",{});var sAe=s(Uae);TUe=r(sAe,"bart"),sAe.forEach(t),MUe=r(X0," \u2014 "),YS=n(X0,"A",{href:!0});var lAe=s(YS);EUe=r(lAe,"BartConfig"),lAe.forEach(t),CUe=r(X0," (BART model)"),X0.forEach(t),wUe=i(L),Xf=n(L,"LI",{});var z0=s(Xf);Jae=n(z0,"STRONG",{});var iAe=s(Jae);AUe=r(iAe,"beit"),iAe.forEach(t),LUe=r(z0," \u2014 "),KS=n(z0,"A",{href:!0});var dAe=s(KS);yUe=r(dAe,"BeitConfig"),dAe.forEach(t),xUe=r(z0," (BEiT model)"),z0.forEach(t),$Ue=i(L),zf=n(L,"LI",{});var Q0=s(zf);Yae=n(Q0,"STRONG",{});var cAe=s(Yae);kUe=r(cAe,"bert"),cAe.forEach(t),SUe=r(Q0," \u2014 "),ZS=n(Q0,"A",{href:!0});var fAe=s(ZS);RUe=r(fAe,"BertConfig"),fAe.forEach(t),PUe=r(Q0," (BERT model)"),Q0.forEach(t),BUe=i(L),Qf=n(L,"LI",{});var W0=s(Qf);Kae=n(W0,"STRONG",{});var mAe=s(Kae);NUe=r(mAe,"bert-generation"),mAe.forEach(t),IUe=r(W0," \u2014 "),eR=n(W0,"A",{href:!0});var gAe=s(eR);qUe=r(gAe,"BertGenerationConfig"),gAe.forEach(t),jUe=r(W0," (Bert Generation model)"),W0.forEach(t),DUe=i(L),Wf=n(L,"LI",{});var H0=s(Wf);Zae=n(H0,"STRONG",{});var hAe=s(Zae);GUe=r(hAe,"big_bird"),hAe.forEach(t),OUe=r(H0," \u2014 "),oR=n(H0,"A",{href:!0});var pAe=s(oR);VUe=r(pAe,"BigBirdConfig"),pAe.forEach(t),XUe=r(H0," (BigBird model)"),H0.forEach(t),zUe=i(L),Hf=n(L,"LI",{});var U0=s(Hf);ene=n(U0,"STRONG",{});var _Ae=s(ene);QUe=r(_Ae,"bigbird_pegasus"),_Ae.forEach(t),WUe=r(U0," \u2014 "),rR=n(U0,"A",{href:!0});var uAe=s(rR);HUe=r(uAe,"BigBirdPegasusConfig"),uAe.forEach(t),UUe=r(U0," (BigBird-Pegasus model)"),U0.forEach(t),JUe=i(L),Uf=n(L,"LI",{});var J0=s(Uf);one=n(J0,"STRONG",{});var bAe=s(one);YUe=r(bAe,"blenderbot"),bAe.forEach(t),KUe=r(J0," \u2014 "),tR=n(J0,"A",{href:!0});var vAe=s(tR);ZUe=r(vAe,"BlenderbotConfig"),vAe.forEach(t),eJe=r(J0," (Blenderbot model)"),J0.forEach(t),oJe=i(L),Jf=n(L,"LI",{});var Y0=s(Jf);rne=n(Y0,"STRONG",{});var FAe=s(rne);rJe=r(FAe,"blenderbot-small"),FAe.forEach(t),tJe=r(Y0," \u2014 "),aR=n(Y0,"A",{href:!0});var TAe=s(aR);aJe=r(TAe,"BlenderbotSmallConfig"),TAe.forEach(t),nJe=r(Y0," (BlenderbotSmall model)"),Y0.forEach(t),sJe=i(L),Yf=n(L,"LI",{});var K0=s(Yf);tne=n(K0,"STRONG",{});var MAe=s(tne);lJe=r(MAe,"bloom"),MAe.forEach(t),iJe=r(K0," \u2014 "),nR=n(K0,"A",{href:!0});var EAe=s(nR);dJe=r(EAe,"BloomConfig"),EAe.forEach(t),cJe=r(K0," (BLOOM model)"),K0.forEach(t),fJe=i(L),Kf=n(L,"LI",{});var Z0=s(Kf);ane=n(Z0,"STRONG",{});var CAe=s(ane);mJe=r(CAe,"camembert"),CAe.forEach(t),gJe=r(Z0," \u2014 "),sR=n(Z0,"A",{href:!0});var wAe=s(sR);hJe=r(wAe,"CamembertConfig"),wAe.forEach(t),pJe=r(Z0," (CamemBERT model)"),Z0.forEach(t),_Je=i(L),Zf=n(L,"LI",{});var ew=s(Zf);nne=n(ew,"STRONG",{});var AAe=s(nne);uJe=r(AAe,"canine"),AAe.forEach(t),bJe=r(ew," \u2014 "),lR=n(ew,"A",{href:!0});var LAe=s(lR);vJe=r(LAe,"CanineConfig"),LAe.forEach(t),FJe=r(ew," (CANINE model)"),ew.forEach(t),TJe=i(L),em=n(L,"LI",{});var ow=s(em);sne=n(ow,"STRONG",{});var yAe=s(sne);MJe=r(yAe,"clip"),yAe.forEach(t),EJe=r(ow," \u2014 "),iR=n(ow,"A",{href:!0});var xAe=s(iR);CJe=r(xAe,"CLIPConfig"),xAe.forEach(t),wJe=r(ow," (CLIP model)"),ow.forEach(t),AJe=i(L),om=n(L,"LI",{});var rw=s(om);lne=n(rw,"STRONG",{});var $Ae=s(lne);LJe=r($Ae,"codegen"),$Ae.forEach(t),yJe=r(rw," \u2014 "),dR=n(rw,"A",{href:!0});var kAe=s(dR);xJe=r(kAe,"CodeGenConfig"),kAe.forEach(t),$Je=r(rw," (CodeGen model)"),rw.forEach(t),kJe=i(L),rm=n(L,"LI",{});var tw=s(rm);ine=n(tw,"STRONG",{});var SAe=s(ine);SJe=r(SAe,"convbert"),SAe.forEach(t),RJe=r(tw," \u2014 "),cR=n(tw,"A",{href:!0});var RAe=s(cR);PJe=r(RAe,"ConvBertConfig"),RAe.forEach(t),BJe=r(tw," (ConvBERT model)"),tw.forEach(t),NJe=i(L),tm=n(L,"LI",{});var aw=s(tm);dne=n(aw,"STRONG",{});var PAe=s(dne);IJe=r(PAe,"convnext"),PAe.forEach(t),qJe=r(aw," \u2014 "),fR=n(aw,"A",{href:!0});var BAe=s(fR);jJe=r(BAe,"ConvNextConfig"),BAe.forEach(t),DJe=r(aw," (ConvNeXT model)"),aw.forEach(t),GJe=i(L),am=n(L,"LI",{});var nw=s(am);cne=n(nw,"STRONG",{});var NAe=s(cne);OJe=r(NAe,"ctrl"),NAe.forEach(t),VJe=r(nw," \u2014 "),mR=n(nw,"A",{href:!0});var IAe=s(mR);XJe=r(IAe,"CTRLConfig"),IAe.forEach(t),zJe=r(nw," (CTRL model)"),nw.forEach(t),QJe=i(L),nm=n(L,"LI",{});var sw=s(nm);fne=n(sw,"STRONG",{});var qAe=s(fne);WJe=r(qAe,"cvt"),qAe.forEach(t),HJe=r(sw," \u2014 "),gR=n(sw,"A",{href:!0});var jAe=s(gR);UJe=r(jAe,"CvtConfig"),jAe.forEach(t),JJe=r(sw," (CvT model)"),sw.forEach(t),YJe=i(L),sm=n(L,"LI",{});var lw=s(sm);mne=n(lw,"STRONG",{});var DAe=s(mne);KJe=r(DAe,"data2vec-audio"),DAe.forEach(t),ZJe=r(lw," \u2014 "),hR=n(lw,"A",{href:!0});var GAe=s(hR);eYe=r(GAe,"Data2VecAudioConfig"),GAe.forEach(t),oYe=r(lw," (Data2VecAudio model)"),lw.forEach(t),rYe=i(L),lm=n(L,"LI",{});var iw=s(lm);gne=n(iw,"STRONG",{});var OAe=s(gne);tYe=r(OAe,"data2vec-text"),OAe.forEach(t),aYe=r(iw," \u2014 "),pR=n(iw,"A",{href:!0});var VAe=s(pR);nYe=r(VAe,"Data2VecTextConfig"),VAe.forEach(t),sYe=r(iw," (Data2VecText model)"),iw.forEach(t),lYe=i(L),im=n(L,"LI",{});var dw=s(im);hne=n(dw,"STRONG",{});var XAe=s(hne);iYe=r(XAe,"data2vec-vision"),XAe.forEach(t),dYe=r(dw," \u2014 "),_R=n(dw,"A",{href:!0});var zAe=s(_R);cYe=r(zAe,"Data2VecVisionConfig"),zAe.forEach(t),fYe=r(dw," (Data2VecVision model)"),dw.forEach(t),mYe=i(L),dm=n(L,"LI",{});var cw=s(dm);pne=n(cw,"STRONG",{});var QAe=s(pne);gYe=r(QAe,"deberta"),QAe.forEach(t),hYe=r(cw," \u2014 "),uR=n(cw,"A",{href:!0});var WAe=s(uR);pYe=r(WAe,"DebertaConfig"),WAe.forEach(t),_Ye=r(cw," (DeBERTa model)"),cw.forEach(t),uYe=i(L),cm=n(L,"LI",{});var fw=s(cm);_ne=n(fw,"STRONG",{});var HAe=s(_ne);bYe=r(HAe,"deberta-v2"),HAe.forEach(t),vYe=r(fw," \u2014 "),bR=n(fw,"A",{href:!0});var UAe=s(bR);FYe=r(UAe,"DebertaV2Config"),UAe.forEach(t),TYe=r(fw," (DeBERTa-v2 model)"),fw.forEach(t),MYe=i(L),fm=n(L,"LI",{});var mw=s(fm);une=n(mw,"STRONG",{});var pat=s(une);EYe=r(pat,"decision_transformer"),pat.forEach(t),CYe=r(mw," \u2014 "),vR=n(mw,"A",{href:!0});var _at=s(vR);wYe=r(_at,"DecisionTransformerConfig"),_at.forEach(t),AYe=r(mw," (Decision Transformer model)"),mw.forEach(t),LYe=i(L),mm=n(L,"LI",{});var JAe=s(mm);bne=n(JAe,"STRONG",{});var uat=s(bne);yYe=r(uat,"deit"),uat.forEach(t),xYe=r(JAe," \u2014 "),FR=n(JAe,"A",{href:!0});var bat=s(FR);$Ye=r(bat,"DeiTConfig"),bat.forEach(t),kYe=r(JAe," (DeiT model)"),JAe.forEach(t),SYe=i(L),gm=n(L,"LI",{});var YAe=s(gm);vne=n(YAe,"STRONG",{});var vat=s(vne);RYe=r(vat,"detr"),vat.forEach(t),PYe=r(YAe," \u2014 "),TR=n(YAe,"A",{href:!0});var Fat=s(TR);BYe=r(Fat,"DetrConfig"),Fat.forEach(t),NYe=r(YAe," (DETR model)"),YAe.forEach(t),IYe=i(L),hm=n(L,"LI",{});var KAe=s(hm);Fne=n(KAe,"STRONG",{});var Tat=s(Fne);qYe=r(Tat,"distilbert"),Tat.forEach(t),jYe=r(KAe," \u2014 "),MR=n(KAe,"A",{href:!0});var Mat=s(MR);DYe=r(Mat,"DistilBertConfig"),Mat.forEach(t),GYe=r(KAe," (DistilBERT model)"),KAe.forEach(t),OYe=i(L),pm=n(L,"LI",{});var ZAe=s(pm);Tne=n(ZAe,"STRONG",{});var Eat=s(Tne);VYe=r(Eat,"dpr"),Eat.forEach(t),XYe=r(ZAe," \u2014 "),ER=n(ZAe,"A",{href:!0});var Cat=s(ER);zYe=r(Cat,"DPRConfig"),Cat.forEach(t),QYe=r(ZAe," (DPR model)"),ZAe.forEach(t),WYe=i(L),_m=n(L,"LI",{});var eLe=s(_m);Mne=n(eLe,"STRONG",{});var wat=s(Mne);HYe=r(wat,"dpt"),wat.forEach(t),UYe=r(eLe," \u2014 "),CR=n(eLe,"A",{href:!0});var Aat=s(CR);JYe=r(Aat,"DPTConfig"),Aat.forEach(t),YYe=r(eLe," (DPT model)"),eLe.forEach(t),KYe=i(L),um=n(L,"LI",{});var oLe=s(um);Ene=n(oLe,"STRONG",{});var Lat=s(Ene);ZYe=r(Lat,"electra"),Lat.forEach(t),eKe=r(oLe," \u2014 "),wR=n(oLe,"A",{href:!0});var yat=s(wR);oKe=r(yat,"ElectraConfig"),yat.forEach(t),rKe=r(oLe," (ELECTRA model)"),oLe.forEach(t),tKe=i(L),bm=n(L,"LI",{});var rLe=s(bm);Cne=n(rLe,"STRONG",{});var xat=s(Cne);aKe=r(xat,"encoder-decoder"),xat.forEach(t),nKe=r(rLe," \u2014 "),AR=n(rLe,"A",{href:!0});var $at=s(AR);sKe=r($at,"EncoderDecoderConfig"),$at.forEach(t),lKe=r(rLe," (Encoder decoder model)"),rLe.forEach(t),iKe=i(L),vm=n(L,"LI",{});var tLe=s(vm);wne=n(tLe,"STRONG",{});var kat=s(wne);dKe=r(kat,"flaubert"),kat.forEach(t),cKe=r(tLe," \u2014 "),LR=n(tLe,"A",{href:!0});var Sat=s(LR);fKe=r(Sat,"FlaubertConfig"),Sat.forEach(t),mKe=r(tLe," (FlauBERT model)"),tLe.forEach(t),gKe=i(L),Fm=n(L,"LI",{});var aLe=s(Fm);Ane=n(aLe,"STRONG",{});var Rat=s(Ane);hKe=r(Rat,"flava"),Rat.forEach(t),pKe=r(aLe," \u2014 "),yR=n(aLe,"A",{href:!0});var Pat=s(yR);_Ke=r(Pat,"FlavaConfig"),Pat.forEach(t),uKe=r(aLe," (FLAVA model)"),aLe.forEach(t),bKe=i(L),Tm=n(L,"LI",{});var nLe=s(Tm);Lne=n(nLe,"STRONG",{});var Bat=s(Lne);vKe=r(Bat,"fnet"),Bat.forEach(t),FKe=r(nLe," \u2014 "),xR=n(nLe,"A",{href:!0});var Nat=s(xR);TKe=r(Nat,"FNetConfig"),Nat.forEach(t),MKe=r(nLe," (FNet model)"),nLe.forEach(t),EKe=i(L),Mm=n(L,"LI",{});var sLe=s(Mm);yne=n(sLe,"STRONG",{});var Iat=s(yne);CKe=r(Iat,"fsmt"),Iat.forEach(t),wKe=r(sLe," \u2014 "),$R=n(sLe,"A",{href:!0});var qat=s($R);AKe=r(qat,"FSMTConfig"),qat.forEach(t),LKe=r(sLe," (FairSeq Machine-Translation model)"),sLe.forEach(t),yKe=i(L),Em=n(L,"LI",{});var lLe=s(Em);xne=n(lLe,"STRONG",{});var jat=s(xne);xKe=r(jat,"funnel"),jat.forEach(t),$Ke=r(lLe," \u2014 "),kR=n(lLe,"A",{href:!0});var Dat=s(kR);kKe=r(Dat,"FunnelConfig"),Dat.forEach(t),SKe=r(lLe," (Funnel Transformer model)"),lLe.forEach(t),RKe=i(L),Cm=n(L,"LI",{});var iLe=s(Cm);$ne=n(iLe,"STRONG",{});var Gat=s($ne);PKe=r(Gat,"glpn"),Gat.forEach(t),BKe=r(iLe," \u2014 "),SR=n(iLe,"A",{href:!0});var Oat=s(SR);NKe=r(Oat,"GLPNConfig"),Oat.forEach(t),IKe=r(iLe," (GLPN model)"),iLe.forEach(t),qKe=i(L),wm=n(L,"LI",{});var dLe=s(wm);kne=n(dLe,"STRONG",{});var Vat=s(kne);jKe=r(Vat,"gpt2"),Vat.forEach(t),DKe=r(dLe," \u2014 "),RR=n(dLe,"A",{href:!0});var Xat=s(RR);GKe=r(Xat,"GPT2Config"),Xat.forEach(t),OKe=r(dLe," (OpenAI GPT-2 model)"),dLe.forEach(t),VKe=i(L),Am=n(L,"LI",{});var cLe=s(Am);Sne=n(cLe,"STRONG",{});var zat=s(Sne);XKe=r(zat,"gpt_neo"),zat.forEach(t),zKe=r(cLe," \u2014 "),PR=n(cLe,"A",{href:!0});var Qat=s(PR);QKe=r(Qat,"GPTNeoConfig"),Qat.forEach(t),WKe=r(cLe," (GPT Neo model)"),cLe.forEach(t),HKe=i(L),Lm=n(L,"LI",{});var fLe=s(Lm);Rne=n(fLe,"STRONG",{});var Wat=s(Rne);UKe=r(Wat,"gpt_neox"),Wat.forEach(t),JKe=r(fLe," \u2014 "),BR=n(fLe,"A",{href:!0});var Hat=s(BR);YKe=r(Hat,"GPTNeoXConfig"),Hat.forEach(t),KKe=r(fLe," (GPT NeoX model)"),fLe.forEach(t),ZKe=i(L),ym=n(L,"LI",{});var mLe=s(ym);Pne=n(mLe,"STRONG",{});var Uat=s(Pne);eZe=r(Uat,"gptj"),Uat.forEach(t),oZe=r(mLe," \u2014 "),NR=n(mLe,"A",{href:!0});var Jat=s(NR);rZe=r(Jat,"GPTJConfig"),Jat.forEach(t),tZe=r(mLe," (GPT-J model)"),mLe.forEach(t),aZe=i(L),xm=n(L,"LI",{});var gLe=s(xm);Bne=n(gLe,"STRONG",{});var Yat=s(Bne);nZe=r(Yat,"groupvit"),Yat.forEach(t),sZe=r(gLe," \u2014 "),IR=n(gLe,"A",{href:!0});var Kat=s(IR);lZe=r(Kat,"GroupViTConfig"),Kat.forEach(t),iZe=r(gLe," (GroupViT model)"),gLe.forEach(t),dZe=i(L),$m=n(L,"LI",{});var hLe=s($m);Nne=n(hLe,"STRONG",{});var Zat=s(Nne);cZe=r(Zat,"hubert"),Zat.forEach(t),fZe=r(hLe," \u2014 "),qR=n(hLe,"A",{href:!0});var ent=s(qR);mZe=r(ent,"HubertConfig"),ent.forEach(t),gZe=r(hLe," (Hubert model)"),hLe.forEach(t),hZe=i(L),km=n(L,"LI",{});var pLe=s(km);Ine=n(pLe,"STRONG",{});var ont=s(Ine);pZe=r(ont,"ibert"),ont.forEach(t),_Ze=r(pLe," \u2014 "),jR=n(pLe,"A",{href:!0});var rnt=s(jR);uZe=r(rnt,"IBertConfig"),rnt.forEach(t),bZe=r(pLe," (I-BERT model)"),pLe.forEach(t),vZe=i(L),Sm=n(L,"LI",{});var _Le=s(Sm);qne=n(_Le,"STRONG",{});var tnt=s(qne);FZe=r(tnt,"imagegpt"),tnt.forEach(t),TZe=r(_Le," \u2014 "),DR=n(_Le,"A",{href:!0});var ant=s(DR);MZe=r(ant,"ImageGPTConfig"),ant.forEach(t),EZe=r(_Le," (ImageGPT model)"),_Le.forEach(t),CZe=i(L),Rm=n(L,"LI",{});var uLe=s(Rm);jne=n(uLe,"STRONG",{});var nnt=s(jne);wZe=r(nnt,"jukebox"),nnt.forEach(t),AZe=r(uLe," \u2014 "),GR=n(uLe,"A",{href:!0});var snt=s(GR);LZe=r(snt,"JukeboxConfig"),snt.forEach(t),yZe=r(uLe," (Jukebox model)"),uLe.forEach(t),xZe=i(L),Pm=n(L,"LI",{});var bLe=s(Pm);Dne=n(bLe,"STRONG",{});var lnt=s(Dne);$Ze=r(lnt,"layoutlm"),lnt.forEach(t),kZe=r(bLe," \u2014 "),OR=n(bLe,"A",{href:!0});var int=s(OR);SZe=r(int,"LayoutLMConfig"),int.forEach(t),RZe=r(bLe," (LayoutLM model)"),bLe.forEach(t),PZe=i(L),Bm=n(L,"LI",{});var vLe=s(Bm);Gne=n(vLe,"STRONG",{});var dnt=s(Gne);BZe=r(dnt,"layoutlmv2"),dnt.forEach(t),NZe=r(vLe," \u2014 "),VR=n(vLe,"A",{href:!0});var cnt=s(VR);IZe=r(cnt,"LayoutLMv2Config"),cnt.forEach(t),qZe=r(vLe," (LayoutLMv2 model)"),vLe.forEach(t),jZe=i(L),Nm=n(L,"LI",{});var FLe=s(Nm);One=n(FLe,"STRONG",{});var fnt=s(One);DZe=r(fnt,"layoutlmv3"),fnt.forEach(t),GZe=r(FLe," \u2014 "),XR=n(FLe,"A",{href:!0});var mnt=s(XR);OZe=r(mnt,"LayoutLMv3Config"),mnt.forEach(t),VZe=r(FLe," (LayoutLMv3 model)"),FLe.forEach(t),XZe=i(L),Im=n(L,"LI",{});var TLe=s(Im);Vne=n(TLe,"STRONG",{});var gnt=s(Vne);zZe=r(gnt,"led"),gnt.forEach(t),QZe=r(TLe," \u2014 "),zR=n(TLe,"A",{href:!0});var hnt=s(zR);WZe=r(hnt,"LEDConfig"),hnt.forEach(t),HZe=r(TLe," (LED model)"),TLe.forEach(t),UZe=i(L),qm=n(L,"LI",{});var MLe=s(qm);Xne=n(MLe,"STRONG",{});var pnt=s(Xne);JZe=r(pnt,"levit"),pnt.forEach(t),YZe=r(MLe," \u2014 "),QR=n(MLe,"A",{href:!0});var _nt=s(QR);KZe=r(_nt,"LevitConfig"),_nt.forEach(t),ZZe=r(MLe," (LeViT model)"),MLe.forEach(t),eeo=i(L),jm=n(L,"LI",{});var ELe=s(jm);zne=n(ELe,"STRONG",{});var unt=s(zne);oeo=r(unt,"longformer"),unt.forEach(t),reo=r(ELe," \u2014 "),WR=n(ELe,"A",{href:!0});var bnt=s(WR);teo=r(bnt,"LongformerConfig"),bnt.forEach(t),aeo=r(ELe," (Longformer model)"),ELe.forEach(t),neo=i(L),Dm=n(L,"LI",{});var CLe=s(Dm);Qne=n(CLe,"STRONG",{});var vnt=s(Qne);seo=r(vnt,"longt5"),vnt.forEach(t),leo=r(CLe," \u2014 "),HR=n(CLe,"A",{href:!0});var Fnt=s(HR);ieo=r(Fnt,"LongT5Config"),Fnt.forEach(t),deo=r(CLe," (LongT5 model)"),CLe.forEach(t),ceo=i(L),Gm=n(L,"LI",{});var wLe=s(Gm);Wne=n(wLe,"STRONG",{});var Tnt=s(Wne);feo=r(Tnt,"luke"),Tnt.forEach(t),meo=r(wLe," \u2014 "),UR=n(wLe,"A",{href:!0});var Mnt=s(UR);geo=r(Mnt,"LukeConfig"),Mnt.forEach(t),heo=r(wLe," (LUKE model)"),wLe.forEach(t),peo=i(L),Om=n(L,"LI",{});var ALe=s(Om);Hne=n(ALe,"STRONG",{});var Ent=s(Hne);_eo=r(Ent,"lxmert"),Ent.forEach(t),ueo=r(ALe," \u2014 "),JR=n(ALe,"A",{href:!0});var Cnt=s(JR);beo=r(Cnt,"LxmertConfig"),Cnt.forEach(t),veo=r(ALe," (LXMERT model)"),ALe.forEach(t),Feo=i(L),Vm=n(L,"LI",{});var LLe=s(Vm);Une=n(LLe,"STRONG",{});var wnt=s(Une);Teo=r(wnt,"m2m_100"),wnt.forEach(t),Meo=r(LLe," \u2014 "),YR=n(LLe,"A",{href:!0});var Ant=s(YR);Eeo=r(Ant,"M2M100Config"),Ant.forEach(t),Ceo=r(LLe," (M2M100 model)"),LLe.forEach(t),weo=i(L),Xm=n(L,"LI",{});var yLe=s(Xm);Jne=n(yLe,"STRONG",{});var Lnt=s(Jne);Aeo=r(Lnt,"marian"),Lnt.forEach(t),Leo=r(yLe," \u2014 "),KR=n(yLe,"A",{href:!0});var ynt=s(KR);yeo=r(ynt,"MarianConfig"),ynt.forEach(t),xeo=r(yLe," (Marian model)"),yLe.forEach(t),$eo=i(L),zm=n(L,"LI",{});var xLe=s(zm);Yne=n(xLe,"STRONG",{});var xnt=s(Yne);keo=r(xnt,"maskformer"),xnt.forEach(t),Seo=r(xLe," \u2014 "),ZR=n(xLe,"A",{href:!0});var $nt=s(ZR);Reo=r($nt,"MaskFormerConfig"),$nt.forEach(t),Peo=r(xLe," (MaskFormer model)"),xLe.forEach(t),Beo=i(L),Qm=n(L,"LI",{});var $Le=s(Qm);Kne=n($Le,"STRONG",{});var knt=s(Kne);Neo=r(knt,"mbart"),knt.forEach(t),Ieo=r($Le," \u2014 "),eP=n($Le,"A",{href:!0});var Snt=s(eP);qeo=r(Snt,"MBartConfig"),Snt.forEach(t),jeo=r($Le," (mBART model)"),$Le.forEach(t),Deo=i(L),Wm=n(L,"LI",{});var kLe=s(Wm);Zne=n(kLe,"STRONG",{});var Rnt=s(Zne);Geo=r(Rnt,"mctct"),Rnt.forEach(t),Oeo=r(kLe," \u2014 "),oP=n(kLe,"A",{href:!0});var Pnt=s(oP);Veo=r(Pnt,"MCTCTConfig"),Pnt.forEach(t),Xeo=r(kLe," (M-CTC-T model)"),kLe.forEach(t),zeo=i(L),Hm=n(L,"LI",{});var SLe=s(Hm);ese=n(SLe,"STRONG",{});var Bnt=s(ese);Qeo=r(Bnt,"megatron-bert"),Bnt.forEach(t),Weo=r(SLe," \u2014 "),rP=n(SLe,"A",{href:!0});var Nnt=s(rP);Heo=r(Nnt,"MegatronBertConfig"),Nnt.forEach(t),Ueo=r(SLe," (Megatron-BERT model)"),SLe.forEach(t),Jeo=i(L),Um=n(L,"LI",{});var RLe=s(Um);ose=n(RLe,"STRONG",{});var Int=s(ose);Yeo=r(Int,"mobilebert"),Int.forEach(t),Keo=r(RLe," \u2014 "),tP=n(RLe,"A",{href:!0});var qnt=s(tP);Zeo=r(qnt,"MobileBertConfig"),qnt.forEach(t),eoo=r(RLe," (MobileBERT model)"),RLe.forEach(t),ooo=i(L),Jm=n(L,"LI",{});var PLe=s(Jm);rse=n(PLe,"STRONG",{});var jnt=s(rse);roo=r(jnt,"mobilevit"),jnt.forEach(t),too=r(PLe," \u2014 "),aP=n(PLe,"A",{href:!0});var Dnt=s(aP);aoo=r(Dnt,"MobileViTConfig"),Dnt.forEach(t),noo=r(PLe," (MobileViT model)"),PLe.forEach(t),soo=i(L),Ym=n(L,"LI",{});var BLe=s(Ym);tse=n(BLe,"STRONG",{});var Gnt=s(tse);loo=r(Gnt,"mpnet"),Gnt.forEach(t),ioo=r(BLe," \u2014 "),nP=n(BLe,"A",{href:!0});var Ont=s(nP);doo=r(Ont,"MPNetConfig"),Ont.forEach(t),coo=r(BLe," (MPNet model)"),BLe.forEach(t),foo=i(L),Km=n(L,"LI",{});var NLe=s(Km);ase=n(NLe,"STRONG",{});var Vnt=s(ase);moo=r(Vnt,"mt5"),Vnt.forEach(t),goo=r(NLe," \u2014 "),sP=n(NLe,"A",{href:!0});var Xnt=s(sP);hoo=r(Xnt,"MT5Config"),Xnt.forEach(t),poo=r(NLe," (MT5 model)"),NLe.forEach(t),_oo=i(L),Zm=n(L,"LI",{});var ILe=s(Zm);nse=n(ILe,"STRONG",{});var znt=s(nse);uoo=r(znt,"mvp"),znt.forEach(t),boo=r(ILe," \u2014 "),lP=n(ILe,"A",{href:!0});var Qnt=s(lP);voo=r(Qnt,"MvpConfig"),Qnt.forEach(t),Foo=r(ILe," (MVP model)"),ILe.forEach(t),Too=i(L),eg=n(L,"LI",{});var qLe=s(eg);sse=n(qLe,"STRONG",{});var Wnt=s(sse);Moo=r(Wnt,"nezha"),Wnt.forEach(t),Eoo=r(qLe," \u2014 "),iP=n(qLe,"A",{href:!0});var Hnt=s(iP);Coo=r(Hnt,"NezhaConfig"),Hnt.forEach(t),woo=r(qLe," (Nezha model)"),qLe.forEach(t),Aoo=i(L),og=n(L,"LI",{});var jLe=s(og);lse=n(jLe,"STRONG",{});var Unt=s(lse);Loo=r(Unt,"nystromformer"),Unt.forEach(t),yoo=r(jLe," \u2014 "),dP=n(jLe,"A",{href:!0});var Jnt=s(dP);xoo=r(Jnt,"NystromformerConfig"),Jnt.forEach(t),$oo=r(jLe," (Nystr\xF6mformer model)"),jLe.forEach(t),koo=i(L),rg=n(L,"LI",{});var DLe=s(rg);ise=n(DLe,"STRONG",{});var Ynt=s(ise);Soo=r(Ynt,"openai-gpt"),Ynt.forEach(t),Roo=r(DLe," \u2014 "),cP=n(DLe,"A",{href:!0});var Knt=s(cP);Poo=r(Knt,"OpenAIGPTConfig"),Knt.forEach(t),Boo=r(DLe," (OpenAI GPT model)"),DLe.forEach(t),Noo=i(L),tg=n(L,"LI",{});var GLe=s(tg);dse=n(GLe,"STRONG",{});var Znt=s(dse);Ioo=r(Znt,"opt"),Znt.forEach(t),qoo=r(GLe," \u2014 "),fP=n(GLe,"A",{href:!0});var est=s(fP);joo=r(est,"OPTConfig"),est.forEach(t),Doo=r(GLe," (OPT model)"),GLe.forEach(t),Goo=i(L),ag=n(L,"LI",{});var OLe=s(ag);cse=n(OLe,"STRONG",{});var ost=s(cse);Ooo=r(ost,"pegasus"),ost.forEach(t),Voo=r(OLe," \u2014 "),mP=n(OLe,"A",{href:!0});var rst=s(mP);Xoo=r(rst,"PegasusConfig"),rst.forEach(t),zoo=r(OLe," (Pegasus model)"),OLe.forEach(t),Qoo=i(L),ng=n(L,"LI",{});var VLe=s(ng);fse=n(VLe,"STRONG",{});var tst=s(fse);Woo=r(tst,"perceiver"),tst.forEach(t),Hoo=r(VLe," \u2014 "),gP=n(VLe,"A",{href:!0});var ast=s(gP);Uoo=r(ast,"PerceiverConfig"),ast.forEach(t),Joo=r(VLe," (Perceiver model)"),VLe.forEach(t),Yoo=i(L),sg=n(L,"LI",{});var XLe=s(sg);mse=n(XLe,"STRONG",{});var nst=s(mse);Koo=r(nst,"plbart"),nst.forEach(t),Zoo=r(XLe," \u2014 "),hP=n(XLe,"A",{href:!0});var sst=s(hP);ero=r(sst,"PLBartConfig"),sst.forEach(t),oro=r(XLe," (PLBart model)"),XLe.forEach(t),rro=i(L),lg=n(L,"LI",{});var zLe=s(lg);gse=n(zLe,"STRONG",{});var lst=s(gse);tro=r(lst,"poolformer"),lst.forEach(t),aro=r(zLe," \u2014 "),pP=n(zLe,"A",{href:!0});var ist=s(pP);nro=r(ist,"PoolFormerConfig"),ist.forEach(t),sro=r(zLe," (PoolFormer model)"),zLe.forEach(t),lro=i(L),ig=n(L,"LI",{});var QLe=s(ig);hse=n(QLe,"STRONG",{});var dst=s(hse);iro=r(dst,"prophetnet"),dst.forEach(t),dro=r(QLe," \u2014 "),_P=n(QLe,"A",{href:!0});var cst=s(_P);cro=r(cst,"ProphetNetConfig"),cst.forEach(t),fro=r(QLe," (ProphetNet model)"),QLe.forEach(t),mro=i(L),dg=n(L,"LI",{});var WLe=s(dg);pse=n(WLe,"STRONG",{});var fst=s(pse);gro=r(fst,"qdqbert"),fst.forEach(t),hro=r(WLe," \u2014 "),uP=n(WLe,"A",{href:!0});var mst=s(uP);pro=r(mst,"QDQBertConfig"),mst.forEach(t),_ro=r(WLe," (QDQBert model)"),WLe.forEach(t),uro=i(L),cg=n(L,"LI",{});var HLe=s(cg);_se=n(HLe,"STRONG",{});var gst=s(_se);bro=r(gst,"rag"),gst.forEach(t),vro=r(HLe," \u2014 "),bP=n(HLe,"A",{href:!0});var hst=s(bP);Fro=r(hst,"RagConfig"),hst.forEach(t),Tro=r(HLe," (RAG model)"),HLe.forEach(t),Mro=i(L),fg=n(L,"LI",{});var ULe=s(fg);use=n(ULe,"STRONG",{});var pst=s(use);Ero=r(pst,"realm"),pst.forEach(t),Cro=r(ULe," \u2014 "),vP=n(ULe,"A",{href:!0});var _st=s(vP);wro=r(_st,"RealmConfig"),_st.forEach(t),Aro=r(ULe," (REALM model)"),ULe.forEach(t),Lro=i(L),mg=n(L,"LI",{});var JLe=s(mg);bse=n(JLe,"STRONG",{});var ust=s(bse);yro=r(ust,"reformer"),ust.forEach(t),xro=r(JLe," \u2014 "),FP=n(JLe,"A",{href:!0});var bst=s(FP);$ro=r(bst,"ReformerConfig"),bst.forEach(t),kro=r(JLe," (Reformer model)"),JLe.forEach(t),Sro=i(L),gg=n(L,"LI",{});var YLe=s(gg);vse=n(YLe,"STRONG",{});var vst=s(vse);Rro=r(vst,"regnet"),vst.forEach(t),Pro=r(YLe," \u2014 "),TP=n(YLe,"A",{href:!0});var Fst=s(TP);Bro=r(Fst,"RegNetConfig"),Fst.forEach(t),Nro=r(YLe," (RegNet model)"),YLe.forEach(t),Iro=i(L),hg=n(L,"LI",{});var KLe=s(hg);Fse=n(KLe,"STRONG",{});var Tst=s(Fse);qro=r(Tst,"rembert"),Tst.forEach(t),jro=r(KLe," \u2014 "),MP=n(KLe,"A",{href:!0});var Mst=s(MP);Dro=r(Mst,"RemBertConfig"),Mst.forEach(t),Gro=r(KLe," (RemBERT model)"),KLe.forEach(t),Oro=i(L),pg=n(L,"LI",{});var ZLe=s(pg);Tse=n(ZLe,"STRONG",{});var Est=s(Tse);Vro=r(Est,"resnet"),Est.forEach(t),Xro=r(ZLe," \u2014 "),EP=n(ZLe,"A",{href:!0});var Cst=s(EP);zro=r(Cst,"ResNetConfig"),Cst.forEach(t),Qro=r(ZLe," (ResNet model)"),ZLe.forEach(t),Wro=i(L),_g=n(L,"LI",{});var eye=s(_g);Mse=n(eye,"STRONG",{});var wst=s(Mse);Hro=r(wst,"retribert"),wst.forEach(t),Uro=r(eye," \u2014 "),CP=n(eye,"A",{href:!0});var Ast=s(CP);Jro=r(Ast,"RetriBertConfig"),Ast.forEach(t),Yro=r(eye," (RetriBERT model)"),eye.forEach(t),Kro=i(L),ug=n(L,"LI",{});var oye=s(ug);Ese=n(oye,"STRONG",{});var Lst=s(Ese);Zro=r(Lst,"roberta"),Lst.forEach(t),eto=r(oye," \u2014 "),wP=n(oye,"A",{href:!0});var yst=s(wP);oto=r(yst,"RobertaConfig"),yst.forEach(t),rto=r(oye," (RoBERTa model)"),oye.forEach(t),tto=i(L),bg=n(L,"LI",{});var rye=s(bg);Cse=n(rye,"STRONG",{});var xst=s(Cse);ato=r(xst,"roformer"),xst.forEach(t),nto=r(rye," \u2014 "),AP=n(rye,"A",{href:!0});var $st=s(AP);sto=r($st,"RoFormerConfig"),$st.forEach(t),lto=r(rye," (RoFormer model)"),rye.forEach(t),ito=i(L),vg=n(L,"LI",{});var tye=s(vg);wse=n(tye,"STRONG",{});var kst=s(wse);dto=r(kst,"segformer"),kst.forEach(t),cto=r(tye," \u2014 "),LP=n(tye,"A",{href:!0});var Sst=s(LP);fto=r(Sst,"SegformerConfig"),Sst.forEach(t),mto=r(tye," (SegFormer model)"),tye.forEach(t),gto=i(L),Fg=n(L,"LI",{});var aye=s(Fg);Ase=n(aye,"STRONG",{});var Rst=s(Ase);hto=r(Rst,"sew"),Rst.forEach(t),pto=r(aye," \u2014 "),yP=n(aye,"A",{href:!0});var Pst=s(yP);_to=r(Pst,"SEWConfig"),Pst.forEach(t),uto=r(aye," (SEW model)"),aye.forEach(t),bto=i(L),Tg=n(L,"LI",{});var nye=s(Tg);Lse=n(nye,"STRONG",{});var Bst=s(Lse);vto=r(Bst,"sew-d"),Bst.forEach(t),Fto=r(nye," \u2014 "),xP=n(nye,"A",{href:!0});var Nst=s(xP);Tto=r(Nst,"SEWDConfig"),Nst.forEach(t),Mto=r(nye," (SEW-D model)"),nye.forEach(t),Eto=i(L),Mg=n(L,"LI",{});var sye=s(Mg);yse=n(sye,"STRONG",{});var Ist=s(yse);Cto=r(Ist,"speech-encoder-decoder"),Ist.forEach(t),wto=r(sye," \u2014 "),$P=n(sye,"A",{href:!0});var qst=s($P);Ato=r(qst,"SpeechEncoderDecoderConfig"),qst.forEach(t),Lto=r(sye," (Speech Encoder decoder model)"),sye.forEach(t),yto=i(L),Eg=n(L,"LI",{});var lye=s(Eg);xse=n(lye,"STRONG",{});var jst=s(xse);xto=r(jst,"speech_to_text"),jst.forEach(t),$to=r(lye," \u2014 "),kP=n(lye,"A",{href:!0});var Dst=s(kP);kto=r(Dst,"Speech2TextConfig"),Dst.forEach(t),Sto=r(lye," (Speech2Text model)"),lye.forEach(t),Rto=i(L),Cg=n(L,"LI",{});var iye=s(Cg);$se=n(iye,"STRONG",{});var Gst=s($se);Pto=r(Gst,"speech_to_text_2"),Gst.forEach(t),Bto=r(iye," \u2014 "),SP=n(iye,"A",{href:!0});var Ost=s(SP);Nto=r(Ost,"Speech2Text2Config"),Ost.forEach(t),Ito=r(iye," (Speech2Text2 model)"),iye.forEach(t),qto=i(L),wg=n(L,"LI",{});var dye=s(wg);kse=n(dye,"STRONG",{});var Vst=s(kse);jto=r(Vst,"splinter"),Vst.forEach(t),Dto=r(dye," \u2014 "),RP=n(dye,"A",{href:!0});var Xst=s(RP);Gto=r(Xst,"SplinterConfig"),Xst.forEach(t),Oto=r(dye," (Splinter model)"),dye.forEach(t),Vto=i(L),Ag=n(L,"LI",{});var cye=s(Ag);Sse=n(cye,"STRONG",{});var zst=s(Sse);Xto=r(zst,"squeezebert"),zst.forEach(t),zto=r(cye," \u2014 "),PP=n(cye,"A",{href:!0});var Qst=s(PP);Qto=r(Qst,"SqueezeBertConfig"),Qst.forEach(t),Wto=r(cye," (SqueezeBERT model)"),cye.forEach(t),Hto=i(L),Lg=n(L,"LI",{});var fye=s(Lg);Rse=n(fye,"STRONG",{});var Wst=s(Rse);Uto=r(Wst,"swin"),Wst.forEach(t),Jto=r(fye," \u2014 "),BP=n(fye,"A",{href:!0});var Hst=s(BP);Yto=r(Hst,"SwinConfig"),Hst.forEach(t),Kto=r(fye," (Swin Transformer model)"),fye.forEach(t),Zto=i(L),yg=n(L,"LI",{});var mye=s(yg);Pse=n(mye,"STRONG",{});var Ust=s(Pse);eao=r(Ust,"t5"),Ust.forEach(t),oao=r(mye," \u2014 "),NP=n(mye,"A",{href:!0});var Jst=s(NP);rao=r(Jst,"T5Config"),Jst.forEach(t),tao=r(mye," (T5 model)"),mye.forEach(t),aao=i(L),xg=n(L,"LI",{});var gye=s(xg);Bse=n(gye,"STRONG",{});var Yst=s(Bse);nao=r(Yst,"tapas"),Yst.forEach(t),sao=r(gye," \u2014 "),IP=n(gye,"A",{href:!0});var Kst=s(IP);lao=r(Kst,"TapasConfig"),Kst.forEach(t),iao=r(gye," (TAPAS model)"),gye.forEach(t),dao=i(L),$g=n(L,"LI",{});var hye=s($g);Nse=n(hye,"STRONG",{});var Zst=s(Nse);cao=r(Zst,"trajectory_transformer"),Zst.forEach(t),fao=r(hye," \u2014 "),qP=n(hye,"A",{href:!0});var elt=s(qP);mao=r(elt,"TrajectoryTransformerConfig"),elt.forEach(t),gao=r(hye," (Trajectory Transformer model)"),hye.forEach(t),hao=i(L),kg=n(L,"LI",{});var pye=s(kg);Ise=n(pye,"STRONG",{});var olt=s(Ise);pao=r(olt,"transfo-xl"),olt.forEach(t),_ao=r(pye," \u2014 "),jP=n(pye,"A",{href:!0});var rlt=s(jP);uao=r(rlt,"TransfoXLConfig"),rlt.forEach(t),bao=r(pye," (Transformer-XL model)"),pye.forEach(t),vao=i(L),Sg=n(L,"LI",{});var _ye=s(Sg);qse=n(_ye,"STRONG",{});var tlt=s(qse);Fao=r(tlt,"trocr"),tlt.forEach(t),Tao=r(_ye," \u2014 "),DP=n(_ye,"A",{href:!0});var alt=s(DP);Mao=r(alt,"TrOCRConfig"),alt.forEach(t),Eao=r(_ye," (TrOCR model)"),_ye.forEach(t),Cao=i(L),Rg=n(L,"LI",{});var uye=s(Rg);jse=n(uye,"STRONG",{});var nlt=s(jse);wao=r(nlt,"unispeech"),nlt.forEach(t),Aao=r(uye," \u2014 "),GP=n(uye,"A",{href:!0});var slt=s(GP);Lao=r(slt,"UniSpeechConfig"),slt.forEach(t),yao=r(uye," (UniSpeech model)"),uye.forEach(t),xao=i(L),Pg=n(L,"LI",{});var bye=s(Pg);Dse=n(bye,"STRONG",{});var llt=s(Dse);$ao=r(llt,"unispeech-sat"),llt.forEach(t),kao=r(bye," \u2014 "),OP=n(bye,"A",{href:!0});var ilt=s(OP);Sao=r(ilt,"UniSpeechSatConfig"),ilt.forEach(t),Rao=r(bye," (UniSpeechSat model)"),bye.forEach(t),Pao=i(L),Bg=n(L,"LI",{});var vye=s(Bg);Gse=n(vye,"STRONG",{});var dlt=s(Gse);Bao=r(dlt,"van"),dlt.forEach(t),Nao=r(vye," \u2014 "),VP=n(vye,"A",{href:!0});var clt=s(VP);Iao=r(clt,"VanConfig"),clt.forEach(t),qao=r(vye," (VAN model)"),vye.forEach(t),jao=i(L),Ng=n(L,"LI",{});var Fye=s(Ng);Ose=n(Fye,"STRONG",{});var flt=s(Ose);Dao=r(flt,"vilt"),flt.forEach(t),Gao=r(Fye," \u2014 "),XP=n(Fye,"A",{href:!0});var mlt=s(XP);Oao=r(mlt,"ViltConfig"),mlt.forEach(t),Vao=r(Fye," (ViLT model)"),Fye.forEach(t),Xao=i(L),Ig=n(L,"LI",{});var Tye=s(Ig);Vse=n(Tye,"STRONG",{});var glt=s(Vse);zao=r(glt,"vision-encoder-decoder"),glt.forEach(t),Qao=r(Tye," \u2014 "),zP=n(Tye,"A",{href:!0});var hlt=s(zP);Wao=r(hlt,"VisionEncoderDecoderConfig"),hlt.forEach(t),Hao=r(Tye," (Vision Encoder decoder model)"),Tye.forEach(t),Uao=i(L),qg=n(L,"LI",{});var Mye=s(qg);Xse=n(Mye,"STRONG",{});var plt=s(Xse);Jao=r(plt,"vision-text-dual-encoder"),plt.forEach(t),Yao=r(Mye," \u2014 "),QP=n(Mye,"A",{href:!0});var _lt=s(QP);Kao=r(_lt,"VisionTextDualEncoderConfig"),_lt.forEach(t),Zao=r(Mye," (VisionTextDualEncoder model)"),Mye.forEach(t),eno=i(L),jg=n(L,"LI",{});var Eye=s(jg);zse=n(Eye,"STRONG",{});var ult=s(zse);ono=r(ult,"visual_bert"),ult.forEach(t),rno=r(Eye," \u2014 "),WP=n(Eye,"A",{href:!0});var blt=s(WP);tno=r(blt,"VisualBertConfig"),blt.forEach(t),ano=r(Eye," (VisualBERT model)"),Eye.forEach(t),nno=i(L),Dg=n(L,"LI",{});var Cye=s(Dg);Qse=n(Cye,"STRONG",{});var vlt=s(Qse);sno=r(vlt,"vit"),vlt.forEach(t),lno=r(Cye," \u2014 "),HP=n(Cye,"A",{href:!0});var Flt=s(HP);ino=r(Flt,"ViTConfig"),Flt.forEach(t),dno=r(Cye," (ViT model)"),Cye.forEach(t),cno=i(L),Gg=n(L,"LI",{});var wye=s(Gg);Wse=n(wye,"STRONG",{});var Tlt=s(Wse);fno=r(Tlt,"vit_mae"),Tlt.forEach(t),mno=r(wye," \u2014 "),UP=n(wye,"A",{href:!0});var Mlt=s(UP);gno=r(Mlt,"ViTMAEConfig"),Mlt.forEach(t),hno=r(wye," (ViTMAE model)"),wye.forEach(t),pno=i(L),Og=n(L,"LI",{});var Aye=s(Og);Hse=n(Aye,"STRONG",{});var Elt=s(Hse);_no=r(Elt,"wav2vec2"),Elt.forEach(t),uno=r(Aye," \u2014 "),JP=n(Aye,"A",{href:!0});var Clt=s(JP);bno=r(Clt,"Wav2Vec2Config"),Clt.forEach(t),vno=r(Aye," (Wav2Vec2 model)"),Aye.forEach(t),Fno=i(L),Vg=n(L,"LI",{});var Lye=s(Vg);Use=n(Lye,"STRONG",{});var wlt=s(Use);Tno=r(wlt,"wav2vec2-conformer"),wlt.forEach(t),Mno=r(Lye," \u2014 "),YP=n(Lye,"A",{href:!0});var Alt=s(YP);Eno=r(Alt,"Wav2Vec2ConformerConfig"),Alt.forEach(t),Cno=r(Lye," (Wav2Vec2-Conformer model)"),Lye.forEach(t),wno=i(L),Xg=n(L,"LI",{});var yye=s(Xg);Jse=n(yye,"STRONG",{});var Llt=s(Jse);Ano=r(Llt,"wavlm"),Llt.forEach(t),Lno=r(yye," \u2014 "),KP=n(yye,"A",{href:!0});var ylt=s(KP);yno=r(ylt,"WavLMConfig"),ylt.forEach(t),xno=r(yye," (WavLM model)"),yye.forEach(t),$no=i(L),zg=n(L,"LI",{});var xye=s(zg);Yse=n(xye,"STRONG",{});var xlt=s(Yse);kno=r(xlt,"xglm"),xlt.forEach(t),Sno=r(xye," \u2014 "),ZP=n(xye,"A",{href:!0});var $lt=s(ZP);Rno=r($lt,"XGLMConfig"),$lt.forEach(t),Pno=r(xye," (XGLM model)"),xye.forEach(t),Bno=i(L),Qg=n(L,"LI",{});var $ye=s(Qg);Kse=n($ye,"STRONG",{});var klt=s(Kse);Nno=r(klt,"xlm"),klt.forEach(t),Ino=r($ye," \u2014 "),eB=n($ye,"A",{href:!0});var Slt=s(eB);qno=r(Slt,"XLMConfig"),Slt.forEach(t),jno=r($ye," (XLM model)"),$ye.forEach(t),Dno=i(L),Wg=n(L,"LI",{});var kye=s(Wg);Zse=n(kye,"STRONG",{});var Rlt=s(Zse);Gno=r(Rlt,"xlm-prophetnet"),Rlt.forEach(t),Ono=r(kye," \u2014 "),oB=n(kye,"A",{href:!0});var Plt=s(oB);Vno=r(Plt,"XLMProphetNetConfig"),Plt.forEach(t),Xno=r(kye," (XLM-ProphetNet model)"),kye.forEach(t),zno=i(L),Hg=n(L,"LI",{});var Sye=s(Hg);ele=n(Sye,"STRONG",{});var Blt=s(ele);Qno=r(Blt,"xlm-roberta"),Blt.forEach(t),Wno=r(Sye," \u2014 "),rB=n(Sye,"A",{href:!0});var Nlt=s(rB);Hno=r(Nlt,"XLMRobertaConfig"),Nlt.forEach(t),Uno=r(Sye," (XLM-RoBERTa model)"),Sye.forEach(t),Jno=i(L),Ug=n(L,"LI",{});var Rye=s(Ug);ole=n(Rye,"STRONG",{});var Ilt=s(ole);Yno=r(Ilt,"xlm-roberta-xl"),Ilt.forEach(t),Kno=r(Rye," \u2014 "),tB=n(Rye,"A",{href:!0});var qlt=s(tB);Zno=r(qlt,"XLMRobertaXLConfig"),qlt.forEach(t),eso=r(Rye," (XLM-RoBERTa-XL model)"),Rye.forEach(t),oso=i(L),Jg=n(L,"LI",{});var Pye=s(Jg);rle=n(Pye,"STRONG",{});var jlt=s(rle);rso=r(jlt,"xlnet"),jlt.forEach(t),tso=r(Pye," \u2014 "),aB=n(Pye,"A",{href:!0});var Dlt=s(aB);aso=r(Dlt,"XLNetConfig"),Dlt.forEach(t),nso=r(Pye," (XLNet model)"),Pye.forEach(t),sso=i(L),Yg=n(L,"LI",{});var Bye=s(Yg);tle=n(Bye,"STRONG",{});var Glt=s(tle);lso=r(Glt,"yolos"),Glt.forEach(t),iso=r(Bye," \u2014 "),nB=n(Bye,"A",{href:!0});var Olt=s(nB);dso=r(Olt,"YolosConfig"),Olt.forEach(t),cso=r(Bye," (YOLOS model)"),Bye.forEach(t),fso=i(L),Kg=n(L,"LI",{});var Nye=s(Kg);ale=n(Nye,"STRONG",{});var Vlt=s(ale);mso=r(Vlt,"yoso"),Vlt.forEach(t),gso=r(Nye," \u2014 "),sB=n(Nye,"A",{href:!0});var Xlt=s(sB);hso=r(Xlt,"YosoConfig"),Xlt.forEach(t),pso=r(Nye," (YOSO model)"),Nye.forEach(t),L.forEach(t),_so=i(st),T(Zg.$$.fragment,st),st.forEach(t),uso=i(nt),eh=n(nt,"DIV",{class:!0});var SQe=s(eh);T(bL.$$.fragment,SQe),bso=i(SQe),nle=n(SQe,"P",{});var zlt=s(nle);vso=r(zlt,"Register a new configuration for this class."),zlt.forEach(t),SQe.forEach(t),nt.forEach(t),RXe=i(f),qi=n(f,"H2",{class:!0});var RQe=s(qi);oh=n(RQe,"A",{id:!0,class:!0,href:!0});var Qlt=s(oh);sle=n(Qlt,"SPAN",{});var Wlt=s(sle);T(vL.$$.fragment,Wlt),Wlt.forEach(t),Qlt.forEach(t),Fso=i(RQe),lle=n(RQe,"SPAN",{});var Hlt=s(lle);Tso=r(Hlt,"AutoTokenizer"),Hlt.forEach(t),RQe.forEach(t),PXe=i(f),Lo=n(f,"DIV",{class:!0});var Zs=s(Lo);T(FL.$$.fragment,Zs),Mso=i(Zs),TL=n(Zs,"P",{});var PQe=s(TL);Eso=r(PQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lB=n(PQe,"A",{href:!0});var Ult=s(lB);Cso=r(Ult,"AutoTokenizer.from_pretrained()"),Ult.forEach(t),wso=r(PQe," class method."),PQe.forEach(t),Aso=i(Zs),ML=n(Zs,"P",{});var BQe=s(ML);Lso=r(BQe,"This class cannot be instantiated directly using "),ile=n(BQe,"CODE",{});var Jlt=s(ile);yso=r(Jlt,"__init__()"),Jlt.forEach(t),xso=r(BQe," (throws an error)."),BQe.forEach(t),$so=i(Zs),yr=n(Zs,"DIV",{class:!0});var el=s(yr);T(EL.$$.fragment,el),kso=i(el),dle=n(el,"P",{});var Ylt=s(dle);Sso=r(Ylt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Ylt.forEach(t),Rso=i(el),Pa=n(el,"P",{});var gw=s(Pa);Pso=r(gw,"The tokenizer class to instantiate is selected based on the "),cle=n(gw,"CODE",{});var Klt=s(cle);Bso=r(Klt,"model_type"),Klt.forEach(t),Nso=r(gw,` property of the config object (either
passed as an argument or loaded from `),fle=n(gw,"CODE",{});var Zlt=s(fle);Iso=r(Zlt,"pretrained_model_name_or_path"),Zlt.forEach(t),qso=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mle=n(gw,"CODE",{});var eit=s(mle);jso=r(eit,"pretrained_model_name_or_path"),eit.forEach(t),Dso=r(gw,":"),gw.forEach(t),Gso=i(el),k=n(el,"UL",{});var S=s(k);jn=n(S,"LI",{});var xk=s(jn);gle=n(xk,"STRONG",{});var oit=s(gle);Oso=r(oit,"albert"),oit.forEach(t),Vso=r(xk," \u2014 "),iB=n(xk,"A",{href:!0});var rit=s(iB);Xso=r(rit,"AlbertTokenizer"),rit.forEach(t),zso=r(xk," or "),dB=n(xk,"A",{href:!0});var tit=s(dB);Qso=r(tit,"AlbertTokenizerFast"),tit.forEach(t),Wso=r(xk," (ALBERT model)"),xk.forEach(t),Hso=i(S),Dn=n(S,"LI",{});var $k=s(Dn);hle=n($k,"STRONG",{});var ait=s(hle);Uso=r(ait,"bart"),ait.forEach(t),Jso=r($k," \u2014 "),cB=n($k,"A",{href:!0});var nit=s(cB);Yso=r(nit,"BartTokenizer"),nit.forEach(t),Kso=r($k," or "),fB=n($k,"A",{href:!0});var sit=s(fB);Zso=r(sit,"BartTokenizerFast"),sit.forEach(t),elo=r($k," (BART model)"),$k.forEach(t),olo=i(S),Gn=n(S,"LI",{});var kk=s(Gn);ple=n(kk,"STRONG",{});var lit=s(ple);rlo=r(lit,"barthez"),lit.forEach(t),tlo=r(kk," \u2014 "),mB=n(kk,"A",{href:!0});var iit=s(mB);alo=r(iit,"BarthezTokenizer"),iit.forEach(t),nlo=r(kk," or "),gB=n(kk,"A",{href:!0});var dit=s(gB);slo=r(dit,"BarthezTokenizerFast"),dit.forEach(t),llo=r(kk," (BARThez model)"),kk.forEach(t),ilo=i(S),rh=n(S,"LI",{});var Iye=s(rh);_le=n(Iye,"STRONG",{});var cit=s(_le);dlo=r(cit,"bartpho"),cit.forEach(t),clo=r(Iye," \u2014 "),hB=n(Iye,"A",{href:!0});var fit=s(hB);flo=r(fit,"BartphoTokenizer"),fit.forEach(t),mlo=r(Iye," (BARTpho model)"),Iye.forEach(t),glo=i(S),On=n(S,"LI",{});var Sk=s(On);ule=n(Sk,"STRONG",{});var mit=s(ule);hlo=r(mit,"bert"),mit.forEach(t),plo=r(Sk," \u2014 "),pB=n(Sk,"A",{href:!0});var git=s(pB);_lo=r(git,"BertTokenizer"),git.forEach(t),ulo=r(Sk," or "),_B=n(Sk,"A",{href:!0});var hit=s(_B);blo=r(hit,"BertTokenizerFast"),hit.forEach(t),vlo=r(Sk," (BERT model)"),Sk.forEach(t),Flo=i(S),th=n(S,"LI",{});var qye=s(th);ble=n(qye,"STRONG",{});var pit=s(ble);Tlo=r(pit,"bert-generation"),pit.forEach(t),Mlo=r(qye," \u2014 "),uB=n(qye,"A",{href:!0});var _it=s(uB);Elo=r(_it,"BertGenerationTokenizer"),_it.forEach(t),Clo=r(qye," (Bert Generation model)"),qye.forEach(t),wlo=i(S),ah=n(S,"LI",{});var jye=s(ah);vle=n(jye,"STRONG",{});var uit=s(vle);Alo=r(uit,"bert-japanese"),uit.forEach(t),Llo=r(jye," \u2014 "),bB=n(jye,"A",{href:!0});var bit=s(bB);ylo=r(bit,"BertJapaneseTokenizer"),bit.forEach(t),xlo=r(jye," (BertJapanese model)"),jye.forEach(t),$lo=i(S),nh=n(S,"LI",{});var Dye=s(nh);Fle=n(Dye,"STRONG",{});var vit=s(Fle);klo=r(vit,"bertweet"),vit.forEach(t),Slo=r(Dye," \u2014 "),vB=n(Dye,"A",{href:!0});var Fit=s(vB);Rlo=r(Fit,"BertweetTokenizer"),Fit.forEach(t),Plo=r(Dye," (BERTweet model)"),Dye.forEach(t),Blo=i(S),Vn=n(S,"LI",{});var Rk=s(Vn);Tle=n(Rk,"STRONG",{});var Tit=s(Tle);Nlo=r(Tit,"big_bird"),Tit.forEach(t),Ilo=r(Rk," \u2014 "),FB=n(Rk,"A",{href:!0});var Mit=s(FB);qlo=r(Mit,"BigBirdTokenizer"),Mit.forEach(t),jlo=r(Rk," or "),TB=n(Rk,"A",{href:!0});var Eit=s(TB);Dlo=r(Eit,"BigBirdTokenizerFast"),Eit.forEach(t),Glo=r(Rk," (BigBird model)"),Rk.forEach(t),Olo=i(S),Xn=n(S,"LI",{});var Pk=s(Xn);Mle=n(Pk,"STRONG",{});var Cit=s(Mle);Vlo=r(Cit,"bigbird_pegasus"),Cit.forEach(t),Xlo=r(Pk," \u2014 "),MB=n(Pk,"A",{href:!0});var wit=s(MB);zlo=r(wit,"PegasusTokenizer"),wit.forEach(t),Qlo=r(Pk," or "),EB=n(Pk,"A",{href:!0});var Ait=s(EB);Wlo=r(Ait,"PegasusTokenizerFast"),Ait.forEach(t),Hlo=r(Pk," (BigBird-Pegasus model)"),Pk.forEach(t),Ulo=i(S),zn=n(S,"LI",{});var Bk=s(zn);Ele=n(Bk,"STRONG",{});var Lit=s(Ele);Jlo=r(Lit,"blenderbot"),Lit.forEach(t),Ylo=r(Bk," \u2014 "),CB=n(Bk,"A",{href:!0});var yit=s(CB);Klo=r(yit,"BlenderbotTokenizer"),yit.forEach(t),Zlo=r(Bk," or "),wB=n(Bk,"A",{href:!0});var xit=s(wB);eio=r(xit,"BlenderbotTokenizerFast"),xit.forEach(t),oio=r(Bk," (Blenderbot model)"),Bk.forEach(t),rio=i(S),sh=n(S,"LI",{});var Gye=s(sh);Cle=n(Gye,"STRONG",{});var $it=s(Cle);tio=r($it,"blenderbot-small"),$it.forEach(t),aio=r(Gye," \u2014 "),AB=n(Gye,"A",{href:!0});var kit=s(AB);nio=r(kit,"BlenderbotSmallTokenizer"),kit.forEach(t),sio=r(Gye," (BlenderbotSmall model)"),Gye.forEach(t),lio=i(S),lh=n(S,"LI",{});var Oye=s(lh);wle=n(Oye,"STRONG",{});var Sit=s(wle);iio=r(Sit,"bloom"),Sit.forEach(t),dio=r(Oye," \u2014 "),LB=n(Oye,"A",{href:!0});var Rit=s(LB);cio=r(Rit,"BloomTokenizerFast"),Rit.forEach(t),fio=r(Oye," (BLOOM model)"),Oye.forEach(t),mio=i(S),ih=n(S,"LI",{});var Vye=s(ih);Ale=n(Vye,"STRONG",{});var Pit=s(Ale);gio=r(Pit,"byt5"),Pit.forEach(t),hio=r(Vye," \u2014 "),yB=n(Vye,"A",{href:!0});var Bit=s(yB);pio=r(Bit,"ByT5Tokenizer"),Bit.forEach(t),_io=r(Vye," (ByT5 model)"),Vye.forEach(t),uio=i(S),Qn=n(S,"LI",{});var Nk=s(Qn);Lle=n(Nk,"STRONG",{});var Nit=s(Lle);bio=r(Nit,"camembert"),Nit.forEach(t),vio=r(Nk," \u2014 "),xB=n(Nk,"A",{href:!0});var Iit=s(xB);Fio=r(Iit,"CamembertTokenizer"),Iit.forEach(t),Tio=r(Nk," or "),$B=n(Nk,"A",{href:!0});var qit=s($B);Mio=r(qit,"CamembertTokenizerFast"),qit.forEach(t),Eio=r(Nk," (CamemBERT model)"),Nk.forEach(t),Cio=i(S),dh=n(S,"LI",{});var Xye=s(dh);yle=n(Xye,"STRONG",{});var jit=s(yle);wio=r(jit,"canine"),jit.forEach(t),Aio=r(Xye," \u2014 "),kB=n(Xye,"A",{href:!0});var Dit=s(kB);Lio=r(Dit,"CanineTokenizer"),Dit.forEach(t),yio=r(Xye," (CANINE model)"),Xye.forEach(t),xio=i(S),Wn=n(S,"LI",{});var Ik=s(Wn);xle=n(Ik,"STRONG",{});var Git=s(xle);$io=r(Git,"clip"),Git.forEach(t),kio=r(Ik," \u2014 "),SB=n(Ik,"A",{href:!0});var Oit=s(SB);Sio=r(Oit,"CLIPTokenizer"),Oit.forEach(t),Rio=r(Ik," or "),RB=n(Ik,"A",{href:!0});var Vit=s(RB);Pio=r(Vit,"CLIPTokenizerFast"),Vit.forEach(t),Bio=r(Ik," (CLIP model)"),Ik.forEach(t),Nio=i(S),Hn=n(S,"LI",{});var qk=s(Hn);$le=n(qk,"STRONG",{});var Xit=s($le);Iio=r(Xit,"codegen"),Xit.forEach(t),qio=r(qk," \u2014 "),PB=n(qk,"A",{href:!0});var zit=s(PB);jio=r(zit,"CodeGenTokenizer"),zit.forEach(t),Dio=r(qk," or "),BB=n(qk,"A",{href:!0});var Qit=s(BB);Gio=r(Qit,"CodeGenTokenizerFast"),Qit.forEach(t),Oio=r(qk," (CodeGen model)"),qk.forEach(t),Vio=i(S),Un=n(S,"LI",{});var jk=s(Un);kle=n(jk,"STRONG",{});var Wit=s(kle);Xio=r(Wit,"convbert"),Wit.forEach(t),zio=r(jk," \u2014 "),NB=n(jk,"A",{href:!0});var Hit=s(NB);Qio=r(Hit,"ConvBertTokenizer"),Hit.forEach(t),Wio=r(jk," or "),IB=n(jk,"A",{href:!0});var Uit=s(IB);Hio=r(Uit,"ConvBertTokenizerFast"),Uit.forEach(t),Uio=r(jk," (ConvBERT model)"),jk.forEach(t),Jio=i(S),Jn=n(S,"LI",{});var Dk=s(Jn);Sle=n(Dk,"STRONG",{});var Jit=s(Sle);Yio=r(Jit,"cpm"),Jit.forEach(t),Kio=r(Dk," \u2014 "),qB=n(Dk,"A",{href:!0});var Yit=s(qB);Zio=r(Yit,"CpmTokenizer"),Yit.forEach(t),edo=r(Dk," or "),jB=n(Dk,"A",{href:!0});var Kit=s(jB);odo=r(Kit,"CpmTokenizerFast"),Kit.forEach(t),rdo=r(Dk," (CPM model)"),Dk.forEach(t),tdo=i(S),ch=n(S,"LI",{});var zye=s(ch);Rle=n(zye,"STRONG",{});var Zit=s(Rle);ado=r(Zit,"ctrl"),Zit.forEach(t),ndo=r(zye," \u2014 "),DB=n(zye,"A",{href:!0});var edt=s(DB);sdo=r(edt,"CTRLTokenizer"),edt.forEach(t),ldo=r(zye," (CTRL model)"),zye.forEach(t),ido=i(S),Yn=n(S,"LI",{});var Gk=s(Yn);Ple=n(Gk,"STRONG",{});var odt=s(Ple);ddo=r(odt,"data2vec-text"),odt.forEach(t),cdo=r(Gk," \u2014 "),GB=n(Gk,"A",{href:!0});var rdt=s(GB);fdo=r(rdt,"RobertaTokenizer"),rdt.forEach(t),mdo=r(Gk," or "),OB=n(Gk,"A",{href:!0});var tdt=s(OB);gdo=r(tdt,"RobertaTokenizerFast"),tdt.forEach(t),hdo=r(Gk," (Data2VecText model)"),Gk.forEach(t),pdo=i(S),Kn=n(S,"LI",{});var Ok=s(Kn);Ble=n(Ok,"STRONG",{});var adt=s(Ble);_do=r(adt,"deberta"),adt.forEach(t),udo=r(Ok," \u2014 "),VB=n(Ok,"A",{href:!0});var ndt=s(VB);bdo=r(ndt,"DebertaTokenizer"),ndt.forEach(t),vdo=r(Ok," or "),XB=n(Ok,"A",{href:!0});var sdt=s(XB);Fdo=r(sdt,"DebertaTokenizerFast"),sdt.forEach(t),Tdo=r(Ok," (DeBERTa model)"),Ok.forEach(t),Mdo=i(S),Zn=n(S,"LI",{});var Vk=s(Zn);Nle=n(Vk,"STRONG",{});var ldt=s(Nle);Edo=r(ldt,"deberta-v2"),ldt.forEach(t),Cdo=r(Vk," \u2014 "),zB=n(Vk,"A",{href:!0});var idt=s(zB);wdo=r(idt,"DebertaV2Tokenizer"),idt.forEach(t),Ado=r(Vk," or "),QB=n(Vk,"A",{href:!0});var ddt=s(QB);Ldo=r(ddt,"DebertaV2TokenizerFast"),ddt.forEach(t),ydo=r(Vk," (DeBERTa-v2 model)"),Vk.forEach(t),xdo=i(S),es=n(S,"LI",{});var Xk=s(es);Ile=n(Xk,"STRONG",{});var cdt=s(Ile);$do=r(cdt,"distilbert"),cdt.forEach(t),kdo=r(Xk," \u2014 "),WB=n(Xk,"A",{href:!0});var fdt=s(WB);Sdo=r(fdt,"DistilBertTokenizer"),fdt.forEach(t),Rdo=r(Xk," or "),HB=n(Xk,"A",{href:!0});var mdt=s(HB);Pdo=r(mdt,"DistilBertTokenizerFast"),mdt.forEach(t),Bdo=r(Xk," (DistilBERT model)"),Xk.forEach(t),Ndo=i(S),os=n(S,"LI",{});var zk=s(os);qle=n(zk,"STRONG",{});var gdt=s(qle);Ido=r(gdt,"dpr"),gdt.forEach(t),qdo=r(zk," \u2014 "),UB=n(zk,"A",{href:!0});var hdt=s(UB);jdo=r(hdt,"DPRQuestionEncoderTokenizer"),hdt.forEach(t),Ddo=r(zk," or "),JB=n(zk,"A",{href:!0});var pdt=s(JB);Gdo=r(pdt,"DPRQuestionEncoderTokenizerFast"),pdt.forEach(t),Odo=r(zk," (DPR model)"),zk.forEach(t),Vdo=i(S),rs=n(S,"LI",{});var Qk=s(rs);jle=n(Qk,"STRONG",{});var _dt=s(jle);Xdo=r(_dt,"electra"),_dt.forEach(t),zdo=r(Qk," \u2014 "),YB=n(Qk,"A",{href:!0});var udt=s(YB);Qdo=r(udt,"ElectraTokenizer"),udt.forEach(t),Wdo=r(Qk," or "),KB=n(Qk,"A",{href:!0});var bdt=s(KB);Hdo=r(bdt,"ElectraTokenizerFast"),bdt.forEach(t),Udo=r(Qk," (ELECTRA model)"),Qk.forEach(t),Jdo=i(S),fh=n(S,"LI",{});var Qye=s(fh);Dle=n(Qye,"STRONG",{});var vdt=s(Dle);Ydo=r(vdt,"flaubert"),vdt.forEach(t),Kdo=r(Qye," \u2014 "),ZB=n(Qye,"A",{href:!0});var Fdt=s(ZB);Zdo=r(Fdt,"FlaubertTokenizer"),Fdt.forEach(t),eco=r(Qye," (FlauBERT model)"),Qye.forEach(t),oco=i(S),ts=n(S,"LI",{});var Wk=s(ts);Gle=n(Wk,"STRONG",{});var Tdt=s(Gle);rco=r(Tdt,"fnet"),Tdt.forEach(t),tco=r(Wk," \u2014 "),eN=n(Wk,"A",{href:!0});var Mdt=s(eN);aco=r(Mdt,"FNetTokenizer"),Mdt.forEach(t),nco=r(Wk," or "),oN=n(Wk,"A",{href:!0});var Edt=s(oN);sco=r(Edt,"FNetTokenizerFast"),Edt.forEach(t),lco=r(Wk," (FNet model)"),Wk.forEach(t),ico=i(S),mh=n(S,"LI",{});var Wye=s(mh);Ole=n(Wye,"STRONG",{});var Cdt=s(Ole);dco=r(Cdt,"fsmt"),Cdt.forEach(t),cco=r(Wye," \u2014 "),rN=n(Wye,"A",{href:!0});var wdt=s(rN);fco=r(wdt,"FSMTTokenizer"),wdt.forEach(t),mco=r(Wye," (FairSeq Machine-Translation model)"),Wye.forEach(t),gco=i(S),as=n(S,"LI",{});var Hk=s(as);Vle=n(Hk,"STRONG",{});var Adt=s(Vle);hco=r(Adt,"funnel"),Adt.forEach(t),pco=r(Hk," \u2014 "),tN=n(Hk,"A",{href:!0});var Ldt=s(tN);_co=r(Ldt,"FunnelTokenizer"),Ldt.forEach(t),uco=r(Hk," or "),aN=n(Hk,"A",{href:!0});var ydt=s(aN);bco=r(ydt,"FunnelTokenizerFast"),ydt.forEach(t),vco=r(Hk," (Funnel Transformer model)"),Hk.forEach(t),Fco=i(S),ns=n(S,"LI",{});var Uk=s(ns);Xle=n(Uk,"STRONG",{});var xdt=s(Xle);Tco=r(xdt,"gpt2"),xdt.forEach(t),Mco=r(Uk," \u2014 "),nN=n(Uk,"A",{href:!0});var $dt=s(nN);Eco=r($dt,"GPT2Tokenizer"),$dt.forEach(t),Cco=r(Uk," or "),sN=n(Uk,"A",{href:!0});var kdt=s(sN);wco=r(kdt,"GPT2TokenizerFast"),kdt.forEach(t),Aco=r(Uk," (OpenAI GPT-2 model)"),Uk.forEach(t),Lco=i(S),ss=n(S,"LI",{});var Jk=s(ss);zle=n(Jk,"STRONG",{});var Sdt=s(zle);yco=r(Sdt,"gpt_neo"),Sdt.forEach(t),xco=r(Jk," \u2014 "),lN=n(Jk,"A",{href:!0});var Rdt=s(lN);$co=r(Rdt,"GPT2Tokenizer"),Rdt.forEach(t),kco=r(Jk," or "),iN=n(Jk,"A",{href:!0});var Pdt=s(iN);Sco=r(Pdt,"GPT2TokenizerFast"),Pdt.forEach(t),Rco=r(Jk," (GPT Neo model)"),Jk.forEach(t),Pco=i(S),gh=n(S,"LI",{});var Hye=s(gh);Qle=n(Hye,"STRONG",{});var Bdt=s(Qle);Bco=r(Bdt,"gpt_neox"),Bdt.forEach(t),Nco=r(Hye," \u2014 "),dN=n(Hye,"A",{href:!0});var Ndt=s(dN);Ico=r(Ndt,"GPTNeoXTokenizerFast"),Ndt.forEach(t),qco=r(Hye," (GPT NeoX model)"),Hye.forEach(t),jco=i(S),ls=n(S,"LI",{});var Yk=s(ls);Wle=n(Yk,"STRONG",{});var Idt=s(Wle);Dco=r(Idt,"gptj"),Idt.forEach(t),Gco=r(Yk," \u2014 "),cN=n(Yk,"A",{href:!0});var qdt=s(cN);Oco=r(qdt,"GPT2Tokenizer"),qdt.forEach(t),Vco=r(Yk," or "),fN=n(Yk,"A",{href:!0});var jdt=s(fN);Xco=r(jdt,"GPT2TokenizerFast"),jdt.forEach(t),zco=r(Yk," (GPT-J model)"),Yk.forEach(t),Qco=i(S),is=n(S,"LI",{});var Kk=s(is);Hle=n(Kk,"STRONG",{});var Ddt=s(Hle);Wco=r(Ddt,"groupvit"),Ddt.forEach(t),Hco=r(Kk," \u2014 "),mN=n(Kk,"A",{href:!0});var Gdt=s(mN);Uco=r(Gdt,"CLIPTokenizer"),Gdt.forEach(t),Jco=r(Kk," or "),gN=n(Kk,"A",{href:!0});var Odt=s(gN);Yco=r(Odt,"CLIPTokenizerFast"),Odt.forEach(t),Kco=r(Kk," (GroupViT model)"),Kk.forEach(t),Zco=i(S),ds=n(S,"LI",{});var Zk=s(ds);Ule=n(Zk,"STRONG",{});var Vdt=s(Ule);efo=r(Vdt,"herbert"),Vdt.forEach(t),ofo=r(Zk," \u2014 "),hN=n(Zk,"A",{href:!0});var Xdt=s(hN);rfo=r(Xdt,"HerbertTokenizer"),Xdt.forEach(t),tfo=r(Zk," or "),pN=n(Zk,"A",{href:!0});var zdt=s(pN);afo=r(zdt,"HerbertTokenizerFast"),zdt.forEach(t),nfo=r(Zk," (HerBERT model)"),Zk.forEach(t),sfo=i(S),hh=n(S,"LI",{});var Uye=s(hh);Jle=n(Uye,"STRONG",{});var Qdt=s(Jle);lfo=r(Qdt,"hubert"),Qdt.forEach(t),ifo=r(Uye," \u2014 "),_N=n(Uye,"A",{href:!0});var Wdt=s(_N);dfo=r(Wdt,"Wav2Vec2CTCTokenizer"),Wdt.forEach(t),cfo=r(Uye," (Hubert model)"),Uye.forEach(t),ffo=i(S),cs=n(S,"LI",{});var eS=s(cs);Yle=n(eS,"STRONG",{});var Hdt=s(Yle);mfo=r(Hdt,"ibert"),Hdt.forEach(t),gfo=r(eS," \u2014 "),uN=n(eS,"A",{href:!0});var Udt=s(uN);hfo=r(Udt,"RobertaTokenizer"),Udt.forEach(t),pfo=r(eS," or "),bN=n(eS,"A",{href:!0});var Jdt=s(bN);_fo=r(Jdt,"RobertaTokenizerFast"),Jdt.forEach(t),ufo=r(eS," (I-BERT model)"),eS.forEach(t),bfo=i(S),ph=n(S,"LI",{});var Jye=s(ph);Kle=n(Jye,"STRONG",{});var Ydt=s(Kle);vfo=r(Ydt,"jukebox"),Ydt.forEach(t),Ffo=r(Jye," \u2014 "),Zle=n(Jye,"CODE",{});var Kdt=s(Zle);Tfo=r(Kdt,"JukeboxTokenizer"),Kdt.forEach(t),Mfo=r(Jye," (Jukebox model)"),Jye.forEach(t),Efo=i(S),fs=n(S,"LI",{});var oS=s(fs);eie=n(oS,"STRONG",{});var Zdt=s(eie);Cfo=r(Zdt,"layoutlm"),Zdt.forEach(t),wfo=r(oS," \u2014 "),vN=n(oS,"A",{href:!0});var ect=s(vN);Afo=r(ect,"LayoutLMTokenizer"),ect.forEach(t),Lfo=r(oS," or "),FN=n(oS,"A",{href:!0});var oct=s(FN);yfo=r(oct,"LayoutLMTokenizerFast"),oct.forEach(t),xfo=r(oS," (LayoutLM model)"),oS.forEach(t),$fo=i(S),ms=n(S,"LI",{});var rS=s(ms);oie=n(rS,"STRONG",{});var rct=s(oie);kfo=r(rct,"layoutlmv2"),rct.forEach(t),Sfo=r(rS," \u2014 "),TN=n(rS,"A",{href:!0});var tct=s(TN);Rfo=r(tct,"LayoutLMv2Tokenizer"),tct.forEach(t),Pfo=r(rS," or "),MN=n(rS,"A",{href:!0});var act=s(MN);Bfo=r(act,"LayoutLMv2TokenizerFast"),act.forEach(t),Nfo=r(rS," (LayoutLMv2 model)"),rS.forEach(t),Ifo=i(S),gs=n(S,"LI",{});var tS=s(gs);rie=n(tS,"STRONG",{});var nct=s(rie);qfo=r(nct,"layoutlmv3"),nct.forEach(t),jfo=r(tS," \u2014 "),EN=n(tS,"A",{href:!0});var sct=s(EN);Dfo=r(sct,"LayoutLMv3Tokenizer"),sct.forEach(t),Gfo=r(tS," or "),CN=n(tS,"A",{href:!0});var lct=s(CN);Ofo=r(lct,"LayoutLMv3TokenizerFast"),lct.forEach(t),Vfo=r(tS," (LayoutLMv3 model)"),tS.forEach(t),Xfo=i(S),hs=n(S,"LI",{});var aS=s(hs);tie=n(aS,"STRONG",{});var ict=s(tie);zfo=r(ict,"layoutxlm"),ict.forEach(t),Qfo=r(aS," \u2014 "),wN=n(aS,"A",{href:!0});var dct=s(wN);Wfo=r(dct,"LayoutXLMTokenizer"),dct.forEach(t),Hfo=r(aS," or "),AN=n(aS,"A",{href:!0});var cct=s(AN);Ufo=r(cct,"LayoutXLMTokenizerFast"),cct.forEach(t),Jfo=r(aS," (LayoutXLM model)"),aS.forEach(t),Yfo=i(S),ps=n(S,"LI",{});var nS=s(ps);aie=n(nS,"STRONG",{});var fct=s(aie);Kfo=r(fct,"led"),fct.forEach(t),Zfo=r(nS," \u2014 "),LN=n(nS,"A",{href:!0});var mct=s(LN);emo=r(mct,"LEDTokenizer"),mct.forEach(t),omo=r(nS," or "),yN=n(nS,"A",{href:!0});var gct=s(yN);rmo=r(gct,"LEDTokenizerFast"),gct.forEach(t),tmo=r(nS," (LED model)"),nS.forEach(t),amo=i(S),_s=n(S,"LI",{});var sS=s(_s);nie=n(sS,"STRONG",{});var hct=s(nie);nmo=r(hct,"longformer"),hct.forEach(t),smo=r(sS," \u2014 "),xN=n(sS,"A",{href:!0});var pct=s(xN);lmo=r(pct,"LongformerTokenizer"),pct.forEach(t),imo=r(sS," or "),$N=n(sS,"A",{href:!0});var _ct=s($N);dmo=r(_ct,"LongformerTokenizerFast"),_ct.forEach(t),cmo=r(sS," (Longformer model)"),sS.forEach(t),fmo=i(S),us=n(S,"LI",{});var lS=s(us);sie=n(lS,"STRONG",{});var uct=s(sie);mmo=r(uct,"longt5"),uct.forEach(t),gmo=r(lS," \u2014 "),kN=n(lS,"A",{href:!0});var bct=s(kN);hmo=r(bct,"T5Tokenizer"),bct.forEach(t),pmo=r(lS," or "),SN=n(lS,"A",{href:!0});var vct=s(SN);_mo=r(vct,"T5TokenizerFast"),vct.forEach(t),umo=r(lS," (LongT5 model)"),lS.forEach(t),bmo=i(S),_h=n(S,"LI",{});var Yye=s(_h);lie=n(Yye,"STRONG",{});var Fct=s(lie);vmo=r(Fct,"luke"),Fct.forEach(t),Fmo=r(Yye," \u2014 "),RN=n(Yye,"A",{href:!0});var Tct=s(RN);Tmo=r(Tct,"LukeTokenizer"),Tct.forEach(t),Mmo=r(Yye," (LUKE model)"),Yye.forEach(t),Emo=i(S),bs=n(S,"LI",{});var iS=s(bs);iie=n(iS,"STRONG",{});var Mct=s(iie);Cmo=r(Mct,"lxmert"),Mct.forEach(t),wmo=r(iS," \u2014 "),PN=n(iS,"A",{href:!0});var Ect=s(PN);Amo=r(Ect,"LxmertTokenizer"),Ect.forEach(t),Lmo=r(iS," or "),BN=n(iS,"A",{href:!0});var Cct=s(BN);ymo=r(Cct,"LxmertTokenizerFast"),Cct.forEach(t),xmo=r(iS," (LXMERT model)"),iS.forEach(t),$mo=i(S),uh=n(S,"LI",{});var Kye=s(uh);die=n(Kye,"STRONG",{});var wct=s(die);kmo=r(wct,"m2m_100"),wct.forEach(t),Smo=r(Kye," \u2014 "),NN=n(Kye,"A",{href:!0});var Act=s(NN);Rmo=r(Act,"M2M100Tokenizer"),Act.forEach(t),Pmo=r(Kye," (M2M100 model)"),Kye.forEach(t),Bmo=i(S),bh=n(S,"LI",{});var Zye=s(bh);cie=n(Zye,"STRONG",{});var Lct=s(cie);Nmo=r(Lct,"marian"),Lct.forEach(t),Imo=r(Zye," \u2014 "),IN=n(Zye,"A",{href:!0});var yct=s(IN);qmo=r(yct,"MarianTokenizer"),yct.forEach(t),jmo=r(Zye," (Marian model)"),Zye.forEach(t),Dmo=i(S),vs=n(S,"LI",{});var dS=s(vs);fie=n(dS,"STRONG",{});var xct=s(fie);Gmo=r(xct,"mbart"),xct.forEach(t),Omo=r(dS," \u2014 "),qN=n(dS,"A",{href:!0});var $ct=s(qN);Vmo=r($ct,"MBartTokenizer"),$ct.forEach(t),Xmo=r(dS," or "),jN=n(dS,"A",{href:!0});var kct=s(jN);zmo=r(kct,"MBartTokenizerFast"),kct.forEach(t),Qmo=r(dS," (mBART model)"),dS.forEach(t),Wmo=i(S),Fs=n(S,"LI",{});var cS=s(Fs);mie=n(cS,"STRONG",{});var Sct=s(mie);Hmo=r(Sct,"mbart50"),Sct.forEach(t),Umo=r(cS," \u2014 "),DN=n(cS,"A",{href:!0});var Rct=s(DN);Jmo=r(Rct,"MBart50Tokenizer"),Rct.forEach(t),Ymo=r(cS," or "),GN=n(cS,"A",{href:!0});var Pct=s(GN);Kmo=r(Pct,"MBart50TokenizerFast"),Pct.forEach(t),Zmo=r(cS," (mBART-50 model)"),cS.forEach(t),ego=i(S),Ts=n(S,"LI",{});var fS=s(Ts);gie=n(fS,"STRONG",{});var Bct=s(gie);ogo=r(Bct,"megatron-bert"),Bct.forEach(t),rgo=r(fS," \u2014 "),ON=n(fS,"A",{href:!0});var Nct=s(ON);tgo=r(Nct,"BertTokenizer"),Nct.forEach(t),ago=r(fS," or "),VN=n(fS,"A",{href:!0});var Ict=s(VN);ngo=r(Ict,"BertTokenizerFast"),Ict.forEach(t),sgo=r(fS," (Megatron-BERT model)"),fS.forEach(t),lgo=i(S),vh=n(S,"LI",{});var e9e=s(vh);hie=n(e9e,"STRONG",{});var qct=s(hie);igo=r(qct,"mluke"),qct.forEach(t),dgo=r(e9e," \u2014 "),XN=n(e9e,"A",{href:!0});var jct=s(XN);cgo=r(jct,"MLukeTokenizer"),jct.forEach(t),fgo=r(e9e," (mLUKE model)"),e9e.forEach(t),mgo=i(S),Ms=n(S,"LI",{});var mS=s(Ms);pie=n(mS,"STRONG",{});var Dct=s(pie);ggo=r(Dct,"mobilebert"),Dct.forEach(t),hgo=r(mS," \u2014 "),zN=n(mS,"A",{href:!0});var Gct=s(zN);pgo=r(Gct,"MobileBertTokenizer"),Gct.forEach(t),_go=r(mS," or "),QN=n(mS,"A",{href:!0});var Oct=s(QN);ugo=r(Oct,"MobileBertTokenizerFast"),Oct.forEach(t),bgo=r(mS," (MobileBERT model)"),mS.forEach(t),vgo=i(S),Es=n(S,"LI",{});var gS=s(Es);_ie=n(gS,"STRONG",{});var Vct=s(_ie);Fgo=r(Vct,"mpnet"),Vct.forEach(t),Tgo=r(gS," \u2014 "),WN=n(gS,"A",{href:!0});var Xct=s(WN);Mgo=r(Xct,"MPNetTokenizer"),Xct.forEach(t),Ego=r(gS," or "),HN=n(gS,"A",{href:!0});var zct=s(HN);Cgo=r(zct,"MPNetTokenizerFast"),zct.forEach(t),wgo=r(gS," (MPNet model)"),gS.forEach(t),Ago=i(S),Cs=n(S,"LI",{});var hS=s(Cs);uie=n(hS,"STRONG",{});var Qct=s(uie);Lgo=r(Qct,"mt5"),Qct.forEach(t),ygo=r(hS," \u2014 "),UN=n(hS,"A",{href:!0});var Wct=s(UN);xgo=r(Wct,"MT5Tokenizer"),Wct.forEach(t),$go=r(hS," or "),JN=n(hS,"A",{href:!0});var Hct=s(JN);kgo=r(Hct,"MT5TokenizerFast"),Hct.forEach(t),Sgo=r(hS," (MT5 model)"),hS.forEach(t),Rgo=i(S),ws=n(S,"LI",{});var pS=s(ws);bie=n(pS,"STRONG",{});var Uct=s(bie);Pgo=r(Uct,"mvp"),Uct.forEach(t),Bgo=r(pS," \u2014 "),YN=n(pS,"A",{href:!0});var Jct=s(YN);Ngo=r(Jct,"MvpTokenizer"),Jct.forEach(t),Igo=r(pS," or "),KN=n(pS,"A",{href:!0});var Yct=s(KN);qgo=r(Yct,"MvpTokenizerFast"),Yct.forEach(t),jgo=r(pS," (MVP model)"),pS.forEach(t),Dgo=i(S),As=n(S,"LI",{});var _S=s(As);vie=n(_S,"STRONG",{});var Kct=s(vie);Ggo=r(Kct,"nezha"),Kct.forEach(t),Ogo=r(_S," \u2014 "),ZN=n(_S,"A",{href:!0});var Zct=s(ZN);Vgo=r(Zct,"BertTokenizer"),Zct.forEach(t),Xgo=r(_S," or "),eI=n(_S,"A",{href:!0});var eft=s(eI);zgo=r(eft,"BertTokenizerFast"),eft.forEach(t),Qgo=r(_S," (Nezha model)"),_S.forEach(t),Wgo=i(S),Ls=n(S,"LI",{});var uS=s(Ls);Fie=n(uS,"STRONG",{});var oft=s(Fie);Hgo=r(oft,"nllb"),oft.forEach(t),Ugo=r(uS," \u2014 "),oI=n(uS,"A",{href:!0});var rft=s(oI);Jgo=r(rft,"NllbTokenizer"),rft.forEach(t),Ygo=r(uS," or "),rI=n(uS,"A",{href:!0});var tft=s(rI);Kgo=r(tft,"NllbTokenizerFast"),tft.forEach(t),Zgo=r(uS," (NLLB model)"),uS.forEach(t),eho=i(S),ys=n(S,"LI",{});var bS=s(ys);Tie=n(bS,"STRONG",{});var aft=s(Tie);oho=r(aft,"nystromformer"),aft.forEach(t),rho=r(bS," \u2014 "),tI=n(bS,"A",{href:!0});var nft=s(tI);tho=r(nft,"AlbertTokenizer"),nft.forEach(t),aho=r(bS," or "),aI=n(bS,"A",{href:!0});var sft=s(aI);nho=r(sft,"AlbertTokenizerFast"),sft.forEach(t),sho=r(bS," (Nystr\xF6mformer model)"),bS.forEach(t),lho=i(S),xs=n(S,"LI",{});var vS=s(xs);Mie=n(vS,"STRONG",{});var lft=s(Mie);iho=r(lft,"openai-gpt"),lft.forEach(t),dho=r(vS," \u2014 "),nI=n(vS,"A",{href:!0});var ift=s(nI);cho=r(ift,"OpenAIGPTTokenizer"),ift.forEach(t),fho=r(vS," or "),sI=n(vS,"A",{href:!0});var dft=s(sI);mho=r(dft,"OpenAIGPTTokenizerFast"),dft.forEach(t),gho=r(vS," (OpenAI GPT model)"),vS.forEach(t),hho=i(S),Fh=n(S,"LI",{});var o9e=s(Fh);Eie=n(o9e,"STRONG",{});var cft=s(Eie);pho=r(cft,"opt"),cft.forEach(t),_ho=r(o9e," \u2014 "),lI=n(o9e,"A",{href:!0});var fft=s(lI);uho=r(fft,"GPT2Tokenizer"),fft.forEach(t),bho=r(o9e," (OPT model)"),o9e.forEach(t),vho=i(S),$s=n(S,"LI",{});var FS=s($s);Cie=n(FS,"STRONG",{});var mft=s(Cie);Fho=r(mft,"pegasus"),mft.forEach(t),Tho=r(FS," \u2014 "),iI=n(FS,"A",{href:!0});var gft=s(iI);Mho=r(gft,"PegasusTokenizer"),gft.forEach(t),Eho=r(FS," or "),dI=n(FS,"A",{href:!0});var hft=s(dI);Cho=r(hft,"PegasusTokenizerFast"),hft.forEach(t),who=r(FS," (Pegasus model)"),FS.forEach(t),Aho=i(S),Th=n(S,"LI",{});var r9e=s(Th);wie=n(r9e,"STRONG",{});var pft=s(wie);Lho=r(pft,"perceiver"),pft.forEach(t),yho=r(r9e," \u2014 "),cI=n(r9e,"A",{href:!0});var _ft=s(cI);xho=r(_ft,"PerceiverTokenizer"),_ft.forEach(t),$ho=r(r9e," (Perceiver model)"),r9e.forEach(t),kho=i(S),Mh=n(S,"LI",{});var t9e=s(Mh);Aie=n(t9e,"STRONG",{});var uft=s(Aie);Sho=r(uft,"phobert"),uft.forEach(t),Rho=r(t9e," \u2014 "),fI=n(t9e,"A",{href:!0});var bft=s(fI);Pho=r(bft,"PhobertTokenizer"),bft.forEach(t),Bho=r(t9e," (PhoBERT model)"),t9e.forEach(t),Nho=i(S),Eh=n(S,"LI",{});var a9e=s(Eh);Lie=n(a9e,"STRONG",{});var vft=s(Lie);Iho=r(vft,"plbart"),vft.forEach(t),qho=r(a9e," \u2014 "),mI=n(a9e,"A",{href:!0});var Fft=s(mI);jho=r(Fft,"PLBartTokenizer"),Fft.forEach(t),Dho=r(a9e," (PLBart model)"),a9e.forEach(t),Gho=i(S),Ch=n(S,"LI",{});var n9e=s(Ch);yie=n(n9e,"STRONG",{});var Tft=s(yie);Oho=r(Tft,"prophetnet"),Tft.forEach(t),Vho=r(n9e," \u2014 "),gI=n(n9e,"A",{href:!0});var Mft=s(gI);Xho=r(Mft,"ProphetNetTokenizer"),Mft.forEach(t),zho=r(n9e," (ProphetNet model)"),n9e.forEach(t),Qho=i(S),ks=n(S,"LI",{});var TS=s(ks);xie=n(TS,"STRONG",{});var Eft=s(xie);Who=r(Eft,"qdqbert"),Eft.forEach(t),Hho=r(TS," \u2014 "),hI=n(TS,"A",{href:!0});var Cft=s(hI);Uho=r(Cft,"BertTokenizer"),Cft.forEach(t),Jho=r(TS," or "),pI=n(TS,"A",{href:!0});var wft=s(pI);Yho=r(wft,"BertTokenizerFast"),wft.forEach(t),Kho=r(TS," (QDQBert model)"),TS.forEach(t),Zho=i(S),wh=n(S,"LI",{});var s9e=s(wh);$ie=n(s9e,"STRONG",{});var Aft=s($ie);epo=r(Aft,"rag"),Aft.forEach(t),opo=r(s9e," \u2014 "),_I=n(s9e,"A",{href:!0});var Lft=s(_I);rpo=r(Lft,"RagTokenizer"),Lft.forEach(t),tpo=r(s9e," (RAG model)"),s9e.forEach(t),apo=i(S),Ss=n(S,"LI",{});var MS=s(Ss);kie=n(MS,"STRONG",{});var yft=s(kie);npo=r(yft,"realm"),yft.forEach(t),spo=r(MS," \u2014 "),uI=n(MS,"A",{href:!0});var xft=s(uI);lpo=r(xft,"RealmTokenizer"),xft.forEach(t),ipo=r(MS," or "),bI=n(MS,"A",{href:!0});var $ft=s(bI);dpo=r($ft,"RealmTokenizerFast"),$ft.forEach(t),cpo=r(MS," (REALM model)"),MS.forEach(t),fpo=i(S),Rs=n(S,"LI",{});var ES=s(Rs);Sie=n(ES,"STRONG",{});var kft=s(Sie);mpo=r(kft,"reformer"),kft.forEach(t),gpo=r(ES," \u2014 "),vI=n(ES,"A",{href:!0});var Sft=s(vI);hpo=r(Sft,"ReformerTokenizer"),Sft.forEach(t),ppo=r(ES," or "),FI=n(ES,"A",{href:!0});var Rft=s(FI);_po=r(Rft,"ReformerTokenizerFast"),Rft.forEach(t),upo=r(ES," (Reformer model)"),ES.forEach(t),bpo=i(S),Ps=n(S,"LI",{});var CS=s(Ps);Rie=n(CS,"STRONG",{});var Pft=s(Rie);vpo=r(Pft,"rembert"),Pft.forEach(t),Fpo=r(CS," \u2014 "),TI=n(CS,"A",{href:!0});var Bft=s(TI);Tpo=r(Bft,"RemBertTokenizer"),Bft.forEach(t),Mpo=r(CS," or "),MI=n(CS,"A",{href:!0});var Nft=s(MI);Epo=r(Nft,"RemBertTokenizerFast"),Nft.forEach(t),Cpo=r(CS," (RemBERT model)"),CS.forEach(t),wpo=i(S),Bs=n(S,"LI",{});var wS=s(Bs);Pie=n(wS,"STRONG",{});var Ift=s(Pie);Apo=r(Ift,"retribert"),Ift.forEach(t),Lpo=r(wS," \u2014 "),EI=n(wS,"A",{href:!0});var qft=s(EI);ypo=r(qft,"RetriBertTokenizer"),qft.forEach(t),xpo=r(wS," or "),CI=n(wS,"A",{href:!0});var jft=s(CI);$po=r(jft,"RetriBertTokenizerFast"),jft.forEach(t),kpo=r(wS," (RetriBERT model)"),wS.forEach(t),Spo=i(S),Ns=n(S,"LI",{});var AS=s(Ns);Bie=n(AS,"STRONG",{});var Dft=s(Bie);Rpo=r(Dft,"roberta"),Dft.forEach(t),Ppo=r(AS," \u2014 "),wI=n(AS,"A",{href:!0});var Gft=s(wI);Bpo=r(Gft,"RobertaTokenizer"),Gft.forEach(t),Npo=r(AS," or "),AI=n(AS,"A",{href:!0});var Oft=s(AI);Ipo=r(Oft,"RobertaTokenizerFast"),Oft.forEach(t),qpo=r(AS," (RoBERTa model)"),AS.forEach(t),jpo=i(S),Is=n(S,"LI",{});var LS=s(Is);Nie=n(LS,"STRONG",{});var Vft=s(Nie);Dpo=r(Vft,"roformer"),Vft.forEach(t),Gpo=r(LS," \u2014 "),LI=n(LS,"A",{href:!0});var Xft=s(LI);Opo=r(Xft,"RoFormerTokenizer"),Xft.forEach(t),Vpo=r(LS," or "),yI=n(LS,"A",{href:!0});var zft=s(yI);Xpo=r(zft,"RoFormerTokenizerFast"),zft.forEach(t),zpo=r(LS," (RoFormer model)"),LS.forEach(t),Qpo=i(S),Ah=n(S,"LI",{});var l9e=s(Ah);Iie=n(l9e,"STRONG",{});var Qft=s(Iie);Wpo=r(Qft,"speech_to_text"),Qft.forEach(t),Hpo=r(l9e," \u2014 "),xI=n(l9e,"A",{href:!0});var Wft=s(xI);Upo=r(Wft,"Speech2TextTokenizer"),Wft.forEach(t),Jpo=r(l9e," (Speech2Text model)"),l9e.forEach(t),Ypo=i(S),Lh=n(S,"LI",{});var i9e=s(Lh);qie=n(i9e,"STRONG",{});var Hft=s(qie);Kpo=r(Hft,"speech_to_text_2"),Hft.forEach(t),Zpo=r(i9e," \u2014 "),$I=n(i9e,"A",{href:!0});var Uft=s($I);e_o=r(Uft,"Speech2Text2Tokenizer"),Uft.forEach(t),o_o=r(i9e," (Speech2Text2 model)"),i9e.forEach(t),r_o=i(S),qs=n(S,"LI",{});var yS=s(qs);jie=n(yS,"STRONG",{});var Jft=s(jie);t_o=r(Jft,"splinter"),Jft.forEach(t),a_o=r(yS," \u2014 "),kI=n(yS,"A",{href:!0});var Yft=s(kI);n_o=r(Yft,"SplinterTokenizer"),Yft.forEach(t),s_o=r(yS," or "),SI=n(yS,"A",{href:!0});var Kft=s(SI);l_o=r(Kft,"SplinterTokenizerFast"),Kft.forEach(t),i_o=r(yS," (Splinter model)"),yS.forEach(t),d_o=i(S),js=n(S,"LI",{});var xS=s(js);Die=n(xS,"STRONG",{});var Zft=s(Die);c_o=r(Zft,"squeezebert"),Zft.forEach(t),f_o=r(xS," \u2014 "),RI=n(xS,"A",{href:!0});var emt=s(RI);m_o=r(emt,"SqueezeBertTokenizer"),emt.forEach(t),g_o=r(xS," or "),PI=n(xS,"A",{href:!0});var omt=s(PI);h_o=r(omt,"SqueezeBertTokenizerFast"),omt.forEach(t),p_o=r(xS," (SqueezeBERT model)"),xS.forEach(t),__o=i(S),Ds=n(S,"LI",{});var $S=s(Ds);Gie=n($S,"STRONG",{});var rmt=s(Gie);u_o=r(rmt,"t5"),rmt.forEach(t),b_o=r($S," \u2014 "),BI=n($S,"A",{href:!0});var tmt=s(BI);v_o=r(tmt,"T5Tokenizer"),tmt.forEach(t),F_o=r($S," or "),NI=n($S,"A",{href:!0});var amt=s(NI);T_o=r(amt,"T5TokenizerFast"),amt.forEach(t),M_o=r($S," (T5 model)"),$S.forEach(t),E_o=i(S),yh=n(S,"LI",{});var d9e=s(yh);Oie=n(d9e,"STRONG",{});var nmt=s(Oie);C_o=r(nmt,"tapas"),nmt.forEach(t),w_o=r(d9e," \u2014 "),II=n(d9e,"A",{href:!0});var smt=s(II);A_o=r(smt,"TapasTokenizer"),smt.forEach(t),L_o=r(d9e," (TAPAS model)"),d9e.forEach(t),y_o=i(S),xh=n(S,"LI",{});var c9e=s(xh);Vie=n(c9e,"STRONG",{});var lmt=s(Vie);x_o=r(lmt,"tapex"),lmt.forEach(t),$_o=r(c9e," \u2014 "),qI=n(c9e,"A",{href:!0});var imt=s(qI);k_o=r(imt,"TapexTokenizer"),imt.forEach(t),S_o=r(c9e," (TAPEX model)"),c9e.forEach(t),R_o=i(S),$h=n(S,"LI",{});var f9e=s($h);Xie=n(f9e,"STRONG",{});var dmt=s(Xie);P_o=r(dmt,"transfo-xl"),dmt.forEach(t),B_o=r(f9e," \u2014 "),jI=n(f9e,"A",{href:!0});var cmt=s(jI);N_o=r(cmt,"TransfoXLTokenizer"),cmt.forEach(t),I_o=r(f9e," (Transformer-XL model)"),f9e.forEach(t),q_o=i(S),Gs=n(S,"LI",{});var kS=s(Gs);zie=n(kS,"STRONG",{});var fmt=s(zie);j_o=r(fmt,"vilt"),fmt.forEach(t),D_o=r(kS," \u2014 "),DI=n(kS,"A",{href:!0});var mmt=s(DI);G_o=r(mmt,"BertTokenizer"),mmt.forEach(t),O_o=r(kS," or "),GI=n(kS,"A",{href:!0});var gmt=s(GI);V_o=r(gmt,"BertTokenizerFast"),gmt.forEach(t),X_o=r(kS," (ViLT model)"),kS.forEach(t),z_o=i(S),Os=n(S,"LI",{});var SS=s(Os);Qie=n(SS,"STRONG",{});var hmt=s(Qie);Q_o=r(hmt,"visual_bert"),hmt.forEach(t),W_o=r(SS," \u2014 "),OI=n(SS,"A",{href:!0});var pmt=s(OI);H_o=r(pmt,"BertTokenizer"),pmt.forEach(t),U_o=r(SS," or "),VI=n(SS,"A",{href:!0});var _mt=s(VI);J_o=r(_mt,"BertTokenizerFast"),_mt.forEach(t),Y_o=r(SS," (VisualBERT model)"),SS.forEach(t),K_o=i(S),kh=n(S,"LI",{});var m9e=s(kh);Wie=n(m9e,"STRONG",{});var umt=s(Wie);Z_o=r(umt,"wav2vec2"),umt.forEach(t),euo=r(m9e," \u2014 "),XI=n(m9e,"A",{href:!0});var bmt=s(XI);ouo=r(bmt,"Wav2Vec2CTCTokenizer"),bmt.forEach(t),ruo=r(m9e," (Wav2Vec2 model)"),m9e.forEach(t),tuo=i(S),Sh=n(S,"LI",{});var g9e=s(Sh);Hie=n(g9e,"STRONG",{});var vmt=s(Hie);auo=r(vmt,"wav2vec2-conformer"),vmt.forEach(t),nuo=r(g9e," \u2014 "),zI=n(g9e,"A",{href:!0});var Fmt=s(zI);suo=r(Fmt,"Wav2Vec2CTCTokenizer"),Fmt.forEach(t),luo=r(g9e," (Wav2Vec2-Conformer model)"),g9e.forEach(t),iuo=i(S),Rh=n(S,"LI",{});var h9e=s(Rh);Uie=n(h9e,"STRONG",{});var Tmt=s(Uie);duo=r(Tmt,"wav2vec2_phoneme"),Tmt.forEach(t),cuo=r(h9e," \u2014 "),QI=n(h9e,"A",{href:!0});var Mmt=s(QI);fuo=r(Mmt,"Wav2Vec2PhonemeCTCTokenizer"),Mmt.forEach(t),muo=r(h9e," (Wav2Vec2Phoneme model)"),h9e.forEach(t),guo=i(S),Vs=n(S,"LI",{});var RS=s(Vs);Jie=n(RS,"STRONG",{});var Emt=s(Jie);huo=r(Emt,"xglm"),Emt.forEach(t),puo=r(RS," \u2014 "),WI=n(RS,"A",{href:!0});var Cmt=s(WI);_uo=r(Cmt,"XGLMTokenizer"),Cmt.forEach(t),uuo=r(RS," or "),HI=n(RS,"A",{href:!0});var wmt=s(HI);buo=r(wmt,"XGLMTokenizerFast"),wmt.forEach(t),vuo=r(RS," (XGLM model)"),RS.forEach(t),Fuo=i(S),Ph=n(S,"LI",{});var p9e=s(Ph);Yie=n(p9e,"STRONG",{});var Amt=s(Yie);Tuo=r(Amt,"xlm"),Amt.forEach(t),Muo=r(p9e," \u2014 "),UI=n(p9e,"A",{href:!0});var Lmt=s(UI);Euo=r(Lmt,"XLMTokenizer"),Lmt.forEach(t),Cuo=r(p9e," (XLM model)"),p9e.forEach(t),wuo=i(S),Bh=n(S,"LI",{});var _9e=s(Bh);Kie=n(_9e,"STRONG",{});var ymt=s(Kie);Auo=r(ymt,"xlm-prophetnet"),ymt.forEach(t),Luo=r(_9e," \u2014 "),JI=n(_9e,"A",{href:!0});var xmt=s(JI);yuo=r(xmt,"XLMProphetNetTokenizer"),xmt.forEach(t),xuo=r(_9e," (XLM-ProphetNet model)"),_9e.forEach(t),$uo=i(S),Xs=n(S,"LI",{});var PS=s(Xs);Zie=n(PS,"STRONG",{});var $mt=s(Zie);kuo=r($mt,"xlm-roberta"),$mt.forEach(t),Suo=r(PS," \u2014 "),YI=n(PS,"A",{href:!0});var kmt=s(YI);Ruo=r(kmt,"XLMRobertaTokenizer"),kmt.forEach(t),Puo=r(PS," or "),KI=n(PS,"A",{href:!0});var Smt=s(KI);Buo=r(Smt,"XLMRobertaTokenizerFast"),Smt.forEach(t),Nuo=r(PS," (XLM-RoBERTa model)"),PS.forEach(t),Iuo=i(S),zs=n(S,"LI",{});var BS=s(zs);ede=n(BS,"STRONG",{});var Rmt=s(ede);quo=r(Rmt,"xlm-roberta-xl"),Rmt.forEach(t),juo=r(BS," \u2014 "),ZI=n(BS,"A",{href:!0});var Pmt=s(ZI);Duo=r(Pmt,"RobertaTokenizer"),Pmt.forEach(t),Guo=r(BS," or "),eq=n(BS,"A",{href:!0});var Bmt=s(eq);Ouo=r(Bmt,"RobertaTokenizerFast"),Bmt.forEach(t),Vuo=r(BS," (XLM-RoBERTa-XL model)"),BS.forEach(t),Xuo=i(S),Qs=n(S,"LI",{});var NS=s(Qs);ode=n(NS,"STRONG",{});var Nmt=s(ode);zuo=r(Nmt,"xlnet"),Nmt.forEach(t),Quo=r(NS," \u2014 "),oq=n(NS,"A",{href:!0});var Imt=s(oq);Wuo=r(Imt,"XLNetTokenizer"),Imt.forEach(t),Huo=r(NS," or "),rq=n(NS,"A",{href:!0});var qmt=s(rq);Uuo=r(qmt,"XLNetTokenizerFast"),qmt.forEach(t),Juo=r(NS," (XLNet model)"),NS.forEach(t),Yuo=i(S),Ws=n(S,"LI",{});var IS=s(Ws);rde=n(IS,"STRONG",{});var jmt=s(rde);Kuo=r(jmt,"yoso"),jmt.forEach(t),Zuo=r(IS," \u2014 "),tq=n(IS,"A",{href:!0});var Dmt=s(tq);e2o=r(Dmt,"AlbertTokenizer"),Dmt.forEach(t),o2o=r(IS," or "),aq=n(IS,"A",{href:!0});var Gmt=s(aq);r2o=r(Gmt,"AlbertTokenizerFast"),Gmt.forEach(t),t2o=r(IS," (YOSO model)"),IS.forEach(t),S.forEach(t),a2o=i(el),T(Nh.$$.fragment,el),el.forEach(t),n2o=i(Zs),Ih=n(Zs,"DIV",{class:!0});var NQe=s(Ih);T(CL.$$.fragment,NQe),s2o=i(NQe),tde=n(NQe,"P",{});var Omt=s(tde);l2o=r(Omt,"Register a new tokenizer in this mapping."),Omt.forEach(t),NQe.forEach(t),Zs.forEach(t),BXe=i(f),ji=n(f,"H2",{class:!0});var IQe=s(ji);qh=n(IQe,"A",{id:!0,class:!0,href:!0});var Vmt=s(qh);ade=n(Vmt,"SPAN",{});var Xmt=s(ade);T(wL.$$.fragment,Xmt),Xmt.forEach(t),Vmt.forEach(t),i2o=i(IQe),nde=n(IQe,"SPAN",{});var zmt=s(nde);d2o=r(zmt,"AutoFeatureExtractor"),zmt.forEach(t),IQe.forEach(t),NXe=i(f),yo=n(f,"DIV",{class:!0});var ol=s(yo);T(AL.$$.fragment,ol),c2o=i(ol),LL=n(ol,"P",{});var qQe=s(LL);f2o=r(qQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),nq=n(qQe,"A",{href:!0});var Qmt=s(nq);m2o=r(Qmt,"AutoFeatureExtractor.from_pretrained()"),Qmt.forEach(t),g2o=r(qQe," class method."),qQe.forEach(t),h2o=i(ol),yL=n(ol,"P",{});var jQe=s(yL);p2o=r(jQe,"This class cannot be instantiated directly using "),sde=n(jQe,"CODE",{});var Wmt=s(sde);_2o=r(Wmt,"__init__()"),Wmt.forEach(t),u2o=r(jQe," (throws an error)."),jQe.forEach(t),b2o=i(ol),Ue=n(ol,"DIV",{class:!0});var na=s(Ue);T(xL.$$.fragment,na),v2o=i(na),lde=n(na,"P",{});var Hmt=s(lde);F2o=r(Hmt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Hmt.forEach(t),T2o=i(na),Ba=n(na,"P",{});var hw=s(Ba);M2o=r(hw,"The feature extractor class to instantiate is selected based on the "),ide=n(hw,"CODE",{});var Umt=s(ide);E2o=r(Umt,"model_type"),Umt.forEach(t),C2o=r(hw,` property of the config object
(either passed as an argument or loaded from `),dde=n(hw,"CODE",{});var Jmt=s(dde);w2o=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),A2o=r(hw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),cde=n(hw,"CODE",{});var Ymt=s(cde);L2o=r(Ymt,"pretrained_model_name_or_path"),Ymt.forEach(t),y2o=r(hw,":"),hw.forEach(t),x2o=i(na),Y=n(na,"UL",{});var K=s(Y);jh=n(K,"LI",{});var u9e=s(jh);fde=n(u9e,"STRONG",{});var Kmt=s(fde);$2o=r(Kmt,"beit"),Kmt.forEach(t),k2o=r(u9e," \u2014 "),sq=n(u9e,"A",{href:!0});var Zmt=s(sq);S2o=r(Zmt,"BeitFeatureExtractor"),Zmt.forEach(t),R2o=r(u9e," (BEiT model)"),u9e.forEach(t),P2o=i(K),Dh=n(K,"LI",{});var b9e=s(Dh);mde=n(b9e,"STRONG",{});var egt=s(mde);B2o=r(egt,"clip"),egt.forEach(t),N2o=r(b9e," \u2014 "),lq=n(b9e,"A",{href:!0});var ogt=s(lq);I2o=r(ogt,"CLIPFeatureExtractor"),ogt.forEach(t),q2o=r(b9e," (CLIP model)"),b9e.forEach(t),j2o=i(K),Gh=n(K,"LI",{});var v9e=s(Gh);gde=n(v9e,"STRONG",{});var rgt=s(gde);D2o=r(rgt,"convnext"),rgt.forEach(t),G2o=r(v9e," \u2014 "),iq=n(v9e,"A",{href:!0});var tgt=s(iq);O2o=r(tgt,"ConvNextFeatureExtractor"),tgt.forEach(t),V2o=r(v9e," (ConvNeXT model)"),v9e.forEach(t),X2o=i(K),Oh=n(K,"LI",{});var F9e=s(Oh);hde=n(F9e,"STRONG",{});var agt=s(hde);z2o=r(agt,"cvt"),agt.forEach(t),Q2o=r(F9e," \u2014 "),dq=n(F9e,"A",{href:!0});var ngt=s(dq);W2o=r(ngt,"ConvNextFeatureExtractor"),ngt.forEach(t),H2o=r(F9e," (CvT model)"),F9e.forEach(t),U2o=i(K),Vh=n(K,"LI",{});var T9e=s(Vh);pde=n(T9e,"STRONG",{});var sgt=s(pde);J2o=r(sgt,"data2vec-audio"),sgt.forEach(t),Y2o=r(T9e," \u2014 "),cq=n(T9e,"A",{href:!0});var lgt=s(cq);K2o=r(lgt,"Wav2Vec2FeatureExtractor"),lgt.forEach(t),Z2o=r(T9e," (Data2VecAudio model)"),T9e.forEach(t),e1o=i(K),Xh=n(K,"LI",{});var M9e=s(Xh);_de=n(M9e,"STRONG",{});var igt=s(_de);o1o=r(igt,"data2vec-vision"),igt.forEach(t),r1o=r(M9e," \u2014 "),fq=n(M9e,"A",{href:!0});var dgt=s(fq);t1o=r(dgt,"BeitFeatureExtractor"),dgt.forEach(t),a1o=r(M9e," (Data2VecVision model)"),M9e.forEach(t),n1o=i(K),zh=n(K,"LI",{});var E9e=s(zh);ude=n(E9e,"STRONG",{});var cgt=s(ude);s1o=r(cgt,"deit"),cgt.forEach(t),l1o=r(E9e," \u2014 "),mq=n(E9e,"A",{href:!0});var fgt=s(mq);i1o=r(fgt,"DeiTFeatureExtractor"),fgt.forEach(t),d1o=r(E9e," (DeiT model)"),E9e.forEach(t),c1o=i(K),Qh=n(K,"LI",{});var C9e=s(Qh);bde=n(C9e,"STRONG",{});var mgt=s(bde);f1o=r(mgt,"detr"),mgt.forEach(t),m1o=r(C9e," \u2014 "),gq=n(C9e,"A",{href:!0});var ggt=s(gq);g1o=r(ggt,"DetrFeatureExtractor"),ggt.forEach(t),h1o=r(C9e," (DETR model)"),C9e.forEach(t),p1o=i(K),Wh=n(K,"LI",{});var w9e=s(Wh);vde=n(w9e,"STRONG",{});var hgt=s(vde);_1o=r(hgt,"dpt"),hgt.forEach(t),u1o=r(w9e," \u2014 "),hq=n(w9e,"A",{href:!0});var pgt=s(hq);b1o=r(pgt,"DPTFeatureExtractor"),pgt.forEach(t),v1o=r(w9e," (DPT model)"),w9e.forEach(t),F1o=i(K),Hh=n(K,"LI",{});var A9e=s(Hh);Fde=n(A9e,"STRONG",{});var _gt=s(Fde);T1o=r(_gt,"flava"),_gt.forEach(t),M1o=r(A9e," \u2014 "),pq=n(A9e,"A",{href:!0});var ugt=s(pq);E1o=r(ugt,"FlavaFeatureExtractor"),ugt.forEach(t),C1o=r(A9e," (FLAVA model)"),A9e.forEach(t),w1o=i(K),Uh=n(K,"LI",{});var L9e=s(Uh);Tde=n(L9e,"STRONG",{});var bgt=s(Tde);A1o=r(bgt,"glpn"),bgt.forEach(t),L1o=r(L9e," \u2014 "),_q=n(L9e,"A",{href:!0});var vgt=s(_q);y1o=r(vgt,"GLPNFeatureExtractor"),vgt.forEach(t),x1o=r(L9e," (GLPN model)"),L9e.forEach(t),$1o=i(K),Jh=n(K,"LI",{});var y9e=s(Jh);Mde=n(y9e,"STRONG",{});var Fgt=s(Mde);k1o=r(Fgt,"groupvit"),Fgt.forEach(t),S1o=r(y9e," \u2014 "),uq=n(y9e,"A",{href:!0});var Tgt=s(uq);R1o=r(Tgt,"CLIPFeatureExtractor"),Tgt.forEach(t),P1o=r(y9e," (GroupViT model)"),y9e.forEach(t),B1o=i(K),Yh=n(K,"LI",{});var x9e=s(Yh);Ede=n(x9e,"STRONG",{});var Mgt=s(Ede);N1o=r(Mgt,"hubert"),Mgt.forEach(t),I1o=r(x9e," \u2014 "),bq=n(x9e,"A",{href:!0});var Egt=s(bq);q1o=r(Egt,"Wav2Vec2FeatureExtractor"),Egt.forEach(t),j1o=r(x9e," (Hubert model)"),x9e.forEach(t),D1o=i(K),Kh=n(K,"LI",{});var $9e=s(Kh);Cde=n($9e,"STRONG",{});var Cgt=s(Cde);G1o=r(Cgt,"imagegpt"),Cgt.forEach(t),O1o=r($9e," \u2014 "),vq=n($9e,"A",{href:!0});var wgt=s(vq);V1o=r(wgt,"ImageGPTFeatureExtractor"),wgt.forEach(t),X1o=r($9e," (ImageGPT model)"),$9e.forEach(t),z1o=i(K),Zh=n(K,"LI",{});var k9e=s(Zh);wde=n(k9e,"STRONG",{});var Agt=s(wde);Q1o=r(Agt,"layoutlmv2"),Agt.forEach(t),W1o=r(k9e," \u2014 "),Fq=n(k9e,"A",{href:!0});var Lgt=s(Fq);H1o=r(Lgt,"LayoutLMv2FeatureExtractor"),Lgt.forEach(t),U1o=r(k9e," (LayoutLMv2 model)"),k9e.forEach(t),J1o=i(K),ep=n(K,"LI",{});var S9e=s(ep);Ade=n(S9e,"STRONG",{});var ygt=s(Ade);Y1o=r(ygt,"layoutlmv3"),ygt.forEach(t),K1o=r(S9e," \u2014 "),Tq=n(S9e,"A",{href:!0});var xgt=s(Tq);Z1o=r(xgt,"LayoutLMv3FeatureExtractor"),xgt.forEach(t),ebo=r(S9e," (LayoutLMv3 model)"),S9e.forEach(t),obo=i(K),op=n(K,"LI",{});var R9e=s(op);Lde=n(R9e,"STRONG",{});var $gt=s(Lde);rbo=r($gt,"levit"),$gt.forEach(t),tbo=r(R9e," \u2014 "),Mq=n(R9e,"A",{href:!0});var kgt=s(Mq);abo=r(kgt,"LevitFeatureExtractor"),kgt.forEach(t),nbo=r(R9e," (LeViT model)"),R9e.forEach(t),sbo=i(K),rp=n(K,"LI",{});var P9e=s(rp);yde=n(P9e,"STRONG",{});var Sgt=s(yde);lbo=r(Sgt,"maskformer"),Sgt.forEach(t),ibo=r(P9e," \u2014 "),Eq=n(P9e,"A",{href:!0});var Rgt=s(Eq);dbo=r(Rgt,"MaskFormerFeatureExtractor"),Rgt.forEach(t),cbo=r(P9e," (MaskFormer model)"),P9e.forEach(t),fbo=i(K),tp=n(K,"LI",{});var B9e=s(tp);xde=n(B9e,"STRONG",{});var Pgt=s(xde);mbo=r(Pgt,"mctct"),Pgt.forEach(t),gbo=r(B9e," \u2014 "),Cq=n(B9e,"A",{href:!0});var Bgt=s(Cq);hbo=r(Bgt,"MCTCTFeatureExtractor"),Bgt.forEach(t),pbo=r(B9e," (M-CTC-T model)"),B9e.forEach(t),_bo=i(K),ap=n(K,"LI",{});var N9e=s(ap);$de=n(N9e,"STRONG",{});var Ngt=s($de);ubo=r(Ngt,"mobilevit"),Ngt.forEach(t),bbo=r(N9e," \u2014 "),wq=n(N9e,"A",{href:!0});var Igt=s(wq);vbo=r(Igt,"MobileViTFeatureExtractor"),Igt.forEach(t),Fbo=r(N9e," (MobileViT model)"),N9e.forEach(t),Tbo=i(K),np=n(K,"LI",{});var I9e=s(np);kde=n(I9e,"STRONG",{});var qgt=s(kde);Mbo=r(qgt,"perceiver"),qgt.forEach(t),Ebo=r(I9e," \u2014 "),Aq=n(I9e,"A",{href:!0});var jgt=s(Aq);Cbo=r(jgt,"PerceiverFeatureExtractor"),jgt.forEach(t),wbo=r(I9e," (Perceiver model)"),I9e.forEach(t),Abo=i(K),sp=n(K,"LI",{});var q9e=s(sp);Sde=n(q9e,"STRONG",{});var Dgt=s(Sde);Lbo=r(Dgt,"poolformer"),Dgt.forEach(t),ybo=r(q9e," \u2014 "),Lq=n(q9e,"A",{href:!0});var Ggt=s(Lq);xbo=r(Ggt,"PoolFormerFeatureExtractor"),Ggt.forEach(t),$bo=r(q9e," (PoolFormer model)"),q9e.forEach(t),kbo=i(K),lp=n(K,"LI",{});var j9e=s(lp);Rde=n(j9e,"STRONG",{});var Ogt=s(Rde);Sbo=r(Ogt,"regnet"),Ogt.forEach(t),Rbo=r(j9e," \u2014 "),yq=n(j9e,"A",{href:!0});var Vgt=s(yq);Pbo=r(Vgt,"ConvNextFeatureExtractor"),Vgt.forEach(t),Bbo=r(j9e," (RegNet model)"),j9e.forEach(t),Nbo=i(K),ip=n(K,"LI",{});var D9e=s(ip);Pde=n(D9e,"STRONG",{});var Xgt=s(Pde);Ibo=r(Xgt,"resnet"),Xgt.forEach(t),qbo=r(D9e," \u2014 "),xq=n(D9e,"A",{href:!0});var zgt=s(xq);jbo=r(zgt,"ConvNextFeatureExtractor"),zgt.forEach(t),Dbo=r(D9e," (ResNet model)"),D9e.forEach(t),Gbo=i(K),dp=n(K,"LI",{});var G9e=s(dp);Bde=n(G9e,"STRONG",{});var Qgt=s(Bde);Obo=r(Qgt,"segformer"),Qgt.forEach(t),Vbo=r(G9e," \u2014 "),$q=n(G9e,"A",{href:!0});var Wgt=s($q);Xbo=r(Wgt,"SegformerFeatureExtractor"),Wgt.forEach(t),zbo=r(G9e," (SegFormer model)"),G9e.forEach(t),Qbo=i(K),cp=n(K,"LI",{});var O9e=s(cp);Nde=n(O9e,"STRONG",{});var Hgt=s(Nde);Wbo=r(Hgt,"speech_to_text"),Hgt.forEach(t),Hbo=r(O9e," \u2014 "),kq=n(O9e,"A",{href:!0});var Ugt=s(kq);Ubo=r(Ugt,"Speech2TextFeatureExtractor"),Ugt.forEach(t),Jbo=r(O9e," (Speech2Text model)"),O9e.forEach(t),Ybo=i(K),fp=n(K,"LI",{});var V9e=s(fp);Ide=n(V9e,"STRONG",{});var Jgt=s(Ide);Kbo=r(Jgt,"swin"),Jgt.forEach(t),Zbo=r(V9e," \u2014 "),Sq=n(V9e,"A",{href:!0});var Ygt=s(Sq);evo=r(Ygt,"ViTFeatureExtractor"),Ygt.forEach(t),ovo=r(V9e," (Swin Transformer model)"),V9e.forEach(t),rvo=i(K),mp=n(K,"LI",{});var X9e=s(mp);qde=n(X9e,"STRONG",{});var Kgt=s(qde);tvo=r(Kgt,"van"),Kgt.forEach(t),avo=r(X9e," \u2014 "),Rq=n(X9e,"A",{href:!0});var Zgt=s(Rq);nvo=r(Zgt,"ConvNextFeatureExtractor"),Zgt.forEach(t),svo=r(X9e," (VAN model)"),X9e.forEach(t),lvo=i(K),gp=n(K,"LI",{});var z9e=s(gp);jde=n(z9e,"STRONG",{});var eht=s(jde);ivo=r(eht,"vilt"),eht.forEach(t),dvo=r(z9e," \u2014 "),Pq=n(z9e,"A",{href:!0});var oht=s(Pq);cvo=r(oht,"ViltFeatureExtractor"),oht.forEach(t),fvo=r(z9e," (ViLT model)"),z9e.forEach(t),mvo=i(K),hp=n(K,"LI",{});var Q9e=s(hp);Dde=n(Q9e,"STRONG",{});var rht=s(Dde);gvo=r(rht,"vit"),rht.forEach(t),hvo=r(Q9e," \u2014 "),Bq=n(Q9e,"A",{href:!0});var tht=s(Bq);pvo=r(tht,"ViTFeatureExtractor"),tht.forEach(t),_vo=r(Q9e," (ViT model)"),Q9e.forEach(t),uvo=i(K),pp=n(K,"LI",{});var W9e=s(pp);Gde=n(W9e,"STRONG",{});var aht=s(Gde);bvo=r(aht,"vit_mae"),aht.forEach(t),vvo=r(W9e," \u2014 "),Nq=n(W9e,"A",{href:!0});var nht=s(Nq);Fvo=r(nht,"ViTFeatureExtractor"),nht.forEach(t),Tvo=r(W9e," (ViTMAE model)"),W9e.forEach(t),Mvo=i(K),_p=n(K,"LI",{});var H9e=s(_p);Ode=n(H9e,"STRONG",{});var sht=s(Ode);Evo=r(sht,"wav2vec2"),sht.forEach(t),Cvo=r(H9e," \u2014 "),Iq=n(H9e,"A",{href:!0});var lht=s(Iq);wvo=r(lht,"Wav2Vec2FeatureExtractor"),lht.forEach(t),Avo=r(H9e," (Wav2Vec2 model)"),H9e.forEach(t),Lvo=i(K),up=n(K,"LI",{});var U9e=s(up);Vde=n(U9e,"STRONG",{});var iht=s(Vde);yvo=r(iht,"wav2vec2-conformer"),iht.forEach(t),xvo=r(U9e," \u2014 "),qq=n(U9e,"A",{href:!0});var dht=s(qq);$vo=r(dht,"Wav2Vec2FeatureExtractor"),dht.forEach(t),kvo=r(U9e," (Wav2Vec2-Conformer model)"),U9e.forEach(t),Svo=i(K),bp=n(K,"LI",{});var J9e=s(bp);Xde=n(J9e,"STRONG",{});var cht=s(Xde);Rvo=r(cht,"yolos"),cht.forEach(t),Pvo=r(J9e," \u2014 "),jq=n(J9e,"A",{href:!0});var fht=s(jq);Bvo=r(fht,"YolosFeatureExtractor"),fht.forEach(t),Nvo=r(J9e," (YOLOS model)"),J9e.forEach(t),K.forEach(t),Ivo=i(na),T(vp.$$.fragment,na),qvo=i(na),T(Fp.$$.fragment,na),na.forEach(t),jvo=i(ol),Tp=n(ol,"DIV",{class:!0});var DQe=s(Tp);T($L.$$.fragment,DQe),Dvo=i(DQe),zde=n(DQe,"P",{});var mht=s(zde);Gvo=r(mht,"Register a new feature extractor for this class."),mht.forEach(t),DQe.forEach(t),ol.forEach(t),IXe=i(f),Di=n(f,"H2",{class:!0});var GQe=s(Di);Mp=n(GQe,"A",{id:!0,class:!0,href:!0});var ght=s(Mp);Qde=n(ght,"SPAN",{});var hht=s(Qde);T(kL.$$.fragment,hht),hht.forEach(t),ght.forEach(t),Ovo=i(GQe),Wde=n(GQe,"SPAN",{});var pht=s(Wde);Vvo=r(pht,"AutoProcessor"),pht.forEach(t),GQe.forEach(t),qXe=i(f),xo=n(f,"DIV",{class:!0});var rl=s(xo);T(SL.$$.fragment,rl),Xvo=i(rl),RL=n(rl,"P",{});var OQe=s(RL);zvo=r(OQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Dq=n(OQe,"A",{href:!0});var _ht=s(Dq);Qvo=r(_ht,"AutoProcessor.from_pretrained()"),_ht.forEach(t),Wvo=r(OQe," class method."),OQe.forEach(t),Hvo=i(rl),PL=n(rl,"P",{});var VQe=s(PL);Uvo=r(VQe,"This class cannot be instantiated directly using "),Hde=n(VQe,"CODE",{});var uht=s(Hde);Jvo=r(uht,"__init__()"),uht.forEach(t),Yvo=r(VQe," (throws an error)."),VQe.forEach(t),Kvo=i(rl),Je=n(rl,"DIV",{class:!0});var sa=s(Je);T(BL.$$.fragment,sa),Zvo=i(sa),Ude=n(sa,"P",{});var bht=s(Ude);eFo=r(bht,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),bht.forEach(t),oFo=i(sa),Gi=n(sa,"P",{});var Xre=s(Gi);rFo=r(Xre,"The processor class to instantiate is selected based on the "),Jde=n(Xre,"CODE",{});var vht=s(Jde);tFo=r(vht,"model_type"),vht.forEach(t),aFo=r(Xre,` property of the config object (either
passed as an argument or loaded from `),Yde=n(Xre,"CODE",{});var Fht=s(Yde);nFo=r(Fht,"pretrained_model_name_or_path"),Fht.forEach(t),sFo=r(Xre," if possible):"),Xre.forEach(t),lFo=i(sa),pe=n(sa,"UL",{});var be=s(pe);Ep=n(be,"LI",{});var Y9e=s(Ep);Kde=n(Y9e,"STRONG",{});var Tht=s(Kde);iFo=r(Tht,"clip"),Tht.forEach(t),dFo=r(Y9e," \u2014 "),Gq=n(Y9e,"A",{href:!0});var Mht=s(Gq);cFo=r(Mht,"CLIPProcessor"),Mht.forEach(t),fFo=r(Y9e," (CLIP model)"),Y9e.forEach(t),mFo=i(be),Cp=n(be,"LI",{});var K9e=s(Cp);Zde=n(K9e,"STRONG",{});var Eht=s(Zde);gFo=r(Eht,"flava"),Eht.forEach(t),hFo=r(K9e," \u2014 "),ece=n(K9e,"CODE",{});var Cht=s(ece);pFo=r(Cht,"FLAVAProcessor"),Cht.forEach(t),_Fo=r(K9e," (FLAVA model)"),K9e.forEach(t),uFo=i(be),wp=n(be,"LI",{});var Z9e=s(wp);oce=n(Z9e,"STRONG",{});var wht=s(oce);bFo=r(wht,"groupvit"),wht.forEach(t),vFo=r(Z9e," \u2014 "),Oq=n(Z9e,"A",{href:!0});var Aht=s(Oq);FFo=r(Aht,"CLIPProcessor"),Aht.forEach(t),TFo=r(Z9e," (GroupViT model)"),Z9e.forEach(t),MFo=i(be),Ap=n(be,"LI",{});var exe=s(Ap);rce=n(exe,"STRONG",{});var Lht=s(rce);EFo=r(Lht,"layoutlmv2"),Lht.forEach(t),CFo=r(exe," \u2014 "),Vq=n(exe,"A",{href:!0});var yht=s(Vq);wFo=r(yht,"LayoutLMv2Processor"),yht.forEach(t),AFo=r(exe," (LayoutLMv2 model)"),exe.forEach(t),LFo=i(be),Lp=n(be,"LI",{});var oxe=s(Lp);tce=n(oxe,"STRONG",{});var xht=s(tce);yFo=r(xht,"layoutlmv3"),xht.forEach(t),xFo=r(oxe," \u2014 "),Xq=n(oxe,"A",{href:!0});var $ht=s(Xq);$Fo=r($ht,"LayoutLMv3Processor"),$ht.forEach(t),kFo=r(oxe," (LayoutLMv3 model)"),oxe.forEach(t),SFo=i(be),yp=n(be,"LI",{});var rxe=s(yp);ace=n(rxe,"STRONG",{});var kht=s(ace);RFo=r(kht,"layoutxlm"),kht.forEach(t),PFo=r(rxe," \u2014 "),zq=n(rxe,"A",{href:!0});var Sht=s(zq);BFo=r(Sht,"LayoutXLMProcessor"),Sht.forEach(t),NFo=r(rxe," (LayoutXLM model)"),rxe.forEach(t),IFo=i(be),xp=n(be,"LI",{});var txe=s(xp);nce=n(txe,"STRONG",{});var Rht=s(nce);qFo=r(Rht,"sew"),Rht.forEach(t),jFo=r(txe," \u2014 "),Qq=n(txe,"A",{href:!0});var Pht=s(Qq);DFo=r(Pht,"Wav2Vec2Processor"),Pht.forEach(t),GFo=r(txe," (SEW model)"),txe.forEach(t),OFo=i(be),$p=n(be,"LI",{});var axe=s($p);sce=n(axe,"STRONG",{});var Bht=s(sce);VFo=r(Bht,"sew-d"),Bht.forEach(t),XFo=r(axe," \u2014 "),Wq=n(axe,"A",{href:!0});var Nht=s(Wq);zFo=r(Nht,"Wav2Vec2Processor"),Nht.forEach(t),QFo=r(axe," (SEW-D model)"),axe.forEach(t),WFo=i(be),kp=n(be,"LI",{});var nxe=s(kp);lce=n(nxe,"STRONG",{});var Iht=s(lce);HFo=r(Iht,"speech_to_text"),Iht.forEach(t),UFo=r(nxe," \u2014 "),Hq=n(nxe,"A",{href:!0});var qht=s(Hq);JFo=r(qht,"Speech2TextProcessor"),qht.forEach(t),YFo=r(nxe," (Speech2Text model)"),nxe.forEach(t),KFo=i(be),Sp=n(be,"LI",{});var sxe=s(Sp);ice=n(sxe,"STRONG",{});var jht=s(ice);ZFo=r(jht,"speech_to_text_2"),jht.forEach(t),e6o=r(sxe," \u2014 "),Uq=n(sxe,"A",{href:!0});var Dht=s(Uq);o6o=r(Dht,"Speech2Text2Processor"),Dht.forEach(t),r6o=r(sxe," (Speech2Text2 model)"),sxe.forEach(t),t6o=i(be),Rp=n(be,"LI",{});var lxe=s(Rp);dce=n(lxe,"STRONG",{});var Ght=s(dce);a6o=r(Ght,"trocr"),Ght.forEach(t),n6o=r(lxe," \u2014 "),Jq=n(lxe,"A",{href:!0});var Oht=s(Jq);s6o=r(Oht,"TrOCRProcessor"),Oht.forEach(t),l6o=r(lxe," (TrOCR model)"),lxe.forEach(t),i6o=i(be),Pp=n(be,"LI",{});var ixe=s(Pp);cce=n(ixe,"STRONG",{});var Vht=s(cce);d6o=r(Vht,"unispeech"),Vht.forEach(t),c6o=r(ixe," \u2014 "),Yq=n(ixe,"A",{href:!0});var Xht=s(Yq);f6o=r(Xht,"Wav2Vec2Processor"),Xht.forEach(t),m6o=r(ixe," (UniSpeech model)"),ixe.forEach(t),g6o=i(be),Bp=n(be,"LI",{});var dxe=s(Bp);fce=n(dxe,"STRONG",{});var zht=s(fce);h6o=r(zht,"unispeech-sat"),zht.forEach(t),p6o=r(dxe," \u2014 "),Kq=n(dxe,"A",{href:!0});var Qht=s(Kq);_6o=r(Qht,"Wav2Vec2Processor"),Qht.forEach(t),u6o=r(dxe," (UniSpeechSat model)"),dxe.forEach(t),b6o=i(be),Np=n(be,"LI",{});var cxe=s(Np);mce=n(cxe,"STRONG",{});var Wht=s(mce);v6o=r(Wht,"vilt"),Wht.forEach(t),F6o=r(cxe," \u2014 "),Zq=n(cxe,"A",{href:!0});var Hht=s(Zq);T6o=r(Hht,"ViltProcessor"),Hht.forEach(t),M6o=r(cxe," (ViLT model)"),cxe.forEach(t),E6o=i(be),Ip=n(be,"LI",{});var fxe=s(Ip);gce=n(fxe,"STRONG",{});var Uht=s(gce);C6o=r(Uht,"vision-text-dual-encoder"),Uht.forEach(t),w6o=r(fxe," \u2014 "),ej=n(fxe,"A",{href:!0});var Jht=s(ej);A6o=r(Jht,"VisionTextDualEncoderProcessor"),Jht.forEach(t),L6o=r(fxe," (VisionTextDualEncoder model)"),fxe.forEach(t),y6o=i(be),qp=n(be,"LI",{});var mxe=s(qp);hce=n(mxe,"STRONG",{});var Yht=s(hce);x6o=r(Yht,"wav2vec2"),Yht.forEach(t),$6o=r(mxe," \u2014 "),oj=n(mxe,"A",{href:!0});var Kht=s(oj);k6o=r(Kht,"Wav2Vec2Processor"),Kht.forEach(t),S6o=r(mxe," (Wav2Vec2 model)"),mxe.forEach(t),R6o=i(be),jp=n(be,"LI",{});var gxe=s(jp);pce=n(gxe,"STRONG",{});var Zht=s(pce);P6o=r(Zht,"wav2vec2-conformer"),Zht.forEach(t),B6o=r(gxe," \u2014 "),rj=n(gxe,"A",{href:!0});var ept=s(rj);N6o=r(ept,"Wav2Vec2Processor"),ept.forEach(t),I6o=r(gxe," (Wav2Vec2-Conformer model)"),gxe.forEach(t),q6o=i(be),Dp=n(be,"LI",{});var hxe=s(Dp);_ce=n(hxe,"STRONG",{});var opt=s(_ce);j6o=r(opt,"wavlm"),opt.forEach(t),D6o=r(hxe," \u2014 "),tj=n(hxe,"A",{href:!0});var rpt=s(tj);G6o=r(rpt,"Wav2Vec2Processor"),rpt.forEach(t),O6o=r(hxe," (WavLM model)"),hxe.forEach(t),be.forEach(t),V6o=i(sa),T(Gp.$$.fragment,sa),X6o=i(sa),T(Op.$$.fragment,sa),sa.forEach(t),z6o=i(rl),Vp=n(rl,"DIV",{class:!0});var XQe=s(Vp);T(NL.$$.fragment,XQe),Q6o=i(XQe),uce=n(XQe,"P",{});var tpt=s(uce);W6o=r(tpt,"Register a new processor for this class."),tpt.forEach(t),XQe.forEach(t),rl.forEach(t),jXe=i(f),Oi=n(f,"H2",{class:!0});var zQe=s(Oi);Xp=n(zQe,"A",{id:!0,class:!0,href:!0});var apt=s(Xp);bce=n(apt,"SPAN",{});var npt=s(bce);T(IL.$$.fragment,npt),npt.forEach(t),apt.forEach(t),H6o=i(zQe),vce=n(zQe,"SPAN",{});var spt=s(vce);U6o=r(spt,"AutoModel"),spt.forEach(t),zQe.forEach(t),DXe=i(f),$o=n(f,"DIV",{class:!0});var tl=s($o);T(qL.$$.fragment,tl),J6o=i(tl),Vi=n(tl,"P",{});var zre=s(Vi);Y6o=r(zre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aj=n(zre,"A",{href:!0});var lpt=s(aj);K6o=r(lpt,"from_pretrained()"),lpt.forEach(t),Z6o=r(zre," class method or the "),nj=n(zre,"A",{href:!0});var ipt=s(nj);eTo=r(ipt,"from_config()"),ipt.forEach(t),oTo=r(zre,` class
method.`),zre.forEach(t),rTo=i(tl),jL=n(tl,"P",{});var QQe=s(jL);tTo=r(QQe,"This class cannot be instantiated directly using "),Fce=n(QQe,"CODE",{});var dpt=s(Fce);aTo=r(dpt,"__init__()"),dpt.forEach(t),nTo=r(QQe," (throws an error)."),QQe.forEach(t),sTo=i(tl),it=n(tl,"DIV",{class:!0});var pw=s(it);T(DL.$$.fragment,pw),lTo=i(pw),Tce=n(pw,"P",{});var cpt=s(Tce);iTo=r(cpt,"Instantiates one of the base model classes of the library from a configuration."),cpt.forEach(t),dTo=i(pw),Xi=n(pw,"P",{});var Qre=s(Xi);cTo=r(Qre,`Note:
Loading a model from its configuration file does `),Mce=n(Qre,"STRONG",{});var fpt=s(Mce);fTo=r(fpt,"not"),fpt.forEach(t),mTo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=n(Qre,"A",{href:!0});var mpt=s(sj);gTo=r(mpt,"from_pretrained()"),mpt.forEach(t),hTo=r(Qre," to load the model weights."),Qre.forEach(t),pTo=i(pw),T(zp.$$.fragment,pw),pw.forEach(t),_To=i(tl),Ye=n(tl,"DIV",{class:!0});var la=s(Ye);T(GL.$$.fragment,la),uTo=i(la),Ece=n(la,"P",{});var gpt=s(Ece);bTo=r(gpt,"Instantiate one of the base model classes of the library from a pretrained model."),gpt.forEach(t),vTo=i(la),Na=n(la,"P",{});var _w=s(Na);FTo=r(_w,"The model class to instantiate is selected based on the "),Cce=n(_w,"CODE",{});var hpt=s(Cce);TTo=r(hpt,"model_type"),hpt.forEach(t),MTo=r(_w,` property of the config object (either
passed as an argument or loaded from `),wce=n(_w,"CODE",{});var ppt=s(wce);ETo=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),CTo=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ace=n(_w,"CODE",{});var _pt=s(Ace);wTo=r(_pt,"pretrained_model_name_or_path"),_pt.forEach(t),ATo=r(_w,":"),_w.forEach(t),LTo=i(la),y=n(la,"UL",{});var x=s(y);Qp=n(x,"LI",{});var pxe=s(Qp);Lce=n(pxe,"STRONG",{});var upt=s(Lce);yTo=r(upt,"albert"),upt.forEach(t),xTo=r(pxe," \u2014 "),lj=n(pxe,"A",{href:!0});var bpt=s(lj);$To=r(bpt,"AlbertModel"),bpt.forEach(t),kTo=r(pxe," (ALBERT model)"),pxe.forEach(t),STo=i(x),Wp=n(x,"LI",{});var _xe=s(Wp);yce=n(_xe,"STRONG",{});var vpt=s(yce);RTo=r(vpt,"bart"),vpt.forEach(t),PTo=r(_xe," \u2014 "),ij=n(_xe,"A",{href:!0});var Fpt=s(ij);BTo=r(Fpt,"BartModel"),Fpt.forEach(t),NTo=r(_xe," (BART model)"),_xe.forEach(t),ITo=i(x),Hp=n(x,"LI",{});var uxe=s(Hp);xce=n(uxe,"STRONG",{});var Tpt=s(xce);qTo=r(Tpt,"beit"),Tpt.forEach(t),jTo=r(uxe," \u2014 "),dj=n(uxe,"A",{href:!0});var Mpt=s(dj);DTo=r(Mpt,"BeitModel"),Mpt.forEach(t),GTo=r(uxe," (BEiT model)"),uxe.forEach(t),OTo=i(x),Up=n(x,"LI",{});var bxe=s(Up);$ce=n(bxe,"STRONG",{});var Ept=s($ce);VTo=r(Ept,"bert"),Ept.forEach(t),XTo=r(bxe," \u2014 "),cj=n(bxe,"A",{href:!0});var Cpt=s(cj);zTo=r(Cpt,"BertModel"),Cpt.forEach(t),QTo=r(bxe," (BERT model)"),bxe.forEach(t),WTo=i(x),Jp=n(x,"LI",{});var vxe=s(Jp);kce=n(vxe,"STRONG",{});var wpt=s(kce);HTo=r(wpt,"bert-generation"),wpt.forEach(t),UTo=r(vxe," \u2014 "),fj=n(vxe,"A",{href:!0});var Apt=s(fj);JTo=r(Apt,"BertGenerationEncoder"),Apt.forEach(t),YTo=r(vxe," (Bert Generation model)"),vxe.forEach(t),KTo=i(x),Yp=n(x,"LI",{});var Fxe=s(Yp);Sce=n(Fxe,"STRONG",{});var Lpt=s(Sce);ZTo=r(Lpt,"big_bird"),Lpt.forEach(t),e7o=r(Fxe," \u2014 "),mj=n(Fxe,"A",{href:!0});var ypt=s(mj);o7o=r(ypt,"BigBirdModel"),ypt.forEach(t),r7o=r(Fxe," (BigBird model)"),Fxe.forEach(t),t7o=i(x),Kp=n(x,"LI",{});var Txe=s(Kp);Rce=n(Txe,"STRONG",{});var xpt=s(Rce);a7o=r(xpt,"bigbird_pegasus"),xpt.forEach(t),n7o=r(Txe," \u2014 "),gj=n(Txe,"A",{href:!0});var $pt=s(gj);s7o=r($pt,"BigBirdPegasusModel"),$pt.forEach(t),l7o=r(Txe," (BigBird-Pegasus model)"),Txe.forEach(t),i7o=i(x),Zp=n(x,"LI",{});var Mxe=s(Zp);Pce=n(Mxe,"STRONG",{});var kpt=s(Pce);d7o=r(kpt,"blenderbot"),kpt.forEach(t),c7o=r(Mxe," \u2014 "),hj=n(Mxe,"A",{href:!0});var Spt=s(hj);f7o=r(Spt,"BlenderbotModel"),Spt.forEach(t),m7o=r(Mxe," (Blenderbot model)"),Mxe.forEach(t),g7o=i(x),e_=n(x,"LI",{});var Exe=s(e_);Bce=n(Exe,"STRONG",{});var Rpt=s(Bce);h7o=r(Rpt,"blenderbot-small"),Rpt.forEach(t),p7o=r(Exe," \u2014 "),pj=n(Exe,"A",{href:!0});var Ppt=s(pj);_7o=r(Ppt,"BlenderbotSmallModel"),Ppt.forEach(t),u7o=r(Exe," (BlenderbotSmall model)"),Exe.forEach(t),b7o=i(x),o_=n(x,"LI",{});var Cxe=s(o_);Nce=n(Cxe,"STRONG",{});var Bpt=s(Nce);v7o=r(Bpt,"bloom"),Bpt.forEach(t),F7o=r(Cxe," \u2014 "),_j=n(Cxe,"A",{href:!0});var Npt=s(_j);T7o=r(Npt,"BloomModel"),Npt.forEach(t),M7o=r(Cxe," (BLOOM model)"),Cxe.forEach(t),E7o=i(x),r_=n(x,"LI",{});var wxe=s(r_);Ice=n(wxe,"STRONG",{});var Ipt=s(Ice);C7o=r(Ipt,"camembert"),Ipt.forEach(t),w7o=r(wxe," \u2014 "),uj=n(wxe,"A",{href:!0});var qpt=s(uj);A7o=r(qpt,"CamembertModel"),qpt.forEach(t),L7o=r(wxe," (CamemBERT model)"),wxe.forEach(t),y7o=i(x),t_=n(x,"LI",{});var Axe=s(t_);qce=n(Axe,"STRONG",{});var jpt=s(qce);x7o=r(jpt,"canine"),jpt.forEach(t),$7o=r(Axe," \u2014 "),bj=n(Axe,"A",{href:!0});var Dpt=s(bj);k7o=r(Dpt,"CanineModel"),Dpt.forEach(t),S7o=r(Axe," (CANINE model)"),Axe.forEach(t),R7o=i(x),a_=n(x,"LI",{});var Lxe=s(a_);jce=n(Lxe,"STRONG",{});var Gpt=s(jce);P7o=r(Gpt,"clip"),Gpt.forEach(t),B7o=r(Lxe," \u2014 "),vj=n(Lxe,"A",{href:!0});var Opt=s(vj);N7o=r(Opt,"CLIPModel"),Opt.forEach(t),I7o=r(Lxe," (CLIP model)"),Lxe.forEach(t),q7o=i(x),n_=n(x,"LI",{});var yxe=s(n_);Dce=n(yxe,"STRONG",{});var Vpt=s(Dce);j7o=r(Vpt,"codegen"),Vpt.forEach(t),D7o=r(yxe," \u2014 "),Fj=n(yxe,"A",{href:!0});var Xpt=s(Fj);G7o=r(Xpt,"CodeGenModel"),Xpt.forEach(t),O7o=r(yxe," (CodeGen model)"),yxe.forEach(t),V7o=i(x),s_=n(x,"LI",{});var xxe=s(s_);Gce=n(xxe,"STRONG",{});var zpt=s(Gce);X7o=r(zpt,"convbert"),zpt.forEach(t),z7o=r(xxe," \u2014 "),Tj=n(xxe,"A",{href:!0});var Qpt=s(Tj);Q7o=r(Qpt,"ConvBertModel"),Qpt.forEach(t),W7o=r(xxe," (ConvBERT model)"),xxe.forEach(t),H7o=i(x),l_=n(x,"LI",{});var $xe=s(l_);Oce=n($xe,"STRONG",{});var Wpt=s(Oce);U7o=r(Wpt,"convnext"),Wpt.forEach(t),J7o=r($xe," \u2014 "),Mj=n($xe,"A",{href:!0});var Hpt=s(Mj);Y7o=r(Hpt,"ConvNextModel"),Hpt.forEach(t),K7o=r($xe," (ConvNeXT model)"),$xe.forEach(t),Z7o=i(x),i_=n(x,"LI",{});var kxe=s(i_);Vce=n(kxe,"STRONG",{});var Upt=s(Vce);e8o=r(Upt,"ctrl"),Upt.forEach(t),o8o=r(kxe," \u2014 "),Ej=n(kxe,"A",{href:!0});var Jpt=s(Ej);r8o=r(Jpt,"CTRLModel"),Jpt.forEach(t),t8o=r(kxe," (CTRL model)"),kxe.forEach(t),a8o=i(x),d_=n(x,"LI",{});var Sxe=s(d_);Xce=n(Sxe,"STRONG",{});var Ypt=s(Xce);n8o=r(Ypt,"cvt"),Ypt.forEach(t),s8o=r(Sxe," \u2014 "),Cj=n(Sxe,"A",{href:!0});var Kpt=s(Cj);l8o=r(Kpt,"CvtModel"),Kpt.forEach(t),i8o=r(Sxe," (CvT model)"),Sxe.forEach(t),d8o=i(x),c_=n(x,"LI",{});var Rxe=s(c_);zce=n(Rxe,"STRONG",{});var Zpt=s(zce);c8o=r(Zpt,"data2vec-audio"),Zpt.forEach(t),f8o=r(Rxe," \u2014 "),wj=n(Rxe,"A",{href:!0});var e_t=s(wj);m8o=r(e_t,"Data2VecAudioModel"),e_t.forEach(t),g8o=r(Rxe," (Data2VecAudio model)"),Rxe.forEach(t),h8o=i(x),f_=n(x,"LI",{});var Pxe=s(f_);Qce=n(Pxe,"STRONG",{});var o_t=s(Qce);p8o=r(o_t,"data2vec-text"),o_t.forEach(t),_8o=r(Pxe," \u2014 "),Aj=n(Pxe,"A",{href:!0});var r_t=s(Aj);u8o=r(r_t,"Data2VecTextModel"),r_t.forEach(t),b8o=r(Pxe," (Data2VecText model)"),Pxe.forEach(t),v8o=i(x),m_=n(x,"LI",{});var Bxe=s(m_);Wce=n(Bxe,"STRONG",{});var t_t=s(Wce);F8o=r(t_t,"data2vec-vision"),t_t.forEach(t),T8o=r(Bxe," \u2014 "),Lj=n(Bxe,"A",{href:!0});var a_t=s(Lj);M8o=r(a_t,"Data2VecVisionModel"),a_t.forEach(t),E8o=r(Bxe," (Data2VecVision model)"),Bxe.forEach(t),C8o=i(x),g_=n(x,"LI",{});var Nxe=s(g_);Hce=n(Nxe,"STRONG",{});var n_t=s(Hce);w8o=r(n_t,"deberta"),n_t.forEach(t),A8o=r(Nxe," \u2014 "),yj=n(Nxe,"A",{href:!0});var s_t=s(yj);L8o=r(s_t,"DebertaModel"),s_t.forEach(t),y8o=r(Nxe," (DeBERTa model)"),Nxe.forEach(t),x8o=i(x),h_=n(x,"LI",{});var Ixe=s(h_);Uce=n(Ixe,"STRONG",{});var l_t=s(Uce);$8o=r(l_t,"deberta-v2"),l_t.forEach(t),k8o=r(Ixe," \u2014 "),xj=n(Ixe,"A",{href:!0});var i_t=s(xj);S8o=r(i_t,"DebertaV2Model"),i_t.forEach(t),R8o=r(Ixe," (DeBERTa-v2 model)"),Ixe.forEach(t),P8o=i(x),p_=n(x,"LI",{});var qxe=s(p_);Jce=n(qxe,"STRONG",{});var d_t=s(Jce);B8o=r(d_t,"decision_transformer"),d_t.forEach(t),N8o=r(qxe," \u2014 "),$j=n(qxe,"A",{href:!0});var c_t=s($j);I8o=r(c_t,"DecisionTransformerModel"),c_t.forEach(t),q8o=r(qxe," (Decision Transformer model)"),qxe.forEach(t),j8o=i(x),__=n(x,"LI",{});var jxe=s(__);Yce=n(jxe,"STRONG",{});var f_t=s(Yce);D8o=r(f_t,"deit"),f_t.forEach(t),G8o=r(jxe," \u2014 "),kj=n(jxe,"A",{href:!0});var m_t=s(kj);O8o=r(m_t,"DeiTModel"),m_t.forEach(t),V8o=r(jxe," (DeiT model)"),jxe.forEach(t),X8o=i(x),u_=n(x,"LI",{});var Dxe=s(u_);Kce=n(Dxe,"STRONG",{});var g_t=s(Kce);z8o=r(g_t,"detr"),g_t.forEach(t),Q8o=r(Dxe," \u2014 "),Sj=n(Dxe,"A",{href:!0});var h_t=s(Sj);W8o=r(h_t,"DetrModel"),h_t.forEach(t),H8o=r(Dxe," (DETR model)"),Dxe.forEach(t),U8o=i(x),b_=n(x,"LI",{});var Gxe=s(b_);Zce=n(Gxe,"STRONG",{});var p_t=s(Zce);J8o=r(p_t,"distilbert"),p_t.forEach(t),Y8o=r(Gxe," \u2014 "),Rj=n(Gxe,"A",{href:!0});var __t=s(Rj);K8o=r(__t,"DistilBertModel"),__t.forEach(t),Z8o=r(Gxe," (DistilBERT model)"),Gxe.forEach(t),eMo=i(x),v_=n(x,"LI",{});var Oxe=s(v_);efe=n(Oxe,"STRONG",{});var u_t=s(efe);oMo=r(u_t,"dpr"),u_t.forEach(t),rMo=r(Oxe," \u2014 "),Pj=n(Oxe,"A",{href:!0});var b_t=s(Pj);tMo=r(b_t,"DPRQuestionEncoder"),b_t.forEach(t),aMo=r(Oxe," (DPR model)"),Oxe.forEach(t),nMo=i(x),F_=n(x,"LI",{});var Vxe=s(F_);ofe=n(Vxe,"STRONG",{});var v_t=s(ofe);sMo=r(v_t,"dpt"),v_t.forEach(t),lMo=r(Vxe," \u2014 "),Bj=n(Vxe,"A",{href:!0});var F_t=s(Bj);iMo=r(F_t,"DPTModel"),F_t.forEach(t),dMo=r(Vxe," (DPT model)"),Vxe.forEach(t),cMo=i(x),T_=n(x,"LI",{});var Xxe=s(T_);rfe=n(Xxe,"STRONG",{});var T_t=s(rfe);fMo=r(T_t,"electra"),T_t.forEach(t),mMo=r(Xxe," \u2014 "),Nj=n(Xxe,"A",{href:!0});var M_t=s(Nj);gMo=r(M_t,"ElectraModel"),M_t.forEach(t),hMo=r(Xxe," (ELECTRA model)"),Xxe.forEach(t),pMo=i(x),M_=n(x,"LI",{});var zxe=s(M_);tfe=n(zxe,"STRONG",{});var E_t=s(tfe);_Mo=r(E_t,"flaubert"),E_t.forEach(t),uMo=r(zxe," \u2014 "),Ij=n(zxe,"A",{href:!0});var C_t=s(Ij);bMo=r(C_t,"FlaubertModel"),C_t.forEach(t),vMo=r(zxe," (FlauBERT model)"),zxe.forEach(t),FMo=i(x),E_=n(x,"LI",{});var Qxe=s(E_);afe=n(Qxe,"STRONG",{});var w_t=s(afe);TMo=r(w_t,"flava"),w_t.forEach(t),MMo=r(Qxe," \u2014 "),qj=n(Qxe,"A",{href:!0});var A_t=s(qj);EMo=r(A_t,"FlavaModel"),A_t.forEach(t),CMo=r(Qxe," (FLAVA model)"),Qxe.forEach(t),wMo=i(x),C_=n(x,"LI",{});var Wxe=s(C_);nfe=n(Wxe,"STRONG",{});var L_t=s(nfe);AMo=r(L_t,"fnet"),L_t.forEach(t),LMo=r(Wxe," \u2014 "),jj=n(Wxe,"A",{href:!0});var y_t=s(jj);yMo=r(y_t,"FNetModel"),y_t.forEach(t),xMo=r(Wxe," (FNet model)"),Wxe.forEach(t),$Mo=i(x),w_=n(x,"LI",{});var Hxe=s(w_);sfe=n(Hxe,"STRONG",{});var x_t=s(sfe);kMo=r(x_t,"fsmt"),x_t.forEach(t),SMo=r(Hxe," \u2014 "),Dj=n(Hxe,"A",{href:!0});var $_t=s(Dj);RMo=r($_t,"FSMTModel"),$_t.forEach(t),PMo=r(Hxe," (FairSeq Machine-Translation model)"),Hxe.forEach(t),BMo=i(x),Hs=n(x,"LI",{});var qS=s(Hs);lfe=n(qS,"STRONG",{});var k_t=s(lfe);NMo=r(k_t,"funnel"),k_t.forEach(t),IMo=r(qS," \u2014 "),Gj=n(qS,"A",{href:!0});var S_t=s(Gj);qMo=r(S_t,"FunnelModel"),S_t.forEach(t),jMo=r(qS," or "),Oj=n(qS,"A",{href:!0});var R_t=s(Oj);DMo=r(R_t,"FunnelBaseModel"),R_t.forEach(t),GMo=r(qS," (Funnel Transformer model)"),qS.forEach(t),OMo=i(x),A_=n(x,"LI",{});var Uxe=s(A_);ife=n(Uxe,"STRONG",{});var P_t=s(ife);VMo=r(P_t,"glpn"),P_t.forEach(t),XMo=r(Uxe," \u2014 "),Vj=n(Uxe,"A",{href:!0});var B_t=s(Vj);zMo=r(B_t,"GLPNModel"),B_t.forEach(t),QMo=r(Uxe," (GLPN model)"),Uxe.forEach(t),WMo=i(x),L_=n(x,"LI",{});var Jxe=s(L_);dfe=n(Jxe,"STRONG",{});var N_t=s(dfe);HMo=r(N_t,"gpt2"),N_t.forEach(t),UMo=r(Jxe," \u2014 "),Xj=n(Jxe,"A",{href:!0});var I_t=s(Xj);JMo=r(I_t,"GPT2Model"),I_t.forEach(t),YMo=r(Jxe," (OpenAI GPT-2 model)"),Jxe.forEach(t),KMo=i(x),y_=n(x,"LI",{});var Yxe=s(y_);cfe=n(Yxe,"STRONG",{});var q_t=s(cfe);ZMo=r(q_t,"gpt_neo"),q_t.forEach(t),e4o=r(Yxe," \u2014 "),zj=n(Yxe,"A",{href:!0});var j_t=s(zj);o4o=r(j_t,"GPTNeoModel"),j_t.forEach(t),r4o=r(Yxe," (GPT Neo model)"),Yxe.forEach(t),t4o=i(x),x_=n(x,"LI",{});var Kxe=s(x_);ffe=n(Kxe,"STRONG",{});var D_t=s(ffe);a4o=r(D_t,"gpt_neox"),D_t.forEach(t),n4o=r(Kxe," \u2014 "),Qj=n(Kxe,"A",{href:!0});var G_t=s(Qj);s4o=r(G_t,"GPTNeoXModel"),G_t.forEach(t),l4o=r(Kxe," (GPT NeoX model)"),Kxe.forEach(t),i4o=i(x),$_=n(x,"LI",{});var Zxe=s($_);mfe=n(Zxe,"STRONG",{});var O_t=s(mfe);d4o=r(O_t,"gptj"),O_t.forEach(t),c4o=r(Zxe," \u2014 "),Wj=n(Zxe,"A",{href:!0});var V_t=s(Wj);f4o=r(V_t,"GPTJModel"),V_t.forEach(t),m4o=r(Zxe," (GPT-J model)"),Zxe.forEach(t),g4o=i(x),k_=n(x,"LI",{});var e$e=s(k_);gfe=n(e$e,"STRONG",{});var X_t=s(gfe);h4o=r(X_t,"groupvit"),X_t.forEach(t),p4o=r(e$e," \u2014 "),Hj=n(e$e,"A",{href:!0});var z_t=s(Hj);_4o=r(z_t,"GroupViTModel"),z_t.forEach(t),u4o=r(e$e," (GroupViT model)"),e$e.forEach(t),b4o=i(x),S_=n(x,"LI",{});var o$e=s(S_);hfe=n(o$e,"STRONG",{});var Q_t=s(hfe);v4o=r(Q_t,"hubert"),Q_t.forEach(t),F4o=r(o$e," \u2014 "),Uj=n(o$e,"A",{href:!0});var W_t=s(Uj);T4o=r(W_t,"HubertModel"),W_t.forEach(t),M4o=r(o$e," (Hubert model)"),o$e.forEach(t),E4o=i(x),R_=n(x,"LI",{});var r$e=s(R_);pfe=n(r$e,"STRONG",{});var H_t=s(pfe);C4o=r(H_t,"ibert"),H_t.forEach(t),w4o=r(r$e," \u2014 "),Jj=n(r$e,"A",{href:!0});var U_t=s(Jj);A4o=r(U_t,"IBertModel"),U_t.forEach(t),L4o=r(r$e," (I-BERT model)"),r$e.forEach(t),y4o=i(x),P_=n(x,"LI",{});var t$e=s(P_);_fe=n(t$e,"STRONG",{});var J_t=s(_fe);x4o=r(J_t,"imagegpt"),J_t.forEach(t),$4o=r(t$e," \u2014 "),Yj=n(t$e,"A",{href:!0});var Y_t=s(Yj);k4o=r(Y_t,"ImageGPTModel"),Y_t.forEach(t),S4o=r(t$e," (ImageGPT model)"),t$e.forEach(t),R4o=i(x),B_=n(x,"LI",{});var a$e=s(B_);ufe=n(a$e,"STRONG",{});var K_t=s(ufe);P4o=r(K_t,"jukebox"),K_t.forEach(t),B4o=r(a$e," \u2014 "),bfe=n(a$e,"CODE",{});var Z_t=s(bfe);N4o=r(Z_t,"JukeboxModel"),Z_t.forEach(t),I4o=r(a$e," (Jukebox model)"),a$e.forEach(t),q4o=i(x),N_=n(x,"LI",{});var n$e=s(N_);vfe=n(n$e,"STRONG",{});var eut=s(vfe);j4o=r(eut,"layoutlm"),eut.forEach(t),D4o=r(n$e," \u2014 "),Kj=n(n$e,"A",{href:!0});var out=s(Kj);G4o=r(out,"LayoutLMModel"),out.forEach(t),O4o=r(n$e," (LayoutLM model)"),n$e.forEach(t),V4o=i(x),I_=n(x,"LI",{});var s$e=s(I_);Ffe=n(s$e,"STRONG",{});var rut=s(Ffe);X4o=r(rut,"layoutlmv2"),rut.forEach(t),z4o=r(s$e," \u2014 "),Zj=n(s$e,"A",{href:!0});var tut=s(Zj);Q4o=r(tut,"LayoutLMv2Model"),tut.forEach(t),W4o=r(s$e," (LayoutLMv2 model)"),s$e.forEach(t),H4o=i(x),q_=n(x,"LI",{});var l$e=s(q_);Tfe=n(l$e,"STRONG",{});var aut=s(Tfe);U4o=r(aut,"layoutlmv3"),aut.forEach(t),J4o=r(l$e," \u2014 "),eD=n(l$e,"A",{href:!0});var nut=s(eD);Y4o=r(nut,"LayoutLMv3Model"),nut.forEach(t),K4o=r(l$e," (LayoutLMv3 model)"),l$e.forEach(t),Z4o=i(x),j_=n(x,"LI",{});var i$e=s(j_);Mfe=n(i$e,"STRONG",{});var sut=s(Mfe);eEo=r(sut,"led"),sut.forEach(t),oEo=r(i$e," \u2014 "),oD=n(i$e,"A",{href:!0});var lut=s(oD);rEo=r(lut,"LEDModel"),lut.forEach(t),tEo=r(i$e," (LED model)"),i$e.forEach(t),aEo=i(x),D_=n(x,"LI",{});var d$e=s(D_);Efe=n(d$e,"STRONG",{});var iut=s(Efe);nEo=r(iut,"levit"),iut.forEach(t),sEo=r(d$e," \u2014 "),rD=n(d$e,"A",{href:!0});var dut=s(rD);lEo=r(dut,"LevitModel"),dut.forEach(t),iEo=r(d$e," (LeViT model)"),d$e.forEach(t),dEo=i(x),G_=n(x,"LI",{});var c$e=s(G_);Cfe=n(c$e,"STRONG",{});var cut=s(Cfe);cEo=r(cut,"longformer"),cut.forEach(t),fEo=r(c$e," \u2014 "),tD=n(c$e,"A",{href:!0});var fut=s(tD);mEo=r(fut,"LongformerModel"),fut.forEach(t),gEo=r(c$e," (Longformer model)"),c$e.forEach(t),hEo=i(x),O_=n(x,"LI",{});var f$e=s(O_);wfe=n(f$e,"STRONG",{});var mut=s(wfe);pEo=r(mut,"longt5"),mut.forEach(t),_Eo=r(f$e," \u2014 "),aD=n(f$e,"A",{href:!0});var gut=s(aD);uEo=r(gut,"LongT5Model"),gut.forEach(t),bEo=r(f$e," (LongT5 model)"),f$e.forEach(t),vEo=i(x),V_=n(x,"LI",{});var m$e=s(V_);Afe=n(m$e,"STRONG",{});var hut=s(Afe);FEo=r(hut,"luke"),hut.forEach(t),TEo=r(m$e," \u2014 "),nD=n(m$e,"A",{href:!0});var put=s(nD);MEo=r(put,"LukeModel"),put.forEach(t),EEo=r(m$e," (LUKE model)"),m$e.forEach(t),CEo=i(x),X_=n(x,"LI",{});var g$e=s(X_);Lfe=n(g$e,"STRONG",{});var _ut=s(Lfe);wEo=r(_ut,"lxmert"),_ut.forEach(t),AEo=r(g$e," \u2014 "),sD=n(g$e,"A",{href:!0});var uut=s(sD);LEo=r(uut,"LxmertModel"),uut.forEach(t),yEo=r(g$e," (LXMERT model)"),g$e.forEach(t),xEo=i(x),z_=n(x,"LI",{});var h$e=s(z_);yfe=n(h$e,"STRONG",{});var but=s(yfe);$Eo=r(but,"m2m_100"),but.forEach(t),kEo=r(h$e," \u2014 "),lD=n(h$e,"A",{href:!0});var vut=s(lD);SEo=r(vut,"M2M100Model"),vut.forEach(t),REo=r(h$e," (M2M100 model)"),h$e.forEach(t),PEo=i(x),Q_=n(x,"LI",{});var p$e=s(Q_);xfe=n(p$e,"STRONG",{});var Fut=s(xfe);BEo=r(Fut,"marian"),Fut.forEach(t),NEo=r(p$e," \u2014 "),iD=n(p$e,"A",{href:!0});var Tut=s(iD);IEo=r(Tut,"MarianModel"),Tut.forEach(t),qEo=r(p$e," (Marian model)"),p$e.forEach(t),jEo=i(x),W_=n(x,"LI",{});var _$e=s(W_);$fe=n(_$e,"STRONG",{});var Mut=s($fe);DEo=r(Mut,"maskformer"),Mut.forEach(t),GEo=r(_$e," \u2014 "),dD=n(_$e,"A",{href:!0});var Eut=s(dD);OEo=r(Eut,"MaskFormerModel"),Eut.forEach(t),VEo=r(_$e," (MaskFormer model)"),_$e.forEach(t),XEo=i(x),H_=n(x,"LI",{});var u$e=s(H_);kfe=n(u$e,"STRONG",{});var Cut=s(kfe);zEo=r(Cut,"mbart"),Cut.forEach(t),QEo=r(u$e," \u2014 "),cD=n(u$e,"A",{href:!0});var wut=s(cD);WEo=r(wut,"MBartModel"),wut.forEach(t),HEo=r(u$e," (mBART model)"),u$e.forEach(t),UEo=i(x),U_=n(x,"LI",{});var b$e=s(U_);Sfe=n(b$e,"STRONG",{});var Aut=s(Sfe);JEo=r(Aut,"mctct"),Aut.forEach(t),YEo=r(b$e," \u2014 "),fD=n(b$e,"A",{href:!0});var Lut=s(fD);KEo=r(Lut,"MCTCTModel"),Lut.forEach(t),ZEo=r(b$e," (M-CTC-T model)"),b$e.forEach(t),eCo=i(x),J_=n(x,"LI",{});var v$e=s(J_);Rfe=n(v$e,"STRONG",{});var yut=s(Rfe);oCo=r(yut,"megatron-bert"),yut.forEach(t),rCo=r(v$e," \u2014 "),mD=n(v$e,"A",{href:!0});var xut=s(mD);tCo=r(xut,"MegatronBertModel"),xut.forEach(t),aCo=r(v$e," (Megatron-BERT model)"),v$e.forEach(t),nCo=i(x),Y_=n(x,"LI",{});var F$e=s(Y_);Pfe=n(F$e,"STRONG",{});var $ut=s(Pfe);sCo=r($ut,"mobilebert"),$ut.forEach(t),lCo=r(F$e," \u2014 "),gD=n(F$e,"A",{href:!0});var kut=s(gD);iCo=r(kut,"MobileBertModel"),kut.forEach(t),dCo=r(F$e," (MobileBERT model)"),F$e.forEach(t),cCo=i(x),K_=n(x,"LI",{});var T$e=s(K_);Bfe=n(T$e,"STRONG",{});var Sut=s(Bfe);fCo=r(Sut,"mobilevit"),Sut.forEach(t),mCo=r(T$e," \u2014 "),hD=n(T$e,"A",{href:!0});var Rut=s(hD);gCo=r(Rut,"MobileViTModel"),Rut.forEach(t),hCo=r(T$e," (MobileViT model)"),T$e.forEach(t),pCo=i(x),Z_=n(x,"LI",{});var M$e=s(Z_);Nfe=n(M$e,"STRONG",{});var Put=s(Nfe);_Co=r(Put,"mpnet"),Put.forEach(t),uCo=r(M$e," \u2014 "),pD=n(M$e,"A",{href:!0});var But=s(pD);bCo=r(But,"MPNetModel"),But.forEach(t),vCo=r(M$e," (MPNet model)"),M$e.forEach(t),FCo=i(x),eu=n(x,"LI",{});var E$e=s(eu);Ife=n(E$e,"STRONG",{});var Nut=s(Ife);TCo=r(Nut,"mt5"),Nut.forEach(t),MCo=r(E$e," \u2014 "),_D=n(E$e,"A",{href:!0});var Iut=s(_D);ECo=r(Iut,"MT5Model"),Iut.forEach(t),CCo=r(E$e," (MT5 model)"),E$e.forEach(t),wCo=i(x),ou=n(x,"LI",{});var C$e=s(ou);qfe=n(C$e,"STRONG",{});var qut=s(qfe);ACo=r(qut,"mvp"),qut.forEach(t),LCo=r(C$e," \u2014 "),uD=n(C$e,"A",{href:!0});var jut=s(uD);yCo=r(jut,"MvpModel"),jut.forEach(t),xCo=r(C$e," (MVP model)"),C$e.forEach(t),$Co=i(x),ru=n(x,"LI",{});var w$e=s(ru);jfe=n(w$e,"STRONG",{});var Dut=s(jfe);kCo=r(Dut,"nezha"),Dut.forEach(t),SCo=r(w$e," \u2014 "),bD=n(w$e,"A",{href:!0});var Gut=s(bD);RCo=r(Gut,"NezhaModel"),Gut.forEach(t),PCo=r(w$e," (Nezha model)"),w$e.forEach(t),BCo=i(x),tu=n(x,"LI",{});var A$e=s(tu);Dfe=n(A$e,"STRONG",{});var Out=s(Dfe);NCo=r(Out,"nllb"),Out.forEach(t),ICo=r(A$e," \u2014 "),vD=n(A$e,"A",{href:!0});var Vut=s(vD);qCo=r(Vut,"M2M100Model"),Vut.forEach(t),jCo=r(A$e," (NLLB model)"),A$e.forEach(t),DCo=i(x),au=n(x,"LI",{});var L$e=s(au);Gfe=n(L$e,"STRONG",{});var Xut=s(Gfe);GCo=r(Xut,"nystromformer"),Xut.forEach(t),OCo=r(L$e," \u2014 "),FD=n(L$e,"A",{href:!0});var zut=s(FD);VCo=r(zut,"NystromformerModel"),zut.forEach(t),XCo=r(L$e," (Nystr\xF6mformer model)"),L$e.forEach(t),zCo=i(x),nu=n(x,"LI",{});var y$e=s(nu);Ofe=n(y$e,"STRONG",{});var Qut=s(Ofe);QCo=r(Qut,"openai-gpt"),Qut.forEach(t),WCo=r(y$e," \u2014 "),TD=n(y$e,"A",{href:!0});var Wut=s(TD);HCo=r(Wut,"OpenAIGPTModel"),Wut.forEach(t),UCo=r(y$e," (OpenAI GPT model)"),y$e.forEach(t),JCo=i(x),su=n(x,"LI",{});var x$e=s(su);Vfe=n(x$e,"STRONG",{});var Hut=s(Vfe);YCo=r(Hut,"opt"),Hut.forEach(t),KCo=r(x$e," \u2014 "),MD=n(x$e,"A",{href:!0});var Uut=s(MD);ZCo=r(Uut,"OPTModel"),Uut.forEach(t),e5o=r(x$e," (OPT model)"),x$e.forEach(t),o5o=i(x),lu=n(x,"LI",{});var $$e=s(lu);Xfe=n($$e,"STRONG",{});var Jut=s(Xfe);r5o=r(Jut,"pegasus"),Jut.forEach(t),t5o=r($$e," \u2014 "),ED=n($$e,"A",{href:!0});var Yut=s(ED);a5o=r(Yut,"PegasusModel"),Yut.forEach(t),n5o=r($$e," (Pegasus model)"),$$e.forEach(t),s5o=i(x),iu=n(x,"LI",{});var k$e=s(iu);zfe=n(k$e,"STRONG",{});var Kut=s(zfe);l5o=r(Kut,"perceiver"),Kut.forEach(t),i5o=r(k$e," \u2014 "),CD=n(k$e,"A",{href:!0});var Zut=s(CD);d5o=r(Zut,"PerceiverModel"),Zut.forEach(t),c5o=r(k$e," (Perceiver model)"),k$e.forEach(t),f5o=i(x),du=n(x,"LI",{});var S$e=s(du);Qfe=n(S$e,"STRONG",{});var e2t=s(Qfe);m5o=r(e2t,"plbart"),e2t.forEach(t),g5o=r(S$e," \u2014 "),wD=n(S$e,"A",{href:!0});var o2t=s(wD);h5o=r(o2t,"PLBartModel"),o2t.forEach(t),p5o=r(S$e," (PLBart model)"),S$e.forEach(t),_5o=i(x),cu=n(x,"LI",{});var R$e=s(cu);Wfe=n(R$e,"STRONG",{});var r2t=s(Wfe);u5o=r(r2t,"poolformer"),r2t.forEach(t),b5o=r(R$e," \u2014 "),AD=n(R$e,"A",{href:!0});var t2t=s(AD);v5o=r(t2t,"PoolFormerModel"),t2t.forEach(t),F5o=r(R$e," (PoolFormer model)"),R$e.forEach(t),T5o=i(x),fu=n(x,"LI",{});var P$e=s(fu);Hfe=n(P$e,"STRONG",{});var a2t=s(Hfe);M5o=r(a2t,"prophetnet"),a2t.forEach(t),E5o=r(P$e," \u2014 "),LD=n(P$e,"A",{href:!0});var n2t=s(LD);C5o=r(n2t,"ProphetNetModel"),n2t.forEach(t),w5o=r(P$e," (ProphetNet model)"),P$e.forEach(t),A5o=i(x),mu=n(x,"LI",{});var B$e=s(mu);Ufe=n(B$e,"STRONG",{});var s2t=s(Ufe);L5o=r(s2t,"qdqbert"),s2t.forEach(t),y5o=r(B$e," \u2014 "),yD=n(B$e,"A",{href:!0});var l2t=s(yD);x5o=r(l2t,"QDQBertModel"),l2t.forEach(t),$5o=r(B$e," (QDQBert model)"),B$e.forEach(t),k5o=i(x),gu=n(x,"LI",{});var N$e=s(gu);Jfe=n(N$e,"STRONG",{});var i2t=s(Jfe);S5o=r(i2t,"reformer"),i2t.forEach(t),R5o=r(N$e," \u2014 "),xD=n(N$e,"A",{href:!0});var d2t=s(xD);P5o=r(d2t,"ReformerModel"),d2t.forEach(t),B5o=r(N$e," (Reformer model)"),N$e.forEach(t),N5o=i(x),hu=n(x,"LI",{});var I$e=s(hu);Yfe=n(I$e,"STRONG",{});var c2t=s(Yfe);I5o=r(c2t,"regnet"),c2t.forEach(t),q5o=r(I$e," \u2014 "),$D=n(I$e,"A",{href:!0});var f2t=s($D);j5o=r(f2t,"RegNetModel"),f2t.forEach(t),D5o=r(I$e," (RegNet model)"),I$e.forEach(t),G5o=i(x),pu=n(x,"LI",{});var q$e=s(pu);Kfe=n(q$e,"STRONG",{});var m2t=s(Kfe);O5o=r(m2t,"rembert"),m2t.forEach(t),V5o=r(q$e," \u2014 "),kD=n(q$e,"A",{href:!0});var g2t=s(kD);X5o=r(g2t,"RemBertModel"),g2t.forEach(t),z5o=r(q$e," (RemBERT model)"),q$e.forEach(t),Q5o=i(x),_u=n(x,"LI",{});var j$e=s(_u);Zfe=n(j$e,"STRONG",{});var h2t=s(Zfe);W5o=r(h2t,"resnet"),h2t.forEach(t),H5o=r(j$e," \u2014 "),SD=n(j$e,"A",{href:!0});var p2t=s(SD);U5o=r(p2t,"ResNetModel"),p2t.forEach(t),J5o=r(j$e," (ResNet model)"),j$e.forEach(t),Y5o=i(x),uu=n(x,"LI",{});var D$e=s(uu);eme=n(D$e,"STRONG",{});var _2t=s(eme);K5o=r(_2t,"retribert"),_2t.forEach(t),Z5o=r(D$e," \u2014 "),RD=n(D$e,"A",{href:!0});var u2t=s(RD);e3o=r(u2t,"RetriBertModel"),u2t.forEach(t),o3o=r(D$e," (RetriBERT model)"),D$e.forEach(t),r3o=i(x),bu=n(x,"LI",{});var G$e=s(bu);ome=n(G$e,"STRONG",{});var b2t=s(ome);t3o=r(b2t,"roberta"),b2t.forEach(t),a3o=r(G$e," \u2014 "),PD=n(G$e,"A",{href:!0});var v2t=s(PD);n3o=r(v2t,"RobertaModel"),v2t.forEach(t),s3o=r(G$e," (RoBERTa model)"),G$e.forEach(t),l3o=i(x),vu=n(x,"LI",{});var O$e=s(vu);rme=n(O$e,"STRONG",{});var F2t=s(rme);i3o=r(F2t,"roformer"),F2t.forEach(t),d3o=r(O$e," \u2014 "),BD=n(O$e,"A",{href:!0});var T2t=s(BD);c3o=r(T2t,"RoFormerModel"),T2t.forEach(t),f3o=r(O$e," (RoFormer model)"),O$e.forEach(t),m3o=i(x),Fu=n(x,"LI",{});var V$e=s(Fu);tme=n(V$e,"STRONG",{});var M2t=s(tme);g3o=r(M2t,"segformer"),M2t.forEach(t),h3o=r(V$e," \u2014 "),ND=n(V$e,"A",{href:!0});var E2t=s(ND);p3o=r(E2t,"SegformerModel"),E2t.forEach(t),_3o=r(V$e," (SegFormer model)"),V$e.forEach(t),u3o=i(x),Tu=n(x,"LI",{});var X$e=s(Tu);ame=n(X$e,"STRONG",{});var C2t=s(ame);b3o=r(C2t,"sew"),C2t.forEach(t),v3o=r(X$e," \u2014 "),ID=n(X$e,"A",{href:!0});var w2t=s(ID);F3o=r(w2t,"SEWModel"),w2t.forEach(t),T3o=r(X$e," (SEW model)"),X$e.forEach(t),M3o=i(x),Mu=n(x,"LI",{});var z$e=s(Mu);nme=n(z$e,"STRONG",{});var A2t=s(nme);E3o=r(A2t,"sew-d"),A2t.forEach(t),C3o=r(z$e," \u2014 "),qD=n(z$e,"A",{href:!0});var L2t=s(qD);w3o=r(L2t,"SEWDModel"),L2t.forEach(t),A3o=r(z$e," (SEW-D model)"),z$e.forEach(t),L3o=i(x),Eu=n(x,"LI",{});var Q$e=s(Eu);sme=n(Q$e,"STRONG",{});var y2t=s(sme);y3o=r(y2t,"speech_to_text"),y2t.forEach(t),x3o=r(Q$e," \u2014 "),jD=n(Q$e,"A",{href:!0});var x2t=s(jD);$3o=r(x2t,"Speech2TextModel"),x2t.forEach(t),k3o=r(Q$e," (Speech2Text model)"),Q$e.forEach(t),S3o=i(x),Cu=n(x,"LI",{});var W$e=s(Cu);lme=n(W$e,"STRONG",{});var $2t=s(lme);R3o=r($2t,"splinter"),$2t.forEach(t),P3o=r(W$e," \u2014 "),DD=n(W$e,"A",{href:!0});var k2t=s(DD);B3o=r(k2t,"SplinterModel"),k2t.forEach(t),N3o=r(W$e," (Splinter model)"),W$e.forEach(t),I3o=i(x),wu=n(x,"LI",{});var H$e=s(wu);ime=n(H$e,"STRONG",{});var S2t=s(ime);q3o=r(S2t,"squeezebert"),S2t.forEach(t),j3o=r(H$e," \u2014 "),GD=n(H$e,"A",{href:!0});var R2t=s(GD);D3o=r(R2t,"SqueezeBertModel"),R2t.forEach(t),G3o=r(H$e," (SqueezeBERT model)"),H$e.forEach(t),O3o=i(x),Au=n(x,"LI",{});var U$e=s(Au);dme=n(U$e,"STRONG",{});var P2t=s(dme);V3o=r(P2t,"swin"),P2t.forEach(t),X3o=r(U$e," \u2014 "),OD=n(U$e,"A",{href:!0});var B2t=s(OD);z3o=r(B2t,"SwinModel"),B2t.forEach(t),Q3o=r(U$e," (Swin Transformer model)"),U$e.forEach(t),W3o=i(x),Lu=n(x,"LI",{});var J$e=s(Lu);cme=n(J$e,"STRONG",{});var N2t=s(cme);H3o=r(N2t,"t5"),N2t.forEach(t),U3o=r(J$e," \u2014 "),VD=n(J$e,"A",{href:!0});var I2t=s(VD);J3o=r(I2t,"T5Model"),I2t.forEach(t),Y3o=r(J$e," (T5 model)"),J$e.forEach(t),K3o=i(x),yu=n(x,"LI",{});var Y$e=s(yu);fme=n(Y$e,"STRONG",{});var q2t=s(fme);Z3o=r(q2t,"tapas"),q2t.forEach(t),e0o=r(Y$e," \u2014 "),XD=n(Y$e,"A",{href:!0});var j2t=s(XD);o0o=r(j2t,"TapasModel"),j2t.forEach(t),r0o=r(Y$e," (TAPAS model)"),Y$e.forEach(t),t0o=i(x),xu=n(x,"LI",{});var K$e=s(xu);mme=n(K$e,"STRONG",{});var D2t=s(mme);a0o=r(D2t,"trajectory_transformer"),D2t.forEach(t),n0o=r(K$e," \u2014 "),zD=n(K$e,"A",{href:!0});var G2t=s(zD);s0o=r(G2t,"TrajectoryTransformerModel"),G2t.forEach(t),l0o=r(K$e," (Trajectory Transformer model)"),K$e.forEach(t),i0o=i(x),$u=n(x,"LI",{});var Z$e=s($u);gme=n(Z$e,"STRONG",{});var O2t=s(gme);d0o=r(O2t,"transfo-xl"),O2t.forEach(t),c0o=r(Z$e," \u2014 "),QD=n(Z$e,"A",{href:!0});var V2t=s(QD);f0o=r(V2t,"TransfoXLModel"),V2t.forEach(t),m0o=r(Z$e," (Transformer-XL model)"),Z$e.forEach(t),g0o=i(x),ku=n(x,"LI",{});var eke=s(ku);hme=n(eke,"STRONG",{});var X2t=s(hme);h0o=r(X2t,"unispeech"),X2t.forEach(t),p0o=r(eke," \u2014 "),WD=n(eke,"A",{href:!0});var z2t=s(WD);_0o=r(z2t,"UniSpeechModel"),z2t.forEach(t),u0o=r(eke," (UniSpeech model)"),eke.forEach(t),b0o=i(x),Su=n(x,"LI",{});var oke=s(Su);pme=n(oke,"STRONG",{});var Q2t=s(pme);v0o=r(Q2t,"unispeech-sat"),Q2t.forEach(t),F0o=r(oke," \u2014 "),HD=n(oke,"A",{href:!0});var W2t=s(HD);T0o=r(W2t,"UniSpeechSatModel"),W2t.forEach(t),M0o=r(oke," (UniSpeechSat model)"),oke.forEach(t),E0o=i(x),Ru=n(x,"LI",{});var rke=s(Ru);_me=n(rke,"STRONG",{});var H2t=s(_me);C0o=r(H2t,"van"),H2t.forEach(t),w0o=r(rke," \u2014 "),UD=n(rke,"A",{href:!0});var U2t=s(UD);A0o=r(U2t,"VanModel"),U2t.forEach(t),L0o=r(rke," (VAN model)"),rke.forEach(t),y0o=i(x),Pu=n(x,"LI",{});var tke=s(Pu);ume=n(tke,"STRONG",{});var J2t=s(ume);x0o=r(J2t,"vilt"),J2t.forEach(t),$0o=r(tke," \u2014 "),JD=n(tke,"A",{href:!0});var Y2t=s(JD);k0o=r(Y2t,"ViltModel"),Y2t.forEach(t),S0o=r(tke," (ViLT model)"),tke.forEach(t),R0o=i(x),Bu=n(x,"LI",{});var ake=s(Bu);bme=n(ake,"STRONG",{});var K2t=s(bme);P0o=r(K2t,"vision-text-dual-encoder"),K2t.forEach(t),B0o=r(ake," \u2014 "),YD=n(ake,"A",{href:!0});var Z2t=s(YD);N0o=r(Z2t,"VisionTextDualEncoderModel"),Z2t.forEach(t),I0o=r(ake," (VisionTextDualEncoder model)"),ake.forEach(t),q0o=i(x),Nu=n(x,"LI",{});var nke=s(Nu);vme=n(nke,"STRONG",{});var e1t=s(vme);j0o=r(e1t,"visual_bert"),e1t.forEach(t),D0o=r(nke," \u2014 "),KD=n(nke,"A",{href:!0});var o1t=s(KD);G0o=r(o1t,"VisualBertModel"),o1t.forEach(t),O0o=r(nke," (VisualBERT model)"),nke.forEach(t),V0o=i(x),Iu=n(x,"LI",{});var ske=s(Iu);Fme=n(ske,"STRONG",{});var r1t=s(Fme);X0o=r(r1t,"vit"),r1t.forEach(t),z0o=r(ske," \u2014 "),ZD=n(ske,"A",{href:!0});var t1t=s(ZD);Q0o=r(t1t,"ViTModel"),t1t.forEach(t),W0o=r(ske," (ViT model)"),ske.forEach(t),H0o=i(x),qu=n(x,"LI",{});var lke=s(qu);Tme=n(lke,"STRONG",{});var a1t=s(Tme);U0o=r(a1t,"vit_mae"),a1t.forEach(t),J0o=r(lke," \u2014 "),eG=n(lke,"A",{href:!0});var n1t=s(eG);Y0o=r(n1t,"ViTMAEModel"),n1t.forEach(t),K0o=r(lke," (ViTMAE model)"),lke.forEach(t),Z0o=i(x),ju=n(x,"LI",{});var ike=s(ju);Mme=n(ike,"STRONG",{});var s1t=s(Mme);ewo=r(s1t,"wav2vec2"),s1t.forEach(t),owo=r(ike," \u2014 "),oG=n(ike,"A",{href:!0});var l1t=s(oG);rwo=r(l1t,"Wav2Vec2Model"),l1t.forEach(t),two=r(ike," (Wav2Vec2 model)"),ike.forEach(t),awo=i(x),Du=n(x,"LI",{});var dke=s(Du);Eme=n(dke,"STRONG",{});var i1t=s(Eme);nwo=r(i1t,"wav2vec2-conformer"),i1t.forEach(t),swo=r(dke," \u2014 "),rG=n(dke,"A",{href:!0});var d1t=s(rG);lwo=r(d1t,"Wav2Vec2ConformerModel"),d1t.forEach(t),iwo=r(dke," (Wav2Vec2-Conformer model)"),dke.forEach(t),dwo=i(x),Gu=n(x,"LI",{});var cke=s(Gu);Cme=n(cke,"STRONG",{});var c1t=s(Cme);cwo=r(c1t,"wavlm"),c1t.forEach(t),fwo=r(cke," \u2014 "),tG=n(cke,"A",{href:!0});var f1t=s(tG);mwo=r(f1t,"WavLMModel"),f1t.forEach(t),gwo=r(cke," (WavLM model)"),cke.forEach(t),hwo=i(x),Ou=n(x,"LI",{});var fke=s(Ou);wme=n(fke,"STRONG",{});var m1t=s(wme);pwo=r(m1t,"xglm"),m1t.forEach(t),_wo=r(fke," \u2014 "),aG=n(fke,"A",{href:!0});var g1t=s(aG);uwo=r(g1t,"XGLMModel"),g1t.forEach(t),bwo=r(fke," (XGLM model)"),fke.forEach(t),vwo=i(x),Vu=n(x,"LI",{});var mke=s(Vu);Ame=n(mke,"STRONG",{});var h1t=s(Ame);Fwo=r(h1t,"xlm"),h1t.forEach(t),Two=r(mke," \u2014 "),nG=n(mke,"A",{href:!0});var p1t=s(nG);Mwo=r(p1t,"XLMModel"),p1t.forEach(t),Ewo=r(mke," (XLM model)"),mke.forEach(t),Cwo=i(x),Xu=n(x,"LI",{});var gke=s(Xu);Lme=n(gke,"STRONG",{});var _1t=s(Lme);wwo=r(_1t,"xlm-prophetnet"),_1t.forEach(t),Awo=r(gke," \u2014 "),sG=n(gke,"A",{href:!0});var u1t=s(sG);Lwo=r(u1t,"XLMProphetNetModel"),u1t.forEach(t),ywo=r(gke," (XLM-ProphetNet model)"),gke.forEach(t),xwo=i(x),zu=n(x,"LI",{});var hke=s(zu);yme=n(hke,"STRONG",{});var b1t=s(yme);$wo=r(b1t,"xlm-roberta"),b1t.forEach(t),kwo=r(hke," \u2014 "),lG=n(hke,"A",{href:!0});var v1t=s(lG);Swo=r(v1t,"XLMRobertaModel"),v1t.forEach(t),Rwo=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),Pwo=i(x),Qu=n(x,"LI",{});var pke=s(Qu);xme=n(pke,"STRONG",{});var F1t=s(xme);Bwo=r(F1t,"xlm-roberta-xl"),F1t.forEach(t),Nwo=r(pke," \u2014 "),iG=n(pke,"A",{href:!0});var T1t=s(iG);Iwo=r(T1t,"XLMRobertaXLModel"),T1t.forEach(t),qwo=r(pke," (XLM-RoBERTa-XL model)"),pke.forEach(t),jwo=i(x),Wu=n(x,"LI",{});var _ke=s(Wu);$me=n(_ke,"STRONG",{});var M1t=s($me);Dwo=r(M1t,"xlnet"),M1t.forEach(t),Gwo=r(_ke," \u2014 "),dG=n(_ke,"A",{href:!0});var E1t=s(dG);Owo=r(E1t,"XLNetModel"),E1t.forEach(t),Vwo=r(_ke," (XLNet model)"),_ke.forEach(t),Xwo=i(x),Hu=n(x,"LI",{});var uke=s(Hu);kme=n(uke,"STRONG",{});var C1t=s(kme);zwo=r(C1t,"yolos"),C1t.forEach(t),Qwo=r(uke," \u2014 "),cG=n(uke,"A",{href:!0});var w1t=s(cG);Wwo=r(w1t,"YolosModel"),w1t.forEach(t),Hwo=r(uke," (YOLOS model)"),uke.forEach(t),Uwo=i(x),Uu=n(x,"LI",{});var bke=s(Uu);Sme=n(bke,"STRONG",{});var A1t=s(Sme);Jwo=r(A1t,"yoso"),A1t.forEach(t),Ywo=r(bke," \u2014 "),fG=n(bke,"A",{href:!0});var L1t=s(fG);Kwo=r(L1t,"YosoModel"),L1t.forEach(t),Zwo=r(bke," (YOSO model)"),bke.forEach(t),x.forEach(t),eAo=i(la),Ju=n(la,"P",{});var vke=s(Ju);oAo=r(vke,"The model is set in evaluation mode by default using "),Rme=n(vke,"CODE",{});var y1t=s(Rme);rAo=r(y1t,"model.eval()"),y1t.forEach(t),tAo=r(vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=n(vke,"CODE",{});var x1t=s(Pme);aAo=r(x1t,"model.train()"),x1t.forEach(t),vke.forEach(t),nAo=i(la),T(Yu.$$.fragment,la),la.forEach(t),tl.forEach(t),GXe=i(f),zi=n(f,"H2",{class:!0});var WQe=s(zi);Ku=n(WQe,"A",{id:!0,class:!0,href:!0});var $1t=s(Ku);Bme=n($1t,"SPAN",{});var k1t=s(Bme);T(OL.$$.fragment,k1t),k1t.forEach(t),$1t.forEach(t),sAo=i(WQe),Nme=n(WQe,"SPAN",{});var S1t=s(Nme);lAo=r(S1t,"AutoModelForPreTraining"),S1t.forEach(t),WQe.forEach(t),OXe=i(f),ko=n(f,"DIV",{class:!0});var al=s(ko);T(VL.$$.fragment,al),iAo=i(al),Qi=n(al,"P",{});var Wre=s(Qi);dAo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mG=n(Wre,"A",{href:!0});var R1t=s(mG);cAo=r(R1t,"from_pretrained()"),R1t.forEach(t),fAo=r(Wre," class method or the "),gG=n(Wre,"A",{href:!0});var P1t=s(gG);mAo=r(P1t,"from_config()"),P1t.forEach(t),gAo=r(Wre,` class
method.`),Wre.forEach(t),hAo=i(al),XL=n(al,"P",{});var HQe=s(XL);pAo=r(HQe,"This class cannot be instantiated directly using "),Ime=n(HQe,"CODE",{});var B1t=s(Ime);_Ao=r(B1t,"__init__()"),B1t.forEach(t),uAo=r(HQe," (throws an error)."),HQe.forEach(t),bAo=i(al),dt=n(al,"DIV",{class:!0});var uw=s(dt);T(zL.$$.fragment,uw),vAo=i(uw),qme=n(uw,"P",{});var N1t=s(qme);FAo=r(N1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),N1t.forEach(t),TAo=i(uw),Wi=n(uw,"P",{});var Hre=s(Wi);MAo=r(Hre,`Note:
Loading a model from its configuration file does `),jme=n(Hre,"STRONG",{});var I1t=s(jme);EAo=r(I1t,"not"),I1t.forEach(t),CAo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=n(Hre,"A",{href:!0});var q1t=s(hG);wAo=r(q1t,"from_pretrained()"),q1t.forEach(t),AAo=r(Hre," to load the model weights."),Hre.forEach(t),LAo=i(uw),T(Zu.$$.fragment,uw),uw.forEach(t),yAo=i(al),Ke=n(al,"DIV",{class:!0});var ia=s(Ke);T(QL.$$.fragment,ia),xAo=i(ia),Dme=n(ia,"P",{});var j1t=s(Dme);$Ao=r(j1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),j1t.forEach(t),kAo=i(ia),Ia=n(ia,"P",{});var bw=s(Ia);SAo=r(bw,"The model class to instantiate is selected based on the "),Gme=n(bw,"CODE",{});var D1t=s(Gme);RAo=r(D1t,"model_type"),D1t.forEach(t),PAo=r(bw,` property of the config object (either
passed as an argument or loaded from `),Ome=n(bw,"CODE",{});var G1t=s(Ome);BAo=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),NAo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=n(bw,"CODE",{});var O1t=s(Vme);IAo=r(O1t,"pretrained_model_name_or_path"),O1t.forEach(t),qAo=r(bw,":"),bw.forEach(t),jAo=i(ia),G=n(ia,"UL",{});var O=s(G);e2=n(O,"LI",{});var Fke=s(e2);Xme=n(Fke,"STRONG",{});var V1t=s(Xme);DAo=r(V1t,"albert"),V1t.forEach(t),GAo=r(Fke," \u2014 "),pG=n(Fke,"A",{href:!0});var X1t=s(pG);OAo=r(X1t,"AlbertForPreTraining"),X1t.forEach(t),VAo=r(Fke," (ALBERT model)"),Fke.forEach(t),XAo=i(O),o2=n(O,"LI",{});var Tke=s(o2);zme=n(Tke,"STRONG",{});var z1t=s(zme);zAo=r(z1t,"bart"),z1t.forEach(t),QAo=r(Tke," \u2014 "),_G=n(Tke,"A",{href:!0});var Q1t=s(_G);WAo=r(Q1t,"BartForConditionalGeneration"),Q1t.forEach(t),HAo=r(Tke," (BART model)"),Tke.forEach(t),UAo=i(O),r2=n(O,"LI",{});var Mke=s(r2);Qme=n(Mke,"STRONG",{});var W1t=s(Qme);JAo=r(W1t,"bert"),W1t.forEach(t),YAo=r(Mke," \u2014 "),uG=n(Mke,"A",{href:!0});var H1t=s(uG);KAo=r(H1t,"BertForPreTraining"),H1t.forEach(t),ZAo=r(Mke," (BERT model)"),Mke.forEach(t),eLo=i(O),t2=n(O,"LI",{});var Eke=s(t2);Wme=n(Eke,"STRONG",{});var U1t=s(Wme);oLo=r(U1t,"big_bird"),U1t.forEach(t),rLo=r(Eke," \u2014 "),bG=n(Eke,"A",{href:!0});var J1t=s(bG);tLo=r(J1t,"BigBirdForPreTraining"),J1t.forEach(t),aLo=r(Eke," (BigBird model)"),Eke.forEach(t),nLo=i(O),a2=n(O,"LI",{});var Cke=s(a2);Hme=n(Cke,"STRONG",{});var Y1t=s(Hme);sLo=r(Y1t,"bloom"),Y1t.forEach(t),lLo=r(Cke," \u2014 "),vG=n(Cke,"A",{href:!0});var K1t=s(vG);iLo=r(K1t,"BloomForCausalLM"),K1t.forEach(t),dLo=r(Cke," (BLOOM model)"),Cke.forEach(t),cLo=i(O),n2=n(O,"LI",{});var wke=s(n2);Ume=n(wke,"STRONG",{});var Z1t=s(Ume);fLo=r(Z1t,"camembert"),Z1t.forEach(t),mLo=r(wke," \u2014 "),FG=n(wke,"A",{href:!0});var ebt=s(FG);gLo=r(ebt,"CamembertForMaskedLM"),ebt.forEach(t),hLo=r(wke," (CamemBERT model)"),wke.forEach(t),pLo=i(O),s2=n(O,"LI",{});var Ake=s(s2);Jme=n(Ake,"STRONG",{});var obt=s(Jme);_Lo=r(obt,"ctrl"),obt.forEach(t),uLo=r(Ake," \u2014 "),TG=n(Ake,"A",{href:!0});var rbt=s(TG);bLo=r(rbt,"CTRLLMHeadModel"),rbt.forEach(t),vLo=r(Ake," (CTRL model)"),Ake.forEach(t),FLo=i(O),l2=n(O,"LI",{});var Lke=s(l2);Yme=n(Lke,"STRONG",{});var tbt=s(Yme);TLo=r(tbt,"data2vec-text"),tbt.forEach(t),MLo=r(Lke," \u2014 "),MG=n(Lke,"A",{href:!0});var abt=s(MG);ELo=r(abt,"Data2VecTextForMaskedLM"),abt.forEach(t),CLo=r(Lke," (Data2VecText model)"),Lke.forEach(t),wLo=i(O),i2=n(O,"LI",{});var yke=s(i2);Kme=n(yke,"STRONG",{});var nbt=s(Kme);ALo=r(nbt,"deberta"),nbt.forEach(t),LLo=r(yke," \u2014 "),EG=n(yke,"A",{href:!0});var sbt=s(EG);yLo=r(sbt,"DebertaForMaskedLM"),sbt.forEach(t),xLo=r(yke," (DeBERTa model)"),yke.forEach(t),$Lo=i(O),d2=n(O,"LI",{});var xke=s(d2);Zme=n(xke,"STRONG",{});var lbt=s(Zme);kLo=r(lbt,"deberta-v2"),lbt.forEach(t),SLo=r(xke," \u2014 "),CG=n(xke,"A",{href:!0});var ibt=s(CG);RLo=r(ibt,"DebertaV2ForMaskedLM"),ibt.forEach(t),PLo=r(xke," (DeBERTa-v2 model)"),xke.forEach(t),BLo=i(O),c2=n(O,"LI",{});var $ke=s(c2);ege=n($ke,"STRONG",{});var dbt=s(ege);NLo=r(dbt,"distilbert"),dbt.forEach(t),ILo=r($ke," \u2014 "),wG=n($ke,"A",{href:!0});var cbt=s(wG);qLo=r(cbt,"DistilBertForMaskedLM"),cbt.forEach(t),jLo=r($ke," (DistilBERT model)"),$ke.forEach(t),DLo=i(O),f2=n(O,"LI",{});var kke=s(f2);oge=n(kke,"STRONG",{});var fbt=s(oge);GLo=r(fbt,"electra"),fbt.forEach(t),OLo=r(kke," \u2014 "),AG=n(kke,"A",{href:!0});var mbt=s(AG);VLo=r(mbt,"ElectraForPreTraining"),mbt.forEach(t),XLo=r(kke," (ELECTRA model)"),kke.forEach(t),zLo=i(O),m2=n(O,"LI",{});var Ske=s(m2);rge=n(Ske,"STRONG",{});var gbt=s(rge);QLo=r(gbt,"flaubert"),gbt.forEach(t),WLo=r(Ske," \u2014 "),LG=n(Ske,"A",{href:!0});var hbt=s(LG);HLo=r(hbt,"FlaubertWithLMHeadModel"),hbt.forEach(t),ULo=r(Ske," (FlauBERT model)"),Ske.forEach(t),JLo=i(O),g2=n(O,"LI",{});var Rke=s(g2);tge=n(Rke,"STRONG",{});var pbt=s(tge);YLo=r(pbt,"flava"),pbt.forEach(t),KLo=r(Rke," \u2014 "),yG=n(Rke,"A",{href:!0});var _bt=s(yG);ZLo=r(_bt,"FlavaForPreTraining"),_bt.forEach(t),eyo=r(Rke," (FLAVA model)"),Rke.forEach(t),oyo=i(O),h2=n(O,"LI",{});var Pke=s(h2);age=n(Pke,"STRONG",{});var ubt=s(age);ryo=r(ubt,"fnet"),ubt.forEach(t),tyo=r(Pke," \u2014 "),xG=n(Pke,"A",{href:!0});var bbt=s(xG);ayo=r(bbt,"FNetForPreTraining"),bbt.forEach(t),nyo=r(Pke," (FNet model)"),Pke.forEach(t),syo=i(O),p2=n(O,"LI",{});var Bke=s(p2);nge=n(Bke,"STRONG",{});var vbt=s(nge);lyo=r(vbt,"fsmt"),vbt.forEach(t),iyo=r(Bke," \u2014 "),$G=n(Bke,"A",{href:!0});var Fbt=s($G);dyo=r(Fbt,"FSMTForConditionalGeneration"),Fbt.forEach(t),cyo=r(Bke," (FairSeq Machine-Translation model)"),Bke.forEach(t),fyo=i(O),_2=n(O,"LI",{});var Nke=s(_2);sge=n(Nke,"STRONG",{});var Tbt=s(sge);myo=r(Tbt,"funnel"),Tbt.forEach(t),gyo=r(Nke," \u2014 "),kG=n(Nke,"A",{href:!0});var Mbt=s(kG);hyo=r(Mbt,"FunnelForPreTraining"),Mbt.forEach(t),pyo=r(Nke," (Funnel Transformer model)"),Nke.forEach(t),_yo=i(O),u2=n(O,"LI",{});var Ike=s(u2);lge=n(Ike,"STRONG",{});var Ebt=s(lge);uyo=r(Ebt,"gpt2"),Ebt.forEach(t),byo=r(Ike," \u2014 "),SG=n(Ike,"A",{href:!0});var Cbt=s(SG);vyo=r(Cbt,"GPT2LMHeadModel"),Cbt.forEach(t),Fyo=r(Ike," (OpenAI GPT-2 model)"),Ike.forEach(t),Tyo=i(O),b2=n(O,"LI",{});var qke=s(b2);ige=n(qke,"STRONG",{});var wbt=s(ige);Myo=r(wbt,"ibert"),wbt.forEach(t),Eyo=r(qke," \u2014 "),RG=n(qke,"A",{href:!0});var Abt=s(RG);Cyo=r(Abt,"IBertForMaskedLM"),Abt.forEach(t),wyo=r(qke," (I-BERT model)"),qke.forEach(t),Ayo=i(O),v2=n(O,"LI",{});var jke=s(v2);dge=n(jke,"STRONG",{});var Lbt=s(dge);Lyo=r(Lbt,"layoutlm"),Lbt.forEach(t),yyo=r(jke," \u2014 "),PG=n(jke,"A",{href:!0});var ybt=s(PG);xyo=r(ybt,"LayoutLMForMaskedLM"),ybt.forEach(t),$yo=r(jke," (LayoutLM model)"),jke.forEach(t),kyo=i(O),F2=n(O,"LI",{});var Dke=s(F2);cge=n(Dke,"STRONG",{});var xbt=s(cge);Syo=r(xbt,"longformer"),xbt.forEach(t),Ryo=r(Dke," \u2014 "),BG=n(Dke,"A",{href:!0});var $bt=s(BG);Pyo=r($bt,"LongformerForMaskedLM"),$bt.forEach(t),Byo=r(Dke," (Longformer model)"),Dke.forEach(t),Nyo=i(O),T2=n(O,"LI",{});var Gke=s(T2);fge=n(Gke,"STRONG",{});var kbt=s(fge);Iyo=r(kbt,"lxmert"),kbt.forEach(t),qyo=r(Gke," \u2014 "),NG=n(Gke,"A",{href:!0});var Sbt=s(NG);jyo=r(Sbt,"LxmertForPreTraining"),Sbt.forEach(t),Dyo=r(Gke," (LXMERT model)"),Gke.forEach(t),Gyo=i(O),M2=n(O,"LI",{});var Oke=s(M2);mge=n(Oke,"STRONG",{});var Rbt=s(mge);Oyo=r(Rbt,"megatron-bert"),Rbt.forEach(t),Vyo=r(Oke," \u2014 "),IG=n(Oke,"A",{href:!0});var Pbt=s(IG);Xyo=r(Pbt,"MegatronBertForPreTraining"),Pbt.forEach(t),zyo=r(Oke," (Megatron-BERT model)"),Oke.forEach(t),Qyo=i(O),E2=n(O,"LI",{});var Vke=s(E2);gge=n(Vke,"STRONG",{});var Bbt=s(gge);Wyo=r(Bbt,"mobilebert"),Bbt.forEach(t),Hyo=r(Vke," \u2014 "),qG=n(Vke,"A",{href:!0});var Nbt=s(qG);Uyo=r(Nbt,"MobileBertForPreTraining"),Nbt.forEach(t),Jyo=r(Vke," (MobileBERT model)"),Vke.forEach(t),Yyo=i(O),C2=n(O,"LI",{});var Xke=s(C2);hge=n(Xke,"STRONG",{});var Ibt=s(hge);Kyo=r(Ibt,"mpnet"),Ibt.forEach(t),Zyo=r(Xke," \u2014 "),jG=n(Xke,"A",{href:!0});var qbt=s(jG);e9o=r(qbt,"MPNetForMaskedLM"),qbt.forEach(t),o9o=r(Xke," (MPNet model)"),Xke.forEach(t),r9o=i(O),w2=n(O,"LI",{});var zke=s(w2);pge=n(zke,"STRONG",{});var jbt=s(pge);t9o=r(jbt,"mvp"),jbt.forEach(t),a9o=r(zke," \u2014 "),DG=n(zke,"A",{href:!0});var Dbt=s(DG);n9o=r(Dbt,"MvpForConditionalGeneration"),Dbt.forEach(t),s9o=r(zke," (MVP model)"),zke.forEach(t),l9o=i(O),A2=n(O,"LI",{});var Qke=s(A2);_ge=n(Qke,"STRONG",{});var Gbt=s(_ge);i9o=r(Gbt,"nezha"),Gbt.forEach(t),d9o=r(Qke," \u2014 "),GG=n(Qke,"A",{href:!0});var Obt=s(GG);c9o=r(Obt,"NezhaForPreTraining"),Obt.forEach(t),f9o=r(Qke," (Nezha model)"),Qke.forEach(t),m9o=i(O),L2=n(O,"LI",{});var Wke=s(L2);uge=n(Wke,"STRONG",{});var Vbt=s(uge);g9o=r(Vbt,"openai-gpt"),Vbt.forEach(t),h9o=r(Wke," \u2014 "),OG=n(Wke,"A",{href:!0});var Xbt=s(OG);p9o=r(Xbt,"OpenAIGPTLMHeadModel"),Xbt.forEach(t),_9o=r(Wke," (OpenAI GPT model)"),Wke.forEach(t),u9o=i(O),y2=n(O,"LI",{});var Hke=s(y2);bge=n(Hke,"STRONG",{});var zbt=s(bge);b9o=r(zbt,"retribert"),zbt.forEach(t),v9o=r(Hke," \u2014 "),VG=n(Hke,"A",{href:!0});var Qbt=s(VG);F9o=r(Qbt,"RetriBertModel"),Qbt.forEach(t),T9o=r(Hke," (RetriBERT model)"),Hke.forEach(t),M9o=i(O),x2=n(O,"LI",{});var Uke=s(x2);vge=n(Uke,"STRONG",{});var Wbt=s(vge);E9o=r(Wbt,"roberta"),Wbt.forEach(t),C9o=r(Uke," \u2014 "),XG=n(Uke,"A",{href:!0});var Hbt=s(XG);w9o=r(Hbt,"RobertaForMaskedLM"),Hbt.forEach(t),A9o=r(Uke," (RoBERTa model)"),Uke.forEach(t),L9o=i(O),$2=n(O,"LI",{});var Jke=s($2);Fge=n(Jke,"STRONG",{});var Ubt=s(Fge);y9o=r(Ubt,"splinter"),Ubt.forEach(t),x9o=r(Jke," \u2014 "),zG=n(Jke,"A",{href:!0});var Jbt=s(zG);$9o=r(Jbt,"SplinterForPreTraining"),Jbt.forEach(t),k9o=r(Jke," (Splinter model)"),Jke.forEach(t),S9o=i(O),k2=n(O,"LI",{});var Yke=s(k2);Tge=n(Yke,"STRONG",{});var Ybt=s(Tge);R9o=r(Ybt,"squeezebert"),Ybt.forEach(t),P9o=r(Yke," \u2014 "),QG=n(Yke,"A",{href:!0});var Kbt=s(QG);B9o=r(Kbt,"SqueezeBertForMaskedLM"),Kbt.forEach(t),N9o=r(Yke," (SqueezeBERT model)"),Yke.forEach(t),I9o=i(O),S2=n(O,"LI",{});var Kke=s(S2);Mge=n(Kke,"STRONG",{});var Zbt=s(Mge);q9o=r(Zbt,"t5"),Zbt.forEach(t),j9o=r(Kke," \u2014 "),WG=n(Kke,"A",{href:!0});var evt=s(WG);D9o=r(evt,"T5ForConditionalGeneration"),evt.forEach(t),G9o=r(Kke," (T5 model)"),Kke.forEach(t),O9o=i(O),R2=n(O,"LI",{});var Zke=s(R2);Ege=n(Zke,"STRONG",{});var ovt=s(Ege);V9o=r(ovt,"tapas"),ovt.forEach(t),X9o=r(Zke," \u2014 "),HG=n(Zke,"A",{href:!0});var rvt=s(HG);z9o=r(rvt,"TapasForMaskedLM"),rvt.forEach(t),Q9o=r(Zke," (TAPAS model)"),Zke.forEach(t),W9o=i(O),P2=n(O,"LI",{});var eSe=s(P2);Cge=n(eSe,"STRONG",{});var tvt=s(Cge);H9o=r(tvt,"transfo-xl"),tvt.forEach(t),U9o=r(eSe," \u2014 "),UG=n(eSe,"A",{href:!0});var avt=s(UG);J9o=r(avt,"TransfoXLLMHeadModel"),avt.forEach(t),Y9o=r(eSe," (Transformer-XL model)"),eSe.forEach(t),K9o=i(O),B2=n(O,"LI",{});var oSe=s(B2);wge=n(oSe,"STRONG",{});var nvt=s(wge);Z9o=r(nvt,"unispeech"),nvt.forEach(t),exo=r(oSe," \u2014 "),JG=n(oSe,"A",{href:!0});var svt=s(JG);oxo=r(svt,"UniSpeechForPreTraining"),svt.forEach(t),rxo=r(oSe," (UniSpeech model)"),oSe.forEach(t),txo=i(O),N2=n(O,"LI",{});var rSe=s(N2);Age=n(rSe,"STRONG",{});var lvt=s(Age);axo=r(lvt,"unispeech-sat"),lvt.forEach(t),nxo=r(rSe," \u2014 "),YG=n(rSe,"A",{href:!0});var ivt=s(YG);sxo=r(ivt,"UniSpeechSatForPreTraining"),ivt.forEach(t),lxo=r(rSe," (UniSpeechSat model)"),rSe.forEach(t),ixo=i(O),I2=n(O,"LI",{});var tSe=s(I2);Lge=n(tSe,"STRONG",{});var dvt=s(Lge);dxo=r(dvt,"visual_bert"),dvt.forEach(t),cxo=r(tSe," \u2014 "),KG=n(tSe,"A",{href:!0});var cvt=s(KG);fxo=r(cvt,"VisualBertForPreTraining"),cvt.forEach(t),mxo=r(tSe," (VisualBERT model)"),tSe.forEach(t),gxo=i(O),q2=n(O,"LI",{});var aSe=s(q2);yge=n(aSe,"STRONG",{});var fvt=s(yge);hxo=r(fvt,"vit_mae"),fvt.forEach(t),pxo=r(aSe," \u2014 "),ZG=n(aSe,"A",{href:!0});var mvt=s(ZG);_xo=r(mvt,"ViTMAEForPreTraining"),mvt.forEach(t),uxo=r(aSe," (ViTMAE model)"),aSe.forEach(t),bxo=i(O),j2=n(O,"LI",{});var nSe=s(j2);xge=n(nSe,"STRONG",{});var gvt=s(xge);vxo=r(gvt,"wav2vec2"),gvt.forEach(t),Fxo=r(nSe," \u2014 "),eO=n(nSe,"A",{href:!0});var hvt=s(eO);Txo=r(hvt,"Wav2Vec2ForPreTraining"),hvt.forEach(t),Mxo=r(nSe," (Wav2Vec2 model)"),nSe.forEach(t),Exo=i(O),D2=n(O,"LI",{});var sSe=s(D2);$ge=n(sSe,"STRONG",{});var pvt=s($ge);Cxo=r(pvt,"wav2vec2-conformer"),pvt.forEach(t),wxo=r(sSe," \u2014 "),oO=n(sSe,"A",{href:!0});var _vt=s(oO);Axo=r(_vt,"Wav2Vec2ConformerForPreTraining"),_vt.forEach(t),Lxo=r(sSe," (Wav2Vec2-Conformer model)"),sSe.forEach(t),yxo=i(O),G2=n(O,"LI",{});var lSe=s(G2);kge=n(lSe,"STRONG",{});var uvt=s(kge);xxo=r(uvt,"xlm"),uvt.forEach(t),$xo=r(lSe," \u2014 "),rO=n(lSe,"A",{href:!0});var bvt=s(rO);kxo=r(bvt,"XLMWithLMHeadModel"),bvt.forEach(t),Sxo=r(lSe," (XLM model)"),lSe.forEach(t),Rxo=i(O),O2=n(O,"LI",{});var iSe=s(O2);Sge=n(iSe,"STRONG",{});var vvt=s(Sge);Pxo=r(vvt,"xlm-roberta"),vvt.forEach(t),Bxo=r(iSe," \u2014 "),tO=n(iSe,"A",{href:!0});var Fvt=s(tO);Nxo=r(Fvt,"XLMRobertaForMaskedLM"),Fvt.forEach(t),Ixo=r(iSe," (XLM-RoBERTa model)"),iSe.forEach(t),qxo=i(O),V2=n(O,"LI",{});var dSe=s(V2);Rge=n(dSe,"STRONG",{});var Tvt=s(Rge);jxo=r(Tvt,"xlm-roberta-xl"),Tvt.forEach(t),Dxo=r(dSe," \u2014 "),aO=n(dSe,"A",{href:!0});var Mvt=s(aO);Gxo=r(Mvt,"XLMRobertaXLForMaskedLM"),Mvt.forEach(t),Oxo=r(dSe," (XLM-RoBERTa-XL model)"),dSe.forEach(t),Vxo=i(O),X2=n(O,"LI",{});var cSe=s(X2);Pge=n(cSe,"STRONG",{});var Evt=s(Pge);Xxo=r(Evt,"xlnet"),Evt.forEach(t),zxo=r(cSe," \u2014 "),nO=n(cSe,"A",{href:!0});var Cvt=s(nO);Qxo=r(Cvt,"XLNetLMHeadModel"),Cvt.forEach(t),Wxo=r(cSe," (XLNet model)"),cSe.forEach(t),O.forEach(t),Hxo=i(ia),z2=n(ia,"P",{});var fSe=s(z2);Uxo=r(fSe,"The model is set in evaluation mode by default using "),Bge=n(fSe,"CODE",{});var wvt=s(Bge);Jxo=r(wvt,"model.eval()"),wvt.forEach(t),Yxo=r(fSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=n(fSe,"CODE",{});var Avt=s(Nge);Kxo=r(Avt,"model.train()"),Avt.forEach(t),fSe.forEach(t),Zxo=i(ia),T(Q2.$$.fragment,ia),ia.forEach(t),al.forEach(t),VXe=i(f),Hi=n(f,"H2",{class:!0});var UQe=s(Hi);W2=n(UQe,"A",{id:!0,class:!0,href:!0});var Lvt=s(W2);Ige=n(Lvt,"SPAN",{});var yvt=s(Ige);T(WL.$$.fragment,yvt),yvt.forEach(t),Lvt.forEach(t),e$o=i(UQe),qge=n(UQe,"SPAN",{});var xvt=s(qge);o$o=r(xvt,"AutoModelForCausalLM"),xvt.forEach(t),UQe.forEach(t),XXe=i(f),So=n(f,"DIV",{class:!0});var nl=s(So);T(HL.$$.fragment,nl),r$o=i(nl),Ui=n(nl,"P",{});var Ure=s(Ui);t$o=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sO=n(Ure,"A",{href:!0});var $vt=s(sO);a$o=r($vt,"from_pretrained()"),$vt.forEach(t),n$o=r(Ure," class method or the "),lO=n(Ure,"A",{href:!0});var kvt=s(lO);s$o=r(kvt,"from_config()"),kvt.forEach(t),l$o=r(Ure,` class
method.`),Ure.forEach(t),i$o=i(nl),UL=n(nl,"P",{});var JQe=s(UL);d$o=r(JQe,"This class cannot be instantiated directly using "),jge=n(JQe,"CODE",{});var Svt=s(jge);c$o=r(Svt,"__init__()"),Svt.forEach(t),f$o=r(JQe," (throws an error)."),JQe.forEach(t),m$o=i(nl),ct=n(nl,"DIV",{class:!0});var vw=s(ct);T(JL.$$.fragment,vw),g$o=i(vw),Dge=n(vw,"P",{});var Rvt=s(Dge);h$o=r(Rvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rvt.forEach(t),p$o=i(vw),Ji=n(vw,"P",{});var Jre=s(Ji);_$o=r(Jre,`Note:
Loading a model from its configuration file does `),Gge=n(Jre,"STRONG",{});var Pvt=s(Gge);u$o=r(Pvt,"not"),Pvt.forEach(t),b$o=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(Jre,"A",{href:!0});var Bvt=s(iO);v$o=r(Bvt,"from_pretrained()"),Bvt.forEach(t),F$o=r(Jre," to load the model weights."),Jre.forEach(t),T$o=i(vw),T(H2.$$.fragment,vw),vw.forEach(t),M$o=i(nl),Ze=n(nl,"DIV",{class:!0});var da=s(Ze);T(YL.$$.fragment,da),E$o=i(da),Oge=n(da,"P",{});var Nvt=s(Oge);C$o=r(Nvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nvt.forEach(t),w$o=i(da),qa=n(da,"P",{});var Fw=s(qa);A$o=r(Fw,"The model class to instantiate is selected based on the "),Vge=n(Fw,"CODE",{});var Ivt=s(Vge);L$o=r(Ivt,"model_type"),Ivt.forEach(t),y$o=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Xge=n(Fw,"CODE",{});var qvt=s(Xge);x$o=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),$$o=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=n(Fw,"CODE",{});var jvt=s(zge);k$o=r(jvt,"pretrained_model_name_or_path"),jvt.forEach(t),S$o=r(Fw,":"),Fw.forEach(t),R$o=i(da),z=n(da,"UL",{});var Q=s(z);U2=n(Q,"LI",{});var mSe=s(U2);Qge=n(mSe,"STRONG",{});var Dvt=s(Qge);P$o=r(Dvt,"bart"),Dvt.forEach(t),B$o=r(mSe," \u2014 "),dO=n(mSe,"A",{href:!0});var Gvt=s(dO);N$o=r(Gvt,"BartForCausalLM"),Gvt.forEach(t),I$o=r(mSe," (BART model)"),mSe.forEach(t),q$o=i(Q),J2=n(Q,"LI",{});var gSe=s(J2);Wge=n(gSe,"STRONG",{});var Ovt=s(Wge);j$o=r(Ovt,"bert"),Ovt.forEach(t),D$o=r(gSe," \u2014 "),cO=n(gSe,"A",{href:!0});var Vvt=s(cO);G$o=r(Vvt,"BertLMHeadModel"),Vvt.forEach(t),O$o=r(gSe," (BERT model)"),gSe.forEach(t),V$o=i(Q),Y2=n(Q,"LI",{});var hSe=s(Y2);Hge=n(hSe,"STRONG",{});var Xvt=s(Hge);X$o=r(Xvt,"bert-generation"),Xvt.forEach(t),z$o=r(hSe," \u2014 "),fO=n(hSe,"A",{href:!0});var zvt=s(fO);Q$o=r(zvt,"BertGenerationDecoder"),zvt.forEach(t),W$o=r(hSe," (Bert Generation model)"),hSe.forEach(t),H$o=i(Q),K2=n(Q,"LI",{});var pSe=s(K2);Uge=n(pSe,"STRONG",{});var Qvt=s(Uge);U$o=r(Qvt,"big_bird"),Qvt.forEach(t),J$o=r(pSe," \u2014 "),mO=n(pSe,"A",{href:!0});var Wvt=s(mO);Y$o=r(Wvt,"BigBirdForCausalLM"),Wvt.forEach(t),K$o=r(pSe," (BigBird model)"),pSe.forEach(t),Z$o=i(Q),Z2=n(Q,"LI",{});var _Se=s(Z2);Jge=n(_Se,"STRONG",{});var Hvt=s(Jge);eko=r(Hvt,"bigbird_pegasus"),Hvt.forEach(t),oko=r(_Se," \u2014 "),gO=n(_Se,"A",{href:!0});var Uvt=s(gO);rko=r(Uvt,"BigBirdPegasusForCausalLM"),Uvt.forEach(t),tko=r(_Se," (BigBird-Pegasus model)"),_Se.forEach(t),ako=i(Q),e1=n(Q,"LI",{});var uSe=s(e1);Yge=n(uSe,"STRONG",{});var Jvt=s(Yge);nko=r(Jvt,"blenderbot"),Jvt.forEach(t),sko=r(uSe," \u2014 "),hO=n(uSe,"A",{href:!0});var Yvt=s(hO);lko=r(Yvt,"BlenderbotForCausalLM"),Yvt.forEach(t),iko=r(uSe," (Blenderbot model)"),uSe.forEach(t),dko=i(Q),o1=n(Q,"LI",{});var bSe=s(o1);Kge=n(bSe,"STRONG",{});var Kvt=s(Kge);cko=r(Kvt,"blenderbot-small"),Kvt.forEach(t),fko=r(bSe," \u2014 "),pO=n(bSe,"A",{href:!0});var Zvt=s(pO);mko=r(Zvt,"BlenderbotSmallForCausalLM"),Zvt.forEach(t),gko=r(bSe," (BlenderbotSmall model)"),bSe.forEach(t),hko=i(Q),r1=n(Q,"LI",{});var vSe=s(r1);Zge=n(vSe,"STRONG",{});var eFt=s(Zge);pko=r(eFt,"bloom"),eFt.forEach(t),_ko=r(vSe," \u2014 "),_O=n(vSe,"A",{href:!0});var oFt=s(_O);uko=r(oFt,"BloomForCausalLM"),oFt.forEach(t),bko=r(vSe," (BLOOM model)"),vSe.forEach(t),vko=i(Q),t1=n(Q,"LI",{});var FSe=s(t1);ehe=n(FSe,"STRONG",{});var rFt=s(ehe);Fko=r(rFt,"camembert"),rFt.forEach(t),Tko=r(FSe," \u2014 "),uO=n(FSe,"A",{href:!0});var tFt=s(uO);Mko=r(tFt,"CamembertForCausalLM"),tFt.forEach(t),Eko=r(FSe," (CamemBERT model)"),FSe.forEach(t),Cko=i(Q),a1=n(Q,"LI",{});var TSe=s(a1);ohe=n(TSe,"STRONG",{});var aFt=s(ohe);wko=r(aFt,"codegen"),aFt.forEach(t),Ako=r(TSe," \u2014 "),bO=n(TSe,"A",{href:!0});var nFt=s(bO);Lko=r(nFt,"CodeGenForCausalLM"),nFt.forEach(t),yko=r(TSe," (CodeGen model)"),TSe.forEach(t),xko=i(Q),n1=n(Q,"LI",{});var MSe=s(n1);rhe=n(MSe,"STRONG",{});var sFt=s(rhe);$ko=r(sFt,"ctrl"),sFt.forEach(t),kko=r(MSe," \u2014 "),vO=n(MSe,"A",{href:!0});var lFt=s(vO);Sko=r(lFt,"CTRLLMHeadModel"),lFt.forEach(t),Rko=r(MSe," (CTRL model)"),MSe.forEach(t),Pko=i(Q),s1=n(Q,"LI",{});var ESe=s(s1);the=n(ESe,"STRONG",{});var iFt=s(the);Bko=r(iFt,"data2vec-text"),iFt.forEach(t),Nko=r(ESe," \u2014 "),FO=n(ESe,"A",{href:!0});var dFt=s(FO);Iko=r(dFt,"Data2VecTextForCausalLM"),dFt.forEach(t),qko=r(ESe," (Data2VecText model)"),ESe.forEach(t),jko=i(Q),l1=n(Q,"LI",{});var CSe=s(l1);ahe=n(CSe,"STRONG",{});var cFt=s(ahe);Dko=r(cFt,"electra"),cFt.forEach(t),Gko=r(CSe," \u2014 "),TO=n(CSe,"A",{href:!0});var fFt=s(TO);Oko=r(fFt,"ElectraForCausalLM"),fFt.forEach(t),Vko=r(CSe," (ELECTRA model)"),CSe.forEach(t),Xko=i(Q),i1=n(Q,"LI",{});var wSe=s(i1);nhe=n(wSe,"STRONG",{});var mFt=s(nhe);zko=r(mFt,"gpt2"),mFt.forEach(t),Qko=r(wSe," \u2014 "),MO=n(wSe,"A",{href:!0});var gFt=s(MO);Wko=r(gFt,"GPT2LMHeadModel"),gFt.forEach(t),Hko=r(wSe," (OpenAI GPT-2 model)"),wSe.forEach(t),Uko=i(Q),d1=n(Q,"LI",{});var ASe=s(d1);she=n(ASe,"STRONG",{});var hFt=s(she);Jko=r(hFt,"gpt_neo"),hFt.forEach(t),Yko=r(ASe," \u2014 "),EO=n(ASe,"A",{href:!0});var pFt=s(EO);Kko=r(pFt,"GPTNeoForCausalLM"),pFt.forEach(t),Zko=r(ASe," (GPT Neo model)"),ASe.forEach(t),eSo=i(Q),c1=n(Q,"LI",{});var LSe=s(c1);lhe=n(LSe,"STRONG",{});var _Ft=s(lhe);oSo=r(_Ft,"gpt_neox"),_Ft.forEach(t),rSo=r(LSe," \u2014 "),CO=n(LSe,"A",{href:!0});var uFt=s(CO);tSo=r(uFt,"GPTNeoXForCausalLM"),uFt.forEach(t),aSo=r(LSe," (GPT NeoX model)"),LSe.forEach(t),nSo=i(Q),f1=n(Q,"LI",{});var ySe=s(f1);ihe=n(ySe,"STRONG",{});var bFt=s(ihe);sSo=r(bFt,"gptj"),bFt.forEach(t),lSo=r(ySe," \u2014 "),wO=n(ySe,"A",{href:!0});var vFt=s(wO);iSo=r(vFt,"GPTJForCausalLM"),vFt.forEach(t),dSo=r(ySe," (GPT-J model)"),ySe.forEach(t),cSo=i(Q),m1=n(Q,"LI",{});var xSe=s(m1);dhe=n(xSe,"STRONG",{});var FFt=s(dhe);fSo=r(FFt,"marian"),FFt.forEach(t),mSo=r(xSe," \u2014 "),AO=n(xSe,"A",{href:!0});var TFt=s(AO);gSo=r(TFt,"MarianForCausalLM"),TFt.forEach(t),hSo=r(xSe," (Marian model)"),xSe.forEach(t),pSo=i(Q),g1=n(Q,"LI",{});var $Se=s(g1);che=n($Se,"STRONG",{});var MFt=s(che);_So=r(MFt,"mbart"),MFt.forEach(t),uSo=r($Se," \u2014 "),LO=n($Se,"A",{href:!0});var EFt=s(LO);bSo=r(EFt,"MBartForCausalLM"),EFt.forEach(t),vSo=r($Se," (mBART model)"),$Se.forEach(t),FSo=i(Q),h1=n(Q,"LI",{});var kSe=s(h1);fhe=n(kSe,"STRONG",{});var CFt=s(fhe);TSo=r(CFt,"megatron-bert"),CFt.forEach(t),MSo=r(kSe," \u2014 "),yO=n(kSe,"A",{href:!0});var wFt=s(yO);ESo=r(wFt,"MegatronBertForCausalLM"),wFt.forEach(t),CSo=r(kSe," (Megatron-BERT model)"),kSe.forEach(t),wSo=i(Q),p1=n(Q,"LI",{});var SSe=s(p1);mhe=n(SSe,"STRONG",{});var AFt=s(mhe);ASo=r(AFt,"mvp"),AFt.forEach(t),LSo=r(SSe," \u2014 "),xO=n(SSe,"A",{href:!0});var LFt=s(xO);ySo=r(LFt,"MvpForCausalLM"),LFt.forEach(t),xSo=r(SSe," (MVP model)"),SSe.forEach(t),$So=i(Q),_1=n(Q,"LI",{});var RSe=s(_1);ghe=n(RSe,"STRONG",{});var yFt=s(ghe);kSo=r(yFt,"openai-gpt"),yFt.forEach(t),SSo=r(RSe," \u2014 "),$O=n(RSe,"A",{href:!0});var xFt=s($O);RSo=r(xFt,"OpenAIGPTLMHeadModel"),xFt.forEach(t),PSo=r(RSe," (OpenAI GPT model)"),RSe.forEach(t),BSo=i(Q),u1=n(Q,"LI",{});var PSe=s(u1);hhe=n(PSe,"STRONG",{});var $Ft=s(hhe);NSo=r($Ft,"opt"),$Ft.forEach(t),ISo=r(PSe," \u2014 "),kO=n(PSe,"A",{href:!0});var kFt=s(kO);qSo=r(kFt,"OPTForCausalLM"),kFt.forEach(t),jSo=r(PSe," (OPT model)"),PSe.forEach(t),DSo=i(Q),b1=n(Q,"LI",{});var BSe=s(b1);phe=n(BSe,"STRONG",{});var SFt=s(phe);GSo=r(SFt,"pegasus"),SFt.forEach(t),OSo=r(BSe," \u2014 "),SO=n(BSe,"A",{href:!0});var RFt=s(SO);VSo=r(RFt,"PegasusForCausalLM"),RFt.forEach(t),XSo=r(BSe," (Pegasus model)"),BSe.forEach(t),zSo=i(Q),v1=n(Q,"LI",{});var NSe=s(v1);_he=n(NSe,"STRONG",{});var PFt=s(_he);QSo=r(PFt,"plbart"),PFt.forEach(t),WSo=r(NSe," \u2014 "),RO=n(NSe,"A",{href:!0});var BFt=s(RO);HSo=r(BFt,"PLBartForCausalLM"),BFt.forEach(t),USo=r(NSe," (PLBart model)"),NSe.forEach(t),JSo=i(Q),F1=n(Q,"LI",{});var ISe=s(F1);uhe=n(ISe,"STRONG",{});var NFt=s(uhe);YSo=r(NFt,"prophetnet"),NFt.forEach(t),KSo=r(ISe," \u2014 "),PO=n(ISe,"A",{href:!0});var IFt=s(PO);ZSo=r(IFt,"ProphetNetForCausalLM"),IFt.forEach(t),eRo=r(ISe," (ProphetNet model)"),ISe.forEach(t),oRo=i(Q),T1=n(Q,"LI",{});var qSe=s(T1);bhe=n(qSe,"STRONG",{});var qFt=s(bhe);rRo=r(qFt,"qdqbert"),qFt.forEach(t),tRo=r(qSe," \u2014 "),BO=n(qSe,"A",{href:!0});var jFt=s(BO);aRo=r(jFt,"QDQBertLMHeadModel"),jFt.forEach(t),nRo=r(qSe," (QDQBert model)"),qSe.forEach(t),sRo=i(Q),M1=n(Q,"LI",{});var jSe=s(M1);vhe=n(jSe,"STRONG",{});var DFt=s(vhe);lRo=r(DFt,"reformer"),DFt.forEach(t),iRo=r(jSe," \u2014 "),NO=n(jSe,"A",{href:!0});var GFt=s(NO);dRo=r(GFt,"ReformerModelWithLMHead"),GFt.forEach(t),cRo=r(jSe," (Reformer model)"),jSe.forEach(t),fRo=i(Q),E1=n(Q,"LI",{});var DSe=s(E1);Fhe=n(DSe,"STRONG",{});var OFt=s(Fhe);mRo=r(OFt,"rembert"),OFt.forEach(t),gRo=r(DSe," \u2014 "),IO=n(DSe,"A",{href:!0});var VFt=s(IO);hRo=r(VFt,"RemBertForCausalLM"),VFt.forEach(t),pRo=r(DSe," (RemBERT model)"),DSe.forEach(t),_Ro=i(Q),C1=n(Q,"LI",{});var GSe=s(C1);The=n(GSe,"STRONG",{});var XFt=s(The);uRo=r(XFt,"roberta"),XFt.forEach(t),bRo=r(GSe," \u2014 "),qO=n(GSe,"A",{href:!0});var zFt=s(qO);vRo=r(zFt,"RobertaForCausalLM"),zFt.forEach(t),FRo=r(GSe," (RoBERTa model)"),GSe.forEach(t),TRo=i(Q),w1=n(Q,"LI",{});var OSe=s(w1);Mhe=n(OSe,"STRONG",{});var QFt=s(Mhe);MRo=r(QFt,"roformer"),QFt.forEach(t),ERo=r(OSe," \u2014 "),jO=n(OSe,"A",{href:!0});var WFt=s(jO);CRo=r(WFt,"RoFormerForCausalLM"),WFt.forEach(t),wRo=r(OSe," (RoFormer model)"),OSe.forEach(t),ARo=i(Q),A1=n(Q,"LI",{});var VSe=s(A1);Ehe=n(VSe,"STRONG",{});var HFt=s(Ehe);LRo=r(HFt,"speech_to_text_2"),HFt.forEach(t),yRo=r(VSe," \u2014 "),DO=n(VSe,"A",{href:!0});var UFt=s(DO);xRo=r(UFt,"Speech2Text2ForCausalLM"),UFt.forEach(t),$Ro=r(VSe," (Speech2Text2 model)"),VSe.forEach(t),kRo=i(Q),L1=n(Q,"LI",{});var XSe=s(L1);Che=n(XSe,"STRONG",{});var JFt=s(Che);SRo=r(JFt,"transfo-xl"),JFt.forEach(t),RRo=r(XSe," \u2014 "),GO=n(XSe,"A",{href:!0});var YFt=s(GO);PRo=r(YFt,"TransfoXLLMHeadModel"),YFt.forEach(t),BRo=r(XSe," (Transformer-XL model)"),XSe.forEach(t),NRo=i(Q),y1=n(Q,"LI",{});var zSe=s(y1);whe=n(zSe,"STRONG",{});var KFt=s(whe);IRo=r(KFt,"trocr"),KFt.forEach(t),qRo=r(zSe," \u2014 "),OO=n(zSe,"A",{href:!0});var ZFt=s(OO);jRo=r(ZFt,"TrOCRForCausalLM"),ZFt.forEach(t),DRo=r(zSe," (TrOCR model)"),zSe.forEach(t),GRo=i(Q),x1=n(Q,"LI",{});var QSe=s(x1);Ahe=n(QSe,"STRONG",{});var e6t=s(Ahe);ORo=r(e6t,"xglm"),e6t.forEach(t),VRo=r(QSe," \u2014 "),VO=n(QSe,"A",{href:!0});var o6t=s(VO);XRo=r(o6t,"XGLMForCausalLM"),o6t.forEach(t),zRo=r(QSe," (XGLM model)"),QSe.forEach(t),QRo=i(Q),$1=n(Q,"LI",{});var WSe=s($1);Lhe=n(WSe,"STRONG",{});var r6t=s(Lhe);WRo=r(r6t,"xlm"),r6t.forEach(t),HRo=r(WSe," \u2014 "),XO=n(WSe,"A",{href:!0});var t6t=s(XO);URo=r(t6t,"XLMWithLMHeadModel"),t6t.forEach(t),JRo=r(WSe," (XLM model)"),WSe.forEach(t),YRo=i(Q),k1=n(Q,"LI",{});var HSe=s(k1);yhe=n(HSe,"STRONG",{});var a6t=s(yhe);KRo=r(a6t,"xlm-prophetnet"),a6t.forEach(t),ZRo=r(HSe," \u2014 "),zO=n(HSe,"A",{href:!0});var n6t=s(zO);ePo=r(n6t,"XLMProphetNetForCausalLM"),n6t.forEach(t),oPo=r(HSe," (XLM-ProphetNet model)"),HSe.forEach(t),rPo=i(Q),S1=n(Q,"LI",{});var USe=s(S1);xhe=n(USe,"STRONG",{});var s6t=s(xhe);tPo=r(s6t,"xlm-roberta"),s6t.forEach(t),aPo=r(USe," \u2014 "),QO=n(USe,"A",{href:!0});var l6t=s(QO);nPo=r(l6t,"XLMRobertaForCausalLM"),l6t.forEach(t),sPo=r(USe," (XLM-RoBERTa model)"),USe.forEach(t),lPo=i(Q),R1=n(Q,"LI",{});var JSe=s(R1);$he=n(JSe,"STRONG",{});var i6t=s($he);iPo=r(i6t,"xlm-roberta-xl"),i6t.forEach(t),dPo=r(JSe," \u2014 "),WO=n(JSe,"A",{href:!0});var d6t=s(WO);cPo=r(d6t,"XLMRobertaXLForCausalLM"),d6t.forEach(t),fPo=r(JSe," (XLM-RoBERTa-XL model)"),JSe.forEach(t),mPo=i(Q),P1=n(Q,"LI",{});var YSe=s(P1);khe=n(YSe,"STRONG",{});var c6t=s(khe);gPo=r(c6t,"xlnet"),c6t.forEach(t),hPo=r(YSe," \u2014 "),HO=n(YSe,"A",{href:!0});var f6t=s(HO);pPo=r(f6t,"XLNetLMHeadModel"),f6t.forEach(t),_Po=r(YSe," (XLNet model)"),YSe.forEach(t),Q.forEach(t),uPo=i(da),B1=n(da,"P",{});var KSe=s(B1);bPo=r(KSe,"The model is set in evaluation mode by default using "),She=n(KSe,"CODE",{});var m6t=s(She);vPo=r(m6t,"model.eval()"),m6t.forEach(t),FPo=r(KSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=n(KSe,"CODE",{});var g6t=s(Rhe);TPo=r(g6t,"model.train()"),g6t.forEach(t),KSe.forEach(t),MPo=i(da),T(N1.$$.fragment,da),da.forEach(t),nl.forEach(t),zXe=i(f),Yi=n(f,"H2",{class:!0});var YQe=s(Yi);I1=n(YQe,"A",{id:!0,class:!0,href:!0});var h6t=s(I1);Phe=n(h6t,"SPAN",{});var p6t=s(Phe);T(KL.$$.fragment,p6t),p6t.forEach(t),h6t.forEach(t),EPo=i(YQe),Bhe=n(YQe,"SPAN",{});var _6t=s(Bhe);CPo=r(_6t,"AutoModelForMaskedLM"),_6t.forEach(t),YQe.forEach(t),QXe=i(f),Ro=n(f,"DIV",{class:!0});var sl=s(Ro);T(ZL.$$.fragment,sl),wPo=i(sl),Ki=n(sl,"P",{});var Yre=s(Ki);APo=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UO=n(Yre,"A",{href:!0});var u6t=s(UO);LPo=r(u6t,"from_pretrained()"),u6t.forEach(t),yPo=r(Yre," class method or the "),JO=n(Yre,"A",{href:!0});var b6t=s(JO);xPo=r(b6t,"from_config()"),b6t.forEach(t),$Po=r(Yre,` class
method.`),Yre.forEach(t),kPo=i(sl),ey=n(sl,"P",{});var KQe=s(ey);SPo=r(KQe,"This class cannot be instantiated directly using "),Nhe=n(KQe,"CODE",{});var v6t=s(Nhe);RPo=r(v6t,"__init__()"),v6t.forEach(t),PPo=r(KQe," (throws an error)."),KQe.forEach(t),BPo=i(sl),ft=n(sl,"DIV",{class:!0});var Tw=s(ft);T(oy.$$.fragment,Tw),NPo=i(Tw),Ihe=n(Tw,"P",{});var F6t=s(Ihe);IPo=r(F6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),F6t.forEach(t),qPo=i(Tw),Zi=n(Tw,"P",{});var Kre=s(Zi);jPo=r(Kre,`Note:
Loading a model from its configuration file does `),qhe=n(Kre,"STRONG",{});var T6t=s(qhe);DPo=r(T6t,"not"),T6t.forEach(t),GPo=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=n(Kre,"A",{href:!0});var M6t=s(YO);OPo=r(M6t,"from_pretrained()"),M6t.forEach(t),VPo=r(Kre," to load the model weights."),Kre.forEach(t),XPo=i(Tw),T(q1.$$.fragment,Tw),Tw.forEach(t),zPo=i(sl),eo=n(sl,"DIV",{class:!0});var ca=s(eo);T(ry.$$.fragment,ca),QPo=i(ca),jhe=n(ca,"P",{});var E6t=s(jhe);WPo=r(E6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),E6t.forEach(t),HPo=i(ca),ja=n(ca,"P",{});var Mw=s(ja);UPo=r(Mw,"The model class to instantiate is selected based on the "),Dhe=n(Mw,"CODE",{});var C6t=s(Dhe);JPo=r(C6t,"model_type"),C6t.forEach(t),YPo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(Mw,"CODE",{});var w6t=s(Ghe);KPo=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),ZPo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=n(Mw,"CODE",{});var A6t=s(Ohe);eBo=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),oBo=r(Mw,":"),Mw.forEach(t),rBo=i(ca),W=n(ca,"UL",{});var H=s(W);j1=n(H,"LI",{});var ZSe=s(j1);Vhe=n(ZSe,"STRONG",{});var L6t=s(Vhe);tBo=r(L6t,"albert"),L6t.forEach(t),aBo=r(ZSe," \u2014 "),KO=n(ZSe,"A",{href:!0});var y6t=s(KO);nBo=r(y6t,"AlbertForMaskedLM"),y6t.forEach(t),sBo=r(ZSe," (ALBERT model)"),ZSe.forEach(t),lBo=i(H),D1=n(H,"LI",{});var eRe=s(D1);Xhe=n(eRe,"STRONG",{});var x6t=s(Xhe);iBo=r(x6t,"bart"),x6t.forEach(t),dBo=r(eRe," \u2014 "),ZO=n(eRe,"A",{href:!0});var $6t=s(ZO);cBo=r($6t,"BartForConditionalGeneration"),$6t.forEach(t),fBo=r(eRe," (BART model)"),eRe.forEach(t),mBo=i(H),G1=n(H,"LI",{});var oRe=s(G1);zhe=n(oRe,"STRONG",{});var k6t=s(zhe);gBo=r(k6t,"bert"),k6t.forEach(t),hBo=r(oRe," \u2014 "),eV=n(oRe,"A",{href:!0});var S6t=s(eV);pBo=r(S6t,"BertForMaskedLM"),S6t.forEach(t),_Bo=r(oRe," (BERT model)"),oRe.forEach(t),uBo=i(H),O1=n(H,"LI",{});var rRe=s(O1);Qhe=n(rRe,"STRONG",{});var R6t=s(Qhe);bBo=r(R6t,"big_bird"),R6t.forEach(t),vBo=r(rRe," \u2014 "),oV=n(rRe,"A",{href:!0});var P6t=s(oV);FBo=r(P6t,"BigBirdForMaskedLM"),P6t.forEach(t),TBo=r(rRe," (BigBird model)"),rRe.forEach(t),MBo=i(H),V1=n(H,"LI",{});var tRe=s(V1);Whe=n(tRe,"STRONG",{});var B6t=s(Whe);EBo=r(B6t,"camembert"),B6t.forEach(t),CBo=r(tRe," \u2014 "),rV=n(tRe,"A",{href:!0});var N6t=s(rV);wBo=r(N6t,"CamembertForMaskedLM"),N6t.forEach(t),ABo=r(tRe," (CamemBERT model)"),tRe.forEach(t),LBo=i(H),X1=n(H,"LI",{});var aRe=s(X1);Hhe=n(aRe,"STRONG",{});var I6t=s(Hhe);yBo=r(I6t,"convbert"),I6t.forEach(t),xBo=r(aRe," \u2014 "),tV=n(aRe,"A",{href:!0});var q6t=s(tV);$Bo=r(q6t,"ConvBertForMaskedLM"),q6t.forEach(t),kBo=r(aRe," (ConvBERT model)"),aRe.forEach(t),SBo=i(H),z1=n(H,"LI",{});var nRe=s(z1);Uhe=n(nRe,"STRONG",{});var j6t=s(Uhe);RBo=r(j6t,"data2vec-text"),j6t.forEach(t),PBo=r(nRe," \u2014 "),aV=n(nRe,"A",{href:!0});var D6t=s(aV);BBo=r(D6t,"Data2VecTextForMaskedLM"),D6t.forEach(t),NBo=r(nRe," (Data2VecText model)"),nRe.forEach(t),IBo=i(H),Q1=n(H,"LI",{});var sRe=s(Q1);Jhe=n(sRe,"STRONG",{});var G6t=s(Jhe);qBo=r(G6t,"deberta"),G6t.forEach(t),jBo=r(sRe," \u2014 "),nV=n(sRe,"A",{href:!0});var O6t=s(nV);DBo=r(O6t,"DebertaForMaskedLM"),O6t.forEach(t),GBo=r(sRe," (DeBERTa model)"),sRe.forEach(t),OBo=i(H),W1=n(H,"LI",{});var lRe=s(W1);Yhe=n(lRe,"STRONG",{});var V6t=s(Yhe);VBo=r(V6t,"deberta-v2"),V6t.forEach(t),XBo=r(lRe," \u2014 "),sV=n(lRe,"A",{href:!0});var X6t=s(sV);zBo=r(X6t,"DebertaV2ForMaskedLM"),X6t.forEach(t),QBo=r(lRe," (DeBERTa-v2 model)"),lRe.forEach(t),WBo=i(H),H1=n(H,"LI",{});var iRe=s(H1);Khe=n(iRe,"STRONG",{});var z6t=s(Khe);HBo=r(z6t,"distilbert"),z6t.forEach(t),UBo=r(iRe," \u2014 "),lV=n(iRe,"A",{href:!0});var Q6t=s(lV);JBo=r(Q6t,"DistilBertForMaskedLM"),Q6t.forEach(t),YBo=r(iRe," (DistilBERT model)"),iRe.forEach(t),KBo=i(H),U1=n(H,"LI",{});var dRe=s(U1);Zhe=n(dRe,"STRONG",{});var W6t=s(Zhe);ZBo=r(W6t,"electra"),W6t.forEach(t),eNo=r(dRe," \u2014 "),iV=n(dRe,"A",{href:!0});var H6t=s(iV);oNo=r(H6t,"ElectraForMaskedLM"),H6t.forEach(t),rNo=r(dRe," (ELECTRA model)"),dRe.forEach(t),tNo=i(H),J1=n(H,"LI",{});var cRe=s(J1);epe=n(cRe,"STRONG",{});var U6t=s(epe);aNo=r(U6t,"flaubert"),U6t.forEach(t),nNo=r(cRe," \u2014 "),dV=n(cRe,"A",{href:!0});var J6t=s(dV);sNo=r(J6t,"FlaubertWithLMHeadModel"),J6t.forEach(t),lNo=r(cRe," (FlauBERT model)"),cRe.forEach(t),iNo=i(H),Y1=n(H,"LI",{});var fRe=s(Y1);ope=n(fRe,"STRONG",{});var Y6t=s(ope);dNo=r(Y6t,"fnet"),Y6t.forEach(t),cNo=r(fRe," \u2014 "),cV=n(fRe,"A",{href:!0});var K6t=s(cV);fNo=r(K6t,"FNetForMaskedLM"),K6t.forEach(t),mNo=r(fRe," (FNet model)"),fRe.forEach(t),gNo=i(H),K1=n(H,"LI",{});var mRe=s(K1);rpe=n(mRe,"STRONG",{});var Z6t=s(rpe);hNo=r(Z6t,"funnel"),Z6t.forEach(t),pNo=r(mRe," \u2014 "),fV=n(mRe,"A",{href:!0});var eTt=s(fV);_No=r(eTt,"FunnelForMaskedLM"),eTt.forEach(t),uNo=r(mRe," (Funnel Transformer model)"),mRe.forEach(t),bNo=i(H),Z1=n(H,"LI",{});var gRe=s(Z1);tpe=n(gRe,"STRONG",{});var oTt=s(tpe);vNo=r(oTt,"ibert"),oTt.forEach(t),FNo=r(gRe," \u2014 "),mV=n(gRe,"A",{href:!0});var rTt=s(mV);TNo=r(rTt,"IBertForMaskedLM"),rTt.forEach(t),MNo=r(gRe," (I-BERT model)"),gRe.forEach(t),ENo=i(H),eb=n(H,"LI",{});var hRe=s(eb);ape=n(hRe,"STRONG",{});var tTt=s(ape);CNo=r(tTt,"layoutlm"),tTt.forEach(t),wNo=r(hRe," \u2014 "),gV=n(hRe,"A",{href:!0});var aTt=s(gV);ANo=r(aTt,"LayoutLMForMaskedLM"),aTt.forEach(t),LNo=r(hRe," (LayoutLM model)"),hRe.forEach(t),yNo=i(H),ob=n(H,"LI",{});var pRe=s(ob);npe=n(pRe,"STRONG",{});var nTt=s(npe);xNo=r(nTt,"longformer"),nTt.forEach(t),$No=r(pRe," \u2014 "),hV=n(pRe,"A",{href:!0});var sTt=s(hV);kNo=r(sTt,"LongformerForMaskedLM"),sTt.forEach(t),SNo=r(pRe," (Longformer model)"),pRe.forEach(t),RNo=i(H),rb=n(H,"LI",{});var _Re=s(rb);spe=n(_Re,"STRONG",{});var lTt=s(spe);PNo=r(lTt,"luke"),lTt.forEach(t),BNo=r(_Re," \u2014 "),pV=n(_Re,"A",{href:!0});var iTt=s(pV);NNo=r(iTt,"LukeForMaskedLM"),iTt.forEach(t),INo=r(_Re," (LUKE model)"),_Re.forEach(t),qNo=i(H),tb=n(H,"LI",{});var uRe=s(tb);lpe=n(uRe,"STRONG",{});var dTt=s(lpe);jNo=r(dTt,"mbart"),dTt.forEach(t),DNo=r(uRe," \u2014 "),_V=n(uRe,"A",{href:!0});var cTt=s(_V);GNo=r(cTt,"MBartForConditionalGeneration"),cTt.forEach(t),ONo=r(uRe," (mBART model)"),uRe.forEach(t),VNo=i(H),ab=n(H,"LI",{});var bRe=s(ab);ipe=n(bRe,"STRONG",{});var fTt=s(ipe);XNo=r(fTt,"megatron-bert"),fTt.forEach(t),zNo=r(bRe," \u2014 "),uV=n(bRe,"A",{href:!0});var mTt=s(uV);QNo=r(mTt,"MegatronBertForMaskedLM"),mTt.forEach(t),WNo=r(bRe," (Megatron-BERT model)"),bRe.forEach(t),HNo=i(H),nb=n(H,"LI",{});var vRe=s(nb);dpe=n(vRe,"STRONG",{});var gTt=s(dpe);UNo=r(gTt,"mobilebert"),gTt.forEach(t),JNo=r(vRe," \u2014 "),bV=n(vRe,"A",{href:!0});var hTt=s(bV);YNo=r(hTt,"MobileBertForMaskedLM"),hTt.forEach(t),KNo=r(vRe," (MobileBERT model)"),vRe.forEach(t),ZNo=i(H),sb=n(H,"LI",{});var FRe=s(sb);cpe=n(FRe,"STRONG",{});var pTt=s(cpe);eIo=r(pTt,"mpnet"),pTt.forEach(t),oIo=r(FRe," \u2014 "),vV=n(FRe,"A",{href:!0});var _Tt=s(vV);rIo=r(_Tt,"MPNetForMaskedLM"),_Tt.forEach(t),tIo=r(FRe," (MPNet model)"),FRe.forEach(t),aIo=i(H),lb=n(H,"LI",{});var TRe=s(lb);fpe=n(TRe,"STRONG",{});var uTt=s(fpe);nIo=r(uTt,"mvp"),uTt.forEach(t),sIo=r(TRe," \u2014 "),FV=n(TRe,"A",{href:!0});var bTt=s(FV);lIo=r(bTt,"MvpForConditionalGeneration"),bTt.forEach(t),iIo=r(TRe," (MVP model)"),TRe.forEach(t),dIo=i(H),ib=n(H,"LI",{});var MRe=s(ib);mpe=n(MRe,"STRONG",{});var vTt=s(mpe);cIo=r(vTt,"nezha"),vTt.forEach(t),fIo=r(MRe," \u2014 "),TV=n(MRe,"A",{href:!0});var FTt=s(TV);mIo=r(FTt,"NezhaForMaskedLM"),FTt.forEach(t),gIo=r(MRe," (Nezha model)"),MRe.forEach(t),hIo=i(H),db=n(H,"LI",{});var ERe=s(db);gpe=n(ERe,"STRONG",{});var TTt=s(gpe);pIo=r(TTt,"nystromformer"),TTt.forEach(t),_Io=r(ERe," \u2014 "),MV=n(ERe,"A",{href:!0});var MTt=s(MV);uIo=r(MTt,"NystromformerForMaskedLM"),MTt.forEach(t),bIo=r(ERe," (Nystr\xF6mformer model)"),ERe.forEach(t),vIo=i(H),cb=n(H,"LI",{});var CRe=s(cb);hpe=n(CRe,"STRONG",{});var ETt=s(hpe);FIo=r(ETt,"perceiver"),ETt.forEach(t),TIo=r(CRe," \u2014 "),EV=n(CRe,"A",{href:!0});var CTt=s(EV);MIo=r(CTt,"PerceiverForMaskedLM"),CTt.forEach(t),EIo=r(CRe," (Perceiver model)"),CRe.forEach(t),CIo=i(H),fb=n(H,"LI",{});var wRe=s(fb);ppe=n(wRe,"STRONG",{});var wTt=s(ppe);wIo=r(wTt,"qdqbert"),wTt.forEach(t),AIo=r(wRe," \u2014 "),CV=n(wRe,"A",{href:!0});var ATt=s(CV);LIo=r(ATt,"QDQBertForMaskedLM"),ATt.forEach(t),yIo=r(wRe," (QDQBert model)"),wRe.forEach(t),xIo=i(H),mb=n(H,"LI",{});var ARe=s(mb);_pe=n(ARe,"STRONG",{});var LTt=s(_pe);$Io=r(LTt,"reformer"),LTt.forEach(t),kIo=r(ARe," \u2014 "),wV=n(ARe,"A",{href:!0});var yTt=s(wV);SIo=r(yTt,"ReformerForMaskedLM"),yTt.forEach(t),RIo=r(ARe," (Reformer model)"),ARe.forEach(t),PIo=i(H),gb=n(H,"LI",{});var LRe=s(gb);upe=n(LRe,"STRONG",{});var xTt=s(upe);BIo=r(xTt,"rembert"),xTt.forEach(t),NIo=r(LRe," \u2014 "),AV=n(LRe,"A",{href:!0});var $Tt=s(AV);IIo=r($Tt,"RemBertForMaskedLM"),$Tt.forEach(t),qIo=r(LRe," (RemBERT model)"),LRe.forEach(t),jIo=i(H),hb=n(H,"LI",{});var yRe=s(hb);bpe=n(yRe,"STRONG",{});var kTt=s(bpe);DIo=r(kTt,"roberta"),kTt.forEach(t),GIo=r(yRe," \u2014 "),LV=n(yRe,"A",{href:!0});var STt=s(LV);OIo=r(STt,"RobertaForMaskedLM"),STt.forEach(t),VIo=r(yRe," (RoBERTa model)"),yRe.forEach(t),XIo=i(H),pb=n(H,"LI",{});var xRe=s(pb);vpe=n(xRe,"STRONG",{});var RTt=s(vpe);zIo=r(RTt,"roformer"),RTt.forEach(t),QIo=r(xRe," \u2014 "),yV=n(xRe,"A",{href:!0});var PTt=s(yV);WIo=r(PTt,"RoFormerForMaskedLM"),PTt.forEach(t),HIo=r(xRe," (RoFormer model)"),xRe.forEach(t),UIo=i(H),_b=n(H,"LI",{});var $Re=s(_b);Fpe=n($Re,"STRONG",{});var BTt=s(Fpe);JIo=r(BTt,"squeezebert"),BTt.forEach(t),YIo=r($Re," \u2014 "),xV=n($Re,"A",{href:!0});var NTt=s(xV);KIo=r(NTt,"SqueezeBertForMaskedLM"),NTt.forEach(t),ZIo=r($Re," (SqueezeBERT model)"),$Re.forEach(t),eqo=i(H),ub=n(H,"LI",{});var kRe=s(ub);Tpe=n(kRe,"STRONG",{});var ITt=s(Tpe);oqo=r(ITt,"tapas"),ITt.forEach(t),rqo=r(kRe," \u2014 "),$V=n(kRe,"A",{href:!0});var qTt=s($V);tqo=r(qTt,"TapasForMaskedLM"),qTt.forEach(t),aqo=r(kRe," (TAPAS model)"),kRe.forEach(t),nqo=i(H),bb=n(H,"LI",{});var SRe=s(bb);Mpe=n(SRe,"STRONG",{});var jTt=s(Mpe);sqo=r(jTt,"wav2vec2"),jTt.forEach(t),lqo=r(SRe," \u2014 "),Epe=n(SRe,"CODE",{});var DTt=s(Epe);iqo=r(DTt,"Wav2Vec2ForMaskedLM"),DTt.forEach(t),dqo=r(SRe," (Wav2Vec2 model)"),SRe.forEach(t),cqo=i(H),vb=n(H,"LI",{});var RRe=s(vb);Cpe=n(RRe,"STRONG",{});var GTt=s(Cpe);fqo=r(GTt,"xlm"),GTt.forEach(t),mqo=r(RRe," \u2014 "),kV=n(RRe,"A",{href:!0});var OTt=s(kV);gqo=r(OTt,"XLMWithLMHeadModel"),OTt.forEach(t),hqo=r(RRe," (XLM model)"),RRe.forEach(t),pqo=i(H),Fb=n(H,"LI",{});var PRe=s(Fb);wpe=n(PRe,"STRONG",{});var VTt=s(wpe);_qo=r(VTt,"xlm-roberta"),VTt.forEach(t),uqo=r(PRe," \u2014 "),SV=n(PRe,"A",{href:!0});var XTt=s(SV);bqo=r(XTt,"XLMRobertaForMaskedLM"),XTt.forEach(t),vqo=r(PRe," (XLM-RoBERTa model)"),PRe.forEach(t),Fqo=i(H),Tb=n(H,"LI",{});var BRe=s(Tb);Ape=n(BRe,"STRONG",{});var zTt=s(Ape);Tqo=r(zTt,"xlm-roberta-xl"),zTt.forEach(t),Mqo=r(BRe," \u2014 "),RV=n(BRe,"A",{href:!0});var QTt=s(RV);Eqo=r(QTt,"XLMRobertaXLForMaskedLM"),QTt.forEach(t),Cqo=r(BRe," (XLM-RoBERTa-XL model)"),BRe.forEach(t),wqo=i(H),Mb=n(H,"LI",{});var NRe=s(Mb);Lpe=n(NRe,"STRONG",{});var WTt=s(Lpe);Aqo=r(WTt,"yoso"),WTt.forEach(t),Lqo=r(NRe," \u2014 "),PV=n(NRe,"A",{href:!0});var HTt=s(PV);yqo=r(HTt,"YosoForMaskedLM"),HTt.forEach(t),xqo=r(NRe," (YOSO model)"),NRe.forEach(t),H.forEach(t),$qo=i(ca),Eb=n(ca,"P",{});var IRe=s(Eb);kqo=r(IRe,"The model is set in evaluation mode by default using "),ype=n(IRe,"CODE",{});var UTt=s(ype);Sqo=r(UTt,"model.eval()"),UTt.forEach(t),Rqo=r(IRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=n(IRe,"CODE",{});var JTt=s(xpe);Pqo=r(JTt,"model.train()"),JTt.forEach(t),IRe.forEach(t),Bqo=i(ca),T(Cb.$$.fragment,ca),ca.forEach(t),sl.forEach(t),WXe=i(f),ed=n(f,"H2",{class:!0});var ZQe=s(ed);wb=n(ZQe,"A",{id:!0,class:!0,href:!0});var YTt=s(wb);$pe=n(YTt,"SPAN",{});var KTt=s($pe);T(ty.$$.fragment,KTt),KTt.forEach(t),YTt.forEach(t),Nqo=i(ZQe),kpe=n(ZQe,"SPAN",{});var ZTt=s(kpe);Iqo=r(ZTt,"AutoModelForSeq2SeqLM"),ZTt.forEach(t),ZQe.forEach(t),HXe=i(f),Po=n(f,"DIV",{class:!0});var ll=s(Po);T(ay.$$.fragment,ll),qqo=i(ll),od=n(ll,"P",{});var Zre=s(od);jqo=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BV=n(Zre,"A",{href:!0});var e7t=s(BV);Dqo=r(e7t,"from_pretrained()"),e7t.forEach(t),Gqo=r(Zre," class method or the "),NV=n(Zre,"A",{href:!0});var o7t=s(NV);Oqo=r(o7t,"from_config()"),o7t.forEach(t),Vqo=r(Zre,` class
method.`),Zre.forEach(t),Xqo=i(ll),ny=n(ll,"P",{});var eWe=s(ny);zqo=r(eWe,"This class cannot be instantiated directly using "),Spe=n(eWe,"CODE",{});var r7t=s(Spe);Qqo=r(r7t,"__init__()"),r7t.forEach(t),Wqo=r(eWe," (throws an error)."),eWe.forEach(t),Hqo=i(ll),mt=n(ll,"DIV",{class:!0});var Ew=s(mt);T(sy.$$.fragment,Ew),Uqo=i(Ew),Rpe=n(Ew,"P",{});var t7t=s(Rpe);Jqo=r(t7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),t7t.forEach(t),Yqo=i(Ew),rd=n(Ew,"P",{});var ete=s(rd);Kqo=r(ete,`Note:
Loading a model from its configuration file does `),Ppe=n(ete,"STRONG",{});var a7t=s(Ppe);Zqo=r(a7t,"not"),a7t.forEach(t),ejo=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(ete,"A",{href:!0});var n7t=s(IV);ojo=r(n7t,"from_pretrained()"),n7t.forEach(t),rjo=r(ete," to load the model weights."),ete.forEach(t),tjo=i(Ew),T(Ab.$$.fragment,Ew),Ew.forEach(t),ajo=i(ll),oo=n(ll,"DIV",{class:!0});var fa=s(oo);T(ly.$$.fragment,fa),njo=i(fa),Bpe=n(fa,"P",{});var s7t=s(Bpe);sjo=r(s7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s7t.forEach(t),ljo=i(fa),Da=n(fa,"P",{});var Cw=s(Da);ijo=r(Cw,"The model class to instantiate is selected based on the "),Npe=n(Cw,"CODE",{});var l7t=s(Npe);djo=r(l7t,"model_type"),l7t.forEach(t),cjo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Ipe=n(Cw,"CODE",{});var i7t=s(Ipe);fjo=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),mjo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=n(Cw,"CODE",{});var d7t=s(qpe);gjo=r(d7t,"pretrained_model_name_or_path"),d7t.forEach(t),hjo=r(Cw,":"),Cw.forEach(t),pjo=i(fa),fe=n(fa,"UL",{});var _e=s(fe);Lb=n(_e,"LI",{});var qRe=s(Lb);jpe=n(qRe,"STRONG",{});var c7t=s(jpe);_jo=r(c7t,"bart"),c7t.forEach(t),ujo=r(qRe," \u2014 "),qV=n(qRe,"A",{href:!0});var f7t=s(qV);bjo=r(f7t,"BartForConditionalGeneration"),f7t.forEach(t),vjo=r(qRe," (BART model)"),qRe.forEach(t),Fjo=i(_e),yb=n(_e,"LI",{});var jRe=s(yb);Dpe=n(jRe,"STRONG",{});var m7t=s(Dpe);Tjo=r(m7t,"bigbird_pegasus"),m7t.forEach(t),Mjo=r(jRe," \u2014 "),jV=n(jRe,"A",{href:!0});var g7t=s(jV);Ejo=r(g7t,"BigBirdPegasusForConditionalGeneration"),g7t.forEach(t),Cjo=r(jRe," (BigBird-Pegasus model)"),jRe.forEach(t),wjo=i(_e),xb=n(_e,"LI",{});var DRe=s(xb);Gpe=n(DRe,"STRONG",{});var h7t=s(Gpe);Ajo=r(h7t,"blenderbot"),h7t.forEach(t),Ljo=r(DRe," \u2014 "),DV=n(DRe,"A",{href:!0});var p7t=s(DV);yjo=r(p7t,"BlenderbotForConditionalGeneration"),p7t.forEach(t),xjo=r(DRe," (Blenderbot model)"),DRe.forEach(t),$jo=i(_e),$b=n(_e,"LI",{});var GRe=s($b);Ope=n(GRe,"STRONG",{});var _7t=s(Ope);kjo=r(_7t,"blenderbot-small"),_7t.forEach(t),Sjo=r(GRe," \u2014 "),GV=n(GRe,"A",{href:!0});var u7t=s(GV);Rjo=r(u7t,"BlenderbotSmallForConditionalGeneration"),u7t.forEach(t),Pjo=r(GRe," (BlenderbotSmall model)"),GRe.forEach(t),Bjo=i(_e),kb=n(_e,"LI",{});var ORe=s(kb);Vpe=n(ORe,"STRONG",{});var b7t=s(Vpe);Njo=r(b7t,"encoder-decoder"),b7t.forEach(t),Ijo=r(ORe," \u2014 "),OV=n(ORe,"A",{href:!0});var v7t=s(OV);qjo=r(v7t,"EncoderDecoderModel"),v7t.forEach(t),jjo=r(ORe," (Encoder decoder model)"),ORe.forEach(t),Djo=i(_e),Sb=n(_e,"LI",{});var VRe=s(Sb);Xpe=n(VRe,"STRONG",{});var F7t=s(Xpe);Gjo=r(F7t,"fsmt"),F7t.forEach(t),Ojo=r(VRe," \u2014 "),VV=n(VRe,"A",{href:!0});var T7t=s(VV);Vjo=r(T7t,"FSMTForConditionalGeneration"),T7t.forEach(t),Xjo=r(VRe," (FairSeq Machine-Translation model)"),VRe.forEach(t),zjo=i(_e),Rb=n(_e,"LI",{});var XRe=s(Rb);zpe=n(XRe,"STRONG",{});var M7t=s(zpe);Qjo=r(M7t,"led"),M7t.forEach(t),Wjo=r(XRe," \u2014 "),XV=n(XRe,"A",{href:!0});var E7t=s(XV);Hjo=r(E7t,"LEDForConditionalGeneration"),E7t.forEach(t),Ujo=r(XRe," (LED model)"),XRe.forEach(t),Jjo=i(_e),Pb=n(_e,"LI",{});var zRe=s(Pb);Qpe=n(zRe,"STRONG",{});var C7t=s(Qpe);Yjo=r(C7t,"longt5"),C7t.forEach(t),Kjo=r(zRe," \u2014 "),zV=n(zRe,"A",{href:!0});var w7t=s(zV);Zjo=r(w7t,"LongT5ForConditionalGeneration"),w7t.forEach(t),eDo=r(zRe," (LongT5 model)"),zRe.forEach(t),oDo=i(_e),Bb=n(_e,"LI",{});var QRe=s(Bb);Wpe=n(QRe,"STRONG",{});var A7t=s(Wpe);rDo=r(A7t,"m2m_100"),A7t.forEach(t),tDo=r(QRe," \u2014 "),QV=n(QRe,"A",{href:!0});var L7t=s(QV);aDo=r(L7t,"M2M100ForConditionalGeneration"),L7t.forEach(t),nDo=r(QRe," (M2M100 model)"),QRe.forEach(t),sDo=i(_e),Nb=n(_e,"LI",{});var WRe=s(Nb);Hpe=n(WRe,"STRONG",{});var y7t=s(Hpe);lDo=r(y7t,"marian"),y7t.forEach(t),iDo=r(WRe," \u2014 "),WV=n(WRe,"A",{href:!0});var x7t=s(WV);dDo=r(x7t,"MarianMTModel"),x7t.forEach(t),cDo=r(WRe," (Marian model)"),WRe.forEach(t),fDo=i(_e),Ib=n(_e,"LI",{});var HRe=s(Ib);Upe=n(HRe,"STRONG",{});var $7t=s(Upe);mDo=r($7t,"mbart"),$7t.forEach(t),gDo=r(HRe," \u2014 "),HV=n(HRe,"A",{href:!0});var k7t=s(HV);hDo=r(k7t,"MBartForConditionalGeneration"),k7t.forEach(t),pDo=r(HRe," (mBART model)"),HRe.forEach(t),_Do=i(_e),qb=n(_e,"LI",{});var URe=s(qb);Jpe=n(URe,"STRONG",{});var S7t=s(Jpe);uDo=r(S7t,"mt5"),S7t.forEach(t),bDo=r(URe," \u2014 "),UV=n(URe,"A",{href:!0});var R7t=s(UV);vDo=r(R7t,"MT5ForConditionalGeneration"),R7t.forEach(t),FDo=r(URe," (MT5 model)"),URe.forEach(t),TDo=i(_e),jb=n(_e,"LI",{});var JRe=s(jb);Ype=n(JRe,"STRONG",{});var P7t=s(Ype);MDo=r(P7t,"mvp"),P7t.forEach(t),EDo=r(JRe," \u2014 "),JV=n(JRe,"A",{href:!0});var B7t=s(JV);CDo=r(B7t,"MvpForConditionalGeneration"),B7t.forEach(t),wDo=r(JRe," (MVP model)"),JRe.forEach(t),ADo=i(_e),Db=n(_e,"LI",{});var YRe=s(Db);Kpe=n(YRe,"STRONG",{});var N7t=s(Kpe);LDo=r(N7t,"nllb"),N7t.forEach(t),yDo=r(YRe," \u2014 "),YV=n(YRe,"A",{href:!0});var I7t=s(YV);xDo=r(I7t,"M2M100ForConditionalGeneration"),I7t.forEach(t),$Do=r(YRe," (NLLB model)"),YRe.forEach(t),kDo=i(_e),Gb=n(_e,"LI",{});var KRe=s(Gb);Zpe=n(KRe,"STRONG",{});var q7t=s(Zpe);SDo=r(q7t,"pegasus"),q7t.forEach(t),RDo=r(KRe," \u2014 "),KV=n(KRe,"A",{href:!0});var j7t=s(KV);PDo=r(j7t,"PegasusForConditionalGeneration"),j7t.forEach(t),BDo=r(KRe," (Pegasus model)"),KRe.forEach(t),NDo=i(_e),Ob=n(_e,"LI",{});var ZRe=s(Ob);e_e=n(ZRe,"STRONG",{});var D7t=s(e_e);IDo=r(D7t,"plbart"),D7t.forEach(t),qDo=r(ZRe," \u2014 "),ZV=n(ZRe,"A",{href:!0});var G7t=s(ZV);jDo=r(G7t,"PLBartForConditionalGeneration"),G7t.forEach(t),DDo=r(ZRe," (PLBart model)"),ZRe.forEach(t),GDo=i(_e),Vb=n(_e,"LI",{});var ePe=s(Vb);o_e=n(ePe,"STRONG",{});var O7t=s(o_e);ODo=r(O7t,"prophetnet"),O7t.forEach(t),VDo=r(ePe," \u2014 "),eX=n(ePe,"A",{href:!0});var V7t=s(eX);XDo=r(V7t,"ProphetNetForConditionalGeneration"),V7t.forEach(t),zDo=r(ePe," (ProphetNet model)"),ePe.forEach(t),QDo=i(_e),Xb=n(_e,"LI",{});var oPe=s(Xb);r_e=n(oPe,"STRONG",{});var X7t=s(r_e);WDo=r(X7t,"t5"),X7t.forEach(t),HDo=r(oPe," \u2014 "),oX=n(oPe,"A",{href:!0});var z7t=s(oX);UDo=r(z7t,"T5ForConditionalGeneration"),z7t.forEach(t),JDo=r(oPe," (T5 model)"),oPe.forEach(t),YDo=i(_e),zb=n(_e,"LI",{});var rPe=s(zb);t_e=n(rPe,"STRONG",{});var Q7t=s(t_e);KDo=r(Q7t,"xlm-prophetnet"),Q7t.forEach(t),ZDo=r(rPe," \u2014 "),rX=n(rPe,"A",{href:!0});var W7t=s(rX);eGo=r(W7t,"XLMProphetNetForConditionalGeneration"),W7t.forEach(t),oGo=r(rPe," (XLM-ProphetNet model)"),rPe.forEach(t),_e.forEach(t),rGo=i(fa),Qb=n(fa,"P",{});var tPe=s(Qb);tGo=r(tPe,"The model is set in evaluation mode by default using "),a_e=n(tPe,"CODE",{});var H7t=s(a_e);aGo=r(H7t,"model.eval()"),H7t.forEach(t),nGo=r(tPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=n(tPe,"CODE",{});var U7t=s(n_e);sGo=r(U7t,"model.train()"),U7t.forEach(t),tPe.forEach(t),lGo=i(fa),T(Wb.$$.fragment,fa),fa.forEach(t),ll.forEach(t),UXe=i(f),td=n(f,"H2",{class:!0});var oWe=s(td);Hb=n(oWe,"A",{id:!0,class:!0,href:!0});var J7t=s(Hb);s_e=n(J7t,"SPAN",{});var Y7t=s(s_e);T(iy.$$.fragment,Y7t),Y7t.forEach(t),J7t.forEach(t),iGo=i(oWe),l_e=n(oWe,"SPAN",{});var K7t=s(l_e);dGo=r(K7t,"AutoModelForSequenceClassification"),K7t.forEach(t),oWe.forEach(t),JXe=i(f),Bo=n(f,"DIV",{class:!0});var il=s(Bo);T(dy.$$.fragment,il),cGo=i(il),ad=n(il,"P",{});var ote=s(ad);fGo=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tX=n(ote,"A",{href:!0});var Z7t=s(tX);mGo=r(Z7t,"from_pretrained()"),Z7t.forEach(t),gGo=r(ote," class method or the "),aX=n(ote,"A",{href:!0});var e8t=s(aX);hGo=r(e8t,"from_config()"),e8t.forEach(t),pGo=r(ote,` class
method.`),ote.forEach(t),_Go=i(il),cy=n(il,"P",{});var rWe=s(cy);uGo=r(rWe,"This class cannot be instantiated directly using "),i_e=n(rWe,"CODE",{});var o8t=s(i_e);bGo=r(o8t,"__init__()"),o8t.forEach(t),vGo=r(rWe," (throws an error)."),rWe.forEach(t),FGo=i(il),gt=n(il,"DIV",{class:!0});var ww=s(gt);T(fy.$$.fragment,ww),TGo=i(ww),d_e=n(ww,"P",{});var r8t=s(d_e);MGo=r(r8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),r8t.forEach(t),EGo=i(ww),nd=n(ww,"P",{});var rte=s(nd);CGo=r(rte,`Note:
Loading a model from its configuration file does `),c_e=n(rte,"STRONG",{});var t8t=s(c_e);wGo=r(t8t,"not"),t8t.forEach(t),AGo=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=n(rte,"A",{href:!0});var a8t=s(nX);LGo=r(a8t,"from_pretrained()"),a8t.forEach(t),yGo=r(rte," to load the model weights."),rte.forEach(t),xGo=i(ww),T(Ub.$$.fragment,ww),ww.forEach(t),$Go=i(il),ro=n(il,"DIV",{class:!0});var ma=s(ro);T(my.$$.fragment,ma),kGo=i(ma),f_e=n(ma,"P",{});var n8t=s(f_e);SGo=r(n8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n8t.forEach(t),RGo=i(ma),Ga=n(ma,"P",{});var Aw=s(Ga);PGo=r(Aw,"The model class to instantiate is selected based on the "),m_e=n(Aw,"CODE",{});var s8t=s(m_e);BGo=r(s8t,"model_type"),s8t.forEach(t),NGo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),g_e=n(Aw,"CODE",{});var l8t=s(g_e);IGo=r(l8t,"pretrained_model_name_or_path"),l8t.forEach(t),qGo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(Aw,"CODE",{});var i8t=s(h_e);jGo=r(i8t,"pretrained_model_name_or_path"),i8t.forEach(t),DGo=r(Aw,":"),Aw.forEach(t),GGo=i(ma),B=n(ma,"UL",{});var j=s(B);Jb=n(j,"LI",{});var aPe=s(Jb);p_e=n(aPe,"STRONG",{});var d8t=s(p_e);OGo=r(d8t,"albert"),d8t.forEach(t),VGo=r(aPe," \u2014 "),sX=n(aPe,"A",{href:!0});var c8t=s(sX);XGo=r(c8t,"AlbertForSequenceClassification"),c8t.forEach(t),zGo=r(aPe," (ALBERT model)"),aPe.forEach(t),QGo=i(j),Yb=n(j,"LI",{});var nPe=s(Yb);__e=n(nPe,"STRONG",{});var f8t=s(__e);WGo=r(f8t,"bart"),f8t.forEach(t),HGo=r(nPe," \u2014 "),lX=n(nPe,"A",{href:!0});var m8t=s(lX);UGo=r(m8t,"BartForSequenceClassification"),m8t.forEach(t),JGo=r(nPe," (BART model)"),nPe.forEach(t),YGo=i(j),Kb=n(j,"LI",{});var sPe=s(Kb);u_e=n(sPe,"STRONG",{});var g8t=s(u_e);KGo=r(g8t,"bert"),g8t.forEach(t),ZGo=r(sPe," \u2014 "),iX=n(sPe,"A",{href:!0});var h8t=s(iX);eOo=r(h8t,"BertForSequenceClassification"),h8t.forEach(t),oOo=r(sPe," (BERT model)"),sPe.forEach(t),rOo=i(j),Zb=n(j,"LI",{});var lPe=s(Zb);b_e=n(lPe,"STRONG",{});var p8t=s(b_e);tOo=r(p8t,"big_bird"),p8t.forEach(t),aOo=r(lPe," \u2014 "),dX=n(lPe,"A",{href:!0});var _8t=s(dX);nOo=r(_8t,"BigBirdForSequenceClassification"),_8t.forEach(t),sOo=r(lPe," (BigBird model)"),lPe.forEach(t),lOo=i(j),ev=n(j,"LI",{});var iPe=s(ev);v_e=n(iPe,"STRONG",{});var u8t=s(v_e);iOo=r(u8t,"bigbird_pegasus"),u8t.forEach(t),dOo=r(iPe," \u2014 "),cX=n(iPe,"A",{href:!0});var b8t=s(cX);cOo=r(b8t,"BigBirdPegasusForSequenceClassification"),b8t.forEach(t),fOo=r(iPe," (BigBird-Pegasus model)"),iPe.forEach(t),mOo=i(j),ov=n(j,"LI",{});var dPe=s(ov);F_e=n(dPe,"STRONG",{});var v8t=s(F_e);gOo=r(v8t,"bloom"),v8t.forEach(t),hOo=r(dPe," \u2014 "),fX=n(dPe,"A",{href:!0});var F8t=s(fX);pOo=r(F8t,"BloomForSequenceClassification"),F8t.forEach(t),_Oo=r(dPe," (BLOOM model)"),dPe.forEach(t),uOo=i(j),rv=n(j,"LI",{});var cPe=s(rv);T_e=n(cPe,"STRONG",{});var T8t=s(T_e);bOo=r(T8t,"camembert"),T8t.forEach(t),vOo=r(cPe," \u2014 "),mX=n(cPe,"A",{href:!0});var M8t=s(mX);FOo=r(M8t,"CamembertForSequenceClassification"),M8t.forEach(t),TOo=r(cPe," (CamemBERT model)"),cPe.forEach(t),MOo=i(j),tv=n(j,"LI",{});var fPe=s(tv);M_e=n(fPe,"STRONG",{});var E8t=s(M_e);EOo=r(E8t,"canine"),E8t.forEach(t),COo=r(fPe," \u2014 "),gX=n(fPe,"A",{href:!0});var C8t=s(gX);wOo=r(C8t,"CanineForSequenceClassification"),C8t.forEach(t),AOo=r(fPe," (CANINE model)"),fPe.forEach(t),LOo=i(j),av=n(j,"LI",{});var mPe=s(av);E_e=n(mPe,"STRONG",{});var w8t=s(E_e);yOo=r(w8t,"convbert"),w8t.forEach(t),xOo=r(mPe," \u2014 "),hX=n(mPe,"A",{href:!0});var A8t=s(hX);$Oo=r(A8t,"ConvBertForSequenceClassification"),A8t.forEach(t),kOo=r(mPe," (ConvBERT model)"),mPe.forEach(t),SOo=i(j),nv=n(j,"LI",{});var gPe=s(nv);C_e=n(gPe,"STRONG",{});var L8t=s(C_e);ROo=r(L8t,"ctrl"),L8t.forEach(t),POo=r(gPe," \u2014 "),pX=n(gPe,"A",{href:!0});var y8t=s(pX);BOo=r(y8t,"CTRLForSequenceClassification"),y8t.forEach(t),NOo=r(gPe," (CTRL model)"),gPe.forEach(t),IOo=i(j),sv=n(j,"LI",{});var hPe=s(sv);w_e=n(hPe,"STRONG",{});var x8t=s(w_e);qOo=r(x8t,"data2vec-text"),x8t.forEach(t),jOo=r(hPe," \u2014 "),_X=n(hPe,"A",{href:!0});var $8t=s(_X);DOo=r($8t,"Data2VecTextForSequenceClassification"),$8t.forEach(t),GOo=r(hPe," (Data2VecText model)"),hPe.forEach(t),OOo=i(j),lv=n(j,"LI",{});var pPe=s(lv);A_e=n(pPe,"STRONG",{});var k8t=s(A_e);VOo=r(k8t,"deberta"),k8t.forEach(t),XOo=r(pPe," \u2014 "),uX=n(pPe,"A",{href:!0});var S8t=s(uX);zOo=r(S8t,"DebertaForSequenceClassification"),S8t.forEach(t),QOo=r(pPe," (DeBERTa model)"),pPe.forEach(t),WOo=i(j),iv=n(j,"LI",{});var _Pe=s(iv);L_e=n(_Pe,"STRONG",{});var R8t=s(L_e);HOo=r(R8t,"deberta-v2"),R8t.forEach(t),UOo=r(_Pe," \u2014 "),bX=n(_Pe,"A",{href:!0});var P8t=s(bX);JOo=r(P8t,"DebertaV2ForSequenceClassification"),P8t.forEach(t),YOo=r(_Pe," (DeBERTa-v2 model)"),_Pe.forEach(t),KOo=i(j),dv=n(j,"LI",{});var uPe=s(dv);y_e=n(uPe,"STRONG",{});var B8t=s(y_e);ZOo=r(B8t,"distilbert"),B8t.forEach(t),eVo=r(uPe," \u2014 "),vX=n(uPe,"A",{href:!0});var N8t=s(vX);oVo=r(N8t,"DistilBertForSequenceClassification"),N8t.forEach(t),rVo=r(uPe," (DistilBERT model)"),uPe.forEach(t),tVo=i(j),cv=n(j,"LI",{});var bPe=s(cv);x_e=n(bPe,"STRONG",{});var I8t=s(x_e);aVo=r(I8t,"electra"),I8t.forEach(t),nVo=r(bPe," \u2014 "),FX=n(bPe,"A",{href:!0});var q8t=s(FX);sVo=r(q8t,"ElectraForSequenceClassification"),q8t.forEach(t),lVo=r(bPe," (ELECTRA model)"),bPe.forEach(t),iVo=i(j),fv=n(j,"LI",{});var vPe=s(fv);$_e=n(vPe,"STRONG",{});var j8t=s($_e);dVo=r(j8t,"flaubert"),j8t.forEach(t),cVo=r(vPe," \u2014 "),TX=n(vPe,"A",{href:!0});var D8t=s(TX);fVo=r(D8t,"FlaubertForSequenceClassification"),D8t.forEach(t),mVo=r(vPe," (FlauBERT model)"),vPe.forEach(t),gVo=i(j),mv=n(j,"LI",{});var FPe=s(mv);k_e=n(FPe,"STRONG",{});var G8t=s(k_e);hVo=r(G8t,"fnet"),G8t.forEach(t),pVo=r(FPe," \u2014 "),MX=n(FPe,"A",{href:!0});var O8t=s(MX);_Vo=r(O8t,"FNetForSequenceClassification"),O8t.forEach(t),uVo=r(FPe," (FNet model)"),FPe.forEach(t),bVo=i(j),gv=n(j,"LI",{});var TPe=s(gv);S_e=n(TPe,"STRONG",{});var V8t=s(S_e);vVo=r(V8t,"funnel"),V8t.forEach(t),FVo=r(TPe," \u2014 "),EX=n(TPe,"A",{href:!0});var X8t=s(EX);TVo=r(X8t,"FunnelForSequenceClassification"),X8t.forEach(t),MVo=r(TPe," (Funnel Transformer model)"),TPe.forEach(t),EVo=i(j),hv=n(j,"LI",{});var MPe=s(hv);R_e=n(MPe,"STRONG",{});var z8t=s(R_e);CVo=r(z8t,"gpt2"),z8t.forEach(t),wVo=r(MPe," \u2014 "),CX=n(MPe,"A",{href:!0});var Q8t=s(CX);AVo=r(Q8t,"GPT2ForSequenceClassification"),Q8t.forEach(t),LVo=r(MPe," (OpenAI GPT-2 model)"),MPe.forEach(t),yVo=i(j),pv=n(j,"LI",{});var EPe=s(pv);P_e=n(EPe,"STRONG",{});var W8t=s(P_e);xVo=r(W8t,"gpt_neo"),W8t.forEach(t),$Vo=r(EPe," \u2014 "),wX=n(EPe,"A",{href:!0});var H8t=s(wX);kVo=r(H8t,"GPTNeoForSequenceClassification"),H8t.forEach(t),SVo=r(EPe," (GPT Neo model)"),EPe.forEach(t),RVo=i(j),_v=n(j,"LI",{});var CPe=s(_v);B_e=n(CPe,"STRONG",{});var U8t=s(B_e);PVo=r(U8t,"gptj"),U8t.forEach(t),BVo=r(CPe," \u2014 "),AX=n(CPe,"A",{href:!0});var J8t=s(AX);NVo=r(J8t,"GPTJForSequenceClassification"),J8t.forEach(t),IVo=r(CPe," (GPT-J model)"),CPe.forEach(t),qVo=i(j),uv=n(j,"LI",{});var wPe=s(uv);N_e=n(wPe,"STRONG",{});var Y8t=s(N_e);jVo=r(Y8t,"ibert"),Y8t.forEach(t),DVo=r(wPe," \u2014 "),LX=n(wPe,"A",{href:!0});var K8t=s(LX);GVo=r(K8t,"IBertForSequenceClassification"),K8t.forEach(t),OVo=r(wPe," (I-BERT model)"),wPe.forEach(t),VVo=i(j),bv=n(j,"LI",{});var APe=s(bv);I_e=n(APe,"STRONG",{});var Z8t=s(I_e);XVo=r(Z8t,"layoutlm"),Z8t.forEach(t),zVo=r(APe," \u2014 "),yX=n(APe,"A",{href:!0});var eMt=s(yX);QVo=r(eMt,"LayoutLMForSequenceClassification"),eMt.forEach(t),WVo=r(APe," (LayoutLM model)"),APe.forEach(t),HVo=i(j),vv=n(j,"LI",{});var LPe=s(vv);q_e=n(LPe,"STRONG",{});var oMt=s(q_e);UVo=r(oMt,"layoutlmv2"),oMt.forEach(t),JVo=r(LPe," \u2014 "),xX=n(LPe,"A",{href:!0});var rMt=s(xX);YVo=r(rMt,"LayoutLMv2ForSequenceClassification"),rMt.forEach(t),KVo=r(LPe," (LayoutLMv2 model)"),LPe.forEach(t),ZVo=i(j),Fv=n(j,"LI",{});var yPe=s(Fv);j_e=n(yPe,"STRONG",{});var tMt=s(j_e);eXo=r(tMt,"layoutlmv3"),tMt.forEach(t),oXo=r(yPe," \u2014 "),$X=n(yPe,"A",{href:!0});var aMt=s($X);rXo=r(aMt,"LayoutLMv3ForSequenceClassification"),aMt.forEach(t),tXo=r(yPe," (LayoutLMv3 model)"),yPe.forEach(t),aXo=i(j),Tv=n(j,"LI",{});var xPe=s(Tv);D_e=n(xPe,"STRONG",{});var nMt=s(D_e);nXo=r(nMt,"led"),nMt.forEach(t),sXo=r(xPe," \u2014 "),kX=n(xPe,"A",{href:!0});var sMt=s(kX);lXo=r(sMt,"LEDForSequenceClassification"),sMt.forEach(t),iXo=r(xPe," (LED model)"),xPe.forEach(t),dXo=i(j),Mv=n(j,"LI",{});var $Pe=s(Mv);G_e=n($Pe,"STRONG",{});var lMt=s(G_e);cXo=r(lMt,"longformer"),lMt.forEach(t),fXo=r($Pe," \u2014 "),SX=n($Pe,"A",{href:!0});var iMt=s(SX);mXo=r(iMt,"LongformerForSequenceClassification"),iMt.forEach(t),gXo=r($Pe," (Longformer model)"),$Pe.forEach(t),hXo=i(j),Ev=n(j,"LI",{});var kPe=s(Ev);O_e=n(kPe,"STRONG",{});var dMt=s(O_e);pXo=r(dMt,"mbart"),dMt.forEach(t),_Xo=r(kPe," \u2014 "),RX=n(kPe,"A",{href:!0});var cMt=s(RX);uXo=r(cMt,"MBartForSequenceClassification"),cMt.forEach(t),bXo=r(kPe," (mBART model)"),kPe.forEach(t),vXo=i(j),Cv=n(j,"LI",{});var SPe=s(Cv);V_e=n(SPe,"STRONG",{});var fMt=s(V_e);FXo=r(fMt,"megatron-bert"),fMt.forEach(t),TXo=r(SPe," \u2014 "),PX=n(SPe,"A",{href:!0});var mMt=s(PX);MXo=r(mMt,"MegatronBertForSequenceClassification"),mMt.forEach(t),EXo=r(SPe," (Megatron-BERT model)"),SPe.forEach(t),CXo=i(j),wv=n(j,"LI",{});var RPe=s(wv);X_e=n(RPe,"STRONG",{});var gMt=s(X_e);wXo=r(gMt,"mobilebert"),gMt.forEach(t),AXo=r(RPe," \u2014 "),BX=n(RPe,"A",{href:!0});var hMt=s(BX);LXo=r(hMt,"MobileBertForSequenceClassification"),hMt.forEach(t),yXo=r(RPe," (MobileBERT model)"),RPe.forEach(t),xXo=i(j),Av=n(j,"LI",{});var PPe=s(Av);z_e=n(PPe,"STRONG",{});var pMt=s(z_e);$Xo=r(pMt,"mpnet"),pMt.forEach(t),kXo=r(PPe," \u2014 "),NX=n(PPe,"A",{href:!0});var _Mt=s(NX);SXo=r(_Mt,"MPNetForSequenceClassification"),_Mt.forEach(t),RXo=r(PPe," (MPNet model)"),PPe.forEach(t),PXo=i(j),Lv=n(j,"LI",{});var BPe=s(Lv);Q_e=n(BPe,"STRONG",{});var uMt=s(Q_e);BXo=r(uMt,"mvp"),uMt.forEach(t),NXo=r(BPe," \u2014 "),IX=n(BPe,"A",{href:!0});var bMt=s(IX);IXo=r(bMt,"MvpForSequenceClassification"),bMt.forEach(t),qXo=r(BPe," (MVP model)"),BPe.forEach(t),jXo=i(j),yv=n(j,"LI",{});var NPe=s(yv);W_e=n(NPe,"STRONG",{});var vMt=s(W_e);DXo=r(vMt,"nezha"),vMt.forEach(t),GXo=r(NPe," \u2014 "),qX=n(NPe,"A",{href:!0});var FMt=s(qX);OXo=r(FMt,"NezhaForSequenceClassification"),FMt.forEach(t),VXo=r(NPe," (Nezha model)"),NPe.forEach(t),XXo=i(j),xv=n(j,"LI",{});var IPe=s(xv);H_e=n(IPe,"STRONG",{});var TMt=s(H_e);zXo=r(TMt,"nystromformer"),TMt.forEach(t),QXo=r(IPe," \u2014 "),jX=n(IPe,"A",{href:!0});var MMt=s(jX);WXo=r(MMt,"NystromformerForSequenceClassification"),MMt.forEach(t),HXo=r(IPe," (Nystr\xF6mformer model)"),IPe.forEach(t),UXo=i(j),$v=n(j,"LI",{});var qPe=s($v);U_e=n(qPe,"STRONG",{});var EMt=s(U_e);JXo=r(EMt,"openai-gpt"),EMt.forEach(t),YXo=r(qPe," \u2014 "),DX=n(qPe,"A",{href:!0});var CMt=s(DX);KXo=r(CMt,"OpenAIGPTForSequenceClassification"),CMt.forEach(t),ZXo=r(qPe," (OpenAI GPT model)"),qPe.forEach(t),ezo=i(j),kv=n(j,"LI",{});var jPe=s(kv);J_e=n(jPe,"STRONG",{});var wMt=s(J_e);ozo=r(wMt,"opt"),wMt.forEach(t),rzo=r(jPe," \u2014 "),GX=n(jPe,"A",{href:!0});var AMt=s(GX);tzo=r(AMt,"OPTForSequenceClassification"),AMt.forEach(t),azo=r(jPe," (OPT model)"),jPe.forEach(t),nzo=i(j),Sv=n(j,"LI",{});var DPe=s(Sv);Y_e=n(DPe,"STRONG",{});var LMt=s(Y_e);szo=r(LMt,"perceiver"),LMt.forEach(t),lzo=r(DPe," \u2014 "),OX=n(DPe,"A",{href:!0});var yMt=s(OX);izo=r(yMt,"PerceiverForSequenceClassification"),yMt.forEach(t),dzo=r(DPe," (Perceiver model)"),DPe.forEach(t),czo=i(j),Rv=n(j,"LI",{});var GPe=s(Rv);K_e=n(GPe,"STRONG",{});var xMt=s(K_e);fzo=r(xMt,"plbart"),xMt.forEach(t),mzo=r(GPe," \u2014 "),VX=n(GPe,"A",{href:!0});var $Mt=s(VX);gzo=r($Mt,"PLBartForSequenceClassification"),$Mt.forEach(t),hzo=r(GPe," (PLBart model)"),GPe.forEach(t),pzo=i(j),Pv=n(j,"LI",{});var OPe=s(Pv);Z_e=n(OPe,"STRONG",{});var kMt=s(Z_e);_zo=r(kMt,"qdqbert"),kMt.forEach(t),uzo=r(OPe," \u2014 "),XX=n(OPe,"A",{href:!0});var SMt=s(XX);bzo=r(SMt,"QDQBertForSequenceClassification"),SMt.forEach(t),vzo=r(OPe," (QDQBert model)"),OPe.forEach(t),Fzo=i(j),Bv=n(j,"LI",{});var VPe=s(Bv);eue=n(VPe,"STRONG",{});var RMt=s(eue);Tzo=r(RMt,"reformer"),RMt.forEach(t),Mzo=r(VPe," \u2014 "),zX=n(VPe,"A",{href:!0});var PMt=s(zX);Ezo=r(PMt,"ReformerForSequenceClassification"),PMt.forEach(t),Czo=r(VPe," (Reformer model)"),VPe.forEach(t),wzo=i(j),Nv=n(j,"LI",{});var XPe=s(Nv);oue=n(XPe,"STRONG",{});var BMt=s(oue);Azo=r(BMt,"rembert"),BMt.forEach(t),Lzo=r(XPe," \u2014 "),QX=n(XPe,"A",{href:!0});var NMt=s(QX);yzo=r(NMt,"RemBertForSequenceClassification"),NMt.forEach(t),xzo=r(XPe," (RemBERT model)"),XPe.forEach(t),$zo=i(j),Iv=n(j,"LI",{});var zPe=s(Iv);rue=n(zPe,"STRONG",{});var IMt=s(rue);kzo=r(IMt,"roberta"),IMt.forEach(t),Szo=r(zPe," \u2014 "),WX=n(zPe,"A",{href:!0});var qMt=s(WX);Rzo=r(qMt,"RobertaForSequenceClassification"),qMt.forEach(t),Pzo=r(zPe," (RoBERTa model)"),zPe.forEach(t),Bzo=i(j),qv=n(j,"LI",{});var QPe=s(qv);tue=n(QPe,"STRONG",{});var jMt=s(tue);Nzo=r(jMt,"roformer"),jMt.forEach(t),Izo=r(QPe," \u2014 "),HX=n(QPe,"A",{href:!0});var DMt=s(HX);qzo=r(DMt,"RoFormerForSequenceClassification"),DMt.forEach(t),jzo=r(QPe," (RoFormer model)"),QPe.forEach(t),Dzo=i(j),jv=n(j,"LI",{});var WPe=s(jv);aue=n(WPe,"STRONG",{});var GMt=s(aue);Gzo=r(GMt,"squeezebert"),GMt.forEach(t),Ozo=r(WPe," \u2014 "),UX=n(WPe,"A",{href:!0});var OMt=s(UX);Vzo=r(OMt,"SqueezeBertForSequenceClassification"),OMt.forEach(t),Xzo=r(WPe," (SqueezeBERT model)"),WPe.forEach(t),zzo=i(j),Dv=n(j,"LI",{});var HPe=s(Dv);nue=n(HPe,"STRONG",{});var VMt=s(nue);Qzo=r(VMt,"tapas"),VMt.forEach(t),Wzo=r(HPe," \u2014 "),JX=n(HPe,"A",{href:!0});var XMt=s(JX);Hzo=r(XMt,"TapasForSequenceClassification"),XMt.forEach(t),Uzo=r(HPe," (TAPAS model)"),HPe.forEach(t),Jzo=i(j),Gv=n(j,"LI",{});var UPe=s(Gv);sue=n(UPe,"STRONG",{});var zMt=s(sue);Yzo=r(zMt,"transfo-xl"),zMt.forEach(t),Kzo=r(UPe," \u2014 "),YX=n(UPe,"A",{href:!0});var QMt=s(YX);Zzo=r(QMt,"TransfoXLForSequenceClassification"),QMt.forEach(t),eQo=r(UPe," (Transformer-XL model)"),UPe.forEach(t),oQo=i(j),Ov=n(j,"LI",{});var JPe=s(Ov);lue=n(JPe,"STRONG",{});var WMt=s(lue);rQo=r(WMt,"xlm"),WMt.forEach(t),tQo=r(JPe," \u2014 "),KX=n(JPe,"A",{href:!0});var HMt=s(KX);aQo=r(HMt,"XLMForSequenceClassification"),HMt.forEach(t),nQo=r(JPe," (XLM model)"),JPe.forEach(t),sQo=i(j),Vv=n(j,"LI",{});var YPe=s(Vv);iue=n(YPe,"STRONG",{});var UMt=s(iue);lQo=r(UMt,"xlm-roberta"),UMt.forEach(t),iQo=r(YPe," \u2014 "),ZX=n(YPe,"A",{href:!0});var JMt=s(ZX);dQo=r(JMt,"XLMRobertaForSequenceClassification"),JMt.forEach(t),cQo=r(YPe," (XLM-RoBERTa model)"),YPe.forEach(t),fQo=i(j),Xv=n(j,"LI",{});var KPe=s(Xv);due=n(KPe,"STRONG",{});var YMt=s(due);mQo=r(YMt,"xlm-roberta-xl"),YMt.forEach(t),gQo=r(KPe," \u2014 "),ez=n(KPe,"A",{href:!0});var KMt=s(ez);hQo=r(KMt,"XLMRobertaXLForSequenceClassification"),KMt.forEach(t),pQo=r(KPe," (XLM-RoBERTa-XL model)"),KPe.forEach(t),_Qo=i(j),zv=n(j,"LI",{});var ZPe=s(zv);cue=n(ZPe,"STRONG",{});var ZMt=s(cue);uQo=r(ZMt,"xlnet"),ZMt.forEach(t),bQo=r(ZPe," \u2014 "),oz=n(ZPe,"A",{href:!0});var e4t=s(oz);vQo=r(e4t,"XLNetForSequenceClassification"),e4t.forEach(t),FQo=r(ZPe," (XLNet model)"),ZPe.forEach(t),TQo=i(j),Qv=n(j,"LI",{});var eBe=s(Qv);fue=n(eBe,"STRONG",{});var o4t=s(fue);MQo=r(o4t,"yoso"),o4t.forEach(t),EQo=r(eBe," \u2014 "),rz=n(eBe,"A",{href:!0});var r4t=s(rz);CQo=r(r4t,"YosoForSequenceClassification"),r4t.forEach(t),wQo=r(eBe," (YOSO model)"),eBe.forEach(t),j.forEach(t),AQo=i(ma),Wv=n(ma,"P",{});var oBe=s(Wv);LQo=r(oBe,"The model is set in evaluation mode by default using "),mue=n(oBe,"CODE",{});var t4t=s(mue);yQo=r(t4t,"model.eval()"),t4t.forEach(t),xQo=r(oBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=n(oBe,"CODE",{});var a4t=s(gue);$Qo=r(a4t,"model.train()"),a4t.forEach(t),oBe.forEach(t),kQo=i(ma),T(Hv.$$.fragment,ma),ma.forEach(t),il.forEach(t),YXe=i(f),sd=n(f,"H2",{class:!0});var tWe=s(sd);Uv=n(tWe,"A",{id:!0,class:!0,href:!0});var n4t=s(Uv);hue=n(n4t,"SPAN",{});var s4t=s(hue);T(gy.$$.fragment,s4t),s4t.forEach(t),n4t.forEach(t),SQo=i(tWe),pue=n(tWe,"SPAN",{});var l4t=s(pue);RQo=r(l4t,"AutoModelForMultipleChoice"),l4t.forEach(t),tWe.forEach(t),KXe=i(f),No=n(f,"DIV",{class:!0});var dl=s(No);T(hy.$$.fragment,dl),PQo=i(dl),ld=n(dl,"P",{});var tte=s(ld);BQo=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tz=n(tte,"A",{href:!0});var i4t=s(tz);NQo=r(i4t,"from_pretrained()"),i4t.forEach(t),IQo=r(tte," class method or the "),az=n(tte,"A",{href:!0});var d4t=s(az);qQo=r(d4t,"from_config()"),d4t.forEach(t),jQo=r(tte,` class
method.`),tte.forEach(t),DQo=i(dl),py=n(dl,"P",{});var aWe=s(py);GQo=r(aWe,"This class cannot be instantiated directly using "),_ue=n(aWe,"CODE",{});var c4t=s(_ue);OQo=r(c4t,"__init__()"),c4t.forEach(t),VQo=r(aWe," (throws an error)."),aWe.forEach(t),XQo=i(dl),ht=n(dl,"DIV",{class:!0});var Lw=s(ht);T(_y.$$.fragment,Lw),zQo=i(Lw),uue=n(Lw,"P",{});var f4t=s(uue);QQo=r(f4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),f4t.forEach(t),WQo=i(Lw),id=n(Lw,"P",{});var ate=s(id);HQo=r(ate,`Note:
Loading a model from its configuration file does `),bue=n(ate,"STRONG",{});var m4t=s(bue);UQo=r(m4t,"not"),m4t.forEach(t),JQo=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=n(ate,"A",{href:!0});var g4t=s(nz);YQo=r(g4t,"from_pretrained()"),g4t.forEach(t),KQo=r(ate," to load the model weights."),ate.forEach(t),ZQo=i(Lw),T(Jv.$$.fragment,Lw),Lw.forEach(t),eWo=i(dl),to=n(dl,"DIV",{class:!0});var ga=s(to);T(uy.$$.fragment,ga),oWo=i(ga),vue=n(ga,"P",{});var h4t=s(vue);rWo=r(h4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),h4t.forEach(t),tWo=i(ga),Oa=n(ga,"P",{});var yw=s(Oa);aWo=r(yw,"The model class to instantiate is selected based on the "),Fue=n(yw,"CODE",{});var p4t=s(Fue);nWo=r(p4t,"model_type"),p4t.forEach(t),sWo=r(yw,` property of the config object (either
passed as an argument or loaded from `),Tue=n(yw,"CODE",{});var _4t=s(Tue);lWo=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),iWo=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=n(yw,"CODE",{});var u4t=s(Mue);dWo=r(u4t,"pretrained_model_name_or_path"),u4t.forEach(t),cWo=r(yw,":"),yw.forEach(t),fWo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);Yv=n(ee,"LI",{});var rBe=s(Yv);Eue=n(rBe,"STRONG",{});var b4t=s(Eue);mWo=r(b4t,"albert"),b4t.forEach(t),gWo=r(rBe," \u2014 "),sz=n(rBe,"A",{href:!0});var v4t=s(sz);hWo=r(v4t,"AlbertForMultipleChoice"),v4t.forEach(t),pWo=r(rBe," (ALBERT model)"),rBe.forEach(t),_Wo=i(ee),Kv=n(ee,"LI",{});var tBe=s(Kv);Cue=n(tBe,"STRONG",{});var F4t=s(Cue);uWo=r(F4t,"bert"),F4t.forEach(t),bWo=r(tBe," \u2014 "),lz=n(tBe,"A",{href:!0});var T4t=s(lz);vWo=r(T4t,"BertForMultipleChoice"),T4t.forEach(t),FWo=r(tBe," (BERT model)"),tBe.forEach(t),TWo=i(ee),Zv=n(ee,"LI",{});var aBe=s(Zv);wue=n(aBe,"STRONG",{});var M4t=s(wue);MWo=r(M4t,"big_bird"),M4t.forEach(t),EWo=r(aBe," \u2014 "),iz=n(aBe,"A",{href:!0});var E4t=s(iz);CWo=r(E4t,"BigBirdForMultipleChoice"),E4t.forEach(t),wWo=r(aBe," (BigBird model)"),aBe.forEach(t),AWo=i(ee),eF=n(ee,"LI",{});var nBe=s(eF);Aue=n(nBe,"STRONG",{});var C4t=s(Aue);LWo=r(C4t,"camembert"),C4t.forEach(t),yWo=r(nBe," \u2014 "),dz=n(nBe,"A",{href:!0});var w4t=s(dz);xWo=r(w4t,"CamembertForMultipleChoice"),w4t.forEach(t),$Wo=r(nBe," (CamemBERT model)"),nBe.forEach(t),kWo=i(ee),oF=n(ee,"LI",{});var sBe=s(oF);Lue=n(sBe,"STRONG",{});var A4t=s(Lue);SWo=r(A4t,"canine"),A4t.forEach(t),RWo=r(sBe," \u2014 "),cz=n(sBe,"A",{href:!0});var L4t=s(cz);PWo=r(L4t,"CanineForMultipleChoice"),L4t.forEach(t),BWo=r(sBe," (CANINE model)"),sBe.forEach(t),NWo=i(ee),rF=n(ee,"LI",{});var lBe=s(rF);yue=n(lBe,"STRONG",{});var y4t=s(yue);IWo=r(y4t,"convbert"),y4t.forEach(t),qWo=r(lBe," \u2014 "),fz=n(lBe,"A",{href:!0});var x4t=s(fz);jWo=r(x4t,"ConvBertForMultipleChoice"),x4t.forEach(t),DWo=r(lBe," (ConvBERT model)"),lBe.forEach(t),GWo=i(ee),tF=n(ee,"LI",{});var iBe=s(tF);xue=n(iBe,"STRONG",{});var $4t=s(xue);OWo=r($4t,"data2vec-text"),$4t.forEach(t),VWo=r(iBe," \u2014 "),mz=n(iBe,"A",{href:!0});var k4t=s(mz);XWo=r(k4t,"Data2VecTextForMultipleChoice"),k4t.forEach(t),zWo=r(iBe," (Data2VecText model)"),iBe.forEach(t),QWo=i(ee),aF=n(ee,"LI",{});var dBe=s(aF);$ue=n(dBe,"STRONG",{});var S4t=s($ue);WWo=r(S4t,"deberta-v2"),S4t.forEach(t),HWo=r(dBe," \u2014 "),gz=n(dBe,"A",{href:!0});var R4t=s(gz);UWo=r(R4t,"DebertaV2ForMultipleChoice"),R4t.forEach(t),JWo=r(dBe," (DeBERTa-v2 model)"),dBe.forEach(t),YWo=i(ee),nF=n(ee,"LI",{});var cBe=s(nF);kue=n(cBe,"STRONG",{});var P4t=s(kue);KWo=r(P4t,"distilbert"),P4t.forEach(t),ZWo=r(cBe," \u2014 "),hz=n(cBe,"A",{href:!0});var B4t=s(hz);eHo=r(B4t,"DistilBertForMultipleChoice"),B4t.forEach(t),oHo=r(cBe," (DistilBERT model)"),cBe.forEach(t),rHo=i(ee),sF=n(ee,"LI",{});var fBe=s(sF);Sue=n(fBe,"STRONG",{});var N4t=s(Sue);tHo=r(N4t,"electra"),N4t.forEach(t),aHo=r(fBe," \u2014 "),pz=n(fBe,"A",{href:!0});var I4t=s(pz);nHo=r(I4t,"ElectraForMultipleChoice"),I4t.forEach(t),sHo=r(fBe," (ELECTRA model)"),fBe.forEach(t),lHo=i(ee),lF=n(ee,"LI",{});var mBe=s(lF);Rue=n(mBe,"STRONG",{});var q4t=s(Rue);iHo=r(q4t,"flaubert"),q4t.forEach(t),dHo=r(mBe," \u2014 "),_z=n(mBe,"A",{href:!0});var j4t=s(_z);cHo=r(j4t,"FlaubertForMultipleChoice"),j4t.forEach(t),fHo=r(mBe," (FlauBERT model)"),mBe.forEach(t),mHo=i(ee),iF=n(ee,"LI",{});var gBe=s(iF);Pue=n(gBe,"STRONG",{});var D4t=s(Pue);gHo=r(D4t,"fnet"),D4t.forEach(t),hHo=r(gBe," \u2014 "),uz=n(gBe,"A",{href:!0});var G4t=s(uz);pHo=r(G4t,"FNetForMultipleChoice"),G4t.forEach(t),_Ho=r(gBe," (FNet model)"),gBe.forEach(t),uHo=i(ee),dF=n(ee,"LI",{});var hBe=s(dF);Bue=n(hBe,"STRONG",{});var O4t=s(Bue);bHo=r(O4t,"funnel"),O4t.forEach(t),vHo=r(hBe," \u2014 "),bz=n(hBe,"A",{href:!0});var V4t=s(bz);FHo=r(V4t,"FunnelForMultipleChoice"),V4t.forEach(t),THo=r(hBe," (Funnel Transformer model)"),hBe.forEach(t),MHo=i(ee),cF=n(ee,"LI",{});var pBe=s(cF);Nue=n(pBe,"STRONG",{});var X4t=s(Nue);EHo=r(X4t,"ibert"),X4t.forEach(t),CHo=r(pBe," \u2014 "),vz=n(pBe,"A",{href:!0});var z4t=s(vz);wHo=r(z4t,"IBertForMultipleChoice"),z4t.forEach(t),AHo=r(pBe," (I-BERT model)"),pBe.forEach(t),LHo=i(ee),fF=n(ee,"LI",{});var _Be=s(fF);Iue=n(_Be,"STRONG",{});var Q4t=s(Iue);yHo=r(Q4t,"longformer"),Q4t.forEach(t),xHo=r(_Be," \u2014 "),Fz=n(_Be,"A",{href:!0});var W4t=s(Fz);$Ho=r(W4t,"LongformerForMultipleChoice"),W4t.forEach(t),kHo=r(_Be," (Longformer model)"),_Be.forEach(t),SHo=i(ee),mF=n(ee,"LI",{});var uBe=s(mF);que=n(uBe,"STRONG",{});var H4t=s(que);RHo=r(H4t,"megatron-bert"),H4t.forEach(t),PHo=r(uBe," \u2014 "),Tz=n(uBe,"A",{href:!0});var U4t=s(Tz);BHo=r(U4t,"MegatronBertForMultipleChoice"),U4t.forEach(t),NHo=r(uBe," (Megatron-BERT model)"),uBe.forEach(t),IHo=i(ee),gF=n(ee,"LI",{});var bBe=s(gF);jue=n(bBe,"STRONG",{});var J4t=s(jue);qHo=r(J4t,"mobilebert"),J4t.forEach(t),jHo=r(bBe," \u2014 "),Mz=n(bBe,"A",{href:!0});var Y4t=s(Mz);DHo=r(Y4t,"MobileBertForMultipleChoice"),Y4t.forEach(t),GHo=r(bBe," (MobileBERT model)"),bBe.forEach(t),OHo=i(ee),hF=n(ee,"LI",{});var vBe=s(hF);Due=n(vBe,"STRONG",{});var K4t=s(Due);VHo=r(K4t,"mpnet"),K4t.forEach(t),XHo=r(vBe," \u2014 "),Ez=n(vBe,"A",{href:!0});var Z4t=s(Ez);zHo=r(Z4t,"MPNetForMultipleChoice"),Z4t.forEach(t),QHo=r(vBe," (MPNet model)"),vBe.forEach(t),WHo=i(ee),pF=n(ee,"LI",{});var FBe=s(pF);Gue=n(FBe,"STRONG",{});var eEt=s(Gue);HHo=r(eEt,"nezha"),eEt.forEach(t),UHo=r(FBe," \u2014 "),Cz=n(FBe,"A",{href:!0});var oEt=s(Cz);JHo=r(oEt,"NezhaForMultipleChoice"),oEt.forEach(t),YHo=r(FBe," (Nezha model)"),FBe.forEach(t),KHo=i(ee),_F=n(ee,"LI",{});var TBe=s(_F);Oue=n(TBe,"STRONG",{});var rEt=s(Oue);ZHo=r(rEt,"nystromformer"),rEt.forEach(t),eUo=r(TBe," \u2014 "),wz=n(TBe,"A",{href:!0});var tEt=s(wz);oUo=r(tEt,"NystromformerForMultipleChoice"),tEt.forEach(t),rUo=r(TBe," (Nystr\xF6mformer model)"),TBe.forEach(t),tUo=i(ee),uF=n(ee,"LI",{});var MBe=s(uF);Vue=n(MBe,"STRONG",{});var aEt=s(Vue);aUo=r(aEt,"qdqbert"),aEt.forEach(t),nUo=r(MBe," \u2014 "),Az=n(MBe,"A",{href:!0});var nEt=s(Az);sUo=r(nEt,"QDQBertForMultipleChoice"),nEt.forEach(t),lUo=r(MBe," (QDQBert model)"),MBe.forEach(t),iUo=i(ee),bF=n(ee,"LI",{});var EBe=s(bF);Xue=n(EBe,"STRONG",{});var sEt=s(Xue);dUo=r(sEt,"rembert"),sEt.forEach(t),cUo=r(EBe," \u2014 "),Lz=n(EBe,"A",{href:!0});var lEt=s(Lz);fUo=r(lEt,"RemBertForMultipleChoice"),lEt.forEach(t),mUo=r(EBe," (RemBERT model)"),EBe.forEach(t),gUo=i(ee),vF=n(ee,"LI",{});var CBe=s(vF);zue=n(CBe,"STRONG",{});var iEt=s(zue);hUo=r(iEt,"roberta"),iEt.forEach(t),pUo=r(CBe," \u2014 "),yz=n(CBe,"A",{href:!0});var dEt=s(yz);_Uo=r(dEt,"RobertaForMultipleChoice"),dEt.forEach(t),uUo=r(CBe," (RoBERTa model)"),CBe.forEach(t),bUo=i(ee),FF=n(ee,"LI",{});var wBe=s(FF);Que=n(wBe,"STRONG",{});var cEt=s(Que);vUo=r(cEt,"roformer"),cEt.forEach(t),FUo=r(wBe," \u2014 "),xz=n(wBe,"A",{href:!0});var fEt=s(xz);TUo=r(fEt,"RoFormerForMultipleChoice"),fEt.forEach(t),MUo=r(wBe," (RoFormer model)"),wBe.forEach(t),EUo=i(ee),TF=n(ee,"LI",{});var ABe=s(TF);Wue=n(ABe,"STRONG",{});var mEt=s(Wue);CUo=r(mEt,"squeezebert"),mEt.forEach(t),wUo=r(ABe," \u2014 "),$z=n(ABe,"A",{href:!0});var gEt=s($z);AUo=r(gEt,"SqueezeBertForMultipleChoice"),gEt.forEach(t),LUo=r(ABe," (SqueezeBERT model)"),ABe.forEach(t),yUo=i(ee),MF=n(ee,"LI",{});var LBe=s(MF);Hue=n(LBe,"STRONG",{});var hEt=s(Hue);xUo=r(hEt,"xlm"),hEt.forEach(t),$Uo=r(LBe," \u2014 "),kz=n(LBe,"A",{href:!0});var pEt=s(kz);kUo=r(pEt,"XLMForMultipleChoice"),pEt.forEach(t),SUo=r(LBe," (XLM model)"),LBe.forEach(t),RUo=i(ee),EF=n(ee,"LI",{});var yBe=s(EF);Uue=n(yBe,"STRONG",{});var _Et=s(Uue);PUo=r(_Et,"xlm-roberta"),_Et.forEach(t),BUo=r(yBe," \u2014 "),Sz=n(yBe,"A",{href:!0});var uEt=s(Sz);NUo=r(uEt,"XLMRobertaForMultipleChoice"),uEt.forEach(t),IUo=r(yBe," (XLM-RoBERTa model)"),yBe.forEach(t),qUo=i(ee),CF=n(ee,"LI",{});var xBe=s(CF);Jue=n(xBe,"STRONG",{});var bEt=s(Jue);jUo=r(bEt,"xlm-roberta-xl"),bEt.forEach(t),DUo=r(xBe," \u2014 "),Rz=n(xBe,"A",{href:!0});var vEt=s(Rz);GUo=r(vEt,"XLMRobertaXLForMultipleChoice"),vEt.forEach(t),OUo=r(xBe," (XLM-RoBERTa-XL model)"),xBe.forEach(t),VUo=i(ee),wF=n(ee,"LI",{});var $Be=s(wF);Yue=n($Be,"STRONG",{});var FEt=s(Yue);XUo=r(FEt,"xlnet"),FEt.forEach(t),zUo=r($Be," \u2014 "),Pz=n($Be,"A",{href:!0});var TEt=s(Pz);QUo=r(TEt,"XLNetForMultipleChoice"),TEt.forEach(t),WUo=r($Be," (XLNet model)"),$Be.forEach(t),HUo=i(ee),AF=n(ee,"LI",{});var kBe=s(AF);Kue=n(kBe,"STRONG",{});var MEt=s(Kue);UUo=r(MEt,"yoso"),MEt.forEach(t),JUo=r(kBe," \u2014 "),Bz=n(kBe,"A",{href:!0});var EEt=s(Bz);YUo=r(EEt,"YosoForMultipleChoice"),EEt.forEach(t),KUo=r(kBe," (YOSO model)"),kBe.forEach(t),ee.forEach(t),ZUo=i(ga),LF=n(ga,"P",{});var SBe=s(LF);eJo=r(SBe,"The model is set in evaluation mode by default using "),Zue=n(SBe,"CODE",{});var CEt=s(Zue);oJo=r(CEt,"model.eval()"),CEt.forEach(t),rJo=r(SBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=n(SBe,"CODE",{});var wEt=s(e2e);tJo=r(wEt,"model.train()"),wEt.forEach(t),SBe.forEach(t),aJo=i(ga),T(yF.$$.fragment,ga),ga.forEach(t),dl.forEach(t),ZXe=i(f),dd=n(f,"H2",{class:!0});var nWe=s(dd);xF=n(nWe,"A",{id:!0,class:!0,href:!0});var AEt=s(xF);o2e=n(AEt,"SPAN",{});var LEt=s(o2e);T(by.$$.fragment,LEt),LEt.forEach(t),AEt.forEach(t),nJo=i(nWe),r2e=n(nWe,"SPAN",{});var yEt=s(r2e);sJo=r(yEt,"AutoModelForNextSentencePrediction"),yEt.forEach(t),nWe.forEach(t),eze=i(f),Io=n(f,"DIV",{class:!0});var cl=s(Io);T(vy.$$.fragment,cl),lJo=i(cl),cd=n(cl,"P",{});var nte=s(cd);iJo=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nz=n(nte,"A",{href:!0});var xEt=s(Nz);dJo=r(xEt,"from_pretrained()"),xEt.forEach(t),cJo=r(nte," class method or the "),Iz=n(nte,"A",{href:!0});var $Et=s(Iz);fJo=r($Et,"from_config()"),$Et.forEach(t),mJo=r(nte,` class
method.`),nte.forEach(t),gJo=i(cl),Fy=n(cl,"P",{});var sWe=s(Fy);hJo=r(sWe,"This class cannot be instantiated directly using "),t2e=n(sWe,"CODE",{});var kEt=s(t2e);pJo=r(kEt,"__init__()"),kEt.forEach(t),_Jo=r(sWe," (throws an error)."),sWe.forEach(t),uJo=i(cl),pt=n(cl,"DIV",{class:!0});var xw=s(pt);T(Ty.$$.fragment,xw),bJo=i(xw),a2e=n(xw,"P",{});var SEt=s(a2e);vJo=r(SEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SEt.forEach(t),FJo=i(xw),fd=n(xw,"P",{});var ste=s(fd);TJo=r(ste,`Note:
Loading a model from its configuration file does `),n2e=n(ste,"STRONG",{});var REt=s(n2e);MJo=r(REt,"not"),REt.forEach(t),EJo=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(ste,"A",{href:!0});var PEt=s(qz);CJo=r(PEt,"from_pretrained()"),PEt.forEach(t),wJo=r(ste," to load the model weights."),ste.forEach(t),AJo=i(xw),T($F.$$.fragment,xw),xw.forEach(t),LJo=i(cl),ao=n(cl,"DIV",{class:!0});var ha=s(ao);T(My.$$.fragment,ha),yJo=i(ha),s2e=n(ha,"P",{});var BEt=s(s2e);xJo=r(BEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),BEt.forEach(t),$Jo=i(ha),Va=n(ha,"P",{});var $w=s(Va);kJo=r($w,"The model class to instantiate is selected based on the "),l2e=n($w,"CODE",{});var NEt=s(l2e);SJo=r(NEt,"model_type"),NEt.forEach(t),RJo=r($w,` property of the config object (either
passed as an argument or loaded from `),i2e=n($w,"CODE",{});var IEt=s(i2e);PJo=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),BJo=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n($w,"CODE",{});var qEt=s(d2e);NJo=r(qEt,"pretrained_model_name_or_path"),qEt.forEach(t),IJo=r($w,":"),$w.forEach(t),qJo=i(ha),qo=n(ha,"UL",{});var pa=s(qo);kF=n(pa,"LI",{});var RBe=s(kF);c2e=n(RBe,"STRONG",{});var jEt=s(c2e);jJo=r(jEt,"bert"),jEt.forEach(t),DJo=r(RBe," \u2014 "),jz=n(RBe,"A",{href:!0});var DEt=s(jz);GJo=r(DEt,"BertForNextSentencePrediction"),DEt.forEach(t),OJo=r(RBe," (BERT model)"),RBe.forEach(t),VJo=i(pa),SF=n(pa,"LI",{});var PBe=s(SF);f2e=n(PBe,"STRONG",{});var GEt=s(f2e);XJo=r(GEt,"fnet"),GEt.forEach(t),zJo=r(PBe," \u2014 "),Dz=n(PBe,"A",{href:!0});var OEt=s(Dz);QJo=r(OEt,"FNetForNextSentencePrediction"),OEt.forEach(t),WJo=r(PBe," (FNet model)"),PBe.forEach(t),HJo=i(pa),RF=n(pa,"LI",{});var BBe=s(RF);m2e=n(BBe,"STRONG",{});var VEt=s(m2e);UJo=r(VEt,"megatron-bert"),VEt.forEach(t),JJo=r(BBe," \u2014 "),Gz=n(BBe,"A",{href:!0});var XEt=s(Gz);YJo=r(XEt,"MegatronBertForNextSentencePrediction"),XEt.forEach(t),KJo=r(BBe," (Megatron-BERT model)"),BBe.forEach(t),ZJo=i(pa),PF=n(pa,"LI",{});var NBe=s(PF);g2e=n(NBe,"STRONG",{});var zEt=s(g2e);eYo=r(zEt,"mobilebert"),zEt.forEach(t),oYo=r(NBe," \u2014 "),Oz=n(NBe,"A",{href:!0});var QEt=s(Oz);rYo=r(QEt,"MobileBertForNextSentencePrediction"),QEt.forEach(t),tYo=r(NBe," (MobileBERT model)"),NBe.forEach(t),aYo=i(pa),BF=n(pa,"LI",{});var IBe=s(BF);h2e=n(IBe,"STRONG",{});var WEt=s(h2e);nYo=r(WEt,"nezha"),WEt.forEach(t),sYo=r(IBe," \u2014 "),Vz=n(IBe,"A",{href:!0});var HEt=s(Vz);lYo=r(HEt,"NezhaForNextSentencePrediction"),HEt.forEach(t),iYo=r(IBe," (Nezha model)"),IBe.forEach(t),dYo=i(pa),NF=n(pa,"LI",{});var qBe=s(NF);p2e=n(qBe,"STRONG",{});var UEt=s(p2e);cYo=r(UEt,"qdqbert"),UEt.forEach(t),fYo=r(qBe," \u2014 "),Xz=n(qBe,"A",{href:!0});var JEt=s(Xz);mYo=r(JEt,"QDQBertForNextSentencePrediction"),JEt.forEach(t),gYo=r(qBe," (QDQBert model)"),qBe.forEach(t),pa.forEach(t),hYo=i(ha),IF=n(ha,"P",{});var jBe=s(IF);pYo=r(jBe,"The model is set in evaluation mode by default using "),_2e=n(jBe,"CODE",{});var YEt=s(_2e);_Yo=r(YEt,"model.eval()"),YEt.forEach(t),uYo=r(jBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=n(jBe,"CODE",{});var KEt=s(u2e);bYo=r(KEt,"model.train()"),KEt.forEach(t),jBe.forEach(t),vYo=i(ha),T(qF.$$.fragment,ha),ha.forEach(t),cl.forEach(t),oze=i(f),md=n(f,"H2",{class:!0});var lWe=s(md);jF=n(lWe,"A",{id:!0,class:!0,href:!0});var ZEt=s(jF);b2e=n(ZEt,"SPAN",{});var eCt=s(b2e);T(Ey.$$.fragment,eCt),eCt.forEach(t),ZEt.forEach(t),FYo=i(lWe),v2e=n(lWe,"SPAN",{});var oCt=s(v2e);TYo=r(oCt,"AutoModelForTokenClassification"),oCt.forEach(t),lWe.forEach(t),rze=i(f),jo=n(f,"DIV",{class:!0});var fl=s(jo);T(Cy.$$.fragment,fl),MYo=i(fl),gd=n(fl,"P",{});var lte=s(gd);EYo=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zz=n(lte,"A",{href:!0});var rCt=s(zz);CYo=r(rCt,"from_pretrained()"),rCt.forEach(t),wYo=r(lte," class method or the "),Qz=n(lte,"A",{href:!0});var tCt=s(Qz);AYo=r(tCt,"from_config()"),tCt.forEach(t),LYo=r(lte,` class
method.`),lte.forEach(t),yYo=i(fl),wy=n(fl,"P",{});var iWe=s(wy);xYo=r(iWe,"This class cannot be instantiated directly using "),F2e=n(iWe,"CODE",{});var aCt=s(F2e);$Yo=r(aCt,"__init__()"),aCt.forEach(t),kYo=r(iWe," (throws an error)."),iWe.forEach(t),SYo=i(fl),_t=n(fl,"DIV",{class:!0});var kw=s(_t);T(Ay.$$.fragment,kw),RYo=i(kw),T2e=n(kw,"P",{});var nCt=s(T2e);PYo=r(nCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nCt.forEach(t),BYo=i(kw),hd=n(kw,"P",{});var ite=s(hd);NYo=r(ite,`Note:
Loading a model from its configuration file does `),M2e=n(ite,"STRONG",{});var sCt=s(M2e);IYo=r(sCt,"not"),sCt.forEach(t),qYo=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=n(ite,"A",{href:!0});var lCt=s(Wz);jYo=r(lCt,"from_pretrained()"),lCt.forEach(t),DYo=r(ite," to load the model weights."),ite.forEach(t),GYo=i(kw),T(DF.$$.fragment,kw),kw.forEach(t),OYo=i(fl),no=n(fl,"DIV",{class:!0});var _a=s(no);T(Ly.$$.fragment,_a),VYo=i(_a),E2e=n(_a,"P",{});var iCt=s(E2e);XYo=r(iCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iCt.forEach(t),zYo=i(_a),Xa=n(_a,"P",{});var Sw=s(Xa);QYo=r(Sw,"The model class to instantiate is selected based on the "),C2e=n(Sw,"CODE",{});var dCt=s(C2e);WYo=r(dCt,"model_type"),dCt.forEach(t),HYo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),w2e=n(Sw,"CODE",{});var cCt=s(w2e);UYo=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),JYo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(Sw,"CODE",{});var fCt=s(A2e);YYo=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),KYo=r(Sw,":"),Sw.forEach(t),ZYo=i(_a),U=n(_a,"UL",{});var J=s(U);GF=n(J,"LI",{});var DBe=s(GF);L2e=n(DBe,"STRONG",{});var mCt=s(L2e);eKo=r(mCt,"albert"),mCt.forEach(t),oKo=r(DBe," \u2014 "),Hz=n(DBe,"A",{href:!0});var gCt=s(Hz);rKo=r(gCt,"AlbertForTokenClassification"),gCt.forEach(t),tKo=r(DBe," (ALBERT model)"),DBe.forEach(t),aKo=i(J),OF=n(J,"LI",{});var GBe=s(OF);y2e=n(GBe,"STRONG",{});var hCt=s(y2e);nKo=r(hCt,"bert"),hCt.forEach(t),sKo=r(GBe," \u2014 "),Uz=n(GBe,"A",{href:!0});var pCt=s(Uz);lKo=r(pCt,"BertForTokenClassification"),pCt.forEach(t),iKo=r(GBe," (BERT model)"),GBe.forEach(t),dKo=i(J),VF=n(J,"LI",{});var OBe=s(VF);x2e=n(OBe,"STRONG",{});var _Ct=s(x2e);cKo=r(_Ct,"big_bird"),_Ct.forEach(t),fKo=r(OBe," \u2014 "),Jz=n(OBe,"A",{href:!0});var uCt=s(Jz);mKo=r(uCt,"BigBirdForTokenClassification"),uCt.forEach(t),gKo=r(OBe," (BigBird model)"),OBe.forEach(t),hKo=i(J),XF=n(J,"LI",{});var VBe=s(XF);$2e=n(VBe,"STRONG",{});var bCt=s($2e);pKo=r(bCt,"bloom"),bCt.forEach(t),_Ko=r(VBe," \u2014 "),Yz=n(VBe,"A",{href:!0});var vCt=s(Yz);uKo=r(vCt,"BloomForTokenClassification"),vCt.forEach(t),bKo=r(VBe," (BLOOM model)"),VBe.forEach(t),vKo=i(J),zF=n(J,"LI",{});var XBe=s(zF);k2e=n(XBe,"STRONG",{});var FCt=s(k2e);FKo=r(FCt,"camembert"),FCt.forEach(t),TKo=r(XBe," \u2014 "),Kz=n(XBe,"A",{href:!0});var TCt=s(Kz);MKo=r(TCt,"CamembertForTokenClassification"),TCt.forEach(t),EKo=r(XBe," (CamemBERT model)"),XBe.forEach(t),CKo=i(J),QF=n(J,"LI",{});var zBe=s(QF);S2e=n(zBe,"STRONG",{});var MCt=s(S2e);wKo=r(MCt,"canine"),MCt.forEach(t),AKo=r(zBe," \u2014 "),Zz=n(zBe,"A",{href:!0});var ECt=s(Zz);LKo=r(ECt,"CanineForTokenClassification"),ECt.forEach(t),yKo=r(zBe," (CANINE model)"),zBe.forEach(t),xKo=i(J),WF=n(J,"LI",{});var QBe=s(WF);R2e=n(QBe,"STRONG",{});var CCt=s(R2e);$Ko=r(CCt,"convbert"),CCt.forEach(t),kKo=r(QBe," \u2014 "),eQ=n(QBe,"A",{href:!0});var wCt=s(eQ);SKo=r(wCt,"ConvBertForTokenClassification"),wCt.forEach(t),RKo=r(QBe," (ConvBERT model)"),QBe.forEach(t),PKo=i(J),HF=n(J,"LI",{});var WBe=s(HF);P2e=n(WBe,"STRONG",{});var ACt=s(P2e);BKo=r(ACt,"data2vec-text"),ACt.forEach(t),NKo=r(WBe," \u2014 "),oQ=n(WBe,"A",{href:!0});var LCt=s(oQ);IKo=r(LCt,"Data2VecTextForTokenClassification"),LCt.forEach(t),qKo=r(WBe," (Data2VecText model)"),WBe.forEach(t),jKo=i(J),UF=n(J,"LI",{});var HBe=s(UF);B2e=n(HBe,"STRONG",{});var yCt=s(B2e);DKo=r(yCt,"deberta"),yCt.forEach(t),GKo=r(HBe," \u2014 "),rQ=n(HBe,"A",{href:!0});var xCt=s(rQ);OKo=r(xCt,"DebertaForTokenClassification"),xCt.forEach(t),VKo=r(HBe," (DeBERTa model)"),HBe.forEach(t),XKo=i(J),JF=n(J,"LI",{});var UBe=s(JF);N2e=n(UBe,"STRONG",{});var $Ct=s(N2e);zKo=r($Ct,"deberta-v2"),$Ct.forEach(t),QKo=r(UBe," \u2014 "),tQ=n(UBe,"A",{href:!0});var kCt=s(tQ);WKo=r(kCt,"DebertaV2ForTokenClassification"),kCt.forEach(t),HKo=r(UBe," (DeBERTa-v2 model)"),UBe.forEach(t),UKo=i(J),YF=n(J,"LI",{});var JBe=s(YF);I2e=n(JBe,"STRONG",{});var SCt=s(I2e);JKo=r(SCt,"distilbert"),SCt.forEach(t),YKo=r(JBe," \u2014 "),aQ=n(JBe,"A",{href:!0});var RCt=s(aQ);KKo=r(RCt,"DistilBertForTokenClassification"),RCt.forEach(t),ZKo=r(JBe," (DistilBERT model)"),JBe.forEach(t),eZo=i(J),KF=n(J,"LI",{});var YBe=s(KF);q2e=n(YBe,"STRONG",{});var PCt=s(q2e);oZo=r(PCt,"electra"),PCt.forEach(t),rZo=r(YBe," \u2014 "),nQ=n(YBe,"A",{href:!0});var BCt=s(nQ);tZo=r(BCt,"ElectraForTokenClassification"),BCt.forEach(t),aZo=r(YBe," (ELECTRA model)"),YBe.forEach(t),nZo=i(J),ZF=n(J,"LI",{});var KBe=s(ZF);j2e=n(KBe,"STRONG",{});var NCt=s(j2e);sZo=r(NCt,"flaubert"),NCt.forEach(t),lZo=r(KBe," \u2014 "),sQ=n(KBe,"A",{href:!0});var ICt=s(sQ);iZo=r(ICt,"FlaubertForTokenClassification"),ICt.forEach(t),dZo=r(KBe," (FlauBERT model)"),KBe.forEach(t),cZo=i(J),e6=n(J,"LI",{});var ZBe=s(e6);D2e=n(ZBe,"STRONG",{});var qCt=s(D2e);fZo=r(qCt,"fnet"),qCt.forEach(t),mZo=r(ZBe," \u2014 "),lQ=n(ZBe,"A",{href:!0});var jCt=s(lQ);gZo=r(jCt,"FNetForTokenClassification"),jCt.forEach(t),hZo=r(ZBe," (FNet model)"),ZBe.forEach(t),pZo=i(J),o6=n(J,"LI",{});var eNe=s(o6);G2e=n(eNe,"STRONG",{});var DCt=s(G2e);_Zo=r(DCt,"funnel"),DCt.forEach(t),uZo=r(eNe," \u2014 "),iQ=n(eNe,"A",{href:!0});var GCt=s(iQ);bZo=r(GCt,"FunnelForTokenClassification"),GCt.forEach(t),vZo=r(eNe," (Funnel Transformer model)"),eNe.forEach(t),FZo=i(J),r6=n(J,"LI",{});var oNe=s(r6);O2e=n(oNe,"STRONG",{});var OCt=s(O2e);TZo=r(OCt,"gpt2"),OCt.forEach(t),MZo=r(oNe," \u2014 "),dQ=n(oNe,"A",{href:!0});var VCt=s(dQ);EZo=r(VCt,"GPT2ForTokenClassification"),VCt.forEach(t),CZo=r(oNe," (OpenAI GPT-2 model)"),oNe.forEach(t),wZo=i(J),t6=n(J,"LI",{});var rNe=s(t6);V2e=n(rNe,"STRONG",{});var XCt=s(V2e);AZo=r(XCt,"ibert"),XCt.forEach(t),LZo=r(rNe," \u2014 "),cQ=n(rNe,"A",{href:!0});var zCt=s(cQ);yZo=r(zCt,"IBertForTokenClassification"),zCt.forEach(t),xZo=r(rNe," (I-BERT model)"),rNe.forEach(t),$Zo=i(J),a6=n(J,"LI",{});var tNe=s(a6);X2e=n(tNe,"STRONG",{});var QCt=s(X2e);kZo=r(QCt,"layoutlm"),QCt.forEach(t),SZo=r(tNe," \u2014 "),fQ=n(tNe,"A",{href:!0});var WCt=s(fQ);RZo=r(WCt,"LayoutLMForTokenClassification"),WCt.forEach(t),PZo=r(tNe," (LayoutLM model)"),tNe.forEach(t),BZo=i(J),n6=n(J,"LI",{});var aNe=s(n6);z2e=n(aNe,"STRONG",{});var HCt=s(z2e);NZo=r(HCt,"layoutlmv2"),HCt.forEach(t),IZo=r(aNe," \u2014 "),mQ=n(aNe,"A",{href:!0});var UCt=s(mQ);qZo=r(UCt,"LayoutLMv2ForTokenClassification"),UCt.forEach(t),jZo=r(aNe," (LayoutLMv2 model)"),aNe.forEach(t),DZo=i(J),s6=n(J,"LI",{});var nNe=s(s6);Q2e=n(nNe,"STRONG",{});var JCt=s(Q2e);GZo=r(JCt,"layoutlmv3"),JCt.forEach(t),OZo=r(nNe," \u2014 "),gQ=n(nNe,"A",{href:!0});var YCt=s(gQ);VZo=r(YCt,"LayoutLMv3ForTokenClassification"),YCt.forEach(t),XZo=r(nNe," (LayoutLMv3 model)"),nNe.forEach(t),zZo=i(J),l6=n(J,"LI",{});var sNe=s(l6);W2e=n(sNe,"STRONG",{});var KCt=s(W2e);QZo=r(KCt,"longformer"),KCt.forEach(t),WZo=r(sNe," \u2014 "),hQ=n(sNe,"A",{href:!0});var ZCt=s(hQ);HZo=r(ZCt,"LongformerForTokenClassification"),ZCt.forEach(t),UZo=r(sNe," (Longformer model)"),sNe.forEach(t),JZo=i(J),i6=n(J,"LI",{});var lNe=s(i6);H2e=n(lNe,"STRONG",{});var e5t=s(H2e);YZo=r(e5t,"megatron-bert"),e5t.forEach(t),KZo=r(lNe," \u2014 "),pQ=n(lNe,"A",{href:!0});var o5t=s(pQ);ZZo=r(o5t,"MegatronBertForTokenClassification"),o5t.forEach(t),eer=r(lNe," (Megatron-BERT model)"),lNe.forEach(t),oer=i(J),d6=n(J,"LI",{});var iNe=s(d6);U2e=n(iNe,"STRONG",{});var r5t=s(U2e);rer=r(r5t,"mobilebert"),r5t.forEach(t),ter=r(iNe," \u2014 "),_Q=n(iNe,"A",{href:!0});var t5t=s(_Q);aer=r(t5t,"MobileBertForTokenClassification"),t5t.forEach(t),ner=r(iNe," (MobileBERT model)"),iNe.forEach(t),ser=i(J),c6=n(J,"LI",{});var dNe=s(c6);J2e=n(dNe,"STRONG",{});var a5t=s(J2e);ler=r(a5t,"mpnet"),a5t.forEach(t),ier=r(dNe," \u2014 "),uQ=n(dNe,"A",{href:!0});var n5t=s(uQ);der=r(n5t,"MPNetForTokenClassification"),n5t.forEach(t),cer=r(dNe," (MPNet model)"),dNe.forEach(t),fer=i(J),f6=n(J,"LI",{});var cNe=s(f6);Y2e=n(cNe,"STRONG",{});var s5t=s(Y2e);mer=r(s5t,"nezha"),s5t.forEach(t),ger=r(cNe," \u2014 "),bQ=n(cNe,"A",{href:!0});var l5t=s(bQ);her=r(l5t,"NezhaForTokenClassification"),l5t.forEach(t),per=r(cNe," (Nezha model)"),cNe.forEach(t),_er=i(J),m6=n(J,"LI",{});var fNe=s(m6);K2e=n(fNe,"STRONG",{});var i5t=s(K2e);uer=r(i5t,"nystromformer"),i5t.forEach(t),ber=r(fNe," \u2014 "),vQ=n(fNe,"A",{href:!0});var d5t=s(vQ);ver=r(d5t,"NystromformerForTokenClassification"),d5t.forEach(t),Fer=r(fNe," (Nystr\xF6mformer model)"),fNe.forEach(t),Ter=i(J),g6=n(J,"LI",{});var mNe=s(g6);Z2e=n(mNe,"STRONG",{});var c5t=s(Z2e);Mer=r(c5t,"qdqbert"),c5t.forEach(t),Eer=r(mNe," \u2014 "),FQ=n(mNe,"A",{href:!0});var f5t=s(FQ);Cer=r(f5t,"QDQBertForTokenClassification"),f5t.forEach(t),wer=r(mNe," (QDQBert model)"),mNe.forEach(t),Aer=i(J),h6=n(J,"LI",{});var gNe=s(h6);e1e=n(gNe,"STRONG",{});var m5t=s(e1e);Ler=r(m5t,"rembert"),m5t.forEach(t),yer=r(gNe," \u2014 "),TQ=n(gNe,"A",{href:!0});var g5t=s(TQ);xer=r(g5t,"RemBertForTokenClassification"),g5t.forEach(t),$er=r(gNe," (RemBERT model)"),gNe.forEach(t),ker=i(J),p6=n(J,"LI",{});var hNe=s(p6);o1e=n(hNe,"STRONG",{});var h5t=s(o1e);Ser=r(h5t,"roberta"),h5t.forEach(t),Rer=r(hNe," \u2014 "),MQ=n(hNe,"A",{href:!0});var p5t=s(MQ);Per=r(p5t,"RobertaForTokenClassification"),p5t.forEach(t),Ber=r(hNe," (RoBERTa model)"),hNe.forEach(t),Ner=i(J),_6=n(J,"LI",{});var pNe=s(_6);r1e=n(pNe,"STRONG",{});var _5t=s(r1e);Ier=r(_5t,"roformer"),_5t.forEach(t),qer=r(pNe," \u2014 "),EQ=n(pNe,"A",{href:!0});var u5t=s(EQ);jer=r(u5t,"RoFormerForTokenClassification"),u5t.forEach(t),Der=r(pNe," (RoFormer model)"),pNe.forEach(t),Ger=i(J),u6=n(J,"LI",{});var _Ne=s(u6);t1e=n(_Ne,"STRONG",{});var b5t=s(t1e);Oer=r(b5t,"squeezebert"),b5t.forEach(t),Ver=r(_Ne," \u2014 "),CQ=n(_Ne,"A",{href:!0});var v5t=s(CQ);Xer=r(v5t,"SqueezeBertForTokenClassification"),v5t.forEach(t),zer=r(_Ne," (SqueezeBERT model)"),_Ne.forEach(t),Qer=i(J),b6=n(J,"LI",{});var uNe=s(b6);a1e=n(uNe,"STRONG",{});var F5t=s(a1e);Wer=r(F5t,"xlm"),F5t.forEach(t),Her=r(uNe," \u2014 "),wQ=n(uNe,"A",{href:!0});var T5t=s(wQ);Uer=r(T5t,"XLMForTokenClassification"),T5t.forEach(t),Jer=r(uNe," (XLM model)"),uNe.forEach(t),Yer=i(J),v6=n(J,"LI",{});var bNe=s(v6);n1e=n(bNe,"STRONG",{});var M5t=s(n1e);Ker=r(M5t,"xlm-roberta"),M5t.forEach(t),Zer=r(bNe," \u2014 "),AQ=n(bNe,"A",{href:!0});var E5t=s(AQ);eor=r(E5t,"XLMRobertaForTokenClassification"),E5t.forEach(t),oor=r(bNe," (XLM-RoBERTa model)"),bNe.forEach(t),ror=i(J),F6=n(J,"LI",{});var vNe=s(F6);s1e=n(vNe,"STRONG",{});var C5t=s(s1e);tor=r(C5t,"xlm-roberta-xl"),C5t.forEach(t),aor=r(vNe," \u2014 "),LQ=n(vNe,"A",{href:!0});var w5t=s(LQ);nor=r(w5t,"XLMRobertaXLForTokenClassification"),w5t.forEach(t),sor=r(vNe," (XLM-RoBERTa-XL model)"),vNe.forEach(t),lor=i(J),T6=n(J,"LI",{});var FNe=s(T6);l1e=n(FNe,"STRONG",{});var A5t=s(l1e);ior=r(A5t,"xlnet"),A5t.forEach(t),dor=r(FNe," \u2014 "),yQ=n(FNe,"A",{href:!0});var L5t=s(yQ);cor=r(L5t,"XLNetForTokenClassification"),L5t.forEach(t),mor=r(FNe," (XLNet model)"),FNe.forEach(t),gor=i(J),M6=n(J,"LI",{});var TNe=s(M6);i1e=n(TNe,"STRONG",{});var y5t=s(i1e);hor=r(y5t,"yoso"),y5t.forEach(t),por=r(TNe," \u2014 "),xQ=n(TNe,"A",{href:!0});var x5t=s(xQ);_or=r(x5t,"YosoForTokenClassification"),x5t.forEach(t),uor=r(TNe," (YOSO model)"),TNe.forEach(t),J.forEach(t),bor=i(_a),E6=n(_a,"P",{});var MNe=s(E6);vor=r(MNe,"The model is set in evaluation mode by default using "),d1e=n(MNe,"CODE",{});var $5t=s(d1e);For=r($5t,"model.eval()"),$5t.forEach(t),Tor=r(MNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c1e=n(MNe,"CODE",{});var k5t=s(c1e);Mor=r(k5t,"model.train()"),k5t.forEach(t),MNe.forEach(t),Eor=i(_a),T(C6.$$.fragment,_a),_a.forEach(t),fl.forEach(t),tze=i(f),pd=n(f,"H2",{class:!0});var dWe=s(pd);w6=n(dWe,"A",{id:!0,class:!0,href:!0});var S5t=s(w6);f1e=n(S5t,"SPAN",{});var R5t=s(f1e);T(yy.$$.fragment,R5t),R5t.forEach(t),S5t.forEach(t),Cor=i(dWe),m1e=n(dWe,"SPAN",{});var P5t=s(m1e);wor=r(P5t,"AutoModelForQuestionAnswering"),P5t.forEach(t),dWe.forEach(t),aze=i(f),Do=n(f,"DIV",{class:!0});var ml=s(Do);T(xy.$$.fragment,ml),Aor=i(ml),_d=n(ml,"P",{});var dte=s(_d);Lor=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$Q=n(dte,"A",{href:!0});var B5t=s($Q);yor=r(B5t,"from_pretrained()"),B5t.forEach(t),xor=r(dte," class method or the "),kQ=n(dte,"A",{href:!0});var N5t=s(kQ);$or=r(N5t,"from_config()"),N5t.forEach(t),kor=r(dte,` class
method.`),dte.forEach(t),Sor=i(ml),$y=n(ml,"P",{});var cWe=s($y);Ror=r(cWe,"This class cannot be instantiated directly using "),g1e=n(cWe,"CODE",{});var I5t=s(g1e);Por=r(I5t,"__init__()"),I5t.forEach(t),Bor=r(cWe," (throws an error)."),cWe.forEach(t),Nor=i(ml),ut=n(ml,"DIV",{class:!0});var Rw=s(ut);T(ky.$$.fragment,Rw),Ior=i(Rw),h1e=n(Rw,"P",{});var q5t=s(h1e);qor=r(q5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q5t.forEach(t),jor=i(Rw),ud=n(Rw,"P",{});var cte=s(ud);Dor=r(cte,`Note:
Loading a model from its configuration file does `),p1e=n(cte,"STRONG",{});var j5t=s(p1e);Gor=r(j5t,"not"),j5t.forEach(t),Oor=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(cte,"A",{href:!0});var D5t=s(SQ);Vor=r(D5t,"from_pretrained()"),D5t.forEach(t),Xor=r(cte," to load the model weights."),cte.forEach(t),zor=i(Rw),T(A6.$$.fragment,Rw),Rw.forEach(t),Qor=i(ml),so=n(ml,"DIV",{class:!0});var ua=s(so);T(Sy.$$.fragment,ua),Wor=i(ua),_1e=n(ua,"P",{});var G5t=s(_1e);Hor=r(G5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G5t.forEach(t),Uor=i(ua),za=n(ua,"P",{});var Pw=s(za);Jor=r(Pw,"The model class to instantiate is selected based on the "),u1e=n(Pw,"CODE",{});var O5t=s(u1e);Yor=r(O5t,"model_type"),O5t.forEach(t),Kor=r(Pw,` property of the config object (either
passed as an argument or loaded from `),b1e=n(Pw,"CODE",{});var V5t=s(b1e);Zor=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),err=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v1e=n(Pw,"CODE",{});var X5t=s(v1e);orr=r(X5t,"pretrained_model_name_or_path"),X5t.forEach(t),rrr=r(Pw,":"),Pw.forEach(t),trr=i(ua),V=n(ua,"UL",{});var X=s(V);L6=n(X,"LI",{});var ENe=s(L6);F1e=n(ENe,"STRONG",{});var z5t=s(F1e);arr=r(z5t,"albert"),z5t.forEach(t),nrr=r(ENe," \u2014 "),RQ=n(ENe,"A",{href:!0});var Q5t=s(RQ);srr=r(Q5t,"AlbertForQuestionAnswering"),Q5t.forEach(t),lrr=r(ENe," (ALBERT model)"),ENe.forEach(t),irr=i(X),y6=n(X,"LI",{});var CNe=s(y6);T1e=n(CNe,"STRONG",{});var W5t=s(T1e);drr=r(W5t,"bart"),W5t.forEach(t),crr=r(CNe," \u2014 "),PQ=n(CNe,"A",{href:!0});var H5t=s(PQ);frr=r(H5t,"BartForQuestionAnswering"),H5t.forEach(t),mrr=r(CNe," (BART model)"),CNe.forEach(t),grr=i(X),x6=n(X,"LI",{});var wNe=s(x6);M1e=n(wNe,"STRONG",{});var U5t=s(M1e);hrr=r(U5t,"bert"),U5t.forEach(t),prr=r(wNe," \u2014 "),BQ=n(wNe,"A",{href:!0});var J5t=s(BQ);_rr=r(J5t,"BertForQuestionAnswering"),J5t.forEach(t),urr=r(wNe," (BERT model)"),wNe.forEach(t),brr=i(X),$6=n(X,"LI",{});var ANe=s($6);E1e=n(ANe,"STRONG",{});var Y5t=s(E1e);vrr=r(Y5t,"big_bird"),Y5t.forEach(t),Frr=r(ANe," \u2014 "),NQ=n(ANe,"A",{href:!0});var K5t=s(NQ);Trr=r(K5t,"BigBirdForQuestionAnswering"),K5t.forEach(t),Mrr=r(ANe," (BigBird model)"),ANe.forEach(t),Err=i(X),k6=n(X,"LI",{});var LNe=s(k6);C1e=n(LNe,"STRONG",{});var Z5t=s(C1e);Crr=r(Z5t,"bigbird_pegasus"),Z5t.forEach(t),wrr=r(LNe," \u2014 "),IQ=n(LNe,"A",{href:!0});var e3t=s(IQ);Arr=r(e3t,"BigBirdPegasusForQuestionAnswering"),e3t.forEach(t),Lrr=r(LNe," (BigBird-Pegasus model)"),LNe.forEach(t),yrr=i(X),S6=n(X,"LI",{});var yNe=s(S6);w1e=n(yNe,"STRONG",{});var o3t=s(w1e);xrr=r(o3t,"camembert"),o3t.forEach(t),$rr=r(yNe," \u2014 "),qQ=n(yNe,"A",{href:!0});var r3t=s(qQ);krr=r(r3t,"CamembertForQuestionAnswering"),r3t.forEach(t),Srr=r(yNe," (CamemBERT model)"),yNe.forEach(t),Rrr=i(X),R6=n(X,"LI",{});var xNe=s(R6);A1e=n(xNe,"STRONG",{});var t3t=s(A1e);Prr=r(t3t,"canine"),t3t.forEach(t),Brr=r(xNe," \u2014 "),jQ=n(xNe,"A",{href:!0});var a3t=s(jQ);Nrr=r(a3t,"CanineForQuestionAnswering"),a3t.forEach(t),Irr=r(xNe," (CANINE model)"),xNe.forEach(t),qrr=i(X),P6=n(X,"LI",{});var $Ne=s(P6);L1e=n($Ne,"STRONG",{});var n3t=s(L1e);jrr=r(n3t,"convbert"),n3t.forEach(t),Drr=r($Ne," \u2014 "),DQ=n($Ne,"A",{href:!0});var s3t=s(DQ);Grr=r(s3t,"ConvBertForQuestionAnswering"),s3t.forEach(t),Orr=r($Ne," (ConvBERT model)"),$Ne.forEach(t),Vrr=i(X),B6=n(X,"LI",{});var kNe=s(B6);y1e=n(kNe,"STRONG",{});var l3t=s(y1e);Xrr=r(l3t,"data2vec-text"),l3t.forEach(t),zrr=r(kNe," \u2014 "),GQ=n(kNe,"A",{href:!0});var i3t=s(GQ);Qrr=r(i3t,"Data2VecTextForQuestionAnswering"),i3t.forEach(t),Wrr=r(kNe," (Data2VecText model)"),kNe.forEach(t),Hrr=i(X),N6=n(X,"LI",{});var SNe=s(N6);x1e=n(SNe,"STRONG",{});var d3t=s(x1e);Urr=r(d3t,"deberta"),d3t.forEach(t),Jrr=r(SNe," \u2014 "),OQ=n(SNe,"A",{href:!0});var c3t=s(OQ);Yrr=r(c3t,"DebertaForQuestionAnswering"),c3t.forEach(t),Krr=r(SNe," (DeBERTa model)"),SNe.forEach(t),Zrr=i(X),I6=n(X,"LI",{});var RNe=s(I6);$1e=n(RNe,"STRONG",{});var f3t=s($1e);etr=r(f3t,"deberta-v2"),f3t.forEach(t),otr=r(RNe," \u2014 "),VQ=n(RNe,"A",{href:!0});var m3t=s(VQ);rtr=r(m3t,"DebertaV2ForQuestionAnswering"),m3t.forEach(t),ttr=r(RNe," (DeBERTa-v2 model)"),RNe.forEach(t),atr=i(X),q6=n(X,"LI",{});var PNe=s(q6);k1e=n(PNe,"STRONG",{});var g3t=s(k1e);ntr=r(g3t,"distilbert"),g3t.forEach(t),str=r(PNe," \u2014 "),XQ=n(PNe,"A",{href:!0});var h3t=s(XQ);ltr=r(h3t,"DistilBertForQuestionAnswering"),h3t.forEach(t),itr=r(PNe," (DistilBERT model)"),PNe.forEach(t),dtr=i(X),j6=n(X,"LI",{});var BNe=s(j6);S1e=n(BNe,"STRONG",{});var p3t=s(S1e);ctr=r(p3t,"electra"),p3t.forEach(t),ftr=r(BNe," \u2014 "),zQ=n(BNe,"A",{href:!0});var _3t=s(zQ);mtr=r(_3t,"ElectraForQuestionAnswering"),_3t.forEach(t),gtr=r(BNe," (ELECTRA model)"),BNe.forEach(t),htr=i(X),D6=n(X,"LI",{});var NNe=s(D6);R1e=n(NNe,"STRONG",{});var u3t=s(R1e);ptr=r(u3t,"flaubert"),u3t.forEach(t),_tr=r(NNe," \u2014 "),QQ=n(NNe,"A",{href:!0});var b3t=s(QQ);utr=r(b3t,"FlaubertForQuestionAnsweringSimple"),b3t.forEach(t),btr=r(NNe," (FlauBERT model)"),NNe.forEach(t),vtr=i(X),G6=n(X,"LI",{});var INe=s(G6);P1e=n(INe,"STRONG",{});var v3t=s(P1e);Ftr=r(v3t,"fnet"),v3t.forEach(t),Ttr=r(INe," \u2014 "),WQ=n(INe,"A",{href:!0});var F3t=s(WQ);Mtr=r(F3t,"FNetForQuestionAnswering"),F3t.forEach(t),Etr=r(INe," (FNet model)"),INe.forEach(t),Ctr=i(X),O6=n(X,"LI",{});var qNe=s(O6);B1e=n(qNe,"STRONG",{});var T3t=s(B1e);wtr=r(T3t,"funnel"),T3t.forEach(t),Atr=r(qNe," \u2014 "),HQ=n(qNe,"A",{href:!0});var M3t=s(HQ);Ltr=r(M3t,"FunnelForQuestionAnswering"),M3t.forEach(t),ytr=r(qNe," (Funnel Transformer model)"),qNe.forEach(t),xtr=i(X),V6=n(X,"LI",{});var jNe=s(V6);N1e=n(jNe,"STRONG",{});var E3t=s(N1e);$tr=r(E3t,"gptj"),E3t.forEach(t),ktr=r(jNe," \u2014 "),UQ=n(jNe,"A",{href:!0});var C3t=s(UQ);Str=r(C3t,"GPTJForQuestionAnswering"),C3t.forEach(t),Rtr=r(jNe," (GPT-J model)"),jNe.forEach(t),Ptr=i(X),X6=n(X,"LI",{});var DNe=s(X6);I1e=n(DNe,"STRONG",{});var w3t=s(I1e);Btr=r(w3t,"ibert"),w3t.forEach(t),Ntr=r(DNe," \u2014 "),JQ=n(DNe,"A",{href:!0});var A3t=s(JQ);Itr=r(A3t,"IBertForQuestionAnswering"),A3t.forEach(t),qtr=r(DNe," (I-BERT model)"),DNe.forEach(t),jtr=i(X),z6=n(X,"LI",{});var GNe=s(z6);q1e=n(GNe,"STRONG",{});var L3t=s(q1e);Dtr=r(L3t,"layoutlmv2"),L3t.forEach(t),Gtr=r(GNe," \u2014 "),YQ=n(GNe,"A",{href:!0});var y3t=s(YQ);Otr=r(y3t,"LayoutLMv2ForQuestionAnswering"),y3t.forEach(t),Vtr=r(GNe," (LayoutLMv2 model)"),GNe.forEach(t),Xtr=i(X),Q6=n(X,"LI",{});var ONe=s(Q6);j1e=n(ONe,"STRONG",{});var x3t=s(j1e);ztr=r(x3t,"layoutlmv3"),x3t.forEach(t),Qtr=r(ONe," \u2014 "),KQ=n(ONe,"A",{href:!0});var $3t=s(KQ);Wtr=r($3t,"LayoutLMv3ForQuestionAnswering"),$3t.forEach(t),Htr=r(ONe," (LayoutLMv3 model)"),ONe.forEach(t),Utr=i(X),W6=n(X,"LI",{});var VNe=s(W6);D1e=n(VNe,"STRONG",{});var k3t=s(D1e);Jtr=r(k3t,"led"),k3t.forEach(t),Ytr=r(VNe," \u2014 "),ZQ=n(VNe,"A",{href:!0});var S3t=s(ZQ);Ktr=r(S3t,"LEDForQuestionAnswering"),S3t.forEach(t),Ztr=r(VNe," (LED model)"),VNe.forEach(t),ear=i(X),H6=n(X,"LI",{});var XNe=s(H6);G1e=n(XNe,"STRONG",{});var R3t=s(G1e);oar=r(R3t,"longformer"),R3t.forEach(t),rar=r(XNe," \u2014 "),eW=n(XNe,"A",{href:!0});var P3t=s(eW);tar=r(P3t,"LongformerForQuestionAnswering"),P3t.forEach(t),aar=r(XNe," (Longformer model)"),XNe.forEach(t),nar=i(X),U6=n(X,"LI",{});var zNe=s(U6);O1e=n(zNe,"STRONG",{});var B3t=s(O1e);sar=r(B3t,"lxmert"),B3t.forEach(t),lar=r(zNe," \u2014 "),oW=n(zNe,"A",{href:!0});var N3t=s(oW);iar=r(N3t,"LxmertForQuestionAnswering"),N3t.forEach(t),dar=r(zNe," (LXMERT model)"),zNe.forEach(t),car=i(X),J6=n(X,"LI",{});var QNe=s(J6);V1e=n(QNe,"STRONG",{});var I3t=s(V1e);far=r(I3t,"mbart"),I3t.forEach(t),mar=r(QNe," \u2014 "),rW=n(QNe,"A",{href:!0});var q3t=s(rW);gar=r(q3t,"MBartForQuestionAnswering"),q3t.forEach(t),har=r(QNe," (mBART model)"),QNe.forEach(t),par=i(X),Y6=n(X,"LI",{});var WNe=s(Y6);X1e=n(WNe,"STRONG",{});var j3t=s(X1e);_ar=r(j3t,"megatron-bert"),j3t.forEach(t),uar=r(WNe," \u2014 "),tW=n(WNe,"A",{href:!0});var D3t=s(tW);bar=r(D3t,"MegatronBertForQuestionAnswering"),D3t.forEach(t),Far=r(WNe," (Megatron-BERT model)"),WNe.forEach(t),Tar=i(X),K6=n(X,"LI",{});var HNe=s(K6);z1e=n(HNe,"STRONG",{});var G3t=s(z1e);Mar=r(G3t,"mobilebert"),G3t.forEach(t),Ear=r(HNe," \u2014 "),aW=n(HNe,"A",{href:!0});var O3t=s(aW);Car=r(O3t,"MobileBertForQuestionAnswering"),O3t.forEach(t),war=r(HNe," (MobileBERT model)"),HNe.forEach(t),Aar=i(X),Z6=n(X,"LI",{});var UNe=s(Z6);Q1e=n(UNe,"STRONG",{});var V3t=s(Q1e);Lar=r(V3t,"mpnet"),V3t.forEach(t),yar=r(UNe," \u2014 "),nW=n(UNe,"A",{href:!0});var X3t=s(nW);xar=r(X3t,"MPNetForQuestionAnswering"),X3t.forEach(t),$ar=r(UNe," (MPNet model)"),UNe.forEach(t),kar=i(X),eT=n(X,"LI",{});var JNe=s(eT);W1e=n(JNe,"STRONG",{});var z3t=s(W1e);Sar=r(z3t,"mvp"),z3t.forEach(t),Rar=r(JNe," \u2014 "),sW=n(JNe,"A",{href:!0});var Q3t=s(sW);Par=r(Q3t,"MvpForQuestionAnswering"),Q3t.forEach(t),Bar=r(JNe," (MVP model)"),JNe.forEach(t),Nar=i(X),oT=n(X,"LI",{});var YNe=s(oT);H1e=n(YNe,"STRONG",{});var W3t=s(H1e);Iar=r(W3t,"nezha"),W3t.forEach(t),qar=r(YNe," \u2014 "),lW=n(YNe,"A",{href:!0});var H3t=s(lW);jar=r(H3t,"NezhaForQuestionAnswering"),H3t.forEach(t),Dar=r(YNe," (Nezha model)"),YNe.forEach(t),Gar=i(X),rT=n(X,"LI",{});var KNe=s(rT);U1e=n(KNe,"STRONG",{});var U3t=s(U1e);Oar=r(U3t,"nystromformer"),U3t.forEach(t),Var=r(KNe," \u2014 "),iW=n(KNe,"A",{href:!0});var J3t=s(iW);Xar=r(J3t,"NystromformerForQuestionAnswering"),J3t.forEach(t),zar=r(KNe," (Nystr\xF6mformer model)"),KNe.forEach(t),Qar=i(X),tT=n(X,"LI",{});var ZNe=s(tT);J1e=n(ZNe,"STRONG",{});var Y3t=s(J1e);War=r(Y3t,"qdqbert"),Y3t.forEach(t),Har=r(ZNe," \u2014 "),dW=n(ZNe,"A",{href:!0});var K3t=s(dW);Uar=r(K3t,"QDQBertForQuestionAnswering"),K3t.forEach(t),Jar=r(ZNe," (QDQBert model)"),ZNe.forEach(t),Yar=i(X),aT=n(X,"LI",{});var eIe=s(aT);Y1e=n(eIe,"STRONG",{});var Z3t=s(Y1e);Kar=r(Z3t,"reformer"),Z3t.forEach(t),Zar=r(eIe," \u2014 "),cW=n(eIe,"A",{href:!0});var e0t=s(cW);enr=r(e0t,"ReformerForQuestionAnswering"),e0t.forEach(t),onr=r(eIe," (Reformer model)"),eIe.forEach(t),rnr=i(X),nT=n(X,"LI",{});var oIe=s(nT);K1e=n(oIe,"STRONG",{});var o0t=s(K1e);tnr=r(o0t,"rembert"),o0t.forEach(t),anr=r(oIe," \u2014 "),fW=n(oIe,"A",{href:!0});var r0t=s(fW);nnr=r(r0t,"RemBertForQuestionAnswering"),r0t.forEach(t),snr=r(oIe," (RemBERT model)"),oIe.forEach(t),lnr=i(X),sT=n(X,"LI",{});var rIe=s(sT);Z1e=n(rIe,"STRONG",{});var t0t=s(Z1e);inr=r(t0t,"roberta"),t0t.forEach(t),dnr=r(rIe," \u2014 "),mW=n(rIe,"A",{href:!0});var a0t=s(mW);cnr=r(a0t,"RobertaForQuestionAnswering"),a0t.forEach(t),fnr=r(rIe," (RoBERTa model)"),rIe.forEach(t),mnr=i(X),lT=n(X,"LI",{});var tIe=s(lT);ebe=n(tIe,"STRONG",{});var n0t=s(ebe);gnr=r(n0t,"roformer"),n0t.forEach(t),hnr=r(tIe," \u2014 "),gW=n(tIe,"A",{href:!0});var s0t=s(gW);pnr=r(s0t,"RoFormerForQuestionAnswering"),s0t.forEach(t),_nr=r(tIe," (RoFormer model)"),tIe.forEach(t),unr=i(X),iT=n(X,"LI",{});var aIe=s(iT);obe=n(aIe,"STRONG",{});var l0t=s(obe);bnr=r(l0t,"splinter"),l0t.forEach(t),vnr=r(aIe," \u2014 "),hW=n(aIe,"A",{href:!0});var i0t=s(hW);Fnr=r(i0t,"SplinterForQuestionAnswering"),i0t.forEach(t),Tnr=r(aIe," (Splinter model)"),aIe.forEach(t),Mnr=i(X),dT=n(X,"LI",{});var nIe=s(dT);rbe=n(nIe,"STRONG",{});var d0t=s(rbe);Enr=r(d0t,"squeezebert"),d0t.forEach(t),Cnr=r(nIe," \u2014 "),pW=n(nIe,"A",{href:!0});var c0t=s(pW);wnr=r(c0t,"SqueezeBertForQuestionAnswering"),c0t.forEach(t),Anr=r(nIe," (SqueezeBERT model)"),nIe.forEach(t),Lnr=i(X),cT=n(X,"LI",{});var sIe=s(cT);tbe=n(sIe,"STRONG",{});var f0t=s(tbe);ynr=r(f0t,"xlm"),f0t.forEach(t),xnr=r(sIe," \u2014 "),_W=n(sIe,"A",{href:!0});var m0t=s(_W);$nr=r(m0t,"XLMForQuestionAnsweringSimple"),m0t.forEach(t),knr=r(sIe," (XLM model)"),sIe.forEach(t),Snr=i(X),fT=n(X,"LI",{});var lIe=s(fT);abe=n(lIe,"STRONG",{});var g0t=s(abe);Rnr=r(g0t,"xlm-roberta"),g0t.forEach(t),Pnr=r(lIe," \u2014 "),uW=n(lIe,"A",{href:!0});var h0t=s(uW);Bnr=r(h0t,"XLMRobertaForQuestionAnswering"),h0t.forEach(t),Nnr=r(lIe," (XLM-RoBERTa model)"),lIe.forEach(t),Inr=i(X),mT=n(X,"LI",{});var iIe=s(mT);nbe=n(iIe,"STRONG",{});var p0t=s(nbe);qnr=r(p0t,"xlm-roberta-xl"),p0t.forEach(t),jnr=r(iIe," \u2014 "),bW=n(iIe,"A",{href:!0});var _0t=s(bW);Dnr=r(_0t,"XLMRobertaXLForQuestionAnswering"),_0t.forEach(t),Gnr=r(iIe," (XLM-RoBERTa-XL model)"),iIe.forEach(t),Onr=i(X),gT=n(X,"LI",{});var dIe=s(gT);sbe=n(dIe,"STRONG",{});var u0t=s(sbe);Vnr=r(u0t,"xlnet"),u0t.forEach(t),Xnr=r(dIe," \u2014 "),vW=n(dIe,"A",{href:!0});var b0t=s(vW);znr=r(b0t,"XLNetForQuestionAnsweringSimple"),b0t.forEach(t),Qnr=r(dIe," (XLNet model)"),dIe.forEach(t),Wnr=i(X),hT=n(X,"LI",{});var cIe=s(hT);lbe=n(cIe,"STRONG",{});var v0t=s(lbe);Hnr=r(v0t,"yoso"),v0t.forEach(t),Unr=r(cIe," \u2014 "),FW=n(cIe,"A",{href:!0});var F0t=s(FW);Jnr=r(F0t,"YosoForQuestionAnswering"),F0t.forEach(t),Ynr=r(cIe," (YOSO model)"),cIe.forEach(t),X.forEach(t),Knr=i(ua),pT=n(ua,"P",{});var fIe=s(pT);Znr=r(fIe,"The model is set in evaluation mode by default using "),ibe=n(fIe,"CODE",{});var T0t=s(ibe);esr=r(T0t,"model.eval()"),T0t.forEach(t),osr=r(fIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dbe=n(fIe,"CODE",{});var M0t=s(dbe);rsr=r(M0t,"model.train()"),M0t.forEach(t),fIe.forEach(t),tsr=i(ua),T(_T.$$.fragment,ua),ua.forEach(t),ml.forEach(t),nze=i(f),bd=n(f,"H2",{class:!0});var fWe=s(bd);uT=n(fWe,"A",{id:!0,class:!0,href:!0});var E0t=s(uT);cbe=n(E0t,"SPAN",{});var C0t=s(cbe);T(Ry.$$.fragment,C0t),C0t.forEach(t),E0t.forEach(t),asr=i(fWe),fbe=n(fWe,"SPAN",{});var w0t=s(fbe);nsr=r(w0t,"AutoModelForTableQuestionAnswering"),w0t.forEach(t),fWe.forEach(t),sze=i(f),Go=n(f,"DIV",{class:!0});var gl=s(Go);T(Py.$$.fragment,gl),ssr=i(gl),vd=n(gl,"P",{});var fte=s(vd);lsr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TW=n(fte,"A",{href:!0});var A0t=s(TW);isr=r(A0t,"from_pretrained()"),A0t.forEach(t),dsr=r(fte," class method or the "),MW=n(fte,"A",{href:!0});var L0t=s(MW);csr=r(L0t,"from_config()"),L0t.forEach(t),fsr=r(fte,` class
method.`),fte.forEach(t),msr=i(gl),By=n(gl,"P",{});var mWe=s(By);gsr=r(mWe,"This class cannot be instantiated directly using "),mbe=n(mWe,"CODE",{});var y0t=s(mbe);hsr=r(y0t,"__init__()"),y0t.forEach(t),psr=r(mWe," (throws an error)."),mWe.forEach(t),_sr=i(gl),bt=n(gl,"DIV",{class:!0});var Bw=s(bt);T(Ny.$$.fragment,Bw),usr=i(Bw),gbe=n(Bw,"P",{});var x0t=s(gbe);bsr=r(x0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),x0t.forEach(t),vsr=i(Bw),Fd=n(Bw,"P",{});var mte=s(Fd);Fsr=r(mte,`Note:
Loading a model from its configuration file does `),hbe=n(mte,"STRONG",{});var $0t=s(hbe);Tsr=r($0t,"not"),$0t.forEach(t),Msr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(mte,"A",{href:!0});var k0t=s(EW);Esr=r(k0t,"from_pretrained()"),k0t.forEach(t),Csr=r(mte," to load the model weights."),mte.forEach(t),wsr=i(Bw),T(bT.$$.fragment,Bw),Bw.forEach(t),Asr=i(gl),lo=n(gl,"DIV",{class:!0});var ba=s(lo);T(Iy.$$.fragment,ba),Lsr=i(ba),pbe=n(ba,"P",{});var S0t=s(pbe);ysr=r(S0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),S0t.forEach(t),xsr=i(ba),Qa=n(ba,"P",{});var Nw=s(Qa);$sr=r(Nw,"The model class to instantiate is selected based on the "),_be=n(Nw,"CODE",{});var R0t=s(_be);ksr=r(R0t,"model_type"),R0t.forEach(t),Ssr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),ube=n(Nw,"CODE",{});var P0t=s(ube);Rsr=r(P0t,"pretrained_model_name_or_path"),P0t.forEach(t),Psr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bbe=n(Nw,"CODE",{});var B0t=s(bbe);Bsr=r(B0t,"pretrained_model_name_or_path"),B0t.forEach(t),Nsr=r(Nw,":"),Nw.forEach(t),Isr=i(ba),vbe=n(ba,"UL",{});var N0t=s(vbe);vT=n(N0t,"LI",{});var mIe=s(vT);Fbe=n(mIe,"STRONG",{});var I0t=s(Fbe);qsr=r(I0t,"tapas"),I0t.forEach(t),jsr=r(mIe," \u2014 "),CW=n(mIe,"A",{href:!0});var q0t=s(CW);Dsr=r(q0t,"TapasForQuestionAnswering"),q0t.forEach(t),Gsr=r(mIe," (TAPAS model)"),mIe.forEach(t),N0t.forEach(t),Osr=i(ba),FT=n(ba,"P",{});var gIe=s(FT);Vsr=r(gIe,"The model is set in evaluation mode by default using "),Tbe=n(gIe,"CODE",{});var j0t=s(Tbe);Xsr=r(j0t,"model.eval()"),j0t.forEach(t),zsr=r(gIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mbe=n(gIe,"CODE",{});var D0t=s(Mbe);Qsr=r(D0t,"model.train()"),D0t.forEach(t),gIe.forEach(t),Wsr=i(ba),T(TT.$$.fragment,ba),ba.forEach(t),gl.forEach(t),lze=i(f),Td=n(f,"H2",{class:!0});var gWe=s(Td);MT=n(gWe,"A",{id:!0,class:!0,href:!0});var G0t=s(MT);Ebe=n(G0t,"SPAN",{});var O0t=s(Ebe);T(qy.$$.fragment,O0t),O0t.forEach(t),G0t.forEach(t),Hsr=i(gWe),Cbe=n(gWe,"SPAN",{});var V0t=s(Cbe);Usr=r(V0t,"AutoModelForImageClassification"),V0t.forEach(t),gWe.forEach(t),ize=i(f),Oo=n(f,"DIV",{class:!0});var hl=s(Oo);T(jy.$$.fragment,hl),Jsr=i(hl),Md=n(hl,"P",{});var gte=s(Md);Ysr=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wW=n(gte,"A",{href:!0});var X0t=s(wW);Ksr=r(X0t,"from_pretrained()"),X0t.forEach(t),Zsr=r(gte," class method or the "),AW=n(gte,"A",{href:!0});var z0t=s(AW);elr=r(z0t,"from_config()"),z0t.forEach(t),olr=r(gte,` class
method.`),gte.forEach(t),rlr=i(hl),Dy=n(hl,"P",{});var hWe=s(Dy);tlr=r(hWe,"This class cannot be instantiated directly using "),wbe=n(hWe,"CODE",{});var Q0t=s(wbe);alr=r(Q0t,"__init__()"),Q0t.forEach(t),nlr=r(hWe," (throws an error)."),hWe.forEach(t),slr=i(hl),vt=n(hl,"DIV",{class:!0});var Iw=s(vt);T(Gy.$$.fragment,Iw),llr=i(Iw),Abe=n(Iw,"P",{});var W0t=s(Abe);ilr=r(W0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),W0t.forEach(t),dlr=i(Iw),Ed=n(Iw,"P",{});var hte=s(Ed);clr=r(hte,`Note:
Loading a model from its configuration file does `),Lbe=n(hte,"STRONG",{});var H0t=s(Lbe);flr=r(H0t,"not"),H0t.forEach(t),mlr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=n(hte,"A",{href:!0});var U0t=s(LW);glr=r(U0t,"from_pretrained()"),U0t.forEach(t),hlr=r(hte," to load the model weights."),hte.forEach(t),plr=i(Iw),T(ET.$$.fragment,Iw),Iw.forEach(t),_lr=i(hl),io=n(hl,"DIV",{class:!0});var va=s(io);T(Oy.$$.fragment,va),ulr=i(va),ybe=n(va,"P",{});var J0t=s(ybe);blr=r(J0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),J0t.forEach(t),vlr=i(va),Wa=n(va,"P",{});var qw=s(Wa);Flr=r(qw,"The model class to instantiate is selected based on the "),xbe=n(qw,"CODE",{});var Y0t=s(xbe);Tlr=r(Y0t,"model_type"),Y0t.forEach(t),Mlr=r(qw,` property of the config object (either
passed as an argument or loaded from `),$be=n(qw,"CODE",{});var K0t=s($be);Elr=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),Clr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=n(qw,"CODE",{});var Z0t=s(kbe);wlr=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),Alr=r(qw,":"),qw.forEach(t),Llr=i(va),ve=n(va,"UL",{});var Te=s(ve);CT=n(Te,"LI",{});var hIe=s(CT);Sbe=n(hIe,"STRONG",{});var ewt=s(Sbe);ylr=r(ewt,"beit"),ewt.forEach(t),xlr=r(hIe," \u2014 "),yW=n(hIe,"A",{href:!0});var owt=s(yW);$lr=r(owt,"BeitForImageClassification"),owt.forEach(t),klr=r(hIe," (BEiT model)"),hIe.forEach(t),Slr=i(Te),wT=n(Te,"LI",{});var pIe=s(wT);Rbe=n(pIe,"STRONG",{});var rwt=s(Rbe);Rlr=r(rwt,"convnext"),rwt.forEach(t),Plr=r(pIe," \u2014 "),xW=n(pIe,"A",{href:!0});var twt=s(xW);Blr=r(twt,"ConvNextForImageClassification"),twt.forEach(t),Nlr=r(pIe," (ConvNeXT model)"),pIe.forEach(t),Ilr=i(Te),AT=n(Te,"LI",{});var _Ie=s(AT);Pbe=n(_Ie,"STRONG",{});var awt=s(Pbe);qlr=r(awt,"cvt"),awt.forEach(t),jlr=r(_Ie," \u2014 "),$W=n(_Ie,"A",{href:!0});var nwt=s($W);Dlr=r(nwt,"CvtForImageClassification"),nwt.forEach(t),Glr=r(_Ie," (CvT model)"),_Ie.forEach(t),Olr=i(Te),LT=n(Te,"LI",{});var uIe=s(LT);Bbe=n(uIe,"STRONG",{});var swt=s(Bbe);Vlr=r(swt,"data2vec-vision"),swt.forEach(t),Xlr=r(uIe," \u2014 "),kW=n(uIe,"A",{href:!0});var lwt=s(kW);zlr=r(lwt,"Data2VecVisionForImageClassification"),lwt.forEach(t),Qlr=r(uIe," (Data2VecVision model)"),uIe.forEach(t),Wlr=i(Te),Us=n(Te,"LI",{});var jS=s(Us);Nbe=n(jS,"STRONG",{});var iwt=s(Nbe);Hlr=r(iwt,"deit"),iwt.forEach(t),Ulr=r(jS," \u2014 "),SW=n(jS,"A",{href:!0});var dwt=s(SW);Jlr=r(dwt,"DeiTForImageClassification"),dwt.forEach(t),Ylr=r(jS," or "),RW=n(jS,"A",{href:!0});var cwt=s(RW);Klr=r(cwt,"DeiTForImageClassificationWithTeacher"),cwt.forEach(t),Zlr=r(jS," (DeiT model)"),jS.forEach(t),eir=i(Te),yT=n(Te,"LI",{});var bIe=s(yT);Ibe=n(bIe,"STRONG",{});var fwt=s(Ibe);oir=r(fwt,"imagegpt"),fwt.forEach(t),rir=r(bIe," \u2014 "),PW=n(bIe,"A",{href:!0});var mwt=s(PW);tir=r(mwt,"ImageGPTForImageClassification"),mwt.forEach(t),air=r(bIe," (ImageGPT model)"),bIe.forEach(t),nir=i(Te),Js=n(Te,"LI",{});var DS=s(Js);qbe=n(DS,"STRONG",{});var gwt=s(qbe);sir=r(gwt,"levit"),gwt.forEach(t),lir=r(DS," \u2014 "),BW=n(DS,"A",{href:!0});var hwt=s(BW);iir=r(hwt,"LevitForImageClassification"),hwt.forEach(t),dir=r(DS," or "),NW=n(DS,"A",{href:!0});var pwt=s(NW);cir=r(pwt,"LevitForImageClassificationWithTeacher"),pwt.forEach(t),fir=r(DS," (LeViT model)"),DS.forEach(t),mir=i(Te),xT=n(Te,"LI",{});var vIe=s(xT);jbe=n(vIe,"STRONG",{});var _wt=s(jbe);gir=r(_wt,"mobilevit"),_wt.forEach(t),hir=r(vIe," \u2014 "),IW=n(vIe,"A",{href:!0});var uwt=s(IW);pir=r(uwt,"MobileViTForImageClassification"),uwt.forEach(t),_ir=r(vIe," (MobileViT model)"),vIe.forEach(t),uir=i(Te),Ft=n(Te,"LI",{});var Pf=s(Ft);Dbe=n(Pf,"STRONG",{});var bwt=s(Dbe);bir=r(bwt,"perceiver"),bwt.forEach(t),vir=r(Pf," \u2014 "),qW=n(Pf,"A",{href:!0});var vwt=s(qW);Fir=r(vwt,"PerceiverForImageClassificationLearned"),vwt.forEach(t),Tir=r(Pf," or "),jW=n(Pf,"A",{href:!0});var Fwt=s(jW);Mir=r(Fwt,"PerceiverForImageClassificationFourier"),Fwt.forEach(t),Eir=r(Pf," or "),DW=n(Pf,"A",{href:!0});var Twt=s(DW);Cir=r(Twt,"PerceiverForImageClassificationConvProcessing"),Twt.forEach(t),wir=r(Pf," (Perceiver model)"),Pf.forEach(t),Air=i(Te),$T=n(Te,"LI",{});var FIe=s($T);Gbe=n(FIe,"STRONG",{});var Mwt=s(Gbe);Lir=r(Mwt,"poolformer"),Mwt.forEach(t),yir=r(FIe," \u2014 "),GW=n(FIe,"A",{href:!0});var Ewt=s(GW);xir=r(Ewt,"PoolFormerForImageClassification"),Ewt.forEach(t),$ir=r(FIe," (PoolFormer model)"),FIe.forEach(t),kir=i(Te),kT=n(Te,"LI",{});var TIe=s(kT);Obe=n(TIe,"STRONG",{});var Cwt=s(Obe);Sir=r(Cwt,"regnet"),Cwt.forEach(t),Rir=r(TIe," \u2014 "),OW=n(TIe,"A",{href:!0});var wwt=s(OW);Pir=r(wwt,"RegNetForImageClassification"),wwt.forEach(t),Bir=r(TIe," (RegNet model)"),TIe.forEach(t),Nir=i(Te),ST=n(Te,"LI",{});var MIe=s(ST);Vbe=n(MIe,"STRONG",{});var Awt=s(Vbe);Iir=r(Awt,"resnet"),Awt.forEach(t),qir=r(MIe," \u2014 "),VW=n(MIe,"A",{href:!0});var Lwt=s(VW);jir=r(Lwt,"ResNetForImageClassification"),Lwt.forEach(t),Dir=r(MIe," (ResNet model)"),MIe.forEach(t),Gir=i(Te),RT=n(Te,"LI",{});var EIe=s(RT);Xbe=n(EIe,"STRONG",{});var ywt=s(Xbe);Oir=r(ywt,"segformer"),ywt.forEach(t),Vir=r(EIe," \u2014 "),XW=n(EIe,"A",{href:!0});var xwt=s(XW);Xir=r(xwt,"SegformerForImageClassification"),xwt.forEach(t),zir=r(EIe," (SegFormer model)"),EIe.forEach(t),Qir=i(Te),PT=n(Te,"LI",{});var CIe=s(PT);zbe=n(CIe,"STRONG",{});var $wt=s(zbe);Wir=r($wt,"swin"),$wt.forEach(t),Hir=r(CIe," \u2014 "),zW=n(CIe,"A",{href:!0});var kwt=s(zW);Uir=r(kwt,"SwinForImageClassification"),kwt.forEach(t),Jir=r(CIe," (Swin Transformer model)"),CIe.forEach(t),Yir=i(Te),BT=n(Te,"LI",{});var wIe=s(BT);Qbe=n(wIe,"STRONG",{});var Swt=s(Qbe);Kir=r(Swt,"van"),Swt.forEach(t),Zir=r(wIe," \u2014 "),QW=n(wIe,"A",{href:!0});var Rwt=s(QW);edr=r(Rwt,"VanForImageClassification"),Rwt.forEach(t),odr=r(wIe," (VAN model)"),wIe.forEach(t),rdr=i(Te),NT=n(Te,"LI",{});var AIe=s(NT);Wbe=n(AIe,"STRONG",{});var Pwt=s(Wbe);tdr=r(Pwt,"vit"),Pwt.forEach(t),adr=r(AIe," \u2014 "),WW=n(AIe,"A",{href:!0});var Bwt=s(WW);ndr=r(Bwt,"ViTForImageClassification"),Bwt.forEach(t),sdr=r(AIe," (ViT model)"),AIe.forEach(t),Te.forEach(t),ldr=i(va),IT=n(va,"P",{});var LIe=s(IT);idr=r(LIe,"The model is set in evaluation mode by default using "),Hbe=n(LIe,"CODE",{});var Nwt=s(Hbe);ddr=r(Nwt,"model.eval()"),Nwt.forEach(t),cdr=r(LIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=n(LIe,"CODE",{});var Iwt=s(Ube);fdr=r(Iwt,"model.train()"),Iwt.forEach(t),LIe.forEach(t),mdr=i(va),T(qT.$$.fragment,va),va.forEach(t),hl.forEach(t),dze=i(f),Cd=n(f,"H2",{class:!0});var pWe=s(Cd);jT=n(pWe,"A",{id:!0,class:!0,href:!0});var qwt=s(jT);Jbe=n(qwt,"SPAN",{});var jwt=s(Jbe);T(Vy.$$.fragment,jwt),jwt.forEach(t),qwt.forEach(t),gdr=i(pWe),Ybe=n(pWe,"SPAN",{});var Dwt=s(Ybe);hdr=r(Dwt,"AutoModelForVision2Seq"),Dwt.forEach(t),pWe.forEach(t),cze=i(f),Vo=n(f,"DIV",{class:!0});var pl=s(Vo);T(Xy.$$.fragment,pl),pdr=i(pl),wd=n(pl,"P",{});var pte=s(wd);_dr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HW=n(pte,"A",{href:!0});var Gwt=s(HW);udr=r(Gwt,"from_pretrained()"),Gwt.forEach(t),bdr=r(pte," class method or the "),UW=n(pte,"A",{href:!0});var Owt=s(UW);vdr=r(Owt,"from_config()"),Owt.forEach(t),Fdr=r(pte,` class
method.`),pte.forEach(t),Tdr=i(pl),zy=n(pl,"P",{});var _We=s(zy);Mdr=r(_We,"This class cannot be instantiated directly using "),Kbe=n(_We,"CODE",{});var Vwt=s(Kbe);Edr=r(Vwt,"__init__()"),Vwt.forEach(t),Cdr=r(_We," (throws an error)."),_We.forEach(t),wdr=i(pl),Tt=n(pl,"DIV",{class:!0});var jw=s(Tt);T(Qy.$$.fragment,jw),Adr=i(jw),Zbe=n(jw,"P",{});var Xwt=s(Zbe);Ldr=r(Xwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xwt.forEach(t),ydr=i(jw),Ad=n(jw,"P",{});var _te=s(Ad);xdr=r(_te,`Note:
Loading a model from its configuration file does `),eve=n(_te,"STRONG",{});var zwt=s(eve);$dr=r(zwt,"not"),zwt.forEach(t),kdr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(_te,"A",{href:!0});var Qwt=s(JW);Sdr=r(Qwt,"from_pretrained()"),Qwt.forEach(t),Rdr=r(_te," to load the model weights."),_te.forEach(t),Pdr=i(jw),T(DT.$$.fragment,jw),jw.forEach(t),Bdr=i(pl),co=n(pl,"DIV",{class:!0});var Fa=s(co);T(Wy.$$.fragment,Fa),Ndr=i(Fa),ove=n(Fa,"P",{});var Wwt=s(ove);Idr=r(Wwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wwt.forEach(t),qdr=i(Fa),Ha=n(Fa,"P",{});var Dw=s(Ha);jdr=r(Dw,"The model class to instantiate is selected based on the "),rve=n(Dw,"CODE",{});var Hwt=s(rve);Ddr=r(Hwt,"model_type"),Hwt.forEach(t),Gdr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),tve=n(Dw,"CODE",{});var Uwt=s(tve);Odr=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),Vdr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=n(Dw,"CODE",{});var Jwt=s(ave);Xdr=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),zdr=r(Dw,":"),Dw.forEach(t),Qdr=i(Fa),nve=n(Fa,"UL",{});var Ywt=s(nve);GT=n(Ywt,"LI",{});var yIe=s(GT);sve=n(yIe,"STRONG",{});var Kwt=s(sve);Wdr=r(Kwt,"vision-encoder-decoder"),Kwt.forEach(t),Hdr=r(yIe," \u2014 "),YW=n(yIe,"A",{href:!0});var Zwt=s(YW);Udr=r(Zwt,"VisionEncoderDecoderModel"),Zwt.forEach(t),Jdr=r(yIe," (Vision Encoder decoder model)"),yIe.forEach(t),Ywt.forEach(t),Ydr=i(Fa),OT=n(Fa,"P",{});var xIe=s(OT);Kdr=r(xIe,"The model is set in evaluation mode by default using "),lve=n(xIe,"CODE",{});var eAt=s(lve);Zdr=r(eAt,"model.eval()"),eAt.forEach(t),ecr=r(xIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ive=n(xIe,"CODE",{});var oAt=s(ive);ocr=r(oAt,"model.train()"),oAt.forEach(t),xIe.forEach(t),rcr=i(Fa),T(VT.$$.fragment,Fa),Fa.forEach(t),pl.forEach(t),fze=i(f),Ld=n(f,"H2",{class:!0});var uWe=s(Ld);XT=n(uWe,"A",{id:!0,class:!0,href:!0});var rAt=s(XT);dve=n(rAt,"SPAN",{});var tAt=s(dve);T(Hy.$$.fragment,tAt),tAt.forEach(t),rAt.forEach(t),tcr=i(uWe),cve=n(uWe,"SPAN",{});var aAt=s(cve);acr=r(aAt,"AutoModelForVisualQuestionAnswering"),aAt.forEach(t),uWe.forEach(t),mze=i(f),Xo=n(f,"DIV",{class:!0});var _l=s(Xo);T(Uy.$$.fragment,_l),ncr=i(_l),yd=n(_l,"P",{});var ute=s(yd);scr=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),KW=n(ute,"A",{href:!0});var nAt=s(KW);lcr=r(nAt,"from_pretrained()"),nAt.forEach(t),icr=r(ute," class method or the "),ZW=n(ute,"A",{href:!0});var sAt=s(ZW);dcr=r(sAt,"from_config()"),sAt.forEach(t),ccr=r(ute,` class
method.`),ute.forEach(t),fcr=i(_l),Jy=n(_l,"P",{});var bWe=s(Jy);mcr=r(bWe,"This class cannot be instantiated directly using "),fve=n(bWe,"CODE",{});var lAt=s(fve);gcr=r(lAt,"__init__()"),lAt.forEach(t),hcr=r(bWe," (throws an error)."),bWe.forEach(t),pcr=i(_l),Mt=n(_l,"DIV",{class:!0});var Gw=s(Mt);T(Yy.$$.fragment,Gw),_cr=i(Gw),mve=n(Gw,"P",{});var iAt=s(mve);ucr=r(iAt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),iAt.forEach(t),bcr=i(Gw),xd=n(Gw,"P",{});var bte=s(xd);vcr=r(bte,`Note:
Loading a model from its configuration file does `),gve=n(bte,"STRONG",{});var dAt=s(gve);Fcr=r(dAt,"not"),dAt.forEach(t),Tcr=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(bte,"A",{href:!0});var cAt=s(eH);Mcr=r(cAt,"from_pretrained()"),cAt.forEach(t),Ecr=r(bte," to load the model weights."),bte.forEach(t),Ccr=i(Gw),T(zT.$$.fragment,Gw),Gw.forEach(t),wcr=i(_l),fo=n(_l,"DIV",{class:!0});var Ta=s(fo);T(Ky.$$.fragment,Ta),Acr=i(Ta),hve=n(Ta,"P",{});var fAt=s(hve);Lcr=r(fAt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),fAt.forEach(t),ycr=i(Ta),Ua=n(Ta,"P",{});var Ow=s(Ua);xcr=r(Ow,"The model class to instantiate is selected based on the "),pve=n(Ow,"CODE",{});var mAt=s(pve);$cr=r(mAt,"model_type"),mAt.forEach(t),kcr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),_ve=n(Ow,"CODE",{});var gAt=s(_ve);Scr=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),Rcr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(Ow,"CODE",{});var hAt=s(uve);Pcr=r(hAt,"pretrained_model_name_or_path"),hAt.forEach(t),Bcr=r(Ow,":"),Ow.forEach(t),Ncr=i(Ta),bve=n(Ta,"UL",{});var pAt=s(bve);QT=n(pAt,"LI",{});var $Ie=s(QT);vve=n($Ie,"STRONG",{});var _At=s(vve);Icr=r(_At,"vilt"),_At.forEach(t),qcr=r($Ie," \u2014 "),oH=n($Ie,"A",{href:!0});var uAt=s(oH);jcr=r(uAt,"ViltForQuestionAnswering"),uAt.forEach(t),Dcr=r($Ie," (ViLT model)"),$Ie.forEach(t),pAt.forEach(t),Gcr=i(Ta),WT=n(Ta,"P",{});var kIe=s(WT);Ocr=r(kIe,"The model is set in evaluation mode by default using "),Fve=n(kIe,"CODE",{});var bAt=s(Fve);Vcr=r(bAt,"model.eval()"),bAt.forEach(t),Xcr=r(kIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tve=n(kIe,"CODE",{});var vAt=s(Tve);zcr=r(vAt,"model.train()"),vAt.forEach(t),kIe.forEach(t),Qcr=i(Ta),T(HT.$$.fragment,Ta),Ta.forEach(t),_l.forEach(t),gze=i(f),$d=n(f,"H2",{class:!0});var vWe=s($d);UT=n(vWe,"A",{id:!0,class:!0,href:!0});var FAt=s(UT);Mve=n(FAt,"SPAN",{});var TAt=s(Mve);T(Zy.$$.fragment,TAt),TAt.forEach(t),FAt.forEach(t),Wcr=i(vWe),Eve=n(vWe,"SPAN",{});var MAt=s(Eve);Hcr=r(MAt,"AutoModelForAudioClassification"),MAt.forEach(t),vWe.forEach(t),hze=i(f),zo=n(f,"DIV",{class:!0});var ul=s(zo);T(e9.$$.fragment,ul),Ucr=i(ul),kd=n(ul,"P",{});var vte=s(kd);Jcr=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rH=n(vte,"A",{href:!0});var EAt=s(rH);Ycr=r(EAt,"from_pretrained()"),EAt.forEach(t),Kcr=r(vte," class method or the "),tH=n(vte,"A",{href:!0});var CAt=s(tH);Zcr=r(CAt,"from_config()"),CAt.forEach(t),efr=r(vte,` class
method.`),vte.forEach(t),ofr=i(ul),o9=n(ul,"P",{});var FWe=s(o9);rfr=r(FWe,"This class cannot be instantiated directly using "),Cve=n(FWe,"CODE",{});var wAt=s(Cve);tfr=r(wAt,"__init__()"),wAt.forEach(t),afr=r(FWe," (throws an error)."),FWe.forEach(t),nfr=i(ul),Et=n(ul,"DIV",{class:!0});var Vw=s(Et);T(r9.$$.fragment,Vw),sfr=i(Vw),wve=n(Vw,"P",{});var AAt=s(wve);lfr=r(AAt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),AAt.forEach(t),ifr=i(Vw),Sd=n(Vw,"P",{});var Fte=s(Sd);dfr=r(Fte,`Note:
Loading a model from its configuration file does `),Ave=n(Fte,"STRONG",{});var LAt=s(Ave);cfr=r(LAt,"not"),LAt.forEach(t),ffr=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(Fte,"A",{href:!0});var yAt=s(aH);mfr=r(yAt,"from_pretrained()"),yAt.forEach(t),gfr=r(Fte," to load the model weights."),Fte.forEach(t),hfr=i(Vw),T(JT.$$.fragment,Vw),Vw.forEach(t),pfr=i(ul),mo=n(ul,"DIV",{class:!0});var Ma=s(mo);T(t9.$$.fragment,Ma),_fr=i(Ma),Lve=n(Ma,"P",{});var xAt=s(Lve);ufr=r(xAt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xAt.forEach(t),bfr=i(Ma),Ja=n(Ma,"P",{});var Xw=s(Ja);vfr=r(Xw,"The model class to instantiate is selected based on the "),yve=n(Xw,"CODE",{});var $At=s(yve);Ffr=r($At,"model_type"),$At.forEach(t),Tfr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),xve=n(Xw,"CODE",{});var kAt=s(xve);Mfr=r(kAt,"pretrained_model_name_or_path"),kAt.forEach(t),Efr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=n(Xw,"CODE",{});var SAt=s($ve);Cfr=r(SAt,"pretrained_model_name_or_path"),SAt.forEach(t),wfr=r(Xw,":"),Xw.forEach(t),Afr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);YT=n(ze,"LI",{});var SIe=s(YT);kve=n(SIe,"STRONG",{});var RAt=s(kve);Lfr=r(RAt,"data2vec-audio"),RAt.forEach(t),yfr=r(SIe," \u2014 "),nH=n(SIe,"A",{href:!0});var PAt=s(nH);xfr=r(PAt,"Data2VecAudioForSequenceClassification"),PAt.forEach(t),$fr=r(SIe," (Data2VecAudio model)"),SIe.forEach(t),kfr=i(ze),KT=n(ze,"LI",{});var RIe=s(KT);Sve=n(RIe,"STRONG",{});var BAt=s(Sve);Sfr=r(BAt,"hubert"),BAt.forEach(t),Rfr=r(RIe," \u2014 "),sH=n(RIe,"A",{href:!0});var NAt=s(sH);Pfr=r(NAt,"HubertForSequenceClassification"),NAt.forEach(t),Bfr=r(RIe," (Hubert model)"),RIe.forEach(t),Nfr=i(ze),ZT=n(ze,"LI",{});var PIe=s(ZT);Rve=n(PIe,"STRONG",{});var IAt=s(Rve);Ifr=r(IAt,"sew"),IAt.forEach(t),qfr=r(PIe," \u2014 "),lH=n(PIe,"A",{href:!0});var qAt=s(lH);jfr=r(qAt,"SEWForSequenceClassification"),qAt.forEach(t),Dfr=r(PIe," (SEW model)"),PIe.forEach(t),Gfr=i(ze),e7=n(ze,"LI",{});var BIe=s(e7);Pve=n(BIe,"STRONG",{});var jAt=s(Pve);Ofr=r(jAt,"sew-d"),jAt.forEach(t),Vfr=r(BIe," \u2014 "),iH=n(BIe,"A",{href:!0});var DAt=s(iH);Xfr=r(DAt,"SEWDForSequenceClassification"),DAt.forEach(t),zfr=r(BIe," (SEW-D model)"),BIe.forEach(t),Qfr=i(ze),o7=n(ze,"LI",{});var NIe=s(o7);Bve=n(NIe,"STRONG",{});var GAt=s(Bve);Wfr=r(GAt,"unispeech"),GAt.forEach(t),Hfr=r(NIe," \u2014 "),dH=n(NIe,"A",{href:!0});var OAt=s(dH);Ufr=r(OAt,"UniSpeechForSequenceClassification"),OAt.forEach(t),Jfr=r(NIe," (UniSpeech model)"),NIe.forEach(t),Yfr=i(ze),r7=n(ze,"LI",{});var IIe=s(r7);Nve=n(IIe,"STRONG",{});var VAt=s(Nve);Kfr=r(VAt,"unispeech-sat"),VAt.forEach(t),Zfr=r(IIe," \u2014 "),cH=n(IIe,"A",{href:!0});var XAt=s(cH);emr=r(XAt,"UniSpeechSatForSequenceClassification"),XAt.forEach(t),omr=r(IIe," (UniSpeechSat model)"),IIe.forEach(t),rmr=i(ze),t7=n(ze,"LI",{});var qIe=s(t7);Ive=n(qIe,"STRONG",{});var zAt=s(Ive);tmr=r(zAt,"wav2vec2"),zAt.forEach(t),amr=r(qIe," \u2014 "),fH=n(qIe,"A",{href:!0});var QAt=s(fH);nmr=r(QAt,"Wav2Vec2ForSequenceClassification"),QAt.forEach(t),smr=r(qIe," (Wav2Vec2 model)"),qIe.forEach(t),lmr=i(ze),a7=n(ze,"LI",{});var jIe=s(a7);qve=n(jIe,"STRONG",{});var WAt=s(qve);imr=r(WAt,"wav2vec2-conformer"),WAt.forEach(t),dmr=r(jIe," \u2014 "),mH=n(jIe,"A",{href:!0});var HAt=s(mH);cmr=r(HAt,"Wav2Vec2ConformerForSequenceClassification"),HAt.forEach(t),fmr=r(jIe," (Wav2Vec2-Conformer model)"),jIe.forEach(t),mmr=i(ze),n7=n(ze,"LI",{});var DIe=s(n7);jve=n(DIe,"STRONG",{});var UAt=s(jve);gmr=r(UAt,"wavlm"),UAt.forEach(t),hmr=r(DIe," \u2014 "),gH=n(DIe,"A",{href:!0});var JAt=s(gH);pmr=r(JAt,"WavLMForSequenceClassification"),JAt.forEach(t),_mr=r(DIe," (WavLM model)"),DIe.forEach(t),ze.forEach(t),umr=i(Ma),s7=n(Ma,"P",{});var GIe=s(s7);bmr=r(GIe,"The model is set in evaluation mode by default using "),Dve=n(GIe,"CODE",{});var YAt=s(Dve);vmr=r(YAt,"model.eval()"),YAt.forEach(t),Fmr=r(GIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gve=n(GIe,"CODE",{});var KAt=s(Gve);Tmr=r(KAt,"model.train()"),KAt.forEach(t),GIe.forEach(t),Mmr=i(Ma),T(l7.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),pze=i(f),Rd=n(f,"H2",{class:!0});var TWe=s(Rd);i7=n(TWe,"A",{id:!0,class:!0,href:!0});var ZAt=s(i7);Ove=n(ZAt,"SPAN",{});var eLt=s(Ove);T(a9.$$.fragment,eLt),eLt.forEach(t),ZAt.forEach(t),Emr=i(TWe),Vve=n(TWe,"SPAN",{});var oLt=s(Vve);Cmr=r(oLt,"AutoModelForAudioFrameClassification"),oLt.forEach(t),TWe.forEach(t),_ze=i(f),Qo=n(f,"DIV",{class:!0});var bl=s(Qo);T(n9.$$.fragment,bl),wmr=i(bl),Pd=n(bl,"P",{});var Tte=s(Pd);Amr=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hH=n(Tte,"A",{href:!0});var rLt=s(hH);Lmr=r(rLt,"from_pretrained()"),rLt.forEach(t),ymr=r(Tte," class method or the "),pH=n(Tte,"A",{href:!0});var tLt=s(pH);xmr=r(tLt,"from_config()"),tLt.forEach(t),$mr=r(Tte,` class
method.`),Tte.forEach(t),kmr=i(bl),s9=n(bl,"P",{});var MWe=s(s9);Smr=r(MWe,"This class cannot be instantiated directly using "),Xve=n(MWe,"CODE",{});var aLt=s(Xve);Rmr=r(aLt,"__init__()"),aLt.forEach(t),Pmr=r(MWe," (throws an error)."),MWe.forEach(t),Bmr=i(bl),Ct=n(bl,"DIV",{class:!0});var zw=s(Ct);T(l9.$$.fragment,zw),Nmr=i(zw),zve=n(zw,"P",{});var nLt=s(zve);Imr=r(nLt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),nLt.forEach(t),qmr=i(zw),Bd=n(zw,"P",{});var Mte=s(Bd);jmr=r(Mte,`Note:
Loading a model from its configuration file does `),Qve=n(Mte,"STRONG",{});var sLt=s(Qve);Dmr=r(sLt,"not"),sLt.forEach(t),Gmr=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(Mte,"A",{href:!0});var lLt=s(_H);Omr=r(lLt,"from_pretrained()"),lLt.forEach(t),Vmr=r(Mte," to load the model weights."),Mte.forEach(t),Xmr=i(zw),T(d7.$$.fragment,zw),zw.forEach(t),zmr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(i9.$$.fragment,Ea),Qmr=i(Ea),Wve=n(Ea,"P",{});var iLt=s(Wve);Wmr=r(iLt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),iLt.forEach(t),Hmr=i(Ea),Ya=n(Ea,"P",{});var Qw=s(Ya);Umr=r(Qw,"The model class to instantiate is selected based on the "),Hve=n(Qw,"CODE",{});var dLt=s(Hve);Jmr=r(dLt,"model_type"),dLt.forEach(t),Ymr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Uve=n(Qw,"CODE",{});var cLt=s(Uve);Kmr=r(cLt,"pretrained_model_name_or_path"),cLt.forEach(t),Zmr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=n(Qw,"CODE",{});var fLt=s(Jve);egr=r(fLt,"pretrained_model_name_or_path"),fLt.forEach(t),ogr=r(Qw,":"),Qw.forEach(t),rgr=i(Ea),rt=n(Ea,"UL",{});var vl=s(rt);c7=n(vl,"LI",{});var OIe=s(c7);Yve=n(OIe,"STRONG",{});var mLt=s(Yve);tgr=r(mLt,"data2vec-audio"),mLt.forEach(t),agr=r(OIe," \u2014 "),uH=n(OIe,"A",{href:!0});var gLt=s(uH);ngr=r(gLt,"Data2VecAudioForAudioFrameClassification"),gLt.forEach(t),sgr=r(OIe," (Data2VecAudio model)"),OIe.forEach(t),lgr=i(vl),f7=n(vl,"LI",{});var VIe=s(f7);Kve=n(VIe,"STRONG",{});var hLt=s(Kve);igr=r(hLt,"unispeech-sat"),hLt.forEach(t),dgr=r(VIe," \u2014 "),bH=n(VIe,"A",{href:!0});var pLt=s(bH);cgr=r(pLt,"UniSpeechSatForAudioFrameClassification"),pLt.forEach(t),fgr=r(VIe," (UniSpeechSat model)"),VIe.forEach(t),mgr=i(vl),m7=n(vl,"LI",{});var XIe=s(m7);Zve=n(XIe,"STRONG",{});var _Lt=s(Zve);ggr=r(_Lt,"wav2vec2"),_Lt.forEach(t),hgr=r(XIe," \u2014 "),vH=n(XIe,"A",{href:!0});var uLt=s(vH);pgr=r(uLt,"Wav2Vec2ForAudioFrameClassification"),uLt.forEach(t),_gr=r(XIe," (Wav2Vec2 model)"),XIe.forEach(t),ugr=i(vl),g7=n(vl,"LI",{});var zIe=s(g7);eFe=n(zIe,"STRONG",{});var bLt=s(eFe);bgr=r(bLt,"wav2vec2-conformer"),bLt.forEach(t),vgr=r(zIe," \u2014 "),FH=n(zIe,"A",{href:!0});var vLt=s(FH);Fgr=r(vLt,"Wav2Vec2ConformerForAudioFrameClassification"),vLt.forEach(t),Tgr=r(zIe," (Wav2Vec2-Conformer model)"),zIe.forEach(t),Mgr=i(vl),h7=n(vl,"LI",{});var QIe=s(h7);oFe=n(QIe,"STRONG",{});var FLt=s(oFe);Egr=r(FLt,"wavlm"),FLt.forEach(t),Cgr=r(QIe," \u2014 "),TH=n(QIe,"A",{href:!0});var TLt=s(TH);wgr=r(TLt,"WavLMForAudioFrameClassification"),TLt.forEach(t),Agr=r(QIe," (WavLM model)"),QIe.forEach(t),vl.forEach(t),Lgr=i(Ea),p7=n(Ea,"P",{});var WIe=s(p7);ygr=r(WIe,"The model is set in evaluation mode by default using "),rFe=n(WIe,"CODE",{});var MLt=s(rFe);xgr=r(MLt,"model.eval()"),MLt.forEach(t),$gr=r(WIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tFe=n(WIe,"CODE",{});var ELt=s(tFe);kgr=r(ELt,"model.train()"),ELt.forEach(t),WIe.forEach(t),Sgr=i(Ea),T(_7.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),uze=i(f),Nd=n(f,"H2",{class:!0});var EWe=s(Nd);u7=n(EWe,"A",{id:!0,class:!0,href:!0});var CLt=s(u7);aFe=n(CLt,"SPAN",{});var wLt=s(aFe);T(d9.$$.fragment,wLt),wLt.forEach(t),CLt.forEach(t),Rgr=i(EWe),nFe=n(EWe,"SPAN",{});var ALt=s(nFe);Pgr=r(ALt,"AutoModelForCTC"),ALt.forEach(t),EWe.forEach(t),bze=i(f),Wo=n(f,"DIV",{class:!0});var Fl=s(Wo);T(c9.$$.fragment,Fl),Bgr=i(Fl),Id=n(Fl,"P",{});var Ete=s(Id);Ngr=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),MH=n(Ete,"A",{href:!0});var LLt=s(MH);Igr=r(LLt,"from_pretrained()"),LLt.forEach(t),qgr=r(Ete," class method or the "),EH=n(Ete,"A",{href:!0});var yLt=s(EH);jgr=r(yLt,"from_config()"),yLt.forEach(t),Dgr=r(Ete,` class
method.`),Ete.forEach(t),Ggr=i(Fl),f9=n(Fl,"P",{});var CWe=s(f9);Ogr=r(CWe,"This class cannot be instantiated directly using "),sFe=n(CWe,"CODE",{});var xLt=s(sFe);Vgr=r(xLt,"__init__()"),xLt.forEach(t),Xgr=r(CWe," (throws an error)."),CWe.forEach(t),zgr=i(Fl),wt=n(Fl,"DIV",{class:!0});var Ww=s(wt);T(m9.$$.fragment,Ww),Qgr=i(Ww),lFe=n(Ww,"P",{});var $Lt=s(lFe);Wgr=r($Lt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$Lt.forEach(t),Hgr=i(Ww),qd=n(Ww,"P",{});var Cte=s(qd);Ugr=r(Cte,`Note:
Loading a model from its configuration file does `),iFe=n(Cte,"STRONG",{});var kLt=s(iFe);Jgr=r(kLt,"not"),kLt.forEach(t),Ygr=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(Cte,"A",{href:!0});var SLt=s(CH);Kgr=r(SLt,"from_pretrained()"),SLt.forEach(t),Zgr=r(Cte," to load the model weights."),Cte.forEach(t),ehr=i(Ww),T(b7.$$.fragment,Ww),Ww.forEach(t),ohr=i(Fl),ho=n(Fl,"DIV",{class:!0});var Ca=s(ho);T(g9.$$.fragment,Ca),rhr=i(Ca),dFe=n(Ca,"P",{});var RLt=s(dFe);thr=r(RLt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),RLt.forEach(t),ahr=i(Ca),Ka=n(Ca,"P",{});var Hw=s(Ka);nhr=r(Hw,"The model class to instantiate is selected based on the "),cFe=n(Hw,"CODE",{});var PLt=s(cFe);shr=r(PLt,"model_type"),PLt.forEach(t),lhr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),fFe=n(Hw,"CODE",{});var BLt=s(fFe);ihr=r(BLt,"pretrained_model_name_or_path"),BLt.forEach(t),dhr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=n(Hw,"CODE",{});var NLt=s(mFe);chr=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),fhr=r(Hw,":"),Hw.forEach(t),mhr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);v7=n(Be,"LI",{});var HIe=s(v7);gFe=n(HIe,"STRONG",{});var ILt=s(gFe);ghr=r(ILt,"data2vec-audio"),ILt.forEach(t),hhr=r(HIe," \u2014 "),wH=n(HIe,"A",{href:!0});var qLt=s(wH);phr=r(qLt,"Data2VecAudioForCTC"),qLt.forEach(t),_hr=r(HIe," (Data2VecAudio model)"),HIe.forEach(t),uhr=i(Be),F7=n(Be,"LI",{});var UIe=s(F7);hFe=n(UIe,"STRONG",{});var jLt=s(hFe);bhr=r(jLt,"hubert"),jLt.forEach(t),vhr=r(UIe," \u2014 "),AH=n(UIe,"A",{href:!0});var DLt=s(AH);Fhr=r(DLt,"HubertForCTC"),DLt.forEach(t),Thr=r(UIe," (Hubert model)"),UIe.forEach(t),Mhr=i(Be),T7=n(Be,"LI",{});var JIe=s(T7);pFe=n(JIe,"STRONG",{});var GLt=s(pFe);Ehr=r(GLt,"mctct"),GLt.forEach(t),Chr=r(JIe," \u2014 "),LH=n(JIe,"A",{href:!0});var OLt=s(LH);whr=r(OLt,"MCTCTForCTC"),OLt.forEach(t),Ahr=r(JIe," (M-CTC-T model)"),JIe.forEach(t),Lhr=i(Be),M7=n(Be,"LI",{});var YIe=s(M7);_Fe=n(YIe,"STRONG",{});var VLt=s(_Fe);yhr=r(VLt,"sew"),VLt.forEach(t),xhr=r(YIe," \u2014 "),yH=n(YIe,"A",{href:!0});var XLt=s(yH);$hr=r(XLt,"SEWForCTC"),XLt.forEach(t),khr=r(YIe," (SEW model)"),YIe.forEach(t),Shr=i(Be),E7=n(Be,"LI",{});var KIe=s(E7);uFe=n(KIe,"STRONG",{});var zLt=s(uFe);Rhr=r(zLt,"sew-d"),zLt.forEach(t),Phr=r(KIe," \u2014 "),xH=n(KIe,"A",{href:!0});var QLt=s(xH);Bhr=r(QLt,"SEWDForCTC"),QLt.forEach(t),Nhr=r(KIe," (SEW-D model)"),KIe.forEach(t),Ihr=i(Be),C7=n(Be,"LI",{});var ZIe=s(C7);bFe=n(ZIe,"STRONG",{});var WLt=s(bFe);qhr=r(WLt,"unispeech"),WLt.forEach(t),jhr=r(ZIe," \u2014 "),$H=n(ZIe,"A",{href:!0});var HLt=s($H);Dhr=r(HLt,"UniSpeechForCTC"),HLt.forEach(t),Ghr=r(ZIe," (UniSpeech model)"),ZIe.forEach(t),Ohr=i(Be),w7=n(Be,"LI",{});var eqe=s(w7);vFe=n(eqe,"STRONG",{});var ULt=s(vFe);Vhr=r(ULt,"unispeech-sat"),ULt.forEach(t),Xhr=r(eqe," \u2014 "),kH=n(eqe,"A",{href:!0});var JLt=s(kH);zhr=r(JLt,"UniSpeechSatForCTC"),JLt.forEach(t),Qhr=r(eqe," (UniSpeechSat model)"),eqe.forEach(t),Whr=i(Be),A7=n(Be,"LI",{});var oqe=s(A7);FFe=n(oqe,"STRONG",{});var YLt=s(FFe);Hhr=r(YLt,"wav2vec2"),YLt.forEach(t),Uhr=r(oqe," \u2014 "),SH=n(oqe,"A",{href:!0});var KLt=s(SH);Jhr=r(KLt,"Wav2Vec2ForCTC"),KLt.forEach(t),Yhr=r(oqe," (Wav2Vec2 model)"),oqe.forEach(t),Khr=i(Be),L7=n(Be,"LI",{});var rqe=s(L7);TFe=n(rqe,"STRONG",{});var ZLt=s(TFe);Zhr=r(ZLt,"wav2vec2-conformer"),ZLt.forEach(t),epr=r(rqe," \u2014 "),RH=n(rqe,"A",{href:!0});var eyt=s(RH);opr=r(eyt,"Wav2Vec2ConformerForCTC"),eyt.forEach(t),rpr=r(rqe," (Wav2Vec2-Conformer model)"),rqe.forEach(t),tpr=i(Be),y7=n(Be,"LI",{});var tqe=s(y7);MFe=n(tqe,"STRONG",{});var oyt=s(MFe);apr=r(oyt,"wavlm"),oyt.forEach(t),npr=r(tqe," \u2014 "),PH=n(tqe,"A",{href:!0});var ryt=s(PH);spr=r(ryt,"WavLMForCTC"),ryt.forEach(t),lpr=r(tqe," (WavLM model)"),tqe.forEach(t),Be.forEach(t),ipr=i(Ca),x7=n(Ca,"P",{});var aqe=s(x7);dpr=r(aqe,"The model is set in evaluation mode by default using "),EFe=n(aqe,"CODE",{});var tyt=s(EFe);cpr=r(tyt,"model.eval()"),tyt.forEach(t),fpr=r(aqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CFe=n(aqe,"CODE",{});var ayt=s(CFe);mpr=r(ayt,"model.train()"),ayt.forEach(t),aqe.forEach(t),gpr=i(Ca),T($7.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),vze=i(f),jd=n(f,"H2",{class:!0});var wWe=s(jd);k7=n(wWe,"A",{id:!0,class:!0,href:!0});var nyt=s(k7);wFe=n(nyt,"SPAN",{});var syt=s(wFe);T(h9.$$.fragment,syt),syt.forEach(t),nyt.forEach(t),hpr=i(wWe),AFe=n(wWe,"SPAN",{});var lyt=s(AFe);ppr=r(lyt,"AutoModelForSpeechSeq2Seq"),lyt.forEach(t),wWe.forEach(t),Fze=i(f),Ho=n(f,"DIV",{class:!0});var Tl=s(Ho);T(p9.$$.fragment,Tl),_pr=i(Tl),Dd=n(Tl,"P",{});var wte=s(Dd);upr=r(wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BH=n(wte,"A",{href:!0});var iyt=s(BH);bpr=r(iyt,"from_pretrained()"),iyt.forEach(t),vpr=r(wte," class method or the "),NH=n(wte,"A",{href:!0});var dyt=s(NH);Fpr=r(dyt,"from_config()"),dyt.forEach(t),Tpr=r(wte,` class
method.`),wte.forEach(t),Mpr=i(Tl),_9=n(Tl,"P",{});var AWe=s(_9);Epr=r(AWe,"This class cannot be instantiated directly using "),LFe=n(AWe,"CODE",{});var cyt=s(LFe);Cpr=r(cyt,"__init__()"),cyt.forEach(t),wpr=r(AWe," (throws an error)."),AWe.forEach(t),Apr=i(Tl),At=n(Tl,"DIV",{class:!0});var Uw=s(At);T(u9.$$.fragment,Uw),Lpr=i(Uw),yFe=n(Uw,"P",{});var fyt=s(yFe);ypr=r(fyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fyt.forEach(t),xpr=i(Uw),Gd=n(Uw,"P",{});var Ate=s(Gd);$pr=r(Ate,`Note:
Loading a model from its configuration file does `),xFe=n(Ate,"STRONG",{});var myt=s(xFe);kpr=r(myt,"not"),myt.forEach(t),Spr=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(Ate,"A",{href:!0});var gyt=s(IH);Rpr=r(gyt,"from_pretrained()"),gyt.forEach(t),Ppr=r(Ate," to load the model weights."),Ate.forEach(t),Bpr=i(Uw),T(S7.$$.fragment,Uw),Uw.forEach(t),Npr=i(Tl),po=n(Tl,"DIV",{class:!0});var wa=s(po);T(b9.$$.fragment,wa),Ipr=i(wa),$Fe=n(wa,"P",{});var hyt=s($Fe);qpr=r(hyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hyt.forEach(t),jpr=i(wa),Za=n(wa,"P",{});var Jw=s(Za);Dpr=r(Jw,"The model class to instantiate is selected based on the "),kFe=n(Jw,"CODE",{});var pyt=s(kFe);Gpr=r(pyt,"model_type"),pyt.forEach(t),Opr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),SFe=n(Jw,"CODE",{});var _yt=s(SFe);Vpr=r(_yt,"pretrained_model_name_or_path"),_yt.forEach(t),Xpr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(Jw,"CODE",{});var uyt=s(RFe);zpr=r(uyt,"pretrained_model_name_or_path"),uyt.forEach(t),Qpr=r(Jw,":"),Jw.forEach(t),Wpr=i(wa),v9=n(wa,"UL",{});var LWe=s(v9);R7=n(LWe,"LI",{});var nqe=s(R7);PFe=n(nqe,"STRONG",{});var byt=s(PFe);Hpr=r(byt,"speech-encoder-decoder"),byt.forEach(t),Upr=r(nqe," \u2014 "),qH=n(nqe,"A",{href:!0});var vyt=s(qH);Jpr=r(vyt,"SpeechEncoderDecoderModel"),vyt.forEach(t),Ypr=r(nqe," (Speech Encoder decoder model)"),nqe.forEach(t),Kpr=i(LWe),P7=n(LWe,"LI",{});var sqe=s(P7);BFe=n(sqe,"STRONG",{});var Fyt=s(BFe);Zpr=r(Fyt,"speech_to_text"),Fyt.forEach(t),e_r=r(sqe," \u2014 "),jH=n(sqe,"A",{href:!0});var Tyt=s(jH);o_r=r(Tyt,"Speech2TextForConditionalGeneration"),Tyt.forEach(t),r_r=r(sqe," (Speech2Text model)"),sqe.forEach(t),LWe.forEach(t),t_r=i(wa),B7=n(wa,"P",{});var lqe=s(B7);a_r=r(lqe,"The model is set in evaluation mode by default using "),NFe=n(lqe,"CODE",{});var Myt=s(NFe);n_r=r(Myt,"model.eval()"),Myt.forEach(t),s_r=r(lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IFe=n(lqe,"CODE",{});var Eyt=s(IFe);l_r=r(Eyt,"model.train()"),Eyt.forEach(t),lqe.forEach(t),i_r=i(wa),T(N7.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),Tze=i(f),Od=n(f,"H2",{class:!0});var yWe=s(Od);I7=n(yWe,"A",{id:!0,class:!0,href:!0});var Cyt=s(I7);qFe=n(Cyt,"SPAN",{});var wyt=s(qFe);T(F9.$$.fragment,wyt),wyt.forEach(t),Cyt.forEach(t),d_r=i(yWe),jFe=n(yWe,"SPAN",{});var Ayt=s(jFe);c_r=r(Ayt,"AutoModelForAudioXVector"),Ayt.forEach(t),yWe.forEach(t),Mze=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(T9.$$.fragment,Ml),f_r=i(Ml),Vd=n(Ml,"P",{});var Lte=s(Vd);m_r=r(Lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),DH=n(Lte,"A",{href:!0});var Lyt=s(DH);g_r=r(Lyt,"from_pretrained()"),Lyt.forEach(t),h_r=r(Lte," class method or the "),GH=n(Lte,"A",{href:!0});var yyt=s(GH);p_r=r(yyt,"from_config()"),yyt.forEach(t),__r=r(Lte,` class
method.`),Lte.forEach(t),u_r=i(Ml),M9=n(Ml,"P",{});var xWe=s(M9);b_r=r(xWe,"This class cannot be instantiated directly using "),DFe=n(xWe,"CODE",{});var xyt=s(DFe);v_r=r(xyt,"__init__()"),xyt.forEach(t),F_r=r(xWe," (throws an error)."),xWe.forEach(t),T_r=i(Ml),Lt=n(Ml,"DIV",{class:!0});var Yw=s(Lt);T(E9.$$.fragment,Yw),M_r=i(Yw),GFe=n(Yw,"P",{});var $yt=s(GFe);E_r=r($yt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$yt.forEach(t),C_r=i(Yw),Xd=n(Yw,"P",{});var yte=s(Xd);w_r=r(yte,`Note:
Loading a model from its configuration file does `),OFe=n(yte,"STRONG",{});var kyt=s(OFe);A_r=r(kyt,"not"),kyt.forEach(t),L_r=r(yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(yte,"A",{href:!0});var Syt=s(OH);y_r=r(Syt,"from_pretrained()"),Syt.forEach(t),x_r=r(yte," to load the model weights."),yte.forEach(t),$_r=i(Yw),T(q7.$$.fragment,Yw),Yw.forEach(t),k_r=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(C9.$$.fragment,Aa),S_r=i(Aa),VFe=n(Aa,"P",{});var Ryt=s(VFe);R_r=r(Ryt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Ryt.forEach(t),P_r=i(Aa),en=n(Aa,"P",{});var Kw=s(en);B_r=r(Kw,"The model class to instantiate is selected based on the "),XFe=n(Kw,"CODE",{});var Pyt=s(XFe);N_r=r(Pyt,"model_type"),Pyt.forEach(t),I_r=r(Kw,` property of the config object (either
passed as an argument or loaded from `),zFe=n(Kw,"CODE",{});var Byt=s(zFe);q_r=r(Byt,"pretrained_model_name_or_path"),Byt.forEach(t),j_r=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(Kw,"CODE",{});var Nyt=s(QFe);D_r=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),G_r=r(Kw,":"),Kw.forEach(t),O_r=i(Aa),tt=n(Aa,"UL",{});var El=s(tt);j7=n(El,"LI",{});var iqe=s(j7);WFe=n(iqe,"STRONG",{});var Iyt=s(WFe);V_r=r(Iyt,"data2vec-audio"),Iyt.forEach(t),X_r=r(iqe," \u2014 "),VH=n(iqe,"A",{href:!0});var qyt=s(VH);z_r=r(qyt,"Data2VecAudioForXVector"),qyt.forEach(t),Q_r=r(iqe," (Data2VecAudio model)"),iqe.forEach(t),W_r=i(El),D7=n(El,"LI",{});var dqe=s(D7);HFe=n(dqe,"STRONG",{});var jyt=s(HFe);H_r=r(jyt,"unispeech-sat"),jyt.forEach(t),U_r=r(dqe," \u2014 "),XH=n(dqe,"A",{href:!0});var Dyt=s(XH);J_r=r(Dyt,"UniSpeechSatForXVector"),Dyt.forEach(t),Y_r=r(dqe," (UniSpeechSat model)"),dqe.forEach(t),K_r=i(El),G7=n(El,"LI",{});var cqe=s(G7);UFe=n(cqe,"STRONG",{});var Gyt=s(UFe);Z_r=r(Gyt,"wav2vec2"),Gyt.forEach(t),eur=r(cqe," \u2014 "),zH=n(cqe,"A",{href:!0});var Oyt=s(zH);our=r(Oyt,"Wav2Vec2ForXVector"),Oyt.forEach(t),rur=r(cqe," (Wav2Vec2 model)"),cqe.forEach(t),tur=i(El),O7=n(El,"LI",{});var fqe=s(O7);JFe=n(fqe,"STRONG",{});var Vyt=s(JFe);aur=r(Vyt,"wav2vec2-conformer"),Vyt.forEach(t),nur=r(fqe," \u2014 "),QH=n(fqe,"A",{href:!0});var Xyt=s(QH);sur=r(Xyt,"Wav2Vec2ConformerForXVector"),Xyt.forEach(t),lur=r(fqe," (Wav2Vec2-Conformer model)"),fqe.forEach(t),iur=i(El),V7=n(El,"LI",{});var mqe=s(V7);YFe=n(mqe,"STRONG",{});var zyt=s(YFe);dur=r(zyt,"wavlm"),zyt.forEach(t),cur=r(mqe," \u2014 "),WH=n(mqe,"A",{href:!0});var Qyt=s(WH);fur=r(Qyt,"WavLMForXVector"),Qyt.forEach(t),mur=r(mqe," (WavLM model)"),mqe.forEach(t),El.forEach(t),gur=i(Aa),X7=n(Aa,"P",{});var gqe=s(X7);hur=r(gqe,"The model is set in evaluation mode by default using "),KFe=n(gqe,"CODE",{});var Wyt=s(KFe);pur=r(Wyt,"model.eval()"),Wyt.forEach(t),_ur=r(gqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZFe=n(gqe,"CODE",{});var Hyt=s(ZFe);uur=r(Hyt,"model.train()"),Hyt.forEach(t),gqe.forEach(t),bur=i(Aa),T(z7.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),Eze=i(f),zd=n(f,"H2",{class:!0});var $We=s(zd);Q7=n($We,"A",{id:!0,class:!0,href:!0});var Uyt=s(Q7);e6e=n(Uyt,"SPAN",{});var Jyt=s(e6e);T(w9.$$.fragment,Jyt),Jyt.forEach(t),Uyt.forEach(t),vur=i($We),o6e=n($We,"SPAN",{});var Yyt=s(o6e);Fur=r(Yyt,"AutoModelForMaskedImageModeling"),Yyt.forEach(t),$We.forEach(t),Cze=i(f),Jo=n(f,"DIV",{class:!0});var Cl=s(Jo);T(A9.$$.fragment,Cl),Tur=i(Cl),Qd=n(Cl,"P",{});var xte=s(Qd);Mur=r(xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HH=n(xte,"A",{href:!0});var Kyt=s(HH);Eur=r(Kyt,"from_pretrained()"),Kyt.forEach(t),Cur=r(xte," class method or the "),UH=n(xte,"A",{href:!0});var Zyt=s(UH);wur=r(Zyt,"from_config()"),Zyt.forEach(t),Aur=r(xte,` class
method.`),xte.forEach(t),Lur=i(Cl),L9=n(Cl,"P",{});var kWe=s(L9);yur=r(kWe,"This class cannot be instantiated directly using "),r6e=n(kWe,"CODE",{});var e9t=s(r6e);xur=r(e9t,"__init__()"),e9t.forEach(t),$ur=r(kWe," (throws an error)."),kWe.forEach(t),kur=i(Cl),yt=n(Cl,"DIV",{class:!0});var Zw=s(yt);T(y9.$$.fragment,Zw),Sur=i(Zw),t6e=n(Zw,"P",{});var o9t=s(t6e);Rur=r(o9t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),o9t.forEach(t),Pur=i(Zw),Wd=n(Zw,"P",{});var $te=s(Wd);Bur=r($te,`Note:
Loading a model from its configuration file does `),a6e=n($te,"STRONG",{});var r9t=s(a6e);Nur=r(r9t,"not"),r9t.forEach(t),Iur=r($te,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n($te,"A",{href:!0});var t9t=s(JH);qur=r(t9t,"from_pretrained()"),t9t.forEach(t),jur=r($te," to load the model weights."),$te.forEach(t),Dur=i(Zw),T(W7.$$.fragment,Zw),Zw.forEach(t),Gur=i(Cl),uo=n(Cl,"DIV",{class:!0});var La=s(uo);T(x9.$$.fragment,La),Our=i(La),n6e=n(La,"P",{});var a9t=s(n6e);Vur=r(a9t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),a9t.forEach(t),Xur=i(La),on=n(La,"P",{});var eA=s(on);zur=r(eA,"The model class to instantiate is selected based on the "),s6e=n(eA,"CODE",{});var n9t=s(s6e);Qur=r(n9t,"model_type"),n9t.forEach(t),Wur=r(eA,` property of the config object (either
passed as an argument or loaded from `),l6e=n(eA,"CODE",{});var s9t=s(l6e);Hur=r(s9t,"pretrained_model_name_or_path"),s9t.forEach(t),Uur=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=n(eA,"CODE",{});var l9t=s(i6e);Jur=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),Yur=r(eA,":"),eA.forEach(t),Kur=i(La),Hd=n(La,"UL",{});var kte=s(Hd);H7=n(kte,"LI",{});var hqe=s(H7);d6e=n(hqe,"STRONG",{});var i9t=s(d6e);Zur=r(i9t,"deit"),i9t.forEach(t),e2r=r(hqe," \u2014 "),YH=n(hqe,"A",{href:!0});var d9t=s(YH);o2r=r(d9t,"DeiTForMaskedImageModeling"),d9t.forEach(t),r2r=r(hqe," (DeiT model)"),hqe.forEach(t),t2r=i(kte),U7=n(kte,"LI",{});var pqe=s(U7);c6e=n(pqe,"STRONG",{});var c9t=s(c6e);a2r=r(c9t,"swin"),c9t.forEach(t),n2r=r(pqe," \u2014 "),KH=n(pqe,"A",{href:!0});var f9t=s(KH);s2r=r(f9t,"SwinForMaskedImageModeling"),f9t.forEach(t),l2r=r(pqe," (Swin Transformer model)"),pqe.forEach(t),i2r=i(kte),J7=n(kte,"LI",{});var _qe=s(J7);f6e=n(_qe,"STRONG",{});var m9t=s(f6e);d2r=r(m9t,"vit"),m9t.forEach(t),c2r=r(_qe," \u2014 "),ZH=n(_qe,"A",{href:!0});var g9t=s(ZH);f2r=r(g9t,"ViTForMaskedImageModeling"),g9t.forEach(t),m2r=r(_qe," (ViT model)"),_qe.forEach(t),kte.forEach(t),g2r=i(La),Y7=n(La,"P",{});var uqe=s(Y7);h2r=r(uqe,"The model is set in evaluation mode by default using "),m6e=n(uqe,"CODE",{});var h9t=s(m6e);p2r=r(h9t,"model.eval()"),h9t.forEach(t),_2r=r(uqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g6e=n(uqe,"CODE",{});var p9t=s(g6e);u2r=r(p9t,"model.train()"),p9t.forEach(t),uqe.forEach(t),b2r=i(La),T(K7.$$.fragment,La),La.forEach(t),Cl.forEach(t),wze=i(f),Ud=n(f,"H2",{class:!0});var SWe=s(Ud);Z7=n(SWe,"A",{id:!0,class:!0,href:!0});var _9t=s(Z7);h6e=n(_9t,"SPAN",{});var u9t=s(h6e);T($9.$$.fragment,u9t),u9t.forEach(t),_9t.forEach(t),v2r=i(SWe),p6e=n(SWe,"SPAN",{});var b9t=s(p6e);F2r=r(b9t,"AutoModelForObjectDetection"),b9t.forEach(t),SWe.forEach(t),Aze=i(f),Yo=n(f,"DIV",{class:!0});var wl=s(Yo);T(k9.$$.fragment,wl),T2r=i(wl),Jd=n(wl,"P",{});var Ste=s(Jd);M2r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eU=n(Ste,"A",{href:!0});var v9t=s(eU);E2r=r(v9t,"from_pretrained()"),v9t.forEach(t),C2r=r(Ste," class method or the "),oU=n(Ste,"A",{href:!0});var F9t=s(oU);w2r=r(F9t,"from_config()"),F9t.forEach(t),A2r=r(Ste,` class
method.`),Ste.forEach(t),L2r=i(wl),S9=n(wl,"P",{});var RWe=s(S9);y2r=r(RWe,"This class cannot be instantiated directly using "),_6e=n(RWe,"CODE",{});var T9t=s(_6e);x2r=r(T9t,"__init__()"),T9t.forEach(t),$2r=r(RWe," (throws an error)."),RWe.forEach(t),k2r=i(wl),xt=n(wl,"DIV",{class:!0});var oA=s(xt);T(R9.$$.fragment,oA),S2r=i(oA),u6e=n(oA,"P",{});var M9t=s(u6e);R2r=r(M9t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),M9t.forEach(t),P2r=i(oA),Yd=n(oA,"P",{});var Rte=s(Yd);B2r=r(Rte,`Note:
Loading a model from its configuration file does `),b6e=n(Rte,"STRONG",{});var E9t=s(b6e);N2r=r(E9t,"not"),E9t.forEach(t),I2r=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(Rte,"A",{href:!0});var C9t=s(rU);q2r=r(C9t,"from_pretrained()"),C9t.forEach(t),j2r=r(Rte," to load the model weights."),Rte.forEach(t),D2r=i(oA),T(e8.$$.fragment,oA),oA.forEach(t),G2r=i(wl),bo=n(wl,"DIV",{class:!0});var ya=s(bo);T(P9.$$.fragment,ya),O2r=i(ya),v6e=n(ya,"P",{});var w9t=s(v6e);V2r=r(w9t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),w9t.forEach(t),X2r=i(ya),rn=n(ya,"P",{});var rA=s(rn);z2r=r(rA,"The model class to instantiate is selected based on the "),F6e=n(rA,"CODE",{});var A9t=s(F6e);Q2r=r(A9t,"model_type"),A9t.forEach(t),W2r=r(rA,` property of the config object (either
passed as an argument or loaded from `),T6e=n(rA,"CODE",{});var L9t=s(T6e);H2r=r(L9t,"pretrained_model_name_or_path"),L9t.forEach(t),U2r=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M6e=n(rA,"CODE",{});var y9t=s(M6e);J2r=r(y9t,"pretrained_model_name_or_path"),y9t.forEach(t),Y2r=r(rA,":"),rA.forEach(t),K2r=i(ya),B9=n(ya,"UL",{});var PWe=s(B9);o8=n(PWe,"LI",{});var bqe=s(o8);E6e=n(bqe,"STRONG",{});var x9t=s(E6e);Z2r=r(x9t,"detr"),x9t.forEach(t),e1r=r(bqe," \u2014 "),tU=n(bqe,"A",{href:!0});var $9t=s(tU);o1r=r($9t,"DetrForObjectDetection"),$9t.forEach(t),r1r=r(bqe," (DETR model)"),bqe.forEach(t),t1r=i(PWe),r8=n(PWe,"LI",{});var vqe=s(r8);C6e=n(vqe,"STRONG",{});var k9t=s(C6e);a1r=r(k9t,"yolos"),k9t.forEach(t),n1r=r(vqe," \u2014 "),aU=n(vqe,"A",{href:!0});var S9t=s(aU);s1r=r(S9t,"YolosForObjectDetection"),S9t.forEach(t),l1r=r(vqe," (YOLOS model)"),vqe.forEach(t),PWe.forEach(t),i1r=i(ya),t8=n(ya,"P",{});var Fqe=s(t8);d1r=r(Fqe,"The model is set in evaluation mode by default using "),w6e=n(Fqe,"CODE",{});var R9t=s(w6e);c1r=r(R9t,"model.eval()"),R9t.forEach(t),f1r=r(Fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A6e=n(Fqe,"CODE",{});var P9t=s(A6e);m1r=r(P9t,"model.train()"),P9t.forEach(t),Fqe.forEach(t),g1r=i(ya),T(a8.$$.fragment,ya),ya.forEach(t),wl.forEach(t),Lze=i(f),Kd=n(f,"H2",{class:!0});var BWe=s(Kd);n8=n(BWe,"A",{id:!0,class:!0,href:!0});var B9t=s(n8);L6e=n(B9t,"SPAN",{});var N9t=s(L6e);T(N9.$$.fragment,N9t),N9t.forEach(t),B9t.forEach(t),h1r=i(BWe),y6e=n(BWe,"SPAN",{});var I9t=s(y6e);p1r=r(I9t,"AutoModelForImageSegmentation"),I9t.forEach(t),BWe.forEach(t),yze=i(f),Ko=n(f,"DIV",{class:!0});var Al=s(Ko);T(I9.$$.fragment,Al),_1r=i(Al),Zd=n(Al,"P",{});var Pte=s(Zd);u1r=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nU=n(Pte,"A",{href:!0});var q9t=s(nU);b1r=r(q9t,"from_pretrained()"),q9t.forEach(t),v1r=r(Pte," class method or the "),sU=n(Pte,"A",{href:!0});var j9t=s(sU);F1r=r(j9t,"from_config()"),j9t.forEach(t),T1r=r(Pte,` class
method.`),Pte.forEach(t),M1r=i(Al),q9=n(Al,"P",{});var NWe=s(q9);E1r=r(NWe,"This class cannot be instantiated directly using "),x6e=n(NWe,"CODE",{});var D9t=s(x6e);C1r=r(D9t,"__init__()"),D9t.forEach(t),w1r=r(NWe," (throws an error)."),NWe.forEach(t),A1r=i(Al),$t=n(Al,"DIV",{class:!0});var tA=s($t);T(j9.$$.fragment,tA),L1r=i(tA),$6e=n(tA,"P",{});var G9t=s($6e);y1r=r(G9t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),G9t.forEach(t),x1r=i(tA),ec=n(tA,"P",{});var Bte=s(ec);$1r=r(Bte,`Note:
Loading a model from its configuration file does `),k6e=n(Bte,"STRONG",{});var O9t=s(k6e);k1r=r(O9t,"not"),O9t.forEach(t),S1r=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(Bte,"A",{href:!0});var V9t=s(lU);R1r=r(V9t,"from_pretrained()"),V9t.forEach(t),P1r=r(Bte," to load the model weights."),Bte.forEach(t),B1r=i(tA),T(s8.$$.fragment,tA),tA.forEach(t),N1r=i(Al),vo=n(Al,"DIV",{class:!0});var xa=s(vo);T(D9.$$.fragment,xa),I1r=i(xa),S6e=n(xa,"P",{});var X9t=s(S6e);q1r=r(X9t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),X9t.forEach(t),j1r=i(xa),tn=n(xa,"P",{});var aA=s(tn);D1r=r(aA,"The model class to instantiate is selected based on the "),R6e=n(aA,"CODE",{});var z9t=s(R6e);G1r=r(z9t,"model_type"),z9t.forEach(t),O1r=r(aA,` property of the config object (either
passed as an argument or loaded from `),P6e=n(aA,"CODE",{});var Q9t=s(P6e);V1r=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),X1r=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B6e=n(aA,"CODE",{});var W9t=s(B6e);z1r=r(W9t,"pretrained_model_name_or_path"),W9t.forEach(t),Q1r=r(aA,":"),aA.forEach(t),W1r=i(xa),N6e=n(xa,"UL",{});var H9t=s(N6e);l8=n(H9t,"LI",{});var Tqe=s(l8);I6e=n(Tqe,"STRONG",{});var U9t=s(I6e);H1r=r(U9t,"detr"),U9t.forEach(t),U1r=r(Tqe," \u2014 "),iU=n(Tqe,"A",{href:!0});var J9t=s(iU);J1r=r(J9t,"DetrForSegmentation"),J9t.forEach(t),Y1r=r(Tqe," (DETR model)"),Tqe.forEach(t),H9t.forEach(t),K1r=i(xa),i8=n(xa,"P",{});var Mqe=s(i8);Z1r=r(Mqe,"The model is set in evaluation mode by default using "),q6e=n(Mqe,"CODE",{});var Y9t=s(q6e);ebr=r(Y9t,"model.eval()"),Y9t.forEach(t),obr=r(Mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j6e=n(Mqe,"CODE",{});var K9t=s(j6e);rbr=r(K9t,"model.train()"),K9t.forEach(t),Mqe.forEach(t),tbr=i(xa),T(d8.$$.fragment,xa),xa.forEach(t),Al.forEach(t),xze=i(f),oc=n(f,"H2",{class:!0});var IWe=s(oc);c8=n(IWe,"A",{id:!0,class:!0,href:!0});var Z9t=s(c8);D6e=n(Z9t,"SPAN",{});var ext=s(D6e);T(G9.$$.fragment,ext),ext.forEach(t),Z9t.forEach(t),abr=i(IWe),G6e=n(IWe,"SPAN",{});var oxt=s(G6e);nbr=r(oxt,"AutoModelForSemanticSegmentation"),oxt.forEach(t),IWe.forEach(t),$ze=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(O9.$$.fragment,Ll),sbr=i(Ll),rc=n(Ll,"P",{});var Nte=s(rc);lbr=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dU=n(Nte,"A",{href:!0});var rxt=s(dU);ibr=r(rxt,"from_pretrained()"),rxt.forEach(t),dbr=r(Nte," class method or the "),cU=n(Nte,"A",{href:!0});var txt=s(cU);cbr=r(txt,"from_config()"),txt.forEach(t),fbr=r(Nte,` class
method.`),Nte.forEach(t),mbr=i(Ll),V9=n(Ll,"P",{});var qWe=s(V9);gbr=r(qWe,"This class cannot be instantiated directly using "),O6e=n(qWe,"CODE",{});var axt=s(O6e);hbr=r(axt,"__init__()"),axt.forEach(t),pbr=r(qWe," (throws an error)."),qWe.forEach(t),_br=i(Ll),kt=n(Ll,"DIV",{class:!0});var nA=s(kt);T(X9.$$.fragment,nA),ubr=i(nA),V6e=n(nA,"P",{});var nxt=s(V6e);bbr=r(nxt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),nxt.forEach(t),vbr=i(nA),tc=n(nA,"P",{});var Ite=s(tc);Fbr=r(Ite,`Note:
Loading a model from its configuration file does `),X6e=n(Ite,"STRONG",{});var sxt=s(X6e);Tbr=r(sxt,"not"),sxt.forEach(t),Mbr=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(Ite,"A",{href:!0});var lxt=s(fU);Ebr=r(lxt,"from_pretrained()"),lxt.forEach(t),Cbr=r(Ite," to load the model weights."),Ite.forEach(t),wbr=i(nA),T(f8.$$.fragment,nA),nA.forEach(t),Abr=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(z9.$$.fragment,$a),Lbr=i($a),z6e=n($a,"P",{});var ixt=s(z6e);ybr=r(ixt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ixt.forEach(t),xbr=i($a),an=n($a,"P",{});var sA=s(an);$br=r(sA,"The model class to instantiate is selected based on the "),Q6e=n(sA,"CODE",{});var dxt=s(Q6e);kbr=r(dxt,"model_type"),dxt.forEach(t),Sbr=r(sA,` property of the config object (either
passed as an argument or loaded from `),W6e=n(sA,"CODE",{});var cxt=s(W6e);Rbr=r(cxt,"pretrained_model_name_or_path"),cxt.forEach(t),Pbr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=n(sA,"CODE",{});var fxt=s(H6e);Bbr=r(fxt,"pretrained_model_name_or_path"),fxt.forEach(t),Nbr=r(sA,":"),sA.forEach(t),Ibr=i($a),at=n($a,"UL",{});var yl=s(at);m8=n(yl,"LI",{});var Eqe=s(m8);U6e=n(Eqe,"STRONG",{});var mxt=s(U6e);qbr=r(mxt,"beit"),mxt.forEach(t),jbr=r(Eqe," \u2014 "),mU=n(Eqe,"A",{href:!0});var gxt=s(mU);Dbr=r(gxt,"BeitForSemanticSegmentation"),gxt.forEach(t),Gbr=r(Eqe," (BEiT model)"),Eqe.forEach(t),Obr=i(yl),g8=n(yl,"LI",{});var Cqe=s(g8);J6e=n(Cqe,"STRONG",{});var hxt=s(J6e);Vbr=r(hxt,"data2vec-vision"),hxt.forEach(t),Xbr=r(Cqe," \u2014 "),gU=n(Cqe,"A",{href:!0});var pxt=s(gU);zbr=r(pxt,"Data2VecVisionForSemanticSegmentation"),pxt.forEach(t),Qbr=r(Cqe," (Data2VecVision model)"),Cqe.forEach(t),Wbr=i(yl),h8=n(yl,"LI",{});var wqe=s(h8);Y6e=n(wqe,"STRONG",{});var _xt=s(Y6e);Hbr=r(_xt,"dpt"),_xt.forEach(t),Ubr=r(wqe," \u2014 "),hU=n(wqe,"A",{href:!0});var uxt=s(hU);Jbr=r(uxt,"DPTForSemanticSegmentation"),uxt.forEach(t),Ybr=r(wqe," (DPT model)"),wqe.forEach(t),Kbr=i(yl),p8=n(yl,"LI",{});var Aqe=s(p8);K6e=n(Aqe,"STRONG",{});var bxt=s(K6e);Zbr=r(bxt,"mobilevit"),bxt.forEach(t),evr=r(Aqe," \u2014 "),pU=n(Aqe,"A",{href:!0});var vxt=s(pU);ovr=r(vxt,"MobileViTForSemanticSegmentation"),vxt.forEach(t),rvr=r(Aqe," (MobileViT model)"),Aqe.forEach(t),tvr=i(yl),_8=n(yl,"LI",{});var Lqe=s(_8);Z6e=n(Lqe,"STRONG",{});var Fxt=s(Z6e);avr=r(Fxt,"segformer"),Fxt.forEach(t),nvr=r(Lqe," \u2014 "),_U=n(Lqe,"A",{href:!0});var Txt=s(_U);svr=r(Txt,"SegformerForSemanticSegmentation"),Txt.forEach(t),lvr=r(Lqe," (SegFormer model)"),Lqe.forEach(t),yl.forEach(t),ivr=i($a),u8=n($a,"P",{});var yqe=s(u8);dvr=r(yqe,"The model is set in evaluation mode by default using "),eTe=n(yqe,"CODE",{});var Mxt=s(eTe);cvr=r(Mxt,"model.eval()"),Mxt.forEach(t),fvr=r(yqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oTe=n(yqe,"CODE",{});var Ext=s(oTe);mvr=r(Ext,"model.train()"),Ext.forEach(t),yqe.forEach(t),gvr=i($a),T(b8.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),kze=i(f),ac=n(f,"H2",{class:!0});var jWe=s(ac);v8=n(jWe,"A",{id:!0,class:!0,href:!0});var Cxt=s(v8);rTe=n(Cxt,"SPAN",{});var wxt=s(rTe);T(Q9.$$.fragment,wxt),wxt.forEach(t),Cxt.forEach(t),hvr=i(jWe),tTe=n(jWe,"SPAN",{});var Axt=s(tTe);pvr=r(Axt,"AutoModelForInstanceSegmentation"),Axt.forEach(t),jWe.forEach(t),Sze=i(f),er=n(f,"DIV",{class:!0});var xl=s(er);T(W9.$$.fragment,xl),_vr=i(xl),nc=n(xl,"P",{});var qte=s(nc);uvr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uU=n(qte,"A",{href:!0});var Lxt=s(uU);bvr=r(Lxt,"from_pretrained()"),Lxt.forEach(t),vvr=r(qte," class method or the "),bU=n(qte,"A",{href:!0});var yxt=s(bU);Fvr=r(yxt,"from_config()"),yxt.forEach(t),Tvr=r(qte,` class
method.`),qte.forEach(t),Mvr=i(xl),H9=n(xl,"P",{});var DWe=s(H9);Evr=r(DWe,"This class cannot be instantiated directly using "),aTe=n(DWe,"CODE",{});var xxt=s(aTe);Cvr=r(xxt,"__init__()"),xxt.forEach(t),wvr=r(DWe," (throws an error)."),DWe.forEach(t),Avr=i(xl),St=n(xl,"DIV",{class:!0});var lA=s(St);T(U9.$$.fragment,lA),Lvr=i(lA),nTe=n(lA,"P",{});var $xt=s(nTe);yvr=r($xt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),$xt.forEach(t),xvr=i(lA),sc=n(lA,"P",{});var jte=s(sc);$vr=r(jte,`Note:
Loading a model from its configuration file does `),sTe=n(jte,"STRONG",{});var kxt=s(sTe);kvr=r(kxt,"not"),kxt.forEach(t),Svr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(jte,"A",{href:!0});var Sxt=s(vU);Rvr=r(Sxt,"from_pretrained()"),Sxt.forEach(t),Pvr=r(jte," to load the model weights."),jte.forEach(t),Bvr=i(lA),T(F8.$$.fragment,lA),lA.forEach(t),Nvr=i(xl),To=n(xl,"DIV",{class:!0});var ka=s(To);T(J9.$$.fragment,ka),Ivr=i(ka),lTe=n(ka,"P",{});var Rxt=s(lTe);qvr=r(Rxt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Rxt.forEach(t),jvr=i(ka),nn=n(ka,"P",{});var iA=s(nn);Dvr=r(iA,"The model class to instantiate is selected based on the "),iTe=n(iA,"CODE",{});var Pxt=s(iTe);Gvr=r(Pxt,"model_type"),Pxt.forEach(t),Ovr=r(iA,` property of the config object (either
passed as an argument or loaded from `),dTe=n(iA,"CODE",{});var Bxt=s(dTe);Vvr=r(Bxt,"pretrained_model_name_or_path"),Bxt.forEach(t),Xvr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(iA,"CODE",{});var Nxt=s(cTe);zvr=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),Qvr=r(iA,":"),iA.forEach(t),Wvr=i(ka),fTe=n(ka,"UL",{});var Ixt=s(fTe);T8=n(Ixt,"LI",{});var xqe=s(T8);mTe=n(xqe,"STRONG",{});var qxt=s(mTe);Hvr=r(qxt,"maskformer"),qxt.forEach(t),Uvr=r(xqe," \u2014 "),FU=n(xqe,"A",{href:!0});var jxt=s(FU);Jvr=r(jxt,"MaskFormerForInstanceSegmentation"),jxt.forEach(t),Yvr=r(xqe," (MaskFormer model)"),xqe.forEach(t),Ixt.forEach(t),Kvr=i(ka),M8=n(ka,"P",{});var $qe=s(M8);Zvr=r($qe,"The model is set in evaluation mode by default using "),gTe=n($qe,"CODE",{});var Dxt=s(gTe);eFr=r(Dxt,"model.eval()"),Dxt.forEach(t),oFr=r($qe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hTe=n($qe,"CODE",{});var Gxt=s(hTe);rFr=r(Gxt,"model.train()"),Gxt.forEach(t),$qe.forEach(t),tFr=i(ka),T(E8.$$.fragment,ka),ka.forEach(t),xl.forEach(t),Rze=i(f),lc=n(f,"H2",{class:!0});var GWe=s(lc);C8=n(GWe,"A",{id:!0,class:!0,href:!0});var Oxt=s(C8);pTe=n(Oxt,"SPAN",{});var Vxt=s(pTe);T(Y9.$$.fragment,Vxt),Vxt.forEach(t),Oxt.forEach(t),aFr=i(GWe),_Te=n(GWe,"SPAN",{});var Xxt=s(_Te);nFr=r(Xxt,"TFAutoModel"),Xxt.forEach(t),GWe.forEach(t),Pze=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(K9.$$.fragment,$l),sFr=i($l),ic=n($l,"P",{});var Dte=s(ic);lFr=r(Dte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TU=n(Dte,"A",{href:!0});var zxt=s(TU);iFr=r(zxt,"from_pretrained()"),zxt.forEach(t),dFr=r(Dte," class method or the "),MU=n(Dte,"A",{href:!0});var Qxt=s(MU);cFr=r(Qxt,"from_config()"),Qxt.forEach(t),fFr=r(Dte,` class
method.`),Dte.forEach(t),mFr=i($l),Z9=n($l,"P",{});var OWe=s(Z9);gFr=r(OWe,"This class cannot be instantiated directly using "),uTe=n(OWe,"CODE",{});var Wxt=s(uTe);hFr=r(Wxt,"__init__()"),Wxt.forEach(t),pFr=r(OWe," (throws an error)."),OWe.forEach(t),_Fr=i($l),Rt=n($l,"DIV",{class:!0});var dA=s(Rt);T(ex.$$.fragment,dA),uFr=i(dA),bTe=n(dA,"P",{});var Hxt=s(bTe);bFr=r(Hxt,"Instantiates one of the base model classes of the library from a configuration."),Hxt.forEach(t),vFr=i(dA),dc=n(dA,"P",{});var Gte=s(dc);FFr=r(Gte,`Note:
Loading a model from its configuration file does `),vTe=n(Gte,"STRONG",{});var Uxt=s(vTe);TFr=r(Uxt,"not"),Uxt.forEach(t),MFr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(Gte,"A",{href:!0});var Jxt=s(EU);EFr=r(Jxt,"from_pretrained()"),Jxt.forEach(t),CFr=r(Gte," to load the model weights."),Gte.forEach(t),wFr=i(dA),T(w8.$$.fragment,dA),dA.forEach(t),AFr=i($l),xr=n($l,"DIV",{class:!0});var kl=s(xr);T(ox.$$.fragment,kl),LFr=i(kl),FTe=n(kl,"P",{});var Yxt=s(FTe);yFr=r(Yxt,"Instantiate one of the base model classes of the library from a pretrained model."),Yxt.forEach(t),xFr=i(kl),sn=n(kl,"P",{});var cA=s(sn);$Fr=r(cA,"The model class to instantiate is selected based on the "),TTe=n(cA,"CODE",{});var Kxt=s(TTe);kFr=r(Kxt,"model_type"),Kxt.forEach(t),SFr=r(cA,` property of the config object (either
passed as an argument or loaded from `),MTe=n(cA,"CODE",{});var Zxt=s(MTe);RFr=r(Zxt,"pretrained_model_name_or_path"),Zxt.forEach(t),PFr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(cA,"CODE",{});var e$t=s(ETe);BFr=r(e$t,"pretrained_model_name_or_path"),e$t.forEach(t),NFr=r(cA,":"),cA.forEach(t),IFr=i(kl),q=n(kl,"UL",{});var D=s(q);A8=n(D,"LI",{});var kqe=s(A8);CTe=n(kqe,"STRONG",{});var o$t=s(CTe);qFr=r(o$t,"albert"),o$t.forEach(t),jFr=r(kqe," \u2014 "),CU=n(kqe,"A",{href:!0});var r$t=s(CU);DFr=r(r$t,"TFAlbertModel"),r$t.forEach(t),GFr=r(kqe," (ALBERT model)"),kqe.forEach(t),OFr=i(D),L8=n(D,"LI",{});var Sqe=s(L8);wTe=n(Sqe,"STRONG",{});var t$t=s(wTe);VFr=r(t$t,"bart"),t$t.forEach(t),XFr=r(Sqe," \u2014 "),wU=n(Sqe,"A",{href:!0});var a$t=s(wU);zFr=r(a$t,"TFBartModel"),a$t.forEach(t),QFr=r(Sqe," (BART model)"),Sqe.forEach(t),WFr=i(D),y8=n(D,"LI",{});var Rqe=s(y8);ATe=n(Rqe,"STRONG",{});var n$t=s(ATe);HFr=r(n$t,"bert"),n$t.forEach(t),UFr=r(Rqe," \u2014 "),AU=n(Rqe,"A",{href:!0});var s$t=s(AU);JFr=r(s$t,"TFBertModel"),s$t.forEach(t),YFr=r(Rqe," (BERT model)"),Rqe.forEach(t),KFr=i(D),x8=n(D,"LI",{});var Pqe=s(x8);LTe=n(Pqe,"STRONG",{});var l$t=s(LTe);ZFr=r(l$t,"blenderbot"),l$t.forEach(t),e6r=r(Pqe," \u2014 "),LU=n(Pqe,"A",{href:!0});var i$t=s(LU);o6r=r(i$t,"TFBlenderbotModel"),i$t.forEach(t),r6r=r(Pqe," (Blenderbot model)"),Pqe.forEach(t),t6r=i(D),$8=n(D,"LI",{});var Bqe=s($8);yTe=n(Bqe,"STRONG",{});var d$t=s(yTe);a6r=r(d$t,"blenderbot-small"),d$t.forEach(t),n6r=r(Bqe," \u2014 "),yU=n(Bqe,"A",{href:!0});var c$t=s(yU);s6r=r(c$t,"TFBlenderbotSmallModel"),c$t.forEach(t),l6r=r(Bqe," (BlenderbotSmall model)"),Bqe.forEach(t),i6r=i(D),k8=n(D,"LI",{});var Nqe=s(k8);xTe=n(Nqe,"STRONG",{});var f$t=s(xTe);d6r=r(f$t,"camembert"),f$t.forEach(t),c6r=r(Nqe," \u2014 "),xU=n(Nqe,"A",{href:!0});var m$t=s(xU);f6r=r(m$t,"TFCamembertModel"),m$t.forEach(t),m6r=r(Nqe," (CamemBERT model)"),Nqe.forEach(t),g6r=i(D),S8=n(D,"LI",{});var Iqe=s(S8);$Te=n(Iqe,"STRONG",{});var g$t=s($Te);h6r=r(g$t,"clip"),g$t.forEach(t),p6r=r(Iqe," \u2014 "),$U=n(Iqe,"A",{href:!0});var h$t=s($U);_6r=r(h$t,"TFCLIPModel"),h$t.forEach(t),u6r=r(Iqe," (CLIP model)"),Iqe.forEach(t),b6r=i(D),R8=n(D,"LI",{});var qqe=s(R8);kTe=n(qqe,"STRONG",{});var p$t=s(kTe);v6r=r(p$t,"convbert"),p$t.forEach(t),F6r=r(qqe," \u2014 "),kU=n(qqe,"A",{href:!0});var _$t=s(kU);T6r=r(_$t,"TFConvBertModel"),_$t.forEach(t),M6r=r(qqe," (ConvBERT model)"),qqe.forEach(t),E6r=i(D),P8=n(D,"LI",{});var jqe=s(P8);STe=n(jqe,"STRONG",{});var u$t=s(STe);C6r=r(u$t,"convnext"),u$t.forEach(t),w6r=r(jqe," \u2014 "),SU=n(jqe,"A",{href:!0});var b$t=s(SU);A6r=r(b$t,"TFConvNextModel"),b$t.forEach(t),L6r=r(jqe," (ConvNeXT model)"),jqe.forEach(t),y6r=i(D),B8=n(D,"LI",{});var Dqe=s(B8);RTe=n(Dqe,"STRONG",{});var v$t=s(RTe);x6r=r(v$t,"ctrl"),v$t.forEach(t),$6r=r(Dqe," \u2014 "),RU=n(Dqe,"A",{href:!0});var F$t=s(RU);k6r=r(F$t,"TFCTRLModel"),F$t.forEach(t),S6r=r(Dqe," (CTRL model)"),Dqe.forEach(t),R6r=i(D),N8=n(D,"LI",{});var Gqe=s(N8);PTe=n(Gqe,"STRONG",{});var T$t=s(PTe);P6r=r(T$t,"data2vec-vision"),T$t.forEach(t),B6r=r(Gqe," \u2014 "),PU=n(Gqe,"A",{href:!0});var M$t=s(PU);N6r=r(M$t,"TFData2VecVisionModel"),M$t.forEach(t),I6r=r(Gqe," (Data2VecVision model)"),Gqe.forEach(t),q6r=i(D),I8=n(D,"LI",{});var Oqe=s(I8);BTe=n(Oqe,"STRONG",{});var E$t=s(BTe);j6r=r(E$t,"deberta"),E$t.forEach(t),D6r=r(Oqe," \u2014 "),BU=n(Oqe,"A",{href:!0});var C$t=s(BU);G6r=r(C$t,"TFDebertaModel"),C$t.forEach(t),O6r=r(Oqe," (DeBERTa model)"),Oqe.forEach(t),V6r=i(D),q8=n(D,"LI",{});var Vqe=s(q8);NTe=n(Vqe,"STRONG",{});var w$t=s(NTe);X6r=r(w$t,"deberta-v2"),w$t.forEach(t),z6r=r(Vqe," \u2014 "),NU=n(Vqe,"A",{href:!0});var A$t=s(NU);Q6r=r(A$t,"TFDebertaV2Model"),A$t.forEach(t),W6r=r(Vqe," (DeBERTa-v2 model)"),Vqe.forEach(t),H6r=i(D),j8=n(D,"LI",{});var Xqe=s(j8);ITe=n(Xqe,"STRONG",{});var L$t=s(ITe);U6r=r(L$t,"deit"),L$t.forEach(t),J6r=r(Xqe," \u2014 "),IU=n(Xqe,"A",{href:!0});var y$t=s(IU);Y6r=r(y$t,"TFDeiTModel"),y$t.forEach(t),K6r=r(Xqe," (DeiT model)"),Xqe.forEach(t),Z6r=i(D),D8=n(D,"LI",{});var zqe=s(D8);qTe=n(zqe,"STRONG",{});var x$t=s(qTe);eTr=r(x$t,"distilbert"),x$t.forEach(t),oTr=r(zqe," \u2014 "),qU=n(zqe,"A",{href:!0});var $$t=s(qU);rTr=r($$t,"TFDistilBertModel"),$$t.forEach(t),tTr=r(zqe," (DistilBERT model)"),zqe.forEach(t),aTr=i(D),G8=n(D,"LI",{});var Qqe=s(G8);jTe=n(Qqe,"STRONG",{});var k$t=s(jTe);nTr=r(k$t,"dpr"),k$t.forEach(t),sTr=r(Qqe," \u2014 "),jU=n(Qqe,"A",{href:!0});var S$t=s(jU);lTr=r(S$t,"TFDPRQuestionEncoder"),S$t.forEach(t),iTr=r(Qqe," (DPR model)"),Qqe.forEach(t),dTr=i(D),O8=n(D,"LI",{});var Wqe=s(O8);DTe=n(Wqe,"STRONG",{});var R$t=s(DTe);cTr=r(R$t,"electra"),R$t.forEach(t),fTr=r(Wqe," \u2014 "),DU=n(Wqe,"A",{href:!0});var P$t=s(DU);mTr=r(P$t,"TFElectraModel"),P$t.forEach(t),gTr=r(Wqe," (ELECTRA model)"),Wqe.forEach(t),hTr=i(D),V8=n(D,"LI",{});var Hqe=s(V8);GTe=n(Hqe,"STRONG",{});var B$t=s(GTe);pTr=r(B$t,"flaubert"),B$t.forEach(t),_Tr=r(Hqe," \u2014 "),GU=n(Hqe,"A",{href:!0});var N$t=s(GU);uTr=r(N$t,"TFFlaubertModel"),N$t.forEach(t),bTr=r(Hqe," (FlauBERT model)"),Hqe.forEach(t),vTr=i(D),Ys=n(D,"LI",{});var GS=s(Ys);OTe=n(GS,"STRONG",{});var I$t=s(OTe);FTr=r(I$t,"funnel"),I$t.forEach(t),TTr=r(GS," \u2014 "),OU=n(GS,"A",{href:!0});var q$t=s(OU);MTr=r(q$t,"TFFunnelModel"),q$t.forEach(t),ETr=r(GS," or "),VU=n(GS,"A",{href:!0});var j$t=s(VU);CTr=r(j$t,"TFFunnelBaseModel"),j$t.forEach(t),wTr=r(GS," (Funnel Transformer model)"),GS.forEach(t),ATr=i(D),X8=n(D,"LI",{});var Uqe=s(X8);VTe=n(Uqe,"STRONG",{});var D$t=s(VTe);LTr=r(D$t,"gpt2"),D$t.forEach(t),yTr=r(Uqe," \u2014 "),XU=n(Uqe,"A",{href:!0});var G$t=s(XU);xTr=r(G$t,"TFGPT2Model"),G$t.forEach(t),$Tr=r(Uqe," (OpenAI GPT-2 model)"),Uqe.forEach(t),kTr=i(D),z8=n(D,"LI",{});var Jqe=s(z8);XTe=n(Jqe,"STRONG",{});var O$t=s(XTe);STr=r(O$t,"gptj"),O$t.forEach(t),RTr=r(Jqe," \u2014 "),zU=n(Jqe,"A",{href:!0});var V$t=s(zU);PTr=r(V$t,"TFGPTJModel"),V$t.forEach(t),BTr=r(Jqe," (GPT-J model)"),Jqe.forEach(t),NTr=i(D),Q8=n(D,"LI",{});var Yqe=s(Q8);zTe=n(Yqe,"STRONG",{});var X$t=s(zTe);ITr=r(X$t,"hubert"),X$t.forEach(t),qTr=r(Yqe," \u2014 "),QU=n(Yqe,"A",{href:!0});var z$t=s(QU);jTr=r(z$t,"TFHubertModel"),z$t.forEach(t),DTr=r(Yqe," (Hubert model)"),Yqe.forEach(t),GTr=i(D),W8=n(D,"LI",{});var Kqe=s(W8);QTe=n(Kqe,"STRONG",{});var Q$t=s(QTe);OTr=r(Q$t,"layoutlm"),Q$t.forEach(t),VTr=r(Kqe," \u2014 "),WU=n(Kqe,"A",{href:!0});var W$t=s(WU);XTr=r(W$t,"TFLayoutLMModel"),W$t.forEach(t),zTr=r(Kqe," (LayoutLM model)"),Kqe.forEach(t),QTr=i(D),H8=n(D,"LI",{});var Zqe=s(H8);WTe=n(Zqe,"STRONG",{});var H$t=s(WTe);WTr=r(H$t,"led"),H$t.forEach(t),HTr=r(Zqe," \u2014 "),HU=n(Zqe,"A",{href:!0});var U$t=s(HU);UTr=r(U$t,"TFLEDModel"),U$t.forEach(t),JTr=r(Zqe," (LED model)"),Zqe.forEach(t),YTr=i(D),U8=n(D,"LI",{});var eje=s(U8);HTe=n(eje,"STRONG",{});var J$t=s(HTe);KTr=r(J$t,"longformer"),J$t.forEach(t),ZTr=r(eje," \u2014 "),UU=n(eje,"A",{href:!0});var Y$t=s(UU);e7r=r(Y$t,"TFLongformerModel"),Y$t.forEach(t),o7r=r(eje," (Longformer model)"),eje.forEach(t),r7r=i(D),J8=n(D,"LI",{});var oje=s(J8);UTe=n(oje,"STRONG",{});var K$t=s(UTe);t7r=r(K$t,"lxmert"),K$t.forEach(t),a7r=r(oje," \u2014 "),JU=n(oje,"A",{href:!0});var Z$t=s(JU);n7r=r(Z$t,"TFLxmertModel"),Z$t.forEach(t),s7r=r(oje," (LXMERT model)"),oje.forEach(t),l7r=i(D),Y8=n(D,"LI",{});var rje=s(Y8);JTe=n(rje,"STRONG",{});var ekt=s(JTe);i7r=r(ekt,"marian"),ekt.forEach(t),d7r=r(rje," \u2014 "),YU=n(rje,"A",{href:!0});var okt=s(YU);c7r=r(okt,"TFMarianModel"),okt.forEach(t),f7r=r(rje," (Marian model)"),rje.forEach(t),m7r=i(D),K8=n(D,"LI",{});var tje=s(K8);YTe=n(tje,"STRONG",{});var rkt=s(YTe);g7r=r(rkt,"mbart"),rkt.forEach(t),h7r=r(tje," \u2014 "),KU=n(tje,"A",{href:!0});var tkt=s(KU);p7r=r(tkt,"TFMBartModel"),tkt.forEach(t),_7r=r(tje," (mBART model)"),tje.forEach(t),u7r=i(D),Z8=n(D,"LI",{});var aje=s(Z8);KTe=n(aje,"STRONG",{});var akt=s(KTe);b7r=r(akt,"mobilebert"),akt.forEach(t),v7r=r(aje," \u2014 "),ZU=n(aje,"A",{href:!0});var nkt=s(ZU);F7r=r(nkt,"TFMobileBertModel"),nkt.forEach(t),T7r=r(aje," (MobileBERT model)"),aje.forEach(t),M7r=i(D),eM=n(D,"LI",{});var nje=s(eM);ZTe=n(nje,"STRONG",{});var skt=s(ZTe);E7r=r(skt,"mpnet"),skt.forEach(t),C7r=r(nje," \u2014 "),eJ=n(nje,"A",{href:!0});var lkt=s(eJ);w7r=r(lkt,"TFMPNetModel"),lkt.forEach(t),A7r=r(nje," (MPNet model)"),nje.forEach(t),L7r=i(D),oM=n(D,"LI",{});var sje=s(oM);e7e=n(sje,"STRONG",{});var ikt=s(e7e);y7r=r(ikt,"mt5"),ikt.forEach(t),x7r=r(sje," \u2014 "),oJ=n(sje,"A",{href:!0});var dkt=s(oJ);$7r=r(dkt,"TFMT5Model"),dkt.forEach(t),k7r=r(sje," (MT5 model)"),sje.forEach(t),S7r=i(D),rM=n(D,"LI",{});var lje=s(rM);o7e=n(lje,"STRONG",{});var ckt=s(o7e);R7r=r(ckt,"openai-gpt"),ckt.forEach(t),P7r=r(lje," \u2014 "),rJ=n(lje,"A",{href:!0});var fkt=s(rJ);B7r=r(fkt,"TFOpenAIGPTModel"),fkt.forEach(t),N7r=r(lje," (OpenAI GPT model)"),lje.forEach(t),I7r=i(D),tM=n(D,"LI",{});var ije=s(tM);r7e=n(ije,"STRONG",{});var mkt=s(r7e);q7r=r(mkt,"opt"),mkt.forEach(t),j7r=r(ije," \u2014 "),tJ=n(ije,"A",{href:!0});var gkt=s(tJ);D7r=r(gkt,"TFOPTModel"),gkt.forEach(t),G7r=r(ije," (OPT model)"),ije.forEach(t),O7r=i(D),aM=n(D,"LI",{});var dje=s(aM);t7e=n(dje,"STRONG",{});var hkt=s(t7e);V7r=r(hkt,"pegasus"),hkt.forEach(t),X7r=r(dje," \u2014 "),aJ=n(dje,"A",{href:!0});var pkt=s(aJ);z7r=r(pkt,"TFPegasusModel"),pkt.forEach(t),Q7r=r(dje," (Pegasus model)"),dje.forEach(t),W7r=i(D),nM=n(D,"LI",{});var cje=s(nM);a7e=n(cje,"STRONG",{});var _kt=s(a7e);H7r=r(_kt,"regnet"),_kt.forEach(t),U7r=r(cje," \u2014 "),nJ=n(cje,"A",{href:!0});var ukt=s(nJ);J7r=r(ukt,"TFRegNetModel"),ukt.forEach(t),Y7r=r(cje," (RegNet model)"),cje.forEach(t),K7r=i(D),sM=n(D,"LI",{});var fje=s(sM);n7e=n(fje,"STRONG",{});var bkt=s(n7e);Z7r=r(bkt,"rembert"),bkt.forEach(t),e8r=r(fje," \u2014 "),sJ=n(fje,"A",{href:!0});var vkt=s(sJ);o8r=r(vkt,"TFRemBertModel"),vkt.forEach(t),r8r=r(fje," (RemBERT model)"),fje.forEach(t),t8r=i(D),lM=n(D,"LI",{});var mje=s(lM);s7e=n(mje,"STRONG",{});var Fkt=s(s7e);a8r=r(Fkt,"resnet"),Fkt.forEach(t),n8r=r(mje," \u2014 "),lJ=n(mje,"A",{href:!0});var Tkt=s(lJ);s8r=r(Tkt,"TFResNetModel"),Tkt.forEach(t),l8r=r(mje," (ResNet model)"),mje.forEach(t),i8r=i(D),iM=n(D,"LI",{});var gje=s(iM);l7e=n(gje,"STRONG",{});var Mkt=s(l7e);d8r=r(Mkt,"roberta"),Mkt.forEach(t),c8r=r(gje," \u2014 "),iJ=n(gje,"A",{href:!0});var Ekt=s(iJ);f8r=r(Ekt,"TFRobertaModel"),Ekt.forEach(t),m8r=r(gje," (RoBERTa model)"),gje.forEach(t),g8r=i(D),dM=n(D,"LI",{});var hje=s(dM);i7e=n(hje,"STRONG",{});var Ckt=s(i7e);h8r=r(Ckt,"roformer"),Ckt.forEach(t),p8r=r(hje," \u2014 "),dJ=n(hje,"A",{href:!0});var wkt=s(dJ);_8r=r(wkt,"TFRoFormerModel"),wkt.forEach(t),u8r=r(hje," (RoFormer model)"),hje.forEach(t),b8r=i(D),cM=n(D,"LI",{});var pje=s(cM);d7e=n(pje,"STRONG",{});var Akt=s(d7e);v8r=r(Akt,"speech_to_text"),Akt.forEach(t),F8r=r(pje," \u2014 "),cJ=n(pje,"A",{href:!0});var Lkt=s(cJ);T8r=r(Lkt,"TFSpeech2TextModel"),Lkt.forEach(t),M8r=r(pje," (Speech2Text model)"),pje.forEach(t),E8r=i(D),fM=n(D,"LI",{});var _je=s(fM);c7e=n(_je,"STRONG",{});var ykt=s(c7e);C8r=r(ykt,"swin"),ykt.forEach(t),w8r=r(_je," \u2014 "),fJ=n(_je,"A",{href:!0});var xkt=s(fJ);A8r=r(xkt,"TFSwinModel"),xkt.forEach(t),L8r=r(_je," (Swin Transformer model)"),_je.forEach(t),y8r=i(D),mM=n(D,"LI",{});var uje=s(mM);f7e=n(uje,"STRONG",{});var $kt=s(f7e);x8r=r($kt,"t5"),$kt.forEach(t),$8r=r(uje," \u2014 "),mJ=n(uje,"A",{href:!0});var kkt=s(mJ);k8r=r(kkt,"TFT5Model"),kkt.forEach(t),S8r=r(uje," (T5 model)"),uje.forEach(t),R8r=i(D),gM=n(D,"LI",{});var bje=s(gM);m7e=n(bje,"STRONG",{});var Skt=s(m7e);P8r=r(Skt,"tapas"),Skt.forEach(t),B8r=r(bje," \u2014 "),gJ=n(bje,"A",{href:!0});var Rkt=s(gJ);N8r=r(Rkt,"TFTapasModel"),Rkt.forEach(t),I8r=r(bje," (TAPAS model)"),bje.forEach(t),q8r=i(D),hM=n(D,"LI",{});var vje=s(hM);g7e=n(vje,"STRONG",{});var Pkt=s(g7e);j8r=r(Pkt,"transfo-xl"),Pkt.forEach(t),D8r=r(vje," \u2014 "),hJ=n(vje,"A",{href:!0});var Bkt=s(hJ);G8r=r(Bkt,"TFTransfoXLModel"),Bkt.forEach(t),O8r=r(vje," (Transformer-XL model)"),vje.forEach(t),V8r=i(D),pM=n(D,"LI",{});var Fje=s(pM);h7e=n(Fje,"STRONG",{});var Nkt=s(h7e);X8r=r(Nkt,"vit"),Nkt.forEach(t),z8r=r(Fje," \u2014 "),pJ=n(Fje,"A",{href:!0});var Ikt=s(pJ);Q8r=r(Ikt,"TFViTModel"),Ikt.forEach(t),W8r=r(Fje," (ViT model)"),Fje.forEach(t),H8r=i(D),_M=n(D,"LI",{});var Tje=s(_M);p7e=n(Tje,"STRONG",{});var qkt=s(p7e);U8r=r(qkt,"vit_mae"),qkt.forEach(t),J8r=r(Tje," \u2014 "),_J=n(Tje,"A",{href:!0});var jkt=s(_J);Y8r=r(jkt,"TFViTMAEModel"),jkt.forEach(t),K8r=r(Tje," (ViTMAE model)"),Tje.forEach(t),Z8r=i(D),uM=n(D,"LI",{});var Mje=s(uM);_7e=n(Mje,"STRONG",{});var Dkt=s(_7e);eMr=r(Dkt,"wav2vec2"),Dkt.forEach(t),oMr=r(Mje," \u2014 "),uJ=n(Mje,"A",{href:!0});var Gkt=s(uJ);rMr=r(Gkt,"TFWav2Vec2Model"),Gkt.forEach(t),tMr=r(Mje," (Wav2Vec2 model)"),Mje.forEach(t),aMr=i(D),bM=n(D,"LI",{});var Eje=s(bM);u7e=n(Eje,"STRONG",{});var Okt=s(u7e);nMr=r(Okt,"xlm"),Okt.forEach(t),sMr=r(Eje," \u2014 "),bJ=n(Eje,"A",{href:!0});var Vkt=s(bJ);lMr=r(Vkt,"TFXLMModel"),Vkt.forEach(t),iMr=r(Eje," (XLM model)"),Eje.forEach(t),dMr=i(D),vM=n(D,"LI",{});var Cje=s(vM);b7e=n(Cje,"STRONG",{});var Xkt=s(b7e);cMr=r(Xkt,"xlm-roberta"),Xkt.forEach(t),fMr=r(Cje," \u2014 "),vJ=n(Cje,"A",{href:!0});var zkt=s(vJ);mMr=r(zkt,"TFXLMRobertaModel"),zkt.forEach(t),gMr=r(Cje," (XLM-RoBERTa model)"),Cje.forEach(t),hMr=i(D),FM=n(D,"LI",{});var wje=s(FM);v7e=n(wje,"STRONG",{});var Qkt=s(v7e);pMr=r(Qkt,"xlnet"),Qkt.forEach(t),_Mr=r(wje," \u2014 "),FJ=n(wje,"A",{href:!0});var Wkt=s(FJ);uMr=r(Wkt,"TFXLNetModel"),Wkt.forEach(t),bMr=r(wje," (XLNet model)"),wje.forEach(t),D.forEach(t),vMr=i(kl),T(TM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Bze=i(f),cc=n(f,"H2",{class:!0});var VWe=s(cc);MM=n(VWe,"A",{id:!0,class:!0,href:!0});var Hkt=s(MM);F7e=n(Hkt,"SPAN",{});var Ukt=s(F7e);T(rx.$$.fragment,Ukt),Ukt.forEach(t),Hkt.forEach(t),FMr=i(VWe),T7e=n(VWe,"SPAN",{});var Jkt=s(T7e);TMr=r(Jkt,"TFAutoModelForPreTraining"),Jkt.forEach(t),VWe.forEach(t),Nze=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(tx.$$.fragment,Sl),MMr=i(Sl),fc=n(Sl,"P",{});var Ote=s(fc);EMr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TJ=n(Ote,"A",{href:!0});var Ykt=s(TJ);CMr=r(Ykt,"from_pretrained()"),Ykt.forEach(t),wMr=r(Ote," class method or the "),MJ=n(Ote,"A",{href:!0});var Kkt=s(MJ);AMr=r(Kkt,"from_config()"),Kkt.forEach(t),LMr=r(Ote,` class
method.`),Ote.forEach(t),yMr=i(Sl),ax=n(Sl,"P",{});var XWe=s(ax);xMr=r(XWe,"This class cannot be instantiated directly using "),M7e=n(XWe,"CODE",{});var Zkt=s(M7e);$Mr=r(Zkt,"__init__()"),Zkt.forEach(t),kMr=r(XWe," (throws an error)."),XWe.forEach(t),SMr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var fA=s(Pt);T(nx.$$.fragment,fA),RMr=i(fA),E7e=n(fA,"P",{});var eSt=s(E7e);PMr=r(eSt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),eSt.forEach(t),BMr=i(fA),mc=n(fA,"P",{});var Vte=s(mc);NMr=r(Vte,`Note:
Loading a model from its configuration file does `),C7e=n(Vte,"STRONG",{});var oSt=s(C7e);IMr=r(oSt,"not"),oSt.forEach(t),qMr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(Vte,"A",{href:!0});var rSt=s(EJ);jMr=r(rSt,"from_pretrained()"),rSt.forEach(t),DMr=r(Vte," to load the model weights."),Vte.forEach(t),GMr=i(fA),T(EM.$$.fragment,fA),fA.forEach(t),OMr=i(Sl),$r=n(Sl,"DIV",{class:!0});var Rl=s($r);T(sx.$$.fragment,Rl),VMr=i(Rl),w7e=n(Rl,"P",{});var tSt=s(w7e);XMr=r(tSt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tSt.forEach(t),zMr=i(Rl),ln=n(Rl,"P",{});var mA=s(ln);QMr=r(mA,"The model class to instantiate is selected based on the "),A7e=n(mA,"CODE",{});var aSt=s(A7e);WMr=r(aSt,"model_type"),aSt.forEach(t),HMr=r(mA,` property of the config object (either
passed as an argument or loaded from `),L7e=n(mA,"CODE",{});var nSt=s(L7e);UMr=r(nSt,"pretrained_model_name_or_path"),nSt.forEach(t),JMr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=n(mA,"CODE",{});var sSt=s(y7e);YMr=r(sSt,"pretrained_model_name_or_path"),sSt.forEach(t),KMr=r(mA,":"),mA.forEach(t),ZMr=i(Rl),se=n(Rl,"UL",{});var le=s(se);CM=n(le,"LI",{});var Aje=s(CM);x7e=n(Aje,"STRONG",{});var lSt=s(x7e);e4r=r(lSt,"albert"),lSt.forEach(t),o4r=r(Aje," \u2014 "),CJ=n(Aje,"A",{href:!0});var iSt=s(CJ);r4r=r(iSt,"TFAlbertForPreTraining"),iSt.forEach(t),t4r=r(Aje," (ALBERT model)"),Aje.forEach(t),a4r=i(le),wM=n(le,"LI",{});var Lje=s(wM);$7e=n(Lje,"STRONG",{});var dSt=s($7e);n4r=r(dSt,"bart"),dSt.forEach(t),s4r=r(Lje," \u2014 "),wJ=n(Lje,"A",{href:!0});var cSt=s(wJ);l4r=r(cSt,"TFBartForConditionalGeneration"),cSt.forEach(t),i4r=r(Lje," (BART model)"),Lje.forEach(t),d4r=i(le),AM=n(le,"LI",{});var yje=s(AM);k7e=n(yje,"STRONG",{});var fSt=s(k7e);c4r=r(fSt,"bert"),fSt.forEach(t),f4r=r(yje," \u2014 "),AJ=n(yje,"A",{href:!0});var mSt=s(AJ);m4r=r(mSt,"TFBertForPreTraining"),mSt.forEach(t),g4r=r(yje," (BERT model)"),yje.forEach(t),h4r=i(le),LM=n(le,"LI",{});var xje=s(LM);S7e=n(xje,"STRONG",{});var gSt=s(S7e);p4r=r(gSt,"camembert"),gSt.forEach(t),_4r=r(xje," \u2014 "),LJ=n(xje,"A",{href:!0});var hSt=s(LJ);u4r=r(hSt,"TFCamembertForMaskedLM"),hSt.forEach(t),b4r=r(xje," (CamemBERT model)"),xje.forEach(t),v4r=i(le),yM=n(le,"LI",{});var $je=s(yM);R7e=n($je,"STRONG",{});var pSt=s(R7e);F4r=r(pSt,"ctrl"),pSt.forEach(t),T4r=r($je," \u2014 "),yJ=n($je,"A",{href:!0});var _St=s(yJ);M4r=r(_St,"TFCTRLLMHeadModel"),_St.forEach(t),E4r=r($je," (CTRL model)"),$je.forEach(t),C4r=i(le),xM=n(le,"LI",{});var kje=s(xM);P7e=n(kje,"STRONG",{});var uSt=s(P7e);w4r=r(uSt,"distilbert"),uSt.forEach(t),A4r=r(kje," \u2014 "),xJ=n(kje,"A",{href:!0});var bSt=s(xJ);L4r=r(bSt,"TFDistilBertForMaskedLM"),bSt.forEach(t),y4r=r(kje," (DistilBERT model)"),kje.forEach(t),x4r=i(le),$M=n(le,"LI",{});var Sje=s($M);B7e=n(Sje,"STRONG",{});var vSt=s(B7e);$4r=r(vSt,"electra"),vSt.forEach(t),k4r=r(Sje," \u2014 "),$J=n(Sje,"A",{href:!0});var FSt=s($J);S4r=r(FSt,"TFElectraForPreTraining"),FSt.forEach(t),R4r=r(Sje," (ELECTRA model)"),Sje.forEach(t),P4r=i(le),kM=n(le,"LI",{});var Rje=s(kM);N7e=n(Rje,"STRONG",{});var TSt=s(N7e);B4r=r(TSt,"flaubert"),TSt.forEach(t),N4r=r(Rje," \u2014 "),kJ=n(Rje,"A",{href:!0});var MSt=s(kJ);I4r=r(MSt,"TFFlaubertWithLMHeadModel"),MSt.forEach(t),q4r=r(Rje," (FlauBERT model)"),Rje.forEach(t),j4r=i(le),SM=n(le,"LI",{});var Pje=s(SM);I7e=n(Pje,"STRONG",{});var ESt=s(I7e);D4r=r(ESt,"funnel"),ESt.forEach(t),G4r=r(Pje," \u2014 "),SJ=n(Pje,"A",{href:!0});var CSt=s(SJ);O4r=r(CSt,"TFFunnelForPreTraining"),CSt.forEach(t),V4r=r(Pje," (Funnel Transformer model)"),Pje.forEach(t),X4r=i(le),RM=n(le,"LI",{});var Bje=s(RM);q7e=n(Bje,"STRONG",{});var wSt=s(q7e);z4r=r(wSt,"gpt2"),wSt.forEach(t),Q4r=r(Bje," \u2014 "),RJ=n(Bje,"A",{href:!0});var ASt=s(RJ);W4r=r(ASt,"TFGPT2LMHeadModel"),ASt.forEach(t),H4r=r(Bje," (OpenAI GPT-2 model)"),Bje.forEach(t),U4r=i(le),PM=n(le,"LI",{});var Nje=s(PM);j7e=n(Nje,"STRONG",{});var LSt=s(j7e);J4r=r(LSt,"layoutlm"),LSt.forEach(t),Y4r=r(Nje," \u2014 "),PJ=n(Nje,"A",{href:!0});var ySt=s(PJ);K4r=r(ySt,"TFLayoutLMForMaskedLM"),ySt.forEach(t),Z4r=r(Nje," (LayoutLM model)"),Nje.forEach(t),eEr=i(le),BM=n(le,"LI",{});var Ije=s(BM);D7e=n(Ije,"STRONG",{});var xSt=s(D7e);oEr=r(xSt,"lxmert"),xSt.forEach(t),rEr=r(Ije," \u2014 "),BJ=n(Ije,"A",{href:!0});var $St=s(BJ);tEr=r($St,"TFLxmertForPreTraining"),$St.forEach(t),aEr=r(Ije," (LXMERT model)"),Ije.forEach(t),nEr=i(le),NM=n(le,"LI",{});var qje=s(NM);G7e=n(qje,"STRONG",{});var kSt=s(G7e);sEr=r(kSt,"mobilebert"),kSt.forEach(t),lEr=r(qje," \u2014 "),NJ=n(qje,"A",{href:!0});var SSt=s(NJ);iEr=r(SSt,"TFMobileBertForPreTraining"),SSt.forEach(t),dEr=r(qje," (MobileBERT model)"),qje.forEach(t),cEr=i(le),IM=n(le,"LI",{});var jje=s(IM);O7e=n(jje,"STRONG",{});var RSt=s(O7e);fEr=r(RSt,"mpnet"),RSt.forEach(t),mEr=r(jje," \u2014 "),IJ=n(jje,"A",{href:!0});var PSt=s(IJ);gEr=r(PSt,"TFMPNetForMaskedLM"),PSt.forEach(t),hEr=r(jje," (MPNet model)"),jje.forEach(t),pEr=i(le),qM=n(le,"LI",{});var Dje=s(qM);V7e=n(Dje,"STRONG",{});var BSt=s(V7e);_Er=r(BSt,"openai-gpt"),BSt.forEach(t),uEr=r(Dje," \u2014 "),qJ=n(Dje,"A",{href:!0});var NSt=s(qJ);bEr=r(NSt,"TFOpenAIGPTLMHeadModel"),NSt.forEach(t),vEr=r(Dje," (OpenAI GPT model)"),Dje.forEach(t),FEr=i(le),jM=n(le,"LI",{});var Gje=s(jM);X7e=n(Gje,"STRONG",{});var ISt=s(X7e);TEr=r(ISt,"roberta"),ISt.forEach(t),MEr=r(Gje," \u2014 "),jJ=n(Gje,"A",{href:!0});var qSt=s(jJ);EEr=r(qSt,"TFRobertaForMaskedLM"),qSt.forEach(t),CEr=r(Gje," (RoBERTa model)"),Gje.forEach(t),wEr=i(le),DM=n(le,"LI",{});var Oje=s(DM);z7e=n(Oje,"STRONG",{});var jSt=s(z7e);AEr=r(jSt,"t5"),jSt.forEach(t),LEr=r(Oje," \u2014 "),DJ=n(Oje,"A",{href:!0});var DSt=s(DJ);yEr=r(DSt,"TFT5ForConditionalGeneration"),DSt.forEach(t),xEr=r(Oje," (T5 model)"),Oje.forEach(t),$Er=i(le),GM=n(le,"LI",{});var Vje=s(GM);Q7e=n(Vje,"STRONG",{});var GSt=s(Q7e);kEr=r(GSt,"tapas"),GSt.forEach(t),SEr=r(Vje," \u2014 "),GJ=n(Vje,"A",{href:!0});var OSt=s(GJ);REr=r(OSt,"TFTapasForMaskedLM"),OSt.forEach(t),PEr=r(Vje," (TAPAS model)"),Vje.forEach(t),BEr=i(le),OM=n(le,"LI",{});var Xje=s(OM);W7e=n(Xje,"STRONG",{});var VSt=s(W7e);NEr=r(VSt,"transfo-xl"),VSt.forEach(t),IEr=r(Xje," \u2014 "),OJ=n(Xje,"A",{href:!0});var XSt=s(OJ);qEr=r(XSt,"TFTransfoXLLMHeadModel"),XSt.forEach(t),jEr=r(Xje," (Transformer-XL model)"),Xje.forEach(t),DEr=i(le),VM=n(le,"LI",{});var zje=s(VM);H7e=n(zje,"STRONG",{});var zSt=s(H7e);GEr=r(zSt,"vit_mae"),zSt.forEach(t),OEr=r(zje," \u2014 "),VJ=n(zje,"A",{href:!0});var QSt=s(VJ);VEr=r(QSt,"TFViTMAEForPreTraining"),QSt.forEach(t),XEr=r(zje," (ViTMAE model)"),zje.forEach(t),zEr=i(le),XM=n(le,"LI",{});var Qje=s(XM);U7e=n(Qje,"STRONG",{});var WSt=s(U7e);QEr=r(WSt,"xlm"),WSt.forEach(t),WEr=r(Qje," \u2014 "),XJ=n(Qje,"A",{href:!0});var HSt=s(XJ);HEr=r(HSt,"TFXLMWithLMHeadModel"),HSt.forEach(t),UEr=r(Qje," (XLM model)"),Qje.forEach(t),JEr=i(le),zM=n(le,"LI",{});var Wje=s(zM);J7e=n(Wje,"STRONG",{});var USt=s(J7e);YEr=r(USt,"xlm-roberta"),USt.forEach(t),KEr=r(Wje," \u2014 "),zJ=n(Wje,"A",{href:!0});var JSt=s(zJ);ZEr=r(JSt,"TFXLMRobertaForMaskedLM"),JSt.forEach(t),eCr=r(Wje," (XLM-RoBERTa model)"),Wje.forEach(t),oCr=i(le),QM=n(le,"LI",{});var Hje=s(QM);Y7e=n(Hje,"STRONG",{});var YSt=s(Y7e);rCr=r(YSt,"xlnet"),YSt.forEach(t),tCr=r(Hje," \u2014 "),QJ=n(Hje,"A",{href:!0});var KSt=s(QJ);aCr=r(KSt,"TFXLNetLMHeadModel"),KSt.forEach(t),nCr=r(Hje," (XLNet model)"),Hje.forEach(t),le.forEach(t),sCr=i(Rl),T(WM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Ize=i(f),gc=n(f,"H2",{class:!0});var zWe=s(gc);HM=n(zWe,"A",{id:!0,class:!0,href:!0});var ZSt=s(HM);K7e=n(ZSt,"SPAN",{});var eRt=s(K7e);T(lx.$$.fragment,eRt),eRt.forEach(t),ZSt.forEach(t),lCr=i(zWe),Z7e=n(zWe,"SPAN",{});var oRt=s(Z7e);iCr=r(oRt,"TFAutoModelForCausalLM"),oRt.forEach(t),zWe.forEach(t),qze=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(ix.$$.fragment,Pl),dCr=i(Pl),hc=n(Pl,"P",{});var Xte=s(hc);cCr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WJ=n(Xte,"A",{href:!0});var rRt=s(WJ);fCr=r(rRt,"from_pretrained()"),rRt.forEach(t),mCr=r(Xte," class method or the "),HJ=n(Xte,"A",{href:!0});var tRt=s(HJ);gCr=r(tRt,"from_config()"),tRt.forEach(t),hCr=r(Xte,` class
method.`),Xte.forEach(t),pCr=i(Pl),dx=n(Pl,"P",{});var QWe=s(dx);_Cr=r(QWe,"This class cannot be instantiated directly using "),e8e=n(QWe,"CODE",{});var aRt=s(e8e);uCr=r(aRt,"__init__()"),aRt.forEach(t),bCr=r(QWe," (throws an error)."),QWe.forEach(t),vCr=i(Pl),Bt=n(Pl,"DIV",{class:!0});var gA=s(Bt);T(cx.$$.fragment,gA),FCr=i(gA),o8e=n(gA,"P",{});var nRt=s(o8e);TCr=r(nRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nRt.forEach(t),MCr=i(gA),pc=n(gA,"P",{});var zte=s(pc);ECr=r(zte,`Note:
Loading a model from its configuration file does `),r8e=n(zte,"STRONG",{});var sRt=s(r8e);CCr=r(sRt,"not"),sRt.forEach(t),wCr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(zte,"A",{href:!0});var lRt=s(UJ);ACr=r(lRt,"from_pretrained()"),lRt.forEach(t),LCr=r(zte," to load the model weights."),zte.forEach(t),yCr=i(gA),T(UM.$$.fragment,gA),gA.forEach(t),xCr=i(Pl),kr=n(Pl,"DIV",{class:!0});var Bl=s(kr);T(fx.$$.fragment,Bl),$Cr=i(Bl),t8e=n(Bl,"P",{});var iRt=s(t8e);kCr=r(iRt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iRt.forEach(t),SCr=i(Bl),dn=n(Bl,"P",{});var hA=s(dn);RCr=r(hA,"The model class to instantiate is selected based on the "),a8e=n(hA,"CODE",{});var dRt=s(a8e);PCr=r(dRt,"model_type"),dRt.forEach(t),BCr=r(hA,` property of the config object (either
passed as an argument or loaded from `),n8e=n(hA,"CODE",{});var cRt=s(n8e);NCr=r(cRt,"pretrained_model_name_or_path"),cRt.forEach(t),ICr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s8e=n(hA,"CODE",{});var fRt=s(s8e);qCr=r(fRt,"pretrained_model_name_or_path"),fRt.forEach(t),jCr=r(hA,":"),hA.forEach(t),DCr=i(Bl),Me=n(Bl,"UL",{});var Ce=s(Me);JM=n(Ce,"LI",{});var Uje=s(JM);l8e=n(Uje,"STRONG",{});var mRt=s(l8e);GCr=r(mRt,"bert"),mRt.forEach(t),OCr=r(Uje," \u2014 "),JJ=n(Uje,"A",{href:!0});var gRt=s(JJ);VCr=r(gRt,"TFBertLMHeadModel"),gRt.forEach(t),XCr=r(Uje," (BERT model)"),Uje.forEach(t),zCr=i(Ce),YM=n(Ce,"LI",{});var Jje=s(YM);i8e=n(Jje,"STRONG",{});var hRt=s(i8e);QCr=r(hRt,"camembert"),hRt.forEach(t),WCr=r(Jje," \u2014 "),YJ=n(Jje,"A",{href:!0});var pRt=s(YJ);HCr=r(pRt,"TFCamembertForCausalLM"),pRt.forEach(t),UCr=r(Jje," (CamemBERT model)"),Jje.forEach(t),JCr=i(Ce),KM=n(Ce,"LI",{});var Yje=s(KM);d8e=n(Yje,"STRONG",{});var _Rt=s(d8e);YCr=r(_Rt,"ctrl"),_Rt.forEach(t),KCr=r(Yje," \u2014 "),KJ=n(Yje,"A",{href:!0});var uRt=s(KJ);ZCr=r(uRt,"TFCTRLLMHeadModel"),uRt.forEach(t),e5r=r(Yje," (CTRL model)"),Yje.forEach(t),o5r=i(Ce),ZM=n(Ce,"LI",{});var Kje=s(ZM);c8e=n(Kje,"STRONG",{});var bRt=s(c8e);r5r=r(bRt,"gpt2"),bRt.forEach(t),t5r=r(Kje," \u2014 "),ZJ=n(Kje,"A",{href:!0});var vRt=s(ZJ);a5r=r(vRt,"TFGPT2LMHeadModel"),vRt.forEach(t),n5r=r(Kje," (OpenAI GPT-2 model)"),Kje.forEach(t),s5r=i(Ce),e4=n(Ce,"LI",{});var Zje=s(e4);f8e=n(Zje,"STRONG",{});var FRt=s(f8e);l5r=r(FRt,"gptj"),FRt.forEach(t),i5r=r(Zje," \u2014 "),eY=n(Zje,"A",{href:!0});var TRt=s(eY);d5r=r(TRt,"TFGPTJForCausalLM"),TRt.forEach(t),c5r=r(Zje," (GPT-J model)"),Zje.forEach(t),f5r=i(Ce),o4=n(Ce,"LI",{});var eDe=s(o4);m8e=n(eDe,"STRONG",{});var MRt=s(m8e);m5r=r(MRt,"openai-gpt"),MRt.forEach(t),g5r=r(eDe," \u2014 "),oY=n(eDe,"A",{href:!0});var ERt=s(oY);h5r=r(ERt,"TFOpenAIGPTLMHeadModel"),ERt.forEach(t),p5r=r(eDe," (OpenAI GPT model)"),eDe.forEach(t),_5r=i(Ce),r4=n(Ce,"LI",{});var oDe=s(r4);g8e=n(oDe,"STRONG",{});var CRt=s(g8e);u5r=r(CRt,"opt"),CRt.forEach(t),b5r=r(oDe," \u2014 "),rY=n(oDe,"A",{href:!0});var wRt=s(rY);v5r=r(wRt,"TFOPTForCausalLM"),wRt.forEach(t),F5r=r(oDe," (OPT model)"),oDe.forEach(t),T5r=i(Ce),t4=n(Ce,"LI",{});var rDe=s(t4);h8e=n(rDe,"STRONG",{});var ARt=s(h8e);M5r=r(ARt,"rembert"),ARt.forEach(t),E5r=r(rDe," \u2014 "),tY=n(rDe,"A",{href:!0});var LRt=s(tY);C5r=r(LRt,"TFRemBertForCausalLM"),LRt.forEach(t),w5r=r(rDe," (RemBERT model)"),rDe.forEach(t),A5r=i(Ce),a4=n(Ce,"LI",{});var tDe=s(a4);p8e=n(tDe,"STRONG",{});var yRt=s(p8e);L5r=r(yRt,"roberta"),yRt.forEach(t),y5r=r(tDe," \u2014 "),aY=n(tDe,"A",{href:!0});var xRt=s(aY);x5r=r(xRt,"TFRobertaForCausalLM"),xRt.forEach(t),$5r=r(tDe," (RoBERTa model)"),tDe.forEach(t),k5r=i(Ce),n4=n(Ce,"LI",{});var aDe=s(n4);_8e=n(aDe,"STRONG",{});var $Rt=s(_8e);S5r=r($Rt,"roformer"),$Rt.forEach(t),R5r=r(aDe," \u2014 "),nY=n(aDe,"A",{href:!0});var kRt=s(nY);P5r=r(kRt,"TFRoFormerForCausalLM"),kRt.forEach(t),B5r=r(aDe," (RoFormer model)"),aDe.forEach(t),N5r=i(Ce),s4=n(Ce,"LI",{});var nDe=s(s4);u8e=n(nDe,"STRONG",{});var SRt=s(u8e);I5r=r(SRt,"transfo-xl"),SRt.forEach(t),q5r=r(nDe," \u2014 "),sY=n(nDe,"A",{href:!0});var RRt=s(sY);j5r=r(RRt,"TFTransfoXLLMHeadModel"),RRt.forEach(t),D5r=r(nDe," (Transformer-XL model)"),nDe.forEach(t),G5r=i(Ce),l4=n(Ce,"LI",{});var sDe=s(l4);b8e=n(sDe,"STRONG",{});var PRt=s(b8e);O5r=r(PRt,"xlm"),PRt.forEach(t),V5r=r(sDe," \u2014 "),lY=n(sDe,"A",{href:!0});var BRt=s(lY);X5r=r(BRt,"TFXLMWithLMHeadModel"),BRt.forEach(t),z5r=r(sDe," (XLM model)"),sDe.forEach(t),Q5r=i(Ce),i4=n(Ce,"LI",{});var lDe=s(i4);v8e=n(lDe,"STRONG",{});var NRt=s(v8e);W5r=r(NRt,"xlnet"),NRt.forEach(t),H5r=r(lDe," \u2014 "),iY=n(lDe,"A",{href:!0});var IRt=s(iY);U5r=r(IRt,"TFXLNetLMHeadModel"),IRt.forEach(t),J5r=r(lDe," (XLNet model)"),lDe.forEach(t),Ce.forEach(t),Y5r=i(Bl),T(d4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),jze=i(f),_c=n(f,"H2",{class:!0});var WWe=s(_c);c4=n(WWe,"A",{id:!0,class:!0,href:!0});var qRt=s(c4);F8e=n(qRt,"SPAN",{});var jRt=s(F8e);T(mx.$$.fragment,jRt),jRt.forEach(t),qRt.forEach(t),K5r=i(WWe),T8e=n(WWe,"SPAN",{});var DRt=s(T8e);Z5r=r(DRt,"TFAutoModelForImageClassification"),DRt.forEach(t),WWe.forEach(t),Dze=i(f),ar=n(f,"DIV",{class:!0});var Nl=s(ar);T(gx.$$.fragment,Nl),e3r=i(Nl),uc=n(Nl,"P",{});var Qte=s(uc);o3r=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dY=n(Qte,"A",{href:!0});var GRt=s(dY);r3r=r(GRt,"from_pretrained()"),GRt.forEach(t),t3r=r(Qte," class method or the "),cY=n(Qte,"A",{href:!0});var ORt=s(cY);a3r=r(ORt,"from_config()"),ORt.forEach(t),n3r=r(Qte,` class
method.`),Qte.forEach(t),s3r=i(Nl),hx=n(Nl,"P",{});var HWe=s(hx);l3r=r(HWe,"This class cannot be instantiated directly using "),M8e=n(HWe,"CODE",{});var VRt=s(M8e);i3r=r(VRt,"__init__()"),VRt.forEach(t),d3r=r(HWe," (throws an error)."),HWe.forEach(t),c3r=i(Nl),Nt=n(Nl,"DIV",{class:!0});var pA=s(Nt);T(px.$$.fragment,pA),f3r=i(pA),E8e=n(pA,"P",{});var XRt=s(E8e);m3r=r(XRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),XRt.forEach(t),g3r=i(pA),bc=n(pA,"P",{});var Wte=s(bc);h3r=r(Wte,`Note:
Loading a model from its configuration file does `),C8e=n(Wte,"STRONG",{});var zRt=s(C8e);p3r=r(zRt,"not"),zRt.forEach(t),_3r=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(Wte,"A",{href:!0});var QRt=s(fY);u3r=r(QRt,"from_pretrained()"),QRt.forEach(t),b3r=r(Wte," to load the model weights."),Wte.forEach(t),v3r=i(pA),T(f4.$$.fragment,pA),pA.forEach(t),F3r=i(Nl),Sr=n(Nl,"DIV",{class:!0});var Il=s(Sr);T(_x.$$.fragment,Il),T3r=i(Il),w8e=n(Il,"P",{});var WRt=s(w8e);M3r=r(WRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),WRt.forEach(t),E3r=i(Il),cn=n(Il,"P",{});var _A=s(cn);C3r=r(_A,"The model class to instantiate is selected based on the "),A8e=n(_A,"CODE",{});var HRt=s(A8e);w3r=r(HRt,"model_type"),HRt.forEach(t),A3r=r(_A,` property of the config object (either
passed as an argument or loaded from `),L8e=n(_A,"CODE",{});var URt=s(L8e);L3r=r(URt,"pretrained_model_name_or_path"),URt.forEach(t),y3r=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y8e=n(_A,"CODE",{});var JRt=s(y8e);x3r=r(JRt,"pretrained_model_name_or_path"),JRt.forEach(t),$3r=r(_A,":"),_A.forEach(t),k3r=i(Il),Qe=n(Il,"UL",{});var ot=s(Qe);m4=n(ot,"LI",{});var iDe=s(m4);x8e=n(iDe,"STRONG",{});var YRt=s(x8e);S3r=r(YRt,"convnext"),YRt.forEach(t),R3r=r(iDe," \u2014 "),mY=n(iDe,"A",{href:!0});var KRt=s(mY);P3r=r(KRt,"TFConvNextForImageClassification"),KRt.forEach(t),B3r=r(iDe," (ConvNeXT model)"),iDe.forEach(t),N3r=i(ot),g4=n(ot,"LI",{});var dDe=s(g4);$8e=n(dDe,"STRONG",{});var ZRt=s($8e);I3r=r(ZRt,"data2vec-vision"),ZRt.forEach(t),q3r=r(dDe," \u2014 "),gY=n(dDe,"A",{href:!0});var ePt=s(gY);j3r=r(ePt,"TFData2VecVisionForImageClassification"),ePt.forEach(t),D3r=r(dDe," (Data2VecVision model)"),dDe.forEach(t),G3r=i(ot),Ks=n(ot,"LI",{});var OS=s(Ks);k8e=n(OS,"STRONG",{});var oPt=s(k8e);O3r=r(oPt,"deit"),oPt.forEach(t),V3r=r(OS," \u2014 "),hY=n(OS,"A",{href:!0});var rPt=s(hY);X3r=r(rPt,"TFDeiTForImageClassification"),rPt.forEach(t),z3r=r(OS," or "),pY=n(OS,"A",{href:!0});var tPt=s(pY);Q3r=r(tPt,"TFDeiTForImageClassificationWithTeacher"),tPt.forEach(t),W3r=r(OS," (DeiT model)"),OS.forEach(t),H3r=i(ot),h4=n(ot,"LI",{});var cDe=s(h4);S8e=n(cDe,"STRONG",{});var aPt=s(S8e);U3r=r(aPt,"regnet"),aPt.forEach(t),J3r=r(cDe," \u2014 "),_Y=n(cDe,"A",{href:!0});var nPt=s(_Y);Y3r=r(nPt,"TFRegNetForImageClassification"),nPt.forEach(t),K3r=r(cDe," (RegNet model)"),cDe.forEach(t),Z3r=i(ot),p4=n(ot,"LI",{});var fDe=s(p4);R8e=n(fDe,"STRONG",{});var sPt=s(R8e);e0r=r(sPt,"resnet"),sPt.forEach(t),o0r=r(fDe," \u2014 "),uY=n(fDe,"A",{href:!0});var lPt=s(uY);r0r=r(lPt,"TFResNetForImageClassification"),lPt.forEach(t),t0r=r(fDe," (ResNet model)"),fDe.forEach(t),a0r=i(ot),_4=n(ot,"LI",{});var mDe=s(_4);P8e=n(mDe,"STRONG",{});var iPt=s(P8e);n0r=r(iPt,"swin"),iPt.forEach(t),s0r=r(mDe," \u2014 "),bY=n(mDe,"A",{href:!0});var dPt=s(bY);l0r=r(dPt,"TFSwinForImageClassification"),dPt.forEach(t),i0r=r(mDe," (Swin Transformer model)"),mDe.forEach(t),d0r=i(ot),u4=n(ot,"LI",{});var gDe=s(u4);B8e=n(gDe,"STRONG",{});var cPt=s(B8e);c0r=r(cPt,"vit"),cPt.forEach(t),f0r=r(gDe," \u2014 "),vY=n(gDe,"A",{href:!0});var fPt=s(vY);m0r=r(fPt,"TFViTForImageClassification"),fPt.forEach(t),g0r=r(gDe," (ViT model)"),gDe.forEach(t),ot.forEach(t),h0r=i(Il),T(b4.$$.fragment,Il),Il.forEach(t),Nl.forEach(t),Gze=i(f),vc=n(f,"H2",{class:!0});var UWe=s(vc);v4=n(UWe,"A",{id:!0,class:!0,href:!0});var mPt=s(v4);N8e=n(mPt,"SPAN",{});var gPt=s(N8e);T(ux.$$.fragment,gPt),gPt.forEach(t),mPt.forEach(t),p0r=i(UWe),I8e=n(UWe,"SPAN",{});var hPt=s(I8e);_0r=r(hPt,"TFAutoModelForMaskedLM"),hPt.forEach(t),UWe.forEach(t),Oze=i(f),nr=n(f,"DIV",{class:!0});var ql=s(nr);T(bx.$$.fragment,ql),u0r=i(ql),Fc=n(ql,"P",{});var Hte=s(Fc);b0r=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FY=n(Hte,"A",{href:!0});var pPt=s(FY);v0r=r(pPt,"from_pretrained()"),pPt.forEach(t),F0r=r(Hte," class method or the "),TY=n(Hte,"A",{href:!0});var _Pt=s(TY);T0r=r(_Pt,"from_config()"),_Pt.forEach(t),M0r=r(Hte,` class
method.`),Hte.forEach(t),E0r=i(ql),vx=n(ql,"P",{});var JWe=s(vx);C0r=r(JWe,"This class cannot be instantiated directly using "),q8e=n(JWe,"CODE",{});var uPt=s(q8e);w0r=r(uPt,"__init__()"),uPt.forEach(t),A0r=r(JWe," (throws an error)."),JWe.forEach(t),L0r=i(ql),It=n(ql,"DIV",{class:!0});var uA=s(It);T(Fx.$$.fragment,uA),y0r=i(uA),j8e=n(uA,"P",{});var bPt=s(j8e);x0r=r(bPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bPt.forEach(t),$0r=i(uA),Tc=n(uA,"P",{});var Ute=s(Tc);k0r=r(Ute,`Note:
Loading a model from its configuration file does `),D8e=n(Ute,"STRONG",{});var vPt=s(D8e);S0r=r(vPt,"not"),vPt.forEach(t),R0r=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=n(Ute,"A",{href:!0});var FPt=s(MY);P0r=r(FPt,"from_pretrained()"),FPt.forEach(t),B0r=r(Ute," to load the model weights."),Ute.forEach(t),N0r=i(uA),T(F4.$$.fragment,uA),uA.forEach(t),I0r=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(Tx.$$.fragment,jl),q0r=i(jl),G8e=n(jl,"P",{});var TPt=s(G8e);j0r=r(TPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TPt.forEach(t),D0r=i(jl),fn=n(jl,"P",{});var bA=s(fn);G0r=r(bA,"The model class to instantiate is selected based on the "),O8e=n(bA,"CODE",{});var MPt=s(O8e);O0r=r(MPt,"model_type"),MPt.forEach(t),V0r=r(bA,` property of the config object (either
passed as an argument or loaded from `),V8e=n(bA,"CODE",{});var EPt=s(V8e);X0r=r(EPt,"pretrained_model_name_or_path"),EPt.forEach(t),z0r=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X8e=n(bA,"CODE",{});var CPt=s(X8e);Q0r=r(CPt,"pretrained_model_name_or_path"),CPt.forEach(t),W0r=r(bA,":"),bA.forEach(t),H0r=i(jl),ie=n(jl,"UL",{});var me=s(ie);T4=n(me,"LI",{});var hDe=s(T4);z8e=n(hDe,"STRONG",{});var wPt=s(z8e);U0r=r(wPt,"albert"),wPt.forEach(t),J0r=r(hDe," \u2014 "),EY=n(hDe,"A",{href:!0});var APt=s(EY);Y0r=r(APt,"TFAlbertForMaskedLM"),APt.forEach(t),K0r=r(hDe," (ALBERT model)"),hDe.forEach(t),Z0r=i(me),M4=n(me,"LI",{});var pDe=s(M4);Q8e=n(pDe,"STRONG",{});var LPt=s(Q8e);ewr=r(LPt,"bert"),LPt.forEach(t),owr=r(pDe," \u2014 "),CY=n(pDe,"A",{href:!0});var yPt=s(CY);rwr=r(yPt,"TFBertForMaskedLM"),yPt.forEach(t),twr=r(pDe," (BERT model)"),pDe.forEach(t),awr=i(me),E4=n(me,"LI",{});var _De=s(E4);W8e=n(_De,"STRONG",{});var xPt=s(W8e);nwr=r(xPt,"camembert"),xPt.forEach(t),swr=r(_De," \u2014 "),wY=n(_De,"A",{href:!0});var $Pt=s(wY);lwr=r($Pt,"TFCamembertForMaskedLM"),$Pt.forEach(t),iwr=r(_De," (CamemBERT model)"),_De.forEach(t),dwr=i(me),C4=n(me,"LI",{});var uDe=s(C4);H8e=n(uDe,"STRONG",{});var kPt=s(H8e);cwr=r(kPt,"convbert"),kPt.forEach(t),fwr=r(uDe," \u2014 "),AY=n(uDe,"A",{href:!0});var SPt=s(AY);mwr=r(SPt,"TFConvBertForMaskedLM"),SPt.forEach(t),gwr=r(uDe," (ConvBERT model)"),uDe.forEach(t),hwr=i(me),w4=n(me,"LI",{});var bDe=s(w4);U8e=n(bDe,"STRONG",{});var RPt=s(U8e);pwr=r(RPt,"deberta"),RPt.forEach(t),_wr=r(bDe," \u2014 "),LY=n(bDe,"A",{href:!0});var PPt=s(LY);uwr=r(PPt,"TFDebertaForMaskedLM"),PPt.forEach(t),bwr=r(bDe," (DeBERTa model)"),bDe.forEach(t),vwr=i(me),A4=n(me,"LI",{});var vDe=s(A4);J8e=n(vDe,"STRONG",{});var BPt=s(J8e);Fwr=r(BPt,"deberta-v2"),BPt.forEach(t),Twr=r(vDe," \u2014 "),yY=n(vDe,"A",{href:!0});var NPt=s(yY);Mwr=r(NPt,"TFDebertaV2ForMaskedLM"),NPt.forEach(t),Ewr=r(vDe," (DeBERTa-v2 model)"),vDe.forEach(t),Cwr=i(me),L4=n(me,"LI",{});var FDe=s(L4);Y8e=n(FDe,"STRONG",{});var IPt=s(Y8e);wwr=r(IPt,"distilbert"),IPt.forEach(t),Awr=r(FDe," \u2014 "),xY=n(FDe,"A",{href:!0});var qPt=s(xY);Lwr=r(qPt,"TFDistilBertForMaskedLM"),qPt.forEach(t),ywr=r(FDe," (DistilBERT model)"),FDe.forEach(t),xwr=i(me),y4=n(me,"LI",{});var TDe=s(y4);K8e=n(TDe,"STRONG",{});var jPt=s(K8e);$wr=r(jPt,"electra"),jPt.forEach(t),kwr=r(TDe," \u2014 "),$Y=n(TDe,"A",{href:!0});var DPt=s($Y);Swr=r(DPt,"TFElectraForMaskedLM"),DPt.forEach(t),Rwr=r(TDe," (ELECTRA model)"),TDe.forEach(t),Pwr=i(me),x4=n(me,"LI",{});var MDe=s(x4);Z8e=n(MDe,"STRONG",{});var GPt=s(Z8e);Bwr=r(GPt,"flaubert"),GPt.forEach(t),Nwr=r(MDe," \u2014 "),kY=n(MDe,"A",{href:!0});var OPt=s(kY);Iwr=r(OPt,"TFFlaubertWithLMHeadModel"),OPt.forEach(t),qwr=r(MDe," (FlauBERT model)"),MDe.forEach(t),jwr=i(me),$4=n(me,"LI",{});var EDe=s($4);eMe=n(EDe,"STRONG",{});var VPt=s(eMe);Dwr=r(VPt,"funnel"),VPt.forEach(t),Gwr=r(EDe," \u2014 "),SY=n(EDe,"A",{href:!0});var XPt=s(SY);Owr=r(XPt,"TFFunnelForMaskedLM"),XPt.forEach(t),Vwr=r(EDe," (Funnel Transformer model)"),EDe.forEach(t),Xwr=i(me),k4=n(me,"LI",{});var CDe=s(k4);oMe=n(CDe,"STRONG",{});var zPt=s(oMe);zwr=r(zPt,"layoutlm"),zPt.forEach(t),Qwr=r(CDe," \u2014 "),RY=n(CDe,"A",{href:!0});var QPt=s(RY);Wwr=r(QPt,"TFLayoutLMForMaskedLM"),QPt.forEach(t),Hwr=r(CDe," (LayoutLM model)"),CDe.forEach(t),Uwr=i(me),S4=n(me,"LI",{});var wDe=s(S4);rMe=n(wDe,"STRONG",{});var WPt=s(rMe);Jwr=r(WPt,"longformer"),WPt.forEach(t),Ywr=r(wDe," \u2014 "),PY=n(wDe,"A",{href:!0});var HPt=s(PY);Kwr=r(HPt,"TFLongformerForMaskedLM"),HPt.forEach(t),Zwr=r(wDe," (Longformer model)"),wDe.forEach(t),eAr=i(me),R4=n(me,"LI",{});var ADe=s(R4);tMe=n(ADe,"STRONG",{});var UPt=s(tMe);oAr=r(UPt,"mobilebert"),UPt.forEach(t),rAr=r(ADe," \u2014 "),BY=n(ADe,"A",{href:!0});var JPt=s(BY);tAr=r(JPt,"TFMobileBertForMaskedLM"),JPt.forEach(t),aAr=r(ADe," (MobileBERT model)"),ADe.forEach(t),nAr=i(me),P4=n(me,"LI",{});var LDe=s(P4);aMe=n(LDe,"STRONG",{});var YPt=s(aMe);sAr=r(YPt,"mpnet"),YPt.forEach(t),lAr=r(LDe," \u2014 "),NY=n(LDe,"A",{href:!0});var KPt=s(NY);iAr=r(KPt,"TFMPNetForMaskedLM"),KPt.forEach(t),dAr=r(LDe," (MPNet model)"),LDe.forEach(t),cAr=i(me),B4=n(me,"LI",{});var yDe=s(B4);nMe=n(yDe,"STRONG",{});var ZPt=s(nMe);fAr=r(ZPt,"rembert"),ZPt.forEach(t),mAr=r(yDe," \u2014 "),IY=n(yDe,"A",{href:!0});var eBt=s(IY);gAr=r(eBt,"TFRemBertForMaskedLM"),eBt.forEach(t),hAr=r(yDe," (RemBERT model)"),yDe.forEach(t),pAr=i(me),N4=n(me,"LI",{});var xDe=s(N4);sMe=n(xDe,"STRONG",{});var oBt=s(sMe);_Ar=r(oBt,"roberta"),oBt.forEach(t),uAr=r(xDe," \u2014 "),qY=n(xDe,"A",{href:!0});var rBt=s(qY);bAr=r(rBt,"TFRobertaForMaskedLM"),rBt.forEach(t),vAr=r(xDe," (RoBERTa model)"),xDe.forEach(t),FAr=i(me),I4=n(me,"LI",{});var $De=s(I4);lMe=n($De,"STRONG",{});var tBt=s(lMe);TAr=r(tBt,"roformer"),tBt.forEach(t),MAr=r($De," \u2014 "),jY=n($De,"A",{href:!0});var aBt=s(jY);EAr=r(aBt,"TFRoFormerForMaskedLM"),aBt.forEach(t),CAr=r($De," (RoFormer model)"),$De.forEach(t),wAr=i(me),q4=n(me,"LI",{});var kDe=s(q4);iMe=n(kDe,"STRONG",{});var nBt=s(iMe);AAr=r(nBt,"tapas"),nBt.forEach(t),LAr=r(kDe," \u2014 "),DY=n(kDe,"A",{href:!0});var sBt=s(DY);yAr=r(sBt,"TFTapasForMaskedLM"),sBt.forEach(t),xAr=r(kDe," (TAPAS model)"),kDe.forEach(t),$Ar=i(me),j4=n(me,"LI",{});var SDe=s(j4);dMe=n(SDe,"STRONG",{});var lBt=s(dMe);kAr=r(lBt,"xlm"),lBt.forEach(t),SAr=r(SDe," \u2014 "),GY=n(SDe,"A",{href:!0});var iBt=s(GY);RAr=r(iBt,"TFXLMWithLMHeadModel"),iBt.forEach(t),PAr=r(SDe," (XLM model)"),SDe.forEach(t),BAr=i(me),D4=n(me,"LI",{});var RDe=s(D4);cMe=n(RDe,"STRONG",{});var dBt=s(cMe);NAr=r(dBt,"xlm-roberta"),dBt.forEach(t),IAr=r(RDe," \u2014 "),OY=n(RDe,"A",{href:!0});var cBt=s(OY);qAr=r(cBt,"TFXLMRobertaForMaskedLM"),cBt.forEach(t),jAr=r(RDe," (XLM-RoBERTa model)"),RDe.forEach(t),me.forEach(t),DAr=i(jl),T(G4.$$.fragment,jl),jl.forEach(t),ql.forEach(t),Vze=i(f),Mc=n(f,"H2",{class:!0});var YWe=s(Mc);O4=n(YWe,"A",{id:!0,class:!0,href:!0});var fBt=s(O4);fMe=n(fBt,"SPAN",{});var mBt=s(fMe);T(Mx.$$.fragment,mBt),mBt.forEach(t),fBt.forEach(t),GAr=i(YWe),mMe=n(YWe,"SPAN",{});var gBt=s(mMe);OAr=r(gBt,"TFAutoModelForSeq2SeqLM"),gBt.forEach(t),YWe.forEach(t),Xze=i(f),sr=n(f,"DIV",{class:!0});var Dl=s(sr);T(Ex.$$.fragment,Dl),VAr=i(Dl),Ec=n(Dl,"P",{});var Jte=s(Ec);XAr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VY=n(Jte,"A",{href:!0});var hBt=s(VY);zAr=r(hBt,"from_pretrained()"),hBt.forEach(t),QAr=r(Jte," class method or the "),XY=n(Jte,"A",{href:!0});var pBt=s(XY);WAr=r(pBt,"from_config()"),pBt.forEach(t),HAr=r(Jte,` class
method.`),Jte.forEach(t),UAr=i(Dl),Cx=n(Dl,"P",{});var KWe=s(Cx);JAr=r(KWe,"This class cannot be instantiated directly using "),gMe=n(KWe,"CODE",{});var _Bt=s(gMe);YAr=r(_Bt,"__init__()"),_Bt.forEach(t),KAr=r(KWe," (throws an error)."),KWe.forEach(t),ZAr=i(Dl),qt=n(Dl,"DIV",{class:!0});var vA=s(qt);T(wx.$$.fragment,vA),eLr=i(vA),hMe=n(vA,"P",{});var uBt=s(hMe);oLr=r(uBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uBt.forEach(t),rLr=i(vA),Cc=n(vA,"P",{});var Yte=s(Cc);tLr=r(Yte,`Note:
Loading a model from its configuration file does `),pMe=n(Yte,"STRONG",{});var bBt=s(pMe);aLr=r(bBt,"not"),bBt.forEach(t),nLr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=n(Yte,"A",{href:!0});var vBt=s(zY);sLr=r(vBt,"from_pretrained()"),vBt.forEach(t),lLr=r(Yte," to load the model weights."),Yte.forEach(t),iLr=i(vA),T(V4.$$.fragment,vA),vA.forEach(t),dLr=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(Ax.$$.fragment,Gl),cLr=i(Gl),_Me=n(Gl,"P",{});var FBt=s(_Me);fLr=r(FBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FBt.forEach(t),mLr=i(Gl),mn=n(Gl,"P",{});var FA=s(mn);gLr=r(FA,"The model class to instantiate is selected based on the "),uMe=n(FA,"CODE",{});var TBt=s(uMe);hLr=r(TBt,"model_type"),TBt.forEach(t),pLr=r(FA,` property of the config object (either
passed as an argument or loaded from `),bMe=n(FA,"CODE",{});var MBt=s(bMe);_Lr=r(MBt,"pretrained_model_name_or_path"),MBt.forEach(t),uLr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=n(FA,"CODE",{});var EBt=s(vMe);bLr=r(EBt,"pretrained_model_name_or_path"),EBt.forEach(t),vLr=r(FA,":"),FA.forEach(t),FLr=i(Gl),ye=n(Gl,"UL",{});var Ne=s(ye);X4=n(Ne,"LI",{});var PDe=s(X4);FMe=n(PDe,"STRONG",{});var CBt=s(FMe);TLr=r(CBt,"bart"),CBt.forEach(t),MLr=r(PDe," \u2014 "),QY=n(PDe,"A",{href:!0});var wBt=s(QY);ELr=r(wBt,"TFBartForConditionalGeneration"),wBt.forEach(t),CLr=r(PDe," (BART model)"),PDe.forEach(t),wLr=i(Ne),z4=n(Ne,"LI",{});var BDe=s(z4);TMe=n(BDe,"STRONG",{});var ABt=s(TMe);ALr=r(ABt,"blenderbot"),ABt.forEach(t),LLr=r(BDe," \u2014 "),WY=n(BDe,"A",{href:!0});var LBt=s(WY);yLr=r(LBt,"TFBlenderbotForConditionalGeneration"),LBt.forEach(t),xLr=r(BDe," (Blenderbot model)"),BDe.forEach(t),$Lr=i(Ne),Q4=n(Ne,"LI",{});var NDe=s(Q4);MMe=n(NDe,"STRONG",{});var yBt=s(MMe);kLr=r(yBt,"blenderbot-small"),yBt.forEach(t),SLr=r(NDe," \u2014 "),HY=n(NDe,"A",{href:!0});var xBt=s(HY);RLr=r(xBt,"TFBlenderbotSmallForConditionalGeneration"),xBt.forEach(t),PLr=r(NDe," (BlenderbotSmall model)"),NDe.forEach(t),BLr=i(Ne),W4=n(Ne,"LI",{});var IDe=s(W4);EMe=n(IDe,"STRONG",{});var $Bt=s(EMe);NLr=r($Bt,"encoder-decoder"),$Bt.forEach(t),ILr=r(IDe," \u2014 "),UY=n(IDe,"A",{href:!0});var kBt=s(UY);qLr=r(kBt,"TFEncoderDecoderModel"),kBt.forEach(t),jLr=r(IDe," (Encoder decoder model)"),IDe.forEach(t),DLr=i(Ne),H4=n(Ne,"LI",{});var qDe=s(H4);CMe=n(qDe,"STRONG",{});var SBt=s(CMe);GLr=r(SBt,"led"),SBt.forEach(t),OLr=r(qDe," \u2014 "),JY=n(qDe,"A",{href:!0});var RBt=s(JY);VLr=r(RBt,"TFLEDForConditionalGeneration"),RBt.forEach(t),XLr=r(qDe," (LED model)"),qDe.forEach(t),zLr=i(Ne),U4=n(Ne,"LI",{});var jDe=s(U4);wMe=n(jDe,"STRONG",{});var PBt=s(wMe);QLr=r(PBt,"marian"),PBt.forEach(t),WLr=r(jDe," \u2014 "),YY=n(jDe,"A",{href:!0});var BBt=s(YY);HLr=r(BBt,"TFMarianMTModel"),BBt.forEach(t),ULr=r(jDe," (Marian model)"),jDe.forEach(t),JLr=i(Ne),J4=n(Ne,"LI",{});var DDe=s(J4);AMe=n(DDe,"STRONG",{});var NBt=s(AMe);YLr=r(NBt,"mbart"),NBt.forEach(t),KLr=r(DDe," \u2014 "),KY=n(DDe,"A",{href:!0});var IBt=s(KY);ZLr=r(IBt,"TFMBartForConditionalGeneration"),IBt.forEach(t),eyr=r(DDe," (mBART model)"),DDe.forEach(t),oyr=i(Ne),Y4=n(Ne,"LI",{});var GDe=s(Y4);LMe=n(GDe,"STRONG",{});var qBt=s(LMe);ryr=r(qBt,"mt5"),qBt.forEach(t),tyr=r(GDe," \u2014 "),ZY=n(GDe,"A",{href:!0});var jBt=s(ZY);ayr=r(jBt,"TFMT5ForConditionalGeneration"),jBt.forEach(t),nyr=r(GDe," (MT5 model)"),GDe.forEach(t),syr=i(Ne),K4=n(Ne,"LI",{});var ODe=s(K4);yMe=n(ODe,"STRONG",{});var DBt=s(yMe);lyr=r(DBt,"pegasus"),DBt.forEach(t),iyr=r(ODe," \u2014 "),eK=n(ODe,"A",{href:!0});var GBt=s(eK);dyr=r(GBt,"TFPegasusForConditionalGeneration"),GBt.forEach(t),cyr=r(ODe," (Pegasus model)"),ODe.forEach(t),fyr=i(Ne),Z4=n(Ne,"LI",{});var VDe=s(Z4);xMe=n(VDe,"STRONG",{});var OBt=s(xMe);myr=r(OBt,"t5"),OBt.forEach(t),gyr=r(VDe," \u2014 "),oK=n(VDe,"A",{href:!0});var VBt=s(oK);hyr=r(VBt,"TFT5ForConditionalGeneration"),VBt.forEach(t),pyr=r(VDe," (T5 model)"),VDe.forEach(t),Ne.forEach(t),_yr=i(Gl),T(eE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),zze=i(f),wc=n(f,"H2",{class:!0});var ZWe=s(wc);oE=n(ZWe,"A",{id:!0,class:!0,href:!0});var XBt=s(oE);$Me=n(XBt,"SPAN",{});var zBt=s($Me);T(Lx.$$.fragment,zBt),zBt.forEach(t),XBt.forEach(t),uyr=i(ZWe),kMe=n(ZWe,"SPAN",{});var QBt=s(kMe);byr=r(QBt,"TFAutoModelForSequenceClassification"),QBt.forEach(t),ZWe.forEach(t),Qze=i(f),lr=n(f,"DIV",{class:!0});var Ol=s(lr);T(yx.$$.fragment,Ol),vyr=i(Ol),Ac=n(Ol,"P",{});var Kte=s(Ac);Fyr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rK=n(Kte,"A",{href:!0});var WBt=s(rK);Tyr=r(WBt,"from_pretrained()"),WBt.forEach(t),Myr=r(Kte," class method or the "),tK=n(Kte,"A",{href:!0});var HBt=s(tK);Eyr=r(HBt,"from_config()"),HBt.forEach(t),Cyr=r(Kte,` class
method.`),Kte.forEach(t),wyr=i(Ol),xx=n(Ol,"P",{});var eHe=s(xx);Ayr=r(eHe,"This class cannot be instantiated directly using "),SMe=n(eHe,"CODE",{});var UBt=s(SMe);Lyr=r(UBt,"__init__()"),UBt.forEach(t),yyr=r(eHe," (throws an error)."),eHe.forEach(t),xyr=i(Ol),jt=n(Ol,"DIV",{class:!0});var TA=s(jt);T($x.$$.fragment,TA),$yr=i(TA),RMe=n(TA,"P",{});var JBt=s(RMe);kyr=r(JBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JBt.forEach(t),Syr=i(TA),Lc=n(TA,"P",{});var Zte=s(Lc);Ryr=r(Zte,`Note:
Loading a model from its configuration file does `),PMe=n(Zte,"STRONG",{});var YBt=s(PMe);Pyr=r(YBt,"not"),YBt.forEach(t),Byr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(Zte,"A",{href:!0});var KBt=s(aK);Nyr=r(KBt,"from_pretrained()"),KBt.forEach(t),Iyr=r(Zte," to load the model weights."),Zte.forEach(t),qyr=i(TA),T(rE.$$.fragment,TA),TA.forEach(t),jyr=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(kx.$$.fragment,Vl),Dyr=i(Vl),BMe=n(Vl,"P",{});var ZBt=s(BMe);Gyr=r(ZBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZBt.forEach(t),Oyr=i(Vl),gn=n(Vl,"P",{});var MA=s(gn);Vyr=r(MA,"The model class to instantiate is selected based on the "),NMe=n(MA,"CODE",{});var eNt=s(NMe);Xyr=r(eNt,"model_type"),eNt.forEach(t),zyr=r(MA,` property of the config object (either
passed as an argument or loaded from `),IMe=n(MA,"CODE",{});var oNt=s(IMe);Qyr=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),Wyr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=n(MA,"CODE",{});var rNt=s(qMe);Hyr=r(rNt,"pretrained_model_name_or_path"),rNt.forEach(t),Uyr=r(MA,":"),MA.forEach(t),Jyr=i(Vl),te=n(Vl,"UL",{});var ne=s(te);tE=n(ne,"LI",{});var XDe=s(tE);jMe=n(XDe,"STRONG",{});var tNt=s(jMe);Yyr=r(tNt,"albert"),tNt.forEach(t),Kyr=r(XDe," \u2014 "),nK=n(XDe,"A",{href:!0});var aNt=s(nK);Zyr=r(aNt,"TFAlbertForSequenceClassification"),aNt.forEach(t),e9r=r(XDe," (ALBERT model)"),XDe.forEach(t),o9r=i(ne),aE=n(ne,"LI",{});var zDe=s(aE);DMe=n(zDe,"STRONG",{});var nNt=s(DMe);r9r=r(nNt,"bert"),nNt.forEach(t),t9r=r(zDe," \u2014 "),sK=n(zDe,"A",{href:!0});var sNt=s(sK);a9r=r(sNt,"TFBertForSequenceClassification"),sNt.forEach(t),n9r=r(zDe," (BERT model)"),zDe.forEach(t),s9r=i(ne),nE=n(ne,"LI",{});var QDe=s(nE);GMe=n(QDe,"STRONG",{});var lNt=s(GMe);l9r=r(lNt,"camembert"),lNt.forEach(t),i9r=r(QDe," \u2014 "),lK=n(QDe,"A",{href:!0});var iNt=s(lK);d9r=r(iNt,"TFCamembertForSequenceClassification"),iNt.forEach(t),c9r=r(QDe," (CamemBERT model)"),QDe.forEach(t),f9r=i(ne),sE=n(ne,"LI",{});var WDe=s(sE);OMe=n(WDe,"STRONG",{});var dNt=s(OMe);m9r=r(dNt,"convbert"),dNt.forEach(t),g9r=r(WDe," \u2014 "),iK=n(WDe,"A",{href:!0});var cNt=s(iK);h9r=r(cNt,"TFConvBertForSequenceClassification"),cNt.forEach(t),p9r=r(WDe," (ConvBERT model)"),WDe.forEach(t),_9r=i(ne),lE=n(ne,"LI",{});var HDe=s(lE);VMe=n(HDe,"STRONG",{});var fNt=s(VMe);u9r=r(fNt,"ctrl"),fNt.forEach(t),b9r=r(HDe," \u2014 "),dK=n(HDe,"A",{href:!0});var mNt=s(dK);v9r=r(mNt,"TFCTRLForSequenceClassification"),mNt.forEach(t),F9r=r(HDe," (CTRL model)"),HDe.forEach(t),T9r=i(ne),iE=n(ne,"LI",{});var UDe=s(iE);XMe=n(UDe,"STRONG",{});var gNt=s(XMe);M9r=r(gNt,"deberta"),gNt.forEach(t),E9r=r(UDe," \u2014 "),cK=n(UDe,"A",{href:!0});var hNt=s(cK);C9r=r(hNt,"TFDebertaForSequenceClassification"),hNt.forEach(t),w9r=r(UDe," (DeBERTa model)"),UDe.forEach(t),A9r=i(ne),dE=n(ne,"LI",{});var JDe=s(dE);zMe=n(JDe,"STRONG",{});var pNt=s(zMe);L9r=r(pNt,"deberta-v2"),pNt.forEach(t),y9r=r(JDe," \u2014 "),fK=n(JDe,"A",{href:!0});var _Nt=s(fK);x9r=r(_Nt,"TFDebertaV2ForSequenceClassification"),_Nt.forEach(t),$9r=r(JDe," (DeBERTa-v2 model)"),JDe.forEach(t),k9r=i(ne),cE=n(ne,"LI",{});var YDe=s(cE);QMe=n(YDe,"STRONG",{});var uNt=s(QMe);S9r=r(uNt,"distilbert"),uNt.forEach(t),R9r=r(YDe," \u2014 "),mK=n(YDe,"A",{href:!0});var bNt=s(mK);P9r=r(bNt,"TFDistilBertForSequenceClassification"),bNt.forEach(t),B9r=r(YDe," (DistilBERT model)"),YDe.forEach(t),N9r=i(ne),fE=n(ne,"LI",{});var KDe=s(fE);WMe=n(KDe,"STRONG",{});var vNt=s(WMe);I9r=r(vNt,"electra"),vNt.forEach(t),q9r=r(KDe," \u2014 "),gK=n(KDe,"A",{href:!0});var FNt=s(gK);j9r=r(FNt,"TFElectraForSequenceClassification"),FNt.forEach(t),D9r=r(KDe," (ELECTRA model)"),KDe.forEach(t),G9r=i(ne),mE=n(ne,"LI",{});var ZDe=s(mE);HMe=n(ZDe,"STRONG",{});var TNt=s(HMe);O9r=r(TNt,"flaubert"),TNt.forEach(t),V9r=r(ZDe," \u2014 "),hK=n(ZDe,"A",{href:!0});var MNt=s(hK);X9r=r(MNt,"TFFlaubertForSequenceClassification"),MNt.forEach(t),z9r=r(ZDe," (FlauBERT model)"),ZDe.forEach(t),Q9r=i(ne),gE=n(ne,"LI",{});var eGe=s(gE);UMe=n(eGe,"STRONG",{});var ENt=s(UMe);W9r=r(ENt,"funnel"),ENt.forEach(t),H9r=r(eGe," \u2014 "),pK=n(eGe,"A",{href:!0});var CNt=s(pK);U9r=r(CNt,"TFFunnelForSequenceClassification"),CNt.forEach(t),J9r=r(eGe," (Funnel Transformer model)"),eGe.forEach(t),Y9r=i(ne),hE=n(ne,"LI",{});var oGe=s(hE);JMe=n(oGe,"STRONG",{});var wNt=s(JMe);K9r=r(wNt,"gpt2"),wNt.forEach(t),Z9r=r(oGe," \u2014 "),_K=n(oGe,"A",{href:!0});var ANt=s(_K);exr=r(ANt,"TFGPT2ForSequenceClassification"),ANt.forEach(t),oxr=r(oGe," (OpenAI GPT-2 model)"),oGe.forEach(t),rxr=i(ne),pE=n(ne,"LI",{});var rGe=s(pE);YMe=n(rGe,"STRONG",{});var LNt=s(YMe);txr=r(LNt,"gptj"),LNt.forEach(t),axr=r(rGe," \u2014 "),uK=n(rGe,"A",{href:!0});var yNt=s(uK);nxr=r(yNt,"TFGPTJForSequenceClassification"),yNt.forEach(t),sxr=r(rGe," (GPT-J model)"),rGe.forEach(t),lxr=i(ne),_E=n(ne,"LI",{});var tGe=s(_E);KMe=n(tGe,"STRONG",{});var xNt=s(KMe);ixr=r(xNt,"layoutlm"),xNt.forEach(t),dxr=r(tGe," \u2014 "),bK=n(tGe,"A",{href:!0});var $Nt=s(bK);cxr=r($Nt,"TFLayoutLMForSequenceClassification"),$Nt.forEach(t),fxr=r(tGe," (LayoutLM model)"),tGe.forEach(t),mxr=i(ne),uE=n(ne,"LI",{});var aGe=s(uE);ZMe=n(aGe,"STRONG",{});var kNt=s(ZMe);gxr=r(kNt,"longformer"),kNt.forEach(t),hxr=r(aGe," \u2014 "),vK=n(aGe,"A",{href:!0});var SNt=s(vK);pxr=r(SNt,"TFLongformerForSequenceClassification"),SNt.forEach(t),_xr=r(aGe," (Longformer model)"),aGe.forEach(t),uxr=i(ne),bE=n(ne,"LI",{});var nGe=s(bE);e4e=n(nGe,"STRONG",{});var RNt=s(e4e);bxr=r(RNt,"mobilebert"),RNt.forEach(t),vxr=r(nGe," \u2014 "),FK=n(nGe,"A",{href:!0});var PNt=s(FK);Fxr=r(PNt,"TFMobileBertForSequenceClassification"),PNt.forEach(t),Txr=r(nGe," (MobileBERT model)"),nGe.forEach(t),Mxr=i(ne),vE=n(ne,"LI",{});var sGe=s(vE);o4e=n(sGe,"STRONG",{});var BNt=s(o4e);Exr=r(BNt,"mpnet"),BNt.forEach(t),Cxr=r(sGe," \u2014 "),TK=n(sGe,"A",{href:!0});var NNt=s(TK);wxr=r(NNt,"TFMPNetForSequenceClassification"),NNt.forEach(t),Axr=r(sGe," (MPNet model)"),sGe.forEach(t),Lxr=i(ne),FE=n(ne,"LI",{});var lGe=s(FE);r4e=n(lGe,"STRONG",{});var INt=s(r4e);yxr=r(INt,"openai-gpt"),INt.forEach(t),xxr=r(lGe," \u2014 "),MK=n(lGe,"A",{href:!0});var qNt=s(MK);$xr=r(qNt,"TFOpenAIGPTForSequenceClassification"),qNt.forEach(t),kxr=r(lGe," (OpenAI GPT model)"),lGe.forEach(t),Sxr=i(ne),TE=n(ne,"LI",{});var iGe=s(TE);t4e=n(iGe,"STRONG",{});var jNt=s(t4e);Rxr=r(jNt,"rembert"),jNt.forEach(t),Pxr=r(iGe," \u2014 "),EK=n(iGe,"A",{href:!0});var DNt=s(EK);Bxr=r(DNt,"TFRemBertForSequenceClassification"),DNt.forEach(t),Nxr=r(iGe," (RemBERT model)"),iGe.forEach(t),Ixr=i(ne),ME=n(ne,"LI",{});var dGe=s(ME);a4e=n(dGe,"STRONG",{});var GNt=s(a4e);qxr=r(GNt,"roberta"),GNt.forEach(t),jxr=r(dGe," \u2014 "),CK=n(dGe,"A",{href:!0});var ONt=s(CK);Dxr=r(ONt,"TFRobertaForSequenceClassification"),ONt.forEach(t),Gxr=r(dGe," (RoBERTa model)"),dGe.forEach(t),Oxr=i(ne),EE=n(ne,"LI",{});var cGe=s(EE);n4e=n(cGe,"STRONG",{});var VNt=s(n4e);Vxr=r(VNt,"roformer"),VNt.forEach(t),Xxr=r(cGe," \u2014 "),wK=n(cGe,"A",{href:!0});var XNt=s(wK);zxr=r(XNt,"TFRoFormerForSequenceClassification"),XNt.forEach(t),Qxr=r(cGe," (RoFormer model)"),cGe.forEach(t),Wxr=i(ne),CE=n(ne,"LI",{});var fGe=s(CE);s4e=n(fGe,"STRONG",{});var zNt=s(s4e);Hxr=r(zNt,"tapas"),zNt.forEach(t),Uxr=r(fGe," \u2014 "),AK=n(fGe,"A",{href:!0});var QNt=s(AK);Jxr=r(QNt,"TFTapasForSequenceClassification"),QNt.forEach(t),Yxr=r(fGe," (TAPAS model)"),fGe.forEach(t),Kxr=i(ne),wE=n(ne,"LI",{});var mGe=s(wE);l4e=n(mGe,"STRONG",{});var WNt=s(l4e);Zxr=r(WNt,"transfo-xl"),WNt.forEach(t),e$r=r(mGe," \u2014 "),LK=n(mGe,"A",{href:!0});var HNt=s(LK);o$r=r(HNt,"TFTransfoXLForSequenceClassification"),HNt.forEach(t),r$r=r(mGe," (Transformer-XL model)"),mGe.forEach(t),t$r=i(ne),AE=n(ne,"LI",{});var gGe=s(AE);i4e=n(gGe,"STRONG",{});var UNt=s(i4e);a$r=r(UNt,"xlm"),UNt.forEach(t),n$r=r(gGe," \u2014 "),yK=n(gGe,"A",{href:!0});var JNt=s(yK);s$r=r(JNt,"TFXLMForSequenceClassification"),JNt.forEach(t),l$r=r(gGe," (XLM model)"),gGe.forEach(t),i$r=i(ne),LE=n(ne,"LI",{});var hGe=s(LE);d4e=n(hGe,"STRONG",{});var YNt=s(d4e);d$r=r(YNt,"xlm-roberta"),YNt.forEach(t),c$r=r(hGe," \u2014 "),xK=n(hGe,"A",{href:!0});var KNt=s(xK);f$r=r(KNt,"TFXLMRobertaForSequenceClassification"),KNt.forEach(t),m$r=r(hGe," (XLM-RoBERTa model)"),hGe.forEach(t),g$r=i(ne),yE=n(ne,"LI",{});var pGe=s(yE);c4e=n(pGe,"STRONG",{});var ZNt=s(c4e);h$r=r(ZNt,"xlnet"),ZNt.forEach(t),p$r=r(pGe," \u2014 "),$K=n(pGe,"A",{href:!0});var eIt=s($K);_$r=r(eIt,"TFXLNetForSequenceClassification"),eIt.forEach(t),u$r=r(pGe," (XLNet model)"),pGe.forEach(t),ne.forEach(t),b$r=i(Vl),T(xE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Wze=i(f),yc=n(f,"H2",{class:!0});var oHe=s(yc);$E=n(oHe,"A",{id:!0,class:!0,href:!0});var oIt=s($E);f4e=n(oIt,"SPAN",{});var rIt=s(f4e);T(Sx.$$.fragment,rIt),rIt.forEach(t),oIt.forEach(t),v$r=i(oHe),m4e=n(oHe,"SPAN",{});var tIt=s(m4e);F$r=r(tIt,"TFAutoModelForMultipleChoice"),tIt.forEach(t),oHe.forEach(t),Hze=i(f),ir=n(f,"DIV",{class:!0});var Xl=s(ir);T(Rx.$$.fragment,Xl),T$r=i(Xl),xc=n(Xl,"P",{});var eae=s(xc);M$r=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kK=n(eae,"A",{href:!0});var aIt=s(kK);E$r=r(aIt,"from_pretrained()"),aIt.forEach(t),C$r=r(eae," class method or the "),SK=n(eae,"A",{href:!0});var nIt=s(SK);w$r=r(nIt,"from_config()"),nIt.forEach(t),A$r=r(eae,` class
method.`),eae.forEach(t),L$r=i(Xl),Px=n(Xl,"P",{});var rHe=s(Px);y$r=r(rHe,"This class cannot be instantiated directly using "),g4e=n(rHe,"CODE",{});var sIt=s(g4e);x$r=r(sIt,"__init__()"),sIt.forEach(t),$$r=r(rHe," (throws an error)."),rHe.forEach(t),k$r=i(Xl),Dt=n(Xl,"DIV",{class:!0});var EA=s(Dt);T(Bx.$$.fragment,EA),S$r=i(EA),h4e=n(EA,"P",{});var lIt=s(h4e);R$r=r(lIt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lIt.forEach(t),P$r=i(EA),$c=n(EA,"P",{});var oae=s($c);B$r=r(oae,`Note:
Loading a model from its configuration file does `),p4e=n(oae,"STRONG",{});var iIt=s(p4e);N$r=r(iIt,"not"),iIt.forEach(t),I$r=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=n(oae,"A",{href:!0});var dIt=s(RK);q$r=r(dIt,"from_pretrained()"),dIt.forEach(t),j$r=r(oae," to load the model weights."),oae.forEach(t),D$r=i(EA),T(kE.$$.fragment,EA),EA.forEach(t),G$r=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Nx.$$.fragment,zl),O$r=i(zl),_4e=n(zl,"P",{});var cIt=s(_4e);V$r=r(cIt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cIt.forEach(t),X$r=i(zl),hn=n(zl,"P",{});var CA=s(hn);z$r=r(CA,"The model class to instantiate is selected based on the "),u4e=n(CA,"CODE",{});var fIt=s(u4e);Q$r=r(fIt,"model_type"),fIt.forEach(t),W$r=r(CA,` property of the config object (either
passed as an argument or loaded from `),b4e=n(CA,"CODE",{});var mIt=s(b4e);H$r=r(mIt,"pretrained_model_name_or_path"),mIt.forEach(t),U$r=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=n(CA,"CODE",{});var gIt=s(v4e);J$r=r(gIt,"pretrained_model_name_or_path"),gIt.forEach(t),Y$r=r(CA,":"),CA.forEach(t),K$r=i(zl),ue=n(zl,"UL",{});var Fe=s(ue);SE=n(Fe,"LI",{});var _Ge=s(SE);F4e=n(_Ge,"STRONG",{});var hIt=s(F4e);Z$r=r(hIt,"albert"),hIt.forEach(t),ekr=r(_Ge," \u2014 "),PK=n(_Ge,"A",{href:!0});var pIt=s(PK);okr=r(pIt,"TFAlbertForMultipleChoice"),pIt.forEach(t),rkr=r(_Ge," (ALBERT model)"),_Ge.forEach(t),tkr=i(Fe),RE=n(Fe,"LI",{});var uGe=s(RE);T4e=n(uGe,"STRONG",{});var _It=s(T4e);akr=r(_It,"bert"),_It.forEach(t),nkr=r(uGe," \u2014 "),BK=n(uGe,"A",{href:!0});var uIt=s(BK);skr=r(uIt,"TFBertForMultipleChoice"),uIt.forEach(t),lkr=r(uGe," (BERT model)"),uGe.forEach(t),ikr=i(Fe),PE=n(Fe,"LI",{});var bGe=s(PE);M4e=n(bGe,"STRONG",{});var bIt=s(M4e);dkr=r(bIt,"camembert"),bIt.forEach(t),ckr=r(bGe," \u2014 "),NK=n(bGe,"A",{href:!0});var vIt=s(NK);fkr=r(vIt,"TFCamembertForMultipleChoice"),vIt.forEach(t),mkr=r(bGe," (CamemBERT model)"),bGe.forEach(t),gkr=i(Fe),BE=n(Fe,"LI",{});var vGe=s(BE);E4e=n(vGe,"STRONG",{});var FIt=s(E4e);hkr=r(FIt,"convbert"),FIt.forEach(t),pkr=r(vGe," \u2014 "),IK=n(vGe,"A",{href:!0});var TIt=s(IK);_kr=r(TIt,"TFConvBertForMultipleChoice"),TIt.forEach(t),ukr=r(vGe," (ConvBERT model)"),vGe.forEach(t),bkr=i(Fe),NE=n(Fe,"LI",{});var FGe=s(NE);C4e=n(FGe,"STRONG",{});var MIt=s(C4e);vkr=r(MIt,"distilbert"),MIt.forEach(t),Fkr=r(FGe," \u2014 "),qK=n(FGe,"A",{href:!0});var EIt=s(qK);Tkr=r(EIt,"TFDistilBertForMultipleChoice"),EIt.forEach(t),Mkr=r(FGe," (DistilBERT model)"),FGe.forEach(t),Ekr=i(Fe),IE=n(Fe,"LI",{});var TGe=s(IE);w4e=n(TGe,"STRONG",{});var CIt=s(w4e);Ckr=r(CIt,"electra"),CIt.forEach(t),wkr=r(TGe," \u2014 "),jK=n(TGe,"A",{href:!0});var wIt=s(jK);Akr=r(wIt,"TFElectraForMultipleChoice"),wIt.forEach(t),Lkr=r(TGe," (ELECTRA model)"),TGe.forEach(t),ykr=i(Fe),qE=n(Fe,"LI",{});var MGe=s(qE);A4e=n(MGe,"STRONG",{});var AIt=s(A4e);xkr=r(AIt,"flaubert"),AIt.forEach(t),$kr=r(MGe," \u2014 "),DK=n(MGe,"A",{href:!0});var LIt=s(DK);kkr=r(LIt,"TFFlaubertForMultipleChoice"),LIt.forEach(t),Skr=r(MGe," (FlauBERT model)"),MGe.forEach(t),Rkr=i(Fe),jE=n(Fe,"LI",{});var EGe=s(jE);L4e=n(EGe,"STRONG",{});var yIt=s(L4e);Pkr=r(yIt,"funnel"),yIt.forEach(t),Bkr=r(EGe," \u2014 "),GK=n(EGe,"A",{href:!0});var xIt=s(GK);Nkr=r(xIt,"TFFunnelForMultipleChoice"),xIt.forEach(t),Ikr=r(EGe," (Funnel Transformer model)"),EGe.forEach(t),qkr=i(Fe),DE=n(Fe,"LI",{});var CGe=s(DE);y4e=n(CGe,"STRONG",{});var $It=s(y4e);jkr=r($It,"longformer"),$It.forEach(t),Dkr=r(CGe," \u2014 "),OK=n(CGe,"A",{href:!0});var kIt=s(OK);Gkr=r(kIt,"TFLongformerForMultipleChoice"),kIt.forEach(t),Okr=r(CGe," (Longformer model)"),CGe.forEach(t),Vkr=i(Fe),GE=n(Fe,"LI",{});var wGe=s(GE);x4e=n(wGe,"STRONG",{});var SIt=s(x4e);Xkr=r(SIt,"mobilebert"),SIt.forEach(t),zkr=r(wGe," \u2014 "),VK=n(wGe,"A",{href:!0});var RIt=s(VK);Qkr=r(RIt,"TFMobileBertForMultipleChoice"),RIt.forEach(t),Wkr=r(wGe," (MobileBERT model)"),wGe.forEach(t),Hkr=i(Fe),OE=n(Fe,"LI",{});var AGe=s(OE);$4e=n(AGe,"STRONG",{});var PIt=s($4e);Ukr=r(PIt,"mpnet"),PIt.forEach(t),Jkr=r(AGe," \u2014 "),XK=n(AGe,"A",{href:!0});var BIt=s(XK);Ykr=r(BIt,"TFMPNetForMultipleChoice"),BIt.forEach(t),Kkr=r(AGe," (MPNet model)"),AGe.forEach(t),Zkr=i(Fe),VE=n(Fe,"LI",{});var LGe=s(VE);k4e=n(LGe,"STRONG",{});var NIt=s(k4e);eSr=r(NIt,"rembert"),NIt.forEach(t),oSr=r(LGe," \u2014 "),zK=n(LGe,"A",{href:!0});var IIt=s(zK);rSr=r(IIt,"TFRemBertForMultipleChoice"),IIt.forEach(t),tSr=r(LGe," (RemBERT model)"),LGe.forEach(t),aSr=i(Fe),XE=n(Fe,"LI",{});var yGe=s(XE);S4e=n(yGe,"STRONG",{});var qIt=s(S4e);nSr=r(qIt,"roberta"),qIt.forEach(t),sSr=r(yGe," \u2014 "),QK=n(yGe,"A",{href:!0});var jIt=s(QK);lSr=r(jIt,"TFRobertaForMultipleChoice"),jIt.forEach(t),iSr=r(yGe," (RoBERTa model)"),yGe.forEach(t),dSr=i(Fe),zE=n(Fe,"LI",{});var xGe=s(zE);R4e=n(xGe,"STRONG",{});var DIt=s(R4e);cSr=r(DIt,"roformer"),DIt.forEach(t),fSr=r(xGe," \u2014 "),WK=n(xGe,"A",{href:!0});var GIt=s(WK);mSr=r(GIt,"TFRoFormerForMultipleChoice"),GIt.forEach(t),gSr=r(xGe," (RoFormer model)"),xGe.forEach(t),hSr=i(Fe),QE=n(Fe,"LI",{});var $Ge=s(QE);P4e=n($Ge,"STRONG",{});var OIt=s(P4e);pSr=r(OIt,"xlm"),OIt.forEach(t),_Sr=r($Ge," \u2014 "),HK=n($Ge,"A",{href:!0});var VIt=s(HK);uSr=r(VIt,"TFXLMForMultipleChoice"),VIt.forEach(t),bSr=r($Ge," (XLM model)"),$Ge.forEach(t),vSr=i(Fe),WE=n(Fe,"LI",{});var kGe=s(WE);B4e=n(kGe,"STRONG",{});var XIt=s(B4e);FSr=r(XIt,"xlm-roberta"),XIt.forEach(t),TSr=r(kGe," \u2014 "),UK=n(kGe,"A",{href:!0});var zIt=s(UK);MSr=r(zIt,"TFXLMRobertaForMultipleChoice"),zIt.forEach(t),ESr=r(kGe," (XLM-RoBERTa model)"),kGe.forEach(t),CSr=i(Fe),HE=n(Fe,"LI",{});var SGe=s(HE);N4e=n(SGe,"STRONG",{});var QIt=s(N4e);wSr=r(QIt,"xlnet"),QIt.forEach(t),ASr=r(SGe," \u2014 "),JK=n(SGe,"A",{href:!0});var WIt=s(JK);LSr=r(WIt,"TFXLNetForMultipleChoice"),WIt.forEach(t),ySr=r(SGe," (XLNet model)"),SGe.forEach(t),Fe.forEach(t),xSr=i(zl),T(UE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Uze=i(f),kc=n(f,"H2",{class:!0});var tHe=s(kc);JE=n(tHe,"A",{id:!0,class:!0,href:!0});var HIt=s(JE);I4e=n(HIt,"SPAN",{});var UIt=s(I4e);T(Ix.$$.fragment,UIt),UIt.forEach(t),HIt.forEach(t),$Sr=i(tHe),q4e=n(tHe,"SPAN",{});var JIt=s(q4e);kSr=r(JIt,"TFAutoModelForNextSentencePrediction"),JIt.forEach(t),tHe.forEach(t),Jze=i(f),dr=n(f,"DIV",{class:!0});var Ql=s(dr);T(qx.$$.fragment,Ql),SSr=i(Ql),Sc=n(Ql,"P",{});var rae=s(Sc);RSr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YK=n(rae,"A",{href:!0});var YIt=s(YK);PSr=r(YIt,"from_pretrained()"),YIt.forEach(t),BSr=r(rae," class method or the "),KK=n(rae,"A",{href:!0});var KIt=s(KK);NSr=r(KIt,"from_config()"),KIt.forEach(t),ISr=r(rae,` class
method.`),rae.forEach(t),qSr=i(Ql),jx=n(Ql,"P",{});var aHe=s(jx);jSr=r(aHe,"This class cannot be instantiated directly using "),j4e=n(aHe,"CODE",{});var ZIt=s(j4e);DSr=r(ZIt,"__init__()"),ZIt.forEach(t),GSr=r(aHe," (throws an error)."),aHe.forEach(t),OSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var wA=s(Gt);T(Dx.$$.fragment,wA),VSr=i(wA),D4e=n(wA,"P",{});var eqt=s(D4e);XSr=r(eqt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eqt.forEach(t),zSr=i(wA),Rc=n(wA,"P",{});var tae=s(Rc);QSr=r(tae,`Note:
Loading a model from its configuration file does `),G4e=n(tae,"STRONG",{});var oqt=s(G4e);WSr=r(oqt,"not"),oqt.forEach(t),HSr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=n(tae,"A",{href:!0});var rqt=s(ZK);USr=r(rqt,"from_pretrained()"),rqt.forEach(t),JSr=r(tae," to load the model weights."),tae.forEach(t),YSr=i(wA),T(YE.$$.fragment,wA),wA.forEach(t),KSr=i(Ql),Ir=n(Ql,"DIV",{class:!0});var Wl=s(Ir);T(Gx.$$.fragment,Wl),ZSr=i(Wl),O4e=n(Wl,"P",{});var tqt=s(O4e);eRr=r(tqt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tqt.forEach(t),oRr=i(Wl),pn=n(Wl,"P",{});var AA=s(pn);rRr=r(AA,"The model class to instantiate is selected based on the "),V4e=n(AA,"CODE",{});var aqt=s(V4e);tRr=r(aqt,"model_type"),aqt.forEach(t),aRr=r(AA,` property of the config object (either
passed as an argument or loaded from `),X4e=n(AA,"CODE",{});var nqt=s(X4e);nRr=r(nqt,"pretrained_model_name_or_path"),nqt.forEach(t),sRr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(AA,"CODE",{});var sqt=s(z4e);lRr=r(sqt,"pretrained_model_name_or_path"),sqt.forEach(t),iRr=r(AA,":"),AA.forEach(t),dRr=i(Wl),Ox=n(Wl,"UL",{});var nHe=s(Ox);KE=n(nHe,"LI",{});var RGe=s(KE);Q4e=n(RGe,"STRONG",{});var lqt=s(Q4e);cRr=r(lqt,"bert"),lqt.forEach(t),fRr=r(RGe," \u2014 "),eZ=n(RGe,"A",{href:!0});var iqt=s(eZ);mRr=r(iqt,"TFBertForNextSentencePrediction"),iqt.forEach(t),gRr=r(RGe," (BERT model)"),RGe.forEach(t),hRr=i(nHe),ZE=n(nHe,"LI",{});var PGe=s(ZE);W4e=n(PGe,"STRONG",{});var dqt=s(W4e);pRr=r(dqt,"mobilebert"),dqt.forEach(t),_Rr=r(PGe," \u2014 "),oZ=n(PGe,"A",{href:!0});var cqt=s(oZ);uRr=r(cqt,"TFMobileBertForNextSentencePrediction"),cqt.forEach(t),bRr=r(PGe," (MobileBERT model)"),PGe.forEach(t),nHe.forEach(t),vRr=i(Wl),T(eC.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Yze=i(f),Pc=n(f,"H2",{class:!0});var sHe=s(Pc);oC=n(sHe,"A",{id:!0,class:!0,href:!0});var fqt=s(oC);H4e=n(fqt,"SPAN",{});var mqt=s(H4e);T(Vx.$$.fragment,mqt),mqt.forEach(t),fqt.forEach(t),FRr=i(sHe),U4e=n(sHe,"SPAN",{});var gqt=s(U4e);TRr=r(gqt,"TFAutoModelForTableQuestionAnswering"),gqt.forEach(t),sHe.forEach(t),Kze=i(f),cr=n(f,"DIV",{class:!0});var Hl=s(cr);T(Xx.$$.fragment,Hl),MRr=i(Hl),Bc=n(Hl,"P",{});var aae=s(Bc);ERr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),rZ=n(aae,"A",{href:!0});var hqt=s(rZ);CRr=r(hqt,"from_pretrained()"),hqt.forEach(t),wRr=r(aae," class method or the "),tZ=n(aae,"A",{href:!0});var pqt=s(tZ);ARr=r(pqt,"from_config()"),pqt.forEach(t),LRr=r(aae,` class
method.`),aae.forEach(t),yRr=i(Hl),zx=n(Hl,"P",{});var lHe=s(zx);xRr=r(lHe,"This class cannot be instantiated directly using "),J4e=n(lHe,"CODE",{});var _qt=s(J4e);$Rr=r(_qt,"__init__()"),_qt.forEach(t),kRr=r(lHe," (throws an error)."),lHe.forEach(t),SRr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var LA=s(Ot);T(Qx.$$.fragment,LA),RRr=i(LA),Y4e=n(LA,"P",{});var uqt=s(Y4e);PRr=r(uqt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uqt.forEach(t),BRr=i(LA),Nc=n(LA,"P",{});var nae=s(Nc);NRr=r(nae,`Note:
Loading a model from its configuration file does `),K4e=n(nae,"STRONG",{});var bqt=s(K4e);IRr=r(bqt,"not"),bqt.forEach(t),qRr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(nae,"A",{href:!0});var vqt=s(aZ);jRr=r(vqt,"from_pretrained()"),vqt.forEach(t),DRr=r(nae," to load the model weights."),nae.forEach(t),GRr=i(LA),T(rC.$$.fragment,LA),LA.forEach(t),ORr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(Wx.$$.fragment,Ul),VRr=i(Ul),Z4e=n(Ul,"P",{});var Fqt=s(Z4e);XRr=r(Fqt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Fqt.forEach(t),zRr=i(Ul),_n=n(Ul,"P",{});var yA=s(_n);QRr=r(yA,"The model class to instantiate is selected based on the "),eEe=n(yA,"CODE",{});var Tqt=s(eEe);WRr=r(Tqt,"model_type"),Tqt.forEach(t),HRr=r(yA,` property of the config object (either
passed as an argument or loaded from `),oEe=n(yA,"CODE",{});var Mqt=s(oEe);URr=r(Mqt,"pretrained_model_name_or_path"),Mqt.forEach(t),JRr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=n(yA,"CODE",{});var Eqt=s(rEe);YRr=r(Eqt,"pretrained_model_name_or_path"),Eqt.forEach(t),KRr=r(yA,":"),yA.forEach(t),ZRr=i(Ul),tEe=n(Ul,"UL",{});var Cqt=s(tEe);tC=n(Cqt,"LI",{});var BGe=s(tC);aEe=n(BGe,"STRONG",{});var wqt=s(aEe);ePr=r(wqt,"tapas"),wqt.forEach(t),oPr=r(BGe," \u2014 "),nZ=n(BGe,"A",{href:!0});var Aqt=s(nZ);rPr=r(Aqt,"TFTapasForQuestionAnswering"),Aqt.forEach(t),tPr=r(BGe," (TAPAS model)"),BGe.forEach(t),Cqt.forEach(t),aPr=i(Ul),T(aC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Zze=i(f),Ic=n(f,"H2",{class:!0});var iHe=s(Ic);nC=n(iHe,"A",{id:!0,class:!0,href:!0});var Lqt=s(nC);nEe=n(Lqt,"SPAN",{});var yqt=s(nEe);T(Hx.$$.fragment,yqt),yqt.forEach(t),Lqt.forEach(t),nPr=i(iHe),sEe=n(iHe,"SPAN",{});var xqt=s(sEe);sPr=r(xqt,"TFAutoModelForTokenClassification"),xqt.forEach(t),iHe.forEach(t),eQe=i(f),fr=n(f,"DIV",{class:!0});var Jl=s(fr);T(Ux.$$.fragment,Jl),lPr=i(Jl),qc=n(Jl,"P",{});var sae=s(qc);iPr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sZ=n(sae,"A",{href:!0});var $qt=s(sZ);dPr=r($qt,"from_pretrained()"),$qt.forEach(t),cPr=r(sae," class method or the "),lZ=n(sae,"A",{href:!0});var kqt=s(lZ);fPr=r(kqt,"from_config()"),kqt.forEach(t),mPr=r(sae,` class
method.`),sae.forEach(t),gPr=i(Jl),Jx=n(Jl,"P",{});var dHe=s(Jx);hPr=r(dHe,"This class cannot be instantiated directly using "),lEe=n(dHe,"CODE",{});var Sqt=s(lEe);pPr=r(Sqt,"__init__()"),Sqt.forEach(t),_Pr=r(dHe," (throws an error)."),dHe.forEach(t),uPr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var xA=s(Vt);T(Yx.$$.fragment,xA),bPr=i(xA),iEe=n(xA,"P",{});var Rqt=s(iEe);vPr=r(Rqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rqt.forEach(t),FPr=i(xA),jc=n(xA,"P",{});var lae=s(jc);TPr=r(lae,`Note:
Loading a model from its configuration file does `),dEe=n(lae,"STRONG",{});var Pqt=s(dEe);MPr=r(Pqt,"not"),Pqt.forEach(t),EPr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=n(lae,"A",{href:!0});var Bqt=s(iZ);CPr=r(Bqt,"from_pretrained()"),Bqt.forEach(t),wPr=r(lae," to load the model weights."),lae.forEach(t),APr=i(xA),T(sC.$$.fragment,xA),xA.forEach(t),LPr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(Kx.$$.fragment,Yl),yPr=i(Yl),cEe=n(Yl,"P",{});var Nqt=s(cEe);xPr=r(Nqt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nqt.forEach(t),$Pr=i(Yl),un=n(Yl,"P",{});var $A=s(un);kPr=r($A,"The model class to instantiate is selected based on the "),fEe=n($A,"CODE",{});var Iqt=s(fEe);SPr=r(Iqt,"model_type"),Iqt.forEach(t),RPr=r($A,` property of the config object (either
passed as an argument or loaded from `),mEe=n($A,"CODE",{});var qqt=s(mEe);PPr=r(qqt,"pretrained_model_name_or_path"),qqt.forEach(t),BPr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=n($A,"CODE",{});var jqt=s(gEe);NPr=r(jqt,"pretrained_model_name_or_path"),jqt.forEach(t),IPr=r($A,":"),$A.forEach(t),qPr=i(Yl),de=n(Yl,"UL",{});var ge=s(de);lC=n(ge,"LI",{});var NGe=s(lC);hEe=n(NGe,"STRONG",{});var Dqt=s(hEe);jPr=r(Dqt,"albert"),Dqt.forEach(t),DPr=r(NGe," \u2014 "),dZ=n(NGe,"A",{href:!0});var Gqt=s(dZ);GPr=r(Gqt,"TFAlbertForTokenClassification"),Gqt.forEach(t),OPr=r(NGe," (ALBERT model)"),NGe.forEach(t),VPr=i(ge),iC=n(ge,"LI",{});var IGe=s(iC);pEe=n(IGe,"STRONG",{});var Oqt=s(pEe);XPr=r(Oqt,"bert"),Oqt.forEach(t),zPr=r(IGe," \u2014 "),cZ=n(IGe,"A",{href:!0});var Vqt=s(cZ);QPr=r(Vqt,"TFBertForTokenClassification"),Vqt.forEach(t),WPr=r(IGe," (BERT model)"),IGe.forEach(t),HPr=i(ge),dC=n(ge,"LI",{});var qGe=s(dC);_Ee=n(qGe,"STRONG",{});var Xqt=s(_Ee);UPr=r(Xqt,"camembert"),Xqt.forEach(t),JPr=r(qGe," \u2014 "),fZ=n(qGe,"A",{href:!0});var zqt=s(fZ);YPr=r(zqt,"TFCamembertForTokenClassification"),zqt.forEach(t),KPr=r(qGe," (CamemBERT model)"),qGe.forEach(t),ZPr=i(ge),cC=n(ge,"LI",{});var jGe=s(cC);uEe=n(jGe,"STRONG",{});var Qqt=s(uEe);eBr=r(Qqt,"convbert"),Qqt.forEach(t),oBr=r(jGe," \u2014 "),mZ=n(jGe,"A",{href:!0});var Wqt=s(mZ);rBr=r(Wqt,"TFConvBertForTokenClassification"),Wqt.forEach(t),tBr=r(jGe," (ConvBERT model)"),jGe.forEach(t),aBr=i(ge),fC=n(ge,"LI",{});var DGe=s(fC);bEe=n(DGe,"STRONG",{});var Hqt=s(bEe);nBr=r(Hqt,"deberta"),Hqt.forEach(t),sBr=r(DGe," \u2014 "),gZ=n(DGe,"A",{href:!0});var Uqt=s(gZ);lBr=r(Uqt,"TFDebertaForTokenClassification"),Uqt.forEach(t),iBr=r(DGe," (DeBERTa model)"),DGe.forEach(t),dBr=i(ge),mC=n(ge,"LI",{});var GGe=s(mC);vEe=n(GGe,"STRONG",{});var Jqt=s(vEe);cBr=r(Jqt,"deberta-v2"),Jqt.forEach(t),fBr=r(GGe," \u2014 "),hZ=n(GGe,"A",{href:!0});var Yqt=s(hZ);mBr=r(Yqt,"TFDebertaV2ForTokenClassification"),Yqt.forEach(t),gBr=r(GGe," (DeBERTa-v2 model)"),GGe.forEach(t),hBr=i(ge),gC=n(ge,"LI",{});var OGe=s(gC);FEe=n(OGe,"STRONG",{});var Kqt=s(FEe);pBr=r(Kqt,"distilbert"),Kqt.forEach(t),_Br=r(OGe," \u2014 "),pZ=n(OGe,"A",{href:!0});var Zqt=s(pZ);uBr=r(Zqt,"TFDistilBertForTokenClassification"),Zqt.forEach(t),bBr=r(OGe," (DistilBERT model)"),OGe.forEach(t),vBr=i(ge),hC=n(ge,"LI",{});var VGe=s(hC);TEe=n(VGe,"STRONG",{});var ejt=s(TEe);FBr=r(ejt,"electra"),ejt.forEach(t),TBr=r(VGe," \u2014 "),_Z=n(VGe,"A",{href:!0});var ojt=s(_Z);MBr=r(ojt,"TFElectraForTokenClassification"),ojt.forEach(t),EBr=r(VGe," (ELECTRA model)"),VGe.forEach(t),CBr=i(ge),pC=n(ge,"LI",{});var XGe=s(pC);MEe=n(XGe,"STRONG",{});var rjt=s(MEe);wBr=r(rjt,"flaubert"),rjt.forEach(t),ABr=r(XGe," \u2014 "),uZ=n(XGe,"A",{href:!0});var tjt=s(uZ);LBr=r(tjt,"TFFlaubertForTokenClassification"),tjt.forEach(t),yBr=r(XGe," (FlauBERT model)"),XGe.forEach(t),xBr=i(ge),_C=n(ge,"LI",{});var zGe=s(_C);EEe=n(zGe,"STRONG",{});var ajt=s(EEe);$Br=r(ajt,"funnel"),ajt.forEach(t),kBr=r(zGe," \u2014 "),bZ=n(zGe,"A",{href:!0});var njt=s(bZ);SBr=r(njt,"TFFunnelForTokenClassification"),njt.forEach(t),RBr=r(zGe," (Funnel Transformer model)"),zGe.forEach(t),PBr=i(ge),uC=n(ge,"LI",{});var QGe=s(uC);CEe=n(QGe,"STRONG",{});var sjt=s(CEe);BBr=r(sjt,"layoutlm"),sjt.forEach(t),NBr=r(QGe," \u2014 "),vZ=n(QGe,"A",{href:!0});var ljt=s(vZ);IBr=r(ljt,"TFLayoutLMForTokenClassification"),ljt.forEach(t),qBr=r(QGe," (LayoutLM model)"),QGe.forEach(t),jBr=i(ge),bC=n(ge,"LI",{});var WGe=s(bC);wEe=n(WGe,"STRONG",{});var ijt=s(wEe);DBr=r(ijt,"longformer"),ijt.forEach(t),GBr=r(WGe," \u2014 "),FZ=n(WGe,"A",{href:!0});var djt=s(FZ);OBr=r(djt,"TFLongformerForTokenClassification"),djt.forEach(t),VBr=r(WGe," (Longformer model)"),WGe.forEach(t),XBr=i(ge),vC=n(ge,"LI",{});var HGe=s(vC);AEe=n(HGe,"STRONG",{});var cjt=s(AEe);zBr=r(cjt,"mobilebert"),cjt.forEach(t),QBr=r(HGe," \u2014 "),TZ=n(HGe,"A",{href:!0});var fjt=s(TZ);WBr=r(fjt,"TFMobileBertForTokenClassification"),fjt.forEach(t),HBr=r(HGe," (MobileBERT model)"),HGe.forEach(t),UBr=i(ge),FC=n(ge,"LI",{});var UGe=s(FC);LEe=n(UGe,"STRONG",{});var mjt=s(LEe);JBr=r(mjt,"mpnet"),mjt.forEach(t),YBr=r(UGe," \u2014 "),MZ=n(UGe,"A",{href:!0});var gjt=s(MZ);KBr=r(gjt,"TFMPNetForTokenClassification"),gjt.forEach(t),ZBr=r(UGe," (MPNet model)"),UGe.forEach(t),eNr=i(ge),TC=n(ge,"LI",{});var JGe=s(TC);yEe=n(JGe,"STRONG",{});var hjt=s(yEe);oNr=r(hjt,"rembert"),hjt.forEach(t),rNr=r(JGe," \u2014 "),EZ=n(JGe,"A",{href:!0});var pjt=s(EZ);tNr=r(pjt,"TFRemBertForTokenClassification"),pjt.forEach(t),aNr=r(JGe," (RemBERT model)"),JGe.forEach(t),nNr=i(ge),MC=n(ge,"LI",{});var YGe=s(MC);xEe=n(YGe,"STRONG",{});var _jt=s(xEe);sNr=r(_jt,"roberta"),_jt.forEach(t),lNr=r(YGe," \u2014 "),CZ=n(YGe,"A",{href:!0});var ujt=s(CZ);iNr=r(ujt,"TFRobertaForTokenClassification"),ujt.forEach(t),dNr=r(YGe," (RoBERTa model)"),YGe.forEach(t),cNr=i(ge),EC=n(ge,"LI",{});var KGe=s(EC);$Ee=n(KGe,"STRONG",{});var bjt=s($Ee);fNr=r(bjt,"roformer"),bjt.forEach(t),mNr=r(KGe," \u2014 "),wZ=n(KGe,"A",{href:!0});var vjt=s(wZ);gNr=r(vjt,"TFRoFormerForTokenClassification"),vjt.forEach(t),hNr=r(KGe," (RoFormer model)"),KGe.forEach(t),pNr=i(ge),CC=n(ge,"LI",{});var ZGe=s(CC);kEe=n(ZGe,"STRONG",{});var Fjt=s(kEe);_Nr=r(Fjt,"xlm"),Fjt.forEach(t),uNr=r(ZGe," \u2014 "),AZ=n(ZGe,"A",{href:!0});var Tjt=s(AZ);bNr=r(Tjt,"TFXLMForTokenClassification"),Tjt.forEach(t),vNr=r(ZGe," (XLM model)"),ZGe.forEach(t),FNr=i(ge),wC=n(ge,"LI",{});var eOe=s(wC);SEe=n(eOe,"STRONG",{});var Mjt=s(SEe);TNr=r(Mjt,"xlm-roberta"),Mjt.forEach(t),MNr=r(eOe," \u2014 "),LZ=n(eOe,"A",{href:!0});var Ejt=s(LZ);ENr=r(Ejt,"TFXLMRobertaForTokenClassification"),Ejt.forEach(t),CNr=r(eOe," (XLM-RoBERTa model)"),eOe.forEach(t),wNr=i(ge),AC=n(ge,"LI",{});var oOe=s(AC);REe=n(oOe,"STRONG",{});var Cjt=s(REe);ANr=r(Cjt,"xlnet"),Cjt.forEach(t),LNr=r(oOe," \u2014 "),yZ=n(oOe,"A",{href:!0});var wjt=s(yZ);yNr=r(wjt,"TFXLNetForTokenClassification"),wjt.forEach(t),xNr=r(oOe," (XLNet model)"),oOe.forEach(t),ge.forEach(t),$Nr=i(Yl),T(LC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),oQe=i(f),Dc=n(f,"H2",{class:!0});var cHe=s(Dc);yC=n(cHe,"A",{id:!0,class:!0,href:!0});var Ajt=s(yC);PEe=n(Ajt,"SPAN",{});var Ljt=s(PEe);T(Zx.$$.fragment,Ljt),Ljt.forEach(t),Ajt.forEach(t),kNr=i(cHe),BEe=n(cHe,"SPAN",{});var yjt=s(BEe);SNr=r(yjt,"TFAutoModelForQuestionAnswering"),yjt.forEach(t),cHe.forEach(t),rQe=i(f),mr=n(f,"DIV",{class:!0});var Kl=s(mr);T(e$.$$.fragment,Kl),RNr=i(Kl),Gc=n(Kl,"P",{});var iae=s(Gc);PNr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xZ=n(iae,"A",{href:!0});var xjt=s(xZ);BNr=r(xjt,"from_pretrained()"),xjt.forEach(t),NNr=r(iae," class method or the "),$Z=n(iae,"A",{href:!0});var $jt=s($Z);INr=r($jt,"from_config()"),$jt.forEach(t),qNr=r(iae,` class
method.`),iae.forEach(t),jNr=i(Kl),o$=n(Kl,"P",{});var fHe=s(o$);DNr=r(fHe,"This class cannot be instantiated directly using "),NEe=n(fHe,"CODE",{});var kjt=s(NEe);GNr=r(kjt,"__init__()"),kjt.forEach(t),ONr=r(fHe," (throws an error)."),fHe.forEach(t),VNr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var kA=s(Xt);T(r$.$$.fragment,kA),XNr=i(kA),IEe=n(kA,"P",{});var Sjt=s(IEe);zNr=r(Sjt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Sjt.forEach(t),QNr=i(kA),Oc=n(kA,"P",{});var dae=s(Oc);WNr=r(dae,`Note:
Loading a model from its configuration file does `),qEe=n(dae,"STRONG",{});var Rjt=s(qEe);HNr=r(Rjt,"not"),Rjt.forEach(t),UNr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=n(dae,"A",{href:!0});var Pjt=s(kZ);JNr=r(Pjt,"from_pretrained()"),Pjt.forEach(t),YNr=r(dae," to load the model weights."),dae.forEach(t),KNr=i(kA),T(xC.$$.fragment,kA),kA.forEach(t),ZNr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(t$.$$.fragment,Zl),eIr=i(Zl),jEe=n(Zl,"P",{});var Bjt=s(jEe);oIr=r(Bjt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Bjt.forEach(t),rIr=i(Zl),bn=n(Zl,"P",{});var SA=s(bn);tIr=r(SA,"The model class to instantiate is selected based on the "),DEe=n(SA,"CODE",{});var Njt=s(DEe);aIr=r(Njt,"model_type"),Njt.forEach(t),nIr=r(SA,` property of the config object (either
passed as an argument or loaded from `),GEe=n(SA,"CODE",{});var Ijt=s(GEe);sIr=r(Ijt,"pretrained_model_name_or_path"),Ijt.forEach(t),lIr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=n(SA,"CODE",{});var qjt=s(OEe);iIr=r(qjt,"pretrained_model_name_or_path"),qjt.forEach(t),dIr=r(SA,":"),SA.forEach(t),cIr=i(Zl),ce=n(Zl,"UL",{});var he=s(ce);$C=n(he,"LI",{});var rOe=s($C);VEe=n(rOe,"STRONG",{});var jjt=s(VEe);fIr=r(jjt,"albert"),jjt.forEach(t),mIr=r(rOe," \u2014 "),SZ=n(rOe,"A",{href:!0});var Djt=s(SZ);gIr=r(Djt,"TFAlbertForQuestionAnswering"),Djt.forEach(t),hIr=r(rOe," (ALBERT model)"),rOe.forEach(t),pIr=i(he),kC=n(he,"LI",{});var tOe=s(kC);XEe=n(tOe,"STRONG",{});var Gjt=s(XEe);_Ir=r(Gjt,"bert"),Gjt.forEach(t),uIr=r(tOe," \u2014 "),RZ=n(tOe,"A",{href:!0});var Ojt=s(RZ);bIr=r(Ojt,"TFBertForQuestionAnswering"),Ojt.forEach(t),vIr=r(tOe," (BERT model)"),tOe.forEach(t),FIr=i(he),SC=n(he,"LI",{});var aOe=s(SC);zEe=n(aOe,"STRONG",{});var Vjt=s(zEe);TIr=r(Vjt,"camembert"),Vjt.forEach(t),MIr=r(aOe," \u2014 "),PZ=n(aOe,"A",{href:!0});var Xjt=s(PZ);EIr=r(Xjt,"TFCamembertForQuestionAnswering"),Xjt.forEach(t),CIr=r(aOe," (CamemBERT model)"),aOe.forEach(t),wIr=i(he),RC=n(he,"LI",{});var nOe=s(RC);QEe=n(nOe,"STRONG",{});var zjt=s(QEe);AIr=r(zjt,"convbert"),zjt.forEach(t),LIr=r(nOe," \u2014 "),BZ=n(nOe,"A",{href:!0});var Qjt=s(BZ);yIr=r(Qjt,"TFConvBertForQuestionAnswering"),Qjt.forEach(t),xIr=r(nOe," (ConvBERT model)"),nOe.forEach(t),$Ir=i(he),PC=n(he,"LI",{});var sOe=s(PC);WEe=n(sOe,"STRONG",{});var Wjt=s(WEe);kIr=r(Wjt,"deberta"),Wjt.forEach(t),SIr=r(sOe," \u2014 "),NZ=n(sOe,"A",{href:!0});var Hjt=s(NZ);RIr=r(Hjt,"TFDebertaForQuestionAnswering"),Hjt.forEach(t),PIr=r(sOe," (DeBERTa model)"),sOe.forEach(t),BIr=i(he),BC=n(he,"LI",{});var lOe=s(BC);HEe=n(lOe,"STRONG",{});var Ujt=s(HEe);NIr=r(Ujt,"deberta-v2"),Ujt.forEach(t),IIr=r(lOe," \u2014 "),IZ=n(lOe,"A",{href:!0});var Jjt=s(IZ);qIr=r(Jjt,"TFDebertaV2ForQuestionAnswering"),Jjt.forEach(t),jIr=r(lOe," (DeBERTa-v2 model)"),lOe.forEach(t),DIr=i(he),NC=n(he,"LI",{});var iOe=s(NC);UEe=n(iOe,"STRONG",{});var Yjt=s(UEe);GIr=r(Yjt,"distilbert"),Yjt.forEach(t),OIr=r(iOe," \u2014 "),qZ=n(iOe,"A",{href:!0});var Kjt=s(qZ);VIr=r(Kjt,"TFDistilBertForQuestionAnswering"),Kjt.forEach(t),XIr=r(iOe," (DistilBERT model)"),iOe.forEach(t),zIr=i(he),IC=n(he,"LI",{});var dOe=s(IC);JEe=n(dOe,"STRONG",{});var Zjt=s(JEe);QIr=r(Zjt,"electra"),Zjt.forEach(t),WIr=r(dOe," \u2014 "),jZ=n(dOe,"A",{href:!0});var eDt=s(jZ);HIr=r(eDt,"TFElectraForQuestionAnswering"),eDt.forEach(t),UIr=r(dOe," (ELECTRA model)"),dOe.forEach(t),JIr=i(he),qC=n(he,"LI",{});var cOe=s(qC);YEe=n(cOe,"STRONG",{});var oDt=s(YEe);YIr=r(oDt,"flaubert"),oDt.forEach(t),KIr=r(cOe," \u2014 "),DZ=n(cOe,"A",{href:!0});var rDt=s(DZ);ZIr=r(rDt,"TFFlaubertForQuestionAnsweringSimple"),rDt.forEach(t),eqr=r(cOe," (FlauBERT model)"),cOe.forEach(t),oqr=i(he),jC=n(he,"LI",{});var fOe=s(jC);KEe=n(fOe,"STRONG",{});var tDt=s(KEe);rqr=r(tDt,"funnel"),tDt.forEach(t),tqr=r(fOe," \u2014 "),GZ=n(fOe,"A",{href:!0});var aDt=s(GZ);aqr=r(aDt,"TFFunnelForQuestionAnswering"),aDt.forEach(t),nqr=r(fOe," (Funnel Transformer model)"),fOe.forEach(t),sqr=i(he),DC=n(he,"LI",{});var mOe=s(DC);ZEe=n(mOe,"STRONG",{});var nDt=s(ZEe);lqr=r(nDt,"gptj"),nDt.forEach(t),iqr=r(mOe," \u2014 "),OZ=n(mOe,"A",{href:!0});var sDt=s(OZ);dqr=r(sDt,"TFGPTJForQuestionAnswering"),sDt.forEach(t),cqr=r(mOe," (GPT-J model)"),mOe.forEach(t),fqr=i(he),GC=n(he,"LI",{});var gOe=s(GC);eCe=n(gOe,"STRONG",{});var lDt=s(eCe);mqr=r(lDt,"longformer"),lDt.forEach(t),gqr=r(gOe," \u2014 "),VZ=n(gOe,"A",{href:!0});var iDt=s(VZ);hqr=r(iDt,"TFLongformerForQuestionAnswering"),iDt.forEach(t),pqr=r(gOe," (Longformer model)"),gOe.forEach(t),_qr=i(he),OC=n(he,"LI",{});var hOe=s(OC);oCe=n(hOe,"STRONG",{});var dDt=s(oCe);uqr=r(dDt,"mobilebert"),dDt.forEach(t),bqr=r(hOe," \u2014 "),XZ=n(hOe,"A",{href:!0});var cDt=s(XZ);vqr=r(cDt,"TFMobileBertForQuestionAnswering"),cDt.forEach(t),Fqr=r(hOe," (MobileBERT model)"),hOe.forEach(t),Tqr=i(he),VC=n(he,"LI",{});var pOe=s(VC);rCe=n(pOe,"STRONG",{});var fDt=s(rCe);Mqr=r(fDt,"mpnet"),fDt.forEach(t),Eqr=r(pOe," \u2014 "),zZ=n(pOe,"A",{href:!0});var mDt=s(zZ);Cqr=r(mDt,"TFMPNetForQuestionAnswering"),mDt.forEach(t),wqr=r(pOe," (MPNet model)"),pOe.forEach(t),Aqr=i(he),XC=n(he,"LI",{});var _Oe=s(XC);tCe=n(_Oe,"STRONG",{});var gDt=s(tCe);Lqr=r(gDt,"rembert"),gDt.forEach(t),yqr=r(_Oe," \u2014 "),QZ=n(_Oe,"A",{href:!0});var hDt=s(QZ);xqr=r(hDt,"TFRemBertForQuestionAnswering"),hDt.forEach(t),$qr=r(_Oe," (RemBERT model)"),_Oe.forEach(t),kqr=i(he),zC=n(he,"LI",{});var uOe=s(zC);aCe=n(uOe,"STRONG",{});var pDt=s(aCe);Sqr=r(pDt,"roberta"),pDt.forEach(t),Rqr=r(uOe," \u2014 "),WZ=n(uOe,"A",{href:!0});var _Dt=s(WZ);Pqr=r(_Dt,"TFRobertaForQuestionAnswering"),_Dt.forEach(t),Bqr=r(uOe," (RoBERTa model)"),uOe.forEach(t),Nqr=i(he),QC=n(he,"LI",{});var bOe=s(QC);nCe=n(bOe,"STRONG",{});var uDt=s(nCe);Iqr=r(uDt,"roformer"),uDt.forEach(t),qqr=r(bOe," \u2014 "),HZ=n(bOe,"A",{href:!0});var bDt=s(HZ);jqr=r(bDt,"TFRoFormerForQuestionAnswering"),bDt.forEach(t),Dqr=r(bOe," (RoFormer model)"),bOe.forEach(t),Gqr=i(he),WC=n(he,"LI",{});var vOe=s(WC);sCe=n(vOe,"STRONG",{});var vDt=s(sCe);Oqr=r(vDt,"xlm"),vDt.forEach(t),Vqr=r(vOe," \u2014 "),UZ=n(vOe,"A",{href:!0});var FDt=s(UZ);Xqr=r(FDt,"TFXLMForQuestionAnsweringSimple"),FDt.forEach(t),zqr=r(vOe," (XLM model)"),vOe.forEach(t),Qqr=i(he),HC=n(he,"LI",{});var FOe=s(HC);lCe=n(FOe,"STRONG",{});var TDt=s(lCe);Wqr=r(TDt,"xlm-roberta"),TDt.forEach(t),Hqr=r(FOe," \u2014 "),JZ=n(FOe,"A",{href:!0});var MDt=s(JZ);Uqr=r(MDt,"TFXLMRobertaForQuestionAnswering"),MDt.forEach(t),Jqr=r(FOe," (XLM-RoBERTa model)"),FOe.forEach(t),Yqr=i(he),UC=n(he,"LI",{});var TOe=s(UC);iCe=n(TOe,"STRONG",{});var EDt=s(iCe);Kqr=r(EDt,"xlnet"),EDt.forEach(t),Zqr=r(TOe," \u2014 "),YZ=n(TOe,"A",{href:!0});var CDt=s(YZ);ejr=r(CDt,"TFXLNetForQuestionAnsweringSimple"),CDt.forEach(t),ojr=r(TOe," (XLNet model)"),TOe.forEach(t),he.forEach(t),rjr=i(Zl),T(JC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),tQe=i(f),Vc=n(f,"H2",{class:!0});var mHe=s(Vc);YC=n(mHe,"A",{id:!0,class:!0,href:!0});var wDt=s(YC);dCe=n(wDt,"SPAN",{});var ADt=s(dCe);T(a$.$$.fragment,ADt),ADt.forEach(t),wDt.forEach(t),tjr=i(mHe),cCe=n(mHe,"SPAN",{});var LDt=s(cCe);ajr=r(LDt,"TFAutoModelForVision2Seq"),LDt.forEach(t),mHe.forEach(t),aQe=i(f),gr=n(f,"DIV",{class:!0});var ei=s(gr);T(n$.$$.fragment,ei),njr=i(ei),Xc=n(ei,"P",{});var cae=s(Xc);sjr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KZ=n(cae,"A",{href:!0});var yDt=s(KZ);ljr=r(yDt,"from_pretrained()"),yDt.forEach(t),ijr=r(cae," class method or the "),ZZ=n(cae,"A",{href:!0});var xDt=s(ZZ);djr=r(xDt,"from_config()"),xDt.forEach(t),cjr=r(cae,` class
method.`),cae.forEach(t),fjr=i(ei),s$=n(ei,"P",{});var gHe=s(s$);mjr=r(gHe,"This class cannot be instantiated directly using "),fCe=n(gHe,"CODE",{});var $Dt=s(fCe);gjr=r($Dt,"__init__()"),$Dt.forEach(t),hjr=r(gHe," (throws an error)."),gHe.forEach(t),pjr=i(ei),zt=n(ei,"DIV",{class:!0});var RA=s(zt);T(l$.$$.fragment,RA),_jr=i(RA),mCe=n(RA,"P",{});var kDt=s(mCe);ujr=r(kDt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kDt.forEach(t),bjr=i(RA),zc=n(RA,"P",{});var fae=s(zc);vjr=r(fae,`Note:
Loading a model from its configuration file does `),gCe=n(fae,"STRONG",{});var SDt=s(gCe);Fjr=r(SDt,"not"),SDt.forEach(t),Tjr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=n(fae,"A",{href:!0});var RDt=s(eee);Mjr=r(RDt,"from_pretrained()"),RDt.forEach(t),Ejr=r(fae," to load the model weights."),fae.forEach(t),Cjr=i(RA),T(KC.$$.fragment,RA),RA.forEach(t),wjr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(i$.$$.fragment,oi),Ajr=i(oi),hCe=n(oi,"P",{});var PDt=s(hCe);Ljr=r(PDt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PDt.forEach(t),yjr=i(oi),vn=n(oi,"P",{});var PA=s(vn);xjr=r(PA,"The model class to instantiate is selected based on the "),pCe=n(PA,"CODE",{});var BDt=s(pCe);$jr=r(BDt,"model_type"),BDt.forEach(t),kjr=r(PA,` property of the config object (either
passed as an argument or loaded from `),_Ce=n(PA,"CODE",{});var NDt=s(_Ce);Sjr=r(NDt,"pretrained_model_name_or_path"),NDt.forEach(t),Rjr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uCe=n(PA,"CODE",{});var IDt=s(uCe);Pjr=r(IDt,"pretrained_model_name_or_path"),IDt.forEach(t),Bjr=r(PA,":"),PA.forEach(t),Njr=i(oi),bCe=n(oi,"UL",{});var qDt=s(bCe);ZC=n(qDt,"LI",{});var MOe=s(ZC);vCe=n(MOe,"STRONG",{});var jDt=s(vCe);Ijr=r(jDt,"vision-encoder-decoder"),jDt.forEach(t),qjr=r(MOe," \u2014 "),oee=n(MOe,"A",{href:!0});var DDt=s(oee);jjr=r(DDt,"TFVisionEncoderDecoderModel"),DDt.forEach(t),Djr=r(MOe," (Vision Encoder decoder model)"),MOe.forEach(t),qDt.forEach(t),Gjr=i(oi),T(e5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),nQe=i(f),Qc=n(f,"H2",{class:!0});var hHe=s(Qc);o5=n(hHe,"A",{id:!0,class:!0,href:!0});var GDt=s(o5);FCe=n(GDt,"SPAN",{});var ODt=s(FCe);T(d$.$$.fragment,ODt),ODt.forEach(t),GDt.forEach(t),Ojr=i(hHe),TCe=n(hHe,"SPAN",{});var VDt=s(TCe);Vjr=r(VDt,"TFAutoModelForSpeechSeq2Seq"),VDt.forEach(t),hHe.forEach(t),sQe=i(f),hr=n(f,"DIV",{class:!0});var ri=s(hr);T(c$.$$.fragment,ri),Xjr=i(ri),Wc=n(ri,"P",{});var mae=s(Wc);zjr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ree=n(mae,"A",{href:!0});var XDt=s(ree);Qjr=r(XDt,"from_pretrained()"),XDt.forEach(t),Wjr=r(mae," class method or the "),tee=n(mae,"A",{href:!0});var zDt=s(tee);Hjr=r(zDt,"from_config()"),zDt.forEach(t),Ujr=r(mae,` class
method.`),mae.forEach(t),Jjr=i(ri),f$=n(ri,"P",{});var pHe=s(f$);Yjr=r(pHe,"This class cannot be instantiated directly using "),MCe=n(pHe,"CODE",{});var QDt=s(MCe);Kjr=r(QDt,"__init__()"),QDt.forEach(t),Zjr=r(pHe," (throws an error)."),pHe.forEach(t),eDr=i(ri),Qt=n(ri,"DIV",{class:!0});var BA=s(Qt);T(m$.$$.fragment,BA),oDr=i(BA),ECe=n(BA,"P",{});var WDt=s(ECe);rDr=r(WDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),WDt.forEach(t),tDr=i(BA),Hc=n(BA,"P",{});var gae=s(Hc);aDr=r(gae,`Note:
Loading a model from its configuration file does `),CCe=n(gae,"STRONG",{});var HDt=s(CCe);nDr=r(HDt,"not"),HDt.forEach(t),sDr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=n(gae,"A",{href:!0});var UDt=s(aee);lDr=r(UDt,"from_pretrained()"),UDt.forEach(t),iDr=r(gae," to load the model weights."),gae.forEach(t),dDr=i(BA),T(r5.$$.fragment,BA),BA.forEach(t),cDr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(g$.$$.fragment,ti),fDr=i(ti),wCe=n(ti,"P",{});var JDt=s(wCe);mDr=r(JDt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),JDt.forEach(t),gDr=i(ti),Fn=n(ti,"P",{});var NA=s(Fn);hDr=r(NA,"The model class to instantiate is selected based on the "),ACe=n(NA,"CODE",{});var YDt=s(ACe);pDr=r(YDt,"model_type"),YDt.forEach(t),_Dr=r(NA,` property of the config object (either
passed as an argument or loaded from `),LCe=n(NA,"CODE",{});var KDt=s(LCe);uDr=r(KDt,"pretrained_model_name_or_path"),KDt.forEach(t),bDr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=n(NA,"CODE",{});var ZDt=s(yCe);vDr=r(ZDt,"pretrained_model_name_or_path"),ZDt.forEach(t),FDr=r(NA,":"),NA.forEach(t),TDr=i(ti),xCe=n(ti,"UL",{});var eGt=s(xCe);t5=n(eGt,"LI",{});var EOe=s(t5);$Ce=n(EOe,"STRONG",{});var oGt=s($Ce);MDr=r(oGt,"speech_to_text"),oGt.forEach(t),EDr=r(EOe," \u2014 "),nee=n(EOe,"A",{href:!0});var rGt=s(nee);CDr=r(rGt,"TFSpeech2TextForConditionalGeneration"),rGt.forEach(t),wDr=r(EOe," (Speech2Text model)"),EOe.forEach(t),eGt.forEach(t),ADr=i(ti),T(a5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),lQe=i(f),Uc=n(f,"H2",{class:!0});var _He=s(Uc);n5=n(_He,"A",{id:!0,class:!0,href:!0});var tGt=s(n5);kCe=n(tGt,"SPAN",{});var aGt=s(kCe);T(h$.$$.fragment,aGt),aGt.forEach(t),tGt.forEach(t),LDr=i(_He),SCe=n(_He,"SPAN",{});var nGt=s(SCe);yDr=r(nGt,"FlaxAutoModel"),nGt.forEach(t),_He.forEach(t),iQe=i(f),pr=n(f,"DIV",{class:!0});var ai=s(pr);T(p$.$$.fragment,ai),xDr=i(ai),Jc=n(ai,"P",{});var hae=s(Jc);$Dr=r(hae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),see=n(hae,"A",{href:!0});var sGt=s(see);kDr=r(sGt,"from_pretrained()"),sGt.forEach(t),SDr=r(hae," class method or the "),lee=n(hae,"A",{href:!0});var lGt=s(lee);RDr=r(lGt,"from_config()"),lGt.forEach(t),PDr=r(hae,` class
method.`),hae.forEach(t),BDr=i(ai),_$=n(ai,"P",{});var uHe=s(_$);NDr=r(uHe,"This class cannot be instantiated directly using "),RCe=n(uHe,"CODE",{});var iGt=s(RCe);IDr=r(iGt,"__init__()"),iGt.forEach(t),qDr=r(uHe," (throws an error)."),uHe.forEach(t),jDr=i(ai),Wt=n(ai,"DIV",{class:!0});var IA=s(Wt);T(u$.$$.fragment,IA),DDr=i(IA),PCe=n(IA,"P",{});var dGt=s(PCe);GDr=r(dGt,"Instantiates one of the base model classes of the library from a configuration."),dGt.forEach(t),ODr=i(IA),Yc=n(IA,"P",{});var pae=s(Yc);VDr=r(pae,`Note:
Loading a model from its configuration file does `),BCe=n(pae,"STRONG",{});var cGt=s(BCe);XDr=r(cGt,"not"),cGt.forEach(t),zDr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=n(pae,"A",{href:!0});var fGt=s(iee);QDr=r(fGt,"from_pretrained()"),fGt.forEach(t),WDr=r(pae," to load the model weights."),pae.forEach(t),HDr=i(IA),T(s5.$$.fragment,IA),IA.forEach(t),UDr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(b$.$$.fragment,ni),JDr=i(ni),NCe=n(ni,"P",{});var mGt=s(NCe);YDr=r(mGt,"Instantiate one of the base model classes of the library from a pretrained model."),mGt.forEach(t),KDr=i(ni),Tn=n(ni,"P",{});var qA=s(Tn);ZDr=r(qA,"The model class to instantiate is selected based on the "),ICe=n(qA,"CODE",{});var gGt=s(ICe);eGr=r(gGt,"model_type"),gGt.forEach(t),oGr=r(qA,` property of the config object (either
passed as an argument or loaded from `),qCe=n(qA,"CODE",{});var hGt=s(qCe);rGr=r(hGt,"pretrained_model_name_or_path"),hGt.forEach(t),tGr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jCe=n(qA,"CODE",{});var pGt=s(jCe);aGr=r(pGt,"pretrained_model_name_or_path"),pGt.forEach(t),nGr=r(qA,":"),qA.forEach(t),sGr=i(ni),oe=n(ni,"UL",{});var ae=s(oe);l5=n(ae,"LI",{});var COe=s(l5);DCe=n(COe,"STRONG",{});var _Gt=s(DCe);lGr=r(_Gt,"albert"),_Gt.forEach(t),iGr=r(COe," \u2014 "),dee=n(COe,"A",{href:!0});var uGt=s(dee);dGr=r(uGt,"FlaxAlbertModel"),uGt.forEach(t),cGr=r(COe," (ALBERT model)"),COe.forEach(t),fGr=i(ae),i5=n(ae,"LI",{});var wOe=s(i5);GCe=n(wOe,"STRONG",{});var bGt=s(GCe);mGr=r(bGt,"bart"),bGt.forEach(t),gGr=r(wOe," \u2014 "),cee=n(wOe,"A",{href:!0});var vGt=s(cee);hGr=r(vGt,"FlaxBartModel"),vGt.forEach(t),pGr=r(wOe," (BART model)"),wOe.forEach(t),_Gr=i(ae),d5=n(ae,"LI",{});var AOe=s(d5);OCe=n(AOe,"STRONG",{});var FGt=s(OCe);uGr=r(FGt,"beit"),FGt.forEach(t),bGr=r(AOe," \u2014 "),fee=n(AOe,"A",{href:!0});var TGt=s(fee);vGr=r(TGt,"FlaxBeitModel"),TGt.forEach(t),FGr=r(AOe," (BEiT model)"),AOe.forEach(t),TGr=i(ae),c5=n(ae,"LI",{});var LOe=s(c5);VCe=n(LOe,"STRONG",{});var MGt=s(VCe);MGr=r(MGt,"bert"),MGt.forEach(t),EGr=r(LOe," \u2014 "),mee=n(LOe,"A",{href:!0});var EGt=s(mee);CGr=r(EGt,"FlaxBertModel"),EGt.forEach(t),wGr=r(LOe," (BERT model)"),LOe.forEach(t),AGr=i(ae),f5=n(ae,"LI",{});var yOe=s(f5);XCe=n(yOe,"STRONG",{});var CGt=s(XCe);LGr=r(CGt,"big_bird"),CGt.forEach(t),yGr=r(yOe," \u2014 "),gee=n(yOe,"A",{href:!0});var wGt=s(gee);xGr=r(wGt,"FlaxBigBirdModel"),wGt.forEach(t),$Gr=r(yOe," (BigBird model)"),yOe.forEach(t),kGr=i(ae),m5=n(ae,"LI",{});var xOe=s(m5);zCe=n(xOe,"STRONG",{});var AGt=s(zCe);SGr=r(AGt,"blenderbot"),AGt.forEach(t),RGr=r(xOe," \u2014 "),hee=n(xOe,"A",{href:!0});var LGt=s(hee);PGr=r(LGt,"FlaxBlenderbotModel"),LGt.forEach(t),BGr=r(xOe," (Blenderbot model)"),xOe.forEach(t),NGr=i(ae),g5=n(ae,"LI",{});var $Oe=s(g5);QCe=n($Oe,"STRONG",{});var yGt=s(QCe);IGr=r(yGt,"blenderbot-small"),yGt.forEach(t),qGr=r($Oe," \u2014 "),pee=n($Oe,"A",{href:!0});var xGt=s(pee);jGr=r(xGt,"FlaxBlenderbotSmallModel"),xGt.forEach(t),DGr=r($Oe," (BlenderbotSmall model)"),$Oe.forEach(t),GGr=i(ae),h5=n(ae,"LI",{});var kOe=s(h5);WCe=n(kOe,"STRONG",{});var $Gt=s(WCe);OGr=r($Gt,"clip"),$Gt.forEach(t),VGr=r(kOe," \u2014 "),_ee=n(kOe,"A",{href:!0});var kGt=s(_ee);XGr=r(kGt,"FlaxCLIPModel"),kGt.forEach(t),zGr=r(kOe," (CLIP model)"),kOe.forEach(t),QGr=i(ae),p5=n(ae,"LI",{});var SOe=s(p5);HCe=n(SOe,"STRONG",{});var SGt=s(HCe);WGr=r(SGt,"distilbert"),SGt.forEach(t),HGr=r(SOe," \u2014 "),uee=n(SOe,"A",{href:!0});var RGt=s(uee);UGr=r(RGt,"FlaxDistilBertModel"),RGt.forEach(t),JGr=r(SOe," (DistilBERT model)"),SOe.forEach(t),YGr=i(ae),_5=n(ae,"LI",{});var ROe=s(_5);UCe=n(ROe,"STRONG",{});var PGt=s(UCe);KGr=r(PGt,"electra"),PGt.forEach(t),ZGr=r(ROe," \u2014 "),bee=n(ROe,"A",{href:!0});var BGt=s(bee);eOr=r(BGt,"FlaxElectraModel"),BGt.forEach(t),oOr=r(ROe," (ELECTRA model)"),ROe.forEach(t),rOr=i(ae),u5=n(ae,"LI",{});var POe=s(u5);JCe=n(POe,"STRONG",{});var NGt=s(JCe);tOr=r(NGt,"gpt2"),NGt.forEach(t),aOr=r(POe," \u2014 "),vee=n(POe,"A",{href:!0});var IGt=s(vee);nOr=r(IGt,"FlaxGPT2Model"),IGt.forEach(t),sOr=r(POe," (OpenAI GPT-2 model)"),POe.forEach(t),lOr=i(ae),b5=n(ae,"LI",{});var BOe=s(b5);YCe=n(BOe,"STRONG",{});var qGt=s(YCe);iOr=r(qGt,"gpt_neo"),qGt.forEach(t),dOr=r(BOe," \u2014 "),Fee=n(BOe,"A",{href:!0});var jGt=s(Fee);cOr=r(jGt,"FlaxGPTNeoModel"),jGt.forEach(t),fOr=r(BOe," (GPT Neo model)"),BOe.forEach(t),mOr=i(ae),v5=n(ae,"LI",{});var NOe=s(v5);KCe=n(NOe,"STRONG",{});var DGt=s(KCe);gOr=r(DGt,"gptj"),DGt.forEach(t),hOr=r(NOe," \u2014 "),Tee=n(NOe,"A",{href:!0});var GGt=s(Tee);pOr=r(GGt,"FlaxGPTJModel"),GGt.forEach(t),_Or=r(NOe," (GPT-J model)"),NOe.forEach(t),uOr=i(ae),F5=n(ae,"LI",{});var IOe=s(F5);ZCe=n(IOe,"STRONG",{});var OGt=s(ZCe);bOr=r(OGt,"longt5"),OGt.forEach(t),vOr=r(IOe," \u2014 "),Mee=n(IOe,"A",{href:!0});var VGt=s(Mee);FOr=r(VGt,"FlaxLongT5Model"),VGt.forEach(t),TOr=r(IOe," (LongT5 model)"),IOe.forEach(t),MOr=i(ae),T5=n(ae,"LI",{});var qOe=s(T5);e5e=n(qOe,"STRONG",{});var XGt=s(e5e);EOr=r(XGt,"marian"),XGt.forEach(t),COr=r(qOe," \u2014 "),Eee=n(qOe,"A",{href:!0});var zGt=s(Eee);wOr=r(zGt,"FlaxMarianModel"),zGt.forEach(t),AOr=r(qOe," (Marian model)"),qOe.forEach(t),LOr=i(ae),M5=n(ae,"LI",{});var jOe=s(M5);o5e=n(jOe,"STRONG",{});var QGt=s(o5e);yOr=r(QGt,"mbart"),QGt.forEach(t),xOr=r(jOe," \u2014 "),Cee=n(jOe,"A",{href:!0});var WGt=s(Cee);$Or=r(WGt,"FlaxMBartModel"),WGt.forEach(t),kOr=r(jOe," (mBART model)"),jOe.forEach(t),SOr=i(ae),E5=n(ae,"LI",{});var DOe=s(E5);r5e=n(DOe,"STRONG",{});var HGt=s(r5e);ROr=r(HGt,"mt5"),HGt.forEach(t),POr=r(DOe," \u2014 "),wee=n(DOe,"A",{href:!0});var UGt=s(wee);BOr=r(UGt,"FlaxMT5Model"),UGt.forEach(t),NOr=r(DOe," (MT5 model)"),DOe.forEach(t),IOr=i(ae),C5=n(ae,"LI",{});var GOe=s(C5);t5e=n(GOe,"STRONG",{});var JGt=s(t5e);qOr=r(JGt,"opt"),JGt.forEach(t),jOr=r(GOe," \u2014 "),Aee=n(GOe,"A",{href:!0});var YGt=s(Aee);DOr=r(YGt,"FlaxOPTModel"),YGt.forEach(t),GOr=r(GOe," (OPT model)"),GOe.forEach(t),OOr=i(ae),w5=n(ae,"LI",{});var OOe=s(w5);a5e=n(OOe,"STRONG",{});var KGt=s(a5e);VOr=r(KGt,"pegasus"),KGt.forEach(t),XOr=r(OOe," \u2014 "),Lee=n(OOe,"A",{href:!0});var ZGt=s(Lee);zOr=r(ZGt,"FlaxPegasusModel"),ZGt.forEach(t),QOr=r(OOe," (Pegasus model)"),OOe.forEach(t),WOr=i(ae),A5=n(ae,"LI",{});var VOe=s(A5);n5e=n(VOe,"STRONG",{});var eOt=s(n5e);HOr=r(eOt,"roberta"),eOt.forEach(t),UOr=r(VOe," \u2014 "),yee=n(VOe,"A",{href:!0});var oOt=s(yee);JOr=r(oOt,"FlaxRobertaModel"),oOt.forEach(t),YOr=r(VOe," (RoBERTa model)"),VOe.forEach(t),KOr=i(ae),L5=n(ae,"LI",{});var XOe=s(L5);s5e=n(XOe,"STRONG",{});var rOt=s(s5e);ZOr=r(rOt,"roformer"),rOt.forEach(t),eVr=r(XOe," \u2014 "),xee=n(XOe,"A",{href:!0});var tOt=s(xee);oVr=r(tOt,"FlaxRoFormerModel"),tOt.forEach(t),rVr=r(XOe," (RoFormer model)"),XOe.forEach(t),tVr=i(ae),y5=n(ae,"LI",{});var zOe=s(y5);l5e=n(zOe,"STRONG",{});var aOt=s(l5e);aVr=r(aOt,"t5"),aOt.forEach(t),nVr=r(zOe," \u2014 "),$ee=n(zOe,"A",{href:!0});var nOt=s($ee);sVr=r(nOt,"FlaxT5Model"),nOt.forEach(t),lVr=r(zOe," (T5 model)"),zOe.forEach(t),iVr=i(ae),x5=n(ae,"LI",{});var QOe=s(x5);i5e=n(QOe,"STRONG",{});var sOt=s(i5e);dVr=r(sOt,"vision-text-dual-encoder"),sOt.forEach(t),cVr=r(QOe," \u2014 "),kee=n(QOe,"A",{href:!0});var lOt=s(kee);fVr=r(lOt,"FlaxVisionTextDualEncoderModel"),lOt.forEach(t),mVr=r(QOe," (VisionTextDualEncoder model)"),QOe.forEach(t),gVr=i(ae),$5=n(ae,"LI",{});var WOe=s($5);d5e=n(WOe,"STRONG",{});var iOt=s(d5e);hVr=r(iOt,"vit"),iOt.forEach(t),pVr=r(WOe," \u2014 "),See=n(WOe,"A",{href:!0});var dOt=s(See);_Vr=r(dOt,"FlaxViTModel"),dOt.forEach(t),uVr=r(WOe," (ViT model)"),WOe.forEach(t),bVr=i(ae),k5=n(ae,"LI",{});var HOe=s(k5);c5e=n(HOe,"STRONG",{});var cOt=s(c5e);vVr=r(cOt,"wav2vec2"),cOt.forEach(t),FVr=r(HOe," \u2014 "),Ree=n(HOe,"A",{href:!0});var fOt=s(Ree);TVr=r(fOt,"FlaxWav2Vec2Model"),fOt.forEach(t),MVr=r(HOe," (Wav2Vec2 model)"),HOe.forEach(t),EVr=i(ae),S5=n(ae,"LI",{});var UOe=s(S5);f5e=n(UOe,"STRONG",{});var mOt=s(f5e);CVr=r(mOt,"xglm"),mOt.forEach(t),wVr=r(UOe," \u2014 "),Pee=n(UOe,"A",{href:!0});var gOt=s(Pee);AVr=r(gOt,"FlaxXGLMModel"),gOt.forEach(t),LVr=r(UOe," (XGLM model)"),UOe.forEach(t),yVr=i(ae),R5=n(ae,"LI",{});var JOe=s(R5);m5e=n(JOe,"STRONG",{});var hOt=s(m5e);xVr=r(hOt,"xlm-roberta"),hOt.forEach(t),$Vr=r(JOe," \u2014 "),Bee=n(JOe,"A",{href:!0});var pOt=s(Bee);kVr=r(pOt,"FlaxXLMRobertaModel"),pOt.forEach(t),SVr=r(JOe," (XLM-RoBERTa model)"),JOe.forEach(t),ae.forEach(t),RVr=i(ni),T(P5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),dQe=i(f),Kc=n(f,"H2",{class:!0});var bHe=s(Kc);B5=n(bHe,"A",{id:!0,class:!0,href:!0});var _Ot=s(B5);g5e=n(_Ot,"SPAN",{});var uOt=s(g5e);T(v$.$$.fragment,uOt),uOt.forEach(t),_Ot.forEach(t),PVr=i(bHe),h5e=n(bHe,"SPAN",{});var bOt=s(h5e);BVr=r(bOt,"FlaxAutoModelForCausalLM"),bOt.forEach(t),bHe.forEach(t),cQe=i(f),_r=n(f,"DIV",{class:!0});var si=s(_r);T(F$.$$.fragment,si),NVr=i(si),Zc=n(si,"P",{});var _ae=s(Zc);IVr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nee=n(_ae,"A",{href:!0});var vOt=s(Nee);qVr=r(vOt,"from_pretrained()"),vOt.forEach(t),jVr=r(_ae," class method or the "),Iee=n(_ae,"A",{href:!0});var FOt=s(Iee);DVr=r(FOt,"from_config()"),FOt.forEach(t),GVr=r(_ae,` class
method.`),_ae.forEach(t),OVr=i(si),T$=n(si,"P",{});var vHe=s(T$);VVr=r(vHe,"This class cannot be instantiated directly using "),p5e=n(vHe,"CODE",{});var TOt=s(p5e);XVr=r(TOt,"__init__()"),TOt.forEach(t),zVr=r(vHe," (throws an error)."),vHe.forEach(t),QVr=i(si),Ht=n(si,"DIV",{class:!0});var jA=s(Ht);T(M$.$$.fragment,jA),WVr=i(jA),_5e=n(jA,"P",{});var MOt=s(_5e);HVr=r(MOt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MOt.forEach(t),UVr=i(jA),ef=n(jA,"P",{});var uae=s(ef);JVr=r(uae,`Note:
Loading a model from its configuration file does `),u5e=n(uae,"STRONG",{});var EOt=s(u5e);YVr=r(EOt,"not"),EOt.forEach(t),KVr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=n(uae,"A",{href:!0});var COt=s(qee);ZVr=r(COt,"from_pretrained()"),COt.forEach(t),eXr=r(uae," to load the model weights."),uae.forEach(t),oXr=i(jA),T(N5.$$.fragment,jA),jA.forEach(t),rXr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(E$.$$.fragment,li),tXr=i(li),b5e=n(li,"P",{});var wOt=s(b5e);aXr=r(wOt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wOt.forEach(t),nXr=i(li),Mn=n(li,"P",{});var DA=s(Mn);sXr=r(DA,"The model class to instantiate is selected based on the "),v5e=n(DA,"CODE",{});var AOt=s(v5e);lXr=r(AOt,"model_type"),AOt.forEach(t),iXr=r(DA,` property of the config object (either
passed as an argument or loaded from `),F5e=n(DA,"CODE",{});var LOt=s(F5e);dXr=r(LOt,"pretrained_model_name_or_path"),LOt.forEach(t),cXr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T5e=n(DA,"CODE",{});var yOt=s(T5e);fXr=r(yOt,"pretrained_model_name_or_path"),yOt.forEach(t),mXr=r(DA,":"),DA.forEach(t),gXr=i(li),xe=n(li,"UL",{});var Ie=s(xe);I5=n(Ie,"LI",{});var YOe=s(I5);M5e=n(YOe,"STRONG",{});var xOt=s(M5e);hXr=r(xOt,"bart"),xOt.forEach(t),pXr=r(YOe," \u2014 "),jee=n(YOe,"A",{href:!0});var $Ot=s(jee);_Xr=r($Ot,"FlaxBartForCausalLM"),$Ot.forEach(t),uXr=r(YOe," (BART model)"),YOe.forEach(t),bXr=i(Ie),q5=n(Ie,"LI",{});var KOe=s(q5);E5e=n(KOe,"STRONG",{});var kOt=s(E5e);vXr=r(kOt,"bert"),kOt.forEach(t),FXr=r(KOe," \u2014 "),Dee=n(KOe,"A",{href:!0});var SOt=s(Dee);TXr=r(SOt,"FlaxBertForCausalLM"),SOt.forEach(t),MXr=r(KOe," (BERT model)"),KOe.forEach(t),EXr=i(Ie),j5=n(Ie,"LI",{});var ZOe=s(j5);C5e=n(ZOe,"STRONG",{});var ROt=s(C5e);CXr=r(ROt,"big_bird"),ROt.forEach(t),wXr=r(ZOe," \u2014 "),Gee=n(ZOe,"A",{href:!0});var POt=s(Gee);AXr=r(POt,"FlaxBigBirdForCausalLM"),POt.forEach(t),LXr=r(ZOe," (BigBird model)"),ZOe.forEach(t),yXr=i(Ie),D5=n(Ie,"LI",{});var eVe=s(D5);w5e=n(eVe,"STRONG",{});var BOt=s(w5e);xXr=r(BOt,"electra"),BOt.forEach(t),$Xr=r(eVe," \u2014 "),Oee=n(eVe,"A",{href:!0});var NOt=s(Oee);kXr=r(NOt,"FlaxElectraForCausalLM"),NOt.forEach(t),SXr=r(eVe," (ELECTRA model)"),eVe.forEach(t),RXr=i(Ie),G5=n(Ie,"LI",{});var oVe=s(G5);A5e=n(oVe,"STRONG",{});var IOt=s(A5e);PXr=r(IOt,"gpt2"),IOt.forEach(t),BXr=r(oVe," \u2014 "),Vee=n(oVe,"A",{href:!0});var qOt=s(Vee);NXr=r(qOt,"FlaxGPT2LMHeadModel"),qOt.forEach(t),IXr=r(oVe," (OpenAI GPT-2 model)"),oVe.forEach(t),qXr=i(Ie),O5=n(Ie,"LI",{});var rVe=s(O5);L5e=n(rVe,"STRONG",{});var jOt=s(L5e);jXr=r(jOt,"gpt_neo"),jOt.forEach(t),DXr=r(rVe," \u2014 "),Xee=n(rVe,"A",{href:!0});var DOt=s(Xee);GXr=r(DOt,"FlaxGPTNeoForCausalLM"),DOt.forEach(t),OXr=r(rVe," (GPT Neo model)"),rVe.forEach(t),VXr=i(Ie),V5=n(Ie,"LI",{});var tVe=s(V5);y5e=n(tVe,"STRONG",{});var GOt=s(y5e);XXr=r(GOt,"gptj"),GOt.forEach(t),zXr=r(tVe," \u2014 "),zee=n(tVe,"A",{href:!0});var OOt=s(zee);QXr=r(OOt,"FlaxGPTJForCausalLM"),OOt.forEach(t),WXr=r(tVe," (GPT-J model)"),tVe.forEach(t),HXr=i(Ie),X5=n(Ie,"LI",{});var aVe=s(X5);x5e=n(aVe,"STRONG",{});var VOt=s(x5e);UXr=r(VOt,"opt"),VOt.forEach(t),JXr=r(aVe," \u2014 "),Qee=n(aVe,"A",{href:!0});var XOt=s(Qee);YXr=r(XOt,"FlaxOPTForCausalLM"),XOt.forEach(t),KXr=r(aVe," (OPT model)"),aVe.forEach(t),ZXr=i(Ie),z5=n(Ie,"LI",{});var nVe=s(z5);$5e=n(nVe,"STRONG",{});var zOt=s($5e);ezr=r(zOt,"roberta"),zOt.forEach(t),ozr=r(nVe," \u2014 "),Wee=n(nVe,"A",{href:!0});var QOt=s(Wee);rzr=r(QOt,"FlaxRobertaForCausalLM"),QOt.forEach(t),tzr=r(nVe," (RoBERTa model)"),nVe.forEach(t),azr=i(Ie),Q5=n(Ie,"LI",{});var sVe=s(Q5);k5e=n(sVe,"STRONG",{});var WOt=s(k5e);nzr=r(WOt,"xglm"),WOt.forEach(t),szr=r(sVe," \u2014 "),Hee=n(sVe,"A",{href:!0});var HOt=s(Hee);lzr=r(HOt,"FlaxXGLMForCausalLM"),HOt.forEach(t),izr=r(sVe," (XGLM model)"),sVe.forEach(t),Ie.forEach(t),dzr=i(li),T(W5.$$.fragment,li),li.forEach(t),si.forEach(t),fQe=i(f),of=n(f,"H2",{class:!0});var FHe=s(of);H5=n(FHe,"A",{id:!0,class:!0,href:!0});var UOt=s(H5);S5e=n(UOt,"SPAN",{});var JOt=s(S5e);T(C$.$$.fragment,JOt),JOt.forEach(t),UOt.forEach(t),czr=i(FHe),R5e=n(FHe,"SPAN",{});var YOt=s(R5e);fzr=r(YOt,"FlaxAutoModelForPreTraining"),YOt.forEach(t),FHe.forEach(t),mQe=i(f),ur=n(f,"DIV",{class:!0});var ii=s(ur);T(w$.$$.fragment,ii),mzr=i(ii),rf=n(ii,"P",{});var bae=s(rf);gzr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Uee=n(bae,"A",{href:!0});var KOt=s(Uee);hzr=r(KOt,"from_pretrained()"),KOt.forEach(t),pzr=r(bae," class method or the "),Jee=n(bae,"A",{href:!0});var ZOt=s(Jee);_zr=r(ZOt,"from_config()"),ZOt.forEach(t),uzr=r(bae,` class
method.`),bae.forEach(t),bzr=i(ii),A$=n(ii,"P",{});var THe=s(A$);vzr=r(THe,"This class cannot be instantiated directly using "),P5e=n(THe,"CODE",{});var eVt=s(P5e);Fzr=r(eVt,"__init__()"),eVt.forEach(t),Tzr=r(THe," (throws an error)."),THe.forEach(t),Mzr=i(ii),Ut=n(ii,"DIV",{class:!0});var GA=s(Ut);T(L$.$$.fragment,GA),Ezr=i(GA),B5e=n(GA,"P",{});var oVt=s(B5e);Czr=r(oVt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oVt.forEach(t),wzr=i(GA),tf=n(GA,"P",{});var vae=s(tf);Azr=r(vae,`Note:
Loading a model from its configuration file does `),N5e=n(vae,"STRONG",{});var rVt=s(N5e);Lzr=r(rVt,"not"),rVt.forEach(t),yzr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=n(vae,"A",{href:!0});var tVt=s(Yee);xzr=r(tVt,"from_pretrained()"),tVt.forEach(t),$zr=r(vae," to load the model weights."),vae.forEach(t),kzr=i(GA),T(U5.$$.fragment,GA),GA.forEach(t),Szr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(y$.$$.fragment,di),Rzr=i(di),I5e=n(di,"P",{});var aVt=s(I5e);Pzr=r(aVt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aVt.forEach(t),Bzr=i(di),En=n(di,"P",{});var OA=s(En);Nzr=r(OA,"The model class to instantiate is selected based on the "),q5e=n(OA,"CODE",{});var nVt=s(q5e);Izr=r(nVt,"model_type"),nVt.forEach(t),qzr=r(OA,` property of the config object (either
passed as an argument or loaded from `),j5e=n(OA,"CODE",{});var sVt=s(j5e);jzr=r(sVt,"pretrained_model_name_or_path"),sVt.forEach(t),Dzr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=n(OA,"CODE",{});var lVt=s(D5e);Gzr=r(lVt,"pretrained_model_name_or_path"),lVt.forEach(t),Ozr=r(OA,":"),OA.forEach(t),Vzr=i(di),Ee=n(di,"UL",{});var we=s(Ee);J5=n(we,"LI",{});var lVe=s(J5);G5e=n(lVe,"STRONG",{});var iVt=s(G5e);Xzr=r(iVt,"albert"),iVt.forEach(t),zzr=r(lVe," \u2014 "),Kee=n(lVe,"A",{href:!0});var dVt=s(Kee);Qzr=r(dVt,"FlaxAlbertForPreTraining"),dVt.forEach(t),Wzr=r(lVe," (ALBERT model)"),lVe.forEach(t),Hzr=i(we),Y5=n(we,"LI",{});var iVe=s(Y5);O5e=n(iVe,"STRONG",{});var cVt=s(O5e);Uzr=r(cVt,"bart"),cVt.forEach(t),Jzr=r(iVe," \u2014 "),Zee=n(iVe,"A",{href:!0});var fVt=s(Zee);Yzr=r(fVt,"FlaxBartForConditionalGeneration"),fVt.forEach(t),Kzr=r(iVe," (BART model)"),iVe.forEach(t),Zzr=i(we),K5=n(we,"LI",{});var dVe=s(K5);V5e=n(dVe,"STRONG",{});var mVt=s(V5e);eQr=r(mVt,"bert"),mVt.forEach(t),oQr=r(dVe," \u2014 "),eoe=n(dVe,"A",{href:!0});var gVt=s(eoe);rQr=r(gVt,"FlaxBertForPreTraining"),gVt.forEach(t),tQr=r(dVe," (BERT model)"),dVe.forEach(t),aQr=i(we),Z5=n(we,"LI",{});var cVe=s(Z5);X5e=n(cVe,"STRONG",{});var hVt=s(X5e);nQr=r(hVt,"big_bird"),hVt.forEach(t),sQr=r(cVe," \u2014 "),ooe=n(cVe,"A",{href:!0});var pVt=s(ooe);lQr=r(pVt,"FlaxBigBirdForPreTraining"),pVt.forEach(t),iQr=r(cVe," (BigBird model)"),cVe.forEach(t),dQr=i(we),e3=n(we,"LI",{});var fVe=s(e3);z5e=n(fVe,"STRONG",{});var _Vt=s(z5e);cQr=r(_Vt,"electra"),_Vt.forEach(t),fQr=r(fVe," \u2014 "),roe=n(fVe,"A",{href:!0});var uVt=s(roe);mQr=r(uVt,"FlaxElectraForPreTraining"),uVt.forEach(t),gQr=r(fVe," (ELECTRA model)"),fVe.forEach(t),hQr=i(we),o3=n(we,"LI",{});var mVe=s(o3);Q5e=n(mVe,"STRONG",{});var bVt=s(Q5e);pQr=r(bVt,"longt5"),bVt.forEach(t),_Qr=r(mVe," \u2014 "),toe=n(mVe,"A",{href:!0});var vVt=s(toe);uQr=r(vVt,"FlaxLongT5ForConditionalGeneration"),vVt.forEach(t),bQr=r(mVe," (LongT5 model)"),mVe.forEach(t),vQr=i(we),r3=n(we,"LI",{});var gVe=s(r3);W5e=n(gVe,"STRONG",{});var FVt=s(W5e);FQr=r(FVt,"mbart"),FVt.forEach(t),TQr=r(gVe," \u2014 "),aoe=n(gVe,"A",{href:!0});var TVt=s(aoe);MQr=r(TVt,"FlaxMBartForConditionalGeneration"),TVt.forEach(t),EQr=r(gVe," (mBART model)"),gVe.forEach(t),CQr=i(we),t3=n(we,"LI",{});var hVe=s(t3);H5e=n(hVe,"STRONG",{});var MVt=s(H5e);wQr=r(MVt,"mt5"),MVt.forEach(t),AQr=r(hVe," \u2014 "),noe=n(hVe,"A",{href:!0});var EVt=s(noe);LQr=r(EVt,"FlaxMT5ForConditionalGeneration"),EVt.forEach(t),yQr=r(hVe," (MT5 model)"),hVe.forEach(t),xQr=i(we),a3=n(we,"LI",{});var pVe=s(a3);U5e=n(pVe,"STRONG",{});var CVt=s(U5e);$Qr=r(CVt,"roberta"),CVt.forEach(t),kQr=r(pVe," \u2014 "),soe=n(pVe,"A",{href:!0});var wVt=s(soe);SQr=r(wVt,"FlaxRobertaForMaskedLM"),wVt.forEach(t),RQr=r(pVe," (RoBERTa model)"),pVe.forEach(t),PQr=i(we),n3=n(we,"LI",{});var _Ve=s(n3);J5e=n(_Ve,"STRONG",{});var AVt=s(J5e);BQr=r(AVt,"roformer"),AVt.forEach(t),NQr=r(_Ve," \u2014 "),loe=n(_Ve,"A",{href:!0});var LVt=s(loe);IQr=r(LVt,"FlaxRoFormerForMaskedLM"),LVt.forEach(t),qQr=r(_Ve," (RoFormer model)"),_Ve.forEach(t),jQr=i(we),s3=n(we,"LI",{});var uVe=s(s3);Y5e=n(uVe,"STRONG",{});var yVt=s(Y5e);DQr=r(yVt,"t5"),yVt.forEach(t),GQr=r(uVe," \u2014 "),ioe=n(uVe,"A",{href:!0});var xVt=s(ioe);OQr=r(xVt,"FlaxT5ForConditionalGeneration"),xVt.forEach(t),VQr=r(uVe," (T5 model)"),uVe.forEach(t),XQr=i(we),l3=n(we,"LI",{});var bVe=s(l3);K5e=n(bVe,"STRONG",{});var $Vt=s(K5e);zQr=r($Vt,"wav2vec2"),$Vt.forEach(t),QQr=r(bVe," \u2014 "),doe=n(bVe,"A",{href:!0});var kVt=s(doe);WQr=r(kVt,"FlaxWav2Vec2ForPreTraining"),kVt.forEach(t),HQr=r(bVe," (Wav2Vec2 model)"),bVe.forEach(t),UQr=i(we),i3=n(we,"LI",{});var vVe=s(i3);Z5e=n(vVe,"STRONG",{});var SVt=s(Z5e);JQr=r(SVt,"xlm-roberta"),SVt.forEach(t),YQr=r(vVe," \u2014 "),coe=n(vVe,"A",{href:!0});var RVt=s(coe);KQr=r(RVt,"FlaxXLMRobertaForMaskedLM"),RVt.forEach(t),ZQr=r(vVe," (XLM-RoBERTa model)"),vVe.forEach(t),we.forEach(t),eWr=i(di),T(d3.$$.fragment,di),di.forEach(t),ii.forEach(t),gQe=i(f),af=n(f,"H2",{class:!0});var MHe=s(af);c3=n(MHe,"A",{id:!0,class:!0,href:!0});var PVt=s(c3);e3e=n(PVt,"SPAN",{});var BVt=s(e3e);T(x$.$$.fragment,BVt),BVt.forEach(t),PVt.forEach(t),oWr=i(MHe),o3e=n(MHe,"SPAN",{});var NVt=s(o3e);rWr=r(NVt,"FlaxAutoModelForMaskedLM"),NVt.forEach(t),MHe.forEach(t),hQe=i(f),br=n(f,"DIV",{class:!0});var ci=s(br);T($$.$$.fragment,ci),tWr=i(ci),nf=n(ci,"P",{});var Fae=s(nf);aWr=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),foe=n(Fae,"A",{href:!0});var IVt=s(foe);nWr=r(IVt,"from_pretrained()"),IVt.forEach(t),sWr=r(Fae," class method or the "),moe=n(Fae,"A",{href:!0});var qVt=s(moe);lWr=r(qVt,"from_config()"),qVt.forEach(t),iWr=r(Fae,` class
method.`),Fae.forEach(t),dWr=i(ci),k$=n(ci,"P",{});var EHe=s(k$);cWr=r(EHe,"This class cannot be instantiated directly using "),r3e=n(EHe,"CODE",{});var jVt=s(r3e);fWr=r(jVt,"__init__()"),jVt.forEach(t),mWr=r(EHe," (throws an error)."),EHe.forEach(t),gWr=i(ci),Jt=n(ci,"DIV",{class:!0});var VA=s(Jt);T(S$.$$.fragment,VA),hWr=i(VA),t3e=n(VA,"P",{});var DVt=s(t3e);pWr=r(DVt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),DVt.forEach(t),_Wr=i(VA),sf=n(VA,"P",{});var Tae=s(sf);uWr=r(Tae,`Note:
Loading a model from its configuration file does `),a3e=n(Tae,"STRONG",{});var GVt=s(a3e);bWr=r(GVt,"not"),GVt.forEach(t),vWr=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),goe=n(Tae,"A",{href:!0});var OVt=s(goe);FWr=r(OVt,"from_pretrained()"),OVt.forEach(t),TWr=r(Tae," to load the model weights."),Tae.forEach(t),MWr=i(VA),T(f3.$$.fragment,VA),VA.forEach(t),EWr=i(ci),Qr=n(ci,"DIV",{class:!0});var fi=s(Qr);T(R$.$$.fragment,fi),CWr=i(fi),n3e=n(fi,"P",{});var VVt=s(n3e);wWr=r(VVt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),VVt.forEach(t),AWr=i(fi),Cn=n(fi,"P",{});var XA=s(Cn);LWr=r(XA,"The model class to instantiate is selected based on the "),s3e=n(XA,"CODE",{});var XVt=s(s3e);yWr=r(XVt,"model_type"),XVt.forEach(t),xWr=r(XA,` property of the config object (either
passed as an argument or loaded from `),l3e=n(XA,"CODE",{});var zVt=s(l3e);$Wr=r(zVt,"pretrained_model_name_or_path"),zVt.forEach(t),kWr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=n(XA,"CODE",{});var QVt=s(i3e);SWr=r(QVt,"pretrained_model_name_or_path"),QVt.forEach(t),RWr=r(XA,":"),XA.forEach(t),PWr=i(fi),$e=n(fi,"UL",{});var qe=s($e);m3=n(qe,"LI",{});var FVe=s(m3);d3e=n(FVe,"STRONG",{});var WVt=s(d3e);BWr=r(WVt,"albert"),WVt.forEach(t),NWr=r(FVe," \u2014 "),hoe=n(FVe,"A",{href:!0});var HVt=s(hoe);IWr=r(HVt,"FlaxAlbertForMaskedLM"),HVt.forEach(t),qWr=r(FVe," (ALBERT model)"),FVe.forEach(t),jWr=i(qe),g3=n(qe,"LI",{});var TVe=s(g3);c3e=n(TVe,"STRONG",{});var UVt=s(c3e);DWr=r(UVt,"bart"),UVt.forEach(t),GWr=r(TVe," \u2014 "),poe=n(TVe,"A",{href:!0});var JVt=s(poe);OWr=r(JVt,"FlaxBartForConditionalGeneration"),JVt.forEach(t),VWr=r(TVe," (BART model)"),TVe.forEach(t),XWr=i(qe),h3=n(qe,"LI",{});var MVe=s(h3);f3e=n(MVe,"STRONG",{});var YVt=s(f3e);zWr=r(YVt,"bert"),YVt.forEach(t),QWr=r(MVe," \u2014 "),_oe=n(MVe,"A",{href:!0});var KVt=s(_oe);WWr=r(KVt,"FlaxBertForMaskedLM"),KVt.forEach(t),HWr=r(MVe," (BERT model)"),MVe.forEach(t),UWr=i(qe),p3=n(qe,"LI",{});var EVe=s(p3);m3e=n(EVe,"STRONG",{});var ZVt=s(m3e);JWr=r(ZVt,"big_bird"),ZVt.forEach(t),YWr=r(EVe," \u2014 "),uoe=n(EVe,"A",{href:!0});var eXt=s(uoe);KWr=r(eXt,"FlaxBigBirdForMaskedLM"),eXt.forEach(t),ZWr=r(EVe," (BigBird model)"),EVe.forEach(t),eHr=i(qe),_3=n(qe,"LI",{});var CVe=s(_3);g3e=n(CVe,"STRONG",{});var oXt=s(g3e);oHr=r(oXt,"distilbert"),oXt.forEach(t),rHr=r(CVe," \u2014 "),boe=n(CVe,"A",{href:!0});var rXt=s(boe);tHr=r(rXt,"FlaxDistilBertForMaskedLM"),rXt.forEach(t),aHr=r(CVe," (DistilBERT model)"),CVe.forEach(t),nHr=i(qe),u3=n(qe,"LI",{});var wVe=s(u3);h3e=n(wVe,"STRONG",{});var tXt=s(h3e);sHr=r(tXt,"electra"),tXt.forEach(t),lHr=r(wVe," \u2014 "),voe=n(wVe,"A",{href:!0});var aXt=s(voe);iHr=r(aXt,"FlaxElectraForMaskedLM"),aXt.forEach(t),dHr=r(wVe," (ELECTRA model)"),wVe.forEach(t),cHr=i(qe),b3=n(qe,"LI",{});var AVe=s(b3);p3e=n(AVe,"STRONG",{});var nXt=s(p3e);fHr=r(nXt,"mbart"),nXt.forEach(t),mHr=r(AVe," \u2014 "),Foe=n(AVe,"A",{href:!0});var sXt=s(Foe);gHr=r(sXt,"FlaxMBartForConditionalGeneration"),sXt.forEach(t),hHr=r(AVe," (mBART model)"),AVe.forEach(t),pHr=i(qe),v3=n(qe,"LI",{});var LVe=s(v3);_3e=n(LVe,"STRONG",{});var lXt=s(_3e);_Hr=r(lXt,"roberta"),lXt.forEach(t),uHr=r(LVe," \u2014 "),Toe=n(LVe,"A",{href:!0});var iXt=s(Toe);bHr=r(iXt,"FlaxRobertaForMaskedLM"),iXt.forEach(t),vHr=r(LVe," (RoBERTa model)"),LVe.forEach(t),FHr=i(qe),F3=n(qe,"LI",{});var yVe=s(F3);u3e=n(yVe,"STRONG",{});var dXt=s(u3e);THr=r(dXt,"roformer"),dXt.forEach(t),MHr=r(yVe," \u2014 "),Moe=n(yVe,"A",{href:!0});var cXt=s(Moe);EHr=r(cXt,"FlaxRoFormerForMaskedLM"),cXt.forEach(t),CHr=r(yVe," (RoFormer model)"),yVe.forEach(t),wHr=i(qe),T3=n(qe,"LI",{});var xVe=s(T3);b3e=n(xVe,"STRONG",{});var fXt=s(b3e);AHr=r(fXt,"xlm-roberta"),fXt.forEach(t),LHr=r(xVe," \u2014 "),Eoe=n(xVe,"A",{href:!0});var mXt=s(Eoe);yHr=r(mXt,"FlaxXLMRobertaForMaskedLM"),mXt.forEach(t),xHr=r(xVe," (XLM-RoBERTa model)"),xVe.forEach(t),qe.forEach(t),$Hr=i(fi),T(M3.$$.fragment,fi),fi.forEach(t),ci.forEach(t),pQe=i(f),lf=n(f,"H2",{class:!0});var CHe=s(lf);E3=n(CHe,"A",{id:!0,class:!0,href:!0});var gXt=s(E3);v3e=n(gXt,"SPAN",{});var hXt=s(v3e);T(P$.$$.fragment,hXt),hXt.forEach(t),gXt.forEach(t),kHr=i(CHe),F3e=n(CHe,"SPAN",{});var pXt=s(F3e);SHr=r(pXt,"FlaxAutoModelForSeq2SeqLM"),pXt.forEach(t),CHe.forEach(t),_Qe=i(f),vr=n(f,"DIV",{class:!0});var mi=s(vr);T(B$.$$.fragment,mi),RHr=i(mi),df=n(mi,"P",{});var Mae=s(df);PHr=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Coe=n(Mae,"A",{href:!0});var _Xt=s(Coe);BHr=r(_Xt,"from_pretrained()"),_Xt.forEach(t),NHr=r(Mae," class method or the "),woe=n(Mae,"A",{href:!0});var uXt=s(woe);IHr=r(uXt,"from_config()"),uXt.forEach(t),qHr=r(Mae,` class
method.`),Mae.forEach(t),jHr=i(mi),N$=n(mi,"P",{});var wHe=s(N$);DHr=r(wHe,"This class cannot be instantiated directly using "),T3e=n(wHe,"CODE",{});var bXt=s(T3e);GHr=r(bXt,"__init__()"),bXt.forEach(t),OHr=r(wHe," (throws an error)."),wHe.forEach(t),VHr=i(mi),Yt=n(mi,"DIV",{class:!0});var zA=s(Yt);T(I$.$$.fragment,zA),XHr=i(zA),M3e=n(zA,"P",{});var vXt=s(M3e);zHr=r(vXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vXt.forEach(t),QHr=i(zA),cf=n(zA,"P",{});var Eae=s(cf);WHr=r(Eae,`Note:
Loading a model from its configuration file does `),E3e=n(Eae,"STRONG",{});var FXt=s(E3e);HHr=r(FXt,"not"),FXt.forEach(t),UHr=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=n(Eae,"A",{href:!0});var TXt=s(Aoe);JHr=r(TXt,"from_pretrained()"),TXt.forEach(t),YHr=r(Eae," to load the model weights."),Eae.forEach(t),KHr=i(zA),T(C3.$$.fragment,zA),zA.forEach(t),ZHr=i(mi),Wr=n(mi,"DIV",{class:!0});var gi=s(Wr);T(q$.$$.fragment,gi),eUr=i(gi),C3e=n(gi,"P",{});var MXt=s(C3e);oUr=r(MXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),MXt.forEach(t),rUr=i(gi),wn=n(gi,"P",{});var QA=s(wn);tUr=r(QA,"The model class to instantiate is selected based on the "),w3e=n(QA,"CODE",{});var EXt=s(w3e);aUr=r(EXt,"model_type"),EXt.forEach(t),nUr=r(QA,` property of the config object (either
passed as an argument or loaded from `),A3e=n(QA,"CODE",{});var CXt=s(A3e);sUr=r(CXt,"pretrained_model_name_or_path"),CXt.forEach(t),lUr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L3e=n(QA,"CODE",{});var wXt=s(L3e);iUr=r(wXt,"pretrained_model_name_or_path"),wXt.forEach(t),dUr=r(QA,":"),QA.forEach(t),cUr=i(gi),ke=n(gi,"UL",{});var je=s(ke);w3=n(je,"LI",{});var $Ve=s(w3);y3e=n($Ve,"STRONG",{});var AXt=s(y3e);fUr=r(AXt,"bart"),AXt.forEach(t),mUr=r($Ve," \u2014 "),Loe=n($Ve,"A",{href:!0});var LXt=s(Loe);gUr=r(LXt,"FlaxBartForConditionalGeneration"),LXt.forEach(t),hUr=r($Ve," (BART model)"),$Ve.forEach(t),pUr=i(je),A3=n(je,"LI",{});var kVe=s(A3);x3e=n(kVe,"STRONG",{});var yXt=s(x3e);_Ur=r(yXt,"blenderbot"),yXt.forEach(t),uUr=r(kVe," \u2014 "),yoe=n(kVe,"A",{href:!0});var xXt=s(yoe);bUr=r(xXt,"FlaxBlenderbotForConditionalGeneration"),xXt.forEach(t),vUr=r(kVe," (Blenderbot model)"),kVe.forEach(t),FUr=i(je),L3=n(je,"LI",{});var SVe=s(L3);$3e=n(SVe,"STRONG",{});var $Xt=s($3e);TUr=r($Xt,"blenderbot-small"),$Xt.forEach(t),MUr=r(SVe," \u2014 "),xoe=n(SVe,"A",{href:!0});var kXt=s(xoe);EUr=r(kXt,"FlaxBlenderbotSmallForConditionalGeneration"),kXt.forEach(t),CUr=r(SVe," (BlenderbotSmall model)"),SVe.forEach(t),wUr=i(je),y3=n(je,"LI",{});var RVe=s(y3);k3e=n(RVe,"STRONG",{});var SXt=s(k3e);AUr=r(SXt,"encoder-decoder"),SXt.forEach(t),LUr=r(RVe," \u2014 "),$oe=n(RVe,"A",{href:!0});var RXt=s($oe);yUr=r(RXt,"FlaxEncoderDecoderModel"),RXt.forEach(t),xUr=r(RVe," (Encoder decoder model)"),RVe.forEach(t),$Ur=i(je),x3=n(je,"LI",{});var PVe=s(x3);S3e=n(PVe,"STRONG",{});var PXt=s(S3e);kUr=r(PXt,"longt5"),PXt.forEach(t),SUr=r(PVe," \u2014 "),koe=n(PVe,"A",{href:!0});var BXt=s(koe);RUr=r(BXt,"FlaxLongT5ForConditionalGeneration"),BXt.forEach(t),PUr=r(PVe," (LongT5 model)"),PVe.forEach(t),BUr=i(je),$3=n(je,"LI",{});var BVe=s($3);R3e=n(BVe,"STRONG",{});var NXt=s(R3e);NUr=r(NXt,"marian"),NXt.forEach(t),IUr=r(BVe," \u2014 "),Soe=n(BVe,"A",{href:!0});var IXt=s(Soe);qUr=r(IXt,"FlaxMarianMTModel"),IXt.forEach(t),jUr=r(BVe," (Marian model)"),BVe.forEach(t),DUr=i(je),k3=n(je,"LI",{});var NVe=s(k3);P3e=n(NVe,"STRONG",{});var qXt=s(P3e);GUr=r(qXt,"mbart"),qXt.forEach(t),OUr=r(NVe," \u2014 "),Roe=n(NVe,"A",{href:!0});var jXt=s(Roe);VUr=r(jXt,"FlaxMBartForConditionalGeneration"),jXt.forEach(t),XUr=r(NVe," (mBART model)"),NVe.forEach(t),zUr=i(je),S3=n(je,"LI",{});var IVe=s(S3);B3e=n(IVe,"STRONG",{});var DXt=s(B3e);QUr=r(DXt,"mt5"),DXt.forEach(t),WUr=r(IVe," \u2014 "),Poe=n(IVe,"A",{href:!0});var GXt=s(Poe);HUr=r(GXt,"FlaxMT5ForConditionalGeneration"),GXt.forEach(t),UUr=r(IVe," (MT5 model)"),IVe.forEach(t),JUr=i(je),R3=n(je,"LI",{});var qVe=s(R3);N3e=n(qVe,"STRONG",{});var OXt=s(N3e);YUr=r(OXt,"pegasus"),OXt.forEach(t),KUr=r(qVe," \u2014 "),Boe=n(qVe,"A",{href:!0});var VXt=s(Boe);ZUr=r(VXt,"FlaxPegasusForConditionalGeneration"),VXt.forEach(t),eJr=r(qVe," (Pegasus model)"),qVe.forEach(t),oJr=i(je),P3=n(je,"LI",{});var jVe=s(P3);I3e=n(jVe,"STRONG",{});var XXt=s(I3e);rJr=r(XXt,"t5"),XXt.forEach(t),tJr=r(jVe," \u2014 "),Noe=n(jVe,"A",{href:!0});var zXt=s(Noe);aJr=r(zXt,"FlaxT5ForConditionalGeneration"),zXt.forEach(t),nJr=r(jVe," (T5 model)"),jVe.forEach(t),je.forEach(t),sJr=i(gi),T(B3.$$.fragment,gi),gi.forEach(t),mi.forEach(t),uQe=i(f),ff=n(f,"H2",{class:!0});var AHe=s(ff);N3=n(AHe,"A",{id:!0,class:!0,href:!0});var QXt=s(N3);q3e=n(QXt,"SPAN",{});var WXt=s(q3e);T(j$.$$.fragment,WXt),WXt.forEach(t),QXt.forEach(t),lJr=i(AHe),j3e=n(AHe,"SPAN",{});var HXt=s(j3e);iJr=r(HXt,"FlaxAutoModelForSequenceClassification"),HXt.forEach(t),AHe.forEach(t),bQe=i(f),Fr=n(f,"DIV",{class:!0});var hi=s(Fr);T(D$.$$.fragment,hi),dJr=i(hi),mf=n(hi,"P",{});var Cae=s(mf);cJr=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ioe=n(Cae,"A",{href:!0});var UXt=s(Ioe);fJr=r(UXt,"from_pretrained()"),UXt.forEach(t),mJr=r(Cae," class method or the "),qoe=n(Cae,"A",{href:!0});var JXt=s(qoe);gJr=r(JXt,"from_config()"),JXt.forEach(t),hJr=r(Cae,` class
method.`),Cae.forEach(t),pJr=i(hi),G$=n(hi,"P",{});var LHe=s(G$);_Jr=r(LHe,"This class cannot be instantiated directly using "),D3e=n(LHe,"CODE",{});var YXt=s(D3e);uJr=r(YXt,"__init__()"),YXt.forEach(t),bJr=r(LHe," (throws an error)."),LHe.forEach(t),vJr=i(hi),Kt=n(hi,"DIV",{class:!0});var WA=s(Kt);T(O$.$$.fragment,WA),FJr=i(WA),G3e=n(WA,"P",{});var KXt=s(G3e);TJr=r(KXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KXt.forEach(t),MJr=i(WA),gf=n(WA,"P",{});var wae=s(gf);EJr=r(wae,`Note:
Loading a model from its configuration file does `),O3e=n(wae,"STRONG",{});var ZXt=s(O3e);CJr=r(ZXt,"not"),ZXt.forEach(t),wJr=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=n(wae,"A",{href:!0});var ezt=s(joe);AJr=r(ezt,"from_pretrained()"),ezt.forEach(t),LJr=r(wae," to load the model weights."),wae.forEach(t),yJr=i(WA),T(I3.$$.fragment,WA),WA.forEach(t),xJr=i(hi),Hr=n(hi,"DIV",{class:!0});var pi=s(Hr);T(V$.$$.fragment,pi),$Jr=i(pi),V3e=n(pi,"P",{});var ozt=s(V3e);kJr=r(ozt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ozt.forEach(t),SJr=i(pi),An=n(pi,"P",{});var HA=s(An);RJr=r(HA,"The model class to instantiate is selected based on the "),X3e=n(HA,"CODE",{});var rzt=s(X3e);PJr=r(rzt,"model_type"),rzt.forEach(t),BJr=r(HA,` property of the config object (either
passed as an argument or loaded from `),z3e=n(HA,"CODE",{});var tzt=s(z3e);NJr=r(tzt,"pretrained_model_name_or_path"),tzt.forEach(t),IJr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q3e=n(HA,"CODE",{});var azt=s(Q3e);qJr=r(azt,"pretrained_model_name_or_path"),azt.forEach(t),jJr=r(HA,":"),HA.forEach(t),DJr=i(pi),Se=n(pi,"UL",{});var De=s(Se);q3=n(De,"LI",{});var DVe=s(q3);W3e=n(DVe,"STRONG",{});var nzt=s(W3e);GJr=r(nzt,"albert"),nzt.forEach(t),OJr=r(DVe," \u2014 "),Doe=n(DVe,"A",{href:!0});var szt=s(Doe);VJr=r(szt,"FlaxAlbertForSequenceClassification"),szt.forEach(t),XJr=r(DVe," (ALBERT model)"),DVe.forEach(t),zJr=i(De),j3=n(De,"LI",{});var GVe=s(j3);H3e=n(GVe,"STRONG",{});var lzt=s(H3e);QJr=r(lzt,"bart"),lzt.forEach(t),WJr=r(GVe," \u2014 "),Goe=n(GVe,"A",{href:!0});var izt=s(Goe);HJr=r(izt,"FlaxBartForSequenceClassification"),izt.forEach(t),UJr=r(GVe," (BART model)"),GVe.forEach(t),JJr=i(De),D3=n(De,"LI",{});var OVe=s(D3);U3e=n(OVe,"STRONG",{});var dzt=s(U3e);YJr=r(dzt,"bert"),dzt.forEach(t),KJr=r(OVe," \u2014 "),Ooe=n(OVe,"A",{href:!0});var czt=s(Ooe);ZJr=r(czt,"FlaxBertForSequenceClassification"),czt.forEach(t),eYr=r(OVe," (BERT model)"),OVe.forEach(t),oYr=i(De),G3=n(De,"LI",{});var VVe=s(G3);J3e=n(VVe,"STRONG",{});var fzt=s(J3e);rYr=r(fzt,"big_bird"),fzt.forEach(t),tYr=r(VVe," \u2014 "),Voe=n(VVe,"A",{href:!0});var mzt=s(Voe);aYr=r(mzt,"FlaxBigBirdForSequenceClassification"),mzt.forEach(t),nYr=r(VVe," (BigBird model)"),VVe.forEach(t),sYr=i(De),O3=n(De,"LI",{});var XVe=s(O3);Y3e=n(XVe,"STRONG",{});var gzt=s(Y3e);lYr=r(gzt,"distilbert"),gzt.forEach(t),iYr=r(XVe," \u2014 "),Xoe=n(XVe,"A",{href:!0});var hzt=s(Xoe);dYr=r(hzt,"FlaxDistilBertForSequenceClassification"),hzt.forEach(t),cYr=r(XVe," (DistilBERT model)"),XVe.forEach(t),fYr=i(De),V3=n(De,"LI",{});var zVe=s(V3);K3e=n(zVe,"STRONG",{});var pzt=s(K3e);mYr=r(pzt,"electra"),pzt.forEach(t),gYr=r(zVe," \u2014 "),zoe=n(zVe,"A",{href:!0});var _zt=s(zoe);hYr=r(_zt,"FlaxElectraForSequenceClassification"),_zt.forEach(t),pYr=r(zVe," (ELECTRA model)"),zVe.forEach(t),_Yr=i(De),X3=n(De,"LI",{});var QVe=s(X3);Z3e=n(QVe,"STRONG",{});var uzt=s(Z3e);uYr=r(uzt,"mbart"),uzt.forEach(t),bYr=r(QVe," \u2014 "),Qoe=n(QVe,"A",{href:!0});var bzt=s(Qoe);vYr=r(bzt,"FlaxMBartForSequenceClassification"),bzt.forEach(t),FYr=r(QVe," (mBART model)"),QVe.forEach(t),TYr=i(De),z3=n(De,"LI",{});var WVe=s(z3);e0e=n(WVe,"STRONG",{});var vzt=s(e0e);MYr=r(vzt,"roberta"),vzt.forEach(t),EYr=r(WVe," \u2014 "),Woe=n(WVe,"A",{href:!0});var Fzt=s(Woe);CYr=r(Fzt,"FlaxRobertaForSequenceClassification"),Fzt.forEach(t),wYr=r(WVe," (RoBERTa model)"),WVe.forEach(t),AYr=i(De),Q3=n(De,"LI",{});var HVe=s(Q3);o0e=n(HVe,"STRONG",{});var Tzt=s(o0e);LYr=r(Tzt,"roformer"),Tzt.forEach(t),yYr=r(HVe," \u2014 "),Hoe=n(HVe,"A",{href:!0});var Mzt=s(Hoe);xYr=r(Mzt,"FlaxRoFormerForSequenceClassification"),Mzt.forEach(t),$Yr=r(HVe," (RoFormer model)"),HVe.forEach(t),kYr=i(De),W3=n(De,"LI",{});var UVe=s(W3);r0e=n(UVe,"STRONG",{});var Ezt=s(r0e);SYr=r(Ezt,"xlm-roberta"),Ezt.forEach(t),RYr=r(UVe," \u2014 "),Uoe=n(UVe,"A",{href:!0});var Czt=s(Uoe);PYr=r(Czt,"FlaxXLMRobertaForSequenceClassification"),Czt.forEach(t),BYr=r(UVe," (XLM-RoBERTa model)"),UVe.forEach(t),De.forEach(t),NYr=i(pi),T(H3.$$.fragment,pi),pi.forEach(t),hi.forEach(t),vQe=i(f),hf=n(f,"H2",{class:!0});var yHe=s(hf);U3=n(yHe,"A",{id:!0,class:!0,href:!0});var wzt=s(U3);t0e=n(wzt,"SPAN",{});var Azt=s(t0e);T(X$.$$.fragment,Azt),Azt.forEach(t),wzt.forEach(t),IYr=i(yHe),a0e=n(yHe,"SPAN",{});var Lzt=s(a0e);qYr=r(Lzt,"FlaxAutoModelForQuestionAnswering"),Lzt.forEach(t),yHe.forEach(t),FQe=i(f),Tr=n(f,"DIV",{class:!0});var _i=s(Tr);T(z$.$$.fragment,_i),jYr=i(_i),pf=n(_i,"P",{});var Aae=s(pf);DYr=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Joe=n(Aae,"A",{href:!0});var yzt=s(Joe);GYr=r(yzt,"from_pretrained()"),yzt.forEach(t),OYr=r(Aae," class method or the "),Yoe=n(Aae,"A",{href:!0});var xzt=s(Yoe);VYr=r(xzt,"from_config()"),xzt.forEach(t),XYr=r(Aae,` class
method.`),Aae.forEach(t),zYr=i(_i),Q$=n(_i,"P",{});var xHe=s(Q$);QYr=r(xHe,"This class cannot be instantiated directly using "),n0e=n(xHe,"CODE",{});var $zt=s(n0e);WYr=r($zt,"__init__()"),$zt.forEach(t),HYr=r(xHe," (throws an error)."),xHe.forEach(t),UYr=i(_i),Zt=n(_i,"DIV",{class:!0});var UA=s(Zt);T(W$.$$.fragment,UA),JYr=i(UA),s0e=n(UA,"P",{});var kzt=s(s0e);YYr=r(kzt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kzt.forEach(t),KYr=i(UA),_f=n(UA,"P",{});var Lae=s(_f);ZYr=r(Lae,`Note:
Loading a model from its configuration file does `),l0e=n(Lae,"STRONG",{});var Szt=s(l0e);eKr=r(Szt,"not"),Szt.forEach(t),oKr=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Koe=n(Lae,"A",{href:!0});var Rzt=s(Koe);rKr=r(Rzt,"from_pretrained()"),Rzt.forEach(t),tKr=r(Lae," to load the model weights."),Lae.forEach(t),aKr=i(UA),T(J3.$$.fragment,UA),UA.forEach(t),nKr=i(_i),Ur=n(_i,"DIV",{class:!0});var ui=s(Ur);T(H$.$$.fragment,ui),sKr=i(ui),i0e=n(ui,"P",{});var Pzt=s(i0e);lKr=r(Pzt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pzt.forEach(t),iKr=i(ui),Ln=n(ui,"P",{});var JA=s(Ln);dKr=r(JA,"The model class to instantiate is selected based on the "),d0e=n(JA,"CODE",{});var Bzt=s(d0e);cKr=r(Bzt,"model_type"),Bzt.forEach(t),fKr=r(JA,` property of the config object (either
passed as an argument or loaded from `),c0e=n(JA,"CODE",{});var Nzt=s(c0e);mKr=r(Nzt,"pretrained_model_name_or_path"),Nzt.forEach(t),gKr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=n(JA,"CODE",{});var Izt=s(f0e);hKr=r(Izt,"pretrained_model_name_or_path"),Izt.forEach(t),pKr=r(JA,":"),JA.forEach(t),_Kr=i(ui),Re=n(ui,"UL",{});var Ge=s(Re);Y3=n(Ge,"LI",{});var JVe=s(Y3);m0e=n(JVe,"STRONG",{});var qzt=s(m0e);uKr=r(qzt,"albert"),qzt.forEach(t),bKr=r(JVe," \u2014 "),Zoe=n(JVe,"A",{href:!0});var jzt=s(Zoe);vKr=r(jzt,"FlaxAlbertForQuestionAnswering"),jzt.forEach(t),FKr=r(JVe," (ALBERT model)"),JVe.forEach(t),TKr=i(Ge),K3=n(Ge,"LI",{});var YVe=s(K3);g0e=n(YVe,"STRONG",{});var Dzt=s(g0e);MKr=r(Dzt,"bart"),Dzt.forEach(t),EKr=r(YVe," \u2014 "),ere=n(YVe,"A",{href:!0});var Gzt=s(ere);CKr=r(Gzt,"FlaxBartForQuestionAnswering"),Gzt.forEach(t),wKr=r(YVe," (BART model)"),YVe.forEach(t),AKr=i(Ge),Z3=n(Ge,"LI",{});var KVe=s(Z3);h0e=n(KVe,"STRONG",{});var Ozt=s(h0e);LKr=r(Ozt,"bert"),Ozt.forEach(t),yKr=r(KVe," \u2014 "),ore=n(KVe,"A",{href:!0});var Vzt=s(ore);xKr=r(Vzt,"FlaxBertForQuestionAnswering"),Vzt.forEach(t),$Kr=r(KVe," (BERT model)"),KVe.forEach(t),kKr=i(Ge),e0=n(Ge,"LI",{});var ZVe=s(e0);p0e=n(ZVe,"STRONG",{});var Xzt=s(p0e);SKr=r(Xzt,"big_bird"),Xzt.forEach(t),RKr=r(ZVe," \u2014 "),rre=n(ZVe,"A",{href:!0});var zzt=s(rre);PKr=r(zzt,"FlaxBigBirdForQuestionAnswering"),zzt.forEach(t),BKr=r(ZVe," (BigBird model)"),ZVe.forEach(t),NKr=i(Ge),o0=n(Ge,"LI",{});var eXe=s(o0);_0e=n(eXe,"STRONG",{});var Qzt=s(_0e);IKr=r(Qzt,"distilbert"),Qzt.forEach(t),qKr=r(eXe," \u2014 "),tre=n(eXe,"A",{href:!0});var Wzt=s(tre);jKr=r(Wzt,"FlaxDistilBertForQuestionAnswering"),Wzt.forEach(t),DKr=r(eXe," (DistilBERT model)"),eXe.forEach(t),GKr=i(Ge),r0=n(Ge,"LI",{});var oXe=s(r0);u0e=n(oXe,"STRONG",{});var Hzt=s(u0e);OKr=r(Hzt,"electra"),Hzt.forEach(t),VKr=r(oXe," \u2014 "),are=n(oXe,"A",{href:!0});var Uzt=s(are);XKr=r(Uzt,"FlaxElectraForQuestionAnswering"),Uzt.forEach(t),zKr=r(oXe," (ELECTRA model)"),oXe.forEach(t),QKr=i(Ge),t0=n(Ge,"LI",{});var rXe=s(t0);b0e=n(rXe,"STRONG",{});var Jzt=s(b0e);WKr=r(Jzt,"mbart"),Jzt.forEach(t),HKr=r(rXe," \u2014 "),nre=n(rXe,"A",{href:!0});var Yzt=s(nre);UKr=r(Yzt,"FlaxMBartForQuestionAnswering"),Yzt.forEach(t),JKr=r(rXe," (mBART model)"),rXe.forEach(t),YKr=i(Ge),a0=n(Ge,"LI",{});var tXe=s(a0);v0e=n(tXe,"STRONG",{});var Kzt=s(v0e);KKr=r(Kzt,"roberta"),Kzt.forEach(t),ZKr=r(tXe," \u2014 "),sre=n(tXe,"A",{href:!0});var Zzt=s(sre);eZr=r(Zzt,"FlaxRobertaForQuestionAnswering"),Zzt.forEach(t),oZr=r(tXe," (RoBERTa model)"),tXe.forEach(t),rZr=i(Ge),n0=n(Ge,"LI",{});var aXe=s(n0);F0e=n(aXe,"STRONG",{});var eQt=s(F0e);tZr=r(eQt,"roformer"),eQt.forEach(t),aZr=r(aXe," \u2014 "),lre=n(aXe,"A",{href:!0});var oQt=s(lre);nZr=r(oQt,"FlaxRoFormerForQuestionAnswering"),oQt.forEach(t),sZr=r(aXe," (RoFormer model)"),aXe.forEach(t),lZr=i(Ge),s0=n(Ge,"LI",{});var nXe=s(s0);T0e=n(nXe,"STRONG",{});var rQt=s(T0e);iZr=r(rQt,"xlm-roberta"),rQt.forEach(t),dZr=r(nXe," \u2014 "),ire=n(nXe,"A",{href:!0});var tQt=s(ire);cZr=r(tQt,"FlaxXLMRobertaForQuestionAnswering"),tQt.forEach(t),fZr=r(nXe," (XLM-RoBERTa model)"),nXe.forEach(t),Ge.forEach(t),mZr=i(ui),T(l0.$$.fragment,ui),ui.forEach(t),_i.forEach(t),TQe=i(f),uf=n(f,"H2",{class:!0});var $He=s(uf);i0=n($He,"A",{id:!0,class:!0,href:!0});var aQt=s(i0);M0e=n(aQt,"SPAN",{});var nQt=s(M0e);T(U$.$$.fragment,nQt),nQt.forEach(t),aQt.forEach(t),gZr=i($He),E0e=n($He,"SPAN",{});var sQt=s(E0e);hZr=r(sQt,"FlaxAutoModelForTokenClassification"),sQt.forEach(t),$He.forEach(t),MQe=i(f),Mr=n(f,"DIV",{class:!0});var bi=s(Mr);T(J$.$$.fragment,bi),pZr=i(bi),bf=n(bi,"P",{});var yae=s(bf);_Zr=r(yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dre=n(yae,"A",{href:!0});var lQt=s(dre);uZr=r(lQt,"from_pretrained()"),lQt.forEach(t),bZr=r(yae," class method or the "),cre=n(yae,"A",{href:!0});var iQt=s(cre);vZr=r(iQt,"from_config()"),iQt.forEach(t),FZr=r(yae,` class
method.`),yae.forEach(t),TZr=i(bi),Y$=n(bi,"P",{});var kHe=s(Y$);MZr=r(kHe,"This class cannot be instantiated directly using "),C0e=n(kHe,"CODE",{});var dQt=s(C0e);EZr=r(dQt,"__init__()"),dQt.forEach(t),CZr=r(kHe," (throws an error)."),kHe.forEach(t),wZr=i(bi),ea=n(bi,"DIV",{class:!0});var YA=s(ea);T(K$.$$.fragment,YA),AZr=i(YA),w0e=n(YA,"P",{});var cQt=s(w0e);LZr=r(cQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cQt.forEach(t),yZr=i(YA),vf=n(YA,"P",{});var xae=s(vf);xZr=r(xae,`Note:
Loading a model from its configuration file does `),A0e=n(xae,"STRONG",{});var fQt=s(A0e);$Zr=r(fQt,"not"),fQt.forEach(t),kZr=r(xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=n(xae,"A",{href:!0});var mQt=s(fre);SZr=r(mQt,"from_pretrained()"),mQt.forEach(t),RZr=r(xae," to load the model weights."),xae.forEach(t),PZr=i(YA),T(d0.$$.fragment,YA),YA.forEach(t),BZr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(Z$.$$.fragment,vi),NZr=i(vi),L0e=n(vi,"P",{});var gQt=s(L0e);IZr=r(gQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gQt.forEach(t),qZr=i(vi),yn=n(vi,"P",{});var KA=s(yn);jZr=r(KA,"The model class to instantiate is selected based on the "),y0e=n(KA,"CODE",{});var hQt=s(y0e);DZr=r(hQt,"model_type"),hQt.forEach(t),GZr=r(KA,` property of the config object (either
passed as an argument or loaded from `),x0e=n(KA,"CODE",{});var pQt=s(x0e);OZr=r(pQt,"pretrained_model_name_or_path"),pQt.forEach(t),VZr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$0e=n(KA,"CODE",{});var _Qt=s($0e);XZr=r(_Qt,"pretrained_model_name_or_path"),_Qt.forEach(t),zZr=r(KA,":"),KA.forEach(t),QZr=i(vi),Ve=n(vi,"UL",{});var Mo=s(Ve);c0=n(Mo,"LI",{});var sXe=s(c0);k0e=n(sXe,"STRONG",{});var uQt=s(k0e);WZr=r(uQt,"albert"),uQt.forEach(t),HZr=r(sXe," \u2014 "),mre=n(sXe,"A",{href:!0});var bQt=s(mre);UZr=r(bQt,"FlaxAlbertForTokenClassification"),bQt.forEach(t),JZr=r(sXe," (ALBERT model)"),sXe.forEach(t),YZr=i(Mo),f0=n(Mo,"LI",{});var lXe=s(f0);S0e=n(lXe,"STRONG",{});var vQt=s(S0e);KZr=r(vQt,"bert"),vQt.forEach(t),ZZr=r(lXe," \u2014 "),gre=n(lXe,"A",{href:!0});var FQt=s(gre);eet=r(FQt,"FlaxBertForTokenClassification"),FQt.forEach(t),oet=r(lXe," (BERT model)"),lXe.forEach(t),ret=i(Mo),m0=n(Mo,"LI",{});var iXe=s(m0);R0e=n(iXe,"STRONG",{});var TQt=s(R0e);tet=r(TQt,"big_bird"),TQt.forEach(t),aet=r(iXe," \u2014 "),hre=n(iXe,"A",{href:!0});var MQt=s(hre);net=r(MQt,"FlaxBigBirdForTokenClassification"),MQt.forEach(t),set=r(iXe," (BigBird model)"),iXe.forEach(t),iet=i(Mo),g0=n(Mo,"LI",{});var dXe=s(g0);P0e=n(dXe,"STRONG",{});var EQt=s(P0e);det=r(EQt,"distilbert"),EQt.forEach(t),cet=r(dXe," \u2014 "),pre=n(dXe,"A",{href:!0});var CQt=s(pre);fet=r(CQt,"FlaxDistilBertForTokenClassification"),CQt.forEach(t),met=r(dXe," (DistilBERT model)"),dXe.forEach(t),get=i(Mo),h0=n(Mo,"LI",{});var cXe=s(h0);B0e=n(cXe,"STRONG",{});var wQt=s(B0e);het=r(wQt,"electra"),wQt.forEach(t),pet=r(cXe," \u2014 "),_re=n(cXe,"A",{href:!0});var AQt=s(_re);_et=r(AQt,"FlaxElectraForTokenClassification"),AQt.forEach(t),uet=r(cXe," (ELECTRA model)"),cXe.forEach(t),bet=i(Mo),p0=n(Mo,"LI",{});var fXe=s(p0);N0e=n(fXe,"STRONG",{});var LQt=s(N0e);vet=r(LQt,"roberta"),LQt.forEach(t),Fet=r(fXe," \u2014 "),ure=n(fXe,"A",{href:!0});var yQt=s(ure);Tet=r(yQt,"FlaxRobertaForTokenClassification"),yQt.forEach(t),Met=r(fXe," (RoBERTa model)"),fXe.forEach(t),Eet=i(Mo),_0=n(Mo,"LI",{});var mXe=s(_0);I0e=n(mXe,"STRONG",{});var xQt=s(I0e);Cet=r(xQt,"roformer"),xQt.forEach(t),wet=r(mXe," \u2014 "),bre=n(mXe,"A",{href:!0});var $Qt=s(bre);Aet=r($Qt,"FlaxRoFormerForTokenClassification"),$Qt.forEach(t),Let=r(mXe," (RoFormer model)"),mXe.forEach(t),yet=i(Mo),u0=n(Mo,"LI",{});var gXe=s(u0);q0e=n(gXe,"STRONG",{});var kQt=s(q0e);xet=r(kQt,"xlm-roberta"),kQt.forEach(t),$et=r(gXe," \u2014 "),vre=n(gXe,"A",{href:!0});var SQt=s(vre);ket=r(SQt,"FlaxXLMRobertaForTokenClassification"),SQt.forEach(t),Set=r(gXe," (XLM-RoBERTa model)"),gXe.forEach(t),Mo.forEach(t),Ret=i(vi),T(b0.$$.fragment,vi),vi.forEach(t),bi.forEach(t),EQe=i(f),Ff=n(f,"H2",{class:!0});var SHe=s(Ff);v0=n(SHe,"A",{id:!0,class:!0,href:!0});var RQt=s(v0);j0e=n(RQt,"SPAN",{});var PQt=s(j0e);T(ek.$$.fragment,PQt),PQt.forEach(t),RQt.forEach(t),Pet=i(SHe),D0e=n(SHe,"SPAN",{});var BQt=s(D0e);Bet=r(BQt,"FlaxAutoModelForMultipleChoice"),BQt.forEach(t),SHe.forEach(t),CQe=i(f),Er=n(f,"DIV",{class:!0});var Fi=s(Er);T(ok.$$.fragment,Fi),Net=i(Fi),Tf=n(Fi,"P",{});var $ae=s(Tf);Iet=r($ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Fre=n($ae,"A",{href:!0});var NQt=s(Fre);qet=r(NQt,"from_pretrained()"),NQt.forEach(t),jet=r($ae," class method or the "),Tre=n($ae,"A",{href:!0});var IQt=s(Tre);Det=r(IQt,"from_config()"),IQt.forEach(t),Get=r($ae,` class
method.`),$ae.forEach(t),Oet=i(Fi),rk=n(Fi,"P",{});var RHe=s(rk);Vet=r(RHe,"This class cannot be instantiated directly using "),G0e=n(RHe,"CODE",{});var qQt=s(G0e);Xet=r(qQt,"__init__()"),qQt.forEach(t),zet=r(RHe," (throws an error)."),RHe.forEach(t),Qet=i(Fi),oa=n(Fi,"DIV",{class:!0});var ZA=s(oa);T(tk.$$.fragment,ZA),Wet=i(ZA),O0e=n(ZA,"P",{});var jQt=s(O0e);Het=r(jQt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jQt.forEach(t),Uet=i(ZA),Mf=n(ZA,"P",{});var kae=s(Mf);Jet=r(kae,`Note:
Loading a model from its configuration file does `),V0e=n(kae,"STRONG",{});var DQt=s(V0e);Yet=r(DQt,"not"),DQt.forEach(t),Ket=r(kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=n(kae,"A",{href:!0});var GQt=s(Mre);Zet=r(GQt,"from_pretrained()"),GQt.forEach(t),eot=r(kae," to load the model weights."),kae.forEach(t),oot=i(ZA),T(F0.$$.fragment,ZA),ZA.forEach(t),rot=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(ak.$$.fragment,Ti),tot=i(Ti),X0e=n(Ti,"P",{});var OQt=s(X0e);aot=r(OQt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),OQt.forEach(t),not=i(Ti),xn=n(Ti,"P",{});var eL=s(xn);sot=r(eL,"The model class to instantiate is selected based on the "),z0e=n(eL,"CODE",{});var VQt=s(z0e);lot=r(VQt,"model_type"),VQt.forEach(t),iot=r(eL,` property of the config object (either
passed as an argument or loaded from `),Q0e=n(eL,"CODE",{});var XQt=s(Q0e);dot=r(XQt,"pretrained_model_name_or_path"),XQt.forEach(t),cot=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W0e=n(eL,"CODE",{});var zQt=s(W0e);fot=r(zQt,"pretrained_model_name_or_path"),zQt.forEach(t),mot=r(eL,":"),eL.forEach(t),got=i(Ti),Xe=n(Ti,"UL",{});var Eo=s(Xe);T0=n(Eo,"LI",{});var hXe=s(T0);H0e=n(hXe,"STRONG",{});var QQt=s(H0e);hot=r(QQt,"albert"),QQt.forEach(t),pot=r(hXe," \u2014 "),Ere=n(hXe,"A",{href:!0});var WQt=s(Ere);_ot=r(WQt,"FlaxAlbertForMultipleChoice"),WQt.forEach(t),uot=r(hXe," (ALBERT model)"),hXe.forEach(t),bot=i(Eo),M0=n(Eo,"LI",{});var pXe=s(M0);U0e=n(pXe,"STRONG",{});var HQt=s(U0e);vot=r(HQt,"bert"),HQt.forEach(t),Fot=r(pXe," \u2014 "),Cre=n(pXe,"A",{href:!0});var UQt=s(Cre);Tot=r(UQt,"FlaxBertForMultipleChoice"),UQt.forEach(t),Mot=r(pXe," (BERT model)"),pXe.forEach(t),Eot=i(Eo),E0=n(Eo,"LI",{});var _Xe=s(E0);J0e=n(_Xe,"STRONG",{});var JQt=s(J0e);Cot=r(JQt,"big_bird"),JQt.forEach(t),wot=r(_Xe," \u2014 "),wre=n(_Xe,"A",{href:!0});var YQt=s(wre);Aot=r(YQt,"FlaxBigBirdForMultipleChoice"),YQt.forEach(t),Lot=r(_Xe," (BigBird model)"),_Xe.forEach(t),yot=i(Eo),C0=n(Eo,"LI",{});var uXe=s(C0);Y0e=n(uXe,"STRONG",{});var KQt=s(Y0e);xot=r(KQt,"distilbert"),KQt.forEach(t),$ot=r(uXe," \u2014 "),Are=n(uXe,"A",{href:!0});var ZQt=s(Are);kot=r(ZQt,"FlaxDistilBertForMultipleChoice"),ZQt.forEach(t),Sot=r(uXe," (DistilBERT model)"),uXe.forEach(t),Rot=i(Eo),w0=n(Eo,"LI",{});var bXe=s(w0);K0e=n(bXe,"STRONG",{});var eWt=s(K0e);Pot=r(eWt,"electra"),eWt.forEach(t),Bot=r(bXe," \u2014 "),Lre=n(bXe,"A",{href:!0});var oWt=s(Lre);Not=r(oWt,"FlaxElectraForMultipleChoice"),oWt.forEach(t),Iot=r(bXe," (ELECTRA model)"),bXe.forEach(t),qot=i(Eo),A0=n(Eo,"LI",{});var vXe=s(A0);Z0e=n(vXe,"STRONG",{});var rWt=s(Z0e);jot=r(rWt,"roberta"),rWt.forEach(t),Dot=r(vXe," \u2014 "),yre=n(vXe,"A",{href:!0});var tWt=s(yre);Got=r(tWt,"FlaxRobertaForMultipleChoice"),tWt.forEach(t),Oot=r(vXe," (RoBERTa model)"),vXe.forEach(t),Vot=i(Eo),L0=n(Eo,"LI",{});var FXe=s(L0);ewe=n(FXe,"STRONG",{});var aWt=s(ewe);Xot=r(aWt,"roformer"),aWt.forEach(t),zot=r(FXe," \u2014 "),xre=n(FXe,"A",{href:!0});var nWt=s(xre);Qot=r(nWt,"FlaxRoFormerForMultipleChoice"),nWt.forEach(t),Wot=r(FXe," (RoFormer model)"),FXe.forEach(t),Hot=i(Eo),y0=n(Eo,"LI",{});var TXe=s(y0);owe=n(TXe,"STRONG",{});var sWt=s(owe);Uot=r(sWt,"xlm-roberta"),sWt.forEach(t),Jot=r(TXe," \u2014 "),$re=n(TXe,"A",{href:!0});var lWt=s($re);Yot=r(lWt,"FlaxXLMRobertaForMultipleChoice"),lWt.forEach(t),Kot=r(TXe," (XLM-RoBERTa model)"),TXe.forEach(t),Eo.forEach(t),Zot=i(Ti),T(x0.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),wQe=i(f),Ef=n(f,"H2",{class:!0});var PHe=s(Ef);$0=n(PHe,"A",{id:!0,class:!0,href:!0});var iWt=s($0);rwe=n(iWt,"SPAN",{});var dWt=s(rwe);T(nk.$$.fragment,dWt),dWt.forEach(t),iWt.forEach(t),ert=i(PHe),twe=n(PHe,"SPAN",{});var cWt=s(twe);ort=r(cWt,"FlaxAutoModelForNextSentencePrediction"),cWt.forEach(t),PHe.forEach(t),AQe=i(f),Cr=n(f,"DIV",{class:!0});var Mi=s(Cr);T(sk.$$.fragment,Mi),rrt=i(Mi),Cf=n(Mi,"P",{});var Sae=s(Cf);trt=r(Sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kre=n(Sae,"A",{href:!0});var fWt=s(kre);art=r(fWt,"from_pretrained()"),fWt.forEach(t),nrt=r(Sae," class method or the "),Sre=n(Sae,"A",{href:!0});var mWt=s(Sre);srt=r(mWt,"from_config()"),mWt.forEach(t),lrt=r(Sae,` class
method.`),Sae.forEach(t),irt=i(Mi),lk=n(Mi,"P",{});var BHe=s(lk);drt=r(BHe,"This class cannot be instantiated directly using "),awe=n(BHe,"CODE",{});var gWt=s(awe);crt=r(gWt,"__init__()"),gWt.forEach(t),frt=r(BHe," (throws an error)."),BHe.forEach(t),mrt=i(Mi),ra=n(Mi,"DIV",{class:!0});var oL=s(ra);T(ik.$$.fragment,oL),grt=i(oL),nwe=n(oL,"P",{});var hWt=s(nwe);hrt=r(hWt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hWt.forEach(t),prt=i(oL),wf=n(oL,"P",{});var Rae=s(wf);_rt=r(Rae,`Note:
Loading a model from its configuration file does `),swe=n(Rae,"STRONG",{});var pWt=s(swe);urt=r(pWt,"not"),pWt.forEach(t),brt=r(Rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rre=n(Rae,"A",{href:!0});var _Wt=s(Rre);vrt=r(_Wt,"from_pretrained()"),_Wt.forEach(t),Frt=r(Rae," to load the model weights."),Rae.forEach(t),Trt=i(oL),T(k0.$$.fragment,oL),oL.forEach(t),Mrt=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(dk.$$.fragment,Ei),Ert=i(Ei),lwe=n(Ei,"P",{});var uWt=s(lwe);Crt=r(uWt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uWt.forEach(t),wrt=i(Ei),$n=n(Ei,"P",{});var rL=s($n);Art=r(rL,"The model class to instantiate is selected based on the "),iwe=n(rL,"CODE",{});var bWt=s(iwe);Lrt=r(bWt,"model_type"),bWt.forEach(t),yrt=r(rL,` property of the config object (either
passed as an argument or loaded from `),dwe=n(rL,"CODE",{});var vWt=s(dwe);xrt=r(vWt,"pretrained_model_name_or_path"),vWt.forEach(t),$rt=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cwe=n(rL,"CODE",{});var FWt=s(cwe);krt=r(FWt,"pretrained_model_name_or_path"),FWt.forEach(t),Srt=r(rL,":"),rL.forEach(t),Rrt=i(Ei),fwe=n(Ei,"UL",{});var TWt=s(fwe);S0=n(TWt,"LI",{});var MXe=s(S0);mwe=n(MXe,"STRONG",{});var MWt=s(mwe);Prt=r(MWt,"bert"),MWt.forEach(t),Brt=r(MXe," \u2014 "),Pre=n(MXe,"A",{href:!0});var EWt=s(Pre);Nrt=r(EWt,"FlaxBertForNextSentencePrediction"),EWt.forEach(t),Irt=r(MXe," (BERT model)"),MXe.forEach(t),TWt.forEach(t),qrt=i(Ei),T(R0.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),LQe=i(f),Af=n(f,"H2",{class:!0});var NHe=s(Af);P0=n(NHe,"A",{id:!0,class:!0,href:!0});var CWt=s(P0);gwe=n(CWt,"SPAN",{});var wWt=s(gwe);T(ck.$$.fragment,wWt),wWt.forEach(t),CWt.forEach(t),jrt=i(NHe),hwe=n(NHe,"SPAN",{});var AWt=s(hwe);Drt=r(AWt,"FlaxAutoModelForImageClassification"),AWt.forEach(t),NHe.forEach(t),yQe=i(f),wr=n(f,"DIV",{class:!0});var Ci=s(wr);T(fk.$$.fragment,Ci),Grt=i(Ci),Lf=n(Ci,"P",{});var Pae=s(Lf);Ort=r(Pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Bre=n(Pae,"A",{href:!0});var LWt=s(Bre);Vrt=r(LWt,"from_pretrained()"),LWt.forEach(t),Xrt=r(Pae," class method or the "),Nre=n(Pae,"A",{href:!0});var yWt=s(Nre);zrt=r(yWt,"from_config()"),yWt.forEach(t),Qrt=r(Pae,` class
method.`),Pae.forEach(t),Wrt=i(Ci),mk=n(Ci,"P",{});var IHe=s(mk);Hrt=r(IHe,"This class cannot be instantiated directly using "),pwe=n(IHe,"CODE",{});var xWt=s(pwe);Urt=r(xWt,"__init__()"),xWt.forEach(t),Jrt=r(IHe," (throws an error)."),IHe.forEach(t),Yrt=i(Ci),ta=n(Ci,"DIV",{class:!0});var tL=s(ta);T(gk.$$.fragment,tL),Krt=i(tL),_we=n(tL,"P",{});var $Wt=s(_we);Zrt=r($Wt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$Wt.forEach(t),ett=i(tL),yf=n(tL,"P",{});var Bae=s(yf);ott=r(Bae,`Note:
Loading a model from its configuration file does `),uwe=n(Bae,"STRONG",{});var kWt=s(uwe);rtt=r(kWt,"not"),kWt.forEach(t),ttt=r(Bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ire=n(Bae,"A",{href:!0});var SWt=s(Ire);att=r(SWt,"from_pretrained()"),SWt.forEach(t),ntt=r(Bae," to load the model weights."),Bae.forEach(t),stt=i(tL),T(B0.$$.fragment,tL),tL.forEach(t),ltt=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(hk.$$.fragment,wi),itt=i(wi),bwe=n(wi,"P",{});var RWt=s(bwe);dtt=r(RWt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RWt.forEach(t),ctt=i(wi),kn=n(wi,"P",{});var aL=s(kn);ftt=r(aL,"The model class to instantiate is selected based on the "),vwe=n(aL,"CODE",{});var PWt=s(vwe);mtt=r(PWt,"model_type"),PWt.forEach(t),gtt=r(aL,` property of the config object (either
passed as an argument or loaded from `),Fwe=n(aL,"CODE",{});var BWt=s(Fwe);htt=r(BWt,"pretrained_model_name_or_path"),BWt.forEach(t),ptt=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Twe=n(aL,"CODE",{});var NWt=s(Twe);_tt=r(NWt,"pretrained_model_name_or_path"),NWt.forEach(t),utt=r(aL,":"),aL.forEach(t),btt=i(wi),pk=n(wi,"UL",{});var qHe=s(pk);N0=n(qHe,"LI",{});var EXe=s(N0);Mwe=n(EXe,"STRONG",{});var IWt=s(Mwe);vtt=r(IWt,"beit"),IWt.forEach(t),Ftt=r(EXe," \u2014 "),qre=n(EXe,"A",{href:!0});var qWt=s(qre);Ttt=r(qWt,"FlaxBeitForImageClassification"),qWt.forEach(t),Mtt=r(EXe," (BEiT model)"),EXe.forEach(t),Ett=i(qHe),I0=n(qHe,"LI",{});var CXe=s(I0);Ewe=n(CXe,"STRONG",{});var jWt=s(Ewe);Ctt=r(jWt,"vit"),jWt.forEach(t),wtt=r(CXe," \u2014 "),jre=n(CXe,"A",{href:!0});var DWt=s(jre);Att=r(DWt,"FlaxViTForImageClassification"),DWt.forEach(t),Ltt=r(CXe," (ViT model)"),CXe.forEach(t),qHe.forEach(t),ytt=i(wi),T(q0.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),xQe=i(f),xf=n(f,"H2",{class:!0});var jHe=s(xf);j0=n(jHe,"A",{id:!0,class:!0,href:!0});var GWt=s(j0);Cwe=n(GWt,"SPAN",{});var OWt=s(Cwe);T(_k.$$.fragment,OWt),OWt.forEach(t),GWt.forEach(t),xtt=i(jHe),wwe=n(jHe,"SPAN",{});var VWt=s(wwe);$tt=r(VWt,"FlaxAutoModelForVision2Seq"),VWt.forEach(t),jHe.forEach(t),$Qe=i(f),Ar=n(f,"DIV",{class:!0});var Ai=s(Ar);T(uk.$$.fragment,Ai),ktt=i(Ai),$f=n(Ai,"P",{});var Nae=s($f);Stt=r(Nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Dre=n(Nae,"A",{href:!0});var XWt=s(Dre);Rtt=r(XWt,"from_pretrained()"),XWt.forEach(t),Ptt=r(Nae," class method or the "),Gre=n(Nae,"A",{href:!0});var zWt=s(Gre);Btt=r(zWt,"from_config()"),zWt.forEach(t),Ntt=r(Nae,` class
method.`),Nae.forEach(t),Itt=i(Ai),bk=n(Ai,"P",{});var DHe=s(bk);qtt=r(DHe,"This class cannot be instantiated directly using "),Awe=n(DHe,"CODE",{});var QWt=s(Awe);jtt=r(QWt,"__init__()"),QWt.forEach(t),Dtt=r(DHe," (throws an error)."),DHe.forEach(t),Gtt=i(Ai),aa=n(Ai,"DIV",{class:!0});var nL=s(aa);T(vk.$$.fragment,nL),Ott=i(nL),Lwe=n(nL,"P",{});var WWt=s(Lwe);Vtt=r(WWt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),WWt.forEach(t),Xtt=i(nL),kf=n(nL,"P",{});var Iae=s(kf);ztt=r(Iae,`Note:
Loading a model from its configuration file does `),ywe=n(Iae,"STRONG",{});var HWt=s(ywe);Qtt=r(HWt,"not"),HWt.forEach(t),Wtt=r(Iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ore=n(Iae,"A",{href:!0});var UWt=s(Ore);Htt=r(UWt,"from_pretrained()"),UWt.forEach(t),Utt=r(Iae," to load the model weights."),Iae.forEach(t),Jtt=i(nL),T(D0.$$.fragment,nL),nL.forEach(t),Ytt=i(Ai),et=n(Ai,"DIV",{class:!0});var Li=s(et);T(Fk.$$.fragment,Li),Ktt=i(Li),xwe=n(Li,"P",{});var JWt=s(xwe);Ztt=r(JWt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),JWt.forEach(t),eat=i(Li),Sn=n(Li,"P",{});var sL=s(Sn);oat=r(sL,"The model class to instantiate is selected based on the "),$we=n(sL,"CODE",{});var YWt=s($we);rat=r(YWt,"model_type"),YWt.forEach(t),tat=r(sL,` property of the config object (either
passed as an argument or loaded from `),kwe=n(sL,"CODE",{});var KWt=s(kwe);aat=r(KWt,"pretrained_model_name_or_path"),KWt.forEach(t),nat=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Swe=n(sL,"CODE",{});var ZWt=s(Swe);sat=r(ZWt,"pretrained_model_name_or_path"),ZWt.forEach(t),lat=r(sL,":"),sL.forEach(t),iat=i(Li),Rwe=n(Li,"UL",{});var eHt=s(Rwe);G0=n(eHt,"LI",{});var wXe=s(G0);Pwe=n(wXe,"STRONG",{});var oHt=s(Pwe);dat=r(oHt,"vision-encoder-decoder"),oHt.forEach(t),cat=r(wXe," \u2014 "),Vre=n(wXe,"A",{href:!0});var rHt=s(Vre);fat=r(rHt,"FlaxVisionEncoderDecoderModel"),rHt.forEach(t),mat=r(wXe," (Vision Encoder decoder model)"),wXe.forEach(t),eHt.forEach(t),gat=i(Li),T(O0.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(iJt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoTokenizer"),c(Pi,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel"),c(jf,"id","extending-the-auto-classes"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#extending-the-auto-classes"),c(Bi,"class","relative group"),c(Gf,"id","transformers.AutoConfig"),c(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gf,"href","#transformers.AutoConfig"),c(Ni,"class","relative group"),c(US,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(JS,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig"),c(YS,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig"),c(KS,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig"),c(ZS,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig"),c(eR,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(oR,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig"),c(rR,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(tR,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(aR,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(nR,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig"),c(sR,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig"),c(lR,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig"),c(iR,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig"),c(dR,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig"),c(cR,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig"),c(fR,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig"),c(mR,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig"),c(gR,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig"),c(hR,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(pR,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(_R,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(uR,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig"),c(bR,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(vR,"href","/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(FR,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig"),c(TR,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig"),c(MR,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig"),c(ER,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig"),c(CR,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig"),c(wR,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig"),c(AR,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(LR,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig"),c(yR,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig"),c(xR,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig"),c($R,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig"),c(kR,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig"),c(SR,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNConfig"),c(RR,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config"),c(PR,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(BR,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(NR,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig"),c(IR,"href","/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTConfig"),c(qR,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig"),c(jR,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig"),c(DR,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(GR,"href","/docs/transformers/pr_17826/en/model_doc/jukebox#transformers.JukeboxConfig"),c(OR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(VR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(XR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(zR,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig"),c(QR,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig"),c(WR,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig"),c(HR,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config"),c(UR,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig"),c(JR,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig"),c(YR,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config"),c(KR,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig"),c(ZR,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(eP,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig"),c(oP,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig"),c(rP,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(tP,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(aP,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(nP,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig"),c(sP,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config"),c(lP,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig"),c(iP,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig"),c(dP,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(cP,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(fP,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig"),c(mP,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig"),c(gP,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig"),c(hP,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig"),c(pP,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(_P,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(uP,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(bP,"href","/docs/transformers/pr_17826/en/model_doc/rag#transformers.RagConfig"),c(vP,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmConfig"),c(FP,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig"),c(TP,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig"),c(MP,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig"),c(EP,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig"),c(CP,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig"),c(wP,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig"),c(AP,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig"),c(LP,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig"),c(yP,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig"),c(xP,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig"),c($P,"href","/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(kP,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(SP,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(RP,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig"),c(PP,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(BP,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig"),c(NP,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config"),c(IP,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig"),c(qP,"href","/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(jP,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(DP,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRConfig"),c(GP,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(OP,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(VP,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig"),c(XP,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig"),c(zP,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(QP,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(WP,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(HP,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig"),c(UP,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(JP,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(YP,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(KP,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig"),c(ZP,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig"),c(eB,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig"),c(oB,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(rB,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(tB,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(aB,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig"),c(nB,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig"),c(sB,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"id","transformers.AutoTokenizer"),c(oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oh,"href","#transformers.AutoTokenizer"),c(qi,"class","relative group"),c(lB,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(iB,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(dB,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(cB,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartTokenizer"),c(fB,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartTokenizerFast"),c(mB,"href","/docs/transformers/pr_17826/en/model_doc/barthez#transformers.BarthezTokenizer"),c(gB,"href","/docs/transformers/pr_17826/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(hB,"href","/docs/transformers/pr_17826/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(pB,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(_B,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(bB,"href","/docs/transformers/pr_17826/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(vB,"href","/docs/transformers/pr_17826/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(FB,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(TB,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(MB,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(EB,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(CB,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(wB,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(AB,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(LB,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(yB,"href","/docs/transformers/pr_17826/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(xB,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertTokenizer"),c($B,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(kB,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineTokenizer"),c(SB,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizer"),c(RB,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(PB,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(BB,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(NB,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(IB,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(qB,"href","/docs/transformers/pr_17826/en/model_doc/cpm#transformers.CpmTokenizer"),c(jB,"href","/docs/transformers/pr_17826/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(DB,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(GB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VB,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaTokenizer"),c(XB,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(zB,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(QB,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(WB,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(HB,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(UB,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(JB,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(YB,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraTokenizer"),c(KB,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(eN,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetTokenizer"),c(oN,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(rN,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(tN,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelTokenizer"),c(aN,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(nN,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sN,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lN,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iN,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dN,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(cN,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fN,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mN,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizer"),c(gN,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(hN,"href","/docs/transformers/pr_17826/en/model_doc/herbert#transformers.HerbertTokenizer"),c(pN,"href","/docs/transformers/pr_17826/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(_N,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(uN,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(bN,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(FN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(TN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(MN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(EN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(CN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(wN,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(AN,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(LN,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDTokenizer"),c(yN,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDTokenizerFast"),c(xN,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerTokenizer"),c($N,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(kN,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5Tokenizer"),c(SN,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5TokenizerFast"),c(RN,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeTokenizer"),c(PN,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(BN,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(NN,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(IN,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianTokenizer"),c(qN,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartTokenizer"),c(jN,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(DN,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(GN,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(ON,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(VN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(XN,"href","/docs/transformers/pr_17826/en/model_doc/mluke#transformers.MLukeTokenizer"),c(zN,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(QN,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(WN,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(HN,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(UN,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5Tokenizer"),c(JN,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5TokenizerFast"),c(YN,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpTokenizer"),c(KN,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(ZN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(eI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(oI,"href","/docs/transformers/pr_17826/en/model_doc/nllb#transformers.NllbTokenizer"),c(rI,"href","/docs/transformers/pr_17826/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(tI,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(aI,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(nI,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(sI,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(lI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iI,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(dI,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(cI,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(fI,"href","/docs/transformers/pr_17826/en/model_doc/phobert#transformers.PhobertTokenizer"),c(mI,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartTokenizer"),c(gI,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(hI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(pI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(_I,"href","/docs/transformers/pr_17826/en/model_doc/rag#transformers.RagTokenizer"),c(uI,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmTokenizer"),c(bI,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmTokenizerFast"),c(vI,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerTokenizer"),c(FI,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(TI,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertTokenizer"),c(MI,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(EI,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(CI,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(wI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(AI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(LI,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(yI,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(xI,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c($I,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(kI,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterTokenizer"),c(SI,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(RI,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(PI,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(BI,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5Tokenizer"),c(NI,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5TokenizerFast"),c(II,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasTokenizer"),c(qI,"href","/docs/transformers/pr_17826/en/model_doc/tapex#transformers.TapexTokenizer"),c(jI,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(DI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(GI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(OI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(VI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(XI,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(zI,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(QI,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(WI,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMTokenizer"),c(HI,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(UI,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMTokenizer"),c(JI,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(YI,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(KI,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(ZI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(eq,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(oq,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(rq,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(tq,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(aq,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qh,"id","transformers.AutoFeatureExtractor"),c(qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qh,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(nq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(sq,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(lq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(cq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fq,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(mq,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(hq,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(pq,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(_q,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(uq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(vq,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(wq,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(yq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($q,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(kq,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Sq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Rq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Pq,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Bq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Nq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Iq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(jq,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mp,"id","transformers.AutoProcessor"),c(Mp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mp,"href","#transformers.AutoProcessor"),c(Di,"class","relative group"),c(Dq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Gq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPProcessor"),c(Oq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPProcessor"),c(Vq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Xq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(zq,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Qq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Wq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Hq,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Uq,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Jq,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Yq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Kq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Zq,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltProcessor"),c(ej,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(oj,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rj,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tj,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xp,"id","transformers.AutoModel"),c(Xp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xp,"href","#transformers.AutoModel"),c(Oi,"class","relative group"),c(aj,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nj,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sj,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lj,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertModel"),c(ij,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartModel"),c(dj,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitModel"),c(cj,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel"),c(fj,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(mj,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdModel"),c(gj,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(hj,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(pj,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(_j,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomModel"),c(uj,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertModel"),c(bj,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineModel"),c(vj,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPModel"),c(Fj,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenModel"),c(Tj,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertModel"),c(Mj,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextModel"),c(Ej,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLModel"),c(Cj,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtModel"),c(wj,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Aj,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Lj,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(yj,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaModel"),c(xj,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c($j,"href","/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(kj,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTModel"),c(Sj,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrModel"),c(Rj,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertModel"),c(Pj,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Bj,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTModel"),c(Nj,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraModel"),c(Ij,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertModel"),c(qj,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaModel"),c(jj,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetModel"),c(Dj,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTModel"),c(Gj,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelModel"),c(Oj,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Vj,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNModel"),c(Xj,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Model"),c(zj,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Qj,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Wj,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJModel"),c(Hj,"href","/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTModel"),c(Uj,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertModel"),c(Jj,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertModel"),c(Yj,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Kj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Zj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(eD,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(oD,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDModel"),c(rD,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitModel"),c(tD,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerModel"),c(aD,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Model"),c(nD,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeModel"),c(sD,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertModel"),c(lD,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model"),c(iD,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianModel"),c(dD,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerModel"),c(cD,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartModel"),c(fD,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTModel"),c(mD,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(gD,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertModel"),c(hD,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTModel"),c(pD,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetModel"),c(_D,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Model"),c(uD,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpModel"),c(bD,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaModel"),c(vD,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model"),c(FD,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerModel"),c(TD,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(MD,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTModel"),c(ED,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusModel"),c(CD,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverModel"),c(wD,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartModel"),c(AD,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerModel"),c(LD,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(yD,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertModel"),c(xD,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModel"),c($D,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetModel"),c(kD,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertModel"),c(SD,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetModel"),c(RD,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel"),c(PD,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaModel"),c(BD,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerModel"),c(ND,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerModel"),c(ID,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWModel"),c(qD,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDModel"),c(jD,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(DD,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterModel"),c(GD,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(OD,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinModel"),c(VD,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Model"),c(XD,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasModel"),c(zD,"href","/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(QD,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(WD,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechModel"),c(HD,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(UD,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanModel"),c(JD,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltModel"),c(YD,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(KD,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertModel"),c(ZD,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTModel"),c(eG,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(oG,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(rG,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(tG,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMModel"),c(aG,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMModel"),c(nG,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMModel"),c(sG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(lG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(iG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(dG,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetModel"),c(cG,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosModel"),c(fG,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ku,"id","transformers.AutoModelForPreTraining"),c(Ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ku,"href","#transformers.AutoModelForPreTraining"),c(zi,"class","relative group"),c(mG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pG,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForPreTraining"),c(_G,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForPreTraining"),c(bG,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(vG,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM"),c(FG,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(TG,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(MG,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(EG,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(CG,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(wG,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(AG,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForPreTraining"),c(LG,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(yG,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaForPreTraining"),c(xG,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForPreTraining"),c($G,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(kG,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(SG,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(RG,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(PG,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(BG,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(NG,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(IG,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(qG,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(jG,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(DG,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(GG,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(OG,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(VG,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel"),c(XG,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(zG,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(QG,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(WG,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(HG,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(UG,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(JG,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(YG,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(KG,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(ZG,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(eO,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(oO,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(rO,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(tO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(aO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(nO,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W2,"id","transformers.AutoModelForCausalLM"),c(W2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W2,"href","#transformers.AutoModelForCausalLM"),c(Hi,"class","relative group"),c(sO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dO,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForCausalLM"),c(cO,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertLMHeadModel"),c(fO,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(mO,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(gO,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(hO,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(pO,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(_O,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM"),c(uO,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(bO,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(vO,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(FO,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(TO,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForCausalLM"),c(MO,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(EO,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(CO,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(wO,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(AO,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianForCausalLM"),c(LO,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForCausalLM"),c(yO,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(xO,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForCausalLM"),c($O,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(kO,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForCausalLM"),c(SO,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(RO,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(PO,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(BO,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(NO,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(IO,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(qO,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(jO,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(DO,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(GO,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(OO,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(VO,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(XO,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(zO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(QO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(WO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(HO,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I1,"id","transformers.AutoModelForMaskedLM"),c(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I1,"href","#transformers.AutoModelForMaskedLM"),c(Yi,"class","relative group"),c(UO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KO,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(ZO,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(eV,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMaskedLM"),c(oV,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(rV,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(tV,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(aV,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(nV,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(sV,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(lV,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(iV,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(dV,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(cV,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(fV,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(mV,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(gV,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(hV,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(pV,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeForMaskedLM"),c(_V,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(uV,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(bV,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(vV,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(FV,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(TV,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(MV,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(EV,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(CV,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(wV,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(AV,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(LV,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yV,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(xV,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($V,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(kV,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(RV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(PV,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wb,"id","transformers.AutoModelForSeq2SeqLM"),c(wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wb,"href","#transformers.AutoModelForSeq2SeqLM"),c(ed,"class","relative group"),c(BV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qV,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(VV,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(WV,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianMTModel"),c(HV,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(UV,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(JV,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(KV,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(ZV,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(eX,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(oX,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(rX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hb,"id","transformers.AutoModelForSequenceClassification"),c(Hb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hb,"href","#transformers.AutoModelForSequenceClassification"),c(td,"class","relative group"),c(tX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sX,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c($X,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(zX,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(QX,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(WX,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(HX,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(UX,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(YX,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(KX,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(ez,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(oz,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(rz,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForMultipleChoice"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForMultipleChoice"),c(sd,"class","relative group"),c(tz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(az,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sz,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(dz,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(fz,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(mz,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(vz,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(wz,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Az,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Lz,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(yz,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(xz,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c($z,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(kz,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Sz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Rz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Pz,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Bz,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForNextSentencePrediction"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForNextSentencePrediction"),c(dd,"class","relative group"),c(Nz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Dz,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Gz,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Oz,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Vz,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Xz,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForTokenClassification"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForTokenClassification"),c(md,"class","relative group"),c(zz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hz,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForTokenClassification"),c(eQ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(tQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(aQ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(nQ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(sQ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(lQ,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(iQ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(dQ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(cQ,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(fQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(mQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(gQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(hQ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(pQ,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(_Q,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(uQ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(bQ,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(vQ,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(FQ,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(TQ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(MQ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(EQ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(CQ,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(wQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(AQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(LQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(yQ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(xQ,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w6,"id","transformers.AutoModelForQuestionAnswering"),c(w6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w6,"href","#transformers.AutoModelForQuestionAnswering"),c(pd,"class","relative group"),c($Q,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(WQ,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(iW,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(dW,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(cW,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(fW,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(mW,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(gW,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(hW,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(pW,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(_W,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(uW,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(bW,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(vW,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(FW,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForTableQuestionAnswering"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(bd,"class","relative group"),c(TW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForImageClassification"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForImageClassification"),c(Td,"class","relative group"),c(wW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yW,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForImageClassification"),c(xW,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c($W,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtForImageClassification"),c(kW,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(SW,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassification"),c(RW,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(PW,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(BW,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassification"),c(NW,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(IW,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(qW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(jW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(DW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(GW,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(OW,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(VW,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(XW,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(zW,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForImageClassification"),c(QW,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanForImageClassification"),c(WW,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.AutoModelForVision2Seq"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(HW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ld,"class","relative group"),c(KW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.AutoModelForAudioClassification"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.AutoModelForAudioClassification"),c($d,"class","relative group"),c(rH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i7,"id","transformers.AutoModelForAudioFrameClassification"),c(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i7,"href","#transformers.AutoModelForAudioFrameClassification"),c(Rd,"class","relative group"),c(hH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_H,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(bH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(vH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(FH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(TH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u7,"id","transformers.AutoModelForCTC"),c(u7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u7,"href","#transformers.AutoModelForCTC"),c(Nd,"class","relative group"),c(MH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(AH,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForCTC"),c(LH,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTForCTC"),c(yH,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForCTC"),c(xH,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForCTC"),c($H,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(kH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(SH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(RH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(PH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k7,"id","transformers.AutoModelForSpeechSeq2Seq"),c(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k7,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(jd,"class","relative group"),c(BH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(jH,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I7,"id","transformers.AutoModelForAudioXVector"),c(I7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I7,"href","#transformers.AutoModelForAudioXVector"),c(Od,"class","relative group"),c(DH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(XH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(zH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(QH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(WH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q7,"id","transformers.AutoModelForMaskedImageModeling"),c(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q7,"href","#transformers.AutoModelForMaskedImageModeling"),c(zd,"class","relative group"),c(HH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(KH,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(ZH,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z7,"id","transformers.AutoModelForObjectDetection"),c(Z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z7,"href","#transformers.AutoModelForObjectDetection"),c(Ud,"class","relative group"),c(eU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForObjectDetection"),c(aU,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n8,"id","transformers.AutoModelForImageSegmentation"),c(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n8,"href","#transformers.AutoModelForImageSegmentation"),c(Kd,"class","relative group"),c(nU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c8,"id","transformers.AutoModelForSemanticSegmentation"),c(c8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c8,"href","#transformers.AutoModelForSemanticSegmentation"),c(oc,"class","relative group"),c(dU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(gU,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(hU,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(pU,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(_U,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v8,"id","transformers.AutoModelForInstanceSegmentation"),c(v8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v8,"href","#transformers.AutoModelForInstanceSegmentation"),c(ac,"class","relative group"),c(uU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C8,"id","transformers.TFAutoModel"),c(C8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C8,"href","#transformers.TFAutoModel"),c(lc,"class","relative group"),c(TU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CU,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertModel"),c(wU,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartModel"),c(AU,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertModel"),c(LU,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(yU,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(xU,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertModel"),c($U,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.TFCLIPModel"),c(kU,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertModel"),c(SU,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextModel"),c(RU,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLModel"),c(PU,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(BU,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaModel"),c(NU,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(IU,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTModel"),c(qU,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(jU,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(DU,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraModel"),c(GU,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(OU,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelModel"),c(VU,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(XU,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2Model"),c(zU,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJModel"),c(QU,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.TFHubertModel"),c(WU,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(HU,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDModel"),c(UU,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerModel"),c(JU,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertModel"),c(YU,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianModel"),c(KU,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartModel"),c(ZU,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(eJ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetModel"),c(oJ,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5Model"),c(rJ,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(tJ,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTModel"),c(aJ,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusModel"),c(nJ,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetModel"),c(sJ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertModel"),c(lJ,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetModel"),c(iJ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaModel"),c(dJ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerModel"),c(cJ,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(fJ,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinModel"),c(mJ,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5Model"),c(gJ,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasModel"),c(hJ,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(pJ,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTModel"),c(_J,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(uJ,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(bJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMModel"),c(vJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(FJ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MM,"id","transformers.TFAutoModelForPreTraining"),c(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MM,"href","#transformers.TFAutoModelForPreTraining"),c(cc,"class","relative group"),c(TJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(wJ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(AJ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForPreTraining"),c(LJ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(xJ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($J,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(kJ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(SJ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(RJ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PJ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(NJ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(IJ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jJ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DJ,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(GJ,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OJ,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(VJ,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(XJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(QJ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.TFAutoModelForCausalLM"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.TFAutoModelForCausalLM"),c(gc,"class","relative group"),c(WJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(YJ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(KJ,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ZJ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(eY,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(oY,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(rY,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(tY,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(aY,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(nY,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(sY,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lY,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iY,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c4,"id","transformers.TFAutoModelForImageClassification"),c(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c4,"href","#transformers.TFAutoModelForImageClassification"),c(_c,"class","relative group"),c(dY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(gY,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(hY,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(pY,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(_Y,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(uY,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(bY,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(vY,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.TFAutoModelForMaskedLM"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.TFAutoModelForMaskedLM"),c(vc,"class","relative group"),c(FY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EY,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(CY,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(wY,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(AY,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(LY,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(yY,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(xY,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($Y,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(kY,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(SY,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(RY,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(PY,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(BY,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(NY,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(IY,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(qY,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(jY,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(DY,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(GY,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(OY,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Mc,"class","relative group"),c(VY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QY,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(HY,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(JY,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianMTModel"),c(KY,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(ZY,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(eK,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(oK,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModelForSequenceClassification"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModelForSequenceClassification"),c(wc,"class","relative group"),c(rK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(CK,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(wK,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(AK,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(LK,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(yK,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(xK,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c($K,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.TFAutoModelForMultipleChoice"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.TFAutoModelForMultipleChoice"),c(yc,"class","relative group"),c(kK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PK,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(BK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(NK,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(IK,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(qK,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(jK,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(DK,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(GK,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(OK,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(VK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(XK,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(zK,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(QK,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(WK,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(HK,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(UK,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(JK,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(kc,"class","relative group"),c(YK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(oZ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Pc,"class","relative group"),c(rZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nC,"id","transformers.TFAutoModelForTokenClassification"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(sZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dZ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(cZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(fZ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(mZ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(gZ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(hZ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(pZ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(_Z,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(uZ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(bZ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(vZ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(FZ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(TZ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(MZ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(EZ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(CZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(wZ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(AZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(LZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(yZ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.TFAutoModelForQuestionAnswering"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Dc,"class","relative group"),c(xZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Z,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SZ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(IZ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(qZ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(jZ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(DZ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(GZ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(OZ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(VZ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(XZ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(zZ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(QZ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(WZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(HZ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(UZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(JZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(YZ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.TFAutoModelForVision2Seq"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.TFAutoModelForVision2Seq"),c(Vc,"class","relative group"),c(KZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oee,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Qc,"class","relative group"),c(ree,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nee,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.FlaxAutoModel"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.FlaxAutoModel"),c(Uc,"class","relative group"),c(see,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dee,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertModel"),c(cee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartModel"),c(fee,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitModel"),c(mee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertModel"),c(gee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(hee,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(pee,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(_ee,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.FlaxCLIPModel"),c(uee,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(bee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraModel"),c(vee,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Fee,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Tee,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Mee,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Eee,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianModel"),c(Cee,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartModel"),c(wee,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Aee,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTModel"),c(Lee,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(yee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(xee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c($ee,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5Model"),c(kee,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(See,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTModel"),c(Ree,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Pee,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Bee,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.FlaxAutoModelForCausalLM"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Kc,"class","relative group"),c(Nee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Dee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Gee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Oee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Vee,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Xee,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(zee,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Qee,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Wee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Hee,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H5,"id","transformers.FlaxAutoModelForPreTraining"),c(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H5,"href","#transformers.FlaxAutoModelForPreTraining"),c(of,"class","relative group"),c(Uee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kee,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Zee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eoe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(ooe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(roe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(toe,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(aoe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(noe,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(soe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(loe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ioe,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(doe,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(coe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.FlaxAutoModelForMaskedLM"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(af,"class","relative group"),c(foe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(moe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(goe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hoe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(poe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_oe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(uoe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(boe,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(voe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Foe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Toe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Moe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Eoe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(E3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(lf,"class","relative group"),c(Coe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(woe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Loe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yoe,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(xoe,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c($oe,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(koe,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Soe,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Roe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Poe,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Boe,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Noe,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(ff,"class","relative group"),c(Ioe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(joe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Doe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Goe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Ooe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Voe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Xoe,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(zoe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Qoe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Woe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Hoe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Uoe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(hf,"class","relative group"),c(Joe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Koe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zoe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(ere,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(ore,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(rre,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(tre,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(are,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(nre,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(sre,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(lre,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(ire,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.FlaxAutoModelForTokenClassification"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(uf,"class","relative group"),c(dre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mre,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(gre,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hre,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(pre,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(_re,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(ure,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(bre,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(vre,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(v0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Ff,"class","relative group"),c(Fre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ere,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Cre,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(wre,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Are,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Lre,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(yre,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(xre,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($re,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Ef,"class","relative group"),c(kre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pre,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P0,"id","transformers.FlaxAutoModelForImageClassification"),c(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P0,"href","#transformers.FlaxAutoModelForImageClassification"),c(Af,"class","relative group"),c(Bre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ire,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qre,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(jre,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j0,"id","transformers.FlaxAutoModelForVision2Seq"),c(j0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(xf,"class","relative group"),c(Dre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ore,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vre,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Co),e(Co,yi),b(f,Bf,u),b(f,lt,u),e(lt,xi),e(lt,$i),e($i,lL),e(lt,Nf),b(f,Oe,u),b(f,We,u),e(We,ki),e(We,Pn),e(Pn,iL),e(We,Bn),e(We,Nn),e(Nn,dL),e(We,Si),e(We,In),e(In,cL),e(We,Ri),b(f,If,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,VS),e(Ae,Pi),e(Pi,XS),e(Ae,zS),b(f,wo,u),b(f,Ra,u),e(Ra,QS),e(Ra,qf),e(qf,WS),e(Ra,GHe),b(f,AXe,u),b(f,Bi,u),e(Bi,jf),e(jf,qae),M(fL,qae,null),e(Bi,OHe),e(Bi,jae),e(jae,VHe),b(f,LXe,u),b(f,qn,u),e(qn,XHe),e(qn,Dae),e(Dae,zHe),e(qn,QHe),e(qn,Gae),e(Gae,WHe),e(qn,HHe),b(f,yXe,u),M(mL,f,u),b(f,xXe,u),b(f,HS,u),e(HS,UHe),b(f,$Xe,u),M(Df,f,u),b(f,kXe,u),b(f,Ni,u),e(Ni,Gf),e(Gf,Oae),M(gL,Oae,null),e(Ni,JHe),e(Ni,Vae),e(Vae,YHe),b(f,SXe,u),b(f,Ao,u),M(hL,Ao,null),e(Ao,KHe),e(Ao,pL),e(pL,ZHe),e(pL,US),e(US,eUe),e(pL,oUe),e(Ao,rUe),e(Ao,_L),e(_L,tUe),e(_L,Xae),e(Xae,aUe),e(_L,nUe),e(Ao,sUe),e(Ao,Lr),M(uL,Lr,null),e(Lr,lUe),e(Lr,zae),e(zae,iUe),e(Lr,dUe),e(Lr,Ii),e(Ii,cUe),e(Ii,Qae),e(Qae,fUe),e(Ii,mUe),e(Ii,Wae),e(Wae,gUe),e(Ii,hUe),e(Lr,pUe),e(Lr,A),e(A,Of),e(Of,Hae),e(Hae,_Ue),e(Of,uUe),e(Of,JS),e(JS,bUe),e(Of,vUe),e(A,FUe),e(A,Vf),e(Vf,Uae),e(Uae,TUe),e(Vf,MUe),e(Vf,YS),e(YS,EUe),e(Vf,CUe),e(A,wUe),e(A,Xf),e(Xf,Jae),e(Jae,AUe),e(Xf,LUe),e(Xf,KS),e(KS,yUe),e(Xf,xUe),e(A,$Ue),e(A,zf),e(zf,Yae),e(Yae,kUe),e(zf,SUe),e(zf,ZS),e(ZS,RUe),e(zf,PUe),e(A,BUe),e(A,Qf),e(Qf,Kae),e(Kae,NUe),e(Qf,IUe),e(Qf,eR),e(eR,qUe),e(Qf,jUe),e(A,DUe),e(A,Wf),e(Wf,Zae),e(Zae,GUe),e(Wf,OUe),e(Wf,oR),e(oR,VUe),e(Wf,XUe),e(A,zUe),e(A,Hf),e(Hf,ene),e(ene,QUe),e(Hf,WUe),e(Hf,rR),e(rR,HUe),e(Hf,UUe),e(A,JUe),e(A,Uf),e(Uf,one),e(one,YUe),e(Uf,KUe),e(Uf,tR),e(tR,ZUe),e(Uf,eJe),e(A,oJe),e(A,Jf),e(Jf,rne),e(rne,rJe),e(Jf,tJe),e(Jf,aR),e(aR,aJe),e(Jf,nJe),e(A,sJe),e(A,Yf),e(Yf,tne),e(tne,lJe),e(Yf,iJe),e(Yf,nR),e(nR,dJe),e(Yf,cJe),e(A,fJe),e(A,Kf),e(Kf,ane),e(ane,mJe),e(Kf,gJe),e(Kf,sR),e(sR,hJe),e(Kf,pJe),e(A,_Je),e(A,Zf),e(Zf,nne),e(nne,uJe),e(Zf,bJe),e(Zf,lR),e(lR,vJe),e(Zf,FJe),e(A,TJe),e(A,em),e(em,sne),e(sne,MJe),e(em,EJe),e(em,iR),e(iR,CJe),e(em,wJe),e(A,AJe),e(A,om),e(om,lne),e(lne,LJe),e(om,yJe),e(om,dR),e(dR,xJe),e(om,$Je),e(A,kJe),e(A,rm),e(rm,ine),e(ine,SJe),e(rm,RJe),e(rm,cR),e(cR,PJe),e(rm,BJe),e(A,NJe),e(A,tm),e(tm,dne),e(dne,IJe),e(tm,qJe),e(tm,fR),e(fR,jJe),e(tm,DJe),e(A,GJe),e(A,am),e(am,cne),e(cne,OJe),e(am,VJe),e(am,mR),e(mR,XJe),e(am,zJe),e(A,QJe),e(A,nm),e(nm,fne),e(fne,WJe),e(nm,HJe),e(nm,gR),e(gR,UJe),e(nm,JJe),e(A,YJe),e(A,sm),e(sm,mne),e(mne,KJe),e(sm,ZJe),e(sm,hR),e(hR,eYe),e(sm,oYe),e(A,rYe),e(A,lm),e(lm,gne),e(gne,tYe),e(lm,aYe),e(lm,pR),e(pR,nYe),e(lm,sYe),e(A,lYe),e(A,im),e(im,hne),e(hne,iYe),e(im,dYe),e(im,_R),e(_R,cYe),e(im,fYe),e(A,mYe),e(A,dm),e(dm,pne),e(pne,gYe),e(dm,hYe),e(dm,uR),e(uR,pYe),e(dm,_Ye),e(A,uYe),e(A,cm),e(cm,_ne),e(_ne,bYe),e(cm,vYe),e(cm,bR),e(bR,FYe),e(cm,TYe),e(A,MYe),e(A,fm),e(fm,une),e(une,EYe),e(fm,CYe),e(fm,vR),e(vR,wYe),e(fm,AYe),e(A,LYe),e(A,mm),e(mm,bne),e(bne,yYe),e(mm,xYe),e(mm,FR),e(FR,$Ye),e(mm,kYe),e(A,SYe),e(A,gm),e(gm,vne),e(vne,RYe),e(gm,PYe),e(gm,TR),e(TR,BYe),e(gm,NYe),e(A,IYe),e(A,hm),e(hm,Fne),e(Fne,qYe),e(hm,jYe),e(hm,MR),e(MR,DYe),e(hm,GYe),e(A,OYe),e(A,pm),e(pm,Tne),e(Tne,VYe),e(pm,XYe),e(pm,ER),e(ER,zYe),e(pm,QYe),e(A,WYe),e(A,_m),e(_m,Mne),e(Mne,HYe),e(_m,UYe),e(_m,CR),e(CR,JYe),e(_m,YYe),e(A,KYe),e(A,um),e(um,Ene),e(Ene,ZYe),e(um,eKe),e(um,wR),e(wR,oKe),e(um,rKe),e(A,tKe),e(A,bm),e(bm,Cne),e(Cne,aKe),e(bm,nKe),e(bm,AR),e(AR,sKe),e(bm,lKe),e(A,iKe),e(A,vm),e(vm,wne),e(wne,dKe),e(vm,cKe),e(vm,LR),e(LR,fKe),e(vm,mKe),e(A,gKe),e(A,Fm),e(Fm,Ane),e(Ane,hKe),e(Fm,pKe),e(Fm,yR),e(yR,_Ke),e(Fm,uKe),e(A,bKe),e(A,Tm),e(Tm,Lne),e(Lne,vKe),e(Tm,FKe),e(Tm,xR),e(xR,TKe),e(Tm,MKe),e(A,EKe),e(A,Mm),e(Mm,yne),e(yne,CKe),e(Mm,wKe),e(Mm,$R),e($R,AKe),e(Mm,LKe),e(A,yKe),e(A,Em),e(Em,xne),e(xne,xKe),e(Em,$Ke),e(Em,kR),e(kR,kKe),e(Em,SKe),e(A,RKe),e(A,Cm),e(Cm,$ne),e($ne,PKe),e(Cm,BKe),e(Cm,SR),e(SR,NKe),e(Cm,IKe),e(A,qKe),e(A,wm),e(wm,kne),e(kne,jKe),e(wm,DKe),e(wm,RR),e(RR,GKe),e(wm,OKe),e(A,VKe),e(A,Am),e(Am,Sne),e(Sne,XKe),e(Am,zKe),e(Am,PR),e(PR,QKe),e(Am,WKe),e(A,HKe),e(A,Lm),e(Lm,Rne),e(Rne,UKe),e(Lm,JKe),e(Lm,BR),e(BR,YKe),e(Lm,KKe),e(A,ZKe),e(A,ym),e(ym,Pne),e(Pne,eZe),e(ym,oZe),e(ym,NR),e(NR,rZe),e(ym,tZe),e(A,aZe),e(A,xm),e(xm,Bne),e(Bne,nZe),e(xm,sZe),e(xm,IR),e(IR,lZe),e(xm,iZe),e(A,dZe),e(A,$m),e($m,Nne),e(Nne,cZe),e($m,fZe),e($m,qR),e(qR,mZe),e($m,gZe),e(A,hZe),e(A,km),e(km,Ine),e(Ine,pZe),e(km,_Ze),e(km,jR),e(jR,uZe),e(km,bZe),e(A,vZe),e(A,Sm),e(Sm,qne),e(qne,FZe),e(Sm,TZe),e(Sm,DR),e(DR,MZe),e(Sm,EZe),e(A,CZe),e(A,Rm),e(Rm,jne),e(jne,wZe),e(Rm,AZe),e(Rm,GR),e(GR,LZe),e(Rm,yZe),e(A,xZe),e(A,Pm),e(Pm,Dne),e(Dne,$Ze),e(Pm,kZe),e(Pm,OR),e(OR,SZe),e(Pm,RZe),e(A,PZe),e(A,Bm),e(Bm,Gne),e(Gne,BZe),e(Bm,NZe),e(Bm,VR),e(VR,IZe),e(Bm,qZe),e(A,jZe),e(A,Nm),e(Nm,One),e(One,DZe),e(Nm,GZe),e(Nm,XR),e(XR,OZe),e(Nm,VZe),e(A,XZe),e(A,Im),e(Im,Vne),e(Vne,zZe),e(Im,QZe),e(Im,zR),e(zR,WZe),e(Im,HZe),e(A,UZe),e(A,qm),e(qm,Xne),e(Xne,JZe),e(qm,YZe),e(qm,QR),e(QR,KZe),e(qm,ZZe),e(A,eeo),e(A,jm),e(jm,zne),e(zne,oeo),e(jm,reo),e(jm,WR),e(WR,teo),e(jm,aeo),e(A,neo),e(A,Dm),e(Dm,Qne),e(Qne,seo),e(Dm,leo),e(Dm,HR),e(HR,ieo),e(Dm,deo),e(A,ceo),e(A,Gm),e(Gm,Wne),e(Wne,feo),e(Gm,meo),e(Gm,UR),e(UR,geo),e(Gm,heo),e(A,peo),e(A,Om),e(Om,Hne),e(Hne,_eo),e(Om,ueo),e(Om,JR),e(JR,beo),e(Om,veo),e(A,Feo),e(A,Vm),e(Vm,Une),e(Une,Teo),e(Vm,Meo),e(Vm,YR),e(YR,Eeo),e(Vm,Ceo),e(A,weo),e(A,Xm),e(Xm,Jne),e(Jne,Aeo),e(Xm,Leo),e(Xm,KR),e(KR,yeo),e(Xm,xeo),e(A,$eo),e(A,zm),e(zm,Yne),e(Yne,keo),e(zm,Seo),e(zm,ZR),e(ZR,Reo),e(zm,Peo),e(A,Beo),e(A,Qm),e(Qm,Kne),e(Kne,Neo),e(Qm,Ieo),e(Qm,eP),e(eP,qeo),e(Qm,jeo),e(A,Deo),e(A,Wm),e(Wm,Zne),e(Zne,Geo),e(Wm,Oeo),e(Wm,oP),e(oP,Veo),e(Wm,Xeo),e(A,zeo),e(A,Hm),e(Hm,ese),e(ese,Qeo),e(Hm,Weo),e(Hm,rP),e(rP,Heo),e(Hm,Ueo),e(A,Jeo),e(A,Um),e(Um,ose),e(ose,Yeo),e(Um,Keo),e(Um,tP),e(tP,Zeo),e(Um,eoo),e(A,ooo),e(A,Jm),e(Jm,rse),e(rse,roo),e(Jm,too),e(Jm,aP),e(aP,aoo),e(Jm,noo),e(A,soo),e(A,Ym),e(Ym,tse),e(tse,loo),e(Ym,ioo),e(Ym,nP),e(nP,doo),e(Ym,coo),e(A,foo),e(A,Km),e(Km,ase),e(ase,moo),e(Km,goo),e(Km,sP),e(sP,hoo),e(Km,poo),e(A,_oo),e(A,Zm),e(Zm,nse),e(nse,uoo),e(Zm,boo),e(Zm,lP),e(lP,voo),e(Zm,Foo),e(A,Too),e(A,eg),e(eg,sse),e(sse,Moo),e(eg,Eoo),e(eg,iP),e(iP,Coo),e(eg,woo),e(A,Aoo),e(A,og),e(og,lse),e(lse,Loo),e(og,yoo),e(og,dP),e(dP,xoo),e(og,$oo),e(A,koo),e(A,rg),e(rg,ise),e(ise,Soo),e(rg,Roo),e(rg,cP),e(cP,Poo),e(rg,Boo),e(A,Noo),e(A,tg),e(tg,dse),e(dse,Ioo),e(tg,qoo),e(tg,fP),e(fP,joo),e(tg,Doo),e(A,Goo),e(A,ag),e(ag,cse),e(cse,Ooo),e(ag,Voo),e(ag,mP),e(mP,Xoo),e(ag,zoo),e(A,Qoo),e(A,ng),e(ng,fse),e(fse,Woo),e(ng,Hoo),e(ng,gP),e(gP,Uoo),e(ng,Joo),e(A,Yoo),e(A,sg),e(sg,mse),e(mse,Koo),e(sg,Zoo),e(sg,hP),e(hP,ero),e(sg,oro),e(A,rro),e(A,lg),e(lg,gse),e(gse,tro),e(lg,aro),e(lg,pP),e(pP,nro),e(lg,sro),e(A,lro),e(A,ig),e(ig,hse),e(hse,iro),e(ig,dro),e(ig,_P),e(_P,cro),e(ig,fro),e(A,mro),e(A,dg),e(dg,pse),e(pse,gro),e(dg,hro),e(dg,uP),e(uP,pro),e(dg,_ro),e(A,uro),e(A,cg),e(cg,_se),e(_se,bro),e(cg,vro),e(cg,bP),e(bP,Fro),e(cg,Tro),e(A,Mro),e(A,fg),e(fg,use),e(use,Ero),e(fg,Cro),e(fg,vP),e(vP,wro),e(fg,Aro),e(A,Lro),e(A,mg),e(mg,bse),e(bse,yro),e(mg,xro),e(mg,FP),e(FP,$ro),e(mg,kro),e(A,Sro),e(A,gg),e(gg,vse),e(vse,Rro),e(gg,Pro),e(gg,TP),e(TP,Bro),e(gg,Nro),e(A,Iro),e(A,hg),e(hg,Fse),e(Fse,qro),e(hg,jro),e(hg,MP),e(MP,Dro),e(hg,Gro),e(A,Oro),e(A,pg),e(pg,Tse),e(Tse,Vro),e(pg,Xro),e(pg,EP),e(EP,zro),e(pg,Qro),e(A,Wro),e(A,_g),e(_g,Mse),e(Mse,Hro),e(_g,Uro),e(_g,CP),e(CP,Jro),e(_g,Yro),e(A,Kro),e(A,ug),e(ug,Ese),e(Ese,Zro),e(ug,eto),e(ug,wP),e(wP,oto),e(ug,rto),e(A,tto),e(A,bg),e(bg,Cse),e(Cse,ato),e(bg,nto),e(bg,AP),e(AP,sto),e(bg,lto),e(A,ito),e(A,vg),e(vg,wse),e(wse,dto),e(vg,cto),e(vg,LP),e(LP,fto),e(vg,mto),e(A,gto),e(A,Fg),e(Fg,Ase),e(Ase,hto),e(Fg,pto),e(Fg,yP),e(yP,_to),e(Fg,uto),e(A,bto),e(A,Tg),e(Tg,Lse),e(Lse,vto),e(Tg,Fto),e(Tg,xP),e(xP,Tto),e(Tg,Mto),e(A,Eto),e(A,Mg),e(Mg,yse),e(yse,Cto),e(Mg,wto),e(Mg,$P),e($P,Ato),e(Mg,Lto),e(A,yto),e(A,Eg),e(Eg,xse),e(xse,xto),e(Eg,$to),e(Eg,kP),e(kP,kto),e(Eg,Sto),e(A,Rto),e(A,Cg),e(Cg,$se),e($se,Pto),e(Cg,Bto),e(Cg,SP),e(SP,Nto),e(Cg,Ito),e(A,qto),e(A,wg),e(wg,kse),e(kse,jto),e(wg,Dto),e(wg,RP),e(RP,Gto),e(wg,Oto),e(A,Vto),e(A,Ag),e(Ag,Sse),e(Sse,Xto),e(Ag,zto),e(Ag,PP),e(PP,Qto),e(Ag,Wto),e(A,Hto),e(A,Lg),e(Lg,Rse),e(Rse,Uto),e(Lg,Jto),e(Lg,BP),e(BP,Yto),e(Lg,Kto),e(A,Zto),e(A,yg),e(yg,Pse),e(Pse,eao),e(yg,oao),e(yg,NP),e(NP,rao),e(yg,tao),e(A,aao),e(A,xg),e(xg,Bse),e(Bse,nao),e(xg,sao),e(xg,IP),e(IP,lao),e(xg,iao),e(A,dao),e(A,$g),e($g,Nse),e(Nse,cao),e($g,fao),e($g,qP),e(qP,mao),e($g,gao),e(A,hao),e(A,kg),e(kg,Ise),e(Ise,pao),e(kg,_ao),e(kg,jP),e(jP,uao),e(kg,bao),e(A,vao),e(A,Sg),e(Sg,qse),e(qse,Fao),e(Sg,Tao),e(Sg,DP),e(DP,Mao),e(Sg,Eao),e(A,Cao),e(A,Rg),e(Rg,jse),e(jse,wao),e(Rg,Aao),e(Rg,GP),e(GP,Lao),e(Rg,yao),e(A,xao),e(A,Pg),e(Pg,Dse),e(Dse,$ao),e(Pg,kao),e(Pg,OP),e(OP,Sao),e(Pg,Rao),e(A,Pao),e(A,Bg),e(Bg,Gse),e(Gse,Bao),e(Bg,Nao),e(Bg,VP),e(VP,Iao),e(Bg,qao),e(A,jao),e(A,Ng),e(Ng,Ose),e(Ose,Dao),e(Ng,Gao),e(Ng,XP),e(XP,Oao),e(Ng,Vao),e(A,Xao),e(A,Ig),e(Ig,Vse),e(Vse,zao),e(Ig,Qao),e(Ig,zP),e(zP,Wao),e(Ig,Hao),e(A,Uao),e(A,qg),e(qg,Xse),e(Xse,Jao),e(qg,Yao),e(qg,QP),e(QP,Kao),e(qg,Zao),e(A,eno),e(A,jg),e(jg,zse),e(zse,ono),e(jg,rno),e(jg,WP),e(WP,tno),e(jg,ano),e(A,nno),e(A,Dg),e(Dg,Qse),e(Qse,sno),e(Dg,lno),e(Dg,HP),e(HP,ino),e(Dg,dno),e(A,cno),e(A,Gg),e(Gg,Wse),e(Wse,fno),e(Gg,mno),e(Gg,UP),e(UP,gno),e(Gg,hno),e(A,pno),e(A,Og),e(Og,Hse),e(Hse,_no),e(Og,uno),e(Og,JP),e(JP,bno),e(Og,vno),e(A,Fno),e(A,Vg),e(Vg,Use),e(Use,Tno),e(Vg,Mno),e(Vg,YP),e(YP,Eno),e(Vg,Cno),e(A,wno),e(A,Xg),e(Xg,Jse),e(Jse,Ano),e(Xg,Lno),e(Xg,KP),e(KP,yno),e(Xg,xno),e(A,$no),e(A,zg),e(zg,Yse),e(Yse,kno),e(zg,Sno),e(zg,ZP),e(ZP,Rno),e(zg,Pno),e(A,Bno),e(A,Qg),e(Qg,Kse),e(Kse,Nno),e(Qg,Ino),e(Qg,eB),e(eB,qno),e(Qg,jno),e(A,Dno),e(A,Wg),e(Wg,Zse),e(Zse,Gno),e(Wg,Ono),e(Wg,oB),e(oB,Vno),e(Wg,Xno),e(A,zno),e(A,Hg),e(Hg,ele),e(ele,Qno),e(Hg,Wno),e(Hg,rB),e(rB,Hno),e(Hg,Uno),e(A,Jno),e(A,Ug),e(Ug,ole),e(ole,Yno),e(Ug,Kno),e(Ug,tB),e(tB,Zno),e(Ug,eso),e(A,oso),e(A,Jg),e(Jg,rle),e(rle,rso),e(Jg,tso),e(Jg,aB),e(aB,aso),e(Jg,nso),e(A,sso),e(A,Yg),e(Yg,tle),e(tle,lso),e(Yg,iso),e(Yg,nB),e(nB,dso),e(Yg,cso),e(A,fso),e(A,Kg),e(Kg,ale),e(ale,mso),e(Kg,gso),e(Kg,sB),e(sB,hso),e(Kg,pso),e(Lr,_so),M(Zg,Lr,null),e(Ao,uso),e(Ao,eh),M(bL,eh,null),e(eh,bso),e(eh,nle),e(nle,vso),b(f,RXe,u),b(f,qi,u),e(qi,oh),e(oh,sle),M(vL,sle,null),e(qi,Fso),e(qi,lle),e(lle,Tso),b(f,PXe,u),b(f,Lo,u),M(FL,Lo,null),e(Lo,Mso),e(Lo,TL),e(TL,Eso),e(TL,lB),e(lB,Cso),e(TL,wso),e(Lo,Aso),e(Lo,ML),e(ML,Lso),e(ML,ile),e(ile,yso),e(ML,xso),e(Lo,$so),e(Lo,yr),M(EL,yr,null),e(yr,kso),e(yr,dle),e(dle,Sso),e(yr,Rso),e(yr,Pa),e(Pa,Pso),e(Pa,cle),e(cle,Bso),e(Pa,Nso),e(Pa,fle),e(fle,Iso),e(Pa,qso),e(Pa,mle),e(mle,jso),e(Pa,Dso),e(yr,Gso),e(yr,k),e(k,jn),e(jn,gle),e(gle,Oso),e(jn,Vso),e(jn,iB),e(iB,Xso),e(jn,zso),e(jn,dB),e(dB,Qso),e(jn,Wso),e(k,Hso),e(k,Dn),e(Dn,hle),e(hle,Uso),e(Dn,Jso),e(Dn,cB),e(cB,Yso),e(Dn,Kso),e(Dn,fB),e(fB,Zso),e(Dn,elo),e(k,olo),e(k,Gn),e(Gn,ple),e(ple,rlo),e(Gn,tlo),e(Gn,mB),e(mB,alo),e(Gn,nlo),e(Gn,gB),e(gB,slo),e(Gn,llo),e(k,ilo),e(k,rh),e(rh,_le),e(_le,dlo),e(rh,clo),e(rh,hB),e(hB,flo),e(rh,mlo),e(k,glo),e(k,On),e(On,ule),e(ule,hlo),e(On,plo),e(On,pB),e(pB,_lo),e(On,ulo),e(On,_B),e(_B,blo),e(On,vlo),e(k,Flo),e(k,th),e(th,ble),e(ble,Tlo),e(th,Mlo),e(th,uB),e(uB,Elo),e(th,Clo),e(k,wlo),e(k,ah),e(ah,vle),e(vle,Alo),e(ah,Llo),e(ah,bB),e(bB,ylo),e(ah,xlo),e(k,$lo),e(k,nh),e(nh,Fle),e(Fle,klo),e(nh,Slo),e(nh,vB),e(vB,Rlo),e(nh,Plo),e(k,Blo),e(k,Vn),e(Vn,Tle),e(Tle,Nlo),e(Vn,Ilo),e(Vn,FB),e(FB,qlo),e(Vn,jlo),e(Vn,TB),e(TB,Dlo),e(Vn,Glo),e(k,Olo),e(k,Xn),e(Xn,Mle),e(Mle,Vlo),e(Xn,Xlo),e(Xn,MB),e(MB,zlo),e(Xn,Qlo),e(Xn,EB),e(EB,Wlo),e(Xn,Hlo),e(k,Ulo),e(k,zn),e(zn,Ele),e(Ele,Jlo),e(zn,Ylo),e(zn,CB),e(CB,Klo),e(zn,Zlo),e(zn,wB),e(wB,eio),e(zn,oio),e(k,rio),e(k,sh),e(sh,Cle),e(Cle,tio),e(sh,aio),e(sh,AB),e(AB,nio),e(sh,sio),e(k,lio),e(k,lh),e(lh,wle),e(wle,iio),e(lh,dio),e(lh,LB),e(LB,cio),e(lh,fio),e(k,mio),e(k,ih),e(ih,Ale),e(Ale,gio),e(ih,hio),e(ih,yB),e(yB,pio),e(ih,_io),e(k,uio),e(k,Qn),e(Qn,Lle),e(Lle,bio),e(Qn,vio),e(Qn,xB),e(xB,Fio),e(Qn,Tio),e(Qn,$B),e($B,Mio),e(Qn,Eio),e(k,Cio),e(k,dh),e(dh,yle),e(yle,wio),e(dh,Aio),e(dh,kB),e(kB,Lio),e(dh,yio),e(k,xio),e(k,Wn),e(Wn,xle),e(xle,$io),e(Wn,kio),e(Wn,SB),e(SB,Sio),e(Wn,Rio),e(Wn,RB),e(RB,Pio),e(Wn,Bio),e(k,Nio),e(k,Hn),e(Hn,$le),e($le,Iio),e(Hn,qio),e(Hn,PB),e(PB,jio),e(Hn,Dio),e(Hn,BB),e(BB,Gio),e(Hn,Oio),e(k,Vio),e(k,Un),e(Un,kle),e(kle,Xio),e(Un,zio),e(Un,NB),e(NB,Qio),e(Un,Wio),e(Un,IB),e(IB,Hio),e(Un,Uio),e(k,Jio),e(k,Jn),e(Jn,Sle),e(Sle,Yio),e(Jn,Kio),e(Jn,qB),e(qB,Zio),e(Jn,edo),e(Jn,jB),e(jB,odo),e(Jn,rdo),e(k,tdo),e(k,ch),e(ch,Rle),e(Rle,ado),e(ch,ndo),e(ch,DB),e(DB,sdo),e(ch,ldo),e(k,ido),e(k,Yn),e(Yn,Ple),e(Ple,ddo),e(Yn,cdo),e(Yn,GB),e(GB,fdo),e(Yn,mdo),e(Yn,OB),e(OB,gdo),e(Yn,hdo),e(k,pdo),e(k,Kn),e(Kn,Ble),e(Ble,_do),e(Kn,udo),e(Kn,VB),e(VB,bdo),e(Kn,vdo),e(Kn,XB),e(XB,Fdo),e(Kn,Tdo),e(k,Mdo),e(k,Zn),e(Zn,Nle),e(Nle,Edo),e(Zn,Cdo),e(Zn,zB),e(zB,wdo),e(Zn,Ado),e(Zn,QB),e(QB,Ldo),e(Zn,ydo),e(k,xdo),e(k,es),e(es,Ile),e(Ile,$do),e(es,kdo),e(es,WB),e(WB,Sdo),e(es,Rdo),e(es,HB),e(HB,Pdo),e(es,Bdo),e(k,Ndo),e(k,os),e(os,qle),e(qle,Ido),e(os,qdo),e(os,UB),e(UB,jdo),e(os,Ddo),e(os,JB),e(JB,Gdo),e(os,Odo),e(k,Vdo),e(k,rs),e(rs,jle),e(jle,Xdo),e(rs,zdo),e(rs,YB),e(YB,Qdo),e(rs,Wdo),e(rs,KB),e(KB,Hdo),e(rs,Udo),e(k,Jdo),e(k,fh),e(fh,Dle),e(Dle,Ydo),e(fh,Kdo),e(fh,ZB),e(ZB,Zdo),e(fh,eco),e(k,oco),e(k,ts),e(ts,Gle),e(Gle,rco),e(ts,tco),e(ts,eN),e(eN,aco),e(ts,nco),e(ts,oN),e(oN,sco),e(ts,lco),e(k,ico),e(k,mh),e(mh,Ole),e(Ole,dco),e(mh,cco),e(mh,rN),e(rN,fco),e(mh,mco),e(k,gco),e(k,as),e(as,Vle),e(Vle,hco),e(as,pco),e(as,tN),e(tN,_co),e(as,uco),e(as,aN),e(aN,bco),e(as,vco),e(k,Fco),e(k,ns),e(ns,Xle),e(Xle,Tco),e(ns,Mco),e(ns,nN),e(nN,Eco),e(ns,Cco),e(ns,sN),e(sN,wco),e(ns,Aco),e(k,Lco),e(k,ss),e(ss,zle),e(zle,yco),e(ss,xco),e(ss,lN),e(lN,$co),e(ss,kco),e(ss,iN),e(iN,Sco),e(ss,Rco),e(k,Pco),e(k,gh),e(gh,Qle),e(Qle,Bco),e(gh,Nco),e(gh,dN),e(dN,Ico),e(gh,qco),e(k,jco),e(k,ls),e(ls,Wle),e(Wle,Dco),e(ls,Gco),e(ls,cN),e(cN,Oco),e(ls,Vco),e(ls,fN),e(fN,Xco),e(ls,zco),e(k,Qco),e(k,is),e(is,Hle),e(Hle,Wco),e(is,Hco),e(is,mN),e(mN,Uco),e(is,Jco),e(is,gN),e(gN,Yco),e(is,Kco),e(k,Zco),e(k,ds),e(ds,Ule),e(Ule,efo),e(ds,ofo),e(ds,hN),e(hN,rfo),e(ds,tfo),e(ds,pN),e(pN,afo),e(ds,nfo),e(k,sfo),e(k,hh),e(hh,Jle),e(Jle,lfo),e(hh,ifo),e(hh,_N),e(_N,dfo),e(hh,cfo),e(k,ffo),e(k,cs),e(cs,Yle),e(Yle,mfo),e(cs,gfo),e(cs,uN),e(uN,hfo),e(cs,pfo),e(cs,bN),e(bN,_fo),e(cs,ufo),e(k,bfo),e(k,ph),e(ph,Kle),e(Kle,vfo),e(ph,Ffo),e(ph,Zle),e(Zle,Tfo),e(ph,Mfo),e(k,Efo),e(k,fs),e(fs,eie),e(eie,Cfo),e(fs,wfo),e(fs,vN),e(vN,Afo),e(fs,Lfo),e(fs,FN),e(FN,yfo),e(fs,xfo),e(k,$fo),e(k,ms),e(ms,oie),e(oie,kfo),e(ms,Sfo),e(ms,TN),e(TN,Rfo),e(ms,Pfo),e(ms,MN),e(MN,Bfo),e(ms,Nfo),e(k,Ifo),e(k,gs),e(gs,rie),e(rie,qfo),e(gs,jfo),e(gs,EN),e(EN,Dfo),e(gs,Gfo),e(gs,CN),e(CN,Ofo),e(gs,Vfo),e(k,Xfo),e(k,hs),e(hs,tie),e(tie,zfo),e(hs,Qfo),e(hs,wN),e(wN,Wfo),e(hs,Hfo),e(hs,AN),e(AN,Ufo),e(hs,Jfo),e(k,Yfo),e(k,ps),e(ps,aie),e(aie,Kfo),e(ps,Zfo),e(ps,LN),e(LN,emo),e(ps,omo),e(ps,yN),e(yN,rmo),e(ps,tmo),e(k,amo),e(k,_s),e(_s,nie),e(nie,nmo),e(_s,smo),e(_s,xN),e(xN,lmo),e(_s,imo),e(_s,$N),e($N,dmo),e(_s,cmo),e(k,fmo),e(k,us),e(us,sie),e(sie,mmo),e(us,gmo),e(us,kN),e(kN,hmo),e(us,pmo),e(us,SN),e(SN,_mo),e(us,umo),e(k,bmo),e(k,_h),e(_h,lie),e(lie,vmo),e(_h,Fmo),e(_h,RN),e(RN,Tmo),e(_h,Mmo),e(k,Emo),e(k,bs),e(bs,iie),e(iie,Cmo),e(bs,wmo),e(bs,PN),e(PN,Amo),e(bs,Lmo),e(bs,BN),e(BN,ymo),e(bs,xmo),e(k,$mo),e(k,uh),e(uh,die),e(die,kmo),e(uh,Smo),e(uh,NN),e(NN,Rmo),e(uh,Pmo),e(k,Bmo),e(k,bh),e(bh,cie),e(cie,Nmo),e(bh,Imo),e(bh,IN),e(IN,qmo),e(bh,jmo),e(k,Dmo),e(k,vs),e(vs,fie),e(fie,Gmo),e(vs,Omo),e(vs,qN),e(qN,Vmo),e(vs,Xmo),e(vs,jN),e(jN,zmo),e(vs,Qmo),e(k,Wmo),e(k,Fs),e(Fs,mie),e(mie,Hmo),e(Fs,Umo),e(Fs,DN),e(DN,Jmo),e(Fs,Ymo),e(Fs,GN),e(GN,Kmo),e(Fs,Zmo),e(k,ego),e(k,Ts),e(Ts,gie),e(gie,ogo),e(Ts,rgo),e(Ts,ON),e(ON,tgo),e(Ts,ago),e(Ts,VN),e(VN,ngo),e(Ts,sgo),e(k,lgo),e(k,vh),e(vh,hie),e(hie,igo),e(vh,dgo),e(vh,XN),e(XN,cgo),e(vh,fgo),e(k,mgo),e(k,Ms),e(Ms,pie),e(pie,ggo),e(Ms,hgo),e(Ms,zN),e(zN,pgo),e(Ms,_go),e(Ms,QN),e(QN,ugo),e(Ms,bgo),e(k,vgo),e(k,Es),e(Es,_ie),e(_ie,Fgo),e(Es,Tgo),e(Es,WN),e(WN,Mgo),e(Es,Ego),e(Es,HN),e(HN,Cgo),e(Es,wgo),e(k,Ago),e(k,Cs),e(Cs,uie),e(uie,Lgo),e(Cs,ygo),e(Cs,UN),e(UN,xgo),e(Cs,$go),e(Cs,JN),e(JN,kgo),e(Cs,Sgo),e(k,Rgo),e(k,ws),e(ws,bie),e(bie,Pgo),e(ws,Bgo),e(ws,YN),e(YN,Ngo),e(ws,Igo),e(ws,KN),e(KN,qgo),e(ws,jgo),e(k,Dgo),e(k,As),e(As,vie),e(vie,Ggo),e(As,Ogo),e(As,ZN),e(ZN,Vgo),e(As,Xgo),e(As,eI),e(eI,zgo),e(As,Qgo),e(k,Wgo),e(k,Ls),e(Ls,Fie),e(Fie,Hgo),e(Ls,Ugo),e(Ls,oI),e(oI,Jgo),e(Ls,Ygo),e(Ls,rI),e(rI,Kgo),e(Ls,Zgo),e(k,eho),e(k,ys),e(ys,Tie),e(Tie,oho),e(ys,rho),e(ys,tI),e(tI,tho),e(ys,aho),e(ys,aI),e(aI,nho),e(ys,sho),e(k,lho),e(k,xs),e(xs,Mie),e(Mie,iho),e(xs,dho),e(xs,nI),e(nI,cho),e(xs,fho),e(xs,sI),e(sI,mho),e(xs,gho),e(k,hho),e(k,Fh),e(Fh,Eie),e(Eie,pho),e(Fh,_ho),e(Fh,lI),e(lI,uho),e(Fh,bho),e(k,vho),e(k,$s),e($s,Cie),e(Cie,Fho),e($s,Tho),e($s,iI),e(iI,Mho),e($s,Eho),e($s,dI),e(dI,Cho),e($s,who),e(k,Aho),e(k,Th),e(Th,wie),e(wie,Lho),e(Th,yho),e(Th,cI),e(cI,xho),e(Th,$ho),e(k,kho),e(k,Mh),e(Mh,Aie),e(Aie,Sho),e(Mh,Rho),e(Mh,fI),e(fI,Pho),e(Mh,Bho),e(k,Nho),e(k,Eh),e(Eh,Lie),e(Lie,Iho),e(Eh,qho),e(Eh,mI),e(mI,jho),e(Eh,Dho),e(k,Gho),e(k,Ch),e(Ch,yie),e(yie,Oho),e(Ch,Vho),e(Ch,gI),e(gI,Xho),e(Ch,zho),e(k,Qho),e(k,ks),e(ks,xie),e(xie,Who),e(ks,Hho),e(ks,hI),e(hI,Uho),e(ks,Jho),e(ks,pI),e(pI,Yho),e(ks,Kho),e(k,Zho),e(k,wh),e(wh,$ie),e($ie,epo),e(wh,opo),e(wh,_I),e(_I,rpo),e(wh,tpo),e(k,apo),e(k,Ss),e(Ss,kie),e(kie,npo),e(Ss,spo),e(Ss,uI),e(uI,lpo),e(Ss,ipo),e(Ss,bI),e(bI,dpo),e(Ss,cpo),e(k,fpo),e(k,Rs),e(Rs,Sie),e(Sie,mpo),e(Rs,gpo),e(Rs,vI),e(vI,hpo),e(Rs,ppo),e(Rs,FI),e(FI,_po),e(Rs,upo),e(k,bpo),e(k,Ps),e(Ps,Rie),e(Rie,vpo),e(Ps,Fpo),e(Ps,TI),e(TI,Tpo),e(Ps,Mpo),e(Ps,MI),e(MI,Epo),e(Ps,Cpo),e(k,wpo),e(k,Bs),e(Bs,Pie),e(Pie,Apo),e(Bs,Lpo),e(Bs,EI),e(EI,ypo),e(Bs,xpo),e(Bs,CI),e(CI,$po),e(Bs,kpo),e(k,Spo),e(k,Ns),e(Ns,Bie),e(Bie,Rpo),e(Ns,Ppo),e(Ns,wI),e(wI,Bpo),e(Ns,Npo),e(Ns,AI),e(AI,Ipo),e(Ns,qpo),e(k,jpo),e(k,Is),e(Is,Nie),e(Nie,Dpo),e(Is,Gpo),e(Is,LI),e(LI,Opo),e(Is,Vpo),e(Is,yI),e(yI,Xpo),e(Is,zpo),e(k,Qpo),e(k,Ah),e(Ah,Iie),e(Iie,Wpo),e(Ah,Hpo),e(Ah,xI),e(xI,Upo),e(Ah,Jpo),e(k,Ypo),e(k,Lh),e(Lh,qie),e(qie,Kpo),e(Lh,Zpo),e(Lh,$I),e($I,e_o),e(Lh,o_o),e(k,r_o),e(k,qs),e(qs,jie),e(jie,t_o),e(qs,a_o),e(qs,kI),e(kI,n_o),e(qs,s_o),e(qs,SI),e(SI,l_o),e(qs,i_o),e(k,d_o),e(k,js),e(js,Die),e(Die,c_o),e(js,f_o),e(js,RI),e(RI,m_o),e(js,g_o),e(js,PI),e(PI,h_o),e(js,p_o),e(k,__o),e(k,Ds),e(Ds,Gie),e(Gie,u_o),e(Ds,b_o),e(Ds,BI),e(BI,v_o),e(Ds,F_o),e(Ds,NI),e(NI,T_o),e(Ds,M_o),e(k,E_o),e(k,yh),e(yh,Oie),e(Oie,C_o),e(yh,w_o),e(yh,II),e(II,A_o),e(yh,L_o),e(k,y_o),e(k,xh),e(xh,Vie),e(Vie,x_o),e(xh,$_o),e(xh,qI),e(qI,k_o),e(xh,S_o),e(k,R_o),e(k,$h),e($h,Xie),e(Xie,P_o),e($h,B_o),e($h,jI),e(jI,N_o),e($h,I_o),e(k,q_o),e(k,Gs),e(Gs,zie),e(zie,j_o),e(Gs,D_o),e(Gs,DI),e(DI,G_o),e(Gs,O_o),e(Gs,GI),e(GI,V_o),e(Gs,X_o),e(k,z_o),e(k,Os),e(Os,Qie),e(Qie,Q_o),e(Os,W_o),e(Os,OI),e(OI,H_o),e(Os,U_o),e(Os,VI),e(VI,J_o),e(Os,Y_o),e(k,K_o),e(k,kh),e(kh,Wie),e(Wie,Z_o),e(kh,euo),e(kh,XI),e(XI,ouo),e(kh,ruo),e(k,tuo),e(k,Sh),e(Sh,Hie),e(Hie,auo),e(Sh,nuo),e(Sh,zI),e(zI,suo),e(Sh,luo),e(k,iuo),e(k,Rh),e(Rh,Uie),e(Uie,duo),e(Rh,cuo),e(Rh,QI),e(QI,fuo),e(Rh,muo),e(k,guo),e(k,Vs),e(Vs,Jie),e(Jie,huo),e(Vs,puo),e(Vs,WI),e(WI,_uo),e(Vs,uuo),e(Vs,HI),e(HI,buo),e(Vs,vuo),e(k,Fuo),e(k,Ph),e(Ph,Yie),e(Yie,Tuo),e(Ph,Muo),e(Ph,UI),e(UI,Euo),e(Ph,Cuo),e(k,wuo),e(k,Bh),e(Bh,Kie),e(Kie,Auo),e(Bh,Luo),e(Bh,JI),e(JI,yuo),e(Bh,xuo),e(k,$uo),e(k,Xs),e(Xs,Zie),e(Zie,kuo),e(Xs,Suo),e(Xs,YI),e(YI,Ruo),e(Xs,Puo),e(Xs,KI),e(KI,Buo),e(Xs,Nuo),e(k,Iuo),e(k,zs),e(zs,ede),e(ede,quo),e(zs,juo),e(zs,ZI),e(ZI,Duo),e(zs,Guo),e(zs,eq),e(eq,Ouo),e(zs,Vuo),e(k,Xuo),e(k,Qs),e(Qs,ode),e(ode,zuo),e(Qs,Quo),e(Qs,oq),e(oq,Wuo),e(Qs,Huo),e(Qs,rq),e(rq,Uuo),e(Qs,Juo),e(k,Yuo),e(k,Ws),e(Ws,rde),e(rde,Kuo),e(Ws,Zuo),e(Ws,tq),e(tq,e2o),e(Ws,o2o),e(Ws,aq),e(aq,r2o),e(Ws,t2o),e(yr,a2o),M(Nh,yr,null),e(Lo,n2o),e(Lo,Ih),M(CL,Ih,null),e(Ih,s2o),e(Ih,tde),e(tde,l2o),b(f,BXe,u),b(f,ji,u),e(ji,qh),e(qh,ade),M(wL,ade,null),e(ji,i2o),e(ji,nde),e(nde,d2o),b(f,NXe,u),b(f,yo,u),M(AL,yo,null),e(yo,c2o),e(yo,LL),e(LL,f2o),e(LL,nq),e(nq,m2o),e(LL,g2o),e(yo,h2o),e(yo,yL),e(yL,p2o),e(yL,sde),e(sde,_2o),e(yL,u2o),e(yo,b2o),e(yo,Ue),M(xL,Ue,null),e(Ue,v2o),e(Ue,lde),e(lde,F2o),e(Ue,T2o),e(Ue,Ba),e(Ba,M2o),e(Ba,ide),e(ide,E2o),e(Ba,C2o),e(Ba,dde),e(dde,w2o),e(Ba,A2o),e(Ba,cde),e(cde,L2o),e(Ba,y2o),e(Ue,x2o),e(Ue,Y),e(Y,jh),e(jh,fde),e(fde,$2o),e(jh,k2o),e(jh,sq),e(sq,S2o),e(jh,R2o),e(Y,P2o),e(Y,Dh),e(Dh,mde),e(mde,B2o),e(Dh,N2o),e(Dh,lq),e(lq,I2o),e(Dh,q2o),e(Y,j2o),e(Y,Gh),e(Gh,gde),e(gde,D2o),e(Gh,G2o),e(Gh,iq),e(iq,O2o),e(Gh,V2o),e(Y,X2o),e(Y,Oh),e(Oh,hde),e(hde,z2o),e(Oh,Q2o),e(Oh,dq),e(dq,W2o),e(Oh,H2o),e(Y,U2o),e(Y,Vh),e(Vh,pde),e(pde,J2o),e(Vh,Y2o),e(Vh,cq),e(cq,K2o),e(Vh,Z2o),e(Y,e1o),e(Y,Xh),e(Xh,_de),e(_de,o1o),e(Xh,r1o),e(Xh,fq),e(fq,t1o),e(Xh,a1o),e(Y,n1o),e(Y,zh),e(zh,ude),e(ude,s1o),e(zh,l1o),e(zh,mq),e(mq,i1o),e(zh,d1o),e(Y,c1o),e(Y,Qh),e(Qh,bde),e(bde,f1o),e(Qh,m1o),e(Qh,gq),e(gq,g1o),e(Qh,h1o),e(Y,p1o),e(Y,Wh),e(Wh,vde),e(vde,_1o),e(Wh,u1o),e(Wh,hq),e(hq,b1o),e(Wh,v1o),e(Y,F1o),e(Y,Hh),e(Hh,Fde),e(Fde,T1o),e(Hh,M1o),e(Hh,pq),e(pq,E1o),e(Hh,C1o),e(Y,w1o),e(Y,Uh),e(Uh,Tde),e(Tde,A1o),e(Uh,L1o),e(Uh,_q),e(_q,y1o),e(Uh,x1o),e(Y,$1o),e(Y,Jh),e(Jh,Mde),e(Mde,k1o),e(Jh,S1o),e(Jh,uq),e(uq,R1o),e(Jh,P1o),e(Y,B1o),e(Y,Yh),e(Yh,Ede),e(Ede,N1o),e(Yh,I1o),e(Yh,bq),e(bq,q1o),e(Yh,j1o),e(Y,D1o),e(Y,Kh),e(Kh,Cde),e(Cde,G1o),e(Kh,O1o),e(Kh,vq),e(vq,V1o),e(Kh,X1o),e(Y,z1o),e(Y,Zh),e(Zh,wde),e(wde,Q1o),e(Zh,W1o),e(Zh,Fq),e(Fq,H1o),e(Zh,U1o),e(Y,J1o),e(Y,ep),e(ep,Ade),e(Ade,Y1o),e(ep,K1o),e(ep,Tq),e(Tq,Z1o),e(ep,ebo),e(Y,obo),e(Y,op),e(op,Lde),e(Lde,rbo),e(op,tbo),e(op,Mq),e(Mq,abo),e(op,nbo),e(Y,sbo),e(Y,rp),e(rp,yde),e(yde,lbo),e(rp,ibo),e(rp,Eq),e(Eq,dbo),e(rp,cbo),e(Y,fbo),e(Y,tp),e(tp,xde),e(xde,mbo),e(tp,gbo),e(tp,Cq),e(Cq,hbo),e(tp,pbo),e(Y,_bo),e(Y,ap),e(ap,$de),e($de,ubo),e(ap,bbo),e(ap,wq),e(wq,vbo),e(ap,Fbo),e(Y,Tbo),e(Y,np),e(np,kde),e(kde,Mbo),e(np,Ebo),e(np,Aq),e(Aq,Cbo),e(np,wbo),e(Y,Abo),e(Y,sp),e(sp,Sde),e(Sde,Lbo),e(sp,ybo),e(sp,Lq),e(Lq,xbo),e(sp,$bo),e(Y,kbo),e(Y,lp),e(lp,Rde),e(Rde,Sbo),e(lp,Rbo),e(lp,yq),e(yq,Pbo),e(lp,Bbo),e(Y,Nbo),e(Y,ip),e(ip,Pde),e(Pde,Ibo),e(ip,qbo),e(ip,xq),e(xq,jbo),e(ip,Dbo),e(Y,Gbo),e(Y,dp),e(dp,Bde),e(Bde,Obo),e(dp,Vbo),e(dp,$q),e($q,Xbo),e(dp,zbo),e(Y,Qbo),e(Y,cp),e(cp,Nde),e(Nde,Wbo),e(cp,Hbo),e(cp,kq),e(kq,Ubo),e(cp,Jbo),e(Y,Ybo),e(Y,fp),e(fp,Ide),e(Ide,Kbo),e(fp,Zbo),e(fp,Sq),e(Sq,evo),e(fp,ovo),e(Y,rvo),e(Y,mp),e(mp,qde),e(qde,tvo),e(mp,avo),e(mp,Rq),e(Rq,nvo),e(mp,svo),e(Y,lvo),e(Y,gp),e(gp,jde),e(jde,ivo),e(gp,dvo),e(gp,Pq),e(Pq,cvo),e(gp,fvo),e(Y,mvo),e(Y,hp),e(hp,Dde),e(Dde,gvo),e(hp,hvo),e(hp,Bq),e(Bq,pvo),e(hp,_vo),e(Y,uvo),e(Y,pp),e(pp,Gde),e(Gde,bvo),e(pp,vvo),e(pp,Nq),e(Nq,Fvo),e(pp,Tvo),e(Y,Mvo),e(Y,_p),e(_p,Ode),e(Ode,Evo),e(_p,Cvo),e(_p,Iq),e(Iq,wvo),e(_p,Avo),e(Y,Lvo),e(Y,up),e(up,Vde),e(Vde,yvo),e(up,xvo),e(up,qq),e(qq,$vo),e(up,kvo),e(Y,Svo),e(Y,bp),e(bp,Xde),e(Xde,Rvo),e(bp,Pvo),e(bp,jq),e(jq,Bvo),e(bp,Nvo),e(Ue,Ivo),M(vp,Ue,null),e(Ue,qvo),M(Fp,Ue,null),e(yo,jvo),e(yo,Tp),M($L,Tp,null),e(Tp,Dvo),e(Tp,zde),e(zde,Gvo),b(f,IXe,u),b(f,Di,u),e(Di,Mp),e(Mp,Qde),M(kL,Qde,null),e(Di,Ovo),e(Di,Wde),e(Wde,Vvo),b(f,qXe,u),b(f,xo,u),M(SL,xo,null),e(xo,Xvo),e(xo,RL),e(RL,zvo),e(RL,Dq),e(Dq,Qvo),e(RL,Wvo),e(xo,Hvo),e(xo,PL),e(PL,Uvo),e(PL,Hde),e(Hde,Jvo),e(PL,Yvo),e(xo,Kvo),e(xo,Je),M(BL,Je,null),e(Je,Zvo),e(Je,Ude),e(Ude,eFo),e(Je,oFo),e(Je,Gi),e(Gi,rFo),e(Gi,Jde),e(Jde,tFo),e(Gi,aFo),e(Gi,Yde),e(Yde,nFo),e(Gi,sFo),e(Je,lFo),e(Je,pe),e(pe,Ep),e(Ep,Kde),e(Kde,iFo),e(Ep,dFo),e(Ep,Gq),e(Gq,cFo),e(Ep,fFo),e(pe,mFo),e(pe,Cp),e(Cp,Zde),e(Zde,gFo),e(Cp,hFo),e(Cp,ece),e(ece,pFo),e(Cp,_Fo),e(pe,uFo),e(pe,wp),e(wp,oce),e(oce,bFo),e(wp,vFo),e(wp,Oq),e(Oq,FFo),e(wp,TFo),e(pe,MFo),e(pe,Ap),e(Ap,rce),e(rce,EFo),e(Ap,CFo),e(Ap,Vq),e(Vq,wFo),e(Ap,AFo),e(pe,LFo),e(pe,Lp),e(Lp,tce),e(tce,yFo),e(Lp,xFo),e(Lp,Xq),e(Xq,$Fo),e(Lp,kFo),e(pe,SFo),e(pe,yp),e(yp,ace),e(ace,RFo),e(yp,PFo),e(yp,zq),e(zq,BFo),e(yp,NFo),e(pe,IFo),e(pe,xp),e(xp,nce),e(nce,qFo),e(xp,jFo),e(xp,Qq),e(Qq,DFo),e(xp,GFo),e(pe,OFo),e(pe,$p),e($p,sce),e(sce,VFo),e($p,XFo),e($p,Wq),e(Wq,zFo),e($p,QFo),e(pe,WFo),e(pe,kp),e(kp,lce),e(lce,HFo),e(kp,UFo),e(kp,Hq),e(Hq,JFo),e(kp,YFo),e(pe,KFo),e(pe,Sp),e(Sp,ice),e(ice,ZFo),e(Sp,e6o),e(Sp,Uq),e(Uq,o6o),e(Sp,r6o),e(pe,t6o),e(pe,Rp),e(Rp,dce),e(dce,a6o),e(Rp,n6o),e(Rp,Jq),e(Jq,s6o),e(Rp,l6o),e(pe,i6o),e(pe,Pp),e(Pp,cce),e(cce,d6o),e(Pp,c6o),e(Pp,Yq),e(Yq,f6o),e(Pp,m6o),e(pe,g6o),e(pe,Bp),e(Bp,fce),e(fce,h6o),e(Bp,p6o),e(Bp,Kq),e(Kq,_6o),e(Bp,u6o),e(pe,b6o),e(pe,Np),e(Np,mce),e(mce,v6o),e(Np,F6o),e(Np,Zq),e(Zq,T6o),e(Np,M6o),e(pe,E6o),e(pe,Ip),e(Ip,gce),e(gce,C6o),e(Ip,w6o),e(Ip,ej),e(ej,A6o),e(Ip,L6o),e(pe,y6o),e(pe,qp),e(qp,hce),e(hce,x6o),e(qp,$6o),e(qp,oj),e(oj,k6o),e(qp,S6o),e(pe,R6o),e(pe,jp),e(jp,pce),e(pce,P6o),e(jp,B6o),e(jp,rj),e(rj,N6o),e(jp,I6o),e(pe,q6o),e(pe,Dp),e(Dp,_ce),e(_ce,j6o),e(Dp,D6o),e(Dp,tj),e(tj,G6o),e(Dp,O6o),e(Je,V6o),M(Gp,Je,null),e(Je,X6o),M(Op,Je,null),e(xo,z6o),e(xo,Vp),M(NL,Vp,null),e(Vp,Q6o),e(Vp,uce),e(uce,W6o),b(f,jXe,u),b(f,Oi,u),e(Oi,Xp),e(Xp,bce),M(IL,bce,null),e(Oi,H6o),e(Oi,vce),e(vce,U6o),b(f,DXe,u),b(f,$o,u),M(qL,$o,null),e($o,J6o),e($o,Vi),e(Vi,Y6o),e(Vi,aj),e(aj,K6o),e(Vi,Z6o),e(Vi,nj),e(nj,eTo),e(Vi,oTo),e($o,rTo),e($o,jL),e(jL,tTo),e(jL,Fce),e(Fce,aTo),e(jL,nTo),e($o,sTo),e($o,it),M(DL,it,null),e(it,lTo),e(it,Tce),e(Tce,iTo),e(it,dTo),e(it,Xi),e(Xi,cTo),e(Xi,Mce),e(Mce,fTo),e(Xi,mTo),e(Xi,sj),e(sj,gTo),e(Xi,hTo),e(it,pTo),M(zp,it,null),e($o,_To),e($o,Ye),M(GL,Ye,null),e(Ye,uTo),e(Ye,Ece),e(Ece,bTo),e(Ye,vTo),e(Ye,Na),e(Na,FTo),e(Na,Cce),e(Cce,TTo),e(Na,MTo),e(Na,wce),e(wce,ETo),e(Na,CTo),e(Na,Ace),e(Ace,wTo),e(Na,ATo),e(Ye,LTo),e(Ye,y),e(y,Qp),e(Qp,Lce),e(Lce,yTo),e(Qp,xTo),e(Qp,lj),e(lj,$To),e(Qp,kTo),e(y,STo),e(y,Wp),e(Wp,yce),e(yce,RTo),e(Wp,PTo),e(Wp,ij),e(ij,BTo),e(Wp,NTo),e(y,ITo),e(y,Hp),e(Hp,xce),e(xce,qTo),e(Hp,jTo),e(Hp,dj),e(dj,DTo),e(Hp,GTo),e(y,OTo),e(y,Up),e(Up,$ce),e($ce,VTo),e(Up,XTo),e(Up,cj),e(cj,zTo),e(Up,QTo),e(y,WTo),e(y,Jp),e(Jp,kce),e(kce,HTo),e(Jp,UTo),e(Jp,fj),e(fj,JTo),e(Jp,YTo),e(y,KTo),e(y,Yp),e(Yp,Sce),e(Sce,ZTo),e(Yp,e7o),e(Yp,mj),e(mj,o7o),e(Yp,r7o),e(y,t7o),e(y,Kp),e(Kp,Rce),e(Rce,a7o),e(Kp,n7o),e(Kp,gj),e(gj,s7o),e(Kp,l7o),e(y,i7o),e(y,Zp),e(Zp,Pce),e(Pce,d7o),e(Zp,c7o),e(Zp,hj),e(hj,f7o),e(Zp,m7o),e(y,g7o),e(y,e_),e(e_,Bce),e(Bce,h7o),e(e_,p7o),e(e_,pj),e(pj,_7o),e(e_,u7o),e(y,b7o),e(y,o_),e(o_,Nce),e(Nce,v7o),e(o_,F7o),e(o_,_j),e(_j,T7o),e(o_,M7o),e(y,E7o),e(y,r_),e(r_,Ice),e(Ice,C7o),e(r_,w7o),e(r_,uj),e(uj,A7o),e(r_,L7o),e(y,y7o),e(y,t_),e(t_,qce),e(qce,x7o),e(t_,$7o),e(t_,bj),e(bj,k7o),e(t_,S7o),e(y,R7o),e(y,a_),e(a_,jce),e(jce,P7o),e(a_,B7o),e(a_,vj),e(vj,N7o),e(a_,I7o),e(y,q7o),e(y,n_),e(n_,Dce),e(Dce,j7o),e(n_,D7o),e(n_,Fj),e(Fj,G7o),e(n_,O7o),e(y,V7o),e(y,s_),e(s_,Gce),e(Gce,X7o),e(s_,z7o),e(s_,Tj),e(Tj,Q7o),e(s_,W7o),e(y,H7o),e(y,l_),e(l_,Oce),e(Oce,U7o),e(l_,J7o),e(l_,Mj),e(Mj,Y7o),e(l_,K7o),e(y,Z7o),e(y,i_),e(i_,Vce),e(Vce,e8o),e(i_,o8o),e(i_,Ej),e(Ej,r8o),e(i_,t8o),e(y,a8o),e(y,d_),e(d_,Xce),e(Xce,n8o),e(d_,s8o),e(d_,Cj),e(Cj,l8o),e(d_,i8o),e(y,d8o),e(y,c_),e(c_,zce),e(zce,c8o),e(c_,f8o),e(c_,wj),e(wj,m8o),e(c_,g8o),e(y,h8o),e(y,f_),e(f_,Qce),e(Qce,p8o),e(f_,_8o),e(f_,Aj),e(Aj,u8o),e(f_,b8o),e(y,v8o),e(y,m_),e(m_,Wce),e(Wce,F8o),e(m_,T8o),e(m_,Lj),e(Lj,M8o),e(m_,E8o),e(y,C8o),e(y,g_),e(g_,Hce),e(Hce,w8o),e(g_,A8o),e(g_,yj),e(yj,L8o),e(g_,y8o),e(y,x8o),e(y,h_),e(h_,Uce),e(Uce,$8o),e(h_,k8o),e(h_,xj),e(xj,S8o),e(h_,R8o),e(y,P8o),e(y,p_),e(p_,Jce),e(Jce,B8o),e(p_,N8o),e(p_,$j),e($j,I8o),e(p_,q8o),e(y,j8o),e(y,__),e(__,Yce),e(Yce,D8o),e(__,G8o),e(__,kj),e(kj,O8o),e(__,V8o),e(y,X8o),e(y,u_),e(u_,Kce),e(Kce,z8o),e(u_,Q8o),e(u_,Sj),e(Sj,W8o),e(u_,H8o),e(y,U8o),e(y,b_),e(b_,Zce),e(Zce,J8o),e(b_,Y8o),e(b_,Rj),e(Rj,K8o),e(b_,Z8o),e(y,eMo),e(y,v_),e(v_,efe),e(efe,oMo),e(v_,rMo),e(v_,Pj),e(Pj,tMo),e(v_,aMo),e(y,nMo),e(y,F_),e(F_,ofe),e(ofe,sMo),e(F_,lMo),e(F_,Bj),e(Bj,iMo),e(F_,dMo),e(y,cMo),e(y,T_),e(T_,rfe),e(rfe,fMo),e(T_,mMo),e(T_,Nj),e(Nj,gMo),e(T_,hMo),e(y,pMo),e(y,M_),e(M_,tfe),e(tfe,_Mo),e(M_,uMo),e(M_,Ij),e(Ij,bMo),e(M_,vMo),e(y,FMo),e(y,E_),e(E_,afe),e(afe,TMo),e(E_,MMo),e(E_,qj),e(qj,EMo),e(E_,CMo),e(y,wMo),e(y,C_),e(C_,nfe),e(nfe,AMo),e(C_,LMo),e(C_,jj),e(jj,yMo),e(C_,xMo),e(y,$Mo),e(y,w_),e(w_,sfe),e(sfe,kMo),e(w_,SMo),e(w_,Dj),e(Dj,RMo),e(w_,PMo),e(y,BMo),e(y,Hs),e(Hs,lfe),e(lfe,NMo),e(Hs,IMo),e(Hs,Gj),e(Gj,qMo),e(Hs,jMo),e(Hs,Oj),e(Oj,DMo),e(Hs,GMo),e(y,OMo),e(y,A_),e(A_,ife),e(ife,VMo),e(A_,XMo),e(A_,Vj),e(Vj,zMo),e(A_,QMo),e(y,WMo),e(y,L_),e(L_,dfe),e(dfe,HMo),e(L_,UMo),e(L_,Xj),e(Xj,JMo),e(L_,YMo),e(y,KMo),e(y,y_),e(y_,cfe),e(cfe,ZMo),e(y_,e4o),e(y_,zj),e(zj,o4o),e(y_,r4o),e(y,t4o),e(y,x_),e(x_,ffe),e(ffe,a4o),e(x_,n4o),e(x_,Qj),e(Qj,s4o),e(x_,l4o),e(y,i4o),e(y,$_),e($_,mfe),e(mfe,d4o),e($_,c4o),e($_,Wj),e(Wj,f4o),e($_,m4o),e(y,g4o),e(y,k_),e(k_,gfe),e(gfe,h4o),e(k_,p4o),e(k_,Hj),e(Hj,_4o),e(k_,u4o),e(y,b4o),e(y,S_),e(S_,hfe),e(hfe,v4o),e(S_,F4o),e(S_,Uj),e(Uj,T4o),e(S_,M4o),e(y,E4o),e(y,R_),e(R_,pfe),e(pfe,C4o),e(R_,w4o),e(R_,Jj),e(Jj,A4o),e(R_,L4o),e(y,y4o),e(y,P_),e(P_,_fe),e(_fe,x4o),e(P_,$4o),e(P_,Yj),e(Yj,k4o),e(P_,S4o),e(y,R4o),e(y,B_),e(B_,ufe),e(ufe,P4o),e(B_,B4o),e(B_,bfe),e(bfe,N4o),e(B_,I4o),e(y,q4o),e(y,N_),e(N_,vfe),e(vfe,j4o),e(N_,D4o),e(N_,Kj),e(Kj,G4o),e(N_,O4o),e(y,V4o),e(y,I_),e(I_,Ffe),e(Ffe,X4o),e(I_,z4o),e(I_,Zj),e(Zj,Q4o),e(I_,W4o),e(y,H4o),e(y,q_),e(q_,Tfe),e(Tfe,U4o),e(q_,J4o),e(q_,eD),e(eD,Y4o),e(q_,K4o),e(y,Z4o),e(y,j_),e(j_,Mfe),e(Mfe,eEo),e(j_,oEo),e(j_,oD),e(oD,rEo),e(j_,tEo),e(y,aEo),e(y,D_),e(D_,Efe),e(Efe,nEo),e(D_,sEo),e(D_,rD),e(rD,lEo),e(D_,iEo),e(y,dEo),e(y,G_),e(G_,Cfe),e(Cfe,cEo),e(G_,fEo),e(G_,tD),e(tD,mEo),e(G_,gEo),e(y,hEo),e(y,O_),e(O_,wfe),e(wfe,pEo),e(O_,_Eo),e(O_,aD),e(aD,uEo),e(O_,bEo),e(y,vEo),e(y,V_),e(V_,Afe),e(Afe,FEo),e(V_,TEo),e(V_,nD),e(nD,MEo),e(V_,EEo),e(y,CEo),e(y,X_),e(X_,Lfe),e(Lfe,wEo),e(X_,AEo),e(X_,sD),e(sD,LEo),e(X_,yEo),e(y,xEo),e(y,z_),e(z_,yfe),e(yfe,$Eo),e(z_,kEo),e(z_,lD),e(lD,SEo),e(z_,REo),e(y,PEo),e(y,Q_),e(Q_,xfe),e(xfe,BEo),e(Q_,NEo),e(Q_,iD),e(iD,IEo),e(Q_,qEo),e(y,jEo),e(y,W_),e(W_,$fe),e($fe,DEo),e(W_,GEo),e(W_,dD),e(dD,OEo),e(W_,VEo),e(y,XEo),e(y,H_),e(H_,kfe),e(kfe,zEo),e(H_,QEo),e(H_,cD),e(cD,WEo),e(H_,HEo),e(y,UEo),e(y,U_),e(U_,Sfe),e(Sfe,JEo),e(U_,YEo),e(U_,fD),e(fD,KEo),e(U_,ZEo),e(y,eCo),e(y,J_),e(J_,Rfe),e(Rfe,oCo),e(J_,rCo),e(J_,mD),e(mD,tCo),e(J_,aCo),e(y,nCo),e(y,Y_),e(Y_,Pfe),e(Pfe,sCo),e(Y_,lCo),e(Y_,gD),e(gD,iCo),e(Y_,dCo),e(y,cCo),e(y,K_),e(K_,Bfe),e(Bfe,fCo),e(K_,mCo),e(K_,hD),e(hD,gCo),e(K_,hCo),e(y,pCo),e(y,Z_),e(Z_,Nfe),e(Nfe,_Co),e(Z_,uCo),e(Z_,pD),e(pD,bCo),e(Z_,vCo),e(y,FCo),e(y,eu),e(eu,Ife),e(Ife,TCo),e(eu,MCo),e(eu,_D),e(_D,ECo),e(eu,CCo),e(y,wCo),e(y,ou),e(ou,qfe),e(qfe,ACo),e(ou,LCo),e(ou,uD),e(uD,yCo),e(ou,xCo),e(y,$Co),e(y,ru),e(ru,jfe),e(jfe,kCo),e(ru,SCo),e(ru,bD),e(bD,RCo),e(ru,PCo),e(y,BCo),e(y,tu),e(tu,Dfe),e(Dfe,NCo),e(tu,ICo),e(tu,vD),e(vD,qCo),e(tu,jCo),e(y,DCo),e(y,au),e(au,Gfe),e(Gfe,GCo),e(au,OCo),e(au,FD),e(FD,VCo),e(au,XCo),e(y,zCo),e(y,nu),e(nu,Ofe),e(Ofe,QCo),e(nu,WCo),e(nu,TD),e(TD,HCo),e(nu,UCo),e(y,JCo),e(y,su),e(su,Vfe),e(Vfe,YCo),e(su,KCo),e(su,MD),e(MD,ZCo),e(su,e5o),e(y,o5o),e(y,lu),e(lu,Xfe),e(Xfe,r5o),e(lu,t5o),e(lu,ED),e(ED,a5o),e(lu,n5o),e(y,s5o),e(y,iu),e(iu,zfe),e(zfe,l5o),e(iu,i5o),e(iu,CD),e(CD,d5o),e(iu,c5o),e(y,f5o),e(y,du),e(du,Qfe),e(Qfe,m5o),e(du,g5o),e(du,wD),e(wD,h5o),e(du,p5o),e(y,_5o),e(y,cu),e(cu,Wfe),e(Wfe,u5o),e(cu,b5o),e(cu,AD),e(AD,v5o),e(cu,F5o),e(y,T5o),e(y,fu),e(fu,Hfe),e(Hfe,M5o),e(fu,E5o),e(fu,LD),e(LD,C5o),e(fu,w5o),e(y,A5o),e(y,mu),e(mu,Ufe),e(Ufe,L5o),e(mu,y5o),e(mu,yD),e(yD,x5o),e(mu,$5o),e(y,k5o),e(y,gu),e(gu,Jfe),e(Jfe,S5o),e(gu,R5o),e(gu,xD),e(xD,P5o),e(gu,B5o),e(y,N5o),e(y,hu),e(hu,Yfe),e(Yfe,I5o),e(hu,q5o),e(hu,$D),e($D,j5o),e(hu,D5o),e(y,G5o),e(y,pu),e(pu,Kfe),e(Kfe,O5o),e(pu,V5o),e(pu,kD),e(kD,X5o),e(pu,z5o),e(y,Q5o),e(y,_u),e(_u,Zfe),e(Zfe,W5o),e(_u,H5o),e(_u,SD),e(SD,U5o),e(_u,J5o),e(y,Y5o),e(y,uu),e(uu,eme),e(eme,K5o),e(uu,Z5o),e(uu,RD),e(RD,e3o),e(uu,o3o),e(y,r3o),e(y,bu),e(bu,ome),e(ome,t3o),e(bu,a3o),e(bu,PD),e(PD,n3o),e(bu,s3o),e(y,l3o),e(y,vu),e(vu,rme),e(rme,i3o),e(vu,d3o),e(vu,BD),e(BD,c3o),e(vu,f3o),e(y,m3o),e(y,Fu),e(Fu,tme),e(tme,g3o),e(Fu,h3o),e(Fu,ND),e(ND,p3o),e(Fu,_3o),e(y,u3o),e(y,Tu),e(Tu,ame),e(ame,b3o),e(Tu,v3o),e(Tu,ID),e(ID,F3o),e(Tu,T3o),e(y,M3o),e(y,Mu),e(Mu,nme),e(nme,E3o),e(Mu,C3o),e(Mu,qD),e(qD,w3o),e(Mu,A3o),e(y,L3o),e(y,Eu),e(Eu,sme),e(sme,y3o),e(Eu,x3o),e(Eu,jD),e(jD,$3o),e(Eu,k3o),e(y,S3o),e(y,Cu),e(Cu,lme),e(lme,R3o),e(Cu,P3o),e(Cu,DD),e(DD,B3o),e(Cu,N3o),e(y,I3o),e(y,wu),e(wu,ime),e(ime,q3o),e(wu,j3o),e(wu,GD),e(GD,D3o),e(wu,G3o),e(y,O3o),e(y,Au),e(Au,dme),e(dme,V3o),e(Au,X3o),e(Au,OD),e(OD,z3o),e(Au,Q3o),e(y,W3o),e(y,Lu),e(Lu,cme),e(cme,H3o),e(Lu,U3o),e(Lu,VD),e(VD,J3o),e(Lu,Y3o),e(y,K3o),e(y,yu),e(yu,fme),e(fme,Z3o),e(yu,e0o),e(yu,XD),e(XD,o0o),e(yu,r0o),e(y,t0o),e(y,xu),e(xu,mme),e(mme,a0o),e(xu,n0o),e(xu,zD),e(zD,s0o),e(xu,l0o),e(y,i0o),e(y,$u),e($u,gme),e(gme,d0o),e($u,c0o),e($u,QD),e(QD,f0o),e($u,m0o),e(y,g0o),e(y,ku),e(ku,hme),e(hme,h0o),e(ku,p0o),e(ku,WD),e(WD,_0o),e(ku,u0o),e(y,b0o),e(y,Su),e(Su,pme),e(pme,v0o),e(Su,F0o),e(Su,HD),e(HD,T0o),e(Su,M0o),e(y,E0o),e(y,Ru),e(Ru,_me),e(_me,C0o),e(Ru,w0o),e(Ru,UD),e(UD,A0o),e(Ru,L0o),e(y,y0o),e(y,Pu),e(Pu,ume),e(ume,x0o),e(Pu,$0o),e(Pu,JD),e(JD,k0o),e(Pu,S0o),e(y,R0o),e(y,Bu),e(Bu,bme),e(bme,P0o),e(Bu,B0o),e(Bu,YD),e(YD,N0o),e(Bu,I0o),e(y,q0o),e(y,Nu),e(Nu,vme),e(vme,j0o),e(Nu,D0o),e(Nu,KD),e(KD,G0o),e(Nu,O0o),e(y,V0o),e(y,Iu),e(Iu,Fme),e(Fme,X0o),e(Iu,z0o),e(Iu,ZD),e(ZD,Q0o),e(Iu,W0o),e(y,H0o),e(y,qu),e(qu,Tme),e(Tme,U0o),e(qu,J0o),e(qu,eG),e(eG,Y0o),e(qu,K0o),e(y,Z0o),e(y,ju),e(ju,Mme),e(Mme,ewo),e(ju,owo),e(ju,oG),e(oG,rwo),e(ju,two),e(y,awo),e(y,Du),e(Du,Eme),e(Eme,nwo),e(Du,swo),e(Du,rG),e(rG,lwo),e(Du,iwo),e(y,dwo),e(y,Gu),e(Gu,Cme),e(Cme,cwo),e(Gu,fwo),e(Gu,tG),e(tG,mwo),e(Gu,gwo),e(y,hwo),e(y,Ou),e(Ou,wme),e(wme,pwo),e(Ou,_wo),e(Ou,aG),e(aG,uwo),e(Ou,bwo),e(y,vwo),e(y,Vu),e(Vu,Ame),e(Ame,Fwo),e(Vu,Two),e(Vu,nG),e(nG,Mwo),e(Vu,Ewo),e(y,Cwo),e(y,Xu),e(Xu,Lme),e(Lme,wwo),e(Xu,Awo),e(Xu,sG),e(sG,Lwo),e(Xu,ywo),e(y,xwo),e(y,zu),e(zu,yme),e(yme,$wo),e(zu,kwo),e(zu,lG),e(lG,Swo),e(zu,Rwo),e(y,Pwo),e(y,Qu),e(Qu,xme),e(xme,Bwo),e(Qu,Nwo),e(Qu,iG),e(iG,Iwo),e(Qu,qwo),e(y,jwo),e(y,Wu),e(Wu,$me),e($me,Dwo),e(Wu,Gwo),e(Wu,dG),e(dG,Owo),e(Wu,Vwo),e(y,Xwo),e(y,Hu),e(Hu,kme),e(kme,zwo),e(Hu,Qwo),e(Hu,cG),e(cG,Wwo),e(Hu,Hwo),e(y,Uwo),e(y,Uu),e(Uu,Sme),e(Sme,Jwo),e(Uu,Ywo),e(Uu,fG),e(fG,Kwo),e(Uu,Zwo),e(Ye,eAo),e(Ye,Ju),e(Ju,oAo),e(Ju,Rme),e(Rme,rAo),e(Ju,tAo),e(Ju,Pme),e(Pme,aAo),e(Ye,nAo),M(Yu,Ye,null),b(f,GXe,u),b(f,zi,u),e(zi,Ku),e(Ku,Bme),M(OL,Bme,null),e(zi,sAo),e(zi,Nme),e(Nme,lAo),b(f,OXe,u),b(f,ko,u),M(VL,ko,null),e(ko,iAo),e(ko,Qi),e(Qi,dAo),e(Qi,mG),e(mG,cAo),e(Qi,fAo),e(Qi,gG),e(gG,mAo),e(Qi,gAo),e(ko,hAo),e(ko,XL),e(XL,pAo),e(XL,Ime),e(Ime,_Ao),e(XL,uAo),e(ko,bAo),e(ko,dt),M(zL,dt,null),e(dt,vAo),e(dt,qme),e(qme,FAo),e(dt,TAo),e(dt,Wi),e(Wi,MAo),e(Wi,jme),e(jme,EAo),e(Wi,CAo),e(Wi,hG),e(hG,wAo),e(Wi,AAo),e(dt,LAo),M(Zu,dt,null),e(ko,yAo),e(ko,Ke),M(QL,Ke,null),e(Ke,xAo),e(Ke,Dme),e(Dme,$Ao),e(Ke,kAo),e(Ke,Ia),e(Ia,SAo),e(Ia,Gme),e(Gme,RAo),e(Ia,PAo),e(Ia,Ome),e(Ome,BAo),e(Ia,NAo),e(Ia,Vme),e(Vme,IAo),e(Ia,qAo),e(Ke,jAo),e(Ke,G),e(G,e2),e(e2,Xme),e(Xme,DAo),e(e2,GAo),e(e2,pG),e(pG,OAo),e(e2,VAo),e(G,XAo),e(G,o2),e(o2,zme),e(zme,zAo),e(o2,QAo),e(o2,_G),e(_G,WAo),e(o2,HAo),e(G,UAo),e(G,r2),e(r2,Qme),e(Qme,JAo),e(r2,YAo),e(r2,uG),e(uG,KAo),e(r2,ZAo),e(G,eLo),e(G,t2),e(t2,Wme),e(Wme,oLo),e(t2,rLo),e(t2,bG),e(bG,tLo),e(t2,aLo),e(G,nLo),e(G,a2),e(a2,Hme),e(Hme,sLo),e(a2,lLo),e(a2,vG),e(vG,iLo),e(a2,dLo),e(G,cLo),e(G,n2),e(n2,Ume),e(Ume,fLo),e(n2,mLo),e(n2,FG),e(FG,gLo),e(n2,hLo),e(G,pLo),e(G,s2),e(s2,Jme),e(Jme,_Lo),e(s2,uLo),e(s2,TG),e(TG,bLo),e(s2,vLo),e(G,FLo),e(G,l2),e(l2,Yme),e(Yme,TLo),e(l2,MLo),e(l2,MG),e(MG,ELo),e(l2,CLo),e(G,wLo),e(G,i2),e(i2,Kme),e(Kme,ALo),e(i2,LLo),e(i2,EG),e(EG,yLo),e(i2,xLo),e(G,$Lo),e(G,d2),e(d2,Zme),e(Zme,kLo),e(d2,SLo),e(d2,CG),e(CG,RLo),e(d2,PLo),e(G,BLo),e(G,c2),e(c2,ege),e(ege,NLo),e(c2,ILo),e(c2,wG),e(wG,qLo),e(c2,jLo),e(G,DLo),e(G,f2),e(f2,oge),e(oge,GLo),e(f2,OLo),e(f2,AG),e(AG,VLo),e(f2,XLo),e(G,zLo),e(G,m2),e(m2,rge),e(rge,QLo),e(m2,WLo),e(m2,LG),e(LG,HLo),e(m2,ULo),e(G,JLo),e(G,g2),e(g2,tge),e(tge,YLo),e(g2,KLo),e(g2,yG),e(yG,ZLo),e(g2,eyo),e(G,oyo),e(G,h2),e(h2,age),e(age,ryo),e(h2,tyo),e(h2,xG),e(xG,ayo),e(h2,nyo),e(G,syo),e(G,p2),e(p2,nge),e(nge,lyo),e(p2,iyo),e(p2,$G),e($G,dyo),e(p2,cyo),e(G,fyo),e(G,_2),e(_2,sge),e(sge,myo),e(_2,gyo),e(_2,kG),e(kG,hyo),e(_2,pyo),e(G,_yo),e(G,u2),e(u2,lge),e(lge,uyo),e(u2,byo),e(u2,SG),e(SG,vyo),e(u2,Fyo),e(G,Tyo),e(G,b2),e(b2,ige),e(ige,Myo),e(b2,Eyo),e(b2,RG),e(RG,Cyo),e(b2,wyo),e(G,Ayo),e(G,v2),e(v2,dge),e(dge,Lyo),e(v2,yyo),e(v2,PG),e(PG,xyo),e(v2,$yo),e(G,kyo),e(G,F2),e(F2,cge),e(cge,Syo),e(F2,Ryo),e(F2,BG),e(BG,Pyo),e(F2,Byo),e(G,Nyo),e(G,T2),e(T2,fge),e(fge,Iyo),e(T2,qyo),e(T2,NG),e(NG,jyo),e(T2,Dyo),e(G,Gyo),e(G,M2),e(M2,mge),e(mge,Oyo),e(M2,Vyo),e(M2,IG),e(IG,Xyo),e(M2,zyo),e(G,Qyo),e(G,E2),e(E2,gge),e(gge,Wyo),e(E2,Hyo),e(E2,qG),e(qG,Uyo),e(E2,Jyo),e(G,Yyo),e(G,C2),e(C2,hge),e(hge,Kyo),e(C2,Zyo),e(C2,jG),e(jG,e9o),e(C2,o9o),e(G,r9o),e(G,w2),e(w2,pge),e(pge,t9o),e(w2,a9o),e(w2,DG),e(DG,n9o),e(w2,s9o),e(G,l9o),e(G,A2),e(A2,_ge),e(_ge,i9o),e(A2,d9o),e(A2,GG),e(GG,c9o),e(A2,f9o),e(G,m9o),e(G,L2),e(L2,uge),e(uge,g9o),e(L2,h9o),e(L2,OG),e(OG,p9o),e(L2,_9o),e(G,u9o),e(G,y2),e(y2,bge),e(bge,b9o),e(y2,v9o),e(y2,VG),e(VG,F9o),e(y2,T9o),e(G,M9o),e(G,x2),e(x2,vge),e(vge,E9o),e(x2,C9o),e(x2,XG),e(XG,w9o),e(x2,A9o),e(G,L9o),e(G,$2),e($2,Fge),e(Fge,y9o),e($2,x9o),e($2,zG),e(zG,$9o),e($2,k9o),e(G,S9o),e(G,k2),e(k2,Tge),e(Tge,R9o),e(k2,P9o),e(k2,QG),e(QG,B9o),e(k2,N9o),e(G,I9o),e(G,S2),e(S2,Mge),e(Mge,q9o),e(S2,j9o),e(S2,WG),e(WG,D9o),e(S2,G9o),e(G,O9o),e(G,R2),e(R2,Ege),e(Ege,V9o),e(R2,X9o),e(R2,HG),e(HG,z9o),e(R2,Q9o),e(G,W9o),e(G,P2),e(P2,Cge),e(Cge,H9o),e(P2,U9o),e(P2,UG),e(UG,J9o),e(P2,Y9o),e(G,K9o),e(G,B2),e(B2,wge),e(wge,Z9o),e(B2,exo),e(B2,JG),e(JG,oxo),e(B2,rxo),e(G,txo),e(G,N2),e(N2,Age),e(Age,axo),e(N2,nxo),e(N2,YG),e(YG,sxo),e(N2,lxo),e(G,ixo),e(G,I2),e(I2,Lge),e(Lge,dxo),e(I2,cxo),e(I2,KG),e(KG,fxo),e(I2,mxo),e(G,gxo),e(G,q2),e(q2,yge),e(yge,hxo),e(q2,pxo),e(q2,ZG),e(ZG,_xo),e(q2,uxo),e(G,bxo),e(G,j2),e(j2,xge),e(xge,vxo),e(j2,Fxo),e(j2,eO),e(eO,Txo),e(j2,Mxo),e(G,Exo),e(G,D2),e(D2,$ge),e($ge,Cxo),e(D2,wxo),e(D2,oO),e(oO,Axo),e(D2,Lxo),e(G,yxo),e(G,G2),e(G2,kge),e(kge,xxo),e(G2,$xo),e(G2,rO),e(rO,kxo),e(G2,Sxo),e(G,Rxo),e(G,O2),e(O2,Sge),e(Sge,Pxo),e(O2,Bxo),e(O2,tO),e(tO,Nxo),e(O2,Ixo),e(G,qxo),e(G,V2),e(V2,Rge),e(Rge,jxo),e(V2,Dxo),e(V2,aO),e(aO,Gxo),e(V2,Oxo),e(G,Vxo),e(G,X2),e(X2,Pge),e(Pge,Xxo),e(X2,zxo),e(X2,nO),e(nO,Qxo),e(X2,Wxo),e(Ke,Hxo),e(Ke,z2),e(z2,Uxo),e(z2,Bge),e(Bge,Jxo),e(z2,Yxo),e(z2,Nge),e(Nge,Kxo),e(Ke,Zxo),M(Q2,Ke,null),b(f,VXe,u),b(f,Hi,u),e(Hi,W2),e(W2,Ige),M(WL,Ige,null),e(Hi,e$o),e(Hi,qge),e(qge,o$o),b(f,XXe,u),b(f,So,u),M(HL,So,null),e(So,r$o),e(So,Ui),e(Ui,t$o),e(Ui,sO),e(sO,a$o),e(Ui,n$o),e(Ui,lO),e(lO,s$o),e(Ui,l$o),e(So,i$o),e(So,UL),e(UL,d$o),e(UL,jge),e(jge,c$o),e(UL,f$o),e(So,m$o),e(So,ct),M(JL,ct,null),e(ct,g$o),e(ct,Dge),e(Dge,h$o),e(ct,p$o),e(ct,Ji),e(Ji,_$o),e(Ji,Gge),e(Gge,u$o),e(Ji,b$o),e(Ji,iO),e(iO,v$o),e(Ji,F$o),e(ct,T$o),M(H2,ct,null),e(So,M$o),e(So,Ze),M(YL,Ze,null),e(Ze,E$o),e(Ze,Oge),e(Oge,C$o),e(Ze,w$o),e(Ze,qa),e(qa,A$o),e(qa,Vge),e(Vge,L$o),e(qa,y$o),e(qa,Xge),e(Xge,x$o),e(qa,$$o),e(qa,zge),e(zge,k$o),e(qa,S$o),e(Ze,R$o),e(Ze,z),e(z,U2),e(U2,Qge),e(Qge,P$o),e(U2,B$o),e(U2,dO),e(dO,N$o),e(U2,I$o),e(z,q$o),e(z,J2),e(J2,Wge),e(Wge,j$o),e(J2,D$o),e(J2,cO),e(cO,G$o),e(J2,O$o),e(z,V$o),e(z,Y2),e(Y2,Hge),e(Hge,X$o),e(Y2,z$o),e(Y2,fO),e(fO,Q$o),e(Y2,W$o),e(z,H$o),e(z,K2),e(K2,Uge),e(Uge,U$o),e(K2,J$o),e(K2,mO),e(mO,Y$o),e(K2,K$o),e(z,Z$o),e(z,Z2),e(Z2,Jge),e(Jge,eko),e(Z2,oko),e(Z2,gO),e(gO,rko),e(Z2,tko),e(z,ako),e(z,e1),e(e1,Yge),e(Yge,nko),e(e1,sko),e(e1,hO),e(hO,lko),e(e1,iko),e(z,dko),e(z,o1),e(o1,Kge),e(Kge,cko),e(o1,fko),e(o1,pO),e(pO,mko),e(o1,gko),e(z,hko),e(z,r1),e(r1,Zge),e(Zge,pko),e(r1,_ko),e(r1,_O),e(_O,uko),e(r1,bko),e(z,vko),e(z,t1),e(t1,ehe),e(ehe,Fko),e(t1,Tko),e(t1,uO),e(uO,Mko),e(t1,Eko),e(z,Cko),e(z,a1),e(a1,ohe),e(ohe,wko),e(a1,Ako),e(a1,bO),e(bO,Lko),e(a1,yko),e(z,xko),e(z,n1),e(n1,rhe),e(rhe,$ko),e(n1,kko),e(n1,vO),e(vO,Sko),e(n1,Rko),e(z,Pko),e(z,s1),e(s1,the),e(the,Bko),e(s1,Nko),e(s1,FO),e(FO,Iko),e(s1,qko),e(z,jko),e(z,l1),e(l1,ahe),e(ahe,Dko),e(l1,Gko),e(l1,TO),e(TO,Oko),e(l1,Vko),e(z,Xko),e(z,i1),e(i1,nhe),e(nhe,zko),e(i1,Qko),e(i1,MO),e(MO,Wko),e(i1,Hko),e(z,Uko),e(z,d1),e(d1,she),e(she,Jko),e(d1,Yko),e(d1,EO),e(EO,Kko),e(d1,Zko),e(z,eSo),e(z,c1),e(c1,lhe),e(lhe,oSo),e(c1,rSo),e(c1,CO),e(CO,tSo),e(c1,aSo),e(z,nSo),e(z,f1),e(f1,ihe),e(ihe,sSo),e(f1,lSo),e(f1,wO),e(wO,iSo),e(f1,dSo),e(z,cSo),e(z,m1),e(m1,dhe),e(dhe,fSo),e(m1,mSo),e(m1,AO),e(AO,gSo),e(m1,hSo),e(z,pSo),e(z,g1),e(g1,che),e(che,_So),e(g1,uSo),e(g1,LO),e(LO,bSo),e(g1,vSo),e(z,FSo),e(z,h1),e(h1,fhe),e(fhe,TSo),e(h1,MSo),e(h1,yO),e(yO,ESo),e(h1,CSo),e(z,wSo),e(z,p1),e(p1,mhe),e(mhe,ASo),e(p1,LSo),e(p1,xO),e(xO,ySo),e(p1,xSo),e(z,$So),e(z,_1),e(_1,ghe),e(ghe,kSo),e(_1,SSo),e(_1,$O),e($O,RSo),e(_1,PSo),e(z,BSo),e(z,u1),e(u1,hhe),e(hhe,NSo),e(u1,ISo),e(u1,kO),e(kO,qSo),e(u1,jSo),e(z,DSo),e(z,b1),e(b1,phe),e(phe,GSo),e(b1,OSo),e(b1,SO),e(SO,VSo),e(b1,XSo),e(z,zSo),e(z,v1),e(v1,_he),e(_he,QSo),e(v1,WSo),e(v1,RO),e(RO,HSo),e(v1,USo),e(z,JSo),e(z,F1),e(F1,uhe),e(uhe,YSo),e(F1,KSo),e(F1,PO),e(PO,ZSo),e(F1,eRo),e(z,oRo),e(z,T1),e(T1,bhe),e(bhe,rRo),e(T1,tRo),e(T1,BO),e(BO,aRo),e(T1,nRo),e(z,sRo),e(z,M1),e(M1,vhe),e(vhe,lRo),e(M1,iRo),e(M1,NO),e(NO,dRo),e(M1,cRo),e(z,fRo),e(z,E1),e(E1,Fhe),e(Fhe,mRo),e(E1,gRo),e(E1,IO),e(IO,hRo),e(E1,pRo),e(z,_Ro),e(z,C1),e(C1,The),e(The,uRo),e(C1,bRo),e(C1,qO),e(qO,vRo),e(C1,FRo),e(z,TRo),e(z,w1),e(w1,Mhe),e(Mhe,MRo),e(w1,ERo),e(w1,jO),e(jO,CRo),e(w1,wRo),e(z,ARo),e(z,A1),e(A1,Ehe),e(Ehe,LRo),e(A1,yRo),e(A1,DO),e(DO,xRo),e(A1,$Ro),e(z,kRo),e(z,L1),e(L1,Che),e(Che,SRo),e(L1,RRo),e(L1,GO),e(GO,PRo),e(L1,BRo),e(z,NRo),e(z,y1),e(y1,whe),e(whe,IRo),e(y1,qRo),e(y1,OO),e(OO,jRo),e(y1,DRo),e(z,GRo),e(z,x1),e(x1,Ahe),e(Ahe,ORo),e(x1,VRo),e(x1,VO),e(VO,XRo),e(x1,zRo),e(z,QRo),e(z,$1),e($1,Lhe),e(Lhe,WRo),e($1,HRo),e($1,XO),e(XO,URo),e($1,JRo),e(z,YRo),e(z,k1),e(k1,yhe),e(yhe,KRo),e(k1,ZRo),e(k1,zO),e(zO,ePo),e(k1,oPo),e(z,rPo),e(z,S1),e(S1,xhe),e(xhe,tPo),e(S1,aPo),e(S1,QO),e(QO,nPo),e(S1,sPo),e(z,lPo),e(z,R1),e(R1,$he),e($he,iPo),e(R1,dPo),e(R1,WO),e(WO,cPo),e(R1,fPo),e(z,mPo),e(z,P1),e(P1,khe),e(khe,gPo),e(P1,hPo),e(P1,HO),e(HO,pPo),e(P1,_Po),e(Ze,uPo),e(Ze,B1),e(B1,bPo),e(B1,She),e(She,vPo),e(B1,FPo),e(B1,Rhe),e(Rhe,TPo),e(Ze,MPo),M(N1,Ze,null),b(f,zXe,u),b(f,Yi,u),e(Yi,I1),e(I1,Phe),M(KL,Phe,null),e(Yi,EPo),e(Yi,Bhe),e(Bhe,CPo),b(f,QXe,u),b(f,Ro,u),M(ZL,Ro,null),e(Ro,wPo),e(Ro,Ki),e(Ki,APo),e(Ki,UO),e(UO,LPo),e(Ki,yPo),e(Ki,JO),e(JO,xPo),e(Ki,$Po),e(Ro,kPo),e(Ro,ey),e(ey,SPo),e(ey,Nhe),e(Nhe,RPo),e(ey,PPo),e(Ro,BPo),e(Ro,ft),M(oy,ft,null),e(ft,NPo),e(ft,Ihe),e(Ihe,IPo),e(ft,qPo),e(ft,Zi),e(Zi,jPo),e(Zi,qhe),e(qhe,DPo),e(Zi,GPo),e(Zi,YO),e(YO,OPo),e(Zi,VPo),e(ft,XPo),M(q1,ft,null),e(Ro,zPo),e(Ro,eo),M(ry,eo,null),e(eo,QPo),e(eo,jhe),e(jhe,WPo),e(eo,HPo),e(eo,ja),e(ja,UPo),e(ja,Dhe),e(Dhe,JPo),e(ja,YPo),e(ja,Ghe),e(Ghe,KPo),e(ja,ZPo),e(ja,Ohe),e(Ohe,eBo),e(ja,oBo),e(eo,rBo),e(eo,W),e(W,j1),e(j1,Vhe),e(Vhe,tBo),e(j1,aBo),e(j1,KO),e(KO,nBo),e(j1,sBo),e(W,lBo),e(W,D1),e(D1,Xhe),e(Xhe,iBo),e(D1,dBo),e(D1,ZO),e(ZO,cBo),e(D1,fBo),e(W,mBo),e(W,G1),e(G1,zhe),e(zhe,gBo),e(G1,hBo),e(G1,eV),e(eV,pBo),e(G1,_Bo),e(W,uBo),e(W,O1),e(O1,Qhe),e(Qhe,bBo),e(O1,vBo),e(O1,oV),e(oV,FBo),e(O1,TBo),e(W,MBo),e(W,V1),e(V1,Whe),e(Whe,EBo),e(V1,CBo),e(V1,rV),e(rV,wBo),e(V1,ABo),e(W,LBo),e(W,X1),e(X1,Hhe),e(Hhe,yBo),e(X1,xBo),e(X1,tV),e(tV,$Bo),e(X1,kBo),e(W,SBo),e(W,z1),e(z1,Uhe),e(Uhe,RBo),e(z1,PBo),e(z1,aV),e(aV,BBo),e(z1,NBo),e(W,IBo),e(W,Q1),e(Q1,Jhe),e(Jhe,qBo),e(Q1,jBo),e(Q1,nV),e(nV,DBo),e(Q1,GBo),e(W,OBo),e(W,W1),e(W1,Yhe),e(Yhe,VBo),e(W1,XBo),e(W1,sV),e(sV,zBo),e(W1,QBo),e(W,WBo),e(W,H1),e(H1,Khe),e(Khe,HBo),e(H1,UBo),e(H1,lV),e(lV,JBo),e(H1,YBo),e(W,KBo),e(W,U1),e(U1,Zhe),e(Zhe,ZBo),e(U1,eNo),e(U1,iV),e(iV,oNo),e(U1,rNo),e(W,tNo),e(W,J1),e(J1,epe),e(epe,aNo),e(J1,nNo),e(J1,dV),e(dV,sNo),e(J1,lNo),e(W,iNo),e(W,Y1),e(Y1,ope),e(ope,dNo),e(Y1,cNo),e(Y1,cV),e(cV,fNo),e(Y1,mNo),e(W,gNo),e(W,K1),e(K1,rpe),e(rpe,hNo),e(K1,pNo),e(K1,fV),e(fV,_No),e(K1,uNo),e(W,bNo),e(W,Z1),e(Z1,tpe),e(tpe,vNo),e(Z1,FNo),e(Z1,mV),e(mV,TNo),e(Z1,MNo),e(W,ENo),e(W,eb),e(eb,ape),e(ape,CNo),e(eb,wNo),e(eb,gV),e(gV,ANo),e(eb,LNo),e(W,yNo),e(W,ob),e(ob,npe),e(npe,xNo),e(ob,$No),e(ob,hV),e(hV,kNo),e(ob,SNo),e(W,RNo),e(W,rb),e(rb,spe),e(spe,PNo),e(rb,BNo),e(rb,pV),e(pV,NNo),e(rb,INo),e(W,qNo),e(W,tb),e(tb,lpe),e(lpe,jNo),e(tb,DNo),e(tb,_V),e(_V,GNo),e(tb,ONo),e(W,VNo),e(W,ab),e(ab,ipe),e(ipe,XNo),e(ab,zNo),e(ab,uV),e(uV,QNo),e(ab,WNo),e(W,HNo),e(W,nb),e(nb,dpe),e(dpe,UNo),e(nb,JNo),e(nb,bV),e(bV,YNo),e(nb,KNo),e(W,ZNo),e(W,sb),e(sb,cpe),e(cpe,eIo),e(sb,oIo),e(sb,vV),e(vV,rIo),e(sb,tIo),e(W,aIo),e(W,lb),e(lb,fpe),e(fpe,nIo),e(lb,sIo),e(lb,FV),e(FV,lIo),e(lb,iIo),e(W,dIo),e(W,ib),e(ib,mpe),e(mpe,cIo),e(ib,fIo),e(ib,TV),e(TV,mIo),e(ib,gIo),e(W,hIo),e(W,db),e(db,gpe),e(gpe,pIo),e(db,_Io),e(db,MV),e(MV,uIo),e(db,bIo),e(W,vIo),e(W,cb),e(cb,hpe),e(hpe,FIo),e(cb,TIo),e(cb,EV),e(EV,MIo),e(cb,EIo),e(W,CIo),e(W,fb),e(fb,ppe),e(ppe,wIo),e(fb,AIo),e(fb,CV),e(CV,LIo),e(fb,yIo),e(W,xIo),e(W,mb),e(mb,_pe),e(_pe,$Io),e(mb,kIo),e(mb,wV),e(wV,SIo),e(mb,RIo),e(W,PIo),e(W,gb),e(gb,upe),e(upe,BIo),e(gb,NIo),e(gb,AV),e(AV,IIo),e(gb,qIo),e(W,jIo),e(W,hb),e(hb,bpe),e(bpe,DIo),e(hb,GIo),e(hb,LV),e(LV,OIo),e(hb,VIo),e(W,XIo),e(W,pb),e(pb,vpe),e(vpe,zIo),e(pb,QIo),e(pb,yV),e(yV,WIo),e(pb,HIo),e(W,UIo),e(W,_b),e(_b,Fpe),e(Fpe,JIo),e(_b,YIo),e(_b,xV),e(xV,KIo),e(_b,ZIo),e(W,eqo),e(W,ub),e(ub,Tpe),e(Tpe,oqo),e(ub,rqo),e(ub,$V),e($V,tqo),e(ub,aqo),e(W,nqo),e(W,bb),e(bb,Mpe),e(Mpe,sqo),e(bb,lqo),e(bb,Epe),e(Epe,iqo),e(bb,dqo),e(W,cqo),e(W,vb),e(vb,Cpe),e(Cpe,fqo),e(vb,mqo),e(vb,kV),e(kV,gqo),e(vb,hqo),e(W,pqo),e(W,Fb),e(Fb,wpe),e(wpe,_qo),e(Fb,uqo),e(Fb,SV),e(SV,bqo),e(Fb,vqo),e(W,Fqo),e(W,Tb),e(Tb,Ape),e(Ape,Tqo),e(Tb,Mqo),e(Tb,RV),e(RV,Eqo),e(Tb,Cqo),e(W,wqo),e(W,Mb),e(Mb,Lpe),e(Lpe,Aqo),e(Mb,Lqo),e(Mb,PV),e(PV,yqo),e(Mb,xqo),e(eo,$qo),e(eo,Eb),e(Eb,kqo),e(Eb,ype),e(ype,Sqo),e(Eb,Rqo),e(Eb,xpe),e(xpe,Pqo),e(eo,Bqo),M(Cb,eo,null),b(f,WXe,u),b(f,ed,u),e(ed,wb),e(wb,$pe),M(ty,$pe,null),e(ed,Nqo),e(ed,kpe),e(kpe,Iqo),b(f,HXe,u),b(f,Po,u),M(ay,Po,null),e(Po,qqo),e(Po,od),e(od,jqo),e(od,BV),e(BV,Dqo),e(od,Gqo),e(od,NV),e(NV,Oqo),e(od,Vqo),e(Po,Xqo),e(Po,ny),e(ny,zqo),e(ny,Spe),e(Spe,Qqo),e(ny,Wqo),e(Po,Hqo),e(Po,mt),M(sy,mt,null),e(mt,Uqo),e(mt,Rpe),e(Rpe,Jqo),e(mt,Yqo),e(mt,rd),e(rd,Kqo),e(rd,Ppe),e(Ppe,Zqo),e(rd,ejo),e(rd,IV),e(IV,ojo),e(rd,rjo),e(mt,tjo),M(Ab,mt,null),e(Po,ajo),e(Po,oo),M(ly,oo,null),e(oo,njo),e(oo,Bpe),e(Bpe,sjo),e(oo,ljo),e(oo,Da),e(Da,ijo),e(Da,Npe),e(Npe,djo),e(Da,cjo),e(Da,Ipe),e(Ipe,fjo),e(Da,mjo),e(Da,qpe),e(qpe,gjo),e(Da,hjo),e(oo,pjo),e(oo,fe),e(fe,Lb),e(Lb,jpe),e(jpe,_jo),e(Lb,ujo),e(Lb,qV),e(qV,bjo),e(Lb,vjo),e(fe,Fjo),e(fe,yb),e(yb,Dpe),e(Dpe,Tjo),e(yb,Mjo),e(yb,jV),e(jV,Ejo),e(yb,Cjo),e(fe,wjo),e(fe,xb),e(xb,Gpe),e(Gpe,Ajo),e(xb,Ljo),e(xb,DV),e(DV,yjo),e(xb,xjo),e(fe,$jo),e(fe,$b),e($b,Ope),e(Ope,kjo),e($b,Sjo),e($b,GV),e(GV,Rjo),e($b,Pjo),e(fe,Bjo),e(fe,kb),e(kb,Vpe),e(Vpe,Njo),e(kb,Ijo),e(kb,OV),e(OV,qjo),e(kb,jjo),e(fe,Djo),e(fe,Sb),e(Sb,Xpe),e(Xpe,Gjo),e(Sb,Ojo),e(Sb,VV),e(VV,Vjo),e(Sb,Xjo),e(fe,zjo),e(fe,Rb),e(Rb,zpe),e(zpe,Qjo),e(Rb,Wjo),e(Rb,XV),e(XV,Hjo),e(Rb,Ujo),e(fe,Jjo),e(fe,Pb),e(Pb,Qpe),e(Qpe,Yjo),e(Pb,Kjo),e(Pb,zV),e(zV,Zjo),e(Pb,eDo),e(fe,oDo),e(fe,Bb),e(Bb,Wpe),e(Wpe,rDo),e(Bb,tDo),e(Bb,QV),e(QV,aDo),e(Bb,nDo),e(fe,sDo),e(fe,Nb),e(Nb,Hpe),e(Hpe,lDo),e(Nb,iDo),e(Nb,WV),e(WV,dDo),e(Nb,cDo),e(fe,fDo),e(fe,Ib),e(Ib,Upe),e(Upe,mDo),e(Ib,gDo),e(Ib,HV),e(HV,hDo),e(Ib,pDo),e(fe,_Do),e(fe,qb),e(qb,Jpe),e(Jpe,uDo),e(qb,bDo),e(qb,UV),e(UV,vDo),e(qb,FDo),e(fe,TDo),e(fe,jb),e(jb,Ype),e(Ype,MDo),e(jb,EDo),e(jb,JV),e(JV,CDo),e(jb,wDo),e(fe,ADo),e(fe,Db),e(Db,Kpe),e(Kpe,LDo),e(Db,yDo),e(Db,YV),e(YV,xDo),e(Db,$Do),e(fe,kDo),e(fe,Gb),e(Gb,Zpe),e(Zpe,SDo),e(Gb,RDo),e(Gb,KV),e(KV,PDo),e(Gb,BDo),e(fe,NDo),e(fe,Ob),e(Ob,e_e),e(e_e,IDo),e(Ob,qDo),e(Ob,ZV),e(ZV,jDo),e(Ob,DDo),e(fe,GDo),e(fe,Vb),e(Vb,o_e),e(o_e,ODo),e(Vb,VDo),e(Vb,eX),e(eX,XDo),e(Vb,zDo),e(fe,QDo),e(fe,Xb),e(Xb,r_e),e(r_e,WDo),e(Xb,HDo),e(Xb,oX),e(oX,UDo),e(Xb,JDo),e(fe,YDo),e(fe,zb),e(zb,t_e),e(t_e,KDo),e(zb,ZDo),e(zb,rX),e(rX,eGo),e(zb,oGo),e(oo,rGo),e(oo,Qb),e(Qb,tGo),e(Qb,a_e),e(a_e,aGo),e(Qb,nGo),e(Qb,n_e),e(n_e,sGo),e(oo,lGo),M(Wb,oo,null),b(f,UXe,u),b(f,td,u),e(td,Hb),e(Hb,s_e),M(iy,s_e,null),e(td,iGo),e(td,l_e),e(l_e,dGo),b(f,JXe,u),b(f,Bo,u),M(dy,Bo,null),e(Bo,cGo),e(Bo,ad),e(ad,fGo),e(ad,tX),e(tX,mGo),e(ad,gGo),e(ad,aX),e(aX,hGo),e(ad,pGo),e(Bo,_Go),e(Bo,cy),e(cy,uGo),e(cy,i_e),e(i_e,bGo),e(cy,vGo),e(Bo,FGo),e(Bo,gt),M(fy,gt,null),e(gt,TGo),e(gt,d_e),e(d_e,MGo),e(gt,EGo),e(gt,nd),e(nd,CGo),e(nd,c_e),e(c_e,wGo),e(nd,AGo),e(nd,nX),e(nX,LGo),e(nd,yGo),e(gt,xGo),M(Ub,gt,null),e(Bo,$Go),e(Bo,ro),M(my,ro,null),e(ro,kGo),e(ro,f_e),e(f_e,SGo),e(ro,RGo),e(ro,Ga),e(Ga,PGo),e(Ga,m_e),e(m_e,BGo),e(Ga,NGo),e(Ga,g_e),e(g_e,IGo),e(Ga,qGo),e(Ga,h_e),e(h_e,jGo),e(Ga,DGo),e(ro,GGo),e(ro,B),e(B,Jb),e(Jb,p_e),e(p_e,OGo),e(Jb,VGo),e(Jb,sX),e(sX,XGo),e(Jb,zGo),e(B,QGo),e(B,Yb),e(Yb,__e),e(__e,WGo),e(Yb,HGo),e(Yb,lX),e(lX,UGo),e(Yb,JGo),e(B,YGo),e(B,Kb),e(Kb,u_e),e(u_e,KGo),e(Kb,ZGo),e(Kb,iX),e(iX,eOo),e(Kb,oOo),e(B,rOo),e(B,Zb),e(Zb,b_e),e(b_e,tOo),e(Zb,aOo),e(Zb,dX),e(dX,nOo),e(Zb,sOo),e(B,lOo),e(B,ev),e(ev,v_e),e(v_e,iOo),e(ev,dOo),e(ev,cX),e(cX,cOo),e(ev,fOo),e(B,mOo),e(B,ov),e(ov,F_e),e(F_e,gOo),e(ov,hOo),e(ov,fX),e(fX,pOo),e(ov,_Oo),e(B,uOo),e(B,rv),e(rv,T_e),e(T_e,bOo),e(rv,vOo),e(rv,mX),e(mX,FOo),e(rv,TOo),e(B,MOo),e(B,tv),e(tv,M_e),e(M_e,EOo),e(tv,COo),e(tv,gX),e(gX,wOo),e(tv,AOo),e(B,LOo),e(B,av),e(av,E_e),e(E_e,yOo),e(av,xOo),e(av,hX),e(hX,$Oo),e(av,kOo),e(B,SOo),e(B,nv),e(nv,C_e),e(C_e,ROo),e(nv,POo),e(nv,pX),e(pX,BOo),e(nv,NOo),e(B,IOo),e(B,sv),e(sv,w_e),e(w_e,qOo),e(sv,jOo),e(sv,_X),e(_X,DOo),e(sv,GOo),e(B,OOo),e(B,lv),e(lv,A_e),e(A_e,VOo),e(lv,XOo),e(lv,uX),e(uX,zOo),e(lv,QOo),e(B,WOo),e(B,iv),e(iv,L_e),e(L_e,HOo),e(iv,UOo),e(iv,bX),e(bX,JOo),e(iv,YOo),e(B,KOo),e(B,dv),e(dv,y_e),e(y_e,ZOo),e(dv,eVo),e(dv,vX),e(vX,oVo),e(dv,rVo),e(B,tVo),e(B,cv),e(cv,x_e),e(x_e,aVo),e(cv,nVo),e(cv,FX),e(FX,sVo),e(cv,lVo),e(B,iVo),e(B,fv),e(fv,$_e),e($_e,dVo),e(fv,cVo),e(fv,TX),e(TX,fVo),e(fv,mVo),e(B,gVo),e(B,mv),e(mv,k_e),e(k_e,hVo),e(mv,pVo),e(mv,MX),e(MX,_Vo),e(mv,uVo),e(B,bVo),e(B,gv),e(gv,S_e),e(S_e,vVo),e(gv,FVo),e(gv,EX),e(EX,TVo),e(gv,MVo),e(B,EVo),e(B,hv),e(hv,R_e),e(R_e,CVo),e(hv,wVo),e(hv,CX),e(CX,AVo),e(hv,LVo),e(B,yVo),e(B,pv),e(pv,P_e),e(P_e,xVo),e(pv,$Vo),e(pv,wX),e(wX,kVo),e(pv,SVo),e(B,RVo),e(B,_v),e(_v,B_e),e(B_e,PVo),e(_v,BVo),e(_v,AX),e(AX,NVo),e(_v,IVo),e(B,qVo),e(B,uv),e(uv,N_e),e(N_e,jVo),e(uv,DVo),e(uv,LX),e(LX,GVo),e(uv,OVo),e(B,VVo),e(B,bv),e(bv,I_e),e(I_e,XVo),e(bv,zVo),e(bv,yX),e(yX,QVo),e(bv,WVo),e(B,HVo),e(B,vv),e(vv,q_e),e(q_e,UVo),e(vv,JVo),e(vv,xX),e(xX,YVo),e(vv,KVo),e(B,ZVo),e(B,Fv),e(Fv,j_e),e(j_e,eXo),e(Fv,oXo),e(Fv,$X),e($X,rXo),e(Fv,tXo),e(B,aXo),e(B,Tv),e(Tv,D_e),e(D_e,nXo),e(Tv,sXo),e(Tv,kX),e(kX,lXo),e(Tv,iXo),e(B,dXo),e(B,Mv),e(Mv,G_e),e(G_e,cXo),e(Mv,fXo),e(Mv,SX),e(SX,mXo),e(Mv,gXo),e(B,hXo),e(B,Ev),e(Ev,O_e),e(O_e,pXo),e(Ev,_Xo),e(Ev,RX),e(RX,uXo),e(Ev,bXo),e(B,vXo),e(B,Cv),e(Cv,V_e),e(V_e,FXo),e(Cv,TXo),e(Cv,PX),e(PX,MXo),e(Cv,EXo),e(B,CXo),e(B,wv),e(wv,X_e),e(X_e,wXo),e(wv,AXo),e(wv,BX),e(BX,LXo),e(wv,yXo),e(B,xXo),e(B,Av),e(Av,z_e),e(z_e,$Xo),e(Av,kXo),e(Av,NX),e(NX,SXo),e(Av,RXo),e(B,PXo),e(B,Lv),e(Lv,Q_e),e(Q_e,BXo),e(Lv,NXo),e(Lv,IX),e(IX,IXo),e(Lv,qXo),e(B,jXo),e(B,yv),e(yv,W_e),e(W_e,DXo),e(yv,GXo),e(yv,qX),e(qX,OXo),e(yv,VXo),e(B,XXo),e(B,xv),e(xv,H_e),e(H_e,zXo),e(xv,QXo),e(xv,jX),e(jX,WXo),e(xv,HXo),e(B,UXo),e(B,$v),e($v,U_e),e(U_e,JXo),e($v,YXo),e($v,DX),e(DX,KXo),e($v,ZXo),e(B,ezo),e(B,kv),e(kv,J_e),e(J_e,ozo),e(kv,rzo),e(kv,GX),e(GX,tzo),e(kv,azo),e(B,nzo),e(B,Sv),e(Sv,Y_e),e(Y_e,szo),e(Sv,lzo),e(Sv,OX),e(OX,izo),e(Sv,dzo),e(B,czo),e(B,Rv),e(Rv,K_e),e(K_e,fzo),e(Rv,mzo),e(Rv,VX),e(VX,gzo),e(Rv,hzo),e(B,pzo),e(B,Pv),e(Pv,Z_e),e(Z_e,_zo),e(Pv,uzo),e(Pv,XX),e(XX,bzo),e(Pv,vzo),e(B,Fzo),e(B,Bv),e(Bv,eue),e(eue,Tzo),e(Bv,Mzo),e(Bv,zX),e(zX,Ezo),e(Bv,Czo),e(B,wzo),e(B,Nv),e(Nv,oue),e(oue,Azo),e(Nv,Lzo),e(Nv,QX),e(QX,yzo),e(Nv,xzo),e(B,$zo),e(B,Iv),e(Iv,rue),e(rue,kzo),e(Iv,Szo),e(Iv,WX),e(WX,Rzo),e(Iv,Pzo),e(B,Bzo),e(B,qv),e(qv,tue),e(tue,Nzo),e(qv,Izo),e(qv,HX),e(HX,qzo),e(qv,jzo),e(B,Dzo),e(B,jv),e(jv,aue),e(aue,Gzo),e(jv,Ozo),e(jv,UX),e(UX,Vzo),e(jv,Xzo),e(B,zzo),e(B,Dv),e(Dv,nue),e(nue,Qzo),e(Dv,Wzo),e(Dv,JX),e(JX,Hzo),e(Dv,Uzo),e(B,Jzo),e(B,Gv),e(Gv,sue),e(sue,Yzo),e(Gv,Kzo),e(Gv,YX),e(YX,Zzo),e(Gv,eQo),e(B,oQo),e(B,Ov),e(Ov,lue),e(lue,rQo),e(Ov,tQo),e(Ov,KX),e(KX,aQo),e(Ov,nQo),e(B,sQo),e(B,Vv),e(Vv,iue),e(iue,lQo),e(Vv,iQo),e(Vv,ZX),e(ZX,dQo),e(Vv,cQo),e(B,fQo),e(B,Xv),e(Xv,due),e(due,mQo),e(Xv,gQo),e(Xv,ez),e(ez,hQo),e(Xv,pQo),e(B,_Qo),e(B,zv),e(zv,cue),e(cue,uQo),e(zv,bQo),e(zv,oz),e(oz,vQo),e(zv,FQo),e(B,TQo),e(B,Qv),e(Qv,fue),e(fue,MQo),e(Qv,EQo),e(Qv,rz),e(rz,CQo),e(Qv,wQo),e(ro,AQo),e(ro,Wv),e(Wv,LQo),e(Wv,mue),e(mue,yQo),e(Wv,xQo),e(Wv,gue),e(gue,$Qo),e(ro,kQo),M(Hv,ro,null),b(f,YXe,u),b(f,sd,u),e(sd,Uv),e(Uv,hue),M(gy,hue,null),e(sd,SQo),e(sd,pue),e(pue,RQo),b(f,KXe,u),b(f,No,u),M(hy,No,null),e(No,PQo),e(No,ld),e(ld,BQo),e(ld,tz),e(tz,NQo),e(ld,IQo),e(ld,az),e(az,qQo),e(ld,jQo),e(No,DQo),e(No,py),e(py,GQo),e(py,_ue),e(_ue,OQo),e(py,VQo),e(No,XQo),e(No,ht),M(_y,ht,null),e(ht,zQo),e(ht,uue),e(uue,QQo),e(ht,WQo),e(ht,id),e(id,HQo),e(id,bue),e(bue,UQo),e(id,JQo),e(id,nz),e(nz,YQo),e(id,KQo),e(ht,ZQo),M(Jv,ht,null),e(No,eWo),e(No,to),M(uy,to,null),e(to,oWo),e(to,vue),e(vue,rWo),e(to,tWo),e(to,Oa),e(Oa,aWo),e(Oa,Fue),e(Fue,nWo),e(Oa,sWo),e(Oa,Tue),e(Tue,lWo),e(Oa,iWo),e(Oa,Mue),e(Mue,dWo),e(Oa,cWo),e(to,fWo),e(to,Z),e(Z,Yv),e(Yv,Eue),e(Eue,mWo),e(Yv,gWo),e(Yv,sz),e(sz,hWo),e(Yv,pWo),e(Z,_Wo),e(Z,Kv),e(Kv,Cue),e(Cue,uWo),e(Kv,bWo),e(Kv,lz),e(lz,vWo),e(Kv,FWo),e(Z,TWo),e(Z,Zv),e(Zv,wue),e(wue,MWo),e(Zv,EWo),e(Zv,iz),e(iz,CWo),e(Zv,wWo),e(Z,AWo),e(Z,eF),e(eF,Aue),e(Aue,LWo),e(eF,yWo),e(eF,dz),e(dz,xWo),e(eF,$Wo),e(Z,kWo),e(Z,oF),e(oF,Lue),e(Lue,SWo),e(oF,RWo),e(oF,cz),e(cz,PWo),e(oF,BWo),e(Z,NWo),e(Z,rF),e(rF,yue),e(yue,IWo),e(rF,qWo),e(rF,fz),e(fz,jWo),e(rF,DWo),e(Z,GWo),e(Z,tF),e(tF,xue),e(xue,OWo),e(tF,VWo),e(tF,mz),e(mz,XWo),e(tF,zWo),e(Z,QWo),e(Z,aF),e(aF,$ue),e($ue,WWo),e(aF,HWo),e(aF,gz),e(gz,UWo),e(aF,JWo),e(Z,YWo),e(Z,nF),e(nF,kue),e(kue,KWo),e(nF,ZWo),e(nF,hz),e(hz,eHo),e(nF,oHo),e(Z,rHo),e(Z,sF),e(sF,Sue),e(Sue,tHo),e(sF,aHo),e(sF,pz),e(pz,nHo),e(sF,sHo),e(Z,lHo),e(Z,lF),e(lF,Rue),e(Rue,iHo),e(lF,dHo),e(lF,_z),e(_z,cHo),e(lF,fHo),e(Z,mHo),e(Z,iF),e(iF,Pue),e(Pue,gHo),e(iF,hHo),e(iF,uz),e(uz,pHo),e(iF,_Ho),e(Z,uHo),e(Z,dF),e(dF,Bue),e(Bue,bHo),e(dF,vHo),e(dF,bz),e(bz,FHo),e(dF,THo),e(Z,MHo),e(Z,cF),e(cF,Nue),e(Nue,EHo),e(cF,CHo),e(cF,vz),e(vz,wHo),e(cF,AHo),e(Z,LHo),e(Z,fF),e(fF,Iue),e(Iue,yHo),e(fF,xHo),e(fF,Fz),e(Fz,$Ho),e(fF,kHo),e(Z,SHo),e(Z,mF),e(mF,que),e(que,RHo),e(mF,PHo),e(mF,Tz),e(Tz,BHo),e(mF,NHo),e(Z,IHo),e(Z,gF),e(gF,jue),e(jue,qHo),e(gF,jHo),e(gF,Mz),e(Mz,DHo),e(gF,GHo),e(Z,OHo),e(Z,hF),e(hF,Due),e(Due,VHo),e(hF,XHo),e(hF,Ez),e(Ez,zHo),e(hF,QHo),e(Z,WHo),e(Z,pF),e(pF,Gue),e(Gue,HHo),e(pF,UHo),e(pF,Cz),e(Cz,JHo),e(pF,YHo),e(Z,KHo),e(Z,_F),e(_F,Oue),e(Oue,ZHo),e(_F,eUo),e(_F,wz),e(wz,oUo),e(_F,rUo),e(Z,tUo),e(Z,uF),e(uF,Vue),e(Vue,aUo),e(uF,nUo),e(uF,Az),e(Az,sUo),e(uF,lUo),e(Z,iUo),e(Z,bF),e(bF,Xue),e(Xue,dUo),e(bF,cUo),e(bF,Lz),e(Lz,fUo),e(bF,mUo),e(Z,gUo),e(Z,vF),e(vF,zue),e(zue,hUo),e(vF,pUo),e(vF,yz),e(yz,_Uo),e(vF,uUo),e(Z,bUo),e(Z,FF),e(FF,Que),e(Que,vUo),e(FF,FUo),e(FF,xz),e(xz,TUo),e(FF,MUo),e(Z,EUo),e(Z,TF),e(TF,Wue),e(Wue,CUo),e(TF,wUo),e(TF,$z),e($z,AUo),e(TF,LUo),e(Z,yUo),e(Z,MF),e(MF,Hue),e(Hue,xUo),e(MF,$Uo),e(MF,kz),e(kz,kUo),e(MF,SUo),e(Z,RUo),e(Z,EF),e(EF,Uue),e(Uue,PUo),e(EF,BUo),e(EF,Sz),e(Sz,NUo),e(EF,IUo),e(Z,qUo),e(Z,CF),e(CF,Jue),e(Jue,jUo),e(CF,DUo),e(CF,Rz),e(Rz,GUo),e(CF,OUo),e(Z,VUo),e(Z,wF),e(wF,Yue),e(Yue,XUo),e(wF,zUo),e(wF,Pz),e(Pz,QUo),e(wF,WUo),e(Z,HUo),e(Z,AF),e(AF,Kue),e(Kue,UUo),e(AF,JUo),e(AF,Bz),e(Bz,YUo),e(AF,KUo),e(to,ZUo),e(to,LF),e(LF,eJo),e(LF,Zue),e(Zue,oJo),e(LF,rJo),e(LF,e2e),e(e2e,tJo),e(to,aJo),M(yF,to,null),b(f,ZXe,u),b(f,dd,u),e(dd,xF),e(xF,o2e),M(by,o2e,null),e(dd,nJo),e(dd,r2e),e(r2e,sJo),b(f,eze,u),b(f,Io,u),M(vy,Io,null),e(Io,lJo),e(Io,cd),e(cd,iJo),e(cd,Nz),e(Nz,dJo),e(cd,cJo),e(cd,Iz),e(Iz,fJo),e(cd,mJo),e(Io,gJo),e(Io,Fy),e(Fy,hJo),e(Fy,t2e),e(t2e,pJo),e(Fy,_Jo),e(Io,uJo),e(Io,pt),M(Ty,pt,null),e(pt,bJo),e(pt,a2e),e(a2e,vJo),e(pt,FJo),e(pt,fd),e(fd,TJo),e(fd,n2e),e(n2e,MJo),e(fd,EJo),e(fd,qz),e(qz,CJo),e(fd,wJo),e(pt,AJo),M($F,pt,null),e(Io,LJo),e(Io,ao),M(My,ao,null),e(ao,yJo),e(ao,s2e),e(s2e,xJo),e(ao,$Jo),e(ao,Va),e(Va,kJo),e(Va,l2e),e(l2e,SJo),e(Va,RJo),e(Va,i2e),e(i2e,PJo),e(Va,BJo),e(Va,d2e),e(d2e,NJo),e(Va,IJo),e(ao,qJo),e(ao,qo),e(qo,kF),e(kF,c2e),e(c2e,jJo),e(kF,DJo),e(kF,jz),e(jz,GJo),e(kF,OJo),e(qo,VJo),e(qo,SF),e(SF,f2e),e(f2e,XJo),e(SF,zJo),e(SF,Dz),e(Dz,QJo),e(SF,WJo),e(qo,HJo),e(qo,RF),e(RF,m2e),e(m2e,UJo),e(RF,JJo),e(RF,Gz),e(Gz,YJo),e(RF,KJo),e(qo,ZJo),e(qo,PF),e(PF,g2e),e(g2e,eYo),e(PF,oYo),e(PF,Oz),e(Oz,rYo),e(PF,tYo),e(qo,aYo),e(qo,BF),e(BF,h2e),e(h2e,nYo),e(BF,sYo),e(BF,Vz),e(Vz,lYo),e(BF,iYo),e(qo,dYo),e(qo,NF),e(NF,p2e),e(p2e,cYo),e(NF,fYo),e(NF,Xz),e(Xz,mYo),e(NF,gYo),e(ao,hYo),e(ao,IF),e(IF,pYo),e(IF,_2e),e(_2e,_Yo),e(IF,uYo),e(IF,u2e),e(u2e,bYo),e(ao,vYo),M(qF,ao,null),b(f,oze,u),b(f,md,u),e(md,jF),e(jF,b2e),M(Ey,b2e,null),e(md,FYo),e(md,v2e),e(v2e,TYo),b(f,rze,u),b(f,jo,u),M(Cy,jo,null),e(jo,MYo),e(jo,gd),e(gd,EYo),e(gd,zz),e(zz,CYo),e(gd,wYo),e(gd,Qz),e(Qz,AYo),e(gd,LYo),e(jo,yYo),e(jo,wy),e(wy,xYo),e(wy,F2e),e(F2e,$Yo),e(wy,kYo),e(jo,SYo),e(jo,_t),M(Ay,_t,null),e(_t,RYo),e(_t,T2e),e(T2e,PYo),e(_t,BYo),e(_t,hd),e(hd,NYo),e(hd,M2e),e(M2e,IYo),e(hd,qYo),e(hd,Wz),e(Wz,jYo),e(hd,DYo),e(_t,GYo),M(DF,_t,null),e(jo,OYo),e(jo,no),M(Ly,no,null),e(no,VYo),e(no,E2e),e(E2e,XYo),e(no,zYo),e(no,Xa),e(Xa,QYo),e(Xa,C2e),e(C2e,WYo),e(Xa,HYo),e(Xa,w2e),e(w2e,UYo),e(Xa,JYo),e(Xa,A2e),e(A2e,YYo),e(Xa,KYo),e(no,ZYo),e(no,U),e(U,GF),e(GF,L2e),e(L2e,eKo),e(GF,oKo),e(GF,Hz),e(Hz,rKo),e(GF,tKo),e(U,aKo),e(U,OF),e(OF,y2e),e(y2e,nKo),e(OF,sKo),e(OF,Uz),e(Uz,lKo),e(OF,iKo),e(U,dKo),e(U,VF),e(VF,x2e),e(x2e,cKo),e(VF,fKo),e(VF,Jz),e(Jz,mKo),e(VF,gKo),e(U,hKo),e(U,XF),e(XF,$2e),e($2e,pKo),e(XF,_Ko),e(XF,Yz),e(Yz,uKo),e(XF,bKo),e(U,vKo),e(U,zF),e(zF,k2e),e(k2e,FKo),e(zF,TKo),e(zF,Kz),e(Kz,MKo),e(zF,EKo),e(U,CKo),e(U,QF),e(QF,S2e),e(S2e,wKo),e(QF,AKo),e(QF,Zz),e(Zz,LKo),e(QF,yKo),e(U,xKo),e(U,WF),e(WF,R2e),e(R2e,$Ko),e(WF,kKo),e(WF,eQ),e(eQ,SKo),e(WF,RKo),e(U,PKo),e(U,HF),e(HF,P2e),e(P2e,BKo),e(HF,NKo),e(HF,oQ),e(oQ,IKo),e(HF,qKo),e(U,jKo),e(U,UF),e(UF,B2e),e(B2e,DKo),e(UF,GKo),e(UF,rQ),e(rQ,OKo),e(UF,VKo),e(U,XKo),e(U,JF),e(JF,N2e),e(N2e,zKo),e(JF,QKo),e(JF,tQ),e(tQ,WKo),e(JF,HKo),e(U,UKo),e(U,YF),e(YF,I2e),e(I2e,JKo),e(YF,YKo),e(YF,aQ),e(aQ,KKo),e(YF,ZKo),e(U,eZo),e(U,KF),e(KF,q2e),e(q2e,oZo),e(KF,rZo),e(KF,nQ),e(nQ,tZo),e(KF,aZo),e(U,nZo),e(U,ZF),e(ZF,j2e),e(j2e,sZo),e(ZF,lZo),e(ZF,sQ),e(sQ,iZo),e(ZF,dZo),e(U,cZo),e(U,e6),e(e6,D2e),e(D2e,fZo),e(e6,mZo),e(e6,lQ),e(lQ,gZo),e(e6,hZo),e(U,pZo),e(U,o6),e(o6,G2e),e(G2e,_Zo),e(o6,uZo),e(o6,iQ),e(iQ,bZo),e(o6,vZo),e(U,FZo),e(U,r6),e(r6,O2e),e(O2e,TZo),e(r6,MZo),e(r6,dQ),e(dQ,EZo),e(r6,CZo),e(U,wZo),e(U,t6),e(t6,V2e),e(V2e,AZo),e(t6,LZo),e(t6,cQ),e(cQ,yZo),e(t6,xZo),e(U,$Zo),e(U,a6),e(a6,X2e),e(X2e,kZo),e(a6,SZo),e(a6,fQ),e(fQ,RZo),e(a6,PZo),e(U,BZo),e(U,n6),e(n6,z2e),e(z2e,NZo),e(n6,IZo),e(n6,mQ),e(mQ,qZo),e(n6,jZo),e(U,DZo),e(U,s6),e(s6,Q2e),e(Q2e,GZo),e(s6,OZo),e(s6,gQ),e(gQ,VZo),e(s6,XZo),e(U,zZo),e(U,l6),e(l6,W2e),e(W2e,QZo),e(l6,WZo),e(l6,hQ),e(hQ,HZo),e(l6,UZo),e(U,JZo),e(U,i6),e(i6,H2e),e(H2e,YZo),e(i6,KZo),e(i6,pQ),e(pQ,ZZo),e(i6,eer),e(U,oer),e(U,d6),e(d6,U2e),e(U2e,rer),e(d6,ter),e(d6,_Q),e(_Q,aer),e(d6,ner),e(U,ser),e(U,c6),e(c6,J2e),e(J2e,ler),e(c6,ier),e(c6,uQ),e(uQ,der),e(c6,cer),e(U,fer),e(U,f6),e(f6,Y2e),e(Y2e,mer),e(f6,ger),e(f6,bQ),e(bQ,her),e(f6,per),e(U,_er),e(U,m6),e(m6,K2e),e(K2e,uer),e(m6,ber),e(m6,vQ),e(vQ,ver),e(m6,Fer),e(U,Ter),e(U,g6),e(g6,Z2e),e(Z2e,Mer),e(g6,Eer),e(g6,FQ),e(FQ,Cer),e(g6,wer),e(U,Aer),e(U,h6),e(h6,e1e),e(e1e,Ler),e(h6,yer),e(h6,TQ),e(TQ,xer),e(h6,$er),e(U,ker),e(U,p6),e(p6,o1e),e(o1e,Ser),e(p6,Rer),e(p6,MQ),e(MQ,Per),e(p6,Ber),e(U,Ner),e(U,_6),e(_6,r1e),e(r1e,Ier),e(_6,qer),e(_6,EQ),e(EQ,jer),e(_6,Der),e(U,Ger),e(U,u6),e(u6,t1e),e(t1e,Oer),e(u6,Ver),e(u6,CQ),e(CQ,Xer),e(u6,zer),e(U,Qer),e(U,b6),e(b6,a1e),e(a1e,Wer),e(b6,Her),e(b6,wQ),e(wQ,Uer),e(b6,Jer),e(U,Yer),e(U,v6),e(v6,n1e),e(n1e,Ker),e(v6,Zer),e(v6,AQ),e(AQ,eor),e(v6,oor),e(U,ror),e(U,F6),e(F6,s1e),e(s1e,tor),e(F6,aor),e(F6,LQ),e(LQ,nor),e(F6,sor),e(U,lor),e(U,T6),e(T6,l1e),e(l1e,ior),e(T6,dor),e(T6,yQ),e(yQ,cor),e(T6,mor),e(U,gor),e(U,M6),e(M6,i1e),e(i1e,hor),e(M6,por),e(M6,xQ),e(xQ,_or),e(M6,uor),e(no,bor),e(no,E6),e(E6,vor),e(E6,d1e),e(d1e,For),e(E6,Tor),e(E6,c1e),e(c1e,Mor),e(no,Eor),M(C6,no,null),b(f,tze,u),b(f,pd,u),e(pd,w6),e(w6,f1e),M(yy,f1e,null),e(pd,Cor),e(pd,m1e),e(m1e,wor),b(f,aze,u),b(f,Do,u),M(xy,Do,null),e(Do,Aor),e(Do,_d),e(_d,Lor),e(_d,$Q),e($Q,yor),e(_d,xor),e(_d,kQ),e(kQ,$or),e(_d,kor),e(Do,Sor),e(Do,$y),e($y,Ror),e($y,g1e),e(g1e,Por),e($y,Bor),e(Do,Nor),e(Do,ut),M(ky,ut,null),e(ut,Ior),e(ut,h1e),e(h1e,qor),e(ut,jor),e(ut,ud),e(ud,Dor),e(ud,p1e),e(p1e,Gor),e(ud,Oor),e(ud,SQ),e(SQ,Vor),e(ud,Xor),e(ut,zor),M(A6,ut,null),e(Do,Qor),e(Do,so),M(Sy,so,null),e(so,Wor),e(so,_1e),e(_1e,Hor),e(so,Uor),e(so,za),e(za,Jor),e(za,u1e),e(u1e,Yor),e(za,Kor),e(za,b1e),e(b1e,Zor),e(za,err),e(za,v1e),e(v1e,orr),e(za,rrr),e(so,trr),e(so,V),e(V,L6),e(L6,F1e),e(F1e,arr),e(L6,nrr),e(L6,RQ),e(RQ,srr),e(L6,lrr),e(V,irr),e(V,y6),e(y6,T1e),e(T1e,drr),e(y6,crr),e(y6,PQ),e(PQ,frr),e(y6,mrr),e(V,grr),e(V,x6),e(x6,M1e),e(M1e,hrr),e(x6,prr),e(x6,BQ),e(BQ,_rr),e(x6,urr),e(V,brr),e(V,$6),e($6,E1e),e(E1e,vrr),e($6,Frr),e($6,NQ),e(NQ,Trr),e($6,Mrr),e(V,Err),e(V,k6),e(k6,C1e),e(C1e,Crr),e(k6,wrr),e(k6,IQ),e(IQ,Arr),e(k6,Lrr),e(V,yrr),e(V,S6),e(S6,w1e),e(w1e,xrr),e(S6,$rr),e(S6,qQ),e(qQ,krr),e(S6,Srr),e(V,Rrr),e(V,R6),e(R6,A1e),e(A1e,Prr),e(R6,Brr),e(R6,jQ),e(jQ,Nrr),e(R6,Irr),e(V,qrr),e(V,P6),e(P6,L1e),e(L1e,jrr),e(P6,Drr),e(P6,DQ),e(DQ,Grr),e(P6,Orr),e(V,Vrr),e(V,B6),e(B6,y1e),e(y1e,Xrr),e(B6,zrr),e(B6,GQ),e(GQ,Qrr),e(B6,Wrr),e(V,Hrr),e(V,N6),e(N6,x1e),e(x1e,Urr),e(N6,Jrr),e(N6,OQ),e(OQ,Yrr),e(N6,Krr),e(V,Zrr),e(V,I6),e(I6,$1e),e($1e,etr),e(I6,otr),e(I6,VQ),e(VQ,rtr),e(I6,ttr),e(V,atr),e(V,q6),e(q6,k1e),e(k1e,ntr),e(q6,str),e(q6,XQ),e(XQ,ltr),e(q6,itr),e(V,dtr),e(V,j6),e(j6,S1e),e(S1e,ctr),e(j6,ftr),e(j6,zQ),e(zQ,mtr),e(j6,gtr),e(V,htr),e(V,D6),e(D6,R1e),e(R1e,ptr),e(D6,_tr),e(D6,QQ),e(QQ,utr),e(D6,btr),e(V,vtr),e(V,G6),e(G6,P1e),e(P1e,Ftr),e(G6,Ttr),e(G6,WQ),e(WQ,Mtr),e(G6,Etr),e(V,Ctr),e(V,O6),e(O6,B1e),e(B1e,wtr),e(O6,Atr),e(O6,HQ),e(HQ,Ltr),e(O6,ytr),e(V,xtr),e(V,V6),e(V6,N1e),e(N1e,$tr),e(V6,ktr),e(V6,UQ),e(UQ,Str),e(V6,Rtr),e(V,Ptr),e(V,X6),e(X6,I1e),e(I1e,Btr),e(X6,Ntr),e(X6,JQ),e(JQ,Itr),e(X6,qtr),e(V,jtr),e(V,z6),e(z6,q1e),e(q1e,Dtr),e(z6,Gtr),e(z6,YQ),e(YQ,Otr),e(z6,Vtr),e(V,Xtr),e(V,Q6),e(Q6,j1e),e(j1e,ztr),e(Q6,Qtr),e(Q6,KQ),e(KQ,Wtr),e(Q6,Htr),e(V,Utr),e(V,W6),e(W6,D1e),e(D1e,Jtr),e(W6,Ytr),e(W6,ZQ),e(ZQ,Ktr),e(W6,Ztr),e(V,ear),e(V,H6),e(H6,G1e),e(G1e,oar),e(H6,rar),e(H6,eW),e(eW,tar),e(H6,aar),e(V,nar),e(V,U6),e(U6,O1e),e(O1e,sar),e(U6,lar),e(U6,oW),e(oW,iar),e(U6,dar),e(V,car),e(V,J6),e(J6,V1e),e(V1e,far),e(J6,mar),e(J6,rW),e(rW,gar),e(J6,har),e(V,par),e(V,Y6),e(Y6,X1e),e(X1e,_ar),e(Y6,uar),e(Y6,tW),e(tW,bar),e(Y6,Far),e(V,Tar),e(V,K6),e(K6,z1e),e(z1e,Mar),e(K6,Ear),e(K6,aW),e(aW,Car),e(K6,war),e(V,Aar),e(V,Z6),e(Z6,Q1e),e(Q1e,Lar),e(Z6,yar),e(Z6,nW),e(nW,xar),e(Z6,$ar),e(V,kar),e(V,eT),e(eT,W1e),e(W1e,Sar),e(eT,Rar),e(eT,sW),e(sW,Par),e(eT,Bar),e(V,Nar),e(V,oT),e(oT,H1e),e(H1e,Iar),e(oT,qar),e(oT,lW),e(lW,jar),e(oT,Dar),e(V,Gar),e(V,rT),e(rT,U1e),e(U1e,Oar),e(rT,Var),e(rT,iW),e(iW,Xar),e(rT,zar),e(V,Qar),e(V,tT),e(tT,J1e),e(J1e,War),e(tT,Har),e(tT,dW),e(dW,Uar),e(tT,Jar),e(V,Yar),e(V,aT),e(aT,Y1e),e(Y1e,Kar),e(aT,Zar),e(aT,cW),e(cW,enr),e(aT,onr),e(V,rnr),e(V,nT),e(nT,K1e),e(K1e,tnr),e(nT,anr),e(nT,fW),e(fW,nnr),e(nT,snr),e(V,lnr),e(V,sT),e(sT,Z1e),e(Z1e,inr),e(sT,dnr),e(sT,mW),e(mW,cnr),e(sT,fnr),e(V,mnr),e(V,lT),e(lT,ebe),e(ebe,gnr),e(lT,hnr),e(lT,gW),e(gW,pnr),e(lT,_nr),e(V,unr),e(V,iT),e(iT,obe),e(obe,bnr),e(iT,vnr),e(iT,hW),e(hW,Fnr),e(iT,Tnr),e(V,Mnr),e(V,dT),e(dT,rbe),e(rbe,Enr),e(dT,Cnr),e(dT,pW),e(pW,wnr),e(dT,Anr),e(V,Lnr),e(V,cT),e(cT,tbe),e(tbe,ynr),e(cT,xnr),e(cT,_W),e(_W,$nr),e(cT,knr),e(V,Snr),e(V,fT),e(fT,abe),e(abe,Rnr),e(fT,Pnr),e(fT,uW),e(uW,Bnr),e(fT,Nnr),e(V,Inr),e(V,mT),e(mT,nbe),e(nbe,qnr),e(mT,jnr),e(mT,bW),e(bW,Dnr),e(mT,Gnr),e(V,Onr),e(V,gT),e(gT,sbe),e(sbe,Vnr),e(gT,Xnr),e(gT,vW),e(vW,znr),e(gT,Qnr),e(V,Wnr),e(V,hT),e(hT,lbe),e(lbe,Hnr),e(hT,Unr),e(hT,FW),e(FW,Jnr),e(hT,Ynr),e(so,Knr),e(so,pT),e(pT,Znr),e(pT,ibe),e(ibe,esr),e(pT,osr),e(pT,dbe),e(dbe,rsr),e(so,tsr),M(_T,so,null),b(f,nze,u),b(f,bd,u),e(bd,uT),e(uT,cbe),M(Ry,cbe,null),e(bd,asr),e(bd,fbe),e(fbe,nsr),b(f,sze,u),b(f,Go,u),M(Py,Go,null),e(Go,ssr),e(Go,vd),e(vd,lsr),e(vd,TW),e(TW,isr),e(vd,dsr),e(vd,MW),e(MW,csr),e(vd,fsr),e(Go,msr),e(Go,By),e(By,gsr),e(By,mbe),e(mbe,hsr),e(By,psr),e(Go,_sr),e(Go,bt),M(Ny,bt,null),e(bt,usr),e(bt,gbe),e(gbe,bsr),e(bt,vsr),e(bt,Fd),e(Fd,Fsr),e(Fd,hbe),e(hbe,Tsr),e(Fd,Msr),e(Fd,EW),e(EW,Esr),e(Fd,Csr),e(bt,wsr),M(bT,bt,null),e(Go,Asr),e(Go,lo),M(Iy,lo,null),e(lo,Lsr),e(lo,pbe),e(pbe,ysr),e(lo,xsr),e(lo,Qa),e(Qa,$sr),e(Qa,_be),e(_be,ksr),e(Qa,Ssr),e(Qa,ube),e(ube,Rsr),e(Qa,Psr),e(Qa,bbe),e(bbe,Bsr),e(Qa,Nsr),e(lo,Isr),e(lo,vbe),e(vbe,vT),e(vT,Fbe),e(Fbe,qsr),e(vT,jsr),e(vT,CW),e(CW,Dsr),e(vT,Gsr),e(lo,Osr),e(lo,FT),e(FT,Vsr),e(FT,Tbe),e(Tbe,Xsr),e(FT,zsr),e(FT,Mbe),e(Mbe,Qsr),e(lo,Wsr),M(TT,lo,null),b(f,lze,u),b(f,Td,u),e(Td,MT),e(MT,Ebe),M(qy,Ebe,null),e(Td,Hsr),e(Td,Cbe),e(Cbe,Usr),b(f,ize,u),b(f,Oo,u),M(jy,Oo,null),e(Oo,Jsr),e(Oo,Md),e(Md,Ysr),e(Md,wW),e(wW,Ksr),e(Md,Zsr),e(Md,AW),e(AW,elr),e(Md,olr),e(Oo,rlr),e(Oo,Dy),e(Dy,tlr),e(Dy,wbe),e(wbe,alr),e(Dy,nlr),e(Oo,slr),e(Oo,vt),M(Gy,vt,null),e(vt,llr),e(vt,Abe),e(Abe,ilr),e(vt,dlr),e(vt,Ed),e(Ed,clr),e(Ed,Lbe),e(Lbe,flr),e(Ed,mlr),e(Ed,LW),e(LW,glr),e(Ed,hlr),e(vt,plr),M(ET,vt,null),e(Oo,_lr),e(Oo,io),M(Oy,io,null),e(io,ulr),e(io,ybe),e(ybe,blr),e(io,vlr),e(io,Wa),e(Wa,Flr),e(Wa,xbe),e(xbe,Tlr),e(Wa,Mlr),e(Wa,$be),e($be,Elr),e(Wa,Clr),e(Wa,kbe),e(kbe,wlr),e(Wa,Alr),e(io,Llr),e(io,ve),e(ve,CT),e(CT,Sbe),e(Sbe,ylr),e(CT,xlr),e(CT,yW),e(yW,$lr),e(CT,klr),e(ve,Slr),e(ve,wT),e(wT,Rbe),e(Rbe,Rlr),e(wT,Plr),e(wT,xW),e(xW,Blr),e(wT,Nlr),e(ve,Ilr),e(ve,AT),e(AT,Pbe),e(Pbe,qlr),e(AT,jlr),e(AT,$W),e($W,Dlr),e(AT,Glr),e(ve,Olr),e(ve,LT),e(LT,Bbe),e(Bbe,Vlr),e(LT,Xlr),e(LT,kW),e(kW,zlr),e(LT,Qlr),e(ve,Wlr),e(ve,Us),e(Us,Nbe),e(Nbe,Hlr),e(Us,Ulr),e(Us,SW),e(SW,Jlr),e(Us,Ylr),e(Us,RW),e(RW,Klr),e(Us,Zlr),e(ve,eir),e(ve,yT),e(yT,Ibe),e(Ibe,oir),e(yT,rir),e(yT,PW),e(PW,tir),e(yT,air),e(ve,nir),e(ve,Js),e(Js,qbe),e(qbe,sir),e(Js,lir),e(Js,BW),e(BW,iir),e(Js,dir),e(Js,NW),e(NW,cir),e(Js,fir),e(ve,mir),e(ve,xT),e(xT,jbe),e(jbe,gir),e(xT,hir),e(xT,IW),e(IW,pir),e(xT,_ir),e(ve,uir),e(ve,Ft),e(Ft,Dbe),e(Dbe,bir),e(Ft,vir),e(Ft,qW),e(qW,Fir),e(Ft,Tir),e(Ft,jW),e(jW,Mir),e(Ft,Eir),e(Ft,DW),e(DW,Cir),e(Ft,wir),e(ve,Air),e(ve,$T),e($T,Gbe),e(Gbe,Lir),e($T,yir),e($T,GW),e(GW,xir),e($T,$ir),e(ve,kir),e(ve,kT),e(kT,Obe),e(Obe,Sir),e(kT,Rir),e(kT,OW),e(OW,Pir),e(kT,Bir),e(ve,Nir),e(ve,ST),e(ST,Vbe),e(Vbe,Iir),e(ST,qir),e(ST,VW),e(VW,jir),e(ST,Dir),e(ve,Gir),e(ve,RT),e(RT,Xbe),e(Xbe,Oir),e(RT,Vir),e(RT,XW),e(XW,Xir),e(RT,zir),e(ve,Qir),e(ve,PT),e(PT,zbe),e(zbe,Wir),e(PT,Hir),e(PT,zW),e(zW,Uir),e(PT,Jir),e(ve,Yir),e(ve,BT),e(BT,Qbe),e(Qbe,Kir),e(BT,Zir),e(BT,QW),e(QW,edr),e(BT,odr),e(ve,rdr),e(ve,NT),e(NT,Wbe),e(Wbe,tdr),e(NT,adr),e(NT,WW),e(WW,ndr),e(NT,sdr),e(io,ldr),e(io,IT),e(IT,idr),e(IT,Hbe),e(Hbe,ddr),e(IT,cdr),e(IT,Ube),e(Ube,fdr),e(io,mdr),M(qT,io,null),b(f,dze,u),b(f,Cd,u),e(Cd,jT),e(jT,Jbe),M(Vy,Jbe,null),e(Cd,gdr),e(Cd,Ybe),e(Ybe,hdr),b(f,cze,u),b(f,Vo,u),M(Xy,Vo,null),e(Vo,pdr),e(Vo,wd),e(wd,_dr),e(wd,HW),e(HW,udr),e(wd,bdr),e(wd,UW),e(UW,vdr),e(wd,Fdr),e(Vo,Tdr),e(Vo,zy),e(zy,Mdr),e(zy,Kbe),e(Kbe,Edr),e(zy,Cdr),e(Vo,wdr),e(Vo,Tt),M(Qy,Tt,null),e(Tt,Adr),e(Tt,Zbe),e(Zbe,Ldr),e(Tt,ydr),e(Tt,Ad),e(Ad,xdr),e(Ad,eve),e(eve,$dr),e(Ad,kdr),e(Ad,JW),e(JW,Sdr),e(Ad,Rdr),e(Tt,Pdr),M(DT,Tt,null),e(Vo,Bdr),e(Vo,co),M(Wy,co,null),e(co,Ndr),e(co,ove),e(ove,Idr),e(co,qdr),e(co,Ha),e(Ha,jdr),e(Ha,rve),e(rve,Ddr),e(Ha,Gdr),e(Ha,tve),e(tve,Odr),e(Ha,Vdr),e(Ha,ave),e(ave,Xdr),e(Ha,zdr),e(co,Qdr),e(co,nve),e(nve,GT),e(GT,sve),e(sve,Wdr),e(GT,Hdr),e(GT,YW),e(YW,Udr),e(GT,Jdr),e(co,Ydr),e(co,OT),e(OT,Kdr),e(OT,lve),e(lve,Zdr),e(OT,ecr),e(OT,ive),e(ive,ocr),e(co,rcr),M(VT,co,null),b(f,fze,u),b(f,Ld,u),e(Ld,XT),e(XT,dve),M(Hy,dve,null),e(Ld,tcr),e(Ld,cve),e(cve,acr),b(f,mze,u),b(f,Xo,u),M(Uy,Xo,null),e(Xo,ncr),e(Xo,yd),e(yd,scr),e(yd,KW),e(KW,lcr),e(yd,icr),e(yd,ZW),e(ZW,dcr),e(yd,ccr),e(Xo,fcr),e(Xo,Jy),e(Jy,mcr),e(Jy,fve),e(fve,gcr),e(Jy,hcr),e(Xo,pcr),e(Xo,Mt),M(Yy,Mt,null),e(Mt,_cr),e(Mt,mve),e(mve,ucr),e(Mt,bcr),e(Mt,xd),e(xd,vcr),e(xd,gve),e(gve,Fcr),e(xd,Tcr),e(xd,eH),e(eH,Mcr),e(xd,Ecr),e(Mt,Ccr),M(zT,Mt,null),e(Xo,wcr),e(Xo,fo),M(Ky,fo,null),e(fo,Acr),e(fo,hve),e(hve,Lcr),e(fo,ycr),e(fo,Ua),e(Ua,xcr),e(Ua,pve),e(pve,$cr),e(Ua,kcr),e(Ua,_ve),e(_ve,Scr),e(Ua,Rcr),e(Ua,uve),e(uve,Pcr),e(Ua,Bcr),e(fo,Ncr),e(fo,bve),e(bve,QT),e(QT,vve),e(vve,Icr),e(QT,qcr),e(QT,oH),e(oH,jcr),e(QT,Dcr),e(fo,Gcr),e(fo,WT),e(WT,Ocr),e(WT,Fve),e(Fve,Vcr),e(WT,Xcr),e(WT,Tve),e(Tve,zcr),e(fo,Qcr),M(HT,fo,null),b(f,gze,u),b(f,$d,u),e($d,UT),e(UT,Mve),M(Zy,Mve,null),e($d,Wcr),e($d,Eve),e(Eve,Hcr),b(f,hze,u),b(f,zo,u),M(e9,zo,null),e(zo,Ucr),e(zo,kd),e(kd,Jcr),e(kd,rH),e(rH,Ycr),e(kd,Kcr),e(kd,tH),e(tH,Zcr),e(kd,efr),e(zo,ofr),e(zo,o9),e(o9,rfr),e(o9,Cve),e(Cve,tfr),e(o9,afr),e(zo,nfr),e(zo,Et),M(r9,Et,null),e(Et,sfr),e(Et,wve),e(wve,lfr),e(Et,ifr),e(Et,Sd),e(Sd,dfr),e(Sd,Ave),e(Ave,cfr),e(Sd,ffr),e(Sd,aH),e(aH,mfr),e(Sd,gfr),e(Et,hfr),M(JT,Et,null),e(zo,pfr),e(zo,mo),M(t9,mo,null),e(mo,_fr),e(mo,Lve),e(Lve,ufr),e(mo,bfr),e(mo,Ja),e(Ja,vfr),e(Ja,yve),e(yve,Ffr),e(Ja,Tfr),e(Ja,xve),e(xve,Mfr),e(Ja,Efr),e(Ja,$ve),e($ve,Cfr),e(Ja,wfr),e(mo,Afr),e(mo,Pe),e(Pe,YT),e(YT,kve),e(kve,Lfr),e(YT,yfr),e(YT,nH),e(nH,xfr),e(YT,$fr),e(Pe,kfr),e(Pe,KT),e(KT,Sve),e(Sve,Sfr),e(KT,Rfr),e(KT,sH),e(sH,Pfr),e(KT,Bfr),e(Pe,Nfr),e(Pe,ZT),e(ZT,Rve),e(Rve,Ifr),e(ZT,qfr),e(ZT,lH),e(lH,jfr),e(ZT,Dfr),e(Pe,Gfr),e(Pe,e7),e(e7,Pve),e(Pve,Ofr),e(e7,Vfr),e(e7,iH),e(iH,Xfr),e(e7,zfr),e(Pe,Qfr),e(Pe,o7),e(o7,Bve),e(Bve,Wfr),e(o7,Hfr),e(o7,dH),e(dH,Ufr),e(o7,Jfr),e(Pe,Yfr),e(Pe,r7),e(r7,Nve),e(Nve,Kfr),e(r7,Zfr),e(r7,cH),e(cH,emr),e(r7,omr),e(Pe,rmr),e(Pe,t7),e(t7,Ive),e(Ive,tmr),e(t7,amr),e(t7,fH),e(fH,nmr),e(t7,smr),e(Pe,lmr),e(Pe,a7),e(a7,qve),e(qve,imr),e(a7,dmr),e(a7,mH),e(mH,cmr),e(a7,fmr),e(Pe,mmr),e(Pe,n7),e(n7,jve),e(jve,gmr),e(n7,hmr),e(n7,gH),e(gH,pmr),e(n7,_mr),e(mo,umr),e(mo,s7),e(s7,bmr),e(s7,Dve),e(Dve,vmr),e(s7,Fmr),e(s7,Gve),e(Gve,Tmr),e(mo,Mmr),M(l7,mo,null),b(f,pze,u),b(f,Rd,u),e(Rd,i7),e(i7,Ove),M(a9,Ove,null),e(Rd,Emr),e(Rd,Vve),e(Vve,Cmr),b(f,_ze,u),b(f,Qo,u),M(n9,Qo,null),e(Qo,wmr),e(Qo,Pd),e(Pd,Amr),e(Pd,hH),e(hH,Lmr),e(Pd,ymr),e(Pd,pH),e(pH,xmr),e(Pd,$mr),e(Qo,kmr),e(Qo,s9),e(s9,Smr),e(s9,Xve),e(Xve,Rmr),e(s9,Pmr),e(Qo,Bmr),e(Qo,Ct),M(l9,Ct,null),e(Ct,Nmr),e(Ct,zve),e(zve,Imr),e(Ct,qmr),e(Ct,Bd),e(Bd,jmr),e(Bd,Qve),e(Qve,Dmr),e(Bd,Gmr),e(Bd,_H),e(_H,Omr),e(Bd,Vmr),e(Ct,Xmr),M(d7,Ct,null),e(Qo,zmr),e(Qo,go),M(i9,go,null),e(go,Qmr),e(go,Wve),e(Wve,Wmr),e(go,Hmr),e(go,Ya),e(Ya,Umr),e(Ya,Hve),e(Hve,Jmr),e(Ya,Ymr),e(Ya,Uve),e(Uve,Kmr),e(Ya,Zmr),e(Ya,Jve),e(Jve,egr),e(Ya,ogr),e(go,rgr),e(go,rt),e(rt,c7),e(c7,Yve),e(Yve,tgr),e(c7,agr),e(c7,uH),e(uH,ngr),e(c7,sgr),e(rt,lgr),e(rt,f7),e(f7,Kve),e(Kve,igr),e(f7,dgr),e(f7,bH),e(bH,cgr),e(f7,fgr),e(rt,mgr),e(rt,m7),e(m7,Zve),e(Zve,ggr),e(m7,hgr),e(m7,vH),e(vH,pgr),e(m7,_gr),e(rt,ugr),e(rt,g7),e(g7,eFe),e(eFe,bgr),e(g7,vgr),e(g7,FH),e(FH,Fgr),e(g7,Tgr),e(rt,Mgr),e(rt,h7),e(h7,oFe),e(oFe,Egr),e(h7,Cgr),e(h7,TH),e(TH,wgr),e(h7,Agr),e(go,Lgr),e(go,p7),e(p7,ygr),e(p7,rFe),e(rFe,xgr),e(p7,$gr),e(p7,tFe),e(tFe,kgr),e(go,Sgr),M(_7,go,null),b(f,uze,u),b(f,Nd,u),e(Nd,u7),e(u7,aFe),M(d9,aFe,null),e(Nd,Rgr),e(Nd,nFe),e(nFe,Pgr),b(f,bze,u),b(f,Wo,u),M(c9,Wo,null),e(Wo,Bgr),e(Wo,Id),e(Id,Ngr),e(Id,MH),e(MH,Igr),e(Id,qgr),e(Id,EH),e(EH,jgr),e(Id,Dgr),e(Wo,Ggr),e(Wo,f9),e(f9,Ogr),e(f9,sFe),e(sFe,Vgr),e(f9,Xgr),e(Wo,zgr),e(Wo,wt),M(m9,wt,null),e(wt,Qgr),e(wt,lFe),e(lFe,Wgr),e(wt,Hgr),e(wt,qd),e(qd,Ugr),e(qd,iFe),e(iFe,Jgr),e(qd,Ygr),e(qd,CH),e(CH,Kgr),e(qd,Zgr),e(wt,ehr),M(b7,wt,null),e(Wo,ohr),e(Wo,ho),M(g9,ho,null),e(ho,rhr),e(ho,dFe),e(dFe,thr),e(ho,ahr),e(ho,Ka),e(Ka,nhr),e(Ka,cFe),e(cFe,shr),e(Ka,lhr),e(Ka,fFe),e(fFe,ihr),e(Ka,dhr),e(Ka,mFe),e(mFe,chr),e(Ka,fhr),e(ho,mhr),e(ho,Le),e(Le,v7),e(v7,gFe),e(gFe,ghr),e(v7,hhr),e(v7,wH),e(wH,phr),e(v7,_hr),e(Le,uhr),e(Le,F7),e(F7,hFe),e(hFe,bhr),e(F7,vhr),e(F7,AH),e(AH,Fhr),e(F7,Thr),e(Le,Mhr),e(Le,T7),e(T7,pFe),e(pFe,Ehr),e(T7,Chr),e(T7,LH),e(LH,whr),e(T7,Ahr),e(Le,Lhr),e(Le,M7),e(M7,_Fe),e(_Fe,yhr),e(M7,xhr),e(M7,yH),e(yH,$hr),e(M7,khr),e(Le,Shr),e(Le,E7),e(E7,uFe),e(uFe,Rhr),e(E7,Phr),e(E7,xH),e(xH,Bhr),e(E7,Nhr),e(Le,Ihr),e(Le,C7),e(C7,bFe),e(bFe,qhr),e(C7,jhr),e(C7,$H),e($H,Dhr),e(C7,Ghr),e(Le,Ohr),e(Le,w7),e(w7,vFe),e(vFe,Vhr),e(w7,Xhr),e(w7,kH),e(kH,zhr),e(w7,Qhr),e(Le,Whr),e(Le,A7),e(A7,FFe),e(FFe,Hhr),e(A7,Uhr),e(A7,SH),e(SH,Jhr),e(A7,Yhr),e(Le,Khr),e(Le,L7),e(L7,TFe),e(TFe,Zhr),e(L7,epr),e(L7,RH),e(RH,opr),e(L7,rpr),e(Le,tpr),e(Le,y7),e(y7,MFe),e(MFe,apr),e(y7,npr),e(y7,PH),e(PH,spr),e(y7,lpr),e(ho,ipr),e(ho,x7),e(x7,dpr),e(x7,EFe),e(EFe,cpr),e(x7,fpr),e(x7,CFe),e(CFe,mpr),e(ho,gpr),M($7,ho,null),b(f,vze,u),b(f,jd,u),e(jd,k7),e(k7,wFe),M(h9,wFe,null),e(jd,hpr),e(jd,AFe),e(AFe,ppr),b(f,Fze,u),b(f,Ho,u),M(p9,Ho,null),e(Ho,_pr),e(Ho,Dd),e(Dd,upr),e(Dd,BH),e(BH,bpr),e(Dd,vpr),e(Dd,NH),e(NH,Fpr),e(Dd,Tpr),e(Ho,Mpr),e(Ho,_9),e(_9,Epr),e(_9,LFe),e(LFe,Cpr),e(_9,wpr),e(Ho,Apr),e(Ho,At),M(u9,At,null),e(At,Lpr),e(At,yFe),e(yFe,ypr),e(At,xpr),e(At,Gd),e(Gd,$pr),e(Gd,xFe),e(xFe,kpr),e(Gd,Spr),e(Gd,IH),e(IH,Rpr),e(Gd,Ppr),e(At,Bpr),M(S7,At,null),e(Ho,Npr),e(Ho,po),M(b9,po,null),e(po,Ipr),e(po,$Fe),e($Fe,qpr),e(po,jpr),e(po,Za),e(Za,Dpr),e(Za,kFe),e(kFe,Gpr),e(Za,Opr),e(Za,SFe),e(SFe,Vpr),e(Za,Xpr),e(Za,RFe),e(RFe,zpr),e(Za,Qpr),e(po,Wpr),e(po,v9),e(v9,R7),e(R7,PFe),e(PFe,Hpr),e(R7,Upr),e(R7,qH),e(qH,Jpr),e(R7,Ypr),e(v9,Kpr),e(v9,P7),e(P7,BFe),e(BFe,Zpr),e(P7,e_r),e(P7,jH),e(jH,o_r),e(P7,r_r),e(po,t_r),e(po,B7),e(B7,a_r),e(B7,NFe),e(NFe,n_r),e(B7,s_r),e(B7,IFe),e(IFe,l_r),e(po,i_r),M(N7,po,null),b(f,Tze,u),b(f,Od,u),e(Od,I7),e(I7,qFe),M(F9,qFe,null),e(Od,d_r),e(Od,jFe),e(jFe,c_r),b(f,Mze,u),b(f,Uo,u),M(T9,Uo,null),e(Uo,f_r),e(Uo,Vd),e(Vd,m_r),e(Vd,DH),e(DH,g_r),e(Vd,h_r),e(Vd,GH),e(GH,p_r),e(Vd,__r),e(Uo,u_r),e(Uo,M9),e(M9,b_r),e(M9,DFe),e(DFe,v_r),e(M9,F_r),e(Uo,T_r),e(Uo,Lt),M(E9,Lt,null),e(Lt,M_r),e(Lt,GFe),e(GFe,E_r),e(Lt,C_r),e(Lt,Xd),e(Xd,w_r),e(Xd,OFe),e(OFe,A_r),e(Xd,L_r),e(Xd,OH),e(OH,y_r),e(Xd,x_r),e(Lt,$_r),M(q7,Lt,null),e(Uo,k_r),e(Uo,_o),M(C9,_o,null),e(_o,S_r),e(_o,VFe),e(VFe,R_r),e(_o,P_r),e(_o,en),e(en,B_r),e(en,XFe),e(XFe,N_r),e(en,I_r),e(en,zFe),e(zFe,q_r),e(en,j_r),e(en,QFe),e(QFe,D_r),e(en,G_r),e(_o,O_r),e(_o,tt),e(tt,j7),e(j7,WFe),e(WFe,V_r),e(j7,X_r),e(j7,VH),e(VH,z_r),e(j7,Q_r),e(tt,W_r),e(tt,D7),e(D7,HFe),e(HFe,H_r),e(D7,U_r),e(D7,XH),e(XH,J_r),e(D7,Y_r),e(tt,K_r),e(tt,G7),e(G7,UFe),e(UFe,Z_r),e(G7,eur),e(G7,zH),e(zH,our),e(G7,rur),e(tt,tur),e(tt,O7),e(O7,JFe),e(JFe,aur),e(O7,nur),e(O7,QH),e(QH,sur),e(O7,lur),e(tt,iur),e(tt,V7),e(V7,YFe),e(YFe,dur),e(V7,cur),e(V7,WH),e(WH,fur),e(V7,mur),e(_o,gur),e(_o,X7),e(X7,hur),e(X7,KFe),e(KFe,pur),e(X7,_ur),e(X7,ZFe),e(ZFe,uur),e(_o,bur),M(z7,_o,null),b(f,Eze,u),b(f,zd,u),e(zd,Q7),e(Q7,e6e),M(w9,e6e,null),e(zd,vur),e(zd,o6e),e(o6e,Fur),b(f,Cze,u),b(f,Jo,u),M(A9,Jo,null),e(Jo,Tur),e(Jo,Qd),e(Qd,Mur),e(Qd,HH),e(HH,Eur),e(Qd,Cur),e(Qd,UH),e(UH,wur),e(Qd,Aur),e(Jo,Lur),e(Jo,L9),e(L9,yur),e(L9,r6e),e(r6e,xur),e(L9,$ur),e(Jo,kur),e(Jo,yt),M(y9,yt,null),e(yt,Sur),e(yt,t6e),e(t6e,Rur),e(yt,Pur),e(yt,Wd),e(Wd,Bur),e(Wd,a6e),e(a6e,Nur),e(Wd,Iur),e(Wd,JH),e(JH,qur),e(Wd,jur),e(yt,Dur),M(W7,yt,null),e(Jo,Gur),e(Jo,uo),M(x9,uo,null),e(uo,Our),e(uo,n6e),e(n6e,Vur),e(uo,Xur),e(uo,on),e(on,zur),e(on,s6e),e(s6e,Qur),e(on,Wur),e(on,l6e),e(l6e,Hur),e(on,Uur),e(on,i6e),e(i6e,Jur),e(on,Yur),e(uo,Kur),e(uo,Hd),e(Hd,H7),e(H7,d6e),e(d6e,Zur),e(H7,e2r),e(H7,YH),e(YH,o2r),e(H7,r2r),e(Hd,t2r),e(Hd,U7),e(U7,c6e),e(c6e,a2r),e(U7,n2r),e(U7,KH),e(KH,s2r),e(U7,l2r),e(Hd,i2r),e(Hd,J7),e(J7,f6e),e(f6e,d2r),e(J7,c2r),e(J7,ZH),e(ZH,f2r),e(J7,m2r),e(uo,g2r),e(uo,Y7),e(Y7,h2r),e(Y7,m6e),e(m6e,p2r),e(Y7,_2r),e(Y7,g6e),e(g6e,u2r),e(uo,b2r),M(K7,uo,null),b(f,wze,u),b(f,Ud,u),e(Ud,Z7),e(Z7,h6e),M($9,h6e,null),e(Ud,v2r),e(Ud,p6e),e(p6e,F2r),b(f,Aze,u),b(f,Yo,u),M(k9,Yo,null),e(Yo,T2r),e(Yo,Jd),e(Jd,M2r),e(Jd,eU),e(eU,E2r),e(Jd,C2r),e(Jd,oU),e(oU,w2r),e(Jd,A2r),e(Yo,L2r),e(Yo,S9),e(S9,y2r),e(S9,_6e),e(_6e,x2r),e(S9,$2r),e(Yo,k2r),e(Yo,xt),M(R9,xt,null),e(xt,S2r),e(xt,u6e),e(u6e,R2r),e(xt,P2r),e(xt,Yd),e(Yd,B2r),e(Yd,b6e),e(b6e,N2r),e(Yd,I2r),e(Yd,rU),e(rU,q2r),e(Yd,j2r),e(xt,D2r),M(e8,xt,null),e(Yo,G2r),e(Yo,bo),M(P9,bo,null),e(bo,O2r),e(bo,v6e),e(v6e,V2r),e(bo,X2r),e(bo,rn),e(rn,z2r),e(rn,F6e),e(F6e,Q2r),e(rn,W2r),e(rn,T6e),e(T6e,H2r),e(rn,U2r),e(rn,M6e),e(M6e,J2r),e(rn,Y2r),e(bo,K2r),e(bo,B9),e(B9,o8),e(o8,E6e),e(E6e,Z2r),e(o8,e1r),e(o8,tU),e(tU,o1r),e(o8,r1r),e(B9,t1r),e(B9,r8),e(r8,C6e),e(C6e,a1r),e(r8,n1r),e(r8,aU),e(aU,s1r),e(r8,l1r),e(bo,i1r),e(bo,t8),e(t8,d1r),e(t8,w6e),e(w6e,c1r),e(t8,f1r),e(t8,A6e),e(A6e,m1r),e(bo,g1r),M(a8,bo,null),b(f,Lze,u),b(f,Kd,u),e(Kd,n8),e(n8,L6e),M(N9,L6e,null),e(Kd,h1r),e(Kd,y6e),e(y6e,p1r),b(f,yze,u),b(f,Ko,u),M(I9,Ko,null),e(Ko,_1r),e(Ko,Zd),e(Zd,u1r),e(Zd,nU),e(nU,b1r),e(Zd,v1r),e(Zd,sU),e(sU,F1r),e(Zd,T1r),e(Ko,M1r),e(Ko,q9),e(q9,E1r),e(q9,x6e),e(x6e,C1r),e(q9,w1r),e(Ko,A1r),e(Ko,$t),M(j9,$t,null),e($t,L1r),e($t,$6e),e($6e,y1r),e($t,x1r),e($t,ec),e(ec,$1r),e(ec,k6e),e(k6e,k1r),e(ec,S1r),e(ec,lU),e(lU,R1r),e(ec,P1r),e($t,B1r),M(s8,$t,null),e(Ko,N1r),e(Ko,vo),M(D9,vo,null),e(vo,I1r),e(vo,S6e),e(S6e,q1r),e(vo,j1r),e(vo,tn),e(tn,D1r),e(tn,R6e),e(R6e,G1r),e(tn,O1r),e(tn,P6e),e(P6e,V1r),e(tn,X1r),e(tn,B6e),e(B6e,z1r),e(tn,Q1r),e(vo,W1r),e(vo,N6e),e(N6e,l8),e(l8,I6e),e(I6e,H1r),e(l8,U1r),e(l8,iU),e(iU,J1r),e(l8,Y1r),e(vo,K1r),e(vo,i8),e(i8,Z1r),e(i8,q6e),e(q6e,ebr),e(i8,obr),e(i8,j6e),e(j6e,rbr),e(vo,tbr),M(d8,vo,null),b(f,xze,u),b(f,oc,u),e(oc,c8),e(c8,D6e),M(G9,D6e,null),e(oc,abr),e(oc,G6e),e(G6e,nbr),b(f,$ze,u),b(f,Zo,u),M(O9,Zo,null),e(Zo,sbr),e(Zo,rc),e(rc,lbr),e(rc,dU),e(dU,ibr),e(rc,dbr),e(rc,cU),e(cU,cbr),e(rc,fbr),e(Zo,mbr),e(Zo,V9),e(V9,gbr),e(V9,O6e),e(O6e,hbr),e(V9,pbr),e(Zo,_br),e(Zo,kt),M(X9,kt,null),e(kt,ubr),e(kt,V6e),e(V6e,bbr),e(kt,vbr),e(kt,tc),e(tc,Fbr),e(tc,X6e),e(X6e,Tbr),e(tc,Mbr),e(tc,fU),e(fU,Ebr),e(tc,Cbr),e(kt,wbr),M(f8,kt,null),e(Zo,Abr),e(Zo,Fo),M(z9,Fo,null),e(Fo,Lbr),e(Fo,z6e),e(z6e,ybr),e(Fo,xbr),e(Fo,an),e(an,$br),e(an,Q6e),e(Q6e,kbr),e(an,Sbr),e(an,W6e),e(W6e,Rbr),e(an,Pbr),e(an,H6e),e(H6e,Bbr),e(an,Nbr),e(Fo,Ibr),e(Fo,at),e(at,m8),e(m8,U6e),e(U6e,qbr),e(m8,jbr),e(m8,mU),e(mU,Dbr),e(m8,Gbr),e(at,Obr),e(at,g8),e(g8,J6e),e(J6e,Vbr),e(g8,Xbr),e(g8,gU),e(gU,zbr),e(g8,Qbr),e(at,Wbr),e(at,h8),e(h8,Y6e),e(Y6e,Hbr),e(h8,Ubr),e(h8,hU),e(hU,Jbr),e(h8,Ybr),e(at,Kbr),e(at,p8),e(p8,K6e),e(K6e,Zbr),e(p8,evr),e(p8,pU),e(pU,ovr),e(p8,rvr),e(at,tvr),e(at,_8),e(_8,Z6e),e(Z6e,avr),e(_8,nvr),e(_8,_U),e(_U,svr),e(_8,lvr),e(Fo,ivr),e(Fo,u8),e(u8,dvr),e(u8,eTe),e(eTe,cvr),e(u8,fvr),e(u8,oTe),e(oTe,mvr),e(Fo,gvr),M(b8,Fo,null),b(f,kze,u),b(f,ac,u),e(ac,v8),e(v8,rTe),M(Q9,rTe,null),e(ac,hvr),e(ac,tTe),e(tTe,pvr),b(f,Sze,u),b(f,er,u),M(W9,er,null),e(er,_vr),e(er,nc),e(nc,uvr),e(nc,uU),e(uU,bvr),e(nc,vvr),e(nc,bU),e(bU,Fvr),e(nc,Tvr),e(er,Mvr),e(er,H9),e(H9,Evr),e(H9,aTe),e(aTe,Cvr),e(H9,wvr),e(er,Avr),e(er,St),M(U9,St,null),e(St,Lvr),e(St,nTe),e(nTe,yvr),e(St,xvr),e(St,sc),e(sc,$vr),e(sc,sTe),e(sTe,kvr),e(sc,Svr),e(sc,vU),e(vU,Rvr),e(sc,Pvr),e(St,Bvr),M(F8,St,null),e(er,Nvr),e(er,To),M(J9,To,null),e(To,Ivr),e(To,lTe),e(lTe,qvr),e(To,jvr),e(To,nn),e(nn,Dvr),e(nn,iTe),e(iTe,Gvr),e(nn,Ovr),e(nn,dTe),e(dTe,Vvr),e(nn,Xvr),e(nn,cTe),e(cTe,zvr),e(nn,Qvr),e(To,Wvr),e(To,fTe),e(fTe,T8),e(T8,mTe),e(mTe,Hvr),e(T8,Uvr),e(T8,FU),e(FU,Jvr),e(T8,Yvr),e(To,Kvr),e(To,M8),e(M8,Zvr),e(M8,gTe),e(gTe,eFr),e(M8,oFr),e(M8,hTe),e(hTe,rFr),e(To,tFr),M(E8,To,null),b(f,Rze,u),b(f,lc,u),e(lc,C8),e(C8,pTe),M(Y9,pTe,null),e(lc,aFr),e(lc,_Te),e(_Te,nFr),b(f,Pze,u),b(f,or,u),M(K9,or,null),e(or,sFr),e(or,ic),e(ic,lFr),e(ic,TU),e(TU,iFr),e(ic,dFr),e(ic,MU),e(MU,cFr),e(ic,fFr),e(or,mFr),e(or,Z9),e(Z9,gFr),e(Z9,uTe),e(uTe,hFr),e(Z9,pFr),e(or,_Fr),e(or,Rt),M(ex,Rt,null),e(Rt,uFr),e(Rt,bTe),e(bTe,bFr),e(Rt,vFr),e(Rt,dc),e(dc,FFr),e(dc,vTe),e(vTe,TFr),e(dc,MFr),e(dc,EU),e(EU,EFr),e(dc,CFr),e(Rt,wFr),M(w8,Rt,null),e(or,AFr),e(or,xr),M(ox,xr,null),e(xr,LFr),e(xr,FTe),e(FTe,yFr),e(xr,xFr),e(xr,sn),e(sn,$Fr),e(sn,TTe),e(TTe,kFr),e(sn,SFr),e(sn,MTe),e(MTe,RFr),e(sn,PFr),e(sn,ETe),e(ETe,BFr),e(sn,NFr),e(xr,IFr),e(xr,q),e(q,A8),e(A8,CTe),e(CTe,qFr),e(A8,jFr),e(A8,CU),e(CU,DFr),e(A8,GFr),e(q,OFr),e(q,L8),e(L8,wTe),e(wTe,VFr),e(L8,XFr),e(L8,wU),e(wU,zFr),e(L8,QFr),e(q,WFr),e(q,y8),e(y8,ATe),e(ATe,HFr),e(y8,UFr),e(y8,AU),e(AU,JFr),e(y8,YFr),e(q,KFr),e(q,x8),e(x8,LTe),e(LTe,ZFr),e(x8,e6r),e(x8,LU),e(LU,o6r),e(x8,r6r),e(q,t6r),e(q,$8),e($8,yTe),e(yTe,a6r),e($8,n6r),e($8,yU),e(yU,s6r),e($8,l6r),e(q,i6r),e(q,k8),e(k8,xTe),e(xTe,d6r),e(k8,c6r),e(k8,xU),e(xU,f6r),e(k8,m6r),e(q,g6r),e(q,S8),e(S8,$Te),e($Te,h6r),e(S8,p6r),e(S8,$U),e($U,_6r),e(S8,u6r),e(q,b6r),e(q,R8),e(R8,kTe),e(kTe,v6r),e(R8,F6r),e(R8,kU),e(kU,T6r),e(R8,M6r),e(q,E6r),e(q,P8),e(P8,STe),e(STe,C6r),e(P8,w6r),e(P8,SU),e(SU,A6r),e(P8,L6r),e(q,y6r),e(q,B8),e(B8,RTe),e(RTe,x6r),e(B8,$6r),e(B8,RU),e(RU,k6r),e(B8,S6r),e(q,R6r),e(q,N8),e(N8,PTe),e(PTe,P6r),e(N8,B6r),e(N8,PU),e(PU,N6r),e(N8,I6r),e(q,q6r),e(q,I8),e(I8,BTe),e(BTe,j6r),e(I8,D6r),e(I8,BU),e(BU,G6r),e(I8,O6r),e(q,V6r),e(q,q8),e(q8,NTe),e(NTe,X6r),e(q8,z6r),e(q8,NU),e(NU,Q6r),e(q8,W6r),e(q,H6r),e(q,j8),e(j8,ITe),e(ITe,U6r),e(j8,J6r),e(j8,IU),e(IU,Y6r),e(j8,K6r),e(q,Z6r),e(q,D8),e(D8,qTe),e(qTe,eTr),e(D8,oTr),e(D8,qU),e(qU,rTr),e(D8,tTr),e(q,aTr),e(q,G8),e(G8,jTe),e(jTe,nTr),e(G8,sTr),e(G8,jU),e(jU,lTr),e(G8,iTr),e(q,dTr),e(q,O8),e(O8,DTe),e(DTe,cTr),e(O8,fTr),e(O8,DU),e(DU,mTr),e(O8,gTr),e(q,hTr),e(q,V8),e(V8,GTe),e(GTe,pTr),e(V8,_Tr),e(V8,GU),e(GU,uTr),e(V8,bTr),e(q,vTr),e(q,Ys),e(Ys,OTe),e(OTe,FTr),e(Ys,TTr),e(Ys,OU),e(OU,MTr),e(Ys,ETr),e(Ys,VU),e(VU,CTr),e(Ys,wTr),e(q,ATr),e(q,X8),e(X8,VTe),e(VTe,LTr),e(X8,yTr),e(X8,XU),e(XU,xTr),e(X8,$Tr),e(q,kTr),e(q,z8),e(z8,XTe),e(XTe,STr),e(z8,RTr),e(z8,zU),e(zU,PTr),e(z8,BTr),e(q,NTr),e(q,Q8),e(Q8,zTe),e(zTe,ITr),e(Q8,qTr),e(Q8,QU),e(QU,jTr),e(Q8,DTr),e(q,GTr),e(q,W8),e(W8,QTe),e(QTe,OTr),e(W8,VTr),e(W8,WU),e(WU,XTr),e(W8,zTr),e(q,QTr),e(q,H8),e(H8,WTe),e(WTe,WTr),e(H8,HTr),e(H8,HU),e(HU,UTr),e(H8,JTr),e(q,YTr),e(q,U8),e(U8,HTe),e(HTe,KTr),e(U8,ZTr),e(U8,UU),e(UU,e7r),e(U8,o7r),e(q,r7r),e(q,J8),e(J8,UTe),e(UTe,t7r),e(J8,a7r),e(J8,JU),e(JU,n7r),e(J8,s7r),e(q,l7r),e(q,Y8),e(Y8,JTe),e(JTe,i7r),e(Y8,d7r),e(Y8,YU),e(YU,c7r),e(Y8,f7r),e(q,m7r),e(q,K8),e(K8,YTe),e(YTe,g7r),e(K8,h7r),e(K8,KU),e(KU,p7r),e(K8,_7r),e(q,u7r),e(q,Z8),e(Z8,KTe),e(KTe,b7r),e(Z8,v7r),e(Z8,ZU),e(ZU,F7r),e(Z8,T7r),e(q,M7r),e(q,eM),e(eM,ZTe),e(ZTe,E7r),e(eM,C7r),e(eM,eJ),e(eJ,w7r),e(eM,A7r),e(q,L7r),e(q,oM),e(oM,e7e),e(e7e,y7r),e(oM,x7r),e(oM,oJ),e(oJ,$7r),e(oM,k7r),e(q,S7r),e(q,rM),e(rM,o7e),e(o7e,R7r),e(rM,P7r),e(rM,rJ),e(rJ,B7r),e(rM,N7r),e(q,I7r),e(q,tM),e(tM,r7e),e(r7e,q7r),e(tM,j7r),e(tM,tJ),e(tJ,D7r),e(tM,G7r),e(q,O7r),e(q,aM),e(aM,t7e),e(t7e,V7r),e(aM,X7r),e(aM,aJ),e(aJ,z7r),e(aM,Q7r),e(q,W7r),e(q,nM),e(nM,a7e),e(a7e,H7r),e(nM,U7r),e(nM,nJ),e(nJ,J7r),e(nM,Y7r),e(q,K7r),e(q,sM),e(sM,n7e),e(n7e,Z7r),e(sM,e8r),e(sM,sJ),e(sJ,o8r),e(sM,r8r),e(q,t8r),e(q,lM),e(lM,s7e),e(s7e,a8r),e(lM,n8r),e(lM,lJ),e(lJ,s8r),e(lM,l8r),e(q,i8r),e(q,iM),e(iM,l7e),e(l7e,d8r),e(iM,c8r),e(iM,iJ),e(iJ,f8r),e(iM,m8r),e(q,g8r),e(q,dM),e(dM,i7e),e(i7e,h8r),e(dM,p8r),e(dM,dJ),e(dJ,_8r),e(dM,u8r),e(q,b8r),e(q,cM),e(cM,d7e),e(d7e,v8r),e(cM,F8r),e(cM,cJ),e(cJ,T8r),e(cM,M8r),e(q,E8r),e(q,fM),e(fM,c7e),e(c7e,C8r),e(fM,w8r),e(fM,fJ),e(fJ,A8r),e(fM,L8r),e(q,y8r),e(q,mM),e(mM,f7e),e(f7e,x8r),e(mM,$8r),e(mM,mJ),e(mJ,k8r),e(mM,S8r),e(q,R8r),e(q,gM),e(gM,m7e),e(m7e,P8r),e(gM,B8r),e(gM,gJ),e(gJ,N8r),e(gM,I8r),e(q,q8r),e(q,hM),e(hM,g7e),e(g7e,j8r),e(hM,D8r),e(hM,hJ),e(hJ,G8r),e(hM,O8r),e(q,V8r),e(q,pM),e(pM,h7e),e(h7e,X8r),e(pM,z8r),e(pM,pJ),e(pJ,Q8r),e(pM,W8r),e(q,H8r),e(q,_M),e(_M,p7e),e(p7e,U8r),e(_M,J8r),e(_M,_J),e(_J,Y8r),e(_M,K8r),e(q,Z8r),e(q,uM),e(uM,_7e),e(_7e,eMr),e(uM,oMr),e(uM,uJ),e(uJ,rMr),e(uM,tMr),e(q,aMr),e(q,bM),e(bM,u7e),e(u7e,nMr),e(bM,sMr),e(bM,bJ),e(bJ,lMr),e(bM,iMr),e(q,dMr),e(q,vM),e(vM,b7e),e(b7e,cMr),e(vM,fMr),e(vM,vJ),e(vJ,mMr),e(vM,gMr),e(q,hMr),e(q,FM),e(FM,v7e),e(v7e,pMr),e(FM,_Mr),e(FM,FJ),e(FJ,uMr),e(FM,bMr),e(xr,vMr),M(TM,xr,null),b(f,Bze,u),b(f,cc,u),e(cc,MM),e(MM,F7e),M(rx,F7e,null),e(cc,FMr),e(cc,T7e),e(T7e,TMr),b(f,Nze,u),b(f,rr,u),M(tx,rr,null),e(rr,MMr),e(rr,fc),e(fc,EMr),e(fc,TJ),e(TJ,CMr),e(fc,wMr),e(fc,MJ),e(MJ,AMr),e(fc,LMr),e(rr,yMr),e(rr,ax),e(ax,xMr),e(ax,M7e),e(M7e,$Mr),e(ax,kMr),e(rr,SMr),e(rr,Pt),M(nx,Pt,null),e(Pt,RMr),e(Pt,E7e),e(E7e,PMr),e(Pt,BMr),e(Pt,mc),e(mc,NMr),e(mc,C7e),e(C7e,IMr),e(mc,qMr),e(mc,EJ),e(EJ,jMr),e(mc,DMr),e(Pt,GMr),M(EM,Pt,null),e(rr,OMr),e(rr,$r),M(sx,$r,null),e($r,VMr),e($r,w7e),e(w7e,XMr),e($r,zMr),e($r,ln),e(ln,QMr),e(ln,A7e),e(A7e,WMr),e(ln,HMr),e(ln,L7e),e(L7e,UMr),e(ln,JMr),e(ln,y7e),e(y7e,YMr),e(ln,KMr),e($r,ZMr),e($r,se),e(se,CM),e(CM,x7e),e(x7e,e4r),e(CM,o4r),e(CM,CJ),e(CJ,r4r),e(CM,t4r),e(se,a4r),e(se,wM),e(wM,$7e),e($7e,n4r),e(wM,s4r),e(wM,wJ),e(wJ,l4r),e(wM,i4r),e(se,d4r),e(se,AM),e(AM,k7e),e(k7e,c4r),e(AM,f4r),e(AM,AJ),e(AJ,m4r),e(AM,g4r),e(se,h4r),e(se,LM),e(LM,S7e),e(S7e,p4r),e(LM,_4r),e(LM,LJ),e(LJ,u4r),e(LM,b4r),e(se,v4r),e(se,yM),e(yM,R7e),e(R7e,F4r),e(yM,T4r),e(yM,yJ),e(yJ,M4r),e(yM,E4r),e(se,C4r),e(se,xM),e(xM,P7e),e(P7e,w4r),e(xM,A4r),e(xM,xJ),e(xJ,L4r),e(xM,y4r),e(se,x4r),e(se,$M),e($M,B7e),e(B7e,$4r),e($M,k4r),e($M,$J),e($J,S4r),e($M,R4r),e(se,P4r),e(se,kM),e(kM,N7e),e(N7e,B4r),e(kM,N4r),e(kM,kJ),e(kJ,I4r),e(kM,q4r),e(se,j4r),e(se,SM),e(SM,I7e),e(I7e,D4r),e(SM,G4r),e(SM,SJ),e(SJ,O4r),e(SM,V4r),e(se,X4r),e(se,RM),e(RM,q7e),e(q7e,z4r),e(RM,Q4r),e(RM,RJ),e(RJ,W4r),e(RM,H4r),e(se,U4r),e(se,PM),e(PM,j7e),e(j7e,J4r),e(PM,Y4r),e(PM,PJ),e(PJ,K4r),e(PM,Z4r),e(se,eEr),e(se,BM),e(BM,D7e),e(D7e,oEr),e(BM,rEr),e(BM,BJ),e(BJ,tEr),e(BM,aEr),e(se,nEr),e(se,NM),e(NM,G7e),e(G7e,sEr),e(NM,lEr),e(NM,NJ),e(NJ,iEr),e(NM,dEr),e(se,cEr),e(se,IM),e(IM,O7e),e(O7e,fEr),e(IM,mEr),e(IM,IJ),e(IJ,gEr),e(IM,hEr),e(se,pEr),e(se,qM),e(qM,V7e),e(V7e,_Er),e(qM,uEr),e(qM,qJ),e(qJ,bEr),e(qM,vEr),e(se,FEr),e(se,jM),e(jM,X7e),e(X7e,TEr),e(jM,MEr),e(jM,jJ),e(jJ,EEr),e(jM,CEr),e(se,wEr),e(se,DM),e(DM,z7e),e(z7e,AEr),e(DM,LEr),e(DM,DJ),e(DJ,yEr),e(DM,xEr),e(se,$Er),e(se,GM),e(GM,Q7e),e(Q7e,kEr),e(GM,SEr),e(GM,GJ),e(GJ,REr),e(GM,PEr),e(se,BEr),e(se,OM),e(OM,W7e),e(W7e,NEr),e(OM,IEr),e(OM,OJ),e(OJ,qEr),e(OM,jEr),e(se,DEr),e(se,VM),e(VM,H7e),e(H7e,GEr),e(VM,OEr),e(VM,VJ),e(VJ,VEr),e(VM,XEr),e(se,zEr),e(se,XM),e(XM,U7e),e(U7e,QEr),e(XM,WEr),e(XM,XJ),e(XJ,HEr),e(XM,UEr),e(se,JEr),e(se,zM),e(zM,J7e),e(J7e,YEr),e(zM,KEr),e(zM,zJ),e(zJ,ZEr),e(zM,eCr),e(se,oCr),e(se,QM),e(QM,Y7e),e(Y7e,rCr),e(QM,tCr),e(QM,QJ),e(QJ,aCr),e(QM,nCr),e($r,sCr),M(WM,$r,null),b(f,Ize,u),b(f,gc,u),e(gc,HM),e(HM,K7e),M(lx,K7e,null),e(gc,lCr),e(gc,Z7e),e(Z7e,iCr),b(f,qze,u),b(f,tr,u),M(ix,tr,null),e(tr,dCr),e(tr,hc),e(hc,cCr),e(hc,WJ),e(WJ,fCr),e(hc,mCr),e(hc,HJ),e(HJ,gCr),e(hc,hCr),e(tr,pCr),e(tr,dx),e(dx,_Cr),e(dx,e8e),e(e8e,uCr),e(dx,bCr),e(tr,vCr),e(tr,Bt),M(cx,Bt,null),e(Bt,FCr),e(Bt,o8e),e(o8e,TCr),e(Bt,MCr),e(Bt,pc),e(pc,ECr),e(pc,r8e),e(r8e,CCr),e(pc,wCr),e(pc,UJ),e(UJ,ACr),e(pc,LCr),e(Bt,yCr),M(UM,Bt,null),e(tr,xCr),e(tr,kr),M(fx,kr,null),e(kr,$Cr),e(kr,t8e),e(t8e,kCr),e(kr,SCr),e(kr,dn),e(dn,RCr),e(dn,a8e),e(a8e,PCr),e(dn,BCr),e(dn,n8e),e(n8e,NCr),e(dn,ICr),e(dn,s8e),e(s8e,qCr),e(dn,jCr),e(kr,DCr),e(kr,Me),e(Me,JM),e(JM,l8e),e(l8e,GCr),e(JM,OCr),e(JM,JJ),e(JJ,VCr),e(JM,XCr),e(Me,zCr),e(Me,YM),e(YM,i8e),e(i8e,QCr),e(YM,WCr),e(YM,YJ),e(YJ,HCr),e(YM,UCr),e(Me,JCr),e(Me,KM),e(KM,d8e),e(d8e,YCr),e(KM,KCr),e(KM,KJ),e(KJ,ZCr),e(KM,e5r),e(Me,o5r),e(Me,ZM),e(ZM,c8e),e(c8e,r5r),e(ZM,t5r),e(ZM,ZJ),e(ZJ,a5r),e(ZM,n5r),e(Me,s5r),e(Me,e4),e(e4,f8e),e(f8e,l5r),e(e4,i5r),e(e4,eY),e(eY,d5r),e(e4,c5r),e(Me,f5r),e(Me,o4),e(o4,m8e),e(m8e,m5r),e(o4,g5r),e(o4,oY),e(oY,h5r),e(o4,p5r),e(Me,_5r),e(Me,r4),e(r4,g8e),e(g8e,u5r),e(r4,b5r),e(r4,rY),e(rY,v5r),e(r4,F5r),e(Me,T5r),e(Me,t4),e(t4,h8e),e(h8e,M5r),e(t4,E5r),e(t4,tY),e(tY,C5r),e(t4,w5r),e(Me,A5r),e(Me,a4),e(a4,p8e),e(p8e,L5r),e(a4,y5r),e(a4,aY),e(aY,x5r),e(a4,$5r),e(Me,k5r),e(Me,n4),e(n4,_8e),e(_8e,S5r),e(n4,R5r),e(n4,nY),e(nY,P5r),e(n4,B5r),e(Me,N5r),e(Me,s4),e(s4,u8e),e(u8e,I5r),e(s4,q5r),e(s4,sY),e(sY,j5r),e(s4,D5r),e(Me,G5r),e(Me,l4),e(l4,b8e),e(b8e,O5r),e(l4,V5r),e(l4,lY),e(lY,X5r),e(l4,z5r),e(Me,Q5r),e(Me,i4),e(i4,v8e),e(v8e,W5r),e(i4,H5r),e(i4,iY),e(iY,U5r),e(i4,J5r),e(kr,Y5r),M(d4,kr,null),b(f,jze,u),b(f,_c,u),e(_c,c4),e(c4,F8e),M(mx,F8e,null),e(_c,K5r),e(_c,T8e),e(T8e,Z5r),b(f,Dze,u),b(f,ar,u),M(gx,ar,null),e(ar,e3r),e(ar,uc),e(uc,o3r),e(uc,dY),e(dY,r3r),e(uc,t3r),e(uc,cY),e(cY,a3r),e(uc,n3r),e(ar,s3r),e(ar,hx),e(hx,l3r),e(hx,M8e),e(M8e,i3r),e(hx,d3r),e(ar,c3r),e(ar,Nt),M(px,Nt,null),e(Nt,f3r),e(Nt,E8e),e(E8e,m3r),e(Nt,g3r),e(Nt,bc),e(bc,h3r),e(bc,C8e),e(C8e,p3r),e(bc,_3r),e(bc,fY),e(fY,u3r),e(bc,b3r),e(Nt,v3r),M(f4,Nt,null),e(ar,F3r),e(ar,Sr),M(_x,Sr,null),e(Sr,T3r),e(Sr,w8e),e(w8e,M3r),e(Sr,E3r),e(Sr,cn),e(cn,C3r),e(cn,A8e),e(A8e,w3r),e(cn,A3r),e(cn,L8e),e(L8e,L3r),e(cn,y3r),e(cn,y8e),e(y8e,x3r),e(cn,$3r),e(Sr,k3r),e(Sr,Qe),e(Qe,m4),e(m4,x8e),e(x8e,S3r),e(m4,R3r),e(m4,mY),e(mY,P3r),e(m4,B3r),e(Qe,N3r),e(Qe,g4),e(g4,$8e),e($8e,I3r),e(g4,q3r),e(g4,gY),e(gY,j3r),e(g4,D3r),e(Qe,G3r),e(Qe,Ks),e(Ks,k8e),e(k8e,O3r),e(Ks,V3r),e(Ks,hY),e(hY,X3r),e(Ks,z3r),e(Ks,pY),e(pY,Q3r),e(Ks,W3r),e(Qe,H3r),e(Qe,h4),e(h4,S8e),e(S8e,U3r),e(h4,J3r),e(h4,_Y),e(_Y,Y3r),e(h4,K3r),e(Qe,Z3r),e(Qe,p4),e(p4,R8e),e(R8e,e0r),e(p4,o0r),e(p4,uY),e(uY,r0r),e(p4,t0r),e(Qe,a0r),e(Qe,_4),e(_4,P8e),e(P8e,n0r),e(_4,s0r),e(_4,bY),e(bY,l0r),e(_4,i0r),e(Qe,d0r),e(Qe,u4),e(u4,B8e),e(B8e,c0r),e(u4,f0r),e(u4,vY),e(vY,m0r),e(u4,g0r),e(Sr,h0r),M(b4,Sr,null),b(f,Gze,u),b(f,vc,u),e(vc,v4),e(v4,N8e),M(ux,N8e,null),e(vc,p0r),e(vc,I8e),e(I8e,_0r),b(f,Oze,u),b(f,nr,u),M(bx,nr,null),e(nr,u0r),e(nr,Fc),e(Fc,b0r),e(Fc,FY),e(FY,v0r),e(Fc,F0r),e(Fc,TY),e(TY,T0r),e(Fc,M0r),e(nr,E0r),e(nr,vx),e(vx,C0r),e(vx,q8e),e(q8e,w0r),e(vx,A0r),e(nr,L0r),e(nr,It),M(Fx,It,null),e(It,y0r),e(It,j8e),e(j8e,x0r),e(It,$0r),e(It,Tc),e(Tc,k0r),e(Tc,D8e),e(D8e,S0r),e(Tc,R0r),e(Tc,MY),e(MY,P0r),e(Tc,B0r),e(It,N0r),M(F4,It,null),e(nr,I0r),e(nr,Rr),M(Tx,Rr,null),e(Rr,q0r),e(Rr,G8e),e(G8e,j0r),e(Rr,D0r),e(Rr,fn),e(fn,G0r),e(fn,O8e),e(O8e,O0r),e(fn,V0r),e(fn,V8e),e(V8e,X0r),e(fn,z0r),e(fn,X8e),e(X8e,Q0r),e(fn,W0r),e(Rr,H0r),e(Rr,ie),e(ie,T4),e(T4,z8e),e(z8e,U0r),e(T4,J0r),e(T4,EY),e(EY,Y0r),e(T4,K0r),e(ie,Z0r),e(ie,M4),e(M4,Q8e),e(Q8e,ewr),e(M4,owr),e(M4,CY),e(CY,rwr),e(M4,twr),e(ie,awr),e(ie,E4),e(E4,W8e),e(W8e,nwr),e(E4,swr),e(E4,wY),e(wY,lwr),e(E4,iwr),e(ie,dwr),e(ie,C4),e(C4,H8e),e(H8e,cwr),e(C4,fwr),e(C4,AY),e(AY,mwr),e(C4,gwr),e(ie,hwr),e(ie,w4),e(w4,U8e),e(U8e,pwr),e(w4,_wr),e(w4,LY),e(LY,uwr),e(w4,bwr),e(ie,vwr),e(ie,A4),e(A4,J8e),e(J8e,Fwr),e(A4,Twr),e(A4,yY),e(yY,Mwr),e(A4,Ewr),e(ie,Cwr),e(ie,L4),e(L4,Y8e),e(Y8e,wwr),e(L4,Awr),e(L4,xY),e(xY,Lwr),e(L4,ywr),e(ie,xwr),e(ie,y4),e(y4,K8e),e(K8e,$wr),e(y4,kwr),e(y4,$Y),e($Y,Swr),e(y4,Rwr),e(ie,Pwr),e(ie,x4),e(x4,Z8e),e(Z8e,Bwr),e(x4,Nwr),e(x4,kY),e(kY,Iwr),e(x4,qwr),e(ie,jwr),e(ie,$4),e($4,eMe),e(eMe,Dwr),e($4,Gwr),e($4,SY),e(SY,Owr),e($4,Vwr),e(ie,Xwr),e(ie,k4),e(k4,oMe),e(oMe,zwr),e(k4,Qwr),e(k4,RY),e(RY,Wwr),e(k4,Hwr),e(ie,Uwr),e(ie,S4),e(S4,rMe),e(rMe,Jwr),e(S4,Ywr),e(S4,PY),e(PY,Kwr),e(S4,Zwr),e(ie,eAr),e(ie,R4),e(R4,tMe),e(tMe,oAr),e(R4,rAr),e(R4,BY),e(BY,tAr),e(R4,aAr),e(ie,nAr),e(ie,P4),e(P4,aMe),e(aMe,sAr),e(P4,lAr),e(P4,NY),e(NY,iAr),e(P4,dAr),e(ie,cAr),e(ie,B4),e(B4,nMe),e(nMe,fAr),e(B4,mAr),e(B4,IY),e(IY,gAr),e(B4,hAr),e(ie,pAr),e(ie,N4),e(N4,sMe),e(sMe,_Ar),e(N4,uAr),e(N4,qY),e(qY,bAr),e(N4,vAr),e(ie,FAr),e(ie,I4),e(I4,lMe),e(lMe,TAr),e(I4,MAr),e(I4,jY),e(jY,EAr),e(I4,CAr),e(ie,wAr),e(ie,q4),e(q4,iMe),e(iMe,AAr),e(q4,LAr),e(q4,DY),e(DY,yAr),e(q4,xAr),e(ie,$Ar),e(ie,j4),e(j4,dMe),e(dMe,kAr),e(j4,SAr),e(j4,GY),e(GY,RAr),e(j4,PAr),e(ie,BAr),e(ie,D4),e(D4,cMe),e(cMe,NAr),e(D4,IAr),e(D4,OY),e(OY,qAr),e(D4,jAr),e(Rr,DAr),M(G4,Rr,null),b(f,Vze,u),b(f,Mc,u),e(Mc,O4),e(O4,fMe),M(Mx,fMe,null),e(Mc,GAr),e(Mc,mMe),e(mMe,OAr),b(f,Xze,u),b(f,sr,u),M(Ex,sr,null),e(sr,VAr),e(sr,Ec),e(Ec,XAr),e(Ec,VY),e(VY,zAr),e(Ec,QAr),e(Ec,XY),e(XY,WAr),e(Ec,HAr),e(sr,UAr),e(sr,Cx),e(Cx,JAr),e(Cx,gMe),e(gMe,YAr),e(Cx,KAr),e(sr,ZAr),e(sr,qt),M(wx,qt,null),e(qt,eLr),e(qt,hMe),e(hMe,oLr),e(qt,rLr),e(qt,Cc),e(Cc,tLr),e(Cc,pMe),e(pMe,aLr),e(Cc,nLr),e(Cc,zY),e(zY,sLr),e(Cc,lLr),e(qt,iLr),M(V4,qt,null),e(sr,dLr),e(sr,Pr),M(Ax,Pr,null),e(Pr,cLr),e(Pr,_Me),e(_Me,fLr),e(Pr,mLr),e(Pr,mn),e(mn,gLr),e(mn,uMe),e(uMe,hLr),e(mn,pLr),e(mn,bMe),e(bMe,_Lr),e(mn,uLr),e(mn,vMe),e(vMe,bLr),e(mn,vLr),e(Pr,FLr),e(Pr,ye),e(ye,X4),e(X4,FMe),e(FMe,TLr),e(X4,MLr),e(X4,QY),e(QY,ELr),e(X4,CLr),e(ye,wLr),e(ye,z4),e(z4,TMe),e(TMe,ALr),e(z4,LLr),e(z4,WY),e(WY,yLr),e(z4,xLr),e(ye,$Lr),e(ye,Q4),e(Q4,MMe),e(MMe,kLr),e(Q4,SLr),e(Q4,HY),e(HY,RLr),e(Q4,PLr),e(ye,BLr),e(ye,W4),e(W4,EMe),e(EMe,NLr),e(W4,ILr),e(W4,UY),e(UY,qLr),e(W4,jLr),e(ye,DLr),e(ye,H4),e(H4,CMe),e(CMe,GLr),e(H4,OLr),e(H4,JY),e(JY,VLr),e(H4,XLr),e(ye,zLr),e(ye,U4),e(U4,wMe),e(wMe,QLr),e(U4,WLr),e(U4,YY),e(YY,HLr),e(U4,ULr),e(ye,JLr),e(ye,J4),e(J4,AMe),e(AMe,YLr),e(J4,KLr),e(J4,KY),e(KY,ZLr),e(J4,eyr),e(ye,oyr),e(ye,Y4),e(Y4,LMe),e(LMe,ryr),e(Y4,tyr),e(Y4,ZY),e(ZY,ayr),e(Y4,nyr),e(ye,syr),e(ye,K4),e(K4,yMe),e(yMe,lyr),e(K4,iyr),e(K4,eK),e(eK,dyr),e(K4,cyr),e(ye,fyr),e(ye,Z4),e(Z4,xMe),e(xMe,myr),e(Z4,gyr),e(Z4,oK),e(oK,hyr),e(Z4,pyr),e(Pr,_yr),M(eE,Pr,null),b(f,zze,u),b(f,wc,u),e(wc,oE),e(oE,$Me),M(Lx,$Me,null),e(wc,uyr),e(wc,kMe),e(kMe,byr),b(f,Qze,u),b(f,lr,u),M(yx,lr,null),e(lr,vyr),e(lr,Ac),e(Ac,Fyr),e(Ac,rK),e(rK,Tyr),e(Ac,Myr),e(Ac,tK),e(tK,Eyr),e(Ac,Cyr),e(lr,wyr),e(lr,xx),e(xx,Ayr),e(xx,SMe),e(SMe,Lyr),e(xx,yyr),e(lr,xyr),e(lr,jt),M($x,jt,null),e(jt,$yr),e(jt,RMe),e(RMe,kyr),e(jt,Syr),e(jt,Lc),e(Lc,Ryr),e(Lc,PMe),e(PMe,Pyr),e(Lc,Byr),e(Lc,aK),e(aK,Nyr),e(Lc,Iyr),e(jt,qyr),M(rE,jt,null),e(lr,jyr),e(lr,Br),M(kx,Br,null),e(Br,Dyr),e(Br,BMe),e(BMe,Gyr),e(Br,Oyr),e(Br,gn),e(gn,Vyr),e(gn,NMe),e(NMe,Xyr),e(gn,zyr),e(gn,IMe),e(IMe,Qyr),e(gn,Wyr),e(gn,qMe),e(qMe,Hyr),e(gn,Uyr),e(Br,Jyr),e(Br,te),e(te,tE),e(tE,jMe),e(jMe,Yyr),e(tE,Kyr),e(tE,nK),e(nK,Zyr),e(tE,e9r),e(te,o9r),e(te,aE),e(aE,DMe),e(DMe,r9r),e(aE,t9r),e(aE,sK),e(sK,a9r),e(aE,n9r),e(te,s9r),e(te,nE),e(nE,GMe),e(GMe,l9r),e(nE,i9r),e(nE,lK),e(lK,d9r),e(nE,c9r),e(te,f9r),e(te,sE),e(sE,OMe),e(OMe,m9r),e(sE,g9r),e(sE,iK),e(iK,h9r),e(sE,p9r),e(te,_9r),e(te,lE),e(lE,VMe),e(VMe,u9r),e(lE,b9r),e(lE,dK),e(dK,v9r),e(lE,F9r),e(te,T9r),e(te,iE),e(iE,XMe),e(XMe,M9r),e(iE,E9r),e(iE,cK),e(cK,C9r),e(iE,w9r),e(te,A9r),e(te,dE),e(dE,zMe),e(zMe,L9r),e(dE,y9r),e(dE,fK),e(fK,x9r),e(dE,$9r),e(te,k9r),e(te,cE),e(cE,QMe),e(QMe,S9r),e(cE,R9r),e(cE,mK),e(mK,P9r),e(cE,B9r),e(te,N9r),e(te,fE),e(fE,WMe),e(WMe,I9r),e(fE,q9r),e(fE,gK),e(gK,j9r),e(fE,D9r),e(te,G9r),e(te,mE),e(mE,HMe),e(HMe,O9r),e(mE,V9r),e(mE,hK),e(hK,X9r),e(mE,z9r),e(te,Q9r),e(te,gE),e(gE,UMe),e(UMe,W9r),e(gE,H9r),e(gE,pK),e(pK,U9r),e(gE,J9r),e(te,Y9r),e(te,hE),e(hE,JMe),e(JMe,K9r),e(hE,Z9r),e(hE,_K),e(_K,exr),e(hE,oxr),e(te,rxr),e(te,pE),e(pE,YMe),e(YMe,txr),e(pE,axr),e(pE,uK),e(uK,nxr),e(pE,sxr),e(te,lxr),e(te,_E),e(_E,KMe),e(KMe,ixr),e(_E,dxr),e(_E,bK),e(bK,cxr),e(_E,fxr),e(te,mxr),e(te,uE),e(uE,ZMe),e(ZMe,gxr),e(uE,hxr),e(uE,vK),e(vK,pxr),e(uE,_xr),e(te,uxr),e(te,bE),e(bE,e4e),e(e4e,bxr),e(bE,vxr),e(bE,FK),e(FK,Fxr),e(bE,Txr),e(te,Mxr),e(te,vE),e(vE,o4e),e(o4e,Exr),e(vE,Cxr),e(vE,TK),e(TK,wxr),e(vE,Axr),e(te,Lxr),e(te,FE),e(FE,r4e),e(r4e,yxr),e(FE,xxr),e(FE,MK),e(MK,$xr),e(FE,kxr),e(te,Sxr),e(te,TE),e(TE,t4e),e(t4e,Rxr),e(TE,Pxr),e(TE,EK),e(EK,Bxr),e(TE,Nxr),e(te,Ixr),e(te,ME),e(ME,a4e),e(a4e,qxr),e(ME,jxr),e(ME,CK),e(CK,Dxr),e(ME,Gxr),e(te,Oxr),e(te,EE),e(EE,n4e),e(n4e,Vxr),e(EE,Xxr),e(EE,wK),e(wK,zxr),e(EE,Qxr),e(te,Wxr),e(te,CE),e(CE,s4e),e(s4e,Hxr),e(CE,Uxr),e(CE,AK),e(AK,Jxr),e(CE,Yxr),e(te,Kxr),e(te,wE),e(wE,l4e),e(l4e,Zxr),e(wE,e$r),e(wE,LK),e(LK,o$r),e(wE,r$r),e(te,t$r),e(te,AE),e(AE,i4e),e(i4e,a$r),e(AE,n$r),e(AE,yK),e(yK,s$r),e(AE,l$r),e(te,i$r),e(te,LE),e(LE,d4e),e(d4e,d$r),e(LE,c$r),e(LE,xK),e(xK,f$r),e(LE,m$r),e(te,g$r),e(te,yE),e(yE,c4e),e(c4e,h$r),e(yE,p$r),e(yE,$K),e($K,_$r),e(yE,u$r),e(Br,b$r),M(xE,Br,null),b(f,Wze,u),b(f,yc,u),e(yc,$E),e($E,f4e),M(Sx,f4e,null),e(yc,v$r),e(yc,m4e),e(m4e,F$r),b(f,Hze,u),b(f,ir,u),M(Rx,ir,null),e(ir,T$r),e(ir,xc),e(xc,M$r),e(xc,kK),e(kK,E$r),e(xc,C$r),e(xc,SK),e(SK,w$r),e(xc,A$r),e(ir,L$r),e(ir,Px),e(Px,y$r),e(Px,g4e),e(g4e,x$r),e(Px,$$r),e(ir,k$r),e(ir,Dt),M(Bx,Dt,null),e(Dt,S$r),e(Dt,h4e),e(h4e,R$r),e(Dt,P$r),e(Dt,$c),e($c,B$r),e($c,p4e),e(p4e,N$r),e($c,I$r),e($c,RK),e(RK,q$r),e($c,j$r),e(Dt,D$r),M(kE,Dt,null),e(ir,G$r),e(ir,Nr),M(Nx,Nr,null),e(Nr,O$r),e(Nr,_4e),e(_4e,V$r),e(Nr,X$r),e(Nr,hn),e(hn,z$r),e(hn,u4e),e(u4e,Q$r),e(hn,W$r),e(hn,b4e),e(b4e,H$r),e(hn,U$r),e(hn,v4e),e(v4e,J$r),e(hn,Y$r),e(Nr,K$r),e(Nr,ue),e(ue,SE),e(SE,F4e),e(F4e,Z$r),e(SE,ekr),e(SE,PK),e(PK,okr),e(SE,rkr),e(ue,tkr),e(ue,RE),e(RE,T4e),e(T4e,akr),e(RE,nkr),e(RE,BK),e(BK,skr),e(RE,lkr),e(ue,ikr),e(ue,PE),e(PE,M4e),e(M4e,dkr),e(PE,ckr),e(PE,NK),e(NK,fkr),e(PE,mkr),e(ue,gkr),e(ue,BE),e(BE,E4e),e(E4e,hkr),e(BE,pkr),e(BE,IK),e(IK,_kr),e(BE,ukr),e(ue,bkr),e(ue,NE),e(NE,C4e),e(C4e,vkr),e(NE,Fkr),e(NE,qK),e(qK,Tkr),e(NE,Mkr),e(ue,Ekr),e(ue,IE),e(IE,w4e),e(w4e,Ckr),e(IE,wkr),e(IE,jK),e(jK,Akr),e(IE,Lkr),e(ue,ykr),e(ue,qE),e(qE,A4e),e(A4e,xkr),e(qE,$kr),e(qE,DK),e(DK,kkr),e(qE,Skr),e(ue,Rkr),e(ue,jE),e(jE,L4e),e(L4e,Pkr),e(jE,Bkr),e(jE,GK),e(GK,Nkr),e(jE,Ikr),e(ue,qkr),e(ue,DE),e(DE,y4e),e(y4e,jkr),e(DE,Dkr),e(DE,OK),e(OK,Gkr),e(DE,Okr),e(ue,Vkr),e(ue,GE),e(GE,x4e),e(x4e,Xkr),e(GE,zkr),e(GE,VK),e(VK,Qkr),e(GE,Wkr),e(ue,Hkr),e(ue,OE),e(OE,$4e),e($4e,Ukr),e(OE,Jkr),e(OE,XK),e(XK,Ykr),e(OE,Kkr),e(ue,Zkr),e(ue,VE),e(VE,k4e),e(k4e,eSr),e(VE,oSr),e(VE,zK),e(zK,rSr),e(VE,tSr),e(ue,aSr),e(ue,XE),e(XE,S4e),e(S4e,nSr),e(XE,sSr),e(XE,QK),e(QK,lSr),e(XE,iSr),e(ue,dSr),e(ue,zE),e(zE,R4e),e(R4e,cSr),e(zE,fSr),e(zE,WK),e(WK,mSr),e(zE,gSr),e(ue,hSr),e(ue,QE),e(QE,P4e),e(P4e,pSr),e(QE,_Sr),e(QE,HK),e(HK,uSr),e(QE,bSr),e(ue,vSr),e(ue,WE),e(WE,B4e),e(B4e,FSr),e(WE,TSr),e(WE,UK),e(UK,MSr),e(WE,ESr),e(ue,CSr),e(ue,HE),e(HE,N4e),e(N4e,wSr),e(HE,ASr),e(HE,JK),e(JK,LSr),e(HE,ySr),e(Nr,xSr),M(UE,Nr,null),b(f,Uze,u),b(f,kc,u),e(kc,JE),e(JE,I4e),M(Ix,I4e,null),e(kc,$Sr),e(kc,q4e),e(q4e,kSr),b(f,Jze,u),b(f,dr,u),M(qx,dr,null),e(dr,SSr),e(dr,Sc),e(Sc,RSr),e(Sc,YK),e(YK,PSr),e(Sc,BSr),e(Sc,KK),e(KK,NSr),e(Sc,ISr),e(dr,qSr),e(dr,jx),e(jx,jSr),e(jx,j4e),e(j4e,DSr),e(jx,GSr),e(dr,OSr),e(dr,Gt),M(Dx,Gt,null),e(Gt,VSr),e(Gt,D4e),e(D4e,XSr),e(Gt,zSr),e(Gt,Rc),e(Rc,QSr),e(Rc,G4e),e(G4e,WSr),e(Rc,HSr),e(Rc,ZK),e(ZK,USr),e(Rc,JSr),e(Gt,YSr),M(YE,Gt,null),e(dr,KSr),e(dr,Ir),M(Gx,Ir,null),e(Ir,ZSr),e(Ir,O4e),e(O4e,eRr),e(Ir,oRr),e(Ir,pn),e(pn,rRr),e(pn,V4e),e(V4e,tRr),e(pn,aRr),e(pn,X4e),e(X4e,nRr),e(pn,sRr),e(pn,z4e),e(z4e,lRr),e(pn,iRr),e(Ir,dRr),e(Ir,Ox),e(Ox,KE),e(KE,Q4e),e(Q4e,cRr),e(KE,fRr),e(KE,eZ),e(eZ,mRr),e(KE,gRr),e(Ox,hRr),e(Ox,ZE),e(ZE,W4e),e(W4e,pRr),e(ZE,_Rr),e(ZE,oZ),e(oZ,uRr),e(ZE,bRr),e(Ir,vRr),M(eC,Ir,null),b(f,Yze,u),b(f,Pc,u),e(Pc,oC),e(oC,H4e),M(Vx,H4e,null),e(Pc,FRr),e(Pc,U4e),e(U4e,TRr),b(f,Kze,u),b(f,cr,u),M(Xx,cr,null),e(cr,MRr),e(cr,Bc),e(Bc,ERr),e(Bc,rZ),e(rZ,CRr),e(Bc,wRr),e(Bc,tZ),e(tZ,ARr),e(Bc,LRr),e(cr,yRr),e(cr,zx),e(zx,xRr),e(zx,J4e),e(J4e,$Rr),e(zx,kRr),e(cr,SRr),e(cr,Ot),M(Qx,Ot,null),e(Ot,RRr),e(Ot,Y4e),e(Y4e,PRr),e(Ot,BRr),e(Ot,Nc),e(Nc,NRr),e(Nc,K4e),e(K4e,IRr),e(Nc,qRr),e(Nc,aZ),e(aZ,jRr),e(Nc,DRr),e(Ot,GRr),M(rC,Ot,null),e(cr,ORr),e(cr,qr),M(Wx,qr,null),e(qr,VRr),e(qr,Z4e),e(Z4e,XRr),e(qr,zRr),e(qr,_n),e(_n,QRr),e(_n,eEe),e(eEe,WRr),e(_n,HRr),e(_n,oEe),e(oEe,URr),e(_n,JRr),e(_n,rEe),e(rEe,YRr),e(_n,KRr),e(qr,ZRr),e(qr,tEe),e(tEe,tC),e(tC,aEe),e(aEe,ePr),e(tC,oPr),e(tC,nZ),e(nZ,rPr),e(tC,tPr),e(qr,aPr),M(aC,qr,null),b(f,Zze,u),b(f,Ic,u),e(Ic,nC),e(nC,nEe),M(Hx,nEe,null),e(Ic,nPr),e(Ic,sEe),e(sEe,sPr),b(f,eQe,u),b(f,fr,u),M(Ux,fr,null),e(fr,lPr),e(fr,qc),e(qc,iPr),e(qc,sZ),e(sZ,dPr),e(qc,cPr),e(qc,lZ),e(lZ,fPr),e(qc,mPr),e(fr,gPr),e(fr,Jx),e(Jx,hPr),e(Jx,lEe),e(lEe,pPr),e(Jx,_Pr),e(fr,uPr),e(fr,Vt),M(Yx,Vt,null),e(Vt,bPr),e(Vt,iEe),e(iEe,vPr),e(Vt,FPr),e(Vt,jc),e(jc,TPr),e(jc,dEe),e(dEe,MPr),e(jc,EPr),e(jc,iZ),e(iZ,CPr),e(jc,wPr),e(Vt,APr),M(sC,Vt,null),e(fr,LPr),e(fr,jr),M(Kx,jr,null),e(jr,yPr),e(jr,cEe),e(cEe,xPr),e(jr,$Pr),e(jr,un),e(un,kPr),e(un,fEe),e(fEe,SPr),e(un,RPr),e(un,mEe),e(mEe,PPr),e(un,BPr),e(un,gEe),e(gEe,NPr),e(un,IPr),e(jr,qPr),e(jr,de),e(de,lC),e(lC,hEe),e(hEe,jPr),e(lC,DPr),e(lC,dZ),e(dZ,GPr),e(lC,OPr),e(de,VPr),e(de,iC),e(iC,pEe),e(pEe,XPr),e(iC,zPr),e(iC,cZ),e(cZ,QPr),e(iC,WPr),e(de,HPr),e(de,dC),e(dC,_Ee),e(_Ee,UPr),e(dC,JPr),e(dC,fZ),e(fZ,YPr),e(dC,KPr),e(de,ZPr),e(de,cC),e(cC,uEe),e(uEe,eBr),e(cC,oBr),e(cC,mZ),e(mZ,rBr),e(cC,tBr),e(de,aBr),e(de,fC),e(fC,bEe),e(bEe,nBr),e(fC,sBr),e(fC,gZ),e(gZ,lBr),e(fC,iBr),e(de,dBr),e(de,mC),e(mC,vEe),e(vEe,cBr),e(mC,fBr),e(mC,hZ),e(hZ,mBr),e(mC,gBr),e(de,hBr),e(de,gC),e(gC,FEe),e(FEe,pBr),e(gC,_Br),e(gC,pZ),e(pZ,uBr),e(gC,bBr),e(de,vBr),e(de,hC),e(hC,TEe),e(TEe,FBr),e(hC,TBr),e(hC,_Z),e(_Z,MBr),e(hC,EBr),e(de,CBr),e(de,pC),e(pC,MEe),e(MEe,wBr),e(pC,ABr),e(pC,uZ),e(uZ,LBr),e(pC,yBr),e(de,xBr),e(de,_C),e(_C,EEe),e(EEe,$Br),e(_C,kBr),e(_C,bZ),e(bZ,SBr),e(_C,RBr),e(de,PBr),e(de,uC),e(uC,CEe),e(CEe,BBr),e(uC,NBr),e(uC,vZ),e(vZ,IBr),e(uC,qBr),e(de,jBr),e(de,bC),e(bC,wEe),e(wEe,DBr),e(bC,GBr),e(bC,FZ),e(FZ,OBr),e(bC,VBr),e(de,XBr),e(de,vC),e(vC,AEe),e(AEe,zBr),e(vC,QBr),e(vC,TZ),e(TZ,WBr),e(vC,HBr),e(de,UBr),e(de,FC),e(FC,LEe),e(LEe,JBr),e(FC,YBr),e(FC,MZ),e(MZ,KBr),e(FC,ZBr),e(de,eNr),e(de,TC),e(TC,yEe),e(yEe,oNr),e(TC,rNr),e(TC,EZ),e(EZ,tNr),e(TC,aNr),e(de,nNr),e(de,MC),e(MC,xEe),e(xEe,sNr),e(MC,lNr),e(MC,CZ),e(CZ,iNr),e(MC,dNr),e(de,cNr),e(de,EC),e(EC,$Ee),e($Ee,fNr),e(EC,mNr),e(EC,wZ),e(wZ,gNr),e(EC,hNr),e(de,pNr),e(de,CC),e(CC,kEe),e(kEe,_Nr),e(CC,uNr),e(CC,AZ),e(AZ,bNr),e(CC,vNr),e(de,FNr),e(de,wC),e(wC,SEe),e(SEe,TNr),e(wC,MNr),e(wC,LZ),e(LZ,ENr),e(wC,CNr),e(de,wNr),e(de,AC),e(AC,REe),e(REe,ANr),e(AC,LNr),e(AC,yZ),e(yZ,yNr),e(AC,xNr),e(jr,$Nr),M(LC,jr,null),b(f,oQe,u),b(f,Dc,u),e(Dc,yC),e(yC,PEe),M(Zx,PEe,null),e(Dc,kNr),e(Dc,BEe),e(BEe,SNr),b(f,rQe,u),b(f,mr,u),M(e$,mr,null),e(mr,RNr),e(mr,Gc),e(Gc,PNr),e(Gc,xZ),e(xZ,BNr),e(Gc,NNr),e(Gc,$Z),e($Z,INr),e(Gc,qNr),e(mr,jNr),e(mr,o$),e(o$,DNr),e(o$,NEe),e(NEe,GNr),e(o$,ONr),e(mr,VNr),e(mr,Xt),M(r$,Xt,null),e(Xt,XNr),e(Xt,IEe),e(IEe,zNr),e(Xt,QNr),e(Xt,Oc),e(Oc,WNr),e(Oc,qEe),e(qEe,HNr),e(Oc,UNr),e(Oc,kZ),e(kZ,JNr),e(Oc,YNr),e(Xt,KNr),M(xC,Xt,null),e(mr,ZNr),e(mr,Dr),M(t$,Dr,null),e(Dr,eIr),e(Dr,jEe),e(jEe,oIr),e(Dr,rIr),e(Dr,bn),e(bn,tIr),e(bn,DEe),e(DEe,aIr),e(bn,nIr),e(bn,GEe),e(GEe,sIr),e(bn,lIr),e(bn,OEe),e(OEe,iIr),e(bn,dIr),e(Dr,cIr),e(Dr,ce),e(ce,$C),e($C,VEe),e(VEe,fIr),e($C,mIr),e($C,SZ),e(SZ,gIr),e($C,hIr),e(ce,pIr),e(ce,kC),e(kC,XEe),e(XEe,_Ir),e(kC,uIr),e(kC,RZ),e(RZ,bIr),e(kC,vIr),e(ce,FIr),e(ce,SC),e(SC,zEe),e(zEe,TIr),e(SC,MIr),e(SC,PZ),e(PZ,EIr),e(SC,CIr),e(ce,wIr),e(ce,RC),e(RC,QEe),e(QEe,AIr),e(RC,LIr),e(RC,BZ),e(BZ,yIr),e(RC,xIr),e(ce,$Ir),e(ce,PC),e(PC,WEe),e(WEe,kIr),e(PC,SIr),e(PC,NZ),e(NZ,RIr),e(PC,PIr),e(ce,BIr),e(ce,BC),e(BC,HEe),e(HEe,NIr),e(BC,IIr),e(BC,IZ),e(IZ,qIr),e(BC,jIr),e(ce,DIr),e(ce,NC),e(NC,UEe),e(UEe,GIr),e(NC,OIr),e(NC,qZ),e(qZ,VIr),e(NC,XIr),e(ce,zIr),e(ce,IC),e(IC,JEe),e(JEe,QIr),e(IC,WIr),e(IC,jZ),e(jZ,HIr),e(IC,UIr),e(ce,JIr),e(ce,qC),e(qC,YEe),e(YEe,YIr),e(qC,KIr),e(qC,DZ),e(DZ,ZIr),e(qC,eqr),e(ce,oqr),e(ce,jC),e(jC,KEe),e(KEe,rqr),e(jC,tqr),e(jC,GZ),e(GZ,aqr),e(jC,nqr),e(ce,sqr),e(ce,DC),e(DC,ZEe),e(ZEe,lqr),e(DC,iqr),e(DC,OZ),e(OZ,dqr),e(DC,cqr),e(ce,fqr),e(ce,GC),e(GC,eCe),e(eCe,mqr),e(GC,gqr),e(GC,VZ),e(VZ,hqr),e(GC,pqr),e(ce,_qr),e(ce,OC),e(OC,oCe),e(oCe,uqr),e(OC,bqr),e(OC,XZ),e(XZ,vqr),e(OC,Fqr),e(ce,Tqr),e(ce,VC),e(VC,rCe),e(rCe,Mqr),e(VC,Eqr),e(VC,zZ),e(zZ,Cqr),e(VC,wqr),e(ce,Aqr),e(ce,XC),e(XC,tCe),e(tCe,Lqr),e(XC,yqr),e(XC,QZ),e(QZ,xqr),e(XC,$qr),e(ce,kqr),e(ce,zC),e(zC,aCe),e(aCe,Sqr),e(zC,Rqr),e(zC,WZ),e(WZ,Pqr),e(zC,Bqr),e(ce,Nqr),e(ce,QC),e(QC,nCe),e(nCe,Iqr),e(QC,qqr),e(QC,HZ),e(HZ,jqr),e(QC,Dqr),e(ce,Gqr),e(ce,WC),e(WC,sCe),e(sCe,Oqr),e(WC,Vqr),e(WC,UZ),e(UZ,Xqr),e(WC,zqr),e(ce,Qqr),e(ce,HC),e(HC,lCe),e(lCe,Wqr),e(HC,Hqr),e(HC,JZ),e(JZ,Uqr),e(HC,Jqr),e(ce,Yqr),e(ce,UC),e(UC,iCe),e(iCe,Kqr),e(UC,Zqr),e(UC,YZ),e(YZ,ejr),e(UC,ojr),e(Dr,rjr),M(JC,Dr,null),b(f,tQe,u),b(f,Vc,u),e(Vc,YC),e(YC,dCe),M(a$,dCe,null),e(Vc,tjr),e(Vc,cCe),e(cCe,ajr),b(f,aQe,u),b(f,gr,u),M(n$,gr,null),e(gr,njr),e(gr,Xc),e(Xc,sjr),e(Xc,KZ),e(KZ,ljr),e(Xc,ijr),e(Xc,ZZ),e(ZZ,djr),e(Xc,cjr),e(gr,fjr),e(gr,s$),e(s$,mjr),e(s$,fCe),e(fCe,gjr),e(s$,hjr),e(gr,pjr),e(gr,zt),M(l$,zt,null),e(zt,_jr),e(zt,mCe),e(mCe,ujr),e(zt,bjr),e(zt,zc),e(zc,vjr),e(zc,gCe),e(gCe,Fjr),e(zc,Tjr),e(zc,eee),e(eee,Mjr),e(zc,Ejr),e(zt,Cjr),M(KC,zt,null),e(gr,wjr),e(gr,Gr),M(i$,Gr,null),e(Gr,Ajr),e(Gr,hCe),e(hCe,Ljr),e(Gr,yjr),e(Gr,vn),e(vn,xjr),e(vn,pCe),e(pCe,$jr),e(vn,kjr),e(vn,_Ce),e(_Ce,Sjr),e(vn,Rjr),e(vn,uCe),e(uCe,Pjr),e(vn,Bjr),e(Gr,Njr),e(Gr,bCe),e(bCe,ZC),e(ZC,vCe),e(vCe,Ijr),e(ZC,qjr),e(ZC,oee),e(oee,jjr),e(ZC,Djr),e(Gr,Gjr),M(e5,Gr,null),b(f,nQe,u),b(f,Qc,u),e(Qc,o5),e(o5,FCe),M(d$,FCe,null),e(Qc,Ojr),e(Qc,TCe),e(TCe,Vjr),b(f,sQe,u),b(f,hr,u),M(c$,hr,null),e(hr,Xjr),e(hr,Wc),e(Wc,zjr),e(Wc,ree),e(ree,Qjr),e(Wc,Wjr),e(Wc,tee),e(tee,Hjr),e(Wc,Ujr),e(hr,Jjr),e(hr,f$),e(f$,Yjr),e(f$,MCe),e(MCe,Kjr),e(f$,Zjr),e(hr,eDr),e(hr,Qt),M(m$,Qt,null),e(Qt,oDr),e(Qt,ECe),e(ECe,rDr),e(Qt,tDr),e(Qt,Hc),e(Hc,aDr),e(Hc,CCe),e(CCe,nDr),e(Hc,sDr),e(Hc,aee),e(aee,lDr),e(Hc,iDr),e(Qt,dDr),M(r5,Qt,null),e(hr,cDr),e(hr,Or),M(g$,Or,null),e(Or,fDr),e(Or,wCe),e(wCe,mDr),e(Or,gDr),e(Or,Fn),e(Fn,hDr),e(Fn,ACe),e(ACe,pDr),e(Fn,_Dr),e(Fn,LCe),e(LCe,uDr),e(Fn,bDr),e(Fn,yCe),e(yCe,vDr),e(Fn,FDr),e(Or,TDr),e(Or,xCe),e(xCe,t5),e(t5,$Ce),e($Ce,MDr),e(t5,EDr),e(t5,nee),e(nee,CDr),e(t5,wDr),e(Or,ADr),M(a5,Or,null),b(f,lQe,u),b(f,Uc,u),e(Uc,n5),e(n5,kCe),M(h$,kCe,null),e(Uc,LDr),e(Uc,SCe),e(SCe,yDr),b(f,iQe,u),b(f,pr,u),M(p$,pr,null),e(pr,xDr),e(pr,Jc),e(Jc,$Dr),e(Jc,see),e(see,kDr),e(Jc,SDr),e(Jc,lee),e(lee,RDr),e(Jc,PDr),e(pr,BDr),e(pr,_$),e(_$,NDr),e(_$,RCe),e(RCe,IDr),e(_$,qDr),e(pr,jDr),e(pr,Wt),M(u$,Wt,null),e(Wt,DDr),e(Wt,PCe),e(PCe,GDr),e(Wt,ODr),e(Wt,Yc),e(Yc,VDr),e(Yc,BCe),e(BCe,XDr),e(Yc,zDr),e(Yc,iee),e(iee,QDr),e(Yc,WDr),e(Wt,HDr),M(s5,Wt,null),e(pr,UDr),e(pr,Vr),M(b$,Vr,null),e(Vr,JDr),e(Vr,NCe),e(NCe,YDr),e(Vr,KDr),e(Vr,Tn),e(Tn,ZDr),e(Tn,ICe),e(ICe,eGr),e(Tn,oGr),e(Tn,qCe),e(qCe,rGr),e(Tn,tGr),e(Tn,jCe),e(jCe,aGr),e(Tn,nGr),e(Vr,sGr),e(Vr,oe),e(oe,l5),e(l5,DCe),e(DCe,lGr),e(l5,iGr),e(l5,dee),e(dee,dGr),e(l5,cGr),e(oe,fGr),e(oe,i5),e(i5,GCe),e(GCe,mGr),e(i5,gGr),e(i5,cee),e(cee,hGr),e(i5,pGr),e(oe,_Gr),e(oe,d5),e(d5,OCe),e(OCe,uGr),e(d5,bGr),e(d5,fee),e(fee,vGr),e(d5,FGr),e(oe,TGr),e(oe,c5),e(c5,VCe),e(VCe,MGr),e(c5,EGr),e(c5,mee),e(mee,CGr),e(c5,wGr),e(oe,AGr),e(oe,f5),e(f5,XCe),e(XCe,LGr),e(f5,yGr),e(f5,gee),e(gee,xGr),e(f5,$Gr),e(oe,kGr),e(oe,m5),e(m5,zCe),e(zCe,SGr),e(m5,RGr),e(m5,hee),e(hee,PGr),e(m5,BGr),e(oe,NGr),e(oe,g5),e(g5,QCe),e(QCe,IGr),e(g5,qGr),e(g5,pee),e(pee,jGr),e(g5,DGr),e(oe,GGr),e(oe,h5),e(h5,WCe),e(WCe,OGr),e(h5,VGr),e(h5,_ee),e(_ee,XGr),e(h5,zGr),e(oe,QGr),e(oe,p5),e(p5,HCe),e(HCe,WGr),e(p5,HGr),e(p5,uee),e(uee,UGr),e(p5,JGr),e(oe,YGr),e(oe,_5),e(_5,UCe),e(UCe,KGr),e(_5,ZGr),e(_5,bee),e(bee,eOr),e(_5,oOr),e(oe,rOr),e(oe,u5),e(u5,JCe),e(JCe,tOr),e(u5,aOr),e(u5,vee),e(vee,nOr),e(u5,sOr),e(oe,lOr),e(oe,b5),e(b5,YCe),e(YCe,iOr),e(b5,dOr),e(b5,Fee),e(Fee,cOr),e(b5,fOr),e(oe,mOr),e(oe,v5),e(v5,KCe),e(KCe,gOr),e(v5,hOr),e(v5,Tee),e(Tee,pOr),e(v5,_Or),e(oe,uOr),e(oe,F5),e(F5,ZCe),e(ZCe,bOr),e(F5,vOr),e(F5,Mee),e(Mee,FOr),e(F5,TOr),e(oe,MOr),e(oe,T5),e(T5,e5e),e(e5e,EOr),e(T5,COr),e(T5,Eee),e(Eee,wOr),e(T5,AOr),e(oe,LOr),e(oe,M5),e(M5,o5e),e(o5e,yOr),e(M5,xOr),e(M5,Cee),e(Cee,$Or),e(M5,kOr),e(oe,SOr),e(oe,E5),e(E5,r5e),e(r5e,ROr),e(E5,POr),e(E5,wee),e(wee,BOr),e(E5,NOr),e(oe,IOr),e(oe,C5),e(C5,t5e),e(t5e,qOr),e(C5,jOr),e(C5,Aee),e(Aee,DOr),e(C5,GOr),e(oe,OOr),e(oe,w5),e(w5,a5e),e(a5e,VOr),e(w5,XOr),e(w5,Lee),e(Lee,zOr),e(w5,QOr),e(oe,WOr),e(oe,A5),e(A5,n5e),e(n5e,HOr),e(A5,UOr),e(A5,yee),e(yee,JOr),e(A5,YOr),e(oe,KOr),e(oe,L5),e(L5,s5e),e(s5e,ZOr),e(L5,eVr),e(L5,xee),e(xee,oVr),e(L5,rVr),e(oe,tVr),e(oe,y5),e(y5,l5e),e(l5e,aVr),e(y5,nVr),e(y5,$ee),e($ee,sVr),e(y5,lVr),e(oe,iVr),e(oe,x5),e(x5,i5e),e(i5e,dVr),e(x5,cVr),e(x5,kee),e(kee,fVr),e(x5,mVr),e(oe,gVr),e(oe,$5),e($5,d5e),e(d5e,hVr),e($5,pVr),e($5,See),e(See,_Vr),e($5,uVr),e(oe,bVr),e(oe,k5),e(k5,c5e),e(c5e,vVr),e(k5,FVr),e(k5,Ree),e(Ree,TVr),e(k5,MVr),e(oe,EVr),e(oe,S5),e(S5,f5e),e(f5e,CVr),e(S5,wVr),e(S5,Pee),e(Pee,AVr),e(S5,LVr),e(oe,yVr),e(oe,R5),e(R5,m5e),e(m5e,xVr),e(R5,$Vr),e(R5,Bee),e(Bee,kVr),e(R5,SVr),e(Vr,RVr),M(P5,Vr,null),b(f,dQe,u),b(f,Kc,u),e(Kc,B5),e(B5,g5e),M(v$,g5e,null),e(Kc,PVr),e(Kc,h5e),e(h5e,BVr),b(f,cQe,u),b(f,_r,u),M(F$,_r,null),e(_r,NVr),e(_r,Zc),e(Zc,IVr),e(Zc,Nee),e(Nee,qVr),e(Zc,jVr),e(Zc,Iee),e(Iee,DVr),e(Zc,GVr),e(_r,OVr),e(_r,T$),e(T$,VVr),e(T$,p5e),e(p5e,XVr),e(T$,zVr),e(_r,QVr),e(_r,Ht),M(M$,Ht,null),e(Ht,WVr),e(Ht,_5e),e(_5e,HVr),e(Ht,UVr),e(Ht,ef),e(ef,JVr),e(ef,u5e),e(u5e,YVr),e(ef,KVr),e(ef,qee),e(qee,ZVr),e(ef,eXr),e(Ht,oXr),M(N5,Ht,null),e(_r,rXr),e(_r,Xr),M(E$,Xr,null),e(Xr,tXr),e(Xr,b5e),e(b5e,aXr),e(Xr,nXr),e(Xr,Mn),e(Mn,sXr),e(Mn,v5e),e(v5e,lXr),e(Mn,iXr),e(Mn,F5e),e(F5e,dXr),e(Mn,cXr),e(Mn,T5e),e(T5e,fXr),e(Mn,mXr),e(Xr,gXr),e(Xr,xe),e(xe,I5),e(I5,M5e),e(M5e,hXr),e(I5,pXr),e(I5,jee),e(jee,_Xr),e(I5,uXr),e(xe,bXr),e(xe,q5),e(q5,E5e),e(E5e,vXr),e(q5,FXr),e(q5,Dee),e(Dee,TXr),e(q5,MXr),e(xe,EXr),e(xe,j5),e(j5,C5e),e(C5e,CXr),e(j5,wXr),e(j5,Gee),e(Gee,AXr),e(j5,LXr),e(xe,yXr),e(xe,D5),e(D5,w5e),e(w5e,xXr),e(D5,$Xr),e(D5,Oee),e(Oee,kXr),e(D5,SXr),e(xe,RXr),e(xe,G5),e(G5,A5e),e(A5e,PXr),e(G5,BXr),e(G5,Vee),e(Vee,NXr),e(G5,IXr),e(xe,qXr),e(xe,O5),e(O5,L5e),e(L5e,jXr),e(O5,DXr),e(O5,Xee),e(Xee,GXr),e(O5,OXr),e(xe,VXr),e(xe,V5),e(V5,y5e),e(y5e,XXr),e(V5,zXr),e(V5,zee),e(zee,QXr),e(V5,WXr),e(xe,HXr),e(xe,X5),e(X5,x5e),e(x5e,UXr),e(X5,JXr),e(X5,Qee),e(Qee,YXr),e(X5,KXr),e(xe,ZXr),e(xe,z5),e(z5,$5e),e($5e,ezr),e(z5,ozr),e(z5,Wee),e(Wee,rzr),e(z5,tzr),e(xe,azr),e(xe,Q5),e(Q5,k5e),e(k5e,nzr),e(Q5,szr),e(Q5,Hee),e(Hee,lzr),e(Q5,izr),e(Xr,dzr),M(W5,Xr,null),b(f,fQe,u),b(f,of,u),e(of,H5),e(H5,S5e),M(C$,S5e,null),e(of,czr),e(of,R5e),e(R5e,fzr),b(f,mQe,u),b(f,ur,u),M(w$,ur,null),e(ur,mzr),e(ur,rf),e(rf,gzr),e(rf,Uee),e(Uee,hzr),e(rf,pzr),e(rf,Jee),e(Jee,_zr),e(rf,uzr),e(ur,bzr),e(ur,A$),e(A$,vzr),e(A$,P5e),e(P5e,Fzr),e(A$,Tzr),e(ur,Mzr),e(ur,Ut),M(L$,Ut,null),e(Ut,Ezr),e(Ut,B5e),e(B5e,Czr),e(Ut,wzr),e(Ut,tf),e(tf,Azr),e(tf,N5e),e(N5e,Lzr),e(tf,yzr),e(tf,Yee),e(Yee,xzr),e(tf,$zr),e(Ut,kzr),M(U5,Ut,null),e(ur,Szr),e(ur,zr),M(y$,zr,null),e(zr,Rzr),e(zr,I5e),e(I5e,Pzr),e(zr,Bzr),e(zr,En),e(En,Nzr),e(En,q5e),e(q5e,Izr),e(En,qzr),e(En,j5e),e(j5e,jzr),e(En,Dzr),e(En,D5e),e(D5e,Gzr),e(En,Ozr),e(zr,Vzr),e(zr,Ee),e(Ee,J5),e(J5,G5e),e(G5e,Xzr),e(J5,zzr),e(J5,Kee),e(Kee,Qzr),e(J5,Wzr),e(Ee,Hzr),e(Ee,Y5),e(Y5,O5e),e(O5e,Uzr),e(Y5,Jzr),e(Y5,Zee),e(Zee,Yzr),e(Y5,Kzr),e(Ee,Zzr),e(Ee,K5),e(K5,V5e),e(V5e,eQr),e(K5,oQr),e(K5,eoe),e(eoe,rQr),e(K5,tQr),e(Ee,aQr),e(Ee,Z5),e(Z5,X5e),e(X5e,nQr),e(Z5,sQr),e(Z5,ooe),e(ooe,lQr),e(Z5,iQr),e(Ee,dQr),e(Ee,e3),e(e3,z5e),e(z5e,cQr),e(e3,fQr),e(e3,roe),e(roe,mQr),e(e3,gQr),e(Ee,hQr),e(Ee,o3),e(o3,Q5e),e(Q5e,pQr),e(o3,_Qr),e(o3,toe),e(toe,uQr),e(o3,bQr),e(Ee,vQr),e(Ee,r3),e(r3,W5e),e(W5e,FQr),e(r3,TQr),e(r3,aoe),e(aoe,MQr),e(r3,EQr),e(Ee,CQr),e(Ee,t3),e(t3,H5e),e(H5e,wQr),e(t3,AQr),e(t3,noe),e(noe,LQr),e(t3,yQr),e(Ee,xQr),e(Ee,a3),e(a3,U5e),e(U5e,$Qr),e(a3,kQr),e(a3,soe),e(soe,SQr),e(a3,RQr),e(Ee,PQr),e(Ee,n3),e(n3,J5e),e(J5e,BQr),e(n3,NQr),e(n3,loe),e(loe,IQr),e(n3,qQr),e(Ee,jQr),e(Ee,s3),e(s3,Y5e),e(Y5e,DQr),e(s3,GQr),e(s3,ioe),e(ioe,OQr),e(s3,VQr),e(Ee,XQr),e(Ee,l3),e(l3,K5e),e(K5e,zQr),e(l3,QQr),e(l3,doe),e(doe,WQr),e(l3,HQr),e(Ee,UQr),e(Ee,i3),e(i3,Z5e),e(Z5e,JQr),e(i3,YQr),e(i3,coe),e(coe,KQr),e(i3,ZQr),e(zr,eWr),M(d3,zr,null),b(f,gQe,u),b(f,af,u),e(af,c3),e(c3,e3e),M(x$,e3e,null),e(af,oWr),e(af,o3e),e(o3e,rWr),b(f,hQe,u),b(f,br,u),M($$,br,null),e(br,tWr),e(br,nf),e(nf,aWr),e(nf,foe),e(foe,nWr),e(nf,sWr),e(nf,moe),e(moe,lWr),e(nf,iWr),e(br,dWr),e(br,k$),e(k$,cWr),e(k$,r3e),e(r3e,fWr),e(k$,mWr),e(br,gWr),e(br,Jt),M(S$,Jt,null),e(Jt,hWr),e(Jt,t3e),e(t3e,pWr),e(Jt,_Wr),e(Jt,sf),e(sf,uWr),e(sf,a3e),e(a3e,bWr),e(sf,vWr),e(sf,goe),e(goe,FWr),e(sf,TWr),e(Jt,MWr),M(f3,Jt,null),e(br,EWr),e(br,Qr),M(R$,Qr,null),e(Qr,CWr),e(Qr,n3e),e(n3e,wWr),e(Qr,AWr),e(Qr,Cn),e(Cn,LWr),e(Cn,s3e),e(s3e,yWr),e(Cn,xWr),e(Cn,l3e),e(l3e,$Wr),e(Cn,kWr),e(Cn,i3e),e(i3e,SWr),e(Cn,RWr),e(Qr,PWr),e(Qr,$e),e($e,m3),e(m3,d3e),e(d3e,BWr),e(m3,NWr),e(m3,hoe),e(hoe,IWr),e(m3,qWr),e($e,jWr),e($e,g3),e(g3,c3e),e(c3e,DWr),e(g3,GWr),e(g3,poe),e(poe,OWr),e(g3,VWr),e($e,XWr),e($e,h3),e(h3,f3e),e(f3e,zWr),e(h3,QWr),e(h3,_oe),e(_oe,WWr),e(h3,HWr),e($e,UWr),e($e,p3),e(p3,m3e),e(m3e,JWr),e(p3,YWr),e(p3,uoe),e(uoe,KWr),e(p3,ZWr),e($e,eHr),e($e,_3),e(_3,g3e),e(g3e,oHr),e(_3,rHr),e(_3,boe),e(boe,tHr),e(_3,aHr),e($e,nHr),e($e,u3),e(u3,h3e),e(h3e,sHr),e(u3,lHr),e(u3,voe),e(voe,iHr),e(u3,dHr),e($e,cHr),e($e,b3),e(b3,p3e),e(p3e,fHr),e(b3,mHr),e(b3,Foe),e(Foe,gHr),e(b3,hHr),e($e,pHr),e($e,v3),e(v3,_3e),e(_3e,_Hr),e(v3,uHr),e(v3,Toe),e(Toe,bHr),e(v3,vHr),e($e,FHr),e($e,F3),e(F3,u3e),e(u3e,THr),e(F3,MHr),e(F3,Moe),e(Moe,EHr),e(F3,CHr),e($e,wHr),e($e,T3),e(T3,b3e),e(b3e,AHr),e(T3,LHr),e(T3,Eoe),e(Eoe,yHr),e(T3,xHr),e(Qr,$Hr),M(M3,Qr,null),b(f,pQe,u),b(f,lf,u),e(lf,E3),e(E3,v3e),M(P$,v3e,null),e(lf,kHr),e(lf,F3e),e(F3e,SHr),b(f,_Qe,u),b(f,vr,u),M(B$,vr,null),e(vr,RHr),e(vr,df),e(df,PHr),e(df,Coe),e(Coe,BHr),e(df,NHr),e(df,woe),e(woe,IHr),e(df,qHr),e(vr,jHr),e(vr,N$),e(N$,DHr),e(N$,T3e),e(T3e,GHr),e(N$,OHr),e(vr,VHr),e(vr,Yt),M(I$,Yt,null),e(Yt,XHr),e(Yt,M3e),e(M3e,zHr),e(Yt,QHr),e(Yt,cf),e(cf,WHr),e(cf,E3e),e(E3e,HHr),e(cf,UHr),e(cf,Aoe),e(Aoe,JHr),e(cf,YHr),e(Yt,KHr),M(C3,Yt,null),e(vr,ZHr),e(vr,Wr),M(q$,Wr,null),e(Wr,eUr),e(Wr,C3e),e(C3e,oUr),e(Wr,rUr),e(Wr,wn),e(wn,tUr),e(wn,w3e),e(w3e,aUr),e(wn,nUr),e(wn,A3e),e(A3e,sUr),e(wn,lUr),e(wn,L3e),e(L3e,iUr),e(wn,dUr),e(Wr,cUr),e(Wr,ke),e(ke,w3),e(w3,y3e),e(y3e,fUr),e(w3,mUr),e(w3,Loe),e(Loe,gUr),e(w3,hUr),e(ke,pUr),e(ke,A3),e(A3,x3e),e(x3e,_Ur),e(A3,uUr),e(A3,yoe),e(yoe,bUr),e(A3,vUr),e(ke,FUr),e(ke,L3),e(L3,$3e),e($3e,TUr),e(L3,MUr),e(L3,xoe),e(xoe,EUr),e(L3,CUr),e(ke,wUr),e(ke,y3),e(y3,k3e),e(k3e,AUr),e(y3,LUr),e(y3,$oe),e($oe,yUr),e(y3,xUr),e(ke,$Ur),e(ke,x3),e(x3,S3e),e(S3e,kUr),e(x3,SUr),e(x3,koe),e(koe,RUr),e(x3,PUr),e(ke,BUr),e(ke,$3),e($3,R3e),e(R3e,NUr),e($3,IUr),e($3,Soe),e(Soe,qUr),e($3,jUr),e(ke,DUr),e(ke,k3),e(k3,P3e),e(P3e,GUr),e(k3,OUr),e(k3,Roe),e(Roe,VUr),e(k3,XUr),e(ke,zUr),e(ke,S3),e(S3,B3e),e(B3e,QUr),e(S3,WUr),e(S3,Poe),e(Poe,HUr),e(S3,UUr),e(ke,JUr),e(ke,R3),e(R3,N3e),e(N3e,YUr),e(R3,KUr),e(R3,Boe),e(Boe,ZUr),e(R3,eJr),e(ke,oJr),e(ke,P3),e(P3,I3e),e(I3e,rJr),e(P3,tJr),e(P3,Noe),e(Noe,aJr),e(P3,nJr),e(Wr,sJr),M(B3,Wr,null),b(f,uQe,u),b(f,ff,u),e(ff,N3),e(N3,q3e),M(j$,q3e,null),e(ff,lJr),e(ff,j3e),e(j3e,iJr),b(f,bQe,u),b(f,Fr,u),M(D$,Fr,null),e(Fr,dJr),e(Fr,mf),e(mf,cJr),e(mf,Ioe),e(Ioe,fJr),e(mf,mJr),e(mf,qoe),e(qoe,gJr),e(mf,hJr),e(Fr,pJr),e(Fr,G$),e(G$,_Jr),e(G$,D3e),e(D3e,uJr),e(G$,bJr),e(Fr,vJr),e(Fr,Kt),M(O$,Kt,null),e(Kt,FJr),e(Kt,G3e),e(G3e,TJr),e(Kt,MJr),e(Kt,gf),e(gf,EJr),e(gf,O3e),e(O3e,CJr),e(gf,wJr),e(gf,joe),e(joe,AJr),e(gf,LJr),e(Kt,yJr),M(I3,Kt,null),e(Fr,xJr),e(Fr,Hr),M(V$,Hr,null),e(Hr,$Jr),e(Hr,V3e),e(V3e,kJr),e(Hr,SJr),e(Hr,An),e(An,RJr),e(An,X3e),e(X3e,PJr),e(An,BJr),e(An,z3e),e(z3e,NJr),e(An,IJr),e(An,Q3e),e(Q3e,qJr),e(An,jJr),e(Hr,DJr),e(Hr,Se),e(Se,q3),e(q3,W3e),e(W3e,GJr),e(q3,OJr),e(q3,Doe),e(Doe,VJr),e(q3,XJr),e(Se,zJr),e(Se,j3),e(j3,H3e),e(H3e,QJr),e(j3,WJr),e(j3,Goe),e(Goe,HJr),e(j3,UJr),e(Se,JJr),e(Se,D3),e(D3,U3e),e(U3e,YJr),e(D3,KJr),e(D3,Ooe),e(Ooe,ZJr),e(D3,eYr),e(Se,oYr),e(Se,G3),e(G3,J3e),e(J3e,rYr),e(G3,tYr),e(G3,Voe),e(Voe,aYr),e(G3,nYr),e(Se,sYr),e(Se,O3),e(O3,Y3e),e(Y3e,lYr),e(O3,iYr),e(O3,Xoe),e(Xoe,dYr),e(O3,cYr),e(Se,fYr),e(Se,V3),e(V3,K3e),e(K3e,mYr),e(V3,gYr),e(V3,zoe),e(zoe,hYr),e(V3,pYr),e(Se,_Yr),e(Se,X3),e(X3,Z3e),e(Z3e,uYr),e(X3,bYr),e(X3,Qoe),e(Qoe,vYr),e(X3,FYr),e(Se,TYr),e(Se,z3),e(z3,e0e),e(e0e,MYr),e(z3,EYr),e(z3,Woe),e(Woe,CYr),e(z3,wYr),e(Se,AYr),e(Se,Q3),e(Q3,o0e),e(o0e,LYr),e(Q3,yYr),e(Q3,Hoe),e(Hoe,xYr),e(Q3,$Yr),e(Se,kYr),e(Se,W3),e(W3,r0e),e(r0e,SYr),e(W3,RYr),e(W3,Uoe),e(Uoe,PYr),e(W3,BYr),e(Hr,NYr),M(H3,Hr,null),b(f,vQe,u),b(f,hf,u),e(hf,U3),e(U3,t0e),M(X$,t0e,null),e(hf,IYr),e(hf,a0e),e(a0e,qYr),b(f,FQe,u),b(f,Tr,u),M(z$,Tr,null),e(Tr,jYr),e(Tr,pf),e(pf,DYr),e(pf,Joe),e(Joe,GYr),e(pf,OYr),e(pf,Yoe),e(Yoe,VYr),e(pf,XYr),e(Tr,zYr),e(Tr,Q$),e(Q$,QYr),e(Q$,n0e),e(n0e,WYr),e(Q$,HYr),e(Tr,UYr),e(Tr,Zt),M(W$,Zt,null),e(Zt,JYr),e(Zt,s0e),e(s0e,YYr),e(Zt,KYr),e(Zt,_f),e(_f,ZYr),e(_f,l0e),e(l0e,eKr),e(_f,oKr),e(_f,Koe),e(Koe,rKr),e(_f,tKr),e(Zt,aKr),M(J3,Zt,null),e(Tr,nKr),e(Tr,Ur),M(H$,Ur,null),e(Ur,sKr),e(Ur,i0e),e(i0e,lKr),e(Ur,iKr),e(Ur,Ln),e(Ln,dKr),e(Ln,d0e),e(d0e,cKr),e(Ln,fKr),e(Ln,c0e),e(c0e,mKr),e(Ln,gKr),e(Ln,f0e),e(f0e,hKr),e(Ln,pKr),e(Ur,_Kr),e(Ur,Re),e(Re,Y3),e(Y3,m0e),e(m0e,uKr),e(Y3,bKr),e(Y3,Zoe),e(Zoe,vKr),e(Y3,FKr),e(Re,TKr),e(Re,K3),e(K3,g0e),e(g0e,MKr),e(K3,EKr),e(K3,ere),e(ere,CKr),e(K3,wKr),e(Re,AKr),e(Re,Z3),e(Z3,h0e),e(h0e,LKr),e(Z3,yKr),e(Z3,ore),e(ore,xKr),e(Z3,$Kr),e(Re,kKr),e(Re,e0),e(e0,p0e),e(p0e,SKr),e(e0,RKr),e(e0,rre),e(rre,PKr),e(e0,BKr),e(Re,NKr),e(Re,o0),e(o0,_0e),e(_0e,IKr),e(o0,qKr),e(o0,tre),e(tre,jKr),e(o0,DKr),e(Re,GKr),e(Re,r0),e(r0,u0e),e(u0e,OKr),e(r0,VKr),e(r0,are),e(are,XKr),e(r0,zKr),e(Re,QKr),e(Re,t0),e(t0,b0e),e(b0e,WKr),e(t0,HKr),e(t0,nre),e(nre,UKr),e(t0,JKr),e(Re,YKr),e(Re,a0),e(a0,v0e),e(v0e,KKr),e(a0,ZKr),e(a0,sre),e(sre,eZr),e(a0,oZr),e(Re,rZr),e(Re,n0),e(n0,F0e),e(F0e,tZr),e(n0,aZr),e(n0,lre),e(lre,nZr),e(n0,sZr),e(Re,lZr),e(Re,s0),e(s0,T0e),e(T0e,iZr),e(s0,dZr),e(s0,ire),e(ire,cZr),e(s0,fZr),e(Ur,mZr),M(l0,Ur,null),b(f,TQe,u),b(f,uf,u),e(uf,i0),e(i0,M0e),M(U$,M0e,null),e(uf,gZr),e(uf,E0e),e(E0e,hZr),b(f,MQe,u),b(f,Mr,u),M(J$,Mr,null),e(Mr,pZr),e(Mr,bf),e(bf,_Zr),e(bf,dre),e(dre,uZr),e(bf,bZr),e(bf,cre),e(cre,vZr),e(bf,FZr),e(Mr,TZr),e(Mr,Y$),e(Y$,MZr),e(Y$,C0e),e(C0e,EZr),e(Y$,CZr),e(Mr,wZr),e(Mr,ea),M(K$,ea,null),e(ea,AZr),e(ea,w0e),e(w0e,LZr),e(ea,yZr),e(ea,vf),e(vf,xZr),e(vf,A0e),e(A0e,$Zr),e(vf,kZr),e(vf,fre),e(fre,SZr),e(vf,RZr),e(ea,PZr),M(d0,ea,null),e(Mr,BZr),e(Mr,Jr),M(Z$,Jr,null),e(Jr,NZr),e(Jr,L0e),e(L0e,IZr),e(Jr,qZr),e(Jr,yn),e(yn,jZr),e(yn,y0e),e(y0e,DZr),e(yn,GZr),e(yn,x0e),e(x0e,OZr),e(yn,VZr),e(yn,$0e),e($0e,XZr),e(yn,zZr),e(Jr,QZr),e(Jr,Ve),e(Ve,c0),e(c0,k0e),e(k0e,WZr),e(c0,HZr),e(c0,mre),e(mre,UZr),e(c0,JZr),e(Ve,YZr),e(Ve,f0),e(f0,S0e),e(S0e,KZr),e(f0,ZZr),e(f0,gre),e(gre,eet),e(f0,oet),e(Ve,ret),e(Ve,m0),e(m0,R0e),e(R0e,tet),e(m0,aet),e(m0,hre),e(hre,net),e(m0,set),e(Ve,iet),e(Ve,g0),e(g0,P0e),e(P0e,det),e(g0,cet),e(g0,pre),e(pre,fet),e(g0,met),e(Ve,get),e(Ve,h0),e(h0,B0e),e(B0e,het),e(h0,pet),e(h0,_re),e(_re,_et),e(h0,uet),e(Ve,bet),e(Ve,p0),e(p0,N0e),e(N0e,vet),e(p0,Fet),e(p0,ure),e(ure,Tet),e(p0,Met),e(Ve,Eet),e(Ve,_0),e(_0,I0e),e(I0e,Cet),e(_0,wet),e(_0,bre),e(bre,Aet),e(_0,Let),e(Ve,yet),e(Ve,u0),e(u0,q0e),e(q0e,xet),e(u0,$et),e(u0,vre),e(vre,ket),e(u0,Set),e(Jr,Ret),M(b0,Jr,null),b(f,EQe,u),b(f,Ff,u),e(Ff,v0),e(v0,j0e),M(ek,j0e,null),e(Ff,Pet),e(Ff,D0e),e(D0e,Bet),b(f,CQe,u),b(f,Er,u),M(ok,Er,null),e(Er,Net),e(Er,Tf),e(Tf,Iet),e(Tf,Fre),e(Fre,qet),e(Tf,jet),e(Tf,Tre),e(Tre,Det),e(Tf,Get),e(Er,Oet),e(Er,rk),e(rk,Vet),e(rk,G0e),e(G0e,Xet),e(rk,zet),e(Er,Qet),e(Er,oa),M(tk,oa,null),e(oa,Wet),e(oa,O0e),e(O0e,Het),e(oa,Uet),e(oa,Mf),e(Mf,Jet),e(Mf,V0e),e(V0e,Yet),e(Mf,Ket),e(Mf,Mre),e(Mre,Zet),e(Mf,eot),e(oa,oot),M(F0,oa,null),e(Er,rot),e(Er,Yr),M(ak,Yr,null),e(Yr,tot),e(Yr,X0e),e(X0e,aot),e(Yr,not),e(Yr,xn),e(xn,sot),e(xn,z0e),e(z0e,lot),e(xn,iot),e(xn,Q0e),e(Q0e,dot),e(xn,cot),e(xn,W0e),e(W0e,fot),e(xn,mot),e(Yr,got),e(Yr,Xe),e(Xe,T0),e(T0,H0e),e(H0e,hot),e(T0,pot),e(T0,Ere),e(Ere,_ot),e(T0,uot),e(Xe,bot),e(Xe,M0),e(M0,U0e),e(U0e,vot),e(M0,Fot),e(M0,Cre),e(Cre,Tot),e(M0,Mot),e(Xe,Eot),e(Xe,E0),e(E0,J0e),e(J0e,Cot),e(E0,wot),e(E0,wre),e(wre,Aot),e(E0,Lot),e(Xe,yot),e(Xe,C0),e(C0,Y0e),e(Y0e,xot),e(C0,$ot),e(C0,Are),e(Are,kot),e(C0,Sot),e(Xe,Rot),e(Xe,w0),e(w0,K0e),e(K0e,Pot),e(w0,Bot),e(w0,Lre),e(Lre,Not),e(w0,Iot),e(Xe,qot),e(Xe,A0),e(A0,Z0e),e(Z0e,jot),e(A0,Dot),e(A0,yre),e(yre,Got),e(A0,Oot),e(Xe,Vot),e(Xe,L0),e(L0,ewe),e(ewe,Xot),e(L0,zot),e(L0,xre),e(xre,Qot),e(L0,Wot),e(Xe,Hot),e(Xe,y0),e(y0,owe),e(owe,Uot),e(y0,Jot),e(y0,$re),e($re,Yot),e(y0,Kot),e(Yr,Zot),M(x0,Yr,null),b(f,wQe,u),b(f,Ef,u),e(Ef,$0),e($0,rwe),M(nk,rwe,null),e(Ef,ert),e(Ef,twe),e(twe,ort),b(f,AQe,u),b(f,Cr,u),M(sk,Cr,null),e(Cr,rrt),e(Cr,Cf),e(Cf,trt),e(Cf,kre),e(kre,art),e(Cf,nrt),e(Cf,Sre),e(Sre,srt),e(Cf,lrt),e(Cr,irt),e(Cr,lk),e(lk,drt),e(lk,awe),e(awe,crt),e(lk,frt),e(Cr,mrt),e(Cr,ra),M(ik,ra,null),e(ra,grt),e(ra,nwe),e(nwe,hrt),e(ra,prt),e(ra,wf),e(wf,_rt),e(wf,swe),e(swe,urt),e(wf,brt),e(wf,Rre),e(Rre,vrt),e(wf,Frt),e(ra,Trt),M(k0,ra,null),e(Cr,Mrt),e(Cr,Kr),M(dk,Kr,null),e(Kr,Ert),e(Kr,lwe),e(lwe,Crt),e(Kr,wrt),e(Kr,$n),e($n,Art),e($n,iwe),e(iwe,Lrt),e($n,yrt),e($n,dwe),e(dwe,xrt),e($n,$rt),e($n,cwe),e(cwe,krt),e($n,Srt),e(Kr,Rrt),e(Kr,fwe),e(fwe,S0),e(S0,mwe),e(mwe,Prt),e(S0,Brt),e(S0,Pre),e(Pre,Nrt),e(S0,Irt),e(Kr,qrt),M(R0,Kr,null),b(f,LQe,u),b(f,Af,u),e(Af,P0),e(P0,gwe),M(ck,gwe,null),e(Af,jrt),e(Af,hwe),e(hwe,Drt),b(f,yQe,u),b(f,wr,u),M(fk,wr,null),e(wr,Grt),e(wr,Lf),e(Lf,Ort),e(Lf,Bre),e(Bre,Vrt),e(Lf,Xrt),e(Lf,Nre),e(Nre,zrt),e(Lf,Qrt),e(wr,Wrt),e(wr,mk),e(mk,Hrt),e(mk,pwe),e(pwe,Urt),e(mk,Jrt),e(wr,Yrt),e(wr,ta),M(gk,ta,null),e(ta,Krt),e(ta,_we),e(_we,Zrt),e(ta,ett),e(ta,yf),e(yf,ott),e(yf,uwe),e(uwe,rtt),e(yf,ttt),e(yf,Ire),e(Ire,att),e(yf,ntt),e(ta,stt),M(B0,ta,null),e(wr,ltt),e(wr,Zr),M(hk,Zr,null),e(Zr,itt),e(Zr,bwe),e(bwe,dtt),e(Zr,ctt),e(Zr,kn),e(kn,ftt),e(kn,vwe),e(vwe,mtt),e(kn,gtt),e(kn,Fwe),e(Fwe,htt),e(kn,ptt),e(kn,Twe),e(Twe,_tt),e(kn,utt),e(Zr,btt),e(Zr,pk),e(pk,N0),e(N0,Mwe),e(Mwe,vtt),e(N0,Ftt),e(N0,qre),e(qre,Ttt),e(N0,Mtt),e(pk,Ett),e(pk,I0),e(I0,Ewe),e(Ewe,Ctt),e(I0,wtt),e(I0,jre),e(jre,Att),e(I0,Ltt),e(Zr,ytt),M(q0,Zr,null),b(f,xQe,u),b(f,xf,u),e(xf,j0),e(j0,Cwe),M(_k,Cwe,null),e(xf,xtt),e(xf,wwe),e(wwe,$tt),b(f,$Qe,u),b(f,Ar,u),M(uk,Ar,null),e(Ar,ktt),e(Ar,$f),e($f,Stt),e($f,Dre),e(Dre,Rtt),e($f,Ptt),e($f,Gre),e(Gre,Btt),e($f,Ntt),e(Ar,Itt),e(Ar,bk),e(bk,qtt),e(bk,Awe),e(Awe,jtt),e(bk,Dtt),e(Ar,Gtt),e(Ar,aa),M(vk,aa,null),e(aa,Ott),e(aa,Lwe),e(Lwe,Vtt),e(aa,Xtt),e(aa,kf),e(kf,ztt),e(kf,ywe),e(ywe,Qtt),e(kf,Wtt),e(kf,Ore),e(Ore,Htt),e(kf,Utt),e(aa,Jtt),M(D0,aa,null),e(Ar,Ytt),e(Ar,et),M(Fk,et,null),e(et,Ktt),e(et,xwe),e(xwe,Ztt),e(et,eat),e(et,Sn),e(Sn,oat),e(Sn,$we),e($we,rat),e(Sn,tat),e(Sn,kwe),e(kwe,aat),e(Sn,nat),e(Sn,Swe),e(Swe,sat),e(Sn,lat),e(et,iat),e(et,Rwe),e(Rwe,G0),e(G0,Pwe),e(Pwe,dat),e(G0,cat),e(G0,Vre),e(Vre,fat),e(G0,mat),e(et,gat),M(O0,et,null),kQe=!0},p(f,[u]){const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),Df.$set(Tk);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),Zg.$set(Bwe);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),Nh.$set(Nwe);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),vp.$set(Iwe);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),Fp.$set(Mk);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),Gp.$set(qwe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Op.$set(Rn);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),zp.$set(jwe);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),Yu.$set(Dwe);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),Zu.$set(Gwe);const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),Q2.$set(Ek);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),H2.$set(Owe);const Ck={};u&2&&(Ck.$$scope={dirty:u,ctx:f}),N1.$set(Ck);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),q1.$set(Vwe);const wk={};u&2&&(wk.$$scope={dirty:u,ctx:f}),Cb.$set(wk);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),Ab.$set(Xwe);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),Wb.$set(zwe);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),Ub.$set(Qwe);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),Hv.$set(Sf);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),Jv.$set(Wwe);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),yF.$set(Hwe);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),$F.$set(Uwe);const Ak={};u&2&&(Ak.$$scope={dirty:u,ctx:f}),qF.$set(Ak);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),DF.$set(Jwe);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),C6.$set(Ywe);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),A6.$set(Kwe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),_T.$set(nt);const Lk={};u&2&&(Lk.$$scope={dirty:u,ctx:f}),bT.$set(Lk);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),TT.$set(Zwe);const yk={};u&2&&(yk.$$scope={dirty:u,ctx:f}),ET.$set(yk);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),qT.$set(eAe);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),DT.$set(st);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),VT.$set(oAe);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),zT.$set(Rf);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),HT.$set(rAe);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),JT.$set(tAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),l7.$set(L);const V0={};u&2&&(V0.$$scope={dirty:u,ctx:f}),d7.$set(V0);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),_7.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),b7.$set(nAe);const X0={};u&2&&(X0.$$scope={dirty:u,ctx:f}),$7.$set(X0);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),S7.$set(sAe);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),N7.$set(lAe);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),q7.$set(z0);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),z7.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),W7.$set(dAe);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),K7.$set(Q0);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),e8.$set(cAe);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),a8.$set(fAe);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),s8.$set(W0);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),d8.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),f8.$set(gAe);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),b8.$set(H0);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),F8.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),E8.$set(pAe);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),w8.$set(U0);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),TM.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),EM.$set(uAe);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),WM.$set(J0);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),UM.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),d4.$set(vAe);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),f4.$set(Y0);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),b4.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),F4.$set(TAe);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),G4.$set(K0);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),V4.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),eE.$set(EAe);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),rE.$set(Z0);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),xE.$set(CAe);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),kE.$set(wAe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),UE.$set(ew);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),YE.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),eC.$set(LAe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),rC.$set(ow);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),aC.$set(yAe);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),sC.$set(xAe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),LC.$set(rw);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),xC.$set($Ae);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),JC.$set(kAe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),KC.$set(tw);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),e5.$set(SAe);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),r5.$set(RAe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),a5.$set(aw);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),s5.$set(PAe);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),P5.$set(BAe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),N5.$set(nw);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),W5.$set(NAe);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),U5.$set(IAe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),d3.$set(sw);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),f3.$set(qAe);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),M3.$set(jAe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),C3.$set(lw);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),B3.$set(DAe);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),I3.$set(GAe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),H3.$set(iw);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),J3.$set(OAe);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),l0.$set(VAe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),d0.$set(dw);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),b0.$set(XAe);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),F0.$set(zAe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),x0.$set(cw);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),k0.$set(QAe);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),R0.$set(WAe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),B0.$set(fw);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),q0.$set(HAe);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),D0.$set(UAe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),O0.$set(mw)},i(f){kQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(Df.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(Zg.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(EL.$$.fragment,f),E(Nh.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(xL.$$.fragment,f),E(vp.$$.fragment,f),E(Fp.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(BL.$$.fragment,f),E(Gp.$$.fragment,f),E(Op.$$.fragment,f),E(NL.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(DL.$$.fragment,f),E(zp.$$.fragment,f),E(GL.$$.fragment,f),E(Yu.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(Zu.$$.fragment,f),E(QL.$$.fragment,f),E(Q2.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(H2.$$.fragment,f),E(YL.$$.fragment,f),E(N1.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(oy.$$.fragment,f),E(q1.$$.fragment,f),E(ry.$$.fragment,f),E(Cb.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(Ab.$$.fragment,f),E(ly.$$.fragment,f),E(Wb.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(Ub.$$.fragment,f),E(my.$$.fragment,f),E(Hv.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(Jv.$$.fragment,f),E(uy.$$.fragment,f),E(yF.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E($F.$$.fragment,f),E(My.$$.fragment,f),E(qF.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(DF.$$.fragment,f),E(Ly.$$.fragment,f),E(C6.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(A6.$$.fragment,f),E(Sy.$$.fragment,f),E(_T.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Ny.$$.fragment,f),E(bT.$$.fragment,f),E(Iy.$$.fragment,f),E(TT.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(ET.$$.fragment,f),E(Oy.$$.fragment,f),E(qT.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(DT.$$.fragment,f),E(Wy.$$.fragment,f),E(VT.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(zT.$$.fragment,f),E(Ky.$$.fragment,f),E(HT.$$.fragment,f),E(Zy.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(JT.$$.fragment,f),E(t9.$$.fragment,f),E(l7.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(d7.$$.fragment,f),E(i9.$$.fragment,f),E(_7.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(b7.$$.fragment,f),E(g9.$$.fragment,f),E($7.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(S7.$$.fragment,f),E(b9.$$.fragment,f),E(N7.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(q7.$$.fragment,f),E(C9.$$.fragment,f),E(z7.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(W7.$$.fragment,f),E(x9.$$.fragment,f),E(K7.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(e8.$$.fragment,f),E(P9.$$.fragment,f),E(a8.$$.fragment,f),E(N9.$$.fragment,f),E(I9.$$.fragment,f),E(j9.$$.fragment,f),E(s8.$$.fragment,f),E(D9.$$.fragment,f),E(d8.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(f8.$$.fragment,f),E(z9.$$.fragment,f),E(b8.$$.fragment,f),E(Q9.$$.fragment,f),E(W9.$$.fragment,f),E(U9.$$.fragment,f),E(F8.$$.fragment,f),E(J9.$$.fragment,f),E(E8.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(w8.$$.fragment,f),E(ox.$$.fragment,f),E(TM.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(EM.$$.fragment,f),E(sx.$$.fragment,f),E(WM.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(UM.$$.fragment,f),E(fx.$$.fragment,f),E(d4.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(f4.$$.fragment,f),E(_x.$$.fragment,f),E(b4.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(F4.$$.fragment,f),E(Tx.$$.fragment,f),E(G4.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(V4.$$.fragment,f),E(Ax.$$.fragment,f),E(eE.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(rE.$$.fragment,f),E(kx.$$.fragment,f),E(xE.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(kE.$$.fragment,f),E(Nx.$$.fragment,f),E(UE.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(YE.$$.fragment,f),E(Gx.$$.fragment,f),E(eC.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Qx.$$.fragment,f),E(rC.$$.fragment,f),E(Wx.$$.fragment,f),E(aC.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(sC.$$.fragment,f),E(Kx.$$.fragment,f),E(LC.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(xC.$$.fragment,f),E(t$.$$.fragment,f),E(JC.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(KC.$$.fragment,f),E(i$.$$.fragment,f),E(e5.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(r5.$$.fragment,f),E(g$.$$.fragment,f),E(a5.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(s5.$$.fragment,f),E(b$.$$.fragment,f),E(P5.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(N5.$$.fragment,f),E(E$.$$.fragment,f),E(W5.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(U5.$$.fragment,f),E(y$.$$.fragment,f),E(d3.$$.fragment,f),E(x$.$$.fragment,f),E($$.$$.fragment,f),E(S$.$$.fragment,f),E(f3.$$.fragment,f),E(R$.$$.fragment,f),E(M3.$$.fragment,f),E(P$.$$.fragment,f),E(B$.$$.fragment,f),E(I$.$$.fragment,f),E(C3.$$.fragment,f),E(q$.$$.fragment,f),E(B3.$$.fragment,f),E(j$.$$.fragment,f),E(D$.$$.fragment,f),E(O$.$$.fragment,f),E(I3.$$.fragment,f),E(V$.$$.fragment,f),E(H3.$$.fragment,f),E(X$.$$.fragment,f),E(z$.$$.fragment,f),E(W$.$$.fragment,f),E(J3.$$.fragment,f),E(H$.$$.fragment,f),E(l0.$$.fragment,f),E(U$.$$.fragment,f),E(J$.$$.fragment,f),E(K$.$$.fragment,f),E(d0.$$.fragment,f),E(Z$.$$.fragment,f),E(b0.$$.fragment,f),E(ek.$$.fragment,f),E(ok.$$.fragment,f),E(tk.$$.fragment,f),E(F0.$$.fragment,f),E(ak.$$.fragment,f),E(x0.$$.fragment,f),E(nk.$$.fragment,f),E(sk.$$.fragment,f),E(ik.$$.fragment,f),E(k0.$$.fragment,f),E(dk.$$.fragment,f),E(R0.$$.fragment,f),E(ck.$$.fragment,f),E(fk.$$.fragment,f),E(gk.$$.fragment,f),E(B0.$$.fragment,f),E(hk.$$.fragment,f),E(q0.$$.fragment,f),E(_k.$$.fragment,f),E(uk.$$.fragment,f),E(vk.$$.fragment,f),E(D0.$$.fragment,f),E(Fk.$$.fragment,f),E(O0.$$.fragment,f),kQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(Df.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(Zg.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(EL.$$.fragment,f),C(Nh.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(xL.$$.fragment,f),C(vp.$$.fragment,f),C(Fp.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(BL.$$.fragment,f),C(Gp.$$.fragment,f),C(Op.$$.fragment,f),C(NL.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(DL.$$.fragment,f),C(zp.$$.fragment,f),C(GL.$$.fragment,f),C(Yu.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(Zu.$$.fragment,f),C(QL.$$.fragment,f),C(Q2.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(H2.$$.fragment,f),C(YL.$$.fragment,f),C(N1.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(oy.$$.fragment,f),C(q1.$$.fragment,f),C(ry.$$.fragment,f),C(Cb.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(Ab.$$.fragment,f),C(ly.$$.fragment,f),C(Wb.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(Ub.$$.fragment,f),C(my.$$.fragment,f),C(Hv.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(Jv.$$.fragment,f),C(uy.$$.fragment,f),C(yF.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C($F.$$.fragment,f),C(My.$$.fragment,f),C(qF.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(DF.$$.fragment,f),C(Ly.$$.fragment,f),C(C6.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(A6.$$.fragment,f),C(Sy.$$.fragment,f),C(_T.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Ny.$$.fragment,f),C(bT.$$.fragment,f),C(Iy.$$.fragment,f),C(TT.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(ET.$$.fragment,f),C(Oy.$$.fragment,f),C(qT.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(DT.$$.fragment,f),C(Wy.$$.fragment,f),C(VT.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(zT.$$.fragment,f),C(Ky.$$.fragment,f),C(HT.$$.fragment,f),C(Zy.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(JT.$$.fragment,f),C(t9.$$.fragment,f),C(l7.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(d7.$$.fragment,f),C(i9.$$.fragment,f),C(_7.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(b7.$$.fragment,f),C(g9.$$.fragment,f),C($7.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(S7.$$.fragment,f),C(b9.$$.fragment,f),C(N7.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(q7.$$.fragment,f),C(C9.$$.fragment,f),C(z7.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(W7.$$.fragment,f),C(x9.$$.fragment,f),C(K7.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(e8.$$.fragment,f),C(P9.$$.fragment,f),C(a8.$$.fragment,f),C(N9.$$.fragment,f),C(I9.$$.fragment,f),C(j9.$$.fragment,f),C(s8.$$.fragment,f),C(D9.$$.fragment,f),C(d8.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(f8.$$.fragment,f),C(z9.$$.fragment,f),C(b8.$$.fragment,f),C(Q9.$$.fragment,f),C(W9.$$.fragment,f),C(U9.$$.fragment,f),C(F8.$$.fragment,f),C(J9.$$.fragment,f),C(E8.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(w8.$$.fragment,f),C(ox.$$.fragment,f),C(TM.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(EM.$$.fragment,f),C(sx.$$.fragment,f),C(WM.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(UM.$$.fragment,f),C(fx.$$.fragment,f),C(d4.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(f4.$$.fragment,f),C(_x.$$.fragment,f),C(b4.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(F4.$$.fragment,f),C(Tx.$$.fragment,f),C(G4.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(V4.$$.fragment,f),C(Ax.$$.fragment,f),C(eE.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(rE.$$.fragment,f),C(kx.$$.fragment,f),C(xE.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(kE.$$.fragment,f),C(Nx.$$.fragment,f),C(UE.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(YE.$$.fragment,f),C(Gx.$$.fragment,f),C(eC.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Qx.$$.fragment,f),C(rC.$$.fragment,f),C(Wx.$$.fragment,f),C(aC.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(sC.$$.fragment,f),C(Kx.$$.fragment,f),C(LC.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(xC.$$.fragment,f),C(t$.$$.fragment,f),C(JC.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(KC.$$.fragment,f),C(i$.$$.fragment,f),C(e5.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(r5.$$.fragment,f),C(g$.$$.fragment,f),C(a5.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(s5.$$.fragment,f),C(b$.$$.fragment,f),C(P5.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(N5.$$.fragment,f),C(E$.$$.fragment,f),C(W5.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(U5.$$.fragment,f),C(y$.$$.fragment,f),C(d3.$$.fragment,f),C(x$.$$.fragment,f),C($$.$$.fragment,f),C(S$.$$.fragment,f),C(f3.$$.fragment,f),C(R$.$$.fragment,f),C(M3.$$.fragment,f),C(P$.$$.fragment,f),C(B$.$$.fragment,f),C(I$.$$.fragment,f),C(C3.$$.fragment,f),C(q$.$$.fragment,f),C(B3.$$.fragment,f),C(j$.$$.fragment,f),C(D$.$$.fragment,f),C(O$.$$.fragment,f),C(I3.$$.fragment,f),C(V$.$$.fragment,f),C(H3.$$.fragment,f),C(X$.$$.fragment,f),C(z$.$$.fragment,f),C(W$.$$.fragment,f),C(J3.$$.fragment,f),C(H$.$$.fragment,f),C(l0.$$.fragment,f),C(U$.$$.fragment,f),C(J$.$$.fragment,f),C(K$.$$.fragment,f),C(d0.$$.fragment,f),C(Z$.$$.fragment,f),C(b0.$$.fragment,f),C(ek.$$.fragment,f),C(ok.$$.fragment,f),C(tk.$$.fragment,f),C(F0.$$.fragment,f),C(ak.$$.fragment,f),C(x0.$$.fragment,f),C(nk.$$.fragment,f),C(sk.$$.fragment,f),C(ik.$$.fragment,f),C(k0.$$.fragment,f),C(dk.$$.fragment,f),C(R0.$$.fragment,f),C(ck.$$.fragment,f),C(fk.$$.fragment,f),C(gk.$$.fragment,f),C(B0.$$.fragment,f),C(hk.$$.fragment,f),C(q0.$$.fragment,f),C(_k.$$.fragment,f),C(uk.$$.fragment,f),C(vk.$$.fragment,f),C(D0.$$.fragment,f),C(Fk.$$.fragment,f),C(O0.$$.fragment,f),kQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Bf),f&&t(lt),f&&t(Oe),f&&t(We),f&&t(If),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(wo),f&&t(Ra),f&&t(AXe),f&&t(Bi),w(fL),f&&t(LXe),f&&t(qn),f&&t(yXe),w(mL,f),f&&t(xXe),f&&t(HS),f&&t($Xe),w(Df,f),f&&t(kXe),f&&t(Ni),w(gL),f&&t(SXe),f&&t(Ao),w(hL),w(uL),w(Zg),w(bL),f&&t(RXe),f&&t(qi),w(vL),f&&t(PXe),f&&t(Lo),w(FL),w(EL),w(Nh),w(CL),f&&t(BXe),f&&t(ji),w(wL),f&&t(NXe),f&&t(yo),w(AL),w(xL),w(vp),w(Fp),w($L),f&&t(IXe),f&&t(Di),w(kL),f&&t(qXe),f&&t(xo),w(SL),w(BL),w(Gp),w(Op),w(NL),f&&t(jXe),f&&t(Oi),w(IL),f&&t(DXe),f&&t($o),w(qL),w(DL),w(zp),w(GL),w(Yu),f&&t(GXe),f&&t(zi),w(OL),f&&t(OXe),f&&t(ko),w(VL),w(zL),w(Zu),w(QL),w(Q2),f&&t(VXe),f&&t(Hi),w(WL),f&&t(XXe),f&&t(So),w(HL),w(JL),w(H2),w(YL),w(N1),f&&t(zXe),f&&t(Yi),w(KL),f&&t(QXe),f&&t(Ro),w(ZL),w(oy),w(q1),w(ry),w(Cb),f&&t(WXe),f&&t(ed),w(ty),f&&t(HXe),f&&t(Po),w(ay),w(sy),w(Ab),w(ly),w(Wb),f&&t(UXe),f&&t(td),w(iy),f&&t(JXe),f&&t(Bo),w(dy),w(fy),w(Ub),w(my),w(Hv),f&&t(YXe),f&&t(sd),w(gy),f&&t(KXe),f&&t(No),w(hy),w(_y),w(Jv),w(uy),w(yF),f&&t(ZXe),f&&t(dd),w(by),f&&t(eze),f&&t(Io),w(vy),w(Ty),w($F),w(My),w(qF),f&&t(oze),f&&t(md),w(Ey),f&&t(rze),f&&t(jo),w(Cy),w(Ay),w(DF),w(Ly),w(C6),f&&t(tze),f&&t(pd),w(yy),f&&t(aze),f&&t(Do),w(xy),w(ky),w(A6),w(Sy),w(_T),f&&t(nze),f&&t(bd),w(Ry),f&&t(sze),f&&t(Go),w(Py),w(Ny),w(bT),w(Iy),w(TT),f&&t(lze),f&&t(Td),w(qy),f&&t(ize),f&&t(Oo),w(jy),w(Gy),w(ET),w(Oy),w(qT),f&&t(dze),f&&t(Cd),w(Vy),f&&t(cze),f&&t(Vo),w(Xy),w(Qy),w(DT),w(Wy),w(VT),f&&t(fze),f&&t(Ld),w(Hy),f&&t(mze),f&&t(Xo),w(Uy),w(Yy),w(zT),w(Ky),w(HT),f&&t(gze),f&&t($d),w(Zy),f&&t(hze),f&&t(zo),w(e9),w(r9),w(JT),w(t9),w(l7),f&&t(pze),f&&t(Rd),w(a9),f&&t(_ze),f&&t(Qo),w(n9),w(l9),w(d7),w(i9),w(_7),f&&t(uze),f&&t(Nd),w(d9),f&&t(bze),f&&t(Wo),w(c9),w(m9),w(b7),w(g9),w($7),f&&t(vze),f&&t(jd),w(h9),f&&t(Fze),f&&t(Ho),w(p9),w(u9),w(S7),w(b9),w(N7),f&&t(Tze),f&&t(Od),w(F9),f&&t(Mze),f&&t(Uo),w(T9),w(E9),w(q7),w(C9),w(z7),f&&t(Eze),f&&t(zd),w(w9),f&&t(Cze),f&&t(Jo),w(A9),w(y9),w(W7),w(x9),w(K7),f&&t(wze),f&&t(Ud),w($9),f&&t(Aze),f&&t(Yo),w(k9),w(R9),w(e8),w(P9),w(a8),f&&t(Lze),f&&t(Kd),w(N9),f&&t(yze),f&&t(Ko),w(I9),w(j9),w(s8),w(D9),w(d8),f&&t(xze),f&&t(oc),w(G9),f&&t($ze),f&&t(Zo),w(O9),w(X9),w(f8),w(z9),w(b8),f&&t(kze),f&&t(ac),w(Q9),f&&t(Sze),f&&t(er),w(W9),w(U9),w(F8),w(J9),w(E8),f&&t(Rze),f&&t(lc),w(Y9),f&&t(Pze),f&&t(or),w(K9),w(ex),w(w8),w(ox),w(TM),f&&t(Bze),f&&t(cc),w(rx),f&&t(Nze),f&&t(rr),w(tx),w(nx),w(EM),w(sx),w(WM),f&&t(Ize),f&&t(gc),w(lx),f&&t(qze),f&&t(tr),w(ix),w(cx),w(UM),w(fx),w(d4),f&&t(jze),f&&t(_c),w(mx),f&&t(Dze),f&&t(ar),w(gx),w(px),w(f4),w(_x),w(b4),f&&t(Gze),f&&t(vc),w(ux),f&&t(Oze),f&&t(nr),w(bx),w(Fx),w(F4),w(Tx),w(G4),f&&t(Vze),f&&t(Mc),w(Mx),f&&t(Xze),f&&t(sr),w(Ex),w(wx),w(V4),w(Ax),w(eE),f&&t(zze),f&&t(wc),w(Lx),f&&t(Qze),f&&t(lr),w(yx),w($x),w(rE),w(kx),w(xE),f&&t(Wze),f&&t(yc),w(Sx),f&&t(Hze),f&&t(ir),w(Rx),w(Bx),w(kE),w(Nx),w(UE),f&&t(Uze),f&&t(kc),w(Ix),f&&t(Jze),f&&t(dr),w(qx),w(Dx),w(YE),w(Gx),w(eC),f&&t(Yze),f&&t(Pc),w(Vx),f&&t(Kze),f&&t(cr),w(Xx),w(Qx),w(rC),w(Wx),w(aC),f&&t(Zze),f&&t(Ic),w(Hx),f&&t(eQe),f&&t(fr),w(Ux),w(Yx),w(sC),w(Kx),w(LC),f&&t(oQe),f&&t(Dc),w(Zx),f&&t(rQe),f&&t(mr),w(e$),w(r$),w(xC),w(t$),w(JC),f&&t(tQe),f&&t(Vc),w(a$),f&&t(aQe),f&&t(gr),w(n$),w(l$),w(KC),w(i$),w(e5),f&&t(nQe),f&&t(Qc),w(d$),f&&t(sQe),f&&t(hr),w(c$),w(m$),w(r5),w(g$),w(a5),f&&t(lQe),f&&t(Uc),w(h$),f&&t(iQe),f&&t(pr),w(p$),w(u$),w(s5),w(b$),w(P5),f&&t(dQe),f&&t(Kc),w(v$),f&&t(cQe),f&&t(_r),w(F$),w(M$),w(N5),w(E$),w(W5),f&&t(fQe),f&&t(of),w(C$),f&&t(mQe),f&&t(ur),w(w$),w(L$),w(U5),w(y$),w(d3),f&&t(gQe),f&&t(af),w(x$),f&&t(hQe),f&&t(br),w($$),w(S$),w(f3),w(R$),w(M3),f&&t(pQe),f&&t(lf),w(P$),f&&t(_Qe),f&&t(vr),w(B$),w(I$),w(C3),w(q$),w(B3),f&&t(uQe),f&&t(ff),w(j$),f&&t(bQe),f&&t(Fr),w(D$),w(O$),w(I3),w(V$),w(H3),f&&t(vQe),f&&t(hf),w(X$),f&&t(FQe),f&&t(Tr),w(z$),w(W$),w(J3),w(H$),w(l0),f&&t(TQe),f&&t(uf),w(U$),f&&t(MQe),f&&t(Mr),w(J$),w(K$),w(d0),w(Z$),w(b0),f&&t(EQe),f&&t(Ff),w(ek),f&&t(CQe),f&&t(Er),w(ok),w(tk),w(F0),w(ak),w(x0),f&&t(wQe),f&&t(Ef),w(nk),f&&t(AQe),f&&t(Cr),w(sk),w(ik),w(k0),w(dk),w(R0),f&&t(LQe),f&&t(Af),w(ck),f&&t(yQe),f&&t(wr),w(fk),w(gk),w(B0),w(hk),w(q0),f&&t(xQe),f&&t(xf),w(_k),f&&t($Qe),f&&t(Ar),w(uk),w(vk),w(D0),w(Fk),w(O0)}}}const iJt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function dJt($){return lHt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _Jt extends tHt{constructor(g){super();aHt(this,g,dJt,lJt,nHt,{})}}export{_Jt as default,iJt as metadata};
