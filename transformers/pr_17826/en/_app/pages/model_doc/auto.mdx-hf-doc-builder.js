import{S as QWt,i as WWt,s as HWt,e as a,k as l,w as F,t as o,M as UWt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as JWt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as nat}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function YWt($){let g,v,p,m,_,d,h,Co,yi,Bf,lt,xi,$i,sL,Nf,Oe,We,ki,Pn,lL,Bn,Nn,iL,Si,In,dL,Ri,If,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),yi=a("code"),Bf=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),xi=a("code"),$i=o('"new-model"'),sL=o(")."),Nf=l(),Oe=a("p"),We=o("Likewise, if your "),ki=a("code"),Pn=o("NewModel"),lL=o(" is a subclass of "),Bn=a("a"),Nn=o("PreTrainedModel"),iL=o(`, make sure its
`),Si=a("code"),In=o("config_class"),dL=o(` attribute is set to the same class you use when registering the model (here
`),Ri=a("code"),If=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var OS=s(p);m=r(OS,"NewModelConfig"),OS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Pi=s(d);h=r(Pi,"PretrainedConfig"),Pi.forEach(t),Co=r(Ae,`, make sure its
`),yi=n(Ae,"CODE",{});var VS=s(yi);Bf=r(VS,"model_type"),VS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),xi=n(Ae,"CODE",{});var XS=s(xi);$i=r(XS,'"new-model"'),XS.forEach(t),sL=r(Ae,")."),Ae.forEach(t),Nf=i(He),Oe=n(He,"P",{});var wo=s(Oe);We=r(wo,"Likewise, if your "),ki=n(wo,"CODE",{});var Ra=s(ki);Pn=r(Ra,"NewModel"),Ra.forEach(t),lL=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var zS=s(Bn);Nn=r(zS,"PreTrainedModel"),zS.forEach(t),iL=r(wo,`, make sure its
`),Si=n(wo,"CODE",{});var qf=s(Si);In=r(qf,"config_class"),qf.forEach(t),dL=r(wo,` attribute is set to the same class you use when registering the model (here
`),Ri=n(wo,"CODE",{});var QS=s(Ri);If=r(QS,"NewModelConfig"),QS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Co),e(g,yi),e(yi,Bf),e(g,lt),e(g,xi),e(xi,$i),e(g,sL),b(He,Nf,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,ki),e(ki,Pn),e(Oe,lL),e(Oe,Bn),e(Bn,Nn),e(Oe,iL),e(Oe,Si),e(Si,In),e(Oe,dL),e(Oe,Ri),e(Ri,If),e(Oe,Sa)},d(He){He&&t(g),He&&t(Nf),He&&t(Oe)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JUt($){let g,v,p,m,_,d,h,Co,yi,Bf,lt,xi,$i,sL,Nf,Oe,We,ki,Pn,lL,Bn,Nn,iL,Si,In,dL,Ri,If,Sa,He,Ae,OS,Pi,VS,XS,wo,Ra,zS,qf,QS,IHe,MXe,Bi,jf,Nae,cL,qHe,Iae,jHe,EXe,qn,DHe,qae,GHe,OHe,jae,VHe,XHe,CXe,fL,wXe,WS,zHe,AXe,Df,LXe,Ni,Gf,Dae,mL,QHe,Gae,WHe,yXe,Ao,gL,HHe,hL,UHe,HS,JHe,YHe,KHe,pL,ZHe,Oae,eUe,oUe,rUe,Lr,_L,tUe,Vae,aUe,nUe,Ii,sUe,Xae,lUe,iUe,zae,dUe,cUe,fUe,A,Of,Qae,mUe,gUe,US,hUe,pUe,_Ue,Vf,Wae,uUe,bUe,JS,vUe,FUe,TUe,Xf,Hae,MUe,EUe,YS,CUe,wUe,AUe,zf,Uae,LUe,yUe,KS,xUe,$Ue,kUe,Qf,Jae,SUe,RUe,ZS,PUe,BUe,NUe,Wf,Yae,IUe,qUe,eR,jUe,DUe,GUe,Hf,Kae,OUe,VUe,oR,XUe,zUe,QUe,Uf,Zae,WUe,HUe,rR,UUe,JUe,YUe,Jf,ene,KUe,ZUe,tR,eJe,oJe,rJe,Yf,one,tJe,aJe,aR,nJe,sJe,lJe,Kf,rne,iJe,dJe,nR,cJe,fJe,mJe,Zf,tne,gJe,hJe,sR,pJe,_Je,uJe,em,ane,bJe,vJe,lR,FJe,TJe,MJe,om,nne,EJe,CJe,iR,wJe,AJe,LJe,rm,sne,yJe,xJe,dR,$Je,kJe,SJe,tm,lne,RJe,PJe,cR,BJe,NJe,IJe,am,ine,qJe,jJe,fR,DJe,GJe,OJe,nm,dne,VJe,XJe,mR,zJe,QJe,WJe,sm,cne,HJe,UJe,gR,JJe,YJe,KJe,lm,fne,ZJe,eYe,hR,oYe,rYe,tYe,im,mne,aYe,nYe,pR,sYe,lYe,iYe,dm,gne,dYe,cYe,_R,fYe,mYe,gYe,cm,hne,hYe,pYe,uR,_Ye,uYe,bYe,fm,pne,vYe,FYe,bR,TYe,MYe,EYe,mm,_ne,CYe,wYe,vR,AYe,LYe,yYe,gm,une,xYe,$Ye,FR,kYe,SYe,RYe,hm,bne,PYe,BYe,TR,NYe,IYe,qYe,pm,vne,jYe,DYe,MR,GYe,OYe,VYe,_m,Fne,XYe,zYe,ER,QYe,WYe,HYe,um,Tne,UYe,JYe,CR,YYe,KYe,ZYe,bm,Mne,eKe,oKe,wR,rKe,tKe,aKe,vm,Ene,nKe,sKe,AR,lKe,iKe,dKe,Fm,Cne,cKe,fKe,LR,mKe,gKe,hKe,Tm,wne,pKe,_Ke,yR,uKe,bKe,vKe,Mm,Ane,FKe,TKe,xR,MKe,EKe,CKe,Em,Lne,wKe,AKe,$R,LKe,yKe,xKe,Cm,yne,$Ke,kKe,kR,SKe,RKe,PKe,wm,xne,BKe,NKe,SR,IKe,qKe,jKe,Am,$ne,DKe,GKe,RR,OKe,VKe,XKe,Lm,kne,zKe,QKe,PR,WKe,HKe,UKe,ym,Sne,JKe,YKe,BR,KKe,ZKe,eZe,xm,Rne,oZe,rZe,NR,tZe,aZe,nZe,$m,Pne,sZe,lZe,IR,iZe,dZe,cZe,km,Bne,fZe,mZe,qR,gZe,hZe,pZe,Sm,Nne,_Ze,uZe,jR,bZe,vZe,FZe,Rm,Ine,TZe,MZe,DR,EZe,CZe,wZe,Pm,qne,AZe,LZe,GR,yZe,xZe,$Ze,Bm,jne,kZe,SZe,OR,RZe,PZe,BZe,Nm,Dne,NZe,IZe,VR,qZe,jZe,DZe,Im,Gne,GZe,OZe,XR,VZe,XZe,zZe,qm,One,QZe,WZe,zR,HZe,UZe,JZe,jm,Vne,YZe,KZe,QR,ZZe,eeo,oeo,Dm,Xne,reo,teo,WR,aeo,neo,seo,Gm,zne,leo,ieo,HR,deo,ceo,feo,Om,Qne,meo,geo,UR,heo,peo,_eo,Vm,Wne,ueo,beo,JR,veo,Feo,Teo,Xm,Hne,Meo,Eeo,YR,Ceo,weo,Aeo,zm,Une,Leo,yeo,KR,xeo,$eo,keo,Qm,Jne,Seo,Reo,ZR,Peo,Beo,Neo,Wm,Yne,Ieo,qeo,eP,jeo,Deo,Geo,Hm,Kne,Oeo,Veo,oP,Xeo,zeo,Qeo,Um,Zne,Weo,Heo,rP,Ueo,Jeo,Yeo,Jm,ese,Keo,Zeo,tP,eoo,ooo,roo,Ym,ose,too,aoo,aP,noo,soo,loo,Km,rse,ioo,doo,nP,coo,foo,moo,Zm,tse,goo,hoo,sP,poo,_oo,uoo,eg,ase,boo,voo,lP,Foo,Too,Moo,og,nse,Eoo,Coo,iP,woo,Aoo,Loo,rg,sse,yoo,xoo,dP,$oo,koo,Soo,tg,lse,Roo,Poo,cP,Boo,Noo,Ioo,ag,ise,qoo,joo,fP,Doo,Goo,Ooo,ng,dse,Voo,Xoo,mP,zoo,Qoo,Woo,sg,cse,Hoo,Uoo,gP,Joo,Yoo,Koo,lg,fse,Zoo,ero,hP,oro,rro,tro,ig,mse,aro,nro,pP,sro,lro,iro,dg,gse,dro,cro,_P,fro,mro,gro,cg,hse,hro,pro,uP,_ro,uro,bro,fg,pse,vro,Fro,bP,Tro,Mro,Ero,mg,_se,Cro,wro,vP,Aro,Lro,yro,gg,use,xro,$ro,FP,kro,Sro,Rro,hg,bse,Pro,Bro,TP,Nro,Iro,qro,pg,vse,jro,Dro,MP,Gro,Oro,Vro,_g,Fse,Xro,zro,EP,Qro,Wro,Hro,ug,Tse,Uro,Jro,CP,Yro,Kro,Zro,bg,Mse,eto,oto,wP,rto,tto,ato,vg,Ese,nto,sto,AP,lto,ito,dto,Fg,Cse,cto,fto,LP,mto,gto,hto,Tg,wse,pto,_to,yP,uto,bto,vto,Mg,Ase,Fto,Tto,xP,Mto,Eto,Cto,Eg,Lse,wto,Ato,$P,Lto,yto,xto,Cg,yse,$to,kto,kP,Sto,Rto,Pto,wg,xse,Bto,Nto,SP,Ito,qto,jto,Ag,$se,Dto,Gto,RP,Oto,Vto,Xto,Lg,kse,zto,Qto,PP,Wto,Hto,Uto,yg,Sse,Jto,Yto,BP,Kto,Zto,eao,xg,Rse,oao,rao,NP,tao,aao,nao,$g,Pse,sao,lao,IP,iao,dao,cao,kg,Bse,fao,mao,qP,gao,hao,pao,Sg,Nse,_ao,uao,jP,bao,vao,Fao,Rg,Ise,Tao,Mao,DP,Eao,Cao,wao,Pg,qse,Aao,Lao,GP,yao,xao,$ao,Bg,jse,kao,Sao,OP,Rao,Pao,Bao,Ng,Dse,Nao,Iao,VP,qao,jao,Dao,Ig,Gse,Gao,Oao,XP,Vao,Xao,zao,qg,Ose,Qao,Wao,zP,Hao,Uao,Jao,jg,Vse,Yao,Kao,QP,Zao,eno,ono,Dg,Xse,rno,tno,WP,ano,nno,sno,Gg,zse,lno,ino,HP,dno,cno,fno,Og,Qse,mno,gno,UP,hno,pno,_no,Vg,Wse,uno,bno,JP,vno,Fno,Tno,Xg,Hse,Mno,Eno,YP,Cno,wno,Ano,zg,Use,Lno,yno,KP,xno,$no,kno,Qg,Jse,Sno,Rno,ZP,Pno,Bno,Nno,Wg,Yse,Ino,qno,eB,jno,Dno,Gno,Hg,Kse,Ono,Vno,oB,Xno,zno,Qno,Ug,Zse,Wno,Hno,rB,Uno,Jno,Yno,Jg,ele,Kno,Zno,tB,eso,oso,rso,Yg,ole,tso,aso,aB,nso,sso,lso,Kg,rle,iso,dso,nB,cso,fso,mso,Zg,gso,eh,uL,hso,tle,pso,xXe,qi,oh,ale,bL,_so,nle,uso,$Xe,Lo,vL,bso,FL,vso,sB,Fso,Tso,Mso,TL,Eso,sle,Cso,wso,Aso,yr,ML,Lso,lle,yso,xso,Pa,$so,ile,kso,Sso,dle,Rso,Pso,cle,Bso,Nso,Iso,k,jn,fle,qso,jso,lB,Dso,Gso,iB,Oso,Vso,Xso,Dn,mle,zso,Qso,dB,Wso,Hso,cB,Uso,Jso,Yso,Gn,gle,Kso,Zso,fB,elo,olo,mB,rlo,tlo,alo,rh,hle,nlo,slo,gB,llo,ilo,dlo,On,ple,clo,flo,hB,mlo,glo,pB,hlo,plo,_lo,th,_le,ulo,blo,_B,vlo,Flo,Tlo,ah,ule,Mlo,Elo,uB,Clo,wlo,Alo,nh,ble,Llo,ylo,bB,xlo,$lo,klo,Vn,vle,Slo,Rlo,vB,Plo,Blo,FB,Nlo,Ilo,qlo,Xn,Fle,jlo,Dlo,TB,Glo,Olo,MB,Vlo,Xlo,zlo,zn,Tle,Qlo,Wlo,EB,Hlo,Ulo,CB,Jlo,Ylo,Klo,sh,Mle,Zlo,eio,wB,oio,rio,tio,lh,Ele,aio,nio,AB,sio,lio,iio,ih,Cle,dio,cio,LB,fio,mio,gio,Qn,wle,hio,pio,yB,_io,uio,xB,bio,vio,Fio,dh,Ale,Tio,Mio,$B,Eio,Cio,wio,Wn,Lle,Aio,Lio,kB,yio,xio,SB,$io,kio,Sio,Hn,yle,Rio,Pio,RB,Bio,Nio,PB,Iio,qio,jio,Un,xle,Dio,Gio,BB,Oio,Vio,NB,Xio,zio,Qio,Jn,$le,Wio,Hio,IB,Uio,Jio,qB,Yio,Kio,Zio,ch,kle,edo,odo,jB,rdo,tdo,ado,Yn,Sle,ndo,sdo,DB,ldo,ido,GB,ddo,cdo,fdo,Kn,Rle,mdo,gdo,OB,hdo,pdo,VB,_do,udo,bdo,Zn,Ple,vdo,Fdo,XB,Tdo,Mdo,zB,Edo,Cdo,wdo,es,Ble,Ado,Ldo,QB,ydo,xdo,WB,$do,kdo,Sdo,os,Nle,Rdo,Pdo,HB,Bdo,Ndo,UB,Ido,qdo,jdo,rs,Ile,Ddo,Gdo,JB,Odo,Vdo,YB,Xdo,zdo,Qdo,fh,qle,Wdo,Hdo,KB,Udo,Jdo,Ydo,ts,jle,Kdo,Zdo,ZB,eco,oco,eN,rco,tco,aco,mh,Dle,nco,sco,oN,lco,ico,dco,as,Gle,cco,fco,rN,mco,gco,tN,hco,pco,_co,ns,Ole,uco,bco,aN,vco,Fco,nN,Tco,Mco,Eco,ss,Vle,Cco,wco,sN,Aco,Lco,lN,yco,xco,$co,gh,Xle,kco,Sco,iN,Rco,Pco,Bco,ls,zle,Nco,Ico,dN,qco,jco,cN,Dco,Gco,Oco,is,Qle,Vco,Xco,fN,zco,Qco,mN,Wco,Hco,Uco,ds,Wle,Jco,Yco,gN,Kco,Zco,hN,efo,ofo,rfo,hh,Hle,tfo,afo,pN,nfo,sfo,lfo,cs,Ule,ifo,dfo,_N,cfo,ffo,uN,mfo,gfo,hfo,ph,Jle,pfo,_fo,Yle,ufo,bfo,vfo,fs,Kle,Ffo,Tfo,bN,Mfo,Efo,vN,Cfo,wfo,Afo,ms,Zle,Lfo,yfo,FN,xfo,$fo,TN,kfo,Sfo,Rfo,gs,eie,Pfo,Bfo,MN,Nfo,Ifo,EN,qfo,jfo,Dfo,hs,oie,Gfo,Ofo,CN,Vfo,Xfo,wN,zfo,Qfo,Wfo,ps,rie,Hfo,Ufo,AN,Jfo,Yfo,LN,Kfo,Zfo,emo,_s,tie,omo,rmo,yN,tmo,amo,xN,nmo,smo,lmo,us,aie,imo,dmo,$N,cmo,fmo,kN,mmo,gmo,hmo,_h,nie,pmo,_mo,SN,umo,bmo,vmo,bs,sie,Fmo,Tmo,RN,Mmo,Emo,PN,Cmo,wmo,Amo,uh,lie,Lmo,ymo,BN,xmo,$mo,kmo,bh,iie,Smo,Rmo,NN,Pmo,Bmo,Nmo,vs,die,Imo,qmo,IN,jmo,Dmo,qN,Gmo,Omo,Vmo,Fs,cie,Xmo,zmo,jN,Qmo,Wmo,DN,Hmo,Umo,Jmo,Ts,fie,Ymo,Kmo,GN,Zmo,ego,ON,ogo,rgo,tgo,vh,mie,ago,ngo,VN,sgo,lgo,igo,Ms,gie,dgo,cgo,XN,fgo,mgo,zN,ggo,hgo,pgo,Es,hie,_go,ugo,QN,bgo,vgo,WN,Fgo,Tgo,Mgo,Cs,pie,Ego,Cgo,HN,wgo,Ago,UN,Lgo,ygo,xgo,ws,_ie,$go,kgo,JN,Sgo,Rgo,YN,Pgo,Bgo,Ngo,As,uie,Igo,qgo,KN,jgo,Dgo,ZN,Ggo,Ogo,Vgo,Ls,bie,Xgo,zgo,eI,Qgo,Wgo,oI,Hgo,Ugo,Jgo,ys,vie,Ygo,Kgo,rI,Zgo,eho,tI,oho,rho,tho,xs,Fie,aho,nho,aI,sho,lho,nI,iho,dho,cho,Fh,Tie,fho,mho,sI,gho,hho,pho,$s,Mie,_ho,uho,lI,bho,vho,iI,Fho,Tho,Mho,Th,Eie,Eho,Cho,dI,who,Aho,Lho,Mh,Cie,yho,xho,cI,$ho,kho,Sho,Eh,wie,Rho,Pho,fI,Bho,Nho,Iho,Ch,Aie,qho,jho,mI,Dho,Gho,Oho,ks,Lie,Vho,Xho,gI,zho,Qho,hI,Who,Hho,Uho,wh,yie,Jho,Yho,pI,Kho,Zho,epo,Ss,xie,opo,rpo,_I,tpo,apo,uI,npo,spo,lpo,Rs,$ie,ipo,dpo,bI,cpo,fpo,vI,mpo,gpo,hpo,Ps,kie,ppo,_po,FI,upo,bpo,TI,vpo,Fpo,Tpo,Bs,Sie,Mpo,Epo,MI,Cpo,wpo,EI,Apo,Lpo,ypo,Ns,Rie,xpo,$po,CI,kpo,Spo,wI,Rpo,Ppo,Bpo,Is,Pie,Npo,Ipo,AI,qpo,jpo,LI,Dpo,Gpo,Opo,Ah,Bie,Vpo,Xpo,yI,zpo,Qpo,Wpo,Lh,Nie,Hpo,Upo,xI,Jpo,Ypo,Kpo,qs,Iie,Zpo,e_o,$I,o_o,r_o,kI,t_o,a_o,n_o,js,qie,s_o,l_o,SI,i_o,d_o,RI,c_o,f_o,m_o,Ds,jie,g_o,h_o,PI,p_o,__o,BI,u_o,b_o,v_o,yh,Die,F_o,T_o,NI,M_o,E_o,C_o,xh,Gie,w_o,A_o,II,L_o,y_o,x_o,$h,Oie,$_o,k_o,qI,S_o,R_o,P_o,Gs,Vie,B_o,N_o,jI,I_o,q_o,DI,j_o,D_o,G_o,Os,Xie,O_o,V_o,GI,X_o,z_o,OI,Q_o,W_o,H_o,kh,zie,U_o,J_o,VI,Y_o,K_o,Z_o,Sh,Qie,euo,ouo,XI,ruo,tuo,auo,Rh,Wie,nuo,suo,zI,luo,iuo,duo,Vs,Hie,cuo,fuo,QI,muo,guo,WI,huo,puo,_uo,Ph,Uie,uuo,buo,HI,vuo,Fuo,Tuo,Bh,Jie,Muo,Euo,UI,Cuo,wuo,Auo,Xs,Yie,Luo,yuo,JI,xuo,$uo,YI,kuo,Suo,Ruo,zs,Kie,Puo,Buo,KI,Nuo,Iuo,ZI,quo,juo,Duo,Qs,Zie,Guo,Ouo,eq,Vuo,Xuo,oq,zuo,Quo,Wuo,Ws,ede,Huo,Uuo,rq,Juo,Yuo,tq,Kuo,Zuo,e2o,Nh,o2o,Ih,EL,r2o,ode,t2o,kXe,ji,qh,rde,CL,a2o,tde,n2o,SXe,yo,wL,s2o,AL,l2o,aq,i2o,d2o,c2o,LL,f2o,ade,m2o,g2o,h2o,Ue,yL,p2o,nde,_2o,u2o,Ba,b2o,sde,v2o,F2o,lde,T2o,M2o,ide,E2o,C2o,w2o,Y,jh,dde,A2o,L2o,nq,y2o,x2o,$2o,Dh,cde,k2o,S2o,sq,R2o,P2o,B2o,Gh,fde,N2o,I2o,lq,q2o,j2o,D2o,Oh,mde,G2o,O2o,iq,V2o,X2o,z2o,Vh,gde,Q2o,W2o,dq,H2o,U2o,J2o,Xh,hde,Y2o,K2o,cq,Z2o,e1o,o1o,zh,pde,r1o,t1o,fq,a1o,n1o,s1o,Qh,_de,l1o,i1o,mq,d1o,c1o,f1o,Wh,ude,m1o,g1o,gq,h1o,p1o,_1o,Hh,bde,u1o,b1o,hq,v1o,F1o,T1o,Uh,vde,M1o,E1o,pq,C1o,w1o,A1o,Jh,Fde,L1o,y1o,_q,x1o,$1o,k1o,Yh,Tde,S1o,R1o,uq,P1o,B1o,N1o,Kh,Mde,I1o,q1o,bq,j1o,D1o,G1o,Zh,Ede,O1o,V1o,vq,X1o,z1o,Q1o,ep,Cde,W1o,H1o,Fq,U1o,J1o,Y1o,op,wde,K1o,Z1o,Tq,ebo,obo,rbo,rp,Ade,tbo,abo,Mq,nbo,sbo,lbo,tp,Lde,ibo,dbo,Eq,cbo,fbo,mbo,ap,yde,gbo,hbo,Cq,pbo,_bo,ubo,np,xde,bbo,vbo,wq,Fbo,Tbo,Mbo,sp,$de,Ebo,Cbo,Aq,wbo,Abo,Lbo,lp,kde,ybo,xbo,Lq,$bo,kbo,Sbo,ip,Sde,Rbo,Pbo,yq,Bbo,Nbo,Ibo,dp,Rde,qbo,jbo,xq,Dbo,Gbo,Obo,cp,Pde,Vbo,Xbo,$q,zbo,Qbo,Wbo,fp,Bde,Hbo,Ubo,kq,Jbo,Ybo,Kbo,mp,Nde,Zbo,evo,Sq,ovo,rvo,tvo,gp,Ide,avo,nvo,Rq,svo,lvo,ivo,hp,qde,dvo,cvo,Pq,fvo,mvo,gvo,pp,jde,hvo,pvo,Bq,_vo,uvo,bvo,_p,Dde,vvo,Fvo,Nq,Tvo,Mvo,Evo,up,Gde,Cvo,wvo,Iq,Avo,Lvo,yvo,bp,Ode,xvo,$vo,qq,kvo,Svo,Rvo,vp,Pvo,Fp,Bvo,Tp,xL,Nvo,Vde,Ivo,RXe,Di,Mp,Xde,$L,qvo,zde,jvo,PXe,xo,kL,Dvo,SL,Gvo,jq,Ovo,Vvo,Xvo,RL,zvo,Qde,Qvo,Wvo,Hvo,Je,PL,Uvo,Wde,Jvo,Yvo,Gi,Kvo,Hde,Zvo,eFo,Ude,oFo,rFo,tFo,pe,Ep,Jde,aFo,nFo,Dq,sFo,lFo,iFo,Cp,Yde,dFo,cFo,Kde,fFo,mFo,gFo,wp,Zde,hFo,pFo,Gq,_Fo,uFo,bFo,Ap,ece,vFo,FFo,Oq,TFo,MFo,EFo,Lp,oce,CFo,wFo,Vq,AFo,LFo,yFo,yp,rce,xFo,$Fo,Xq,kFo,SFo,RFo,xp,tce,PFo,BFo,zq,NFo,IFo,qFo,$p,ace,jFo,DFo,Qq,GFo,OFo,VFo,kp,nce,XFo,zFo,Wq,QFo,WFo,HFo,Sp,sce,UFo,JFo,Hq,YFo,KFo,ZFo,Rp,lce,e6o,o6o,Uq,r6o,t6o,a6o,Pp,ice,n6o,s6o,Jq,l6o,i6o,d6o,Bp,dce,c6o,f6o,Yq,m6o,g6o,h6o,Np,cce,p6o,_6o,Kq,u6o,b6o,v6o,Ip,fce,F6o,T6o,Zq,M6o,E6o,C6o,qp,mce,w6o,A6o,ej,L6o,y6o,x6o,jp,gce,$6o,k6o,oj,S6o,R6o,P6o,Dp,hce,B6o,N6o,rj,I6o,q6o,j6o,Gp,D6o,Op,G6o,Vp,BL,O6o,pce,V6o,BXe,Oi,Xp,_ce,NL,X6o,uce,z6o,NXe,$o,IL,Q6o,Vi,W6o,tj,H6o,U6o,aj,J6o,Y6o,K6o,qL,Z6o,bce,eTo,oTo,rTo,it,jL,tTo,vce,aTo,nTo,Xi,sTo,Fce,lTo,iTo,nj,dTo,cTo,fTo,zp,mTo,Ye,DL,gTo,Tce,hTo,pTo,Na,_To,Mce,uTo,bTo,Ece,vTo,FTo,Cce,TTo,MTo,ETo,y,Qp,wce,CTo,wTo,sj,ATo,LTo,yTo,Wp,Ace,xTo,$To,lj,kTo,STo,RTo,Hp,Lce,PTo,BTo,ij,NTo,ITo,qTo,Up,yce,jTo,DTo,dj,GTo,OTo,VTo,Jp,xce,XTo,zTo,cj,QTo,WTo,HTo,Yp,$ce,UTo,JTo,fj,YTo,KTo,ZTo,Kp,kce,e7o,o7o,mj,r7o,t7o,a7o,Zp,Sce,n7o,s7o,gj,l7o,i7o,d7o,e_,Rce,c7o,f7o,hj,m7o,g7o,h7o,o_,Pce,p7o,_7o,pj,u7o,b7o,v7o,r_,Bce,F7o,T7o,_j,M7o,E7o,C7o,t_,Nce,w7o,A7o,uj,L7o,y7o,x7o,a_,Ice,$7o,k7o,bj,S7o,R7o,P7o,n_,qce,B7o,N7o,vj,I7o,q7o,j7o,s_,jce,D7o,G7o,Fj,O7o,V7o,X7o,l_,Dce,z7o,Q7o,Tj,W7o,H7o,U7o,i_,Gce,J7o,Y7o,Mj,K7o,Z7o,e8o,d_,Oce,o8o,r8o,Ej,t8o,a8o,n8o,c_,Vce,s8o,l8o,Cj,i8o,d8o,c8o,f_,Xce,f8o,m8o,wj,g8o,h8o,p8o,m_,zce,_8o,u8o,Aj,b8o,v8o,F8o,g_,Qce,T8o,M8o,Lj,E8o,C8o,w8o,h_,Wce,A8o,L8o,yj,y8o,x8o,$8o,p_,Hce,k8o,S8o,xj,R8o,P8o,B8o,__,Uce,N8o,I8o,$j,q8o,j8o,D8o,u_,Jce,G8o,O8o,kj,V8o,X8o,z8o,b_,Yce,Q8o,W8o,Sj,H8o,U8o,J8o,v_,Kce,Y8o,K8o,Rj,Z8o,eMo,oMo,F_,Zce,rMo,tMo,Pj,aMo,nMo,sMo,T_,efe,lMo,iMo,Bj,dMo,cMo,fMo,M_,ofe,mMo,gMo,Nj,hMo,pMo,_Mo,E_,rfe,uMo,bMo,Ij,vMo,FMo,TMo,C_,tfe,MMo,EMo,qj,CMo,wMo,AMo,w_,afe,LMo,yMo,jj,xMo,$Mo,kMo,Hs,nfe,SMo,RMo,Dj,PMo,BMo,Gj,NMo,IMo,qMo,A_,sfe,jMo,DMo,Oj,GMo,OMo,VMo,L_,lfe,XMo,zMo,Vj,QMo,WMo,HMo,y_,ife,UMo,JMo,Xj,YMo,KMo,ZMo,x_,dfe,e4o,o4o,zj,r4o,t4o,a4o,$_,cfe,n4o,s4o,Qj,l4o,i4o,d4o,k_,ffe,c4o,f4o,Wj,m4o,g4o,h4o,S_,mfe,p4o,_4o,Hj,u4o,b4o,v4o,R_,gfe,F4o,T4o,Uj,M4o,E4o,C4o,P_,hfe,w4o,A4o,Jj,L4o,y4o,x4o,B_,pfe,$4o,k4o,_fe,S4o,R4o,P4o,N_,ufe,B4o,N4o,Yj,I4o,q4o,j4o,I_,bfe,D4o,G4o,Kj,O4o,V4o,X4o,q_,vfe,z4o,Q4o,Zj,W4o,H4o,U4o,j_,Ffe,J4o,Y4o,eD,K4o,Z4o,eEo,D_,Tfe,oEo,rEo,oD,tEo,aEo,nEo,G_,Mfe,sEo,lEo,rD,iEo,dEo,cEo,O_,Efe,fEo,mEo,tD,gEo,hEo,pEo,V_,Cfe,_Eo,uEo,aD,bEo,vEo,FEo,X_,wfe,TEo,MEo,nD,EEo,CEo,wEo,z_,Afe,AEo,LEo,sD,yEo,xEo,$Eo,Q_,Lfe,kEo,SEo,lD,REo,PEo,BEo,W_,yfe,NEo,IEo,iD,qEo,jEo,DEo,H_,xfe,GEo,OEo,dD,VEo,XEo,zEo,U_,$fe,QEo,WEo,cD,HEo,UEo,JEo,J_,kfe,YEo,KEo,fD,ZEo,eCo,oCo,Y_,Sfe,rCo,tCo,mD,aCo,nCo,sCo,K_,Rfe,lCo,iCo,gD,dCo,cCo,fCo,Z_,Pfe,mCo,gCo,hD,hCo,pCo,_Co,eu,Bfe,uCo,bCo,pD,vCo,FCo,TCo,ou,Nfe,MCo,ECo,_D,CCo,wCo,ACo,ru,Ife,LCo,yCo,uD,xCo,$Co,kCo,tu,qfe,SCo,RCo,bD,PCo,BCo,NCo,au,jfe,ICo,qCo,vD,jCo,DCo,GCo,nu,Dfe,OCo,VCo,FD,XCo,zCo,QCo,su,Gfe,WCo,HCo,TD,UCo,JCo,YCo,lu,Ofe,KCo,ZCo,MD,e5o,o5o,r5o,iu,Vfe,t5o,a5o,ED,n5o,s5o,l5o,du,Xfe,i5o,d5o,CD,c5o,f5o,m5o,cu,zfe,g5o,h5o,wD,p5o,_5o,u5o,fu,Qfe,b5o,v5o,AD,F5o,T5o,M5o,mu,Wfe,E5o,C5o,LD,w5o,A5o,L5o,gu,Hfe,y5o,x5o,yD,$5o,k5o,S5o,hu,Ufe,R5o,P5o,xD,B5o,N5o,I5o,pu,Jfe,q5o,j5o,$D,D5o,G5o,O5o,_u,Yfe,V5o,X5o,kD,z5o,Q5o,W5o,uu,Kfe,H5o,U5o,SD,J5o,Y5o,K5o,bu,Zfe,Z5o,e3o,RD,o3o,r3o,t3o,vu,eme,a3o,n3o,PD,s3o,l3o,i3o,Fu,ome,d3o,c3o,BD,f3o,m3o,g3o,Tu,rme,h3o,p3o,ND,_3o,u3o,b3o,Mu,tme,v3o,F3o,ID,T3o,M3o,E3o,Eu,ame,C3o,w3o,qD,A3o,L3o,y3o,Cu,nme,x3o,$3o,jD,k3o,S3o,R3o,wu,sme,P3o,B3o,DD,N3o,I3o,q3o,Au,lme,j3o,D3o,GD,G3o,O3o,V3o,Lu,ime,X3o,z3o,OD,Q3o,W3o,H3o,yu,dme,U3o,J3o,VD,Y3o,K3o,Z3o,xu,cme,e0o,o0o,XD,r0o,t0o,a0o,$u,fme,n0o,s0o,zD,l0o,i0o,d0o,ku,mme,c0o,f0o,QD,m0o,g0o,h0o,Su,gme,p0o,_0o,WD,u0o,b0o,v0o,Ru,hme,F0o,T0o,HD,M0o,E0o,C0o,Pu,pme,w0o,A0o,UD,L0o,y0o,x0o,Bu,_me,$0o,k0o,JD,S0o,R0o,P0o,Nu,ume,B0o,N0o,YD,I0o,q0o,j0o,Iu,bme,D0o,G0o,KD,O0o,V0o,X0o,qu,vme,z0o,Q0o,ZD,W0o,H0o,U0o,ju,Fme,J0o,Y0o,eG,K0o,Z0o,ewo,Du,Tme,owo,rwo,oG,two,awo,nwo,Gu,Mme,swo,lwo,rG,iwo,dwo,cwo,Ou,Eme,fwo,mwo,tG,gwo,hwo,pwo,Vu,Cme,_wo,uwo,aG,bwo,vwo,Fwo,Xu,wme,Two,Mwo,nG,Ewo,Cwo,wwo,zu,Ame,Awo,Lwo,sG,ywo,xwo,$wo,Qu,Lme,kwo,Swo,lG,Rwo,Pwo,Bwo,Wu,yme,Nwo,Iwo,iG,qwo,jwo,Dwo,Hu,xme,Gwo,Owo,dG,Vwo,Xwo,zwo,Uu,$me,Qwo,Wwo,cG,Hwo,Uwo,Jwo,Ju,Ywo,kme,Kwo,Zwo,Sme,eAo,oAo,Yu,IXe,zi,Ku,Rme,GL,rAo,Pme,tAo,qXe,ko,OL,aAo,Qi,nAo,fG,sAo,lAo,mG,iAo,dAo,cAo,VL,fAo,Bme,mAo,gAo,hAo,dt,XL,pAo,Nme,_Ao,uAo,Wi,bAo,Ime,vAo,FAo,gG,TAo,MAo,EAo,Zu,CAo,Ke,zL,wAo,qme,AAo,LAo,Ia,yAo,jme,xAo,$Ao,Dme,kAo,SAo,Gme,RAo,PAo,BAo,G,e2,Ome,NAo,IAo,hG,qAo,jAo,DAo,o2,Vme,GAo,OAo,pG,VAo,XAo,zAo,r2,Xme,QAo,WAo,_G,HAo,UAo,JAo,t2,zme,YAo,KAo,uG,ZAo,eLo,oLo,a2,Qme,rLo,tLo,bG,aLo,nLo,sLo,n2,Wme,lLo,iLo,vG,dLo,cLo,fLo,s2,Hme,mLo,gLo,FG,hLo,pLo,_Lo,l2,Ume,uLo,bLo,TG,vLo,FLo,TLo,i2,Jme,MLo,ELo,MG,CLo,wLo,ALo,d2,Yme,LLo,yLo,EG,xLo,$Lo,kLo,c2,Kme,SLo,RLo,CG,PLo,BLo,NLo,f2,Zme,ILo,qLo,wG,jLo,DLo,GLo,m2,ege,OLo,VLo,AG,XLo,zLo,QLo,g2,oge,WLo,HLo,LG,ULo,JLo,YLo,h2,rge,KLo,ZLo,yG,eyo,oyo,ryo,p2,tge,tyo,ayo,xG,nyo,syo,lyo,_2,age,iyo,dyo,$G,cyo,fyo,myo,u2,nge,gyo,hyo,kG,pyo,_yo,uyo,b2,sge,byo,vyo,SG,Fyo,Tyo,Myo,v2,lge,Eyo,Cyo,RG,wyo,Ayo,Lyo,F2,ige,yyo,xyo,PG,$yo,kyo,Syo,T2,dge,Ryo,Pyo,BG,Byo,Nyo,Iyo,M2,cge,qyo,jyo,NG,Dyo,Gyo,Oyo,E2,fge,Vyo,Xyo,IG,zyo,Qyo,Wyo,C2,mge,Hyo,Uyo,qG,Jyo,Yyo,Kyo,w2,gge,Zyo,e9o,jG,o9o,r9o,t9o,A2,hge,a9o,n9o,DG,s9o,l9o,i9o,L2,pge,d9o,c9o,GG,f9o,m9o,g9o,y2,_ge,h9o,p9o,OG,_9o,u9o,b9o,x2,uge,v9o,F9o,VG,T9o,M9o,E9o,$2,bge,C9o,w9o,XG,A9o,L9o,y9o,k2,vge,x9o,$9o,zG,k9o,S9o,R9o,S2,Fge,P9o,B9o,QG,N9o,I9o,q9o,R2,Tge,j9o,D9o,WG,G9o,O9o,V9o,P2,Mge,X9o,z9o,HG,Q9o,W9o,H9o,B2,Ege,U9o,J9o,UG,Y9o,K9o,Z9o,N2,Cge,exo,oxo,JG,rxo,txo,axo,I2,wge,nxo,sxo,YG,lxo,ixo,dxo,q2,Age,cxo,fxo,KG,mxo,gxo,hxo,j2,Lge,pxo,_xo,ZG,uxo,bxo,vxo,D2,yge,Fxo,Txo,eO,Mxo,Exo,Cxo,G2,xge,wxo,Axo,oO,Lxo,yxo,xxo,O2,$ge,$xo,kxo,rO,Sxo,Rxo,Pxo,V2,kge,Bxo,Nxo,tO,Ixo,qxo,jxo,X2,Sge,Dxo,Gxo,aO,Oxo,Vxo,Xxo,z2,zxo,Rge,Qxo,Wxo,Pge,Hxo,Uxo,Q2,jXe,Hi,W2,Bge,QL,Jxo,Nge,Yxo,DXe,So,WL,Kxo,Ui,Zxo,nO,e$o,o$o,sO,r$o,t$o,a$o,HL,n$o,Ige,s$o,l$o,i$o,ct,UL,d$o,qge,c$o,f$o,Ji,m$o,jge,g$o,h$o,lO,p$o,_$o,u$o,H2,b$o,Ze,JL,v$o,Dge,F$o,T$o,qa,M$o,Gge,E$o,C$o,Oge,w$o,A$o,Vge,L$o,y$o,x$o,z,U2,Xge,$$o,k$o,iO,S$o,R$o,P$o,J2,zge,B$o,N$o,dO,I$o,q$o,j$o,Y2,Qge,D$o,G$o,cO,O$o,V$o,X$o,K2,Wge,z$o,Q$o,fO,W$o,H$o,U$o,Z2,Hge,J$o,Y$o,mO,K$o,Z$o,eko,e1,Uge,oko,rko,gO,tko,ako,nko,o1,Jge,sko,lko,hO,iko,dko,cko,r1,Yge,fko,mko,pO,gko,hko,pko,t1,Kge,_ko,uko,_O,bko,vko,Fko,a1,Zge,Tko,Mko,uO,Eko,Cko,wko,n1,ehe,Ako,Lko,bO,yko,xko,$ko,s1,ohe,kko,Sko,vO,Rko,Pko,Bko,l1,rhe,Nko,Iko,FO,qko,jko,Dko,i1,the,Gko,Oko,TO,Vko,Xko,zko,d1,ahe,Qko,Wko,MO,Hko,Uko,Jko,c1,nhe,Yko,Kko,EO,Zko,eSo,oSo,f1,she,rSo,tSo,CO,aSo,nSo,sSo,m1,lhe,lSo,iSo,wO,dSo,cSo,fSo,g1,ihe,mSo,gSo,AO,hSo,pSo,_So,h1,dhe,uSo,bSo,LO,vSo,FSo,TSo,p1,che,MSo,ESo,yO,CSo,wSo,ASo,_1,fhe,LSo,ySo,xO,xSo,$So,kSo,u1,mhe,SSo,RSo,$O,PSo,BSo,NSo,b1,ghe,ISo,qSo,kO,jSo,DSo,GSo,v1,hhe,OSo,VSo,SO,XSo,zSo,QSo,F1,phe,WSo,HSo,RO,USo,JSo,YSo,T1,_he,KSo,ZSo,PO,eRo,oRo,rRo,M1,uhe,tRo,aRo,BO,nRo,sRo,lRo,E1,bhe,iRo,dRo,NO,cRo,fRo,mRo,C1,vhe,gRo,hRo,IO,pRo,_Ro,uRo,w1,Fhe,bRo,vRo,qO,FRo,TRo,MRo,A1,The,ERo,CRo,jO,wRo,ARo,LRo,L1,Mhe,yRo,xRo,DO,$Ro,kRo,SRo,y1,Ehe,RRo,PRo,GO,BRo,NRo,IRo,x1,Che,qRo,jRo,OO,DRo,GRo,ORo,$1,whe,VRo,XRo,VO,zRo,QRo,WRo,k1,Ahe,HRo,URo,XO,JRo,YRo,KRo,S1,Lhe,ZRo,ePo,zO,oPo,rPo,tPo,R1,yhe,aPo,nPo,QO,sPo,lPo,iPo,P1,xhe,dPo,cPo,WO,fPo,mPo,gPo,B1,hPo,$he,pPo,_Po,khe,uPo,bPo,N1,GXe,Yi,I1,She,YL,vPo,Rhe,FPo,OXe,Ro,KL,TPo,Ki,MPo,HO,EPo,CPo,UO,wPo,APo,LPo,ZL,yPo,Phe,xPo,$Po,kPo,ft,ey,SPo,Bhe,RPo,PPo,Zi,BPo,Nhe,NPo,IPo,JO,qPo,jPo,DPo,q1,GPo,eo,oy,OPo,Ihe,VPo,XPo,ja,zPo,qhe,QPo,WPo,jhe,HPo,UPo,Dhe,JPo,YPo,KPo,W,j1,Ghe,ZPo,eBo,YO,oBo,rBo,tBo,D1,Ohe,aBo,nBo,KO,sBo,lBo,iBo,G1,Vhe,dBo,cBo,ZO,fBo,mBo,gBo,O1,Xhe,hBo,pBo,eV,_Bo,uBo,bBo,V1,zhe,vBo,FBo,oV,TBo,MBo,EBo,X1,Qhe,CBo,wBo,rV,ABo,LBo,yBo,z1,Whe,xBo,$Bo,tV,kBo,SBo,RBo,Q1,Hhe,PBo,BBo,aV,NBo,IBo,qBo,W1,Uhe,jBo,DBo,nV,GBo,OBo,VBo,H1,Jhe,XBo,zBo,sV,QBo,WBo,HBo,U1,Yhe,UBo,JBo,lV,YBo,KBo,ZBo,J1,Khe,eNo,oNo,iV,rNo,tNo,aNo,Y1,Zhe,nNo,sNo,dV,lNo,iNo,dNo,K1,epe,cNo,fNo,cV,mNo,gNo,hNo,Z1,ope,pNo,_No,fV,uNo,bNo,vNo,eb,rpe,FNo,TNo,mV,MNo,ENo,CNo,ob,tpe,wNo,ANo,gV,LNo,yNo,xNo,rb,ape,$No,kNo,hV,SNo,RNo,PNo,tb,npe,BNo,NNo,pV,INo,qNo,jNo,ab,spe,DNo,GNo,_V,ONo,VNo,XNo,nb,lpe,zNo,QNo,uV,WNo,HNo,UNo,sb,ipe,JNo,YNo,bV,KNo,ZNo,eIo,lb,dpe,oIo,rIo,vV,tIo,aIo,nIo,ib,cpe,sIo,lIo,FV,iIo,dIo,cIo,db,fpe,fIo,mIo,TV,gIo,hIo,pIo,cb,mpe,_Io,uIo,MV,bIo,vIo,FIo,fb,gpe,TIo,MIo,EV,EIo,CIo,wIo,mb,hpe,AIo,LIo,CV,yIo,xIo,$Io,gb,ppe,kIo,SIo,wV,RIo,PIo,BIo,hb,_pe,NIo,IIo,AV,qIo,jIo,DIo,pb,upe,GIo,OIo,LV,VIo,XIo,zIo,_b,bpe,QIo,WIo,yV,HIo,UIo,JIo,ub,vpe,YIo,KIo,xV,ZIo,eqo,oqo,bb,Fpe,rqo,tqo,Tpe,aqo,nqo,sqo,vb,Mpe,lqo,iqo,$V,dqo,cqo,fqo,Fb,Epe,mqo,gqo,kV,hqo,pqo,_qo,Tb,Cpe,uqo,bqo,SV,vqo,Fqo,Tqo,Mb,wpe,Mqo,Eqo,RV,Cqo,wqo,Aqo,Eb,Lqo,Ape,yqo,xqo,Lpe,$qo,kqo,Cb,VXe,ed,wb,ype,ry,Sqo,xpe,Rqo,XXe,Po,ty,Pqo,od,Bqo,PV,Nqo,Iqo,BV,qqo,jqo,Dqo,ay,Gqo,$pe,Oqo,Vqo,Xqo,mt,ny,zqo,kpe,Qqo,Wqo,rd,Hqo,Spe,Uqo,Jqo,NV,Yqo,Kqo,Zqo,Ab,ejo,oo,sy,ojo,Rpe,rjo,tjo,Da,ajo,Ppe,njo,sjo,Bpe,ljo,ijo,Npe,djo,cjo,fjo,fe,Lb,Ipe,mjo,gjo,IV,hjo,pjo,_jo,yb,qpe,ujo,bjo,qV,vjo,Fjo,Tjo,xb,jpe,Mjo,Ejo,jV,Cjo,wjo,Ajo,$b,Dpe,Ljo,yjo,DV,xjo,$jo,kjo,kb,Gpe,Sjo,Rjo,GV,Pjo,Bjo,Njo,Sb,Ope,Ijo,qjo,OV,jjo,Djo,Gjo,Rb,Vpe,Ojo,Vjo,VV,Xjo,zjo,Qjo,Pb,Xpe,Wjo,Hjo,XV,Ujo,Jjo,Yjo,Bb,zpe,Kjo,Zjo,zV,eDo,oDo,rDo,Nb,Qpe,tDo,aDo,QV,nDo,sDo,lDo,Ib,Wpe,iDo,dDo,WV,cDo,fDo,mDo,qb,Hpe,gDo,hDo,HV,pDo,_Do,uDo,jb,Upe,bDo,vDo,UV,FDo,TDo,MDo,Db,Jpe,EDo,CDo,JV,wDo,ADo,LDo,Gb,Ype,yDo,xDo,YV,$Do,kDo,SDo,Ob,Kpe,RDo,PDo,KV,BDo,NDo,IDo,Vb,Zpe,qDo,jDo,ZV,DDo,GDo,ODo,Xb,e_e,VDo,XDo,eX,zDo,QDo,WDo,zb,o_e,HDo,UDo,oX,JDo,YDo,KDo,Qb,ZDo,r_e,eGo,oGo,t_e,rGo,tGo,Wb,zXe,td,Hb,a_e,ly,aGo,n_e,nGo,QXe,Bo,iy,sGo,ad,lGo,rX,iGo,dGo,tX,cGo,fGo,mGo,dy,gGo,s_e,hGo,pGo,_Go,gt,cy,uGo,l_e,bGo,vGo,nd,FGo,i_e,TGo,MGo,aX,EGo,CGo,wGo,Ub,AGo,ro,fy,LGo,d_e,yGo,xGo,Ga,$Go,c_e,kGo,SGo,f_e,RGo,PGo,m_e,BGo,NGo,IGo,I,Jb,g_e,qGo,jGo,nX,DGo,GGo,OGo,Yb,h_e,VGo,XGo,sX,zGo,QGo,WGo,Kb,p_e,HGo,UGo,lX,JGo,YGo,KGo,Zb,__e,ZGo,eOo,iX,oOo,rOo,tOo,ev,u_e,aOo,nOo,dX,sOo,lOo,iOo,ov,b_e,dOo,cOo,cX,fOo,mOo,gOo,rv,v_e,hOo,pOo,fX,_Oo,uOo,bOo,tv,F_e,vOo,FOo,mX,TOo,MOo,EOo,av,T_e,COo,wOo,gX,AOo,LOo,yOo,nv,M_e,xOo,$Oo,hX,kOo,SOo,ROo,sv,E_e,POo,BOo,pX,NOo,IOo,qOo,lv,C_e,jOo,DOo,_X,GOo,OOo,VOo,iv,w_e,XOo,zOo,uX,QOo,WOo,HOo,dv,A_e,UOo,JOo,bX,YOo,KOo,ZOo,cv,L_e,eVo,oVo,vX,rVo,tVo,aVo,fv,y_e,nVo,sVo,FX,lVo,iVo,dVo,mv,x_e,cVo,fVo,TX,mVo,gVo,hVo,gv,$_e,pVo,_Vo,MX,uVo,bVo,vVo,hv,k_e,FVo,TVo,EX,MVo,EVo,CVo,pv,S_e,wVo,AVo,CX,LVo,yVo,xVo,_v,R_e,$Vo,kVo,wX,SVo,RVo,PVo,uv,P_e,BVo,NVo,AX,IVo,qVo,jVo,bv,B_e,DVo,GVo,LX,OVo,VVo,XVo,vv,N_e,zVo,QVo,yX,WVo,HVo,UVo,Fv,I_e,JVo,YVo,xX,KVo,ZVo,eXo,Tv,q_e,oXo,rXo,$X,tXo,aXo,nXo,Mv,j_e,sXo,lXo,kX,iXo,dXo,cXo,Ev,D_e,fXo,mXo,SX,gXo,hXo,pXo,Cv,G_e,_Xo,uXo,RX,bXo,vXo,FXo,wv,O_e,TXo,MXo,PX,EXo,CXo,wXo,Av,V_e,AXo,LXo,BX,yXo,xXo,$Xo,Lv,X_e,kXo,SXo,NX,RXo,PXo,BXo,yv,z_e,NXo,IXo,IX,qXo,jXo,DXo,xv,Q_e,GXo,OXo,qX,VXo,XXo,zXo,$v,W_e,QXo,WXo,jX,HXo,UXo,JXo,kv,H_e,YXo,KXo,DX,ZXo,ezo,ozo,Sv,U_e,rzo,tzo,GX,azo,nzo,szo,Rv,J_e,lzo,izo,OX,dzo,czo,fzo,Pv,Y_e,mzo,gzo,VX,hzo,pzo,_zo,Bv,K_e,uzo,bzo,XX,vzo,Fzo,Tzo,Nv,Z_e,Mzo,Ezo,zX,Czo,wzo,Azo,Iv,eue,Lzo,yzo,QX,xzo,$zo,kzo,qv,oue,Szo,Rzo,WX,Pzo,Bzo,Nzo,jv,rue,Izo,qzo,HX,jzo,Dzo,Gzo,Dv,tue,Ozo,Vzo,UX,Xzo,zzo,Qzo,Gv,aue,Wzo,Hzo,JX,Uzo,Jzo,Yzo,Ov,nue,Kzo,Zzo,YX,eQo,oQo,rQo,Vv,sue,tQo,aQo,KX,nQo,sQo,lQo,Xv,lue,iQo,dQo,ZX,cQo,fQo,mQo,zv,iue,gQo,hQo,ez,pQo,_Qo,uQo,Qv,bQo,due,vQo,FQo,cue,TQo,MQo,Wv,WXe,sd,Hv,fue,my,EQo,mue,CQo,HXe,No,gy,wQo,ld,AQo,oz,LQo,yQo,rz,xQo,$Qo,kQo,hy,SQo,gue,RQo,PQo,BQo,ht,py,NQo,hue,IQo,qQo,id,jQo,pue,DQo,GQo,tz,OQo,VQo,XQo,Uv,zQo,to,_y,QQo,_ue,WQo,HQo,Oa,UQo,uue,JQo,YQo,bue,KQo,ZQo,vue,eWo,oWo,rWo,Z,Jv,Fue,tWo,aWo,az,nWo,sWo,lWo,Yv,Tue,iWo,dWo,nz,cWo,fWo,mWo,Kv,Mue,gWo,hWo,sz,pWo,_Wo,uWo,Zv,Eue,bWo,vWo,lz,FWo,TWo,MWo,eF,Cue,EWo,CWo,iz,wWo,AWo,LWo,oF,wue,yWo,xWo,dz,$Wo,kWo,SWo,rF,Aue,RWo,PWo,cz,BWo,NWo,IWo,tF,Lue,qWo,jWo,fz,DWo,GWo,OWo,aF,yue,VWo,XWo,mz,zWo,QWo,WWo,nF,xue,HWo,UWo,gz,JWo,YWo,KWo,sF,$ue,ZWo,eHo,hz,oHo,rHo,tHo,lF,kue,aHo,nHo,pz,sHo,lHo,iHo,iF,Sue,dHo,cHo,_z,fHo,mHo,gHo,dF,Rue,hHo,pHo,uz,_Ho,uHo,bHo,cF,Pue,vHo,FHo,bz,THo,MHo,EHo,fF,Bue,CHo,wHo,vz,AHo,LHo,yHo,mF,Nue,xHo,$Ho,Fz,kHo,SHo,RHo,gF,Iue,PHo,BHo,Tz,NHo,IHo,qHo,hF,que,jHo,DHo,Mz,GHo,OHo,VHo,pF,jue,XHo,zHo,Ez,QHo,WHo,HHo,_F,Due,UHo,JHo,Cz,YHo,KHo,ZHo,uF,Gue,eUo,oUo,wz,rUo,tUo,aUo,bF,Oue,nUo,sUo,Az,lUo,iUo,dUo,vF,Vue,cUo,fUo,Lz,mUo,gUo,hUo,FF,Xue,pUo,_Uo,yz,uUo,bUo,vUo,TF,zue,FUo,TUo,xz,MUo,EUo,CUo,MF,Que,wUo,AUo,$z,LUo,yUo,xUo,EF,Wue,$Uo,kUo,kz,SUo,RUo,PUo,CF,Hue,BUo,NUo,Sz,IUo,qUo,jUo,wF,Uue,DUo,GUo,Rz,OUo,VUo,XUo,AF,zUo,Jue,QUo,WUo,Yue,HUo,UUo,LF,UXe,dd,yF,Kue,uy,JUo,Zue,YUo,JXe,Io,by,KUo,cd,ZUo,Pz,eJo,oJo,Bz,rJo,tJo,aJo,vy,nJo,e2e,sJo,lJo,iJo,pt,Fy,dJo,o2e,cJo,fJo,fd,mJo,r2e,gJo,hJo,Nz,pJo,_Jo,uJo,xF,bJo,ao,Ty,vJo,t2e,FJo,TJo,Va,MJo,a2e,EJo,CJo,n2e,wJo,AJo,s2e,LJo,yJo,xJo,qo,$F,l2e,$Jo,kJo,Iz,SJo,RJo,PJo,kF,i2e,BJo,NJo,qz,IJo,qJo,jJo,SF,d2e,DJo,GJo,jz,OJo,VJo,XJo,RF,c2e,zJo,QJo,Dz,WJo,HJo,UJo,PF,f2e,JJo,YJo,Gz,KJo,ZJo,eYo,BF,m2e,oYo,rYo,Oz,tYo,aYo,nYo,NF,sYo,g2e,lYo,iYo,h2e,dYo,cYo,IF,YXe,md,qF,p2e,My,fYo,_2e,mYo,KXe,jo,Ey,gYo,gd,hYo,Vz,pYo,_Yo,Xz,uYo,bYo,vYo,Cy,FYo,u2e,TYo,MYo,EYo,_t,wy,CYo,b2e,wYo,AYo,hd,LYo,v2e,yYo,xYo,zz,$Yo,kYo,SYo,jF,RYo,no,Ay,PYo,F2e,BYo,NYo,Xa,IYo,T2e,qYo,jYo,M2e,DYo,GYo,E2e,OYo,VYo,XYo,U,DF,C2e,zYo,QYo,Qz,WYo,HYo,UYo,GF,w2e,JYo,YYo,Wz,KYo,ZYo,eKo,OF,A2e,oKo,rKo,Hz,tKo,aKo,nKo,VF,L2e,sKo,lKo,Uz,iKo,dKo,cKo,XF,y2e,fKo,mKo,Jz,gKo,hKo,pKo,zF,x2e,_Ko,uKo,Yz,bKo,vKo,FKo,QF,$2e,TKo,MKo,Kz,EKo,CKo,wKo,WF,k2e,AKo,LKo,Zz,yKo,xKo,$Ko,HF,S2e,kKo,SKo,eQ,RKo,PKo,BKo,UF,R2e,NKo,IKo,oQ,qKo,jKo,DKo,JF,P2e,GKo,OKo,rQ,VKo,XKo,zKo,YF,B2e,QKo,WKo,tQ,HKo,UKo,JKo,KF,N2e,YKo,KKo,aQ,ZKo,eZo,oZo,ZF,I2e,rZo,tZo,nQ,aZo,nZo,sZo,e6,q2e,lZo,iZo,sQ,dZo,cZo,fZo,o6,j2e,mZo,gZo,lQ,hZo,pZo,_Zo,r6,D2e,uZo,bZo,iQ,vZo,FZo,TZo,t6,G2e,MZo,EZo,dQ,CZo,wZo,AZo,a6,O2e,LZo,yZo,cQ,xZo,$Zo,kZo,n6,V2e,SZo,RZo,fQ,PZo,BZo,NZo,s6,X2e,IZo,qZo,mQ,jZo,DZo,GZo,l6,z2e,OZo,VZo,gQ,XZo,zZo,QZo,i6,Q2e,WZo,HZo,hQ,UZo,JZo,YZo,d6,W2e,KZo,ZZo,pQ,eer,oer,rer,c6,H2e,ter,aer,_Q,ner,ser,ler,f6,U2e,ier,der,uQ,cer,fer,mer,m6,J2e,ger,her,bQ,per,_er,uer,g6,Y2e,ber,ver,vQ,Fer,Ter,Mer,h6,K2e,Eer,Cer,FQ,wer,Aer,Ler,p6,Z2e,yer,xer,TQ,$er,ker,Ser,_6,e1e,Rer,Per,MQ,Ber,Ner,Ier,u6,o1e,qer,jer,EQ,Der,Ger,Oer,b6,r1e,Ver,Xer,CQ,zer,Qer,Wer,v6,t1e,Her,Uer,wQ,Jer,Yer,Ker,F6,a1e,Zer,eor,AQ,oor,ror,tor,T6,n1e,aor,nor,LQ,sor,lor,ior,M6,dor,s1e,cor,mor,l1e,gor,hor,E6,ZXe,pd,C6,i1e,Ly,por,d1e,_or,eze,Do,yy,uor,_d,bor,yQ,vor,For,xQ,Tor,Mor,Eor,xy,Cor,c1e,wor,Aor,Lor,ut,$y,yor,f1e,xor,$or,ud,kor,m1e,Sor,Ror,$Q,Por,Bor,Nor,w6,Ior,so,ky,qor,g1e,jor,Dor,za,Gor,h1e,Oor,Vor,p1e,Xor,zor,_1e,Qor,Wor,Hor,V,A6,u1e,Uor,Jor,kQ,Yor,Kor,Zor,L6,b1e,err,orr,SQ,rrr,trr,arr,y6,v1e,nrr,srr,RQ,lrr,irr,drr,x6,F1e,crr,frr,PQ,mrr,grr,hrr,$6,T1e,prr,_rr,BQ,urr,brr,vrr,k6,M1e,Frr,Trr,NQ,Mrr,Err,Crr,S6,E1e,wrr,Arr,IQ,Lrr,yrr,xrr,R6,C1e,$rr,krr,qQ,Srr,Rrr,Prr,P6,w1e,Brr,Nrr,jQ,Irr,qrr,jrr,B6,A1e,Drr,Grr,DQ,Orr,Vrr,Xrr,N6,L1e,zrr,Qrr,GQ,Wrr,Hrr,Urr,I6,y1e,Jrr,Yrr,OQ,Krr,Zrr,etr,q6,x1e,otr,rtr,VQ,ttr,atr,ntr,j6,$1e,str,ltr,XQ,itr,dtr,ctr,D6,k1e,ftr,mtr,zQ,gtr,htr,ptr,G6,S1e,_tr,utr,QQ,btr,vtr,Ftr,O6,R1e,Ttr,Mtr,WQ,Etr,Ctr,wtr,V6,P1e,Atr,Ltr,HQ,ytr,xtr,$tr,X6,B1e,ktr,Str,UQ,Rtr,Ptr,Btr,z6,N1e,Ntr,Itr,JQ,qtr,jtr,Dtr,Q6,I1e,Gtr,Otr,YQ,Vtr,Xtr,ztr,W6,q1e,Qtr,Wtr,KQ,Htr,Utr,Jtr,H6,j1e,Ytr,Ktr,ZQ,Ztr,ear,oar,U6,D1e,rar,tar,eW,aar,nar,sar,J6,G1e,lar,iar,oW,dar,car,far,Y6,O1e,mar,gar,rW,har,par,_ar,K6,V1e,uar,bar,tW,Far,Tar,Mar,Z6,X1e,Ear,Car,aW,war,Aar,Lar,eT,z1e,yar,xar,nW,$ar,kar,Sar,oT,Q1e,Rar,Par,sW,Bar,Nar,Iar,rT,W1e,qar,jar,lW,Dar,Gar,Oar,tT,H1e,Var,Xar,iW,zar,Qar,War,aT,U1e,Har,Uar,dW,Jar,Yar,Kar,nT,J1e,Zar,enr,cW,onr,rnr,tnr,sT,Y1e,anr,nnr,fW,snr,lnr,inr,lT,K1e,dnr,cnr,mW,fnr,mnr,gnr,iT,Z1e,hnr,pnr,gW,_nr,unr,bnr,dT,ebe,vnr,Fnr,hW,Tnr,Mnr,Enr,cT,obe,Cnr,wnr,pW,Anr,Lnr,ynr,fT,rbe,xnr,$nr,_W,knr,Snr,Rnr,mT,tbe,Pnr,Bnr,uW,Nnr,Inr,qnr,gT,abe,jnr,Dnr,bW,Gnr,Onr,Vnr,hT,Xnr,nbe,znr,Qnr,sbe,Wnr,Hnr,pT,oze,bd,_T,lbe,Sy,Unr,ibe,Jnr,rze,Go,Ry,Ynr,vd,Knr,vW,Znr,esr,FW,osr,rsr,tsr,Py,asr,dbe,nsr,ssr,lsr,bt,By,isr,cbe,dsr,csr,Fd,fsr,fbe,msr,gsr,TW,hsr,psr,_sr,uT,usr,lo,Ny,bsr,mbe,vsr,Fsr,Qa,Tsr,gbe,Msr,Esr,hbe,Csr,wsr,pbe,Asr,Lsr,ysr,_be,bT,ube,xsr,$sr,MW,ksr,Ssr,Rsr,vT,Psr,bbe,Bsr,Nsr,vbe,Isr,qsr,FT,tze,Td,TT,Fbe,Iy,jsr,Tbe,Dsr,aze,Oo,qy,Gsr,Md,Osr,EW,Vsr,Xsr,CW,zsr,Qsr,Wsr,jy,Hsr,Mbe,Usr,Jsr,Ysr,vt,Dy,Ksr,Ebe,Zsr,elr,Ed,olr,Cbe,rlr,tlr,wW,alr,nlr,slr,MT,llr,io,Gy,ilr,wbe,dlr,clr,Wa,flr,Abe,mlr,glr,Lbe,hlr,plr,ybe,_lr,ulr,blr,ve,ET,xbe,vlr,Flr,AW,Tlr,Mlr,Elr,CT,$be,Clr,wlr,LW,Alr,Llr,ylr,wT,kbe,xlr,$lr,yW,klr,Slr,Rlr,AT,Sbe,Plr,Blr,xW,Nlr,Ilr,qlr,Us,Rbe,jlr,Dlr,$W,Glr,Olr,kW,Vlr,Xlr,zlr,LT,Pbe,Qlr,Wlr,SW,Hlr,Ulr,Jlr,Js,Bbe,Ylr,Klr,RW,Zlr,eir,PW,oir,rir,tir,yT,Nbe,air,nir,BW,sir,lir,iir,Ft,Ibe,dir,cir,NW,fir,mir,IW,gir,hir,qW,pir,_ir,uir,xT,qbe,bir,vir,jW,Fir,Tir,Mir,$T,jbe,Eir,Cir,DW,wir,Air,Lir,kT,Dbe,yir,xir,GW,$ir,kir,Sir,ST,Gbe,Rir,Pir,OW,Bir,Nir,Iir,RT,Obe,qir,jir,VW,Dir,Gir,Oir,PT,Vbe,Vir,Xir,XW,zir,Qir,Wir,BT,Xbe,Hir,Uir,zW,Jir,Yir,Kir,NT,Zir,zbe,edr,odr,Qbe,rdr,tdr,IT,nze,Cd,qT,Wbe,Oy,adr,Hbe,ndr,sze,Vo,Vy,sdr,wd,ldr,QW,idr,ddr,WW,cdr,fdr,mdr,Xy,gdr,Ube,hdr,pdr,_dr,Tt,zy,udr,Jbe,bdr,vdr,Ad,Fdr,Ybe,Tdr,Mdr,HW,Edr,Cdr,wdr,jT,Adr,co,Qy,Ldr,Kbe,ydr,xdr,Ha,$dr,Zbe,kdr,Sdr,eve,Rdr,Pdr,ove,Bdr,Ndr,Idr,rve,DT,tve,qdr,jdr,UW,Ddr,Gdr,Odr,GT,Vdr,ave,Xdr,zdr,nve,Qdr,Wdr,OT,lze,Ld,VT,sve,Wy,Hdr,lve,Udr,ize,Xo,Hy,Jdr,yd,Ydr,JW,Kdr,Zdr,YW,ecr,ocr,rcr,Uy,tcr,ive,acr,ncr,scr,Mt,Jy,lcr,dve,icr,dcr,xd,ccr,cve,fcr,mcr,KW,gcr,hcr,pcr,XT,_cr,fo,Yy,ucr,fve,bcr,vcr,Ua,Fcr,mve,Tcr,Mcr,gve,Ecr,Ccr,hve,wcr,Acr,Lcr,pve,zT,_ve,ycr,xcr,ZW,$cr,kcr,Scr,QT,Rcr,uve,Pcr,Bcr,bve,Ncr,Icr,WT,dze,$d,HT,vve,Ky,qcr,Fve,jcr,cze,zo,Zy,Dcr,kd,Gcr,eH,Ocr,Vcr,oH,Xcr,zcr,Qcr,e9,Wcr,Tve,Hcr,Ucr,Jcr,Et,o9,Ycr,Mve,Kcr,Zcr,Sd,efr,Eve,ofr,rfr,rH,tfr,afr,nfr,UT,sfr,mo,r9,lfr,Cve,ifr,dfr,Ja,cfr,wve,ffr,mfr,Ave,gfr,hfr,Lve,pfr,_fr,ufr,Pe,JT,yve,bfr,vfr,tH,Ffr,Tfr,Mfr,YT,xve,Efr,Cfr,aH,wfr,Afr,Lfr,KT,$ve,yfr,xfr,nH,$fr,kfr,Sfr,ZT,kve,Rfr,Pfr,sH,Bfr,Nfr,Ifr,e7,Sve,qfr,jfr,lH,Dfr,Gfr,Ofr,o7,Rve,Vfr,Xfr,iH,zfr,Qfr,Wfr,r7,Pve,Hfr,Ufr,dH,Jfr,Yfr,Kfr,t7,Bve,Zfr,emr,cH,omr,rmr,tmr,a7,Nve,amr,nmr,fH,smr,lmr,imr,n7,dmr,Ive,cmr,fmr,qve,mmr,gmr,s7,fze,Rd,l7,jve,t9,hmr,Dve,pmr,mze,Qo,a9,_mr,Pd,umr,mH,bmr,vmr,gH,Fmr,Tmr,Mmr,n9,Emr,Gve,Cmr,wmr,Amr,Ct,s9,Lmr,Ove,ymr,xmr,Bd,$mr,Vve,kmr,Smr,hH,Rmr,Pmr,Bmr,i7,Nmr,go,l9,Imr,Xve,qmr,jmr,Ya,Dmr,zve,Gmr,Omr,Qve,Vmr,Xmr,Wve,zmr,Qmr,Wmr,rt,d7,Hve,Hmr,Umr,pH,Jmr,Ymr,Kmr,c7,Uve,Zmr,egr,_H,ogr,rgr,tgr,f7,Jve,agr,ngr,uH,sgr,lgr,igr,m7,Yve,dgr,cgr,bH,fgr,mgr,ggr,g7,Kve,hgr,pgr,vH,_gr,ugr,bgr,h7,vgr,Zve,Fgr,Tgr,eFe,Mgr,Egr,p7,gze,Nd,_7,oFe,i9,Cgr,rFe,wgr,hze,Wo,d9,Agr,Id,Lgr,FH,ygr,xgr,TH,$gr,kgr,Sgr,c9,Rgr,tFe,Pgr,Bgr,Ngr,wt,f9,Igr,aFe,qgr,jgr,qd,Dgr,nFe,Ggr,Ogr,MH,Vgr,Xgr,zgr,u7,Qgr,ho,m9,Wgr,sFe,Hgr,Ugr,Ka,Jgr,lFe,Ygr,Kgr,iFe,Zgr,ehr,dFe,ohr,rhr,thr,Le,b7,cFe,ahr,nhr,EH,shr,lhr,ihr,v7,fFe,dhr,chr,CH,fhr,mhr,ghr,F7,mFe,hhr,phr,wH,_hr,uhr,bhr,T7,gFe,vhr,Fhr,AH,Thr,Mhr,Ehr,M7,hFe,Chr,whr,LH,Ahr,Lhr,yhr,E7,pFe,xhr,$hr,yH,khr,Shr,Rhr,C7,_Fe,Phr,Bhr,xH,Nhr,Ihr,qhr,w7,uFe,jhr,Dhr,$H,Ghr,Ohr,Vhr,A7,bFe,Xhr,zhr,kH,Qhr,Whr,Hhr,L7,vFe,Uhr,Jhr,SH,Yhr,Khr,Zhr,y7,epr,FFe,opr,rpr,TFe,tpr,apr,x7,pze,jd,$7,MFe,g9,npr,EFe,spr,_ze,Ho,h9,lpr,Dd,ipr,RH,dpr,cpr,PH,fpr,mpr,gpr,p9,hpr,CFe,ppr,_pr,upr,At,_9,bpr,wFe,vpr,Fpr,Gd,Tpr,AFe,Mpr,Epr,BH,Cpr,wpr,Apr,k7,Lpr,po,u9,ypr,LFe,xpr,$pr,Za,kpr,yFe,Spr,Rpr,xFe,Ppr,Bpr,$Fe,Npr,Ipr,qpr,b9,S7,kFe,jpr,Dpr,NH,Gpr,Opr,Vpr,R7,SFe,Xpr,zpr,IH,Qpr,Wpr,Hpr,P7,Upr,RFe,Jpr,Ypr,PFe,Kpr,Zpr,B7,uze,Od,N7,BFe,v9,e_r,NFe,o_r,bze,Uo,F9,r_r,Vd,t_r,qH,a_r,n_r,jH,s_r,l_r,i_r,T9,d_r,IFe,c_r,f_r,m_r,Lt,M9,g_r,qFe,h_r,p_r,Xd,__r,jFe,u_r,b_r,DH,v_r,F_r,T_r,I7,M_r,_o,E9,E_r,DFe,C_r,w_r,en,A_r,GFe,L_r,y_r,OFe,x_r,$_r,VFe,k_r,S_r,R_r,tt,q7,XFe,P_r,B_r,GH,N_r,I_r,q_r,j7,zFe,j_r,D_r,OH,G_r,O_r,V_r,D7,QFe,X_r,z_r,VH,Q_r,W_r,H_r,G7,WFe,U_r,J_r,XH,Y_r,K_r,Z_r,O7,HFe,eur,our,zH,rur,tur,aur,V7,nur,UFe,sur,lur,JFe,iur,dur,X7,vze,zd,z7,YFe,C9,cur,KFe,fur,Fze,Jo,w9,mur,Qd,gur,QH,hur,pur,WH,_ur,uur,bur,A9,vur,ZFe,Fur,Tur,Mur,yt,L9,Eur,e6e,Cur,wur,Wd,Aur,o6e,Lur,yur,HH,xur,$ur,kur,Q7,Sur,uo,y9,Rur,r6e,Pur,Bur,on,Nur,t6e,Iur,qur,a6e,jur,Dur,n6e,Gur,Our,Vur,Hd,W7,s6e,Xur,zur,UH,Qur,Wur,Hur,H7,l6e,Uur,Jur,JH,Yur,Kur,Zur,U7,i6e,e2r,o2r,YH,r2r,t2r,a2r,J7,n2r,d6e,s2r,l2r,c6e,i2r,d2r,Y7,Tze,Ud,K7,f6e,x9,c2r,m6e,f2r,Mze,Yo,$9,m2r,Jd,g2r,KH,h2r,p2r,ZH,_2r,u2r,b2r,k9,v2r,g6e,F2r,T2r,M2r,xt,S9,E2r,h6e,C2r,w2r,Yd,A2r,p6e,L2r,y2r,eU,x2r,$2r,k2r,Z7,S2r,bo,R9,R2r,_6e,P2r,B2r,rn,N2r,u6e,I2r,q2r,b6e,j2r,D2r,v6e,G2r,O2r,V2r,P9,e8,F6e,X2r,z2r,oU,Q2r,W2r,H2r,o8,T6e,U2r,J2r,rU,Y2r,K2r,Z2r,r8,e1r,M6e,o1r,r1r,E6e,t1r,a1r,t8,Eze,Kd,a8,C6e,B9,n1r,w6e,s1r,Cze,Ko,N9,l1r,Zd,i1r,tU,d1r,c1r,aU,f1r,m1r,g1r,I9,h1r,A6e,p1r,_1r,u1r,$t,q9,b1r,L6e,v1r,F1r,ec,T1r,y6e,M1r,E1r,nU,C1r,w1r,A1r,n8,L1r,vo,j9,y1r,x6e,x1r,$1r,tn,k1r,$6e,S1r,R1r,k6e,P1r,B1r,S6e,N1r,I1r,q1r,R6e,s8,P6e,j1r,D1r,sU,G1r,O1r,V1r,l8,X1r,B6e,z1r,Q1r,N6e,W1r,H1r,i8,wze,oc,d8,I6e,D9,U1r,q6e,J1r,Aze,Zo,G9,Y1r,rc,K1r,lU,Z1r,ebr,iU,obr,rbr,tbr,O9,abr,j6e,nbr,sbr,lbr,kt,V9,ibr,D6e,dbr,cbr,tc,fbr,G6e,mbr,gbr,dU,hbr,pbr,_br,c8,ubr,Fo,X9,bbr,O6e,vbr,Fbr,an,Tbr,V6e,Mbr,Ebr,X6e,Cbr,wbr,z6e,Abr,Lbr,ybr,at,f8,Q6e,xbr,$br,cU,kbr,Sbr,Rbr,m8,W6e,Pbr,Bbr,fU,Nbr,Ibr,qbr,g8,H6e,jbr,Dbr,mU,Gbr,Obr,Vbr,h8,U6e,Xbr,zbr,gU,Qbr,Wbr,Hbr,p8,J6e,Ubr,Jbr,hU,Ybr,Kbr,Zbr,_8,evr,Y6e,ovr,rvr,K6e,tvr,avr,u8,Lze,ac,b8,Z6e,z9,nvr,eTe,svr,yze,er,Q9,lvr,nc,ivr,pU,dvr,cvr,_U,fvr,mvr,gvr,W9,hvr,oTe,pvr,_vr,uvr,St,H9,bvr,rTe,vvr,Fvr,sc,Tvr,tTe,Mvr,Evr,uU,Cvr,wvr,Avr,v8,Lvr,To,U9,yvr,aTe,xvr,$vr,nn,kvr,nTe,Svr,Rvr,sTe,Pvr,Bvr,lTe,Nvr,Ivr,qvr,iTe,F8,dTe,jvr,Dvr,bU,Gvr,Ovr,Vvr,T8,Xvr,cTe,zvr,Qvr,fTe,Wvr,Hvr,M8,xze,lc,E8,mTe,J9,Uvr,gTe,Jvr,$ze,or,Y9,Yvr,ic,Kvr,vU,Zvr,eFr,FU,oFr,rFr,tFr,K9,aFr,hTe,nFr,sFr,lFr,Rt,Z9,iFr,pTe,dFr,cFr,dc,fFr,_Te,mFr,gFr,TU,hFr,pFr,_Fr,C8,uFr,xr,ex,bFr,uTe,vFr,FFr,sn,TFr,bTe,MFr,EFr,vTe,CFr,wFr,FTe,AFr,LFr,yFr,q,w8,TTe,xFr,$Fr,MU,kFr,SFr,RFr,A8,MTe,PFr,BFr,EU,NFr,IFr,qFr,L8,ETe,jFr,DFr,CU,GFr,OFr,VFr,y8,CTe,XFr,zFr,wU,QFr,WFr,HFr,x8,wTe,UFr,JFr,AU,YFr,KFr,ZFr,$8,ATe,e6r,o6r,LU,r6r,t6r,a6r,k8,LTe,n6r,s6r,yU,l6r,i6r,d6r,S8,yTe,c6r,f6r,xU,m6r,g6r,h6r,R8,xTe,p6r,_6r,$U,u6r,b6r,v6r,P8,$Te,F6r,T6r,kU,M6r,E6r,C6r,B8,kTe,w6r,A6r,SU,L6r,y6r,x6r,N8,STe,$6r,k6r,RU,S6r,R6r,P6r,I8,RTe,B6r,N6r,PU,I6r,q6r,j6r,q8,PTe,D6r,G6r,BU,O6r,V6r,X6r,j8,BTe,z6r,Q6r,NU,W6r,H6r,U6r,D8,NTe,J6r,Y6r,IU,K6r,Z6r,eTr,G8,ITe,oTr,rTr,qU,tTr,aTr,nTr,O8,qTe,sTr,lTr,jU,iTr,dTr,cTr,Ys,jTe,fTr,mTr,DU,gTr,hTr,GU,pTr,_Tr,uTr,V8,DTe,bTr,vTr,OU,FTr,TTr,MTr,X8,GTe,ETr,CTr,VU,wTr,ATr,LTr,z8,OTe,yTr,xTr,XU,$Tr,kTr,STr,Q8,VTe,RTr,PTr,zU,BTr,NTr,ITr,W8,XTe,qTr,jTr,QU,DTr,GTr,OTr,H8,zTe,VTr,XTr,WU,zTr,QTr,WTr,U8,QTe,HTr,UTr,HU,JTr,YTr,KTr,J8,WTe,ZTr,e7r,UU,o7r,r7r,t7r,Y8,HTe,a7r,n7r,JU,s7r,l7r,i7r,K8,UTe,d7r,c7r,YU,f7r,m7r,g7r,Z8,JTe,h7r,p7r,KU,_7r,u7r,b7r,eM,YTe,v7r,F7r,ZU,T7r,M7r,E7r,oM,KTe,C7r,w7r,eJ,A7r,L7r,y7r,rM,ZTe,x7r,$7r,oJ,k7r,S7r,R7r,tM,e7e,P7r,B7r,rJ,N7r,I7r,q7r,aM,o7e,j7r,D7r,tJ,G7r,O7r,V7r,nM,r7e,X7r,z7r,aJ,Q7r,W7r,H7r,sM,t7e,U7r,J7r,nJ,Y7r,K7r,Z7r,lM,a7e,e8r,o8r,sJ,r8r,t8r,a8r,iM,n7e,n8r,s8r,lJ,l8r,i8r,d8r,dM,s7e,c8r,f8r,iJ,m8r,g8r,h8r,cM,l7e,p8r,_8r,dJ,u8r,b8r,v8r,fM,i7e,F8r,T8r,cJ,M8r,E8r,C8r,mM,d7e,w8r,A8r,fJ,L8r,y8r,x8r,gM,c7e,$8r,k8r,mJ,S8r,R8r,P8r,hM,f7e,B8r,N8r,gJ,I8r,q8r,j8r,pM,m7e,D8r,G8r,hJ,O8r,V8r,X8r,_M,g7e,z8r,Q8r,pJ,W8r,H8r,U8r,uM,h7e,J8r,Y8r,_J,K8r,Z8r,eMr,bM,p7e,oMr,rMr,uJ,tMr,aMr,nMr,vM,_7e,sMr,lMr,bJ,iMr,dMr,cMr,FM,kze,cc,TM,u7e,ox,fMr,b7e,mMr,Sze,rr,rx,gMr,fc,hMr,vJ,pMr,_Mr,FJ,uMr,bMr,vMr,tx,FMr,v7e,TMr,MMr,EMr,Pt,ax,CMr,F7e,wMr,AMr,mc,LMr,T7e,yMr,xMr,TJ,$Mr,kMr,SMr,MM,RMr,$r,nx,PMr,M7e,BMr,NMr,ln,IMr,E7e,qMr,jMr,C7e,DMr,GMr,w7e,OMr,VMr,XMr,se,EM,A7e,zMr,QMr,MJ,WMr,HMr,UMr,CM,L7e,JMr,YMr,EJ,KMr,ZMr,e4r,wM,y7e,o4r,r4r,CJ,t4r,a4r,n4r,AM,x7e,s4r,l4r,wJ,i4r,d4r,c4r,LM,$7e,f4r,m4r,AJ,g4r,h4r,p4r,yM,k7e,_4r,u4r,LJ,b4r,v4r,F4r,xM,S7e,T4r,M4r,yJ,E4r,C4r,w4r,$M,R7e,A4r,L4r,xJ,y4r,x4r,$4r,kM,P7e,k4r,S4r,$J,R4r,P4r,B4r,SM,B7e,N4r,I4r,kJ,q4r,j4r,D4r,RM,N7e,G4r,O4r,SJ,V4r,X4r,z4r,PM,I7e,Q4r,W4r,RJ,H4r,U4r,J4r,BM,q7e,Y4r,K4r,PJ,Z4r,eEr,oEr,NM,j7e,rEr,tEr,BJ,aEr,nEr,sEr,IM,D7e,lEr,iEr,NJ,dEr,cEr,fEr,qM,G7e,mEr,gEr,IJ,hEr,pEr,_Er,jM,O7e,uEr,bEr,qJ,vEr,FEr,TEr,DM,V7e,MEr,EEr,jJ,CEr,wEr,AEr,GM,X7e,LEr,yEr,DJ,xEr,$Er,kEr,OM,z7e,SEr,REr,GJ,PEr,BEr,NEr,VM,Q7e,IEr,qEr,OJ,jEr,DEr,GEr,XM,W7e,OEr,VEr,VJ,XEr,zEr,QEr,zM,H7e,WEr,HEr,XJ,UEr,JEr,YEr,QM,Rze,gc,WM,U7e,sx,KEr,J7e,ZEr,Pze,tr,lx,eCr,hc,oCr,zJ,rCr,tCr,QJ,aCr,nCr,sCr,ix,lCr,Y7e,iCr,dCr,cCr,Bt,dx,fCr,K7e,mCr,gCr,pc,hCr,Z7e,pCr,_Cr,WJ,uCr,bCr,vCr,HM,FCr,kr,cx,TCr,e8e,MCr,ECr,dn,CCr,o8e,wCr,ACr,r8e,LCr,yCr,t8e,xCr,$Cr,kCr,Me,UM,a8e,SCr,RCr,HJ,PCr,BCr,NCr,JM,n8e,ICr,qCr,UJ,jCr,DCr,GCr,YM,s8e,OCr,VCr,JJ,XCr,zCr,QCr,KM,l8e,WCr,HCr,YJ,UCr,JCr,YCr,ZM,i8e,KCr,ZCr,KJ,e5r,o5r,r5r,e4,d8e,t5r,a5r,ZJ,n5r,s5r,l5r,o4,c8e,i5r,d5r,eY,c5r,f5r,m5r,r4,f8e,g5r,h5r,oY,p5r,_5r,u5r,t4,m8e,b5r,v5r,rY,F5r,T5r,M5r,a4,g8e,E5r,C5r,tY,w5r,A5r,L5r,n4,h8e,y5r,x5r,aY,$5r,k5r,S5r,s4,p8e,R5r,P5r,nY,B5r,N5r,I5r,l4,_8e,q5r,j5r,sY,D5r,G5r,O5r,i4,Bze,_c,d4,u8e,fx,V5r,b8e,X5r,Nze,ar,mx,z5r,uc,Q5r,lY,W5r,H5r,iY,U5r,J5r,Y5r,gx,K5r,v8e,Z5r,e3r,o3r,Nt,hx,r3r,F8e,t3r,a3r,bc,n3r,T8e,s3r,l3r,dY,i3r,d3r,c3r,c4,f3r,Sr,px,m3r,M8e,g3r,h3r,cn,p3r,E8e,_3r,u3r,C8e,b3r,v3r,w8e,F3r,T3r,M3r,Qe,f4,A8e,E3r,C3r,cY,w3r,A3r,L3r,m4,L8e,y3r,x3r,fY,$3r,k3r,S3r,Ks,y8e,R3r,P3r,mY,B3r,N3r,gY,I3r,q3r,j3r,g4,x8e,D3r,G3r,hY,O3r,V3r,X3r,h4,$8e,z3r,Q3r,pY,W3r,H3r,U3r,p4,k8e,J3r,Y3r,_Y,K3r,Z3r,e0r,_4,S8e,o0r,r0r,uY,t0r,a0r,n0r,u4,Ize,vc,b4,R8e,_x,s0r,P8e,l0r,qze,nr,ux,i0r,Fc,d0r,bY,c0r,f0r,vY,m0r,g0r,h0r,bx,p0r,B8e,_0r,u0r,b0r,It,vx,v0r,N8e,F0r,T0r,Tc,M0r,I8e,E0r,C0r,FY,w0r,A0r,L0r,v4,y0r,Rr,Fx,x0r,q8e,$0r,k0r,fn,S0r,j8e,R0r,P0r,D8e,B0r,N0r,G8e,I0r,q0r,j0r,ie,F4,O8e,D0r,G0r,TY,O0r,V0r,X0r,T4,V8e,z0r,Q0r,MY,W0r,H0r,U0r,M4,X8e,J0r,Y0r,EY,K0r,Z0r,ewr,E4,z8e,owr,rwr,CY,twr,awr,nwr,C4,Q8e,swr,lwr,wY,iwr,dwr,cwr,w4,W8e,fwr,mwr,AY,gwr,hwr,pwr,A4,H8e,_wr,uwr,LY,bwr,vwr,Fwr,L4,U8e,Twr,Mwr,yY,Ewr,Cwr,wwr,y4,J8e,Awr,Lwr,xY,ywr,xwr,$wr,x4,Y8e,kwr,Swr,$Y,Rwr,Pwr,Bwr,$4,K8e,Nwr,Iwr,kY,qwr,jwr,Dwr,k4,Z8e,Gwr,Owr,SY,Vwr,Xwr,zwr,S4,eMe,Qwr,Wwr,RY,Hwr,Uwr,Jwr,R4,oMe,Ywr,Kwr,PY,Zwr,eAr,oAr,P4,rMe,rAr,tAr,BY,aAr,nAr,sAr,B4,tMe,lAr,iAr,NY,dAr,cAr,fAr,N4,aMe,mAr,gAr,IY,hAr,pAr,_Ar,I4,nMe,uAr,bAr,qY,vAr,FAr,TAr,q4,sMe,MAr,EAr,jY,CAr,wAr,AAr,j4,lMe,LAr,yAr,DY,xAr,$Ar,kAr,D4,jze,Mc,G4,iMe,Tx,SAr,dMe,RAr,Dze,sr,Mx,PAr,Ec,BAr,GY,NAr,IAr,OY,qAr,jAr,DAr,Ex,GAr,cMe,OAr,VAr,XAr,qt,Cx,zAr,fMe,QAr,WAr,Cc,HAr,mMe,UAr,JAr,VY,YAr,KAr,ZAr,O4,eLr,Pr,wx,oLr,gMe,rLr,tLr,mn,aLr,hMe,nLr,sLr,pMe,lLr,iLr,_Me,dLr,cLr,fLr,ye,V4,uMe,mLr,gLr,XY,hLr,pLr,_Lr,X4,bMe,uLr,bLr,zY,vLr,FLr,TLr,z4,vMe,MLr,ELr,QY,CLr,wLr,ALr,Q4,FMe,LLr,yLr,WY,xLr,$Lr,kLr,W4,TMe,SLr,RLr,HY,PLr,BLr,NLr,H4,MMe,ILr,qLr,UY,jLr,DLr,GLr,U4,EMe,OLr,VLr,JY,XLr,zLr,QLr,J4,CMe,WLr,HLr,YY,ULr,JLr,YLr,Y4,wMe,KLr,ZLr,KY,eyr,oyr,ryr,K4,AMe,tyr,ayr,ZY,nyr,syr,lyr,Z4,Gze,wc,eE,LMe,Ax,iyr,yMe,dyr,Oze,lr,Lx,cyr,Ac,fyr,eK,myr,gyr,oK,hyr,pyr,_yr,yx,uyr,xMe,byr,vyr,Fyr,jt,xx,Tyr,$Me,Myr,Eyr,Lc,Cyr,kMe,wyr,Ayr,rK,Lyr,yyr,xyr,oE,$yr,Br,$x,kyr,SMe,Syr,Ryr,gn,Pyr,RMe,Byr,Nyr,PMe,Iyr,qyr,BMe,jyr,Dyr,Gyr,te,rE,NMe,Oyr,Vyr,tK,Xyr,zyr,Qyr,tE,IMe,Wyr,Hyr,aK,Uyr,Jyr,Yyr,aE,qMe,Kyr,Zyr,nK,e9r,o9r,r9r,nE,jMe,t9r,a9r,sK,n9r,s9r,l9r,sE,DMe,i9r,d9r,lK,c9r,f9r,m9r,lE,GMe,g9r,h9r,iK,p9r,_9r,u9r,iE,OMe,b9r,v9r,dK,F9r,T9r,M9r,dE,VMe,E9r,C9r,cK,w9r,A9r,L9r,cE,XMe,y9r,x9r,fK,$9r,k9r,S9r,fE,zMe,R9r,P9r,mK,B9r,N9r,I9r,mE,QMe,q9r,j9r,gK,D9r,G9r,O9r,gE,WMe,V9r,X9r,hK,z9r,Q9r,W9r,hE,HMe,H9r,U9r,pK,J9r,Y9r,K9r,pE,UMe,Z9r,exr,_K,oxr,rxr,txr,_E,JMe,axr,nxr,uK,sxr,lxr,ixr,uE,YMe,dxr,cxr,bK,fxr,mxr,gxr,bE,KMe,hxr,pxr,vK,_xr,uxr,bxr,vE,ZMe,vxr,Fxr,FK,Txr,Mxr,Exr,FE,e4e,Cxr,wxr,TK,Axr,Lxr,yxr,TE,o4e,xxr,$xr,MK,kxr,Sxr,Rxr,ME,r4e,Pxr,Bxr,EK,Nxr,Ixr,qxr,EE,t4e,jxr,Dxr,CK,Gxr,Oxr,Vxr,CE,a4e,Xxr,zxr,wK,Qxr,Wxr,Hxr,wE,n4e,Uxr,Jxr,AK,Yxr,Kxr,Zxr,AE,s4e,e$r,o$r,LK,r$r,t$r,a$r,LE,l4e,n$r,s$r,yK,l$r,i$r,d$r,yE,Vze,yc,xE,i4e,kx,c$r,d4e,f$r,Xze,ir,Sx,m$r,xc,g$r,xK,h$r,p$r,$K,_$r,u$r,b$r,Rx,v$r,c4e,F$r,T$r,M$r,Dt,Px,E$r,f4e,C$r,w$r,$c,A$r,m4e,L$r,y$r,kK,x$r,$$r,k$r,$E,S$r,Nr,Bx,R$r,g4e,P$r,B$r,hn,N$r,h4e,I$r,q$r,p4e,j$r,D$r,_4e,G$r,O$r,V$r,ue,kE,u4e,X$r,z$r,SK,Q$r,W$r,H$r,SE,b4e,U$r,J$r,RK,Y$r,K$r,Z$r,RE,v4e,ekr,okr,PK,rkr,tkr,akr,PE,F4e,nkr,skr,BK,lkr,ikr,dkr,BE,T4e,ckr,fkr,NK,mkr,gkr,hkr,NE,M4e,pkr,_kr,IK,ukr,bkr,vkr,IE,E4e,Fkr,Tkr,qK,Mkr,Ekr,Ckr,qE,C4e,wkr,Akr,jK,Lkr,ykr,xkr,jE,w4e,$kr,kkr,DK,Skr,Rkr,Pkr,DE,A4e,Bkr,Nkr,GK,Ikr,qkr,jkr,GE,L4e,Dkr,Gkr,OK,Okr,Vkr,Xkr,OE,y4e,zkr,Qkr,VK,Wkr,Hkr,Ukr,VE,x4e,Jkr,Ykr,XK,Kkr,Zkr,eSr,XE,$4e,oSr,rSr,zK,tSr,aSr,nSr,zE,k4e,sSr,lSr,QK,iSr,dSr,cSr,QE,S4e,fSr,mSr,WK,gSr,hSr,pSr,WE,R4e,_Sr,uSr,HK,bSr,vSr,FSr,HE,zze,kc,UE,P4e,Nx,TSr,B4e,MSr,Qze,dr,Ix,ESr,Sc,CSr,UK,wSr,ASr,JK,LSr,ySr,xSr,qx,$Sr,N4e,kSr,SSr,RSr,Gt,jx,PSr,I4e,BSr,NSr,Rc,ISr,q4e,qSr,jSr,YK,DSr,GSr,OSr,JE,VSr,Ir,Dx,XSr,j4e,zSr,QSr,pn,WSr,D4e,HSr,USr,G4e,JSr,YSr,O4e,KSr,ZSr,eRr,Gx,YE,V4e,oRr,rRr,KK,tRr,aRr,nRr,KE,X4e,sRr,lRr,ZK,iRr,dRr,cRr,ZE,Wze,Pc,eC,z4e,Ox,fRr,Q4e,mRr,Hze,cr,Vx,gRr,Bc,hRr,eZ,pRr,_Rr,oZ,uRr,bRr,vRr,Xx,FRr,W4e,TRr,MRr,ERr,Ot,zx,CRr,H4e,wRr,ARr,Nc,LRr,U4e,yRr,xRr,rZ,$Rr,kRr,SRr,oC,RRr,qr,Qx,PRr,J4e,BRr,NRr,_n,IRr,Y4e,qRr,jRr,K4e,DRr,GRr,Z4e,ORr,VRr,XRr,eEe,rC,oEe,zRr,QRr,tZ,WRr,HRr,URr,tC,Uze,Ic,aC,rEe,Wx,JRr,tEe,YRr,Jze,fr,Hx,KRr,qc,ZRr,aZ,ePr,oPr,nZ,rPr,tPr,aPr,Ux,nPr,aEe,sPr,lPr,iPr,Vt,Jx,dPr,nEe,cPr,fPr,jc,mPr,sEe,gPr,hPr,sZ,pPr,_Pr,uPr,nC,bPr,jr,Yx,vPr,lEe,FPr,TPr,un,MPr,iEe,EPr,CPr,dEe,wPr,APr,cEe,LPr,yPr,xPr,de,sC,fEe,$Pr,kPr,lZ,SPr,RPr,PPr,lC,mEe,BPr,NPr,iZ,IPr,qPr,jPr,iC,gEe,DPr,GPr,dZ,OPr,VPr,XPr,dC,hEe,zPr,QPr,cZ,WPr,HPr,UPr,cC,pEe,JPr,YPr,fZ,KPr,ZPr,eBr,fC,_Ee,oBr,rBr,mZ,tBr,aBr,nBr,mC,uEe,sBr,lBr,gZ,iBr,dBr,cBr,gC,bEe,fBr,mBr,hZ,gBr,hBr,pBr,hC,vEe,_Br,uBr,pZ,bBr,vBr,FBr,pC,FEe,TBr,MBr,_Z,EBr,CBr,wBr,_C,TEe,ABr,LBr,uZ,yBr,xBr,$Br,uC,MEe,kBr,SBr,bZ,RBr,PBr,BBr,bC,EEe,NBr,IBr,vZ,qBr,jBr,DBr,vC,CEe,GBr,OBr,FZ,VBr,XBr,zBr,FC,wEe,QBr,WBr,TZ,HBr,UBr,JBr,TC,AEe,YBr,KBr,MZ,ZBr,eNr,oNr,MC,LEe,rNr,tNr,EZ,aNr,nNr,sNr,EC,yEe,lNr,iNr,CZ,dNr,cNr,fNr,CC,xEe,mNr,gNr,wZ,hNr,pNr,_Nr,wC,$Ee,uNr,bNr,AZ,vNr,FNr,TNr,AC,Yze,Dc,LC,kEe,Kx,MNr,SEe,ENr,Kze,mr,Zx,CNr,Gc,wNr,LZ,ANr,LNr,yZ,yNr,xNr,$Nr,e$,kNr,REe,SNr,RNr,PNr,Xt,o$,BNr,PEe,NNr,INr,Oc,qNr,BEe,jNr,DNr,xZ,GNr,ONr,VNr,yC,XNr,Dr,r$,zNr,NEe,QNr,WNr,bn,HNr,IEe,UNr,JNr,qEe,YNr,KNr,jEe,ZNr,eIr,oIr,ce,xC,DEe,rIr,tIr,$Z,aIr,nIr,sIr,$C,GEe,lIr,iIr,kZ,dIr,cIr,fIr,kC,OEe,mIr,gIr,SZ,hIr,pIr,_Ir,SC,VEe,uIr,bIr,RZ,vIr,FIr,TIr,RC,XEe,MIr,EIr,PZ,CIr,wIr,AIr,PC,zEe,LIr,yIr,BZ,xIr,$Ir,kIr,BC,QEe,SIr,RIr,NZ,PIr,BIr,NIr,NC,WEe,IIr,qIr,IZ,jIr,DIr,GIr,IC,HEe,OIr,VIr,qZ,XIr,zIr,QIr,qC,UEe,WIr,HIr,jZ,UIr,JIr,YIr,jC,JEe,KIr,ZIr,DZ,eqr,oqr,rqr,DC,YEe,tqr,aqr,GZ,nqr,sqr,lqr,GC,KEe,iqr,dqr,OZ,cqr,fqr,mqr,OC,ZEe,gqr,hqr,VZ,pqr,_qr,uqr,VC,eCe,bqr,vqr,XZ,Fqr,Tqr,Mqr,XC,oCe,Eqr,Cqr,zZ,wqr,Aqr,Lqr,zC,rCe,yqr,xqr,QZ,$qr,kqr,Sqr,QC,tCe,Rqr,Pqr,WZ,Bqr,Nqr,Iqr,WC,aCe,qqr,jqr,HZ,Dqr,Gqr,Oqr,HC,nCe,Vqr,Xqr,UZ,zqr,Qqr,Wqr,UC,Zze,Vc,JC,sCe,t$,Hqr,lCe,Uqr,eQe,gr,a$,Jqr,Xc,Yqr,JZ,Kqr,Zqr,YZ,ejr,ojr,rjr,n$,tjr,iCe,ajr,njr,sjr,zt,s$,ljr,dCe,ijr,djr,zc,cjr,cCe,fjr,mjr,KZ,gjr,hjr,pjr,YC,_jr,Gr,l$,ujr,fCe,bjr,vjr,vn,Fjr,mCe,Tjr,Mjr,gCe,Ejr,Cjr,hCe,wjr,Ajr,Ljr,pCe,KC,_Ce,yjr,xjr,ZZ,$jr,kjr,Sjr,ZC,oQe,Qc,e5,uCe,i$,Rjr,bCe,Pjr,rQe,hr,d$,Bjr,Wc,Njr,eee,Ijr,qjr,oee,jjr,Djr,Gjr,c$,Ojr,vCe,Vjr,Xjr,zjr,Qt,f$,Qjr,FCe,Wjr,Hjr,Hc,Ujr,TCe,Jjr,Yjr,ree,Kjr,Zjr,eDr,o5,oDr,Or,m$,rDr,MCe,tDr,aDr,Fn,nDr,ECe,sDr,lDr,CCe,iDr,dDr,wCe,cDr,fDr,mDr,ACe,r5,LCe,gDr,hDr,tee,pDr,_Dr,uDr,t5,tQe,Uc,a5,yCe,g$,bDr,xCe,vDr,aQe,pr,h$,FDr,Jc,TDr,aee,MDr,EDr,nee,CDr,wDr,ADr,p$,LDr,$Ce,yDr,xDr,$Dr,Wt,_$,kDr,kCe,SDr,RDr,Yc,PDr,SCe,BDr,NDr,see,IDr,qDr,jDr,n5,DDr,Vr,u$,GDr,RCe,ODr,VDr,Tn,XDr,PCe,zDr,QDr,BCe,WDr,HDr,NCe,UDr,JDr,YDr,oe,s5,ICe,KDr,ZDr,lee,eGr,oGr,rGr,l5,qCe,tGr,aGr,iee,nGr,sGr,lGr,i5,jCe,iGr,dGr,dee,cGr,fGr,mGr,d5,DCe,gGr,hGr,cee,pGr,_Gr,uGr,c5,GCe,bGr,vGr,fee,FGr,TGr,MGr,f5,OCe,EGr,CGr,mee,wGr,AGr,LGr,m5,VCe,yGr,xGr,gee,$Gr,kGr,SGr,g5,XCe,RGr,PGr,hee,BGr,NGr,IGr,h5,zCe,qGr,jGr,pee,DGr,GGr,OGr,p5,QCe,VGr,XGr,_ee,zGr,QGr,WGr,_5,WCe,HGr,UGr,uee,JGr,YGr,KGr,u5,HCe,ZGr,eOr,bee,oOr,rOr,tOr,b5,UCe,aOr,nOr,vee,sOr,lOr,iOr,v5,JCe,dOr,cOr,Fee,fOr,mOr,gOr,F5,YCe,hOr,pOr,Tee,_Or,uOr,bOr,T5,KCe,vOr,FOr,Mee,TOr,MOr,EOr,M5,ZCe,COr,wOr,Eee,AOr,LOr,yOr,E5,e5e,xOr,$Or,Cee,kOr,SOr,ROr,C5,o5e,POr,BOr,wee,NOr,IOr,qOr,w5,r5e,jOr,DOr,Aee,GOr,OOr,VOr,A5,t5e,XOr,zOr,Lee,QOr,WOr,HOr,L5,a5e,UOr,JOr,yee,YOr,KOr,ZOr,y5,n5e,eVr,oVr,xee,rVr,tVr,aVr,x5,s5e,nVr,sVr,$ee,lVr,iVr,dVr,$5,l5e,cVr,fVr,kee,mVr,gVr,hVr,k5,i5e,pVr,_Vr,See,uVr,bVr,vVr,S5,d5e,FVr,TVr,Ree,MVr,EVr,CVr,R5,nQe,Kc,P5,c5e,b$,wVr,f5e,AVr,sQe,_r,v$,LVr,Zc,yVr,Pee,xVr,$Vr,Bee,kVr,SVr,RVr,F$,PVr,m5e,BVr,NVr,IVr,Ht,T$,qVr,g5e,jVr,DVr,ef,GVr,h5e,OVr,VVr,Nee,XVr,zVr,QVr,B5,WVr,Xr,M$,HVr,p5e,UVr,JVr,Mn,YVr,_5e,KVr,ZVr,u5e,eXr,oXr,b5e,rXr,tXr,aXr,xe,N5,v5e,nXr,sXr,Iee,lXr,iXr,dXr,I5,F5e,cXr,fXr,qee,mXr,gXr,hXr,q5,T5e,pXr,_Xr,jee,uXr,bXr,vXr,j5,M5e,FXr,TXr,Dee,MXr,EXr,CXr,D5,E5e,wXr,AXr,Gee,LXr,yXr,xXr,G5,C5e,$Xr,kXr,Oee,SXr,RXr,PXr,O5,w5e,BXr,NXr,Vee,IXr,qXr,jXr,V5,A5e,DXr,GXr,Xee,OXr,VXr,XXr,X5,L5e,zXr,QXr,zee,WXr,HXr,UXr,z5,y5e,JXr,YXr,Qee,KXr,ZXr,ezr,Q5,lQe,of,W5,x5e,E$,ozr,$5e,rzr,iQe,ur,C$,tzr,rf,azr,Wee,nzr,szr,Hee,lzr,izr,dzr,w$,czr,k5e,fzr,mzr,gzr,Ut,A$,hzr,S5e,pzr,_zr,tf,uzr,R5e,bzr,vzr,Uee,Fzr,Tzr,Mzr,H5,Ezr,zr,L$,Czr,P5e,wzr,Azr,En,Lzr,B5e,yzr,xzr,N5e,$zr,kzr,I5e,Szr,Rzr,Pzr,Ee,U5,q5e,Bzr,Nzr,Jee,Izr,qzr,jzr,J5,j5e,Dzr,Gzr,Yee,Ozr,Vzr,Xzr,Y5,D5e,zzr,Qzr,Kee,Wzr,Hzr,Uzr,K5,G5e,Jzr,Yzr,Zee,Kzr,Zzr,eQr,Z5,O5e,oQr,rQr,eoe,tQr,aQr,nQr,e3,V5e,sQr,lQr,ooe,iQr,dQr,cQr,o3,X5e,fQr,mQr,roe,gQr,hQr,pQr,r3,z5e,_Qr,uQr,toe,bQr,vQr,FQr,t3,Q5e,TQr,MQr,aoe,EQr,CQr,wQr,a3,W5e,AQr,LQr,noe,yQr,xQr,$Qr,n3,H5e,kQr,SQr,soe,RQr,PQr,BQr,s3,U5e,NQr,IQr,loe,qQr,jQr,DQr,l3,J5e,GQr,OQr,ioe,VQr,XQr,zQr,i3,dQe,af,d3,Y5e,y$,QQr,K5e,WQr,cQe,br,x$,HQr,nf,UQr,doe,JQr,YQr,coe,KQr,ZQr,eWr,$$,oWr,Z5e,rWr,tWr,aWr,Jt,k$,nWr,e3e,sWr,lWr,sf,iWr,o3e,dWr,cWr,foe,fWr,mWr,gWr,c3,hWr,Qr,S$,pWr,r3e,_Wr,uWr,Cn,bWr,t3e,vWr,FWr,a3e,TWr,MWr,n3e,EWr,CWr,wWr,$e,f3,s3e,AWr,LWr,moe,yWr,xWr,$Wr,m3,l3e,kWr,SWr,goe,RWr,PWr,BWr,g3,i3e,NWr,IWr,hoe,qWr,jWr,DWr,h3,d3e,GWr,OWr,poe,VWr,XWr,zWr,p3,c3e,QWr,WWr,_oe,HWr,UWr,JWr,_3,f3e,YWr,KWr,uoe,ZWr,eHr,oHr,u3,m3e,rHr,tHr,boe,aHr,nHr,sHr,b3,g3e,lHr,iHr,voe,dHr,cHr,fHr,v3,h3e,mHr,gHr,Foe,hHr,pHr,_Hr,F3,p3e,uHr,bHr,Toe,vHr,FHr,THr,T3,fQe,lf,M3,_3e,R$,MHr,u3e,EHr,mQe,vr,P$,CHr,df,wHr,Moe,AHr,LHr,Eoe,yHr,xHr,$Hr,B$,kHr,b3e,SHr,RHr,PHr,Yt,N$,BHr,v3e,NHr,IHr,cf,qHr,F3e,jHr,DHr,Coe,GHr,OHr,VHr,E3,XHr,Wr,I$,zHr,T3e,QHr,WHr,wn,HHr,M3e,UHr,JHr,E3e,YHr,KHr,C3e,ZHr,eUr,oUr,ke,C3,w3e,rUr,tUr,woe,aUr,nUr,sUr,w3,A3e,lUr,iUr,Aoe,dUr,cUr,fUr,A3,L3e,mUr,gUr,Loe,hUr,pUr,_Ur,L3,y3e,uUr,bUr,yoe,vUr,FUr,TUr,y3,x3e,MUr,EUr,xoe,CUr,wUr,AUr,x3,$3e,LUr,yUr,$oe,xUr,$Ur,kUr,$3,k3e,SUr,RUr,koe,PUr,BUr,NUr,k3,S3e,IUr,qUr,Soe,jUr,DUr,GUr,S3,R3e,OUr,VUr,Roe,XUr,zUr,QUr,R3,P3e,WUr,HUr,Poe,UUr,JUr,YUr,P3,gQe,ff,B3,B3e,q$,KUr,N3e,ZUr,hQe,Fr,j$,eJr,mf,oJr,Boe,rJr,tJr,Noe,aJr,nJr,sJr,D$,lJr,I3e,iJr,dJr,cJr,Kt,G$,fJr,q3e,mJr,gJr,gf,hJr,j3e,pJr,_Jr,Ioe,uJr,bJr,vJr,N3,FJr,Hr,O$,TJr,D3e,MJr,EJr,An,CJr,G3e,wJr,AJr,O3e,LJr,yJr,V3e,xJr,$Jr,kJr,Se,I3,X3e,SJr,RJr,qoe,PJr,BJr,NJr,q3,z3e,IJr,qJr,joe,jJr,DJr,GJr,j3,Q3e,OJr,VJr,Doe,XJr,zJr,QJr,D3,W3e,WJr,HJr,Goe,UJr,JJr,YJr,G3,H3e,KJr,ZJr,Ooe,eYr,oYr,rYr,O3,U3e,tYr,aYr,Voe,nYr,sYr,lYr,V3,J3e,iYr,dYr,Xoe,cYr,fYr,mYr,X3,Y3e,gYr,hYr,zoe,pYr,_Yr,uYr,z3,K3e,bYr,vYr,Qoe,FYr,TYr,MYr,Q3,Z3e,EYr,CYr,Woe,wYr,AYr,LYr,W3,pQe,hf,H3,e0e,V$,yYr,o0e,xYr,_Qe,Tr,X$,$Yr,pf,kYr,Hoe,SYr,RYr,Uoe,PYr,BYr,NYr,z$,IYr,r0e,qYr,jYr,DYr,Zt,Q$,GYr,t0e,OYr,VYr,_f,XYr,a0e,zYr,QYr,Joe,WYr,HYr,UYr,U3,JYr,Ur,W$,YYr,n0e,KYr,ZYr,Ln,eKr,s0e,oKr,rKr,l0e,tKr,aKr,i0e,nKr,sKr,lKr,Re,J3,d0e,iKr,dKr,Yoe,cKr,fKr,mKr,Y3,c0e,gKr,hKr,Koe,pKr,_Kr,uKr,K3,f0e,bKr,vKr,Zoe,FKr,TKr,MKr,Z3,m0e,EKr,CKr,ere,wKr,AKr,LKr,e0,g0e,yKr,xKr,ore,$Kr,kKr,SKr,o0,h0e,RKr,PKr,rre,BKr,NKr,IKr,r0,p0e,qKr,jKr,tre,DKr,GKr,OKr,t0,_0e,VKr,XKr,are,zKr,QKr,WKr,a0,u0e,HKr,UKr,nre,JKr,YKr,KKr,n0,b0e,ZKr,eZr,sre,oZr,rZr,tZr,s0,uQe,uf,l0,v0e,H$,aZr,F0e,nZr,bQe,Mr,U$,sZr,bf,lZr,lre,iZr,dZr,ire,cZr,fZr,mZr,J$,gZr,T0e,hZr,pZr,_Zr,ea,Y$,uZr,M0e,bZr,vZr,vf,FZr,E0e,TZr,MZr,dre,EZr,CZr,wZr,i0,AZr,Jr,K$,LZr,C0e,yZr,xZr,yn,$Zr,w0e,kZr,SZr,A0e,RZr,PZr,L0e,BZr,NZr,IZr,Ve,d0,y0e,qZr,jZr,cre,DZr,GZr,OZr,c0,x0e,VZr,XZr,fre,zZr,QZr,WZr,f0,$0e,HZr,UZr,mre,JZr,YZr,KZr,m0,k0e,ZZr,eet,gre,oet,ret,tet,g0,S0e,aet,net,hre,set,iet,det,h0,R0e,cet,fet,pre,met,get,het,p0,P0e,pet,_et,_re,uet,bet,vet,_0,B0e,Fet,Tet,ure,Met,Eet,Cet,u0,vQe,Ff,b0,N0e,Z$,wet,I0e,Aet,FQe,Er,ek,Let,Tf,yet,bre,xet,$et,vre,ket,Set,Ret,ok,Pet,q0e,Bet,Net,Iet,oa,rk,qet,j0e,jet,Det,Mf,Get,D0e,Oet,Vet,Fre,Xet,zet,Qet,v0,Wet,Yr,tk,Het,G0e,Uet,Jet,xn,Yet,O0e,Ket,Zet,V0e,eot,oot,X0e,rot,tot,aot,Xe,F0,z0e,not,sot,Tre,lot,iot,dot,T0,Q0e,cot,fot,Mre,mot,got,hot,M0,W0e,pot,_ot,Ere,uot,bot,vot,E0,H0e,Fot,Tot,Cre,Mot,Eot,Cot,C0,U0e,wot,Aot,wre,Lot,yot,xot,w0,J0e,$ot,kot,Are,Sot,Rot,Pot,A0,Y0e,Bot,Not,Lre,Iot,qot,jot,L0,K0e,Dot,Got,yre,Oot,Vot,Xot,y0,TQe,Ef,x0,Z0e,ak,zot,ewe,Qot,MQe,Cr,nk,Wot,Cf,Hot,xre,Uot,Jot,$re,Yot,Kot,Zot,sk,ert,owe,ort,rrt,trt,ra,lk,art,rwe,nrt,srt,wf,lrt,twe,irt,drt,kre,crt,frt,mrt,$0,grt,Kr,ik,hrt,awe,prt,_rt,$n,urt,nwe,brt,vrt,swe,Frt,Trt,lwe,Mrt,Ert,Crt,iwe,k0,dwe,wrt,Art,Sre,Lrt,yrt,xrt,S0,EQe,Af,R0,cwe,dk,$rt,fwe,krt,CQe,wr,ck,Srt,Lf,Rrt,Rre,Prt,Brt,Pre,Nrt,Irt,qrt,fk,jrt,mwe,Drt,Grt,Ort,ta,mk,Vrt,gwe,Xrt,zrt,yf,Qrt,hwe,Wrt,Hrt,Bre,Urt,Jrt,Yrt,P0,Krt,Zr,gk,Zrt,pwe,ett,ott,kn,rtt,_we,ttt,att,uwe,ntt,stt,bwe,ltt,itt,dtt,hk,B0,vwe,ctt,ftt,Nre,mtt,gtt,htt,N0,Fwe,ptt,_tt,Ire,utt,btt,vtt,I0,wQe,xf,q0,Twe,pk,Ftt,Mwe,Ttt,AQe,Ar,_k,Mtt,$f,Ett,qre,Ctt,wtt,jre,Att,Ltt,ytt,uk,xtt,Ewe,$tt,ktt,Stt,aa,bk,Rtt,Cwe,Ptt,Btt,kf,Ntt,wwe,Itt,qtt,Dre,jtt,Dtt,Gtt,j0,Ott,et,vk,Vtt,Awe,Xtt,ztt,Sn,Qtt,Lwe,Wtt,Htt,ywe,Utt,Jtt,xwe,Ytt,Ktt,Ztt,$we,D0,kwe,eat,oat,Gre,rat,tat,aat,G0,LQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),cL=new re({}),fL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Df=new nat({props:{warning:!0,$$slots:{default:[YWt]},$$scope:{ctx:$}}}),mL=new re({}),gL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L614"}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L637"}}),Zg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),uL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L760"}}),bL=new re({}),vL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L411"}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17826/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L425"}}),Nh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),EL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L624"}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17826/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),vp=new nat({props:{$$slots:{default:[eHt]},$$scope:{ctx:$}}}),Fp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),xL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),$L=new re({}),kL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L89"}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L103"}}),Gp=new nat({props:{$$slots:{default:[rHt]},$$scope:{ctx:$}}}),Op=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),BL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L256"}}),NL=new re({}),IL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L786"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/jukebox#transformers.JukeboxConfig">JukeboxConfig</a> configuration class: <code>JukeboxModel</code> (Jukebox model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),zp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Yu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L793"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Zu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Q2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),QL=new re({}),WL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L808"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),H2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),N1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),YL=new re({}),KL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L815"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),q1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Cb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),ry=new re({}),ty=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L822"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Ab=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Wb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),ly=new re({}),iy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L831"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Ub=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Wv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L876"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),uy=new re({}),by=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L883"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),IF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L869"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),jF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),E6=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L840"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),w6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L847"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),Iy=new re({}),qy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L892"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L931"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L858"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),WT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L938"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),t9=new re({}),a9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L961"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),i9=new re({}),d9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L945"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),x7=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),g9=new re({}),h9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L952"}}),_9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),k7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),B7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L970"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),I7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),X7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L977"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Q7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),x9=new re({}),$9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L924"}}),S9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Z7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),t8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),B9=new re({}),N9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L899"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),n8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),i8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),D9=new re({}),G9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L906"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),c8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),u8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),z9=new re({}),Q9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L915"}}),H9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),v8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),M8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),C8=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),HM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),i4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),c4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),u4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),Nx=new re({}),Ix=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),Wx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[bUt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vUt]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[FUt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[TUt]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),s$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),YC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[MUt]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),ZC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[EUt]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),f$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),o5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[CUt]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[LUt]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[yUt]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xUt]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[$Ut]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[kUt]},$$scope:{ctx:$}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[SUt]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[RUt]},$$scope:{ctx:$}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[PUt]},$$scope:{ctx:$}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[BUt]},$$scope:{ctx:$}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),N3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[NUt]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),W3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[IUt]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qUt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),s0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[jUt]},$$scope:{ctx:$}}}),H$=new re({}),U$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),i0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[DUt]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),u0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[GUt]},$$scope:{ctx:$}}}),Z$=new re({}),ek=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),v0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[OUt]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[VUt]},$$scope:{ctx:$}}}),ak=new re({}),nk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),lk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),$0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[XUt]},$$scope:{ctx:$}}}),ik=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[zUt]},$$scope:{ctx:$}}}),dk=new re({}),ck=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),mk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[QUt]},$$scope:{ctx:$}}}),gk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[WUt]},$$scope:{ctx:$}}}),pk=new re({}),_k=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),bk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),j0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[HUt]},$$scope:{ctx:$}}}),vk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[UUt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),yi=o("Auto Classes"),Bf=l(),lt=a("p"),xi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=a("code"),sL=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),ki=o("Instantiating one of "),Pn=a("a"),lL=o("AutoConfig"),Bn=o(", "),Nn=a("a"),iL=o("AutoModel"),Si=o(`, and
`),In=a("a"),dL=o("AutoTokenizer"),Ri=o(" will directly create a class of the relevant architecture. For instance"),If=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),OS=o("will create a model that is an instance of "),Pi=a("a"),VS=o("BertModel"),XS=o("."),wo=l(),Ra=a("p"),zS=o("There is one class of "),qf=a("code"),QS=o("AutoModel"),IHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),MXe=l(),Bi=a("h2"),jf=a("a"),Nae=a("span"),F(cL.$$.fragment),qHe=l(),Iae=a("span"),jHe=o("Extending the Auto Classes"),EXe=l(),qn=a("p"),DHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qae=a("code"),GHe=o("NewModel"),OHe=o(", make sure you have a "),jae=a("code"),VHe=o("NewModelConfig"),XHe=o(` then you can add those to the auto
classes like this:`),CXe=l(),F(fL.$$.fragment),wXe=l(),WS=a("p"),zHe=o("You will then be able to use the auto classes like you would usually do!"),AXe=l(),F(Df.$$.fragment),LXe=l(),Ni=a("h2"),Gf=a("a"),Dae=a("span"),F(mL.$$.fragment),QHe=l(),Gae=a("span"),WHe=o("AutoConfig"),yXe=l(),Ao=a("div"),F(gL.$$.fragment),HHe=l(),hL=a("p"),UHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),HS=a("a"),JHe=o("from_pretrained()"),YHe=o(" class method."),KHe=l(),pL=a("p"),ZHe=o("This class cannot be instantiated directly using "),Oae=a("code"),eUe=o("__init__()"),oUe=o(" (throws an error)."),rUe=l(),Lr=a("div"),F(_L.$$.fragment),tUe=l(),Vae=a("p"),aUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),nUe=l(),Ii=a("p"),sUe=o("The configuration class to instantiate is selected based on the "),Xae=a("code"),lUe=o("model_type"),iUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zae=a("code"),dUe=o("pretrained_model_name_or_path"),cUe=o(":"),fUe=l(),A=a("ul"),Of=a("li"),Qae=a("strong"),mUe=o("albert"),gUe=o(" \u2014 "),US=a("a"),hUe=o("AlbertConfig"),pUe=o(" (ALBERT model)"),_Ue=l(),Vf=a("li"),Wae=a("strong"),uUe=o("bart"),bUe=o(" \u2014 "),JS=a("a"),vUe=o("BartConfig"),FUe=o(" (BART model)"),TUe=l(),Xf=a("li"),Hae=a("strong"),MUe=o("beit"),EUe=o(" \u2014 "),YS=a("a"),CUe=o("BeitConfig"),wUe=o(" (BEiT model)"),AUe=l(),zf=a("li"),Uae=a("strong"),LUe=o("bert"),yUe=o(" \u2014 "),KS=a("a"),xUe=o("BertConfig"),$Ue=o(" (BERT model)"),kUe=l(),Qf=a("li"),Jae=a("strong"),SUe=o("bert-generation"),RUe=o(" \u2014 "),ZS=a("a"),PUe=o("BertGenerationConfig"),BUe=o(" (Bert Generation model)"),NUe=l(),Wf=a("li"),Yae=a("strong"),IUe=o("big_bird"),qUe=o(" \u2014 "),eR=a("a"),jUe=o("BigBirdConfig"),DUe=o(" (BigBird model)"),GUe=l(),Hf=a("li"),Kae=a("strong"),OUe=o("bigbird_pegasus"),VUe=o(" \u2014 "),oR=a("a"),XUe=o("BigBirdPegasusConfig"),zUe=o(" (BigBird-Pegasus model)"),QUe=l(),Uf=a("li"),Zae=a("strong"),WUe=o("blenderbot"),HUe=o(" \u2014 "),rR=a("a"),UUe=o("BlenderbotConfig"),JUe=o(" (Blenderbot model)"),YUe=l(),Jf=a("li"),ene=a("strong"),KUe=o("blenderbot-small"),ZUe=o(" \u2014 "),tR=a("a"),eJe=o("BlenderbotSmallConfig"),oJe=o(" (BlenderbotSmall model)"),rJe=l(),Yf=a("li"),one=a("strong"),tJe=o("bloom"),aJe=o(" \u2014 "),aR=a("a"),nJe=o("BloomConfig"),sJe=o(" (BLOOM model)"),lJe=l(),Kf=a("li"),rne=a("strong"),iJe=o("camembert"),dJe=o(" \u2014 "),nR=a("a"),cJe=o("CamembertConfig"),fJe=o(" (CamemBERT model)"),mJe=l(),Zf=a("li"),tne=a("strong"),gJe=o("canine"),hJe=o(" \u2014 "),sR=a("a"),pJe=o("CanineConfig"),_Je=o(" (CANINE model)"),uJe=l(),em=a("li"),ane=a("strong"),bJe=o("clip"),vJe=o(" \u2014 "),lR=a("a"),FJe=o("CLIPConfig"),TJe=o(" (CLIP model)"),MJe=l(),om=a("li"),nne=a("strong"),EJe=o("codegen"),CJe=o(" \u2014 "),iR=a("a"),wJe=o("CodeGenConfig"),AJe=o(" (CodeGen model)"),LJe=l(),rm=a("li"),sne=a("strong"),yJe=o("convbert"),xJe=o(" \u2014 "),dR=a("a"),$Je=o("ConvBertConfig"),kJe=o(" (ConvBERT model)"),SJe=l(),tm=a("li"),lne=a("strong"),RJe=o("convnext"),PJe=o(" \u2014 "),cR=a("a"),BJe=o("ConvNextConfig"),NJe=o(" (ConvNeXT model)"),IJe=l(),am=a("li"),ine=a("strong"),qJe=o("ctrl"),jJe=o(" \u2014 "),fR=a("a"),DJe=o("CTRLConfig"),GJe=o(" (CTRL model)"),OJe=l(),nm=a("li"),dne=a("strong"),VJe=o("cvt"),XJe=o(" \u2014 "),mR=a("a"),zJe=o("CvtConfig"),QJe=o(" (CvT model)"),WJe=l(),sm=a("li"),cne=a("strong"),HJe=o("data2vec-audio"),UJe=o(" \u2014 "),gR=a("a"),JJe=o("Data2VecAudioConfig"),YJe=o(" (Data2VecAudio model)"),KJe=l(),lm=a("li"),fne=a("strong"),ZJe=o("data2vec-text"),eYe=o(" \u2014 "),hR=a("a"),oYe=o("Data2VecTextConfig"),rYe=o(" (Data2VecText model)"),tYe=l(),im=a("li"),mne=a("strong"),aYe=o("data2vec-vision"),nYe=o(" \u2014 "),pR=a("a"),sYe=o("Data2VecVisionConfig"),lYe=o(" (Data2VecVision model)"),iYe=l(),dm=a("li"),gne=a("strong"),dYe=o("deberta"),cYe=o(" \u2014 "),_R=a("a"),fYe=o("DebertaConfig"),mYe=o(" (DeBERTa model)"),gYe=l(),cm=a("li"),hne=a("strong"),hYe=o("deberta-v2"),pYe=o(" \u2014 "),uR=a("a"),_Ye=o("DebertaV2Config"),uYe=o(" (DeBERTa-v2 model)"),bYe=l(),fm=a("li"),pne=a("strong"),vYe=o("decision_transformer"),FYe=o(" \u2014 "),bR=a("a"),TYe=o("DecisionTransformerConfig"),MYe=o(" (Decision Transformer model)"),EYe=l(),mm=a("li"),_ne=a("strong"),CYe=o("deit"),wYe=o(" \u2014 "),vR=a("a"),AYe=o("DeiTConfig"),LYe=o(" (DeiT model)"),yYe=l(),gm=a("li"),une=a("strong"),xYe=o("detr"),$Ye=o(" \u2014 "),FR=a("a"),kYe=o("DetrConfig"),SYe=o(" (DETR model)"),RYe=l(),hm=a("li"),bne=a("strong"),PYe=o("distilbert"),BYe=o(" \u2014 "),TR=a("a"),NYe=o("DistilBertConfig"),IYe=o(" (DistilBERT model)"),qYe=l(),pm=a("li"),vne=a("strong"),jYe=o("dpr"),DYe=o(" \u2014 "),MR=a("a"),GYe=o("DPRConfig"),OYe=o(" (DPR model)"),VYe=l(),_m=a("li"),Fne=a("strong"),XYe=o("dpt"),zYe=o(" \u2014 "),ER=a("a"),QYe=o("DPTConfig"),WYe=o(" (DPT model)"),HYe=l(),um=a("li"),Tne=a("strong"),UYe=o("electra"),JYe=o(" \u2014 "),CR=a("a"),YYe=o("ElectraConfig"),KYe=o(" (ELECTRA model)"),ZYe=l(),bm=a("li"),Mne=a("strong"),eKe=o("encoder-decoder"),oKe=o(" \u2014 "),wR=a("a"),rKe=o("EncoderDecoderConfig"),tKe=o(" (Encoder decoder model)"),aKe=l(),vm=a("li"),Ene=a("strong"),nKe=o("flaubert"),sKe=o(" \u2014 "),AR=a("a"),lKe=o("FlaubertConfig"),iKe=o(" (FlauBERT model)"),dKe=l(),Fm=a("li"),Cne=a("strong"),cKe=o("flava"),fKe=o(" \u2014 "),LR=a("a"),mKe=o("FlavaConfig"),gKe=o(" (FLAVA model)"),hKe=l(),Tm=a("li"),wne=a("strong"),pKe=o("fnet"),_Ke=o(" \u2014 "),yR=a("a"),uKe=o("FNetConfig"),bKe=o(" (FNet model)"),vKe=l(),Mm=a("li"),Ane=a("strong"),FKe=o("fsmt"),TKe=o(" \u2014 "),xR=a("a"),MKe=o("FSMTConfig"),EKe=o(" (FairSeq Machine-Translation model)"),CKe=l(),Em=a("li"),Lne=a("strong"),wKe=o("funnel"),AKe=o(" \u2014 "),$R=a("a"),LKe=o("FunnelConfig"),yKe=o(" (Funnel Transformer model)"),xKe=l(),Cm=a("li"),yne=a("strong"),$Ke=o("glpn"),kKe=o(" \u2014 "),kR=a("a"),SKe=o("GLPNConfig"),RKe=o(" (GLPN model)"),PKe=l(),wm=a("li"),xne=a("strong"),BKe=o("gpt2"),NKe=o(" \u2014 "),SR=a("a"),IKe=o("GPT2Config"),qKe=o(" (OpenAI GPT-2 model)"),jKe=l(),Am=a("li"),$ne=a("strong"),DKe=o("gpt_neo"),GKe=o(" \u2014 "),RR=a("a"),OKe=o("GPTNeoConfig"),VKe=o(" (GPT Neo model)"),XKe=l(),Lm=a("li"),kne=a("strong"),zKe=o("gpt_neox"),QKe=o(" \u2014 "),PR=a("a"),WKe=o("GPTNeoXConfig"),HKe=o(" (GPT NeoX model)"),UKe=l(),ym=a("li"),Sne=a("strong"),JKe=o("gptj"),YKe=o(" \u2014 "),BR=a("a"),KKe=o("GPTJConfig"),ZKe=o(" (GPT-J model)"),eZe=l(),xm=a("li"),Rne=a("strong"),oZe=o("groupvit"),rZe=o(" \u2014 "),NR=a("a"),tZe=o("GroupViTConfig"),aZe=o(" (GroupViT model)"),nZe=l(),$m=a("li"),Pne=a("strong"),sZe=o("hubert"),lZe=o(" \u2014 "),IR=a("a"),iZe=o("HubertConfig"),dZe=o(" (Hubert model)"),cZe=l(),km=a("li"),Bne=a("strong"),fZe=o("ibert"),mZe=o(" \u2014 "),qR=a("a"),gZe=o("IBertConfig"),hZe=o(" (I-BERT model)"),pZe=l(),Sm=a("li"),Nne=a("strong"),_Ze=o("imagegpt"),uZe=o(" \u2014 "),jR=a("a"),bZe=o("ImageGPTConfig"),vZe=o(" (ImageGPT model)"),FZe=l(),Rm=a("li"),Ine=a("strong"),TZe=o("jukebox"),MZe=o(" \u2014 "),DR=a("a"),EZe=o("JukeboxConfig"),CZe=o(" (Jukebox model)"),wZe=l(),Pm=a("li"),qne=a("strong"),AZe=o("layoutlm"),LZe=o(" \u2014 "),GR=a("a"),yZe=o("LayoutLMConfig"),xZe=o(" (LayoutLM model)"),$Ze=l(),Bm=a("li"),jne=a("strong"),kZe=o("layoutlmv2"),SZe=o(" \u2014 "),OR=a("a"),RZe=o("LayoutLMv2Config"),PZe=o(" (LayoutLMv2 model)"),BZe=l(),Nm=a("li"),Dne=a("strong"),NZe=o("layoutlmv3"),IZe=o(" \u2014 "),VR=a("a"),qZe=o("LayoutLMv3Config"),jZe=o(" (LayoutLMv3 model)"),DZe=l(),Im=a("li"),Gne=a("strong"),GZe=o("led"),OZe=o(" \u2014 "),XR=a("a"),VZe=o("LEDConfig"),XZe=o(" (LED model)"),zZe=l(),qm=a("li"),One=a("strong"),QZe=o("levit"),WZe=o(" \u2014 "),zR=a("a"),HZe=o("LevitConfig"),UZe=o(" (LeViT model)"),JZe=l(),jm=a("li"),Vne=a("strong"),YZe=o("longformer"),KZe=o(" \u2014 "),QR=a("a"),ZZe=o("LongformerConfig"),eeo=o(" (Longformer model)"),oeo=l(),Dm=a("li"),Xne=a("strong"),reo=o("longt5"),teo=o(" \u2014 "),WR=a("a"),aeo=o("LongT5Config"),neo=o(" (LongT5 model)"),seo=l(),Gm=a("li"),zne=a("strong"),leo=o("luke"),ieo=o(" \u2014 "),HR=a("a"),deo=o("LukeConfig"),ceo=o(" (LUKE model)"),feo=l(),Om=a("li"),Qne=a("strong"),meo=o("lxmert"),geo=o(" \u2014 "),UR=a("a"),heo=o("LxmertConfig"),peo=o(" (LXMERT model)"),_eo=l(),Vm=a("li"),Wne=a("strong"),ueo=o("m2m_100"),beo=o(" \u2014 "),JR=a("a"),veo=o("M2M100Config"),Feo=o(" (M2M100 model)"),Teo=l(),Xm=a("li"),Hne=a("strong"),Meo=o("marian"),Eeo=o(" \u2014 "),YR=a("a"),Ceo=o("MarianConfig"),weo=o(" (Marian model)"),Aeo=l(),zm=a("li"),Une=a("strong"),Leo=o("maskformer"),yeo=o(" \u2014 "),KR=a("a"),xeo=o("MaskFormerConfig"),$eo=o(" (MaskFormer model)"),keo=l(),Qm=a("li"),Jne=a("strong"),Seo=o("mbart"),Reo=o(" \u2014 "),ZR=a("a"),Peo=o("MBartConfig"),Beo=o(" (mBART model)"),Neo=l(),Wm=a("li"),Yne=a("strong"),Ieo=o("mctct"),qeo=o(" \u2014 "),eP=a("a"),jeo=o("MCTCTConfig"),Deo=o(" (M-CTC-T model)"),Geo=l(),Hm=a("li"),Kne=a("strong"),Oeo=o("megatron-bert"),Veo=o(" \u2014 "),oP=a("a"),Xeo=o("MegatronBertConfig"),zeo=o(" (Megatron-BERT model)"),Qeo=l(),Um=a("li"),Zne=a("strong"),Weo=o("mobilebert"),Heo=o(" \u2014 "),rP=a("a"),Ueo=o("MobileBertConfig"),Jeo=o(" (MobileBERT model)"),Yeo=l(),Jm=a("li"),ese=a("strong"),Keo=o("mobilevit"),Zeo=o(" \u2014 "),tP=a("a"),eoo=o("MobileViTConfig"),ooo=o(" (MobileViT model)"),roo=l(),Ym=a("li"),ose=a("strong"),too=o("mpnet"),aoo=o(" \u2014 "),aP=a("a"),noo=o("MPNetConfig"),soo=o(" (MPNet model)"),loo=l(),Km=a("li"),rse=a("strong"),ioo=o("mt5"),doo=o(" \u2014 "),nP=a("a"),coo=o("MT5Config"),foo=o(" (MT5 model)"),moo=l(),Zm=a("li"),tse=a("strong"),goo=o("mvp"),hoo=o(" \u2014 "),sP=a("a"),poo=o("MvpConfig"),_oo=o(" (MVP model)"),uoo=l(),eg=a("li"),ase=a("strong"),boo=o("nezha"),voo=o(" \u2014 "),lP=a("a"),Foo=o("NezhaConfig"),Too=o(" (Nezha model)"),Moo=l(),og=a("li"),nse=a("strong"),Eoo=o("nystromformer"),Coo=o(" \u2014 "),iP=a("a"),woo=o("NystromformerConfig"),Aoo=o(" (Nystr\xF6mformer model)"),Loo=l(),rg=a("li"),sse=a("strong"),yoo=o("openai-gpt"),xoo=o(" \u2014 "),dP=a("a"),$oo=o("OpenAIGPTConfig"),koo=o(" (OpenAI GPT model)"),Soo=l(),tg=a("li"),lse=a("strong"),Roo=o("opt"),Poo=o(" \u2014 "),cP=a("a"),Boo=o("OPTConfig"),Noo=o(" (OPT model)"),Ioo=l(),ag=a("li"),ise=a("strong"),qoo=o("pegasus"),joo=o(" \u2014 "),fP=a("a"),Doo=o("PegasusConfig"),Goo=o(" (Pegasus model)"),Ooo=l(),ng=a("li"),dse=a("strong"),Voo=o("perceiver"),Xoo=o(" \u2014 "),mP=a("a"),zoo=o("PerceiverConfig"),Qoo=o(" (Perceiver model)"),Woo=l(),sg=a("li"),cse=a("strong"),Hoo=o("plbart"),Uoo=o(" \u2014 "),gP=a("a"),Joo=o("PLBartConfig"),Yoo=o(" (PLBart model)"),Koo=l(),lg=a("li"),fse=a("strong"),Zoo=o("poolformer"),ero=o(" \u2014 "),hP=a("a"),oro=o("PoolFormerConfig"),rro=o(" (PoolFormer model)"),tro=l(),ig=a("li"),mse=a("strong"),aro=o("prophetnet"),nro=o(" \u2014 "),pP=a("a"),sro=o("ProphetNetConfig"),lro=o(" (ProphetNet model)"),iro=l(),dg=a("li"),gse=a("strong"),dro=o("qdqbert"),cro=o(" \u2014 "),_P=a("a"),fro=o("QDQBertConfig"),mro=o(" (QDQBert model)"),gro=l(),cg=a("li"),hse=a("strong"),hro=o("rag"),pro=o(" \u2014 "),uP=a("a"),_ro=o("RagConfig"),uro=o(" (RAG model)"),bro=l(),fg=a("li"),pse=a("strong"),vro=o("realm"),Fro=o(" \u2014 "),bP=a("a"),Tro=o("RealmConfig"),Mro=o(" (REALM model)"),Ero=l(),mg=a("li"),_se=a("strong"),Cro=o("reformer"),wro=o(" \u2014 "),vP=a("a"),Aro=o("ReformerConfig"),Lro=o(" (Reformer model)"),yro=l(),gg=a("li"),use=a("strong"),xro=o("regnet"),$ro=o(" \u2014 "),FP=a("a"),kro=o("RegNetConfig"),Sro=o(" (RegNet model)"),Rro=l(),hg=a("li"),bse=a("strong"),Pro=o("rembert"),Bro=o(" \u2014 "),TP=a("a"),Nro=o("RemBertConfig"),Iro=o(" (RemBERT model)"),qro=l(),pg=a("li"),vse=a("strong"),jro=o("resnet"),Dro=o(" \u2014 "),MP=a("a"),Gro=o("ResNetConfig"),Oro=o(" (ResNet model)"),Vro=l(),_g=a("li"),Fse=a("strong"),Xro=o("retribert"),zro=o(" \u2014 "),EP=a("a"),Qro=o("RetriBertConfig"),Wro=o(" (RetriBERT model)"),Hro=l(),ug=a("li"),Tse=a("strong"),Uro=o("roberta"),Jro=o(" \u2014 "),CP=a("a"),Yro=o("RobertaConfig"),Kro=o(" (RoBERTa model)"),Zro=l(),bg=a("li"),Mse=a("strong"),eto=o("roformer"),oto=o(" \u2014 "),wP=a("a"),rto=o("RoFormerConfig"),tto=o(" (RoFormer model)"),ato=l(),vg=a("li"),Ese=a("strong"),nto=o("segformer"),sto=o(" \u2014 "),AP=a("a"),lto=o("SegformerConfig"),ito=o(" (SegFormer model)"),dto=l(),Fg=a("li"),Cse=a("strong"),cto=o("sew"),fto=o(" \u2014 "),LP=a("a"),mto=o("SEWConfig"),gto=o(" (SEW model)"),hto=l(),Tg=a("li"),wse=a("strong"),pto=o("sew-d"),_to=o(" \u2014 "),yP=a("a"),uto=o("SEWDConfig"),bto=o(" (SEW-D model)"),vto=l(),Mg=a("li"),Ase=a("strong"),Fto=o("speech-encoder-decoder"),Tto=o(" \u2014 "),xP=a("a"),Mto=o("SpeechEncoderDecoderConfig"),Eto=o(" (Speech Encoder decoder model)"),Cto=l(),Eg=a("li"),Lse=a("strong"),wto=o("speech_to_text"),Ato=o(" \u2014 "),$P=a("a"),Lto=o("Speech2TextConfig"),yto=o(" (Speech2Text model)"),xto=l(),Cg=a("li"),yse=a("strong"),$to=o("speech_to_text_2"),kto=o(" \u2014 "),kP=a("a"),Sto=o("Speech2Text2Config"),Rto=o(" (Speech2Text2 model)"),Pto=l(),wg=a("li"),xse=a("strong"),Bto=o("splinter"),Nto=o(" \u2014 "),SP=a("a"),Ito=o("SplinterConfig"),qto=o(" (Splinter model)"),jto=l(),Ag=a("li"),$se=a("strong"),Dto=o("squeezebert"),Gto=o(" \u2014 "),RP=a("a"),Oto=o("SqueezeBertConfig"),Vto=o(" (SqueezeBERT model)"),Xto=l(),Lg=a("li"),kse=a("strong"),zto=o("swin"),Qto=o(" \u2014 "),PP=a("a"),Wto=o("SwinConfig"),Hto=o(" (Swin Transformer model)"),Uto=l(),yg=a("li"),Sse=a("strong"),Jto=o("t5"),Yto=o(" \u2014 "),BP=a("a"),Kto=o("T5Config"),Zto=o(" (T5 model)"),eao=l(),xg=a("li"),Rse=a("strong"),oao=o("tapas"),rao=o(" \u2014 "),NP=a("a"),tao=o("TapasConfig"),aao=o(" (TAPAS model)"),nao=l(),$g=a("li"),Pse=a("strong"),sao=o("trajectory_transformer"),lao=o(" \u2014 "),IP=a("a"),iao=o("TrajectoryTransformerConfig"),dao=o(" (Trajectory Transformer model)"),cao=l(),kg=a("li"),Bse=a("strong"),fao=o("transfo-xl"),mao=o(" \u2014 "),qP=a("a"),gao=o("TransfoXLConfig"),hao=o(" (Transformer-XL model)"),pao=l(),Sg=a("li"),Nse=a("strong"),_ao=o("trocr"),uao=o(" \u2014 "),jP=a("a"),bao=o("TrOCRConfig"),vao=o(" (TrOCR model)"),Fao=l(),Rg=a("li"),Ise=a("strong"),Tao=o("unispeech"),Mao=o(" \u2014 "),DP=a("a"),Eao=o("UniSpeechConfig"),Cao=o(" (UniSpeech model)"),wao=l(),Pg=a("li"),qse=a("strong"),Aao=o("unispeech-sat"),Lao=o(" \u2014 "),GP=a("a"),yao=o("UniSpeechSatConfig"),xao=o(" (UniSpeechSat model)"),$ao=l(),Bg=a("li"),jse=a("strong"),kao=o("van"),Sao=o(" \u2014 "),OP=a("a"),Rao=o("VanConfig"),Pao=o(" (VAN model)"),Bao=l(),Ng=a("li"),Dse=a("strong"),Nao=o("vilt"),Iao=o(" \u2014 "),VP=a("a"),qao=o("ViltConfig"),jao=o(" (ViLT model)"),Dao=l(),Ig=a("li"),Gse=a("strong"),Gao=o("vision-encoder-decoder"),Oao=o(" \u2014 "),XP=a("a"),Vao=o("VisionEncoderDecoderConfig"),Xao=o(" (Vision Encoder decoder model)"),zao=l(),qg=a("li"),Ose=a("strong"),Qao=o("vision-text-dual-encoder"),Wao=o(" \u2014 "),zP=a("a"),Hao=o("VisionTextDualEncoderConfig"),Uao=o(" (VisionTextDualEncoder model)"),Jao=l(),jg=a("li"),Vse=a("strong"),Yao=o("visual_bert"),Kao=o(" \u2014 "),QP=a("a"),Zao=o("VisualBertConfig"),eno=o(" (VisualBERT model)"),ono=l(),Dg=a("li"),Xse=a("strong"),rno=o("vit"),tno=o(" \u2014 "),WP=a("a"),ano=o("ViTConfig"),nno=o(" (ViT model)"),sno=l(),Gg=a("li"),zse=a("strong"),lno=o("vit_mae"),ino=o(" \u2014 "),HP=a("a"),dno=o("ViTMAEConfig"),cno=o(" (ViTMAE model)"),fno=l(),Og=a("li"),Qse=a("strong"),mno=o("wav2vec2"),gno=o(" \u2014 "),UP=a("a"),hno=o("Wav2Vec2Config"),pno=o(" (Wav2Vec2 model)"),_no=l(),Vg=a("li"),Wse=a("strong"),uno=o("wav2vec2-conformer"),bno=o(" \u2014 "),JP=a("a"),vno=o("Wav2Vec2ConformerConfig"),Fno=o(" (Wav2Vec2-Conformer model)"),Tno=l(),Xg=a("li"),Hse=a("strong"),Mno=o("wavlm"),Eno=o(" \u2014 "),YP=a("a"),Cno=o("WavLMConfig"),wno=o(" (WavLM model)"),Ano=l(),zg=a("li"),Use=a("strong"),Lno=o("xglm"),yno=o(" \u2014 "),KP=a("a"),xno=o("XGLMConfig"),$no=o(" (XGLM model)"),kno=l(),Qg=a("li"),Jse=a("strong"),Sno=o("xlm"),Rno=o(" \u2014 "),ZP=a("a"),Pno=o("XLMConfig"),Bno=o(" (XLM model)"),Nno=l(),Wg=a("li"),Yse=a("strong"),Ino=o("xlm-prophetnet"),qno=o(" \u2014 "),eB=a("a"),jno=o("XLMProphetNetConfig"),Dno=o(" (XLM-ProphetNet model)"),Gno=l(),Hg=a("li"),Kse=a("strong"),Ono=o("xlm-roberta"),Vno=o(" \u2014 "),oB=a("a"),Xno=o("XLMRobertaConfig"),zno=o(" (XLM-RoBERTa model)"),Qno=l(),Ug=a("li"),Zse=a("strong"),Wno=o("xlm-roberta-xl"),Hno=o(" \u2014 "),rB=a("a"),Uno=o("XLMRobertaXLConfig"),Jno=o(" (XLM-RoBERTa-XL model)"),Yno=l(),Jg=a("li"),ele=a("strong"),Kno=o("xlnet"),Zno=o(" \u2014 "),tB=a("a"),eso=o("XLNetConfig"),oso=o(" (XLNet model)"),rso=l(),Yg=a("li"),ole=a("strong"),tso=o("yolos"),aso=o(" \u2014 "),aB=a("a"),nso=o("YolosConfig"),sso=o(" (YOLOS model)"),lso=l(),Kg=a("li"),rle=a("strong"),iso=o("yoso"),dso=o(" \u2014 "),nB=a("a"),cso=o("YosoConfig"),fso=o(" (YOSO model)"),mso=l(),F(Zg.$$.fragment),gso=l(),eh=a("div"),F(uL.$$.fragment),hso=l(),tle=a("p"),pso=o("Register a new configuration for this class."),xXe=l(),qi=a("h2"),oh=a("a"),ale=a("span"),F(bL.$$.fragment),_so=l(),nle=a("span"),uso=o("AutoTokenizer"),$Xe=l(),Lo=a("div"),F(vL.$$.fragment),bso=l(),FL=a("p"),vso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sB=a("a"),Fso=o("AutoTokenizer.from_pretrained()"),Tso=o(" class method."),Mso=l(),TL=a("p"),Eso=o("This class cannot be instantiated directly using "),sle=a("code"),Cso=o("__init__()"),wso=o(" (throws an error)."),Aso=l(),yr=a("div"),F(ML.$$.fragment),Lso=l(),lle=a("p"),yso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xso=l(),Pa=a("p"),$so=o("The tokenizer class to instantiate is selected based on the "),ile=a("code"),kso=o("model_type"),Sso=o(` property of the config object (either
passed as an argument or loaded from `),dle=a("code"),Rso=o("pretrained_model_name_or_path"),Pso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cle=a("code"),Bso=o("pretrained_model_name_or_path"),Nso=o(":"),Iso=l(),k=a("ul"),jn=a("li"),fle=a("strong"),qso=o("albert"),jso=o(" \u2014 "),lB=a("a"),Dso=o("AlbertTokenizer"),Gso=o(" or "),iB=a("a"),Oso=o("AlbertTokenizerFast"),Vso=o(" (ALBERT model)"),Xso=l(),Dn=a("li"),mle=a("strong"),zso=o("bart"),Qso=o(" \u2014 "),dB=a("a"),Wso=o("BartTokenizer"),Hso=o(" or "),cB=a("a"),Uso=o("BartTokenizerFast"),Jso=o(" (BART model)"),Yso=l(),Gn=a("li"),gle=a("strong"),Kso=o("barthez"),Zso=o(" \u2014 "),fB=a("a"),elo=o("BarthezTokenizer"),olo=o(" or "),mB=a("a"),rlo=o("BarthezTokenizerFast"),tlo=o(" (BARThez model)"),alo=l(),rh=a("li"),hle=a("strong"),nlo=o("bartpho"),slo=o(" \u2014 "),gB=a("a"),llo=o("BartphoTokenizer"),ilo=o(" (BARTpho model)"),dlo=l(),On=a("li"),ple=a("strong"),clo=o("bert"),flo=o(" \u2014 "),hB=a("a"),mlo=o("BertTokenizer"),glo=o(" or "),pB=a("a"),hlo=o("BertTokenizerFast"),plo=o(" (BERT model)"),_lo=l(),th=a("li"),_le=a("strong"),ulo=o("bert-generation"),blo=o(" \u2014 "),_B=a("a"),vlo=o("BertGenerationTokenizer"),Flo=o(" (Bert Generation model)"),Tlo=l(),ah=a("li"),ule=a("strong"),Mlo=o("bert-japanese"),Elo=o(" \u2014 "),uB=a("a"),Clo=o("BertJapaneseTokenizer"),wlo=o(" (BertJapanese model)"),Alo=l(),nh=a("li"),ble=a("strong"),Llo=o("bertweet"),ylo=o(" \u2014 "),bB=a("a"),xlo=o("BertweetTokenizer"),$lo=o(" (BERTweet model)"),klo=l(),Vn=a("li"),vle=a("strong"),Slo=o("big_bird"),Rlo=o(" \u2014 "),vB=a("a"),Plo=o("BigBirdTokenizer"),Blo=o(" or "),FB=a("a"),Nlo=o("BigBirdTokenizerFast"),Ilo=o(" (BigBird model)"),qlo=l(),Xn=a("li"),Fle=a("strong"),jlo=o("bigbird_pegasus"),Dlo=o(" \u2014 "),TB=a("a"),Glo=o("PegasusTokenizer"),Olo=o(" or "),MB=a("a"),Vlo=o("PegasusTokenizerFast"),Xlo=o(" (BigBird-Pegasus model)"),zlo=l(),zn=a("li"),Tle=a("strong"),Qlo=o("blenderbot"),Wlo=o(" \u2014 "),EB=a("a"),Hlo=o("BlenderbotTokenizer"),Ulo=o(" or "),CB=a("a"),Jlo=o("BlenderbotTokenizerFast"),Ylo=o(" (Blenderbot model)"),Klo=l(),sh=a("li"),Mle=a("strong"),Zlo=o("blenderbot-small"),eio=o(" \u2014 "),wB=a("a"),oio=o("BlenderbotSmallTokenizer"),rio=o(" (BlenderbotSmall model)"),tio=l(),lh=a("li"),Ele=a("strong"),aio=o("bloom"),nio=o(" \u2014 "),AB=a("a"),sio=o("BloomTokenizerFast"),lio=o(" (BLOOM model)"),iio=l(),ih=a("li"),Cle=a("strong"),dio=o("byt5"),cio=o(" \u2014 "),LB=a("a"),fio=o("ByT5Tokenizer"),mio=o(" (ByT5 model)"),gio=l(),Qn=a("li"),wle=a("strong"),hio=o("camembert"),pio=o(" \u2014 "),yB=a("a"),_io=o("CamembertTokenizer"),uio=o(" or "),xB=a("a"),bio=o("CamembertTokenizerFast"),vio=o(" (CamemBERT model)"),Fio=l(),dh=a("li"),Ale=a("strong"),Tio=o("canine"),Mio=o(" \u2014 "),$B=a("a"),Eio=o("CanineTokenizer"),Cio=o(" (CANINE model)"),wio=l(),Wn=a("li"),Lle=a("strong"),Aio=o("clip"),Lio=o(" \u2014 "),kB=a("a"),yio=o("CLIPTokenizer"),xio=o(" or "),SB=a("a"),$io=o("CLIPTokenizerFast"),kio=o(" (CLIP model)"),Sio=l(),Hn=a("li"),yle=a("strong"),Rio=o("codegen"),Pio=o(" \u2014 "),RB=a("a"),Bio=o("CodeGenTokenizer"),Nio=o(" or "),PB=a("a"),Iio=o("CodeGenTokenizerFast"),qio=o(" (CodeGen model)"),jio=l(),Un=a("li"),xle=a("strong"),Dio=o("convbert"),Gio=o(" \u2014 "),BB=a("a"),Oio=o("ConvBertTokenizer"),Vio=o(" or "),NB=a("a"),Xio=o("ConvBertTokenizerFast"),zio=o(" (ConvBERT model)"),Qio=l(),Jn=a("li"),$le=a("strong"),Wio=o("cpm"),Hio=o(" \u2014 "),IB=a("a"),Uio=o("CpmTokenizer"),Jio=o(" or "),qB=a("a"),Yio=o("CpmTokenizerFast"),Kio=o(" (CPM model)"),Zio=l(),ch=a("li"),kle=a("strong"),edo=o("ctrl"),odo=o(" \u2014 "),jB=a("a"),rdo=o("CTRLTokenizer"),tdo=o(" (CTRL model)"),ado=l(),Yn=a("li"),Sle=a("strong"),ndo=o("data2vec-text"),sdo=o(" \u2014 "),DB=a("a"),ldo=o("RobertaTokenizer"),ido=o(" or "),GB=a("a"),ddo=o("RobertaTokenizerFast"),cdo=o(" (Data2VecText model)"),fdo=l(),Kn=a("li"),Rle=a("strong"),mdo=o("deberta"),gdo=o(" \u2014 "),OB=a("a"),hdo=o("DebertaTokenizer"),pdo=o(" or "),VB=a("a"),_do=o("DebertaTokenizerFast"),udo=o(" (DeBERTa model)"),bdo=l(),Zn=a("li"),Ple=a("strong"),vdo=o("deberta-v2"),Fdo=o(" \u2014 "),XB=a("a"),Tdo=o("DebertaV2Tokenizer"),Mdo=o(" or "),zB=a("a"),Edo=o("DebertaV2TokenizerFast"),Cdo=o(" (DeBERTa-v2 model)"),wdo=l(),es=a("li"),Ble=a("strong"),Ado=o("distilbert"),Ldo=o(" \u2014 "),QB=a("a"),ydo=o("DistilBertTokenizer"),xdo=o(" or "),WB=a("a"),$do=o("DistilBertTokenizerFast"),kdo=o(" (DistilBERT model)"),Sdo=l(),os=a("li"),Nle=a("strong"),Rdo=o("dpr"),Pdo=o(" \u2014 "),HB=a("a"),Bdo=o("DPRQuestionEncoderTokenizer"),Ndo=o(" or "),UB=a("a"),Ido=o("DPRQuestionEncoderTokenizerFast"),qdo=o(" (DPR model)"),jdo=l(),rs=a("li"),Ile=a("strong"),Ddo=o("electra"),Gdo=o(" \u2014 "),JB=a("a"),Odo=o("ElectraTokenizer"),Vdo=o(" or "),YB=a("a"),Xdo=o("ElectraTokenizerFast"),zdo=o(" (ELECTRA model)"),Qdo=l(),fh=a("li"),qle=a("strong"),Wdo=o("flaubert"),Hdo=o(" \u2014 "),KB=a("a"),Udo=o("FlaubertTokenizer"),Jdo=o(" (FlauBERT model)"),Ydo=l(),ts=a("li"),jle=a("strong"),Kdo=o("fnet"),Zdo=o(" \u2014 "),ZB=a("a"),eco=o("FNetTokenizer"),oco=o(" or "),eN=a("a"),rco=o("FNetTokenizerFast"),tco=o(" (FNet model)"),aco=l(),mh=a("li"),Dle=a("strong"),nco=o("fsmt"),sco=o(" \u2014 "),oN=a("a"),lco=o("FSMTTokenizer"),ico=o(" (FairSeq Machine-Translation model)"),dco=l(),as=a("li"),Gle=a("strong"),cco=o("funnel"),fco=o(" \u2014 "),rN=a("a"),mco=o("FunnelTokenizer"),gco=o(" or "),tN=a("a"),hco=o("FunnelTokenizerFast"),pco=o(" (Funnel Transformer model)"),_co=l(),ns=a("li"),Ole=a("strong"),uco=o("gpt2"),bco=o(" \u2014 "),aN=a("a"),vco=o("GPT2Tokenizer"),Fco=o(" or "),nN=a("a"),Tco=o("GPT2TokenizerFast"),Mco=o(" (OpenAI GPT-2 model)"),Eco=l(),ss=a("li"),Vle=a("strong"),Cco=o("gpt_neo"),wco=o(" \u2014 "),sN=a("a"),Aco=o("GPT2Tokenizer"),Lco=o(" or "),lN=a("a"),yco=o("GPT2TokenizerFast"),xco=o(" (GPT Neo model)"),$co=l(),gh=a("li"),Xle=a("strong"),kco=o("gpt_neox"),Sco=o(" \u2014 "),iN=a("a"),Rco=o("GPTNeoXTokenizerFast"),Pco=o(" (GPT NeoX model)"),Bco=l(),ls=a("li"),zle=a("strong"),Nco=o("gptj"),Ico=o(" \u2014 "),dN=a("a"),qco=o("GPT2Tokenizer"),jco=o(" or "),cN=a("a"),Dco=o("GPT2TokenizerFast"),Gco=o(" (GPT-J model)"),Oco=l(),is=a("li"),Qle=a("strong"),Vco=o("groupvit"),Xco=o(" \u2014 "),fN=a("a"),zco=o("CLIPTokenizer"),Qco=o(" or "),mN=a("a"),Wco=o("CLIPTokenizerFast"),Hco=o(" (GroupViT model)"),Uco=l(),ds=a("li"),Wle=a("strong"),Jco=o("herbert"),Yco=o(" \u2014 "),gN=a("a"),Kco=o("HerbertTokenizer"),Zco=o(" or "),hN=a("a"),efo=o("HerbertTokenizerFast"),ofo=o(" (HerBERT model)"),rfo=l(),hh=a("li"),Hle=a("strong"),tfo=o("hubert"),afo=o(" \u2014 "),pN=a("a"),nfo=o("Wav2Vec2CTCTokenizer"),sfo=o(" (Hubert model)"),lfo=l(),cs=a("li"),Ule=a("strong"),ifo=o("ibert"),dfo=o(" \u2014 "),_N=a("a"),cfo=o("RobertaTokenizer"),ffo=o(" or "),uN=a("a"),mfo=o("RobertaTokenizerFast"),gfo=o(" (I-BERT model)"),hfo=l(),ph=a("li"),Jle=a("strong"),pfo=o("jukebox"),_fo=o(" \u2014 "),Yle=a("code"),ufo=o("JukeboxTokenizer"),bfo=o(" (Jukebox model)"),vfo=l(),fs=a("li"),Kle=a("strong"),Ffo=o("layoutlm"),Tfo=o(" \u2014 "),bN=a("a"),Mfo=o("LayoutLMTokenizer"),Efo=o(" or "),vN=a("a"),Cfo=o("LayoutLMTokenizerFast"),wfo=o(" (LayoutLM model)"),Afo=l(),ms=a("li"),Zle=a("strong"),Lfo=o("layoutlmv2"),yfo=o(" \u2014 "),FN=a("a"),xfo=o("LayoutLMv2Tokenizer"),$fo=o(" or "),TN=a("a"),kfo=o("LayoutLMv2TokenizerFast"),Sfo=o(" (LayoutLMv2 model)"),Rfo=l(),gs=a("li"),eie=a("strong"),Pfo=o("layoutlmv3"),Bfo=o(" \u2014 "),MN=a("a"),Nfo=o("LayoutLMv3Tokenizer"),Ifo=o(" or "),EN=a("a"),qfo=o("LayoutLMv3TokenizerFast"),jfo=o(" (LayoutLMv3 model)"),Dfo=l(),hs=a("li"),oie=a("strong"),Gfo=o("layoutxlm"),Ofo=o(" \u2014 "),CN=a("a"),Vfo=o("LayoutXLMTokenizer"),Xfo=o(" or "),wN=a("a"),zfo=o("LayoutXLMTokenizerFast"),Qfo=o(" (LayoutXLM model)"),Wfo=l(),ps=a("li"),rie=a("strong"),Hfo=o("led"),Ufo=o(" \u2014 "),AN=a("a"),Jfo=o("LEDTokenizer"),Yfo=o(" or "),LN=a("a"),Kfo=o("LEDTokenizerFast"),Zfo=o(" (LED model)"),emo=l(),_s=a("li"),tie=a("strong"),omo=o("longformer"),rmo=o(" \u2014 "),yN=a("a"),tmo=o("LongformerTokenizer"),amo=o(" or "),xN=a("a"),nmo=o("LongformerTokenizerFast"),smo=o(" (Longformer model)"),lmo=l(),us=a("li"),aie=a("strong"),imo=o("longt5"),dmo=o(" \u2014 "),$N=a("a"),cmo=o("T5Tokenizer"),fmo=o(" or "),kN=a("a"),mmo=o("T5TokenizerFast"),gmo=o(" (LongT5 model)"),hmo=l(),_h=a("li"),nie=a("strong"),pmo=o("luke"),_mo=o(" \u2014 "),SN=a("a"),umo=o("LukeTokenizer"),bmo=o(" (LUKE model)"),vmo=l(),bs=a("li"),sie=a("strong"),Fmo=o("lxmert"),Tmo=o(" \u2014 "),RN=a("a"),Mmo=o("LxmertTokenizer"),Emo=o(" or "),PN=a("a"),Cmo=o("LxmertTokenizerFast"),wmo=o(" (LXMERT model)"),Amo=l(),uh=a("li"),lie=a("strong"),Lmo=o("m2m_100"),ymo=o(" \u2014 "),BN=a("a"),xmo=o("M2M100Tokenizer"),$mo=o(" (M2M100 model)"),kmo=l(),bh=a("li"),iie=a("strong"),Smo=o("marian"),Rmo=o(" \u2014 "),NN=a("a"),Pmo=o("MarianTokenizer"),Bmo=o(" (Marian model)"),Nmo=l(),vs=a("li"),die=a("strong"),Imo=o("mbart"),qmo=o(" \u2014 "),IN=a("a"),jmo=o("MBartTokenizer"),Dmo=o(" or "),qN=a("a"),Gmo=o("MBartTokenizerFast"),Omo=o(" (mBART model)"),Vmo=l(),Fs=a("li"),cie=a("strong"),Xmo=o("mbart50"),zmo=o(" \u2014 "),jN=a("a"),Qmo=o("MBart50Tokenizer"),Wmo=o(" or "),DN=a("a"),Hmo=o("MBart50TokenizerFast"),Umo=o(" (mBART-50 model)"),Jmo=l(),Ts=a("li"),fie=a("strong"),Ymo=o("megatron-bert"),Kmo=o(" \u2014 "),GN=a("a"),Zmo=o("BertTokenizer"),ego=o(" or "),ON=a("a"),ogo=o("BertTokenizerFast"),rgo=o(" (Megatron-BERT model)"),tgo=l(),vh=a("li"),mie=a("strong"),ago=o("mluke"),ngo=o(" \u2014 "),VN=a("a"),sgo=o("MLukeTokenizer"),lgo=o(" (mLUKE model)"),igo=l(),Ms=a("li"),gie=a("strong"),dgo=o("mobilebert"),cgo=o(" \u2014 "),XN=a("a"),fgo=o("MobileBertTokenizer"),mgo=o(" or "),zN=a("a"),ggo=o("MobileBertTokenizerFast"),hgo=o(" (MobileBERT model)"),pgo=l(),Es=a("li"),hie=a("strong"),_go=o("mpnet"),ugo=o(" \u2014 "),QN=a("a"),bgo=o("MPNetTokenizer"),vgo=o(" or "),WN=a("a"),Fgo=o("MPNetTokenizerFast"),Tgo=o(" (MPNet model)"),Mgo=l(),Cs=a("li"),pie=a("strong"),Ego=o("mt5"),Cgo=o(" \u2014 "),HN=a("a"),wgo=o("MT5Tokenizer"),Ago=o(" or "),UN=a("a"),Lgo=o("MT5TokenizerFast"),ygo=o(" (MT5 model)"),xgo=l(),ws=a("li"),_ie=a("strong"),$go=o("mvp"),kgo=o(" \u2014 "),JN=a("a"),Sgo=o("MvpTokenizer"),Rgo=o(" or "),YN=a("a"),Pgo=o("MvpTokenizerFast"),Bgo=o(" (MVP model)"),Ngo=l(),As=a("li"),uie=a("strong"),Igo=o("nezha"),qgo=o(" \u2014 "),KN=a("a"),jgo=o("BertTokenizer"),Dgo=o(" or "),ZN=a("a"),Ggo=o("BertTokenizerFast"),Ogo=o(" (Nezha model)"),Vgo=l(),Ls=a("li"),bie=a("strong"),Xgo=o("nllb"),zgo=o(" \u2014 "),eI=a("a"),Qgo=o("NllbTokenizer"),Wgo=o(" or "),oI=a("a"),Hgo=o("NllbTokenizerFast"),Ugo=o(" (NLLB model)"),Jgo=l(),ys=a("li"),vie=a("strong"),Ygo=o("nystromformer"),Kgo=o(" \u2014 "),rI=a("a"),Zgo=o("AlbertTokenizer"),eho=o(" or "),tI=a("a"),oho=o("AlbertTokenizerFast"),rho=o(" (Nystr\xF6mformer model)"),tho=l(),xs=a("li"),Fie=a("strong"),aho=o("openai-gpt"),nho=o(" \u2014 "),aI=a("a"),sho=o("OpenAIGPTTokenizer"),lho=o(" or "),nI=a("a"),iho=o("OpenAIGPTTokenizerFast"),dho=o(" (OpenAI GPT model)"),cho=l(),Fh=a("li"),Tie=a("strong"),fho=o("opt"),mho=o(" \u2014 "),sI=a("a"),gho=o("GPT2Tokenizer"),hho=o(" (OPT model)"),pho=l(),$s=a("li"),Mie=a("strong"),_ho=o("pegasus"),uho=o(" \u2014 "),lI=a("a"),bho=o("PegasusTokenizer"),vho=o(" or "),iI=a("a"),Fho=o("PegasusTokenizerFast"),Tho=o(" (Pegasus model)"),Mho=l(),Th=a("li"),Eie=a("strong"),Eho=o("perceiver"),Cho=o(" \u2014 "),dI=a("a"),who=o("PerceiverTokenizer"),Aho=o(" (Perceiver model)"),Lho=l(),Mh=a("li"),Cie=a("strong"),yho=o("phobert"),xho=o(" \u2014 "),cI=a("a"),$ho=o("PhobertTokenizer"),kho=o(" (PhoBERT model)"),Sho=l(),Eh=a("li"),wie=a("strong"),Rho=o("plbart"),Pho=o(" \u2014 "),fI=a("a"),Bho=o("PLBartTokenizer"),Nho=o(" (PLBart model)"),Iho=l(),Ch=a("li"),Aie=a("strong"),qho=o("prophetnet"),jho=o(" \u2014 "),mI=a("a"),Dho=o("ProphetNetTokenizer"),Gho=o(" (ProphetNet model)"),Oho=l(),ks=a("li"),Lie=a("strong"),Vho=o("qdqbert"),Xho=o(" \u2014 "),gI=a("a"),zho=o("BertTokenizer"),Qho=o(" or "),hI=a("a"),Who=o("BertTokenizerFast"),Hho=o(" (QDQBert model)"),Uho=l(),wh=a("li"),yie=a("strong"),Jho=o("rag"),Yho=o(" \u2014 "),pI=a("a"),Kho=o("RagTokenizer"),Zho=o(" (RAG model)"),epo=l(),Ss=a("li"),xie=a("strong"),opo=o("realm"),rpo=o(" \u2014 "),_I=a("a"),tpo=o("RealmTokenizer"),apo=o(" or "),uI=a("a"),npo=o("RealmTokenizerFast"),spo=o(" (REALM model)"),lpo=l(),Rs=a("li"),$ie=a("strong"),ipo=o("reformer"),dpo=o(" \u2014 "),bI=a("a"),cpo=o("ReformerTokenizer"),fpo=o(" or "),vI=a("a"),mpo=o("ReformerTokenizerFast"),gpo=o(" (Reformer model)"),hpo=l(),Ps=a("li"),kie=a("strong"),ppo=o("rembert"),_po=o(" \u2014 "),FI=a("a"),upo=o("RemBertTokenizer"),bpo=o(" or "),TI=a("a"),vpo=o("RemBertTokenizerFast"),Fpo=o(" (RemBERT model)"),Tpo=l(),Bs=a("li"),Sie=a("strong"),Mpo=o("retribert"),Epo=o(" \u2014 "),MI=a("a"),Cpo=o("RetriBertTokenizer"),wpo=o(" or "),EI=a("a"),Apo=o("RetriBertTokenizerFast"),Lpo=o(" (RetriBERT model)"),ypo=l(),Ns=a("li"),Rie=a("strong"),xpo=o("roberta"),$po=o(" \u2014 "),CI=a("a"),kpo=o("RobertaTokenizer"),Spo=o(" or "),wI=a("a"),Rpo=o("RobertaTokenizerFast"),Ppo=o(" (RoBERTa model)"),Bpo=l(),Is=a("li"),Pie=a("strong"),Npo=o("roformer"),Ipo=o(" \u2014 "),AI=a("a"),qpo=o("RoFormerTokenizer"),jpo=o(" or "),LI=a("a"),Dpo=o("RoFormerTokenizerFast"),Gpo=o(" (RoFormer model)"),Opo=l(),Ah=a("li"),Bie=a("strong"),Vpo=o("speech_to_text"),Xpo=o(" \u2014 "),yI=a("a"),zpo=o("Speech2TextTokenizer"),Qpo=o(" (Speech2Text model)"),Wpo=l(),Lh=a("li"),Nie=a("strong"),Hpo=o("speech_to_text_2"),Upo=o(" \u2014 "),xI=a("a"),Jpo=o("Speech2Text2Tokenizer"),Ypo=o(" (Speech2Text2 model)"),Kpo=l(),qs=a("li"),Iie=a("strong"),Zpo=o("splinter"),e_o=o(" \u2014 "),$I=a("a"),o_o=o("SplinterTokenizer"),r_o=o(" or "),kI=a("a"),t_o=o("SplinterTokenizerFast"),a_o=o(" (Splinter model)"),n_o=l(),js=a("li"),qie=a("strong"),s_o=o("squeezebert"),l_o=o(" \u2014 "),SI=a("a"),i_o=o("SqueezeBertTokenizer"),d_o=o(" or "),RI=a("a"),c_o=o("SqueezeBertTokenizerFast"),f_o=o(" (SqueezeBERT model)"),m_o=l(),Ds=a("li"),jie=a("strong"),g_o=o("t5"),h_o=o(" \u2014 "),PI=a("a"),p_o=o("T5Tokenizer"),__o=o(" or "),BI=a("a"),u_o=o("T5TokenizerFast"),b_o=o(" (T5 model)"),v_o=l(),yh=a("li"),Die=a("strong"),F_o=o("tapas"),T_o=o(" \u2014 "),NI=a("a"),M_o=o("TapasTokenizer"),E_o=o(" (TAPAS model)"),C_o=l(),xh=a("li"),Gie=a("strong"),w_o=o("tapex"),A_o=o(" \u2014 "),II=a("a"),L_o=o("TapexTokenizer"),y_o=o(" (TAPEX model)"),x_o=l(),$h=a("li"),Oie=a("strong"),$_o=o("transfo-xl"),k_o=o(" \u2014 "),qI=a("a"),S_o=o("TransfoXLTokenizer"),R_o=o(" (Transformer-XL model)"),P_o=l(),Gs=a("li"),Vie=a("strong"),B_o=o("vilt"),N_o=o(" \u2014 "),jI=a("a"),I_o=o("BertTokenizer"),q_o=o(" or "),DI=a("a"),j_o=o("BertTokenizerFast"),D_o=o(" (ViLT model)"),G_o=l(),Os=a("li"),Xie=a("strong"),O_o=o("visual_bert"),V_o=o(" \u2014 "),GI=a("a"),X_o=o("BertTokenizer"),z_o=o(" or "),OI=a("a"),Q_o=o("BertTokenizerFast"),W_o=o(" (VisualBERT model)"),H_o=l(),kh=a("li"),zie=a("strong"),U_o=o("wav2vec2"),J_o=o(" \u2014 "),VI=a("a"),Y_o=o("Wav2Vec2CTCTokenizer"),K_o=o(" (Wav2Vec2 model)"),Z_o=l(),Sh=a("li"),Qie=a("strong"),euo=o("wav2vec2-conformer"),ouo=o(" \u2014 "),XI=a("a"),ruo=o("Wav2Vec2CTCTokenizer"),tuo=o(" (Wav2Vec2-Conformer model)"),auo=l(),Rh=a("li"),Wie=a("strong"),nuo=o("wav2vec2_phoneme"),suo=o(" \u2014 "),zI=a("a"),luo=o("Wav2Vec2PhonemeCTCTokenizer"),iuo=o(" (Wav2Vec2Phoneme model)"),duo=l(),Vs=a("li"),Hie=a("strong"),cuo=o("xglm"),fuo=o(" \u2014 "),QI=a("a"),muo=o("XGLMTokenizer"),guo=o(" or "),WI=a("a"),huo=o("XGLMTokenizerFast"),puo=o(" (XGLM model)"),_uo=l(),Ph=a("li"),Uie=a("strong"),uuo=o("xlm"),buo=o(" \u2014 "),HI=a("a"),vuo=o("XLMTokenizer"),Fuo=o(" (XLM model)"),Tuo=l(),Bh=a("li"),Jie=a("strong"),Muo=o("xlm-prophetnet"),Euo=o(" \u2014 "),UI=a("a"),Cuo=o("XLMProphetNetTokenizer"),wuo=o(" (XLM-ProphetNet model)"),Auo=l(),Xs=a("li"),Yie=a("strong"),Luo=o("xlm-roberta"),yuo=o(" \u2014 "),JI=a("a"),xuo=o("XLMRobertaTokenizer"),$uo=o(" or "),YI=a("a"),kuo=o("XLMRobertaTokenizerFast"),Suo=o(" (XLM-RoBERTa model)"),Ruo=l(),zs=a("li"),Kie=a("strong"),Puo=o("xlm-roberta-xl"),Buo=o(" \u2014 "),KI=a("a"),Nuo=o("RobertaTokenizer"),Iuo=o(" or "),ZI=a("a"),quo=o("RobertaTokenizerFast"),juo=o(" (XLM-RoBERTa-XL model)"),Duo=l(),Qs=a("li"),Zie=a("strong"),Guo=o("xlnet"),Ouo=o(" \u2014 "),eq=a("a"),Vuo=o("XLNetTokenizer"),Xuo=o(" or "),oq=a("a"),zuo=o("XLNetTokenizerFast"),Quo=o(" (XLNet model)"),Wuo=l(),Ws=a("li"),ede=a("strong"),Huo=o("yoso"),Uuo=o(" \u2014 "),rq=a("a"),Juo=o("AlbertTokenizer"),Yuo=o(" or "),tq=a("a"),Kuo=o("AlbertTokenizerFast"),Zuo=o(" (YOSO model)"),e2o=l(),F(Nh.$$.fragment),o2o=l(),Ih=a("div"),F(EL.$$.fragment),r2o=l(),ode=a("p"),t2o=o("Register a new tokenizer in this mapping."),kXe=l(),ji=a("h2"),qh=a("a"),rde=a("span"),F(CL.$$.fragment),a2o=l(),tde=a("span"),n2o=o("AutoFeatureExtractor"),SXe=l(),yo=a("div"),F(wL.$$.fragment),s2o=l(),AL=a("p"),l2o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aq=a("a"),i2o=o("AutoFeatureExtractor.from_pretrained()"),d2o=o(" class method."),c2o=l(),LL=a("p"),f2o=o("This class cannot be instantiated directly using "),ade=a("code"),m2o=o("__init__()"),g2o=o(" (throws an error)."),h2o=l(),Ue=a("div"),F(yL.$$.fragment),p2o=l(),nde=a("p"),_2o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),u2o=l(),Ba=a("p"),b2o=o("The feature extractor class to instantiate is selected based on the "),sde=a("code"),v2o=o("model_type"),F2o=o(` property of the config object
(either passed as an argument or loaded from `),lde=a("code"),T2o=o("pretrained_model_name_or_path"),M2o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ide=a("code"),E2o=o("pretrained_model_name_or_path"),C2o=o(":"),w2o=l(),Y=a("ul"),jh=a("li"),dde=a("strong"),A2o=o("beit"),L2o=o(" \u2014 "),nq=a("a"),y2o=o("BeitFeatureExtractor"),x2o=o(" (BEiT model)"),$2o=l(),Dh=a("li"),cde=a("strong"),k2o=o("clip"),S2o=o(" \u2014 "),sq=a("a"),R2o=o("CLIPFeatureExtractor"),P2o=o(" (CLIP model)"),B2o=l(),Gh=a("li"),fde=a("strong"),N2o=o("convnext"),I2o=o(" \u2014 "),lq=a("a"),q2o=o("ConvNextFeatureExtractor"),j2o=o(" (ConvNeXT model)"),D2o=l(),Oh=a("li"),mde=a("strong"),G2o=o("cvt"),O2o=o(" \u2014 "),iq=a("a"),V2o=o("ConvNextFeatureExtractor"),X2o=o(" (CvT model)"),z2o=l(),Vh=a("li"),gde=a("strong"),Q2o=o("data2vec-audio"),W2o=o(" \u2014 "),dq=a("a"),H2o=o("Wav2Vec2FeatureExtractor"),U2o=o(" (Data2VecAudio model)"),J2o=l(),Xh=a("li"),hde=a("strong"),Y2o=o("data2vec-vision"),K2o=o(" \u2014 "),cq=a("a"),Z2o=o("BeitFeatureExtractor"),e1o=o(" (Data2VecVision model)"),o1o=l(),zh=a("li"),pde=a("strong"),r1o=o("deit"),t1o=o(" \u2014 "),fq=a("a"),a1o=o("DeiTFeatureExtractor"),n1o=o(" (DeiT model)"),s1o=l(),Qh=a("li"),_de=a("strong"),l1o=o("detr"),i1o=o(" \u2014 "),mq=a("a"),d1o=o("DetrFeatureExtractor"),c1o=o(" (DETR model)"),f1o=l(),Wh=a("li"),ude=a("strong"),m1o=o("dpt"),g1o=o(" \u2014 "),gq=a("a"),h1o=o("DPTFeatureExtractor"),p1o=o(" (DPT model)"),_1o=l(),Hh=a("li"),bde=a("strong"),u1o=o("flava"),b1o=o(" \u2014 "),hq=a("a"),v1o=o("FlavaFeatureExtractor"),F1o=o(" (FLAVA model)"),T1o=l(),Uh=a("li"),vde=a("strong"),M1o=o("glpn"),E1o=o(" \u2014 "),pq=a("a"),C1o=o("GLPNFeatureExtractor"),w1o=o(" (GLPN model)"),A1o=l(),Jh=a("li"),Fde=a("strong"),L1o=o("groupvit"),y1o=o(" \u2014 "),_q=a("a"),x1o=o("CLIPFeatureExtractor"),$1o=o(" (GroupViT model)"),k1o=l(),Yh=a("li"),Tde=a("strong"),S1o=o("hubert"),R1o=o(" \u2014 "),uq=a("a"),P1o=o("Wav2Vec2FeatureExtractor"),B1o=o(" (Hubert model)"),N1o=l(),Kh=a("li"),Mde=a("strong"),I1o=o("imagegpt"),q1o=o(" \u2014 "),bq=a("a"),j1o=o("ImageGPTFeatureExtractor"),D1o=o(" (ImageGPT model)"),G1o=l(),Zh=a("li"),Ede=a("strong"),O1o=o("layoutlmv2"),V1o=o(" \u2014 "),vq=a("a"),X1o=o("LayoutLMv2FeatureExtractor"),z1o=o(" (LayoutLMv2 model)"),Q1o=l(),ep=a("li"),Cde=a("strong"),W1o=o("layoutlmv3"),H1o=o(" \u2014 "),Fq=a("a"),U1o=o("LayoutLMv3FeatureExtractor"),J1o=o(" (LayoutLMv3 model)"),Y1o=l(),op=a("li"),wde=a("strong"),K1o=o("levit"),Z1o=o(" \u2014 "),Tq=a("a"),ebo=o("LevitFeatureExtractor"),obo=o(" (LeViT model)"),rbo=l(),rp=a("li"),Ade=a("strong"),tbo=o("maskformer"),abo=o(" \u2014 "),Mq=a("a"),nbo=o("MaskFormerFeatureExtractor"),sbo=o(" (MaskFormer model)"),lbo=l(),tp=a("li"),Lde=a("strong"),ibo=o("mctct"),dbo=o(" \u2014 "),Eq=a("a"),cbo=o("MCTCTFeatureExtractor"),fbo=o(" (M-CTC-T model)"),mbo=l(),ap=a("li"),yde=a("strong"),gbo=o("mobilevit"),hbo=o(" \u2014 "),Cq=a("a"),pbo=o("MobileViTFeatureExtractor"),_bo=o(" (MobileViT model)"),ubo=l(),np=a("li"),xde=a("strong"),bbo=o("perceiver"),vbo=o(" \u2014 "),wq=a("a"),Fbo=o("PerceiverFeatureExtractor"),Tbo=o(" (Perceiver model)"),Mbo=l(),sp=a("li"),$de=a("strong"),Ebo=o("poolformer"),Cbo=o(" \u2014 "),Aq=a("a"),wbo=o("PoolFormerFeatureExtractor"),Abo=o(" (PoolFormer model)"),Lbo=l(),lp=a("li"),kde=a("strong"),ybo=o("regnet"),xbo=o(" \u2014 "),Lq=a("a"),$bo=o("ConvNextFeatureExtractor"),kbo=o(" (RegNet model)"),Sbo=l(),ip=a("li"),Sde=a("strong"),Rbo=o("resnet"),Pbo=o(" \u2014 "),yq=a("a"),Bbo=o("ConvNextFeatureExtractor"),Nbo=o(" (ResNet model)"),Ibo=l(),dp=a("li"),Rde=a("strong"),qbo=o("segformer"),jbo=o(" \u2014 "),xq=a("a"),Dbo=o("SegformerFeatureExtractor"),Gbo=o(" (SegFormer model)"),Obo=l(),cp=a("li"),Pde=a("strong"),Vbo=o("speech_to_text"),Xbo=o(" \u2014 "),$q=a("a"),zbo=o("Speech2TextFeatureExtractor"),Qbo=o(" (Speech2Text model)"),Wbo=l(),fp=a("li"),Bde=a("strong"),Hbo=o("swin"),Ubo=o(" \u2014 "),kq=a("a"),Jbo=o("ViTFeatureExtractor"),Ybo=o(" (Swin Transformer model)"),Kbo=l(),mp=a("li"),Nde=a("strong"),Zbo=o("van"),evo=o(" \u2014 "),Sq=a("a"),ovo=o("ConvNextFeatureExtractor"),rvo=o(" (VAN model)"),tvo=l(),gp=a("li"),Ide=a("strong"),avo=o("vilt"),nvo=o(" \u2014 "),Rq=a("a"),svo=o("ViltFeatureExtractor"),lvo=o(" (ViLT model)"),ivo=l(),hp=a("li"),qde=a("strong"),dvo=o("vit"),cvo=o(" \u2014 "),Pq=a("a"),fvo=o("ViTFeatureExtractor"),mvo=o(" (ViT model)"),gvo=l(),pp=a("li"),jde=a("strong"),hvo=o("vit_mae"),pvo=o(" \u2014 "),Bq=a("a"),_vo=o("ViTFeatureExtractor"),uvo=o(" (ViTMAE model)"),bvo=l(),_p=a("li"),Dde=a("strong"),vvo=o("wav2vec2"),Fvo=o(" \u2014 "),Nq=a("a"),Tvo=o("Wav2Vec2FeatureExtractor"),Mvo=o(" (Wav2Vec2 model)"),Evo=l(),up=a("li"),Gde=a("strong"),Cvo=o("wav2vec2-conformer"),wvo=o(" \u2014 "),Iq=a("a"),Avo=o("Wav2Vec2FeatureExtractor"),Lvo=o(" (Wav2Vec2-Conformer model)"),yvo=l(),bp=a("li"),Ode=a("strong"),xvo=o("yolos"),$vo=o(" \u2014 "),qq=a("a"),kvo=o("YolosFeatureExtractor"),Svo=o(" (YOLOS model)"),Rvo=l(),F(vp.$$.fragment),Pvo=l(),F(Fp.$$.fragment),Bvo=l(),Tp=a("div"),F(xL.$$.fragment),Nvo=l(),Vde=a("p"),Ivo=o("Register a new feature extractor for this class."),RXe=l(),Di=a("h2"),Mp=a("a"),Xde=a("span"),F($L.$$.fragment),qvo=l(),zde=a("span"),jvo=o("AutoProcessor"),PXe=l(),xo=a("div"),F(kL.$$.fragment),Dvo=l(),SL=a("p"),Gvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jq=a("a"),Ovo=o("AutoProcessor.from_pretrained()"),Vvo=o(" class method."),Xvo=l(),RL=a("p"),zvo=o("This class cannot be instantiated directly using "),Qde=a("code"),Qvo=o("__init__()"),Wvo=o(" (throws an error)."),Hvo=l(),Je=a("div"),F(PL.$$.fragment),Uvo=l(),Wde=a("p"),Jvo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Yvo=l(),Gi=a("p"),Kvo=o("The processor class to instantiate is selected based on the "),Hde=a("code"),Zvo=o("model_type"),eFo=o(` property of the config object (either
passed as an argument or loaded from `),Ude=a("code"),oFo=o("pretrained_model_name_or_path"),rFo=o(" if possible):"),tFo=l(),pe=a("ul"),Ep=a("li"),Jde=a("strong"),aFo=o("clip"),nFo=o(" \u2014 "),Dq=a("a"),sFo=o("CLIPProcessor"),lFo=o(" (CLIP model)"),iFo=l(),Cp=a("li"),Yde=a("strong"),dFo=o("flava"),cFo=o(" \u2014 "),Kde=a("code"),fFo=o("FLAVAProcessor"),mFo=o(" (FLAVA model)"),gFo=l(),wp=a("li"),Zde=a("strong"),hFo=o("groupvit"),pFo=o(" \u2014 "),Gq=a("a"),_Fo=o("CLIPProcessor"),uFo=o(" (GroupViT model)"),bFo=l(),Ap=a("li"),ece=a("strong"),vFo=o("layoutlmv2"),FFo=o(" \u2014 "),Oq=a("a"),TFo=o("LayoutLMv2Processor"),MFo=o(" (LayoutLMv2 model)"),EFo=l(),Lp=a("li"),oce=a("strong"),CFo=o("layoutlmv3"),wFo=o(" \u2014 "),Vq=a("a"),AFo=o("LayoutLMv3Processor"),LFo=o(" (LayoutLMv3 model)"),yFo=l(),yp=a("li"),rce=a("strong"),xFo=o("layoutxlm"),$Fo=o(" \u2014 "),Xq=a("a"),kFo=o("LayoutXLMProcessor"),SFo=o(" (LayoutXLM model)"),RFo=l(),xp=a("li"),tce=a("strong"),PFo=o("sew"),BFo=o(" \u2014 "),zq=a("a"),NFo=o("Wav2Vec2Processor"),IFo=o(" (SEW model)"),qFo=l(),$p=a("li"),ace=a("strong"),jFo=o("sew-d"),DFo=o(" \u2014 "),Qq=a("a"),GFo=o("Wav2Vec2Processor"),OFo=o(" (SEW-D model)"),VFo=l(),kp=a("li"),nce=a("strong"),XFo=o("speech_to_text"),zFo=o(" \u2014 "),Wq=a("a"),QFo=o("Speech2TextProcessor"),WFo=o(" (Speech2Text model)"),HFo=l(),Sp=a("li"),sce=a("strong"),UFo=o("speech_to_text_2"),JFo=o(" \u2014 "),Hq=a("a"),YFo=o("Speech2Text2Processor"),KFo=o(" (Speech2Text2 model)"),ZFo=l(),Rp=a("li"),lce=a("strong"),e6o=o("trocr"),o6o=o(" \u2014 "),Uq=a("a"),r6o=o("TrOCRProcessor"),t6o=o(" (TrOCR model)"),a6o=l(),Pp=a("li"),ice=a("strong"),n6o=o("unispeech"),s6o=o(" \u2014 "),Jq=a("a"),l6o=o("Wav2Vec2Processor"),i6o=o(" (UniSpeech model)"),d6o=l(),Bp=a("li"),dce=a("strong"),c6o=o("unispeech-sat"),f6o=o(" \u2014 "),Yq=a("a"),m6o=o("Wav2Vec2Processor"),g6o=o(" (UniSpeechSat model)"),h6o=l(),Np=a("li"),cce=a("strong"),p6o=o("vilt"),_6o=o(" \u2014 "),Kq=a("a"),u6o=o("ViltProcessor"),b6o=o(" (ViLT model)"),v6o=l(),Ip=a("li"),fce=a("strong"),F6o=o("vision-text-dual-encoder"),T6o=o(" \u2014 "),Zq=a("a"),M6o=o("VisionTextDualEncoderProcessor"),E6o=o(" (VisionTextDualEncoder model)"),C6o=l(),qp=a("li"),mce=a("strong"),w6o=o("wav2vec2"),A6o=o(" \u2014 "),ej=a("a"),L6o=o("Wav2Vec2Processor"),y6o=o(" (Wav2Vec2 model)"),x6o=l(),jp=a("li"),gce=a("strong"),$6o=o("wav2vec2-conformer"),k6o=o(" \u2014 "),oj=a("a"),S6o=o("Wav2Vec2Processor"),R6o=o(" (Wav2Vec2-Conformer model)"),P6o=l(),Dp=a("li"),hce=a("strong"),B6o=o("wavlm"),N6o=o(" \u2014 "),rj=a("a"),I6o=o("Wav2Vec2Processor"),q6o=o(" (WavLM model)"),j6o=l(),F(Gp.$$.fragment),D6o=l(),F(Op.$$.fragment),G6o=l(),Vp=a("div"),F(BL.$$.fragment),O6o=l(),pce=a("p"),V6o=o("Register a new processor for this class."),BXe=l(),Oi=a("h2"),Xp=a("a"),_ce=a("span"),F(NL.$$.fragment),X6o=l(),uce=a("span"),z6o=o("AutoModel"),NXe=l(),$o=a("div"),F(IL.$$.fragment),Q6o=l(),Vi=a("p"),W6o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tj=a("a"),H6o=o("from_pretrained()"),U6o=o(" class method or the "),aj=a("a"),J6o=o("from_config()"),Y6o=o(` class
method.`),K6o=l(),qL=a("p"),Z6o=o("This class cannot be instantiated directly using "),bce=a("code"),eTo=o("__init__()"),oTo=o(" (throws an error)."),rTo=l(),it=a("div"),F(jL.$$.fragment),tTo=l(),vce=a("p"),aTo=o("Instantiates one of the base model classes of the library from a configuration."),nTo=l(),Xi=a("p"),sTo=o(`Note:
Loading a model from its configuration file does `),Fce=a("strong"),lTo=o("not"),iTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=a("a"),dTo=o("from_pretrained()"),cTo=o(" to load the model weights."),fTo=l(),F(zp.$$.fragment),mTo=l(),Ye=a("div"),F(DL.$$.fragment),gTo=l(),Tce=a("p"),hTo=o("Instantiate one of the base model classes of the library from a pretrained model."),pTo=l(),Na=a("p"),_To=o("The model class to instantiate is selected based on the "),Mce=a("code"),uTo=o("model_type"),bTo=o(` property of the config object (either
passed as an argument or loaded from `),Ece=a("code"),vTo=o("pretrained_model_name_or_path"),FTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=a("code"),TTo=o("pretrained_model_name_or_path"),MTo=o(":"),ETo=l(),y=a("ul"),Qp=a("li"),wce=a("strong"),CTo=o("albert"),wTo=o(" \u2014 "),sj=a("a"),ATo=o("AlbertModel"),LTo=o(" (ALBERT model)"),yTo=l(),Wp=a("li"),Ace=a("strong"),xTo=o("bart"),$To=o(" \u2014 "),lj=a("a"),kTo=o("BartModel"),STo=o(" (BART model)"),RTo=l(),Hp=a("li"),Lce=a("strong"),PTo=o("beit"),BTo=o(" \u2014 "),ij=a("a"),NTo=o("BeitModel"),ITo=o(" (BEiT model)"),qTo=l(),Up=a("li"),yce=a("strong"),jTo=o("bert"),DTo=o(" \u2014 "),dj=a("a"),GTo=o("BertModel"),OTo=o(" (BERT model)"),VTo=l(),Jp=a("li"),xce=a("strong"),XTo=o("bert-generation"),zTo=o(" \u2014 "),cj=a("a"),QTo=o("BertGenerationEncoder"),WTo=o(" (Bert Generation model)"),HTo=l(),Yp=a("li"),$ce=a("strong"),UTo=o("big_bird"),JTo=o(" \u2014 "),fj=a("a"),YTo=o("BigBirdModel"),KTo=o(" (BigBird model)"),ZTo=l(),Kp=a("li"),kce=a("strong"),e7o=o("bigbird_pegasus"),o7o=o(" \u2014 "),mj=a("a"),r7o=o("BigBirdPegasusModel"),t7o=o(" (BigBird-Pegasus model)"),a7o=l(),Zp=a("li"),Sce=a("strong"),n7o=o("blenderbot"),s7o=o(" \u2014 "),gj=a("a"),l7o=o("BlenderbotModel"),i7o=o(" (Blenderbot model)"),d7o=l(),e_=a("li"),Rce=a("strong"),c7o=o("blenderbot-small"),f7o=o(" \u2014 "),hj=a("a"),m7o=o("BlenderbotSmallModel"),g7o=o(" (BlenderbotSmall model)"),h7o=l(),o_=a("li"),Pce=a("strong"),p7o=o("bloom"),_7o=o(" \u2014 "),pj=a("a"),u7o=o("BloomModel"),b7o=o(" (BLOOM model)"),v7o=l(),r_=a("li"),Bce=a("strong"),F7o=o("camembert"),T7o=o(" \u2014 "),_j=a("a"),M7o=o("CamembertModel"),E7o=o(" (CamemBERT model)"),C7o=l(),t_=a("li"),Nce=a("strong"),w7o=o("canine"),A7o=o(" \u2014 "),uj=a("a"),L7o=o("CanineModel"),y7o=o(" (CANINE model)"),x7o=l(),a_=a("li"),Ice=a("strong"),$7o=o("clip"),k7o=o(" \u2014 "),bj=a("a"),S7o=o("CLIPModel"),R7o=o(" (CLIP model)"),P7o=l(),n_=a("li"),qce=a("strong"),B7o=o("codegen"),N7o=o(" \u2014 "),vj=a("a"),I7o=o("CodeGenModel"),q7o=o(" (CodeGen model)"),j7o=l(),s_=a("li"),jce=a("strong"),D7o=o("convbert"),G7o=o(" \u2014 "),Fj=a("a"),O7o=o("ConvBertModel"),V7o=o(" (ConvBERT model)"),X7o=l(),l_=a("li"),Dce=a("strong"),z7o=o("convnext"),Q7o=o(" \u2014 "),Tj=a("a"),W7o=o("ConvNextModel"),H7o=o(" (ConvNeXT model)"),U7o=l(),i_=a("li"),Gce=a("strong"),J7o=o("ctrl"),Y7o=o(" \u2014 "),Mj=a("a"),K7o=o("CTRLModel"),Z7o=o(" (CTRL model)"),e8o=l(),d_=a("li"),Oce=a("strong"),o8o=o("cvt"),r8o=o(" \u2014 "),Ej=a("a"),t8o=o("CvtModel"),a8o=o(" (CvT model)"),n8o=l(),c_=a("li"),Vce=a("strong"),s8o=o("data2vec-audio"),l8o=o(" \u2014 "),Cj=a("a"),i8o=o("Data2VecAudioModel"),d8o=o(" (Data2VecAudio model)"),c8o=l(),f_=a("li"),Xce=a("strong"),f8o=o("data2vec-text"),m8o=o(" \u2014 "),wj=a("a"),g8o=o("Data2VecTextModel"),h8o=o(" (Data2VecText model)"),p8o=l(),m_=a("li"),zce=a("strong"),_8o=o("data2vec-vision"),u8o=o(" \u2014 "),Aj=a("a"),b8o=o("Data2VecVisionModel"),v8o=o(" (Data2VecVision model)"),F8o=l(),g_=a("li"),Qce=a("strong"),T8o=o("deberta"),M8o=o(" \u2014 "),Lj=a("a"),E8o=o("DebertaModel"),C8o=o(" (DeBERTa model)"),w8o=l(),h_=a("li"),Wce=a("strong"),A8o=o("deberta-v2"),L8o=o(" \u2014 "),yj=a("a"),y8o=o("DebertaV2Model"),x8o=o(" (DeBERTa-v2 model)"),$8o=l(),p_=a("li"),Hce=a("strong"),k8o=o("decision_transformer"),S8o=o(" \u2014 "),xj=a("a"),R8o=o("DecisionTransformerModel"),P8o=o(" (Decision Transformer model)"),B8o=l(),__=a("li"),Uce=a("strong"),N8o=o("deit"),I8o=o(" \u2014 "),$j=a("a"),q8o=o("DeiTModel"),j8o=o(" (DeiT model)"),D8o=l(),u_=a("li"),Jce=a("strong"),G8o=o("detr"),O8o=o(" \u2014 "),kj=a("a"),V8o=o("DetrModel"),X8o=o(" (DETR model)"),z8o=l(),b_=a("li"),Yce=a("strong"),Q8o=o("distilbert"),W8o=o(" \u2014 "),Sj=a("a"),H8o=o("DistilBertModel"),U8o=o(" (DistilBERT model)"),J8o=l(),v_=a("li"),Kce=a("strong"),Y8o=o("dpr"),K8o=o(" \u2014 "),Rj=a("a"),Z8o=o("DPRQuestionEncoder"),eMo=o(" (DPR model)"),oMo=l(),F_=a("li"),Zce=a("strong"),rMo=o("dpt"),tMo=o(" \u2014 "),Pj=a("a"),aMo=o("DPTModel"),nMo=o(" (DPT model)"),sMo=l(),T_=a("li"),efe=a("strong"),lMo=o("electra"),iMo=o(" \u2014 "),Bj=a("a"),dMo=o("ElectraModel"),cMo=o(" (ELECTRA model)"),fMo=l(),M_=a("li"),ofe=a("strong"),mMo=o("flaubert"),gMo=o(" \u2014 "),Nj=a("a"),hMo=o("FlaubertModel"),pMo=o(" (FlauBERT model)"),_Mo=l(),E_=a("li"),rfe=a("strong"),uMo=o("flava"),bMo=o(" \u2014 "),Ij=a("a"),vMo=o("FlavaModel"),FMo=o(" (FLAVA model)"),TMo=l(),C_=a("li"),tfe=a("strong"),MMo=o("fnet"),EMo=o(" \u2014 "),qj=a("a"),CMo=o("FNetModel"),wMo=o(" (FNet model)"),AMo=l(),w_=a("li"),afe=a("strong"),LMo=o("fsmt"),yMo=o(" \u2014 "),jj=a("a"),xMo=o("FSMTModel"),$Mo=o(" (FairSeq Machine-Translation model)"),kMo=l(),Hs=a("li"),nfe=a("strong"),SMo=o("funnel"),RMo=o(" \u2014 "),Dj=a("a"),PMo=o("FunnelModel"),BMo=o(" or "),Gj=a("a"),NMo=o("FunnelBaseModel"),IMo=o(" (Funnel Transformer model)"),qMo=l(),A_=a("li"),sfe=a("strong"),jMo=o("glpn"),DMo=o(" \u2014 "),Oj=a("a"),GMo=o("GLPNModel"),OMo=o(" (GLPN model)"),VMo=l(),L_=a("li"),lfe=a("strong"),XMo=o("gpt2"),zMo=o(" \u2014 "),Vj=a("a"),QMo=o("GPT2Model"),WMo=o(" (OpenAI GPT-2 model)"),HMo=l(),y_=a("li"),ife=a("strong"),UMo=o("gpt_neo"),JMo=o(" \u2014 "),Xj=a("a"),YMo=o("GPTNeoModel"),KMo=o(" (GPT Neo model)"),ZMo=l(),x_=a("li"),dfe=a("strong"),e4o=o("gpt_neox"),o4o=o(" \u2014 "),zj=a("a"),r4o=o("GPTNeoXModel"),t4o=o(" (GPT NeoX model)"),a4o=l(),$_=a("li"),cfe=a("strong"),n4o=o("gptj"),s4o=o(" \u2014 "),Qj=a("a"),l4o=o("GPTJModel"),i4o=o(" (GPT-J model)"),d4o=l(),k_=a("li"),ffe=a("strong"),c4o=o("groupvit"),f4o=o(" \u2014 "),Wj=a("a"),m4o=o("GroupViTModel"),g4o=o(" (GroupViT model)"),h4o=l(),S_=a("li"),mfe=a("strong"),p4o=o("hubert"),_4o=o(" \u2014 "),Hj=a("a"),u4o=o("HubertModel"),b4o=o(" (Hubert model)"),v4o=l(),R_=a("li"),gfe=a("strong"),F4o=o("ibert"),T4o=o(" \u2014 "),Uj=a("a"),M4o=o("IBertModel"),E4o=o(" (I-BERT model)"),C4o=l(),P_=a("li"),hfe=a("strong"),w4o=o("imagegpt"),A4o=o(" \u2014 "),Jj=a("a"),L4o=o("ImageGPTModel"),y4o=o(" (ImageGPT model)"),x4o=l(),B_=a("li"),pfe=a("strong"),$4o=o("jukebox"),k4o=o(" \u2014 "),_fe=a("code"),S4o=o("JukeboxModel"),R4o=o(" (Jukebox model)"),P4o=l(),N_=a("li"),ufe=a("strong"),B4o=o("layoutlm"),N4o=o(" \u2014 "),Yj=a("a"),I4o=o("LayoutLMModel"),q4o=o(" (LayoutLM model)"),j4o=l(),I_=a("li"),bfe=a("strong"),D4o=o("layoutlmv2"),G4o=o(" \u2014 "),Kj=a("a"),O4o=o("LayoutLMv2Model"),V4o=o(" (LayoutLMv2 model)"),X4o=l(),q_=a("li"),vfe=a("strong"),z4o=o("layoutlmv3"),Q4o=o(" \u2014 "),Zj=a("a"),W4o=o("LayoutLMv3Model"),H4o=o(" (LayoutLMv3 model)"),U4o=l(),j_=a("li"),Ffe=a("strong"),J4o=o("led"),Y4o=o(" \u2014 "),eD=a("a"),K4o=o("LEDModel"),Z4o=o(" (LED model)"),eEo=l(),D_=a("li"),Tfe=a("strong"),oEo=o("levit"),rEo=o(" \u2014 "),oD=a("a"),tEo=o("LevitModel"),aEo=o(" (LeViT model)"),nEo=l(),G_=a("li"),Mfe=a("strong"),sEo=o("longformer"),lEo=o(" \u2014 "),rD=a("a"),iEo=o("LongformerModel"),dEo=o(" (Longformer model)"),cEo=l(),O_=a("li"),Efe=a("strong"),fEo=o("longt5"),mEo=o(" \u2014 "),tD=a("a"),gEo=o("LongT5Model"),hEo=o(" (LongT5 model)"),pEo=l(),V_=a("li"),Cfe=a("strong"),_Eo=o("luke"),uEo=o(" \u2014 "),aD=a("a"),bEo=o("LukeModel"),vEo=o(" (LUKE model)"),FEo=l(),X_=a("li"),wfe=a("strong"),TEo=o("lxmert"),MEo=o(" \u2014 "),nD=a("a"),EEo=o("LxmertModel"),CEo=o(" (LXMERT model)"),wEo=l(),z_=a("li"),Afe=a("strong"),AEo=o("m2m_100"),LEo=o(" \u2014 "),sD=a("a"),yEo=o("M2M100Model"),xEo=o(" (M2M100 model)"),$Eo=l(),Q_=a("li"),Lfe=a("strong"),kEo=o("marian"),SEo=o(" \u2014 "),lD=a("a"),REo=o("MarianModel"),PEo=o(" (Marian model)"),BEo=l(),W_=a("li"),yfe=a("strong"),NEo=o("maskformer"),IEo=o(" \u2014 "),iD=a("a"),qEo=o("MaskFormerModel"),jEo=o(" (MaskFormer model)"),DEo=l(),H_=a("li"),xfe=a("strong"),GEo=o("mbart"),OEo=o(" \u2014 "),dD=a("a"),VEo=o("MBartModel"),XEo=o(" (mBART model)"),zEo=l(),U_=a("li"),$fe=a("strong"),QEo=o("mctct"),WEo=o(" \u2014 "),cD=a("a"),HEo=o("MCTCTModel"),UEo=o(" (M-CTC-T model)"),JEo=l(),J_=a("li"),kfe=a("strong"),YEo=o("megatron-bert"),KEo=o(" \u2014 "),fD=a("a"),ZEo=o("MegatronBertModel"),eCo=o(" (Megatron-BERT model)"),oCo=l(),Y_=a("li"),Sfe=a("strong"),rCo=o("mobilebert"),tCo=o(" \u2014 "),mD=a("a"),aCo=o("MobileBertModel"),nCo=o(" (MobileBERT model)"),sCo=l(),K_=a("li"),Rfe=a("strong"),lCo=o("mobilevit"),iCo=o(" \u2014 "),gD=a("a"),dCo=o("MobileViTModel"),cCo=o(" (MobileViT model)"),fCo=l(),Z_=a("li"),Pfe=a("strong"),mCo=o("mpnet"),gCo=o(" \u2014 "),hD=a("a"),hCo=o("MPNetModel"),pCo=o(" (MPNet model)"),_Co=l(),eu=a("li"),Bfe=a("strong"),uCo=o("mt5"),bCo=o(" \u2014 "),pD=a("a"),vCo=o("MT5Model"),FCo=o(" (MT5 model)"),TCo=l(),ou=a("li"),Nfe=a("strong"),MCo=o("mvp"),ECo=o(" \u2014 "),_D=a("a"),CCo=o("MvpModel"),wCo=o(" (MVP model)"),ACo=l(),ru=a("li"),Ife=a("strong"),LCo=o("nezha"),yCo=o(" \u2014 "),uD=a("a"),xCo=o("NezhaModel"),$Co=o(" (Nezha model)"),kCo=l(),tu=a("li"),qfe=a("strong"),SCo=o("nllb"),RCo=o(" \u2014 "),bD=a("a"),PCo=o("M2M100Model"),BCo=o(" (NLLB model)"),NCo=l(),au=a("li"),jfe=a("strong"),ICo=o("nystromformer"),qCo=o(" \u2014 "),vD=a("a"),jCo=o("NystromformerModel"),DCo=o(" (Nystr\xF6mformer model)"),GCo=l(),nu=a("li"),Dfe=a("strong"),OCo=o("openai-gpt"),VCo=o(" \u2014 "),FD=a("a"),XCo=o("OpenAIGPTModel"),zCo=o(" (OpenAI GPT model)"),QCo=l(),su=a("li"),Gfe=a("strong"),WCo=o("opt"),HCo=o(" \u2014 "),TD=a("a"),UCo=o("OPTModel"),JCo=o(" (OPT model)"),YCo=l(),lu=a("li"),Ofe=a("strong"),KCo=o("pegasus"),ZCo=o(" \u2014 "),MD=a("a"),e5o=o("PegasusModel"),o5o=o(" (Pegasus model)"),r5o=l(),iu=a("li"),Vfe=a("strong"),t5o=o("perceiver"),a5o=o(" \u2014 "),ED=a("a"),n5o=o("PerceiverModel"),s5o=o(" (Perceiver model)"),l5o=l(),du=a("li"),Xfe=a("strong"),i5o=o("plbart"),d5o=o(" \u2014 "),CD=a("a"),c5o=o("PLBartModel"),f5o=o(" (PLBart model)"),m5o=l(),cu=a("li"),zfe=a("strong"),g5o=o("poolformer"),h5o=o(" \u2014 "),wD=a("a"),p5o=o("PoolFormerModel"),_5o=o(" (PoolFormer model)"),u5o=l(),fu=a("li"),Qfe=a("strong"),b5o=o("prophetnet"),v5o=o(" \u2014 "),AD=a("a"),F5o=o("ProphetNetModel"),T5o=o(" (ProphetNet model)"),M5o=l(),mu=a("li"),Wfe=a("strong"),E5o=o("qdqbert"),C5o=o(" \u2014 "),LD=a("a"),w5o=o("QDQBertModel"),A5o=o(" (QDQBert model)"),L5o=l(),gu=a("li"),Hfe=a("strong"),y5o=o("reformer"),x5o=o(" \u2014 "),yD=a("a"),$5o=o("ReformerModel"),k5o=o(" (Reformer model)"),S5o=l(),hu=a("li"),Ufe=a("strong"),R5o=o("regnet"),P5o=o(" \u2014 "),xD=a("a"),B5o=o("RegNetModel"),N5o=o(" (RegNet model)"),I5o=l(),pu=a("li"),Jfe=a("strong"),q5o=o("rembert"),j5o=o(" \u2014 "),$D=a("a"),D5o=o("RemBertModel"),G5o=o(" (RemBERT model)"),O5o=l(),_u=a("li"),Yfe=a("strong"),V5o=o("resnet"),X5o=o(" \u2014 "),kD=a("a"),z5o=o("ResNetModel"),Q5o=o(" (ResNet model)"),W5o=l(),uu=a("li"),Kfe=a("strong"),H5o=o("retribert"),U5o=o(" \u2014 "),SD=a("a"),J5o=o("RetriBertModel"),Y5o=o(" (RetriBERT model)"),K5o=l(),bu=a("li"),Zfe=a("strong"),Z5o=o("roberta"),e3o=o(" \u2014 "),RD=a("a"),o3o=o("RobertaModel"),r3o=o(" (RoBERTa model)"),t3o=l(),vu=a("li"),eme=a("strong"),a3o=o("roformer"),n3o=o(" \u2014 "),PD=a("a"),s3o=o("RoFormerModel"),l3o=o(" (RoFormer model)"),i3o=l(),Fu=a("li"),ome=a("strong"),d3o=o("segformer"),c3o=o(" \u2014 "),BD=a("a"),f3o=o("SegformerModel"),m3o=o(" (SegFormer model)"),g3o=l(),Tu=a("li"),rme=a("strong"),h3o=o("sew"),p3o=o(" \u2014 "),ND=a("a"),_3o=o("SEWModel"),u3o=o(" (SEW model)"),b3o=l(),Mu=a("li"),tme=a("strong"),v3o=o("sew-d"),F3o=o(" \u2014 "),ID=a("a"),T3o=o("SEWDModel"),M3o=o(" (SEW-D model)"),E3o=l(),Eu=a("li"),ame=a("strong"),C3o=o("speech_to_text"),w3o=o(" \u2014 "),qD=a("a"),A3o=o("Speech2TextModel"),L3o=o(" (Speech2Text model)"),y3o=l(),Cu=a("li"),nme=a("strong"),x3o=o("splinter"),$3o=o(" \u2014 "),jD=a("a"),k3o=o("SplinterModel"),S3o=o(" (Splinter model)"),R3o=l(),wu=a("li"),sme=a("strong"),P3o=o("squeezebert"),B3o=o(" \u2014 "),DD=a("a"),N3o=o("SqueezeBertModel"),I3o=o(" (SqueezeBERT model)"),q3o=l(),Au=a("li"),lme=a("strong"),j3o=o("swin"),D3o=o(" \u2014 "),GD=a("a"),G3o=o("SwinModel"),O3o=o(" (Swin Transformer model)"),V3o=l(),Lu=a("li"),ime=a("strong"),X3o=o("t5"),z3o=o(" \u2014 "),OD=a("a"),Q3o=o("T5Model"),W3o=o(" (T5 model)"),H3o=l(),yu=a("li"),dme=a("strong"),U3o=o("tapas"),J3o=o(" \u2014 "),VD=a("a"),Y3o=o("TapasModel"),K3o=o(" (TAPAS model)"),Z3o=l(),xu=a("li"),cme=a("strong"),e0o=o("trajectory_transformer"),o0o=o(" \u2014 "),XD=a("a"),r0o=o("TrajectoryTransformerModel"),t0o=o(" (Trajectory Transformer model)"),a0o=l(),$u=a("li"),fme=a("strong"),n0o=o("transfo-xl"),s0o=o(" \u2014 "),zD=a("a"),l0o=o("TransfoXLModel"),i0o=o(" (Transformer-XL model)"),d0o=l(),ku=a("li"),mme=a("strong"),c0o=o("unispeech"),f0o=o(" \u2014 "),QD=a("a"),m0o=o("UniSpeechModel"),g0o=o(" (UniSpeech model)"),h0o=l(),Su=a("li"),gme=a("strong"),p0o=o("unispeech-sat"),_0o=o(" \u2014 "),WD=a("a"),u0o=o("UniSpeechSatModel"),b0o=o(" (UniSpeechSat model)"),v0o=l(),Ru=a("li"),hme=a("strong"),F0o=o("van"),T0o=o(" \u2014 "),HD=a("a"),M0o=o("VanModel"),E0o=o(" (VAN model)"),C0o=l(),Pu=a("li"),pme=a("strong"),w0o=o("vilt"),A0o=o(" \u2014 "),UD=a("a"),L0o=o("ViltModel"),y0o=o(" (ViLT model)"),x0o=l(),Bu=a("li"),_me=a("strong"),$0o=o("vision-text-dual-encoder"),k0o=o(" \u2014 "),JD=a("a"),S0o=o("VisionTextDualEncoderModel"),R0o=o(" (VisionTextDualEncoder model)"),P0o=l(),Nu=a("li"),ume=a("strong"),B0o=o("visual_bert"),N0o=o(" \u2014 "),YD=a("a"),I0o=o("VisualBertModel"),q0o=o(" (VisualBERT model)"),j0o=l(),Iu=a("li"),bme=a("strong"),D0o=o("vit"),G0o=o(" \u2014 "),KD=a("a"),O0o=o("ViTModel"),V0o=o(" (ViT model)"),X0o=l(),qu=a("li"),vme=a("strong"),z0o=o("vit_mae"),Q0o=o(" \u2014 "),ZD=a("a"),W0o=o("ViTMAEModel"),H0o=o(" (ViTMAE model)"),U0o=l(),ju=a("li"),Fme=a("strong"),J0o=o("wav2vec2"),Y0o=o(" \u2014 "),eG=a("a"),K0o=o("Wav2Vec2Model"),Z0o=o(" (Wav2Vec2 model)"),ewo=l(),Du=a("li"),Tme=a("strong"),owo=o("wav2vec2-conformer"),rwo=o(" \u2014 "),oG=a("a"),two=o("Wav2Vec2ConformerModel"),awo=o(" (Wav2Vec2-Conformer model)"),nwo=l(),Gu=a("li"),Mme=a("strong"),swo=o("wavlm"),lwo=o(" \u2014 "),rG=a("a"),iwo=o("WavLMModel"),dwo=o(" (WavLM model)"),cwo=l(),Ou=a("li"),Eme=a("strong"),fwo=o("xglm"),mwo=o(" \u2014 "),tG=a("a"),gwo=o("XGLMModel"),hwo=o(" (XGLM model)"),pwo=l(),Vu=a("li"),Cme=a("strong"),_wo=o("xlm"),uwo=o(" \u2014 "),aG=a("a"),bwo=o("XLMModel"),vwo=o(" (XLM model)"),Fwo=l(),Xu=a("li"),wme=a("strong"),Two=o("xlm-prophetnet"),Mwo=o(" \u2014 "),nG=a("a"),Ewo=o("XLMProphetNetModel"),Cwo=o(" (XLM-ProphetNet model)"),wwo=l(),zu=a("li"),Ame=a("strong"),Awo=o("xlm-roberta"),Lwo=o(" \u2014 "),sG=a("a"),ywo=o("XLMRobertaModel"),xwo=o(" (XLM-RoBERTa model)"),$wo=l(),Qu=a("li"),Lme=a("strong"),kwo=o("xlm-roberta-xl"),Swo=o(" \u2014 "),lG=a("a"),Rwo=o("XLMRobertaXLModel"),Pwo=o(" (XLM-RoBERTa-XL model)"),Bwo=l(),Wu=a("li"),yme=a("strong"),Nwo=o("xlnet"),Iwo=o(" \u2014 "),iG=a("a"),qwo=o("XLNetModel"),jwo=o(" (XLNet model)"),Dwo=l(),Hu=a("li"),xme=a("strong"),Gwo=o("yolos"),Owo=o(" \u2014 "),dG=a("a"),Vwo=o("YolosModel"),Xwo=o(" (YOLOS model)"),zwo=l(),Uu=a("li"),$me=a("strong"),Qwo=o("yoso"),Wwo=o(" \u2014 "),cG=a("a"),Hwo=o("YosoModel"),Uwo=o(" (YOSO model)"),Jwo=l(),Ju=a("p"),Ywo=o("The model is set in evaluation mode by default using "),kme=a("code"),Kwo=o("model.eval()"),Zwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=a("code"),eAo=o("model.train()"),oAo=l(),F(Yu.$$.fragment),IXe=l(),zi=a("h2"),Ku=a("a"),Rme=a("span"),F(GL.$$.fragment),rAo=l(),Pme=a("span"),tAo=o("AutoModelForPreTraining"),qXe=l(),ko=a("div"),F(OL.$$.fragment),aAo=l(),Qi=a("p"),nAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fG=a("a"),sAo=o("from_pretrained()"),lAo=o(" class method or the "),mG=a("a"),iAo=o("from_config()"),dAo=o(` class
method.`),cAo=l(),VL=a("p"),fAo=o("This class cannot be instantiated directly using "),Bme=a("code"),mAo=o("__init__()"),gAo=o(" (throws an error)."),hAo=l(),dt=a("div"),F(XL.$$.fragment),pAo=l(),Nme=a("p"),_Ao=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uAo=l(),Wi=a("p"),bAo=o(`Note:
Loading a model from its configuration file does `),Ime=a("strong"),vAo=o("not"),FAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=a("a"),TAo=o("from_pretrained()"),MAo=o(" to load the model weights."),EAo=l(),F(Zu.$$.fragment),CAo=l(),Ke=a("div"),F(zL.$$.fragment),wAo=l(),qme=a("p"),AAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),LAo=l(),Ia=a("p"),yAo=o("The model class to instantiate is selected based on the "),jme=a("code"),xAo=o("model_type"),$Ao=o(` property of the config object (either
passed as an argument or loaded from `),Dme=a("code"),kAo=o("pretrained_model_name_or_path"),SAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=a("code"),RAo=o("pretrained_model_name_or_path"),PAo=o(":"),BAo=l(),G=a("ul"),e2=a("li"),Ome=a("strong"),NAo=o("albert"),IAo=o(" \u2014 "),hG=a("a"),qAo=o("AlbertForPreTraining"),jAo=o(" (ALBERT model)"),DAo=l(),o2=a("li"),Vme=a("strong"),GAo=o("bart"),OAo=o(" \u2014 "),pG=a("a"),VAo=o("BartForConditionalGeneration"),XAo=o(" (BART model)"),zAo=l(),r2=a("li"),Xme=a("strong"),QAo=o("bert"),WAo=o(" \u2014 "),_G=a("a"),HAo=o("BertForPreTraining"),UAo=o(" (BERT model)"),JAo=l(),t2=a("li"),zme=a("strong"),YAo=o("big_bird"),KAo=o(" \u2014 "),uG=a("a"),ZAo=o("BigBirdForPreTraining"),eLo=o(" (BigBird model)"),oLo=l(),a2=a("li"),Qme=a("strong"),rLo=o("bloom"),tLo=o(" \u2014 "),bG=a("a"),aLo=o("BloomForCausalLM"),nLo=o(" (BLOOM model)"),sLo=l(),n2=a("li"),Wme=a("strong"),lLo=o("camembert"),iLo=o(" \u2014 "),vG=a("a"),dLo=o("CamembertForMaskedLM"),cLo=o(" (CamemBERT model)"),fLo=l(),s2=a("li"),Hme=a("strong"),mLo=o("ctrl"),gLo=o(" \u2014 "),FG=a("a"),hLo=o("CTRLLMHeadModel"),pLo=o(" (CTRL model)"),_Lo=l(),l2=a("li"),Ume=a("strong"),uLo=o("data2vec-text"),bLo=o(" \u2014 "),TG=a("a"),vLo=o("Data2VecTextForMaskedLM"),FLo=o(" (Data2VecText model)"),TLo=l(),i2=a("li"),Jme=a("strong"),MLo=o("deberta"),ELo=o(" \u2014 "),MG=a("a"),CLo=o("DebertaForMaskedLM"),wLo=o(" (DeBERTa model)"),ALo=l(),d2=a("li"),Yme=a("strong"),LLo=o("deberta-v2"),yLo=o(" \u2014 "),EG=a("a"),xLo=o("DebertaV2ForMaskedLM"),$Lo=o(" (DeBERTa-v2 model)"),kLo=l(),c2=a("li"),Kme=a("strong"),SLo=o("distilbert"),RLo=o(" \u2014 "),CG=a("a"),PLo=o("DistilBertForMaskedLM"),BLo=o(" (DistilBERT model)"),NLo=l(),f2=a("li"),Zme=a("strong"),ILo=o("electra"),qLo=o(" \u2014 "),wG=a("a"),jLo=o("ElectraForPreTraining"),DLo=o(" (ELECTRA model)"),GLo=l(),m2=a("li"),ege=a("strong"),OLo=o("flaubert"),VLo=o(" \u2014 "),AG=a("a"),XLo=o("FlaubertWithLMHeadModel"),zLo=o(" (FlauBERT model)"),QLo=l(),g2=a("li"),oge=a("strong"),WLo=o("flava"),HLo=o(" \u2014 "),LG=a("a"),ULo=o("FlavaForPreTraining"),JLo=o(" (FLAVA model)"),YLo=l(),h2=a("li"),rge=a("strong"),KLo=o("fnet"),ZLo=o(" \u2014 "),yG=a("a"),eyo=o("FNetForPreTraining"),oyo=o(" (FNet model)"),ryo=l(),p2=a("li"),tge=a("strong"),tyo=o("fsmt"),ayo=o(" \u2014 "),xG=a("a"),nyo=o("FSMTForConditionalGeneration"),syo=o(" (FairSeq Machine-Translation model)"),lyo=l(),_2=a("li"),age=a("strong"),iyo=o("funnel"),dyo=o(" \u2014 "),$G=a("a"),cyo=o("FunnelForPreTraining"),fyo=o(" (Funnel Transformer model)"),myo=l(),u2=a("li"),nge=a("strong"),gyo=o("gpt2"),hyo=o(" \u2014 "),kG=a("a"),pyo=o("GPT2LMHeadModel"),_yo=o(" (OpenAI GPT-2 model)"),uyo=l(),b2=a("li"),sge=a("strong"),byo=o("ibert"),vyo=o(" \u2014 "),SG=a("a"),Fyo=o("IBertForMaskedLM"),Tyo=o(" (I-BERT model)"),Myo=l(),v2=a("li"),lge=a("strong"),Eyo=o("layoutlm"),Cyo=o(" \u2014 "),RG=a("a"),wyo=o("LayoutLMForMaskedLM"),Ayo=o(" (LayoutLM model)"),Lyo=l(),F2=a("li"),ige=a("strong"),yyo=o("longformer"),xyo=o(" \u2014 "),PG=a("a"),$yo=o("LongformerForMaskedLM"),kyo=o(" (Longformer model)"),Syo=l(),T2=a("li"),dge=a("strong"),Ryo=o("lxmert"),Pyo=o(" \u2014 "),BG=a("a"),Byo=o("LxmertForPreTraining"),Nyo=o(" (LXMERT model)"),Iyo=l(),M2=a("li"),cge=a("strong"),qyo=o("megatron-bert"),jyo=o(" \u2014 "),NG=a("a"),Dyo=o("MegatronBertForPreTraining"),Gyo=o(" (Megatron-BERT model)"),Oyo=l(),E2=a("li"),fge=a("strong"),Vyo=o("mobilebert"),Xyo=o(" \u2014 "),IG=a("a"),zyo=o("MobileBertForPreTraining"),Qyo=o(" (MobileBERT model)"),Wyo=l(),C2=a("li"),mge=a("strong"),Hyo=o("mpnet"),Uyo=o(" \u2014 "),qG=a("a"),Jyo=o("MPNetForMaskedLM"),Yyo=o(" (MPNet model)"),Kyo=l(),w2=a("li"),gge=a("strong"),Zyo=o("mvp"),e9o=o(" \u2014 "),jG=a("a"),o9o=o("MvpForConditionalGeneration"),r9o=o(" (MVP model)"),t9o=l(),A2=a("li"),hge=a("strong"),a9o=o("nezha"),n9o=o(" \u2014 "),DG=a("a"),s9o=o("NezhaForPreTraining"),l9o=o(" (Nezha model)"),i9o=l(),L2=a("li"),pge=a("strong"),d9o=o("openai-gpt"),c9o=o(" \u2014 "),GG=a("a"),f9o=o("OpenAIGPTLMHeadModel"),m9o=o(" (OpenAI GPT model)"),g9o=l(),y2=a("li"),_ge=a("strong"),h9o=o("retribert"),p9o=o(" \u2014 "),OG=a("a"),_9o=o("RetriBertModel"),u9o=o(" (RetriBERT model)"),b9o=l(),x2=a("li"),uge=a("strong"),v9o=o("roberta"),F9o=o(" \u2014 "),VG=a("a"),T9o=o("RobertaForMaskedLM"),M9o=o(" (RoBERTa model)"),E9o=l(),$2=a("li"),bge=a("strong"),C9o=o("splinter"),w9o=o(" \u2014 "),XG=a("a"),A9o=o("SplinterForPreTraining"),L9o=o(" (Splinter model)"),y9o=l(),k2=a("li"),vge=a("strong"),x9o=o("squeezebert"),$9o=o(" \u2014 "),zG=a("a"),k9o=o("SqueezeBertForMaskedLM"),S9o=o(" (SqueezeBERT model)"),R9o=l(),S2=a("li"),Fge=a("strong"),P9o=o("t5"),B9o=o(" \u2014 "),QG=a("a"),N9o=o("T5ForConditionalGeneration"),I9o=o(" (T5 model)"),q9o=l(),R2=a("li"),Tge=a("strong"),j9o=o("tapas"),D9o=o(" \u2014 "),WG=a("a"),G9o=o("TapasForMaskedLM"),O9o=o(" (TAPAS model)"),V9o=l(),P2=a("li"),Mge=a("strong"),X9o=o("transfo-xl"),z9o=o(" \u2014 "),HG=a("a"),Q9o=o("TransfoXLLMHeadModel"),W9o=o(" (Transformer-XL model)"),H9o=l(),B2=a("li"),Ege=a("strong"),U9o=o("unispeech"),J9o=o(" \u2014 "),UG=a("a"),Y9o=o("UniSpeechForPreTraining"),K9o=o(" (UniSpeech model)"),Z9o=l(),N2=a("li"),Cge=a("strong"),exo=o("unispeech-sat"),oxo=o(" \u2014 "),JG=a("a"),rxo=o("UniSpeechSatForPreTraining"),txo=o(" (UniSpeechSat model)"),axo=l(),I2=a("li"),wge=a("strong"),nxo=o("visual_bert"),sxo=o(" \u2014 "),YG=a("a"),lxo=o("VisualBertForPreTraining"),ixo=o(" (VisualBERT model)"),dxo=l(),q2=a("li"),Age=a("strong"),cxo=o("vit_mae"),fxo=o(" \u2014 "),KG=a("a"),mxo=o("ViTMAEForPreTraining"),gxo=o(" (ViTMAE model)"),hxo=l(),j2=a("li"),Lge=a("strong"),pxo=o("wav2vec2"),_xo=o(" \u2014 "),ZG=a("a"),uxo=o("Wav2Vec2ForPreTraining"),bxo=o(" (Wav2Vec2 model)"),vxo=l(),D2=a("li"),yge=a("strong"),Fxo=o("wav2vec2-conformer"),Txo=o(" \u2014 "),eO=a("a"),Mxo=o("Wav2Vec2ConformerForPreTraining"),Exo=o(" (Wav2Vec2-Conformer model)"),Cxo=l(),G2=a("li"),xge=a("strong"),wxo=o("xlm"),Axo=o(" \u2014 "),oO=a("a"),Lxo=o("XLMWithLMHeadModel"),yxo=o(" (XLM model)"),xxo=l(),O2=a("li"),$ge=a("strong"),$xo=o("xlm-roberta"),kxo=o(" \u2014 "),rO=a("a"),Sxo=o("XLMRobertaForMaskedLM"),Rxo=o(" (XLM-RoBERTa model)"),Pxo=l(),V2=a("li"),kge=a("strong"),Bxo=o("xlm-roberta-xl"),Nxo=o(" \u2014 "),tO=a("a"),Ixo=o("XLMRobertaXLForMaskedLM"),qxo=o(" (XLM-RoBERTa-XL model)"),jxo=l(),X2=a("li"),Sge=a("strong"),Dxo=o("xlnet"),Gxo=o(" \u2014 "),aO=a("a"),Oxo=o("XLNetLMHeadModel"),Vxo=o(" (XLNet model)"),Xxo=l(),z2=a("p"),zxo=o("The model is set in evaluation mode by default using "),Rge=a("code"),Qxo=o("model.eval()"),Wxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pge=a("code"),Hxo=o("model.train()"),Uxo=l(),F(Q2.$$.fragment),jXe=l(),Hi=a("h2"),W2=a("a"),Bge=a("span"),F(QL.$$.fragment),Jxo=l(),Nge=a("span"),Yxo=o("AutoModelForCausalLM"),DXe=l(),So=a("div"),F(WL.$$.fragment),Kxo=l(),Ui=a("p"),Zxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nO=a("a"),e$o=o("from_pretrained()"),o$o=o(" class method or the "),sO=a("a"),r$o=o("from_config()"),t$o=o(` class
method.`),a$o=l(),HL=a("p"),n$o=o("This class cannot be instantiated directly using "),Ige=a("code"),s$o=o("__init__()"),l$o=o(" (throws an error)."),i$o=l(),ct=a("div"),F(UL.$$.fragment),d$o=l(),qge=a("p"),c$o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),f$o=l(),Ji=a("p"),m$o=o(`Note:
Loading a model from its configuration file does `),jge=a("strong"),g$o=o("not"),h$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=a("a"),p$o=o("from_pretrained()"),_$o=o(" to load the model weights."),u$o=l(),F(H2.$$.fragment),b$o=l(),Ze=a("div"),F(JL.$$.fragment),v$o=l(),Dge=a("p"),F$o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),T$o=l(),qa=a("p"),M$o=o("The model class to instantiate is selected based on the "),Gge=a("code"),E$o=o("model_type"),C$o=o(` property of the config object (either
passed as an argument or loaded from `),Oge=a("code"),w$o=o("pretrained_model_name_or_path"),A$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vge=a("code"),L$o=o("pretrained_model_name_or_path"),y$o=o(":"),x$o=l(),z=a("ul"),U2=a("li"),Xge=a("strong"),$$o=o("bart"),k$o=o(" \u2014 "),iO=a("a"),S$o=o("BartForCausalLM"),R$o=o(" (BART model)"),P$o=l(),J2=a("li"),zge=a("strong"),B$o=o("bert"),N$o=o(" \u2014 "),dO=a("a"),I$o=o("BertLMHeadModel"),q$o=o(" (BERT model)"),j$o=l(),Y2=a("li"),Qge=a("strong"),D$o=o("bert-generation"),G$o=o(" \u2014 "),cO=a("a"),O$o=o("BertGenerationDecoder"),V$o=o(" (Bert Generation model)"),X$o=l(),K2=a("li"),Wge=a("strong"),z$o=o("big_bird"),Q$o=o(" \u2014 "),fO=a("a"),W$o=o("BigBirdForCausalLM"),H$o=o(" (BigBird model)"),U$o=l(),Z2=a("li"),Hge=a("strong"),J$o=o("bigbird_pegasus"),Y$o=o(" \u2014 "),mO=a("a"),K$o=o("BigBirdPegasusForCausalLM"),Z$o=o(" (BigBird-Pegasus model)"),eko=l(),e1=a("li"),Uge=a("strong"),oko=o("blenderbot"),rko=o(" \u2014 "),gO=a("a"),tko=o("BlenderbotForCausalLM"),ako=o(" (Blenderbot model)"),nko=l(),o1=a("li"),Jge=a("strong"),sko=o("blenderbot-small"),lko=o(" \u2014 "),hO=a("a"),iko=o("BlenderbotSmallForCausalLM"),dko=o(" (BlenderbotSmall model)"),cko=l(),r1=a("li"),Yge=a("strong"),fko=o("bloom"),mko=o(" \u2014 "),pO=a("a"),gko=o("BloomForCausalLM"),hko=o(" (BLOOM model)"),pko=l(),t1=a("li"),Kge=a("strong"),_ko=o("camembert"),uko=o(" \u2014 "),_O=a("a"),bko=o("CamembertForCausalLM"),vko=o(" (CamemBERT model)"),Fko=l(),a1=a("li"),Zge=a("strong"),Tko=o("codegen"),Mko=o(" \u2014 "),uO=a("a"),Eko=o("CodeGenForCausalLM"),Cko=o(" (CodeGen model)"),wko=l(),n1=a("li"),ehe=a("strong"),Ako=o("ctrl"),Lko=o(" \u2014 "),bO=a("a"),yko=o("CTRLLMHeadModel"),xko=o(" (CTRL model)"),$ko=l(),s1=a("li"),ohe=a("strong"),kko=o("data2vec-text"),Sko=o(" \u2014 "),vO=a("a"),Rko=o("Data2VecTextForCausalLM"),Pko=o(" (Data2VecText model)"),Bko=l(),l1=a("li"),rhe=a("strong"),Nko=o("electra"),Iko=o(" \u2014 "),FO=a("a"),qko=o("ElectraForCausalLM"),jko=o(" (ELECTRA model)"),Dko=l(),i1=a("li"),the=a("strong"),Gko=o("gpt2"),Oko=o(" \u2014 "),TO=a("a"),Vko=o("GPT2LMHeadModel"),Xko=o(" (OpenAI GPT-2 model)"),zko=l(),d1=a("li"),ahe=a("strong"),Qko=o("gpt_neo"),Wko=o(" \u2014 "),MO=a("a"),Hko=o("GPTNeoForCausalLM"),Uko=o(" (GPT Neo model)"),Jko=l(),c1=a("li"),nhe=a("strong"),Yko=o("gpt_neox"),Kko=o(" \u2014 "),EO=a("a"),Zko=o("GPTNeoXForCausalLM"),eSo=o(" (GPT NeoX model)"),oSo=l(),f1=a("li"),she=a("strong"),rSo=o("gptj"),tSo=o(" \u2014 "),CO=a("a"),aSo=o("GPTJForCausalLM"),nSo=o(" (GPT-J model)"),sSo=l(),m1=a("li"),lhe=a("strong"),lSo=o("marian"),iSo=o(" \u2014 "),wO=a("a"),dSo=o("MarianForCausalLM"),cSo=o(" (Marian model)"),fSo=l(),g1=a("li"),ihe=a("strong"),mSo=o("mbart"),gSo=o(" \u2014 "),AO=a("a"),hSo=o("MBartForCausalLM"),pSo=o(" (mBART model)"),_So=l(),h1=a("li"),dhe=a("strong"),uSo=o("megatron-bert"),bSo=o(" \u2014 "),LO=a("a"),vSo=o("MegatronBertForCausalLM"),FSo=o(" (Megatron-BERT model)"),TSo=l(),p1=a("li"),che=a("strong"),MSo=o("mvp"),ESo=o(" \u2014 "),yO=a("a"),CSo=o("MvpForCausalLM"),wSo=o(" (MVP model)"),ASo=l(),_1=a("li"),fhe=a("strong"),LSo=o("openai-gpt"),ySo=o(" \u2014 "),xO=a("a"),xSo=o("OpenAIGPTLMHeadModel"),$So=o(" (OpenAI GPT model)"),kSo=l(),u1=a("li"),mhe=a("strong"),SSo=o("opt"),RSo=o(" \u2014 "),$O=a("a"),PSo=o("OPTForCausalLM"),BSo=o(" (OPT model)"),NSo=l(),b1=a("li"),ghe=a("strong"),ISo=o("pegasus"),qSo=o(" \u2014 "),kO=a("a"),jSo=o("PegasusForCausalLM"),DSo=o(" (Pegasus model)"),GSo=l(),v1=a("li"),hhe=a("strong"),OSo=o("plbart"),VSo=o(" \u2014 "),SO=a("a"),XSo=o("PLBartForCausalLM"),zSo=o(" (PLBart model)"),QSo=l(),F1=a("li"),phe=a("strong"),WSo=o("prophetnet"),HSo=o(" \u2014 "),RO=a("a"),USo=o("ProphetNetForCausalLM"),JSo=o(" (ProphetNet model)"),YSo=l(),T1=a("li"),_he=a("strong"),KSo=o("qdqbert"),ZSo=o(" \u2014 "),PO=a("a"),eRo=o("QDQBertLMHeadModel"),oRo=o(" (QDQBert model)"),rRo=l(),M1=a("li"),uhe=a("strong"),tRo=o("reformer"),aRo=o(" \u2014 "),BO=a("a"),nRo=o("ReformerModelWithLMHead"),sRo=o(" (Reformer model)"),lRo=l(),E1=a("li"),bhe=a("strong"),iRo=o("rembert"),dRo=o(" \u2014 "),NO=a("a"),cRo=o("RemBertForCausalLM"),fRo=o(" (RemBERT model)"),mRo=l(),C1=a("li"),vhe=a("strong"),gRo=o("roberta"),hRo=o(" \u2014 "),IO=a("a"),pRo=o("RobertaForCausalLM"),_Ro=o(" (RoBERTa model)"),uRo=l(),w1=a("li"),Fhe=a("strong"),bRo=o("roformer"),vRo=o(" \u2014 "),qO=a("a"),FRo=o("RoFormerForCausalLM"),TRo=o(" (RoFormer model)"),MRo=l(),A1=a("li"),The=a("strong"),ERo=o("speech_to_text_2"),CRo=o(" \u2014 "),jO=a("a"),wRo=o("Speech2Text2ForCausalLM"),ARo=o(" (Speech2Text2 model)"),LRo=l(),L1=a("li"),Mhe=a("strong"),yRo=o("transfo-xl"),xRo=o(" \u2014 "),DO=a("a"),$Ro=o("TransfoXLLMHeadModel"),kRo=o(" (Transformer-XL model)"),SRo=l(),y1=a("li"),Ehe=a("strong"),RRo=o("trocr"),PRo=o(" \u2014 "),GO=a("a"),BRo=o("TrOCRForCausalLM"),NRo=o(" (TrOCR model)"),IRo=l(),x1=a("li"),Che=a("strong"),qRo=o("xglm"),jRo=o(" \u2014 "),OO=a("a"),DRo=o("XGLMForCausalLM"),GRo=o(" (XGLM model)"),ORo=l(),$1=a("li"),whe=a("strong"),VRo=o("xlm"),XRo=o(" \u2014 "),VO=a("a"),zRo=o("XLMWithLMHeadModel"),QRo=o(" (XLM model)"),WRo=l(),k1=a("li"),Ahe=a("strong"),HRo=o("xlm-prophetnet"),URo=o(" \u2014 "),XO=a("a"),JRo=o("XLMProphetNetForCausalLM"),YRo=o(" (XLM-ProphetNet model)"),KRo=l(),S1=a("li"),Lhe=a("strong"),ZRo=o("xlm-roberta"),ePo=o(" \u2014 "),zO=a("a"),oPo=o("XLMRobertaForCausalLM"),rPo=o(" (XLM-RoBERTa model)"),tPo=l(),R1=a("li"),yhe=a("strong"),aPo=o("xlm-roberta-xl"),nPo=o(" \u2014 "),QO=a("a"),sPo=o("XLMRobertaXLForCausalLM"),lPo=o(" (XLM-RoBERTa-XL model)"),iPo=l(),P1=a("li"),xhe=a("strong"),dPo=o("xlnet"),cPo=o(" \u2014 "),WO=a("a"),fPo=o("XLNetLMHeadModel"),mPo=o(" (XLNet model)"),gPo=l(),B1=a("p"),hPo=o("The model is set in evaluation mode by default using "),$he=a("code"),pPo=o("model.eval()"),_Po=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=a("code"),uPo=o("model.train()"),bPo=l(),F(N1.$$.fragment),GXe=l(),Yi=a("h2"),I1=a("a"),She=a("span"),F(YL.$$.fragment),vPo=l(),Rhe=a("span"),FPo=o("AutoModelForMaskedLM"),OXe=l(),Ro=a("div"),F(KL.$$.fragment),TPo=l(),Ki=a("p"),MPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HO=a("a"),EPo=o("from_pretrained()"),CPo=o(" class method or the "),UO=a("a"),wPo=o("from_config()"),APo=o(` class
method.`),LPo=l(),ZL=a("p"),yPo=o("This class cannot be instantiated directly using "),Phe=a("code"),xPo=o("__init__()"),$Po=o(" (throws an error)."),kPo=l(),ft=a("div"),F(ey.$$.fragment),SPo=l(),Bhe=a("p"),RPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PPo=l(),Zi=a("p"),BPo=o(`Note:
Loading a model from its configuration file does `),Nhe=a("strong"),NPo=o("not"),IPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),qPo=o("from_pretrained()"),jPo=o(" to load the model weights."),DPo=l(),F(q1.$$.fragment),GPo=l(),eo=a("div"),F(oy.$$.fragment),OPo=l(),Ihe=a("p"),VPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XPo=l(),ja=a("p"),zPo=o("The model class to instantiate is selected based on the "),qhe=a("code"),QPo=o("model_type"),WPo=o(` property of the config object (either
passed as an argument or loaded from `),jhe=a("code"),HPo=o("pretrained_model_name_or_path"),UPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=a("code"),JPo=o("pretrained_model_name_or_path"),YPo=o(":"),KPo=l(),W=a("ul"),j1=a("li"),Ghe=a("strong"),ZPo=o("albert"),eBo=o(" \u2014 "),YO=a("a"),oBo=o("AlbertForMaskedLM"),rBo=o(" (ALBERT model)"),tBo=l(),D1=a("li"),Ohe=a("strong"),aBo=o("bart"),nBo=o(" \u2014 "),KO=a("a"),sBo=o("BartForConditionalGeneration"),lBo=o(" (BART model)"),iBo=l(),G1=a("li"),Vhe=a("strong"),dBo=o("bert"),cBo=o(" \u2014 "),ZO=a("a"),fBo=o("BertForMaskedLM"),mBo=o(" (BERT model)"),gBo=l(),O1=a("li"),Xhe=a("strong"),hBo=o("big_bird"),pBo=o(" \u2014 "),eV=a("a"),_Bo=o("BigBirdForMaskedLM"),uBo=o(" (BigBird model)"),bBo=l(),V1=a("li"),zhe=a("strong"),vBo=o("camembert"),FBo=o(" \u2014 "),oV=a("a"),TBo=o("CamembertForMaskedLM"),MBo=o(" (CamemBERT model)"),EBo=l(),X1=a("li"),Qhe=a("strong"),CBo=o("convbert"),wBo=o(" \u2014 "),rV=a("a"),ABo=o("ConvBertForMaskedLM"),LBo=o(" (ConvBERT model)"),yBo=l(),z1=a("li"),Whe=a("strong"),xBo=o("data2vec-text"),$Bo=o(" \u2014 "),tV=a("a"),kBo=o("Data2VecTextForMaskedLM"),SBo=o(" (Data2VecText model)"),RBo=l(),Q1=a("li"),Hhe=a("strong"),PBo=o("deberta"),BBo=o(" \u2014 "),aV=a("a"),NBo=o("DebertaForMaskedLM"),IBo=o(" (DeBERTa model)"),qBo=l(),W1=a("li"),Uhe=a("strong"),jBo=o("deberta-v2"),DBo=o(" \u2014 "),nV=a("a"),GBo=o("DebertaV2ForMaskedLM"),OBo=o(" (DeBERTa-v2 model)"),VBo=l(),H1=a("li"),Jhe=a("strong"),XBo=o("distilbert"),zBo=o(" \u2014 "),sV=a("a"),QBo=o("DistilBertForMaskedLM"),WBo=o(" (DistilBERT model)"),HBo=l(),U1=a("li"),Yhe=a("strong"),UBo=o("electra"),JBo=o(" \u2014 "),lV=a("a"),YBo=o("ElectraForMaskedLM"),KBo=o(" (ELECTRA model)"),ZBo=l(),J1=a("li"),Khe=a("strong"),eNo=o("flaubert"),oNo=o(" \u2014 "),iV=a("a"),rNo=o("FlaubertWithLMHeadModel"),tNo=o(" (FlauBERT model)"),aNo=l(),Y1=a("li"),Zhe=a("strong"),nNo=o("fnet"),sNo=o(" \u2014 "),dV=a("a"),lNo=o("FNetForMaskedLM"),iNo=o(" (FNet model)"),dNo=l(),K1=a("li"),epe=a("strong"),cNo=o("funnel"),fNo=o(" \u2014 "),cV=a("a"),mNo=o("FunnelForMaskedLM"),gNo=o(" (Funnel Transformer model)"),hNo=l(),Z1=a("li"),ope=a("strong"),pNo=o("ibert"),_No=o(" \u2014 "),fV=a("a"),uNo=o("IBertForMaskedLM"),bNo=o(" (I-BERT model)"),vNo=l(),eb=a("li"),rpe=a("strong"),FNo=o("layoutlm"),TNo=o(" \u2014 "),mV=a("a"),MNo=o("LayoutLMForMaskedLM"),ENo=o(" (LayoutLM model)"),CNo=l(),ob=a("li"),tpe=a("strong"),wNo=o("longformer"),ANo=o(" \u2014 "),gV=a("a"),LNo=o("LongformerForMaskedLM"),yNo=o(" (Longformer model)"),xNo=l(),rb=a("li"),ape=a("strong"),$No=o("luke"),kNo=o(" \u2014 "),hV=a("a"),SNo=o("LukeForMaskedLM"),RNo=o(" (LUKE model)"),PNo=l(),tb=a("li"),npe=a("strong"),BNo=o("mbart"),NNo=o(" \u2014 "),pV=a("a"),INo=o("MBartForConditionalGeneration"),qNo=o(" (mBART model)"),jNo=l(),ab=a("li"),spe=a("strong"),DNo=o("megatron-bert"),GNo=o(" \u2014 "),_V=a("a"),ONo=o("MegatronBertForMaskedLM"),VNo=o(" (Megatron-BERT model)"),XNo=l(),nb=a("li"),lpe=a("strong"),zNo=o("mobilebert"),QNo=o(" \u2014 "),uV=a("a"),WNo=o("MobileBertForMaskedLM"),HNo=o(" (MobileBERT model)"),UNo=l(),sb=a("li"),ipe=a("strong"),JNo=o("mpnet"),YNo=o(" \u2014 "),bV=a("a"),KNo=o("MPNetForMaskedLM"),ZNo=o(" (MPNet model)"),eIo=l(),lb=a("li"),dpe=a("strong"),oIo=o("mvp"),rIo=o(" \u2014 "),vV=a("a"),tIo=o("MvpForConditionalGeneration"),aIo=o(" (MVP model)"),nIo=l(),ib=a("li"),cpe=a("strong"),sIo=o("nezha"),lIo=o(" \u2014 "),FV=a("a"),iIo=o("NezhaForMaskedLM"),dIo=o(" (Nezha model)"),cIo=l(),db=a("li"),fpe=a("strong"),fIo=o("nystromformer"),mIo=o(" \u2014 "),TV=a("a"),gIo=o("NystromformerForMaskedLM"),hIo=o(" (Nystr\xF6mformer model)"),pIo=l(),cb=a("li"),mpe=a("strong"),_Io=o("perceiver"),uIo=o(" \u2014 "),MV=a("a"),bIo=o("PerceiverForMaskedLM"),vIo=o(" (Perceiver model)"),FIo=l(),fb=a("li"),gpe=a("strong"),TIo=o("qdqbert"),MIo=o(" \u2014 "),EV=a("a"),EIo=o("QDQBertForMaskedLM"),CIo=o(" (QDQBert model)"),wIo=l(),mb=a("li"),hpe=a("strong"),AIo=o("reformer"),LIo=o(" \u2014 "),CV=a("a"),yIo=o("ReformerForMaskedLM"),xIo=o(" (Reformer model)"),$Io=l(),gb=a("li"),ppe=a("strong"),kIo=o("rembert"),SIo=o(" \u2014 "),wV=a("a"),RIo=o("RemBertForMaskedLM"),PIo=o(" (RemBERT model)"),BIo=l(),hb=a("li"),_pe=a("strong"),NIo=o("roberta"),IIo=o(" \u2014 "),AV=a("a"),qIo=o("RobertaForMaskedLM"),jIo=o(" (RoBERTa model)"),DIo=l(),pb=a("li"),upe=a("strong"),GIo=o("roformer"),OIo=o(" \u2014 "),LV=a("a"),VIo=o("RoFormerForMaskedLM"),XIo=o(" (RoFormer model)"),zIo=l(),_b=a("li"),bpe=a("strong"),QIo=o("squeezebert"),WIo=o(" \u2014 "),yV=a("a"),HIo=o("SqueezeBertForMaskedLM"),UIo=o(" (SqueezeBERT model)"),JIo=l(),ub=a("li"),vpe=a("strong"),YIo=o("tapas"),KIo=o(" \u2014 "),xV=a("a"),ZIo=o("TapasForMaskedLM"),eqo=o(" (TAPAS model)"),oqo=l(),bb=a("li"),Fpe=a("strong"),rqo=o("wav2vec2"),tqo=o(" \u2014 "),Tpe=a("code"),aqo=o("Wav2Vec2ForMaskedLM"),nqo=o(" (Wav2Vec2 model)"),sqo=l(),vb=a("li"),Mpe=a("strong"),lqo=o("xlm"),iqo=o(" \u2014 "),$V=a("a"),dqo=o("XLMWithLMHeadModel"),cqo=o(" (XLM model)"),fqo=l(),Fb=a("li"),Epe=a("strong"),mqo=o("xlm-roberta"),gqo=o(" \u2014 "),kV=a("a"),hqo=o("XLMRobertaForMaskedLM"),pqo=o(" (XLM-RoBERTa model)"),_qo=l(),Tb=a("li"),Cpe=a("strong"),uqo=o("xlm-roberta-xl"),bqo=o(" \u2014 "),SV=a("a"),vqo=o("XLMRobertaXLForMaskedLM"),Fqo=o(" (XLM-RoBERTa-XL model)"),Tqo=l(),Mb=a("li"),wpe=a("strong"),Mqo=o("yoso"),Eqo=o(" \u2014 "),RV=a("a"),Cqo=o("YosoForMaskedLM"),wqo=o(" (YOSO model)"),Aqo=l(),Eb=a("p"),Lqo=o("The model is set in evaluation mode by default using "),Ape=a("code"),yqo=o("model.eval()"),xqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=a("code"),$qo=o("model.train()"),kqo=l(),F(Cb.$$.fragment),VXe=l(),ed=a("h2"),wb=a("a"),ype=a("span"),F(ry.$$.fragment),Sqo=l(),xpe=a("span"),Rqo=o("AutoModelForSeq2SeqLM"),XXe=l(),Po=a("div"),F(ty.$$.fragment),Pqo=l(),od=a("p"),Bqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PV=a("a"),Nqo=o("from_pretrained()"),Iqo=o(" class method or the "),BV=a("a"),qqo=o("from_config()"),jqo=o(` class
method.`),Dqo=l(),ay=a("p"),Gqo=o("This class cannot be instantiated directly using "),$pe=a("code"),Oqo=o("__init__()"),Vqo=o(" (throws an error)."),Xqo=l(),mt=a("div"),F(ny.$$.fragment),zqo=l(),kpe=a("p"),Qqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Wqo=l(),rd=a("p"),Hqo=o(`Note:
Loading a model from its configuration file does `),Spe=a("strong"),Uqo=o("not"),Jqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=a("a"),Yqo=o("from_pretrained()"),Kqo=o(" to load the model weights."),Zqo=l(),F(Ab.$$.fragment),ejo=l(),oo=a("div"),F(sy.$$.fragment),ojo=l(),Rpe=a("p"),rjo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tjo=l(),Da=a("p"),ajo=o("The model class to instantiate is selected based on the "),Ppe=a("code"),njo=o("model_type"),sjo=o(` property of the config object (either
passed as an argument or loaded from `),Bpe=a("code"),ljo=o("pretrained_model_name_or_path"),ijo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),djo=o("pretrained_model_name_or_path"),cjo=o(":"),fjo=l(),fe=a("ul"),Lb=a("li"),Ipe=a("strong"),mjo=o("bart"),gjo=o(" \u2014 "),IV=a("a"),hjo=o("BartForConditionalGeneration"),pjo=o(" (BART model)"),_jo=l(),yb=a("li"),qpe=a("strong"),ujo=o("bigbird_pegasus"),bjo=o(" \u2014 "),qV=a("a"),vjo=o("BigBirdPegasusForConditionalGeneration"),Fjo=o(" (BigBird-Pegasus model)"),Tjo=l(),xb=a("li"),jpe=a("strong"),Mjo=o("blenderbot"),Ejo=o(" \u2014 "),jV=a("a"),Cjo=o("BlenderbotForConditionalGeneration"),wjo=o(" (Blenderbot model)"),Ajo=l(),$b=a("li"),Dpe=a("strong"),Ljo=o("blenderbot-small"),yjo=o(" \u2014 "),DV=a("a"),xjo=o("BlenderbotSmallForConditionalGeneration"),$jo=o(" (BlenderbotSmall model)"),kjo=l(),kb=a("li"),Gpe=a("strong"),Sjo=o("encoder-decoder"),Rjo=o(" \u2014 "),GV=a("a"),Pjo=o("EncoderDecoderModel"),Bjo=o(" (Encoder decoder model)"),Njo=l(),Sb=a("li"),Ope=a("strong"),Ijo=o("fsmt"),qjo=o(" \u2014 "),OV=a("a"),jjo=o("FSMTForConditionalGeneration"),Djo=o(" (FairSeq Machine-Translation model)"),Gjo=l(),Rb=a("li"),Vpe=a("strong"),Ojo=o("led"),Vjo=o(" \u2014 "),VV=a("a"),Xjo=o("LEDForConditionalGeneration"),zjo=o(" (LED model)"),Qjo=l(),Pb=a("li"),Xpe=a("strong"),Wjo=o("longt5"),Hjo=o(" \u2014 "),XV=a("a"),Ujo=o("LongT5ForConditionalGeneration"),Jjo=o(" (LongT5 model)"),Yjo=l(),Bb=a("li"),zpe=a("strong"),Kjo=o("m2m_100"),Zjo=o(" \u2014 "),zV=a("a"),eDo=o("M2M100ForConditionalGeneration"),oDo=o(" (M2M100 model)"),rDo=l(),Nb=a("li"),Qpe=a("strong"),tDo=o("marian"),aDo=o(" \u2014 "),QV=a("a"),nDo=o("MarianMTModel"),sDo=o(" (Marian model)"),lDo=l(),Ib=a("li"),Wpe=a("strong"),iDo=o("mbart"),dDo=o(" \u2014 "),WV=a("a"),cDo=o("MBartForConditionalGeneration"),fDo=o(" (mBART model)"),mDo=l(),qb=a("li"),Hpe=a("strong"),gDo=o("mt5"),hDo=o(" \u2014 "),HV=a("a"),pDo=o("MT5ForConditionalGeneration"),_Do=o(" (MT5 model)"),uDo=l(),jb=a("li"),Upe=a("strong"),bDo=o("mvp"),vDo=o(" \u2014 "),UV=a("a"),FDo=o("MvpForConditionalGeneration"),TDo=o(" (MVP model)"),MDo=l(),Db=a("li"),Jpe=a("strong"),EDo=o("nllb"),CDo=o(" \u2014 "),JV=a("a"),wDo=o("M2M100ForConditionalGeneration"),ADo=o(" (NLLB model)"),LDo=l(),Gb=a("li"),Ype=a("strong"),yDo=o("pegasus"),xDo=o(" \u2014 "),YV=a("a"),$Do=o("PegasusForConditionalGeneration"),kDo=o(" (Pegasus model)"),SDo=l(),Ob=a("li"),Kpe=a("strong"),RDo=o("plbart"),PDo=o(" \u2014 "),KV=a("a"),BDo=o("PLBartForConditionalGeneration"),NDo=o(" (PLBart model)"),IDo=l(),Vb=a("li"),Zpe=a("strong"),qDo=o("prophetnet"),jDo=o(" \u2014 "),ZV=a("a"),DDo=o("ProphetNetForConditionalGeneration"),GDo=o(" (ProphetNet model)"),ODo=l(),Xb=a("li"),e_e=a("strong"),VDo=o("t5"),XDo=o(" \u2014 "),eX=a("a"),zDo=o("T5ForConditionalGeneration"),QDo=o(" (T5 model)"),WDo=l(),zb=a("li"),o_e=a("strong"),HDo=o("xlm-prophetnet"),UDo=o(" \u2014 "),oX=a("a"),JDo=o("XLMProphetNetForConditionalGeneration"),YDo=o(" (XLM-ProphetNet model)"),KDo=l(),Qb=a("p"),ZDo=o("The model is set in evaluation mode by default using "),r_e=a("code"),eGo=o("model.eval()"),oGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=a("code"),rGo=o("model.train()"),tGo=l(),F(Wb.$$.fragment),zXe=l(),td=a("h2"),Hb=a("a"),a_e=a("span"),F(ly.$$.fragment),aGo=l(),n_e=a("span"),nGo=o("AutoModelForSequenceClassification"),QXe=l(),Bo=a("div"),F(iy.$$.fragment),sGo=l(),ad=a("p"),lGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rX=a("a"),iGo=o("from_pretrained()"),dGo=o(" class method or the "),tX=a("a"),cGo=o("from_config()"),fGo=o(` class
method.`),mGo=l(),dy=a("p"),gGo=o("This class cannot be instantiated directly using "),s_e=a("code"),hGo=o("__init__()"),pGo=o(" (throws an error)."),_Go=l(),gt=a("div"),F(cy.$$.fragment),uGo=l(),l_e=a("p"),bGo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vGo=l(),nd=a("p"),FGo=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),TGo=o("not"),MGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),EGo=o("from_pretrained()"),CGo=o(" to load the model weights."),wGo=l(),F(Ub.$$.fragment),AGo=l(),ro=a("div"),F(fy.$$.fragment),LGo=l(),d_e=a("p"),yGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xGo=l(),Ga=a("p"),$Go=o("The model class to instantiate is selected based on the "),c_e=a("code"),kGo=o("model_type"),SGo=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),RGo=o("pretrained_model_name_or_path"),PGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=a("code"),BGo=o("pretrained_model_name_or_path"),NGo=o(":"),IGo=l(),I=a("ul"),Jb=a("li"),g_e=a("strong"),qGo=o("albert"),jGo=o(" \u2014 "),nX=a("a"),DGo=o("AlbertForSequenceClassification"),GGo=o(" (ALBERT model)"),OGo=l(),Yb=a("li"),h_e=a("strong"),VGo=o("bart"),XGo=o(" \u2014 "),sX=a("a"),zGo=o("BartForSequenceClassification"),QGo=o(" (BART model)"),WGo=l(),Kb=a("li"),p_e=a("strong"),HGo=o("bert"),UGo=o(" \u2014 "),lX=a("a"),JGo=o("BertForSequenceClassification"),YGo=o(" (BERT model)"),KGo=l(),Zb=a("li"),__e=a("strong"),ZGo=o("big_bird"),eOo=o(" \u2014 "),iX=a("a"),oOo=o("BigBirdForSequenceClassification"),rOo=o(" (BigBird model)"),tOo=l(),ev=a("li"),u_e=a("strong"),aOo=o("bigbird_pegasus"),nOo=o(" \u2014 "),dX=a("a"),sOo=o("BigBirdPegasusForSequenceClassification"),lOo=o(" (BigBird-Pegasus model)"),iOo=l(),ov=a("li"),b_e=a("strong"),dOo=o("bloom"),cOo=o(" \u2014 "),cX=a("a"),fOo=o("BloomForSequenceClassification"),mOo=o(" (BLOOM model)"),gOo=l(),rv=a("li"),v_e=a("strong"),hOo=o("camembert"),pOo=o(" \u2014 "),fX=a("a"),_Oo=o("CamembertForSequenceClassification"),uOo=o(" (CamemBERT model)"),bOo=l(),tv=a("li"),F_e=a("strong"),vOo=o("canine"),FOo=o(" \u2014 "),mX=a("a"),TOo=o("CanineForSequenceClassification"),MOo=o(" (CANINE model)"),EOo=l(),av=a("li"),T_e=a("strong"),COo=o("convbert"),wOo=o(" \u2014 "),gX=a("a"),AOo=o("ConvBertForSequenceClassification"),LOo=o(" (ConvBERT model)"),yOo=l(),nv=a("li"),M_e=a("strong"),xOo=o("ctrl"),$Oo=o(" \u2014 "),hX=a("a"),kOo=o("CTRLForSequenceClassification"),SOo=o(" (CTRL model)"),ROo=l(),sv=a("li"),E_e=a("strong"),POo=o("data2vec-text"),BOo=o(" \u2014 "),pX=a("a"),NOo=o("Data2VecTextForSequenceClassification"),IOo=o(" (Data2VecText model)"),qOo=l(),lv=a("li"),C_e=a("strong"),jOo=o("deberta"),DOo=o(" \u2014 "),_X=a("a"),GOo=o("DebertaForSequenceClassification"),OOo=o(" (DeBERTa model)"),VOo=l(),iv=a("li"),w_e=a("strong"),XOo=o("deberta-v2"),zOo=o(" \u2014 "),uX=a("a"),QOo=o("DebertaV2ForSequenceClassification"),WOo=o(" (DeBERTa-v2 model)"),HOo=l(),dv=a("li"),A_e=a("strong"),UOo=o("distilbert"),JOo=o(" \u2014 "),bX=a("a"),YOo=o("DistilBertForSequenceClassification"),KOo=o(" (DistilBERT model)"),ZOo=l(),cv=a("li"),L_e=a("strong"),eVo=o("electra"),oVo=o(" \u2014 "),vX=a("a"),rVo=o("ElectraForSequenceClassification"),tVo=o(" (ELECTRA model)"),aVo=l(),fv=a("li"),y_e=a("strong"),nVo=o("flaubert"),sVo=o(" \u2014 "),FX=a("a"),lVo=o("FlaubertForSequenceClassification"),iVo=o(" (FlauBERT model)"),dVo=l(),mv=a("li"),x_e=a("strong"),cVo=o("fnet"),fVo=o(" \u2014 "),TX=a("a"),mVo=o("FNetForSequenceClassification"),gVo=o(" (FNet model)"),hVo=l(),gv=a("li"),$_e=a("strong"),pVo=o("funnel"),_Vo=o(" \u2014 "),MX=a("a"),uVo=o("FunnelForSequenceClassification"),bVo=o(" (Funnel Transformer model)"),vVo=l(),hv=a("li"),k_e=a("strong"),FVo=o("gpt2"),TVo=o(" \u2014 "),EX=a("a"),MVo=o("GPT2ForSequenceClassification"),EVo=o(" (OpenAI GPT-2 model)"),CVo=l(),pv=a("li"),S_e=a("strong"),wVo=o("gpt_neo"),AVo=o(" \u2014 "),CX=a("a"),LVo=o("GPTNeoForSequenceClassification"),yVo=o(" (GPT Neo model)"),xVo=l(),_v=a("li"),R_e=a("strong"),$Vo=o("gptj"),kVo=o(" \u2014 "),wX=a("a"),SVo=o("GPTJForSequenceClassification"),RVo=o(" (GPT-J model)"),PVo=l(),uv=a("li"),P_e=a("strong"),BVo=o("ibert"),NVo=o(" \u2014 "),AX=a("a"),IVo=o("IBertForSequenceClassification"),qVo=o(" (I-BERT model)"),jVo=l(),bv=a("li"),B_e=a("strong"),DVo=o("layoutlm"),GVo=o(" \u2014 "),LX=a("a"),OVo=o("LayoutLMForSequenceClassification"),VVo=o(" (LayoutLM model)"),XVo=l(),vv=a("li"),N_e=a("strong"),zVo=o("layoutlmv2"),QVo=o(" \u2014 "),yX=a("a"),WVo=o("LayoutLMv2ForSequenceClassification"),HVo=o(" (LayoutLMv2 model)"),UVo=l(),Fv=a("li"),I_e=a("strong"),JVo=o("layoutlmv3"),YVo=o(" \u2014 "),xX=a("a"),KVo=o("LayoutLMv3ForSequenceClassification"),ZVo=o(" (LayoutLMv3 model)"),eXo=l(),Tv=a("li"),q_e=a("strong"),oXo=o("led"),rXo=o(" \u2014 "),$X=a("a"),tXo=o("LEDForSequenceClassification"),aXo=o(" (LED model)"),nXo=l(),Mv=a("li"),j_e=a("strong"),sXo=o("longformer"),lXo=o(" \u2014 "),kX=a("a"),iXo=o("LongformerForSequenceClassification"),dXo=o(" (Longformer model)"),cXo=l(),Ev=a("li"),D_e=a("strong"),fXo=o("mbart"),mXo=o(" \u2014 "),SX=a("a"),gXo=o("MBartForSequenceClassification"),hXo=o(" (mBART model)"),pXo=l(),Cv=a("li"),G_e=a("strong"),_Xo=o("megatron-bert"),uXo=o(" \u2014 "),RX=a("a"),bXo=o("MegatronBertForSequenceClassification"),vXo=o(" (Megatron-BERT model)"),FXo=l(),wv=a("li"),O_e=a("strong"),TXo=o("mobilebert"),MXo=o(" \u2014 "),PX=a("a"),EXo=o("MobileBertForSequenceClassification"),CXo=o(" (MobileBERT model)"),wXo=l(),Av=a("li"),V_e=a("strong"),AXo=o("mpnet"),LXo=o(" \u2014 "),BX=a("a"),yXo=o("MPNetForSequenceClassification"),xXo=o(" (MPNet model)"),$Xo=l(),Lv=a("li"),X_e=a("strong"),kXo=o("mvp"),SXo=o(" \u2014 "),NX=a("a"),RXo=o("MvpForSequenceClassification"),PXo=o(" (MVP model)"),BXo=l(),yv=a("li"),z_e=a("strong"),NXo=o("nezha"),IXo=o(" \u2014 "),IX=a("a"),qXo=o("NezhaForSequenceClassification"),jXo=o(" (Nezha model)"),DXo=l(),xv=a("li"),Q_e=a("strong"),GXo=o("nystromformer"),OXo=o(" \u2014 "),qX=a("a"),VXo=o("NystromformerForSequenceClassification"),XXo=o(" (Nystr\xF6mformer model)"),zXo=l(),$v=a("li"),W_e=a("strong"),QXo=o("openai-gpt"),WXo=o(" \u2014 "),jX=a("a"),HXo=o("OpenAIGPTForSequenceClassification"),UXo=o(" (OpenAI GPT model)"),JXo=l(),kv=a("li"),H_e=a("strong"),YXo=o("perceiver"),KXo=o(" \u2014 "),DX=a("a"),ZXo=o("PerceiverForSequenceClassification"),ezo=o(" (Perceiver model)"),ozo=l(),Sv=a("li"),U_e=a("strong"),rzo=o("plbart"),tzo=o(" \u2014 "),GX=a("a"),azo=o("PLBartForSequenceClassification"),nzo=o(" (PLBart model)"),szo=l(),Rv=a("li"),J_e=a("strong"),lzo=o("qdqbert"),izo=o(" \u2014 "),OX=a("a"),dzo=o("QDQBertForSequenceClassification"),czo=o(" (QDQBert model)"),fzo=l(),Pv=a("li"),Y_e=a("strong"),mzo=o("reformer"),gzo=o(" \u2014 "),VX=a("a"),hzo=o("ReformerForSequenceClassification"),pzo=o(" (Reformer model)"),_zo=l(),Bv=a("li"),K_e=a("strong"),uzo=o("rembert"),bzo=o(" \u2014 "),XX=a("a"),vzo=o("RemBertForSequenceClassification"),Fzo=o(" (RemBERT model)"),Tzo=l(),Nv=a("li"),Z_e=a("strong"),Mzo=o("roberta"),Ezo=o(" \u2014 "),zX=a("a"),Czo=o("RobertaForSequenceClassification"),wzo=o(" (RoBERTa model)"),Azo=l(),Iv=a("li"),eue=a("strong"),Lzo=o("roformer"),yzo=o(" \u2014 "),QX=a("a"),xzo=o("RoFormerForSequenceClassification"),$zo=o(" (RoFormer model)"),kzo=l(),qv=a("li"),oue=a("strong"),Szo=o("squeezebert"),Rzo=o(" \u2014 "),WX=a("a"),Pzo=o("SqueezeBertForSequenceClassification"),Bzo=o(" (SqueezeBERT model)"),Nzo=l(),jv=a("li"),rue=a("strong"),Izo=o("tapas"),qzo=o(" \u2014 "),HX=a("a"),jzo=o("TapasForSequenceClassification"),Dzo=o(" (TAPAS model)"),Gzo=l(),Dv=a("li"),tue=a("strong"),Ozo=o("transfo-xl"),Vzo=o(" \u2014 "),UX=a("a"),Xzo=o("TransfoXLForSequenceClassification"),zzo=o(" (Transformer-XL model)"),Qzo=l(),Gv=a("li"),aue=a("strong"),Wzo=o("xlm"),Hzo=o(" \u2014 "),JX=a("a"),Uzo=o("XLMForSequenceClassification"),Jzo=o(" (XLM model)"),Yzo=l(),Ov=a("li"),nue=a("strong"),Kzo=o("xlm-roberta"),Zzo=o(" \u2014 "),YX=a("a"),eQo=o("XLMRobertaForSequenceClassification"),oQo=o(" (XLM-RoBERTa model)"),rQo=l(),Vv=a("li"),sue=a("strong"),tQo=o("xlm-roberta-xl"),aQo=o(" \u2014 "),KX=a("a"),nQo=o("XLMRobertaXLForSequenceClassification"),sQo=o(" (XLM-RoBERTa-XL model)"),lQo=l(),Xv=a("li"),lue=a("strong"),iQo=o("xlnet"),dQo=o(" \u2014 "),ZX=a("a"),cQo=o("XLNetForSequenceClassification"),fQo=o(" (XLNet model)"),mQo=l(),zv=a("li"),iue=a("strong"),gQo=o("yoso"),hQo=o(" \u2014 "),ez=a("a"),pQo=o("YosoForSequenceClassification"),_Qo=o(" (YOSO model)"),uQo=l(),Qv=a("p"),bQo=o("The model is set in evaluation mode by default using "),due=a("code"),vQo=o("model.eval()"),FQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),TQo=o("model.train()"),MQo=l(),F(Wv.$$.fragment),WXe=l(),sd=a("h2"),Hv=a("a"),fue=a("span"),F(my.$$.fragment),EQo=l(),mue=a("span"),CQo=o("AutoModelForMultipleChoice"),HXe=l(),No=a("div"),F(gy.$$.fragment),wQo=l(),ld=a("p"),AQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oz=a("a"),LQo=o("from_pretrained()"),yQo=o(" class method or the "),rz=a("a"),xQo=o("from_config()"),$Qo=o(` class
method.`),kQo=l(),hy=a("p"),SQo=o("This class cannot be instantiated directly using "),gue=a("code"),RQo=o("__init__()"),PQo=o(" (throws an error)."),BQo=l(),ht=a("div"),F(py.$$.fragment),NQo=l(),hue=a("p"),IQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qQo=l(),id=a("p"),jQo=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),DQo=o("not"),GQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),OQo=o("from_pretrained()"),VQo=o(" to load the model weights."),XQo=l(),F(Uv.$$.fragment),zQo=l(),to=a("div"),F(_y.$$.fragment),QQo=l(),_ue=a("p"),WQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),HQo=l(),Oa=a("p"),UQo=o("The model class to instantiate is selected based on the "),uue=a("code"),JQo=o("model_type"),YQo=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),KQo=o("pretrained_model_name_or_path"),ZQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),eWo=o("pretrained_model_name_or_path"),oWo=o(":"),rWo=l(),Z=a("ul"),Jv=a("li"),Fue=a("strong"),tWo=o("albert"),aWo=o(" \u2014 "),az=a("a"),nWo=o("AlbertForMultipleChoice"),sWo=o(" (ALBERT model)"),lWo=l(),Yv=a("li"),Tue=a("strong"),iWo=o("bert"),dWo=o(" \u2014 "),nz=a("a"),cWo=o("BertForMultipleChoice"),fWo=o(" (BERT model)"),mWo=l(),Kv=a("li"),Mue=a("strong"),gWo=o("big_bird"),hWo=o(" \u2014 "),sz=a("a"),pWo=o("BigBirdForMultipleChoice"),_Wo=o(" (BigBird model)"),uWo=l(),Zv=a("li"),Eue=a("strong"),bWo=o("camembert"),vWo=o(" \u2014 "),lz=a("a"),FWo=o("CamembertForMultipleChoice"),TWo=o(" (CamemBERT model)"),MWo=l(),eF=a("li"),Cue=a("strong"),EWo=o("canine"),CWo=o(" \u2014 "),iz=a("a"),wWo=o("CanineForMultipleChoice"),AWo=o(" (CANINE model)"),LWo=l(),oF=a("li"),wue=a("strong"),yWo=o("convbert"),xWo=o(" \u2014 "),dz=a("a"),$Wo=o("ConvBertForMultipleChoice"),kWo=o(" (ConvBERT model)"),SWo=l(),rF=a("li"),Aue=a("strong"),RWo=o("data2vec-text"),PWo=o(" \u2014 "),cz=a("a"),BWo=o("Data2VecTextForMultipleChoice"),NWo=o(" (Data2VecText model)"),IWo=l(),tF=a("li"),Lue=a("strong"),qWo=o("deberta-v2"),jWo=o(" \u2014 "),fz=a("a"),DWo=o("DebertaV2ForMultipleChoice"),GWo=o(" (DeBERTa-v2 model)"),OWo=l(),aF=a("li"),yue=a("strong"),VWo=o("distilbert"),XWo=o(" \u2014 "),mz=a("a"),zWo=o("DistilBertForMultipleChoice"),QWo=o(" (DistilBERT model)"),WWo=l(),nF=a("li"),xue=a("strong"),HWo=o("electra"),UWo=o(" \u2014 "),gz=a("a"),JWo=o("ElectraForMultipleChoice"),YWo=o(" (ELECTRA model)"),KWo=l(),sF=a("li"),$ue=a("strong"),ZWo=o("flaubert"),eHo=o(" \u2014 "),hz=a("a"),oHo=o("FlaubertForMultipleChoice"),rHo=o(" (FlauBERT model)"),tHo=l(),lF=a("li"),kue=a("strong"),aHo=o("fnet"),nHo=o(" \u2014 "),pz=a("a"),sHo=o("FNetForMultipleChoice"),lHo=o(" (FNet model)"),iHo=l(),iF=a("li"),Sue=a("strong"),dHo=o("funnel"),cHo=o(" \u2014 "),_z=a("a"),fHo=o("FunnelForMultipleChoice"),mHo=o(" (Funnel Transformer model)"),gHo=l(),dF=a("li"),Rue=a("strong"),hHo=o("ibert"),pHo=o(" \u2014 "),uz=a("a"),_Ho=o("IBertForMultipleChoice"),uHo=o(" (I-BERT model)"),bHo=l(),cF=a("li"),Pue=a("strong"),vHo=o("longformer"),FHo=o(" \u2014 "),bz=a("a"),THo=o("LongformerForMultipleChoice"),MHo=o(" (Longformer model)"),EHo=l(),fF=a("li"),Bue=a("strong"),CHo=o("megatron-bert"),wHo=o(" \u2014 "),vz=a("a"),AHo=o("MegatronBertForMultipleChoice"),LHo=o(" (Megatron-BERT model)"),yHo=l(),mF=a("li"),Nue=a("strong"),xHo=o("mobilebert"),$Ho=o(" \u2014 "),Fz=a("a"),kHo=o("MobileBertForMultipleChoice"),SHo=o(" (MobileBERT model)"),RHo=l(),gF=a("li"),Iue=a("strong"),PHo=o("mpnet"),BHo=o(" \u2014 "),Tz=a("a"),NHo=o("MPNetForMultipleChoice"),IHo=o(" (MPNet model)"),qHo=l(),hF=a("li"),que=a("strong"),jHo=o("nezha"),DHo=o(" \u2014 "),Mz=a("a"),GHo=o("NezhaForMultipleChoice"),OHo=o(" (Nezha model)"),VHo=l(),pF=a("li"),jue=a("strong"),XHo=o("nystromformer"),zHo=o(" \u2014 "),Ez=a("a"),QHo=o("NystromformerForMultipleChoice"),WHo=o(" (Nystr\xF6mformer model)"),HHo=l(),_F=a("li"),Due=a("strong"),UHo=o("qdqbert"),JHo=o(" \u2014 "),Cz=a("a"),YHo=o("QDQBertForMultipleChoice"),KHo=o(" (QDQBert model)"),ZHo=l(),uF=a("li"),Gue=a("strong"),eUo=o("rembert"),oUo=o(" \u2014 "),wz=a("a"),rUo=o("RemBertForMultipleChoice"),tUo=o(" (RemBERT model)"),aUo=l(),bF=a("li"),Oue=a("strong"),nUo=o("roberta"),sUo=o(" \u2014 "),Az=a("a"),lUo=o("RobertaForMultipleChoice"),iUo=o(" (RoBERTa model)"),dUo=l(),vF=a("li"),Vue=a("strong"),cUo=o("roformer"),fUo=o(" \u2014 "),Lz=a("a"),mUo=o("RoFormerForMultipleChoice"),gUo=o(" (RoFormer model)"),hUo=l(),FF=a("li"),Xue=a("strong"),pUo=o("squeezebert"),_Uo=o(" \u2014 "),yz=a("a"),uUo=o("SqueezeBertForMultipleChoice"),bUo=o(" (SqueezeBERT model)"),vUo=l(),TF=a("li"),zue=a("strong"),FUo=o("xlm"),TUo=o(" \u2014 "),xz=a("a"),MUo=o("XLMForMultipleChoice"),EUo=o(" (XLM model)"),CUo=l(),MF=a("li"),Que=a("strong"),wUo=o("xlm-roberta"),AUo=o(" \u2014 "),$z=a("a"),LUo=o("XLMRobertaForMultipleChoice"),yUo=o(" (XLM-RoBERTa model)"),xUo=l(),EF=a("li"),Wue=a("strong"),$Uo=o("xlm-roberta-xl"),kUo=o(" \u2014 "),kz=a("a"),SUo=o("XLMRobertaXLForMultipleChoice"),RUo=o(" (XLM-RoBERTa-XL model)"),PUo=l(),CF=a("li"),Hue=a("strong"),BUo=o("xlnet"),NUo=o(" \u2014 "),Sz=a("a"),IUo=o("XLNetForMultipleChoice"),qUo=o(" (XLNet model)"),jUo=l(),wF=a("li"),Uue=a("strong"),DUo=o("yoso"),GUo=o(" \u2014 "),Rz=a("a"),OUo=o("YosoForMultipleChoice"),VUo=o(" (YOSO model)"),XUo=l(),AF=a("p"),zUo=o("The model is set in evaluation mode by default using "),Jue=a("code"),QUo=o("model.eval()"),WUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=a("code"),HUo=o("model.train()"),UUo=l(),F(LF.$$.fragment),UXe=l(),dd=a("h2"),yF=a("a"),Kue=a("span"),F(uy.$$.fragment),JUo=l(),Zue=a("span"),YUo=o("AutoModelForNextSentencePrediction"),JXe=l(),Io=a("div"),F(by.$$.fragment),KUo=l(),cd=a("p"),ZUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Pz=a("a"),eJo=o("from_pretrained()"),oJo=o(" class method or the "),Bz=a("a"),rJo=o("from_config()"),tJo=o(` class
method.`),aJo=l(),vy=a("p"),nJo=o("This class cannot be instantiated directly using "),e2e=a("code"),sJo=o("__init__()"),lJo=o(" (throws an error)."),iJo=l(),pt=a("div"),F(Fy.$$.fragment),dJo=l(),o2e=a("p"),cJo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fJo=l(),fd=a("p"),mJo=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),gJo=o("not"),hJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),pJo=o("from_pretrained()"),_Jo=o(" to load the model weights."),uJo=l(),F(xF.$$.fragment),bJo=l(),ao=a("div"),F(Ty.$$.fragment),vJo=l(),t2e=a("p"),FJo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TJo=l(),Va=a("p"),MJo=o("The model class to instantiate is selected based on the "),a2e=a("code"),EJo=o("model_type"),CJo=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),wJo=o("pretrained_model_name_or_path"),AJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),LJo=o("pretrained_model_name_or_path"),yJo=o(":"),xJo=l(),qo=a("ul"),$F=a("li"),l2e=a("strong"),$Jo=o("bert"),kJo=o(" \u2014 "),Iz=a("a"),SJo=o("BertForNextSentencePrediction"),RJo=o(" (BERT model)"),PJo=l(),kF=a("li"),i2e=a("strong"),BJo=o("fnet"),NJo=o(" \u2014 "),qz=a("a"),IJo=o("FNetForNextSentencePrediction"),qJo=o(" (FNet model)"),jJo=l(),SF=a("li"),d2e=a("strong"),DJo=o("megatron-bert"),GJo=o(" \u2014 "),jz=a("a"),OJo=o("MegatronBertForNextSentencePrediction"),VJo=o(" (Megatron-BERT model)"),XJo=l(),RF=a("li"),c2e=a("strong"),zJo=o("mobilebert"),QJo=o(" \u2014 "),Dz=a("a"),WJo=o("MobileBertForNextSentencePrediction"),HJo=o(" (MobileBERT model)"),UJo=l(),PF=a("li"),f2e=a("strong"),JJo=o("nezha"),YJo=o(" \u2014 "),Gz=a("a"),KJo=o("NezhaForNextSentencePrediction"),ZJo=o(" (Nezha model)"),eYo=l(),BF=a("li"),m2e=a("strong"),oYo=o("qdqbert"),rYo=o(" \u2014 "),Oz=a("a"),tYo=o("QDQBertForNextSentencePrediction"),aYo=o(" (QDQBert model)"),nYo=l(),NF=a("p"),sYo=o("The model is set in evaluation mode by default using "),g2e=a("code"),lYo=o("model.eval()"),iYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h2e=a("code"),dYo=o("model.train()"),cYo=l(),F(IF.$$.fragment),YXe=l(),md=a("h2"),qF=a("a"),p2e=a("span"),F(My.$$.fragment),fYo=l(),_2e=a("span"),mYo=o("AutoModelForTokenClassification"),KXe=l(),jo=a("div"),F(Ey.$$.fragment),gYo=l(),gd=a("p"),hYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Vz=a("a"),pYo=o("from_pretrained()"),_Yo=o(" class method or the "),Xz=a("a"),uYo=o("from_config()"),bYo=o(` class
method.`),vYo=l(),Cy=a("p"),FYo=o("This class cannot be instantiated directly using "),u2e=a("code"),TYo=o("__init__()"),MYo=o(" (throws an error)."),EYo=l(),_t=a("div"),F(wy.$$.fragment),CYo=l(),b2e=a("p"),wYo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),AYo=l(),hd=a("p"),LYo=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),yYo=o("not"),xYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),$Yo=o("from_pretrained()"),kYo=o(" to load the model weights."),SYo=l(),F(jF.$$.fragment),RYo=l(),no=a("div"),F(Ay.$$.fragment),PYo=l(),F2e=a("p"),BYo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NYo=l(),Xa=a("p"),IYo=o("The model class to instantiate is selected based on the "),T2e=a("code"),qYo=o("model_type"),jYo=o(` property of the config object (either
passed as an argument or loaded from `),M2e=a("code"),DYo=o("pretrained_model_name_or_path"),GYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=a("code"),OYo=o("pretrained_model_name_or_path"),VYo=o(":"),XYo=l(),U=a("ul"),DF=a("li"),C2e=a("strong"),zYo=o("albert"),QYo=o(" \u2014 "),Qz=a("a"),WYo=o("AlbertForTokenClassification"),HYo=o(" (ALBERT model)"),UYo=l(),GF=a("li"),w2e=a("strong"),JYo=o("bert"),YYo=o(" \u2014 "),Wz=a("a"),KYo=o("BertForTokenClassification"),ZYo=o(" (BERT model)"),eKo=l(),OF=a("li"),A2e=a("strong"),oKo=o("big_bird"),rKo=o(" \u2014 "),Hz=a("a"),tKo=o("BigBirdForTokenClassification"),aKo=o(" (BigBird model)"),nKo=l(),VF=a("li"),L2e=a("strong"),sKo=o("bloom"),lKo=o(" \u2014 "),Uz=a("a"),iKo=o("BloomForTokenClassification"),dKo=o(" (BLOOM model)"),cKo=l(),XF=a("li"),y2e=a("strong"),fKo=o("camembert"),mKo=o(" \u2014 "),Jz=a("a"),gKo=o("CamembertForTokenClassification"),hKo=o(" (CamemBERT model)"),pKo=l(),zF=a("li"),x2e=a("strong"),_Ko=o("canine"),uKo=o(" \u2014 "),Yz=a("a"),bKo=o("CanineForTokenClassification"),vKo=o(" (CANINE model)"),FKo=l(),QF=a("li"),$2e=a("strong"),TKo=o("convbert"),MKo=o(" \u2014 "),Kz=a("a"),EKo=o("ConvBertForTokenClassification"),CKo=o(" (ConvBERT model)"),wKo=l(),WF=a("li"),k2e=a("strong"),AKo=o("data2vec-text"),LKo=o(" \u2014 "),Zz=a("a"),yKo=o("Data2VecTextForTokenClassification"),xKo=o(" (Data2VecText model)"),$Ko=l(),HF=a("li"),S2e=a("strong"),kKo=o("deberta"),SKo=o(" \u2014 "),eQ=a("a"),RKo=o("DebertaForTokenClassification"),PKo=o(" (DeBERTa model)"),BKo=l(),UF=a("li"),R2e=a("strong"),NKo=o("deberta-v2"),IKo=o(" \u2014 "),oQ=a("a"),qKo=o("DebertaV2ForTokenClassification"),jKo=o(" (DeBERTa-v2 model)"),DKo=l(),JF=a("li"),P2e=a("strong"),GKo=o("distilbert"),OKo=o(" \u2014 "),rQ=a("a"),VKo=o("DistilBertForTokenClassification"),XKo=o(" (DistilBERT model)"),zKo=l(),YF=a("li"),B2e=a("strong"),QKo=o("electra"),WKo=o(" \u2014 "),tQ=a("a"),HKo=o("ElectraForTokenClassification"),UKo=o(" (ELECTRA model)"),JKo=l(),KF=a("li"),N2e=a("strong"),YKo=o("flaubert"),KKo=o(" \u2014 "),aQ=a("a"),ZKo=o("FlaubertForTokenClassification"),eZo=o(" (FlauBERT model)"),oZo=l(),ZF=a("li"),I2e=a("strong"),rZo=o("fnet"),tZo=o(" \u2014 "),nQ=a("a"),aZo=o("FNetForTokenClassification"),nZo=o(" (FNet model)"),sZo=l(),e6=a("li"),q2e=a("strong"),lZo=o("funnel"),iZo=o(" \u2014 "),sQ=a("a"),dZo=o("FunnelForTokenClassification"),cZo=o(" (Funnel Transformer model)"),fZo=l(),o6=a("li"),j2e=a("strong"),mZo=o("gpt2"),gZo=o(" \u2014 "),lQ=a("a"),hZo=o("GPT2ForTokenClassification"),pZo=o(" (OpenAI GPT-2 model)"),_Zo=l(),r6=a("li"),D2e=a("strong"),uZo=o("ibert"),bZo=o(" \u2014 "),iQ=a("a"),vZo=o("IBertForTokenClassification"),FZo=o(" (I-BERT model)"),TZo=l(),t6=a("li"),G2e=a("strong"),MZo=o("layoutlm"),EZo=o(" \u2014 "),dQ=a("a"),CZo=o("LayoutLMForTokenClassification"),wZo=o(" (LayoutLM model)"),AZo=l(),a6=a("li"),O2e=a("strong"),LZo=o("layoutlmv2"),yZo=o(" \u2014 "),cQ=a("a"),xZo=o("LayoutLMv2ForTokenClassification"),$Zo=o(" (LayoutLMv2 model)"),kZo=l(),n6=a("li"),V2e=a("strong"),SZo=o("layoutlmv3"),RZo=o(" \u2014 "),fQ=a("a"),PZo=o("LayoutLMv3ForTokenClassification"),BZo=o(" (LayoutLMv3 model)"),NZo=l(),s6=a("li"),X2e=a("strong"),IZo=o("longformer"),qZo=o(" \u2014 "),mQ=a("a"),jZo=o("LongformerForTokenClassification"),DZo=o(" (Longformer model)"),GZo=l(),l6=a("li"),z2e=a("strong"),OZo=o("megatron-bert"),VZo=o(" \u2014 "),gQ=a("a"),XZo=o("MegatronBertForTokenClassification"),zZo=o(" (Megatron-BERT model)"),QZo=l(),i6=a("li"),Q2e=a("strong"),WZo=o("mobilebert"),HZo=o(" \u2014 "),hQ=a("a"),UZo=o("MobileBertForTokenClassification"),JZo=o(" (MobileBERT model)"),YZo=l(),d6=a("li"),W2e=a("strong"),KZo=o("mpnet"),ZZo=o(" \u2014 "),pQ=a("a"),eer=o("MPNetForTokenClassification"),oer=o(" (MPNet model)"),rer=l(),c6=a("li"),H2e=a("strong"),ter=o("nezha"),aer=o(" \u2014 "),_Q=a("a"),ner=o("NezhaForTokenClassification"),ser=o(" (Nezha model)"),ler=l(),f6=a("li"),U2e=a("strong"),ier=o("nystromformer"),der=o(" \u2014 "),uQ=a("a"),cer=o("NystromformerForTokenClassification"),fer=o(" (Nystr\xF6mformer model)"),mer=l(),m6=a("li"),J2e=a("strong"),ger=o("qdqbert"),her=o(" \u2014 "),bQ=a("a"),per=o("QDQBertForTokenClassification"),_er=o(" (QDQBert model)"),uer=l(),g6=a("li"),Y2e=a("strong"),ber=o("rembert"),ver=o(" \u2014 "),vQ=a("a"),Fer=o("RemBertForTokenClassification"),Ter=o(" (RemBERT model)"),Mer=l(),h6=a("li"),K2e=a("strong"),Eer=o("roberta"),Cer=o(" \u2014 "),FQ=a("a"),wer=o("RobertaForTokenClassification"),Aer=o(" (RoBERTa model)"),Ler=l(),p6=a("li"),Z2e=a("strong"),yer=o("roformer"),xer=o(" \u2014 "),TQ=a("a"),$er=o("RoFormerForTokenClassification"),ker=o(" (RoFormer model)"),Ser=l(),_6=a("li"),e1e=a("strong"),Rer=o("squeezebert"),Per=o(" \u2014 "),MQ=a("a"),Ber=o("SqueezeBertForTokenClassification"),Ner=o(" (SqueezeBERT model)"),Ier=l(),u6=a("li"),o1e=a("strong"),qer=o("xlm"),jer=o(" \u2014 "),EQ=a("a"),Der=o("XLMForTokenClassification"),Ger=o(" (XLM model)"),Oer=l(),b6=a("li"),r1e=a("strong"),Ver=o("xlm-roberta"),Xer=o(" \u2014 "),CQ=a("a"),zer=o("XLMRobertaForTokenClassification"),Qer=o(" (XLM-RoBERTa model)"),Wer=l(),v6=a("li"),t1e=a("strong"),Her=o("xlm-roberta-xl"),Uer=o(" \u2014 "),wQ=a("a"),Jer=o("XLMRobertaXLForTokenClassification"),Yer=o(" (XLM-RoBERTa-XL model)"),Ker=l(),F6=a("li"),a1e=a("strong"),Zer=o("xlnet"),eor=o(" \u2014 "),AQ=a("a"),oor=o("XLNetForTokenClassification"),ror=o(" (XLNet model)"),tor=l(),T6=a("li"),n1e=a("strong"),aor=o("yoso"),nor=o(" \u2014 "),LQ=a("a"),sor=o("YosoForTokenClassification"),lor=o(" (YOSO model)"),ior=l(),M6=a("p"),dor=o("The model is set in evaluation mode by default using "),s1e=a("code"),cor=o("model.eval()"),mor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l1e=a("code"),gor=o("model.train()"),hor=l(),F(E6.$$.fragment),ZXe=l(),pd=a("h2"),C6=a("a"),i1e=a("span"),F(Ly.$$.fragment),por=l(),d1e=a("span"),_or=o("AutoModelForQuestionAnswering"),eze=l(),Do=a("div"),F(yy.$$.fragment),uor=l(),_d=a("p"),bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yQ=a("a"),vor=o("from_pretrained()"),For=o(" class method or the "),xQ=a("a"),Tor=o("from_config()"),Mor=o(` class
method.`),Eor=l(),xy=a("p"),Cor=o("This class cannot be instantiated directly using "),c1e=a("code"),wor=o("__init__()"),Aor=o(" (throws an error)."),Lor=l(),ut=a("div"),F($y.$$.fragment),yor=l(),f1e=a("p"),xor=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$or=l(),ud=a("p"),kor=o(`Note:
Loading a model from its configuration file does `),m1e=a("strong"),Sor=o("not"),Ror=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),Por=o("from_pretrained()"),Bor=o(" to load the model weights."),Nor=l(),F(w6.$$.fragment),Ior=l(),so=a("div"),F(ky.$$.fragment),qor=l(),g1e=a("p"),jor=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Dor=l(),za=a("p"),Gor=o("The model class to instantiate is selected based on the "),h1e=a("code"),Oor=o("model_type"),Vor=o(` property of the config object (either
passed as an argument or loaded from `),p1e=a("code"),Xor=o("pretrained_model_name_or_path"),zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),Qor=o("pretrained_model_name_or_path"),Wor=o(":"),Hor=l(),V=a("ul"),A6=a("li"),u1e=a("strong"),Uor=o("albert"),Jor=o(" \u2014 "),kQ=a("a"),Yor=o("AlbertForQuestionAnswering"),Kor=o(" (ALBERT model)"),Zor=l(),L6=a("li"),b1e=a("strong"),err=o("bart"),orr=o(" \u2014 "),SQ=a("a"),rrr=o("BartForQuestionAnswering"),trr=o(" (BART model)"),arr=l(),y6=a("li"),v1e=a("strong"),nrr=o("bert"),srr=o(" \u2014 "),RQ=a("a"),lrr=o("BertForQuestionAnswering"),irr=o(" (BERT model)"),drr=l(),x6=a("li"),F1e=a("strong"),crr=o("big_bird"),frr=o(" \u2014 "),PQ=a("a"),mrr=o("BigBirdForQuestionAnswering"),grr=o(" (BigBird model)"),hrr=l(),$6=a("li"),T1e=a("strong"),prr=o("bigbird_pegasus"),_rr=o(" \u2014 "),BQ=a("a"),urr=o("BigBirdPegasusForQuestionAnswering"),brr=o(" (BigBird-Pegasus model)"),vrr=l(),k6=a("li"),M1e=a("strong"),Frr=o("camembert"),Trr=o(" \u2014 "),NQ=a("a"),Mrr=o("CamembertForQuestionAnswering"),Err=o(" (CamemBERT model)"),Crr=l(),S6=a("li"),E1e=a("strong"),wrr=o("canine"),Arr=o(" \u2014 "),IQ=a("a"),Lrr=o("CanineForQuestionAnswering"),yrr=o(" (CANINE model)"),xrr=l(),R6=a("li"),C1e=a("strong"),$rr=o("convbert"),krr=o(" \u2014 "),qQ=a("a"),Srr=o("ConvBertForQuestionAnswering"),Rrr=o(" (ConvBERT model)"),Prr=l(),P6=a("li"),w1e=a("strong"),Brr=o("data2vec-text"),Nrr=o(" \u2014 "),jQ=a("a"),Irr=o("Data2VecTextForQuestionAnswering"),qrr=o(" (Data2VecText model)"),jrr=l(),B6=a("li"),A1e=a("strong"),Drr=o("deberta"),Grr=o(" \u2014 "),DQ=a("a"),Orr=o("DebertaForQuestionAnswering"),Vrr=o(" (DeBERTa model)"),Xrr=l(),N6=a("li"),L1e=a("strong"),zrr=o("deberta-v2"),Qrr=o(" \u2014 "),GQ=a("a"),Wrr=o("DebertaV2ForQuestionAnswering"),Hrr=o(" (DeBERTa-v2 model)"),Urr=l(),I6=a("li"),y1e=a("strong"),Jrr=o("distilbert"),Yrr=o(" \u2014 "),OQ=a("a"),Krr=o("DistilBertForQuestionAnswering"),Zrr=o(" (DistilBERT model)"),etr=l(),q6=a("li"),x1e=a("strong"),otr=o("electra"),rtr=o(" \u2014 "),VQ=a("a"),ttr=o("ElectraForQuestionAnswering"),atr=o(" (ELECTRA model)"),ntr=l(),j6=a("li"),$1e=a("strong"),str=o("flaubert"),ltr=o(" \u2014 "),XQ=a("a"),itr=o("FlaubertForQuestionAnsweringSimple"),dtr=o(" (FlauBERT model)"),ctr=l(),D6=a("li"),k1e=a("strong"),ftr=o("fnet"),mtr=o(" \u2014 "),zQ=a("a"),gtr=o("FNetForQuestionAnswering"),htr=o(" (FNet model)"),ptr=l(),G6=a("li"),S1e=a("strong"),_tr=o("funnel"),utr=o(" \u2014 "),QQ=a("a"),btr=o("FunnelForQuestionAnswering"),vtr=o(" (Funnel Transformer model)"),Ftr=l(),O6=a("li"),R1e=a("strong"),Ttr=o("gptj"),Mtr=o(" \u2014 "),WQ=a("a"),Etr=o("GPTJForQuestionAnswering"),Ctr=o(" (GPT-J model)"),wtr=l(),V6=a("li"),P1e=a("strong"),Atr=o("ibert"),Ltr=o(" \u2014 "),HQ=a("a"),ytr=o("IBertForQuestionAnswering"),xtr=o(" (I-BERT model)"),$tr=l(),X6=a("li"),B1e=a("strong"),ktr=o("layoutlmv2"),Str=o(" \u2014 "),UQ=a("a"),Rtr=o("LayoutLMv2ForQuestionAnswering"),Ptr=o(" (LayoutLMv2 model)"),Btr=l(),z6=a("li"),N1e=a("strong"),Ntr=o("layoutlmv3"),Itr=o(" \u2014 "),JQ=a("a"),qtr=o("LayoutLMv3ForQuestionAnswering"),jtr=o(" (LayoutLMv3 model)"),Dtr=l(),Q6=a("li"),I1e=a("strong"),Gtr=o("led"),Otr=o(" \u2014 "),YQ=a("a"),Vtr=o("LEDForQuestionAnswering"),Xtr=o(" (LED model)"),ztr=l(),W6=a("li"),q1e=a("strong"),Qtr=o("longformer"),Wtr=o(" \u2014 "),KQ=a("a"),Htr=o("LongformerForQuestionAnswering"),Utr=o(" (Longformer model)"),Jtr=l(),H6=a("li"),j1e=a("strong"),Ytr=o("lxmert"),Ktr=o(" \u2014 "),ZQ=a("a"),Ztr=o("LxmertForQuestionAnswering"),ear=o(" (LXMERT model)"),oar=l(),U6=a("li"),D1e=a("strong"),rar=o("mbart"),tar=o(" \u2014 "),eW=a("a"),aar=o("MBartForQuestionAnswering"),nar=o(" (mBART model)"),sar=l(),J6=a("li"),G1e=a("strong"),lar=o("megatron-bert"),iar=o(" \u2014 "),oW=a("a"),dar=o("MegatronBertForQuestionAnswering"),car=o(" (Megatron-BERT model)"),far=l(),Y6=a("li"),O1e=a("strong"),mar=o("mobilebert"),gar=o(" \u2014 "),rW=a("a"),har=o("MobileBertForQuestionAnswering"),par=o(" (MobileBERT model)"),_ar=l(),K6=a("li"),V1e=a("strong"),uar=o("mpnet"),bar=o(" \u2014 "),tW=a("a"),Far=o("MPNetForQuestionAnswering"),Tar=o(" (MPNet model)"),Mar=l(),Z6=a("li"),X1e=a("strong"),Ear=o("mvp"),Car=o(" \u2014 "),aW=a("a"),war=o("MvpForQuestionAnswering"),Aar=o(" (MVP model)"),Lar=l(),eT=a("li"),z1e=a("strong"),yar=o("nezha"),xar=o(" \u2014 "),nW=a("a"),$ar=o("NezhaForQuestionAnswering"),kar=o(" (Nezha model)"),Sar=l(),oT=a("li"),Q1e=a("strong"),Rar=o("nystromformer"),Par=o(" \u2014 "),sW=a("a"),Bar=o("NystromformerForQuestionAnswering"),Nar=o(" (Nystr\xF6mformer model)"),Iar=l(),rT=a("li"),W1e=a("strong"),qar=o("qdqbert"),jar=o(" \u2014 "),lW=a("a"),Dar=o("QDQBertForQuestionAnswering"),Gar=o(" (QDQBert model)"),Oar=l(),tT=a("li"),H1e=a("strong"),Var=o("reformer"),Xar=o(" \u2014 "),iW=a("a"),zar=o("ReformerForQuestionAnswering"),Qar=o(" (Reformer model)"),War=l(),aT=a("li"),U1e=a("strong"),Har=o("rembert"),Uar=o(" \u2014 "),dW=a("a"),Jar=o("RemBertForQuestionAnswering"),Yar=o(" (RemBERT model)"),Kar=l(),nT=a("li"),J1e=a("strong"),Zar=o("roberta"),enr=o(" \u2014 "),cW=a("a"),onr=o("RobertaForQuestionAnswering"),rnr=o(" (RoBERTa model)"),tnr=l(),sT=a("li"),Y1e=a("strong"),anr=o("roformer"),nnr=o(" \u2014 "),fW=a("a"),snr=o("RoFormerForQuestionAnswering"),lnr=o(" (RoFormer model)"),inr=l(),lT=a("li"),K1e=a("strong"),dnr=o("splinter"),cnr=o(" \u2014 "),mW=a("a"),fnr=o("SplinterForQuestionAnswering"),mnr=o(" (Splinter model)"),gnr=l(),iT=a("li"),Z1e=a("strong"),hnr=o("squeezebert"),pnr=o(" \u2014 "),gW=a("a"),_nr=o("SqueezeBertForQuestionAnswering"),unr=o(" (SqueezeBERT model)"),bnr=l(),dT=a("li"),ebe=a("strong"),vnr=o("xlm"),Fnr=o(" \u2014 "),hW=a("a"),Tnr=o("XLMForQuestionAnsweringSimple"),Mnr=o(" (XLM model)"),Enr=l(),cT=a("li"),obe=a("strong"),Cnr=o("xlm-roberta"),wnr=o(" \u2014 "),pW=a("a"),Anr=o("XLMRobertaForQuestionAnswering"),Lnr=o(" (XLM-RoBERTa model)"),ynr=l(),fT=a("li"),rbe=a("strong"),xnr=o("xlm-roberta-xl"),$nr=o(" \u2014 "),_W=a("a"),knr=o("XLMRobertaXLForQuestionAnswering"),Snr=o(" (XLM-RoBERTa-XL model)"),Rnr=l(),mT=a("li"),tbe=a("strong"),Pnr=o("xlnet"),Bnr=o(" \u2014 "),uW=a("a"),Nnr=o("XLNetForQuestionAnsweringSimple"),Inr=o(" (XLNet model)"),qnr=l(),gT=a("li"),abe=a("strong"),jnr=o("yoso"),Dnr=o(" \u2014 "),bW=a("a"),Gnr=o("YosoForQuestionAnswering"),Onr=o(" (YOSO model)"),Vnr=l(),hT=a("p"),Xnr=o("The model is set in evaluation mode by default using "),nbe=a("code"),znr=o("model.eval()"),Qnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sbe=a("code"),Wnr=o("model.train()"),Hnr=l(),F(pT.$$.fragment),oze=l(),bd=a("h2"),_T=a("a"),lbe=a("span"),F(Sy.$$.fragment),Unr=l(),ibe=a("span"),Jnr=o("AutoModelForTableQuestionAnswering"),rze=l(),Go=a("div"),F(Ry.$$.fragment),Ynr=l(),vd=a("p"),Knr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vW=a("a"),Znr=o("from_pretrained()"),esr=o(" class method or the "),FW=a("a"),osr=o("from_config()"),rsr=o(` class
method.`),tsr=l(),Py=a("p"),asr=o("This class cannot be instantiated directly using "),dbe=a("code"),nsr=o("__init__()"),ssr=o(" (throws an error)."),lsr=l(),bt=a("div"),F(By.$$.fragment),isr=l(),cbe=a("p"),dsr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),csr=l(),Fd=a("p"),fsr=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),msr=o("not"),gsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),hsr=o("from_pretrained()"),psr=o(" to load the model weights."),_sr=l(),F(uT.$$.fragment),usr=l(),lo=a("div"),F(Ny.$$.fragment),bsr=l(),mbe=a("p"),vsr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Fsr=l(),Qa=a("p"),Tsr=o("The model class to instantiate is selected based on the "),gbe=a("code"),Msr=o("model_type"),Esr=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),Csr=o("pretrained_model_name_or_path"),wsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),Asr=o("pretrained_model_name_or_path"),Lsr=o(":"),ysr=l(),_be=a("ul"),bT=a("li"),ube=a("strong"),xsr=o("tapas"),$sr=o(" \u2014 "),MW=a("a"),ksr=o("TapasForQuestionAnswering"),Ssr=o(" (TAPAS model)"),Rsr=l(),vT=a("p"),Psr=o("The model is set in evaluation mode by default using "),bbe=a("code"),Bsr=o("model.eval()"),Nsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vbe=a("code"),Isr=o("model.train()"),qsr=l(),F(FT.$$.fragment),tze=l(),Td=a("h2"),TT=a("a"),Fbe=a("span"),F(Iy.$$.fragment),jsr=l(),Tbe=a("span"),Dsr=o("AutoModelForImageClassification"),aze=l(),Oo=a("div"),F(qy.$$.fragment),Gsr=l(),Md=a("p"),Osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EW=a("a"),Vsr=o("from_pretrained()"),Xsr=o(" class method or the "),CW=a("a"),zsr=o("from_config()"),Qsr=o(` class
method.`),Wsr=l(),jy=a("p"),Hsr=o("This class cannot be instantiated directly using "),Mbe=a("code"),Usr=o("__init__()"),Jsr=o(" (throws an error)."),Ysr=l(),vt=a("div"),F(Dy.$$.fragment),Ksr=l(),Ebe=a("p"),Zsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),elr=l(),Ed=a("p"),olr=o(`Note:
Loading a model from its configuration file does `),Cbe=a("strong"),rlr=o("not"),tlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),alr=o("from_pretrained()"),nlr=o(" to load the model weights."),slr=l(),F(MT.$$.fragment),llr=l(),io=a("div"),F(Gy.$$.fragment),ilr=l(),wbe=a("p"),dlr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),clr=l(),Wa=a("p"),flr=o("The model class to instantiate is selected based on the "),Abe=a("code"),mlr=o("model_type"),glr=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),hlr=o("pretrained_model_name_or_path"),plr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),_lr=o("pretrained_model_name_or_path"),ulr=o(":"),blr=l(),ve=a("ul"),ET=a("li"),xbe=a("strong"),vlr=o("beit"),Flr=o(" \u2014 "),AW=a("a"),Tlr=o("BeitForImageClassification"),Mlr=o(" (BEiT model)"),Elr=l(),CT=a("li"),$be=a("strong"),Clr=o("convnext"),wlr=o(" \u2014 "),LW=a("a"),Alr=o("ConvNextForImageClassification"),Llr=o(" (ConvNeXT model)"),ylr=l(),wT=a("li"),kbe=a("strong"),xlr=o("cvt"),$lr=o(" \u2014 "),yW=a("a"),klr=o("CvtForImageClassification"),Slr=o(" (CvT model)"),Rlr=l(),AT=a("li"),Sbe=a("strong"),Plr=o("data2vec-vision"),Blr=o(" \u2014 "),xW=a("a"),Nlr=o("Data2VecVisionForImageClassification"),Ilr=o(" (Data2VecVision model)"),qlr=l(),Us=a("li"),Rbe=a("strong"),jlr=o("deit"),Dlr=o(" \u2014 "),$W=a("a"),Glr=o("DeiTForImageClassification"),Olr=o(" or "),kW=a("a"),Vlr=o("DeiTForImageClassificationWithTeacher"),Xlr=o(" (DeiT model)"),zlr=l(),LT=a("li"),Pbe=a("strong"),Qlr=o("imagegpt"),Wlr=o(" \u2014 "),SW=a("a"),Hlr=o("ImageGPTForImageClassification"),Ulr=o(" (ImageGPT model)"),Jlr=l(),Js=a("li"),Bbe=a("strong"),Ylr=o("levit"),Klr=o(" \u2014 "),RW=a("a"),Zlr=o("LevitForImageClassification"),eir=o(" or "),PW=a("a"),oir=o("LevitForImageClassificationWithTeacher"),rir=o(" (LeViT model)"),tir=l(),yT=a("li"),Nbe=a("strong"),air=o("mobilevit"),nir=o(" \u2014 "),BW=a("a"),sir=o("MobileViTForImageClassification"),lir=o(" (MobileViT model)"),iir=l(),Ft=a("li"),Ibe=a("strong"),dir=o("perceiver"),cir=o(" \u2014 "),NW=a("a"),fir=o("PerceiverForImageClassificationLearned"),mir=o(" or "),IW=a("a"),gir=o("PerceiverForImageClassificationFourier"),hir=o(" or "),qW=a("a"),pir=o("PerceiverForImageClassificationConvProcessing"),_ir=o(" (Perceiver model)"),uir=l(),xT=a("li"),qbe=a("strong"),bir=o("poolformer"),vir=o(" \u2014 "),jW=a("a"),Fir=o("PoolFormerForImageClassification"),Tir=o(" (PoolFormer model)"),Mir=l(),$T=a("li"),jbe=a("strong"),Eir=o("regnet"),Cir=o(" \u2014 "),DW=a("a"),wir=o("RegNetForImageClassification"),Air=o(" (RegNet model)"),Lir=l(),kT=a("li"),Dbe=a("strong"),yir=o("resnet"),xir=o(" \u2014 "),GW=a("a"),$ir=o("ResNetForImageClassification"),kir=o(" (ResNet model)"),Sir=l(),ST=a("li"),Gbe=a("strong"),Rir=o("segformer"),Pir=o(" \u2014 "),OW=a("a"),Bir=o("SegformerForImageClassification"),Nir=o(" (SegFormer model)"),Iir=l(),RT=a("li"),Obe=a("strong"),qir=o("swin"),jir=o(" \u2014 "),VW=a("a"),Dir=o("SwinForImageClassification"),Gir=o(" (Swin Transformer model)"),Oir=l(),PT=a("li"),Vbe=a("strong"),Vir=o("van"),Xir=o(" \u2014 "),XW=a("a"),zir=o("VanForImageClassification"),Qir=o(" (VAN model)"),Wir=l(),BT=a("li"),Xbe=a("strong"),Hir=o("vit"),Uir=o(" \u2014 "),zW=a("a"),Jir=o("ViTForImageClassification"),Yir=o(" (ViT model)"),Kir=l(),NT=a("p"),Zir=o("The model is set in evaluation mode by default using "),zbe=a("code"),edr=o("model.eval()"),odr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=a("code"),rdr=o("model.train()"),tdr=l(),F(IT.$$.fragment),nze=l(),Cd=a("h2"),qT=a("a"),Wbe=a("span"),F(Oy.$$.fragment),adr=l(),Hbe=a("span"),ndr=o("AutoModelForVision2Seq"),sze=l(),Vo=a("div"),F(Vy.$$.fragment),sdr=l(),wd=a("p"),ldr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QW=a("a"),idr=o("from_pretrained()"),ddr=o(" class method or the "),WW=a("a"),cdr=o("from_config()"),fdr=o(` class
method.`),mdr=l(),Xy=a("p"),gdr=o("This class cannot be instantiated directly using "),Ube=a("code"),hdr=o("__init__()"),pdr=o(" (throws an error)."),_dr=l(),Tt=a("div"),F(zy.$$.fragment),udr=l(),Jbe=a("p"),bdr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vdr=l(),Ad=a("p"),Fdr=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),Tdr=o("not"),Mdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=a("a"),Edr=o("from_pretrained()"),Cdr=o(" to load the model weights."),wdr=l(),F(jT.$$.fragment),Adr=l(),co=a("div"),F(Qy.$$.fragment),Ldr=l(),Kbe=a("p"),ydr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xdr=l(),Ha=a("p"),$dr=o("The model class to instantiate is selected based on the "),Zbe=a("code"),kdr=o("model_type"),Sdr=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),Rdr=o("pretrained_model_name_or_path"),Pdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),Bdr=o("pretrained_model_name_or_path"),Ndr=o(":"),Idr=l(),rve=a("ul"),DT=a("li"),tve=a("strong"),qdr=o("vision-encoder-decoder"),jdr=o(" \u2014 "),UW=a("a"),Ddr=o("VisionEncoderDecoderModel"),Gdr=o(" (Vision Encoder decoder model)"),Odr=l(),GT=a("p"),Vdr=o("The model is set in evaluation mode by default using "),ave=a("code"),Xdr=o("model.eval()"),zdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nve=a("code"),Qdr=o("model.train()"),Wdr=l(),F(OT.$$.fragment),lze=l(),Ld=a("h2"),VT=a("a"),sve=a("span"),F(Wy.$$.fragment),Hdr=l(),lve=a("span"),Udr=o("AutoModelForVisualQuestionAnswering"),ize=l(),Xo=a("div"),F(Hy.$$.fragment),Jdr=l(),yd=a("p"),Ydr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),JW=a("a"),Kdr=o("from_pretrained()"),Zdr=o(" class method or the "),YW=a("a"),ecr=o("from_config()"),ocr=o(` class
method.`),rcr=l(),Uy=a("p"),tcr=o("This class cannot be instantiated directly using "),ive=a("code"),acr=o("__init__()"),ncr=o(" (throws an error)."),scr=l(),Mt=a("div"),F(Jy.$$.fragment),lcr=l(),dve=a("p"),icr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),dcr=l(),xd=a("p"),ccr=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),fcr=o("not"),mcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),gcr=o("from_pretrained()"),hcr=o(" to load the model weights."),pcr=l(),F(XT.$$.fragment),_cr=l(),fo=a("div"),F(Yy.$$.fragment),ucr=l(),fve=a("p"),bcr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),vcr=l(),Ua=a("p"),Fcr=o("The model class to instantiate is selected based on the "),mve=a("code"),Tcr=o("model_type"),Mcr=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),Ecr=o("pretrained_model_name_or_path"),Ccr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),wcr=o("pretrained_model_name_or_path"),Acr=o(":"),Lcr=l(),pve=a("ul"),zT=a("li"),_ve=a("strong"),ycr=o("vilt"),xcr=o(" \u2014 "),ZW=a("a"),$cr=o("ViltForQuestionAnswering"),kcr=o(" (ViLT model)"),Scr=l(),QT=a("p"),Rcr=o("The model is set in evaluation mode by default using "),uve=a("code"),Pcr=o("model.eval()"),Bcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bve=a("code"),Ncr=o("model.train()"),Icr=l(),F(WT.$$.fragment),dze=l(),$d=a("h2"),HT=a("a"),vve=a("span"),F(Ky.$$.fragment),qcr=l(),Fve=a("span"),jcr=o("AutoModelForAudioClassification"),cze=l(),zo=a("div"),F(Zy.$$.fragment),Dcr=l(),kd=a("p"),Gcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),eH=a("a"),Ocr=o("from_pretrained()"),Vcr=o(" class method or the "),oH=a("a"),Xcr=o("from_config()"),zcr=o(` class
method.`),Qcr=l(),e9=a("p"),Wcr=o("This class cannot be instantiated directly using "),Tve=a("code"),Hcr=o("__init__()"),Ucr=o(" (throws an error)."),Jcr=l(),Et=a("div"),F(o9.$$.fragment),Ycr=l(),Mve=a("p"),Kcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Zcr=l(),Sd=a("p"),efr=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),ofr=o("not"),rfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),tfr=o("from_pretrained()"),afr=o(" to load the model weights."),nfr=l(),F(UT.$$.fragment),sfr=l(),mo=a("div"),F(r9.$$.fragment),lfr=l(),Cve=a("p"),ifr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dfr=l(),Ja=a("p"),cfr=o("The model class to instantiate is selected based on the "),wve=a("code"),ffr=o("model_type"),mfr=o(` property of the config object (either
passed as an argument or loaded from `),Ave=a("code"),gfr=o("pretrained_model_name_or_path"),hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=a("code"),pfr=o("pretrained_model_name_or_path"),_fr=o(":"),ufr=l(),Pe=a("ul"),JT=a("li"),yve=a("strong"),bfr=o("data2vec-audio"),vfr=o(" \u2014 "),tH=a("a"),Ffr=o("Data2VecAudioForSequenceClassification"),Tfr=o(" (Data2VecAudio model)"),Mfr=l(),YT=a("li"),xve=a("strong"),Efr=o("hubert"),Cfr=o(" \u2014 "),aH=a("a"),wfr=o("HubertForSequenceClassification"),Afr=o(" (Hubert model)"),Lfr=l(),KT=a("li"),$ve=a("strong"),yfr=o("sew"),xfr=o(" \u2014 "),nH=a("a"),$fr=o("SEWForSequenceClassification"),kfr=o(" (SEW model)"),Sfr=l(),ZT=a("li"),kve=a("strong"),Rfr=o("sew-d"),Pfr=o(" \u2014 "),sH=a("a"),Bfr=o("SEWDForSequenceClassification"),Nfr=o(" (SEW-D model)"),Ifr=l(),e7=a("li"),Sve=a("strong"),qfr=o("unispeech"),jfr=o(" \u2014 "),lH=a("a"),Dfr=o("UniSpeechForSequenceClassification"),Gfr=o(" (UniSpeech model)"),Ofr=l(),o7=a("li"),Rve=a("strong"),Vfr=o("unispeech-sat"),Xfr=o(" \u2014 "),iH=a("a"),zfr=o("UniSpeechSatForSequenceClassification"),Qfr=o(" (UniSpeechSat model)"),Wfr=l(),r7=a("li"),Pve=a("strong"),Hfr=o("wav2vec2"),Ufr=o(" \u2014 "),dH=a("a"),Jfr=o("Wav2Vec2ForSequenceClassification"),Yfr=o(" (Wav2Vec2 model)"),Kfr=l(),t7=a("li"),Bve=a("strong"),Zfr=o("wav2vec2-conformer"),emr=o(" \u2014 "),cH=a("a"),omr=o("Wav2Vec2ConformerForSequenceClassification"),rmr=o(" (Wav2Vec2-Conformer model)"),tmr=l(),a7=a("li"),Nve=a("strong"),amr=o("wavlm"),nmr=o(" \u2014 "),fH=a("a"),smr=o("WavLMForSequenceClassification"),lmr=o(" (WavLM model)"),imr=l(),n7=a("p"),dmr=o("The model is set in evaluation mode by default using "),Ive=a("code"),cmr=o("model.eval()"),fmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qve=a("code"),mmr=o("model.train()"),gmr=l(),F(s7.$$.fragment),fze=l(),Rd=a("h2"),l7=a("a"),jve=a("span"),F(t9.$$.fragment),hmr=l(),Dve=a("span"),pmr=o("AutoModelForAudioFrameClassification"),mze=l(),Qo=a("div"),F(a9.$$.fragment),_mr=l(),Pd=a("p"),umr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mH=a("a"),bmr=o("from_pretrained()"),vmr=o(" class method or the "),gH=a("a"),Fmr=o("from_config()"),Tmr=o(` class
method.`),Mmr=l(),n9=a("p"),Emr=o("This class cannot be instantiated directly using "),Gve=a("code"),Cmr=o("__init__()"),wmr=o(" (throws an error)."),Amr=l(),Ct=a("div"),F(s9.$$.fragment),Lmr=l(),Ove=a("p"),ymr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),xmr=l(),Bd=a("p"),$mr=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),kmr=o("not"),Smr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),Rmr=o("from_pretrained()"),Pmr=o(" to load the model weights."),Bmr=l(),F(i7.$$.fragment),Nmr=l(),go=a("div"),F(l9.$$.fragment),Imr=l(),Xve=a("p"),qmr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),jmr=l(),Ya=a("p"),Dmr=o("The model class to instantiate is selected based on the "),zve=a("code"),Gmr=o("model_type"),Omr=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),Vmr=o("pretrained_model_name_or_path"),Xmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),zmr=o("pretrained_model_name_or_path"),Qmr=o(":"),Wmr=l(),rt=a("ul"),d7=a("li"),Hve=a("strong"),Hmr=o("data2vec-audio"),Umr=o(" \u2014 "),pH=a("a"),Jmr=o("Data2VecAudioForAudioFrameClassification"),Ymr=o(" (Data2VecAudio model)"),Kmr=l(),c7=a("li"),Uve=a("strong"),Zmr=o("unispeech-sat"),egr=o(" \u2014 "),_H=a("a"),ogr=o("UniSpeechSatForAudioFrameClassification"),rgr=o(" (UniSpeechSat model)"),tgr=l(),f7=a("li"),Jve=a("strong"),agr=o("wav2vec2"),ngr=o(" \u2014 "),uH=a("a"),sgr=o("Wav2Vec2ForAudioFrameClassification"),lgr=o(" (Wav2Vec2 model)"),igr=l(),m7=a("li"),Yve=a("strong"),dgr=o("wav2vec2-conformer"),cgr=o(" \u2014 "),bH=a("a"),fgr=o("Wav2Vec2ConformerForAudioFrameClassification"),mgr=o(" (Wav2Vec2-Conformer model)"),ggr=l(),g7=a("li"),Kve=a("strong"),hgr=o("wavlm"),pgr=o(" \u2014 "),vH=a("a"),_gr=o("WavLMForAudioFrameClassification"),ugr=o(" (WavLM model)"),bgr=l(),h7=a("p"),vgr=o("The model is set in evaluation mode by default using "),Zve=a("code"),Fgr=o("model.eval()"),Tgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eFe=a("code"),Mgr=o("model.train()"),Egr=l(),F(p7.$$.fragment),gze=l(),Nd=a("h2"),_7=a("a"),oFe=a("span"),F(i9.$$.fragment),Cgr=l(),rFe=a("span"),wgr=o("AutoModelForCTC"),hze=l(),Wo=a("div"),F(d9.$$.fragment),Agr=l(),Id=a("p"),Lgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FH=a("a"),ygr=o("from_pretrained()"),xgr=o(" class method or the "),TH=a("a"),$gr=o("from_config()"),kgr=o(` class
method.`),Sgr=l(),c9=a("p"),Rgr=o("This class cannot be instantiated directly using "),tFe=a("code"),Pgr=o("__init__()"),Bgr=o(" (throws an error)."),Ngr=l(),wt=a("div"),F(f9.$$.fragment),Igr=l(),aFe=a("p"),qgr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),jgr=l(),qd=a("p"),Dgr=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),Ggr=o("not"),Ogr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),Vgr=o("from_pretrained()"),Xgr=o(" to load the model weights."),zgr=l(),F(u7.$$.fragment),Qgr=l(),ho=a("div"),F(m9.$$.fragment),Wgr=l(),sFe=a("p"),Hgr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ugr=l(),Ka=a("p"),Jgr=o("The model class to instantiate is selected based on the "),lFe=a("code"),Ygr=o("model_type"),Kgr=o(` property of the config object (either
passed as an argument or loaded from `),iFe=a("code"),Zgr=o("pretrained_model_name_or_path"),ehr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=a("code"),ohr=o("pretrained_model_name_or_path"),rhr=o(":"),thr=l(),Le=a("ul"),b7=a("li"),cFe=a("strong"),ahr=o("data2vec-audio"),nhr=o(" \u2014 "),EH=a("a"),shr=o("Data2VecAudioForCTC"),lhr=o(" (Data2VecAudio model)"),ihr=l(),v7=a("li"),fFe=a("strong"),dhr=o("hubert"),chr=o(" \u2014 "),CH=a("a"),fhr=o("HubertForCTC"),mhr=o(" (Hubert model)"),ghr=l(),F7=a("li"),mFe=a("strong"),hhr=o("mctct"),phr=o(" \u2014 "),wH=a("a"),_hr=o("MCTCTForCTC"),uhr=o(" (M-CTC-T model)"),bhr=l(),T7=a("li"),gFe=a("strong"),vhr=o("sew"),Fhr=o(" \u2014 "),AH=a("a"),Thr=o("SEWForCTC"),Mhr=o(" (SEW model)"),Ehr=l(),M7=a("li"),hFe=a("strong"),Chr=o("sew-d"),whr=o(" \u2014 "),LH=a("a"),Ahr=o("SEWDForCTC"),Lhr=o(" (SEW-D model)"),yhr=l(),E7=a("li"),pFe=a("strong"),xhr=o("unispeech"),$hr=o(" \u2014 "),yH=a("a"),khr=o("UniSpeechForCTC"),Shr=o(" (UniSpeech model)"),Rhr=l(),C7=a("li"),_Fe=a("strong"),Phr=o("unispeech-sat"),Bhr=o(" \u2014 "),xH=a("a"),Nhr=o("UniSpeechSatForCTC"),Ihr=o(" (UniSpeechSat model)"),qhr=l(),w7=a("li"),uFe=a("strong"),jhr=o("wav2vec2"),Dhr=o(" \u2014 "),$H=a("a"),Ghr=o("Wav2Vec2ForCTC"),Ohr=o(" (Wav2Vec2 model)"),Vhr=l(),A7=a("li"),bFe=a("strong"),Xhr=o("wav2vec2-conformer"),zhr=o(" \u2014 "),kH=a("a"),Qhr=o("Wav2Vec2ConformerForCTC"),Whr=o(" (Wav2Vec2-Conformer model)"),Hhr=l(),L7=a("li"),vFe=a("strong"),Uhr=o("wavlm"),Jhr=o(" \u2014 "),SH=a("a"),Yhr=o("WavLMForCTC"),Khr=o(" (WavLM model)"),Zhr=l(),y7=a("p"),epr=o("The model is set in evaluation mode by default using "),FFe=a("code"),opr=o("model.eval()"),rpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TFe=a("code"),tpr=o("model.train()"),apr=l(),F(x7.$$.fragment),pze=l(),jd=a("h2"),$7=a("a"),MFe=a("span"),F(g9.$$.fragment),npr=l(),EFe=a("span"),spr=o("AutoModelForSpeechSeq2Seq"),_ze=l(),Ho=a("div"),F(h9.$$.fragment),lpr=l(),Dd=a("p"),ipr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RH=a("a"),dpr=o("from_pretrained()"),cpr=o(" class method or the "),PH=a("a"),fpr=o("from_config()"),mpr=o(` class
method.`),gpr=l(),p9=a("p"),hpr=o("This class cannot be instantiated directly using "),CFe=a("code"),ppr=o("__init__()"),_pr=o(" (throws an error)."),upr=l(),At=a("div"),F(_9.$$.fragment),bpr=l(),wFe=a("p"),vpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Fpr=l(),Gd=a("p"),Tpr=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),Mpr=o("not"),Epr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),Cpr=o("from_pretrained()"),wpr=o(" to load the model weights."),Apr=l(),F(k7.$$.fragment),Lpr=l(),po=a("div"),F(u9.$$.fragment),ypr=l(),LFe=a("p"),xpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$pr=l(),Za=a("p"),kpr=o("The model class to instantiate is selected based on the "),yFe=a("code"),Spr=o("model_type"),Rpr=o(` property of the config object (either
passed as an argument or loaded from `),xFe=a("code"),Ppr=o("pretrained_model_name_or_path"),Bpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=a("code"),Npr=o("pretrained_model_name_or_path"),Ipr=o(":"),qpr=l(),b9=a("ul"),S7=a("li"),kFe=a("strong"),jpr=o("speech-encoder-decoder"),Dpr=o(" \u2014 "),NH=a("a"),Gpr=o("SpeechEncoderDecoderModel"),Opr=o(" (Speech Encoder decoder model)"),Vpr=l(),R7=a("li"),SFe=a("strong"),Xpr=o("speech_to_text"),zpr=o(" \u2014 "),IH=a("a"),Qpr=o("Speech2TextForConditionalGeneration"),Wpr=o(" (Speech2Text model)"),Hpr=l(),P7=a("p"),Upr=o("The model is set in evaluation mode by default using "),RFe=a("code"),Jpr=o("model.eval()"),Ypr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PFe=a("code"),Kpr=o("model.train()"),Zpr=l(),F(B7.$$.fragment),uze=l(),Od=a("h2"),N7=a("a"),BFe=a("span"),F(v9.$$.fragment),e_r=l(),NFe=a("span"),o_r=o("AutoModelForAudioXVector"),bze=l(),Uo=a("div"),F(F9.$$.fragment),r_r=l(),Vd=a("p"),t_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qH=a("a"),a_r=o("from_pretrained()"),n_r=o(" class method or the "),jH=a("a"),s_r=o("from_config()"),l_r=o(` class
method.`),i_r=l(),T9=a("p"),d_r=o("This class cannot be instantiated directly using "),IFe=a("code"),c_r=o("__init__()"),f_r=o(" (throws an error)."),m_r=l(),Lt=a("div"),F(M9.$$.fragment),g_r=l(),qFe=a("p"),h_r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),p_r=l(),Xd=a("p"),__r=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),u_r=o("not"),b_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),v_r=o("from_pretrained()"),F_r=o(" to load the model weights."),T_r=l(),F(I7.$$.fragment),M_r=l(),_o=a("div"),F(E9.$$.fragment),E_r=l(),DFe=a("p"),C_r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),w_r=l(),en=a("p"),A_r=o("The model class to instantiate is selected based on the "),GFe=a("code"),L_r=o("model_type"),y_r=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),x_r=o("pretrained_model_name_or_path"),$_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),k_r=o("pretrained_model_name_or_path"),S_r=o(":"),R_r=l(),tt=a("ul"),q7=a("li"),XFe=a("strong"),P_r=o("data2vec-audio"),B_r=o(" \u2014 "),GH=a("a"),N_r=o("Data2VecAudioForXVector"),I_r=o(" (Data2VecAudio model)"),q_r=l(),j7=a("li"),zFe=a("strong"),j_r=o("unispeech-sat"),D_r=o(" \u2014 "),OH=a("a"),G_r=o("UniSpeechSatForXVector"),O_r=o(" (UniSpeechSat model)"),V_r=l(),D7=a("li"),QFe=a("strong"),X_r=o("wav2vec2"),z_r=o(" \u2014 "),VH=a("a"),Q_r=o("Wav2Vec2ForXVector"),W_r=o(" (Wav2Vec2 model)"),H_r=l(),G7=a("li"),WFe=a("strong"),U_r=o("wav2vec2-conformer"),J_r=o(" \u2014 "),XH=a("a"),Y_r=o("Wav2Vec2ConformerForXVector"),K_r=o(" (Wav2Vec2-Conformer model)"),Z_r=l(),O7=a("li"),HFe=a("strong"),eur=o("wavlm"),our=o(" \u2014 "),zH=a("a"),rur=o("WavLMForXVector"),tur=o(" (WavLM model)"),aur=l(),V7=a("p"),nur=o("The model is set in evaluation mode by default using "),UFe=a("code"),sur=o("model.eval()"),lur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JFe=a("code"),iur=o("model.train()"),dur=l(),F(X7.$$.fragment),vze=l(),zd=a("h2"),z7=a("a"),YFe=a("span"),F(C9.$$.fragment),cur=l(),KFe=a("span"),fur=o("AutoModelForMaskedImageModeling"),Fze=l(),Jo=a("div"),F(w9.$$.fragment),mur=l(),Qd=a("p"),gur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QH=a("a"),hur=o("from_pretrained()"),pur=o(" class method or the "),WH=a("a"),_ur=o("from_config()"),uur=o(` class
method.`),bur=l(),A9=a("p"),vur=o("This class cannot be instantiated directly using "),ZFe=a("code"),Fur=o("__init__()"),Tur=o(" (throws an error)."),Mur=l(),yt=a("div"),F(L9.$$.fragment),Eur=l(),e6e=a("p"),Cur=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),wur=l(),Wd=a("p"),Aur=o(`Note:
Loading a model from its configuration file does `),o6e=a("strong"),Lur=o("not"),yur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),xur=o("from_pretrained()"),$ur=o(" to load the model weights."),kur=l(),F(Q7.$$.fragment),Sur=l(),uo=a("div"),F(y9.$$.fragment),Rur=l(),r6e=a("p"),Pur=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Bur=l(),on=a("p"),Nur=o("The model class to instantiate is selected based on the "),t6e=a("code"),Iur=o("model_type"),qur=o(` property of the config object (either
passed as an argument or loaded from `),a6e=a("code"),jur=o("pretrained_model_name_or_path"),Dur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=a("code"),Gur=o("pretrained_model_name_or_path"),Our=o(":"),Vur=l(),Hd=a("ul"),W7=a("li"),s6e=a("strong"),Xur=o("deit"),zur=o(" \u2014 "),UH=a("a"),Qur=o("DeiTForMaskedImageModeling"),Wur=o(" (DeiT model)"),Hur=l(),H7=a("li"),l6e=a("strong"),Uur=o("swin"),Jur=o(" \u2014 "),JH=a("a"),Yur=o("SwinForMaskedImageModeling"),Kur=o(" (Swin Transformer model)"),Zur=l(),U7=a("li"),i6e=a("strong"),e2r=o("vit"),o2r=o(" \u2014 "),YH=a("a"),r2r=o("ViTForMaskedImageModeling"),t2r=o(" (ViT model)"),a2r=l(),J7=a("p"),n2r=o("The model is set in evaluation mode by default using "),d6e=a("code"),s2r=o("model.eval()"),l2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c6e=a("code"),i2r=o("model.train()"),d2r=l(),F(Y7.$$.fragment),Tze=l(),Ud=a("h2"),K7=a("a"),f6e=a("span"),F(x9.$$.fragment),c2r=l(),m6e=a("span"),f2r=o("AutoModelForObjectDetection"),Mze=l(),Yo=a("div"),F($9.$$.fragment),m2r=l(),Jd=a("p"),g2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),KH=a("a"),h2r=o("from_pretrained()"),p2r=o(" class method or the "),ZH=a("a"),_2r=o("from_config()"),u2r=o(` class
method.`),b2r=l(),k9=a("p"),v2r=o("This class cannot be instantiated directly using "),g6e=a("code"),F2r=o("__init__()"),T2r=o(" (throws an error)."),M2r=l(),xt=a("div"),F(S9.$$.fragment),E2r=l(),h6e=a("p"),C2r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),w2r=l(),Yd=a("p"),A2r=o(`Note:
Loading a model from its configuration file does `),p6e=a("strong"),L2r=o("not"),y2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=a("a"),x2r=o("from_pretrained()"),$2r=o(" to load the model weights."),k2r=l(),F(Z7.$$.fragment),S2r=l(),bo=a("div"),F(R9.$$.fragment),R2r=l(),_6e=a("p"),P2r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),B2r=l(),rn=a("p"),N2r=o("The model class to instantiate is selected based on the "),u6e=a("code"),I2r=o("model_type"),q2r=o(` property of the config object (either
passed as an argument or loaded from `),b6e=a("code"),j2r=o("pretrained_model_name_or_path"),D2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=a("code"),G2r=o("pretrained_model_name_or_path"),O2r=o(":"),V2r=l(),P9=a("ul"),e8=a("li"),F6e=a("strong"),X2r=o("detr"),z2r=o(" \u2014 "),oU=a("a"),Q2r=o("DetrForObjectDetection"),W2r=o(" (DETR model)"),H2r=l(),o8=a("li"),T6e=a("strong"),U2r=o("yolos"),J2r=o(" \u2014 "),rU=a("a"),Y2r=o("YolosForObjectDetection"),K2r=o(" (YOLOS model)"),Z2r=l(),r8=a("p"),e1r=o("The model is set in evaluation mode by default using "),M6e=a("code"),o1r=o("model.eval()"),r1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E6e=a("code"),t1r=o("model.train()"),a1r=l(),F(t8.$$.fragment),Eze=l(),Kd=a("h2"),a8=a("a"),C6e=a("span"),F(B9.$$.fragment),n1r=l(),w6e=a("span"),s1r=o("AutoModelForImageSegmentation"),Cze=l(),Ko=a("div"),F(N9.$$.fragment),l1r=l(),Zd=a("p"),i1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tU=a("a"),d1r=o("from_pretrained()"),c1r=o(" class method or the "),aU=a("a"),f1r=o("from_config()"),m1r=o(` class
method.`),g1r=l(),I9=a("p"),h1r=o("This class cannot be instantiated directly using "),A6e=a("code"),p1r=o("__init__()"),_1r=o(" (throws an error)."),u1r=l(),$t=a("div"),F(q9.$$.fragment),b1r=l(),L6e=a("p"),v1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),F1r=l(),ec=a("p"),T1r=o(`Note:
Loading a model from its configuration file does `),y6e=a("strong"),M1r=o("not"),E1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),C1r=o("from_pretrained()"),w1r=o(" to load the model weights."),A1r=l(),F(n8.$$.fragment),L1r=l(),vo=a("div"),F(j9.$$.fragment),y1r=l(),x6e=a("p"),x1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),$1r=l(),tn=a("p"),k1r=o("The model class to instantiate is selected based on the "),$6e=a("code"),S1r=o("model_type"),R1r=o(` property of the config object (either
passed as an argument or loaded from `),k6e=a("code"),P1r=o("pretrained_model_name_or_path"),B1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S6e=a("code"),N1r=o("pretrained_model_name_or_path"),I1r=o(":"),q1r=l(),R6e=a("ul"),s8=a("li"),P6e=a("strong"),j1r=o("detr"),D1r=o(" \u2014 "),sU=a("a"),G1r=o("DetrForSegmentation"),O1r=o(" (DETR model)"),V1r=l(),l8=a("p"),X1r=o("The model is set in evaluation mode by default using "),B6e=a("code"),z1r=o("model.eval()"),Q1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N6e=a("code"),W1r=o("model.train()"),H1r=l(),F(i8.$$.fragment),wze=l(),oc=a("h2"),d8=a("a"),I6e=a("span"),F(D9.$$.fragment),U1r=l(),q6e=a("span"),J1r=o("AutoModelForSemanticSegmentation"),Aze=l(),Zo=a("div"),F(G9.$$.fragment),Y1r=l(),rc=a("p"),K1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),lU=a("a"),Z1r=o("from_pretrained()"),ebr=o(" class method or the "),iU=a("a"),obr=o("from_config()"),rbr=o(` class
method.`),tbr=l(),O9=a("p"),abr=o("This class cannot be instantiated directly using "),j6e=a("code"),nbr=o("__init__()"),sbr=o(" (throws an error)."),lbr=l(),kt=a("div"),F(V9.$$.fragment),ibr=l(),D6e=a("p"),dbr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),cbr=l(),tc=a("p"),fbr=o(`Note:
Loading a model from its configuration file does `),G6e=a("strong"),mbr=o("not"),gbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),hbr=o("from_pretrained()"),pbr=o(" to load the model weights."),_br=l(),F(c8.$$.fragment),ubr=l(),Fo=a("div"),F(X9.$$.fragment),bbr=l(),O6e=a("p"),vbr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Fbr=l(),an=a("p"),Tbr=o("The model class to instantiate is selected based on the "),V6e=a("code"),Mbr=o("model_type"),Ebr=o(` property of the config object (either
passed as an argument or loaded from `),X6e=a("code"),Cbr=o("pretrained_model_name_or_path"),wbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z6e=a("code"),Abr=o("pretrained_model_name_or_path"),Lbr=o(":"),ybr=l(),at=a("ul"),f8=a("li"),Q6e=a("strong"),xbr=o("beit"),$br=o(" \u2014 "),cU=a("a"),kbr=o("BeitForSemanticSegmentation"),Sbr=o(" (BEiT model)"),Rbr=l(),m8=a("li"),W6e=a("strong"),Pbr=o("data2vec-vision"),Bbr=o(" \u2014 "),fU=a("a"),Nbr=o("Data2VecVisionForSemanticSegmentation"),Ibr=o(" (Data2VecVision model)"),qbr=l(),g8=a("li"),H6e=a("strong"),jbr=o("dpt"),Dbr=o(" \u2014 "),mU=a("a"),Gbr=o("DPTForSemanticSegmentation"),Obr=o(" (DPT model)"),Vbr=l(),h8=a("li"),U6e=a("strong"),Xbr=o("mobilevit"),zbr=o(" \u2014 "),gU=a("a"),Qbr=o("MobileViTForSemanticSegmentation"),Wbr=o(" (MobileViT model)"),Hbr=l(),p8=a("li"),J6e=a("strong"),Ubr=o("segformer"),Jbr=o(" \u2014 "),hU=a("a"),Ybr=o("SegformerForSemanticSegmentation"),Kbr=o(" (SegFormer model)"),Zbr=l(),_8=a("p"),evr=o("The model is set in evaluation mode by default using "),Y6e=a("code"),ovr=o("model.eval()"),rvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K6e=a("code"),tvr=o("model.train()"),avr=l(),F(u8.$$.fragment),Lze=l(),ac=a("h2"),b8=a("a"),Z6e=a("span"),F(z9.$$.fragment),nvr=l(),eTe=a("span"),svr=o("AutoModelForInstanceSegmentation"),yze=l(),er=a("div"),F(Q9.$$.fragment),lvr=l(),nc=a("p"),ivr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pU=a("a"),dvr=o("from_pretrained()"),cvr=o(" class method or the "),_U=a("a"),fvr=o("from_config()"),mvr=o(` class
method.`),gvr=l(),W9=a("p"),hvr=o("This class cannot be instantiated directly using "),oTe=a("code"),pvr=o("__init__()"),_vr=o(" (throws an error)."),uvr=l(),St=a("div"),F(H9.$$.fragment),bvr=l(),rTe=a("p"),vvr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Fvr=l(),sc=a("p"),Tvr=o(`Note:
Loading a model from its configuration file does `),tTe=a("strong"),Mvr=o("not"),Evr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),Cvr=o("from_pretrained()"),wvr=o(" to load the model weights."),Avr=l(),F(v8.$$.fragment),Lvr=l(),To=a("div"),F(U9.$$.fragment),yvr=l(),aTe=a("p"),xvr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$vr=l(),nn=a("p"),kvr=o("The model class to instantiate is selected based on the "),nTe=a("code"),Svr=o("model_type"),Rvr=o(` property of the config object (either
passed as an argument or loaded from `),sTe=a("code"),Pvr=o("pretrained_model_name_or_path"),Bvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=a("code"),Nvr=o("pretrained_model_name_or_path"),Ivr=o(":"),qvr=l(),iTe=a("ul"),F8=a("li"),dTe=a("strong"),jvr=o("maskformer"),Dvr=o(" \u2014 "),bU=a("a"),Gvr=o("MaskFormerForInstanceSegmentation"),Ovr=o(" (MaskFormer model)"),Vvr=l(),T8=a("p"),Xvr=o("The model is set in evaluation mode by default using "),cTe=a("code"),zvr=o("model.eval()"),Qvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fTe=a("code"),Wvr=o("model.train()"),Hvr=l(),F(M8.$$.fragment),xze=l(),lc=a("h2"),E8=a("a"),mTe=a("span"),F(J9.$$.fragment),Uvr=l(),gTe=a("span"),Jvr=o("TFAutoModel"),$ze=l(),or=a("div"),F(Y9.$$.fragment),Yvr=l(),ic=a("p"),Kvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vU=a("a"),Zvr=o("from_pretrained()"),eFr=o(" class method or the "),FU=a("a"),oFr=o("from_config()"),rFr=o(` class
method.`),tFr=l(),K9=a("p"),aFr=o("This class cannot be instantiated directly using "),hTe=a("code"),nFr=o("__init__()"),sFr=o(" (throws an error)."),lFr=l(),Rt=a("div"),F(Z9.$$.fragment),iFr=l(),pTe=a("p"),dFr=o("Instantiates one of the base model classes of the library from a configuration."),cFr=l(),dc=a("p"),fFr=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),mFr=o("not"),gFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),hFr=o("from_pretrained()"),pFr=o(" to load the model weights."),_Fr=l(),F(C8.$$.fragment),uFr=l(),xr=a("div"),F(ex.$$.fragment),bFr=l(),uTe=a("p"),vFr=o("Instantiate one of the base model classes of the library from a pretrained model."),FFr=l(),sn=a("p"),TFr=o("The model class to instantiate is selected based on the "),bTe=a("code"),MFr=o("model_type"),EFr=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),CFr=o("pretrained_model_name_or_path"),wFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),AFr=o("pretrained_model_name_or_path"),LFr=o(":"),yFr=l(),q=a("ul"),w8=a("li"),TTe=a("strong"),xFr=o("albert"),$Fr=o(" \u2014 "),MU=a("a"),kFr=o("TFAlbertModel"),SFr=o(" (ALBERT model)"),RFr=l(),A8=a("li"),MTe=a("strong"),PFr=o("bart"),BFr=o(" \u2014 "),EU=a("a"),NFr=o("TFBartModel"),IFr=o(" (BART model)"),qFr=l(),L8=a("li"),ETe=a("strong"),jFr=o("bert"),DFr=o(" \u2014 "),CU=a("a"),GFr=o("TFBertModel"),OFr=o(" (BERT model)"),VFr=l(),y8=a("li"),CTe=a("strong"),XFr=o("blenderbot"),zFr=o(" \u2014 "),wU=a("a"),QFr=o("TFBlenderbotModel"),WFr=o(" (Blenderbot model)"),HFr=l(),x8=a("li"),wTe=a("strong"),UFr=o("blenderbot-small"),JFr=o(" \u2014 "),AU=a("a"),YFr=o("TFBlenderbotSmallModel"),KFr=o(" (BlenderbotSmall model)"),ZFr=l(),$8=a("li"),ATe=a("strong"),e6r=o("camembert"),o6r=o(" \u2014 "),LU=a("a"),r6r=o("TFCamembertModel"),t6r=o(" (CamemBERT model)"),a6r=l(),k8=a("li"),LTe=a("strong"),n6r=o("clip"),s6r=o(" \u2014 "),yU=a("a"),l6r=o("TFCLIPModel"),i6r=o(" (CLIP model)"),d6r=l(),S8=a("li"),yTe=a("strong"),c6r=o("convbert"),f6r=o(" \u2014 "),xU=a("a"),m6r=o("TFConvBertModel"),g6r=o(" (ConvBERT model)"),h6r=l(),R8=a("li"),xTe=a("strong"),p6r=o("convnext"),_6r=o(" \u2014 "),$U=a("a"),u6r=o("TFConvNextModel"),b6r=o(" (ConvNeXT model)"),v6r=l(),P8=a("li"),$Te=a("strong"),F6r=o("ctrl"),T6r=o(" \u2014 "),kU=a("a"),M6r=o("TFCTRLModel"),E6r=o(" (CTRL model)"),C6r=l(),B8=a("li"),kTe=a("strong"),w6r=o("data2vec-vision"),A6r=o(" \u2014 "),SU=a("a"),L6r=o("TFData2VecVisionModel"),y6r=o(" (Data2VecVision model)"),x6r=l(),N8=a("li"),STe=a("strong"),$6r=o("deberta"),k6r=o(" \u2014 "),RU=a("a"),S6r=o("TFDebertaModel"),R6r=o(" (DeBERTa model)"),P6r=l(),I8=a("li"),RTe=a("strong"),B6r=o("deberta-v2"),N6r=o(" \u2014 "),PU=a("a"),I6r=o("TFDebertaV2Model"),q6r=o(" (DeBERTa-v2 model)"),j6r=l(),q8=a("li"),PTe=a("strong"),D6r=o("deit"),G6r=o(" \u2014 "),BU=a("a"),O6r=o("TFDeiTModel"),V6r=o(" (DeiT model)"),X6r=l(),j8=a("li"),BTe=a("strong"),z6r=o("distilbert"),Q6r=o(" \u2014 "),NU=a("a"),W6r=o("TFDistilBertModel"),H6r=o(" (DistilBERT model)"),U6r=l(),D8=a("li"),NTe=a("strong"),J6r=o("dpr"),Y6r=o(" \u2014 "),IU=a("a"),K6r=o("TFDPRQuestionEncoder"),Z6r=o(" (DPR model)"),eTr=l(),G8=a("li"),ITe=a("strong"),oTr=o("electra"),rTr=o(" \u2014 "),qU=a("a"),tTr=o("TFElectraModel"),aTr=o(" (ELECTRA model)"),nTr=l(),O8=a("li"),qTe=a("strong"),sTr=o("flaubert"),lTr=o(" \u2014 "),jU=a("a"),iTr=o("TFFlaubertModel"),dTr=o(" (FlauBERT model)"),cTr=l(),Ys=a("li"),jTe=a("strong"),fTr=o("funnel"),mTr=o(" \u2014 "),DU=a("a"),gTr=o("TFFunnelModel"),hTr=o(" or "),GU=a("a"),pTr=o("TFFunnelBaseModel"),_Tr=o(" (Funnel Transformer model)"),uTr=l(),V8=a("li"),DTe=a("strong"),bTr=o("gpt2"),vTr=o(" \u2014 "),OU=a("a"),FTr=o("TFGPT2Model"),TTr=o(" (OpenAI GPT-2 model)"),MTr=l(),X8=a("li"),GTe=a("strong"),ETr=o("gptj"),CTr=o(" \u2014 "),VU=a("a"),wTr=o("TFGPTJModel"),ATr=o(" (GPT-J model)"),LTr=l(),z8=a("li"),OTe=a("strong"),yTr=o("hubert"),xTr=o(" \u2014 "),XU=a("a"),$Tr=o("TFHubertModel"),kTr=o(" (Hubert model)"),STr=l(),Q8=a("li"),VTe=a("strong"),RTr=o("layoutlm"),PTr=o(" \u2014 "),zU=a("a"),BTr=o("TFLayoutLMModel"),NTr=o(" (LayoutLM model)"),ITr=l(),W8=a("li"),XTe=a("strong"),qTr=o("led"),jTr=o(" \u2014 "),QU=a("a"),DTr=o("TFLEDModel"),GTr=o(" (LED model)"),OTr=l(),H8=a("li"),zTe=a("strong"),VTr=o("longformer"),XTr=o(" \u2014 "),WU=a("a"),zTr=o("TFLongformerModel"),QTr=o(" (Longformer model)"),WTr=l(),U8=a("li"),QTe=a("strong"),HTr=o("lxmert"),UTr=o(" \u2014 "),HU=a("a"),JTr=o("TFLxmertModel"),YTr=o(" (LXMERT model)"),KTr=l(),J8=a("li"),WTe=a("strong"),ZTr=o("marian"),e7r=o(" \u2014 "),UU=a("a"),o7r=o("TFMarianModel"),r7r=o(" (Marian model)"),t7r=l(),Y8=a("li"),HTe=a("strong"),a7r=o("mbart"),n7r=o(" \u2014 "),JU=a("a"),s7r=o("TFMBartModel"),l7r=o(" (mBART model)"),i7r=l(),K8=a("li"),UTe=a("strong"),d7r=o("mobilebert"),c7r=o(" \u2014 "),YU=a("a"),f7r=o("TFMobileBertModel"),m7r=o(" (MobileBERT model)"),g7r=l(),Z8=a("li"),JTe=a("strong"),h7r=o("mpnet"),p7r=o(" \u2014 "),KU=a("a"),_7r=o("TFMPNetModel"),u7r=o(" (MPNet model)"),b7r=l(),eM=a("li"),YTe=a("strong"),v7r=o("mt5"),F7r=o(" \u2014 "),ZU=a("a"),T7r=o("TFMT5Model"),M7r=o(" (MT5 model)"),E7r=l(),oM=a("li"),KTe=a("strong"),C7r=o("openai-gpt"),w7r=o(" \u2014 "),eJ=a("a"),A7r=o("TFOpenAIGPTModel"),L7r=o(" (OpenAI GPT model)"),y7r=l(),rM=a("li"),ZTe=a("strong"),x7r=o("opt"),$7r=o(" \u2014 "),oJ=a("a"),k7r=o("TFOPTModel"),S7r=o(" (OPT model)"),R7r=l(),tM=a("li"),e7e=a("strong"),P7r=o("pegasus"),B7r=o(" \u2014 "),rJ=a("a"),N7r=o("TFPegasusModel"),I7r=o(" (Pegasus model)"),q7r=l(),aM=a("li"),o7e=a("strong"),j7r=o("regnet"),D7r=o(" \u2014 "),tJ=a("a"),G7r=o("TFRegNetModel"),O7r=o(" (RegNet model)"),V7r=l(),nM=a("li"),r7e=a("strong"),X7r=o("rembert"),z7r=o(" \u2014 "),aJ=a("a"),Q7r=o("TFRemBertModel"),W7r=o(" (RemBERT model)"),H7r=l(),sM=a("li"),t7e=a("strong"),U7r=o("resnet"),J7r=o(" \u2014 "),nJ=a("a"),Y7r=o("TFResNetModel"),K7r=o(" (ResNet model)"),Z7r=l(),lM=a("li"),a7e=a("strong"),e8r=o("roberta"),o8r=o(" \u2014 "),sJ=a("a"),r8r=o("TFRobertaModel"),t8r=o(" (RoBERTa model)"),a8r=l(),iM=a("li"),n7e=a("strong"),n8r=o("roformer"),s8r=o(" \u2014 "),lJ=a("a"),l8r=o("TFRoFormerModel"),i8r=o(" (RoFormer model)"),d8r=l(),dM=a("li"),s7e=a("strong"),c8r=o("speech_to_text"),f8r=o(" \u2014 "),iJ=a("a"),m8r=o("TFSpeech2TextModel"),g8r=o(" (Speech2Text model)"),h8r=l(),cM=a("li"),l7e=a("strong"),p8r=o("swin"),_8r=o(" \u2014 "),dJ=a("a"),u8r=o("TFSwinModel"),b8r=o(" (Swin Transformer model)"),v8r=l(),fM=a("li"),i7e=a("strong"),F8r=o("t5"),T8r=o(" \u2014 "),cJ=a("a"),M8r=o("TFT5Model"),E8r=o(" (T5 model)"),C8r=l(),mM=a("li"),d7e=a("strong"),w8r=o("tapas"),A8r=o(" \u2014 "),fJ=a("a"),L8r=o("TFTapasModel"),y8r=o(" (TAPAS model)"),x8r=l(),gM=a("li"),c7e=a("strong"),$8r=o("transfo-xl"),k8r=o(" \u2014 "),mJ=a("a"),S8r=o("TFTransfoXLModel"),R8r=o(" (Transformer-XL model)"),P8r=l(),hM=a("li"),f7e=a("strong"),B8r=o("vit"),N8r=o(" \u2014 "),gJ=a("a"),I8r=o("TFViTModel"),q8r=o(" (ViT model)"),j8r=l(),pM=a("li"),m7e=a("strong"),D8r=o("vit_mae"),G8r=o(" \u2014 "),hJ=a("a"),O8r=o("TFViTMAEModel"),V8r=o(" (ViTMAE model)"),X8r=l(),_M=a("li"),g7e=a("strong"),z8r=o("wav2vec2"),Q8r=o(" \u2014 "),pJ=a("a"),W8r=o("TFWav2Vec2Model"),H8r=o(" (Wav2Vec2 model)"),U8r=l(),uM=a("li"),h7e=a("strong"),J8r=o("xlm"),Y8r=o(" \u2014 "),_J=a("a"),K8r=o("TFXLMModel"),Z8r=o(" (XLM model)"),eMr=l(),bM=a("li"),p7e=a("strong"),oMr=o("xlm-roberta"),rMr=o(" \u2014 "),uJ=a("a"),tMr=o("TFXLMRobertaModel"),aMr=o(" (XLM-RoBERTa model)"),nMr=l(),vM=a("li"),_7e=a("strong"),sMr=o("xlnet"),lMr=o(" \u2014 "),bJ=a("a"),iMr=o("TFXLNetModel"),dMr=o(" (XLNet model)"),cMr=l(),F(FM.$$.fragment),kze=l(),cc=a("h2"),TM=a("a"),u7e=a("span"),F(ox.$$.fragment),fMr=l(),b7e=a("span"),mMr=o("TFAutoModelForPreTraining"),Sze=l(),rr=a("div"),F(rx.$$.fragment),gMr=l(),fc=a("p"),hMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vJ=a("a"),pMr=o("from_pretrained()"),_Mr=o(" class method or the "),FJ=a("a"),uMr=o("from_config()"),bMr=o(` class
method.`),vMr=l(),tx=a("p"),FMr=o("This class cannot be instantiated directly using "),v7e=a("code"),TMr=o("__init__()"),MMr=o(" (throws an error)."),EMr=l(),Pt=a("div"),F(ax.$$.fragment),CMr=l(),F7e=a("p"),wMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),AMr=l(),mc=a("p"),LMr=o(`Note:
Loading a model from its configuration file does `),T7e=a("strong"),yMr=o("not"),xMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),$Mr=o("from_pretrained()"),kMr=o(" to load the model weights."),SMr=l(),F(MM.$$.fragment),RMr=l(),$r=a("div"),F(nx.$$.fragment),PMr=l(),M7e=a("p"),BMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NMr=l(),ln=a("p"),IMr=o("The model class to instantiate is selected based on the "),E7e=a("code"),qMr=o("model_type"),jMr=o(` property of the config object (either
passed as an argument or loaded from `),C7e=a("code"),DMr=o("pretrained_model_name_or_path"),GMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=a("code"),OMr=o("pretrained_model_name_or_path"),VMr=o(":"),XMr=l(),se=a("ul"),EM=a("li"),A7e=a("strong"),zMr=o("albert"),QMr=o(" \u2014 "),MJ=a("a"),WMr=o("TFAlbertForPreTraining"),HMr=o(" (ALBERT model)"),UMr=l(),CM=a("li"),L7e=a("strong"),JMr=o("bart"),YMr=o(" \u2014 "),EJ=a("a"),KMr=o("TFBartForConditionalGeneration"),ZMr=o(" (BART model)"),e4r=l(),wM=a("li"),y7e=a("strong"),o4r=o("bert"),r4r=o(" \u2014 "),CJ=a("a"),t4r=o("TFBertForPreTraining"),a4r=o(" (BERT model)"),n4r=l(),AM=a("li"),x7e=a("strong"),s4r=o("camembert"),l4r=o(" \u2014 "),wJ=a("a"),i4r=o("TFCamembertForMaskedLM"),d4r=o(" (CamemBERT model)"),c4r=l(),LM=a("li"),$7e=a("strong"),f4r=o("ctrl"),m4r=o(" \u2014 "),AJ=a("a"),g4r=o("TFCTRLLMHeadModel"),h4r=o(" (CTRL model)"),p4r=l(),yM=a("li"),k7e=a("strong"),_4r=o("distilbert"),u4r=o(" \u2014 "),LJ=a("a"),b4r=o("TFDistilBertForMaskedLM"),v4r=o(" (DistilBERT model)"),F4r=l(),xM=a("li"),S7e=a("strong"),T4r=o("electra"),M4r=o(" \u2014 "),yJ=a("a"),E4r=o("TFElectraForPreTraining"),C4r=o(" (ELECTRA model)"),w4r=l(),$M=a("li"),R7e=a("strong"),A4r=o("flaubert"),L4r=o(" \u2014 "),xJ=a("a"),y4r=o("TFFlaubertWithLMHeadModel"),x4r=o(" (FlauBERT model)"),$4r=l(),kM=a("li"),P7e=a("strong"),k4r=o("funnel"),S4r=o(" \u2014 "),$J=a("a"),R4r=o("TFFunnelForPreTraining"),P4r=o(" (Funnel Transformer model)"),B4r=l(),SM=a("li"),B7e=a("strong"),N4r=o("gpt2"),I4r=o(" \u2014 "),kJ=a("a"),q4r=o("TFGPT2LMHeadModel"),j4r=o(" (OpenAI GPT-2 model)"),D4r=l(),RM=a("li"),N7e=a("strong"),G4r=o("layoutlm"),O4r=o(" \u2014 "),SJ=a("a"),V4r=o("TFLayoutLMForMaskedLM"),X4r=o(" (LayoutLM model)"),z4r=l(),PM=a("li"),I7e=a("strong"),Q4r=o("lxmert"),W4r=o(" \u2014 "),RJ=a("a"),H4r=o("TFLxmertForPreTraining"),U4r=o(" (LXMERT model)"),J4r=l(),BM=a("li"),q7e=a("strong"),Y4r=o("mobilebert"),K4r=o(" \u2014 "),PJ=a("a"),Z4r=o("TFMobileBertForPreTraining"),eEr=o(" (MobileBERT model)"),oEr=l(),NM=a("li"),j7e=a("strong"),rEr=o("mpnet"),tEr=o(" \u2014 "),BJ=a("a"),aEr=o("TFMPNetForMaskedLM"),nEr=o(" (MPNet model)"),sEr=l(),IM=a("li"),D7e=a("strong"),lEr=o("openai-gpt"),iEr=o(" \u2014 "),NJ=a("a"),dEr=o("TFOpenAIGPTLMHeadModel"),cEr=o(" (OpenAI GPT model)"),fEr=l(),qM=a("li"),G7e=a("strong"),mEr=o("roberta"),gEr=o(" \u2014 "),IJ=a("a"),hEr=o("TFRobertaForMaskedLM"),pEr=o(" (RoBERTa model)"),_Er=l(),jM=a("li"),O7e=a("strong"),uEr=o("t5"),bEr=o(" \u2014 "),qJ=a("a"),vEr=o("TFT5ForConditionalGeneration"),FEr=o(" (T5 model)"),TEr=l(),DM=a("li"),V7e=a("strong"),MEr=o("tapas"),EEr=o(" \u2014 "),jJ=a("a"),CEr=o("TFTapasForMaskedLM"),wEr=o(" (TAPAS model)"),AEr=l(),GM=a("li"),X7e=a("strong"),LEr=o("transfo-xl"),yEr=o(" \u2014 "),DJ=a("a"),xEr=o("TFTransfoXLLMHeadModel"),$Er=o(" (Transformer-XL model)"),kEr=l(),OM=a("li"),z7e=a("strong"),SEr=o("vit_mae"),REr=o(" \u2014 "),GJ=a("a"),PEr=o("TFViTMAEForPreTraining"),BEr=o(" (ViTMAE model)"),NEr=l(),VM=a("li"),Q7e=a("strong"),IEr=o("xlm"),qEr=o(" \u2014 "),OJ=a("a"),jEr=o("TFXLMWithLMHeadModel"),DEr=o(" (XLM model)"),GEr=l(),XM=a("li"),W7e=a("strong"),OEr=o("xlm-roberta"),VEr=o(" \u2014 "),VJ=a("a"),XEr=o("TFXLMRobertaForMaskedLM"),zEr=o(" (XLM-RoBERTa model)"),QEr=l(),zM=a("li"),H7e=a("strong"),WEr=o("xlnet"),HEr=o(" \u2014 "),XJ=a("a"),UEr=o("TFXLNetLMHeadModel"),JEr=o(" (XLNet model)"),YEr=l(),F(QM.$$.fragment),Rze=l(),gc=a("h2"),WM=a("a"),U7e=a("span"),F(sx.$$.fragment),KEr=l(),J7e=a("span"),ZEr=o("TFAutoModelForCausalLM"),Pze=l(),tr=a("div"),F(lx.$$.fragment),eCr=l(),hc=a("p"),oCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zJ=a("a"),rCr=o("from_pretrained()"),tCr=o(" class method or the "),QJ=a("a"),aCr=o("from_config()"),nCr=o(` class
method.`),sCr=l(),ix=a("p"),lCr=o("This class cannot be instantiated directly using "),Y7e=a("code"),iCr=o("__init__()"),dCr=o(" (throws an error)."),cCr=l(),Bt=a("div"),F(dx.$$.fragment),fCr=l(),K7e=a("p"),mCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gCr=l(),pc=a("p"),hCr=o(`Note:
Loading a model from its configuration file does `),Z7e=a("strong"),pCr=o("not"),_Cr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),uCr=o("from_pretrained()"),bCr=o(" to load the model weights."),vCr=l(),F(HM.$$.fragment),FCr=l(),kr=a("div"),F(cx.$$.fragment),TCr=l(),e8e=a("p"),MCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ECr=l(),dn=a("p"),CCr=o("The model class to instantiate is selected based on the "),o8e=a("code"),wCr=o("model_type"),ACr=o(` property of the config object (either
passed as an argument or loaded from `),r8e=a("code"),LCr=o("pretrained_model_name_or_path"),yCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t8e=a("code"),xCr=o("pretrained_model_name_or_path"),$Cr=o(":"),kCr=l(),Me=a("ul"),UM=a("li"),a8e=a("strong"),SCr=o("bert"),RCr=o(" \u2014 "),HJ=a("a"),PCr=o("TFBertLMHeadModel"),BCr=o(" (BERT model)"),NCr=l(),JM=a("li"),n8e=a("strong"),ICr=o("camembert"),qCr=o(" \u2014 "),UJ=a("a"),jCr=o("TFCamembertForCausalLM"),DCr=o(" (CamemBERT model)"),GCr=l(),YM=a("li"),s8e=a("strong"),OCr=o("ctrl"),VCr=o(" \u2014 "),JJ=a("a"),XCr=o("TFCTRLLMHeadModel"),zCr=o(" (CTRL model)"),QCr=l(),KM=a("li"),l8e=a("strong"),WCr=o("gpt2"),HCr=o(" \u2014 "),YJ=a("a"),UCr=o("TFGPT2LMHeadModel"),JCr=o(" (OpenAI GPT-2 model)"),YCr=l(),ZM=a("li"),i8e=a("strong"),KCr=o("gptj"),ZCr=o(" \u2014 "),KJ=a("a"),e5r=o("TFGPTJForCausalLM"),o5r=o(" (GPT-J model)"),r5r=l(),e4=a("li"),d8e=a("strong"),t5r=o("openai-gpt"),a5r=o(" \u2014 "),ZJ=a("a"),n5r=o("TFOpenAIGPTLMHeadModel"),s5r=o(" (OpenAI GPT model)"),l5r=l(),o4=a("li"),c8e=a("strong"),i5r=o("opt"),d5r=o(" \u2014 "),eY=a("a"),c5r=o("TFOPTForCausalLM"),f5r=o(" (OPT model)"),m5r=l(),r4=a("li"),f8e=a("strong"),g5r=o("rembert"),h5r=o(" \u2014 "),oY=a("a"),p5r=o("TFRemBertForCausalLM"),_5r=o(" (RemBERT model)"),u5r=l(),t4=a("li"),m8e=a("strong"),b5r=o("roberta"),v5r=o(" \u2014 "),rY=a("a"),F5r=o("TFRobertaForCausalLM"),T5r=o(" (RoBERTa model)"),M5r=l(),a4=a("li"),g8e=a("strong"),E5r=o("roformer"),C5r=o(" \u2014 "),tY=a("a"),w5r=o("TFRoFormerForCausalLM"),A5r=o(" (RoFormer model)"),L5r=l(),n4=a("li"),h8e=a("strong"),y5r=o("transfo-xl"),x5r=o(" \u2014 "),aY=a("a"),$5r=o("TFTransfoXLLMHeadModel"),k5r=o(" (Transformer-XL model)"),S5r=l(),s4=a("li"),p8e=a("strong"),R5r=o("xlm"),P5r=o(" \u2014 "),nY=a("a"),B5r=o("TFXLMWithLMHeadModel"),N5r=o(" (XLM model)"),I5r=l(),l4=a("li"),_8e=a("strong"),q5r=o("xlnet"),j5r=o(" \u2014 "),sY=a("a"),D5r=o("TFXLNetLMHeadModel"),G5r=o(" (XLNet model)"),O5r=l(),F(i4.$$.fragment),Bze=l(),_c=a("h2"),d4=a("a"),u8e=a("span"),F(fx.$$.fragment),V5r=l(),b8e=a("span"),X5r=o("TFAutoModelForImageClassification"),Nze=l(),ar=a("div"),F(mx.$$.fragment),z5r=l(),uc=a("p"),Q5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lY=a("a"),W5r=o("from_pretrained()"),H5r=o(" class method or the "),iY=a("a"),U5r=o("from_config()"),J5r=o(` class
method.`),Y5r=l(),gx=a("p"),K5r=o("This class cannot be instantiated directly using "),v8e=a("code"),Z5r=o("__init__()"),e3r=o(" (throws an error)."),o3r=l(),Nt=a("div"),F(hx.$$.fragment),r3r=l(),F8e=a("p"),t3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),a3r=l(),bc=a("p"),n3r=o(`Note:
Loading a model from its configuration file does `),T8e=a("strong"),s3r=o("not"),l3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),i3r=o("from_pretrained()"),d3r=o(" to load the model weights."),c3r=l(),F(c4.$$.fragment),f3r=l(),Sr=a("div"),F(px.$$.fragment),m3r=l(),M8e=a("p"),g3r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),h3r=l(),cn=a("p"),p3r=o("The model class to instantiate is selected based on the "),E8e=a("code"),_3r=o("model_type"),u3r=o(` property of the config object (either
passed as an argument or loaded from `),C8e=a("code"),b3r=o("pretrained_model_name_or_path"),v3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=a("code"),F3r=o("pretrained_model_name_or_path"),T3r=o(":"),M3r=l(),Qe=a("ul"),f4=a("li"),A8e=a("strong"),E3r=o("convnext"),C3r=o(" \u2014 "),cY=a("a"),w3r=o("TFConvNextForImageClassification"),A3r=o(" (ConvNeXT model)"),L3r=l(),m4=a("li"),L8e=a("strong"),y3r=o("data2vec-vision"),x3r=o(" \u2014 "),fY=a("a"),$3r=o("TFData2VecVisionForImageClassification"),k3r=o(" (Data2VecVision model)"),S3r=l(),Ks=a("li"),y8e=a("strong"),R3r=o("deit"),P3r=o(" \u2014 "),mY=a("a"),B3r=o("TFDeiTForImageClassification"),N3r=o(" or "),gY=a("a"),I3r=o("TFDeiTForImageClassificationWithTeacher"),q3r=o(" (DeiT model)"),j3r=l(),g4=a("li"),x8e=a("strong"),D3r=o("regnet"),G3r=o(" \u2014 "),hY=a("a"),O3r=o("TFRegNetForImageClassification"),V3r=o(" (RegNet model)"),X3r=l(),h4=a("li"),$8e=a("strong"),z3r=o("resnet"),Q3r=o(" \u2014 "),pY=a("a"),W3r=o("TFResNetForImageClassification"),H3r=o(" (ResNet model)"),U3r=l(),p4=a("li"),k8e=a("strong"),J3r=o("swin"),Y3r=o(" \u2014 "),_Y=a("a"),K3r=o("TFSwinForImageClassification"),Z3r=o(" (Swin Transformer model)"),e0r=l(),_4=a("li"),S8e=a("strong"),o0r=o("vit"),r0r=o(" \u2014 "),uY=a("a"),t0r=o("TFViTForImageClassification"),a0r=o(" (ViT model)"),n0r=l(),F(u4.$$.fragment),Ize=l(),vc=a("h2"),b4=a("a"),R8e=a("span"),F(_x.$$.fragment),s0r=l(),P8e=a("span"),l0r=o("TFAutoModelForMaskedLM"),qze=l(),nr=a("div"),F(ux.$$.fragment),i0r=l(),Fc=a("p"),d0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bY=a("a"),c0r=o("from_pretrained()"),f0r=o(" class method or the "),vY=a("a"),m0r=o("from_config()"),g0r=o(` class
method.`),h0r=l(),bx=a("p"),p0r=o("This class cannot be instantiated directly using "),B8e=a("code"),_0r=o("__init__()"),u0r=o(" (throws an error)."),b0r=l(),It=a("div"),F(vx.$$.fragment),v0r=l(),N8e=a("p"),F0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),T0r=l(),Tc=a("p"),M0r=o(`Note:
Loading a model from its configuration file does `),I8e=a("strong"),E0r=o("not"),C0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),w0r=o("from_pretrained()"),A0r=o(" to load the model weights."),L0r=l(),F(v4.$$.fragment),y0r=l(),Rr=a("div"),F(Fx.$$.fragment),x0r=l(),q8e=a("p"),$0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),k0r=l(),fn=a("p"),S0r=o("The model class to instantiate is selected based on the "),j8e=a("code"),R0r=o("model_type"),P0r=o(` property of the config object (either
passed as an argument or loaded from `),D8e=a("code"),B0r=o("pretrained_model_name_or_path"),N0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G8e=a("code"),I0r=o("pretrained_model_name_or_path"),q0r=o(":"),j0r=l(),ie=a("ul"),F4=a("li"),O8e=a("strong"),D0r=o("albert"),G0r=o(" \u2014 "),TY=a("a"),O0r=o("TFAlbertForMaskedLM"),V0r=o(" (ALBERT model)"),X0r=l(),T4=a("li"),V8e=a("strong"),z0r=o("bert"),Q0r=o(" \u2014 "),MY=a("a"),W0r=o("TFBertForMaskedLM"),H0r=o(" (BERT model)"),U0r=l(),M4=a("li"),X8e=a("strong"),J0r=o("camembert"),Y0r=o(" \u2014 "),EY=a("a"),K0r=o("TFCamembertForMaskedLM"),Z0r=o(" (CamemBERT model)"),ewr=l(),E4=a("li"),z8e=a("strong"),owr=o("convbert"),rwr=o(" \u2014 "),CY=a("a"),twr=o("TFConvBertForMaskedLM"),awr=o(" (ConvBERT model)"),nwr=l(),C4=a("li"),Q8e=a("strong"),swr=o("deberta"),lwr=o(" \u2014 "),wY=a("a"),iwr=o("TFDebertaForMaskedLM"),dwr=o(" (DeBERTa model)"),cwr=l(),w4=a("li"),W8e=a("strong"),fwr=o("deberta-v2"),mwr=o(" \u2014 "),AY=a("a"),gwr=o("TFDebertaV2ForMaskedLM"),hwr=o(" (DeBERTa-v2 model)"),pwr=l(),A4=a("li"),H8e=a("strong"),_wr=o("distilbert"),uwr=o(" \u2014 "),LY=a("a"),bwr=o("TFDistilBertForMaskedLM"),vwr=o(" (DistilBERT model)"),Fwr=l(),L4=a("li"),U8e=a("strong"),Twr=o("electra"),Mwr=o(" \u2014 "),yY=a("a"),Ewr=o("TFElectraForMaskedLM"),Cwr=o(" (ELECTRA model)"),wwr=l(),y4=a("li"),J8e=a("strong"),Awr=o("flaubert"),Lwr=o(" \u2014 "),xY=a("a"),ywr=o("TFFlaubertWithLMHeadModel"),xwr=o(" (FlauBERT model)"),$wr=l(),x4=a("li"),Y8e=a("strong"),kwr=o("funnel"),Swr=o(" \u2014 "),$Y=a("a"),Rwr=o("TFFunnelForMaskedLM"),Pwr=o(" (Funnel Transformer model)"),Bwr=l(),$4=a("li"),K8e=a("strong"),Nwr=o("layoutlm"),Iwr=o(" \u2014 "),kY=a("a"),qwr=o("TFLayoutLMForMaskedLM"),jwr=o(" (LayoutLM model)"),Dwr=l(),k4=a("li"),Z8e=a("strong"),Gwr=o("longformer"),Owr=o(" \u2014 "),SY=a("a"),Vwr=o("TFLongformerForMaskedLM"),Xwr=o(" (Longformer model)"),zwr=l(),S4=a("li"),eMe=a("strong"),Qwr=o("mobilebert"),Wwr=o(" \u2014 "),RY=a("a"),Hwr=o("TFMobileBertForMaskedLM"),Uwr=o(" (MobileBERT model)"),Jwr=l(),R4=a("li"),oMe=a("strong"),Ywr=o("mpnet"),Kwr=o(" \u2014 "),PY=a("a"),Zwr=o("TFMPNetForMaskedLM"),eAr=o(" (MPNet model)"),oAr=l(),P4=a("li"),rMe=a("strong"),rAr=o("rembert"),tAr=o(" \u2014 "),BY=a("a"),aAr=o("TFRemBertForMaskedLM"),nAr=o(" (RemBERT model)"),sAr=l(),B4=a("li"),tMe=a("strong"),lAr=o("roberta"),iAr=o(" \u2014 "),NY=a("a"),dAr=o("TFRobertaForMaskedLM"),cAr=o(" (RoBERTa model)"),fAr=l(),N4=a("li"),aMe=a("strong"),mAr=o("roformer"),gAr=o(" \u2014 "),IY=a("a"),hAr=o("TFRoFormerForMaskedLM"),pAr=o(" (RoFormer model)"),_Ar=l(),I4=a("li"),nMe=a("strong"),uAr=o("tapas"),bAr=o(" \u2014 "),qY=a("a"),vAr=o("TFTapasForMaskedLM"),FAr=o(" (TAPAS model)"),TAr=l(),q4=a("li"),sMe=a("strong"),MAr=o("xlm"),EAr=o(" \u2014 "),jY=a("a"),CAr=o("TFXLMWithLMHeadModel"),wAr=o(" (XLM model)"),AAr=l(),j4=a("li"),lMe=a("strong"),LAr=o("xlm-roberta"),yAr=o(" \u2014 "),DY=a("a"),xAr=o("TFXLMRobertaForMaskedLM"),$Ar=o(" (XLM-RoBERTa model)"),kAr=l(),F(D4.$$.fragment),jze=l(),Mc=a("h2"),G4=a("a"),iMe=a("span"),F(Tx.$$.fragment),SAr=l(),dMe=a("span"),RAr=o("TFAutoModelForSeq2SeqLM"),Dze=l(),sr=a("div"),F(Mx.$$.fragment),PAr=l(),Ec=a("p"),BAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GY=a("a"),NAr=o("from_pretrained()"),IAr=o(" class method or the "),OY=a("a"),qAr=o("from_config()"),jAr=o(` class
method.`),DAr=l(),Ex=a("p"),GAr=o("This class cannot be instantiated directly using "),cMe=a("code"),OAr=o("__init__()"),VAr=o(" (throws an error)."),XAr=l(),qt=a("div"),F(Cx.$$.fragment),zAr=l(),fMe=a("p"),QAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WAr=l(),Cc=a("p"),HAr=o(`Note:
Loading a model from its configuration file does `),mMe=a("strong"),UAr=o("not"),JAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),YAr=o("from_pretrained()"),KAr=o(" to load the model weights."),ZAr=l(),F(O4.$$.fragment),eLr=l(),Pr=a("div"),F(wx.$$.fragment),oLr=l(),gMe=a("p"),rLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tLr=l(),mn=a("p"),aLr=o("The model class to instantiate is selected based on the "),hMe=a("code"),nLr=o("model_type"),sLr=o(` property of the config object (either
passed as an argument or loaded from `),pMe=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=a("code"),dLr=o("pretrained_model_name_or_path"),cLr=o(":"),fLr=l(),ye=a("ul"),V4=a("li"),uMe=a("strong"),mLr=o("bart"),gLr=o(" \u2014 "),XY=a("a"),hLr=o("TFBartForConditionalGeneration"),pLr=o(" (BART model)"),_Lr=l(),X4=a("li"),bMe=a("strong"),uLr=o("blenderbot"),bLr=o(" \u2014 "),zY=a("a"),vLr=o("TFBlenderbotForConditionalGeneration"),FLr=o(" (Blenderbot model)"),TLr=l(),z4=a("li"),vMe=a("strong"),MLr=o("blenderbot-small"),ELr=o(" \u2014 "),QY=a("a"),CLr=o("TFBlenderbotSmallForConditionalGeneration"),wLr=o(" (BlenderbotSmall model)"),ALr=l(),Q4=a("li"),FMe=a("strong"),LLr=o("encoder-decoder"),yLr=o(" \u2014 "),WY=a("a"),xLr=o("TFEncoderDecoderModel"),$Lr=o(" (Encoder decoder model)"),kLr=l(),W4=a("li"),TMe=a("strong"),SLr=o("led"),RLr=o(" \u2014 "),HY=a("a"),PLr=o("TFLEDForConditionalGeneration"),BLr=o(" (LED model)"),NLr=l(),H4=a("li"),MMe=a("strong"),ILr=o("marian"),qLr=o(" \u2014 "),UY=a("a"),jLr=o("TFMarianMTModel"),DLr=o(" (Marian model)"),GLr=l(),U4=a("li"),EMe=a("strong"),OLr=o("mbart"),VLr=o(" \u2014 "),JY=a("a"),XLr=o("TFMBartForConditionalGeneration"),zLr=o(" (mBART model)"),QLr=l(),J4=a("li"),CMe=a("strong"),WLr=o("mt5"),HLr=o(" \u2014 "),YY=a("a"),ULr=o("TFMT5ForConditionalGeneration"),JLr=o(" (MT5 model)"),YLr=l(),Y4=a("li"),wMe=a("strong"),KLr=o("pegasus"),ZLr=o(" \u2014 "),KY=a("a"),eyr=o("TFPegasusForConditionalGeneration"),oyr=o(" (Pegasus model)"),ryr=l(),K4=a("li"),AMe=a("strong"),tyr=o("t5"),ayr=o(" \u2014 "),ZY=a("a"),nyr=o("TFT5ForConditionalGeneration"),syr=o(" (T5 model)"),lyr=l(),F(Z4.$$.fragment),Gze=l(),wc=a("h2"),eE=a("a"),LMe=a("span"),F(Ax.$$.fragment),iyr=l(),yMe=a("span"),dyr=o("TFAutoModelForSequenceClassification"),Oze=l(),lr=a("div"),F(Lx.$$.fragment),cyr=l(),Ac=a("p"),fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eK=a("a"),myr=o("from_pretrained()"),gyr=o(" class method or the "),oK=a("a"),hyr=o("from_config()"),pyr=o(` class
method.`),_yr=l(),yx=a("p"),uyr=o("This class cannot be instantiated directly using "),xMe=a("code"),byr=o("__init__()"),vyr=o(" (throws an error)."),Fyr=l(),jt=a("div"),F(xx.$$.fragment),Tyr=l(),$Me=a("p"),Myr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Eyr=l(),Lc=a("p"),Cyr=o(`Note:
Loading a model from its configuration file does `),kMe=a("strong"),wyr=o("not"),Ayr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),Lyr=o("from_pretrained()"),yyr=o(" to load the model weights."),xyr=l(),F(oE.$$.fragment),$yr=l(),Br=a("div"),F($x.$$.fragment),kyr=l(),SMe=a("p"),Syr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ryr=l(),gn=a("p"),Pyr=o("The model class to instantiate is selected based on the "),RMe=a("code"),Byr=o("model_type"),Nyr=o(` property of the config object (either
passed as an argument or loaded from `),PMe=a("code"),Iyr=o("pretrained_model_name_or_path"),qyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=a("code"),jyr=o("pretrained_model_name_or_path"),Dyr=o(":"),Gyr=l(),te=a("ul"),rE=a("li"),NMe=a("strong"),Oyr=o("albert"),Vyr=o(" \u2014 "),tK=a("a"),Xyr=o("TFAlbertForSequenceClassification"),zyr=o(" (ALBERT model)"),Qyr=l(),tE=a("li"),IMe=a("strong"),Wyr=o("bert"),Hyr=o(" \u2014 "),aK=a("a"),Uyr=o("TFBertForSequenceClassification"),Jyr=o(" (BERT model)"),Yyr=l(),aE=a("li"),qMe=a("strong"),Kyr=o("camembert"),Zyr=o(" \u2014 "),nK=a("a"),e9r=o("TFCamembertForSequenceClassification"),o9r=o(" (CamemBERT model)"),r9r=l(),nE=a("li"),jMe=a("strong"),t9r=o("convbert"),a9r=o(" \u2014 "),sK=a("a"),n9r=o("TFConvBertForSequenceClassification"),s9r=o(" (ConvBERT model)"),l9r=l(),sE=a("li"),DMe=a("strong"),i9r=o("ctrl"),d9r=o(" \u2014 "),lK=a("a"),c9r=o("TFCTRLForSequenceClassification"),f9r=o(" (CTRL model)"),m9r=l(),lE=a("li"),GMe=a("strong"),g9r=o("deberta"),h9r=o(" \u2014 "),iK=a("a"),p9r=o("TFDebertaForSequenceClassification"),_9r=o(" (DeBERTa model)"),u9r=l(),iE=a("li"),OMe=a("strong"),b9r=o("deberta-v2"),v9r=o(" \u2014 "),dK=a("a"),F9r=o("TFDebertaV2ForSequenceClassification"),T9r=o(" (DeBERTa-v2 model)"),M9r=l(),dE=a("li"),VMe=a("strong"),E9r=o("distilbert"),C9r=o(" \u2014 "),cK=a("a"),w9r=o("TFDistilBertForSequenceClassification"),A9r=o(" (DistilBERT model)"),L9r=l(),cE=a("li"),XMe=a("strong"),y9r=o("electra"),x9r=o(" \u2014 "),fK=a("a"),$9r=o("TFElectraForSequenceClassification"),k9r=o(" (ELECTRA model)"),S9r=l(),fE=a("li"),zMe=a("strong"),R9r=o("flaubert"),P9r=o(" \u2014 "),mK=a("a"),B9r=o("TFFlaubertForSequenceClassification"),N9r=o(" (FlauBERT model)"),I9r=l(),mE=a("li"),QMe=a("strong"),q9r=o("funnel"),j9r=o(" \u2014 "),gK=a("a"),D9r=o("TFFunnelForSequenceClassification"),G9r=o(" (Funnel Transformer model)"),O9r=l(),gE=a("li"),WMe=a("strong"),V9r=o("gpt2"),X9r=o(" \u2014 "),hK=a("a"),z9r=o("TFGPT2ForSequenceClassification"),Q9r=o(" (OpenAI GPT-2 model)"),W9r=l(),hE=a("li"),HMe=a("strong"),H9r=o("gptj"),U9r=o(" \u2014 "),pK=a("a"),J9r=o("TFGPTJForSequenceClassification"),Y9r=o(" (GPT-J model)"),K9r=l(),pE=a("li"),UMe=a("strong"),Z9r=o("layoutlm"),exr=o(" \u2014 "),_K=a("a"),oxr=o("TFLayoutLMForSequenceClassification"),rxr=o(" (LayoutLM model)"),txr=l(),_E=a("li"),JMe=a("strong"),axr=o("longformer"),nxr=o(" \u2014 "),uK=a("a"),sxr=o("TFLongformerForSequenceClassification"),lxr=o(" (Longformer model)"),ixr=l(),uE=a("li"),YMe=a("strong"),dxr=o("mobilebert"),cxr=o(" \u2014 "),bK=a("a"),fxr=o("TFMobileBertForSequenceClassification"),mxr=o(" (MobileBERT model)"),gxr=l(),bE=a("li"),KMe=a("strong"),hxr=o("mpnet"),pxr=o(" \u2014 "),vK=a("a"),_xr=o("TFMPNetForSequenceClassification"),uxr=o(" (MPNet model)"),bxr=l(),vE=a("li"),ZMe=a("strong"),vxr=o("openai-gpt"),Fxr=o(" \u2014 "),FK=a("a"),Txr=o("TFOpenAIGPTForSequenceClassification"),Mxr=o(" (OpenAI GPT model)"),Exr=l(),FE=a("li"),e4e=a("strong"),Cxr=o("rembert"),wxr=o(" \u2014 "),TK=a("a"),Axr=o("TFRemBertForSequenceClassification"),Lxr=o(" (RemBERT model)"),yxr=l(),TE=a("li"),o4e=a("strong"),xxr=o("roberta"),$xr=o(" \u2014 "),MK=a("a"),kxr=o("TFRobertaForSequenceClassification"),Sxr=o(" (RoBERTa model)"),Rxr=l(),ME=a("li"),r4e=a("strong"),Pxr=o("roformer"),Bxr=o(" \u2014 "),EK=a("a"),Nxr=o("TFRoFormerForSequenceClassification"),Ixr=o(" (RoFormer model)"),qxr=l(),EE=a("li"),t4e=a("strong"),jxr=o("tapas"),Dxr=o(" \u2014 "),CK=a("a"),Gxr=o("TFTapasForSequenceClassification"),Oxr=o(" (TAPAS model)"),Vxr=l(),CE=a("li"),a4e=a("strong"),Xxr=o("transfo-xl"),zxr=o(" \u2014 "),wK=a("a"),Qxr=o("TFTransfoXLForSequenceClassification"),Wxr=o(" (Transformer-XL model)"),Hxr=l(),wE=a("li"),n4e=a("strong"),Uxr=o("xlm"),Jxr=o(" \u2014 "),AK=a("a"),Yxr=o("TFXLMForSequenceClassification"),Kxr=o(" (XLM model)"),Zxr=l(),AE=a("li"),s4e=a("strong"),e$r=o("xlm-roberta"),o$r=o(" \u2014 "),LK=a("a"),r$r=o("TFXLMRobertaForSequenceClassification"),t$r=o(" (XLM-RoBERTa model)"),a$r=l(),LE=a("li"),l4e=a("strong"),n$r=o("xlnet"),s$r=o(" \u2014 "),yK=a("a"),l$r=o("TFXLNetForSequenceClassification"),i$r=o(" (XLNet model)"),d$r=l(),F(yE.$$.fragment),Vze=l(),yc=a("h2"),xE=a("a"),i4e=a("span"),F(kx.$$.fragment),c$r=l(),d4e=a("span"),f$r=o("TFAutoModelForMultipleChoice"),Xze=l(),ir=a("div"),F(Sx.$$.fragment),m$r=l(),xc=a("p"),g$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xK=a("a"),h$r=o("from_pretrained()"),p$r=o(" class method or the "),$K=a("a"),_$r=o("from_config()"),u$r=o(` class
method.`),b$r=l(),Rx=a("p"),v$r=o("This class cannot be instantiated directly using "),c4e=a("code"),F$r=o("__init__()"),T$r=o(" (throws an error)."),M$r=l(),Dt=a("div"),F(Px.$$.fragment),E$r=l(),f4e=a("p"),C$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),w$r=l(),$c=a("p"),A$r=o(`Note:
Loading a model from its configuration file does `),m4e=a("strong"),L$r=o("not"),y$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=a("a"),x$r=o("from_pretrained()"),$$r=o(" to load the model weights."),k$r=l(),F($E.$$.fragment),S$r=l(),Nr=a("div"),F(Bx.$$.fragment),R$r=l(),g4e=a("p"),P$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),B$r=l(),hn=a("p"),N$r=o("The model class to instantiate is selected based on the "),h4e=a("code"),I$r=o("model_type"),q$r=o(` property of the config object (either
passed as an argument or loaded from `),p4e=a("code"),j$r=o("pretrained_model_name_or_path"),D$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=a("code"),G$r=o("pretrained_model_name_or_path"),O$r=o(":"),V$r=l(),ue=a("ul"),kE=a("li"),u4e=a("strong"),X$r=o("albert"),z$r=o(" \u2014 "),SK=a("a"),Q$r=o("TFAlbertForMultipleChoice"),W$r=o(" (ALBERT model)"),H$r=l(),SE=a("li"),b4e=a("strong"),U$r=o("bert"),J$r=o(" \u2014 "),RK=a("a"),Y$r=o("TFBertForMultipleChoice"),K$r=o(" (BERT model)"),Z$r=l(),RE=a("li"),v4e=a("strong"),ekr=o("camembert"),okr=o(" \u2014 "),PK=a("a"),rkr=o("TFCamembertForMultipleChoice"),tkr=o(" (CamemBERT model)"),akr=l(),PE=a("li"),F4e=a("strong"),nkr=o("convbert"),skr=o(" \u2014 "),BK=a("a"),lkr=o("TFConvBertForMultipleChoice"),ikr=o(" (ConvBERT model)"),dkr=l(),BE=a("li"),T4e=a("strong"),ckr=o("distilbert"),fkr=o(" \u2014 "),NK=a("a"),mkr=o("TFDistilBertForMultipleChoice"),gkr=o(" (DistilBERT model)"),hkr=l(),NE=a("li"),M4e=a("strong"),pkr=o("electra"),_kr=o(" \u2014 "),IK=a("a"),ukr=o("TFElectraForMultipleChoice"),bkr=o(" (ELECTRA model)"),vkr=l(),IE=a("li"),E4e=a("strong"),Fkr=o("flaubert"),Tkr=o(" \u2014 "),qK=a("a"),Mkr=o("TFFlaubertForMultipleChoice"),Ekr=o(" (FlauBERT model)"),Ckr=l(),qE=a("li"),C4e=a("strong"),wkr=o("funnel"),Akr=o(" \u2014 "),jK=a("a"),Lkr=o("TFFunnelForMultipleChoice"),ykr=o(" (Funnel Transformer model)"),xkr=l(),jE=a("li"),w4e=a("strong"),$kr=o("longformer"),kkr=o(" \u2014 "),DK=a("a"),Skr=o("TFLongformerForMultipleChoice"),Rkr=o(" (Longformer model)"),Pkr=l(),DE=a("li"),A4e=a("strong"),Bkr=o("mobilebert"),Nkr=o(" \u2014 "),GK=a("a"),Ikr=o("TFMobileBertForMultipleChoice"),qkr=o(" (MobileBERT model)"),jkr=l(),GE=a("li"),L4e=a("strong"),Dkr=o("mpnet"),Gkr=o(" \u2014 "),OK=a("a"),Okr=o("TFMPNetForMultipleChoice"),Vkr=o(" (MPNet model)"),Xkr=l(),OE=a("li"),y4e=a("strong"),zkr=o("rembert"),Qkr=o(" \u2014 "),VK=a("a"),Wkr=o("TFRemBertForMultipleChoice"),Hkr=o(" (RemBERT model)"),Ukr=l(),VE=a("li"),x4e=a("strong"),Jkr=o("roberta"),Ykr=o(" \u2014 "),XK=a("a"),Kkr=o("TFRobertaForMultipleChoice"),Zkr=o(" (RoBERTa model)"),eSr=l(),XE=a("li"),$4e=a("strong"),oSr=o("roformer"),rSr=o(" \u2014 "),zK=a("a"),tSr=o("TFRoFormerForMultipleChoice"),aSr=o(" (RoFormer model)"),nSr=l(),zE=a("li"),k4e=a("strong"),sSr=o("xlm"),lSr=o(" \u2014 "),QK=a("a"),iSr=o("TFXLMForMultipleChoice"),dSr=o(" (XLM model)"),cSr=l(),QE=a("li"),S4e=a("strong"),fSr=o("xlm-roberta"),mSr=o(" \u2014 "),WK=a("a"),gSr=o("TFXLMRobertaForMultipleChoice"),hSr=o(" (XLM-RoBERTa model)"),pSr=l(),WE=a("li"),R4e=a("strong"),_Sr=o("xlnet"),uSr=o(" \u2014 "),HK=a("a"),bSr=o("TFXLNetForMultipleChoice"),vSr=o(" (XLNet model)"),FSr=l(),F(HE.$$.fragment),zze=l(),kc=a("h2"),UE=a("a"),P4e=a("span"),F(Nx.$$.fragment),TSr=l(),B4e=a("span"),MSr=o("TFAutoModelForNextSentencePrediction"),Qze=l(),dr=a("div"),F(Ix.$$.fragment),ESr=l(),Sc=a("p"),CSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UK=a("a"),wSr=o("from_pretrained()"),ASr=o(" class method or the "),JK=a("a"),LSr=o("from_config()"),ySr=o(` class
method.`),xSr=l(),qx=a("p"),$Sr=o("This class cannot be instantiated directly using "),N4e=a("code"),kSr=o("__init__()"),SSr=o(" (throws an error)."),RSr=l(),Gt=a("div"),F(jx.$$.fragment),PSr=l(),I4e=a("p"),BSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),NSr=l(),Rc=a("p"),ISr=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),qSr=o("not"),jSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=a("a"),DSr=o("from_pretrained()"),GSr=o(" to load the model weights."),OSr=l(),F(JE.$$.fragment),VSr=l(),Ir=a("div"),F(Dx.$$.fragment),XSr=l(),j4e=a("p"),zSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),QSr=l(),pn=a("p"),WSr=o("The model class to instantiate is selected based on the "),D4e=a("code"),HSr=o("model_type"),USr=o(` property of the config object (either
passed as an argument or loaded from `),G4e=a("code"),JSr=o("pretrained_model_name_or_path"),YSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=a("code"),KSr=o("pretrained_model_name_or_path"),ZSr=o(":"),eRr=l(),Gx=a("ul"),YE=a("li"),V4e=a("strong"),oRr=o("bert"),rRr=o(" \u2014 "),KK=a("a"),tRr=o("TFBertForNextSentencePrediction"),aRr=o(" (BERT model)"),nRr=l(),KE=a("li"),X4e=a("strong"),sRr=o("mobilebert"),lRr=o(" \u2014 "),ZK=a("a"),iRr=o("TFMobileBertForNextSentencePrediction"),dRr=o(" (MobileBERT model)"),cRr=l(),F(ZE.$$.fragment),Wze=l(),Pc=a("h2"),eC=a("a"),z4e=a("span"),F(Ox.$$.fragment),fRr=l(),Q4e=a("span"),mRr=o("TFAutoModelForTableQuestionAnswering"),Hze=l(),cr=a("div"),F(Vx.$$.fragment),gRr=l(),Bc=a("p"),hRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),eZ=a("a"),pRr=o("from_pretrained()"),_Rr=o(" class method or the "),oZ=a("a"),uRr=o("from_config()"),bRr=o(` class
method.`),vRr=l(),Xx=a("p"),FRr=o("This class cannot be instantiated directly using "),W4e=a("code"),TRr=o("__init__()"),MRr=o(" (throws an error)."),ERr=l(),Ot=a("div"),F(zx.$$.fragment),CRr=l(),H4e=a("p"),wRr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ARr=l(),Nc=a("p"),LRr=o(`Note:
Loading a model from its configuration file does `),U4e=a("strong"),yRr=o("not"),xRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),$Rr=o("from_pretrained()"),kRr=o(" to load the model weights."),SRr=l(),F(oC.$$.fragment),RRr=l(),qr=a("div"),F(Qx.$$.fragment),PRr=l(),J4e=a("p"),BRr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),NRr=l(),_n=a("p"),IRr=o("The model class to instantiate is selected based on the "),Y4e=a("code"),qRr=o("model_type"),jRr=o(` property of the config object (either
passed as an argument or loaded from `),K4e=a("code"),DRr=o("pretrained_model_name_or_path"),GRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=a("code"),ORr=o("pretrained_model_name_or_path"),VRr=o(":"),XRr=l(),eEe=a("ul"),rC=a("li"),oEe=a("strong"),zRr=o("tapas"),QRr=o(" \u2014 "),tZ=a("a"),WRr=o("TFTapasForQuestionAnswering"),HRr=o(" (TAPAS model)"),URr=l(),F(tC.$$.fragment),Uze=l(),Ic=a("h2"),aC=a("a"),rEe=a("span"),F(Wx.$$.fragment),JRr=l(),tEe=a("span"),YRr=o("TFAutoModelForTokenClassification"),Jze=l(),fr=a("div"),F(Hx.$$.fragment),KRr=l(),qc=a("p"),ZRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aZ=a("a"),ePr=o("from_pretrained()"),oPr=o(" class method or the "),nZ=a("a"),rPr=o("from_config()"),tPr=o(` class
method.`),aPr=l(),Ux=a("p"),nPr=o("This class cannot be instantiated directly using "),aEe=a("code"),sPr=o("__init__()"),lPr=o(" (throws an error)."),iPr=l(),Vt=a("div"),F(Jx.$$.fragment),dPr=l(),nEe=a("p"),cPr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fPr=l(),jc=a("p"),mPr=o(`Note:
Loading a model from its configuration file does `),sEe=a("strong"),gPr=o("not"),hPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sZ=a("a"),pPr=o("from_pretrained()"),_Pr=o(" to load the model weights."),uPr=l(),F(nC.$$.fragment),bPr=l(),jr=a("div"),F(Yx.$$.fragment),vPr=l(),lEe=a("p"),FPr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),TPr=l(),un=a("p"),MPr=o("The model class to instantiate is selected based on the "),iEe=a("code"),EPr=o("model_type"),CPr=o(` property of the config object (either
passed as an argument or loaded from `),dEe=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cEe=a("code"),LPr=o("pretrained_model_name_or_path"),yPr=o(":"),xPr=l(),de=a("ul"),sC=a("li"),fEe=a("strong"),$Pr=o("albert"),kPr=o(" \u2014 "),lZ=a("a"),SPr=o("TFAlbertForTokenClassification"),RPr=o(" (ALBERT model)"),PPr=l(),lC=a("li"),mEe=a("strong"),BPr=o("bert"),NPr=o(" \u2014 "),iZ=a("a"),IPr=o("TFBertForTokenClassification"),qPr=o(" (BERT model)"),jPr=l(),iC=a("li"),gEe=a("strong"),DPr=o("camembert"),GPr=o(" \u2014 "),dZ=a("a"),OPr=o("TFCamembertForTokenClassification"),VPr=o(" (CamemBERT model)"),XPr=l(),dC=a("li"),hEe=a("strong"),zPr=o("convbert"),QPr=o(" \u2014 "),cZ=a("a"),WPr=o("TFConvBertForTokenClassification"),HPr=o(" (ConvBERT model)"),UPr=l(),cC=a("li"),pEe=a("strong"),JPr=o("deberta"),YPr=o(" \u2014 "),fZ=a("a"),KPr=o("TFDebertaForTokenClassification"),ZPr=o(" (DeBERTa model)"),eBr=l(),fC=a("li"),_Ee=a("strong"),oBr=o("deberta-v2"),rBr=o(" \u2014 "),mZ=a("a"),tBr=o("TFDebertaV2ForTokenClassification"),aBr=o(" (DeBERTa-v2 model)"),nBr=l(),mC=a("li"),uEe=a("strong"),sBr=o("distilbert"),lBr=o(" \u2014 "),gZ=a("a"),iBr=o("TFDistilBertForTokenClassification"),dBr=o(" (DistilBERT model)"),cBr=l(),gC=a("li"),bEe=a("strong"),fBr=o("electra"),mBr=o(" \u2014 "),hZ=a("a"),gBr=o("TFElectraForTokenClassification"),hBr=o(" (ELECTRA model)"),pBr=l(),hC=a("li"),vEe=a("strong"),_Br=o("flaubert"),uBr=o(" \u2014 "),pZ=a("a"),bBr=o("TFFlaubertForTokenClassification"),vBr=o(" (FlauBERT model)"),FBr=l(),pC=a("li"),FEe=a("strong"),TBr=o("funnel"),MBr=o(" \u2014 "),_Z=a("a"),EBr=o("TFFunnelForTokenClassification"),CBr=o(" (Funnel Transformer model)"),wBr=l(),_C=a("li"),TEe=a("strong"),ABr=o("layoutlm"),LBr=o(" \u2014 "),uZ=a("a"),yBr=o("TFLayoutLMForTokenClassification"),xBr=o(" (LayoutLM model)"),$Br=l(),uC=a("li"),MEe=a("strong"),kBr=o("longformer"),SBr=o(" \u2014 "),bZ=a("a"),RBr=o("TFLongformerForTokenClassification"),PBr=o(" (Longformer model)"),BBr=l(),bC=a("li"),EEe=a("strong"),NBr=o("mobilebert"),IBr=o(" \u2014 "),vZ=a("a"),qBr=o("TFMobileBertForTokenClassification"),jBr=o(" (MobileBERT model)"),DBr=l(),vC=a("li"),CEe=a("strong"),GBr=o("mpnet"),OBr=o(" \u2014 "),FZ=a("a"),VBr=o("TFMPNetForTokenClassification"),XBr=o(" (MPNet model)"),zBr=l(),FC=a("li"),wEe=a("strong"),QBr=o("rembert"),WBr=o(" \u2014 "),TZ=a("a"),HBr=o("TFRemBertForTokenClassification"),UBr=o(" (RemBERT model)"),JBr=l(),TC=a("li"),AEe=a("strong"),YBr=o("roberta"),KBr=o(" \u2014 "),MZ=a("a"),ZBr=o("TFRobertaForTokenClassification"),eNr=o(" (RoBERTa model)"),oNr=l(),MC=a("li"),LEe=a("strong"),rNr=o("roformer"),tNr=o(" \u2014 "),EZ=a("a"),aNr=o("TFRoFormerForTokenClassification"),nNr=o(" (RoFormer model)"),sNr=l(),EC=a("li"),yEe=a("strong"),lNr=o("xlm"),iNr=o(" \u2014 "),CZ=a("a"),dNr=o("TFXLMForTokenClassification"),cNr=o(" (XLM model)"),fNr=l(),CC=a("li"),xEe=a("strong"),mNr=o("xlm-roberta"),gNr=o(" \u2014 "),wZ=a("a"),hNr=o("TFXLMRobertaForTokenClassification"),pNr=o(" (XLM-RoBERTa model)"),_Nr=l(),wC=a("li"),$Ee=a("strong"),uNr=o("xlnet"),bNr=o(" \u2014 "),AZ=a("a"),vNr=o("TFXLNetForTokenClassification"),FNr=o(" (XLNet model)"),TNr=l(),F(AC.$$.fragment),Yze=l(),Dc=a("h2"),LC=a("a"),kEe=a("span"),F(Kx.$$.fragment),MNr=l(),SEe=a("span"),ENr=o("TFAutoModelForQuestionAnswering"),Kze=l(),mr=a("div"),F(Zx.$$.fragment),CNr=l(),Gc=a("p"),wNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LZ=a("a"),ANr=o("from_pretrained()"),LNr=o(" class method or the "),yZ=a("a"),yNr=o("from_config()"),xNr=o(` class
method.`),$Nr=l(),e$=a("p"),kNr=o("This class cannot be instantiated directly using "),REe=a("code"),SNr=o("__init__()"),RNr=o(" (throws an error)."),PNr=l(),Xt=a("div"),F(o$.$$.fragment),BNr=l(),PEe=a("p"),NNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),INr=l(),Oc=a("p"),qNr=o(`Note:
Loading a model from its configuration file does `),BEe=a("strong"),jNr=o("not"),DNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=a("a"),GNr=o("from_pretrained()"),ONr=o(" to load the model weights."),VNr=l(),F(yC.$$.fragment),XNr=l(),Dr=a("div"),F(r$.$$.fragment),zNr=l(),NEe=a("p"),QNr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WNr=l(),bn=a("p"),HNr=o("The model class to instantiate is selected based on the "),IEe=a("code"),UNr=o("model_type"),JNr=o(` property of the config object (either
passed as an argument or loaded from `),qEe=a("code"),YNr=o("pretrained_model_name_or_path"),KNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jEe=a("code"),ZNr=o("pretrained_model_name_or_path"),eIr=o(":"),oIr=l(),ce=a("ul"),xC=a("li"),DEe=a("strong"),rIr=o("albert"),tIr=o(" \u2014 "),$Z=a("a"),aIr=o("TFAlbertForQuestionAnswering"),nIr=o(" (ALBERT model)"),sIr=l(),$C=a("li"),GEe=a("strong"),lIr=o("bert"),iIr=o(" \u2014 "),kZ=a("a"),dIr=o("TFBertForQuestionAnswering"),cIr=o(" (BERT model)"),fIr=l(),kC=a("li"),OEe=a("strong"),mIr=o("camembert"),gIr=o(" \u2014 "),SZ=a("a"),hIr=o("TFCamembertForQuestionAnswering"),pIr=o(" (CamemBERT model)"),_Ir=l(),SC=a("li"),VEe=a("strong"),uIr=o("convbert"),bIr=o(" \u2014 "),RZ=a("a"),vIr=o("TFConvBertForQuestionAnswering"),FIr=o(" (ConvBERT model)"),TIr=l(),RC=a("li"),XEe=a("strong"),MIr=o("deberta"),EIr=o(" \u2014 "),PZ=a("a"),CIr=o("TFDebertaForQuestionAnswering"),wIr=o(" (DeBERTa model)"),AIr=l(),PC=a("li"),zEe=a("strong"),LIr=o("deberta-v2"),yIr=o(" \u2014 "),BZ=a("a"),xIr=o("TFDebertaV2ForQuestionAnswering"),$Ir=o(" (DeBERTa-v2 model)"),kIr=l(),BC=a("li"),QEe=a("strong"),SIr=o("distilbert"),RIr=o(" \u2014 "),NZ=a("a"),PIr=o("TFDistilBertForQuestionAnswering"),BIr=o(" (DistilBERT model)"),NIr=l(),NC=a("li"),WEe=a("strong"),IIr=o("electra"),qIr=o(" \u2014 "),IZ=a("a"),jIr=o("TFElectraForQuestionAnswering"),DIr=o(" (ELECTRA model)"),GIr=l(),IC=a("li"),HEe=a("strong"),OIr=o("flaubert"),VIr=o(" \u2014 "),qZ=a("a"),XIr=o("TFFlaubertForQuestionAnsweringSimple"),zIr=o(" (FlauBERT model)"),QIr=l(),qC=a("li"),UEe=a("strong"),WIr=o("funnel"),HIr=o(" \u2014 "),jZ=a("a"),UIr=o("TFFunnelForQuestionAnswering"),JIr=o(" (Funnel Transformer model)"),YIr=l(),jC=a("li"),JEe=a("strong"),KIr=o("gptj"),ZIr=o(" \u2014 "),DZ=a("a"),eqr=o("TFGPTJForQuestionAnswering"),oqr=o(" (GPT-J model)"),rqr=l(),DC=a("li"),YEe=a("strong"),tqr=o("longformer"),aqr=o(" \u2014 "),GZ=a("a"),nqr=o("TFLongformerForQuestionAnswering"),sqr=o(" (Longformer model)"),lqr=l(),GC=a("li"),KEe=a("strong"),iqr=o("mobilebert"),dqr=o(" \u2014 "),OZ=a("a"),cqr=o("TFMobileBertForQuestionAnswering"),fqr=o(" (MobileBERT model)"),mqr=l(),OC=a("li"),ZEe=a("strong"),gqr=o("mpnet"),hqr=o(" \u2014 "),VZ=a("a"),pqr=o("TFMPNetForQuestionAnswering"),_qr=o(" (MPNet model)"),uqr=l(),VC=a("li"),eCe=a("strong"),bqr=o("rembert"),vqr=o(" \u2014 "),XZ=a("a"),Fqr=o("TFRemBertForQuestionAnswering"),Tqr=o(" (RemBERT model)"),Mqr=l(),XC=a("li"),oCe=a("strong"),Eqr=o("roberta"),Cqr=o(" \u2014 "),zZ=a("a"),wqr=o("TFRobertaForQuestionAnswering"),Aqr=o(" (RoBERTa model)"),Lqr=l(),zC=a("li"),rCe=a("strong"),yqr=o("roformer"),xqr=o(" \u2014 "),QZ=a("a"),$qr=o("TFRoFormerForQuestionAnswering"),kqr=o(" (RoFormer model)"),Sqr=l(),QC=a("li"),tCe=a("strong"),Rqr=o("xlm"),Pqr=o(" \u2014 "),WZ=a("a"),Bqr=o("TFXLMForQuestionAnsweringSimple"),Nqr=o(" (XLM model)"),Iqr=l(),WC=a("li"),aCe=a("strong"),qqr=o("xlm-roberta"),jqr=o(" \u2014 "),HZ=a("a"),Dqr=o("TFXLMRobertaForQuestionAnswering"),Gqr=o(" (XLM-RoBERTa model)"),Oqr=l(),HC=a("li"),nCe=a("strong"),Vqr=o("xlnet"),Xqr=o(" \u2014 "),UZ=a("a"),zqr=o("TFXLNetForQuestionAnsweringSimple"),Qqr=o(" (XLNet model)"),Wqr=l(),F(UC.$$.fragment),Zze=l(),Vc=a("h2"),JC=a("a"),sCe=a("span"),F(t$.$$.fragment),Hqr=l(),lCe=a("span"),Uqr=o("TFAutoModelForVision2Seq"),eQe=l(),gr=a("div"),F(a$.$$.fragment),Jqr=l(),Xc=a("p"),Yqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JZ=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" class method or the "),YZ=a("a"),ejr=o("from_config()"),ojr=o(` class
method.`),rjr=l(),n$=a("p"),tjr=o("This class cannot be instantiated directly using "),iCe=a("code"),ajr=o("__init__()"),njr=o(" (throws an error)."),sjr=l(),zt=a("div"),F(s$.$$.fragment),ljr=l(),dCe=a("p"),ijr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),djr=l(),zc=a("p"),cjr=o(`Note:
Loading a model from its configuration file does `),cCe=a("strong"),fjr=o("not"),mjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=a("a"),gjr=o("from_pretrained()"),hjr=o(" to load the model weights."),pjr=l(),F(YC.$$.fragment),_jr=l(),Gr=a("div"),F(l$.$$.fragment),ujr=l(),fCe=a("p"),bjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vjr=l(),vn=a("p"),Fjr=o("The model class to instantiate is selected based on the "),mCe=a("code"),Tjr=o("model_type"),Mjr=o(` property of the config object (either
passed as an argument or loaded from `),gCe=a("code"),Ejr=o("pretrained_model_name_or_path"),Cjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hCe=a("code"),wjr=o("pretrained_model_name_or_path"),Ajr=o(":"),Ljr=l(),pCe=a("ul"),KC=a("li"),_Ce=a("strong"),yjr=o("vision-encoder-decoder"),xjr=o(" \u2014 "),ZZ=a("a"),$jr=o("TFVisionEncoderDecoderModel"),kjr=o(" (Vision Encoder decoder model)"),Sjr=l(),F(ZC.$$.fragment),oQe=l(),Qc=a("h2"),e5=a("a"),uCe=a("span"),F(i$.$$.fragment),Rjr=l(),bCe=a("span"),Pjr=o("TFAutoModelForSpeechSeq2Seq"),rQe=l(),hr=a("div"),F(d$.$$.fragment),Bjr=l(),Wc=a("p"),Njr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eee=a("a"),Ijr=o("from_pretrained()"),qjr=o(" class method or the "),oee=a("a"),jjr=o("from_config()"),Djr=o(` class
method.`),Gjr=l(),c$=a("p"),Ojr=o("This class cannot be instantiated directly using "),vCe=a("code"),Vjr=o("__init__()"),Xjr=o(" (throws an error)."),zjr=l(),Qt=a("div"),F(f$.$$.fragment),Qjr=l(),FCe=a("p"),Wjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hjr=l(),Hc=a("p"),Ujr=o(`Note:
Loading a model from its configuration file does `),TCe=a("strong"),Jjr=o("not"),Yjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ree=a("a"),Kjr=o("from_pretrained()"),Zjr=o(" to load the model weights."),eDr=l(),F(o5.$$.fragment),oDr=l(),Or=a("div"),F(m$.$$.fragment),rDr=l(),MCe=a("p"),tDr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),aDr=l(),Fn=a("p"),nDr=o("The model class to instantiate is selected based on the "),ECe=a("code"),sDr=o("model_type"),lDr=o(` property of the config object (either
passed as an argument or loaded from `),CCe=a("code"),iDr=o("pretrained_model_name_or_path"),dDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=a("code"),cDr=o("pretrained_model_name_or_path"),fDr=o(":"),mDr=l(),ACe=a("ul"),r5=a("li"),LCe=a("strong"),gDr=o("speech_to_text"),hDr=o(" \u2014 "),tee=a("a"),pDr=o("TFSpeech2TextForConditionalGeneration"),_Dr=o(" (Speech2Text model)"),uDr=l(),F(t5.$$.fragment),tQe=l(),Uc=a("h2"),a5=a("a"),yCe=a("span"),F(g$.$$.fragment),bDr=l(),xCe=a("span"),vDr=o("FlaxAutoModel"),aQe=l(),pr=a("div"),F(h$.$$.fragment),FDr=l(),Jc=a("p"),TDr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aee=a("a"),MDr=o("from_pretrained()"),EDr=o(" class method or the "),nee=a("a"),CDr=o("from_config()"),wDr=o(` class
method.`),ADr=l(),p$=a("p"),LDr=o("This class cannot be instantiated directly using "),$Ce=a("code"),yDr=o("__init__()"),xDr=o(" (throws an error)."),$Dr=l(),Wt=a("div"),F(_$.$$.fragment),kDr=l(),kCe=a("p"),SDr=o("Instantiates one of the base model classes of the library from a configuration."),RDr=l(),Yc=a("p"),PDr=o(`Note:
Loading a model from its configuration file does `),SCe=a("strong"),BDr=o("not"),NDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),see=a("a"),IDr=o("from_pretrained()"),qDr=o(" to load the model weights."),jDr=l(),F(n5.$$.fragment),DDr=l(),Vr=a("div"),F(u$.$$.fragment),GDr=l(),RCe=a("p"),ODr=o("Instantiate one of the base model classes of the library from a pretrained model."),VDr=l(),Tn=a("p"),XDr=o("The model class to instantiate is selected based on the "),PCe=a("code"),zDr=o("model_type"),QDr=o(` property of the config object (either
passed as an argument or loaded from `),BCe=a("code"),WDr=o("pretrained_model_name_or_path"),HDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NCe=a("code"),UDr=o("pretrained_model_name_or_path"),JDr=o(":"),YDr=l(),oe=a("ul"),s5=a("li"),ICe=a("strong"),KDr=o("albert"),ZDr=o(" \u2014 "),lee=a("a"),eGr=o("FlaxAlbertModel"),oGr=o(" (ALBERT model)"),rGr=l(),l5=a("li"),qCe=a("strong"),tGr=o("bart"),aGr=o(" \u2014 "),iee=a("a"),nGr=o("FlaxBartModel"),sGr=o(" (BART model)"),lGr=l(),i5=a("li"),jCe=a("strong"),iGr=o("beit"),dGr=o(" \u2014 "),dee=a("a"),cGr=o("FlaxBeitModel"),fGr=o(" (BEiT model)"),mGr=l(),d5=a("li"),DCe=a("strong"),gGr=o("bert"),hGr=o(" \u2014 "),cee=a("a"),pGr=o("FlaxBertModel"),_Gr=o(" (BERT model)"),uGr=l(),c5=a("li"),GCe=a("strong"),bGr=o("big_bird"),vGr=o(" \u2014 "),fee=a("a"),FGr=o("FlaxBigBirdModel"),TGr=o(" (BigBird model)"),MGr=l(),f5=a("li"),OCe=a("strong"),EGr=o("blenderbot"),CGr=o(" \u2014 "),mee=a("a"),wGr=o("FlaxBlenderbotModel"),AGr=o(" (Blenderbot model)"),LGr=l(),m5=a("li"),VCe=a("strong"),yGr=o("blenderbot-small"),xGr=o(" \u2014 "),gee=a("a"),$Gr=o("FlaxBlenderbotSmallModel"),kGr=o(" (BlenderbotSmall model)"),SGr=l(),g5=a("li"),XCe=a("strong"),RGr=o("clip"),PGr=o(" \u2014 "),hee=a("a"),BGr=o("FlaxCLIPModel"),NGr=o(" (CLIP model)"),IGr=l(),h5=a("li"),zCe=a("strong"),qGr=o("distilbert"),jGr=o(" \u2014 "),pee=a("a"),DGr=o("FlaxDistilBertModel"),GGr=o(" (DistilBERT model)"),OGr=l(),p5=a("li"),QCe=a("strong"),VGr=o("electra"),XGr=o(" \u2014 "),_ee=a("a"),zGr=o("FlaxElectraModel"),QGr=o(" (ELECTRA model)"),WGr=l(),_5=a("li"),WCe=a("strong"),HGr=o("gpt2"),UGr=o(" \u2014 "),uee=a("a"),JGr=o("FlaxGPT2Model"),YGr=o(" (OpenAI GPT-2 model)"),KGr=l(),u5=a("li"),HCe=a("strong"),ZGr=o("gpt_neo"),eOr=o(" \u2014 "),bee=a("a"),oOr=o("FlaxGPTNeoModel"),rOr=o(" (GPT Neo model)"),tOr=l(),b5=a("li"),UCe=a("strong"),aOr=o("gptj"),nOr=o(" \u2014 "),vee=a("a"),sOr=o("FlaxGPTJModel"),lOr=o(" (GPT-J model)"),iOr=l(),v5=a("li"),JCe=a("strong"),dOr=o("longt5"),cOr=o(" \u2014 "),Fee=a("a"),fOr=o("FlaxLongT5Model"),mOr=o(" (LongT5 model)"),gOr=l(),F5=a("li"),YCe=a("strong"),hOr=o("marian"),pOr=o(" \u2014 "),Tee=a("a"),_Or=o("FlaxMarianModel"),uOr=o(" (Marian model)"),bOr=l(),T5=a("li"),KCe=a("strong"),vOr=o("mbart"),FOr=o(" \u2014 "),Mee=a("a"),TOr=o("FlaxMBartModel"),MOr=o(" (mBART model)"),EOr=l(),M5=a("li"),ZCe=a("strong"),COr=o("mt5"),wOr=o(" \u2014 "),Eee=a("a"),AOr=o("FlaxMT5Model"),LOr=o(" (MT5 model)"),yOr=l(),E5=a("li"),e5e=a("strong"),xOr=o("opt"),$Or=o(" \u2014 "),Cee=a("a"),kOr=o("FlaxOPTModel"),SOr=o(" (OPT model)"),ROr=l(),C5=a("li"),o5e=a("strong"),POr=o("pegasus"),BOr=o(" \u2014 "),wee=a("a"),NOr=o("FlaxPegasusModel"),IOr=o(" (Pegasus model)"),qOr=l(),w5=a("li"),r5e=a("strong"),jOr=o("roberta"),DOr=o(" \u2014 "),Aee=a("a"),GOr=o("FlaxRobertaModel"),OOr=o(" (RoBERTa model)"),VOr=l(),A5=a("li"),t5e=a("strong"),XOr=o("roformer"),zOr=o(" \u2014 "),Lee=a("a"),QOr=o("FlaxRoFormerModel"),WOr=o(" (RoFormer model)"),HOr=l(),L5=a("li"),a5e=a("strong"),UOr=o("t5"),JOr=o(" \u2014 "),yee=a("a"),YOr=o("FlaxT5Model"),KOr=o(" (T5 model)"),ZOr=l(),y5=a("li"),n5e=a("strong"),eVr=o("vision-text-dual-encoder"),oVr=o(" \u2014 "),xee=a("a"),rVr=o("FlaxVisionTextDualEncoderModel"),tVr=o(" (VisionTextDualEncoder model)"),aVr=l(),x5=a("li"),s5e=a("strong"),nVr=o("vit"),sVr=o(" \u2014 "),$ee=a("a"),lVr=o("FlaxViTModel"),iVr=o(" (ViT model)"),dVr=l(),$5=a("li"),l5e=a("strong"),cVr=o("wav2vec2"),fVr=o(" \u2014 "),kee=a("a"),mVr=o("FlaxWav2Vec2Model"),gVr=o(" (Wav2Vec2 model)"),hVr=l(),k5=a("li"),i5e=a("strong"),pVr=o("xglm"),_Vr=o(" \u2014 "),See=a("a"),uVr=o("FlaxXGLMModel"),bVr=o(" (XGLM model)"),vVr=l(),S5=a("li"),d5e=a("strong"),FVr=o("xlm-roberta"),TVr=o(" \u2014 "),Ree=a("a"),MVr=o("FlaxXLMRobertaModel"),EVr=o(" (XLM-RoBERTa model)"),CVr=l(),F(R5.$$.fragment),nQe=l(),Kc=a("h2"),P5=a("a"),c5e=a("span"),F(b$.$$.fragment),wVr=l(),f5e=a("span"),AVr=o("FlaxAutoModelForCausalLM"),sQe=l(),_r=a("div"),F(v$.$$.fragment),LVr=l(),Zc=a("p"),yVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pee=a("a"),xVr=o("from_pretrained()"),$Vr=o(" class method or the "),Bee=a("a"),kVr=o("from_config()"),SVr=o(` class
method.`),RVr=l(),F$=a("p"),PVr=o("This class cannot be instantiated directly using "),m5e=a("code"),BVr=o("__init__()"),NVr=o(" (throws an error)."),IVr=l(),Ht=a("div"),F(T$.$$.fragment),qVr=l(),g5e=a("p"),jVr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),DVr=l(),ef=a("p"),GVr=o(`Note:
Loading a model from its configuration file does `),h5e=a("strong"),OVr=o("not"),VVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nee=a("a"),XVr=o("from_pretrained()"),zVr=o(" to load the model weights."),QVr=l(),F(B5.$$.fragment),WVr=l(),Xr=a("div"),F(M$.$$.fragment),HVr=l(),p5e=a("p"),UVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),JVr=l(),Mn=a("p"),YVr=o("The model class to instantiate is selected based on the "),_5e=a("code"),KVr=o("model_type"),ZVr=o(` property of the config object (either
passed as an argument or loaded from `),u5e=a("code"),eXr=o("pretrained_model_name_or_path"),oXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=a("code"),rXr=o("pretrained_model_name_or_path"),tXr=o(":"),aXr=l(),xe=a("ul"),N5=a("li"),v5e=a("strong"),nXr=o("bart"),sXr=o(" \u2014 "),Iee=a("a"),lXr=o("FlaxBartForCausalLM"),iXr=o(" (BART model)"),dXr=l(),I5=a("li"),F5e=a("strong"),cXr=o("bert"),fXr=o(" \u2014 "),qee=a("a"),mXr=o("FlaxBertForCausalLM"),gXr=o(" (BERT model)"),hXr=l(),q5=a("li"),T5e=a("strong"),pXr=o("big_bird"),_Xr=o(" \u2014 "),jee=a("a"),uXr=o("FlaxBigBirdForCausalLM"),bXr=o(" (BigBird model)"),vXr=l(),j5=a("li"),M5e=a("strong"),FXr=o("electra"),TXr=o(" \u2014 "),Dee=a("a"),MXr=o("FlaxElectraForCausalLM"),EXr=o(" (ELECTRA model)"),CXr=l(),D5=a("li"),E5e=a("strong"),wXr=o("gpt2"),AXr=o(" \u2014 "),Gee=a("a"),LXr=o("FlaxGPT2LMHeadModel"),yXr=o(" (OpenAI GPT-2 model)"),xXr=l(),G5=a("li"),C5e=a("strong"),$Xr=o("gpt_neo"),kXr=o(" \u2014 "),Oee=a("a"),SXr=o("FlaxGPTNeoForCausalLM"),RXr=o(" (GPT Neo model)"),PXr=l(),O5=a("li"),w5e=a("strong"),BXr=o("gptj"),NXr=o(" \u2014 "),Vee=a("a"),IXr=o("FlaxGPTJForCausalLM"),qXr=o(" (GPT-J model)"),jXr=l(),V5=a("li"),A5e=a("strong"),DXr=o("opt"),GXr=o(" \u2014 "),Xee=a("a"),OXr=o("FlaxOPTForCausalLM"),VXr=o(" (OPT model)"),XXr=l(),X5=a("li"),L5e=a("strong"),zXr=o("roberta"),QXr=o(" \u2014 "),zee=a("a"),WXr=o("FlaxRobertaForCausalLM"),HXr=o(" (RoBERTa model)"),UXr=l(),z5=a("li"),y5e=a("strong"),JXr=o("xglm"),YXr=o(" \u2014 "),Qee=a("a"),KXr=o("FlaxXGLMForCausalLM"),ZXr=o(" (XGLM model)"),ezr=l(),F(Q5.$$.fragment),lQe=l(),of=a("h2"),W5=a("a"),x5e=a("span"),F(E$.$$.fragment),ozr=l(),$5e=a("span"),rzr=o("FlaxAutoModelForPreTraining"),iQe=l(),ur=a("div"),F(C$.$$.fragment),tzr=l(),rf=a("p"),azr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wee=a("a"),nzr=o("from_pretrained()"),szr=o(" class method or the "),Hee=a("a"),lzr=o("from_config()"),izr=o(` class
method.`),dzr=l(),w$=a("p"),czr=o("This class cannot be instantiated directly using "),k5e=a("code"),fzr=o("__init__()"),mzr=o(" (throws an error)."),gzr=l(),Ut=a("div"),F(A$.$$.fragment),hzr=l(),S5e=a("p"),pzr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_zr=l(),tf=a("p"),uzr=o(`Note:
Loading a model from its configuration file does `),R5e=a("strong"),bzr=o("not"),vzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=a("a"),Fzr=o("from_pretrained()"),Tzr=o(" to load the model weights."),Mzr=l(),F(H5.$$.fragment),Ezr=l(),zr=a("div"),F(L$.$$.fragment),Czr=l(),P5e=a("p"),wzr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Azr=l(),En=a("p"),Lzr=o("The model class to instantiate is selected based on the "),B5e=a("code"),yzr=o("model_type"),xzr=o(` property of the config object (either
passed as an argument or loaded from `),N5e=a("code"),$zr=o("pretrained_model_name_or_path"),kzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=a("code"),Szr=o("pretrained_model_name_or_path"),Rzr=o(":"),Pzr=l(),Ee=a("ul"),U5=a("li"),q5e=a("strong"),Bzr=o("albert"),Nzr=o(" \u2014 "),Jee=a("a"),Izr=o("FlaxAlbertForPreTraining"),qzr=o(" (ALBERT model)"),jzr=l(),J5=a("li"),j5e=a("strong"),Dzr=o("bart"),Gzr=o(" \u2014 "),Yee=a("a"),Ozr=o("FlaxBartForConditionalGeneration"),Vzr=o(" (BART model)"),Xzr=l(),Y5=a("li"),D5e=a("strong"),zzr=o("bert"),Qzr=o(" \u2014 "),Kee=a("a"),Wzr=o("FlaxBertForPreTraining"),Hzr=o(" (BERT model)"),Uzr=l(),K5=a("li"),G5e=a("strong"),Jzr=o("big_bird"),Yzr=o(" \u2014 "),Zee=a("a"),Kzr=o("FlaxBigBirdForPreTraining"),Zzr=o(" (BigBird model)"),eQr=l(),Z5=a("li"),O5e=a("strong"),oQr=o("electra"),rQr=o(" \u2014 "),eoe=a("a"),tQr=o("FlaxElectraForPreTraining"),aQr=o(" (ELECTRA model)"),nQr=l(),e3=a("li"),V5e=a("strong"),sQr=o("longt5"),lQr=o(" \u2014 "),ooe=a("a"),iQr=o("FlaxLongT5ForConditionalGeneration"),dQr=o(" (LongT5 model)"),cQr=l(),o3=a("li"),X5e=a("strong"),fQr=o("mbart"),mQr=o(" \u2014 "),roe=a("a"),gQr=o("FlaxMBartForConditionalGeneration"),hQr=o(" (mBART model)"),pQr=l(),r3=a("li"),z5e=a("strong"),_Qr=o("mt5"),uQr=o(" \u2014 "),toe=a("a"),bQr=o("FlaxMT5ForConditionalGeneration"),vQr=o(" (MT5 model)"),FQr=l(),t3=a("li"),Q5e=a("strong"),TQr=o("roberta"),MQr=o(" \u2014 "),aoe=a("a"),EQr=o("FlaxRobertaForMaskedLM"),CQr=o(" (RoBERTa model)"),wQr=l(),a3=a("li"),W5e=a("strong"),AQr=o("roformer"),LQr=o(" \u2014 "),noe=a("a"),yQr=o("FlaxRoFormerForMaskedLM"),xQr=o(" (RoFormer model)"),$Qr=l(),n3=a("li"),H5e=a("strong"),kQr=o("t5"),SQr=o(" \u2014 "),soe=a("a"),RQr=o("FlaxT5ForConditionalGeneration"),PQr=o(" (T5 model)"),BQr=l(),s3=a("li"),U5e=a("strong"),NQr=o("wav2vec2"),IQr=o(" \u2014 "),loe=a("a"),qQr=o("FlaxWav2Vec2ForPreTraining"),jQr=o(" (Wav2Vec2 model)"),DQr=l(),l3=a("li"),J5e=a("strong"),GQr=o("xlm-roberta"),OQr=o(" \u2014 "),ioe=a("a"),VQr=o("FlaxXLMRobertaForMaskedLM"),XQr=o(" (XLM-RoBERTa model)"),zQr=l(),F(i3.$$.fragment),dQe=l(),af=a("h2"),d3=a("a"),Y5e=a("span"),F(y$.$$.fragment),QQr=l(),K5e=a("span"),WQr=o("FlaxAutoModelForMaskedLM"),cQe=l(),br=a("div"),F(x$.$$.fragment),HQr=l(),nf=a("p"),UQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),doe=a("a"),JQr=o("from_pretrained()"),YQr=o(" class method or the "),coe=a("a"),KQr=o("from_config()"),ZQr=o(` class
method.`),eWr=l(),$$=a("p"),oWr=o("This class cannot be instantiated directly using "),Z5e=a("code"),rWr=o("__init__()"),tWr=o(" (throws an error)."),aWr=l(),Jt=a("div"),F(k$.$$.fragment),nWr=l(),e3e=a("p"),sWr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lWr=l(),sf=a("p"),iWr=o(`Note:
Loading a model from its configuration file does `),o3e=a("strong"),dWr=o("not"),cWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),foe=a("a"),fWr=o("from_pretrained()"),mWr=o(" to load the model weights."),gWr=l(),F(c3.$$.fragment),hWr=l(),Qr=a("div"),F(S$.$$.fragment),pWr=l(),r3e=a("p"),_Wr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uWr=l(),Cn=a("p"),bWr=o("The model class to instantiate is selected based on the "),t3e=a("code"),vWr=o("model_type"),FWr=o(` property of the config object (either
passed as an argument or loaded from `),a3e=a("code"),TWr=o("pretrained_model_name_or_path"),MWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=a("code"),EWr=o("pretrained_model_name_or_path"),CWr=o(":"),wWr=l(),$e=a("ul"),f3=a("li"),s3e=a("strong"),AWr=o("albert"),LWr=o(" \u2014 "),moe=a("a"),yWr=o("FlaxAlbertForMaskedLM"),xWr=o(" (ALBERT model)"),$Wr=l(),m3=a("li"),l3e=a("strong"),kWr=o("bart"),SWr=o(" \u2014 "),goe=a("a"),RWr=o("FlaxBartForConditionalGeneration"),PWr=o(" (BART model)"),BWr=l(),g3=a("li"),i3e=a("strong"),NWr=o("bert"),IWr=o(" \u2014 "),hoe=a("a"),qWr=o("FlaxBertForMaskedLM"),jWr=o(" (BERT model)"),DWr=l(),h3=a("li"),d3e=a("strong"),GWr=o("big_bird"),OWr=o(" \u2014 "),poe=a("a"),VWr=o("FlaxBigBirdForMaskedLM"),XWr=o(" (BigBird model)"),zWr=l(),p3=a("li"),c3e=a("strong"),QWr=o("distilbert"),WWr=o(" \u2014 "),_oe=a("a"),HWr=o("FlaxDistilBertForMaskedLM"),UWr=o(" (DistilBERT model)"),JWr=l(),_3=a("li"),f3e=a("strong"),YWr=o("electra"),KWr=o(" \u2014 "),uoe=a("a"),ZWr=o("FlaxElectraForMaskedLM"),eHr=o(" (ELECTRA model)"),oHr=l(),u3=a("li"),m3e=a("strong"),rHr=o("mbart"),tHr=o(" \u2014 "),boe=a("a"),aHr=o("FlaxMBartForConditionalGeneration"),nHr=o(" (mBART model)"),sHr=l(),b3=a("li"),g3e=a("strong"),lHr=o("roberta"),iHr=o(" \u2014 "),voe=a("a"),dHr=o("FlaxRobertaForMaskedLM"),cHr=o(" (RoBERTa model)"),fHr=l(),v3=a("li"),h3e=a("strong"),mHr=o("roformer"),gHr=o(" \u2014 "),Foe=a("a"),hHr=o("FlaxRoFormerForMaskedLM"),pHr=o(" (RoFormer model)"),_Hr=l(),F3=a("li"),p3e=a("strong"),uHr=o("xlm-roberta"),bHr=o(" \u2014 "),Toe=a("a"),vHr=o("FlaxXLMRobertaForMaskedLM"),FHr=o(" (XLM-RoBERTa model)"),THr=l(),F(T3.$$.fragment),fQe=l(),lf=a("h2"),M3=a("a"),_3e=a("span"),F(R$.$$.fragment),MHr=l(),u3e=a("span"),EHr=o("FlaxAutoModelForSeq2SeqLM"),mQe=l(),vr=a("div"),F(P$.$$.fragment),CHr=l(),df=a("p"),wHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Moe=a("a"),AHr=o("from_pretrained()"),LHr=o(" class method or the "),Eoe=a("a"),yHr=o("from_config()"),xHr=o(` class
method.`),$Hr=l(),B$=a("p"),kHr=o("This class cannot be instantiated directly using "),b3e=a("code"),SHr=o("__init__()"),RHr=o(" (throws an error)."),PHr=l(),Yt=a("div"),F(N$.$$.fragment),BHr=l(),v3e=a("p"),NHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),IHr=l(),cf=a("p"),qHr=o(`Note:
Loading a model from its configuration file does `),F3e=a("strong"),jHr=o("not"),DHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=a("a"),GHr=o("from_pretrained()"),OHr=o(" to load the model weights."),VHr=l(),F(E3.$$.fragment),XHr=l(),Wr=a("div"),F(I$.$$.fragment),zHr=l(),T3e=a("p"),QHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),WHr=l(),wn=a("p"),HHr=o("The model class to instantiate is selected based on the "),M3e=a("code"),UHr=o("model_type"),JHr=o(` property of the config object (either
passed as an argument or loaded from `),E3e=a("code"),YHr=o("pretrained_model_name_or_path"),KHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=a("code"),ZHr=o("pretrained_model_name_or_path"),eUr=o(":"),oUr=l(),ke=a("ul"),C3=a("li"),w3e=a("strong"),rUr=o("bart"),tUr=o(" \u2014 "),woe=a("a"),aUr=o("FlaxBartForConditionalGeneration"),nUr=o(" (BART model)"),sUr=l(),w3=a("li"),A3e=a("strong"),lUr=o("blenderbot"),iUr=o(" \u2014 "),Aoe=a("a"),dUr=o("FlaxBlenderbotForConditionalGeneration"),cUr=o(" (Blenderbot model)"),fUr=l(),A3=a("li"),L3e=a("strong"),mUr=o("blenderbot-small"),gUr=o(" \u2014 "),Loe=a("a"),hUr=o("FlaxBlenderbotSmallForConditionalGeneration"),pUr=o(" (BlenderbotSmall model)"),_Ur=l(),L3=a("li"),y3e=a("strong"),uUr=o("encoder-decoder"),bUr=o(" \u2014 "),yoe=a("a"),vUr=o("FlaxEncoderDecoderModel"),FUr=o(" (Encoder decoder model)"),TUr=l(),y3=a("li"),x3e=a("strong"),MUr=o("longt5"),EUr=o(" \u2014 "),xoe=a("a"),CUr=o("FlaxLongT5ForConditionalGeneration"),wUr=o(" (LongT5 model)"),AUr=l(),x3=a("li"),$3e=a("strong"),LUr=o("marian"),yUr=o(" \u2014 "),$oe=a("a"),xUr=o("FlaxMarianMTModel"),$Ur=o(" (Marian model)"),kUr=l(),$3=a("li"),k3e=a("strong"),SUr=o("mbart"),RUr=o(" \u2014 "),koe=a("a"),PUr=o("FlaxMBartForConditionalGeneration"),BUr=o(" (mBART model)"),NUr=l(),k3=a("li"),S3e=a("strong"),IUr=o("mt5"),qUr=o(" \u2014 "),Soe=a("a"),jUr=o("FlaxMT5ForConditionalGeneration"),DUr=o(" (MT5 model)"),GUr=l(),S3=a("li"),R3e=a("strong"),OUr=o("pegasus"),VUr=o(" \u2014 "),Roe=a("a"),XUr=o("FlaxPegasusForConditionalGeneration"),zUr=o(" (Pegasus model)"),QUr=l(),R3=a("li"),P3e=a("strong"),WUr=o("t5"),HUr=o(" \u2014 "),Poe=a("a"),UUr=o("FlaxT5ForConditionalGeneration"),JUr=o(" (T5 model)"),YUr=l(),F(P3.$$.fragment),gQe=l(),ff=a("h2"),B3=a("a"),B3e=a("span"),F(q$.$$.fragment),KUr=l(),N3e=a("span"),ZUr=o("FlaxAutoModelForSequenceClassification"),hQe=l(),Fr=a("div"),F(j$.$$.fragment),eJr=l(),mf=a("p"),oJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Boe=a("a"),rJr=o("from_pretrained()"),tJr=o(" class method or the "),Noe=a("a"),aJr=o("from_config()"),nJr=o(` class
method.`),sJr=l(),D$=a("p"),lJr=o("This class cannot be instantiated directly using "),I3e=a("code"),iJr=o("__init__()"),dJr=o(" (throws an error)."),cJr=l(),Kt=a("div"),F(G$.$$.fragment),fJr=l(),q3e=a("p"),mJr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gJr=l(),gf=a("p"),hJr=o(`Note:
Loading a model from its configuration file does `),j3e=a("strong"),pJr=o("not"),_Jr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ioe=a("a"),uJr=o("from_pretrained()"),bJr=o(" to load the model weights."),vJr=l(),F(N3.$$.fragment),FJr=l(),Hr=a("div"),F(O$.$$.fragment),TJr=l(),D3e=a("p"),MJr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),EJr=l(),An=a("p"),CJr=o("The model class to instantiate is selected based on the "),G3e=a("code"),wJr=o("model_type"),AJr=o(` property of the config object (either
passed as an argument or loaded from `),O3e=a("code"),LJr=o("pretrained_model_name_or_path"),yJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V3e=a("code"),xJr=o("pretrained_model_name_or_path"),$Jr=o(":"),kJr=l(),Se=a("ul"),I3=a("li"),X3e=a("strong"),SJr=o("albert"),RJr=o(" \u2014 "),qoe=a("a"),PJr=o("FlaxAlbertForSequenceClassification"),BJr=o(" (ALBERT model)"),NJr=l(),q3=a("li"),z3e=a("strong"),IJr=o("bart"),qJr=o(" \u2014 "),joe=a("a"),jJr=o("FlaxBartForSequenceClassification"),DJr=o(" (BART model)"),GJr=l(),j3=a("li"),Q3e=a("strong"),OJr=o("bert"),VJr=o(" \u2014 "),Doe=a("a"),XJr=o("FlaxBertForSequenceClassification"),zJr=o(" (BERT model)"),QJr=l(),D3=a("li"),W3e=a("strong"),WJr=o("big_bird"),HJr=o(" \u2014 "),Goe=a("a"),UJr=o("FlaxBigBirdForSequenceClassification"),JJr=o(" (BigBird model)"),YJr=l(),G3=a("li"),H3e=a("strong"),KJr=o("distilbert"),ZJr=o(" \u2014 "),Ooe=a("a"),eYr=o("FlaxDistilBertForSequenceClassification"),oYr=o(" (DistilBERT model)"),rYr=l(),O3=a("li"),U3e=a("strong"),tYr=o("electra"),aYr=o(" \u2014 "),Voe=a("a"),nYr=o("FlaxElectraForSequenceClassification"),sYr=o(" (ELECTRA model)"),lYr=l(),V3=a("li"),J3e=a("strong"),iYr=o("mbart"),dYr=o(" \u2014 "),Xoe=a("a"),cYr=o("FlaxMBartForSequenceClassification"),fYr=o(" (mBART model)"),mYr=l(),X3=a("li"),Y3e=a("strong"),gYr=o("roberta"),hYr=o(" \u2014 "),zoe=a("a"),pYr=o("FlaxRobertaForSequenceClassification"),_Yr=o(" (RoBERTa model)"),uYr=l(),z3=a("li"),K3e=a("strong"),bYr=o("roformer"),vYr=o(" \u2014 "),Qoe=a("a"),FYr=o("FlaxRoFormerForSequenceClassification"),TYr=o(" (RoFormer model)"),MYr=l(),Q3=a("li"),Z3e=a("strong"),EYr=o("xlm-roberta"),CYr=o(" \u2014 "),Woe=a("a"),wYr=o("FlaxXLMRobertaForSequenceClassification"),AYr=o(" (XLM-RoBERTa model)"),LYr=l(),F(W3.$$.fragment),pQe=l(),hf=a("h2"),H3=a("a"),e0e=a("span"),F(V$.$$.fragment),yYr=l(),o0e=a("span"),xYr=o("FlaxAutoModelForQuestionAnswering"),_Qe=l(),Tr=a("div"),F(X$.$$.fragment),$Yr=l(),pf=a("p"),kYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hoe=a("a"),SYr=o("from_pretrained()"),RYr=o(" class method or the "),Uoe=a("a"),PYr=o("from_config()"),BYr=o(` class
method.`),NYr=l(),z$=a("p"),IYr=o("This class cannot be instantiated directly using "),r0e=a("code"),qYr=o("__init__()"),jYr=o(" (throws an error)."),DYr=l(),Zt=a("div"),F(Q$.$$.fragment),GYr=l(),t0e=a("p"),OYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VYr=l(),_f=a("p"),XYr=o(`Note:
Loading a model from its configuration file does `),a0e=a("strong"),zYr=o("not"),QYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Joe=a("a"),WYr=o("from_pretrained()"),HYr=o(" to load the model weights."),UYr=l(),F(U3.$$.fragment),JYr=l(),Ur=a("div"),F(W$.$$.fragment),YYr=l(),n0e=a("p"),KYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZYr=l(),Ln=a("p"),eKr=o("The model class to instantiate is selected based on the "),s0e=a("code"),oKr=o("model_type"),rKr=o(` property of the config object (either
passed as an argument or loaded from `),l0e=a("code"),tKr=o("pretrained_model_name_or_path"),aKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=a("code"),nKr=o("pretrained_model_name_or_path"),sKr=o(":"),lKr=l(),Re=a("ul"),J3=a("li"),d0e=a("strong"),iKr=o("albert"),dKr=o(" \u2014 "),Yoe=a("a"),cKr=o("FlaxAlbertForQuestionAnswering"),fKr=o(" (ALBERT model)"),mKr=l(),Y3=a("li"),c0e=a("strong"),gKr=o("bart"),hKr=o(" \u2014 "),Koe=a("a"),pKr=o("FlaxBartForQuestionAnswering"),_Kr=o(" (BART model)"),uKr=l(),K3=a("li"),f0e=a("strong"),bKr=o("bert"),vKr=o(" \u2014 "),Zoe=a("a"),FKr=o("FlaxBertForQuestionAnswering"),TKr=o(" (BERT model)"),MKr=l(),Z3=a("li"),m0e=a("strong"),EKr=o("big_bird"),CKr=o(" \u2014 "),ere=a("a"),wKr=o("FlaxBigBirdForQuestionAnswering"),AKr=o(" (BigBird model)"),LKr=l(),e0=a("li"),g0e=a("strong"),yKr=o("distilbert"),xKr=o(" \u2014 "),ore=a("a"),$Kr=o("FlaxDistilBertForQuestionAnswering"),kKr=o(" (DistilBERT model)"),SKr=l(),o0=a("li"),h0e=a("strong"),RKr=o("electra"),PKr=o(" \u2014 "),rre=a("a"),BKr=o("FlaxElectraForQuestionAnswering"),NKr=o(" (ELECTRA model)"),IKr=l(),r0=a("li"),p0e=a("strong"),qKr=o("mbart"),jKr=o(" \u2014 "),tre=a("a"),DKr=o("FlaxMBartForQuestionAnswering"),GKr=o(" (mBART model)"),OKr=l(),t0=a("li"),_0e=a("strong"),VKr=o("roberta"),XKr=o(" \u2014 "),are=a("a"),zKr=o("FlaxRobertaForQuestionAnswering"),QKr=o(" (RoBERTa model)"),WKr=l(),a0=a("li"),u0e=a("strong"),HKr=o("roformer"),UKr=o(" \u2014 "),nre=a("a"),JKr=o("FlaxRoFormerForQuestionAnswering"),YKr=o(" (RoFormer model)"),KKr=l(),n0=a("li"),b0e=a("strong"),ZKr=o("xlm-roberta"),eZr=o(" \u2014 "),sre=a("a"),oZr=o("FlaxXLMRobertaForQuestionAnswering"),rZr=o(" (XLM-RoBERTa model)"),tZr=l(),F(s0.$$.fragment),uQe=l(),uf=a("h2"),l0=a("a"),v0e=a("span"),F(H$.$$.fragment),aZr=l(),F0e=a("span"),nZr=o("FlaxAutoModelForTokenClassification"),bQe=l(),Mr=a("div"),F(U$.$$.fragment),sZr=l(),bf=a("p"),lZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lre=a("a"),iZr=o("from_pretrained()"),dZr=o(" class method or the "),ire=a("a"),cZr=o("from_config()"),fZr=o(` class
method.`),mZr=l(),J$=a("p"),gZr=o("This class cannot be instantiated directly using "),T0e=a("code"),hZr=o("__init__()"),pZr=o(" (throws an error)."),_Zr=l(),ea=a("div"),F(Y$.$$.fragment),uZr=l(),M0e=a("p"),bZr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vZr=l(),vf=a("p"),FZr=o(`Note:
Loading a model from its configuration file does `),E0e=a("strong"),TZr=o("not"),MZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=a("a"),EZr=o("from_pretrained()"),CZr=o(" to load the model weights."),wZr=l(),F(i0.$$.fragment),AZr=l(),Jr=a("div"),F(K$.$$.fragment),LZr=l(),C0e=a("p"),yZr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xZr=l(),yn=a("p"),$Zr=o("The model class to instantiate is selected based on the "),w0e=a("code"),kZr=o("model_type"),SZr=o(` property of the config object (either
passed as an argument or loaded from `),A0e=a("code"),RZr=o("pretrained_model_name_or_path"),PZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=a("code"),BZr=o("pretrained_model_name_or_path"),NZr=o(":"),IZr=l(),Ve=a("ul"),d0=a("li"),y0e=a("strong"),qZr=o("albert"),jZr=o(" \u2014 "),cre=a("a"),DZr=o("FlaxAlbertForTokenClassification"),GZr=o(" (ALBERT model)"),OZr=l(),c0=a("li"),x0e=a("strong"),VZr=o("bert"),XZr=o(" \u2014 "),fre=a("a"),zZr=o("FlaxBertForTokenClassification"),QZr=o(" (BERT model)"),WZr=l(),f0=a("li"),$0e=a("strong"),HZr=o("big_bird"),UZr=o(" \u2014 "),mre=a("a"),JZr=o("FlaxBigBirdForTokenClassification"),YZr=o(" (BigBird model)"),KZr=l(),m0=a("li"),k0e=a("strong"),ZZr=o("distilbert"),eet=o(" \u2014 "),gre=a("a"),oet=o("FlaxDistilBertForTokenClassification"),ret=o(" (DistilBERT model)"),tet=l(),g0=a("li"),S0e=a("strong"),aet=o("electra"),net=o(" \u2014 "),hre=a("a"),set=o("FlaxElectraForTokenClassification"),iet=o(" (ELECTRA model)"),det=l(),h0=a("li"),R0e=a("strong"),cet=o("roberta"),fet=o(" \u2014 "),pre=a("a"),met=o("FlaxRobertaForTokenClassification"),get=o(" (RoBERTa model)"),het=l(),p0=a("li"),P0e=a("strong"),pet=o("roformer"),_et=o(" \u2014 "),_re=a("a"),uet=o("FlaxRoFormerForTokenClassification"),bet=o(" (RoFormer model)"),vet=l(),_0=a("li"),B0e=a("strong"),Fet=o("xlm-roberta"),Tet=o(" \u2014 "),ure=a("a"),Met=o("FlaxXLMRobertaForTokenClassification"),Eet=o(" (XLM-RoBERTa model)"),Cet=l(),F(u0.$$.fragment),vQe=l(),Ff=a("h2"),b0=a("a"),N0e=a("span"),F(Z$.$$.fragment),wet=l(),I0e=a("span"),Aet=o("FlaxAutoModelForMultipleChoice"),FQe=l(),Er=a("div"),F(ek.$$.fragment),Let=l(),Tf=a("p"),yet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bre=a("a"),xet=o("from_pretrained()"),$et=o(" class method or the "),vre=a("a"),ket=o("from_config()"),Set=o(` class
method.`),Ret=l(),ok=a("p"),Pet=o("This class cannot be instantiated directly using "),q0e=a("code"),Bet=o("__init__()"),Net=o(" (throws an error)."),Iet=l(),oa=a("div"),F(rk.$$.fragment),qet=l(),j0e=a("p"),jet=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Det=l(),Mf=a("p"),Get=o(`Note:
Loading a model from its configuration file does `),D0e=a("strong"),Oet=o("not"),Vet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fre=a("a"),Xet=o("from_pretrained()"),zet=o(" to load the model weights."),Qet=l(),F(v0.$$.fragment),Wet=l(),Yr=a("div"),F(tk.$$.fragment),Het=l(),G0e=a("p"),Uet=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jet=l(),xn=a("p"),Yet=o("The model class to instantiate is selected based on the "),O0e=a("code"),Ket=o("model_type"),Zet=o(` property of the config object (either
passed as an argument or loaded from `),V0e=a("code"),eot=o("pretrained_model_name_or_path"),oot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=a("code"),rot=o("pretrained_model_name_or_path"),tot=o(":"),aot=l(),Xe=a("ul"),F0=a("li"),z0e=a("strong"),not=o("albert"),sot=o(" \u2014 "),Tre=a("a"),lot=o("FlaxAlbertForMultipleChoice"),iot=o(" (ALBERT model)"),dot=l(),T0=a("li"),Q0e=a("strong"),cot=o("bert"),fot=o(" \u2014 "),Mre=a("a"),mot=o("FlaxBertForMultipleChoice"),got=o(" (BERT model)"),hot=l(),M0=a("li"),W0e=a("strong"),pot=o("big_bird"),_ot=o(" \u2014 "),Ere=a("a"),uot=o("FlaxBigBirdForMultipleChoice"),bot=o(" (BigBird model)"),vot=l(),E0=a("li"),H0e=a("strong"),Fot=o("distilbert"),Tot=o(" \u2014 "),Cre=a("a"),Mot=o("FlaxDistilBertForMultipleChoice"),Eot=o(" (DistilBERT model)"),Cot=l(),C0=a("li"),U0e=a("strong"),wot=o("electra"),Aot=o(" \u2014 "),wre=a("a"),Lot=o("FlaxElectraForMultipleChoice"),yot=o(" (ELECTRA model)"),xot=l(),w0=a("li"),J0e=a("strong"),$ot=o("roberta"),kot=o(" \u2014 "),Are=a("a"),Sot=o("FlaxRobertaForMultipleChoice"),Rot=o(" (RoBERTa model)"),Pot=l(),A0=a("li"),Y0e=a("strong"),Bot=o("roformer"),Not=o(" \u2014 "),Lre=a("a"),Iot=o("FlaxRoFormerForMultipleChoice"),qot=o(" (RoFormer model)"),jot=l(),L0=a("li"),K0e=a("strong"),Dot=o("xlm-roberta"),Got=o(" \u2014 "),yre=a("a"),Oot=o("FlaxXLMRobertaForMultipleChoice"),Vot=o(" (XLM-RoBERTa model)"),Xot=l(),F(y0.$$.fragment),TQe=l(),Ef=a("h2"),x0=a("a"),Z0e=a("span"),F(ak.$$.fragment),zot=l(),ewe=a("span"),Qot=o("FlaxAutoModelForNextSentencePrediction"),MQe=l(),Cr=a("div"),F(nk.$$.fragment),Wot=l(),Cf=a("p"),Hot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xre=a("a"),Uot=o("from_pretrained()"),Jot=o(" class method or the "),$re=a("a"),Yot=o("from_config()"),Kot=o(` class
method.`),Zot=l(),sk=a("p"),ert=o("This class cannot be instantiated directly using "),owe=a("code"),ort=o("__init__()"),rrt=o(" (throws an error)."),trt=l(),ra=a("div"),F(lk.$$.fragment),art=l(),rwe=a("p"),nrt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),srt=l(),wf=a("p"),lrt=o(`Note:
Loading a model from its configuration file does `),twe=a("strong"),irt=o("not"),drt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=a("a"),crt=o("from_pretrained()"),frt=o(" to load the model weights."),mrt=l(),F($0.$$.fragment),grt=l(),Kr=a("div"),F(ik.$$.fragment),hrt=l(),awe=a("p"),prt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_rt=l(),$n=a("p"),urt=o("The model class to instantiate is selected based on the "),nwe=a("code"),brt=o("model_type"),vrt=o(` property of the config object (either
passed as an argument or loaded from `),swe=a("code"),Frt=o("pretrained_model_name_or_path"),Trt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lwe=a("code"),Mrt=o("pretrained_model_name_or_path"),Ert=o(":"),Crt=l(),iwe=a("ul"),k0=a("li"),dwe=a("strong"),wrt=o("bert"),Art=o(" \u2014 "),Sre=a("a"),Lrt=o("FlaxBertForNextSentencePrediction"),yrt=o(" (BERT model)"),xrt=l(),F(S0.$$.fragment),EQe=l(),Af=a("h2"),R0=a("a"),cwe=a("span"),F(dk.$$.fragment),$rt=l(),fwe=a("span"),krt=o("FlaxAutoModelForImageClassification"),CQe=l(),wr=a("div"),F(ck.$$.fragment),Srt=l(),Lf=a("p"),Rrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rre=a("a"),Prt=o("from_pretrained()"),Brt=o(" class method or the "),Pre=a("a"),Nrt=o("from_config()"),Irt=o(` class
method.`),qrt=l(),fk=a("p"),jrt=o("This class cannot be instantiated directly using "),mwe=a("code"),Drt=o("__init__()"),Grt=o(" (throws an error)."),Ort=l(),ta=a("div"),F(mk.$$.fragment),Vrt=l(),gwe=a("p"),Xrt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zrt=l(),yf=a("p"),Qrt=o(`Note:
Loading a model from its configuration file does `),hwe=a("strong"),Wrt=o("not"),Hrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=a("a"),Urt=o("from_pretrained()"),Jrt=o(" to load the model weights."),Yrt=l(),F(P0.$$.fragment),Krt=l(),Zr=a("div"),F(gk.$$.fragment),Zrt=l(),pwe=a("p"),ett=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ott=l(),kn=a("p"),rtt=o("The model class to instantiate is selected based on the "),_we=a("code"),ttt=o("model_type"),att=o(` property of the config object (either
passed as an argument or loaded from `),uwe=a("code"),ntt=o("pretrained_model_name_or_path"),stt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=a("code"),ltt=o("pretrained_model_name_or_path"),itt=o(":"),dtt=l(),hk=a("ul"),B0=a("li"),vwe=a("strong"),ctt=o("beit"),ftt=o(" \u2014 "),Nre=a("a"),mtt=o("FlaxBeitForImageClassification"),gtt=o(" (BEiT model)"),htt=l(),N0=a("li"),Fwe=a("strong"),ptt=o("vit"),_tt=o(" \u2014 "),Ire=a("a"),utt=o("FlaxViTForImageClassification"),btt=o(" (ViT model)"),vtt=l(),F(I0.$$.fragment),wQe=l(),xf=a("h2"),q0=a("a"),Twe=a("span"),F(pk.$$.fragment),Ftt=l(),Mwe=a("span"),Ttt=o("FlaxAutoModelForVision2Seq"),AQe=l(),Ar=a("div"),F(_k.$$.fragment),Mtt=l(),$f=a("p"),Ett=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qre=a("a"),Ctt=o("from_pretrained()"),wtt=o(" class method or the "),jre=a("a"),Att=o("from_config()"),Ltt=o(` class
method.`),ytt=l(),uk=a("p"),xtt=o("This class cannot be instantiated directly using "),Ewe=a("code"),$tt=o("__init__()"),ktt=o(" (throws an error)."),Stt=l(),aa=a("div"),F(bk.$$.fragment),Rtt=l(),Cwe=a("p"),Ptt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Btt=l(),kf=a("p"),Ntt=o(`Note:
Loading a model from its configuration file does `),wwe=a("strong"),Itt=o("not"),qtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dre=a("a"),jtt=o("from_pretrained()"),Dtt=o(" to load the model weights."),Gtt=l(),F(j0.$$.fragment),Ott=l(),et=a("div"),F(vk.$$.fragment),Vtt=l(),Awe=a("p"),Xtt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ztt=l(),Sn=a("p"),Qtt=o("The model class to instantiate is selected based on the "),Lwe=a("code"),Wtt=o("model_type"),Htt=o(` property of the config object (either
passed as an argument or loaded from `),ywe=a("code"),Utt=o("pretrained_model_name_or_path"),Jtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xwe=a("code"),Ytt=o("pretrained_model_name_or_path"),Ktt=o(":"),Ztt=l(),$we=a("ul"),D0=a("li"),kwe=a("strong"),eat=o("vision-encoder-decoder"),oat=o(" \u2014 "),Gre=a("a"),rat=o("FlaxVisionEncoderDecoderModel"),tat=o(" (Vision Encoder decoder model)"),aat=l(),F(G0.$$.fragment),this.h()},l(f){const u=UWt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Fk=s(p);m=n(Fk,"A",{id:!0,class:!0,href:!0});var Swe=s(m);_=n(Swe,"SPAN",{});var Rwe=s(_);T(d.$$.fragment,Rwe),Rwe.forEach(t),Swe.forEach(t),h=i(Fk),Co=n(Fk,"SPAN",{});var Pwe=s(Co);yi=r(Pwe,"Auto Classes"),Pwe.forEach(t),Fk.forEach(t),Bf=i(f),lt=n(f,"P",{});var Tk=s(lt);xi=r(Tk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=n(Tk,"CODE",{});var Bwe=s($i);sL=r(Bwe,"from_pretrained()"),Bwe.forEach(t),Nf=r(Tk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Tk.forEach(t),Oe=i(f),We=n(f,"P",{});var Rn=s(We);ki=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var Nwe=s(Pn);lL=r(Nwe,"AutoConfig"),Nwe.forEach(t),Bn=r(Rn,", "),Nn=n(Rn,"A",{href:!0});var Iwe=s(Nn);iL=r(Iwe,"AutoModel"),Iwe.forEach(t),Si=r(Rn,`, and
`),In=n(Rn,"A",{href:!0});var qwe=s(In);dL=r(qwe,"AutoTokenizer"),qwe.forEach(t),Ri=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),If=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var Mk=s(Ae);OS=r(Mk,"will create a model that is an instance of "),Pi=n(Mk,"A",{href:!0});var jwe=s(Pi);VS=r(jwe,"BertModel"),jwe.forEach(t),XS=r(Mk,"."),Mk.forEach(t),wo=i(f),Ra=n(f,"P",{});var Ek=s(Ra);zS=r(Ek,"There is one class of "),qf=n(Ek,"CODE",{});var Dwe=s(qf);QS=r(Dwe,"AutoModel"),Dwe.forEach(t),IHe=r(Ek," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ek.forEach(t),MXe=i(f),Bi=n(f,"H2",{class:!0});var Ck=s(Bi);jf=n(Ck,"A",{id:!0,class:!0,href:!0});var Gwe=s(jf);Nae=n(Gwe,"SPAN",{});var Owe=s(Nae);T(cL.$$.fragment,Owe),Owe.forEach(t),Gwe.forEach(t),qHe=i(Ck),Iae=n(Ck,"SPAN",{});var Vwe=s(Iae);jHe=r(Vwe,"Extending the Auto Classes"),Vwe.forEach(t),Ck.forEach(t),EXe=i(f),qn=n(f,"P",{});var Sf=s(qn);DHe=r(Sf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qae=n(Sf,"CODE",{});var Xwe=s(qae);GHe=r(Xwe,"NewModel"),Xwe.forEach(t),OHe=r(Sf,", make sure you have a "),jae=n(Sf,"CODE",{});var zwe=s(jae);VHe=r(zwe,"NewModelConfig"),zwe.forEach(t),XHe=r(Sf,` then you can add those to the auto
classes like this:`),Sf.forEach(t),CXe=i(f),T(fL.$$.fragment,f),wXe=i(f),WS=n(f,"P",{});var Qwe=s(WS);zHe=r(Qwe,"You will then be able to use the auto classes like you would usually do!"),Qwe.forEach(t),AXe=i(f),T(Df.$$.fragment,f),LXe=i(f),Ni=n(f,"H2",{class:!0});var wk=s(Ni);Gf=n(wk,"A",{id:!0,class:!0,href:!0});var Wwe=s(Gf);Dae=n(Wwe,"SPAN",{});var Hwe=s(Dae);T(mL.$$.fragment,Hwe),Hwe.forEach(t),Wwe.forEach(t),QHe=i(wk),Gae=n(wk,"SPAN",{});var Uwe=s(Gae);WHe=r(Uwe,"AutoConfig"),Uwe.forEach(t),wk.forEach(t),yXe=i(f),Ao=n(f,"DIV",{class:!0});var nt=s(Ao);T(gL.$$.fragment,nt),HHe=i(nt),hL=n(nt,"P",{});var Ak=s(hL);UHe=r(Ak,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),HS=n(Ak,"A",{href:!0});var Jwe=s(HS);JHe=r(Jwe,"from_pretrained()"),Jwe.forEach(t),YHe=r(Ak," class method."),Ak.forEach(t),KHe=i(nt),pL=n(nt,"P",{});var Lk=s(pL);ZHe=r(Lk,"This class cannot be instantiated directly using "),Oae=n(Lk,"CODE",{});var Ywe=s(Oae);eUe=r(Ywe,"__init__()"),Ywe.forEach(t),oUe=r(Lk," (throws an error)."),Lk.forEach(t),rUe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(_L.$$.fragment,st),tUe=i(st),Vae=n(st,"P",{});var Kwe=s(Vae);aUe=r(Kwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Kwe.forEach(t),nUe=i(st),Ii=n(st,"P",{});var Rf=s(Ii);sUe=r(Rf,"The configuration class to instantiate is selected based on the "),Xae=n(Rf,"CODE",{});var Zwe=s(Xae);lUe=r(Zwe,"model_type"),Zwe.forEach(t),iUe=r(Rf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zae=n(Rf,"CODE",{});var eAe=s(zae);dUe=r(eAe,"pretrained_model_name_or_path"),eAe.forEach(t),cUe=r(Rf,":"),Rf.forEach(t),fUe=i(st),A=n(st,"UL",{});var L=s(A);Of=n(L,"LI",{});var O0=s(Of);Qae=n(O0,"STRONG",{});var oAe=s(Qae);mUe=r(oAe,"albert"),oAe.forEach(t),gUe=r(O0," \u2014 "),US=n(O0,"A",{href:!0});var rAe=s(US);hUe=r(rAe,"AlbertConfig"),rAe.forEach(t),pUe=r(O0," (ALBERT model)"),O0.forEach(t),_Ue=i(L),Vf=n(L,"LI",{});var V0=s(Vf);Wae=n(V0,"STRONG",{});var tAe=s(Wae);uUe=r(tAe,"bart"),tAe.forEach(t),bUe=r(V0," \u2014 "),JS=n(V0,"A",{href:!0});var aAe=s(JS);vUe=r(aAe,"BartConfig"),aAe.forEach(t),FUe=r(V0," (BART model)"),V0.forEach(t),TUe=i(L),Xf=n(L,"LI",{});var X0=s(Xf);Hae=n(X0,"STRONG",{});var nAe=s(Hae);MUe=r(nAe,"beit"),nAe.forEach(t),EUe=r(X0," \u2014 "),YS=n(X0,"A",{href:!0});var sAe=s(YS);CUe=r(sAe,"BeitConfig"),sAe.forEach(t),wUe=r(X0," (BEiT model)"),X0.forEach(t),AUe=i(L),zf=n(L,"LI",{});var z0=s(zf);Uae=n(z0,"STRONG",{});var lAe=s(Uae);LUe=r(lAe,"bert"),lAe.forEach(t),yUe=r(z0," \u2014 "),KS=n(z0,"A",{href:!0});var iAe=s(KS);xUe=r(iAe,"BertConfig"),iAe.forEach(t),$Ue=r(z0," (BERT model)"),z0.forEach(t),kUe=i(L),Qf=n(L,"LI",{});var Q0=s(Qf);Jae=n(Q0,"STRONG",{});var dAe=s(Jae);SUe=r(dAe,"bert-generation"),dAe.forEach(t),RUe=r(Q0," \u2014 "),ZS=n(Q0,"A",{href:!0});var cAe=s(ZS);PUe=r(cAe,"BertGenerationConfig"),cAe.forEach(t),BUe=r(Q0," (Bert Generation model)"),Q0.forEach(t),NUe=i(L),Wf=n(L,"LI",{});var W0=s(Wf);Yae=n(W0,"STRONG",{});var fAe=s(Yae);IUe=r(fAe,"big_bird"),fAe.forEach(t),qUe=r(W0," \u2014 "),eR=n(W0,"A",{href:!0});var mAe=s(eR);jUe=r(mAe,"BigBirdConfig"),mAe.forEach(t),DUe=r(W0," (BigBird model)"),W0.forEach(t),GUe=i(L),Hf=n(L,"LI",{});var H0=s(Hf);Kae=n(H0,"STRONG",{});var gAe=s(Kae);OUe=r(gAe,"bigbird_pegasus"),gAe.forEach(t),VUe=r(H0," \u2014 "),oR=n(H0,"A",{href:!0});var hAe=s(oR);XUe=r(hAe,"BigBirdPegasusConfig"),hAe.forEach(t),zUe=r(H0," (BigBird-Pegasus model)"),H0.forEach(t),QUe=i(L),Uf=n(L,"LI",{});var U0=s(Uf);Zae=n(U0,"STRONG",{});var pAe=s(Zae);WUe=r(pAe,"blenderbot"),pAe.forEach(t),HUe=r(U0," \u2014 "),rR=n(U0,"A",{href:!0});var _Ae=s(rR);UUe=r(_Ae,"BlenderbotConfig"),_Ae.forEach(t),JUe=r(U0," (Blenderbot model)"),U0.forEach(t),YUe=i(L),Jf=n(L,"LI",{});var J0=s(Jf);ene=n(J0,"STRONG",{});var uAe=s(ene);KUe=r(uAe,"blenderbot-small"),uAe.forEach(t),ZUe=r(J0," \u2014 "),tR=n(J0,"A",{href:!0});var bAe=s(tR);eJe=r(bAe,"BlenderbotSmallConfig"),bAe.forEach(t),oJe=r(J0," (BlenderbotSmall model)"),J0.forEach(t),rJe=i(L),Yf=n(L,"LI",{});var Y0=s(Yf);one=n(Y0,"STRONG",{});var vAe=s(one);tJe=r(vAe,"bloom"),vAe.forEach(t),aJe=r(Y0," \u2014 "),aR=n(Y0,"A",{href:!0});var FAe=s(aR);nJe=r(FAe,"BloomConfig"),FAe.forEach(t),sJe=r(Y0," (BLOOM model)"),Y0.forEach(t),lJe=i(L),Kf=n(L,"LI",{});var K0=s(Kf);rne=n(K0,"STRONG",{});var TAe=s(rne);iJe=r(TAe,"camembert"),TAe.forEach(t),dJe=r(K0," \u2014 "),nR=n(K0,"A",{href:!0});var MAe=s(nR);cJe=r(MAe,"CamembertConfig"),MAe.forEach(t),fJe=r(K0," (CamemBERT model)"),K0.forEach(t),mJe=i(L),Zf=n(L,"LI",{});var Z0=s(Zf);tne=n(Z0,"STRONG",{});var EAe=s(tne);gJe=r(EAe,"canine"),EAe.forEach(t),hJe=r(Z0," \u2014 "),sR=n(Z0,"A",{href:!0});var CAe=s(sR);pJe=r(CAe,"CanineConfig"),CAe.forEach(t),_Je=r(Z0," (CANINE model)"),Z0.forEach(t),uJe=i(L),em=n(L,"LI",{});var ew=s(em);ane=n(ew,"STRONG",{});var wAe=s(ane);bJe=r(wAe,"clip"),wAe.forEach(t),vJe=r(ew," \u2014 "),lR=n(ew,"A",{href:!0});var AAe=s(lR);FJe=r(AAe,"CLIPConfig"),AAe.forEach(t),TJe=r(ew," (CLIP model)"),ew.forEach(t),MJe=i(L),om=n(L,"LI",{});var ow=s(om);nne=n(ow,"STRONG",{});var LAe=s(nne);EJe=r(LAe,"codegen"),LAe.forEach(t),CJe=r(ow," \u2014 "),iR=n(ow,"A",{href:!0});var yAe=s(iR);wJe=r(yAe,"CodeGenConfig"),yAe.forEach(t),AJe=r(ow," (CodeGen model)"),ow.forEach(t),LJe=i(L),rm=n(L,"LI",{});var rw=s(rm);sne=n(rw,"STRONG",{});var xAe=s(sne);yJe=r(xAe,"convbert"),xAe.forEach(t),xJe=r(rw," \u2014 "),dR=n(rw,"A",{href:!0});var $Ae=s(dR);$Je=r($Ae,"ConvBertConfig"),$Ae.forEach(t),kJe=r(rw," (ConvBERT model)"),rw.forEach(t),SJe=i(L),tm=n(L,"LI",{});var tw=s(tm);lne=n(tw,"STRONG",{});var kAe=s(lne);RJe=r(kAe,"convnext"),kAe.forEach(t),PJe=r(tw," \u2014 "),cR=n(tw,"A",{href:!0});var SAe=s(cR);BJe=r(SAe,"ConvNextConfig"),SAe.forEach(t),NJe=r(tw," (ConvNeXT model)"),tw.forEach(t),IJe=i(L),am=n(L,"LI",{});var aw=s(am);ine=n(aw,"STRONG",{});var RAe=s(ine);qJe=r(RAe,"ctrl"),RAe.forEach(t),jJe=r(aw," \u2014 "),fR=n(aw,"A",{href:!0});var PAe=s(fR);DJe=r(PAe,"CTRLConfig"),PAe.forEach(t),GJe=r(aw," (CTRL model)"),aw.forEach(t),OJe=i(L),nm=n(L,"LI",{});var nw=s(nm);dne=n(nw,"STRONG",{});var BAe=s(dne);VJe=r(BAe,"cvt"),BAe.forEach(t),XJe=r(nw," \u2014 "),mR=n(nw,"A",{href:!0});var NAe=s(mR);zJe=r(NAe,"CvtConfig"),NAe.forEach(t),QJe=r(nw," (CvT model)"),nw.forEach(t),WJe=i(L),sm=n(L,"LI",{});var sw=s(sm);cne=n(sw,"STRONG",{});var IAe=s(cne);HJe=r(IAe,"data2vec-audio"),IAe.forEach(t),UJe=r(sw," \u2014 "),gR=n(sw,"A",{href:!0});var qAe=s(gR);JJe=r(qAe,"Data2VecAudioConfig"),qAe.forEach(t),YJe=r(sw," (Data2VecAudio model)"),sw.forEach(t),KJe=i(L),lm=n(L,"LI",{});var lw=s(lm);fne=n(lw,"STRONG",{});var jAe=s(fne);ZJe=r(jAe,"data2vec-text"),jAe.forEach(t),eYe=r(lw," \u2014 "),hR=n(lw,"A",{href:!0});var DAe=s(hR);oYe=r(DAe,"Data2VecTextConfig"),DAe.forEach(t),rYe=r(lw," (Data2VecText model)"),lw.forEach(t),tYe=i(L),im=n(L,"LI",{});var iw=s(im);mne=n(iw,"STRONG",{});var GAe=s(mne);aYe=r(GAe,"data2vec-vision"),GAe.forEach(t),nYe=r(iw," \u2014 "),pR=n(iw,"A",{href:!0});var OAe=s(pR);sYe=r(OAe,"Data2VecVisionConfig"),OAe.forEach(t),lYe=r(iw," (Data2VecVision model)"),iw.forEach(t),iYe=i(L),dm=n(L,"LI",{});var dw=s(dm);gne=n(dw,"STRONG",{});var VAe=s(gne);dYe=r(VAe,"deberta"),VAe.forEach(t),cYe=r(dw," \u2014 "),_R=n(dw,"A",{href:!0});var XAe=s(_R);fYe=r(XAe,"DebertaConfig"),XAe.forEach(t),mYe=r(dw," (DeBERTa model)"),dw.forEach(t),gYe=i(L),cm=n(L,"LI",{});var cw=s(cm);hne=n(cw,"STRONG",{});var zAe=s(hne);hYe=r(zAe,"deberta-v2"),zAe.forEach(t),pYe=r(cw," \u2014 "),uR=n(cw,"A",{href:!0});var QAe=s(uR);_Ye=r(QAe,"DebertaV2Config"),QAe.forEach(t),uYe=r(cw," (DeBERTa-v2 model)"),cw.forEach(t),bYe=i(L),fm=n(L,"LI",{});var fw=s(fm);pne=n(fw,"STRONG",{});var sat=s(pne);vYe=r(sat,"decision_transformer"),sat.forEach(t),FYe=r(fw," \u2014 "),bR=n(fw,"A",{href:!0});var lat=s(bR);TYe=r(lat,"DecisionTransformerConfig"),lat.forEach(t),MYe=r(fw," (Decision Transformer model)"),fw.forEach(t),EYe=i(L),mm=n(L,"LI",{});var WAe=s(mm);_ne=n(WAe,"STRONG",{});var iat=s(_ne);CYe=r(iat,"deit"),iat.forEach(t),wYe=r(WAe," \u2014 "),vR=n(WAe,"A",{href:!0});var dat=s(vR);AYe=r(dat,"DeiTConfig"),dat.forEach(t),LYe=r(WAe," (DeiT model)"),WAe.forEach(t),yYe=i(L),gm=n(L,"LI",{});var HAe=s(gm);une=n(HAe,"STRONG",{});var cat=s(une);xYe=r(cat,"detr"),cat.forEach(t),$Ye=r(HAe," \u2014 "),FR=n(HAe,"A",{href:!0});var fat=s(FR);kYe=r(fat,"DetrConfig"),fat.forEach(t),SYe=r(HAe," (DETR model)"),HAe.forEach(t),RYe=i(L),hm=n(L,"LI",{});var UAe=s(hm);bne=n(UAe,"STRONG",{});var mat=s(bne);PYe=r(mat,"distilbert"),mat.forEach(t),BYe=r(UAe," \u2014 "),TR=n(UAe,"A",{href:!0});var gat=s(TR);NYe=r(gat,"DistilBertConfig"),gat.forEach(t),IYe=r(UAe," (DistilBERT model)"),UAe.forEach(t),qYe=i(L),pm=n(L,"LI",{});var JAe=s(pm);vne=n(JAe,"STRONG",{});var hat=s(vne);jYe=r(hat,"dpr"),hat.forEach(t),DYe=r(JAe," \u2014 "),MR=n(JAe,"A",{href:!0});var pat=s(MR);GYe=r(pat,"DPRConfig"),pat.forEach(t),OYe=r(JAe," (DPR model)"),JAe.forEach(t),VYe=i(L),_m=n(L,"LI",{});var YAe=s(_m);Fne=n(YAe,"STRONG",{});var _at=s(Fne);XYe=r(_at,"dpt"),_at.forEach(t),zYe=r(YAe," \u2014 "),ER=n(YAe,"A",{href:!0});var uat=s(ER);QYe=r(uat,"DPTConfig"),uat.forEach(t),WYe=r(YAe," (DPT model)"),YAe.forEach(t),HYe=i(L),um=n(L,"LI",{});var KAe=s(um);Tne=n(KAe,"STRONG",{});var bat=s(Tne);UYe=r(bat,"electra"),bat.forEach(t),JYe=r(KAe," \u2014 "),CR=n(KAe,"A",{href:!0});var vat=s(CR);YYe=r(vat,"ElectraConfig"),vat.forEach(t),KYe=r(KAe," (ELECTRA model)"),KAe.forEach(t),ZYe=i(L),bm=n(L,"LI",{});var ZAe=s(bm);Mne=n(ZAe,"STRONG",{});var Fat=s(Mne);eKe=r(Fat,"encoder-decoder"),Fat.forEach(t),oKe=r(ZAe," \u2014 "),wR=n(ZAe,"A",{href:!0});var Tat=s(wR);rKe=r(Tat,"EncoderDecoderConfig"),Tat.forEach(t),tKe=r(ZAe," (Encoder decoder model)"),ZAe.forEach(t),aKe=i(L),vm=n(L,"LI",{});var eLe=s(vm);Ene=n(eLe,"STRONG",{});var Mat=s(Ene);nKe=r(Mat,"flaubert"),Mat.forEach(t),sKe=r(eLe," \u2014 "),AR=n(eLe,"A",{href:!0});var Eat=s(AR);lKe=r(Eat,"FlaubertConfig"),Eat.forEach(t),iKe=r(eLe," (FlauBERT model)"),eLe.forEach(t),dKe=i(L),Fm=n(L,"LI",{});var oLe=s(Fm);Cne=n(oLe,"STRONG",{});var Cat=s(Cne);cKe=r(Cat,"flava"),Cat.forEach(t),fKe=r(oLe," \u2014 "),LR=n(oLe,"A",{href:!0});var wat=s(LR);mKe=r(wat,"FlavaConfig"),wat.forEach(t),gKe=r(oLe," (FLAVA model)"),oLe.forEach(t),hKe=i(L),Tm=n(L,"LI",{});var rLe=s(Tm);wne=n(rLe,"STRONG",{});var Aat=s(wne);pKe=r(Aat,"fnet"),Aat.forEach(t),_Ke=r(rLe," \u2014 "),yR=n(rLe,"A",{href:!0});var Lat=s(yR);uKe=r(Lat,"FNetConfig"),Lat.forEach(t),bKe=r(rLe," (FNet model)"),rLe.forEach(t),vKe=i(L),Mm=n(L,"LI",{});var tLe=s(Mm);Ane=n(tLe,"STRONG",{});var yat=s(Ane);FKe=r(yat,"fsmt"),yat.forEach(t),TKe=r(tLe," \u2014 "),xR=n(tLe,"A",{href:!0});var xat=s(xR);MKe=r(xat,"FSMTConfig"),xat.forEach(t),EKe=r(tLe," (FairSeq Machine-Translation model)"),tLe.forEach(t),CKe=i(L),Em=n(L,"LI",{});var aLe=s(Em);Lne=n(aLe,"STRONG",{});var $at=s(Lne);wKe=r($at,"funnel"),$at.forEach(t),AKe=r(aLe," \u2014 "),$R=n(aLe,"A",{href:!0});var kat=s($R);LKe=r(kat,"FunnelConfig"),kat.forEach(t),yKe=r(aLe," (Funnel Transformer model)"),aLe.forEach(t),xKe=i(L),Cm=n(L,"LI",{});var nLe=s(Cm);yne=n(nLe,"STRONG",{});var Sat=s(yne);$Ke=r(Sat,"glpn"),Sat.forEach(t),kKe=r(nLe," \u2014 "),kR=n(nLe,"A",{href:!0});var Rat=s(kR);SKe=r(Rat,"GLPNConfig"),Rat.forEach(t),RKe=r(nLe," (GLPN model)"),nLe.forEach(t),PKe=i(L),wm=n(L,"LI",{});var sLe=s(wm);xne=n(sLe,"STRONG",{});var Pat=s(xne);BKe=r(Pat,"gpt2"),Pat.forEach(t),NKe=r(sLe," \u2014 "),SR=n(sLe,"A",{href:!0});var Bat=s(SR);IKe=r(Bat,"GPT2Config"),Bat.forEach(t),qKe=r(sLe," (OpenAI GPT-2 model)"),sLe.forEach(t),jKe=i(L),Am=n(L,"LI",{});var lLe=s(Am);$ne=n(lLe,"STRONG",{});var Nat=s($ne);DKe=r(Nat,"gpt_neo"),Nat.forEach(t),GKe=r(lLe," \u2014 "),RR=n(lLe,"A",{href:!0});var Iat=s(RR);OKe=r(Iat,"GPTNeoConfig"),Iat.forEach(t),VKe=r(lLe," (GPT Neo model)"),lLe.forEach(t),XKe=i(L),Lm=n(L,"LI",{});var iLe=s(Lm);kne=n(iLe,"STRONG",{});var qat=s(kne);zKe=r(qat,"gpt_neox"),qat.forEach(t),QKe=r(iLe," \u2014 "),PR=n(iLe,"A",{href:!0});var jat=s(PR);WKe=r(jat,"GPTNeoXConfig"),jat.forEach(t),HKe=r(iLe," (GPT NeoX model)"),iLe.forEach(t),UKe=i(L),ym=n(L,"LI",{});var dLe=s(ym);Sne=n(dLe,"STRONG",{});var Dat=s(Sne);JKe=r(Dat,"gptj"),Dat.forEach(t),YKe=r(dLe," \u2014 "),BR=n(dLe,"A",{href:!0});var Gat=s(BR);KKe=r(Gat,"GPTJConfig"),Gat.forEach(t),ZKe=r(dLe," (GPT-J model)"),dLe.forEach(t),eZe=i(L),xm=n(L,"LI",{});var cLe=s(xm);Rne=n(cLe,"STRONG",{});var Oat=s(Rne);oZe=r(Oat,"groupvit"),Oat.forEach(t),rZe=r(cLe," \u2014 "),NR=n(cLe,"A",{href:!0});var Vat=s(NR);tZe=r(Vat,"GroupViTConfig"),Vat.forEach(t),aZe=r(cLe," (GroupViT model)"),cLe.forEach(t),nZe=i(L),$m=n(L,"LI",{});var fLe=s($m);Pne=n(fLe,"STRONG",{});var Xat=s(Pne);sZe=r(Xat,"hubert"),Xat.forEach(t),lZe=r(fLe," \u2014 "),IR=n(fLe,"A",{href:!0});var zat=s(IR);iZe=r(zat,"HubertConfig"),zat.forEach(t),dZe=r(fLe," (Hubert model)"),fLe.forEach(t),cZe=i(L),km=n(L,"LI",{});var mLe=s(km);Bne=n(mLe,"STRONG",{});var Qat=s(Bne);fZe=r(Qat,"ibert"),Qat.forEach(t),mZe=r(mLe," \u2014 "),qR=n(mLe,"A",{href:!0});var Wat=s(qR);gZe=r(Wat,"IBertConfig"),Wat.forEach(t),hZe=r(mLe," (I-BERT model)"),mLe.forEach(t),pZe=i(L),Sm=n(L,"LI",{});var gLe=s(Sm);Nne=n(gLe,"STRONG",{});var Hat=s(Nne);_Ze=r(Hat,"imagegpt"),Hat.forEach(t),uZe=r(gLe," \u2014 "),jR=n(gLe,"A",{href:!0});var Uat=s(jR);bZe=r(Uat,"ImageGPTConfig"),Uat.forEach(t),vZe=r(gLe," (ImageGPT model)"),gLe.forEach(t),FZe=i(L),Rm=n(L,"LI",{});var hLe=s(Rm);Ine=n(hLe,"STRONG",{});var Jat=s(Ine);TZe=r(Jat,"jukebox"),Jat.forEach(t),MZe=r(hLe," \u2014 "),DR=n(hLe,"A",{href:!0});var Yat=s(DR);EZe=r(Yat,"JukeboxConfig"),Yat.forEach(t),CZe=r(hLe," (Jukebox model)"),hLe.forEach(t),wZe=i(L),Pm=n(L,"LI",{});var pLe=s(Pm);qne=n(pLe,"STRONG",{});var Kat=s(qne);AZe=r(Kat,"layoutlm"),Kat.forEach(t),LZe=r(pLe," \u2014 "),GR=n(pLe,"A",{href:!0});var Zat=s(GR);yZe=r(Zat,"LayoutLMConfig"),Zat.forEach(t),xZe=r(pLe," (LayoutLM model)"),pLe.forEach(t),$Ze=i(L),Bm=n(L,"LI",{});var _Le=s(Bm);jne=n(_Le,"STRONG",{});var ent=s(jne);kZe=r(ent,"layoutlmv2"),ent.forEach(t),SZe=r(_Le," \u2014 "),OR=n(_Le,"A",{href:!0});var ont=s(OR);RZe=r(ont,"LayoutLMv2Config"),ont.forEach(t),PZe=r(_Le," (LayoutLMv2 model)"),_Le.forEach(t),BZe=i(L),Nm=n(L,"LI",{});var uLe=s(Nm);Dne=n(uLe,"STRONG",{});var rnt=s(Dne);NZe=r(rnt,"layoutlmv3"),rnt.forEach(t),IZe=r(uLe," \u2014 "),VR=n(uLe,"A",{href:!0});var tnt=s(VR);qZe=r(tnt,"LayoutLMv3Config"),tnt.forEach(t),jZe=r(uLe," (LayoutLMv3 model)"),uLe.forEach(t),DZe=i(L),Im=n(L,"LI",{});var bLe=s(Im);Gne=n(bLe,"STRONG",{});var ant=s(Gne);GZe=r(ant,"led"),ant.forEach(t),OZe=r(bLe," \u2014 "),XR=n(bLe,"A",{href:!0});var nnt=s(XR);VZe=r(nnt,"LEDConfig"),nnt.forEach(t),XZe=r(bLe," (LED model)"),bLe.forEach(t),zZe=i(L),qm=n(L,"LI",{});var vLe=s(qm);One=n(vLe,"STRONG",{});var snt=s(One);QZe=r(snt,"levit"),snt.forEach(t),WZe=r(vLe," \u2014 "),zR=n(vLe,"A",{href:!0});var lnt=s(zR);HZe=r(lnt,"LevitConfig"),lnt.forEach(t),UZe=r(vLe," (LeViT model)"),vLe.forEach(t),JZe=i(L),jm=n(L,"LI",{});var FLe=s(jm);Vne=n(FLe,"STRONG",{});var int=s(Vne);YZe=r(int,"longformer"),int.forEach(t),KZe=r(FLe," \u2014 "),QR=n(FLe,"A",{href:!0});var dnt=s(QR);ZZe=r(dnt,"LongformerConfig"),dnt.forEach(t),eeo=r(FLe," (Longformer model)"),FLe.forEach(t),oeo=i(L),Dm=n(L,"LI",{});var TLe=s(Dm);Xne=n(TLe,"STRONG",{});var cnt=s(Xne);reo=r(cnt,"longt5"),cnt.forEach(t),teo=r(TLe," \u2014 "),WR=n(TLe,"A",{href:!0});var fnt=s(WR);aeo=r(fnt,"LongT5Config"),fnt.forEach(t),neo=r(TLe," (LongT5 model)"),TLe.forEach(t),seo=i(L),Gm=n(L,"LI",{});var MLe=s(Gm);zne=n(MLe,"STRONG",{});var mnt=s(zne);leo=r(mnt,"luke"),mnt.forEach(t),ieo=r(MLe," \u2014 "),HR=n(MLe,"A",{href:!0});var gnt=s(HR);deo=r(gnt,"LukeConfig"),gnt.forEach(t),ceo=r(MLe," (LUKE model)"),MLe.forEach(t),feo=i(L),Om=n(L,"LI",{});var ELe=s(Om);Qne=n(ELe,"STRONG",{});var hnt=s(Qne);meo=r(hnt,"lxmert"),hnt.forEach(t),geo=r(ELe," \u2014 "),UR=n(ELe,"A",{href:!0});var pnt=s(UR);heo=r(pnt,"LxmertConfig"),pnt.forEach(t),peo=r(ELe," (LXMERT model)"),ELe.forEach(t),_eo=i(L),Vm=n(L,"LI",{});var CLe=s(Vm);Wne=n(CLe,"STRONG",{});var _nt=s(Wne);ueo=r(_nt,"m2m_100"),_nt.forEach(t),beo=r(CLe," \u2014 "),JR=n(CLe,"A",{href:!0});var unt=s(JR);veo=r(unt,"M2M100Config"),unt.forEach(t),Feo=r(CLe," (M2M100 model)"),CLe.forEach(t),Teo=i(L),Xm=n(L,"LI",{});var wLe=s(Xm);Hne=n(wLe,"STRONG",{});var bnt=s(Hne);Meo=r(bnt,"marian"),bnt.forEach(t),Eeo=r(wLe," \u2014 "),YR=n(wLe,"A",{href:!0});var vnt=s(YR);Ceo=r(vnt,"MarianConfig"),vnt.forEach(t),weo=r(wLe," (Marian model)"),wLe.forEach(t),Aeo=i(L),zm=n(L,"LI",{});var ALe=s(zm);Une=n(ALe,"STRONG",{});var Fnt=s(Une);Leo=r(Fnt,"maskformer"),Fnt.forEach(t),yeo=r(ALe," \u2014 "),KR=n(ALe,"A",{href:!0});var Tnt=s(KR);xeo=r(Tnt,"MaskFormerConfig"),Tnt.forEach(t),$eo=r(ALe," (MaskFormer model)"),ALe.forEach(t),keo=i(L),Qm=n(L,"LI",{});var LLe=s(Qm);Jne=n(LLe,"STRONG",{});var Mnt=s(Jne);Seo=r(Mnt,"mbart"),Mnt.forEach(t),Reo=r(LLe," \u2014 "),ZR=n(LLe,"A",{href:!0});var Ent=s(ZR);Peo=r(Ent,"MBartConfig"),Ent.forEach(t),Beo=r(LLe," (mBART model)"),LLe.forEach(t),Neo=i(L),Wm=n(L,"LI",{});var yLe=s(Wm);Yne=n(yLe,"STRONG",{});var Cnt=s(Yne);Ieo=r(Cnt,"mctct"),Cnt.forEach(t),qeo=r(yLe," \u2014 "),eP=n(yLe,"A",{href:!0});var wnt=s(eP);jeo=r(wnt,"MCTCTConfig"),wnt.forEach(t),Deo=r(yLe," (M-CTC-T model)"),yLe.forEach(t),Geo=i(L),Hm=n(L,"LI",{});var xLe=s(Hm);Kne=n(xLe,"STRONG",{});var Ant=s(Kne);Oeo=r(Ant,"megatron-bert"),Ant.forEach(t),Veo=r(xLe," \u2014 "),oP=n(xLe,"A",{href:!0});var Lnt=s(oP);Xeo=r(Lnt,"MegatronBertConfig"),Lnt.forEach(t),zeo=r(xLe," (Megatron-BERT model)"),xLe.forEach(t),Qeo=i(L),Um=n(L,"LI",{});var $Le=s(Um);Zne=n($Le,"STRONG",{});var ynt=s(Zne);Weo=r(ynt,"mobilebert"),ynt.forEach(t),Heo=r($Le," \u2014 "),rP=n($Le,"A",{href:!0});var xnt=s(rP);Ueo=r(xnt,"MobileBertConfig"),xnt.forEach(t),Jeo=r($Le," (MobileBERT model)"),$Le.forEach(t),Yeo=i(L),Jm=n(L,"LI",{});var kLe=s(Jm);ese=n(kLe,"STRONG",{});var $nt=s(ese);Keo=r($nt,"mobilevit"),$nt.forEach(t),Zeo=r(kLe," \u2014 "),tP=n(kLe,"A",{href:!0});var knt=s(tP);eoo=r(knt,"MobileViTConfig"),knt.forEach(t),ooo=r(kLe," (MobileViT model)"),kLe.forEach(t),roo=i(L),Ym=n(L,"LI",{});var SLe=s(Ym);ose=n(SLe,"STRONG",{});var Snt=s(ose);too=r(Snt,"mpnet"),Snt.forEach(t),aoo=r(SLe," \u2014 "),aP=n(SLe,"A",{href:!0});var Rnt=s(aP);noo=r(Rnt,"MPNetConfig"),Rnt.forEach(t),soo=r(SLe," (MPNet model)"),SLe.forEach(t),loo=i(L),Km=n(L,"LI",{});var RLe=s(Km);rse=n(RLe,"STRONG",{});var Pnt=s(rse);ioo=r(Pnt,"mt5"),Pnt.forEach(t),doo=r(RLe," \u2014 "),nP=n(RLe,"A",{href:!0});var Bnt=s(nP);coo=r(Bnt,"MT5Config"),Bnt.forEach(t),foo=r(RLe," (MT5 model)"),RLe.forEach(t),moo=i(L),Zm=n(L,"LI",{});var PLe=s(Zm);tse=n(PLe,"STRONG",{});var Nnt=s(tse);goo=r(Nnt,"mvp"),Nnt.forEach(t),hoo=r(PLe," \u2014 "),sP=n(PLe,"A",{href:!0});var Int=s(sP);poo=r(Int,"MvpConfig"),Int.forEach(t),_oo=r(PLe," (MVP model)"),PLe.forEach(t),uoo=i(L),eg=n(L,"LI",{});var BLe=s(eg);ase=n(BLe,"STRONG",{});var qnt=s(ase);boo=r(qnt,"nezha"),qnt.forEach(t),voo=r(BLe," \u2014 "),lP=n(BLe,"A",{href:!0});var jnt=s(lP);Foo=r(jnt,"NezhaConfig"),jnt.forEach(t),Too=r(BLe," (Nezha model)"),BLe.forEach(t),Moo=i(L),og=n(L,"LI",{});var NLe=s(og);nse=n(NLe,"STRONG",{});var Dnt=s(nse);Eoo=r(Dnt,"nystromformer"),Dnt.forEach(t),Coo=r(NLe," \u2014 "),iP=n(NLe,"A",{href:!0});var Gnt=s(iP);woo=r(Gnt,"NystromformerConfig"),Gnt.forEach(t),Aoo=r(NLe," (Nystr\xF6mformer model)"),NLe.forEach(t),Loo=i(L),rg=n(L,"LI",{});var ILe=s(rg);sse=n(ILe,"STRONG",{});var Ont=s(sse);yoo=r(Ont,"openai-gpt"),Ont.forEach(t),xoo=r(ILe," \u2014 "),dP=n(ILe,"A",{href:!0});var Vnt=s(dP);$oo=r(Vnt,"OpenAIGPTConfig"),Vnt.forEach(t),koo=r(ILe," (OpenAI GPT model)"),ILe.forEach(t),Soo=i(L),tg=n(L,"LI",{});var qLe=s(tg);lse=n(qLe,"STRONG",{});var Xnt=s(lse);Roo=r(Xnt,"opt"),Xnt.forEach(t),Poo=r(qLe," \u2014 "),cP=n(qLe,"A",{href:!0});var znt=s(cP);Boo=r(znt,"OPTConfig"),znt.forEach(t),Noo=r(qLe," (OPT model)"),qLe.forEach(t),Ioo=i(L),ag=n(L,"LI",{});var jLe=s(ag);ise=n(jLe,"STRONG",{});var Qnt=s(ise);qoo=r(Qnt,"pegasus"),Qnt.forEach(t),joo=r(jLe," \u2014 "),fP=n(jLe,"A",{href:!0});var Wnt=s(fP);Doo=r(Wnt,"PegasusConfig"),Wnt.forEach(t),Goo=r(jLe," (Pegasus model)"),jLe.forEach(t),Ooo=i(L),ng=n(L,"LI",{});var DLe=s(ng);dse=n(DLe,"STRONG",{});var Hnt=s(dse);Voo=r(Hnt,"perceiver"),Hnt.forEach(t),Xoo=r(DLe," \u2014 "),mP=n(DLe,"A",{href:!0});var Unt=s(mP);zoo=r(Unt,"PerceiverConfig"),Unt.forEach(t),Qoo=r(DLe," (Perceiver model)"),DLe.forEach(t),Woo=i(L),sg=n(L,"LI",{});var GLe=s(sg);cse=n(GLe,"STRONG",{});var Jnt=s(cse);Hoo=r(Jnt,"plbart"),Jnt.forEach(t),Uoo=r(GLe," \u2014 "),gP=n(GLe,"A",{href:!0});var Ynt=s(gP);Joo=r(Ynt,"PLBartConfig"),Ynt.forEach(t),Yoo=r(GLe," (PLBart model)"),GLe.forEach(t),Koo=i(L),lg=n(L,"LI",{});var OLe=s(lg);fse=n(OLe,"STRONG",{});var Knt=s(fse);Zoo=r(Knt,"poolformer"),Knt.forEach(t),ero=r(OLe," \u2014 "),hP=n(OLe,"A",{href:!0});var Znt=s(hP);oro=r(Znt,"PoolFormerConfig"),Znt.forEach(t),rro=r(OLe," (PoolFormer model)"),OLe.forEach(t),tro=i(L),ig=n(L,"LI",{});var VLe=s(ig);mse=n(VLe,"STRONG",{});var est=s(mse);aro=r(est,"prophetnet"),est.forEach(t),nro=r(VLe," \u2014 "),pP=n(VLe,"A",{href:!0});var ost=s(pP);sro=r(ost,"ProphetNetConfig"),ost.forEach(t),lro=r(VLe," (ProphetNet model)"),VLe.forEach(t),iro=i(L),dg=n(L,"LI",{});var XLe=s(dg);gse=n(XLe,"STRONG",{});var rst=s(gse);dro=r(rst,"qdqbert"),rst.forEach(t),cro=r(XLe," \u2014 "),_P=n(XLe,"A",{href:!0});var tst=s(_P);fro=r(tst,"QDQBertConfig"),tst.forEach(t),mro=r(XLe," (QDQBert model)"),XLe.forEach(t),gro=i(L),cg=n(L,"LI",{});var zLe=s(cg);hse=n(zLe,"STRONG",{});var ast=s(hse);hro=r(ast,"rag"),ast.forEach(t),pro=r(zLe," \u2014 "),uP=n(zLe,"A",{href:!0});var nst=s(uP);_ro=r(nst,"RagConfig"),nst.forEach(t),uro=r(zLe," (RAG model)"),zLe.forEach(t),bro=i(L),fg=n(L,"LI",{});var QLe=s(fg);pse=n(QLe,"STRONG",{});var sst=s(pse);vro=r(sst,"realm"),sst.forEach(t),Fro=r(QLe," \u2014 "),bP=n(QLe,"A",{href:!0});var lst=s(bP);Tro=r(lst,"RealmConfig"),lst.forEach(t),Mro=r(QLe," (REALM model)"),QLe.forEach(t),Ero=i(L),mg=n(L,"LI",{});var WLe=s(mg);_se=n(WLe,"STRONG",{});var ist=s(_se);Cro=r(ist,"reformer"),ist.forEach(t),wro=r(WLe," \u2014 "),vP=n(WLe,"A",{href:!0});var dst=s(vP);Aro=r(dst,"ReformerConfig"),dst.forEach(t),Lro=r(WLe," (Reformer model)"),WLe.forEach(t),yro=i(L),gg=n(L,"LI",{});var HLe=s(gg);use=n(HLe,"STRONG",{});var cst=s(use);xro=r(cst,"regnet"),cst.forEach(t),$ro=r(HLe," \u2014 "),FP=n(HLe,"A",{href:!0});var fst=s(FP);kro=r(fst,"RegNetConfig"),fst.forEach(t),Sro=r(HLe," (RegNet model)"),HLe.forEach(t),Rro=i(L),hg=n(L,"LI",{});var ULe=s(hg);bse=n(ULe,"STRONG",{});var mst=s(bse);Pro=r(mst,"rembert"),mst.forEach(t),Bro=r(ULe," \u2014 "),TP=n(ULe,"A",{href:!0});var gst=s(TP);Nro=r(gst,"RemBertConfig"),gst.forEach(t),Iro=r(ULe," (RemBERT model)"),ULe.forEach(t),qro=i(L),pg=n(L,"LI",{});var JLe=s(pg);vse=n(JLe,"STRONG",{});var hst=s(vse);jro=r(hst,"resnet"),hst.forEach(t),Dro=r(JLe," \u2014 "),MP=n(JLe,"A",{href:!0});var pst=s(MP);Gro=r(pst,"ResNetConfig"),pst.forEach(t),Oro=r(JLe," (ResNet model)"),JLe.forEach(t),Vro=i(L),_g=n(L,"LI",{});var YLe=s(_g);Fse=n(YLe,"STRONG",{});var _st=s(Fse);Xro=r(_st,"retribert"),_st.forEach(t),zro=r(YLe," \u2014 "),EP=n(YLe,"A",{href:!0});var ust=s(EP);Qro=r(ust,"RetriBertConfig"),ust.forEach(t),Wro=r(YLe," (RetriBERT model)"),YLe.forEach(t),Hro=i(L),ug=n(L,"LI",{});var KLe=s(ug);Tse=n(KLe,"STRONG",{});var bst=s(Tse);Uro=r(bst,"roberta"),bst.forEach(t),Jro=r(KLe," \u2014 "),CP=n(KLe,"A",{href:!0});var vst=s(CP);Yro=r(vst,"RobertaConfig"),vst.forEach(t),Kro=r(KLe," (RoBERTa model)"),KLe.forEach(t),Zro=i(L),bg=n(L,"LI",{});var ZLe=s(bg);Mse=n(ZLe,"STRONG",{});var Fst=s(Mse);eto=r(Fst,"roformer"),Fst.forEach(t),oto=r(ZLe," \u2014 "),wP=n(ZLe,"A",{href:!0});var Tst=s(wP);rto=r(Tst,"RoFormerConfig"),Tst.forEach(t),tto=r(ZLe," (RoFormer model)"),ZLe.forEach(t),ato=i(L),vg=n(L,"LI",{});var eye=s(vg);Ese=n(eye,"STRONG",{});var Mst=s(Ese);nto=r(Mst,"segformer"),Mst.forEach(t),sto=r(eye," \u2014 "),AP=n(eye,"A",{href:!0});var Est=s(AP);lto=r(Est,"SegformerConfig"),Est.forEach(t),ito=r(eye," (SegFormer model)"),eye.forEach(t),dto=i(L),Fg=n(L,"LI",{});var oye=s(Fg);Cse=n(oye,"STRONG",{});var Cst=s(Cse);cto=r(Cst,"sew"),Cst.forEach(t),fto=r(oye," \u2014 "),LP=n(oye,"A",{href:!0});var wst=s(LP);mto=r(wst,"SEWConfig"),wst.forEach(t),gto=r(oye," (SEW model)"),oye.forEach(t),hto=i(L),Tg=n(L,"LI",{});var rye=s(Tg);wse=n(rye,"STRONG",{});var Ast=s(wse);pto=r(Ast,"sew-d"),Ast.forEach(t),_to=r(rye," \u2014 "),yP=n(rye,"A",{href:!0});var Lst=s(yP);uto=r(Lst,"SEWDConfig"),Lst.forEach(t),bto=r(rye," (SEW-D model)"),rye.forEach(t),vto=i(L),Mg=n(L,"LI",{});var tye=s(Mg);Ase=n(tye,"STRONG",{});var yst=s(Ase);Fto=r(yst,"speech-encoder-decoder"),yst.forEach(t),Tto=r(tye," \u2014 "),xP=n(tye,"A",{href:!0});var xst=s(xP);Mto=r(xst,"SpeechEncoderDecoderConfig"),xst.forEach(t),Eto=r(tye," (Speech Encoder decoder model)"),tye.forEach(t),Cto=i(L),Eg=n(L,"LI",{});var aye=s(Eg);Lse=n(aye,"STRONG",{});var $st=s(Lse);wto=r($st,"speech_to_text"),$st.forEach(t),Ato=r(aye," \u2014 "),$P=n(aye,"A",{href:!0});var kst=s($P);Lto=r(kst,"Speech2TextConfig"),kst.forEach(t),yto=r(aye," (Speech2Text model)"),aye.forEach(t),xto=i(L),Cg=n(L,"LI",{});var nye=s(Cg);yse=n(nye,"STRONG",{});var Sst=s(yse);$to=r(Sst,"speech_to_text_2"),Sst.forEach(t),kto=r(nye," \u2014 "),kP=n(nye,"A",{href:!0});var Rst=s(kP);Sto=r(Rst,"Speech2Text2Config"),Rst.forEach(t),Rto=r(nye," (Speech2Text2 model)"),nye.forEach(t),Pto=i(L),wg=n(L,"LI",{});var sye=s(wg);xse=n(sye,"STRONG",{});var Pst=s(xse);Bto=r(Pst,"splinter"),Pst.forEach(t),Nto=r(sye," \u2014 "),SP=n(sye,"A",{href:!0});var Bst=s(SP);Ito=r(Bst,"SplinterConfig"),Bst.forEach(t),qto=r(sye," (Splinter model)"),sye.forEach(t),jto=i(L),Ag=n(L,"LI",{});var lye=s(Ag);$se=n(lye,"STRONG",{});var Nst=s($se);Dto=r(Nst,"squeezebert"),Nst.forEach(t),Gto=r(lye," \u2014 "),RP=n(lye,"A",{href:!0});var Ist=s(RP);Oto=r(Ist,"SqueezeBertConfig"),Ist.forEach(t),Vto=r(lye," (SqueezeBERT model)"),lye.forEach(t),Xto=i(L),Lg=n(L,"LI",{});var iye=s(Lg);kse=n(iye,"STRONG",{});var qst=s(kse);zto=r(qst,"swin"),qst.forEach(t),Qto=r(iye," \u2014 "),PP=n(iye,"A",{href:!0});var jst=s(PP);Wto=r(jst,"SwinConfig"),jst.forEach(t),Hto=r(iye," (Swin Transformer model)"),iye.forEach(t),Uto=i(L),yg=n(L,"LI",{});var dye=s(yg);Sse=n(dye,"STRONG",{});var Dst=s(Sse);Jto=r(Dst,"t5"),Dst.forEach(t),Yto=r(dye," \u2014 "),BP=n(dye,"A",{href:!0});var Gst=s(BP);Kto=r(Gst,"T5Config"),Gst.forEach(t),Zto=r(dye," (T5 model)"),dye.forEach(t),eao=i(L),xg=n(L,"LI",{});var cye=s(xg);Rse=n(cye,"STRONG",{});var Ost=s(Rse);oao=r(Ost,"tapas"),Ost.forEach(t),rao=r(cye," \u2014 "),NP=n(cye,"A",{href:!0});var Vst=s(NP);tao=r(Vst,"TapasConfig"),Vst.forEach(t),aao=r(cye," (TAPAS model)"),cye.forEach(t),nao=i(L),$g=n(L,"LI",{});var fye=s($g);Pse=n(fye,"STRONG",{});var Xst=s(Pse);sao=r(Xst,"trajectory_transformer"),Xst.forEach(t),lao=r(fye," \u2014 "),IP=n(fye,"A",{href:!0});var zst=s(IP);iao=r(zst,"TrajectoryTransformerConfig"),zst.forEach(t),dao=r(fye," (Trajectory Transformer model)"),fye.forEach(t),cao=i(L),kg=n(L,"LI",{});var mye=s(kg);Bse=n(mye,"STRONG",{});var Qst=s(Bse);fao=r(Qst,"transfo-xl"),Qst.forEach(t),mao=r(mye," \u2014 "),qP=n(mye,"A",{href:!0});var Wst=s(qP);gao=r(Wst,"TransfoXLConfig"),Wst.forEach(t),hao=r(mye," (Transformer-XL model)"),mye.forEach(t),pao=i(L),Sg=n(L,"LI",{});var gye=s(Sg);Nse=n(gye,"STRONG",{});var Hst=s(Nse);_ao=r(Hst,"trocr"),Hst.forEach(t),uao=r(gye," \u2014 "),jP=n(gye,"A",{href:!0});var Ust=s(jP);bao=r(Ust,"TrOCRConfig"),Ust.forEach(t),vao=r(gye," (TrOCR model)"),gye.forEach(t),Fao=i(L),Rg=n(L,"LI",{});var hye=s(Rg);Ise=n(hye,"STRONG",{});var Jst=s(Ise);Tao=r(Jst,"unispeech"),Jst.forEach(t),Mao=r(hye," \u2014 "),DP=n(hye,"A",{href:!0});var Yst=s(DP);Eao=r(Yst,"UniSpeechConfig"),Yst.forEach(t),Cao=r(hye," (UniSpeech model)"),hye.forEach(t),wao=i(L),Pg=n(L,"LI",{});var pye=s(Pg);qse=n(pye,"STRONG",{});var Kst=s(qse);Aao=r(Kst,"unispeech-sat"),Kst.forEach(t),Lao=r(pye," \u2014 "),GP=n(pye,"A",{href:!0});var Zst=s(GP);yao=r(Zst,"UniSpeechSatConfig"),Zst.forEach(t),xao=r(pye," (UniSpeechSat model)"),pye.forEach(t),$ao=i(L),Bg=n(L,"LI",{});var _ye=s(Bg);jse=n(_ye,"STRONG",{});var elt=s(jse);kao=r(elt,"van"),elt.forEach(t),Sao=r(_ye," \u2014 "),OP=n(_ye,"A",{href:!0});var olt=s(OP);Rao=r(olt,"VanConfig"),olt.forEach(t),Pao=r(_ye," (VAN model)"),_ye.forEach(t),Bao=i(L),Ng=n(L,"LI",{});var uye=s(Ng);Dse=n(uye,"STRONG",{});var rlt=s(Dse);Nao=r(rlt,"vilt"),rlt.forEach(t),Iao=r(uye," \u2014 "),VP=n(uye,"A",{href:!0});var tlt=s(VP);qao=r(tlt,"ViltConfig"),tlt.forEach(t),jao=r(uye," (ViLT model)"),uye.forEach(t),Dao=i(L),Ig=n(L,"LI",{});var bye=s(Ig);Gse=n(bye,"STRONG",{});var alt=s(Gse);Gao=r(alt,"vision-encoder-decoder"),alt.forEach(t),Oao=r(bye," \u2014 "),XP=n(bye,"A",{href:!0});var nlt=s(XP);Vao=r(nlt,"VisionEncoderDecoderConfig"),nlt.forEach(t),Xao=r(bye," (Vision Encoder decoder model)"),bye.forEach(t),zao=i(L),qg=n(L,"LI",{});var vye=s(qg);Ose=n(vye,"STRONG",{});var slt=s(Ose);Qao=r(slt,"vision-text-dual-encoder"),slt.forEach(t),Wao=r(vye," \u2014 "),zP=n(vye,"A",{href:!0});var llt=s(zP);Hao=r(llt,"VisionTextDualEncoderConfig"),llt.forEach(t),Uao=r(vye," (VisionTextDualEncoder model)"),vye.forEach(t),Jao=i(L),jg=n(L,"LI",{});var Fye=s(jg);Vse=n(Fye,"STRONG",{});var ilt=s(Vse);Yao=r(ilt,"visual_bert"),ilt.forEach(t),Kao=r(Fye," \u2014 "),QP=n(Fye,"A",{href:!0});var dlt=s(QP);Zao=r(dlt,"VisualBertConfig"),dlt.forEach(t),eno=r(Fye," (VisualBERT model)"),Fye.forEach(t),ono=i(L),Dg=n(L,"LI",{});var Tye=s(Dg);Xse=n(Tye,"STRONG",{});var clt=s(Xse);rno=r(clt,"vit"),clt.forEach(t),tno=r(Tye," \u2014 "),WP=n(Tye,"A",{href:!0});var flt=s(WP);ano=r(flt,"ViTConfig"),flt.forEach(t),nno=r(Tye," (ViT model)"),Tye.forEach(t),sno=i(L),Gg=n(L,"LI",{});var Mye=s(Gg);zse=n(Mye,"STRONG",{});var mlt=s(zse);lno=r(mlt,"vit_mae"),mlt.forEach(t),ino=r(Mye," \u2014 "),HP=n(Mye,"A",{href:!0});var glt=s(HP);dno=r(glt,"ViTMAEConfig"),glt.forEach(t),cno=r(Mye," (ViTMAE model)"),Mye.forEach(t),fno=i(L),Og=n(L,"LI",{});var Eye=s(Og);Qse=n(Eye,"STRONG",{});var hlt=s(Qse);mno=r(hlt,"wav2vec2"),hlt.forEach(t),gno=r(Eye," \u2014 "),UP=n(Eye,"A",{href:!0});var plt=s(UP);hno=r(plt,"Wav2Vec2Config"),plt.forEach(t),pno=r(Eye," (Wav2Vec2 model)"),Eye.forEach(t),_no=i(L),Vg=n(L,"LI",{});var Cye=s(Vg);Wse=n(Cye,"STRONG",{});var _lt=s(Wse);uno=r(_lt,"wav2vec2-conformer"),_lt.forEach(t),bno=r(Cye," \u2014 "),JP=n(Cye,"A",{href:!0});var ult=s(JP);vno=r(ult,"Wav2Vec2ConformerConfig"),ult.forEach(t),Fno=r(Cye," (Wav2Vec2-Conformer model)"),Cye.forEach(t),Tno=i(L),Xg=n(L,"LI",{});var wye=s(Xg);Hse=n(wye,"STRONG",{});var blt=s(Hse);Mno=r(blt,"wavlm"),blt.forEach(t),Eno=r(wye," \u2014 "),YP=n(wye,"A",{href:!0});var vlt=s(YP);Cno=r(vlt,"WavLMConfig"),vlt.forEach(t),wno=r(wye," (WavLM model)"),wye.forEach(t),Ano=i(L),zg=n(L,"LI",{});var Aye=s(zg);Use=n(Aye,"STRONG",{});var Flt=s(Use);Lno=r(Flt,"xglm"),Flt.forEach(t),yno=r(Aye," \u2014 "),KP=n(Aye,"A",{href:!0});var Tlt=s(KP);xno=r(Tlt,"XGLMConfig"),Tlt.forEach(t),$no=r(Aye," (XGLM model)"),Aye.forEach(t),kno=i(L),Qg=n(L,"LI",{});var Lye=s(Qg);Jse=n(Lye,"STRONG",{});var Mlt=s(Jse);Sno=r(Mlt,"xlm"),Mlt.forEach(t),Rno=r(Lye," \u2014 "),ZP=n(Lye,"A",{href:!0});var Elt=s(ZP);Pno=r(Elt,"XLMConfig"),Elt.forEach(t),Bno=r(Lye," (XLM model)"),Lye.forEach(t),Nno=i(L),Wg=n(L,"LI",{});var yye=s(Wg);Yse=n(yye,"STRONG",{});var Clt=s(Yse);Ino=r(Clt,"xlm-prophetnet"),Clt.forEach(t),qno=r(yye," \u2014 "),eB=n(yye,"A",{href:!0});var wlt=s(eB);jno=r(wlt,"XLMProphetNetConfig"),wlt.forEach(t),Dno=r(yye," (XLM-ProphetNet model)"),yye.forEach(t),Gno=i(L),Hg=n(L,"LI",{});var xye=s(Hg);Kse=n(xye,"STRONG",{});var Alt=s(Kse);Ono=r(Alt,"xlm-roberta"),Alt.forEach(t),Vno=r(xye," \u2014 "),oB=n(xye,"A",{href:!0});var Llt=s(oB);Xno=r(Llt,"XLMRobertaConfig"),Llt.forEach(t),zno=r(xye," (XLM-RoBERTa model)"),xye.forEach(t),Qno=i(L),Ug=n(L,"LI",{});var $ye=s(Ug);Zse=n($ye,"STRONG",{});var ylt=s(Zse);Wno=r(ylt,"xlm-roberta-xl"),ylt.forEach(t),Hno=r($ye," \u2014 "),rB=n($ye,"A",{href:!0});var xlt=s(rB);Uno=r(xlt,"XLMRobertaXLConfig"),xlt.forEach(t),Jno=r($ye," (XLM-RoBERTa-XL model)"),$ye.forEach(t),Yno=i(L),Jg=n(L,"LI",{});var kye=s(Jg);ele=n(kye,"STRONG",{});var $lt=s(ele);Kno=r($lt,"xlnet"),$lt.forEach(t),Zno=r(kye," \u2014 "),tB=n(kye,"A",{href:!0});var klt=s(tB);eso=r(klt,"XLNetConfig"),klt.forEach(t),oso=r(kye," (XLNet model)"),kye.forEach(t),rso=i(L),Yg=n(L,"LI",{});var Sye=s(Yg);ole=n(Sye,"STRONG",{});var Slt=s(ole);tso=r(Slt,"yolos"),Slt.forEach(t),aso=r(Sye," \u2014 "),aB=n(Sye,"A",{href:!0});var Rlt=s(aB);nso=r(Rlt,"YolosConfig"),Rlt.forEach(t),sso=r(Sye," (YOLOS model)"),Sye.forEach(t),lso=i(L),Kg=n(L,"LI",{});var Rye=s(Kg);rle=n(Rye,"STRONG",{});var Plt=s(rle);iso=r(Plt,"yoso"),Plt.forEach(t),dso=r(Rye," \u2014 "),nB=n(Rye,"A",{href:!0});var Blt=s(nB);cso=r(Blt,"YosoConfig"),Blt.forEach(t),fso=r(Rye," (YOSO model)"),Rye.forEach(t),L.forEach(t),mso=i(st),T(Zg.$$.fragment,st),st.forEach(t),gso=i(nt),eh=n(nt,"DIV",{class:!0});var yQe=s(eh);T(uL.$$.fragment,yQe),hso=i(yQe),tle=n(yQe,"P",{});var Nlt=s(tle);pso=r(Nlt,"Register a new configuration for this class."),Nlt.forEach(t),yQe.forEach(t),nt.forEach(t),xXe=i(f),qi=n(f,"H2",{class:!0});var xQe=s(qi);oh=n(xQe,"A",{id:!0,class:!0,href:!0});var Ilt=s(oh);ale=n(Ilt,"SPAN",{});var qlt=s(ale);T(bL.$$.fragment,qlt),qlt.forEach(t),Ilt.forEach(t),_so=i(xQe),nle=n(xQe,"SPAN",{});var jlt=s(nle);uso=r(jlt,"AutoTokenizer"),jlt.forEach(t),xQe.forEach(t),$Xe=i(f),Lo=n(f,"DIV",{class:!0});var Zs=s(Lo);T(vL.$$.fragment,Zs),bso=i(Zs),FL=n(Zs,"P",{});var $Qe=s(FL);vso=r($Qe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sB=n($Qe,"A",{href:!0});var Dlt=s(sB);Fso=r(Dlt,"AutoTokenizer.from_pretrained()"),Dlt.forEach(t),Tso=r($Qe," class method."),$Qe.forEach(t),Mso=i(Zs),TL=n(Zs,"P",{});var kQe=s(TL);Eso=r(kQe,"This class cannot be instantiated directly using "),sle=n(kQe,"CODE",{});var Glt=s(sle);Cso=r(Glt,"__init__()"),Glt.forEach(t),wso=r(kQe," (throws an error)."),kQe.forEach(t),Aso=i(Zs),yr=n(Zs,"DIV",{class:!0});var el=s(yr);T(ML.$$.fragment,el),Lso=i(el),lle=n(el,"P",{});var Olt=s(lle);yso=r(Olt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Olt.forEach(t),xso=i(el),Pa=n(el,"P",{});var mw=s(Pa);$so=r(mw,"The tokenizer class to instantiate is selected based on the "),ile=n(mw,"CODE",{});var Vlt=s(ile);kso=r(Vlt,"model_type"),Vlt.forEach(t),Sso=r(mw,` property of the config object (either
passed as an argument or loaded from `),dle=n(mw,"CODE",{});var Xlt=s(dle);Rso=r(Xlt,"pretrained_model_name_or_path"),Xlt.forEach(t),Pso=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cle=n(mw,"CODE",{});var zlt=s(cle);Bso=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),Nso=r(mw,":"),mw.forEach(t),Iso=i(el),k=n(el,"UL",{});var S=s(k);jn=n(S,"LI",{});var yk=s(jn);fle=n(yk,"STRONG",{});var Qlt=s(fle);qso=r(Qlt,"albert"),Qlt.forEach(t),jso=r(yk," \u2014 "),lB=n(yk,"A",{href:!0});var Wlt=s(lB);Dso=r(Wlt,"AlbertTokenizer"),Wlt.forEach(t),Gso=r(yk," or "),iB=n(yk,"A",{href:!0});var Hlt=s(iB);Oso=r(Hlt,"AlbertTokenizerFast"),Hlt.forEach(t),Vso=r(yk," (ALBERT model)"),yk.forEach(t),Xso=i(S),Dn=n(S,"LI",{});var xk=s(Dn);mle=n(xk,"STRONG",{});var Ult=s(mle);zso=r(Ult,"bart"),Ult.forEach(t),Qso=r(xk," \u2014 "),dB=n(xk,"A",{href:!0});var Jlt=s(dB);Wso=r(Jlt,"BartTokenizer"),Jlt.forEach(t),Hso=r(xk," or "),cB=n(xk,"A",{href:!0});var Ylt=s(cB);Uso=r(Ylt,"BartTokenizerFast"),Ylt.forEach(t),Jso=r(xk," (BART model)"),xk.forEach(t),Yso=i(S),Gn=n(S,"LI",{});var $k=s(Gn);gle=n($k,"STRONG",{});var Klt=s(gle);Kso=r(Klt,"barthez"),Klt.forEach(t),Zso=r($k," \u2014 "),fB=n($k,"A",{href:!0});var Zlt=s(fB);elo=r(Zlt,"BarthezTokenizer"),Zlt.forEach(t),olo=r($k," or "),mB=n($k,"A",{href:!0});var eit=s(mB);rlo=r(eit,"BarthezTokenizerFast"),eit.forEach(t),tlo=r($k," (BARThez model)"),$k.forEach(t),alo=i(S),rh=n(S,"LI",{});var Pye=s(rh);hle=n(Pye,"STRONG",{});var oit=s(hle);nlo=r(oit,"bartpho"),oit.forEach(t),slo=r(Pye," \u2014 "),gB=n(Pye,"A",{href:!0});var rit=s(gB);llo=r(rit,"BartphoTokenizer"),rit.forEach(t),ilo=r(Pye," (BARTpho model)"),Pye.forEach(t),dlo=i(S),On=n(S,"LI",{});var kk=s(On);ple=n(kk,"STRONG",{});var tit=s(ple);clo=r(tit,"bert"),tit.forEach(t),flo=r(kk," \u2014 "),hB=n(kk,"A",{href:!0});var ait=s(hB);mlo=r(ait,"BertTokenizer"),ait.forEach(t),glo=r(kk," or "),pB=n(kk,"A",{href:!0});var nit=s(pB);hlo=r(nit,"BertTokenizerFast"),nit.forEach(t),plo=r(kk," (BERT model)"),kk.forEach(t),_lo=i(S),th=n(S,"LI",{});var Bye=s(th);_le=n(Bye,"STRONG",{});var sit=s(_le);ulo=r(sit,"bert-generation"),sit.forEach(t),blo=r(Bye," \u2014 "),_B=n(Bye,"A",{href:!0});var lit=s(_B);vlo=r(lit,"BertGenerationTokenizer"),lit.forEach(t),Flo=r(Bye," (Bert Generation model)"),Bye.forEach(t),Tlo=i(S),ah=n(S,"LI",{});var Nye=s(ah);ule=n(Nye,"STRONG",{});var iit=s(ule);Mlo=r(iit,"bert-japanese"),iit.forEach(t),Elo=r(Nye," \u2014 "),uB=n(Nye,"A",{href:!0});var dit=s(uB);Clo=r(dit,"BertJapaneseTokenizer"),dit.forEach(t),wlo=r(Nye," (BertJapanese model)"),Nye.forEach(t),Alo=i(S),nh=n(S,"LI",{});var Iye=s(nh);ble=n(Iye,"STRONG",{});var cit=s(ble);Llo=r(cit,"bertweet"),cit.forEach(t),ylo=r(Iye," \u2014 "),bB=n(Iye,"A",{href:!0});var fit=s(bB);xlo=r(fit,"BertweetTokenizer"),fit.forEach(t),$lo=r(Iye," (BERTweet model)"),Iye.forEach(t),klo=i(S),Vn=n(S,"LI",{});var Sk=s(Vn);vle=n(Sk,"STRONG",{});var mit=s(vle);Slo=r(mit,"big_bird"),mit.forEach(t),Rlo=r(Sk," \u2014 "),vB=n(Sk,"A",{href:!0});var git=s(vB);Plo=r(git,"BigBirdTokenizer"),git.forEach(t),Blo=r(Sk," or "),FB=n(Sk,"A",{href:!0});var hit=s(FB);Nlo=r(hit,"BigBirdTokenizerFast"),hit.forEach(t),Ilo=r(Sk," (BigBird model)"),Sk.forEach(t),qlo=i(S),Xn=n(S,"LI",{});var Rk=s(Xn);Fle=n(Rk,"STRONG",{});var pit=s(Fle);jlo=r(pit,"bigbird_pegasus"),pit.forEach(t),Dlo=r(Rk," \u2014 "),TB=n(Rk,"A",{href:!0});var _it=s(TB);Glo=r(_it,"PegasusTokenizer"),_it.forEach(t),Olo=r(Rk," or "),MB=n(Rk,"A",{href:!0});var uit=s(MB);Vlo=r(uit,"PegasusTokenizerFast"),uit.forEach(t),Xlo=r(Rk," (BigBird-Pegasus model)"),Rk.forEach(t),zlo=i(S),zn=n(S,"LI",{});var Pk=s(zn);Tle=n(Pk,"STRONG",{});var bit=s(Tle);Qlo=r(bit,"blenderbot"),bit.forEach(t),Wlo=r(Pk," \u2014 "),EB=n(Pk,"A",{href:!0});var vit=s(EB);Hlo=r(vit,"BlenderbotTokenizer"),vit.forEach(t),Ulo=r(Pk," or "),CB=n(Pk,"A",{href:!0});var Fit=s(CB);Jlo=r(Fit,"BlenderbotTokenizerFast"),Fit.forEach(t),Ylo=r(Pk," (Blenderbot model)"),Pk.forEach(t),Klo=i(S),sh=n(S,"LI",{});var qye=s(sh);Mle=n(qye,"STRONG",{});var Tit=s(Mle);Zlo=r(Tit,"blenderbot-small"),Tit.forEach(t),eio=r(qye," \u2014 "),wB=n(qye,"A",{href:!0});var Mit=s(wB);oio=r(Mit,"BlenderbotSmallTokenizer"),Mit.forEach(t),rio=r(qye," (BlenderbotSmall model)"),qye.forEach(t),tio=i(S),lh=n(S,"LI",{});var jye=s(lh);Ele=n(jye,"STRONG",{});var Eit=s(Ele);aio=r(Eit,"bloom"),Eit.forEach(t),nio=r(jye," \u2014 "),AB=n(jye,"A",{href:!0});var Cit=s(AB);sio=r(Cit,"BloomTokenizerFast"),Cit.forEach(t),lio=r(jye," (BLOOM model)"),jye.forEach(t),iio=i(S),ih=n(S,"LI",{});var Dye=s(ih);Cle=n(Dye,"STRONG",{});var wit=s(Cle);dio=r(wit,"byt5"),wit.forEach(t),cio=r(Dye," \u2014 "),LB=n(Dye,"A",{href:!0});var Ait=s(LB);fio=r(Ait,"ByT5Tokenizer"),Ait.forEach(t),mio=r(Dye," (ByT5 model)"),Dye.forEach(t),gio=i(S),Qn=n(S,"LI",{});var Bk=s(Qn);wle=n(Bk,"STRONG",{});var Lit=s(wle);hio=r(Lit,"camembert"),Lit.forEach(t),pio=r(Bk," \u2014 "),yB=n(Bk,"A",{href:!0});var yit=s(yB);_io=r(yit,"CamembertTokenizer"),yit.forEach(t),uio=r(Bk," or "),xB=n(Bk,"A",{href:!0});var xit=s(xB);bio=r(xit,"CamembertTokenizerFast"),xit.forEach(t),vio=r(Bk," (CamemBERT model)"),Bk.forEach(t),Fio=i(S),dh=n(S,"LI",{});var Gye=s(dh);Ale=n(Gye,"STRONG",{});var $it=s(Ale);Tio=r($it,"canine"),$it.forEach(t),Mio=r(Gye," \u2014 "),$B=n(Gye,"A",{href:!0});var kit=s($B);Eio=r(kit,"CanineTokenizer"),kit.forEach(t),Cio=r(Gye," (CANINE model)"),Gye.forEach(t),wio=i(S),Wn=n(S,"LI",{});var Nk=s(Wn);Lle=n(Nk,"STRONG",{});var Sit=s(Lle);Aio=r(Sit,"clip"),Sit.forEach(t),Lio=r(Nk," \u2014 "),kB=n(Nk,"A",{href:!0});var Rit=s(kB);yio=r(Rit,"CLIPTokenizer"),Rit.forEach(t),xio=r(Nk," or "),SB=n(Nk,"A",{href:!0});var Pit=s(SB);$io=r(Pit,"CLIPTokenizerFast"),Pit.forEach(t),kio=r(Nk," (CLIP model)"),Nk.forEach(t),Sio=i(S),Hn=n(S,"LI",{});var Ik=s(Hn);yle=n(Ik,"STRONG",{});var Bit=s(yle);Rio=r(Bit,"codegen"),Bit.forEach(t),Pio=r(Ik," \u2014 "),RB=n(Ik,"A",{href:!0});var Nit=s(RB);Bio=r(Nit,"CodeGenTokenizer"),Nit.forEach(t),Nio=r(Ik," or "),PB=n(Ik,"A",{href:!0});var Iit=s(PB);Iio=r(Iit,"CodeGenTokenizerFast"),Iit.forEach(t),qio=r(Ik," (CodeGen model)"),Ik.forEach(t),jio=i(S),Un=n(S,"LI",{});var qk=s(Un);xle=n(qk,"STRONG",{});var qit=s(xle);Dio=r(qit,"convbert"),qit.forEach(t),Gio=r(qk," \u2014 "),BB=n(qk,"A",{href:!0});var jit=s(BB);Oio=r(jit,"ConvBertTokenizer"),jit.forEach(t),Vio=r(qk," or "),NB=n(qk,"A",{href:!0});var Dit=s(NB);Xio=r(Dit,"ConvBertTokenizerFast"),Dit.forEach(t),zio=r(qk," (ConvBERT model)"),qk.forEach(t),Qio=i(S),Jn=n(S,"LI",{});var jk=s(Jn);$le=n(jk,"STRONG",{});var Git=s($le);Wio=r(Git,"cpm"),Git.forEach(t),Hio=r(jk," \u2014 "),IB=n(jk,"A",{href:!0});var Oit=s(IB);Uio=r(Oit,"CpmTokenizer"),Oit.forEach(t),Jio=r(jk," or "),qB=n(jk,"A",{href:!0});var Vit=s(qB);Yio=r(Vit,"CpmTokenizerFast"),Vit.forEach(t),Kio=r(jk," (CPM model)"),jk.forEach(t),Zio=i(S),ch=n(S,"LI",{});var Oye=s(ch);kle=n(Oye,"STRONG",{});var Xit=s(kle);edo=r(Xit,"ctrl"),Xit.forEach(t),odo=r(Oye," \u2014 "),jB=n(Oye,"A",{href:!0});var zit=s(jB);rdo=r(zit,"CTRLTokenizer"),zit.forEach(t),tdo=r(Oye," (CTRL model)"),Oye.forEach(t),ado=i(S),Yn=n(S,"LI",{});var Dk=s(Yn);Sle=n(Dk,"STRONG",{});var Qit=s(Sle);ndo=r(Qit,"data2vec-text"),Qit.forEach(t),sdo=r(Dk," \u2014 "),DB=n(Dk,"A",{href:!0});var Wit=s(DB);ldo=r(Wit,"RobertaTokenizer"),Wit.forEach(t),ido=r(Dk," or "),GB=n(Dk,"A",{href:!0});var Hit=s(GB);ddo=r(Hit,"RobertaTokenizerFast"),Hit.forEach(t),cdo=r(Dk," (Data2VecText model)"),Dk.forEach(t),fdo=i(S),Kn=n(S,"LI",{});var Gk=s(Kn);Rle=n(Gk,"STRONG",{});var Uit=s(Rle);mdo=r(Uit,"deberta"),Uit.forEach(t),gdo=r(Gk," \u2014 "),OB=n(Gk,"A",{href:!0});var Jit=s(OB);hdo=r(Jit,"DebertaTokenizer"),Jit.forEach(t),pdo=r(Gk," or "),VB=n(Gk,"A",{href:!0});var Yit=s(VB);_do=r(Yit,"DebertaTokenizerFast"),Yit.forEach(t),udo=r(Gk," (DeBERTa model)"),Gk.forEach(t),bdo=i(S),Zn=n(S,"LI",{});var Ok=s(Zn);Ple=n(Ok,"STRONG",{});var Kit=s(Ple);vdo=r(Kit,"deberta-v2"),Kit.forEach(t),Fdo=r(Ok," \u2014 "),XB=n(Ok,"A",{href:!0});var Zit=s(XB);Tdo=r(Zit,"DebertaV2Tokenizer"),Zit.forEach(t),Mdo=r(Ok," or "),zB=n(Ok,"A",{href:!0});var edt=s(zB);Edo=r(edt,"DebertaV2TokenizerFast"),edt.forEach(t),Cdo=r(Ok," (DeBERTa-v2 model)"),Ok.forEach(t),wdo=i(S),es=n(S,"LI",{});var Vk=s(es);Ble=n(Vk,"STRONG",{});var odt=s(Ble);Ado=r(odt,"distilbert"),odt.forEach(t),Ldo=r(Vk," \u2014 "),QB=n(Vk,"A",{href:!0});var rdt=s(QB);ydo=r(rdt,"DistilBertTokenizer"),rdt.forEach(t),xdo=r(Vk," or "),WB=n(Vk,"A",{href:!0});var tdt=s(WB);$do=r(tdt,"DistilBertTokenizerFast"),tdt.forEach(t),kdo=r(Vk," (DistilBERT model)"),Vk.forEach(t),Sdo=i(S),os=n(S,"LI",{});var Xk=s(os);Nle=n(Xk,"STRONG",{});var adt=s(Nle);Rdo=r(adt,"dpr"),adt.forEach(t),Pdo=r(Xk," \u2014 "),HB=n(Xk,"A",{href:!0});var ndt=s(HB);Bdo=r(ndt,"DPRQuestionEncoderTokenizer"),ndt.forEach(t),Ndo=r(Xk," or "),UB=n(Xk,"A",{href:!0});var sdt=s(UB);Ido=r(sdt,"DPRQuestionEncoderTokenizerFast"),sdt.forEach(t),qdo=r(Xk," (DPR model)"),Xk.forEach(t),jdo=i(S),rs=n(S,"LI",{});var zk=s(rs);Ile=n(zk,"STRONG",{});var ldt=s(Ile);Ddo=r(ldt,"electra"),ldt.forEach(t),Gdo=r(zk," \u2014 "),JB=n(zk,"A",{href:!0});var idt=s(JB);Odo=r(idt,"ElectraTokenizer"),idt.forEach(t),Vdo=r(zk," or "),YB=n(zk,"A",{href:!0});var ddt=s(YB);Xdo=r(ddt,"ElectraTokenizerFast"),ddt.forEach(t),zdo=r(zk," (ELECTRA model)"),zk.forEach(t),Qdo=i(S),fh=n(S,"LI",{});var Vye=s(fh);qle=n(Vye,"STRONG",{});var cdt=s(qle);Wdo=r(cdt,"flaubert"),cdt.forEach(t),Hdo=r(Vye," \u2014 "),KB=n(Vye,"A",{href:!0});var fdt=s(KB);Udo=r(fdt,"FlaubertTokenizer"),fdt.forEach(t),Jdo=r(Vye," (FlauBERT model)"),Vye.forEach(t),Ydo=i(S),ts=n(S,"LI",{});var Qk=s(ts);jle=n(Qk,"STRONG",{});var mdt=s(jle);Kdo=r(mdt,"fnet"),mdt.forEach(t),Zdo=r(Qk," \u2014 "),ZB=n(Qk,"A",{href:!0});var gdt=s(ZB);eco=r(gdt,"FNetTokenizer"),gdt.forEach(t),oco=r(Qk," or "),eN=n(Qk,"A",{href:!0});var hdt=s(eN);rco=r(hdt,"FNetTokenizerFast"),hdt.forEach(t),tco=r(Qk," (FNet model)"),Qk.forEach(t),aco=i(S),mh=n(S,"LI",{});var Xye=s(mh);Dle=n(Xye,"STRONG",{});var pdt=s(Dle);nco=r(pdt,"fsmt"),pdt.forEach(t),sco=r(Xye," \u2014 "),oN=n(Xye,"A",{href:!0});var _dt=s(oN);lco=r(_dt,"FSMTTokenizer"),_dt.forEach(t),ico=r(Xye," (FairSeq Machine-Translation model)"),Xye.forEach(t),dco=i(S),as=n(S,"LI",{});var Wk=s(as);Gle=n(Wk,"STRONG",{});var udt=s(Gle);cco=r(udt,"funnel"),udt.forEach(t),fco=r(Wk," \u2014 "),rN=n(Wk,"A",{href:!0});var bdt=s(rN);mco=r(bdt,"FunnelTokenizer"),bdt.forEach(t),gco=r(Wk," or "),tN=n(Wk,"A",{href:!0});var vdt=s(tN);hco=r(vdt,"FunnelTokenizerFast"),vdt.forEach(t),pco=r(Wk," (Funnel Transformer model)"),Wk.forEach(t),_co=i(S),ns=n(S,"LI",{});var Hk=s(ns);Ole=n(Hk,"STRONG",{});var Fdt=s(Ole);uco=r(Fdt,"gpt2"),Fdt.forEach(t),bco=r(Hk," \u2014 "),aN=n(Hk,"A",{href:!0});var Tdt=s(aN);vco=r(Tdt,"GPT2Tokenizer"),Tdt.forEach(t),Fco=r(Hk," or "),nN=n(Hk,"A",{href:!0});var Mdt=s(nN);Tco=r(Mdt,"GPT2TokenizerFast"),Mdt.forEach(t),Mco=r(Hk," (OpenAI GPT-2 model)"),Hk.forEach(t),Eco=i(S),ss=n(S,"LI",{});var Uk=s(ss);Vle=n(Uk,"STRONG",{});var Edt=s(Vle);Cco=r(Edt,"gpt_neo"),Edt.forEach(t),wco=r(Uk," \u2014 "),sN=n(Uk,"A",{href:!0});var Cdt=s(sN);Aco=r(Cdt,"GPT2Tokenizer"),Cdt.forEach(t),Lco=r(Uk," or "),lN=n(Uk,"A",{href:!0});var wdt=s(lN);yco=r(wdt,"GPT2TokenizerFast"),wdt.forEach(t),xco=r(Uk," (GPT Neo model)"),Uk.forEach(t),$co=i(S),gh=n(S,"LI",{});var zye=s(gh);Xle=n(zye,"STRONG",{});var Adt=s(Xle);kco=r(Adt,"gpt_neox"),Adt.forEach(t),Sco=r(zye," \u2014 "),iN=n(zye,"A",{href:!0});var Ldt=s(iN);Rco=r(Ldt,"GPTNeoXTokenizerFast"),Ldt.forEach(t),Pco=r(zye," (GPT NeoX model)"),zye.forEach(t),Bco=i(S),ls=n(S,"LI",{});var Jk=s(ls);zle=n(Jk,"STRONG",{});var ydt=s(zle);Nco=r(ydt,"gptj"),ydt.forEach(t),Ico=r(Jk," \u2014 "),dN=n(Jk,"A",{href:!0});var xdt=s(dN);qco=r(xdt,"GPT2Tokenizer"),xdt.forEach(t),jco=r(Jk," or "),cN=n(Jk,"A",{href:!0});var $dt=s(cN);Dco=r($dt,"GPT2TokenizerFast"),$dt.forEach(t),Gco=r(Jk," (GPT-J model)"),Jk.forEach(t),Oco=i(S),is=n(S,"LI",{});var Yk=s(is);Qle=n(Yk,"STRONG",{});var kdt=s(Qle);Vco=r(kdt,"groupvit"),kdt.forEach(t),Xco=r(Yk," \u2014 "),fN=n(Yk,"A",{href:!0});var Sdt=s(fN);zco=r(Sdt,"CLIPTokenizer"),Sdt.forEach(t),Qco=r(Yk," or "),mN=n(Yk,"A",{href:!0});var Rdt=s(mN);Wco=r(Rdt,"CLIPTokenizerFast"),Rdt.forEach(t),Hco=r(Yk," (GroupViT model)"),Yk.forEach(t),Uco=i(S),ds=n(S,"LI",{});var Kk=s(ds);Wle=n(Kk,"STRONG",{});var Pdt=s(Wle);Jco=r(Pdt,"herbert"),Pdt.forEach(t),Yco=r(Kk," \u2014 "),gN=n(Kk,"A",{href:!0});var Bdt=s(gN);Kco=r(Bdt,"HerbertTokenizer"),Bdt.forEach(t),Zco=r(Kk," or "),hN=n(Kk,"A",{href:!0});var Ndt=s(hN);efo=r(Ndt,"HerbertTokenizerFast"),Ndt.forEach(t),ofo=r(Kk," (HerBERT model)"),Kk.forEach(t),rfo=i(S),hh=n(S,"LI",{});var Qye=s(hh);Hle=n(Qye,"STRONG",{});var Idt=s(Hle);tfo=r(Idt,"hubert"),Idt.forEach(t),afo=r(Qye," \u2014 "),pN=n(Qye,"A",{href:!0});var qdt=s(pN);nfo=r(qdt,"Wav2Vec2CTCTokenizer"),qdt.forEach(t),sfo=r(Qye," (Hubert model)"),Qye.forEach(t),lfo=i(S),cs=n(S,"LI",{});var Zk=s(cs);Ule=n(Zk,"STRONG",{});var jdt=s(Ule);ifo=r(jdt,"ibert"),jdt.forEach(t),dfo=r(Zk," \u2014 "),_N=n(Zk,"A",{href:!0});var Ddt=s(_N);cfo=r(Ddt,"RobertaTokenizer"),Ddt.forEach(t),ffo=r(Zk," or "),uN=n(Zk,"A",{href:!0});var Gdt=s(uN);mfo=r(Gdt,"RobertaTokenizerFast"),Gdt.forEach(t),gfo=r(Zk," (I-BERT model)"),Zk.forEach(t),hfo=i(S),ph=n(S,"LI",{});var Wye=s(ph);Jle=n(Wye,"STRONG",{});var Odt=s(Jle);pfo=r(Odt,"jukebox"),Odt.forEach(t),_fo=r(Wye," \u2014 "),Yle=n(Wye,"CODE",{});var Vdt=s(Yle);ufo=r(Vdt,"JukeboxTokenizer"),Vdt.forEach(t),bfo=r(Wye," (Jukebox model)"),Wye.forEach(t),vfo=i(S),fs=n(S,"LI",{});var eS=s(fs);Kle=n(eS,"STRONG",{});var Xdt=s(Kle);Ffo=r(Xdt,"layoutlm"),Xdt.forEach(t),Tfo=r(eS," \u2014 "),bN=n(eS,"A",{href:!0});var zdt=s(bN);Mfo=r(zdt,"LayoutLMTokenizer"),zdt.forEach(t),Efo=r(eS," or "),vN=n(eS,"A",{href:!0});var Qdt=s(vN);Cfo=r(Qdt,"LayoutLMTokenizerFast"),Qdt.forEach(t),wfo=r(eS," (LayoutLM model)"),eS.forEach(t),Afo=i(S),ms=n(S,"LI",{});var oS=s(ms);Zle=n(oS,"STRONG",{});var Wdt=s(Zle);Lfo=r(Wdt,"layoutlmv2"),Wdt.forEach(t),yfo=r(oS," \u2014 "),FN=n(oS,"A",{href:!0});var Hdt=s(FN);xfo=r(Hdt,"LayoutLMv2Tokenizer"),Hdt.forEach(t),$fo=r(oS," or "),TN=n(oS,"A",{href:!0});var Udt=s(TN);kfo=r(Udt,"LayoutLMv2TokenizerFast"),Udt.forEach(t),Sfo=r(oS," (LayoutLMv2 model)"),oS.forEach(t),Rfo=i(S),gs=n(S,"LI",{});var rS=s(gs);eie=n(rS,"STRONG",{});var Jdt=s(eie);Pfo=r(Jdt,"layoutlmv3"),Jdt.forEach(t),Bfo=r(rS," \u2014 "),MN=n(rS,"A",{href:!0});var Ydt=s(MN);Nfo=r(Ydt,"LayoutLMv3Tokenizer"),Ydt.forEach(t),Ifo=r(rS," or "),EN=n(rS,"A",{href:!0});var Kdt=s(EN);qfo=r(Kdt,"LayoutLMv3TokenizerFast"),Kdt.forEach(t),jfo=r(rS," (LayoutLMv3 model)"),rS.forEach(t),Dfo=i(S),hs=n(S,"LI",{});var tS=s(hs);oie=n(tS,"STRONG",{});var Zdt=s(oie);Gfo=r(Zdt,"layoutxlm"),Zdt.forEach(t),Ofo=r(tS," \u2014 "),CN=n(tS,"A",{href:!0});var ect=s(CN);Vfo=r(ect,"LayoutXLMTokenizer"),ect.forEach(t),Xfo=r(tS," or "),wN=n(tS,"A",{href:!0});var oct=s(wN);zfo=r(oct,"LayoutXLMTokenizerFast"),oct.forEach(t),Qfo=r(tS," (LayoutXLM model)"),tS.forEach(t),Wfo=i(S),ps=n(S,"LI",{});var aS=s(ps);rie=n(aS,"STRONG",{});var rct=s(rie);Hfo=r(rct,"led"),rct.forEach(t),Ufo=r(aS," \u2014 "),AN=n(aS,"A",{href:!0});var tct=s(AN);Jfo=r(tct,"LEDTokenizer"),tct.forEach(t),Yfo=r(aS," or "),LN=n(aS,"A",{href:!0});var act=s(LN);Kfo=r(act,"LEDTokenizerFast"),act.forEach(t),Zfo=r(aS," (LED model)"),aS.forEach(t),emo=i(S),_s=n(S,"LI",{});var nS=s(_s);tie=n(nS,"STRONG",{});var nct=s(tie);omo=r(nct,"longformer"),nct.forEach(t),rmo=r(nS," \u2014 "),yN=n(nS,"A",{href:!0});var sct=s(yN);tmo=r(sct,"LongformerTokenizer"),sct.forEach(t),amo=r(nS," or "),xN=n(nS,"A",{href:!0});var lct=s(xN);nmo=r(lct,"LongformerTokenizerFast"),lct.forEach(t),smo=r(nS," (Longformer model)"),nS.forEach(t),lmo=i(S),us=n(S,"LI",{});var sS=s(us);aie=n(sS,"STRONG",{});var ict=s(aie);imo=r(ict,"longt5"),ict.forEach(t),dmo=r(sS," \u2014 "),$N=n(sS,"A",{href:!0});var dct=s($N);cmo=r(dct,"T5Tokenizer"),dct.forEach(t),fmo=r(sS," or "),kN=n(sS,"A",{href:!0});var cct=s(kN);mmo=r(cct,"T5TokenizerFast"),cct.forEach(t),gmo=r(sS," (LongT5 model)"),sS.forEach(t),hmo=i(S),_h=n(S,"LI",{});var Hye=s(_h);nie=n(Hye,"STRONG",{});var fct=s(nie);pmo=r(fct,"luke"),fct.forEach(t),_mo=r(Hye," \u2014 "),SN=n(Hye,"A",{href:!0});var mct=s(SN);umo=r(mct,"LukeTokenizer"),mct.forEach(t),bmo=r(Hye," (LUKE model)"),Hye.forEach(t),vmo=i(S),bs=n(S,"LI",{});var lS=s(bs);sie=n(lS,"STRONG",{});var gct=s(sie);Fmo=r(gct,"lxmert"),gct.forEach(t),Tmo=r(lS," \u2014 "),RN=n(lS,"A",{href:!0});var hct=s(RN);Mmo=r(hct,"LxmertTokenizer"),hct.forEach(t),Emo=r(lS," or "),PN=n(lS,"A",{href:!0});var pct=s(PN);Cmo=r(pct,"LxmertTokenizerFast"),pct.forEach(t),wmo=r(lS," (LXMERT model)"),lS.forEach(t),Amo=i(S),uh=n(S,"LI",{});var Uye=s(uh);lie=n(Uye,"STRONG",{});var _ct=s(lie);Lmo=r(_ct,"m2m_100"),_ct.forEach(t),ymo=r(Uye," \u2014 "),BN=n(Uye,"A",{href:!0});var uct=s(BN);xmo=r(uct,"M2M100Tokenizer"),uct.forEach(t),$mo=r(Uye," (M2M100 model)"),Uye.forEach(t),kmo=i(S),bh=n(S,"LI",{});var Jye=s(bh);iie=n(Jye,"STRONG",{});var bct=s(iie);Smo=r(bct,"marian"),bct.forEach(t),Rmo=r(Jye," \u2014 "),NN=n(Jye,"A",{href:!0});var vct=s(NN);Pmo=r(vct,"MarianTokenizer"),vct.forEach(t),Bmo=r(Jye," (Marian model)"),Jye.forEach(t),Nmo=i(S),vs=n(S,"LI",{});var iS=s(vs);die=n(iS,"STRONG",{});var Fct=s(die);Imo=r(Fct,"mbart"),Fct.forEach(t),qmo=r(iS," \u2014 "),IN=n(iS,"A",{href:!0});var Tct=s(IN);jmo=r(Tct,"MBartTokenizer"),Tct.forEach(t),Dmo=r(iS," or "),qN=n(iS,"A",{href:!0});var Mct=s(qN);Gmo=r(Mct,"MBartTokenizerFast"),Mct.forEach(t),Omo=r(iS," (mBART model)"),iS.forEach(t),Vmo=i(S),Fs=n(S,"LI",{});var dS=s(Fs);cie=n(dS,"STRONG",{});var Ect=s(cie);Xmo=r(Ect,"mbart50"),Ect.forEach(t),zmo=r(dS," \u2014 "),jN=n(dS,"A",{href:!0});var Cct=s(jN);Qmo=r(Cct,"MBart50Tokenizer"),Cct.forEach(t),Wmo=r(dS," or "),DN=n(dS,"A",{href:!0});var wct=s(DN);Hmo=r(wct,"MBart50TokenizerFast"),wct.forEach(t),Umo=r(dS," (mBART-50 model)"),dS.forEach(t),Jmo=i(S),Ts=n(S,"LI",{});var cS=s(Ts);fie=n(cS,"STRONG",{});var Act=s(fie);Ymo=r(Act,"megatron-bert"),Act.forEach(t),Kmo=r(cS," \u2014 "),GN=n(cS,"A",{href:!0});var Lct=s(GN);Zmo=r(Lct,"BertTokenizer"),Lct.forEach(t),ego=r(cS," or "),ON=n(cS,"A",{href:!0});var yct=s(ON);ogo=r(yct,"BertTokenizerFast"),yct.forEach(t),rgo=r(cS," (Megatron-BERT model)"),cS.forEach(t),tgo=i(S),vh=n(S,"LI",{});var Yye=s(vh);mie=n(Yye,"STRONG",{});var xct=s(mie);ago=r(xct,"mluke"),xct.forEach(t),ngo=r(Yye," \u2014 "),VN=n(Yye,"A",{href:!0});var $ct=s(VN);sgo=r($ct,"MLukeTokenizer"),$ct.forEach(t),lgo=r(Yye," (mLUKE model)"),Yye.forEach(t),igo=i(S),Ms=n(S,"LI",{});var fS=s(Ms);gie=n(fS,"STRONG",{});var kct=s(gie);dgo=r(kct,"mobilebert"),kct.forEach(t),cgo=r(fS," \u2014 "),XN=n(fS,"A",{href:!0});var Sct=s(XN);fgo=r(Sct,"MobileBertTokenizer"),Sct.forEach(t),mgo=r(fS," or "),zN=n(fS,"A",{href:!0});var Rct=s(zN);ggo=r(Rct,"MobileBertTokenizerFast"),Rct.forEach(t),hgo=r(fS," (MobileBERT model)"),fS.forEach(t),pgo=i(S),Es=n(S,"LI",{});var mS=s(Es);hie=n(mS,"STRONG",{});var Pct=s(hie);_go=r(Pct,"mpnet"),Pct.forEach(t),ugo=r(mS," \u2014 "),QN=n(mS,"A",{href:!0});var Bct=s(QN);bgo=r(Bct,"MPNetTokenizer"),Bct.forEach(t),vgo=r(mS," or "),WN=n(mS,"A",{href:!0});var Nct=s(WN);Fgo=r(Nct,"MPNetTokenizerFast"),Nct.forEach(t),Tgo=r(mS," (MPNet model)"),mS.forEach(t),Mgo=i(S),Cs=n(S,"LI",{});var gS=s(Cs);pie=n(gS,"STRONG",{});var Ict=s(pie);Ego=r(Ict,"mt5"),Ict.forEach(t),Cgo=r(gS," \u2014 "),HN=n(gS,"A",{href:!0});var qct=s(HN);wgo=r(qct,"MT5Tokenizer"),qct.forEach(t),Ago=r(gS," or "),UN=n(gS,"A",{href:!0});var jct=s(UN);Lgo=r(jct,"MT5TokenizerFast"),jct.forEach(t),ygo=r(gS," (MT5 model)"),gS.forEach(t),xgo=i(S),ws=n(S,"LI",{});var hS=s(ws);_ie=n(hS,"STRONG",{});var Dct=s(_ie);$go=r(Dct,"mvp"),Dct.forEach(t),kgo=r(hS," \u2014 "),JN=n(hS,"A",{href:!0});var Gct=s(JN);Sgo=r(Gct,"MvpTokenizer"),Gct.forEach(t),Rgo=r(hS," or "),YN=n(hS,"A",{href:!0});var Oct=s(YN);Pgo=r(Oct,"MvpTokenizerFast"),Oct.forEach(t),Bgo=r(hS," (MVP model)"),hS.forEach(t),Ngo=i(S),As=n(S,"LI",{});var pS=s(As);uie=n(pS,"STRONG",{});var Vct=s(uie);Igo=r(Vct,"nezha"),Vct.forEach(t),qgo=r(pS," \u2014 "),KN=n(pS,"A",{href:!0});var Xct=s(KN);jgo=r(Xct,"BertTokenizer"),Xct.forEach(t),Dgo=r(pS," or "),ZN=n(pS,"A",{href:!0});var zct=s(ZN);Ggo=r(zct,"BertTokenizerFast"),zct.forEach(t),Ogo=r(pS," (Nezha model)"),pS.forEach(t),Vgo=i(S),Ls=n(S,"LI",{});var _S=s(Ls);bie=n(_S,"STRONG",{});var Qct=s(bie);Xgo=r(Qct,"nllb"),Qct.forEach(t),zgo=r(_S," \u2014 "),eI=n(_S,"A",{href:!0});var Wct=s(eI);Qgo=r(Wct,"NllbTokenizer"),Wct.forEach(t),Wgo=r(_S," or "),oI=n(_S,"A",{href:!0});var Hct=s(oI);Hgo=r(Hct,"NllbTokenizerFast"),Hct.forEach(t),Ugo=r(_S," (NLLB model)"),_S.forEach(t),Jgo=i(S),ys=n(S,"LI",{});var uS=s(ys);vie=n(uS,"STRONG",{});var Uct=s(vie);Ygo=r(Uct,"nystromformer"),Uct.forEach(t),Kgo=r(uS," \u2014 "),rI=n(uS,"A",{href:!0});var Jct=s(rI);Zgo=r(Jct,"AlbertTokenizer"),Jct.forEach(t),eho=r(uS," or "),tI=n(uS,"A",{href:!0});var Yct=s(tI);oho=r(Yct,"AlbertTokenizerFast"),Yct.forEach(t),rho=r(uS," (Nystr\xF6mformer model)"),uS.forEach(t),tho=i(S),xs=n(S,"LI",{});var bS=s(xs);Fie=n(bS,"STRONG",{});var Kct=s(Fie);aho=r(Kct,"openai-gpt"),Kct.forEach(t),nho=r(bS," \u2014 "),aI=n(bS,"A",{href:!0});var Zct=s(aI);sho=r(Zct,"OpenAIGPTTokenizer"),Zct.forEach(t),lho=r(bS," or "),nI=n(bS,"A",{href:!0});var eft=s(nI);iho=r(eft,"OpenAIGPTTokenizerFast"),eft.forEach(t),dho=r(bS," (OpenAI GPT model)"),bS.forEach(t),cho=i(S),Fh=n(S,"LI",{});var Kye=s(Fh);Tie=n(Kye,"STRONG",{});var oft=s(Tie);fho=r(oft,"opt"),oft.forEach(t),mho=r(Kye," \u2014 "),sI=n(Kye,"A",{href:!0});var rft=s(sI);gho=r(rft,"GPT2Tokenizer"),rft.forEach(t),hho=r(Kye," (OPT model)"),Kye.forEach(t),pho=i(S),$s=n(S,"LI",{});var vS=s($s);Mie=n(vS,"STRONG",{});var tft=s(Mie);_ho=r(tft,"pegasus"),tft.forEach(t),uho=r(vS," \u2014 "),lI=n(vS,"A",{href:!0});var aft=s(lI);bho=r(aft,"PegasusTokenizer"),aft.forEach(t),vho=r(vS," or "),iI=n(vS,"A",{href:!0});var nft=s(iI);Fho=r(nft,"PegasusTokenizerFast"),nft.forEach(t),Tho=r(vS," (Pegasus model)"),vS.forEach(t),Mho=i(S),Th=n(S,"LI",{});var Zye=s(Th);Eie=n(Zye,"STRONG",{});var sft=s(Eie);Eho=r(sft,"perceiver"),sft.forEach(t),Cho=r(Zye," \u2014 "),dI=n(Zye,"A",{href:!0});var lft=s(dI);who=r(lft,"PerceiverTokenizer"),lft.forEach(t),Aho=r(Zye," (Perceiver model)"),Zye.forEach(t),Lho=i(S),Mh=n(S,"LI",{});var e9e=s(Mh);Cie=n(e9e,"STRONG",{});var ift=s(Cie);yho=r(ift,"phobert"),ift.forEach(t),xho=r(e9e," \u2014 "),cI=n(e9e,"A",{href:!0});var dft=s(cI);$ho=r(dft,"PhobertTokenizer"),dft.forEach(t),kho=r(e9e," (PhoBERT model)"),e9e.forEach(t),Sho=i(S),Eh=n(S,"LI",{});var o9e=s(Eh);wie=n(o9e,"STRONG",{});var cft=s(wie);Rho=r(cft,"plbart"),cft.forEach(t),Pho=r(o9e," \u2014 "),fI=n(o9e,"A",{href:!0});var fft=s(fI);Bho=r(fft,"PLBartTokenizer"),fft.forEach(t),Nho=r(o9e," (PLBart model)"),o9e.forEach(t),Iho=i(S),Ch=n(S,"LI",{});var r9e=s(Ch);Aie=n(r9e,"STRONG",{});var mft=s(Aie);qho=r(mft,"prophetnet"),mft.forEach(t),jho=r(r9e," \u2014 "),mI=n(r9e,"A",{href:!0});var gft=s(mI);Dho=r(gft,"ProphetNetTokenizer"),gft.forEach(t),Gho=r(r9e," (ProphetNet model)"),r9e.forEach(t),Oho=i(S),ks=n(S,"LI",{});var FS=s(ks);Lie=n(FS,"STRONG",{});var hft=s(Lie);Vho=r(hft,"qdqbert"),hft.forEach(t),Xho=r(FS," \u2014 "),gI=n(FS,"A",{href:!0});var pft=s(gI);zho=r(pft,"BertTokenizer"),pft.forEach(t),Qho=r(FS," or "),hI=n(FS,"A",{href:!0});var _ft=s(hI);Who=r(_ft,"BertTokenizerFast"),_ft.forEach(t),Hho=r(FS," (QDQBert model)"),FS.forEach(t),Uho=i(S),wh=n(S,"LI",{});var t9e=s(wh);yie=n(t9e,"STRONG",{});var uft=s(yie);Jho=r(uft,"rag"),uft.forEach(t),Yho=r(t9e," \u2014 "),pI=n(t9e,"A",{href:!0});var bft=s(pI);Kho=r(bft,"RagTokenizer"),bft.forEach(t),Zho=r(t9e," (RAG model)"),t9e.forEach(t),epo=i(S),Ss=n(S,"LI",{});var TS=s(Ss);xie=n(TS,"STRONG",{});var vft=s(xie);opo=r(vft,"realm"),vft.forEach(t),rpo=r(TS," \u2014 "),_I=n(TS,"A",{href:!0});var Fft=s(_I);tpo=r(Fft,"RealmTokenizer"),Fft.forEach(t),apo=r(TS," or "),uI=n(TS,"A",{href:!0});var Tft=s(uI);npo=r(Tft,"RealmTokenizerFast"),Tft.forEach(t),spo=r(TS," (REALM model)"),TS.forEach(t),lpo=i(S),Rs=n(S,"LI",{});var MS=s(Rs);$ie=n(MS,"STRONG",{});var Mft=s($ie);ipo=r(Mft,"reformer"),Mft.forEach(t),dpo=r(MS," \u2014 "),bI=n(MS,"A",{href:!0});var Eft=s(bI);cpo=r(Eft,"ReformerTokenizer"),Eft.forEach(t),fpo=r(MS," or "),vI=n(MS,"A",{href:!0});var Cft=s(vI);mpo=r(Cft,"ReformerTokenizerFast"),Cft.forEach(t),gpo=r(MS," (Reformer model)"),MS.forEach(t),hpo=i(S),Ps=n(S,"LI",{});var ES=s(Ps);kie=n(ES,"STRONG",{});var wft=s(kie);ppo=r(wft,"rembert"),wft.forEach(t),_po=r(ES," \u2014 "),FI=n(ES,"A",{href:!0});var Aft=s(FI);upo=r(Aft,"RemBertTokenizer"),Aft.forEach(t),bpo=r(ES," or "),TI=n(ES,"A",{href:!0});var Lft=s(TI);vpo=r(Lft,"RemBertTokenizerFast"),Lft.forEach(t),Fpo=r(ES," (RemBERT model)"),ES.forEach(t),Tpo=i(S),Bs=n(S,"LI",{});var CS=s(Bs);Sie=n(CS,"STRONG",{});var yft=s(Sie);Mpo=r(yft,"retribert"),yft.forEach(t),Epo=r(CS," \u2014 "),MI=n(CS,"A",{href:!0});var xft=s(MI);Cpo=r(xft,"RetriBertTokenizer"),xft.forEach(t),wpo=r(CS," or "),EI=n(CS,"A",{href:!0});var $ft=s(EI);Apo=r($ft,"RetriBertTokenizerFast"),$ft.forEach(t),Lpo=r(CS," (RetriBERT model)"),CS.forEach(t),ypo=i(S),Ns=n(S,"LI",{});var wS=s(Ns);Rie=n(wS,"STRONG",{});var kft=s(Rie);xpo=r(kft,"roberta"),kft.forEach(t),$po=r(wS," \u2014 "),CI=n(wS,"A",{href:!0});var Sft=s(CI);kpo=r(Sft,"RobertaTokenizer"),Sft.forEach(t),Spo=r(wS," or "),wI=n(wS,"A",{href:!0});var Rft=s(wI);Rpo=r(Rft,"RobertaTokenizerFast"),Rft.forEach(t),Ppo=r(wS," (RoBERTa model)"),wS.forEach(t),Bpo=i(S),Is=n(S,"LI",{});var AS=s(Is);Pie=n(AS,"STRONG",{});var Pft=s(Pie);Npo=r(Pft,"roformer"),Pft.forEach(t),Ipo=r(AS," \u2014 "),AI=n(AS,"A",{href:!0});var Bft=s(AI);qpo=r(Bft,"RoFormerTokenizer"),Bft.forEach(t),jpo=r(AS," or "),LI=n(AS,"A",{href:!0});var Nft=s(LI);Dpo=r(Nft,"RoFormerTokenizerFast"),Nft.forEach(t),Gpo=r(AS," (RoFormer model)"),AS.forEach(t),Opo=i(S),Ah=n(S,"LI",{});var a9e=s(Ah);Bie=n(a9e,"STRONG",{});var Ift=s(Bie);Vpo=r(Ift,"speech_to_text"),Ift.forEach(t),Xpo=r(a9e," \u2014 "),yI=n(a9e,"A",{href:!0});var qft=s(yI);zpo=r(qft,"Speech2TextTokenizer"),qft.forEach(t),Qpo=r(a9e," (Speech2Text model)"),a9e.forEach(t),Wpo=i(S),Lh=n(S,"LI",{});var n9e=s(Lh);Nie=n(n9e,"STRONG",{});var jft=s(Nie);Hpo=r(jft,"speech_to_text_2"),jft.forEach(t),Upo=r(n9e," \u2014 "),xI=n(n9e,"A",{href:!0});var Dft=s(xI);Jpo=r(Dft,"Speech2Text2Tokenizer"),Dft.forEach(t),Ypo=r(n9e," (Speech2Text2 model)"),n9e.forEach(t),Kpo=i(S),qs=n(S,"LI",{});var LS=s(qs);Iie=n(LS,"STRONG",{});var Gft=s(Iie);Zpo=r(Gft,"splinter"),Gft.forEach(t),e_o=r(LS," \u2014 "),$I=n(LS,"A",{href:!0});var Oft=s($I);o_o=r(Oft,"SplinterTokenizer"),Oft.forEach(t),r_o=r(LS," or "),kI=n(LS,"A",{href:!0});var Vft=s(kI);t_o=r(Vft,"SplinterTokenizerFast"),Vft.forEach(t),a_o=r(LS," (Splinter model)"),LS.forEach(t),n_o=i(S),js=n(S,"LI",{});var yS=s(js);qie=n(yS,"STRONG",{});var Xft=s(qie);s_o=r(Xft,"squeezebert"),Xft.forEach(t),l_o=r(yS," \u2014 "),SI=n(yS,"A",{href:!0});var zft=s(SI);i_o=r(zft,"SqueezeBertTokenizer"),zft.forEach(t),d_o=r(yS," or "),RI=n(yS,"A",{href:!0});var Qft=s(RI);c_o=r(Qft,"SqueezeBertTokenizerFast"),Qft.forEach(t),f_o=r(yS," (SqueezeBERT model)"),yS.forEach(t),m_o=i(S),Ds=n(S,"LI",{});var xS=s(Ds);jie=n(xS,"STRONG",{});var Wft=s(jie);g_o=r(Wft,"t5"),Wft.forEach(t),h_o=r(xS," \u2014 "),PI=n(xS,"A",{href:!0});var Hft=s(PI);p_o=r(Hft,"T5Tokenizer"),Hft.forEach(t),__o=r(xS," or "),BI=n(xS,"A",{href:!0});var Uft=s(BI);u_o=r(Uft,"T5TokenizerFast"),Uft.forEach(t),b_o=r(xS," (T5 model)"),xS.forEach(t),v_o=i(S),yh=n(S,"LI",{});var s9e=s(yh);Die=n(s9e,"STRONG",{});var Jft=s(Die);F_o=r(Jft,"tapas"),Jft.forEach(t),T_o=r(s9e," \u2014 "),NI=n(s9e,"A",{href:!0});var Yft=s(NI);M_o=r(Yft,"TapasTokenizer"),Yft.forEach(t),E_o=r(s9e," (TAPAS model)"),s9e.forEach(t),C_o=i(S),xh=n(S,"LI",{});var l9e=s(xh);Gie=n(l9e,"STRONG",{});var Kft=s(Gie);w_o=r(Kft,"tapex"),Kft.forEach(t),A_o=r(l9e," \u2014 "),II=n(l9e,"A",{href:!0});var Zft=s(II);L_o=r(Zft,"TapexTokenizer"),Zft.forEach(t),y_o=r(l9e," (TAPEX model)"),l9e.forEach(t),x_o=i(S),$h=n(S,"LI",{});var i9e=s($h);Oie=n(i9e,"STRONG",{});var emt=s(Oie);$_o=r(emt,"transfo-xl"),emt.forEach(t),k_o=r(i9e," \u2014 "),qI=n(i9e,"A",{href:!0});var omt=s(qI);S_o=r(omt,"TransfoXLTokenizer"),omt.forEach(t),R_o=r(i9e," (Transformer-XL model)"),i9e.forEach(t),P_o=i(S),Gs=n(S,"LI",{});var $S=s(Gs);Vie=n($S,"STRONG",{});var rmt=s(Vie);B_o=r(rmt,"vilt"),rmt.forEach(t),N_o=r($S," \u2014 "),jI=n($S,"A",{href:!0});var tmt=s(jI);I_o=r(tmt,"BertTokenizer"),tmt.forEach(t),q_o=r($S," or "),DI=n($S,"A",{href:!0});var amt=s(DI);j_o=r(amt,"BertTokenizerFast"),amt.forEach(t),D_o=r($S," (ViLT model)"),$S.forEach(t),G_o=i(S),Os=n(S,"LI",{});var kS=s(Os);Xie=n(kS,"STRONG",{});var nmt=s(Xie);O_o=r(nmt,"visual_bert"),nmt.forEach(t),V_o=r(kS," \u2014 "),GI=n(kS,"A",{href:!0});var smt=s(GI);X_o=r(smt,"BertTokenizer"),smt.forEach(t),z_o=r(kS," or "),OI=n(kS,"A",{href:!0});var lmt=s(OI);Q_o=r(lmt,"BertTokenizerFast"),lmt.forEach(t),W_o=r(kS," (VisualBERT model)"),kS.forEach(t),H_o=i(S),kh=n(S,"LI",{});var d9e=s(kh);zie=n(d9e,"STRONG",{});var imt=s(zie);U_o=r(imt,"wav2vec2"),imt.forEach(t),J_o=r(d9e," \u2014 "),VI=n(d9e,"A",{href:!0});var dmt=s(VI);Y_o=r(dmt,"Wav2Vec2CTCTokenizer"),dmt.forEach(t),K_o=r(d9e," (Wav2Vec2 model)"),d9e.forEach(t),Z_o=i(S),Sh=n(S,"LI",{});var c9e=s(Sh);Qie=n(c9e,"STRONG",{});var cmt=s(Qie);euo=r(cmt,"wav2vec2-conformer"),cmt.forEach(t),ouo=r(c9e," \u2014 "),XI=n(c9e,"A",{href:!0});var fmt=s(XI);ruo=r(fmt,"Wav2Vec2CTCTokenizer"),fmt.forEach(t),tuo=r(c9e," (Wav2Vec2-Conformer model)"),c9e.forEach(t),auo=i(S),Rh=n(S,"LI",{});var f9e=s(Rh);Wie=n(f9e,"STRONG",{});var mmt=s(Wie);nuo=r(mmt,"wav2vec2_phoneme"),mmt.forEach(t),suo=r(f9e," \u2014 "),zI=n(f9e,"A",{href:!0});var gmt=s(zI);luo=r(gmt,"Wav2Vec2PhonemeCTCTokenizer"),gmt.forEach(t),iuo=r(f9e," (Wav2Vec2Phoneme model)"),f9e.forEach(t),duo=i(S),Vs=n(S,"LI",{});var SS=s(Vs);Hie=n(SS,"STRONG",{});var hmt=s(Hie);cuo=r(hmt,"xglm"),hmt.forEach(t),fuo=r(SS," \u2014 "),QI=n(SS,"A",{href:!0});var pmt=s(QI);muo=r(pmt,"XGLMTokenizer"),pmt.forEach(t),guo=r(SS," or "),WI=n(SS,"A",{href:!0});var _mt=s(WI);huo=r(_mt,"XGLMTokenizerFast"),_mt.forEach(t),puo=r(SS," (XGLM model)"),SS.forEach(t),_uo=i(S),Ph=n(S,"LI",{});var m9e=s(Ph);Uie=n(m9e,"STRONG",{});var umt=s(Uie);uuo=r(umt,"xlm"),umt.forEach(t),buo=r(m9e," \u2014 "),HI=n(m9e,"A",{href:!0});var bmt=s(HI);vuo=r(bmt,"XLMTokenizer"),bmt.forEach(t),Fuo=r(m9e," (XLM model)"),m9e.forEach(t),Tuo=i(S),Bh=n(S,"LI",{});var g9e=s(Bh);Jie=n(g9e,"STRONG",{});var vmt=s(Jie);Muo=r(vmt,"xlm-prophetnet"),vmt.forEach(t),Euo=r(g9e," \u2014 "),UI=n(g9e,"A",{href:!0});var Fmt=s(UI);Cuo=r(Fmt,"XLMProphetNetTokenizer"),Fmt.forEach(t),wuo=r(g9e," (XLM-ProphetNet model)"),g9e.forEach(t),Auo=i(S),Xs=n(S,"LI",{});var RS=s(Xs);Yie=n(RS,"STRONG",{});var Tmt=s(Yie);Luo=r(Tmt,"xlm-roberta"),Tmt.forEach(t),yuo=r(RS," \u2014 "),JI=n(RS,"A",{href:!0});var Mmt=s(JI);xuo=r(Mmt,"XLMRobertaTokenizer"),Mmt.forEach(t),$uo=r(RS," or "),YI=n(RS,"A",{href:!0});var Emt=s(YI);kuo=r(Emt,"XLMRobertaTokenizerFast"),Emt.forEach(t),Suo=r(RS," (XLM-RoBERTa model)"),RS.forEach(t),Ruo=i(S),zs=n(S,"LI",{});var PS=s(zs);Kie=n(PS,"STRONG",{});var Cmt=s(Kie);Puo=r(Cmt,"xlm-roberta-xl"),Cmt.forEach(t),Buo=r(PS," \u2014 "),KI=n(PS,"A",{href:!0});var wmt=s(KI);Nuo=r(wmt,"RobertaTokenizer"),wmt.forEach(t),Iuo=r(PS," or "),ZI=n(PS,"A",{href:!0});var Amt=s(ZI);quo=r(Amt,"RobertaTokenizerFast"),Amt.forEach(t),juo=r(PS," (XLM-RoBERTa-XL model)"),PS.forEach(t),Duo=i(S),Qs=n(S,"LI",{});var BS=s(Qs);Zie=n(BS,"STRONG",{});var Lmt=s(Zie);Guo=r(Lmt,"xlnet"),Lmt.forEach(t),Ouo=r(BS," \u2014 "),eq=n(BS,"A",{href:!0});var ymt=s(eq);Vuo=r(ymt,"XLNetTokenizer"),ymt.forEach(t),Xuo=r(BS," or "),oq=n(BS,"A",{href:!0});var xmt=s(oq);zuo=r(xmt,"XLNetTokenizerFast"),xmt.forEach(t),Quo=r(BS," (XLNet model)"),BS.forEach(t),Wuo=i(S),Ws=n(S,"LI",{});var NS=s(Ws);ede=n(NS,"STRONG",{});var $mt=s(ede);Huo=r($mt,"yoso"),$mt.forEach(t),Uuo=r(NS," \u2014 "),rq=n(NS,"A",{href:!0});var kmt=s(rq);Juo=r(kmt,"AlbertTokenizer"),kmt.forEach(t),Yuo=r(NS," or "),tq=n(NS,"A",{href:!0});var Smt=s(tq);Kuo=r(Smt,"AlbertTokenizerFast"),Smt.forEach(t),Zuo=r(NS," (YOSO model)"),NS.forEach(t),S.forEach(t),e2o=i(el),T(Nh.$$.fragment,el),el.forEach(t),o2o=i(Zs),Ih=n(Zs,"DIV",{class:!0});var SQe=s(Ih);T(EL.$$.fragment,SQe),r2o=i(SQe),ode=n(SQe,"P",{});var Rmt=s(ode);t2o=r(Rmt,"Register a new tokenizer in this mapping."),Rmt.forEach(t),SQe.forEach(t),Zs.forEach(t),kXe=i(f),ji=n(f,"H2",{class:!0});var RQe=s(ji);qh=n(RQe,"A",{id:!0,class:!0,href:!0});var Pmt=s(qh);rde=n(Pmt,"SPAN",{});var Bmt=s(rde);T(CL.$$.fragment,Bmt),Bmt.forEach(t),Pmt.forEach(t),a2o=i(RQe),tde=n(RQe,"SPAN",{});var Nmt=s(tde);n2o=r(Nmt,"AutoFeatureExtractor"),Nmt.forEach(t),RQe.forEach(t),SXe=i(f),yo=n(f,"DIV",{class:!0});var ol=s(yo);T(wL.$$.fragment,ol),s2o=i(ol),AL=n(ol,"P",{});var PQe=s(AL);l2o=r(PQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aq=n(PQe,"A",{href:!0});var Imt=s(aq);i2o=r(Imt,"AutoFeatureExtractor.from_pretrained()"),Imt.forEach(t),d2o=r(PQe," class method."),PQe.forEach(t),c2o=i(ol),LL=n(ol,"P",{});var BQe=s(LL);f2o=r(BQe,"This class cannot be instantiated directly using "),ade=n(BQe,"CODE",{});var qmt=s(ade);m2o=r(qmt,"__init__()"),qmt.forEach(t),g2o=r(BQe," (throws an error)."),BQe.forEach(t),h2o=i(ol),Ue=n(ol,"DIV",{class:!0});var na=s(Ue);T(yL.$$.fragment,na),p2o=i(na),nde=n(na,"P",{});var jmt=s(nde);_2o=r(jmt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),jmt.forEach(t),u2o=i(na),Ba=n(na,"P",{});var gw=s(Ba);b2o=r(gw,"The feature extractor class to instantiate is selected based on the "),sde=n(gw,"CODE",{});var Dmt=s(sde);v2o=r(Dmt,"model_type"),Dmt.forEach(t),F2o=r(gw,` property of the config object
(either passed as an argument or loaded from `),lde=n(gw,"CODE",{});var Gmt=s(lde);T2o=r(Gmt,"pretrained_model_name_or_path"),Gmt.forEach(t),M2o=r(gw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ide=n(gw,"CODE",{});var Omt=s(ide);E2o=r(Omt,"pretrained_model_name_or_path"),Omt.forEach(t),C2o=r(gw,":"),gw.forEach(t),w2o=i(na),Y=n(na,"UL",{});var K=s(Y);jh=n(K,"LI",{});var h9e=s(jh);dde=n(h9e,"STRONG",{});var Vmt=s(dde);A2o=r(Vmt,"beit"),Vmt.forEach(t),L2o=r(h9e," \u2014 "),nq=n(h9e,"A",{href:!0});var Xmt=s(nq);y2o=r(Xmt,"BeitFeatureExtractor"),Xmt.forEach(t),x2o=r(h9e," (BEiT model)"),h9e.forEach(t),$2o=i(K),Dh=n(K,"LI",{});var p9e=s(Dh);cde=n(p9e,"STRONG",{});var zmt=s(cde);k2o=r(zmt,"clip"),zmt.forEach(t),S2o=r(p9e," \u2014 "),sq=n(p9e,"A",{href:!0});var Qmt=s(sq);R2o=r(Qmt,"CLIPFeatureExtractor"),Qmt.forEach(t),P2o=r(p9e," (CLIP model)"),p9e.forEach(t),B2o=i(K),Gh=n(K,"LI",{});var _9e=s(Gh);fde=n(_9e,"STRONG",{});var Wmt=s(fde);N2o=r(Wmt,"convnext"),Wmt.forEach(t),I2o=r(_9e," \u2014 "),lq=n(_9e,"A",{href:!0});var Hmt=s(lq);q2o=r(Hmt,"ConvNextFeatureExtractor"),Hmt.forEach(t),j2o=r(_9e," (ConvNeXT model)"),_9e.forEach(t),D2o=i(K),Oh=n(K,"LI",{});var u9e=s(Oh);mde=n(u9e,"STRONG",{});var Umt=s(mde);G2o=r(Umt,"cvt"),Umt.forEach(t),O2o=r(u9e," \u2014 "),iq=n(u9e,"A",{href:!0});var Jmt=s(iq);V2o=r(Jmt,"ConvNextFeatureExtractor"),Jmt.forEach(t),X2o=r(u9e," (CvT model)"),u9e.forEach(t),z2o=i(K),Vh=n(K,"LI",{});var b9e=s(Vh);gde=n(b9e,"STRONG",{});var Ymt=s(gde);Q2o=r(Ymt,"data2vec-audio"),Ymt.forEach(t),W2o=r(b9e," \u2014 "),dq=n(b9e,"A",{href:!0});var Kmt=s(dq);H2o=r(Kmt,"Wav2Vec2FeatureExtractor"),Kmt.forEach(t),U2o=r(b9e," (Data2VecAudio model)"),b9e.forEach(t),J2o=i(K),Xh=n(K,"LI",{});var v9e=s(Xh);hde=n(v9e,"STRONG",{});var Zmt=s(hde);Y2o=r(Zmt,"data2vec-vision"),Zmt.forEach(t),K2o=r(v9e," \u2014 "),cq=n(v9e,"A",{href:!0});var egt=s(cq);Z2o=r(egt,"BeitFeatureExtractor"),egt.forEach(t),e1o=r(v9e," (Data2VecVision model)"),v9e.forEach(t),o1o=i(K),zh=n(K,"LI",{});var F9e=s(zh);pde=n(F9e,"STRONG",{});var ogt=s(pde);r1o=r(ogt,"deit"),ogt.forEach(t),t1o=r(F9e," \u2014 "),fq=n(F9e,"A",{href:!0});var rgt=s(fq);a1o=r(rgt,"DeiTFeatureExtractor"),rgt.forEach(t),n1o=r(F9e," (DeiT model)"),F9e.forEach(t),s1o=i(K),Qh=n(K,"LI",{});var T9e=s(Qh);_de=n(T9e,"STRONG",{});var tgt=s(_de);l1o=r(tgt,"detr"),tgt.forEach(t),i1o=r(T9e," \u2014 "),mq=n(T9e,"A",{href:!0});var agt=s(mq);d1o=r(agt,"DetrFeatureExtractor"),agt.forEach(t),c1o=r(T9e," (DETR model)"),T9e.forEach(t),f1o=i(K),Wh=n(K,"LI",{});var M9e=s(Wh);ude=n(M9e,"STRONG",{});var ngt=s(ude);m1o=r(ngt,"dpt"),ngt.forEach(t),g1o=r(M9e," \u2014 "),gq=n(M9e,"A",{href:!0});var sgt=s(gq);h1o=r(sgt,"DPTFeatureExtractor"),sgt.forEach(t),p1o=r(M9e," (DPT model)"),M9e.forEach(t),_1o=i(K),Hh=n(K,"LI",{});var E9e=s(Hh);bde=n(E9e,"STRONG",{});var lgt=s(bde);u1o=r(lgt,"flava"),lgt.forEach(t),b1o=r(E9e," \u2014 "),hq=n(E9e,"A",{href:!0});var igt=s(hq);v1o=r(igt,"FlavaFeatureExtractor"),igt.forEach(t),F1o=r(E9e," (FLAVA model)"),E9e.forEach(t),T1o=i(K),Uh=n(K,"LI",{});var C9e=s(Uh);vde=n(C9e,"STRONG",{});var dgt=s(vde);M1o=r(dgt,"glpn"),dgt.forEach(t),E1o=r(C9e," \u2014 "),pq=n(C9e,"A",{href:!0});var cgt=s(pq);C1o=r(cgt,"GLPNFeatureExtractor"),cgt.forEach(t),w1o=r(C9e," (GLPN model)"),C9e.forEach(t),A1o=i(K),Jh=n(K,"LI",{});var w9e=s(Jh);Fde=n(w9e,"STRONG",{});var fgt=s(Fde);L1o=r(fgt,"groupvit"),fgt.forEach(t),y1o=r(w9e," \u2014 "),_q=n(w9e,"A",{href:!0});var mgt=s(_q);x1o=r(mgt,"CLIPFeatureExtractor"),mgt.forEach(t),$1o=r(w9e," (GroupViT model)"),w9e.forEach(t),k1o=i(K),Yh=n(K,"LI",{});var A9e=s(Yh);Tde=n(A9e,"STRONG",{});var ggt=s(Tde);S1o=r(ggt,"hubert"),ggt.forEach(t),R1o=r(A9e," \u2014 "),uq=n(A9e,"A",{href:!0});var hgt=s(uq);P1o=r(hgt,"Wav2Vec2FeatureExtractor"),hgt.forEach(t),B1o=r(A9e," (Hubert model)"),A9e.forEach(t),N1o=i(K),Kh=n(K,"LI",{});var L9e=s(Kh);Mde=n(L9e,"STRONG",{});var pgt=s(Mde);I1o=r(pgt,"imagegpt"),pgt.forEach(t),q1o=r(L9e," \u2014 "),bq=n(L9e,"A",{href:!0});var _gt=s(bq);j1o=r(_gt,"ImageGPTFeatureExtractor"),_gt.forEach(t),D1o=r(L9e," (ImageGPT model)"),L9e.forEach(t),G1o=i(K),Zh=n(K,"LI",{});var y9e=s(Zh);Ede=n(y9e,"STRONG",{});var ugt=s(Ede);O1o=r(ugt,"layoutlmv2"),ugt.forEach(t),V1o=r(y9e," \u2014 "),vq=n(y9e,"A",{href:!0});var bgt=s(vq);X1o=r(bgt,"LayoutLMv2FeatureExtractor"),bgt.forEach(t),z1o=r(y9e," (LayoutLMv2 model)"),y9e.forEach(t),Q1o=i(K),ep=n(K,"LI",{});var x9e=s(ep);Cde=n(x9e,"STRONG",{});var vgt=s(Cde);W1o=r(vgt,"layoutlmv3"),vgt.forEach(t),H1o=r(x9e," \u2014 "),Fq=n(x9e,"A",{href:!0});var Fgt=s(Fq);U1o=r(Fgt,"LayoutLMv3FeatureExtractor"),Fgt.forEach(t),J1o=r(x9e," (LayoutLMv3 model)"),x9e.forEach(t),Y1o=i(K),op=n(K,"LI",{});var $9e=s(op);wde=n($9e,"STRONG",{});var Tgt=s(wde);K1o=r(Tgt,"levit"),Tgt.forEach(t),Z1o=r($9e," \u2014 "),Tq=n($9e,"A",{href:!0});var Mgt=s(Tq);ebo=r(Mgt,"LevitFeatureExtractor"),Mgt.forEach(t),obo=r($9e," (LeViT model)"),$9e.forEach(t),rbo=i(K),rp=n(K,"LI",{});var k9e=s(rp);Ade=n(k9e,"STRONG",{});var Egt=s(Ade);tbo=r(Egt,"maskformer"),Egt.forEach(t),abo=r(k9e," \u2014 "),Mq=n(k9e,"A",{href:!0});var Cgt=s(Mq);nbo=r(Cgt,"MaskFormerFeatureExtractor"),Cgt.forEach(t),sbo=r(k9e," (MaskFormer model)"),k9e.forEach(t),lbo=i(K),tp=n(K,"LI",{});var S9e=s(tp);Lde=n(S9e,"STRONG",{});var wgt=s(Lde);ibo=r(wgt,"mctct"),wgt.forEach(t),dbo=r(S9e," \u2014 "),Eq=n(S9e,"A",{href:!0});var Agt=s(Eq);cbo=r(Agt,"MCTCTFeatureExtractor"),Agt.forEach(t),fbo=r(S9e," (M-CTC-T model)"),S9e.forEach(t),mbo=i(K),ap=n(K,"LI",{});var R9e=s(ap);yde=n(R9e,"STRONG",{});var Lgt=s(yde);gbo=r(Lgt,"mobilevit"),Lgt.forEach(t),hbo=r(R9e," \u2014 "),Cq=n(R9e,"A",{href:!0});var ygt=s(Cq);pbo=r(ygt,"MobileViTFeatureExtractor"),ygt.forEach(t),_bo=r(R9e," (MobileViT model)"),R9e.forEach(t),ubo=i(K),np=n(K,"LI",{});var P9e=s(np);xde=n(P9e,"STRONG",{});var xgt=s(xde);bbo=r(xgt,"perceiver"),xgt.forEach(t),vbo=r(P9e," \u2014 "),wq=n(P9e,"A",{href:!0});var $gt=s(wq);Fbo=r($gt,"PerceiverFeatureExtractor"),$gt.forEach(t),Tbo=r(P9e," (Perceiver model)"),P9e.forEach(t),Mbo=i(K),sp=n(K,"LI",{});var B9e=s(sp);$de=n(B9e,"STRONG",{});var kgt=s($de);Ebo=r(kgt,"poolformer"),kgt.forEach(t),Cbo=r(B9e," \u2014 "),Aq=n(B9e,"A",{href:!0});var Sgt=s(Aq);wbo=r(Sgt,"PoolFormerFeatureExtractor"),Sgt.forEach(t),Abo=r(B9e," (PoolFormer model)"),B9e.forEach(t),Lbo=i(K),lp=n(K,"LI",{});var N9e=s(lp);kde=n(N9e,"STRONG",{});var Rgt=s(kde);ybo=r(Rgt,"regnet"),Rgt.forEach(t),xbo=r(N9e," \u2014 "),Lq=n(N9e,"A",{href:!0});var Pgt=s(Lq);$bo=r(Pgt,"ConvNextFeatureExtractor"),Pgt.forEach(t),kbo=r(N9e," (RegNet model)"),N9e.forEach(t),Sbo=i(K),ip=n(K,"LI",{});var I9e=s(ip);Sde=n(I9e,"STRONG",{});var Bgt=s(Sde);Rbo=r(Bgt,"resnet"),Bgt.forEach(t),Pbo=r(I9e," \u2014 "),yq=n(I9e,"A",{href:!0});var Ngt=s(yq);Bbo=r(Ngt,"ConvNextFeatureExtractor"),Ngt.forEach(t),Nbo=r(I9e," (ResNet model)"),I9e.forEach(t),Ibo=i(K),dp=n(K,"LI",{});var q9e=s(dp);Rde=n(q9e,"STRONG",{});var Igt=s(Rde);qbo=r(Igt,"segformer"),Igt.forEach(t),jbo=r(q9e," \u2014 "),xq=n(q9e,"A",{href:!0});var qgt=s(xq);Dbo=r(qgt,"SegformerFeatureExtractor"),qgt.forEach(t),Gbo=r(q9e," (SegFormer model)"),q9e.forEach(t),Obo=i(K),cp=n(K,"LI",{});var j9e=s(cp);Pde=n(j9e,"STRONG",{});var jgt=s(Pde);Vbo=r(jgt,"speech_to_text"),jgt.forEach(t),Xbo=r(j9e," \u2014 "),$q=n(j9e,"A",{href:!0});var Dgt=s($q);zbo=r(Dgt,"Speech2TextFeatureExtractor"),Dgt.forEach(t),Qbo=r(j9e," (Speech2Text model)"),j9e.forEach(t),Wbo=i(K),fp=n(K,"LI",{});var D9e=s(fp);Bde=n(D9e,"STRONG",{});var Ggt=s(Bde);Hbo=r(Ggt,"swin"),Ggt.forEach(t),Ubo=r(D9e," \u2014 "),kq=n(D9e,"A",{href:!0});var Ogt=s(kq);Jbo=r(Ogt,"ViTFeatureExtractor"),Ogt.forEach(t),Ybo=r(D9e," (Swin Transformer model)"),D9e.forEach(t),Kbo=i(K),mp=n(K,"LI",{});var G9e=s(mp);Nde=n(G9e,"STRONG",{});var Vgt=s(Nde);Zbo=r(Vgt,"van"),Vgt.forEach(t),evo=r(G9e," \u2014 "),Sq=n(G9e,"A",{href:!0});var Xgt=s(Sq);ovo=r(Xgt,"ConvNextFeatureExtractor"),Xgt.forEach(t),rvo=r(G9e," (VAN model)"),G9e.forEach(t),tvo=i(K),gp=n(K,"LI",{});var O9e=s(gp);Ide=n(O9e,"STRONG",{});var zgt=s(Ide);avo=r(zgt,"vilt"),zgt.forEach(t),nvo=r(O9e," \u2014 "),Rq=n(O9e,"A",{href:!0});var Qgt=s(Rq);svo=r(Qgt,"ViltFeatureExtractor"),Qgt.forEach(t),lvo=r(O9e," (ViLT model)"),O9e.forEach(t),ivo=i(K),hp=n(K,"LI",{});var V9e=s(hp);qde=n(V9e,"STRONG",{});var Wgt=s(qde);dvo=r(Wgt,"vit"),Wgt.forEach(t),cvo=r(V9e," \u2014 "),Pq=n(V9e,"A",{href:!0});var Hgt=s(Pq);fvo=r(Hgt,"ViTFeatureExtractor"),Hgt.forEach(t),mvo=r(V9e," (ViT model)"),V9e.forEach(t),gvo=i(K),pp=n(K,"LI",{});var X9e=s(pp);jde=n(X9e,"STRONG",{});var Ugt=s(jde);hvo=r(Ugt,"vit_mae"),Ugt.forEach(t),pvo=r(X9e," \u2014 "),Bq=n(X9e,"A",{href:!0});var Jgt=s(Bq);_vo=r(Jgt,"ViTFeatureExtractor"),Jgt.forEach(t),uvo=r(X9e," (ViTMAE model)"),X9e.forEach(t),bvo=i(K),_p=n(K,"LI",{});var z9e=s(_p);Dde=n(z9e,"STRONG",{});var Ygt=s(Dde);vvo=r(Ygt,"wav2vec2"),Ygt.forEach(t),Fvo=r(z9e," \u2014 "),Nq=n(z9e,"A",{href:!0});var Kgt=s(Nq);Tvo=r(Kgt,"Wav2Vec2FeatureExtractor"),Kgt.forEach(t),Mvo=r(z9e," (Wav2Vec2 model)"),z9e.forEach(t),Evo=i(K),up=n(K,"LI",{});var Q9e=s(up);Gde=n(Q9e,"STRONG",{});var Zgt=s(Gde);Cvo=r(Zgt,"wav2vec2-conformer"),Zgt.forEach(t),wvo=r(Q9e," \u2014 "),Iq=n(Q9e,"A",{href:!0});var eht=s(Iq);Avo=r(eht,"Wav2Vec2FeatureExtractor"),eht.forEach(t),Lvo=r(Q9e," (Wav2Vec2-Conformer model)"),Q9e.forEach(t),yvo=i(K),bp=n(K,"LI",{});var W9e=s(bp);Ode=n(W9e,"STRONG",{});var oht=s(Ode);xvo=r(oht,"yolos"),oht.forEach(t),$vo=r(W9e," \u2014 "),qq=n(W9e,"A",{href:!0});var rht=s(qq);kvo=r(rht,"YolosFeatureExtractor"),rht.forEach(t),Svo=r(W9e," (YOLOS model)"),W9e.forEach(t),K.forEach(t),Rvo=i(na),T(vp.$$.fragment,na),Pvo=i(na),T(Fp.$$.fragment,na),na.forEach(t),Bvo=i(ol),Tp=n(ol,"DIV",{class:!0});var NQe=s(Tp);T(xL.$$.fragment,NQe),Nvo=i(NQe),Vde=n(NQe,"P",{});var tht=s(Vde);Ivo=r(tht,"Register a new feature extractor for this class."),tht.forEach(t),NQe.forEach(t),ol.forEach(t),RXe=i(f),Di=n(f,"H2",{class:!0});var IQe=s(Di);Mp=n(IQe,"A",{id:!0,class:!0,href:!0});var aht=s(Mp);Xde=n(aht,"SPAN",{});var nht=s(Xde);T($L.$$.fragment,nht),nht.forEach(t),aht.forEach(t),qvo=i(IQe),zde=n(IQe,"SPAN",{});var sht=s(zde);jvo=r(sht,"AutoProcessor"),sht.forEach(t),IQe.forEach(t),PXe=i(f),xo=n(f,"DIV",{class:!0});var rl=s(xo);T(kL.$$.fragment,rl),Dvo=i(rl),SL=n(rl,"P",{});var qQe=s(SL);Gvo=r(qQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jq=n(qQe,"A",{href:!0});var lht=s(jq);Ovo=r(lht,"AutoProcessor.from_pretrained()"),lht.forEach(t),Vvo=r(qQe," class method."),qQe.forEach(t),Xvo=i(rl),RL=n(rl,"P",{});var jQe=s(RL);zvo=r(jQe,"This class cannot be instantiated directly using "),Qde=n(jQe,"CODE",{});var iht=s(Qde);Qvo=r(iht,"__init__()"),iht.forEach(t),Wvo=r(jQe," (throws an error)."),jQe.forEach(t),Hvo=i(rl),Je=n(rl,"DIV",{class:!0});var sa=s(Je);T(PL.$$.fragment,sa),Uvo=i(sa),Wde=n(sa,"P",{});var dht=s(Wde);Jvo=r(dht,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),dht.forEach(t),Yvo=i(sa),Gi=n(sa,"P",{});var Ore=s(Gi);Kvo=r(Ore,"The processor class to instantiate is selected based on the "),Hde=n(Ore,"CODE",{});var cht=s(Hde);Zvo=r(cht,"model_type"),cht.forEach(t),eFo=r(Ore,` property of the config object (either
passed as an argument or loaded from `),Ude=n(Ore,"CODE",{});var fht=s(Ude);oFo=r(fht,"pretrained_model_name_or_path"),fht.forEach(t),rFo=r(Ore," if possible):"),Ore.forEach(t),tFo=i(sa),pe=n(sa,"UL",{});var be=s(pe);Ep=n(be,"LI",{});var H9e=s(Ep);Jde=n(H9e,"STRONG",{});var mht=s(Jde);aFo=r(mht,"clip"),mht.forEach(t),nFo=r(H9e," \u2014 "),Dq=n(H9e,"A",{href:!0});var ght=s(Dq);sFo=r(ght,"CLIPProcessor"),ght.forEach(t),lFo=r(H9e," (CLIP model)"),H9e.forEach(t),iFo=i(be),Cp=n(be,"LI",{});var U9e=s(Cp);Yde=n(U9e,"STRONG",{});var hht=s(Yde);dFo=r(hht,"flava"),hht.forEach(t),cFo=r(U9e," \u2014 "),Kde=n(U9e,"CODE",{});var pht=s(Kde);fFo=r(pht,"FLAVAProcessor"),pht.forEach(t),mFo=r(U9e," (FLAVA model)"),U9e.forEach(t),gFo=i(be),wp=n(be,"LI",{});var J9e=s(wp);Zde=n(J9e,"STRONG",{});var _ht=s(Zde);hFo=r(_ht,"groupvit"),_ht.forEach(t),pFo=r(J9e," \u2014 "),Gq=n(J9e,"A",{href:!0});var uht=s(Gq);_Fo=r(uht,"CLIPProcessor"),uht.forEach(t),uFo=r(J9e," (GroupViT model)"),J9e.forEach(t),bFo=i(be),Ap=n(be,"LI",{});var Y9e=s(Ap);ece=n(Y9e,"STRONG",{});var bht=s(ece);vFo=r(bht,"layoutlmv2"),bht.forEach(t),FFo=r(Y9e," \u2014 "),Oq=n(Y9e,"A",{href:!0});var vht=s(Oq);TFo=r(vht,"LayoutLMv2Processor"),vht.forEach(t),MFo=r(Y9e," (LayoutLMv2 model)"),Y9e.forEach(t),EFo=i(be),Lp=n(be,"LI",{});var K9e=s(Lp);oce=n(K9e,"STRONG",{});var Fht=s(oce);CFo=r(Fht,"layoutlmv3"),Fht.forEach(t),wFo=r(K9e," \u2014 "),Vq=n(K9e,"A",{href:!0});var Tht=s(Vq);AFo=r(Tht,"LayoutLMv3Processor"),Tht.forEach(t),LFo=r(K9e," (LayoutLMv3 model)"),K9e.forEach(t),yFo=i(be),yp=n(be,"LI",{});var Z9e=s(yp);rce=n(Z9e,"STRONG",{});var Mht=s(rce);xFo=r(Mht,"layoutxlm"),Mht.forEach(t),$Fo=r(Z9e," \u2014 "),Xq=n(Z9e,"A",{href:!0});var Eht=s(Xq);kFo=r(Eht,"LayoutXLMProcessor"),Eht.forEach(t),SFo=r(Z9e," (LayoutXLM model)"),Z9e.forEach(t),RFo=i(be),xp=n(be,"LI",{});var exe=s(xp);tce=n(exe,"STRONG",{});var Cht=s(tce);PFo=r(Cht,"sew"),Cht.forEach(t),BFo=r(exe," \u2014 "),zq=n(exe,"A",{href:!0});var wht=s(zq);NFo=r(wht,"Wav2Vec2Processor"),wht.forEach(t),IFo=r(exe," (SEW model)"),exe.forEach(t),qFo=i(be),$p=n(be,"LI",{});var oxe=s($p);ace=n(oxe,"STRONG",{});var Aht=s(ace);jFo=r(Aht,"sew-d"),Aht.forEach(t),DFo=r(oxe," \u2014 "),Qq=n(oxe,"A",{href:!0});var Lht=s(Qq);GFo=r(Lht,"Wav2Vec2Processor"),Lht.forEach(t),OFo=r(oxe," (SEW-D model)"),oxe.forEach(t),VFo=i(be),kp=n(be,"LI",{});var rxe=s(kp);nce=n(rxe,"STRONG",{});var yht=s(nce);XFo=r(yht,"speech_to_text"),yht.forEach(t),zFo=r(rxe," \u2014 "),Wq=n(rxe,"A",{href:!0});var xht=s(Wq);QFo=r(xht,"Speech2TextProcessor"),xht.forEach(t),WFo=r(rxe," (Speech2Text model)"),rxe.forEach(t),HFo=i(be),Sp=n(be,"LI",{});var txe=s(Sp);sce=n(txe,"STRONG",{});var $ht=s(sce);UFo=r($ht,"speech_to_text_2"),$ht.forEach(t),JFo=r(txe," \u2014 "),Hq=n(txe,"A",{href:!0});var kht=s(Hq);YFo=r(kht,"Speech2Text2Processor"),kht.forEach(t),KFo=r(txe," (Speech2Text2 model)"),txe.forEach(t),ZFo=i(be),Rp=n(be,"LI",{});var axe=s(Rp);lce=n(axe,"STRONG",{});var Sht=s(lce);e6o=r(Sht,"trocr"),Sht.forEach(t),o6o=r(axe," \u2014 "),Uq=n(axe,"A",{href:!0});var Rht=s(Uq);r6o=r(Rht,"TrOCRProcessor"),Rht.forEach(t),t6o=r(axe," (TrOCR model)"),axe.forEach(t),a6o=i(be),Pp=n(be,"LI",{});var nxe=s(Pp);ice=n(nxe,"STRONG",{});var Pht=s(ice);n6o=r(Pht,"unispeech"),Pht.forEach(t),s6o=r(nxe," \u2014 "),Jq=n(nxe,"A",{href:!0});var Bht=s(Jq);l6o=r(Bht,"Wav2Vec2Processor"),Bht.forEach(t),i6o=r(nxe," (UniSpeech model)"),nxe.forEach(t),d6o=i(be),Bp=n(be,"LI",{});var sxe=s(Bp);dce=n(sxe,"STRONG",{});var Nht=s(dce);c6o=r(Nht,"unispeech-sat"),Nht.forEach(t),f6o=r(sxe," \u2014 "),Yq=n(sxe,"A",{href:!0});var Iht=s(Yq);m6o=r(Iht,"Wav2Vec2Processor"),Iht.forEach(t),g6o=r(sxe," (UniSpeechSat model)"),sxe.forEach(t),h6o=i(be),Np=n(be,"LI",{});var lxe=s(Np);cce=n(lxe,"STRONG",{});var qht=s(cce);p6o=r(qht,"vilt"),qht.forEach(t),_6o=r(lxe," \u2014 "),Kq=n(lxe,"A",{href:!0});var jht=s(Kq);u6o=r(jht,"ViltProcessor"),jht.forEach(t),b6o=r(lxe," (ViLT model)"),lxe.forEach(t),v6o=i(be),Ip=n(be,"LI",{});var ixe=s(Ip);fce=n(ixe,"STRONG",{});var Dht=s(fce);F6o=r(Dht,"vision-text-dual-encoder"),Dht.forEach(t),T6o=r(ixe," \u2014 "),Zq=n(ixe,"A",{href:!0});var Ght=s(Zq);M6o=r(Ght,"VisionTextDualEncoderProcessor"),Ght.forEach(t),E6o=r(ixe," (VisionTextDualEncoder model)"),ixe.forEach(t),C6o=i(be),qp=n(be,"LI",{});var dxe=s(qp);mce=n(dxe,"STRONG",{});var Oht=s(mce);w6o=r(Oht,"wav2vec2"),Oht.forEach(t),A6o=r(dxe," \u2014 "),ej=n(dxe,"A",{href:!0});var Vht=s(ej);L6o=r(Vht,"Wav2Vec2Processor"),Vht.forEach(t),y6o=r(dxe," (Wav2Vec2 model)"),dxe.forEach(t),x6o=i(be),jp=n(be,"LI",{});var cxe=s(jp);gce=n(cxe,"STRONG",{});var Xht=s(gce);$6o=r(Xht,"wav2vec2-conformer"),Xht.forEach(t),k6o=r(cxe," \u2014 "),oj=n(cxe,"A",{href:!0});var zht=s(oj);S6o=r(zht,"Wav2Vec2Processor"),zht.forEach(t),R6o=r(cxe," (Wav2Vec2-Conformer model)"),cxe.forEach(t),P6o=i(be),Dp=n(be,"LI",{});var fxe=s(Dp);hce=n(fxe,"STRONG",{});var Qht=s(hce);B6o=r(Qht,"wavlm"),Qht.forEach(t),N6o=r(fxe," \u2014 "),rj=n(fxe,"A",{href:!0});var Wht=s(rj);I6o=r(Wht,"Wav2Vec2Processor"),Wht.forEach(t),q6o=r(fxe," (WavLM model)"),fxe.forEach(t),be.forEach(t),j6o=i(sa),T(Gp.$$.fragment,sa),D6o=i(sa),T(Op.$$.fragment,sa),sa.forEach(t),G6o=i(rl),Vp=n(rl,"DIV",{class:!0});var DQe=s(Vp);T(BL.$$.fragment,DQe),O6o=i(DQe),pce=n(DQe,"P",{});var Hht=s(pce);V6o=r(Hht,"Register a new processor for this class."),Hht.forEach(t),DQe.forEach(t),rl.forEach(t),BXe=i(f),Oi=n(f,"H2",{class:!0});var GQe=s(Oi);Xp=n(GQe,"A",{id:!0,class:!0,href:!0});var Uht=s(Xp);_ce=n(Uht,"SPAN",{});var Jht=s(_ce);T(NL.$$.fragment,Jht),Jht.forEach(t),Uht.forEach(t),X6o=i(GQe),uce=n(GQe,"SPAN",{});var Yht=s(uce);z6o=r(Yht,"AutoModel"),Yht.forEach(t),GQe.forEach(t),NXe=i(f),$o=n(f,"DIV",{class:!0});var tl=s($o);T(IL.$$.fragment,tl),Q6o=i(tl),Vi=n(tl,"P",{});var Vre=s(Vi);W6o=r(Vre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tj=n(Vre,"A",{href:!0});var Kht=s(tj);H6o=r(Kht,"from_pretrained()"),Kht.forEach(t),U6o=r(Vre," class method or the "),aj=n(Vre,"A",{href:!0});var Zht=s(aj);J6o=r(Zht,"from_config()"),Zht.forEach(t),Y6o=r(Vre,` class
method.`),Vre.forEach(t),K6o=i(tl),qL=n(tl,"P",{});var OQe=s(qL);Z6o=r(OQe,"This class cannot be instantiated directly using "),bce=n(OQe,"CODE",{});var ept=s(bce);eTo=r(ept,"__init__()"),ept.forEach(t),oTo=r(OQe," (throws an error)."),OQe.forEach(t),rTo=i(tl),it=n(tl,"DIV",{class:!0});var hw=s(it);T(jL.$$.fragment,hw),tTo=i(hw),vce=n(hw,"P",{});var opt=s(vce);aTo=r(opt,"Instantiates one of the base model classes of the library from a configuration."),opt.forEach(t),nTo=i(hw),Xi=n(hw,"P",{});var Xre=s(Xi);sTo=r(Xre,`Note:
Loading a model from its configuration file does `),Fce=n(Xre,"STRONG",{});var rpt=s(Fce);lTo=r(rpt,"not"),rpt.forEach(t),iTo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=n(Xre,"A",{href:!0});var tpt=s(nj);dTo=r(tpt,"from_pretrained()"),tpt.forEach(t),cTo=r(Xre," to load the model weights."),Xre.forEach(t),fTo=i(hw),T(zp.$$.fragment,hw),hw.forEach(t),mTo=i(tl),Ye=n(tl,"DIV",{class:!0});var la=s(Ye);T(DL.$$.fragment,la),gTo=i(la),Tce=n(la,"P",{});var apt=s(Tce);hTo=r(apt,"Instantiate one of the base model classes of the library from a pretrained model."),apt.forEach(t),pTo=i(la),Na=n(la,"P",{});var pw=s(Na);_To=r(pw,"The model class to instantiate is selected based on the "),Mce=n(pw,"CODE",{});var npt=s(Mce);uTo=r(npt,"model_type"),npt.forEach(t),bTo=r(pw,` property of the config object (either
passed as an argument or loaded from `),Ece=n(pw,"CODE",{});var spt=s(Ece);vTo=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),FTo=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=n(pw,"CODE",{});var lpt=s(Cce);TTo=r(lpt,"pretrained_model_name_or_path"),lpt.forEach(t),MTo=r(pw,":"),pw.forEach(t),ETo=i(la),y=n(la,"UL",{});var x=s(y);Qp=n(x,"LI",{});var mxe=s(Qp);wce=n(mxe,"STRONG",{});var ipt=s(wce);CTo=r(ipt,"albert"),ipt.forEach(t),wTo=r(mxe," \u2014 "),sj=n(mxe,"A",{href:!0});var dpt=s(sj);ATo=r(dpt,"AlbertModel"),dpt.forEach(t),LTo=r(mxe," (ALBERT model)"),mxe.forEach(t),yTo=i(x),Wp=n(x,"LI",{});var gxe=s(Wp);Ace=n(gxe,"STRONG",{});var cpt=s(Ace);xTo=r(cpt,"bart"),cpt.forEach(t),$To=r(gxe," \u2014 "),lj=n(gxe,"A",{href:!0});var fpt=s(lj);kTo=r(fpt,"BartModel"),fpt.forEach(t),STo=r(gxe," (BART model)"),gxe.forEach(t),RTo=i(x),Hp=n(x,"LI",{});var hxe=s(Hp);Lce=n(hxe,"STRONG",{});var mpt=s(Lce);PTo=r(mpt,"beit"),mpt.forEach(t),BTo=r(hxe," \u2014 "),ij=n(hxe,"A",{href:!0});var gpt=s(ij);NTo=r(gpt,"BeitModel"),gpt.forEach(t),ITo=r(hxe," (BEiT model)"),hxe.forEach(t),qTo=i(x),Up=n(x,"LI",{});var pxe=s(Up);yce=n(pxe,"STRONG",{});var hpt=s(yce);jTo=r(hpt,"bert"),hpt.forEach(t),DTo=r(pxe," \u2014 "),dj=n(pxe,"A",{href:!0});var ppt=s(dj);GTo=r(ppt,"BertModel"),ppt.forEach(t),OTo=r(pxe," (BERT model)"),pxe.forEach(t),VTo=i(x),Jp=n(x,"LI",{});var _xe=s(Jp);xce=n(_xe,"STRONG",{});var _pt=s(xce);XTo=r(_pt,"bert-generation"),_pt.forEach(t),zTo=r(_xe," \u2014 "),cj=n(_xe,"A",{href:!0});var upt=s(cj);QTo=r(upt,"BertGenerationEncoder"),upt.forEach(t),WTo=r(_xe," (Bert Generation model)"),_xe.forEach(t),HTo=i(x),Yp=n(x,"LI",{});var uxe=s(Yp);$ce=n(uxe,"STRONG",{});var bpt=s($ce);UTo=r(bpt,"big_bird"),bpt.forEach(t),JTo=r(uxe," \u2014 "),fj=n(uxe,"A",{href:!0});var vpt=s(fj);YTo=r(vpt,"BigBirdModel"),vpt.forEach(t),KTo=r(uxe," (BigBird model)"),uxe.forEach(t),ZTo=i(x),Kp=n(x,"LI",{});var bxe=s(Kp);kce=n(bxe,"STRONG",{});var Fpt=s(kce);e7o=r(Fpt,"bigbird_pegasus"),Fpt.forEach(t),o7o=r(bxe," \u2014 "),mj=n(bxe,"A",{href:!0});var Tpt=s(mj);r7o=r(Tpt,"BigBirdPegasusModel"),Tpt.forEach(t),t7o=r(bxe," (BigBird-Pegasus model)"),bxe.forEach(t),a7o=i(x),Zp=n(x,"LI",{});var vxe=s(Zp);Sce=n(vxe,"STRONG",{});var Mpt=s(Sce);n7o=r(Mpt,"blenderbot"),Mpt.forEach(t),s7o=r(vxe," \u2014 "),gj=n(vxe,"A",{href:!0});var Ept=s(gj);l7o=r(Ept,"BlenderbotModel"),Ept.forEach(t),i7o=r(vxe," (Blenderbot model)"),vxe.forEach(t),d7o=i(x),e_=n(x,"LI",{});var Fxe=s(e_);Rce=n(Fxe,"STRONG",{});var Cpt=s(Rce);c7o=r(Cpt,"blenderbot-small"),Cpt.forEach(t),f7o=r(Fxe," \u2014 "),hj=n(Fxe,"A",{href:!0});var wpt=s(hj);m7o=r(wpt,"BlenderbotSmallModel"),wpt.forEach(t),g7o=r(Fxe," (BlenderbotSmall model)"),Fxe.forEach(t),h7o=i(x),o_=n(x,"LI",{});var Txe=s(o_);Pce=n(Txe,"STRONG",{});var Apt=s(Pce);p7o=r(Apt,"bloom"),Apt.forEach(t),_7o=r(Txe," \u2014 "),pj=n(Txe,"A",{href:!0});var Lpt=s(pj);u7o=r(Lpt,"BloomModel"),Lpt.forEach(t),b7o=r(Txe," (BLOOM model)"),Txe.forEach(t),v7o=i(x),r_=n(x,"LI",{});var Mxe=s(r_);Bce=n(Mxe,"STRONG",{});var ypt=s(Bce);F7o=r(ypt,"camembert"),ypt.forEach(t),T7o=r(Mxe," \u2014 "),_j=n(Mxe,"A",{href:!0});var xpt=s(_j);M7o=r(xpt,"CamembertModel"),xpt.forEach(t),E7o=r(Mxe," (CamemBERT model)"),Mxe.forEach(t),C7o=i(x),t_=n(x,"LI",{});var Exe=s(t_);Nce=n(Exe,"STRONG",{});var $pt=s(Nce);w7o=r($pt,"canine"),$pt.forEach(t),A7o=r(Exe," \u2014 "),uj=n(Exe,"A",{href:!0});var kpt=s(uj);L7o=r(kpt,"CanineModel"),kpt.forEach(t),y7o=r(Exe," (CANINE model)"),Exe.forEach(t),x7o=i(x),a_=n(x,"LI",{});var Cxe=s(a_);Ice=n(Cxe,"STRONG",{});var Spt=s(Ice);$7o=r(Spt,"clip"),Spt.forEach(t),k7o=r(Cxe," \u2014 "),bj=n(Cxe,"A",{href:!0});var Rpt=s(bj);S7o=r(Rpt,"CLIPModel"),Rpt.forEach(t),R7o=r(Cxe," (CLIP model)"),Cxe.forEach(t),P7o=i(x),n_=n(x,"LI",{});var wxe=s(n_);qce=n(wxe,"STRONG",{});var Ppt=s(qce);B7o=r(Ppt,"codegen"),Ppt.forEach(t),N7o=r(wxe," \u2014 "),vj=n(wxe,"A",{href:!0});var Bpt=s(vj);I7o=r(Bpt,"CodeGenModel"),Bpt.forEach(t),q7o=r(wxe," (CodeGen model)"),wxe.forEach(t),j7o=i(x),s_=n(x,"LI",{});var Axe=s(s_);jce=n(Axe,"STRONG",{});var Npt=s(jce);D7o=r(Npt,"convbert"),Npt.forEach(t),G7o=r(Axe," \u2014 "),Fj=n(Axe,"A",{href:!0});var Ipt=s(Fj);O7o=r(Ipt,"ConvBertModel"),Ipt.forEach(t),V7o=r(Axe," (ConvBERT model)"),Axe.forEach(t),X7o=i(x),l_=n(x,"LI",{});var Lxe=s(l_);Dce=n(Lxe,"STRONG",{});var qpt=s(Dce);z7o=r(qpt,"convnext"),qpt.forEach(t),Q7o=r(Lxe," \u2014 "),Tj=n(Lxe,"A",{href:!0});var jpt=s(Tj);W7o=r(jpt,"ConvNextModel"),jpt.forEach(t),H7o=r(Lxe," (ConvNeXT model)"),Lxe.forEach(t),U7o=i(x),i_=n(x,"LI",{});var yxe=s(i_);Gce=n(yxe,"STRONG",{});var Dpt=s(Gce);J7o=r(Dpt,"ctrl"),Dpt.forEach(t),Y7o=r(yxe," \u2014 "),Mj=n(yxe,"A",{href:!0});var Gpt=s(Mj);K7o=r(Gpt,"CTRLModel"),Gpt.forEach(t),Z7o=r(yxe," (CTRL model)"),yxe.forEach(t),e8o=i(x),d_=n(x,"LI",{});var xxe=s(d_);Oce=n(xxe,"STRONG",{});var Opt=s(Oce);o8o=r(Opt,"cvt"),Opt.forEach(t),r8o=r(xxe," \u2014 "),Ej=n(xxe,"A",{href:!0});var Vpt=s(Ej);t8o=r(Vpt,"CvtModel"),Vpt.forEach(t),a8o=r(xxe," (CvT model)"),xxe.forEach(t),n8o=i(x),c_=n(x,"LI",{});var $xe=s(c_);Vce=n($xe,"STRONG",{});var Xpt=s(Vce);s8o=r(Xpt,"data2vec-audio"),Xpt.forEach(t),l8o=r($xe," \u2014 "),Cj=n($xe,"A",{href:!0});var zpt=s(Cj);i8o=r(zpt,"Data2VecAudioModel"),zpt.forEach(t),d8o=r($xe," (Data2VecAudio model)"),$xe.forEach(t),c8o=i(x),f_=n(x,"LI",{});var kxe=s(f_);Xce=n(kxe,"STRONG",{});var Qpt=s(Xce);f8o=r(Qpt,"data2vec-text"),Qpt.forEach(t),m8o=r(kxe," \u2014 "),wj=n(kxe,"A",{href:!0});var Wpt=s(wj);g8o=r(Wpt,"Data2VecTextModel"),Wpt.forEach(t),h8o=r(kxe," (Data2VecText model)"),kxe.forEach(t),p8o=i(x),m_=n(x,"LI",{});var Sxe=s(m_);zce=n(Sxe,"STRONG",{});var Hpt=s(zce);_8o=r(Hpt,"data2vec-vision"),Hpt.forEach(t),u8o=r(Sxe," \u2014 "),Aj=n(Sxe,"A",{href:!0});var Upt=s(Aj);b8o=r(Upt,"Data2VecVisionModel"),Upt.forEach(t),v8o=r(Sxe," (Data2VecVision model)"),Sxe.forEach(t),F8o=i(x),g_=n(x,"LI",{});var Rxe=s(g_);Qce=n(Rxe,"STRONG",{});var Jpt=s(Qce);T8o=r(Jpt,"deberta"),Jpt.forEach(t),M8o=r(Rxe," \u2014 "),Lj=n(Rxe,"A",{href:!0});var Ypt=s(Lj);E8o=r(Ypt,"DebertaModel"),Ypt.forEach(t),C8o=r(Rxe," (DeBERTa model)"),Rxe.forEach(t),w8o=i(x),h_=n(x,"LI",{});var Pxe=s(h_);Wce=n(Pxe,"STRONG",{});var Kpt=s(Wce);A8o=r(Kpt,"deberta-v2"),Kpt.forEach(t),L8o=r(Pxe," \u2014 "),yj=n(Pxe,"A",{href:!0});var Zpt=s(yj);y8o=r(Zpt,"DebertaV2Model"),Zpt.forEach(t),x8o=r(Pxe," (DeBERTa-v2 model)"),Pxe.forEach(t),$8o=i(x),p_=n(x,"LI",{});var Bxe=s(p_);Hce=n(Bxe,"STRONG",{});var e_t=s(Hce);k8o=r(e_t,"decision_transformer"),e_t.forEach(t),S8o=r(Bxe," \u2014 "),xj=n(Bxe,"A",{href:!0});var o_t=s(xj);R8o=r(o_t,"DecisionTransformerModel"),o_t.forEach(t),P8o=r(Bxe," (Decision Transformer model)"),Bxe.forEach(t),B8o=i(x),__=n(x,"LI",{});var Nxe=s(__);Uce=n(Nxe,"STRONG",{});var r_t=s(Uce);N8o=r(r_t,"deit"),r_t.forEach(t),I8o=r(Nxe," \u2014 "),$j=n(Nxe,"A",{href:!0});var t_t=s($j);q8o=r(t_t,"DeiTModel"),t_t.forEach(t),j8o=r(Nxe," (DeiT model)"),Nxe.forEach(t),D8o=i(x),u_=n(x,"LI",{});var Ixe=s(u_);Jce=n(Ixe,"STRONG",{});var a_t=s(Jce);G8o=r(a_t,"detr"),a_t.forEach(t),O8o=r(Ixe," \u2014 "),kj=n(Ixe,"A",{href:!0});var n_t=s(kj);V8o=r(n_t,"DetrModel"),n_t.forEach(t),X8o=r(Ixe," (DETR model)"),Ixe.forEach(t),z8o=i(x),b_=n(x,"LI",{});var qxe=s(b_);Yce=n(qxe,"STRONG",{});var s_t=s(Yce);Q8o=r(s_t,"distilbert"),s_t.forEach(t),W8o=r(qxe," \u2014 "),Sj=n(qxe,"A",{href:!0});var l_t=s(Sj);H8o=r(l_t,"DistilBertModel"),l_t.forEach(t),U8o=r(qxe," (DistilBERT model)"),qxe.forEach(t),J8o=i(x),v_=n(x,"LI",{});var jxe=s(v_);Kce=n(jxe,"STRONG",{});var i_t=s(Kce);Y8o=r(i_t,"dpr"),i_t.forEach(t),K8o=r(jxe," \u2014 "),Rj=n(jxe,"A",{href:!0});var d_t=s(Rj);Z8o=r(d_t,"DPRQuestionEncoder"),d_t.forEach(t),eMo=r(jxe," (DPR model)"),jxe.forEach(t),oMo=i(x),F_=n(x,"LI",{});var Dxe=s(F_);Zce=n(Dxe,"STRONG",{});var c_t=s(Zce);rMo=r(c_t,"dpt"),c_t.forEach(t),tMo=r(Dxe," \u2014 "),Pj=n(Dxe,"A",{href:!0});var f_t=s(Pj);aMo=r(f_t,"DPTModel"),f_t.forEach(t),nMo=r(Dxe," (DPT model)"),Dxe.forEach(t),sMo=i(x),T_=n(x,"LI",{});var Gxe=s(T_);efe=n(Gxe,"STRONG",{});var m_t=s(efe);lMo=r(m_t,"electra"),m_t.forEach(t),iMo=r(Gxe," \u2014 "),Bj=n(Gxe,"A",{href:!0});var g_t=s(Bj);dMo=r(g_t,"ElectraModel"),g_t.forEach(t),cMo=r(Gxe," (ELECTRA model)"),Gxe.forEach(t),fMo=i(x),M_=n(x,"LI",{});var Oxe=s(M_);ofe=n(Oxe,"STRONG",{});var h_t=s(ofe);mMo=r(h_t,"flaubert"),h_t.forEach(t),gMo=r(Oxe," \u2014 "),Nj=n(Oxe,"A",{href:!0});var p_t=s(Nj);hMo=r(p_t,"FlaubertModel"),p_t.forEach(t),pMo=r(Oxe," (FlauBERT model)"),Oxe.forEach(t),_Mo=i(x),E_=n(x,"LI",{});var Vxe=s(E_);rfe=n(Vxe,"STRONG",{});var __t=s(rfe);uMo=r(__t,"flava"),__t.forEach(t),bMo=r(Vxe," \u2014 "),Ij=n(Vxe,"A",{href:!0});var u_t=s(Ij);vMo=r(u_t,"FlavaModel"),u_t.forEach(t),FMo=r(Vxe," (FLAVA model)"),Vxe.forEach(t),TMo=i(x),C_=n(x,"LI",{});var Xxe=s(C_);tfe=n(Xxe,"STRONG",{});var b_t=s(tfe);MMo=r(b_t,"fnet"),b_t.forEach(t),EMo=r(Xxe," \u2014 "),qj=n(Xxe,"A",{href:!0});var v_t=s(qj);CMo=r(v_t,"FNetModel"),v_t.forEach(t),wMo=r(Xxe," (FNet model)"),Xxe.forEach(t),AMo=i(x),w_=n(x,"LI",{});var zxe=s(w_);afe=n(zxe,"STRONG",{});var F_t=s(afe);LMo=r(F_t,"fsmt"),F_t.forEach(t),yMo=r(zxe," \u2014 "),jj=n(zxe,"A",{href:!0});var T_t=s(jj);xMo=r(T_t,"FSMTModel"),T_t.forEach(t),$Mo=r(zxe," (FairSeq Machine-Translation model)"),zxe.forEach(t),kMo=i(x),Hs=n(x,"LI",{});var IS=s(Hs);nfe=n(IS,"STRONG",{});var M_t=s(nfe);SMo=r(M_t,"funnel"),M_t.forEach(t),RMo=r(IS," \u2014 "),Dj=n(IS,"A",{href:!0});var E_t=s(Dj);PMo=r(E_t,"FunnelModel"),E_t.forEach(t),BMo=r(IS," or "),Gj=n(IS,"A",{href:!0});var C_t=s(Gj);NMo=r(C_t,"FunnelBaseModel"),C_t.forEach(t),IMo=r(IS," (Funnel Transformer model)"),IS.forEach(t),qMo=i(x),A_=n(x,"LI",{});var Qxe=s(A_);sfe=n(Qxe,"STRONG",{});var w_t=s(sfe);jMo=r(w_t,"glpn"),w_t.forEach(t),DMo=r(Qxe," \u2014 "),Oj=n(Qxe,"A",{href:!0});var A_t=s(Oj);GMo=r(A_t,"GLPNModel"),A_t.forEach(t),OMo=r(Qxe," (GLPN model)"),Qxe.forEach(t),VMo=i(x),L_=n(x,"LI",{});var Wxe=s(L_);lfe=n(Wxe,"STRONG",{});var L_t=s(lfe);XMo=r(L_t,"gpt2"),L_t.forEach(t),zMo=r(Wxe," \u2014 "),Vj=n(Wxe,"A",{href:!0});var y_t=s(Vj);QMo=r(y_t,"GPT2Model"),y_t.forEach(t),WMo=r(Wxe," (OpenAI GPT-2 model)"),Wxe.forEach(t),HMo=i(x),y_=n(x,"LI",{});var Hxe=s(y_);ife=n(Hxe,"STRONG",{});var x_t=s(ife);UMo=r(x_t,"gpt_neo"),x_t.forEach(t),JMo=r(Hxe," \u2014 "),Xj=n(Hxe,"A",{href:!0});var $_t=s(Xj);YMo=r($_t,"GPTNeoModel"),$_t.forEach(t),KMo=r(Hxe," (GPT Neo model)"),Hxe.forEach(t),ZMo=i(x),x_=n(x,"LI",{});var Uxe=s(x_);dfe=n(Uxe,"STRONG",{});var k_t=s(dfe);e4o=r(k_t,"gpt_neox"),k_t.forEach(t),o4o=r(Uxe," \u2014 "),zj=n(Uxe,"A",{href:!0});var S_t=s(zj);r4o=r(S_t,"GPTNeoXModel"),S_t.forEach(t),t4o=r(Uxe," (GPT NeoX model)"),Uxe.forEach(t),a4o=i(x),$_=n(x,"LI",{});var Jxe=s($_);cfe=n(Jxe,"STRONG",{});var R_t=s(cfe);n4o=r(R_t,"gptj"),R_t.forEach(t),s4o=r(Jxe," \u2014 "),Qj=n(Jxe,"A",{href:!0});var P_t=s(Qj);l4o=r(P_t,"GPTJModel"),P_t.forEach(t),i4o=r(Jxe," (GPT-J model)"),Jxe.forEach(t),d4o=i(x),k_=n(x,"LI",{});var Yxe=s(k_);ffe=n(Yxe,"STRONG",{});var B_t=s(ffe);c4o=r(B_t,"groupvit"),B_t.forEach(t),f4o=r(Yxe," \u2014 "),Wj=n(Yxe,"A",{href:!0});var N_t=s(Wj);m4o=r(N_t,"GroupViTModel"),N_t.forEach(t),g4o=r(Yxe," (GroupViT model)"),Yxe.forEach(t),h4o=i(x),S_=n(x,"LI",{});var Kxe=s(S_);mfe=n(Kxe,"STRONG",{});var I_t=s(mfe);p4o=r(I_t,"hubert"),I_t.forEach(t),_4o=r(Kxe," \u2014 "),Hj=n(Kxe,"A",{href:!0});var q_t=s(Hj);u4o=r(q_t,"HubertModel"),q_t.forEach(t),b4o=r(Kxe," (Hubert model)"),Kxe.forEach(t),v4o=i(x),R_=n(x,"LI",{});var Zxe=s(R_);gfe=n(Zxe,"STRONG",{});var j_t=s(gfe);F4o=r(j_t,"ibert"),j_t.forEach(t),T4o=r(Zxe," \u2014 "),Uj=n(Zxe,"A",{href:!0});var D_t=s(Uj);M4o=r(D_t,"IBertModel"),D_t.forEach(t),E4o=r(Zxe," (I-BERT model)"),Zxe.forEach(t),C4o=i(x),P_=n(x,"LI",{});var e$e=s(P_);hfe=n(e$e,"STRONG",{});var G_t=s(hfe);w4o=r(G_t,"imagegpt"),G_t.forEach(t),A4o=r(e$e," \u2014 "),Jj=n(e$e,"A",{href:!0});var O_t=s(Jj);L4o=r(O_t,"ImageGPTModel"),O_t.forEach(t),y4o=r(e$e," (ImageGPT model)"),e$e.forEach(t),x4o=i(x),B_=n(x,"LI",{});var o$e=s(B_);pfe=n(o$e,"STRONG",{});var V_t=s(pfe);$4o=r(V_t,"jukebox"),V_t.forEach(t),k4o=r(o$e," \u2014 "),_fe=n(o$e,"CODE",{});var X_t=s(_fe);S4o=r(X_t,"JukeboxModel"),X_t.forEach(t),R4o=r(o$e," (Jukebox model)"),o$e.forEach(t),P4o=i(x),N_=n(x,"LI",{});var r$e=s(N_);ufe=n(r$e,"STRONG",{});var z_t=s(ufe);B4o=r(z_t,"layoutlm"),z_t.forEach(t),N4o=r(r$e," \u2014 "),Yj=n(r$e,"A",{href:!0});var Q_t=s(Yj);I4o=r(Q_t,"LayoutLMModel"),Q_t.forEach(t),q4o=r(r$e," (LayoutLM model)"),r$e.forEach(t),j4o=i(x),I_=n(x,"LI",{});var t$e=s(I_);bfe=n(t$e,"STRONG",{});var W_t=s(bfe);D4o=r(W_t,"layoutlmv2"),W_t.forEach(t),G4o=r(t$e," \u2014 "),Kj=n(t$e,"A",{href:!0});var H_t=s(Kj);O4o=r(H_t,"LayoutLMv2Model"),H_t.forEach(t),V4o=r(t$e," (LayoutLMv2 model)"),t$e.forEach(t),X4o=i(x),q_=n(x,"LI",{});var a$e=s(q_);vfe=n(a$e,"STRONG",{});var U_t=s(vfe);z4o=r(U_t,"layoutlmv3"),U_t.forEach(t),Q4o=r(a$e," \u2014 "),Zj=n(a$e,"A",{href:!0});var J_t=s(Zj);W4o=r(J_t,"LayoutLMv3Model"),J_t.forEach(t),H4o=r(a$e," (LayoutLMv3 model)"),a$e.forEach(t),U4o=i(x),j_=n(x,"LI",{});var n$e=s(j_);Ffe=n(n$e,"STRONG",{});var Y_t=s(Ffe);J4o=r(Y_t,"led"),Y_t.forEach(t),Y4o=r(n$e," \u2014 "),eD=n(n$e,"A",{href:!0});var K_t=s(eD);K4o=r(K_t,"LEDModel"),K_t.forEach(t),Z4o=r(n$e," (LED model)"),n$e.forEach(t),eEo=i(x),D_=n(x,"LI",{});var s$e=s(D_);Tfe=n(s$e,"STRONG",{});var Z_t=s(Tfe);oEo=r(Z_t,"levit"),Z_t.forEach(t),rEo=r(s$e," \u2014 "),oD=n(s$e,"A",{href:!0});var eut=s(oD);tEo=r(eut,"LevitModel"),eut.forEach(t),aEo=r(s$e," (LeViT model)"),s$e.forEach(t),nEo=i(x),G_=n(x,"LI",{});var l$e=s(G_);Mfe=n(l$e,"STRONG",{});var out=s(Mfe);sEo=r(out,"longformer"),out.forEach(t),lEo=r(l$e," \u2014 "),rD=n(l$e,"A",{href:!0});var rut=s(rD);iEo=r(rut,"LongformerModel"),rut.forEach(t),dEo=r(l$e," (Longformer model)"),l$e.forEach(t),cEo=i(x),O_=n(x,"LI",{});var i$e=s(O_);Efe=n(i$e,"STRONG",{});var tut=s(Efe);fEo=r(tut,"longt5"),tut.forEach(t),mEo=r(i$e," \u2014 "),tD=n(i$e,"A",{href:!0});var aut=s(tD);gEo=r(aut,"LongT5Model"),aut.forEach(t),hEo=r(i$e," (LongT5 model)"),i$e.forEach(t),pEo=i(x),V_=n(x,"LI",{});var d$e=s(V_);Cfe=n(d$e,"STRONG",{});var nut=s(Cfe);_Eo=r(nut,"luke"),nut.forEach(t),uEo=r(d$e," \u2014 "),aD=n(d$e,"A",{href:!0});var sut=s(aD);bEo=r(sut,"LukeModel"),sut.forEach(t),vEo=r(d$e," (LUKE model)"),d$e.forEach(t),FEo=i(x),X_=n(x,"LI",{});var c$e=s(X_);wfe=n(c$e,"STRONG",{});var lut=s(wfe);TEo=r(lut,"lxmert"),lut.forEach(t),MEo=r(c$e," \u2014 "),nD=n(c$e,"A",{href:!0});var iut=s(nD);EEo=r(iut,"LxmertModel"),iut.forEach(t),CEo=r(c$e," (LXMERT model)"),c$e.forEach(t),wEo=i(x),z_=n(x,"LI",{});var f$e=s(z_);Afe=n(f$e,"STRONG",{});var dut=s(Afe);AEo=r(dut,"m2m_100"),dut.forEach(t),LEo=r(f$e," \u2014 "),sD=n(f$e,"A",{href:!0});var cut=s(sD);yEo=r(cut,"M2M100Model"),cut.forEach(t),xEo=r(f$e," (M2M100 model)"),f$e.forEach(t),$Eo=i(x),Q_=n(x,"LI",{});var m$e=s(Q_);Lfe=n(m$e,"STRONG",{});var fut=s(Lfe);kEo=r(fut,"marian"),fut.forEach(t),SEo=r(m$e," \u2014 "),lD=n(m$e,"A",{href:!0});var mut=s(lD);REo=r(mut,"MarianModel"),mut.forEach(t),PEo=r(m$e," (Marian model)"),m$e.forEach(t),BEo=i(x),W_=n(x,"LI",{});var g$e=s(W_);yfe=n(g$e,"STRONG",{});var gut=s(yfe);NEo=r(gut,"maskformer"),gut.forEach(t),IEo=r(g$e," \u2014 "),iD=n(g$e,"A",{href:!0});var hut=s(iD);qEo=r(hut,"MaskFormerModel"),hut.forEach(t),jEo=r(g$e," (MaskFormer model)"),g$e.forEach(t),DEo=i(x),H_=n(x,"LI",{});var h$e=s(H_);xfe=n(h$e,"STRONG",{});var put=s(xfe);GEo=r(put,"mbart"),put.forEach(t),OEo=r(h$e," \u2014 "),dD=n(h$e,"A",{href:!0});var _ut=s(dD);VEo=r(_ut,"MBartModel"),_ut.forEach(t),XEo=r(h$e," (mBART model)"),h$e.forEach(t),zEo=i(x),U_=n(x,"LI",{});var p$e=s(U_);$fe=n(p$e,"STRONG",{});var uut=s($fe);QEo=r(uut,"mctct"),uut.forEach(t),WEo=r(p$e," \u2014 "),cD=n(p$e,"A",{href:!0});var but=s(cD);HEo=r(but,"MCTCTModel"),but.forEach(t),UEo=r(p$e," (M-CTC-T model)"),p$e.forEach(t),JEo=i(x),J_=n(x,"LI",{});var _$e=s(J_);kfe=n(_$e,"STRONG",{});var vut=s(kfe);YEo=r(vut,"megatron-bert"),vut.forEach(t),KEo=r(_$e," \u2014 "),fD=n(_$e,"A",{href:!0});var Fut=s(fD);ZEo=r(Fut,"MegatronBertModel"),Fut.forEach(t),eCo=r(_$e," (Megatron-BERT model)"),_$e.forEach(t),oCo=i(x),Y_=n(x,"LI",{});var u$e=s(Y_);Sfe=n(u$e,"STRONG",{});var Tut=s(Sfe);rCo=r(Tut,"mobilebert"),Tut.forEach(t),tCo=r(u$e," \u2014 "),mD=n(u$e,"A",{href:!0});var Mut=s(mD);aCo=r(Mut,"MobileBertModel"),Mut.forEach(t),nCo=r(u$e," (MobileBERT model)"),u$e.forEach(t),sCo=i(x),K_=n(x,"LI",{});var b$e=s(K_);Rfe=n(b$e,"STRONG",{});var Eut=s(Rfe);lCo=r(Eut,"mobilevit"),Eut.forEach(t),iCo=r(b$e," \u2014 "),gD=n(b$e,"A",{href:!0});var Cut=s(gD);dCo=r(Cut,"MobileViTModel"),Cut.forEach(t),cCo=r(b$e," (MobileViT model)"),b$e.forEach(t),fCo=i(x),Z_=n(x,"LI",{});var v$e=s(Z_);Pfe=n(v$e,"STRONG",{});var wut=s(Pfe);mCo=r(wut,"mpnet"),wut.forEach(t),gCo=r(v$e," \u2014 "),hD=n(v$e,"A",{href:!0});var Aut=s(hD);hCo=r(Aut,"MPNetModel"),Aut.forEach(t),pCo=r(v$e," (MPNet model)"),v$e.forEach(t),_Co=i(x),eu=n(x,"LI",{});var F$e=s(eu);Bfe=n(F$e,"STRONG",{});var Lut=s(Bfe);uCo=r(Lut,"mt5"),Lut.forEach(t),bCo=r(F$e," \u2014 "),pD=n(F$e,"A",{href:!0});var yut=s(pD);vCo=r(yut,"MT5Model"),yut.forEach(t),FCo=r(F$e," (MT5 model)"),F$e.forEach(t),TCo=i(x),ou=n(x,"LI",{});var T$e=s(ou);Nfe=n(T$e,"STRONG",{});var xut=s(Nfe);MCo=r(xut,"mvp"),xut.forEach(t),ECo=r(T$e," \u2014 "),_D=n(T$e,"A",{href:!0});var $ut=s(_D);CCo=r($ut,"MvpModel"),$ut.forEach(t),wCo=r(T$e," (MVP model)"),T$e.forEach(t),ACo=i(x),ru=n(x,"LI",{});var M$e=s(ru);Ife=n(M$e,"STRONG",{});var kut=s(Ife);LCo=r(kut,"nezha"),kut.forEach(t),yCo=r(M$e," \u2014 "),uD=n(M$e,"A",{href:!0});var Sut=s(uD);xCo=r(Sut,"NezhaModel"),Sut.forEach(t),$Co=r(M$e," (Nezha model)"),M$e.forEach(t),kCo=i(x),tu=n(x,"LI",{});var E$e=s(tu);qfe=n(E$e,"STRONG",{});var Rut=s(qfe);SCo=r(Rut,"nllb"),Rut.forEach(t),RCo=r(E$e," \u2014 "),bD=n(E$e,"A",{href:!0});var Put=s(bD);PCo=r(Put,"M2M100Model"),Put.forEach(t),BCo=r(E$e," (NLLB model)"),E$e.forEach(t),NCo=i(x),au=n(x,"LI",{});var C$e=s(au);jfe=n(C$e,"STRONG",{});var But=s(jfe);ICo=r(But,"nystromformer"),But.forEach(t),qCo=r(C$e," \u2014 "),vD=n(C$e,"A",{href:!0});var Nut=s(vD);jCo=r(Nut,"NystromformerModel"),Nut.forEach(t),DCo=r(C$e," (Nystr\xF6mformer model)"),C$e.forEach(t),GCo=i(x),nu=n(x,"LI",{});var w$e=s(nu);Dfe=n(w$e,"STRONG",{});var Iut=s(Dfe);OCo=r(Iut,"openai-gpt"),Iut.forEach(t),VCo=r(w$e," \u2014 "),FD=n(w$e,"A",{href:!0});var qut=s(FD);XCo=r(qut,"OpenAIGPTModel"),qut.forEach(t),zCo=r(w$e," (OpenAI GPT model)"),w$e.forEach(t),QCo=i(x),su=n(x,"LI",{});var A$e=s(su);Gfe=n(A$e,"STRONG",{});var jut=s(Gfe);WCo=r(jut,"opt"),jut.forEach(t),HCo=r(A$e," \u2014 "),TD=n(A$e,"A",{href:!0});var Dut=s(TD);UCo=r(Dut,"OPTModel"),Dut.forEach(t),JCo=r(A$e," (OPT model)"),A$e.forEach(t),YCo=i(x),lu=n(x,"LI",{});var L$e=s(lu);Ofe=n(L$e,"STRONG",{});var Gut=s(Ofe);KCo=r(Gut,"pegasus"),Gut.forEach(t),ZCo=r(L$e," \u2014 "),MD=n(L$e,"A",{href:!0});var Out=s(MD);e5o=r(Out,"PegasusModel"),Out.forEach(t),o5o=r(L$e," (Pegasus model)"),L$e.forEach(t),r5o=i(x),iu=n(x,"LI",{});var y$e=s(iu);Vfe=n(y$e,"STRONG",{});var Vut=s(Vfe);t5o=r(Vut,"perceiver"),Vut.forEach(t),a5o=r(y$e," \u2014 "),ED=n(y$e,"A",{href:!0});var Xut=s(ED);n5o=r(Xut,"PerceiverModel"),Xut.forEach(t),s5o=r(y$e," (Perceiver model)"),y$e.forEach(t),l5o=i(x),du=n(x,"LI",{});var x$e=s(du);Xfe=n(x$e,"STRONG",{});var zut=s(Xfe);i5o=r(zut,"plbart"),zut.forEach(t),d5o=r(x$e," \u2014 "),CD=n(x$e,"A",{href:!0});var Qut=s(CD);c5o=r(Qut,"PLBartModel"),Qut.forEach(t),f5o=r(x$e," (PLBart model)"),x$e.forEach(t),m5o=i(x),cu=n(x,"LI",{});var $$e=s(cu);zfe=n($$e,"STRONG",{});var Wut=s(zfe);g5o=r(Wut,"poolformer"),Wut.forEach(t),h5o=r($$e," \u2014 "),wD=n($$e,"A",{href:!0});var Hut=s(wD);p5o=r(Hut,"PoolFormerModel"),Hut.forEach(t),_5o=r($$e," (PoolFormer model)"),$$e.forEach(t),u5o=i(x),fu=n(x,"LI",{});var k$e=s(fu);Qfe=n(k$e,"STRONG",{});var Uut=s(Qfe);b5o=r(Uut,"prophetnet"),Uut.forEach(t),v5o=r(k$e," \u2014 "),AD=n(k$e,"A",{href:!0});var Jut=s(AD);F5o=r(Jut,"ProphetNetModel"),Jut.forEach(t),T5o=r(k$e," (ProphetNet model)"),k$e.forEach(t),M5o=i(x),mu=n(x,"LI",{});var S$e=s(mu);Wfe=n(S$e,"STRONG",{});var Yut=s(Wfe);E5o=r(Yut,"qdqbert"),Yut.forEach(t),C5o=r(S$e," \u2014 "),LD=n(S$e,"A",{href:!0});var Kut=s(LD);w5o=r(Kut,"QDQBertModel"),Kut.forEach(t),A5o=r(S$e," (QDQBert model)"),S$e.forEach(t),L5o=i(x),gu=n(x,"LI",{});var R$e=s(gu);Hfe=n(R$e,"STRONG",{});var Zut=s(Hfe);y5o=r(Zut,"reformer"),Zut.forEach(t),x5o=r(R$e," \u2014 "),yD=n(R$e,"A",{href:!0});var e2t=s(yD);$5o=r(e2t,"ReformerModel"),e2t.forEach(t),k5o=r(R$e," (Reformer model)"),R$e.forEach(t),S5o=i(x),hu=n(x,"LI",{});var P$e=s(hu);Ufe=n(P$e,"STRONG",{});var o2t=s(Ufe);R5o=r(o2t,"regnet"),o2t.forEach(t),P5o=r(P$e," \u2014 "),xD=n(P$e,"A",{href:!0});var r2t=s(xD);B5o=r(r2t,"RegNetModel"),r2t.forEach(t),N5o=r(P$e," (RegNet model)"),P$e.forEach(t),I5o=i(x),pu=n(x,"LI",{});var B$e=s(pu);Jfe=n(B$e,"STRONG",{});var t2t=s(Jfe);q5o=r(t2t,"rembert"),t2t.forEach(t),j5o=r(B$e," \u2014 "),$D=n(B$e,"A",{href:!0});var a2t=s($D);D5o=r(a2t,"RemBertModel"),a2t.forEach(t),G5o=r(B$e," (RemBERT model)"),B$e.forEach(t),O5o=i(x),_u=n(x,"LI",{});var N$e=s(_u);Yfe=n(N$e,"STRONG",{});var n2t=s(Yfe);V5o=r(n2t,"resnet"),n2t.forEach(t),X5o=r(N$e," \u2014 "),kD=n(N$e,"A",{href:!0});var s2t=s(kD);z5o=r(s2t,"ResNetModel"),s2t.forEach(t),Q5o=r(N$e," (ResNet model)"),N$e.forEach(t),W5o=i(x),uu=n(x,"LI",{});var I$e=s(uu);Kfe=n(I$e,"STRONG",{});var l2t=s(Kfe);H5o=r(l2t,"retribert"),l2t.forEach(t),U5o=r(I$e," \u2014 "),SD=n(I$e,"A",{href:!0});var i2t=s(SD);J5o=r(i2t,"RetriBertModel"),i2t.forEach(t),Y5o=r(I$e," (RetriBERT model)"),I$e.forEach(t),K5o=i(x),bu=n(x,"LI",{});var q$e=s(bu);Zfe=n(q$e,"STRONG",{});var d2t=s(Zfe);Z5o=r(d2t,"roberta"),d2t.forEach(t),e3o=r(q$e," \u2014 "),RD=n(q$e,"A",{href:!0});var c2t=s(RD);o3o=r(c2t,"RobertaModel"),c2t.forEach(t),r3o=r(q$e," (RoBERTa model)"),q$e.forEach(t),t3o=i(x),vu=n(x,"LI",{});var j$e=s(vu);eme=n(j$e,"STRONG",{});var f2t=s(eme);a3o=r(f2t,"roformer"),f2t.forEach(t),n3o=r(j$e," \u2014 "),PD=n(j$e,"A",{href:!0});var m2t=s(PD);s3o=r(m2t,"RoFormerModel"),m2t.forEach(t),l3o=r(j$e," (RoFormer model)"),j$e.forEach(t),i3o=i(x),Fu=n(x,"LI",{});var D$e=s(Fu);ome=n(D$e,"STRONG",{});var g2t=s(ome);d3o=r(g2t,"segformer"),g2t.forEach(t),c3o=r(D$e," \u2014 "),BD=n(D$e,"A",{href:!0});var h2t=s(BD);f3o=r(h2t,"SegformerModel"),h2t.forEach(t),m3o=r(D$e," (SegFormer model)"),D$e.forEach(t),g3o=i(x),Tu=n(x,"LI",{});var G$e=s(Tu);rme=n(G$e,"STRONG",{});var p2t=s(rme);h3o=r(p2t,"sew"),p2t.forEach(t),p3o=r(G$e," \u2014 "),ND=n(G$e,"A",{href:!0});var _2t=s(ND);_3o=r(_2t,"SEWModel"),_2t.forEach(t),u3o=r(G$e," (SEW model)"),G$e.forEach(t),b3o=i(x),Mu=n(x,"LI",{});var O$e=s(Mu);tme=n(O$e,"STRONG",{});var u2t=s(tme);v3o=r(u2t,"sew-d"),u2t.forEach(t),F3o=r(O$e," \u2014 "),ID=n(O$e,"A",{href:!0});var b2t=s(ID);T3o=r(b2t,"SEWDModel"),b2t.forEach(t),M3o=r(O$e," (SEW-D model)"),O$e.forEach(t),E3o=i(x),Eu=n(x,"LI",{});var V$e=s(Eu);ame=n(V$e,"STRONG",{});var v2t=s(ame);C3o=r(v2t,"speech_to_text"),v2t.forEach(t),w3o=r(V$e," \u2014 "),qD=n(V$e,"A",{href:!0});var F2t=s(qD);A3o=r(F2t,"Speech2TextModel"),F2t.forEach(t),L3o=r(V$e," (Speech2Text model)"),V$e.forEach(t),y3o=i(x),Cu=n(x,"LI",{});var X$e=s(Cu);nme=n(X$e,"STRONG",{});var T2t=s(nme);x3o=r(T2t,"splinter"),T2t.forEach(t),$3o=r(X$e," \u2014 "),jD=n(X$e,"A",{href:!0});var M2t=s(jD);k3o=r(M2t,"SplinterModel"),M2t.forEach(t),S3o=r(X$e," (Splinter model)"),X$e.forEach(t),R3o=i(x),wu=n(x,"LI",{});var z$e=s(wu);sme=n(z$e,"STRONG",{});var E2t=s(sme);P3o=r(E2t,"squeezebert"),E2t.forEach(t),B3o=r(z$e," \u2014 "),DD=n(z$e,"A",{href:!0});var C2t=s(DD);N3o=r(C2t,"SqueezeBertModel"),C2t.forEach(t),I3o=r(z$e," (SqueezeBERT model)"),z$e.forEach(t),q3o=i(x),Au=n(x,"LI",{});var Q$e=s(Au);lme=n(Q$e,"STRONG",{});var w2t=s(lme);j3o=r(w2t,"swin"),w2t.forEach(t),D3o=r(Q$e," \u2014 "),GD=n(Q$e,"A",{href:!0});var A2t=s(GD);G3o=r(A2t,"SwinModel"),A2t.forEach(t),O3o=r(Q$e," (Swin Transformer model)"),Q$e.forEach(t),V3o=i(x),Lu=n(x,"LI",{});var W$e=s(Lu);ime=n(W$e,"STRONG",{});var L2t=s(ime);X3o=r(L2t,"t5"),L2t.forEach(t),z3o=r(W$e," \u2014 "),OD=n(W$e,"A",{href:!0});var y2t=s(OD);Q3o=r(y2t,"T5Model"),y2t.forEach(t),W3o=r(W$e," (T5 model)"),W$e.forEach(t),H3o=i(x),yu=n(x,"LI",{});var H$e=s(yu);dme=n(H$e,"STRONG",{});var x2t=s(dme);U3o=r(x2t,"tapas"),x2t.forEach(t),J3o=r(H$e," \u2014 "),VD=n(H$e,"A",{href:!0});var $2t=s(VD);Y3o=r($2t,"TapasModel"),$2t.forEach(t),K3o=r(H$e," (TAPAS model)"),H$e.forEach(t),Z3o=i(x),xu=n(x,"LI",{});var U$e=s(xu);cme=n(U$e,"STRONG",{});var k2t=s(cme);e0o=r(k2t,"trajectory_transformer"),k2t.forEach(t),o0o=r(U$e," \u2014 "),XD=n(U$e,"A",{href:!0});var S2t=s(XD);r0o=r(S2t,"TrajectoryTransformerModel"),S2t.forEach(t),t0o=r(U$e," (Trajectory Transformer model)"),U$e.forEach(t),a0o=i(x),$u=n(x,"LI",{});var J$e=s($u);fme=n(J$e,"STRONG",{});var R2t=s(fme);n0o=r(R2t,"transfo-xl"),R2t.forEach(t),s0o=r(J$e," \u2014 "),zD=n(J$e,"A",{href:!0});var P2t=s(zD);l0o=r(P2t,"TransfoXLModel"),P2t.forEach(t),i0o=r(J$e," (Transformer-XL model)"),J$e.forEach(t),d0o=i(x),ku=n(x,"LI",{});var Y$e=s(ku);mme=n(Y$e,"STRONG",{});var B2t=s(mme);c0o=r(B2t,"unispeech"),B2t.forEach(t),f0o=r(Y$e," \u2014 "),QD=n(Y$e,"A",{href:!0});var N2t=s(QD);m0o=r(N2t,"UniSpeechModel"),N2t.forEach(t),g0o=r(Y$e," (UniSpeech model)"),Y$e.forEach(t),h0o=i(x),Su=n(x,"LI",{});var K$e=s(Su);gme=n(K$e,"STRONG",{});var I2t=s(gme);p0o=r(I2t,"unispeech-sat"),I2t.forEach(t),_0o=r(K$e," \u2014 "),WD=n(K$e,"A",{href:!0});var q2t=s(WD);u0o=r(q2t,"UniSpeechSatModel"),q2t.forEach(t),b0o=r(K$e," (UniSpeechSat model)"),K$e.forEach(t),v0o=i(x),Ru=n(x,"LI",{});var Z$e=s(Ru);hme=n(Z$e,"STRONG",{});var j2t=s(hme);F0o=r(j2t,"van"),j2t.forEach(t),T0o=r(Z$e," \u2014 "),HD=n(Z$e,"A",{href:!0});var D2t=s(HD);M0o=r(D2t,"VanModel"),D2t.forEach(t),E0o=r(Z$e," (VAN model)"),Z$e.forEach(t),C0o=i(x),Pu=n(x,"LI",{});var eke=s(Pu);pme=n(eke,"STRONG",{});var G2t=s(pme);w0o=r(G2t,"vilt"),G2t.forEach(t),A0o=r(eke," \u2014 "),UD=n(eke,"A",{href:!0});var O2t=s(UD);L0o=r(O2t,"ViltModel"),O2t.forEach(t),y0o=r(eke," (ViLT model)"),eke.forEach(t),x0o=i(x),Bu=n(x,"LI",{});var oke=s(Bu);_me=n(oke,"STRONG",{});var V2t=s(_me);$0o=r(V2t,"vision-text-dual-encoder"),V2t.forEach(t),k0o=r(oke," \u2014 "),JD=n(oke,"A",{href:!0});var X2t=s(JD);S0o=r(X2t,"VisionTextDualEncoderModel"),X2t.forEach(t),R0o=r(oke," (VisionTextDualEncoder model)"),oke.forEach(t),P0o=i(x),Nu=n(x,"LI",{});var rke=s(Nu);ume=n(rke,"STRONG",{});var z2t=s(ume);B0o=r(z2t,"visual_bert"),z2t.forEach(t),N0o=r(rke," \u2014 "),YD=n(rke,"A",{href:!0});var Q2t=s(YD);I0o=r(Q2t,"VisualBertModel"),Q2t.forEach(t),q0o=r(rke," (VisualBERT model)"),rke.forEach(t),j0o=i(x),Iu=n(x,"LI",{});var tke=s(Iu);bme=n(tke,"STRONG",{});var W2t=s(bme);D0o=r(W2t,"vit"),W2t.forEach(t),G0o=r(tke," \u2014 "),KD=n(tke,"A",{href:!0});var H2t=s(KD);O0o=r(H2t,"ViTModel"),H2t.forEach(t),V0o=r(tke," (ViT model)"),tke.forEach(t),X0o=i(x),qu=n(x,"LI",{});var ake=s(qu);vme=n(ake,"STRONG",{});var U2t=s(vme);z0o=r(U2t,"vit_mae"),U2t.forEach(t),Q0o=r(ake," \u2014 "),ZD=n(ake,"A",{href:!0});var J2t=s(ZD);W0o=r(J2t,"ViTMAEModel"),J2t.forEach(t),H0o=r(ake," (ViTMAE model)"),ake.forEach(t),U0o=i(x),ju=n(x,"LI",{});var nke=s(ju);Fme=n(nke,"STRONG",{});var Y2t=s(Fme);J0o=r(Y2t,"wav2vec2"),Y2t.forEach(t),Y0o=r(nke," \u2014 "),eG=n(nke,"A",{href:!0});var K2t=s(eG);K0o=r(K2t,"Wav2Vec2Model"),K2t.forEach(t),Z0o=r(nke," (Wav2Vec2 model)"),nke.forEach(t),ewo=i(x),Du=n(x,"LI",{});var ske=s(Du);Tme=n(ske,"STRONG",{});var Z2t=s(Tme);owo=r(Z2t,"wav2vec2-conformer"),Z2t.forEach(t),rwo=r(ske," \u2014 "),oG=n(ske,"A",{href:!0});var e1t=s(oG);two=r(e1t,"Wav2Vec2ConformerModel"),e1t.forEach(t),awo=r(ske," (Wav2Vec2-Conformer model)"),ske.forEach(t),nwo=i(x),Gu=n(x,"LI",{});var lke=s(Gu);Mme=n(lke,"STRONG",{});var o1t=s(Mme);swo=r(o1t,"wavlm"),o1t.forEach(t),lwo=r(lke," \u2014 "),rG=n(lke,"A",{href:!0});var r1t=s(rG);iwo=r(r1t,"WavLMModel"),r1t.forEach(t),dwo=r(lke," (WavLM model)"),lke.forEach(t),cwo=i(x),Ou=n(x,"LI",{});var ike=s(Ou);Eme=n(ike,"STRONG",{});var t1t=s(Eme);fwo=r(t1t,"xglm"),t1t.forEach(t),mwo=r(ike," \u2014 "),tG=n(ike,"A",{href:!0});var a1t=s(tG);gwo=r(a1t,"XGLMModel"),a1t.forEach(t),hwo=r(ike," (XGLM model)"),ike.forEach(t),pwo=i(x),Vu=n(x,"LI",{});var dke=s(Vu);Cme=n(dke,"STRONG",{});var n1t=s(Cme);_wo=r(n1t,"xlm"),n1t.forEach(t),uwo=r(dke," \u2014 "),aG=n(dke,"A",{href:!0});var s1t=s(aG);bwo=r(s1t,"XLMModel"),s1t.forEach(t),vwo=r(dke," (XLM model)"),dke.forEach(t),Fwo=i(x),Xu=n(x,"LI",{});var cke=s(Xu);wme=n(cke,"STRONG",{});var l1t=s(wme);Two=r(l1t,"xlm-prophetnet"),l1t.forEach(t),Mwo=r(cke," \u2014 "),nG=n(cke,"A",{href:!0});var i1t=s(nG);Ewo=r(i1t,"XLMProphetNetModel"),i1t.forEach(t),Cwo=r(cke," (XLM-ProphetNet model)"),cke.forEach(t),wwo=i(x),zu=n(x,"LI",{});var fke=s(zu);Ame=n(fke,"STRONG",{});var d1t=s(Ame);Awo=r(d1t,"xlm-roberta"),d1t.forEach(t),Lwo=r(fke," \u2014 "),sG=n(fke,"A",{href:!0});var c1t=s(sG);ywo=r(c1t,"XLMRobertaModel"),c1t.forEach(t),xwo=r(fke," (XLM-RoBERTa model)"),fke.forEach(t),$wo=i(x),Qu=n(x,"LI",{});var mke=s(Qu);Lme=n(mke,"STRONG",{});var f1t=s(Lme);kwo=r(f1t,"xlm-roberta-xl"),f1t.forEach(t),Swo=r(mke," \u2014 "),lG=n(mke,"A",{href:!0});var m1t=s(lG);Rwo=r(m1t,"XLMRobertaXLModel"),m1t.forEach(t),Pwo=r(mke," (XLM-RoBERTa-XL model)"),mke.forEach(t),Bwo=i(x),Wu=n(x,"LI",{});var gke=s(Wu);yme=n(gke,"STRONG",{});var g1t=s(yme);Nwo=r(g1t,"xlnet"),g1t.forEach(t),Iwo=r(gke," \u2014 "),iG=n(gke,"A",{href:!0});var h1t=s(iG);qwo=r(h1t,"XLNetModel"),h1t.forEach(t),jwo=r(gke," (XLNet model)"),gke.forEach(t),Dwo=i(x),Hu=n(x,"LI",{});var hke=s(Hu);xme=n(hke,"STRONG",{});var p1t=s(xme);Gwo=r(p1t,"yolos"),p1t.forEach(t),Owo=r(hke," \u2014 "),dG=n(hke,"A",{href:!0});var _1t=s(dG);Vwo=r(_1t,"YolosModel"),_1t.forEach(t),Xwo=r(hke," (YOLOS model)"),hke.forEach(t),zwo=i(x),Uu=n(x,"LI",{});var pke=s(Uu);$me=n(pke,"STRONG",{});var u1t=s($me);Qwo=r(u1t,"yoso"),u1t.forEach(t),Wwo=r(pke," \u2014 "),cG=n(pke,"A",{href:!0});var b1t=s(cG);Hwo=r(b1t,"YosoModel"),b1t.forEach(t),Uwo=r(pke," (YOSO model)"),pke.forEach(t),x.forEach(t),Jwo=i(la),Ju=n(la,"P",{});var _ke=s(Ju);Ywo=r(_ke,"The model is set in evaluation mode by default using "),kme=n(_ke,"CODE",{});var v1t=s(kme);Kwo=r(v1t,"model.eval()"),v1t.forEach(t),Zwo=r(_ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=n(_ke,"CODE",{});var F1t=s(Sme);eAo=r(F1t,"model.train()"),F1t.forEach(t),_ke.forEach(t),oAo=i(la),T(Yu.$$.fragment,la),la.forEach(t),tl.forEach(t),IXe=i(f),zi=n(f,"H2",{class:!0});var VQe=s(zi);Ku=n(VQe,"A",{id:!0,class:!0,href:!0});var T1t=s(Ku);Rme=n(T1t,"SPAN",{});var M1t=s(Rme);T(GL.$$.fragment,M1t),M1t.forEach(t),T1t.forEach(t),rAo=i(VQe),Pme=n(VQe,"SPAN",{});var E1t=s(Pme);tAo=r(E1t,"AutoModelForPreTraining"),E1t.forEach(t),VQe.forEach(t),qXe=i(f),ko=n(f,"DIV",{class:!0});var al=s(ko);T(OL.$$.fragment,al),aAo=i(al),Qi=n(al,"P",{});var zre=s(Qi);nAo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fG=n(zre,"A",{href:!0});var C1t=s(fG);sAo=r(C1t,"from_pretrained()"),C1t.forEach(t),lAo=r(zre," class method or the "),mG=n(zre,"A",{href:!0});var w1t=s(mG);iAo=r(w1t,"from_config()"),w1t.forEach(t),dAo=r(zre,` class
method.`),zre.forEach(t),cAo=i(al),VL=n(al,"P",{});var XQe=s(VL);fAo=r(XQe,"This class cannot be instantiated directly using "),Bme=n(XQe,"CODE",{});var A1t=s(Bme);mAo=r(A1t,"__init__()"),A1t.forEach(t),gAo=r(XQe," (throws an error)."),XQe.forEach(t),hAo=i(al),dt=n(al,"DIV",{class:!0});var _w=s(dt);T(XL.$$.fragment,_w),pAo=i(_w),Nme=n(_w,"P",{});var L1t=s(Nme);_Ao=r(L1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),L1t.forEach(t),uAo=i(_w),Wi=n(_w,"P",{});var Qre=s(Wi);bAo=r(Qre,`Note:
Loading a model from its configuration file does `),Ime=n(Qre,"STRONG",{});var y1t=s(Ime);vAo=r(y1t,"not"),y1t.forEach(t),FAo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=n(Qre,"A",{href:!0});var x1t=s(gG);TAo=r(x1t,"from_pretrained()"),x1t.forEach(t),MAo=r(Qre," to load the model weights."),Qre.forEach(t),EAo=i(_w),T(Zu.$$.fragment,_w),_w.forEach(t),CAo=i(al),Ke=n(al,"DIV",{class:!0});var ia=s(Ke);T(zL.$$.fragment,ia),wAo=i(ia),qme=n(ia,"P",{});var $1t=s(qme);AAo=r($1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$1t.forEach(t),LAo=i(ia),Ia=n(ia,"P",{});var uw=s(Ia);yAo=r(uw,"The model class to instantiate is selected based on the "),jme=n(uw,"CODE",{});var k1t=s(jme);xAo=r(k1t,"model_type"),k1t.forEach(t),$Ao=r(uw,` property of the config object (either
passed as an argument or loaded from `),Dme=n(uw,"CODE",{});var S1t=s(Dme);kAo=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),SAo=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=n(uw,"CODE",{});var R1t=s(Gme);RAo=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),PAo=r(uw,":"),uw.forEach(t),BAo=i(ia),G=n(ia,"UL",{});var O=s(G);e2=n(O,"LI",{});var uke=s(e2);Ome=n(uke,"STRONG",{});var P1t=s(Ome);NAo=r(P1t,"albert"),P1t.forEach(t),IAo=r(uke," \u2014 "),hG=n(uke,"A",{href:!0});var B1t=s(hG);qAo=r(B1t,"AlbertForPreTraining"),B1t.forEach(t),jAo=r(uke," (ALBERT model)"),uke.forEach(t),DAo=i(O),o2=n(O,"LI",{});var bke=s(o2);Vme=n(bke,"STRONG",{});var N1t=s(Vme);GAo=r(N1t,"bart"),N1t.forEach(t),OAo=r(bke," \u2014 "),pG=n(bke,"A",{href:!0});var I1t=s(pG);VAo=r(I1t,"BartForConditionalGeneration"),I1t.forEach(t),XAo=r(bke," (BART model)"),bke.forEach(t),zAo=i(O),r2=n(O,"LI",{});var vke=s(r2);Xme=n(vke,"STRONG",{});var q1t=s(Xme);QAo=r(q1t,"bert"),q1t.forEach(t),WAo=r(vke," \u2014 "),_G=n(vke,"A",{href:!0});var j1t=s(_G);HAo=r(j1t,"BertForPreTraining"),j1t.forEach(t),UAo=r(vke," (BERT model)"),vke.forEach(t),JAo=i(O),t2=n(O,"LI",{});var Fke=s(t2);zme=n(Fke,"STRONG",{});var D1t=s(zme);YAo=r(D1t,"big_bird"),D1t.forEach(t),KAo=r(Fke," \u2014 "),uG=n(Fke,"A",{href:!0});var G1t=s(uG);ZAo=r(G1t,"BigBirdForPreTraining"),G1t.forEach(t),eLo=r(Fke," (BigBird model)"),Fke.forEach(t),oLo=i(O),a2=n(O,"LI",{});var Tke=s(a2);Qme=n(Tke,"STRONG",{});var O1t=s(Qme);rLo=r(O1t,"bloom"),O1t.forEach(t),tLo=r(Tke," \u2014 "),bG=n(Tke,"A",{href:!0});var V1t=s(bG);aLo=r(V1t,"BloomForCausalLM"),V1t.forEach(t),nLo=r(Tke," (BLOOM model)"),Tke.forEach(t),sLo=i(O),n2=n(O,"LI",{});var Mke=s(n2);Wme=n(Mke,"STRONG",{});var X1t=s(Wme);lLo=r(X1t,"camembert"),X1t.forEach(t),iLo=r(Mke," \u2014 "),vG=n(Mke,"A",{href:!0});var z1t=s(vG);dLo=r(z1t,"CamembertForMaskedLM"),z1t.forEach(t),cLo=r(Mke," (CamemBERT model)"),Mke.forEach(t),fLo=i(O),s2=n(O,"LI",{});var Eke=s(s2);Hme=n(Eke,"STRONG",{});var Q1t=s(Hme);mLo=r(Q1t,"ctrl"),Q1t.forEach(t),gLo=r(Eke," \u2014 "),FG=n(Eke,"A",{href:!0});var W1t=s(FG);hLo=r(W1t,"CTRLLMHeadModel"),W1t.forEach(t),pLo=r(Eke," (CTRL model)"),Eke.forEach(t),_Lo=i(O),l2=n(O,"LI",{});var Cke=s(l2);Ume=n(Cke,"STRONG",{});var H1t=s(Ume);uLo=r(H1t,"data2vec-text"),H1t.forEach(t),bLo=r(Cke," \u2014 "),TG=n(Cke,"A",{href:!0});var U1t=s(TG);vLo=r(U1t,"Data2VecTextForMaskedLM"),U1t.forEach(t),FLo=r(Cke," (Data2VecText model)"),Cke.forEach(t),TLo=i(O),i2=n(O,"LI",{});var wke=s(i2);Jme=n(wke,"STRONG",{});var J1t=s(Jme);MLo=r(J1t,"deberta"),J1t.forEach(t),ELo=r(wke," \u2014 "),MG=n(wke,"A",{href:!0});var Y1t=s(MG);CLo=r(Y1t,"DebertaForMaskedLM"),Y1t.forEach(t),wLo=r(wke," (DeBERTa model)"),wke.forEach(t),ALo=i(O),d2=n(O,"LI",{});var Ake=s(d2);Yme=n(Ake,"STRONG",{});var K1t=s(Yme);LLo=r(K1t,"deberta-v2"),K1t.forEach(t),yLo=r(Ake," \u2014 "),EG=n(Ake,"A",{href:!0});var Z1t=s(EG);xLo=r(Z1t,"DebertaV2ForMaskedLM"),Z1t.forEach(t),$Lo=r(Ake," (DeBERTa-v2 model)"),Ake.forEach(t),kLo=i(O),c2=n(O,"LI",{});var Lke=s(c2);Kme=n(Lke,"STRONG",{});var ebt=s(Kme);SLo=r(ebt,"distilbert"),ebt.forEach(t),RLo=r(Lke," \u2014 "),CG=n(Lke,"A",{href:!0});var obt=s(CG);PLo=r(obt,"DistilBertForMaskedLM"),obt.forEach(t),BLo=r(Lke," (DistilBERT model)"),Lke.forEach(t),NLo=i(O),f2=n(O,"LI",{});var yke=s(f2);Zme=n(yke,"STRONG",{});var rbt=s(Zme);ILo=r(rbt,"electra"),rbt.forEach(t),qLo=r(yke," \u2014 "),wG=n(yke,"A",{href:!0});var tbt=s(wG);jLo=r(tbt,"ElectraForPreTraining"),tbt.forEach(t),DLo=r(yke," (ELECTRA model)"),yke.forEach(t),GLo=i(O),m2=n(O,"LI",{});var xke=s(m2);ege=n(xke,"STRONG",{});var abt=s(ege);OLo=r(abt,"flaubert"),abt.forEach(t),VLo=r(xke," \u2014 "),AG=n(xke,"A",{href:!0});var nbt=s(AG);XLo=r(nbt,"FlaubertWithLMHeadModel"),nbt.forEach(t),zLo=r(xke," (FlauBERT model)"),xke.forEach(t),QLo=i(O),g2=n(O,"LI",{});var $ke=s(g2);oge=n($ke,"STRONG",{});var sbt=s(oge);WLo=r(sbt,"flava"),sbt.forEach(t),HLo=r($ke," \u2014 "),LG=n($ke,"A",{href:!0});var lbt=s(LG);ULo=r(lbt,"FlavaForPreTraining"),lbt.forEach(t),JLo=r($ke," (FLAVA model)"),$ke.forEach(t),YLo=i(O),h2=n(O,"LI",{});var kke=s(h2);rge=n(kke,"STRONG",{});var ibt=s(rge);KLo=r(ibt,"fnet"),ibt.forEach(t),ZLo=r(kke," \u2014 "),yG=n(kke,"A",{href:!0});var dbt=s(yG);eyo=r(dbt,"FNetForPreTraining"),dbt.forEach(t),oyo=r(kke," (FNet model)"),kke.forEach(t),ryo=i(O),p2=n(O,"LI",{});var Ske=s(p2);tge=n(Ske,"STRONG",{});var cbt=s(tge);tyo=r(cbt,"fsmt"),cbt.forEach(t),ayo=r(Ske," \u2014 "),xG=n(Ske,"A",{href:!0});var fbt=s(xG);nyo=r(fbt,"FSMTForConditionalGeneration"),fbt.forEach(t),syo=r(Ske," (FairSeq Machine-Translation model)"),Ske.forEach(t),lyo=i(O),_2=n(O,"LI",{});var Rke=s(_2);age=n(Rke,"STRONG",{});var mbt=s(age);iyo=r(mbt,"funnel"),mbt.forEach(t),dyo=r(Rke," \u2014 "),$G=n(Rke,"A",{href:!0});var gbt=s($G);cyo=r(gbt,"FunnelForPreTraining"),gbt.forEach(t),fyo=r(Rke," (Funnel Transformer model)"),Rke.forEach(t),myo=i(O),u2=n(O,"LI",{});var Pke=s(u2);nge=n(Pke,"STRONG",{});var hbt=s(nge);gyo=r(hbt,"gpt2"),hbt.forEach(t),hyo=r(Pke," \u2014 "),kG=n(Pke,"A",{href:!0});var pbt=s(kG);pyo=r(pbt,"GPT2LMHeadModel"),pbt.forEach(t),_yo=r(Pke," (OpenAI GPT-2 model)"),Pke.forEach(t),uyo=i(O),b2=n(O,"LI",{});var Bke=s(b2);sge=n(Bke,"STRONG",{});var _bt=s(sge);byo=r(_bt,"ibert"),_bt.forEach(t),vyo=r(Bke," \u2014 "),SG=n(Bke,"A",{href:!0});var ubt=s(SG);Fyo=r(ubt,"IBertForMaskedLM"),ubt.forEach(t),Tyo=r(Bke," (I-BERT model)"),Bke.forEach(t),Myo=i(O),v2=n(O,"LI",{});var Nke=s(v2);lge=n(Nke,"STRONG",{});var bbt=s(lge);Eyo=r(bbt,"layoutlm"),bbt.forEach(t),Cyo=r(Nke," \u2014 "),RG=n(Nke,"A",{href:!0});var vbt=s(RG);wyo=r(vbt,"LayoutLMForMaskedLM"),vbt.forEach(t),Ayo=r(Nke," (LayoutLM model)"),Nke.forEach(t),Lyo=i(O),F2=n(O,"LI",{});var Ike=s(F2);ige=n(Ike,"STRONG",{});var Fbt=s(ige);yyo=r(Fbt,"longformer"),Fbt.forEach(t),xyo=r(Ike," \u2014 "),PG=n(Ike,"A",{href:!0});var Tbt=s(PG);$yo=r(Tbt,"LongformerForMaskedLM"),Tbt.forEach(t),kyo=r(Ike," (Longformer model)"),Ike.forEach(t),Syo=i(O),T2=n(O,"LI",{});var qke=s(T2);dge=n(qke,"STRONG",{});var Mbt=s(dge);Ryo=r(Mbt,"lxmert"),Mbt.forEach(t),Pyo=r(qke," \u2014 "),BG=n(qke,"A",{href:!0});var Ebt=s(BG);Byo=r(Ebt,"LxmertForPreTraining"),Ebt.forEach(t),Nyo=r(qke," (LXMERT model)"),qke.forEach(t),Iyo=i(O),M2=n(O,"LI",{});var jke=s(M2);cge=n(jke,"STRONG",{});var Cbt=s(cge);qyo=r(Cbt,"megatron-bert"),Cbt.forEach(t),jyo=r(jke," \u2014 "),NG=n(jke,"A",{href:!0});var wbt=s(NG);Dyo=r(wbt,"MegatronBertForPreTraining"),wbt.forEach(t),Gyo=r(jke," (Megatron-BERT model)"),jke.forEach(t),Oyo=i(O),E2=n(O,"LI",{});var Dke=s(E2);fge=n(Dke,"STRONG",{});var Abt=s(fge);Vyo=r(Abt,"mobilebert"),Abt.forEach(t),Xyo=r(Dke," \u2014 "),IG=n(Dke,"A",{href:!0});var Lbt=s(IG);zyo=r(Lbt,"MobileBertForPreTraining"),Lbt.forEach(t),Qyo=r(Dke," (MobileBERT model)"),Dke.forEach(t),Wyo=i(O),C2=n(O,"LI",{});var Gke=s(C2);mge=n(Gke,"STRONG",{});var ybt=s(mge);Hyo=r(ybt,"mpnet"),ybt.forEach(t),Uyo=r(Gke," \u2014 "),qG=n(Gke,"A",{href:!0});var xbt=s(qG);Jyo=r(xbt,"MPNetForMaskedLM"),xbt.forEach(t),Yyo=r(Gke," (MPNet model)"),Gke.forEach(t),Kyo=i(O),w2=n(O,"LI",{});var Oke=s(w2);gge=n(Oke,"STRONG",{});var $bt=s(gge);Zyo=r($bt,"mvp"),$bt.forEach(t),e9o=r(Oke," \u2014 "),jG=n(Oke,"A",{href:!0});var kbt=s(jG);o9o=r(kbt,"MvpForConditionalGeneration"),kbt.forEach(t),r9o=r(Oke," (MVP model)"),Oke.forEach(t),t9o=i(O),A2=n(O,"LI",{});var Vke=s(A2);hge=n(Vke,"STRONG",{});var Sbt=s(hge);a9o=r(Sbt,"nezha"),Sbt.forEach(t),n9o=r(Vke," \u2014 "),DG=n(Vke,"A",{href:!0});var Rbt=s(DG);s9o=r(Rbt,"NezhaForPreTraining"),Rbt.forEach(t),l9o=r(Vke," (Nezha model)"),Vke.forEach(t),i9o=i(O),L2=n(O,"LI",{});var Xke=s(L2);pge=n(Xke,"STRONG",{});var Pbt=s(pge);d9o=r(Pbt,"openai-gpt"),Pbt.forEach(t),c9o=r(Xke," \u2014 "),GG=n(Xke,"A",{href:!0});var Bbt=s(GG);f9o=r(Bbt,"OpenAIGPTLMHeadModel"),Bbt.forEach(t),m9o=r(Xke," (OpenAI GPT model)"),Xke.forEach(t),g9o=i(O),y2=n(O,"LI",{});var zke=s(y2);_ge=n(zke,"STRONG",{});var Nbt=s(_ge);h9o=r(Nbt,"retribert"),Nbt.forEach(t),p9o=r(zke," \u2014 "),OG=n(zke,"A",{href:!0});var Ibt=s(OG);_9o=r(Ibt,"RetriBertModel"),Ibt.forEach(t),u9o=r(zke," (RetriBERT model)"),zke.forEach(t),b9o=i(O),x2=n(O,"LI",{});var Qke=s(x2);uge=n(Qke,"STRONG",{});var qbt=s(uge);v9o=r(qbt,"roberta"),qbt.forEach(t),F9o=r(Qke," \u2014 "),VG=n(Qke,"A",{href:!0});var jbt=s(VG);T9o=r(jbt,"RobertaForMaskedLM"),jbt.forEach(t),M9o=r(Qke," (RoBERTa model)"),Qke.forEach(t),E9o=i(O),$2=n(O,"LI",{});var Wke=s($2);bge=n(Wke,"STRONG",{});var Dbt=s(bge);C9o=r(Dbt,"splinter"),Dbt.forEach(t),w9o=r(Wke," \u2014 "),XG=n(Wke,"A",{href:!0});var Gbt=s(XG);A9o=r(Gbt,"SplinterForPreTraining"),Gbt.forEach(t),L9o=r(Wke," (Splinter model)"),Wke.forEach(t),y9o=i(O),k2=n(O,"LI",{});var Hke=s(k2);vge=n(Hke,"STRONG",{});var Obt=s(vge);x9o=r(Obt,"squeezebert"),Obt.forEach(t),$9o=r(Hke," \u2014 "),zG=n(Hke,"A",{href:!0});var Vbt=s(zG);k9o=r(Vbt,"SqueezeBertForMaskedLM"),Vbt.forEach(t),S9o=r(Hke," (SqueezeBERT model)"),Hke.forEach(t),R9o=i(O),S2=n(O,"LI",{});var Uke=s(S2);Fge=n(Uke,"STRONG",{});var Xbt=s(Fge);P9o=r(Xbt,"t5"),Xbt.forEach(t),B9o=r(Uke," \u2014 "),QG=n(Uke,"A",{href:!0});var zbt=s(QG);N9o=r(zbt,"T5ForConditionalGeneration"),zbt.forEach(t),I9o=r(Uke," (T5 model)"),Uke.forEach(t),q9o=i(O),R2=n(O,"LI",{});var Jke=s(R2);Tge=n(Jke,"STRONG",{});var Qbt=s(Tge);j9o=r(Qbt,"tapas"),Qbt.forEach(t),D9o=r(Jke," \u2014 "),WG=n(Jke,"A",{href:!0});var Wbt=s(WG);G9o=r(Wbt,"TapasForMaskedLM"),Wbt.forEach(t),O9o=r(Jke," (TAPAS model)"),Jke.forEach(t),V9o=i(O),P2=n(O,"LI",{});var Yke=s(P2);Mge=n(Yke,"STRONG",{});var Hbt=s(Mge);X9o=r(Hbt,"transfo-xl"),Hbt.forEach(t),z9o=r(Yke," \u2014 "),HG=n(Yke,"A",{href:!0});var Ubt=s(HG);Q9o=r(Ubt,"TransfoXLLMHeadModel"),Ubt.forEach(t),W9o=r(Yke," (Transformer-XL model)"),Yke.forEach(t),H9o=i(O),B2=n(O,"LI",{});var Kke=s(B2);Ege=n(Kke,"STRONG",{});var Jbt=s(Ege);U9o=r(Jbt,"unispeech"),Jbt.forEach(t),J9o=r(Kke," \u2014 "),UG=n(Kke,"A",{href:!0});var Ybt=s(UG);Y9o=r(Ybt,"UniSpeechForPreTraining"),Ybt.forEach(t),K9o=r(Kke," (UniSpeech model)"),Kke.forEach(t),Z9o=i(O),N2=n(O,"LI",{});var Zke=s(N2);Cge=n(Zke,"STRONG",{});var Kbt=s(Cge);exo=r(Kbt,"unispeech-sat"),Kbt.forEach(t),oxo=r(Zke," \u2014 "),JG=n(Zke,"A",{href:!0});var Zbt=s(JG);rxo=r(Zbt,"UniSpeechSatForPreTraining"),Zbt.forEach(t),txo=r(Zke," (UniSpeechSat model)"),Zke.forEach(t),axo=i(O),I2=n(O,"LI",{});var eSe=s(I2);wge=n(eSe,"STRONG",{});var evt=s(wge);nxo=r(evt,"visual_bert"),evt.forEach(t),sxo=r(eSe," \u2014 "),YG=n(eSe,"A",{href:!0});var ovt=s(YG);lxo=r(ovt,"VisualBertForPreTraining"),ovt.forEach(t),ixo=r(eSe," (VisualBERT model)"),eSe.forEach(t),dxo=i(O),q2=n(O,"LI",{});var oSe=s(q2);Age=n(oSe,"STRONG",{});var rvt=s(Age);cxo=r(rvt,"vit_mae"),rvt.forEach(t),fxo=r(oSe," \u2014 "),KG=n(oSe,"A",{href:!0});var tvt=s(KG);mxo=r(tvt,"ViTMAEForPreTraining"),tvt.forEach(t),gxo=r(oSe," (ViTMAE model)"),oSe.forEach(t),hxo=i(O),j2=n(O,"LI",{});var rSe=s(j2);Lge=n(rSe,"STRONG",{});var avt=s(Lge);pxo=r(avt,"wav2vec2"),avt.forEach(t),_xo=r(rSe," \u2014 "),ZG=n(rSe,"A",{href:!0});var nvt=s(ZG);uxo=r(nvt,"Wav2Vec2ForPreTraining"),nvt.forEach(t),bxo=r(rSe," (Wav2Vec2 model)"),rSe.forEach(t),vxo=i(O),D2=n(O,"LI",{});var tSe=s(D2);yge=n(tSe,"STRONG",{});var svt=s(yge);Fxo=r(svt,"wav2vec2-conformer"),svt.forEach(t),Txo=r(tSe," \u2014 "),eO=n(tSe,"A",{href:!0});var lvt=s(eO);Mxo=r(lvt,"Wav2Vec2ConformerForPreTraining"),lvt.forEach(t),Exo=r(tSe," (Wav2Vec2-Conformer model)"),tSe.forEach(t),Cxo=i(O),G2=n(O,"LI",{});var aSe=s(G2);xge=n(aSe,"STRONG",{});var ivt=s(xge);wxo=r(ivt,"xlm"),ivt.forEach(t),Axo=r(aSe," \u2014 "),oO=n(aSe,"A",{href:!0});var dvt=s(oO);Lxo=r(dvt,"XLMWithLMHeadModel"),dvt.forEach(t),yxo=r(aSe," (XLM model)"),aSe.forEach(t),xxo=i(O),O2=n(O,"LI",{});var nSe=s(O2);$ge=n(nSe,"STRONG",{});var cvt=s($ge);$xo=r(cvt,"xlm-roberta"),cvt.forEach(t),kxo=r(nSe," \u2014 "),rO=n(nSe,"A",{href:!0});var fvt=s(rO);Sxo=r(fvt,"XLMRobertaForMaskedLM"),fvt.forEach(t),Rxo=r(nSe," (XLM-RoBERTa model)"),nSe.forEach(t),Pxo=i(O),V2=n(O,"LI",{});var sSe=s(V2);kge=n(sSe,"STRONG",{});var mvt=s(kge);Bxo=r(mvt,"xlm-roberta-xl"),mvt.forEach(t),Nxo=r(sSe," \u2014 "),tO=n(sSe,"A",{href:!0});var gvt=s(tO);Ixo=r(gvt,"XLMRobertaXLForMaskedLM"),gvt.forEach(t),qxo=r(sSe," (XLM-RoBERTa-XL model)"),sSe.forEach(t),jxo=i(O),X2=n(O,"LI",{});var lSe=s(X2);Sge=n(lSe,"STRONG",{});var hvt=s(Sge);Dxo=r(hvt,"xlnet"),hvt.forEach(t),Gxo=r(lSe," \u2014 "),aO=n(lSe,"A",{href:!0});var pvt=s(aO);Oxo=r(pvt,"XLNetLMHeadModel"),pvt.forEach(t),Vxo=r(lSe," (XLNet model)"),lSe.forEach(t),O.forEach(t),Xxo=i(ia),z2=n(ia,"P",{});var iSe=s(z2);zxo=r(iSe,"The model is set in evaluation mode by default using "),Rge=n(iSe,"CODE",{});var _vt=s(Rge);Qxo=r(_vt,"model.eval()"),_vt.forEach(t),Wxo=r(iSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pge=n(iSe,"CODE",{});var uvt=s(Pge);Hxo=r(uvt,"model.train()"),uvt.forEach(t),iSe.forEach(t),Uxo=i(ia),T(Q2.$$.fragment,ia),ia.forEach(t),al.forEach(t),jXe=i(f),Hi=n(f,"H2",{class:!0});var zQe=s(Hi);W2=n(zQe,"A",{id:!0,class:!0,href:!0});var bvt=s(W2);Bge=n(bvt,"SPAN",{});var vvt=s(Bge);T(QL.$$.fragment,vvt),vvt.forEach(t),bvt.forEach(t),Jxo=i(zQe),Nge=n(zQe,"SPAN",{});var Fvt=s(Nge);Yxo=r(Fvt,"AutoModelForCausalLM"),Fvt.forEach(t),zQe.forEach(t),DXe=i(f),So=n(f,"DIV",{class:!0});var nl=s(So);T(WL.$$.fragment,nl),Kxo=i(nl),Ui=n(nl,"P",{});var Wre=s(Ui);Zxo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nO=n(Wre,"A",{href:!0});var Tvt=s(nO);e$o=r(Tvt,"from_pretrained()"),Tvt.forEach(t),o$o=r(Wre," class method or the "),sO=n(Wre,"A",{href:!0});var Mvt=s(sO);r$o=r(Mvt,"from_config()"),Mvt.forEach(t),t$o=r(Wre,` class
method.`),Wre.forEach(t),a$o=i(nl),HL=n(nl,"P",{});var QQe=s(HL);n$o=r(QQe,"This class cannot be instantiated directly using "),Ige=n(QQe,"CODE",{});var Evt=s(Ige);s$o=r(Evt,"__init__()"),Evt.forEach(t),l$o=r(QQe," (throws an error)."),QQe.forEach(t),i$o=i(nl),ct=n(nl,"DIV",{class:!0});var bw=s(ct);T(UL.$$.fragment,bw),d$o=i(bw),qge=n(bw,"P",{});var Cvt=s(qge);c$o=r(Cvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Cvt.forEach(t),f$o=i(bw),Ji=n(bw,"P",{});var Hre=s(Ji);m$o=r(Hre,`Note:
Loading a model from its configuration file does `),jge=n(Hre,"STRONG",{});var wvt=s(jge);g$o=r(wvt,"not"),wvt.forEach(t),h$o=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=n(Hre,"A",{href:!0});var Avt=s(lO);p$o=r(Avt,"from_pretrained()"),Avt.forEach(t),_$o=r(Hre," to load the model weights."),Hre.forEach(t),u$o=i(bw),T(H2.$$.fragment,bw),bw.forEach(t),b$o=i(nl),Ze=n(nl,"DIV",{class:!0});var da=s(Ze);T(JL.$$.fragment,da),v$o=i(da),Dge=n(da,"P",{});var Lvt=s(Dge);F$o=r(Lvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Lvt.forEach(t),T$o=i(da),qa=n(da,"P",{});var vw=s(qa);M$o=r(vw,"The model class to instantiate is selected based on the "),Gge=n(vw,"CODE",{});var yvt=s(Gge);E$o=r(yvt,"model_type"),yvt.forEach(t),C$o=r(vw,` property of the config object (either
passed as an argument or loaded from `),Oge=n(vw,"CODE",{});var xvt=s(Oge);w$o=r(xvt,"pretrained_model_name_or_path"),xvt.forEach(t),A$o=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vge=n(vw,"CODE",{});var $vt=s(Vge);L$o=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),y$o=r(vw,":"),vw.forEach(t),x$o=i(da),z=n(da,"UL",{});var Q=s(z);U2=n(Q,"LI",{});var dSe=s(U2);Xge=n(dSe,"STRONG",{});var kvt=s(Xge);$$o=r(kvt,"bart"),kvt.forEach(t),k$o=r(dSe," \u2014 "),iO=n(dSe,"A",{href:!0});var Svt=s(iO);S$o=r(Svt,"BartForCausalLM"),Svt.forEach(t),R$o=r(dSe," (BART model)"),dSe.forEach(t),P$o=i(Q),J2=n(Q,"LI",{});var cSe=s(J2);zge=n(cSe,"STRONG",{});var Rvt=s(zge);B$o=r(Rvt,"bert"),Rvt.forEach(t),N$o=r(cSe," \u2014 "),dO=n(cSe,"A",{href:!0});var Pvt=s(dO);I$o=r(Pvt,"BertLMHeadModel"),Pvt.forEach(t),q$o=r(cSe," (BERT model)"),cSe.forEach(t),j$o=i(Q),Y2=n(Q,"LI",{});var fSe=s(Y2);Qge=n(fSe,"STRONG",{});var Bvt=s(Qge);D$o=r(Bvt,"bert-generation"),Bvt.forEach(t),G$o=r(fSe," \u2014 "),cO=n(fSe,"A",{href:!0});var Nvt=s(cO);O$o=r(Nvt,"BertGenerationDecoder"),Nvt.forEach(t),V$o=r(fSe," (Bert Generation model)"),fSe.forEach(t),X$o=i(Q),K2=n(Q,"LI",{});var mSe=s(K2);Wge=n(mSe,"STRONG",{});var Ivt=s(Wge);z$o=r(Ivt,"big_bird"),Ivt.forEach(t),Q$o=r(mSe," \u2014 "),fO=n(mSe,"A",{href:!0});var qvt=s(fO);W$o=r(qvt,"BigBirdForCausalLM"),qvt.forEach(t),H$o=r(mSe," (BigBird model)"),mSe.forEach(t),U$o=i(Q),Z2=n(Q,"LI",{});var gSe=s(Z2);Hge=n(gSe,"STRONG",{});var jvt=s(Hge);J$o=r(jvt,"bigbird_pegasus"),jvt.forEach(t),Y$o=r(gSe," \u2014 "),mO=n(gSe,"A",{href:!0});var Dvt=s(mO);K$o=r(Dvt,"BigBirdPegasusForCausalLM"),Dvt.forEach(t),Z$o=r(gSe," (BigBird-Pegasus model)"),gSe.forEach(t),eko=i(Q),e1=n(Q,"LI",{});var hSe=s(e1);Uge=n(hSe,"STRONG",{});var Gvt=s(Uge);oko=r(Gvt,"blenderbot"),Gvt.forEach(t),rko=r(hSe," \u2014 "),gO=n(hSe,"A",{href:!0});var Ovt=s(gO);tko=r(Ovt,"BlenderbotForCausalLM"),Ovt.forEach(t),ako=r(hSe," (Blenderbot model)"),hSe.forEach(t),nko=i(Q),o1=n(Q,"LI",{});var pSe=s(o1);Jge=n(pSe,"STRONG",{});var Vvt=s(Jge);sko=r(Vvt,"blenderbot-small"),Vvt.forEach(t),lko=r(pSe," \u2014 "),hO=n(pSe,"A",{href:!0});var Xvt=s(hO);iko=r(Xvt,"BlenderbotSmallForCausalLM"),Xvt.forEach(t),dko=r(pSe," (BlenderbotSmall model)"),pSe.forEach(t),cko=i(Q),r1=n(Q,"LI",{});var _Se=s(r1);Yge=n(_Se,"STRONG",{});var zvt=s(Yge);fko=r(zvt,"bloom"),zvt.forEach(t),mko=r(_Se," \u2014 "),pO=n(_Se,"A",{href:!0});var Qvt=s(pO);gko=r(Qvt,"BloomForCausalLM"),Qvt.forEach(t),hko=r(_Se," (BLOOM model)"),_Se.forEach(t),pko=i(Q),t1=n(Q,"LI",{});var uSe=s(t1);Kge=n(uSe,"STRONG",{});var Wvt=s(Kge);_ko=r(Wvt,"camembert"),Wvt.forEach(t),uko=r(uSe," \u2014 "),_O=n(uSe,"A",{href:!0});var Hvt=s(_O);bko=r(Hvt,"CamembertForCausalLM"),Hvt.forEach(t),vko=r(uSe," (CamemBERT model)"),uSe.forEach(t),Fko=i(Q),a1=n(Q,"LI",{});var bSe=s(a1);Zge=n(bSe,"STRONG",{});var Uvt=s(Zge);Tko=r(Uvt,"codegen"),Uvt.forEach(t),Mko=r(bSe," \u2014 "),uO=n(bSe,"A",{href:!0});var Jvt=s(uO);Eko=r(Jvt,"CodeGenForCausalLM"),Jvt.forEach(t),Cko=r(bSe," (CodeGen model)"),bSe.forEach(t),wko=i(Q),n1=n(Q,"LI",{});var vSe=s(n1);ehe=n(vSe,"STRONG",{});var Yvt=s(ehe);Ako=r(Yvt,"ctrl"),Yvt.forEach(t),Lko=r(vSe," \u2014 "),bO=n(vSe,"A",{href:!0});var Kvt=s(bO);yko=r(Kvt,"CTRLLMHeadModel"),Kvt.forEach(t),xko=r(vSe," (CTRL model)"),vSe.forEach(t),$ko=i(Q),s1=n(Q,"LI",{});var FSe=s(s1);ohe=n(FSe,"STRONG",{});var Zvt=s(ohe);kko=r(Zvt,"data2vec-text"),Zvt.forEach(t),Sko=r(FSe," \u2014 "),vO=n(FSe,"A",{href:!0});var eFt=s(vO);Rko=r(eFt,"Data2VecTextForCausalLM"),eFt.forEach(t),Pko=r(FSe," (Data2VecText model)"),FSe.forEach(t),Bko=i(Q),l1=n(Q,"LI",{});var TSe=s(l1);rhe=n(TSe,"STRONG",{});var oFt=s(rhe);Nko=r(oFt,"electra"),oFt.forEach(t),Iko=r(TSe," \u2014 "),FO=n(TSe,"A",{href:!0});var rFt=s(FO);qko=r(rFt,"ElectraForCausalLM"),rFt.forEach(t),jko=r(TSe," (ELECTRA model)"),TSe.forEach(t),Dko=i(Q),i1=n(Q,"LI",{});var MSe=s(i1);the=n(MSe,"STRONG",{});var tFt=s(the);Gko=r(tFt,"gpt2"),tFt.forEach(t),Oko=r(MSe," \u2014 "),TO=n(MSe,"A",{href:!0});var aFt=s(TO);Vko=r(aFt,"GPT2LMHeadModel"),aFt.forEach(t),Xko=r(MSe," (OpenAI GPT-2 model)"),MSe.forEach(t),zko=i(Q),d1=n(Q,"LI",{});var ESe=s(d1);ahe=n(ESe,"STRONG",{});var nFt=s(ahe);Qko=r(nFt,"gpt_neo"),nFt.forEach(t),Wko=r(ESe," \u2014 "),MO=n(ESe,"A",{href:!0});var sFt=s(MO);Hko=r(sFt,"GPTNeoForCausalLM"),sFt.forEach(t),Uko=r(ESe," (GPT Neo model)"),ESe.forEach(t),Jko=i(Q),c1=n(Q,"LI",{});var CSe=s(c1);nhe=n(CSe,"STRONG",{});var lFt=s(nhe);Yko=r(lFt,"gpt_neox"),lFt.forEach(t),Kko=r(CSe," \u2014 "),EO=n(CSe,"A",{href:!0});var iFt=s(EO);Zko=r(iFt,"GPTNeoXForCausalLM"),iFt.forEach(t),eSo=r(CSe," (GPT NeoX model)"),CSe.forEach(t),oSo=i(Q),f1=n(Q,"LI",{});var wSe=s(f1);she=n(wSe,"STRONG",{});var dFt=s(she);rSo=r(dFt,"gptj"),dFt.forEach(t),tSo=r(wSe," \u2014 "),CO=n(wSe,"A",{href:!0});var cFt=s(CO);aSo=r(cFt,"GPTJForCausalLM"),cFt.forEach(t),nSo=r(wSe," (GPT-J model)"),wSe.forEach(t),sSo=i(Q),m1=n(Q,"LI",{});var ASe=s(m1);lhe=n(ASe,"STRONG",{});var fFt=s(lhe);lSo=r(fFt,"marian"),fFt.forEach(t),iSo=r(ASe," \u2014 "),wO=n(ASe,"A",{href:!0});var mFt=s(wO);dSo=r(mFt,"MarianForCausalLM"),mFt.forEach(t),cSo=r(ASe," (Marian model)"),ASe.forEach(t),fSo=i(Q),g1=n(Q,"LI",{});var LSe=s(g1);ihe=n(LSe,"STRONG",{});var gFt=s(ihe);mSo=r(gFt,"mbart"),gFt.forEach(t),gSo=r(LSe," \u2014 "),AO=n(LSe,"A",{href:!0});var hFt=s(AO);hSo=r(hFt,"MBartForCausalLM"),hFt.forEach(t),pSo=r(LSe," (mBART model)"),LSe.forEach(t),_So=i(Q),h1=n(Q,"LI",{});var ySe=s(h1);dhe=n(ySe,"STRONG",{});var pFt=s(dhe);uSo=r(pFt,"megatron-bert"),pFt.forEach(t),bSo=r(ySe," \u2014 "),LO=n(ySe,"A",{href:!0});var _Ft=s(LO);vSo=r(_Ft,"MegatronBertForCausalLM"),_Ft.forEach(t),FSo=r(ySe," (Megatron-BERT model)"),ySe.forEach(t),TSo=i(Q),p1=n(Q,"LI",{});var xSe=s(p1);che=n(xSe,"STRONG",{});var uFt=s(che);MSo=r(uFt,"mvp"),uFt.forEach(t),ESo=r(xSe," \u2014 "),yO=n(xSe,"A",{href:!0});var bFt=s(yO);CSo=r(bFt,"MvpForCausalLM"),bFt.forEach(t),wSo=r(xSe," (MVP model)"),xSe.forEach(t),ASo=i(Q),_1=n(Q,"LI",{});var $Se=s(_1);fhe=n($Se,"STRONG",{});var vFt=s(fhe);LSo=r(vFt,"openai-gpt"),vFt.forEach(t),ySo=r($Se," \u2014 "),xO=n($Se,"A",{href:!0});var FFt=s(xO);xSo=r(FFt,"OpenAIGPTLMHeadModel"),FFt.forEach(t),$So=r($Se," (OpenAI GPT model)"),$Se.forEach(t),kSo=i(Q),u1=n(Q,"LI",{});var kSe=s(u1);mhe=n(kSe,"STRONG",{});var TFt=s(mhe);SSo=r(TFt,"opt"),TFt.forEach(t),RSo=r(kSe," \u2014 "),$O=n(kSe,"A",{href:!0});var MFt=s($O);PSo=r(MFt,"OPTForCausalLM"),MFt.forEach(t),BSo=r(kSe," (OPT model)"),kSe.forEach(t),NSo=i(Q),b1=n(Q,"LI",{});var SSe=s(b1);ghe=n(SSe,"STRONG",{});var EFt=s(ghe);ISo=r(EFt,"pegasus"),EFt.forEach(t),qSo=r(SSe," \u2014 "),kO=n(SSe,"A",{href:!0});var CFt=s(kO);jSo=r(CFt,"PegasusForCausalLM"),CFt.forEach(t),DSo=r(SSe," (Pegasus model)"),SSe.forEach(t),GSo=i(Q),v1=n(Q,"LI",{});var RSe=s(v1);hhe=n(RSe,"STRONG",{});var wFt=s(hhe);OSo=r(wFt,"plbart"),wFt.forEach(t),VSo=r(RSe," \u2014 "),SO=n(RSe,"A",{href:!0});var AFt=s(SO);XSo=r(AFt,"PLBartForCausalLM"),AFt.forEach(t),zSo=r(RSe," (PLBart model)"),RSe.forEach(t),QSo=i(Q),F1=n(Q,"LI",{});var PSe=s(F1);phe=n(PSe,"STRONG",{});var LFt=s(phe);WSo=r(LFt,"prophetnet"),LFt.forEach(t),HSo=r(PSe," \u2014 "),RO=n(PSe,"A",{href:!0});var yFt=s(RO);USo=r(yFt,"ProphetNetForCausalLM"),yFt.forEach(t),JSo=r(PSe," (ProphetNet model)"),PSe.forEach(t),YSo=i(Q),T1=n(Q,"LI",{});var BSe=s(T1);_he=n(BSe,"STRONG",{});var xFt=s(_he);KSo=r(xFt,"qdqbert"),xFt.forEach(t),ZSo=r(BSe," \u2014 "),PO=n(BSe,"A",{href:!0});var $Ft=s(PO);eRo=r($Ft,"QDQBertLMHeadModel"),$Ft.forEach(t),oRo=r(BSe," (QDQBert model)"),BSe.forEach(t),rRo=i(Q),M1=n(Q,"LI",{});var NSe=s(M1);uhe=n(NSe,"STRONG",{});var kFt=s(uhe);tRo=r(kFt,"reformer"),kFt.forEach(t),aRo=r(NSe," \u2014 "),BO=n(NSe,"A",{href:!0});var SFt=s(BO);nRo=r(SFt,"ReformerModelWithLMHead"),SFt.forEach(t),sRo=r(NSe," (Reformer model)"),NSe.forEach(t),lRo=i(Q),E1=n(Q,"LI",{});var ISe=s(E1);bhe=n(ISe,"STRONG",{});var RFt=s(bhe);iRo=r(RFt,"rembert"),RFt.forEach(t),dRo=r(ISe," \u2014 "),NO=n(ISe,"A",{href:!0});var PFt=s(NO);cRo=r(PFt,"RemBertForCausalLM"),PFt.forEach(t),fRo=r(ISe," (RemBERT model)"),ISe.forEach(t),mRo=i(Q),C1=n(Q,"LI",{});var qSe=s(C1);vhe=n(qSe,"STRONG",{});var BFt=s(vhe);gRo=r(BFt,"roberta"),BFt.forEach(t),hRo=r(qSe," \u2014 "),IO=n(qSe,"A",{href:!0});var NFt=s(IO);pRo=r(NFt,"RobertaForCausalLM"),NFt.forEach(t),_Ro=r(qSe," (RoBERTa model)"),qSe.forEach(t),uRo=i(Q),w1=n(Q,"LI",{});var jSe=s(w1);Fhe=n(jSe,"STRONG",{});var IFt=s(Fhe);bRo=r(IFt,"roformer"),IFt.forEach(t),vRo=r(jSe," \u2014 "),qO=n(jSe,"A",{href:!0});var qFt=s(qO);FRo=r(qFt,"RoFormerForCausalLM"),qFt.forEach(t),TRo=r(jSe," (RoFormer model)"),jSe.forEach(t),MRo=i(Q),A1=n(Q,"LI",{});var DSe=s(A1);The=n(DSe,"STRONG",{});var jFt=s(The);ERo=r(jFt,"speech_to_text_2"),jFt.forEach(t),CRo=r(DSe," \u2014 "),jO=n(DSe,"A",{href:!0});var DFt=s(jO);wRo=r(DFt,"Speech2Text2ForCausalLM"),DFt.forEach(t),ARo=r(DSe," (Speech2Text2 model)"),DSe.forEach(t),LRo=i(Q),L1=n(Q,"LI",{});var GSe=s(L1);Mhe=n(GSe,"STRONG",{});var GFt=s(Mhe);yRo=r(GFt,"transfo-xl"),GFt.forEach(t),xRo=r(GSe," \u2014 "),DO=n(GSe,"A",{href:!0});var OFt=s(DO);$Ro=r(OFt,"TransfoXLLMHeadModel"),OFt.forEach(t),kRo=r(GSe," (Transformer-XL model)"),GSe.forEach(t),SRo=i(Q),y1=n(Q,"LI",{});var OSe=s(y1);Ehe=n(OSe,"STRONG",{});var VFt=s(Ehe);RRo=r(VFt,"trocr"),VFt.forEach(t),PRo=r(OSe," \u2014 "),GO=n(OSe,"A",{href:!0});var XFt=s(GO);BRo=r(XFt,"TrOCRForCausalLM"),XFt.forEach(t),NRo=r(OSe," (TrOCR model)"),OSe.forEach(t),IRo=i(Q),x1=n(Q,"LI",{});var VSe=s(x1);Che=n(VSe,"STRONG",{});var zFt=s(Che);qRo=r(zFt,"xglm"),zFt.forEach(t),jRo=r(VSe," \u2014 "),OO=n(VSe,"A",{href:!0});var QFt=s(OO);DRo=r(QFt,"XGLMForCausalLM"),QFt.forEach(t),GRo=r(VSe," (XGLM model)"),VSe.forEach(t),ORo=i(Q),$1=n(Q,"LI",{});var XSe=s($1);whe=n(XSe,"STRONG",{});var WFt=s(whe);VRo=r(WFt,"xlm"),WFt.forEach(t),XRo=r(XSe," \u2014 "),VO=n(XSe,"A",{href:!0});var HFt=s(VO);zRo=r(HFt,"XLMWithLMHeadModel"),HFt.forEach(t),QRo=r(XSe," (XLM model)"),XSe.forEach(t),WRo=i(Q),k1=n(Q,"LI",{});var zSe=s(k1);Ahe=n(zSe,"STRONG",{});var UFt=s(Ahe);HRo=r(UFt,"xlm-prophetnet"),UFt.forEach(t),URo=r(zSe," \u2014 "),XO=n(zSe,"A",{href:!0});var JFt=s(XO);JRo=r(JFt,"XLMProphetNetForCausalLM"),JFt.forEach(t),YRo=r(zSe," (XLM-ProphetNet model)"),zSe.forEach(t),KRo=i(Q),S1=n(Q,"LI",{});var QSe=s(S1);Lhe=n(QSe,"STRONG",{});var YFt=s(Lhe);ZRo=r(YFt,"xlm-roberta"),YFt.forEach(t),ePo=r(QSe," \u2014 "),zO=n(QSe,"A",{href:!0});var KFt=s(zO);oPo=r(KFt,"XLMRobertaForCausalLM"),KFt.forEach(t),rPo=r(QSe," (XLM-RoBERTa model)"),QSe.forEach(t),tPo=i(Q),R1=n(Q,"LI",{});var WSe=s(R1);yhe=n(WSe,"STRONG",{});var ZFt=s(yhe);aPo=r(ZFt,"xlm-roberta-xl"),ZFt.forEach(t),nPo=r(WSe," \u2014 "),QO=n(WSe,"A",{href:!0});var e6t=s(QO);sPo=r(e6t,"XLMRobertaXLForCausalLM"),e6t.forEach(t),lPo=r(WSe," (XLM-RoBERTa-XL model)"),WSe.forEach(t),iPo=i(Q),P1=n(Q,"LI",{});var HSe=s(P1);xhe=n(HSe,"STRONG",{});var o6t=s(xhe);dPo=r(o6t,"xlnet"),o6t.forEach(t),cPo=r(HSe," \u2014 "),WO=n(HSe,"A",{href:!0});var r6t=s(WO);fPo=r(r6t,"XLNetLMHeadModel"),r6t.forEach(t),mPo=r(HSe," (XLNet model)"),HSe.forEach(t),Q.forEach(t),gPo=i(da),B1=n(da,"P",{});var USe=s(B1);hPo=r(USe,"The model is set in evaluation mode by default using "),$he=n(USe,"CODE",{});var t6t=s($he);pPo=r(t6t,"model.eval()"),t6t.forEach(t),_Po=r(USe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=n(USe,"CODE",{});var a6t=s(khe);uPo=r(a6t,"model.train()"),a6t.forEach(t),USe.forEach(t),bPo=i(da),T(N1.$$.fragment,da),da.forEach(t),nl.forEach(t),GXe=i(f),Yi=n(f,"H2",{class:!0});var WQe=s(Yi);I1=n(WQe,"A",{id:!0,class:!0,href:!0});var n6t=s(I1);She=n(n6t,"SPAN",{});var s6t=s(She);T(YL.$$.fragment,s6t),s6t.forEach(t),n6t.forEach(t),vPo=i(WQe),Rhe=n(WQe,"SPAN",{});var l6t=s(Rhe);FPo=r(l6t,"AutoModelForMaskedLM"),l6t.forEach(t),WQe.forEach(t),OXe=i(f),Ro=n(f,"DIV",{class:!0});var sl=s(Ro);T(KL.$$.fragment,sl),TPo=i(sl),Ki=n(sl,"P",{});var Ure=s(Ki);MPo=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HO=n(Ure,"A",{href:!0});var i6t=s(HO);EPo=r(i6t,"from_pretrained()"),i6t.forEach(t),CPo=r(Ure," class method or the "),UO=n(Ure,"A",{href:!0});var d6t=s(UO);wPo=r(d6t,"from_config()"),d6t.forEach(t),APo=r(Ure,` class
method.`),Ure.forEach(t),LPo=i(sl),ZL=n(sl,"P",{});var HQe=s(ZL);yPo=r(HQe,"This class cannot be instantiated directly using "),Phe=n(HQe,"CODE",{});var c6t=s(Phe);xPo=r(c6t,"__init__()"),c6t.forEach(t),$Po=r(HQe," (throws an error)."),HQe.forEach(t),kPo=i(sl),ft=n(sl,"DIV",{class:!0});var Fw=s(ft);T(ey.$$.fragment,Fw),SPo=i(Fw),Bhe=n(Fw,"P",{});var f6t=s(Bhe);RPo=r(f6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),f6t.forEach(t),PPo=i(Fw),Zi=n(Fw,"P",{});var Jre=s(Zi);BPo=r(Jre,`Note:
Loading a model from its configuration file does `),Nhe=n(Jre,"STRONG",{});var m6t=s(Nhe);NPo=r(m6t,"not"),m6t.forEach(t),IPo=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(Jre,"A",{href:!0});var g6t=s(JO);qPo=r(g6t,"from_pretrained()"),g6t.forEach(t),jPo=r(Jre," to load the model weights."),Jre.forEach(t),DPo=i(Fw),T(q1.$$.fragment,Fw),Fw.forEach(t),GPo=i(sl),eo=n(sl,"DIV",{class:!0});var ca=s(eo);T(oy.$$.fragment,ca),OPo=i(ca),Ihe=n(ca,"P",{});var h6t=s(Ihe);VPo=r(h6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),h6t.forEach(t),XPo=i(ca),ja=n(ca,"P",{});var Tw=s(ja);zPo=r(Tw,"The model class to instantiate is selected based on the "),qhe=n(Tw,"CODE",{});var p6t=s(qhe);QPo=r(p6t,"model_type"),p6t.forEach(t),WPo=r(Tw,` property of the config object (either
passed as an argument or loaded from `),jhe=n(Tw,"CODE",{});var _6t=s(jhe);HPo=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),UPo=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=n(Tw,"CODE",{});var u6t=s(Dhe);JPo=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),YPo=r(Tw,":"),Tw.forEach(t),KPo=i(ca),W=n(ca,"UL",{});var H=s(W);j1=n(H,"LI",{});var JSe=s(j1);Ghe=n(JSe,"STRONG",{});var b6t=s(Ghe);ZPo=r(b6t,"albert"),b6t.forEach(t),eBo=r(JSe," \u2014 "),YO=n(JSe,"A",{href:!0});var v6t=s(YO);oBo=r(v6t,"AlbertForMaskedLM"),v6t.forEach(t),rBo=r(JSe," (ALBERT model)"),JSe.forEach(t),tBo=i(H),D1=n(H,"LI",{});var YSe=s(D1);Ohe=n(YSe,"STRONG",{});var F6t=s(Ohe);aBo=r(F6t,"bart"),F6t.forEach(t),nBo=r(YSe," \u2014 "),KO=n(YSe,"A",{href:!0});var T6t=s(KO);sBo=r(T6t,"BartForConditionalGeneration"),T6t.forEach(t),lBo=r(YSe," (BART model)"),YSe.forEach(t),iBo=i(H),G1=n(H,"LI",{});var KSe=s(G1);Vhe=n(KSe,"STRONG",{});var M6t=s(Vhe);dBo=r(M6t,"bert"),M6t.forEach(t),cBo=r(KSe," \u2014 "),ZO=n(KSe,"A",{href:!0});var E6t=s(ZO);fBo=r(E6t,"BertForMaskedLM"),E6t.forEach(t),mBo=r(KSe," (BERT model)"),KSe.forEach(t),gBo=i(H),O1=n(H,"LI",{});var ZSe=s(O1);Xhe=n(ZSe,"STRONG",{});var C6t=s(Xhe);hBo=r(C6t,"big_bird"),C6t.forEach(t),pBo=r(ZSe," \u2014 "),eV=n(ZSe,"A",{href:!0});var w6t=s(eV);_Bo=r(w6t,"BigBirdForMaskedLM"),w6t.forEach(t),uBo=r(ZSe," (BigBird model)"),ZSe.forEach(t),bBo=i(H),V1=n(H,"LI",{});var eRe=s(V1);zhe=n(eRe,"STRONG",{});var A6t=s(zhe);vBo=r(A6t,"camembert"),A6t.forEach(t),FBo=r(eRe," \u2014 "),oV=n(eRe,"A",{href:!0});var L6t=s(oV);TBo=r(L6t,"CamembertForMaskedLM"),L6t.forEach(t),MBo=r(eRe," (CamemBERT model)"),eRe.forEach(t),EBo=i(H),X1=n(H,"LI",{});var oRe=s(X1);Qhe=n(oRe,"STRONG",{});var y6t=s(Qhe);CBo=r(y6t,"convbert"),y6t.forEach(t),wBo=r(oRe," \u2014 "),rV=n(oRe,"A",{href:!0});var x6t=s(rV);ABo=r(x6t,"ConvBertForMaskedLM"),x6t.forEach(t),LBo=r(oRe," (ConvBERT model)"),oRe.forEach(t),yBo=i(H),z1=n(H,"LI",{});var rRe=s(z1);Whe=n(rRe,"STRONG",{});var $6t=s(Whe);xBo=r($6t,"data2vec-text"),$6t.forEach(t),$Bo=r(rRe," \u2014 "),tV=n(rRe,"A",{href:!0});var k6t=s(tV);kBo=r(k6t,"Data2VecTextForMaskedLM"),k6t.forEach(t),SBo=r(rRe," (Data2VecText model)"),rRe.forEach(t),RBo=i(H),Q1=n(H,"LI",{});var tRe=s(Q1);Hhe=n(tRe,"STRONG",{});var S6t=s(Hhe);PBo=r(S6t,"deberta"),S6t.forEach(t),BBo=r(tRe," \u2014 "),aV=n(tRe,"A",{href:!0});var R6t=s(aV);NBo=r(R6t,"DebertaForMaskedLM"),R6t.forEach(t),IBo=r(tRe," (DeBERTa model)"),tRe.forEach(t),qBo=i(H),W1=n(H,"LI",{});var aRe=s(W1);Uhe=n(aRe,"STRONG",{});var P6t=s(Uhe);jBo=r(P6t,"deberta-v2"),P6t.forEach(t),DBo=r(aRe," \u2014 "),nV=n(aRe,"A",{href:!0});var B6t=s(nV);GBo=r(B6t,"DebertaV2ForMaskedLM"),B6t.forEach(t),OBo=r(aRe," (DeBERTa-v2 model)"),aRe.forEach(t),VBo=i(H),H1=n(H,"LI",{});var nRe=s(H1);Jhe=n(nRe,"STRONG",{});var N6t=s(Jhe);XBo=r(N6t,"distilbert"),N6t.forEach(t),zBo=r(nRe," \u2014 "),sV=n(nRe,"A",{href:!0});var I6t=s(sV);QBo=r(I6t,"DistilBertForMaskedLM"),I6t.forEach(t),WBo=r(nRe," (DistilBERT model)"),nRe.forEach(t),HBo=i(H),U1=n(H,"LI",{});var sRe=s(U1);Yhe=n(sRe,"STRONG",{});var q6t=s(Yhe);UBo=r(q6t,"electra"),q6t.forEach(t),JBo=r(sRe," \u2014 "),lV=n(sRe,"A",{href:!0});var j6t=s(lV);YBo=r(j6t,"ElectraForMaskedLM"),j6t.forEach(t),KBo=r(sRe," (ELECTRA model)"),sRe.forEach(t),ZBo=i(H),J1=n(H,"LI",{});var lRe=s(J1);Khe=n(lRe,"STRONG",{});var D6t=s(Khe);eNo=r(D6t,"flaubert"),D6t.forEach(t),oNo=r(lRe," \u2014 "),iV=n(lRe,"A",{href:!0});var G6t=s(iV);rNo=r(G6t,"FlaubertWithLMHeadModel"),G6t.forEach(t),tNo=r(lRe," (FlauBERT model)"),lRe.forEach(t),aNo=i(H),Y1=n(H,"LI",{});var iRe=s(Y1);Zhe=n(iRe,"STRONG",{});var O6t=s(Zhe);nNo=r(O6t,"fnet"),O6t.forEach(t),sNo=r(iRe," \u2014 "),dV=n(iRe,"A",{href:!0});var V6t=s(dV);lNo=r(V6t,"FNetForMaskedLM"),V6t.forEach(t),iNo=r(iRe," (FNet model)"),iRe.forEach(t),dNo=i(H),K1=n(H,"LI",{});var dRe=s(K1);epe=n(dRe,"STRONG",{});var X6t=s(epe);cNo=r(X6t,"funnel"),X6t.forEach(t),fNo=r(dRe," \u2014 "),cV=n(dRe,"A",{href:!0});var z6t=s(cV);mNo=r(z6t,"FunnelForMaskedLM"),z6t.forEach(t),gNo=r(dRe," (Funnel Transformer model)"),dRe.forEach(t),hNo=i(H),Z1=n(H,"LI",{});var cRe=s(Z1);ope=n(cRe,"STRONG",{});var Q6t=s(ope);pNo=r(Q6t,"ibert"),Q6t.forEach(t),_No=r(cRe," \u2014 "),fV=n(cRe,"A",{href:!0});var W6t=s(fV);uNo=r(W6t,"IBertForMaskedLM"),W6t.forEach(t),bNo=r(cRe," (I-BERT model)"),cRe.forEach(t),vNo=i(H),eb=n(H,"LI",{});var fRe=s(eb);rpe=n(fRe,"STRONG",{});var H6t=s(rpe);FNo=r(H6t,"layoutlm"),H6t.forEach(t),TNo=r(fRe," \u2014 "),mV=n(fRe,"A",{href:!0});var U6t=s(mV);MNo=r(U6t,"LayoutLMForMaskedLM"),U6t.forEach(t),ENo=r(fRe," (LayoutLM model)"),fRe.forEach(t),CNo=i(H),ob=n(H,"LI",{});var mRe=s(ob);tpe=n(mRe,"STRONG",{});var J6t=s(tpe);wNo=r(J6t,"longformer"),J6t.forEach(t),ANo=r(mRe," \u2014 "),gV=n(mRe,"A",{href:!0});var Y6t=s(gV);LNo=r(Y6t,"LongformerForMaskedLM"),Y6t.forEach(t),yNo=r(mRe," (Longformer model)"),mRe.forEach(t),xNo=i(H),rb=n(H,"LI",{});var gRe=s(rb);ape=n(gRe,"STRONG",{});var K6t=s(ape);$No=r(K6t,"luke"),K6t.forEach(t),kNo=r(gRe," \u2014 "),hV=n(gRe,"A",{href:!0});var Z6t=s(hV);SNo=r(Z6t,"LukeForMaskedLM"),Z6t.forEach(t),RNo=r(gRe," (LUKE model)"),gRe.forEach(t),PNo=i(H),tb=n(H,"LI",{});var hRe=s(tb);npe=n(hRe,"STRONG",{});var eTt=s(npe);BNo=r(eTt,"mbart"),eTt.forEach(t),NNo=r(hRe," \u2014 "),pV=n(hRe,"A",{href:!0});var oTt=s(pV);INo=r(oTt,"MBartForConditionalGeneration"),oTt.forEach(t),qNo=r(hRe," (mBART model)"),hRe.forEach(t),jNo=i(H),ab=n(H,"LI",{});var pRe=s(ab);spe=n(pRe,"STRONG",{});var rTt=s(spe);DNo=r(rTt,"megatron-bert"),rTt.forEach(t),GNo=r(pRe," \u2014 "),_V=n(pRe,"A",{href:!0});var tTt=s(_V);ONo=r(tTt,"MegatronBertForMaskedLM"),tTt.forEach(t),VNo=r(pRe," (Megatron-BERT model)"),pRe.forEach(t),XNo=i(H),nb=n(H,"LI",{});var _Re=s(nb);lpe=n(_Re,"STRONG",{});var aTt=s(lpe);zNo=r(aTt,"mobilebert"),aTt.forEach(t),QNo=r(_Re," \u2014 "),uV=n(_Re,"A",{href:!0});var nTt=s(uV);WNo=r(nTt,"MobileBertForMaskedLM"),nTt.forEach(t),HNo=r(_Re," (MobileBERT model)"),_Re.forEach(t),UNo=i(H),sb=n(H,"LI",{});var uRe=s(sb);ipe=n(uRe,"STRONG",{});var sTt=s(ipe);JNo=r(sTt,"mpnet"),sTt.forEach(t),YNo=r(uRe," \u2014 "),bV=n(uRe,"A",{href:!0});var lTt=s(bV);KNo=r(lTt,"MPNetForMaskedLM"),lTt.forEach(t),ZNo=r(uRe," (MPNet model)"),uRe.forEach(t),eIo=i(H),lb=n(H,"LI",{});var bRe=s(lb);dpe=n(bRe,"STRONG",{});var iTt=s(dpe);oIo=r(iTt,"mvp"),iTt.forEach(t),rIo=r(bRe," \u2014 "),vV=n(bRe,"A",{href:!0});var dTt=s(vV);tIo=r(dTt,"MvpForConditionalGeneration"),dTt.forEach(t),aIo=r(bRe," (MVP model)"),bRe.forEach(t),nIo=i(H),ib=n(H,"LI",{});var vRe=s(ib);cpe=n(vRe,"STRONG",{});var cTt=s(cpe);sIo=r(cTt,"nezha"),cTt.forEach(t),lIo=r(vRe," \u2014 "),FV=n(vRe,"A",{href:!0});var fTt=s(FV);iIo=r(fTt,"NezhaForMaskedLM"),fTt.forEach(t),dIo=r(vRe," (Nezha model)"),vRe.forEach(t),cIo=i(H),db=n(H,"LI",{});var FRe=s(db);fpe=n(FRe,"STRONG",{});var mTt=s(fpe);fIo=r(mTt,"nystromformer"),mTt.forEach(t),mIo=r(FRe," \u2014 "),TV=n(FRe,"A",{href:!0});var gTt=s(TV);gIo=r(gTt,"NystromformerForMaskedLM"),gTt.forEach(t),hIo=r(FRe," (Nystr\xF6mformer model)"),FRe.forEach(t),pIo=i(H),cb=n(H,"LI",{});var TRe=s(cb);mpe=n(TRe,"STRONG",{});var hTt=s(mpe);_Io=r(hTt,"perceiver"),hTt.forEach(t),uIo=r(TRe," \u2014 "),MV=n(TRe,"A",{href:!0});var pTt=s(MV);bIo=r(pTt,"PerceiverForMaskedLM"),pTt.forEach(t),vIo=r(TRe," (Perceiver model)"),TRe.forEach(t),FIo=i(H),fb=n(H,"LI",{});var MRe=s(fb);gpe=n(MRe,"STRONG",{});var _Tt=s(gpe);TIo=r(_Tt,"qdqbert"),_Tt.forEach(t),MIo=r(MRe," \u2014 "),EV=n(MRe,"A",{href:!0});var uTt=s(EV);EIo=r(uTt,"QDQBertForMaskedLM"),uTt.forEach(t),CIo=r(MRe," (QDQBert model)"),MRe.forEach(t),wIo=i(H),mb=n(H,"LI",{});var ERe=s(mb);hpe=n(ERe,"STRONG",{});var bTt=s(hpe);AIo=r(bTt,"reformer"),bTt.forEach(t),LIo=r(ERe," \u2014 "),CV=n(ERe,"A",{href:!0});var vTt=s(CV);yIo=r(vTt,"ReformerForMaskedLM"),vTt.forEach(t),xIo=r(ERe," (Reformer model)"),ERe.forEach(t),$Io=i(H),gb=n(H,"LI",{});var CRe=s(gb);ppe=n(CRe,"STRONG",{});var FTt=s(ppe);kIo=r(FTt,"rembert"),FTt.forEach(t),SIo=r(CRe," \u2014 "),wV=n(CRe,"A",{href:!0});var TTt=s(wV);RIo=r(TTt,"RemBertForMaskedLM"),TTt.forEach(t),PIo=r(CRe," (RemBERT model)"),CRe.forEach(t),BIo=i(H),hb=n(H,"LI",{});var wRe=s(hb);_pe=n(wRe,"STRONG",{});var MTt=s(_pe);NIo=r(MTt,"roberta"),MTt.forEach(t),IIo=r(wRe," \u2014 "),AV=n(wRe,"A",{href:!0});var ETt=s(AV);qIo=r(ETt,"RobertaForMaskedLM"),ETt.forEach(t),jIo=r(wRe," (RoBERTa model)"),wRe.forEach(t),DIo=i(H),pb=n(H,"LI",{});var ARe=s(pb);upe=n(ARe,"STRONG",{});var CTt=s(upe);GIo=r(CTt,"roformer"),CTt.forEach(t),OIo=r(ARe," \u2014 "),LV=n(ARe,"A",{href:!0});var wTt=s(LV);VIo=r(wTt,"RoFormerForMaskedLM"),wTt.forEach(t),XIo=r(ARe," (RoFormer model)"),ARe.forEach(t),zIo=i(H),_b=n(H,"LI",{});var LRe=s(_b);bpe=n(LRe,"STRONG",{});var ATt=s(bpe);QIo=r(ATt,"squeezebert"),ATt.forEach(t),WIo=r(LRe," \u2014 "),yV=n(LRe,"A",{href:!0});var LTt=s(yV);HIo=r(LTt,"SqueezeBertForMaskedLM"),LTt.forEach(t),UIo=r(LRe," (SqueezeBERT model)"),LRe.forEach(t),JIo=i(H),ub=n(H,"LI",{});var yRe=s(ub);vpe=n(yRe,"STRONG",{});var yTt=s(vpe);YIo=r(yTt,"tapas"),yTt.forEach(t),KIo=r(yRe," \u2014 "),xV=n(yRe,"A",{href:!0});var xTt=s(xV);ZIo=r(xTt,"TapasForMaskedLM"),xTt.forEach(t),eqo=r(yRe," (TAPAS model)"),yRe.forEach(t),oqo=i(H),bb=n(H,"LI",{});var xRe=s(bb);Fpe=n(xRe,"STRONG",{});var $Tt=s(Fpe);rqo=r($Tt,"wav2vec2"),$Tt.forEach(t),tqo=r(xRe," \u2014 "),Tpe=n(xRe,"CODE",{});var kTt=s(Tpe);aqo=r(kTt,"Wav2Vec2ForMaskedLM"),kTt.forEach(t),nqo=r(xRe," (Wav2Vec2 model)"),xRe.forEach(t),sqo=i(H),vb=n(H,"LI",{});var $Re=s(vb);Mpe=n($Re,"STRONG",{});var STt=s(Mpe);lqo=r(STt,"xlm"),STt.forEach(t),iqo=r($Re," \u2014 "),$V=n($Re,"A",{href:!0});var RTt=s($V);dqo=r(RTt,"XLMWithLMHeadModel"),RTt.forEach(t),cqo=r($Re," (XLM model)"),$Re.forEach(t),fqo=i(H),Fb=n(H,"LI",{});var kRe=s(Fb);Epe=n(kRe,"STRONG",{});var PTt=s(Epe);mqo=r(PTt,"xlm-roberta"),PTt.forEach(t),gqo=r(kRe," \u2014 "),kV=n(kRe,"A",{href:!0});var BTt=s(kV);hqo=r(BTt,"XLMRobertaForMaskedLM"),BTt.forEach(t),pqo=r(kRe," (XLM-RoBERTa model)"),kRe.forEach(t),_qo=i(H),Tb=n(H,"LI",{});var SRe=s(Tb);Cpe=n(SRe,"STRONG",{});var NTt=s(Cpe);uqo=r(NTt,"xlm-roberta-xl"),NTt.forEach(t),bqo=r(SRe," \u2014 "),SV=n(SRe,"A",{href:!0});var ITt=s(SV);vqo=r(ITt,"XLMRobertaXLForMaskedLM"),ITt.forEach(t),Fqo=r(SRe," (XLM-RoBERTa-XL model)"),SRe.forEach(t),Tqo=i(H),Mb=n(H,"LI",{});var RRe=s(Mb);wpe=n(RRe,"STRONG",{});var qTt=s(wpe);Mqo=r(qTt,"yoso"),qTt.forEach(t),Eqo=r(RRe," \u2014 "),RV=n(RRe,"A",{href:!0});var jTt=s(RV);Cqo=r(jTt,"YosoForMaskedLM"),jTt.forEach(t),wqo=r(RRe," (YOSO model)"),RRe.forEach(t),H.forEach(t),Aqo=i(ca),Eb=n(ca,"P",{});var PRe=s(Eb);Lqo=r(PRe,"The model is set in evaluation mode by default using "),Ape=n(PRe,"CODE",{});var DTt=s(Ape);yqo=r(DTt,"model.eval()"),DTt.forEach(t),xqo=r(PRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=n(PRe,"CODE",{});var GTt=s(Lpe);$qo=r(GTt,"model.train()"),GTt.forEach(t),PRe.forEach(t),kqo=i(ca),T(Cb.$$.fragment,ca),ca.forEach(t),sl.forEach(t),VXe=i(f),ed=n(f,"H2",{class:!0});var UQe=s(ed);wb=n(UQe,"A",{id:!0,class:!0,href:!0});var OTt=s(wb);ype=n(OTt,"SPAN",{});var VTt=s(ype);T(ry.$$.fragment,VTt),VTt.forEach(t),OTt.forEach(t),Sqo=i(UQe),xpe=n(UQe,"SPAN",{});var XTt=s(xpe);Rqo=r(XTt,"AutoModelForSeq2SeqLM"),XTt.forEach(t),UQe.forEach(t),XXe=i(f),Po=n(f,"DIV",{class:!0});var ll=s(Po);T(ty.$$.fragment,ll),Pqo=i(ll),od=n(ll,"P",{});var Yre=s(od);Bqo=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PV=n(Yre,"A",{href:!0});var zTt=s(PV);Nqo=r(zTt,"from_pretrained()"),zTt.forEach(t),Iqo=r(Yre," class method or the "),BV=n(Yre,"A",{href:!0});var QTt=s(BV);qqo=r(QTt,"from_config()"),QTt.forEach(t),jqo=r(Yre,` class
method.`),Yre.forEach(t),Dqo=i(ll),ay=n(ll,"P",{});var JQe=s(ay);Gqo=r(JQe,"This class cannot be instantiated directly using "),$pe=n(JQe,"CODE",{});var WTt=s($pe);Oqo=r(WTt,"__init__()"),WTt.forEach(t),Vqo=r(JQe," (throws an error)."),JQe.forEach(t),Xqo=i(ll),mt=n(ll,"DIV",{class:!0});var Mw=s(mt);T(ny.$$.fragment,Mw),zqo=i(Mw),kpe=n(Mw,"P",{});var HTt=s(kpe);Qqo=r(HTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),HTt.forEach(t),Wqo=i(Mw),rd=n(Mw,"P",{});var Kre=s(rd);Hqo=r(Kre,`Note:
Loading a model from its configuration file does `),Spe=n(Kre,"STRONG",{});var UTt=s(Spe);Uqo=r(UTt,"not"),UTt.forEach(t),Jqo=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=n(Kre,"A",{href:!0});var JTt=s(NV);Yqo=r(JTt,"from_pretrained()"),JTt.forEach(t),Kqo=r(Kre," to load the model weights."),Kre.forEach(t),Zqo=i(Mw),T(Ab.$$.fragment,Mw),Mw.forEach(t),ejo=i(ll),oo=n(ll,"DIV",{class:!0});var fa=s(oo);T(sy.$$.fragment,fa),ojo=i(fa),Rpe=n(fa,"P",{});var YTt=s(Rpe);rjo=r(YTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),YTt.forEach(t),tjo=i(fa),Da=n(fa,"P",{});var Ew=s(Da);ajo=r(Ew,"The model class to instantiate is selected based on the "),Ppe=n(Ew,"CODE",{});var KTt=s(Ppe);njo=r(KTt,"model_type"),KTt.forEach(t),sjo=r(Ew,` property of the config object (either
passed as an argument or loaded from `),Bpe=n(Ew,"CODE",{});var ZTt=s(Bpe);ljo=r(ZTt,"pretrained_model_name_or_path"),ZTt.forEach(t),ijo=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(Ew,"CODE",{});var e7t=s(Npe);djo=r(e7t,"pretrained_model_name_or_path"),e7t.forEach(t),cjo=r(Ew,":"),Ew.forEach(t),fjo=i(fa),fe=n(fa,"UL",{});var _e=s(fe);Lb=n(_e,"LI",{});var BRe=s(Lb);Ipe=n(BRe,"STRONG",{});var o7t=s(Ipe);mjo=r(o7t,"bart"),o7t.forEach(t),gjo=r(BRe," \u2014 "),IV=n(BRe,"A",{href:!0});var r7t=s(IV);hjo=r(r7t,"BartForConditionalGeneration"),r7t.forEach(t),pjo=r(BRe," (BART model)"),BRe.forEach(t),_jo=i(_e),yb=n(_e,"LI",{});var NRe=s(yb);qpe=n(NRe,"STRONG",{});var t7t=s(qpe);ujo=r(t7t,"bigbird_pegasus"),t7t.forEach(t),bjo=r(NRe," \u2014 "),qV=n(NRe,"A",{href:!0});var a7t=s(qV);vjo=r(a7t,"BigBirdPegasusForConditionalGeneration"),a7t.forEach(t),Fjo=r(NRe," (BigBird-Pegasus model)"),NRe.forEach(t),Tjo=i(_e),xb=n(_e,"LI",{});var IRe=s(xb);jpe=n(IRe,"STRONG",{});var n7t=s(jpe);Mjo=r(n7t,"blenderbot"),n7t.forEach(t),Ejo=r(IRe," \u2014 "),jV=n(IRe,"A",{href:!0});var s7t=s(jV);Cjo=r(s7t,"BlenderbotForConditionalGeneration"),s7t.forEach(t),wjo=r(IRe," (Blenderbot model)"),IRe.forEach(t),Ajo=i(_e),$b=n(_e,"LI",{});var qRe=s($b);Dpe=n(qRe,"STRONG",{});var l7t=s(Dpe);Ljo=r(l7t,"blenderbot-small"),l7t.forEach(t),yjo=r(qRe," \u2014 "),DV=n(qRe,"A",{href:!0});var i7t=s(DV);xjo=r(i7t,"BlenderbotSmallForConditionalGeneration"),i7t.forEach(t),$jo=r(qRe," (BlenderbotSmall model)"),qRe.forEach(t),kjo=i(_e),kb=n(_e,"LI",{});var jRe=s(kb);Gpe=n(jRe,"STRONG",{});var d7t=s(Gpe);Sjo=r(d7t,"encoder-decoder"),d7t.forEach(t),Rjo=r(jRe," \u2014 "),GV=n(jRe,"A",{href:!0});var c7t=s(GV);Pjo=r(c7t,"EncoderDecoderModel"),c7t.forEach(t),Bjo=r(jRe," (Encoder decoder model)"),jRe.forEach(t),Njo=i(_e),Sb=n(_e,"LI",{});var DRe=s(Sb);Ope=n(DRe,"STRONG",{});var f7t=s(Ope);Ijo=r(f7t,"fsmt"),f7t.forEach(t),qjo=r(DRe," \u2014 "),OV=n(DRe,"A",{href:!0});var m7t=s(OV);jjo=r(m7t,"FSMTForConditionalGeneration"),m7t.forEach(t),Djo=r(DRe," (FairSeq Machine-Translation model)"),DRe.forEach(t),Gjo=i(_e),Rb=n(_e,"LI",{});var GRe=s(Rb);Vpe=n(GRe,"STRONG",{});var g7t=s(Vpe);Ojo=r(g7t,"led"),g7t.forEach(t),Vjo=r(GRe," \u2014 "),VV=n(GRe,"A",{href:!0});var h7t=s(VV);Xjo=r(h7t,"LEDForConditionalGeneration"),h7t.forEach(t),zjo=r(GRe," (LED model)"),GRe.forEach(t),Qjo=i(_e),Pb=n(_e,"LI",{});var ORe=s(Pb);Xpe=n(ORe,"STRONG",{});var p7t=s(Xpe);Wjo=r(p7t,"longt5"),p7t.forEach(t),Hjo=r(ORe," \u2014 "),XV=n(ORe,"A",{href:!0});var _7t=s(XV);Ujo=r(_7t,"LongT5ForConditionalGeneration"),_7t.forEach(t),Jjo=r(ORe," (LongT5 model)"),ORe.forEach(t),Yjo=i(_e),Bb=n(_e,"LI",{});var VRe=s(Bb);zpe=n(VRe,"STRONG",{});var u7t=s(zpe);Kjo=r(u7t,"m2m_100"),u7t.forEach(t),Zjo=r(VRe," \u2014 "),zV=n(VRe,"A",{href:!0});var b7t=s(zV);eDo=r(b7t,"M2M100ForConditionalGeneration"),b7t.forEach(t),oDo=r(VRe," (M2M100 model)"),VRe.forEach(t),rDo=i(_e),Nb=n(_e,"LI",{});var XRe=s(Nb);Qpe=n(XRe,"STRONG",{});var v7t=s(Qpe);tDo=r(v7t,"marian"),v7t.forEach(t),aDo=r(XRe," \u2014 "),QV=n(XRe,"A",{href:!0});var F7t=s(QV);nDo=r(F7t,"MarianMTModel"),F7t.forEach(t),sDo=r(XRe," (Marian model)"),XRe.forEach(t),lDo=i(_e),Ib=n(_e,"LI",{});var zRe=s(Ib);Wpe=n(zRe,"STRONG",{});var T7t=s(Wpe);iDo=r(T7t,"mbart"),T7t.forEach(t),dDo=r(zRe," \u2014 "),WV=n(zRe,"A",{href:!0});var M7t=s(WV);cDo=r(M7t,"MBartForConditionalGeneration"),M7t.forEach(t),fDo=r(zRe," (mBART model)"),zRe.forEach(t),mDo=i(_e),qb=n(_e,"LI",{});var QRe=s(qb);Hpe=n(QRe,"STRONG",{});var E7t=s(Hpe);gDo=r(E7t,"mt5"),E7t.forEach(t),hDo=r(QRe," \u2014 "),HV=n(QRe,"A",{href:!0});var C7t=s(HV);pDo=r(C7t,"MT5ForConditionalGeneration"),C7t.forEach(t),_Do=r(QRe," (MT5 model)"),QRe.forEach(t),uDo=i(_e),jb=n(_e,"LI",{});var WRe=s(jb);Upe=n(WRe,"STRONG",{});var w7t=s(Upe);bDo=r(w7t,"mvp"),w7t.forEach(t),vDo=r(WRe," \u2014 "),UV=n(WRe,"A",{href:!0});var A7t=s(UV);FDo=r(A7t,"MvpForConditionalGeneration"),A7t.forEach(t),TDo=r(WRe," (MVP model)"),WRe.forEach(t),MDo=i(_e),Db=n(_e,"LI",{});var HRe=s(Db);Jpe=n(HRe,"STRONG",{});var L7t=s(Jpe);EDo=r(L7t,"nllb"),L7t.forEach(t),CDo=r(HRe," \u2014 "),JV=n(HRe,"A",{href:!0});var y7t=s(JV);wDo=r(y7t,"M2M100ForConditionalGeneration"),y7t.forEach(t),ADo=r(HRe," (NLLB model)"),HRe.forEach(t),LDo=i(_e),Gb=n(_e,"LI",{});var URe=s(Gb);Ype=n(URe,"STRONG",{});var x7t=s(Ype);yDo=r(x7t,"pegasus"),x7t.forEach(t),xDo=r(URe," \u2014 "),YV=n(URe,"A",{href:!0});var $7t=s(YV);$Do=r($7t,"PegasusForConditionalGeneration"),$7t.forEach(t),kDo=r(URe," (Pegasus model)"),URe.forEach(t),SDo=i(_e),Ob=n(_e,"LI",{});var JRe=s(Ob);Kpe=n(JRe,"STRONG",{});var k7t=s(Kpe);RDo=r(k7t,"plbart"),k7t.forEach(t),PDo=r(JRe," \u2014 "),KV=n(JRe,"A",{href:!0});var S7t=s(KV);BDo=r(S7t,"PLBartForConditionalGeneration"),S7t.forEach(t),NDo=r(JRe," (PLBart model)"),JRe.forEach(t),IDo=i(_e),Vb=n(_e,"LI",{});var YRe=s(Vb);Zpe=n(YRe,"STRONG",{});var R7t=s(Zpe);qDo=r(R7t,"prophetnet"),R7t.forEach(t),jDo=r(YRe," \u2014 "),ZV=n(YRe,"A",{href:!0});var P7t=s(ZV);DDo=r(P7t,"ProphetNetForConditionalGeneration"),P7t.forEach(t),GDo=r(YRe," (ProphetNet model)"),YRe.forEach(t),ODo=i(_e),Xb=n(_e,"LI",{});var KRe=s(Xb);e_e=n(KRe,"STRONG",{});var B7t=s(e_e);VDo=r(B7t,"t5"),B7t.forEach(t),XDo=r(KRe," \u2014 "),eX=n(KRe,"A",{href:!0});var N7t=s(eX);zDo=r(N7t,"T5ForConditionalGeneration"),N7t.forEach(t),QDo=r(KRe," (T5 model)"),KRe.forEach(t),WDo=i(_e),zb=n(_e,"LI",{});var ZRe=s(zb);o_e=n(ZRe,"STRONG",{});var I7t=s(o_e);HDo=r(I7t,"xlm-prophetnet"),I7t.forEach(t),UDo=r(ZRe," \u2014 "),oX=n(ZRe,"A",{href:!0});var q7t=s(oX);JDo=r(q7t,"XLMProphetNetForConditionalGeneration"),q7t.forEach(t),YDo=r(ZRe," (XLM-ProphetNet model)"),ZRe.forEach(t),_e.forEach(t),KDo=i(fa),Qb=n(fa,"P",{});var ePe=s(Qb);ZDo=r(ePe,"The model is set in evaluation mode by default using "),r_e=n(ePe,"CODE",{});var j7t=s(r_e);eGo=r(j7t,"model.eval()"),j7t.forEach(t),oGo=r(ePe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=n(ePe,"CODE",{});var D7t=s(t_e);rGo=r(D7t,"model.train()"),D7t.forEach(t),ePe.forEach(t),tGo=i(fa),T(Wb.$$.fragment,fa),fa.forEach(t),ll.forEach(t),zXe=i(f),td=n(f,"H2",{class:!0});var YQe=s(td);Hb=n(YQe,"A",{id:!0,class:!0,href:!0});var G7t=s(Hb);a_e=n(G7t,"SPAN",{});var O7t=s(a_e);T(ly.$$.fragment,O7t),O7t.forEach(t),G7t.forEach(t),aGo=i(YQe),n_e=n(YQe,"SPAN",{});var V7t=s(n_e);nGo=r(V7t,"AutoModelForSequenceClassification"),V7t.forEach(t),YQe.forEach(t),QXe=i(f),Bo=n(f,"DIV",{class:!0});var il=s(Bo);T(iy.$$.fragment,il),sGo=i(il),ad=n(il,"P",{});var Zre=s(ad);lGo=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rX=n(Zre,"A",{href:!0});var X7t=s(rX);iGo=r(X7t,"from_pretrained()"),X7t.forEach(t),dGo=r(Zre," class method or the "),tX=n(Zre,"A",{href:!0});var z7t=s(tX);cGo=r(z7t,"from_config()"),z7t.forEach(t),fGo=r(Zre,` class
method.`),Zre.forEach(t),mGo=i(il),dy=n(il,"P",{});var KQe=s(dy);gGo=r(KQe,"This class cannot be instantiated directly using "),s_e=n(KQe,"CODE",{});var Q7t=s(s_e);hGo=r(Q7t,"__init__()"),Q7t.forEach(t),pGo=r(KQe," (throws an error)."),KQe.forEach(t),_Go=i(il),gt=n(il,"DIV",{class:!0});var Cw=s(gt);T(cy.$$.fragment,Cw),uGo=i(Cw),l_e=n(Cw,"P",{});var W7t=s(l_e);bGo=r(W7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),W7t.forEach(t),vGo=i(Cw),nd=n(Cw,"P",{});var ete=s(nd);FGo=r(ete,`Note:
Loading a model from its configuration file does `),i_e=n(ete,"STRONG",{});var H7t=s(i_e);TGo=r(H7t,"not"),H7t.forEach(t),MGo=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(ete,"A",{href:!0});var U7t=s(aX);EGo=r(U7t,"from_pretrained()"),U7t.forEach(t),CGo=r(ete," to load the model weights."),ete.forEach(t),wGo=i(Cw),T(Ub.$$.fragment,Cw),Cw.forEach(t),AGo=i(il),ro=n(il,"DIV",{class:!0});var ma=s(ro);T(fy.$$.fragment,ma),LGo=i(ma),d_e=n(ma,"P",{});var J7t=s(d_e);yGo=r(J7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),J7t.forEach(t),xGo=i(ma),Ga=n(ma,"P",{});var ww=s(Ga);$Go=r(ww,"The model class to instantiate is selected based on the "),c_e=n(ww,"CODE",{});var Y7t=s(c_e);kGo=r(Y7t,"model_type"),Y7t.forEach(t),SGo=r(ww,` property of the config object (either
passed as an argument or loaded from `),f_e=n(ww,"CODE",{});var K7t=s(f_e);RGo=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),PGo=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=n(ww,"CODE",{});var Z7t=s(m_e);BGo=r(Z7t,"pretrained_model_name_or_path"),Z7t.forEach(t),NGo=r(ww,":"),ww.forEach(t),IGo=i(ma),I=n(ma,"UL",{});var j=s(I);Jb=n(j,"LI",{});var oPe=s(Jb);g_e=n(oPe,"STRONG",{});var e8t=s(g_e);qGo=r(e8t,"albert"),e8t.forEach(t),jGo=r(oPe," \u2014 "),nX=n(oPe,"A",{href:!0});var o8t=s(nX);DGo=r(o8t,"AlbertForSequenceClassification"),o8t.forEach(t),GGo=r(oPe," (ALBERT model)"),oPe.forEach(t),OGo=i(j),Yb=n(j,"LI",{});var rPe=s(Yb);h_e=n(rPe,"STRONG",{});var r8t=s(h_e);VGo=r(r8t,"bart"),r8t.forEach(t),XGo=r(rPe," \u2014 "),sX=n(rPe,"A",{href:!0});var t8t=s(sX);zGo=r(t8t,"BartForSequenceClassification"),t8t.forEach(t),QGo=r(rPe," (BART model)"),rPe.forEach(t),WGo=i(j),Kb=n(j,"LI",{});var tPe=s(Kb);p_e=n(tPe,"STRONG",{});var a8t=s(p_e);HGo=r(a8t,"bert"),a8t.forEach(t),UGo=r(tPe," \u2014 "),lX=n(tPe,"A",{href:!0});var n8t=s(lX);JGo=r(n8t,"BertForSequenceClassification"),n8t.forEach(t),YGo=r(tPe," (BERT model)"),tPe.forEach(t),KGo=i(j),Zb=n(j,"LI",{});var aPe=s(Zb);__e=n(aPe,"STRONG",{});var s8t=s(__e);ZGo=r(s8t,"big_bird"),s8t.forEach(t),eOo=r(aPe," \u2014 "),iX=n(aPe,"A",{href:!0});var l8t=s(iX);oOo=r(l8t,"BigBirdForSequenceClassification"),l8t.forEach(t),rOo=r(aPe," (BigBird model)"),aPe.forEach(t),tOo=i(j),ev=n(j,"LI",{});var nPe=s(ev);u_e=n(nPe,"STRONG",{});var i8t=s(u_e);aOo=r(i8t,"bigbird_pegasus"),i8t.forEach(t),nOo=r(nPe," \u2014 "),dX=n(nPe,"A",{href:!0});var d8t=s(dX);sOo=r(d8t,"BigBirdPegasusForSequenceClassification"),d8t.forEach(t),lOo=r(nPe," (BigBird-Pegasus model)"),nPe.forEach(t),iOo=i(j),ov=n(j,"LI",{});var sPe=s(ov);b_e=n(sPe,"STRONG",{});var c8t=s(b_e);dOo=r(c8t,"bloom"),c8t.forEach(t),cOo=r(sPe," \u2014 "),cX=n(sPe,"A",{href:!0});var f8t=s(cX);fOo=r(f8t,"BloomForSequenceClassification"),f8t.forEach(t),mOo=r(sPe," (BLOOM model)"),sPe.forEach(t),gOo=i(j),rv=n(j,"LI",{});var lPe=s(rv);v_e=n(lPe,"STRONG",{});var m8t=s(v_e);hOo=r(m8t,"camembert"),m8t.forEach(t),pOo=r(lPe," \u2014 "),fX=n(lPe,"A",{href:!0});var g8t=s(fX);_Oo=r(g8t,"CamembertForSequenceClassification"),g8t.forEach(t),uOo=r(lPe," (CamemBERT model)"),lPe.forEach(t),bOo=i(j),tv=n(j,"LI",{});var iPe=s(tv);F_e=n(iPe,"STRONG",{});var h8t=s(F_e);vOo=r(h8t,"canine"),h8t.forEach(t),FOo=r(iPe," \u2014 "),mX=n(iPe,"A",{href:!0});var p8t=s(mX);TOo=r(p8t,"CanineForSequenceClassification"),p8t.forEach(t),MOo=r(iPe," (CANINE model)"),iPe.forEach(t),EOo=i(j),av=n(j,"LI",{});var dPe=s(av);T_e=n(dPe,"STRONG",{});var _8t=s(T_e);COo=r(_8t,"convbert"),_8t.forEach(t),wOo=r(dPe," \u2014 "),gX=n(dPe,"A",{href:!0});var u8t=s(gX);AOo=r(u8t,"ConvBertForSequenceClassification"),u8t.forEach(t),LOo=r(dPe," (ConvBERT model)"),dPe.forEach(t),yOo=i(j),nv=n(j,"LI",{});var cPe=s(nv);M_e=n(cPe,"STRONG",{});var b8t=s(M_e);xOo=r(b8t,"ctrl"),b8t.forEach(t),$Oo=r(cPe," \u2014 "),hX=n(cPe,"A",{href:!0});var v8t=s(hX);kOo=r(v8t,"CTRLForSequenceClassification"),v8t.forEach(t),SOo=r(cPe," (CTRL model)"),cPe.forEach(t),ROo=i(j),sv=n(j,"LI",{});var fPe=s(sv);E_e=n(fPe,"STRONG",{});var F8t=s(E_e);POo=r(F8t,"data2vec-text"),F8t.forEach(t),BOo=r(fPe," \u2014 "),pX=n(fPe,"A",{href:!0});var T8t=s(pX);NOo=r(T8t,"Data2VecTextForSequenceClassification"),T8t.forEach(t),IOo=r(fPe," (Data2VecText model)"),fPe.forEach(t),qOo=i(j),lv=n(j,"LI",{});var mPe=s(lv);C_e=n(mPe,"STRONG",{});var M8t=s(C_e);jOo=r(M8t,"deberta"),M8t.forEach(t),DOo=r(mPe," \u2014 "),_X=n(mPe,"A",{href:!0});var E8t=s(_X);GOo=r(E8t,"DebertaForSequenceClassification"),E8t.forEach(t),OOo=r(mPe," (DeBERTa model)"),mPe.forEach(t),VOo=i(j),iv=n(j,"LI",{});var gPe=s(iv);w_e=n(gPe,"STRONG",{});var C8t=s(w_e);XOo=r(C8t,"deberta-v2"),C8t.forEach(t),zOo=r(gPe," \u2014 "),uX=n(gPe,"A",{href:!0});var w8t=s(uX);QOo=r(w8t,"DebertaV2ForSequenceClassification"),w8t.forEach(t),WOo=r(gPe," (DeBERTa-v2 model)"),gPe.forEach(t),HOo=i(j),dv=n(j,"LI",{});var hPe=s(dv);A_e=n(hPe,"STRONG",{});var A8t=s(A_e);UOo=r(A8t,"distilbert"),A8t.forEach(t),JOo=r(hPe," \u2014 "),bX=n(hPe,"A",{href:!0});var L8t=s(bX);YOo=r(L8t,"DistilBertForSequenceClassification"),L8t.forEach(t),KOo=r(hPe," (DistilBERT model)"),hPe.forEach(t),ZOo=i(j),cv=n(j,"LI",{});var pPe=s(cv);L_e=n(pPe,"STRONG",{});var y8t=s(L_e);eVo=r(y8t,"electra"),y8t.forEach(t),oVo=r(pPe," \u2014 "),vX=n(pPe,"A",{href:!0});var x8t=s(vX);rVo=r(x8t,"ElectraForSequenceClassification"),x8t.forEach(t),tVo=r(pPe," (ELECTRA model)"),pPe.forEach(t),aVo=i(j),fv=n(j,"LI",{});var _Pe=s(fv);y_e=n(_Pe,"STRONG",{});var $8t=s(y_e);nVo=r($8t,"flaubert"),$8t.forEach(t),sVo=r(_Pe," \u2014 "),FX=n(_Pe,"A",{href:!0});var k8t=s(FX);lVo=r(k8t,"FlaubertForSequenceClassification"),k8t.forEach(t),iVo=r(_Pe," (FlauBERT model)"),_Pe.forEach(t),dVo=i(j),mv=n(j,"LI",{});var uPe=s(mv);x_e=n(uPe,"STRONG",{});var S8t=s(x_e);cVo=r(S8t,"fnet"),S8t.forEach(t),fVo=r(uPe," \u2014 "),TX=n(uPe,"A",{href:!0});var R8t=s(TX);mVo=r(R8t,"FNetForSequenceClassification"),R8t.forEach(t),gVo=r(uPe," (FNet model)"),uPe.forEach(t),hVo=i(j),gv=n(j,"LI",{});var bPe=s(gv);$_e=n(bPe,"STRONG",{});var P8t=s($_e);pVo=r(P8t,"funnel"),P8t.forEach(t),_Vo=r(bPe," \u2014 "),MX=n(bPe,"A",{href:!0});var B8t=s(MX);uVo=r(B8t,"FunnelForSequenceClassification"),B8t.forEach(t),bVo=r(bPe," (Funnel Transformer model)"),bPe.forEach(t),vVo=i(j),hv=n(j,"LI",{});var vPe=s(hv);k_e=n(vPe,"STRONG",{});var N8t=s(k_e);FVo=r(N8t,"gpt2"),N8t.forEach(t),TVo=r(vPe," \u2014 "),EX=n(vPe,"A",{href:!0});var I8t=s(EX);MVo=r(I8t,"GPT2ForSequenceClassification"),I8t.forEach(t),EVo=r(vPe," (OpenAI GPT-2 model)"),vPe.forEach(t),CVo=i(j),pv=n(j,"LI",{});var FPe=s(pv);S_e=n(FPe,"STRONG",{});var q8t=s(S_e);wVo=r(q8t,"gpt_neo"),q8t.forEach(t),AVo=r(FPe," \u2014 "),CX=n(FPe,"A",{href:!0});var j8t=s(CX);LVo=r(j8t,"GPTNeoForSequenceClassification"),j8t.forEach(t),yVo=r(FPe," (GPT Neo model)"),FPe.forEach(t),xVo=i(j),_v=n(j,"LI",{});var TPe=s(_v);R_e=n(TPe,"STRONG",{});var D8t=s(R_e);$Vo=r(D8t,"gptj"),D8t.forEach(t),kVo=r(TPe," \u2014 "),wX=n(TPe,"A",{href:!0});var G8t=s(wX);SVo=r(G8t,"GPTJForSequenceClassification"),G8t.forEach(t),RVo=r(TPe," (GPT-J model)"),TPe.forEach(t),PVo=i(j),uv=n(j,"LI",{});var MPe=s(uv);P_e=n(MPe,"STRONG",{});var O8t=s(P_e);BVo=r(O8t,"ibert"),O8t.forEach(t),NVo=r(MPe," \u2014 "),AX=n(MPe,"A",{href:!0});var V8t=s(AX);IVo=r(V8t,"IBertForSequenceClassification"),V8t.forEach(t),qVo=r(MPe," (I-BERT model)"),MPe.forEach(t),jVo=i(j),bv=n(j,"LI",{});var EPe=s(bv);B_e=n(EPe,"STRONG",{});var X8t=s(B_e);DVo=r(X8t,"layoutlm"),X8t.forEach(t),GVo=r(EPe," \u2014 "),LX=n(EPe,"A",{href:!0});var z8t=s(LX);OVo=r(z8t,"LayoutLMForSequenceClassification"),z8t.forEach(t),VVo=r(EPe," (LayoutLM model)"),EPe.forEach(t),XVo=i(j),vv=n(j,"LI",{});var CPe=s(vv);N_e=n(CPe,"STRONG",{});var Q8t=s(N_e);zVo=r(Q8t,"layoutlmv2"),Q8t.forEach(t),QVo=r(CPe," \u2014 "),yX=n(CPe,"A",{href:!0});var W8t=s(yX);WVo=r(W8t,"LayoutLMv2ForSequenceClassification"),W8t.forEach(t),HVo=r(CPe," (LayoutLMv2 model)"),CPe.forEach(t),UVo=i(j),Fv=n(j,"LI",{});var wPe=s(Fv);I_e=n(wPe,"STRONG",{});var H8t=s(I_e);JVo=r(H8t,"layoutlmv3"),H8t.forEach(t),YVo=r(wPe," \u2014 "),xX=n(wPe,"A",{href:!0});var U8t=s(xX);KVo=r(U8t,"LayoutLMv3ForSequenceClassification"),U8t.forEach(t),ZVo=r(wPe," (LayoutLMv3 model)"),wPe.forEach(t),eXo=i(j),Tv=n(j,"LI",{});var APe=s(Tv);q_e=n(APe,"STRONG",{});var J8t=s(q_e);oXo=r(J8t,"led"),J8t.forEach(t),rXo=r(APe," \u2014 "),$X=n(APe,"A",{href:!0});var Y8t=s($X);tXo=r(Y8t,"LEDForSequenceClassification"),Y8t.forEach(t),aXo=r(APe," (LED model)"),APe.forEach(t),nXo=i(j),Mv=n(j,"LI",{});var LPe=s(Mv);j_e=n(LPe,"STRONG",{});var K8t=s(j_e);sXo=r(K8t,"longformer"),K8t.forEach(t),lXo=r(LPe," \u2014 "),kX=n(LPe,"A",{href:!0});var Z8t=s(kX);iXo=r(Z8t,"LongformerForSequenceClassification"),Z8t.forEach(t),dXo=r(LPe," (Longformer model)"),LPe.forEach(t),cXo=i(j),Ev=n(j,"LI",{});var yPe=s(Ev);D_e=n(yPe,"STRONG",{});var eMt=s(D_e);fXo=r(eMt,"mbart"),eMt.forEach(t),mXo=r(yPe," \u2014 "),SX=n(yPe,"A",{href:!0});var oMt=s(SX);gXo=r(oMt,"MBartForSequenceClassification"),oMt.forEach(t),hXo=r(yPe," (mBART model)"),yPe.forEach(t),pXo=i(j),Cv=n(j,"LI",{});var xPe=s(Cv);G_e=n(xPe,"STRONG",{});var rMt=s(G_e);_Xo=r(rMt,"megatron-bert"),rMt.forEach(t),uXo=r(xPe," \u2014 "),RX=n(xPe,"A",{href:!0});var tMt=s(RX);bXo=r(tMt,"MegatronBertForSequenceClassification"),tMt.forEach(t),vXo=r(xPe," (Megatron-BERT model)"),xPe.forEach(t),FXo=i(j),wv=n(j,"LI",{});var $Pe=s(wv);O_e=n($Pe,"STRONG",{});var aMt=s(O_e);TXo=r(aMt,"mobilebert"),aMt.forEach(t),MXo=r($Pe," \u2014 "),PX=n($Pe,"A",{href:!0});var nMt=s(PX);EXo=r(nMt,"MobileBertForSequenceClassification"),nMt.forEach(t),CXo=r($Pe," (MobileBERT model)"),$Pe.forEach(t),wXo=i(j),Av=n(j,"LI",{});var kPe=s(Av);V_e=n(kPe,"STRONG",{});var sMt=s(V_e);AXo=r(sMt,"mpnet"),sMt.forEach(t),LXo=r(kPe," \u2014 "),BX=n(kPe,"A",{href:!0});var lMt=s(BX);yXo=r(lMt,"MPNetForSequenceClassification"),lMt.forEach(t),xXo=r(kPe," (MPNet model)"),kPe.forEach(t),$Xo=i(j),Lv=n(j,"LI",{});var SPe=s(Lv);X_e=n(SPe,"STRONG",{});var iMt=s(X_e);kXo=r(iMt,"mvp"),iMt.forEach(t),SXo=r(SPe," \u2014 "),NX=n(SPe,"A",{href:!0});var dMt=s(NX);RXo=r(dMt,"MvpForSequenceClassification"),dMt.forEach(t),PXo=r(SPe," (MVP model)"),SPe.forEach(t),BXo=i(j),yv=n(j,"LI",{});var RPe=s(yv);z_e=n(RPe,"STRONG",{});var cMt=s(z_e);NXo=r(cMt,"nezha"),cMt.forEach(t),IXo=r(RPe," \u2014 "),IX=n(RPe,"A",{href:!0});var fMt=s(IX);qXo=r(fMt,"NezhaForSequenceClassification"),fMt.forEach(t),jXo=r(RPe," (Nezha model)"),RPe.forEach(t),DXo=i(j),xv=n(j,"LI",{});var PPe=s(xv);Q_e=n(PPe,"STRONG",{});var mMt=s(Q_e);GXo=r(mMt,"nystromformer"),mMt.forEach(t),OXo=r(PPe," \u2014 "),qX=n(PPe,"A",{href:!0});var gMt=s(qX);VXo=r(gMt,"NystromformerForSequenceClassification"),gMt.forEach(t),XXo=r(PPe," (Nystr\xF6mformer model)"),PPe.forEach(t),zXo=i(j),$v=n(j,"LI",{});var BPe=s($v);W_e=n(BPe,"STRONG",{});var hMt=s(W_e);QXo=r(hMt,"openai-gpt"),hMt.forEach(t),WXo=r(BPe," \u2014 "),jX=n(BPe,"A",{href:!0});var pMt=s(jX);HXo=r(pMt,"OpenAIGPTForSequenceClassification"),pMt.forEach(t),UXo=r(BPe," (OpenAI GPT model)"),BPe.forEach(t),JXo=i(j),kv=n(j,"LI",{});var NPe=s(kv);H_e=n(NPe,"STRONG",{});var _Mt=s(H_e);YXo=r(_Mt,"perceiver"),_Mt.forEach(t),KXo=r(NPe," \u2014 "),DX=n(NPe,"A",{href:!0});var uMt=s(DX);ZXo=r(uMt,"PerceiverForSequenceClassification"),uMt.forEach(t),ezo=r(NPe," (Perceiver model)"),NPe.forEach(t),ozo=i(j),Sv=n(j,"LI",{});var IPe=s(Sv);U_e=n(IPe,"STRONG",{});var bMt=s(U_e);rzo=r(bMt,"plbart"),bMt.forEach(t),tzo=r(IPe," \u2014 "),GX=n(IPe,"A",{href:!0});var vMt=s(GX);azo=r(vMt,"PLBartForSequenceClassification"),vMt.forEach(t),nzo=r(IPe," (PLBart model)"),IPe.forEach(t),szo=i(j),Rv=n(j,"LI",{});var qPe=s(Rv);J_e=n(qPe,"STRONG",{});var FMt=s(J_e);lzo=r(FMt,"qdqbert"),FMt.forEach(t),izo=r(qPe," \u2014 "),OX=n(qPe,"A",{href:!0});var TMt=s(OX);dzo=r(TMt,"QDQBertForSequenceClassification"),TMt.forEach(t),czo=r(qPe," (QDQBert model)"),qPe.forEach(t),fzo=i(j),Pv=n(j,"LI",{});var jPe=s(Pv);Y_e=n(jPe,"STRONG",{});var MMt=s(Y_e);mzo=r(MMt,"reformer"),MMt.forEach(t),gzo=r(jPe," \u2014 "),VX=n(jPe,"A",{href:!0});var EMt=s(VX);hzo=r(EMt,"ReformerForSequenceClassification"),EMt.forEach(t),pzo=r(jPe," (Reformer model)"),jPe.forEach(t),_zo=i(j),Bv=n(j,"LI",{});var DPe=s(Bv);K_e=n(DPe,"STRONG",{});var CMt=s(K_e);uzo=r(CMt,"rembert"),CMt.forEach(t),bzo=r(DPe," \u2014 "),XX=n(DPe,"A",{href:!0});var wMt=s(XX);vzo=r(wMt,"RemBertForSequenceClassification"),wMt.forEach(t),Fzo=r(DPe," (RemBERT model)"),DPe.forEach(t),Tzo=i(j),Nv=n(j,"LI",{});var GPe=s(Nv);Z_e=n(GPe,"STRONG",{});var AMt=s(Z_e);Mzo=r(AMt,"roberta"),AMt.forEach(t),Ezo=r(GPe," \u2014 "),zX=n(GPe,"A",{href:!0});var LMt=s(zX);Czo=r(LMt,"RobertaForSequenceClassification"),LMt.forEach(t),wzo=r(GPe," (RoBERTa model)"),GPe.forEach(t),Azo=i(j),Iv=n(j,"LI",{});var OPe=s(Iv);eue=n(OPe,"STRONG",{});var yMt=s(eue);Lzo=r(yMt,"roformer"),yMt.forEach(t),yzo=r(OPe," \u2014 "),QX=n(OPe,"A",{href:!0});var xMt=s(QX);xzo=r(xMt,"RoFormerForSequenceClassification"),xMt.forEach(t),$zo=r(OPe," (RoFormer model)"),OPe.forEach(t),kzo=i(j),qv=n(j,"LI",{});var VPe=s(qv);oue=n(VPe,"STRONG",{});var $Mt=s(oue);Szo=r($Mt,"squeezebert"),$Mt.forEach(t),Rzo=r(VPe," \u2014 "),WX=n(VPe,"A",{href:!0});var kMt=s(WX);Pzo=r(kMt,"SqueezeBertForSequenceClassification"),kMt.forEach(t),Bzo=r(VPe," (SqueezeBERT model)"),VPe.forEach(t),Nzo=i(j),jv=n(j,"LI",{});var XPe=s(jv);rue=n(XPe,"STRONG",{});var SMt=s(rue);Izo=r(SMt,"tapas"),SMt.forEach(t),qzo=r(XPe," \u2014 "),HX=n(XPe,"A",{href:!0});var RMt=s(HX);jzo=r(RMt,"TapasForSequenceClassification"),RMt.forEach(t),Dzo=r(XPe," (TAPAS model)"),XPe.forEach(t),Gzo=i(j),Dv=n(j,"LI",{});var zPe=s(Dv);tue=n(zPe,"STRONG",{});var PMt=s(tue);Ozo=r(PMt,"transfo-xl"),PMt.forEach(t),Vzo=r(zPe," \u2014 "),UX=n(zPe,"A",{href:!0});var BMt=s(UX);Xzo=r(BMt,"TransfoXLForSequenceClassification"),BMt.forEach(t),zzo=r(zPe," (Transformer-XL model)"),zPe.forEach(t),Qzo=i(j),Gv=n(j,"LI",{});var QPe=s(Gv);aue=n(QPe,"STRONG",{});var NMt=s(aue);Wzo=r(NMt,"xlm"),NMt.forEach(t),Hzo=r(QPe," \u2014 "),JX=n(QPe,"A",{href:!0});var IMt=s(JX);Uzo=r(IMt,"XLMForSequenceClassification"),IMt.forEach(t),Jzo=r(QPe," (XLM model)"),QPe.forEach(t),Yzo=i(j),Ov=n(j,"LI",{});var WPe=s(Ov);nue=n(WPe,"STRONG",{});var qMt=s(nue);Kzo=r(qMt,"xlm-roberta"),qMt.forEach(t),Zzo=r(WPe," \u2014 "),YX=n(WPe,"A",{href:!0});var jMt=s(YX);eQo=r(jMt,"XLMRobertaForSequenceClassification"),jMt.forEach(t),oQo=r(WPe," (XLM-RoBERTa model)"),WPe.forEach(t),rQo=i(j),Vv=n(j,"LI",{});var HPe=s(Vv);sue=n(HPe,"STRONG",{});var DMt=s(sue);tQo=r(DMt,"xlm-roberta-xl"),DMt.forEach(t),aQo=r(HPe," \u2014 "),KX=n(HPe,"A",{href:!0});var GMt=s(KX);nQo=r(GMt,"XLMRobertaXLForSequenceClassification"),GMt.forEach(t),sQo=r(HPe," (XLM-RoBERTa-XL model)"),HPe.forEach(t),lQo=i(j),Xv=n(j,"LI",{});var UPe=s(Xv);lue=n(UPe,"STRONG",{});var OMt=s(lue);iQo=r(OMt,"xlnet"),OMt.forEach(t),dQo=r(UPe," \u2014 "),ZX=n(UPe,"A",{href:!0});var VMt=s(ZX);cQo=r(VMt,"XLNetForSequenceClassification"),VMt.forEach(t),fQo=r(UPe," (XLNet model)"),UPe.forEach(t),mQo=i(j),zv=n(j,"LI",{});var JPe=s(zv);iue=n(JPe,"STRONG",{});var XMt=s(iue);gQo=r(XMt,"yoso"),XMt.forEach(t),hQo=r(JPe," \u2014 "),ez=n(JPe,"A",{href:!0});var zMt=s(ez);pQo=r(zMt,"YosoForSequenceClassification"),zMt.forEach(t),_Qo=r(JPe," (YOSO model)"),JPe.forEach(t),j.forEach(t),uQo=i(ma),Qv=n(ma,"P",{});var YPe=s(Qv);bQo=r(YPe,"The model is set in evaluation mode by default using "),due=n(YPe,"CODE",{});var QMt=s(due);vQo=r(QMt,"model.eval()"),QMt.forEach(t),FQo=r(YPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(YPe,"CODE",{});var WMt=s(cue);TQo=r(WMt,"model.train()"),WMt.forEach(t),YPe.forEach(t),MQo=i(ma),T(Wv.$$.fragment,ma),ma.forEach(t),il.forEach(t),WXe=i(f),sd=n(f,"H2",{class:!0});var ZQe=s(sd);Hv=n(ZQe,"A",{id:!0,class:!0,href:!0});var HMt=s(Hv);fue=n(HMt,"SPAN",{});var UMt=s(fue);T(my.$$.fragment,UMt),UMt.forEach(t),HMt.forEach(t),EQo=i(ZQe),mue=n(ZQe,"SPAN",{});var JMt=s(mue);CQo=r(JMt,"AutoModelForMultipleChoice"),JMt.forEach(t),ZQe.forEach(t),HXe=i(f),No=n(f,"DIV",{class:!0});var dl=s(No);T(gy.$$.fragment,dl),wQo=i(dl),ld=n(dl,"P",{});var ote=s(ld);AQo=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oz=n(ote,"A",{href:!0});var YMt=s(oz);LQo=r(YMt,"from_pretrained()"),YMt.forEach(t),yQo=r(ote," class method or the "),rz=n(ote,"A",{href:!0});var KMt=s(rz);xQo=r(KMt,"from_config()"),KMt.forEach(t),$Qo=r(ote,` class
method.`),ote.forEach(t),kQo=i(dl),hy=n(dl,"P",{});var eWe=s(hy);SQo=r(eWe,"This class cannot be instantiated directly using "),gue=n(eWe,"CODE",{});var ZMt=s(gue);RQo=r(ZMt,"__init__()"),ZMt.forEach(t),PQo=r(eWe," (throws an error)."),eWe.forEach(t),BQo=i(dl),ht=n(dl,"DIV",{class:!0});var Aw=s(ht);T(py.$$.fragment,Aw),NQo=i(Aw),hue=n(Aw,"P",{});var e4t=s(hue);IQo=r(e4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),e4t.forEach(t),qQo=i(Aw),id=n(Aw,"P",{});var rte=s(id);jQo=r(rte,`Note:
Loading a model from its configuration file does `),pue=n(rte,"STRONG",{});var o4t=s(pue);DQo=r(o4t,"not"),o4t.forEach(t),GQo=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(rte,"A",{href:!0});var r4t=s(tz);OQo=r(r4t,"from_pretrained()"),r4t.forEach(t),VQo=r(rte," to load the model weights."),rte.forEach(t),XQo=i(Aw),T(Uv.$$.fragment,Aw),Aw.forEach(t),zQo=i(dl),to=n(dl,"DIV",{class:!0});var ga=s(to);T(_y.$$.fragment,ga),QQo=i(ga),_ue=n(ga,"P",{});var t4t=s(_ue);WQo=r(t4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),t4t.forEach(t),HQo=i(ga),Oa=n(ga,"P",{});var Lw=s(Oa);UQo=r(Lw,"The model class to instantiate is selected based on the "),uue=n(Lw,"CODE",{});var a4t=s(uue);JQo=r(a4t,"model_type"),a4t.forEach(t),YQo=r(Lw,` property of the config object (either
passed as an argument or loaded from `),bue=n(Lw,"CODE",{});var n4t=s(bue);KQo=r(n4t,"pretrained_model_name_or_path"),n4t.forEach(t),ZQo=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(Lw,"CODE",{});var s4t=s(vue);eWo=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),oWo=r(Lw,":"),Lw.forEach(t),rWo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);Jv=n(ee,"LI",{});var KPe=s(Jv);Fue=n(KPe,"STRONG",{});var l4t=s(Fue);tWo=r(l4t,"albert"),l4t.forEach(t),aWo=r(KPe," \u2014 "),az=n(KPe,"A",{href:!0});var i4t=s(az);nWo=r(i4t,"AlbertForMultipleChoice"),i4t.forEach(t),sWo=r(KPe," (ALBERT model)"),KPe.forEach(t),lWo=i(ee),Yv=n(ee,"LI",{});var ZPe=s(Yv);Tue=n(ZPe,"STRONG",{});var d4t=s(Tue);iWo=r(d4t,"bert"),d4t.forEach(t),dWo=r(ZPe," \u2014 "),nz=n(ZPe,"A",{href:!0});var c4t=s(nz);cWo=r(c4t,"BertForMultipleChoice"),c4t.forEach(t),fWo=r(ZPe," (BERT model)"),ZPe.forEach(t),mWo=i(ee),Kv=n(ee,"LI",{});var eBe=s(Kv);Mue=n(eBe,"STRONG",{});var f4t=s(Mue);gWo=r(f4t,"big_bird"),f4t.forEach(t),hWo=r(eBe," \u2014 "),sz=n(eBe,"A",{href:!0});var m4t=s(sz);pWo=r(m4t,"BigBirdForMultipleChoice"),m4t.forEach(t),_Wo=r(eBe," (BigBird model)"),eBe.forEach(t),uWo=i(ee),Zv=n(ee,"LI",{});var oBe=s(Zv);Eue=n(oBe,"STRONG",{});var g4t=s(Eue);bWo=r(g4t,"camembert"),g4t.forEach(t),vWo=r(oBe," \u2014 "),lz=n(oBe,"A",{href:!0});var h4t=s(lz);FWo=r(h4t,"CamembertForMultipleChoice"),h4t.forEach(t),TWo=r(oBe," (CamemBERT model)"),oBe.forEach(t),MWo=i(ee),eF=n(ee,"LI",{});var rBe=s(eF);Cue=n(rBe,"STRONG",{});var p4t=s(Cue);EWo=r(p4t,"canine"),p4t.forEach(t),CWo=r(rBe," \u2014 "),iz=n(rBe,"A",{href:!0});var _4t=s(iz);wWo=r(_4t,"CanineForMultipleChoice"),_4t.forEach(t),AWo=r(rBe," (CANINE model)"),rBe.forEach(t),LWo=i(ee),oF=n(ee,"LI",{});var tBe=s(oF);wue=n(tBe,"STRONG",{});var u4t=s(wue);yWo=r(u4t,"convbert"),u4t.forEach(t),xWo=r(tBe," \u2014 "),dz=n(tBe,"A",{href:!0});var b4t=s(dz);$Wo=r(b4t,"ConvBertForMultipleChoice"),b4t.forEach(t),kWo=r(tBe," (ConvBERT model)"),tBe.forEach(t),SWo=i(ee),rF=n(ee,"LI",{});var aBe=s(rF);Aue=n(aBe,"STRONG",{});var v4t=s(Aue);RWo=r(v4t,"data2vec-text"),v4t.forEach(t),PWo=r(aBe," \u2014 "),cz=n(aBe,"A",{href:!0});var F4t=s(cz);BWo=r(F4t,"Data2VecTextForMultipleChoice"),F4t.forEach(t),NWo=r(aBe," (Data2VecText model)"),aBe.forEach(t),IWo=i(ee),tF=n(ee,"LI",{});var nBe=s(tF);Lue=n(nBe,"STRONG",{});var T4t=s(Lue);qWo=r(T4t,"deberta-v2"),T4t.forEach(t),jWo=r(nBe," \u2014 "),fz=n(nBe,"A",{href:!0});var M4t=s(fz);DWo=r(M4t,"DebertaV2ForMultipleChoice"),M4t.forEach(t),GWo=r(nBe," (DeBERTa-v2 model)"),nBe.forEach(t),OWo=i(ee),aF=n(ee,"LI",{});var sBe=s(aF);yue=n(sBe,"STRONG",{});var E4t=s(yue);VWo=r(E4t,"distilbert"),E4t.forEach(t),XWo=r(sBe," \u2014 "),mz=n(sBe,"A",{href:!0});var C4t=s(mz);zWo=r(C4t,"DistilBertForMultipleChoice"),C4t.forEach(t),QWo=r(sBe," (DistilBERT model)"),sBe.forEach(t),WWo=i(ee),nF=n(ee,"LI",{});var lBe=s(nF);xue=n(lBe,"STRONG",{});var w4t=s(xue);HWo=r(w4t,"electra"),w4t.forEach(t),UWo=r(lBe," \u2014 "),gz=n(lBe,"A",{href:!0});var A4t=s(gz);JWo=r(A4t,"ElectraForMultipleChoice"),A4t.forEach(t),YWo=r(lBe," (ELECTRA model)"),lBe.forEach(t),KWo=i(ee),sF=n(ee,"LI",{});var iBe=s(sF);$ue=n(iBe,"STRONG",{});var L4t=s($ue);ZWo=r(L4t,"flaubert"),L4t.forEach(t),eHo=r(iBe," \u2014 "),hz=n(iBe,"A",{href:!0});var y4t=s(hz);oHo=r(y4t,"FlaubertForMultipleChoice"),y4t.forEach(t),rHo=r(iBe," (FlauBERT model)"),iBe.forEach(t),tHo=i(ee),lF=n(ee,"LI",{});var dBe=s(lF);kue=n(dBe,"STRONG",{});var x4t=s(kue);aHo=r(x4t,"fnet"),x4t.forEach(t),nHo=r(dBe," \u2014 "),pz=n(dBe,"A",{href:!0});var $4t=s(pz);sHo=r($4t,"FNetForMultipleChoice"),$4t.forEach(t),lHo=r(dBe," (FNet model)"),dBe.forEach(t),iHo=i(ee),iF=n(ee,"LI",{});var cBe=s(iF);Sue=n(cBe,"STRONG",{});var k4t=s(Sue);dHo=r(k4t,"funnel"),k4t.forEach(t),cHo=r(cBe," \u2014 "),_z=n(cBe,"A",{href:!0});var S4t=s(_z);fHo=r(S4t,"FunnelForMultipleChoice"),S4t.forEach(t),mHo=r(cBe," (Funnel Transformer model)"),cBe.forEach(t),gHo=i(ee),dF=n(ee,"LI",{});var fBe=s(dF);Rue=n(fBe,"STRONG",{});var R4t=s(Rue);hHo=r(R4t,"ibert"),R4t.forEach(t),pHo=r(fBe," \u2014 "),uz=n(fBe,"A",{href:!0});var P4t=s(uz);_Ho=r(P4t,"IBertForMultipleChoice"),P4t.forEach(t),uHo=r(fBe," (I-BERT model)"),fBe.forEach(t),bHo=i(ee),cF=n(ee,"LI",{});var mBe=s(cF);Pue=n(mBe,"STRONG",{});var B4t=s(Pue);vHo=r(B4t,"longformer"),B4t.forEach(t),FHo=r(mBe," \u2014 "),bz=n(mBe,"A",{href:!0});var N4t=s(bz);THo=r(N4t,"LongformerForMultipleChoice"),N4t.forEach(t),MHo=r(mBe," (Longformer model)"),mBe.forEach(t),EHo=i(ee),fF=n(ee,"LI",{});var gBe=s(fF);Bue=n(gBe,"STRONG",{});var I4t=s(Bue);CHo=r(I4t,"megatron-bert"),I4t.forEach(t),wHo=r(gBe," \u2014 "),vz=n(gBe,"A",{href:!0});var q4t=s(vz);AHo=r(q4t,"MegatronBertForMultipleChoice"),q4t.forEach(t),LHo=r(gBe," (Megatron-BERT model)"),gBe.forEach(t),yHo=i(ee),mF=n(ee,"LI",{});var hBe=s(mF);Nue=n(hBe,"STRONG",{});var j4t=s(Nue);xHo=r(j4t,"mobilebert"),j4t.forEach(t),$Ho=r(hBe," \u2014 "),Fz=n(hBe,"A",{href:!0});var D4t=s(Fz);kHo=r(D4t,"MobileBertForMultipleChoice"),D4t.forEach(t),SHo=r(hBe," (MobileBERT model)"),hBe.forEach(t),RHo=i(ee),gF=n(ee,"LI",{});var pBe=s(gF);Iue=n(pBe,"STRONG",{});var G4t=s(Iue);PHo=r(G4t,"mpnet"),G4t.forEach(t),BHo=r(pBe," \u2014 "),Tz=n(pBe,"A",{href:!0});var O4t=s(Tz);NHo=r(O4t,"MPNetForMultipleChoice"),O4t.forEach(t),IHo=r(pBe," (MPNet model)"),pBe.forEach(t),qHo=i(ee),hF=n(ee,"LI",{});var _Be=s(hF);que=n(_Be,"STRONG",{});var V4t=s(que);jHo=r(V4t,"nezha"),V4t.forEach(t),DHo=r(_Be," \u2014 "),Mz=n(_Be,"A",{href:!0});var X4t=s(Mz);GHo=r(X4t,"NezhaForMultipleChoice"),X4t.forEach(t),OHo=r(_Be," (Nezha model)"),_Be.forEach(t),VHo=i(ee),pF=n(ee,"LI",{});var uBe=s(pF);jue=n(uBe,"STRONG",{});var z4t=s(jue);XHo=r(z4t,"nystromformer"),z4t.forEach(t),zHo=r(uBe," \u2014 "),Ez=n(uBe,"A",{href:!0});var Q4t=s(Ez);QHo=r(Q4t,"NystromformerForMultipleChoice"),Q4t.forEach(t),WHo=r(uBe," (Nystr\xF6mformer model)"),uBe.forEach(t),HHo=i(ee),_F=n(ee,"LI",{});var bBe=s(_F);Due=n(bBe,"STRONG",{});var W4t=s(Due);UHo=r(W4t,"qdqbert"),W4t.forEach(t),JHo=r(bBe," \u2014 "),Cz=n(bBe,"A",{href:!0});var H4t=s(Cz);YHo=r(H4t,"QDQBertForMultipleChoice"),H4t.forEach(t),KHo=r(bBe," (QDQBert model)"),bBe.forEach(t),ZHo=i(ee),uF=n(ee,"LI",{});var vBe=s(uF);Gue=n(vBe,"STRONG",{});var U4t=s(Gue);eUo=r(U4t,"rembert"),U4t.forEach(t),oUo=r(vBe," \u2014 "),wz=n(vBe,"A",{href:!0});var J4t=s(wz);rUo=r(J4t,"RemBertForMultipleChoice"),J4t.forEach(t),tUo=r(vBe," (RemBERT model)"),vBe.forEach(t),aUo=i(ee),bF=n(ee,"LI",{});var FBe=s(bF);Oue=n(FBe,"STRONG",{});var Y4t=s(Oue);nUo=r(Y4t,"roberta"),Y4t.forEach(t),sUo=r(FBe," \u2014 "),Az=n(FBe,"A",{href:!0});var K4t=s(Az);lUo=r(K4t,"RobertaForMultipleChoice"),K4t.forEach(t),iUo=r(FBe," (RoBERTa model)"),FBe.forEach(t),dUo=i(ee),vF=n(ee,"LI",{});var TBe=s(vF);Vue=n(TBe,"STRONG",{});var Z4t=s(Vue);cUo=r(Z4t,"roformer"),Z4t.forEach(t),fUo=r(TBe," \u2014 "),Lz=n(TBe,"A",{href:!0});var eEt=s(Lz);mUo=r(eEt,"RoFormerForMultipleChoice"),eEt.forEach(t),gUo=r(TBe," (RoFormer model)"),TBe.forEach(t),hUo=i(ee),FF=n(ee,"LI",{});var MBe=s(FF);Xue=n(MBe,"STRONG",{});var oEt=s(Xue);pUo=r(oEt,"squeezebert"),oEt.forEach(t),_Uo=r(MBe," \u2014 "),yz=n(MBe,"A",{href:!0});var rEt=s(yz);uUo=r(rEt,"SqueezeBertForMultipleChoice"),rEt.forEach(t),bUo=r(MBe," (SqueezeBERT model)"),MBe.forEach(t),vUo=i(ee),TF=n(ee,"LI",{});var EBe=s(TF);zue=n(EBe,"STRONG",{});var tEt=s(zue);FUo=r(tEt,"xlm"),tEt.forEach(t),TUo=r(EBe," \u2014 "),xz=n(EBe,"A",{href:!0});var aEt=s(xz);MUo=r(aEt,"XLMForMultipleChoice"),aEt.forEach(t),EUo=r(EBe," (XLM model)"),EBe.forEach(t),CUo=i(ee),MF=n(ee,"LI",{});var CBe=s(MF);Que=n(CBe,"STRONG",{});var nEt=s(Que);wUo=r(nEt,"xlm-roberta"),nEt.forEach(t),AUo=r(CBe," \u2014 "),$z=n(CBe,"A",{href:!0});var sEt=s($z);LUo=r(sEt,"XLMRobertaForMultipleChoice"),sEt.forEach(t),yUo=r(CBe," (XLM-RoBERTa model)"),CBe.forEach(t),xUo=i(ee),EF=n(ee,"LI",{});var wBe=s(EF);Wue=n(wBe,"STRONG",{});var lEt=s(Wue);$Uo=r(lEt,"xlm-roberta-xl"),lEt.forEach(t),kUo=r(wBe," \u2014 "),kz=n(wBe,"A",{href:!0});var iEt=s(kz);SUo=r(iEt,"XLMRobertaXLForMultipleChoice"),iEt.forEach(t),RUo=r(wBe," (XLM-RoBERTa-XL model)"),wBe.forEach(t),PUo=i(ee),CF=n(ee,"LI",{});var ABe=s(CF);Hue=n(ABe,"STRONG",{});var dEt=s(Hue);BUo=r(dEt,"xlnet"),dEt.forEach(t),NUo=r(ABe," \u2014 "),Sz=n(ABe,"A",{href:!0});var cEt=s(Sz);IUo=r(cEt,"XLNetForMultipleChoice"),cEt.forEach(t),qUo=r(ABe," (XLNet model)"),ABe.forEach(t),jUo=i(ee),wF=n(ee,"LI",{});var LBe=s(wF);Uue=n(LBe,"STRONG",{});var fEt=s(Uue);DUo=r(fEt,"yoso"),fEt.forEach(t),GUo=r(LBe," \u2014 "),Rz=n(LBe,"A",{href:!0});var mEt=s(Rz);OUo=r(mEt,"YosoForMultipleChoice"),mEt.forEach(t),VUo=r(LBe," (YOSO model)"),LBe.forEach(t),ee.forEach(t),XUo=i(ga),AF=n(ga,"P",{});var yBe=s(AF);zUo=r(yBe,"The model is set in evaluation mode by default using "),Jue=n(yBe,"CODE",{});var gEt=s(Jue);QUo=r(gEt,"model.eval()"),gEt.forEach(t),WUo=r(yBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=n(yBe,"CODE",{});var hEt=s(Yue);HUo=r(hEt,"model.train()"),hEt.forEach(t),yBe.forEach(t),UUo=i(ga),T(LF.$$.fragment,ga),ga.forEach(t),dl.forEach(t),UXe=i(f),dd=n(f,"H2",{class:!0});var oWe=s(dd);yF=n(oWe,"A",{id:!0,class:!0,href:!0});var pEt=s(yF);Kue=n(pEt,"SPAN",{});var _Et=s(Kue);T(uy.$$.fragment,_Et),_Et.forEach(t),pEt.forEach(t),JUo=i(oWe),Zue=n(oWe,"SPAN",{});var uEt=s(Zue);YUo=r(uEt,"AutoModelForNextSentencePrediction"),uEt.forEach(t),oWe.forEach(t),JXe=i(f),Io=n(f,"DIV",{class:!0});var cl=s(Io);T(by.$$.fragment,cl),KUo=i(cl),cd=n(cl,"P",{});var tte=s(cd);ZUo=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Pz=n(tte,"A",{href:!0});var bEt=s(Pz);eJo=r(bEt,"from_pretrained()"),bEt.forEach(t),oJo=r(tte," class method or the "),Bz=n(tte,"A",{href:!0});var vEt=s(Bz);rJo=r(vEt,"from_config()"),vEt.forEach(t),tJo=r(tte,` class
method.`),tte.forEach(t),aJo=i(cl),vy=n(cl,"P",{});var rWe=s(vy);nJo=r(rWe,"This class cannot be instantiated directly using "),e2e=n(rWe,"CODE",{});var FEt=s(e2e);sJo=r(FEt,"__init__()"),FEt.forEach(t),lJo=r(rWe," (throws an error)."),rWe.forEach(t),iJo=i(cl),pt=n(cl,"DIV",{class:!0});var yw=s(pt);T(Fy.$$.fragment,yw),dJo=i(yw),o2e=n(yw,"P",{});var TEt=s(o2e);cJo=r(TEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TEt.forEach(t),fJo=i(yw),fd=n(yw,"P",{});var ate=s(fd);mJo=r(ate,`Note:
Loading a model from its configuration file does `),r2e=n(ate,"STRONG",{});var MEt=s(r2e);gJo=r(MEt,"not"),MEt.forEach(t),hJo=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(ate,"A",{href:!0});var EEt=s(Nz);pJo=r(EEt,"from_pretrained()"),EEt.forEach(t),_Jo=r(ate," to load the model weights."),ate.forEach(t),uJo=i(yw),T(xF.$$.fragment,yw),yw.forEach(t),bJo=i(cl),ao=n(cl,"DIV",{class:!0});var ha=s(ao);T(Ty.$$.fragment,ha),vJo=i(ha),t2e=n(ha,"P",{});var CEt=s(t2e);FJo=r(CEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CEt.forEach(t),TJo=i(ha),Va=n(ha,"P",{});var xw=s(Va);MJo=r(xw,"The model class to instantiate is selected based on the "),a2e=n(xw,"CODE",{});var wEt=s(a2e);EJo=r(wEt,"model_type"),wEt.forEach(t),CJo=r(xw,` property of the config object (either
passed as an argument or loaded from `),n2e=n(xw,"CODE",{});var AEt=s(n2e);wJo=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),AJo=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(xw,"CODE",{});var LEt=s(s2e);LJo=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),yJo=r(xw,":"),xw.forEach(t),xJo=i(ha),qo=n(ha,"UL",{});var pa=s(qo);$F=n(pa,"LI",{});var xBe=s($F);l2e=n(xBe,"STRONG",{});var yEt=s(l2e);$Jo=r(yEt,"bert"),yEt.forEach(t),kJo=r(xBe," \u2014 "),Iz=n(xBe,"A",{href:!0});var xEt=s(Iz);SJo=r(xEt,"BertForNextSentencePrediction"),xEt.forEach(t),RJo=r(xBe," (BERT model)"),xBe.forEach(t),PJo=i(pa),kF=n(pa,"LI",{});var $Be=s(kF);i2e=n($Be,"STRONG",{});var $Et=s(i2e);BJo=r($Et,"fnet"),$Et.forEach(t),NJo=r($Be," \u2014 "),qz=n($Be,"A",{href:!0});var kEt=s(qz);IJo=r(kEt,"FNetForNextSentencePrediction"),kEt.forEach(t),qJo=r($Be," (FNet model)"),$Be.forEach(t),jJo=i(pa),SF=n(pa,"LI",{});var kBe=s(SF);d2e=n(kBe,"STRONG",{});var SEt=s(d2e);DJo=r(SEt,"megatron-bert"),SEt.forEach(t),GJo=r(kBe," \u2014 "),jz=n(kBe,"A",{href:!0});var REt=s(jz);OJo=r(REt,"MegatronBertForNextSentencePrediction"),REt.forEach(t),VJo=r(kBe," (Megatron-BERT model)"),kBe.forEach(t),XJo=i(pa),RF=n(pa,"LI",{});var SBe=s(RF);c2e=n(SBe,"STRONG",{});var PEt=s(c2e);zJo=r(PEt,"mobilebert"),PEt.forEach(t),QJo=r(SBe," \u2014 "),Dz=n(SBe,"A",{href:!0});var BEt=s(Dz);WJo=r(BEt,"MobileBertForNextSentencePrediction"),BEt.forEach(t),HJo=r(SBe," (MobileBERT model)"),SBe.forEach(t),UJo=i(pa),PF=n(pa,"LI",{});var RBe=s(PF);f2e=n(RBe,"STRONG",{});var NEt=s(f2e);JJo=r(NEt,"nezha"),NEt.forEach(t),YJo=r(RBe," \u2014 "),Gz=n(RBe,"A",{href:!0});var IEt=s(Gz);KJo=r(IEt,"NezhaForNextSentencePrediction"),IEt.forEach(t),ZJo=r(RBe," (Nezha model)"),RBe.forEach(t),eYo=i(pa),BF=n(pa,"LI",{});var PBe=s(BF);m2e=n(PBe,"STRONG",{});var qEt=s(m2e);oYo=r(qEt,"qdqbert"),qEt.forEach(t),rYo=r(PBe," \u2014 "),Oz=n(PBe,"A",{href:!0});var jEt=s(Oz);tYo=r(jEt,"QDQBertForNextSentencePrediction"),jEt.forEach(t),aYo=r(PBe," (QDQBert model)"),PBe.forEach(t),pa.forEach(t),nYo=i(ha),NF=n(ha,"P",{});var BBe=s(NF);sYo=r(BBe,"The model is set in evaluation mode by default using "),g2e=n(BBe,"CODE",{});var DEt=s(g2e);lYo=r(DEt,"model.eval()"),DEt.forEach(t),iYo=r(BBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h2e=n(BBe,"CODE",{});var GEt=s(h2e);dYo=r(GEt,"model.train()"),GEt.forEach(t),BBe.forEach(t),cYo=i(ha),T(IF.$$.fragment,ha),ha.forEach(t),cl.forEach(t),YXe=i(f),md=n(f,"H2",{class:!0});var tWe=s(md);qF=n(tWe,"A",{id:!0,class:!0,href:!0});var OEt=s(qF);p2e=n(OEt,"SPAN",{});var VEt=s(p2e);T(My.$$.fragment,VEt),VEt.forEach(t),OEt.forEach(t),fYo=i(tWe),_2e=n(tWe,"SPAN",{});var XEt=s(_2e);mYo=r(XEt,"AutoModelForTokenClassification"),XEt.forEach(t),tWe.forEach(t),KXe=i(f),jo=n(f,"DIV",{class:!0});var fl=s(jo);T(Ey.$$.fragment,fl),gYo=i(fl),gd=n(fl,"P",{});var nte=s(gd);hYo=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Vz=n(nte,"A",{href:!0});var zEt=s(Vz);pYo=r(zEt,"from_pretrained()"),zEt.forEach(t),_Yo=r(nte," class method or the "),Xz=n(nte,"A",{href:!0});var QEt=s(Xz);uYo=r(QEt,"from_config()"),QEt.forEach(t),bYo=r(nte,` class
method.`),nte.forEach(t),vYo=i(fl),Cy=n(fl,"P",{});var aWe=s(Cy);FYo=r(aWe,"This class cannot be instantiated directly using "),u2e=n(aWe,"CODE",{});var WEt=s(u2e);TYo=r(WEt,"__init__()"),WEt.forEach(t),MYo=r(aWe," (throws an error)."),aWe.forEach(t),EYo=i(fl),_t=n(fl,"DIV",{class:!0});var $w=s(_t);T(wy.$$.fragment,$w),CYo=i($w),b2e=n($w,"P",{});var HEt=s(b2e);wYo=r(HEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),HEt.forEach(t),AYo=i($w),hd=n($w,"P",{});var ste=s(hd);LYo=r(ste,`Note:
Loading a model from its configuration file does `),v2e=n(ste,"STRONG",{});var UEt=s(v2e);yYo=r(UEt,"not"),UEt.forEach(t),xYo=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(ste,"A",{href:!0});var JEt=s(zz);$Yo=r(JEt,"from_pretrained()"),JEt.forEach(t),kYo=r(ste," to load the model weights."),ste.forEach(t),SYo=i($w),T(jF.$$.fragment,$w),$w.forEach(t),RYo=i(fl),no=n(fl,"DIV",{class:!0});var _a=s(no);T(Ay.$$.fragment,_a),PYo=i(_a),F2e=n(_a,"P",{});var YEt=s(F2e);BYo=r(YEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YEt.forEach(t),NYo=i(_a),Xa=n(_a,"P",{});var kw=s(Xa);IYo=r(kw,"The model class to instantiate is selected based on the "),T2e=n(kw,"CODE",{});var KEt=s(T2e);qYo=r(KEt,"model_type"),KEt.forEach(t),jYo=r(kw,` property of the config object (either
passed as an argument or loaded from `),M2e=n(kw,"CODE",{});var ZEt=s(M2e);DYo=r(ZEt,"pretrained_model_name_or_path"),ZEt.forEach(t),GYo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=n(kw,"CODE",{});var eCt=s(E2e);OYo=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),VYo=r(kw,":"),kw.forEach(t),XYo=i(_a),U=n(_a,"UL",{});var J=s(U);DF=n(J,"LI",{});var NBe=s(DF);C2e=n(NBe,"STRONG",{});var oCt=s(C2e);zYo=r(oCt,"albert"),oCt.forEach(t),QYo=r(NBe," \u2014 "),Qz=n(NBe,"A",{href:!0});var rCt=s(Qz);WYo=r(rCt,"AlbertForTokenClassification"),rCt.forEach(t),HYo=r(NBe," (ALBERT model)"),NBe.forEach(t),UYo=i(J),GF=n(J,"LI",{});var IBe=s(GF);w2e=n(IBe,"STRONG",{});var tCt=s(w2e);JYo=r(tCt,"bert"),tCt.forEach(t),YYo=r(IBe," \u2014 "),Wz=n(IBe,"A",{href:!0});var aCt=s(Wz);KYo=r(aCt,"BertForTokenClassification"),aCt.forEach(t),ZYo=r(IBe," (BERT model)"),IBe.forEach(t),eKo=i(J),OF=n(J,"LI",{});var qBe=s(OF);A2e=n(qBe,"STRONG",{});var nCt=s(A2e);oKo=r(nCt,"big_bird"),nCt.forEach(t),rKo=r(qBe," \u2014 "),Hz=n(qBe,"A",{href:!0});var sCt=s(Hz);tKo=r(sCt,"BigBirdForTokenClassification"),sCt.forEach(t),aKo=r(qBe," (BigBird model)"),qBe.forEach(t),nKo=i(J),VF=n(J,"LI",{});var jBe=s(VF);L2e=n(jBe,"STRONG",{});var lCt=s(L2e);sKo=r(lCt,"bloom"),lCt.forEach(t),lKo=r(jBe," \u2014 "),Uz=n(jBe,"A",{href:!0});var iCt=s(Uz);iKo=r(iCt,"BloomForTokenClassification"),iCt.forEach(t),dKo=r(jBe," (BLOOM model)"),jBe.forEach(t),cKo=i(J),XF=n(J,"LI",{});var DBe=s(XF);y2e=n(DBe,"STRONG",{});var dCt=s(y2e);fKo=r(dCt,"camembert"),dCt.forEach(t),mKo=r(DBe," \u2014 "),Jz=n(DBe,"A",{href:!0});var cCt=s(Jz);gKo=r(cCt,"CamembertForTokenClassification"),cCt.forEach(t),hKo=r(DBe," (CamemBERT model)"),DBe.forEach(t),pKo=i(J),zF=n(J,"LI",{});var GBe=s(zF);x2e=n(GBe,"STRONG",{});var fCt=s(x2e);_Ko=r(fCt,"canine"),fCt.forEach(t),uKo=r(GBe," \u2014 "),Yz=n(GBe,"A",{href:!0});var mCt=s(Yz);bKo=r(mCt,"CanineForTokenClassification"),mCt.forEach(t),vKo=r(GBe," (CANINE model)"),GBe.forEach(t),FKo=i(J),QF=n(J,"LI",{});var OBe=s(QF);$2e=n(OBe,"STRONG",{});var gCt=s($2e);TKo=r(gCt,"convbert"),gCt.forEach(t),MKo=r(OBe," \u2014 "),Kz=n(OBe,"A",{href:!0});var hCt=s(Kz);EKo=r(hCt,"ConvBertForTokenClassification"),hCt.forEach(t),CKo=r(OBe," (ConvBERT model)"),OBe.forEach(t),wKo=i(J),WF=n(J,"LI",{});var VBe=s(WF);k2e=n(VBe,"STRONG",{});var pCt=s(k2e);AKo=r(pCt,"data2vec-text"),pCt.forEach(t),LKo=r(VBe," \u2014 "),Zz=n(VBe,"A",{href:!0});var _Ct=s(Zz);yKo=r(_Ct,"Data2VecTextForTokenClassification"),_Ct.forEach(t),xKo=r(VBe," (Data2VecText model)"),VBe.forEach(t),$Ko=i(J),HF=n(J,"LI",{});var XBe=s(HF);S2e=n(XBe,"STRONG",{});var uCt=s(S2e);kKo=r(uCt,"deberta"),uCt.forEach(t),SKo=r(XBe," \u2014 "),eQ=n(XBe,"A",{href:!0});var bCt=s(eQ);RKo=r(bCt,"DebertaForTokenClassification"),bCt.forEach(t),PKo=r(XBe," (DeBERTa model)"),XBe.forEach(t),BKo=i(J),UF=n(J,"LI",{});var zBe=s(UF);R2e=n(zBe,"STRONG",{});var vCt=s(R2e);NKo=r(vCt,"deberta-v2"),vCt.forEach(t),IKo=r(zBe," \u2014 "),oQ=n(zBe,"A",{href:!0});var FCt=s(oQ);qKo=r(FCt,"DebertaV2ForTokenClassification"),FCt.forEach(t),jKo=r(zBe," (DeBERTa-v2 model)"),zBe.forEach(t),DKo=i(J),JF=n(J,"LI",{});var QBe=s(JF);P2e=n(QBe,"STRONG",{});var TCt=s(P2e);GKo=r(TCt,"distilbert"),TCt.forEach(t),OKo=r(QBe," \u2014 "),rQ=n(QBe,"A",{href:!0});var MCt=s(rQ);VKo=r(MCt,"DistilBertForTokenClassification"),MCt.forEach(t),XKo=r(QBe," (DistilBERT model)"),QBe.forEach(t),zKo=i(J),YF=n(J,"LI",{});var WBe=s(YF);B2e=n(WBe,"STRONG",{});var ECt=s(B2e);QKo=r(ECt,"electra"),ECt.forEach(t),WKo=r(WBe," \u2014 "),tQ=n(WBe,"A",{href:!0});var CCt=s(tQ);HKo=r(CCt,"ElectraForTokenClassification"),CCt.forEach(t),UKo=r(WBe," (ELECTRA model)"),WBe.forEach(t),JKo=i(J),KF=n(J,"LI",{});var HBe=s(KF);N2e=n(HBe,"STRONG",{});var wCt=s(N2e);YKo=r(wCt,"flaubert"),wCt.forEach(t),KKo=r(HBe," \u2014 "),aQ=n(HBe,"A",{href:!0});var ACt=s(aQ);ZKo=r(ACt,"FlaubertForTokenClassification"),ACt.forEach(t),eZo=r(HBe," (FlauBERT model)"),HBe.forEach(t),oZo=i(J),ZF=n(J,"LI",{});var UBe=s(ZF);I2e=n(UBe,"STRONG",{});var LCt=s(I2e);rZo=r(LCt,"fnet"),LCt.forEach(t),tZo=r(UBe," \u2014 "),nQ=n(UBe,"A",{href:!0});var yCt=s(nQ);aZo=r(yCt,"FNetForTokenClassification"),yCt.forEach(t),nZo=r(UBe," (FNet model)"),UBe.forEach(t),sZo=i(J),e6=n(J,"LI",{});var JBe=s(e6);q2e=n(JBe,"STRONG",{});var xCt=s(q2e);lZo=r(xCt,"funnel"),xCt.forEach(t),iZo=r(JBe," \u2014 "),sQ=n(JBe,"A",{href:!0});var $Ct=s(sQ);dZo=r($Ct,"FunnelForTokenClassification"),$Ct.forEach(t),cZo=r(JBe," (Funnel Transformer model)"),JBe.forEach(t),fZo=i(J),o6=n(J,"LI",{});var YBe=s(o6);j2e=n(YBe,"STRONG",{});var kCt=s(j2e);mZo=r(kCt,"gpt2"),kCt.forEach(t),gZo=r(YBe," \u2014 "),lQ=n(YBe,"A",{href:!0});var SCt=s(lQ);hZo=r(SCt,"GPT2ForTokenClassification"),SCt.forEach(t),pZo=r(YBe," (OpenAI GPT-2 model)"),YBe.forEach(t),_Zo=i(J),r6=n(J,"LI",{});var KBe=s(r6);D2e=n(KBe,"STRONG",{});var RCt=s(D2e);uZo=r(RCt,"ibert"),RCt.forEach(t),bZo=r(KBe," \u2014 "),iQ=n(KBe,"A",{href:!0});var PCt=s(iQ);vZo=r(PCt,"IBertForTokenClassification"),PCt.forEach(t),FZo=r(KBe," (I-BERT model)"),KBe.forEach(t),TZo=i(J),t6=n(J,"LI",{});var ZBe=s(t6);G2e=n(ZBe,"STRONG",{});var BCt=s(G2e);MZo=r(BCt,"layoutlm"),BCt.forEach(t),EZo=r(ZBe," \u2014 "),dQ=n(ZBe,"A",{href:!0});var NCt=s(dQ);CZo=r(NCt,"LayoutLMForTokenClassification"),NCt.forEach(t),wZo=r(ZBe," (LayoutLM model)"),ZBe.forEach(t),AZo=i(J),a6=n(J,"LI",{});var eNe=s(a6);O2e=n(eNe,"STRONG",{});var ICt=s(O2e);LZo=r(ICt,"layoutlmv2"),ICt.forEach(t),yZo=r(eNe," \u2014 "),cQ=n(eNe,"A",{href:!0});var qCt=s(cQ);xZo=r(qCt,"LayoutLMv2ForTokenClassification"),qCt.forEach(t),$Zo=r(eNe," (LayoutLMv2 model)"),eNe.forEach(t),kZo=i(J),n6=n(J,"LI",{});var oNe=s(n6);V2e=n(oNe,"STRONG",{});var jCt=s(V2e);SZo=r(jCt,"layoutlmv3"),jCt.forEach(t),RZo=r(oNe," \u2014 "),fQ=n(oNe,"A",{href:!0});var DCt=s(fQ);PZo=r(DCt,"LayoutLMv3ForTokenClassification"),DCt.forEach(t),BZo=r(oNe," (LayoutLMv3 model)"),oNe.forEach(t),NZo=i(J),s6=n(J,"LI",{});var rNe=s(s6);X2e=n(rNe,"STRONG",{});var GCt=s(X2e);IZo=r(GCt,"longformer"),GCt.forEach(t),qZo=r(rNe," \u2014 "),mQ=n(rNe,"A",{href:!0});var OCt=s(mQ);jZo=r(OCt,"LongformerForTokenClassification"),OCt.forEach(t),DZo=r(rNe," (Longformer model)"),rNe.forEach(t),GZo=i(J),l6=n(J,"LI",{});var tNe=s(l6);z2e=n(tNe,"STRONG",{});var VCt=s(z2e);OZo=r(VCt,"megatron-bert"),VCt.forEach(t),VZo=r(tNe," \u2014 "),gQ=n(tNe,"A",{href:!0});var XCt=s(gQ);XZo=r(XCt,"MegatronBertForTokenClassification"),XCt.forEach(t),zZo=r(tNe," (Megatron-BERT model)"),tNe.forEach(t),QZo=i(J),i6=n(J,"LI",{});var aNe=s(i6);Q2e=n(aNe,"STRONG",{});var zCt=s(Q2e);WZo=r(zCt,"mobilebert"),zCt.forEach(t),HZo=r(aNe," \u2014 "),hQ=n(aNe,"A",{href:!0});var QCt=s(hQ);UZo=r(QCt,"MobileBertForTokenClassification"),QCt.forEach(t),JZo=r(aNe," (MobileBERT model)"),aNe.forEach(t),YZo=i(J),d6=n(J,"LI",{});var nNe=s(d6);W2e=n(nNe,"STRONG",{});var WCt=s(W2e);KZo=r(WCt,"mpnet"),WCt.forEach(t),ZZo=r(nNe," \u2014 "),pQ=n(nNe,"A",{href:!0});var HCt=s(pQ);eer=r(HCt,"MPNetForTokenClassification"),HCt.forEach(t),oer=r(nNe," (MPNet model)"),nNe.forEach(t),rer=i(J),c6=n(J,"LI",{});var sNe=s(c6);H2e=n(sNe,"STRONG",{});var UCt=s(H2e);ter=r(UCt,"nezha"),UCt.forEach(t),aer=r(sNe," \u2014 "),_Q=n(sNe,"A",{href:!0});var JCt=s(_Q);ner=r(JCt,"NezhaForTokenClassification"),JCt.forEach(t),ser=r(sNe," (Nezha model)"),sNe.forEach(t),ler=i(J),f6=n(J,"LI",{});var lNe=s(f6);U2e=n(lNe,"STRONG",{});var YCt=s(U2e);ier=r(YCt,"nystromformer"),YCt.forEach(t),der=r(lNe," \u2014 "),uQ=n(lNe,"A",{href:!0});var KCt=s(uQ);cer=r(KCt,"NystromformerForTokenClassification"),KCt.forEach(t),fer=r(lNe," (Nystr\xF6mformer model)"),lNe.forEach(t),mer=i(J),m6=n(J,"LI",{});var iNe=s(m6);J2e=n(iNe,"STRONG",{});var ZCt=s(J2e);ger=r(ZCt,"qdqbert"),ZCt.forEach(t),her=r(iNe," \u2014 "),bQ=n(iNe,"A",{href:!0});var e5t=s(bQ);per=r(e5t,"QDQBertForTokenClassification"),e5t.forEach(t),_er=r(iNe," (QDQBert model)"),iNe.forEach(t),uer=i(J),g6=n(J,"LI",{});var dNe=s(g6);Y2e=n(dNe,"STRONG",{});var o5t=s(Y2e);ber=r(o5t,"rembert"),o5t.forEach(t),ver=r(dNe," \u2014 "),vQ=n(dNe,"A",{href:!0});var r5t=s(vQ);Fer=r(r5t,"RemBertForTokenClassification"),r5t.forEach(t),Ter=r(dNe," (RemBERT model)"),dNe.forEach(t),Mer=i(J),h6=n(J,"LI",{});var cNe=s(h6);K2e=n(cNe,"STRONG",{});var t5t=s(K2e);Eer=r(t5t,"roberta"),t5t.forEach(t),Cer=r(cNe," \u2014 "),FQ=n(cNe,"A",{href:!0});var a5t=s(FQ);wer=r(a5t,"RobertaForTokenClassification"),a5t.forEach(t),Aer=r(cNe," (RoBERTa model)"),cNe.forEach(t),Ler=i(J),p6=n(J,"LI",{});var fNe=s(p6);Z2e=n(fNe,"STRONG",{});var n5t=s(Z2e);yer=r(n5t,"roformer"),n5t.forEach(t),xer=r(fNe," \u2014 "),TQ=n(fNe,"A",{href:!0});var s5t=s(TQ);$er=r(s5t,"RoFormerForTokenClassification"),s5t.forEach(t),ker=r(fNe," (RoFormer model)"),fNe.forEach(t),Ser=i(J),_6=n(J,"LI",{});var mNe=s(_6);e1e=n(mNe,"STRONG",{});var l5t=s(e1e);Rer=r(l5t,"squeezebert"),l5t.forEach(t),Per=r(mNe," \u2014 "),MQ=n(mNe,"A",{href:!0});var i5t=s(MQ);Ber=r(i5t,"SqueezeBertForTokenClassification"),i5t.forEach(t),Ner=r(mNe," (SqueezeBERT model)"),mNe.forEach(t),Ier=i(J),u6=n(J,"LI",{});var gNe=s(u6);o1e=n(gNe,"STRONG",{});var d5t=s(o1e);qer=r(d5t,"xlm"),d5t.forEach(t),jer=r(gNe," \u2014 "),EQ=n(gNe,"A",{href:!0});var c5t=s(EQ);Der=r(c5t,"XLMForTokenClassification"),c5t.forEach(t),Ger=r(gNe," (XLM model)"),gNe.forEach(t),Oer=i(J),b6=n(J,"LI",{});var hNe=s(b6);r1e=n(hNe,"STRONG",{});var f5t=s(r1e);Ver=r(f5t,"xlm-roberta"),f5t.forEach(t),Xer=r(hNe," \u2014 "),CQ=n(hNe,"A",{href:!0});var m5t=s(CQ);zer=r(m5t,"XLMRobertaForTokenClassification"),m5t.forEach(t),Qer=r(hNe," (XLM-RoBERTa model)"),hNe.forEach(t),Wer=i(J),v6=n(J,"LI",{});var pNe=s(v6);t1e=n(pNe,"STRONG",{});var g5t=s(t1e);Her=r(g5t,"xlm-roberta-xl"),g5t.forEach(t),Uer=r(pNe," \u2014 "),wQ=n(pNe,"A",{href:!0});var h5t=s(wQ);Jer=r(h5t,"XLMRobertaXLForTokenClassification"),h5t.forEach(t),Yer=r(pNe," (XLM-RoBERTa-XL model)"),pNe.forEach(t),Ker=i(J),F6=n(J,"LI",{});var _Ne=s(F6);a1e=n(_Ne,"STRONG",{});var p5t=s(a1e);Zer=r(p5t,"xlnet"),p5t.forEach(t),eor=r(_Ne," \u2014 "),AQ=n(_Ne,"A",{href:!0});var _5t=s(AQ);oor=r(_5t,"XLNetForTokenClassification"),_5t.forEach(t),ror=r(_Ne," (XLNet model)"),_Ne.forEach(t),tor=i(J),T6=n(J,"LI",{});var uNe=s(T6);n1e=n(uNe,"STRONG",{});var u5t=s(n1e);aor=r(u5t,"yoso"),u5t.forEach(t),nor=r(uNe," \u2014 "),LQ=n(uNe,"A",{href:!0});var b5t=s(LQ);sor=r(b5t,"YosoForTokenClassification"),b5t.forEach(t),lor=r(uNe," (YOSO model)"),uNe.forEach(t),J.forEach(t),ior=i(_a),M6=n(_a,"P",{});var bNe=s(M6);dor=r(bNe,"The model is set in evaluation mode by default using "),s1e=n(bNe,"CODE",{});var v5t=s(s1e);cor=r(v5t,"model.eval()"),v5t.forEach(t),mor=r(bNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l1e=n(bNe,"CODE",{});var F5t=s(l1e);gor=r(F5t,"model.train()"),F5t.forEach(t),bNe.forEach(t),hor=i(_a),T(E6.$$.fragment,_a),_a.forEach(t),fl.forEach(t),ZXe=i(f),pd=n(f,"H2",{class:!0});var nWe=s(pd);C6=n(nWe,"A",{id:!0,class:!0,href:!0});var T5t=s(C6);i1e=n(T5t,"SPAN",{});var M5t=s(i1e);T(Ly.$$.fragment,M5t),M5t.forEach(t),T5t.forEach(t),por=i(nWe),d1e=n(nWe,"SPAN",{});var E5t=s(d1e);_or=r(E5t,"AutoModelForQuestionAnswering"),E5t.forEach(t),nWe.forEach(t),eze=i(f),Do=n(f,"DIV",{class:!0});var ml=s(Do);T(yy.$$.fragment,ml),uor=i(ml),_d=n(ml,"P",{});var lte=s(_d);bor=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yQ=n(lte,"A",{href:!0});var C5t=s(yQ);vor=r(C5t,"from_pretrained()"),C5t.forEach(t),For=r(lte," class method or the "),xQ=n(lte,"A",{href:!0});var w5t=s(xQ);Tor=r(w5t,"from_config()"),w5t.forEach(t),Mor=r(lte,` class
method.`),lte.forEach(t),Eor=i(ml),xy=n(ml,"P",{});var sWe=s(xy);Cor=r(sWe,"This class cannot be instantiated directly using "),c1e=n(sWe,"CODE",{});var A5t=s(c1e);wor=r(A5t,"__init__()"),A5t.forEach(t),Aor=r(sWe," (throws an error)."),sWe.forEach(t),Lor=i(ml),ut=n(ml,"DIV",{class:!0});var Sw=s(ut);T($y.$$.fragment,Sw),yor=i(Sw),f1e=n(Sw,"P",{});var L5t=s(f1e);xor=r(L5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),L5t.forEach(t),$or=i(Sw),ud=n(Sw,"P",{});var ite=s(ud);kor=r(ite,`Note:
Loading a model from its configuration file does `),m1e=n(ite,"STRONG",{});var y5t=s(m1e);Sor=r(y5t,"not"),y5t.forEach(t),Ror=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(ite,"A",{href:!0});var x5t=s($Q);Por=r(x5t,"from_pretrained()"),x5t.forEach(t),Bor=r(ite," to load the model weights."),ite.forEach(t),Nor=i(Sw),T(w6.$$.fragment,Sw),Sw.forEach(t),Ior=i(ml),so=n(ml,"DIV",{class:!0});var ua=s(so);T(ky.$$.fragment,ua),qor=i(ua),g1e=n(ua,"P",{});var $5t=s(g1e);jor=r($5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$5t.forEach(t),Dor=i(ua),za=n(ua,"P",{});var Rw=s(za);Gor=r(Rw,"The model class to instantiate is selected based on the "),h1e=n(Rw,"CODE",{});var k5t=s(h1e);Oor=r(k5t,"model_type"),k5t.forEach(t),Vor=r(Rw,` property of the config object (either
passed as an argument or loaded from `),p1e=n(Rw,"CODE",{});var S5t=s(p1e);Xor=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),zor=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(Rw,"CODE",{});var R5t=s(_1e);Qor=r(R5t,"pretrained_model_name_or_path"),R5t.forEach(t),Wor=r(Rw,":"),Rw.forEach(t),Hor=i(ua),V=n(ua,"UL",{});var X=s(V);A6=n(X,"LI",{});var vNe=s(A6);u1e=n(vNe,"STRONG",{});var P5t=s(u1e);Uor=r(P5t,"albert"),P5t.forEach(t),Jor=r(vNe," \u2014 "),kQ=n(vNe,"A",{href:!0});var B5t=s(kQ);Yor=r(B5t,"AlbertForQuestionAnswering"),B5t.forEach(t),Kor=r(vNe," (ALBERT model)"),vNe.forEach(t),Zor=i(X),L6=n(X,"LI",{});var FNe=s(L6);b1e=n(FNe,"STRONG",{});var N5t=s(b1e);err=r(N5t,"bart"),N5t.forEach(t),orr=r(FNe," \u2014 "),SQ=n(FNe,"A",{href:!0});var I5t=s(SQ);rrr=r(I5t,"BartForQuestionAnswering"),I5t.forEach(t),trr=r(FNe," (BART model)"),FNe.forEach(t),arr=i(X),y6=n(X,"LI",{});var TNe=s(y6);v1e=n(TNe,"STRONG",{});var q5t=s(v1e);nrr=r(q5t,"bert"),q5t.forEach(t),srr=r(TNe," \u2014 "),RQ=n(TNe,"A",{href:!0});var j5t=s(RQ);lrr=r(j5t,"BertForQuestionAnswering"),j5t.forEach(t),irr=r(TNe," (BERT model)"),TNe.forEach(t),drr=i(X),x6=n(X,"LI",{});var MNe=s(x6);F1e=n(MNe,"STRONG",{});var D5t=s(F1e);crr=r(D5t,"big_bird"),D5t.forEach(t),frr=r(MNe," \u2014 "),PQ=n(MNe,"A",{href:!0});var G5t=s(PQ);mrr=r(G5t,"BigBirdForQuestionAnswering"),G5t.forEach(t),grr=r(MNe," (BigBird model)"),MNe.forEach(t),hrr=i(X),$6=n(X,"LI",{});var ENe=s($6);T1e=n(ENe,"STRONG",{});var O5t=s(T1e);prr=r(O5t,"bigbird_pegasus"),O5t.forEach(t),_rr=r(ENe," \u2014 "),BQ=n(ENe,"A",{href:!0});var V5t=s(BQ);urr=r(V5t,"BigBirdPegasusForQuestionAnswering"),V5t.forEach(t),brr=r(ENe," (BigBird-Pegasus model)"),ENe.forEach(t),vrr=i(X),k6=n(X,"LI",{});var CNe=s(k6);M1e=n(CNe,"STRONG",{});var X5t=s(M1e);Frr=r(X5t,"camembert"),X5t.forEach(t),Trr=r(CNe," \u2014 "),NQ=n(CNe,"A",{href:!0});var z5t=s(NQ);Mrr=r(z5t,"CamembertForQuestionAnswering"),z5t.forEach(t),Err=r(CNe," (CamemBERT model)"),CNe.forEach(t),Crr=i(X),S6=n(X,"LI",{});var wNe=s(S6);E1e=n(wNe,"STRONG",{});var Q5t=s(E1e);wrr=r(Q5t,"canine"),Q5t.forEach(t),Arr=r(wNe," \u2014 "),IQ=n(wNe,"A",{href:!0});var W5t=s(IQ);Lrr=r(W5t,"CanineForQuestionAnswering"),W5t.forEach(t),yrr=r(wNe," (CANINE model)"),wNe.forEach(t),xrr=i(X),R6=n(X,"LI",{});var ANe=s(R6);C1e=n(ANe,"STRONG",{});var H5t=s(C1e);$rr=r(H5t,"convbert"),H5t.forEach(t),krr=r(ANe," \u2014 "),qQ=n(ANe,"A",{href:!0});var U5t=s(qQ);Srr=r(U5t,"ConvBertForQuestionAnswering"),U5t.forEach(t),Rrr=r(ANe," (ConvBERT model)"),ANe.forEach(t),Prr=i(X),P6=n(X,"LI",{});var LNe=s(P6);w1e=n(LNe,"STRONG",{});var J5t=s(w1e);Brr=r(J5t,"data2vec-text"),J5t.forEach(t),Nrr=r(LNe," \u2014 "),jQ=n(LNe,"A",{href:!0});var Y5t=s(jQ);Irr=r(Y5t,"Data2VecTextForQuestionAnswering"),Y5t.forEach(t),qrr=r(LNe," (Data2VecText model)"),LNe.forEach(t),jrr=i(X),B6=n(X,"LI",{});var yNe=s(B6);A1e=n(yNe,"STRONG",{});var K5t=s(A1e);Drr=r(K5t,"deberta"),K5t.forEach(t),Grr=r(yNe," \u2014 "),DQ=n(yNe,"A",{href:!0});var Z5t=s(DQ);Orr=r(Z5t,"DebertaForQuestionAnswering"),Z5t.forEach(t),Vrr=r(yNe," (DeBERTa model)"),yNe.forEach(t),Xrr=i(X),N6=n(X,"LI",{});var xNe=s(N6);L1e=n(xNe,"STRONG",{});var e3t=s(L1e);zrr=r(e3t,"deberta-v2"),e3t.forEach(t),Qrr=r(xNe," \u2014 "),GQ=n(xNe,"A",{href:!0});var o3t=s(GQ);Wrr=r(o3t,"DebertaV2ForQuestionAnswering"),o3t.forEach(t),Hrr=r(xNe," (DeBERTa-v2 model)"),xNe.forEach(t),Urr=i(X),I6=n(X,"LI",{});var $Ne=s(I6);y1e=n($Ne,"STRONG",{});var r3t=s(y1e);Jrr=r(r3t,"distilbert"),r3t.forEach(t),Yrr=r($Ne," \u2014 "),OQ=n($Ne,"A",{href:!0});var t3t=s(OQ);Krr=r(t3t,"DistilBertForQuestionAnswering"),t3t.forEach(t),Zrr=r($Ne," (DistilBERT model)"),$Ne.forEach(t),etr=i(X),q6=n(X,"LI",{});var kNe=s(q6);x1e=n(kNe,"STRONG",{});var a3t=s(x1e);otr=r(a3t,"electra"),a3t.forEach(t),rtr=r(kNe," \u2014 "),VQ=n(kNe,"A",{href:!0});var n3t=s(VQ);ttr=r(n3t,"ElectraForQuestionAnswering"),n3t.forEach(t),atr=r(kNe," (ELECTRA model)"),kNe.forEach(t),ntr=i(X),j6=n(X,"LI",{});var SNe=s(j6);$1e=n(SNe,"STRONG",{});var s3t=s($1e);str=r(s3t,"flaubert"),s3t.forEach(t),ltr=r(SNe," \u2014 "),XQ=n(SNe,"A",{href:!0});var l3t=s(XQ);itr=r(l3t,"FlaubertForQuestionAnsweringSimple"),l3t.forEach(t),dtr=r(SNe," (FlauBERT model)"),SNe.forEach(t),ctr=i(X),D6=n(X,"LI",{});var RNe=s(D6);k1e=n(RNe,"STRONG",{});var i3t=s(k1e);ftr=r(i3t,"fnet"),i3t.forEach(t),mtr=r(RNe," \u2014 "),zQ=n(RNe,"A",{href:!0});var d3t=s(zQ);gtr=r(d3t,"FNetForQuestionAnswering"),d3t.forEach(t),htr=r(RNe," (FNet model)"),RNe.forEach(t),ptr=i(X),G6=n(X,"LI",{});var PNe=s(G6);S1e=n(PNe,"STRONG",{});var c3t=s(S1e);_tr=r(c3t,"funnel"),c3t.forEach(t),utr=r(PNe," \u2014 "),QQ=n(PNe,"A",{href:!0});var f3t=s(QQ);btr=r(f3t,"FunnelForQuestionAnswering"),f3t.forEach(t),vtr=r(PNe," (Funnel Transformer model)"),PNe.forEach(t),Ftr=i(X),O6=n(X,"LI",{});var BNe=s(O6);R1e=n(BNe,"STRONG",{});var m3t=s(R1e);Ttr=r(m3t,"gptj"),m3t.forEach(t),Mtr=r(BNe," \u2014 "),WQ=n(BNe,"A",{href:!0});var g3t=s(WQ);Etr=r(g3t,"GPTJForQuestionAnswering"),g3t.forEach(t),Ctr=r(BNe," (GPT-J model)"),BNe.forEach(t),wtr=i(X),V6=n(X,"LI",{});var NNe=s(V6);P1e=n(NNe,"STRONG",{});var h3t=s(P1e);Atr=r(h3t,"ibert"),h3t.forEach(t),Ltr=r(NNe," \u2014 "),HQ=n(NNe,"A",{href:!0});var p3t=s(HQ);ytr=r(p3t,"IBertForQuestionAnswering"),p3t.forEach(t),xtr=r(NNe," (I-BERT model)"),NNe.forEach(t),$tr=i(X),X6=n(X,"LI",{});var INe=s(X6);B1e=n(INe,"STRONG",{});var _3t=s(B1e);ktr=r(_3t,"layoutlmv2"),_3t.forEach(t),Str=r(INe," \u2014 "),UQ=n(INe,"A",{href:!0});var u3t=s(UQ);Rtr=r(u3t,"LayoutLMv2ForQuestionAnswering"),u3t.forEach(t),Ptr=r(INe," (LayoutLMv2 model)"),INe.forEach(t),Btr=i(X),z6=n(X,"LI",{});var qNe=s(z6);N1e=n(qNe,"STRONG",{});var b3t=s(N1e);Ntr=r(b3t,"layoutlmv3"),b3t.forEach(t),Itr=r(qNe," \u2014 "),JQ=n(qNe,"A",{href:!0});var v3t=s(JQ);qtr=r(v3t,"LayoutLMv3ForQuestionAnswering"),v3t.forEach(t),jtr=r(qNe," (LayoutLMv3 model)"),qNe.forEach(t),Dtr=i(X),Q6=n(X,"LI",{});var jNe=s(Q6);I1e=n(jNe,"STRONG",{});var F3t=s(I1e);Gtr=r(F3t,"led"),F3t.forEach(t),Otr=r(jNe," \u2014 "),YQ=n(jNe,"A",{href:!0});var T3t=s(YQ);Vtr=r(T3t,"LEDForQuestionAnswering"),T3t.forEach(t),Xtr=r(jNe," (LED model)"),jNe.forEach(t),ztr=i(X),W6=n(X,"LI",{});var DNe=s(W6);q1e=n(DNe,"STRONG",{});var M3t=s(q1e);Qtr=r(M3t,"longformer"),M3t.forEach(t),Wtr=r(DNe," \u2014 "),KQ=n(DNe,"A",{href:!0});var E3t=s(KQ);Htr=r(E3t,"LongformerForQuestionAnswering"),E3t.forEach(t),Utr=r(DNe," (Longformer model)"),DNe.forEach(t),Jtr=i(X),H6=n(X,"LI",{});var GNe=s(H6);j1e=n(GNe,"STRONG",{});var C3t=s(j1e);Ytr=r(C3t,"lxmert"),C3t.forEach(t),Ktr=r(GNe," \u2014 "),ZQ=n(GNe,"A",{href:!0});var w3t=s(ZQ);Ztr=r(w3t,"LxmertForQuestionAnswering"),w3t.forEach(t),ear=r(GNe," (LXMERT model)"),GNe.forEach(t),oar=i(X),U6=n(X,"LI",{});var ONe=s(U6);D1e=n(ONe,"STRONG",{});var A3t=s(D1e);rar=r(A3t,"mbart"),A3t.forEach(t),tar=r(ONe," \u2014 "),eW=n(ONe,"A",{href:!0});var L3t=s(eW);aar=r(L3t,"MBartForQuestionAnswering"),L3t.forEach(t),nar=r(ONe," (mBART model)"),ONe.forEach(t),sar=i(X),J6=n(X,"LI",{});var VNe=s(J6);G1e=n(VNe,"STRONG",{});var y3t=s(G1e);lar=r(y3t,"megatron-bert"),y3t.forEach(t),iar=r(VNe," \u2014 "),oW=n(VNe,"A",{href:!0});var x3t=s(oW);dar=r(x3t,"MegatronBertForQuestionAnswering"),x3t.forEach(t),car=r(VNe," (Megatron-BERT model)"),VNe.forEach(t),far=i(X),Y6=n(X,"LI",{});var XNe=s(Y6);O1e=n(XNe,"STRONG",{});var $3t=s(O1e);mar=r($3t,"mobilebert"),$3t.forEach(t),gar=r(XNe," \u2014 "),rW=n(XNe,"A",{href:!0});var k3t=s(rW);har=r(k3t,"MobileBertForQuestionAnswering"),k3t.forEach(t),par=r(XNe," (MobileBERT model)"),XNe.forEach(t),_ar=i(X),K6=n(X,"LI",{});var zNe=s(K6);V1e=n(zNe,"STRONG",{});var S3t=s(V1e);uar=r(S3t,"mpnet"),S3t.forEach(t),bar=r(zNe," \u2014 "),tW=n(zNe,"A",{href:!0});var R3t=s(tW);Far=r(R3t,"MPNetForQuestionAnswering"),R3t.forEach(t),Tar=r(zNe," (MPNet model)"),zNe.forEach(t),Mar=i(X),Z6=n(X,"LI",{});var QNe=s(Z6);X1e=n(QNe,"STRONG",{});var P3t=s(X1e);Ear=r(P3t,"mvp"),P3t.forEach(t),Car=r(QNe," \u2014 "),aW=n(QNe,"A",{href:!0});var B3t=s(aW);war=r(B3t,"MvpForQuestionAnswering"),B3t.forEach(t),Aar=r(QNe," (MVP model)"),QNe.forEach(t),Lar=i(X),eT=n(X,"LI",{});var WNe=s(eT);z1e=n(WNe,"STRONG",{});var N3t=s(z1e);yar=r(N3t,"nezha"),N3t.forEach(t),xar=r(WNe," \u2014 "),nW=n(WNe,"A",{href:!0});var I3t=s(nW);$ar=r(I3t,"NezhaForQuestionAnswering"),I3t.forEach(t),kar=r(WNe," (Nezha model)"),WNe.forEach(t),Sar=i(X),oT=n(X,"LI",{});var HNe=s(oT);Q1e=n(HNe,"STRONG",{});var q3t=s(Q1e);Rar=r(q3t,"nystromformer"),q3t.forEach(t),Par=r(HNe," \u2014 "),sW=n(HNe,"A",{href:!0});var j3t=s(sW);Bar=r(j3t,"NystromformerForQuestionAnswering"),j3t.forEach(t),Nar=r(HNe," (Nystr\xF6mformer model)"),HNe.forEach(t),Iar=i(X),rT=n(X,"LI",{});var UNe=s(rT);W1e=n(UNe,"STRONG",{});var D3t=s(W1e);qar=r(D3t,"qdqbert"),D3t.forEach(t),jar=r(UNe," \u2014 "),lW=n(UNe,"A",{href:!0});var G3t=s(lW);Dar=r(G3t,"QDQBertForQuestionAnswering"),G3t.forEach(t),Gar=r(UNe," (QDQBert model)"),UNe.forEach(t),Oar=i(X),tT=n(X,"LI",{});var JNe=s(tT);H1e=n(JNe,"STRONG",{});var O3t=s(H1e);Var=r(O3t,"reformer"),O3t.forEach(t),Xar=r(JNe," \u2014 "),iW=n(JNe,"A",{href:!0});var V3t=s(iW);zar=r(V3t,"ReformerForQuestionAnswering"),V3t.forEach(t),Qar=r(JNe," (Reformer model)"),JNe.forEach(t),War=i(X),aT=n(X,"LI",{});var YNe=s(aT);U1e=n(YNe,"STRONG",{});var X3t=s(U1e);Har=r(X3t,"rembert"),X3t.forEach(t),Uar=r(YNe," \u2014 "),dW=n(YNe,"A",{href:!0});var z3t=s(dW);Jar=r(z3t,"RemBertForQuestionAnswering"),z3t.forEach(t),Yar=r(YNe," (RemBERT model)"),YNe.forEach(t),Kar=i(X),nT=n(X,"LI",{});var KNe=s(nT);J1e=n(KNe,"STRONG",{});var Q3t=s(J1e);Zar=r(Q3t,"roberta"),Q3t.forEach(t),enr=r(KNe," \u2014 "),cW=n(KNe,"A",{href:!0});var W3t=s(cW);onr=r(W3t,"RobertaForQuestionAnswering"),W3t.forEach(t),rnr=r(KNe," (RoBERTa model)"),KNe.forEach(t),tnr=i(X),sT=n(X,"LI",{});var ZNe=s(sT);Y1e=n(ZNe,"STRONG",{});var H3t=s(Y1e);anr=r(H3t,"roformer"),H3t.forEach(t),nnr=r(ZNe," \u2014 "),fW=n(ZNe,"A",{href:!0});var U3t=s(fW);snr=r(U3t,"RoFormerForQuestionAnswering"),U3t.forEach(t),lnr=r(ZNe," (RoFormer model)"),ZNe.forEach(t),inr=i(X),lT=n(X,"LI",{});var eIe=s(lT);K1e=n(eIe,"STRONG",{});var J3t=s(K1e);dnr=r(J3t,"splinter"),J3t.forEach(t),cnr=r(eIe," \u2014 "),mW=n(eIe,"A",{href:!0});var Y3t=s(mW);fnr=r(Y3t,"SplinterForQuestionAnswering"),Y3t.forEach(t),mnr=r(eIe," (Splinter model)"),eIe.forEach(t),gnr=i(X),iT=n(X,"LI",{});var oIe=s(iT);Z1e=n(oIe,"STRONG",{});var K3t=s(Z1e);hnr=r(K3t,"squeezebert"),K3t.forEach(t),pnr=r(oIe," \u2014 "),gW=n(oIe,"A",{href:!0});var Z3t=s(gW);_nr=r(Z3t,"SqueezeBertForQuestionAnswering"),Z3t.forEach(t),unr=r(oIe," (SqueezeBERT model)"),oIe.forEach(t),bnr=i(X),dT=n(X,"LI",{});var rIe=s(dT);ebe=n(rIe,"STRONG",{});var e0t=s(ebe);vnr=r(e0t,"xlm"),e0t.forEach(t),Fnr=r(rIe," \u2014 "),hW=n(rIe,"A",{href:!0});var o0t=s(hW);Tnr=r(o0t,"XLMForQuestionAnsweringSimple"),o0t.forEach(t),Mnr=r(rIe," (XLM model)"),rIe.forEach(t),Enr=i(X),cT=n(X,"LI",{});var tIe=s(cT);obe=n(tIe,"STRONG",{});var r0t=s(obe);Cnr=r(r0t,"xlm-roberta"),r0t.forEach(t),wnr=r(tIe," \u2014 "),pW=n(tIe,"A",{href:!0});var t0t=s(pW);Anr=r(t0t,"XLMRobertaForQuestionAnswering"),t0t.forEach(t),Lnr=r(tIe," (XLM-RoBERTa model)"),tIe.forEach(t),ynr=i(X),fT=n(X,"LI",{});var aIe=s(fT);rbe=n(aIe,"STRONG",{});var a0t=s(rbe);xnr=r(a0t,"xlm-roberta-xl"),a0t.forEach(t),$nr=r(aIe," \u2014 "),_W=n(aIe,"A",{href:!0});var n0t=s(_W);knr=r(n0t,"XLMRobertaXLForQuestionAnswering"),n0t.forEach(t),Snr=r(aIe," (XLM-RoBERTa-XL model)"),aIe.forEach(t),Rnr=i(X),mT=n(X,"LI",{});var nIe=s(mT);tbe=n(nIe,"STRONG",{});var s0t=s(tbe);Pnr=r(s0t,"xlnet"),s0t.forEach(t),Bnr=r(nIe," \u2014 "),uW=n(nIe,"A",{href:!0});var l0t=s(uW);Nnr=r(l0t,"XLNetForQuestionAnsweringSimple"),l0t.forEach(t),Inr=r(nIe," (XLNet model)"),nIe.forEach(t),qnr=i(X),gT=n(X,"LI",{});var sIe=s(gT);abe=n(sIe,"STRONG",{});var i0t=s(abe);jnr=r(i0t,"yoso"),i0t.forEach(t),Dnr=r(sIe," \u2014 "),bW=n(sIe,"A",{href:!0});var d0t=s(bW);Gnr=r(d0t,"YosoForQuestionAnswering"),d0t.forEach(t),Onr=r(sIe," (YOSO model)"),sIe.forEach(t),X.forEach(t),Vnr=i(ua),hT=n(ua,"P",{});var lIe=s(hT);Xnr=r(lIe,"The model is set in evaluation mode by default using "),nbe=n(lIe,"CODE",{});var c0t=s(nbe);znr=r(c0t,"model.eval()"),c0t.forEach(t),Qnr=r(lIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sbe=n(lIe,"CODE",{});var f0t=s(sbe);Wnr=r(f0t,"model.train()"),f0t.forEach(t),lIe.forEach(t),Hnr=i(ua),T(pT.$$.fragment,ua),ua.forEach(t),ml.forEach(t),oze=i(f),bd=n(f,"H2",{class:!0});var lWe=s(bd);_T=n(lWe,"A",{id:!0,class:!0,href:!0});var m0t=s(_T);lbe=n(m0t,"SPAN",{});var g0t=s(lbe);T(Sy.$$.fragment,g0t),g0t.forEach(t),m0t.forEach(t),Unr=i(lWe),ibe=n(lWe,"SPAN",{});var h0t=s(ibe);Jnr=r(h0t,"AutoModelForTableQuestionAnswering"),h0t.forEach(t),lWe.forEach(t),rze=i(f),Go=n(f,"DIV",{class:!0});var gl=s(Go);T(Ry.$$.fragment,gl),Ynr=i(gl),vd=n(gl,"P",{});var dte=s(vd);Knr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vW=n(dte,"A",{href:!0});var p0t=s(vW);Znr=r(p0t,"from_pretrained()"),p0t.forEach(t),esr=r(dte," class method or the "),FW=n(dte,"A",{href:!0});var _0t=s(FW);osr=r(_0t,"from_config()"),_0t.forEach(t),rsr=r(dte,` class
method.`),dte.forEach(t),tsr=i(gl),Py=n(gl,"P",{});var iWe=s(Py);asr=r(iWe,"This class cannot be instantiated directly using "),dbe=n(iWe,"CODE",{});var u0t=s(dbe);nsr=r(u0t,"__init__()"),u0t.forEach(t),ssr=r(iWe," (throws an error)."),iWe.forEach(t),lsr=i(gl),bt=n(gl,"DIV",{class:!0});var Pw=s(bt);T(By.$$.fragment,Pw),isr=i(Pw),cbe=n(Pw,"P",{});var b0t=s(cbe);dsr=r(b0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),b0t.forEach(t),csr=i(Pw),Fd=n(Pw,"P",{});var cte=s(Fd);fsr=r(cte,`Note:
Loading a model from its configuration file does `),fbe=n(cte,"STRONG",{});var v0t=s(fbe);msr=r(v0t,"not"),v0t.forEach(t),gsr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(cte,"A",{href:!0});var F0t=s(TW);hsr=r(F0t,"from_pretrained()"),F0t.forEach(t),psr=r(cte," to load the model weights."),cte.forEach(t),_sr=i(Pw),T(uT.$$.fragment,Pw),Pw.forEach(t),usr=i(gl),lo=n(gl,"DIV",{class:!0});var ba=s(lo);T(Ny.$$.fragment,ba),bsr=i(ba),mbe=n(ba,"P",{});var T0t=s(mbe);vsr=r(T0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),T0t.forEach(t),Fsr=i(ba),Qa=n(ba,"P",{});var Bw=s(Qa);Tsr=r(Bw,"The model class to instantiate is selected based on the "),gbe=n(Bw,"CODE",{});var M0t=s(gbe);Msr=r(M0t,"model_type"),M0t.forEach(t),Esr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),hbe=n(Bw,"CODE",{});var E0t=s(hbe);Csr=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),wsr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(Bw,"CODE",{});var C0t=s(pbe);Asr=r(C0t,"pretrained_model_name_or_path"),C0t.forEach(t),Lsr=r(Bw,":"),Bw.forEach(t),ysr=i(ba),_be=n(ba,"UL",{});var w0t=s(_be);bT=n(w0t,"LI",{});var iIe=s(bT);ube=n(iIe,"STRONG",{});var A0t=s(ube);xsr=r(A0t,"tapas"),A0t.forEach(t),$sr=r(iIe," \u2014 "),MW=n(iIe,"A",{href:!0});var L0t=s(MW);ksr=r(L0t,"TapasForQuestionAnswering"),L0t.forEach(t),Ssr=r(iIe," (TAPAS model)"),iIe.forEach(t),w0t.forEach(t),Rsr=i(ba),vT=n(ba,"P",{});var dIe=s(vT);Psr=r(dIe,"The model is set in evaluation mode by default using "),bbe=n(dIe,"CODE",{});var y0t=s(bbe);Bsr=r(y0t,"model.eval()"),y0t.forEach(t),Nsr=r(dIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vbe=n(dIe,"CODE",{});var x0t=s(vbe);Isr=r(x0t,"model.train()"),x0t.forEach(t),dIe.forEach(t),qsr=i(ba),T(FT.$$.fragment,ba),ba.forEach(t),gl.forEach(t),tze=i(f),Td=n(f,"H2",{class:!0});var dWe=s(Td);TT=n(dWe,"A",{id:!0,class:!0,href:!0});var $0t=s(TT);Fbe=n($0t,"SPAN",{});var k0t=s(Fbe);T(Iy.$$.fragment,k0t),k0t.forEach(t),$0t.forEach(t),jsr=i(dWe),Tbe=n(dWe,"SPAN",{});var S0t=s(Tbe);Dsr=r(S0t,"AutoModelForImageClassification"),S0t.forEach(t),dWe.forEach(t),aze=i(f),Oo=n(f,"DIV",{class:!0});var hl=s(Oo);T(qy.$$.fragment,hl),Gsr=i(hl),Md=n(hl,"P",{});var fte=s(Md);Osr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EW=n(fte,"A",{href:!0});var R0t=s(EW);Vsr=r(R0t,"from_pretrained()"),R0t.forEach(t),Xsr=r(fte," class method or the "),CW=n(fte,"A",{href:!0});var P0t=s(CW);zsr=r(P0t,"from_config()"),P0t.forEach(t),Qsr=r(fte,` class
method.`),fte.forEach(t),Wsr=i(hl),jy=n(hl,"P",{});var cWe=s(jy);Hsr=r(cWe,"This class cannot be instantiated directly using "),Mbe=n(cWe,"CODE",{});var B0t=s(Mbe);Usr=r(B0t,"__init__()"),B0t.forEach(t),Jsr=r(cWe," (throws an error)."),cWe.forEach(t),Ysr=i(hl),vt=n(hl,"DIV",{class:!0});var Nw=s(vt);T(Dy.$$.fragment,Nw),Ksr=i(Nw),Ebe=n(Nw,"P",{});var N0t=s(Ebe);Zsr=r(N0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),N0t.forEach(t),elr=i(Nw),Ed=n(Nw,"P",{});var mte=s(Ed);olr=r(mte,`Note:
Loading a model from its configuration file does `),Cbe=n(mte,"STRONG",{});var I0t=s(Cbe);rlr=r(I0t,"not"),I0t.forEach(t),tlr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(mte,"A",{href:!0});var q0t=s(wW);alr=r(q0t,"from_pretrained()"),q0t.forEach(t),nlr=r(mte," to load the model weights."),mte.forEach(t),slr=i(Nw),T(MT.$$.fragment,Nw),Nw.forEach(t),llr=i(hl),io=n(hl,"DIV",{class:!0});var va=s(io);T(Gy.$$.fragment,va),ilr=i(va),wbe=n(va,"P",{});var j0t=s(wbe);dlr=r(j0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),j0t.forEach(t),clr=i(va),Wa=n(va,"P",{});var Iw=s(Wa);flr=r(Iw,"The model class to instantiate is selected based on the "),Abe=n(Iw,"CODE",{});var D0t=s(Abe);mlr=r(D0t,"model_type"),D0t.forEach(t),glr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(Iw,"CODE",{});var G0t=s(Lbe);hlr=r(G0t,"pretrained_model_name_or_path"),G0t.forEach(t),plr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(Iw,"CODE",{});var O0t=s(ybe);_lr=r(O0t,"pretrained_model_name_or_path"),O0t.forEach(t),ulr=r(Iw,":"),Iw.forEach(t),blr=i(va),ve=n(va,"UL",{});var Te=s(ve);ET=n(Te,"LI",{});var cIe=s(ET);xbe=n(cIe,"STRONG",{});var V0t=s(xbe);vlr=r(V0t,"beit"),V0t.forEach(t),Flr=r(cIe," \u2014 "),AW=n(cIe,"A",{href:!0});var X0t=s(AW);Tlr=r(X0t,"BeitForImageClassification"),X0t.forEach(t),Mlr=r(cIe," (BEiT model)"),cIe.forEach(t),Elr=i(Te),CT=n(Te,"LI",{});var fIe=s(CT);$be=n(fIe,"STRONG",{});var z0t=s($be);Clr=r(z0t,"convnext"),z0t.forEach(t),wlr=r(fIe," \u2014 "),LW=n(fIe,"A",{href:!0});var Q0t=s(LW);Alr=r(Q0t,"ConvNextForImageClassification"),Q0t.forEach(t),Llr=r(fIe," (ConvNeXT model)"),fIe.forEach(t),ylr=i(Te),wT=n(Te,"LI",{});var mIe=s(wT);kbe=n(mIe,"STRONG",{});var W0t=s(kbe);xlr=r(W0t,"cvt"),W0t.forEach(t),$lr=r(mIe," \u2014 "),yW=n(mIe,"A",{href:!0});var H0t=s(yW);klr=r(H0t,"CvtForImageClassification"),H0t.forEach(t),Slr=r(mIe," (CvT model)"),mIe.forEach(t),Rlr=i(Te),AT=n(Te,"LI",{});var gIe=s(AT);Sbe=n(gIe,"STRONG",{});var U0t=s(Sbe);Plr=r(U0t,"data2vec-vision"),U0t.forEach(t),Blr=r(gIe," \u2014 "),xW=n(gIe,"A",{href:!0});var J0t=s(xW);Nlr=r(J0t,"Data2VecVisionForImageClassification"),J0t.forEach(t),Ilr=r(gIe," (Data2VecVision model)"),gIe.forEach(t),qlr=i(Te),Us=n(Te,"LI",{});var qS=s(Us);Rbe=n(qS,"STRONG",{});var Y0t=s(Rbe);jlr=r(Y0t,"deit"),Y0t.forEach(t),Dlr=r(qS," \u2014 "),$W=n(qS,"A",{href:!0});var K0t=s($W);Glr=r(K0t,"DeiTForImageClassification"),K0t.forEach(t),Olr=r(qS," or "),kW=n(qS,"A",{href:!0});var Z0t=s(kW);Vlr=r(Z0t,"DeiTForImageClassificationWithTeacher"),Z0t.forEach(t),Xlr=r(qS," (DeiT model)"),qS.forEach(t),zlr=i(Te),LT=n(Te,"LI",{});var hIe=s(LT);Pbe=n(hIe,"STRONG",{});var ewt=s(Pbe);Qlr=r(ewt,"imagegpt"),ewt.forEach(t),Wlr=r(hIe," \u2014 "),SW=n(hIe,"A",{href:!0});var owt=s(SW);Hlr=r(owt,"ImageGPTForImageClassification"),owt.forEach(t),Ulr=r(hIe," (ImageGPT model)"),hIe.forEach(t),Jlr=i(Te),Js=n(Te,"LI",{});var jS=s(Js);Bbe=n(jS,"STRONG",{});var rwt=s(Bbe);Ylr=r(rwt,"levit"),rwt.forEach(t),Klr=r(jS," \u2014 "),RW=n(jS,"A",{href:!0});var twt=s(RW);Zlr=r(twt,"LevitForImageClassification"),twt.forEach(t),eir=r(jS," or "),PW=n(jS,"A",{href:!0});var awt=s(PW);oir=r(awt,"LevitForImageClassificationWithTeacher"),awt.forEach(t),rir=r(jS," (LeViT model)"),jS.forEach(t),tir=i(Te),yT=n(Te,"LI",{});var pIe=s(yT);Nbe=n(pIe,"STRONG",{});var nwt=s(Nbe);air=r(nwt,"mobilevit"),nwt.forEach(t),nir=r(pIe," \u2014 "),BW=n(pIe,"A",{href:!0});var swt=s(BW);sir=r(swt,"MobileViTForImageClassification"),swt.forEach(t),lir=r(pIe," (MobileViT model)"),pIe.forEach(t),iir=i(Te),Ft=n(Te,"LI",{});var Pf=s(Ft);Ibe=n(Pf,"STRONG",{});var lwt=s(Ibe);dir=r(lwt,"perceiver"),lwt.forEach(t),cir=r(Pf," \u2014 "),NW=n(Pf,"A",{href:!0});var iwt=s(NW);fir=r(iwt,"PerceiverForImageClassificationLearned"),iwt.forEach(t),mir=r(Pf," or "),IW=n(Pf,"A",{href:!0});var dwt=s(IW);gir=r(dwt,"PerceiverForImageClassificationFourier"),dwt.forEach(t),hir=r(Pf," or "),qW=n(Pf,"A",{href:!0});var cwt=s(qW);pir=r(cwt,"PerceiverForImageClassificationConvProcessing"),cwt.forEach(t),_ir=r(Pf," (Perceiver model)"),Pf.forEach(t),uir=i(Te),xT=n(Te,"LI",{});var _Ie=s(xT);qbe=n(_Ie,"STRONG",{});var fwt=s(qbe);bir=r(fwt,"poolformer"),fwt.forEach(t),vir=r(_Ie," \u2014 "),jW=n(_Ie,"A",{href:!0});var mwt=s(jW);Fir=r(mwt,"PoolFormerForImageClassification"),mwt.forEach(t),Tir=r(_Ie," (PoolFormer model)"),_Ie.forEach(t),Mir=i(Te),$T=n(Te,"LI",{});var uIe=s($T);jbe=n(uIe,"STRONG",{});var gwt=s(jbe);Eir=r(gwt,"regnet"),gwt.forEach(t),Cir=r(uIe," \u2014 "),DW=n(uIe,"A",{href:!0});var hwt=s(DW);wir=r(hwt,"RegNetForImageClassification"),hwt.forEach(t),Air=r(uIe," (RegNet model)"),uIe.forEach(t),Lir=i(Te),kT=n(Te,"LI",{});var bIe=s(kT);Dbe=n(bIe,"STRONG",{});var pwt=s(Dbe);yir=r(pwt,"resnet"),pwt.forEach(t),xir=r(bIe," \u2014 "),GW=n(bIe,"A",{href:!0});var _wt=s(GW);$ir=r(_wt,"ResNetForImageClassification"),_wt.forEach(t),kir=r(bIe," (ResNet model)"),bIe.forEach(t),Sir=i(Te),ST=n(Te,"LI",{});var vIe=s(ST);Gbe=n(vIe,"STRONG",{});var uwt=s(Gbe);Rir=r(uwt,"segformer"),uwt.forEach(t),Pir=r(vIe," \u2014 "),OW=n(vIe,"A",{href:!0});var bwt=s(OW);Bir=r(bwt,"SegformerForImageClassification"),bwt.forEach(t),Nir=r(vIe," (SegFormer model)"),vIe.forEach(t),Iir=i(Te),RT=n(Te,"LI",{});var FIe=s(RT);Obe=n(FIe,"STRONG",{});var vwt=s(Obe);qir=r(vwt,"swin"),vwt.forEach(t),jir=r(FIe," \u2014 "),VW=n(FIe,"A",{href:!0});var Fwt=s(VW);Dir=r(Fwt,"SwinForImageClassification"),Fwt.forEach(t),Gir=r(FIe," (Swin Transformer model)"),FIe.forEach(t),Oir=i(Te),PT=n(Te,"LI",{});var TIe=s(PT);Vbe=n(TIe,"STRONG",{});var Twt=s(Vbe);Vir=r(Twt,"van"),Twt.forEach(t),Xir=r(TIe," \u2014 "),XW=n(TIe,"A",{href:!0});var Mwt=s(XW);zir=r(Mwt,"VanForImageClassification"),Mwt.forEach(t),Qir=r(TIe," (VAN model)"),TIe.forEach(t),Wir=i(Te),BT=n(Te,"LI",{});var MIe=s(BT);Xbe=n(MIe,"STRONG",{});var Ewt=s(Xbe);Hir=r(Ewt,"vit"),Ewt.forEach(t),Uir=r(MIe," \u2014 "),zW=n(MIe,"A",{href:!0});var Cwt=s(zW);Jir=r(Cwt,"ViTForImageClassification"),Cwt.forEach(t),Yir=r(MIe," (ViT model)"),MIe.forEach(t),Te.forEach(t),Kir=i(va),NT=n(va,"P",{});var EIe=s(NT);Zir=r(EIe,"The model is set in evaluation mode by default using "),zbe=n(EIe,"CODE",{});var wwt=s(zbe);edr=r(wwt,"model.eval()"),wwt.forEach(t),odr=r(EIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=n(EIe,"CODE",{});var Awt=s(Qbe);rdr=r(Awt,"model.train()"),Awt.forEach(t),EIe.forEach(t),tdr=i(va),T(IT.$$.fragment,va),va.forEach(t),hl.forEach(t),nze=i(f),Cd=n(f,"H2",{class:!0});var fWe=s(Cd);qT=n(fWe,"A",{id:!0,class:!0,href:!0});var Lwt=s(qT);Wbe=n(Lwt,"SPAN",{});var ywt=s(Wbe);T(Oy.$$.fragment,ywt),ywt.forEach(t),Lwt.forEach(t),adr=i(fWe),Hbe=n(fWe,"SPAN",{});var xwt=s(Hbe);ndr=r(xwt,"AutoModelForVision2Seq"),xwt.forEach(t),fWe.forEach(t),sze=i(f),Vo=n(f,"DIV",{class:!0});var pl=s(Vo);T(Vy.$$.fragment,pl),sdr=i(pl),wd=n(pl,"P",{});var gte=s(wd);ldr=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QW=n(gte,"A",{href:!0});var $wt=s(QW);idr=r($wt,"from_pretrained()"),$wt.forEach(t),ddr=r(gte," class method or the "),WW=n(gte,"A",{href:!0});var kwt=s(WW);cdr=r(kwt,"from_config()"),kwt.forEach(t),fdr=r(gte,` class
method.`),gte.forEach(t),mdr=i(pl),Xy=n(pl,"P",{});var mWe=s(Xy);gdr=r(mWe,"This class cannot be instantiated directly using "),Ube=n(mWe,"CODE",{});var Swt=s(Ube);hdr=r(Swt,"__init__()"),Swt.forEach(t),pdr=r(mWe," (throws an error)."),mWe.forEach(t),_dr=i(pl),Tt=n(pl,"DIV",{class:!0});var qw=s(Tt);T(zy.$$.fragment,qw),udr=i(qw),Jbe=n(qw,"P",{});var Rwt=s(Jbe);bdr=r(Rwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Rwt.forEach(t),vdr=i(qw),Ad=n(qw,"P",{});var hte=s(Ad);Fdr=r(hte,`Note:
Loading a model from its configuration file does `),Ybe=n(hte,"STRONG",{});var Pwt=s(Ybe);Tdr=r(Pwt,"not"),Pwt.forEach(t),Mdr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=n(hte,"A",{href:!0});var Bwt=s(HW);Edr=r(Bwt,"from_pretrained()"),Bwt.forEach(t),Cdr=r(hte," to load the model weights."),hte.forEach(t),wdr=i(qw),T(jT.$$.fragment,qw),qw.forEach(t),Adr=i(pl),co=n(pl,"DIV",{class:!0});var Fa=s(co);T(Qy.$$.fragment,Fa),Ldr=i(Fa),Kbe=n(Fa,"P",{});var Nwt=s(Kbe);ydr=r(Nwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Nwt.forEach(t),xdr=i(Fa),Ha=n(Fa,"P",{});var jw=s(Ha);$dr=r(jw,"The model class to instantiate is selected based on the "),Zbe=n(jw,"CODE",{});var Iwt=s(Zbe);kdr=r(Iwt,"model_type"),Iwt.forEach(t),Sdr=r(jw,` property of the config object (either
passed as an argument or loaded from `),eve=n(jw,"CODE",{});var qwt=s(eve);Rdr=r(qwt,"pretrained_model_name_or_path"),qwt.forEach(t),Pdr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(jw,"CODE",{});var jwt=s(ove);Bdr=r(jwt,"pretrained_model_name_or_path"),jwt.forEach(t),Ndr=r(jw,":"),jw.forEach(t),Idr=i(Fa),rve=n(Fa,"UL",{});var Dwt=s(rve);DT=n(Dwt,"LI",{});var CIe=s(DT);tve=n(CIe,"STRONG",{});var Gwt=s(tve);qdr=r(Gwt,"vision-encoder-decoder"),Gwt.forEach(t),jdr=r(CIe," \u2014 "),UW=n(CIe,"A",{href:!0});var Owt=s(UW);Ddr=r(Owt,"VisionEncoderDecoderModel"),Owt.forEach(t),Gdr=r(CIe," (Vision Encoder decoder model)"),CIe.forEach(t),Dwt.forEach(t),Odr=i(Fa),GT=n(Fa,"P",{});var wIe=s(GT);Vdr=r(wIe,"The model is set in evaluation mode by default using "),ave=n(wIe,"CODE",{});var Vwt=s(ave);Xdr=r(Vwt,"model.eval()"),Vwt.forEach(t),zdr=r(wIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nve=n(wIe,"CODE",{});var Xwt=s(nve);Qdr=r(Xwt,"model.train()"),Xwt.forEach(t),wIe.forEach(t),Wdr=i(Fa),T(OT.$$.fragment,Fa),Fa.forEach(t),pl.forEach(t),lze=i(f),Ld=n(f,"H2",{class:!0});var gWe=s(Ld);VT=n(gWe,"A",{id:!0,class:!0,href:!0});var zwt=s(VT);sve=n(zwt,"SPAN",{});var Qwt=s(sve);T(Wy.$$.fragment,Qwt),Qwt.forEach(t),zwt.forEach(t),Hdr=i(gWe),lve=n(gWe,"SPAN",{});var Wwt=s(lve);Udr=r(Wwt,"AutoModelForVisualQuestionAnswering"),Wwt.forEach(t),gWe.forEach(t),ize=i(f),Xo=n(f,"DIV",{class:!0});var _l=s(Xo);T(Hy.$$.fragment,_l),Jdr=i(_l),yd=n(_l,"P",{});var pte=s(yd);Ydr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),JW=n(pte,"A",{href:!0});var Hwt=s(JW);Kdr=r(Hwt,"from_pretrained()"),Hwt.forEach(t),Zdr=r(pte," class method or the "),YW=n(pte,"A",{href:!0});var Uwt=s(YW);ecr=r(Uwt,"from_config()"),Uwt.forEach(t),ocr=r(pte,` class
method.`),pte.forEach(t),rcr=i(_l),Uy=n(_l,"P",{});var hWe=s(Uy);tcr=r(hWe,"This class cannot be instantiated directly using "),ive=n(hWe,"CODE",{});var Jwt=s(ive);acr=r(Jwt,"__init__()"),Jwt.forEach(t),ncr=r(hWe," (throws an error)."),hWe.forEach(t),scr=i(_l),Mt=n(_l,"DIV",{class:!0});var Dw=s(Mt);T(Jy.$$.fragment,Dw),lcr=i(Dw),dve=n(Dw,"P",{});var Ywt=s(dve);icr=r(Ywt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Ywt.forEach(t),dcr=i(Dw),xd=n(Dw,"P",{});var _te=s(xd);ccr=r(_te,`Note:
Loading a model from its configuration file does `),cve=n(_te,"STRONG",{});var Kwt=s(cve);fcr=r(Kwt,"not"),Kwt.forEach(t),mcr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(_te,"A",{href:!0});var Zwt=s(KW);gcr=r(Zwt,"from_pretrained()"),Zwt.forEach(t),hcr=r(_te," to load the model weights."),_te.forEach(t),pcr=i(Dw),T(XT.$$.fragment,Dw),Dw.forEach(t),_cr=i(_l),fo=n(_l,"DIV",{class:!0});var Ta=s(fo);T(Yy.$$.fragment,Ta),ucr=i(Ta),fve=n(Ta,"P",{});var eAt=s(fve);bcr=r(eAt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),eAt.forEach(t),vcr=i(Ta),Ua=n(Ta,"P",{});var Gw=s(Ua);Fcr=r(Gw,"The model class to instantiate is selected based on the "),mve=n(Gw,"CODE",{});var oAt=s(mve);Tcr=r(oAt,"model_type"),oAt.forEach(t),Mcr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),gve=n(Gw,"CODE",{});var rAt=s(gve);Ecr=r(rAt,"pretrained_model_name_or_path"),rAt.forEach(t),Ccr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(Gw,"CODE",{});var tAt=s(hve);wcr=r(tAt,"pretrained_model_name_or_path"),tAt.forEach(t),Acr=r(Gw,":"),Gw.forEach(t),Lcr=i(Ta),pve=n(Ta,"UL",{});var aAt=s(pve);zT=n(aAt,"LI",{});var AIe=s(zT);_ve=n(AIe,"STRONG",{});var nAt=s(_ve);ycr=r(nAt,"vilt"),nAt.forEach(t),xcr=r(AIe," \u2014 "),ZW=n(AIe,"A",{href:!0});var sAt=s(ZW);$cr=r(sAt,"ViltForQuestionAnswering"),sAt.forEach(t),kcr=r(AIe," (ViLT model)"),AIe.forEach(t),aAt.forEach(t),Scr=i(Ta),QT=n(Ta,"P",{});var LIe=s(QT);Rcr=r(LIe,"The model is set in evaluation mode by default using "),uve=n(LIe,"CODE",{});var lAt=s(uve);Pcr=r(lAt,"model.eval()"),lAt.forEach(t),Bcr=r(LIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bve=n(LIe,"CODE",{});var iAt=s(bve);Ncr=r(iAt,"model.train()"),iAt.forEach(t),LIe.forEach(t),Icr=i(Ta),T(WT.$$.fragment,Ta),Ta.forEach(t),_l.forEach(t),dze=i(f),$d=n(f,"H2",{class:!0});var pWe=s($d);HT=n(pWe,"A",{id:!0,class:!0,href:!0});var dAt=s(HT);vve=n(dAt,"SPAN",{});var cAt=s(vve);T(Ky.$$.fragment,cAt),cAt.forEach(t),dAt.forEach(t),qcr=i(pWe),Fve=n(pWe,"SPAN",{});var fAt=s(Fve);jcr=r(fAt,"AutoModelForAudioClassification"),fAt.forEach(t),pWe.forEach(t),cze=i(f),zo=n(f,"DIV",{class:!0});var ul=s(zo);T(Zy.$$.fragment,ul),Dcr=i(ul),kd=n(ul,"P",{});var ute=s(kd);Gcr=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),eH=n(ute,"A",{href:!0});var mAt=s(eH);Ocr=r(mAt,"from_pretrained()"),mAt.forEach(t),Vcr=r(ute," class method or the "),oH=n(ute,"A",{href:!0});var gAt=s(oH);Xcr=r(gAt,"from_config()"),gAt.forEach(t),zcr=r(ute,` class
method.`),ute.forEach(t),Qcr=i(ul),e9=n(ul,"P",{});var _We=s(e9);Wcr=r(_We,"This class cannot be instantiated directly using "),Tve=n(_We,"CODE",{});var hAt=s(Tve);Hcr=r(hAt,"__init__()"),hAt.forEach(t),Ucr=r(_We," (throws an error)."),_We.forEach(t),Jcr=i(ul),Et=n(ul,"DIV",{class:!0});var Ow=s(Et);T(o9.$$.fragment,Ow),Ycr=i(Ow),Mve=n(Ow,"P",{});var pAt=s(Mve);Kcr=r(pAt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),pAt.forEach(t),Zcr=i(Ow),Sd=n(Ow,"P",{});var bte=s(Sd);efr=r(bte,`Note:
Loading a model from its configuration file does `),Eve=n(bte,"STRONG",{});var _At=s(Eve);ofr=r(_At,"not"),_At.forEach(t),rfr=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(bte,"A",{href:!0});var uAt=s(rH);tfr=r(uAt,"from_pretrained()"),uAt.forEach(t),afr=r(bte," to load the model weights."),bte.forEach(t),nfr=i(Ow),T(UT.$$.fragment,Ow),Ow.forEach(t),sfr=i(ul),mo=n(ul,"DIV",{class:!0});var Ma=s(mo);T(r9.$$.fragment,Ma),lfr=i(Ma),Cve=n(Ma,"P",{});var bAt=s(Cve);ifr=r(bAt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),bAt.forEach(t),dfr=i(Ma),Ja=n(Ma,"P",{});var Vw=s(Ja);cfr=r(Vw,"The model class to instantiate is selected based on the "),wve=n(Vw,"CODE",{});var vAt=s(wve);ffr=r(vAt,"model_type"),vAt.forEach(t),mfr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),Ave=n(Vw,"CODE",{});var FAt=s(Ave);gfr=r(FAt,"pretrained_model_name_or_path"),FAt.forEach(t),hfr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=n(Vw,"CODE",{});var TAt=s(Lve);pfr=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),_fr=r(Vw,":"),Vw.forEach(t),ufr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);JT=n(ze,"LI",{});var yIe=s(JT);yve=n(yIe,"STRONG",{});var MAt=s(yve);bfr=r(MAt,"data2vec-audio"),MAt.forEach(t),vfr=r(yIe," \u2014 "),tH=n(yIe,"A",{href:!0});var EAt=s(tH);Ffr=r(EAt,"Data2VecAudioForSequenceClassification"),EAt.forEach(t),Tfr=r(yIe," (Data2VecAudio model)"),yIe.forEach(t),Mfr=i(ze),YT=n(ze,"LI",{});var xIe=s(YT);xve=n(xIe,"STRONG",{});var CAt=s(xve);Efr=r(CAt,"hubert"),CAt.forEach(t),Cfr=r(xIe," \u2014 "),aH=n(xIe,"A",{href:!0});var wAt=s(aH);wfr=r(wAt,"HubertForSequenceClassification"),wAt.forEach(t),Afr=r(xIe," (Hubert model)"),xIe.forEach(t),Lfr=i(ze),KT=n(ze,"LI",{});var $Ie=s(KT);$ve=n($Ie,"STRONG",{});var AAt=s($ve);yfr=r(AAt,"sew"),AAt.forEach(t),xfr=r($Ie," \u2014 "),nH=n($Ie,"A",{href:!0});var LAt=s(nH);$fr=r(LAt,"SEWForSequenceClassification"),LAt.forEach(t),kfr=r($Ie," (SEW model)"),$Ie.forEach(t),Sfr=i(ze),ZT=n(ze,"LI",{});var kIe=s(ZT);kve=n(kIe,"STRONG",{});var yAt=s(kve);Rfr=r(yAt,"sew-d"),yAt.forEach(t),Pfr=r(kIe," \u2014 "),sH=n(kIe,"A",{href:!0});var xAt=s(sH);Bfr=r(xAt,"SEWDForSequenceClassification"),xAt.forEach(t),Nfr=r(kIe," (SEW-D model)"),kIe.forEach(t),Ifr=i(ze),e7=n(ze,"LI",{});var SIe=s(e7);Sve=n(SIe,"STRONG",{});var $At=s(Sve);qfr=r($At,"unispeech"),$At.forEach(t),jfr=r(SIe," \u2014 "),lH=n(SIe,"A",{href:!0});var kAt=s(lH);Dfr=r(kAt,"UniSpeechForSequenceClassification"),kAt.forEach(t),Gfr=r(SIe," (UniSpeech model)"),SIe.forEach(t),Ofr=i(ze),o7=n(ze,"LI",{});var RIe=s(o7);Rve=n(RIe,"STRONG",{});var SAt=s(Rve);Vfr=r(SAt,"unispeech-sat"),SAt.forEach(t),Xfr=r(RIe," \u2014 "),iH=n(RIe,"A",{href:!0});var RAt=s(iH);zfr=r(RAt,"UniSpeechSatForSequenceClassification"),RAt.forEach(t),Qfr=r(RIe," (UniSpeechSat model)"),RIe.forEach(t),Wfr=i(ze),r7=n(ze,"LI",{});var PIe=s(r7);Pve=n(PIe,"STRONG",{});var PAt=s(Pve);Hfr=r(PAt,"wav2vec2"),PAt.forEach(t),Ufr=r(PIe," \u2014 "),dH=n(PIe,"A",{href:!0});var BAt=s(dH);Jfr=r(BAt,"Wav2Vec2ForSequenceClassification"),BAt.forEach(t),Yfr=r(PIe," (Wav2Vec2 model)"),PIe.forEach(t),Kfr=i(ze),t7=n(ze,"LI",{});var BIe=s(t7);Bve=n(BIe,"STRONG",{});var NAt=s(Bve);Zfr=r(NAt,"wav2vec2-conformer"),NAt.forEach(t),emr=r(BIe," \u2014 "),cH=n(BIe,"A",{href:!0});var IAt=s(cH);omr=r(IAt,"Wav2Vec2ConformerForSequenceClassification"),IAt.forEach(t),rmr=r(BIe," (Wav2Vec2-Conformer model)"),BIe.forEach(t),tmr=i(ze),a7=n(ze,"LI",{});var NIe=s(a7);Nve=n(NIe,"STRONG",{});var qAt=s(Nve);amr=r(qAt,"wavlm"),qAt.forEach(t),nmr=r(NIe," \u2014 "),fH=n(NIe,"A",{href:!0});var jAt=s(fH);smr=r(jAt,"WavLMForSequenceClassification"),jAt.forEach(t),lmr=r(NIe," (WavLM model)"),NIe.forEach(t),ze.forEach(t),imr=i(Ma),n7=n(Ma,"P",{});var IIe=s(n7);dmr=r(IIe,"The model is set in evaluation mode by default using "),Ive=n(IIe,"CODE",{});var DAt=s(Ive);cmr=r(DAt,"model.eval()"),DAt.forEach(t),fmr=r(IIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qve=n(IIe,"CODE",{});var GAt=s(qve);mmr=r(GAt,"model.train()"),GAt.forEach(t),IIe.forEach(t),gmr=i(Ma),T(s7.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),fze=i(f),Rd=n(f,"H2",{class:!0});var uWe=s(Rd);l7=n(uWe,"A",{id:!0,class:!0,href:!0});var OAt=s(l7);jve=n(OAt,"SPAN",{});var VAt=s(jve);T(t9.$$.fragment,VAt),VAt.forEach(t),OAt.forEach(t),hmr=i(uWe),Dve=n(uWe,"SPAN",{});var XAt=s(Dve);pmr=r(XAt,"AutoModelForAudioFrameClassification"),XAt.forEach(t),uWe.forEach(t),mze=i(f),Qo=n(f,"DIV",{class:!0});var bl=s(Qo);T(a9.$$.fragment,bl),_mr=i(bl),Pd=n(bl,"P",{});var vte=s(Pd);umr=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mH=n(vte,"A",{href:!0});var zAt=s(mH);bmr=r(zAt,"from_pretrained()"),zAt.forEach(t),vmr=r(vte," class method or the "),gH=n(vte,"A",{href:!0});var QAt=s(gH);Fmr=r(QAt,"from_config()"),QAt.forEach(t),Tmr=r(vte,` class
method.`),vte.forEach(t),Mmr=i(bl),n9=n(bl,"P",{});var bWe=s(n9);Emr=r(bWe,"This class cannot be instantiated directly using "),Gve=n(bWe,"CODE",{});var WAt=s(Gve);Cmr=r(WAt,"__init__()"),WAt.forEach(t),wmr=r(bWe," (throws an error)."),bWe.forEach(t),Amr=i(bl),Ct=n(bl,"DIV",{class:!0});var Xw=s(Ct);T(s9.$$.fragment,Xw),Lmr=i(Xw),Ove=n(Xw,"P",{});var HAt=s(Ove);ymr=r(HAt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),HAt.forEach(t),xmr=i(Xw),Bd=n(Xw,"P",{});var Fte=s(Bd);$mr=r(Fte,`Note:
Loading a model from its configuration file does `),Vve=n(Fte,"STRONG",{});var UAt=s(Vve);kmr=r(UAt,"not"),UAt.forEach(t),Smr=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(Fte,"A",{href:!0});var JAt=s(hH);Rmr=r(JAt,"from_pretrained()"),JAt.forEach(t),Pmr=r(Fte," to load the model weights."),Fte.forEach(t),Bmr=i(Xw),T(i7.$$.fragment,Xw),Xw.forEach(t),Nmr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(l9.$$.fragment,Ea),Imr=i(Ea),Xve=n(Ea,"P",{});var YAt=s(Xve);qmr=r(YAt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),YAt.forEach(t),jmr=i(Ea),Ya=n(Ea,"P",{});var zw=s(Ya);Dmr=r(zw,"The model class to instantiate is selected based on the "),zve=n(zw,"CODE",{});var KAt=s(zve);Gmr=r(KAt,"model_type"),KAt.forEach(t),Omr=r(zw,` property of the config object (either
passed as an argument or loaded from `),Qve=n(zw,"CODE",{});var ZAt=s(Qve);Vmr=r(ZAt,"pretrained_model_name_or_path"),ZAt.forEach(t),Xmr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(zw,"CODE",{});var eLt=s(Wve);zmr=r(eLt,"pretrained_model_name_or_path"),eLt.forEach(t),Qmr=r(zw,":"),zw.forEach(t),Wmr=i(Ea),rt=n(Ea,"UL",{});var vl=s(rt);d7=n(vl,"LI",{});var qIe=s(d7);Hve=n(qIe,"STRONG",{});var oLt=s(Hve);Hmr=r(oLt,"data2vec-audio"),oLt.forEach(t),Umr=r(qIe," \u2014 "),pH=n(qIe,"A",{href:!0});var rLt=s(pH);Jmr=r(rLt,"Data2VecAudioForAudioFrameClassification"),rLt.forEach(t),Ymr=r(qIe," (Data2VecAudio model)"),qIe.forEach(t),Kmr=i(vl),c7=n(vl,"LI",{});var jIe=s(c7);Uve=n(jIe,"STRONG",{});var tLt=s(Uve);Zmr=r(tLt,"unispeech-sat"),tLt.forEach(t),egr=r(jIe," \u2014 "),_H=n(jIe,"A",{href:!0});var aLt=s(_H);ogr=r(aLt,"UniSpeechSatForAudioFrameClassification"),aLt.forEach(t),rgr=r(jIe," (UniSpeechSat model)"),jIe.forEach(t),tgr=i(vl),f7=n(vl,"LI",{});var DIe=s(f7);Jve=n(DIe,"STRONG",{});var nLt=s(Jve);agr=r(nLt,"wav2vec2"),nLt.forEach(t),ngr=r(DIe," \u2014 "),uH=n(DIe,"A",{href:!0});var sLt=s(uH);sgr=r(sLt,"Wav2Vec2ForAudioFrameClassification"),sLt.forEach(t),lgr=r(DIe," (Wav2Vec2 model)"),DIe.forEach(t),igr=i(vl),m7=n(vl,"LI",{});var GIe=s(m7);Yve=n(GIe,"STRONG",{});var lLt=s(Yve);dgr=r(lLt,"wav2vec2-conformer"),lLt.forEach(t),cgr=r(GIe," \u2014 "),bH=n(GIe,"A",{href:!0});var iLt=s(bH);fgr=r(iLt,"Wav2Vec2ConformerForAudioFrameClassification"),iLt.forEach(t),mgr=r(GIe," (Wav2Vec2-Conformer model)"),GIe.forEach(t),ggr=i(vl),g7=n(vl,"LI",{});var OIe=s(g7);Kve=n(OIe,"STRONG",{});var dLt=s(Kve);hgr=r(dLt,"wavlm"),dLt.forEach(t),pgr=r(OIe," \u2014 "),vH=n(OIe,"A",{href:!0});var cLt=s(vH);_gr=r(cLt,"WavLMForAudioFrameClassification"),cLt.forEach(t),ugr=r(OIe," (WavLM model)"),OIe.forEach(t),vl.forEach(t),bgr=i(Ea),h7=n(Ea,"P",{});var VIe=s(h7);vgr=r(VIe,"The model is set in evaluation mode by default using "),Zve=n(VIe,"CODE",{});var fLt=s(Zve);Fgr=r(fLt,"model.eval()"),fLt.forEach(t),Tgr=r(VIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eFe=n(VIe,"CODE",{});var mLt=s(eFe);Mgr=r(mLt,"model.train()"),mLt.forEach(t),VIe.forEach(t),Egr=i(Ea),T(p7.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),gze=i(f),Nd=n(f,"H2",{class:!0});var vWe=s(Nd);_7=n(vWe,"A",{id:!0,class:!0,href:!0});var gLt=s(_7);oFe=n(gLt,"SPAN",{});var hLt=s(oFe);T(i9.$$.fragment,hLt),hLt.forEach(t),gLt.forEach(t),Cgr=i(vWe),rFe=n(vWe,"SPAN",{});var pLt=s(rFe);wgr=r(pLt,"AutoModelForCTC"),pLt.forEach(t),vWe.forEach(t),hze=i(f),Wo=n(f,"DIV",{class:!0});var Fl=s(Wo);T(d9.$$.fragment,Fl),Agr=i(Fl),Id=n(Fl,"P",{});var Tte=s(Id);Lgr=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FH=n(Tte,"A",{href:!0});var _Lt=s(FH);ygr=r(_Lt,"from_pretrained()"),_Lt.forEach(t),xgr=r(Tte," class method or the "),TH=n(Tte,"A",{href:!0});var uLt=s(TH);$gr=r(uLt,"from_config()"),uLt.forEach(t),kgr=r(Tte,` class
method.`),Tte.forEach(t),Sgr=i(Fl),c9=n(Fl,"P",{});var FWe=s(c9);Rgr=r(FWe,"This class cannot be instantiated directly using "),tFe=n(FWe,"CODE",{});var bLt=s(tFe);Pgr=r(bLt,"__init__()"),bLt.forEach(t),Bgr=r(FWe," (throws an error)."),FWe.forEach(t),Ngr=i(Fl),wt=n(Fl,"DIV",{class:!0});var Qw=s(wt);T(f9.$$.fragment,Qw),Igr=i(Qw),aFe=n(Qw,"P",{});var vLt=s(aFe);qgr=r(vLt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vLt.forEach(t),jgr=i(Qw),qd=n(Qw,"P",{});var Mte=s(qd);Dgr=r(Mte,`Note:
Loading a model from its configuration file does `),nFe=n(Mte,"STRONG",{});var FLt=s(nFe);Ggr=r(FLt,"not"),FLt.forEach(t),Ogr=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(Mte,"A",{href:!0});var TLt=s(MH);Vgr=r(TLt,"from_pretrained()"),TLt.forEach(t),Xgr=r(Mte," to load the model weights."),Mte.forEach(t),zgr=i(Qw),T(u7.$$.fragment,Qw),Qw.forEach(t),Qgr=i(Fl),ho=n(Fl,"DIV",{class:!0});var Ca=s(ho);T(m9.$$.fragment,Ca),Wgr=i(Ca),sFe=n(Ca,"P",{});var MLt=s(sFe);Hgr=r(MLt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),MLt.forEach(t),Ugr=i(Ca),Ka=n(Ca,"P",{});var Ww=s(Ka);Jgr=r(Ww,"The model class to instantiate is selected based on the "),lFe=n(Ww,"CODE",{});var ELt=s(lFe);Ygr=r(ELt,"model_type"),ELt.forEach(t),Kgr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),iFe=n(Ww,"CODE",{});var CLt=s(iFe);Zgr=r(CLt,"pretrained_model_name_or_path"),CLt.forEach(t),ehr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=n(Ww,"CODE",{});var wLt=s(dFe);ohr=r(wLt,"pretrained_model_name_or_path"),wLt.forEach(t),rhr=r(Ww,":"),Ww.forEach(t),thr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);b7=n(Be,"LI",{});var XIe=s(b7);cFe=n(XIe,"STRONG",{});var ALt=s(cFe);ahr=r(ALt,"data2vec-audio"),ALt.forEach(t),nhr=r(XIe," \u2014 "),EH=n(XIe,"A",{href:!0});var LLt=s(EH);shr=r(LLt,"Data2VecAudioForCTC"),LLt.forEach(t),lhr=r(XIe," (Data2VecAudio model)"),XIe.forEach(t),ihr=i(Be),v7=n(Be,"LI",{});var zIe=s(v7);fFe=n(zIe,"STRONG",{});var yLt=s(fFe);dhr=r(yLt,"hubert"),yLt.forEach(t),chr=r(zIe," \u2014 "),CH=n(zIe,"A",{href:!0});var xLt=s(CH);fhr=r(xLt,"HubertForCTC"),xLt.forEach(t),mhr=r(zIe," (Hubert model)"),zIe.forEach(t),ghr=i(Be),F7=n(Be,"LI",{});var QIe=s(F7);mFe=n(QIe,"STRONG",{});var $Lt=s(mFe);hhr=r($Lt,"mctct"),$Lt.forEach(t),phr=r(QIe," \u2014 "),wH=n(QIe,"A",{href:!0});var kLt=s(wH);_hr=r(kLt,"MCTCTForCTC"),kLt.forEach(t),uhr=r(QIe," (M-CTC-T model)"),QIe.forEach(t),bhr=i(Be),T7=n(Be,"LI",{});var WIe=s(T7);gFe=n(WIe,"STRONG",{});var SLt=s(gFe);vhr=r(SLt,"sew"),SLt.forEach(t),Fhr=r(WIe," \u2014 "),AH=n(WIe,"A",{href:!0});var RLt=s(AH);Thr=r(RLt,"SEWForCTC"),RLt.forEach(t),Mhr=r(WIe," (SEW model)"),WIe.forEach(t),Ehr=i(Be),M7=n(Be,"LI",{});var HIe=s(M7);hFe=n(HIe,"STRONG",{});var PLt=s(hFe);Chr=r(PLt,"sew-d"),PLt.forEach(t),whr=r(HIe," \u2014 "),LH=n(HIe,"A",{href:!0});var BLt=s(LH);Ahr=r(BLt,"SEWDForCTC"),BLt.forEach(t),Lhr=r(HIe," (SEW-D model)"),HIe.forEach(t),yhr=i(Be),E7=n(Be,"LI",{});var UIe=s(E7);pFe=n(UIe,"STRONG",{});var NLt=s(pFe);xhr=r(NLt,"unispeech"),NLt.forEach(t),$hr=r(UIe," \u2014 "),yH=n(UIe,"A",{href:!0});var ILt=s(yH);khr=r(ILt,"UniSpeechForCTC"),ILt.forEach(t),Shr=r(UIe," (UniSpeech model)"),UIe.forEach(t),Rhr=i(Be),C7=n(Be,"LI",{});var JIe=s(C7);_Fe=n(JIe,"STRONG",{});var qLt=s(_Fe);Phr=r(qLt,"unispeech-sat"),qLt.forEach(t),Bhr=r(JIe," \u2014 "),xH=n(JIe,"A",{href:!0});var jLt=s(xH);Nhr=r(jLt,"UniSpeechSatForCTC"),jLt.forEach(t),Ihr=r(JIe," (UniSpeechSat model)"),JIe.forEach(t),qhr=i(Be),w7=n(Be,"LI",{});var YIe=s(w7);uFe=n(YIe,"STRONG",{});var DLt=s(uFe);jhr=r(DLt,"wav2vec2"),DLt.forEach(t),Dhr=r(YIe," \u2014 "),$H=n(YIe,"A",{href:!0});var GLt=s($H);Ghr=r(GLt,"Wav2Vec2ForCTC"),GLt.forEach(t),Ohr=r(YIe," (Wav2Vec2 model)"),YIe.forEach(t),Vhr=i(Be),A7=n(Be,"LI",{});var KIe=s(A7);bFe=n(KIe,"STRONG",{});var OLt=s(bFe);Xhr=r(OLt,"wav2vec2-conformer"),OLt.forEach(t),zhr=r(KIe," \u2014 "),kH=n(KIe,"A",{href:!0});var VLt=s(kH);Qhr=r(VLt,"Wav2Vec2ConformerForCTC"),VLt.forEach(t),Whr=r(KIe," (Wav2Vec2-Conformer model)"),KIe.forEach(t),Hhr=i(Be),L7=n(Be,"LI",{});var ZIe=s(L7);vFe=n(ZIe,"STRONG",{});var XLt=s(vFe);Uhr=r(XLt,"wavlm"),XLt.forEach(t),Jhr=r(ZIe," \u2014 "),SH=n(ZIe,"A",{href:!0});var zLt=s(SH);Yhr=r(zLt,"WavLMForCTC"),zLt.forEach(t),Khr=r(ZIe," (WavLM model)"),ZIe.forEach(t),Be.forEach(t),Zhr=i(Ca),y7=n(Ca,"P",{});var eqe=s(y7);epr=r(eqe,"The model is set in evaluation mode by default using "),FFe=n(eqe,"CODE",{});var QLt=s(FFe);opr=r(QLt,"model.eval()"),QLt.forEach(t),rpr=r(eqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TFe=n(eqe,"CODE",{});var WLt=s(TFe);tpr=r(WLt,"model.train()"),WLt.forEach(t),eqe.forEach(t),apr=i(Ca),T(x7.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),pze=i(f),jd=n(f,"H2",{class:!0});var TWe=s(jd);$7=n(TWe,"A",{id:!0,class:!0,href:!0});var HLt=s($7);MFe=n(HLt,"SPAN",{});var ULt=s(MFe);T(g9.$$.fragment,ULt),ULt.forEach(t),HLt.forEach(t),npr=i(TWe),EFe=n(TWe,"SPAN",{});var JLt=s(EFe);spr=r(JLt,"AutoModelForSpeechSeq2Seq"),JLt.forEach(t),TWe.forEach(t),_ze=i(f),Ho=n(f,"DIV",{class:!0});var Tl=s(Ho);T(h9.$$.fragment,Tl),lpr=i(Tl),Dd=n(Tl,"P",{});var Ete=s(Dd);ipr=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RH=n(Ete,"A",{href:!0});var YLt=s(RH);dpr=r(YLt,"from_pretrained()"),YLt.forEach(t),cpr=r(Ete," class method or the "),PH=n(Ete,"A",{href:!0});var KLt=s(PH);fpr=r(KLt,"from_config()"),KLt.forEach(t),mpr=r(Ete,` class
method.`),Ete.forEach(t),gpr=i(Tl),p9=n(Tl,"P",{});var MWe=s(p9);hpr=r(MWe,"This class cannot be instantiated directly using "),CFe=n(MWe,"CODE",{});var ZLt=s(CFe);ppr=r(ZLt,"__init__()"),ZLt.forEach(t),_pr=r(MWe," (throws an error)."),MWe.forEach(t),upr=i(Tl),At=n(Tl,"DIV",{class:!0});var Hw=s(At);T(_9.$$.fragment,Hw),bpr=i(Hw),wFe=n(Hw,"P",{});var eyt=s(wFe);vpr=r(eyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eyt.forEach(t),Fpr=i(Hw),Gd=n(Hw,"P",{});var Cte=s(Gd);Tpr=r(Cte,`Note:
Loading a model from its configuration file does `),AFe=n(Cte,"STRONG",{});var oyt=s(AFe);Mpr=r(oyt,"not"),oyt.forEach(t),Epr=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(Cte,"A",{href:!0});var ryt=s(BH);Cpr=r(ryt,"from_pretrained()"),ryt.forEach(t),wpr=r(Cte," to load the model weights."),Cte.forEach(t),Apr=i(Hw),T(k7.$$.fragment,Hw),Hw.forEach(t),Lpr=i(Tl),po=n(Tl,"DIV",{class:!0});var wa=s(po);T(u9.$$.fragment,wa),ypr=i(wa),LFe=n(wa,"P",{});var tyt=s(LFe);xpr=r(tyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tyt.forEach(t),$pr=i(wa),Za=n(wa,"P",{});var Uw=s(Za);kpr=r(Uw,"The model class to instantiate is selected based on the "),yFe=n(Uw,"CODE",{});var ayt=s(yFe);Spr=r(ayt,"model_type"),ayt.forEach(t),Rpr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),xFe=n(Uw,"CODE",{});var nyt=s(xFe);Ppr=r(nyt,"pretrained_model_name_or_path"),nyt.forEach(t),Bpr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=n(Uw,"CODE",{});var syt=s($Fe);Npr=r(syt,"pretrained_model_name_or_path"),syt.forEach(t),Ipr=r(Uw,":"),Uw.forEach(t),qpr=i(wa),b9=n(wa,"UL",{});var EWe=s(b9);S7=n(EWe,"LI",{});var oqe=s(S7);kFe=n(oqe,"STRONG",{});var lyt=s(kFe);jpr=r(lyt,"speech-encoder-decoder"),lyt.forEach(t),Dpr=r(oqe," \u2014 "),NH=n(oqe,"A",{href:!0});var iyt=s(NH);Gpr=r(iyt,"SpeechEncoderDecoderModel"),iyt.forEach(t),Opr=r(oqe," (Speech Encoder decoder model)"),oqe.forEach(t),Vpr=i(EWe),R7=n(EWe,"LI",{});var rqe=s(R7);SFe=n(rqe,"STRONG",{});var dyt=s(SFe);Xpr=r(dyt,"speech_to_text"),dyt.forEach(t),zpr=r(rqe," \u2014 "),IH=n(rqe,"A",{href:!0});var cyt=s(IH);Qpr=r(cyt,"Speech2TextForConditionalGeneration"),cyt.forEach(t),Wpr=r(rqe," (Speech2Text model)"),rqe.forEach(t),EWe.forEach(t),Hpr=i(wa),P7=n(wa,"P",{});var tqe=s(P7);Upr=r(tqe,"The model is set in evaluation mode by default using "),RFe=n(tqe,"CODE",{});var fyt=s(RFe);Jpr=r(fyt,"model.eval()"),fyt.forEach(t),Ypr=r(tqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PFe=n(tqe,"CODE",{});var myt=s(PFe);Kpr=r(myt,"model.train()"),myt.forEach(t),tqe.forEach(t),Zpr=i(wa),T(B7.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),uze=i(f),Od=n(f,"H2",{class:!0});var CWe=s(Od);N7=n(CWe,"A",{id:!0,class:!0,href:!0});var gyt=s(N7);BFe=n(gyt,"SPAN",{});var hyt=s(BFe);T(v9.$$.fragment,hyt),hyt.forEach(t),gyt.forEach(t),e_r=i(CWe),NFe=n(CWe,"SPAN",{});var pyt=s(NFe);o_r=r(pyt,"AutoModelForAudioXVector"),pyt.forEach(t),CWe.forEach(t),bze=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(F9.$$.fragment,Ml),r_r=i(Ml),Vd=n(Ml,"P",{});var wte=s(Vd);t_r=r(wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qH=n(wte,"A",{href:!0});var _yt=s(qH);a_r=r(_yt,"from_pretrained()"),_yt.forEach(t),n_r=r(wte," class method or the "),jH=n(wte,"A",{href:!0});var uyt=s(jH);s_r=r(uyt,"from_config()"),uyt.forEach(t),l_r=r(wte,` class
method.`),wte.forEach(t),i_r=i(Ml),T9=n(Ml,"P",{});var wWe=s(T9);d_r=r(wWe,"This class cannot be instantiated directly using "),IFe=n(wWe,"CODE",{});var byt=s(IFe);c_r=r(byt,"__init__()"),byt.forEach(t),f_r=r(wWe," (throws an error)."),wWe.forEach(t),m_r=i(Ml),Lt=n(Ml,"DIV",{class:!0});var Jw=s(Lt);T(M9.$$.fragment,Jw),g_r=i(Jw),qFe=n(Jw,"P",{});var vyt=s(qFe);h_r=r(vyt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),vyt.forEach(t),p_r=i(Jw),Xd=n(Jw,"P",{});var Ate=s(Xd);__r=r(Ate,`Note:
Loading a model from its configuration file does `),jFe=n(Ate,"STRONG",{});var Fyt=s(jFe);u_r=r(Fyt,"not"),Fyt.forEach(t),b_r=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(Ate,"A",{href:!0});var Tyt=s(DH);v_r=r(Tyt,"from_pretrained()"),Tyt.forEach(t),F_r=r(Ate," to load the model weights."),Ate.forEach(t),T_r=i(Jw),T(I7.$$.fragment,Jw),Jw.forEach(t),M_r=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(E9.$$.fragment,Aa),E_r=i(Aa),DFe=n(Aa,"P",{});var Myt=s(DFe);C_r=r(Myt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Myt.forEach(t),w_r=i(Aa),en=n(Aa,"P",{});var Yw=s(en);A_r=r(Yw,"The model class to instantiate is selected based on the "),GFe=n(Yw,"CODE",{});var Eyt=s(GFe);L_r=r(Eyt,"model_type"),Eyt.forEach(t),y_r=r(Yw,` property of the config object (either
passed as an argument or loaded from `),OFe=n(Yw,"CODE",{});var Cyt=s(OFe);x_r=r(Cyt,"pretrained_model_name_or_path"),Cyt.forEach(t),$_r=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(Yw,"CODE",{});var wyt=s(VFe);k_r=r(wyt,"pretrained_model_name_or_path"),wyt.forEach(t),S_r=r(Yw,":"),Yw.forEach(t),R_r=i(Aa),tt=n(Aa,"UL",{});var El=s(tt);q7=n(El,"LI",{});var aqe=s(q7);XFe=n(aqe,"STRONG",{});var Ayt=s(XFe);P_r=r(Ayt,"data2vec-audio"),Ayt.forEach(t),B_r=r(aqe," \u2014 "),GH=n(aqe,"A",{href:!0});var Lyt=s(GH);N_r=r(Lyt,"Data2VecAudioForXVector"),Lyt.forEach(t),I_r=r(aqe," (Data2VecAudio model)"),aqe.forEach(t),q_r=i(El),j7=n(El,"LI",{});var nqe=s(j7);zFe=n(nqe,"STRONG",{});var yyt=s(zFe);j_r=r(yyt,"unispeech-sat"),yyt.forEach(t),D_r=r(nqe," \u2014 "),OH=n(nqe,"A",{href:!0});var xyt=s(OH);G_r=r(xyt,"UniSpeechSatForXVector"),xyt.forEach(t),O_r=r(nqe," (UniSpeechSat model)"),nqe.forEach(t),V_r=i(El),D7=n(El,"LI",{});var sqe=s(D7);QFe=n(sqe,"STRONG",{});var $yt=s(QFe);X_r=r($yt,"wav2vec2"),$yt.forEach(t),z_r=r(sqe," \u2014 "),VH=n(sqe,"A",{href:!0});var kyt=s(VH);Q_r=r(kyt,"Wav2Vec2ForXVector"),kyt.forEach(t),W_r=r(sqe," (Wav2Vec2 model)"),sqe.forEach(t),H_r=i(El),G7=n(El,"LI",{});var lqe=s(G7);WFe=n(lqe,"STRONG",{});var Syt=s(WFe);U_r=r(Syt,"wav2vec2-conformer"),Syt.forEach(t),J_r=r(lqe," \u2014 "),XH=n(lqe,"A",{href:!0});var Ryt=s(XH);Y_r=r(Ryt,"Wav2Vec2ConformerForXVector"),Ryt.forEach(t),K_r=r(lqe," (Wav2Vec2-Conformer model)"),lqe.forEach(t),Z_r=i(El),O7=n(El,"LI",{});var iqe=s(O7);HFe=n(iqe,"STRONG",{});var Pyt=s(HFe);eur=r(Pyt,"wavlm"),Pyt.forEach(t),our=r(iqe," \u2014 "),zH=n(iqe,"A",{href:!0});var Byt=s(zH);rur=r(Byt,"WavLMForXVector"),Byt.forEach(t),tur=r(iqe," (WavLM model)"),iqe.forEach(t),El.forEach(t),aur=i(Aa),V7=n(Aa,"P",{});var dqe=s(V7);nur=r(dqe,"The model is set in evaluation mode by default using "),UFe=n(dqe,"CODE",{});var Nyt=s(UFe);sur=r(Nyt,"model.eval()"),Nyt.forEach(t),lur=r(dqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JFe=n(dqe,"CODE",{});var Iyt=s(JFe);iur=r(Iyt,"model.train()"),Iyt.forEach(t),dqe.forEach(t),dur=i(Aa),T(X7.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),vze=i(f),zd=n(f,"H2",{class:!0});var AWe=s(zd);z7=n(AWe,"A",{id:!0,class:!0,href:!0});var qyt=s(z7);YFe=n(qyt,"SPAN",{});var jyt=s(YFe);T(C9.$$.fragment,jyt),jyt.forEach(t),qyt.forEach(t),cur=i(AWe),KFe=n(AWe,"SPAN",{});var Dyt=s(KFe);fur=r(Dyt,"AutoModelForMaskedImageModeling"),Dyt.forEach(t),AWe.forEach(t),Fze=i(f),Jo=n(f,"DIV",{class:!0});var Cl=s(Jo);T(w9.$$.fragment,Cl),mur=i(Cl),Qd=n(Cl,"P",{});var Lte=s(Qd);gur=r(Lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QH=n(Lte,"A",{href:!0});var Gyt=s(QH);hur=r(Gyt,"from_pretrained()"),Gyt.forEach(t),pur=r(Lte," class method or the "),WH=n(Lte,"A",{href:!0});var Oyt=s(WH);_ur=r(Oyt,"from_config()"),Oyt.forEach(t),uur=r(Lte,` class
method.`),Lte.forEach(t),bur=i(Cl),A9=n(Cl,"P",{});var LWe=s(A9);vur=r(LWe,"This class cannot be instantiated directly using "),ZFe=n(LWe,"CODE",{});var Vyt=s(ZFe);Fur=r(Vyt,"__init__()"),Vyt.forEach(t),Tur=r(LWe," (throws an error)."),LWe.forEach(t),Mur=i(Cl),yt=n(Cl,"DIV",{class:!0});var Kw=s(yt);T(L9.$$.fragment,Kw),Eur=i(Kw),e6e=n(Kw,"P",{});var Xyt=s(e6e);Cur=r(Xyt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Xyt.forEach(t),wur=i(Kw),Wd=n(Kw,"P",{});var yte=s(Wd);Aur=r(yte,`Note:
Loading a model from its configuration file does `),o6e=n(yte,"STRONG",{});var zyt=s(o6e);Lur=r(zyt,"not"),zyt.forEach(t),yur=r(yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(yte,"A",{href:!0});var Qyt=s(HH);xur=r(Qyt,"from_pretrained()"),Qyt.forEach(t),$ur=r(yte," to load the model weights."),yte.forEach(t),kur=i(Kw),T(Q7.$$.fragment,Kw),Kw.forEach(t),Sur=i(Cl),uo=n(Cl,"DIV",{class:!0});var La=s(uo);T(y9.$$.fragment,La),Rur=i(La),r6e=n(La,"P",{});var Wyt=s(r6e);Pur=r(Wyt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Wyt.forEach(t),Bur=i(La),on=n(La,"P",{});var Zw=s(on);Nur=r(Zw,"The model class to instantiate is selected based on the "),t6e=n(Zw,"CODE",{});var Hyt=s(t6e);Iur=r(Hyt,"model_type"),Hyt.forEach(t),qur=r(Zw,` property of the config object (either
passed as an argument or loaded from `),a6e=n(Zw,"CODE",{});var Uyt=s(a6e);jur=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),Dur=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=n(Zw,"CODE",{});var Jyt=s(n6e);Gur=r(Jyt,"pretrained_model_name_or_path"),Jyt.forEach(t),Our=r(Zw,":"),Zw.forEach(t),Vur=i(La),Hd=n(La,"UL",{});var xte=s(Hd);W7=n(xte,"LI",{});var cqe=s(W7);s6e=n(cqe,"STRONG",{});var Yyt=s(s6e);Xur=r(Yyt,"deit"),Yyt.forEach(t),zur=r(cqe," \u2014 "),UH=n(cqe,"A",{href:!0});var Kyt=s(UH);Qur=r(Kyt,"DeiTForMaskedImageModeling"),Kyt.forEach(t),Wur=r(cqe," (DeiT model)"),cqe.forEach(t),Hur=i(xte),H7=n(xte,"LI",{});var fqe=s(H7);l6e=n(fqe,"STRONG",{});var Zyt=s(l6e);Uur=r(Zyt,"swin"),Zyt.forEach(t),Jur=r(fqe," \u2014 "),JH=n(fqe,"A",{href:!0});var e9t=s(JH);Yur=r(e9t,"SwinForMaskedImageModeling"),e9t.forEach(t),Kur=r(fqe," (Swin Transformer model)"),fqe.forEach(t),Zur=i(xte),U7=n(xte,"LI",{});var mqe=s(U7);i6e=n(mqe,"STRONG",{});var o9t=s(i6e);e2r=r(o9t,"vit"),o9t.forEach(t),o2r=r(mqe," \u2014 "),YH=n(mqe,"A",{href:!0});var r9t=s(YH);r2r=r(r9t,"ViTForMaskedImageModeling"),r9t.forEach(t),t2r=r(mqe," (ViT model)"),mqe.forEach(t),xte.forEach(t),a2r=i(La),J7=n(La,"P",{});var gqe=s(J7);n2r=r(gqe,"The model is set in evaluation mode by default using "),d6e=n(gqe,"CODE",{});var t9t=s(d6e);s2r=r(t9t,"model.eval()"),t9t.forEach(t),l2r=r(gqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c6e=n(gqe,"CODE",{});var a9t=s(c6e);i2r=r(a9t,"model.train()"),a9t.forEach(t),gqe.forEach(t),d2r=i(La),T(Y7.$$.fragment,La),La.forEach(t),Cl.forEach(t),Tze=i(f),Ud=n(f,"H2",{class:!0});var yWe=s(Ud);K7=n(yWe,"A",{id:!0,class:!0,href:!0});var n9t=s(K7);f6e=n(n9t,"SPAN",{});var s9t=s(f6e);T(x9.$$.fragment,s9t),s9t.forEach(t),n9t.forEach(t),c2r=i(yWe),m6e=n(yWe,"SPAN",{});var l9t=s(m6e);f2r=r(l9t,"AutoModelForObjectDetection"),l9t.forEach(t),yWe.forEach(t),Mze=i(f),Yo=n(f,"DIV",{class:!0});var wl=s(Yo);T($9.$$.fragment,wl),m2r=i(wl),Jd=n(wl,"P",{});var $te=s(Jd);g2r=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),KH=n($te,"A",{href:!0});var i9t=s(KH);h2r=r(i9t,"from_pretrained()"),i9t.forEach(t),p2r=r($te," class method or the "),ZH=n($te,"A",{href:!0});var d9t=s(ZH);_2r=r(d9t,"from_config()"),d9t.forEach(t),u2r=r($te,` class
method.`),$te.forEach(t),b2r=i(wl),k9=n(wl,"P",{});var xWe=s(k9);v2r=r(xWe,"This class cannot be instantiated directly using "),g6e=n(xWe,"CODE",{});var c9t=s(g6e);F2r=r(c9t,"__init__()"),c9t.forEach(t),T2r=r(xWe," (throws an error)."),xWe.forEach(t),M2r=i(wl),xt=n(wl,"DIV",{class:!0});var eA=s(xt);T(S9.$$.fragment,eA),E2r=i(eA),h6e=n(eA,"P",{});var f9t=s(h6e);C2r=r(f9t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),f9t.forEach(t),w2r=i(eA),Yd=n(eA,"P",{});var kte=s(Yd);A2r=r(kte,`Note:
Loading a model from its configuration file does `),p6e=n(kte,"STRONG",{});var m9t=s(p6e);L2r=r(m9t,"not"),m9t.forEach(t),y2r=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=n(kte,"A",{href:!0});var g9t=s(eU);x2r=r(g9t,"from_pretrained()"),g9t.forEach(t),$2r=r(kte," to load the model weights."),kte.forEach(t),k2r=i(eA),T(Z7.$$.fragment,eA),eA.forEach(t),S2r=i(wl),bo=n(wl,"DIV",{class:!0});var ya=s(bo);T(R9.$$.fragment,ya),R2r=i(ya),_6e=n(ya,"P",{});var h9t=s(_6e);P2r=r(h9t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),h9t.forEach(t),B2r=i(ya),rn=n(ya,"P",{});var oA=s(rn);N2r=r(oA,"The model class to instantiate is selected based on the "),u6e=n(oA,"CODE",{});var p9t=s(u6e);I2r=r(p9t,"model_type"),p9t.forEach(t),q2r=r(oA,` property of the config object (either
passed as an argument or loaded from `),b6e=n(oA,"CODE",{});var _9t=s(b6e);j2r=r(_9t,"pretrained_model_name_or_path"),_9t.forEach(t),D2r=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=n(oA,"CODE",{});var u9t=s(v6e);G2r=r(u9t,"pretrained_model_name_or_path"),u9t.forEach(t),O2r=r(oA,":"),oA.forEach(t),V2r=i(ya),P9=n(ya,"UL",{});var $We=s(P9);e8=n($We,"LI",{});var hqe=s(e8);F6e=n(hqe,"STRONG",{});var b9t=s(F6e);X2r=r(b9t,"detr"),b9t.forEach(t),z2r=r(hqe," \u2014 "),oU=n(hqe,"A",{href:!0});var v9t=s(oU);Q2r=r(v9t,"DetrForObjectDetection"),v9t.forEach(t),W2r=r(hqe," (DETR model)"),hqe.forEach(t),H2r=i($We),o8=n($We,"LI",{});var pqe=s(o8);T6e=n(pqe,"STRONG",{});var F9t=s(T6e);U2r=r(F9t,"yolos"),F9t.forEach(t),J2r=r(pqe," \u2014 "),rU=n(pqe,"A",{href:!0});var T9t=s(rU);Y2r=r(T9t,"YolosForObjectDetection"),T9t.forEach(t),K2r=r(pqe," (YOLOS model)"),pqe.forEach(t),$We.forEach(t),Z2r=i(ya),r8=n(ya,"P",{});var _qe=s(r8);e1r=r(_qe,"The model is set in evaluation mode by default using "),M6e=n(_qe,"CODE",{});var M9t=s(M6e);o1r=r(M9t,"model.eval()"),M9t.forEach(t),r1r=r(_qe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E6e=n(_qe,"CODE",{});var E9t=s(E6e);t1r=r(E9t,"model.train()"),E9t.forEach(t),_qe.forEach(t),a1r=i(ya),T(t8.$$.fragment,ya),ya.forEach(t),wl.forEach(t),Eze=i(f),Kd=n(f,"H2",{class:!0});var kWe=s(Kd);a8=n(kWe,"A",{id:!0,class:!0,href:!0});var C9t=s(a8);C6e=n(C9t,"SPAN",{});var w9t=s(C6e);T(B9.$$.fragment,w9t),w9t.forEach(t),C9t.forEach(t),n1r=i(kWe),w6e=n(kWe,"SPAN",{});var A9t=s(w6e);s1r=r(A9t,"AutoModelForImageSegmentation"),A9t.forEach(t),kWe.forEach(t),Cze=i(f),Ko=n(f,"DIV",{class:!0});var Al=s(Ko);T(N9.$$.fragment,Al),l1r=i(Al),Zd=n(Al,"P",{});var Ste=s(Zd);i1r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tU=n(Ste,"A",{href:!0});var L9t=s(tU);d1r=r(L9t,"from_pretrained()"),L9t.forEach(t),c1r=r(Ste," class method or the "),aU=n(Ste,"A",{href:!0});var y9t=s(aU);f1r=r(y9t,"from_config()"),y9t.forEach(t),m1r=r(Ste,` class
method.`),Ste.forEach(t),g1r=i(Al),I9=n(Al,"P",{});var SWe=s(I9);h1r=r(SWe,"This class cannot be instantiated directly using "),A6e=n(SWe,"CODE",{});var x9t=s(A6e);p1r=r(x9t,"__init__()"),x9t.forEach(t),_1r=r(SWe," (throws an error)."),SWe.forEach(t),u1r=i(Al),$t=n(Al,"DIV",{class:!0});var rA=s($t);T(q9.$$.fragment,rA),b1r=i(rA),L6e=n(rA,"P",{});var $9t=s(L6e);v1r=r($9t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),$9t.forEach(t),F1r=i(rA),ec=n(rA,"P",{});var Rte=s(ec);T1r=r(Rte,`Note:
Loading a model from its configuration file does `),y6e=n(Rte,"STRONG",{});var k9t=s(y6e);M1r=r(k9t,"not"),k9t.forEach(t),E1r=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(Rte,"A",{href:!0});var S9t=s(nU);C1r=r(S9t,"from_pretrained()"),S9t.forEach(t),w1r=r(Rte," to load the model weights."),Rte.forEach(t),A1r=i(rA),T(n8.$$.fragment,rA),rA.forEach(t),L1r=i(Al),vo=n(Al,"DIV",{class:!0});var xa=s(vo);T(j9.$$.fragment,xa),y1r=i(xa),x6e=n(xa,"P",{});var R9t=s(x6e);x1r=r(R9t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),R9t.forEach(t),$1r=i(xa),tn=n(xa,"P",{});var tA=s(tn);k1r=r(tA,"The model class to instantiate is selected based on the "),$6e=n(tA,"CODE",{});var P9t=s($6e);S1r=r(P9t,"model_type"),P9t.forEach(t),R1r=r(tA,` property of the config object (either
passed as an argument or loaded from `),k6e=n(tA,"CODE",{});var B9t=s(k6e);P1r=r(B9t,"pretrained_model_name_or_path"),B9t.forEach(t),B1r=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S6e=n(tA,"CODE",{});var N9t=s(S6e);N1r=r(N9t,"pretrained_model_name_or_path"),N9t.forEach(t),I1r=r(tA,":"),tA.forEach(t),q1r=i(xa),R6e=n(xa,"UL",{});var I9t=s(R6e);s8=n(I9t,"LI",{});var uqe=s(s8);P6e=n(uqe,"STRONG",{});var q9t=s(P6e);j1r=r(q9t,"detr"),q9t.forEach(t),D1r=r(uqe," \u2014 "),sU=n(uqe,"A",{href:!0});var j9t=s(sU);G1r=r(j9t,"DetrForSegmentation"),j9t.forEach(t),O1r=r(uqe," (DETR model)"),uqe.forEach(t),I9t.forEach(t),V1r=i(xa),l8=n(xa,"P",{});var bqe=s(l8);X1r=r(bqe,"The model is set in evaluation mode by default using "),B6e=n(bqe,"CODE",{});var D9t=s(B6e);z1r=r(D9t,"model.eval()"),D9t.forEach(t),Q1r=r(bqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N6e=n(bqe,"CODE",{});var G9t=s(N6e);W1r=r(G9t,"model.train()"),G9t.forEach(t),bqe.forEach(t),H1r=i(xa),T(i8.$$.fragment,xa),xa.forEach(t),Al.forEach(t),wze=i(f),oc=n(f,"H2",{class:!0});var RWe=s(oc);d8=n(RWe,"A",{id:!0,class:!0,href:!0});var O9t=s(d8);I6e=n(O9t,"SPAN",{});var V9t=s(I6e);T(D9.$$.fragment,V9t),V9t.forEach(t),O9t.forEach(t),U1r=i(RWe),q6e=n(RWe,"SPAN",{});var X9t=s(q6e);J1r=r(X9t,"AutoModelForSemanticSegmentation"),X9t.forEach(t),RWe.forEach(t),Aze=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(G9.$$.fragment,Ll),Y1r=i(Ll),rc=n(Ll,"P",{});var Pte=s(rc);K1r=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),lU=n(Pte,"A",{href:!0});var z9t=s(lU);Z1r=r(z9t,"from_pretrained()"),z9t.forEach(t),ebr=r(Pte," class method or the "),iU=n(Pte,"A",{href:!0});var Q9t=s(iU);obr=r(Q9t,"from_config()"),Q9t.forEach(t),rbr=r(Pte,` class
method.`),Pte.forEach(t),tbr=i(Ll),O9=n(Ll,"P",{});var PWe=s(O9);abr=r(PWe,"This class cannot be instantiated directly using "),j6e=n(PWe,"CODE",{});var W9t=s(j6e);nbr=r(W9t,"__init__()"),W9t.forEach(t),sbr=r(PWe," (throws an error)."),PWe.forEach(t),lbr=i(Ll),kt=n(Ll,"DIV",{class:!0});var aA=s(kt);T(V9.$$.fragment,aA),ibr=i(aA),D6e=n(aA,"P",{});var H9t=s(D6e);dbr=r(H9t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),H9t.forEach(t),cbr=i(aA),tc=n(aA,"P",{});var Bte=s(tc);fbr=r(Bte,`Note:
Loading a model from its configuration file does `),G6e=n(Bte,"STRONG",{});var U9t=s(G6e);mbr=r(U9t,"not"),U9t.forEach(t),gbr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(Bte,"A",{href:!0});var J9t=s(dU);hbr=r(J9t,"from_pretrained()"),J9t.forEach(t),pbr=r(Bte," to load the model weights."),Bte.forEach(t),_br=i(aA),T(c8.$$.fragment,aA),aA.forEach(t),ubr=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(X9.$$.fragment,$a),bbr=i($a),O6e=n($a,"P",{});var Y9t=s(O6e);vbr=r(Y9t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Y9t.forEach(t),Fbr=i($a),an=n($a,"P",{});var nA=s(an);Tbr=r(nA,"The model class to instantiate is selected based on the "),V6e=n(nA,"CODE",{});var K9t=s(V6e);Mbr=r(K9t,"model_type"),K9t.forEach(t),Ebr=r(nA,` property of the config object (either
passed as an argument or loaded from `),X6e=n(nA,"CODE",{});var Z9t=s(X6e);Cbr=r(Z9t,"pretrained_model_name_or_path"),Z9t.forEach(t),wbr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z6e=n(nA,"CODE",{});var ext=s(z6e);Abr=r(ext,"pretrained_model_name_or_path"),ext.forEach(t),Lbr=r(nA,":"),nA.forEach(t),ybr=i($a),at=n($a,"UL",{});var yl=s(at);f8=n(yl,"LI",{});var vqe=s(f8);Q6e=n(vqe,"STRONG",{});var oxt=s(Q6e);xbr=r(oxt,"beit"),oxt.forEach(t),$br=r(vqe," \u2014 "),cU=n(vqe,"A",{href:!0});var rxt=s(cU);kbr=r(rxt,"BeitForSemanticSegmentation"),rxt.forEach(t),Sbr=r(vqe," (BEiT model)"),vqe.forEach(t),Rbr=i(yl),m8=n(yl,"LI",{});var Fqe=s(m8);W6e=n(Fqe,"STRONG",{});var txt=s(W6e);Pbr=r(txt,"data2vec-vision"),txt.forEach(t),Bbr=r(Fqe," \u2014 "),fU=n(Fqe,"A",{href:!0});var axt=s(fU);Nbr=r(axt,"Data2VecVisionForSemanticSegmentation"),axt.forEach(t),Ibr=r(Fqe," (Data2VecVision model)"),Fqe.forEach(t),qbr=i(yl),g8=n(yl,"LI",{});var Tqe=s(g8);H6e=n(Tqe,"STRONG",{});var nxt=s(H6e);jbr=r(nxt,"dpt"),nxt.forEach(t),Dbr=r(Tqe," \u2014 "),mU=n(Tqe,"A",{href:!0});var sxt=s(mU);Gbr=r(sxt,"DPTForSemanticSegmentation"),sxt.forEach(t),Obr=r(Tqe," (DPT model)"),Tqe.forEach(t),Vbr=i(yl),h8=n(yl,"LI",{});var Mqe=s(h8);U6e=n(Mqe,"STRONG",{});var lxt=s(U6e);Xbr=r(lxt,"mobilevit"),lxt.forEach(t),zbr=r(Mqe," \u2014 "),gU=n(Mqe,"A",{href:!0});var ixt=s(gU);Qbr=r(ixt,"MobileViTForSemanticSegmentation"),ixt.forEach(t),Wbr=r(Mqe," (MobileViT model)"),Mqe.forEach(t),Hbr=i(yl),p8=n(yl,"LI",{});var Eqe=s(p8);J6e=n(Eqe,"STRONG",{});var dxt=s(J6e);Ubr=r(dxt,"segformer"),dxt.forEach(t),Jbr=r(Eqe," \u2014 "),hU=n(Eqe,"A",{href:!0});var cxt=s(hU);Ybr=r(cxt,"SegformerForSemanticSegmentation"),cxt.forEach(t),Kbr=r(Eqe," (SegFormer model)"),Eqe.forEach(t),yl.forEach(t),Zbr=i($a),_8=n($a,"P",{});var Cqe=s(_8);evr=r(Cqe,"The model is set in evaluation mode by default using "),Y6e=n(Cqe,"CODE",{});var fxt=s(Y6e);ovr=r(fxt,"model.eval()"),fxt.forEach(t),rvr=r(Cqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K6e=n(Cqe,"CODE",{});var mxt=s(K6e);tvr=r(mxt,"model.train()"),mxt.forEach(t),Cqe.forEach(t),avr=i($a),T(u8.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),Lze=i(f),ac=n(f,"H2",{class:!0});var BWe=s(ac);b8=n(BWe,"A",{id:!0,class:!0,href:!0});var gxt=s(b8);Z6e=n(gxt,"SPAN",{});var hxt=s(Z6e);T(z9.$$.fragment,hxt),hxt.forEach(t),gxt.forEach(t),nvr=i(BWe),eTe=n(BWe,"SPAN",{});var pxt=s(eTe);svr=r(pxt,"AutoModelForInstanceSegmentation"),pxt.forEach(t),BWe.forEach(t),yze=i(f),er=n(f,"DIV",{class:!0});var xl=s(er);T(Q9.$$.fragment,xl),lvr=i(xl),nc=n(xl,"P",{});var Nte=s(nc);ivr=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pU=n(Nte,"A",{href:!0});var _xt=s(pU);dvr=r(_xt,"from_pretrained()"),_xt.forEach(t),cvr=r(Nte," class method or the "),_U=n(Nte,"A",{href:!0});var uxt=s(_U);fvr=r(uxt,"from_config()"),uxt.forEach(t),mvr=r(Nte,` class
method.`),Nte.forEach(t),gvr=i(xl),W9=n(xl,"P",{});var NWe=s(W9);hvr=r(NWe,"This class cannot be instantiated directly using "),oTe=n(NWe,"CODE",{});var bxt=s(oTe);pvr=r(bxt,"__init__()"),bxt.forEach(t),_vr=r(NWe," (throws an error)."),NWe.forEach(t),uvr=i(xl),St=n(xl,"DIV",{class:!0});var sA=s(St);T(H9.$$.fragment,sA),bvr=i(sA),rTe=n(sA,"P",{});var vxt=s(rTe);vvr=r(vxt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),vxt.forEach(t),Fvr=i(sA),sc=n(sA,"P",{});var Ite=s(sc);Tvr=r(Ite,`Note:
Loading a model from its configuration file does `),tTe=n(Ite,"STRONG",{});var Fxt=s(tTe);Mvr=r(Fxt,"not"),Fxt.forEach(t),Evr=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(Ite,"A",{href:!0});var Txt=s(uU);Cvr=r(Txt,"from_pretrained()"),Txt.forEach(t),wvr=r(Ite," to load the model weights."),Ite.forEach(t),Avr=i(sA),T(v8.$$.fragment,sA),sA.forEach(t),Lvr=i(xl),To=n(xl,"DIV",{class:!0});var ka=s(To);T(U9.$$.fragment,ka),yvr=i(ka),aTe=n(ka,"P",{});var Mxt=s(aTe);xvr=r(Mxt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Mxt.forEach(t),$vr=i(ka),nn=n(ka,"P",{});var lA=s(nn);kvr=r(lA,"The model class to instantiate is selected based on the "),nTe=n(lA,"CODE",{});var Ext=s(nTe);Svr=r(Ext,"model_type"),Ext.forEach(t),Rvr=r(lA,` property of the config object (either
passed as an argument or loaded from `),sTe=n(lA,"CODE",{});var Cxt=s(sTe);Pvr=r(Cxt,"pretrained_model_name_or_path"),Cxt.forEach(t),Bvr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=n(lA,"CODE",{});var wxt=s(lTe);Nvr=r(wxt,"pretrained_model_name_or_path"),wxt.forEach(t),Ivr=r(lA,":"),lA.forEach(t),qvr=i(ka),iTe=n(ka,"UL",{});var Axt=s(iTe);F8=n(Axt,"LI",{});var wqe=s(F8);dTe=n(wqe,"STRONG",{});var Lxt=s(dTe);jvr=r(Lxt,"maskformer"),Lxt.forEach(t),Dvr=r(wqe," \u2014 "),bU=n(wqe,"A",{href:!0});var yxt=s(bU);Gvr=r(yxt,"MaskFormerForInstanceSegmentation"),yxt.forEach(t),Ovr=r(wqe," (MaskFormer model)"),wqe.forEach(t),Axt.forEach(t),Vvr=i(ka),T8=n(ka,"P",{});var Aqe=s(T8);Xvr=r(Aqe,"The model is set in evaluation mode by default using "),cTe=n(Aqe,"CODE",{});var xxt=s(cTe);zvr=r(xxt,"model.eval()"),xxt.forEach(t),Qvr=r(Aqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fTe=n(Aqe,"CODE",{});var $xt=s(fTe);Wvr=r($xt,"model.train()"),$xt.forEach(t),Aqe.forEach(t),Hvr=i(ka),T(M8.$$.fragment,ka),ka.forEach(t),xl.forEach(t),xze=i(f),lc=n(f,"H2",{class:!0});var IWe=s(lc);E8=n(IWe,"A",{id:!0,class:!0,href:!0});var kxt=s(E8);mTe=n(kxt,"SPAN",{});var Sxt=s(mTe);T(J9.$$.fragment,Sxt),Sxt.forEach(t),kxt.forEach(t),Uvr=i(IWe),gTe=n(IWe,"SPAN",{});var Rxt=s(gTe);Jvr=r(Rxt,"TFAutoModel"),Rxt.forEach(t),IWe.forEach(t),$ze=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(Y9.$$.fragment,$l),Yvr=i($l),ic=n($l,"P",{});var qte=s(ic);Kvr=r(qte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vU=n(qte,"A",{href:!0});var Pxt=s(vU);Zvr=r(Pxt,"from_pretrained()"),Pxt.forEach(t),eFr=r(qte," class method or the "),FU=n(qte,"A",{href:!0});var Bxt=s(FU);oFr=r(Bxt,"from_config()"),Bxt.forEach(t),rFr=r(qte,` class
method.`),qte.forEach(t),tFr=i($l),K9=n($l,"P",{});var qWe=s(K9);aFr=r(qWe,"This class cannot be instantiated directly using "),hTe=n(qWe,"CODE",{});var Nxt=s(hTe);nFr=r(Nxt,"__init__()"),Nxt.forEach(t),sFr=r(qWe," (throws an error)."),qWe.forEach(t),lFr=i($l),Rt=n($l,"DIV",{class:!0});var iA=s(Rt);T(Z9.$$.fragment,iA),iFr=i(iA),pTe=n(iA,"P",{});var Ixt=s(pTe);dFr=r(Ixt,"Instantiates one of the base model classes of the library from a configuration."),Ixt.forEach(t),cFr=i(iA),dc=n(iA,"P",{});var jte=s(dc);fFr=r(jte,`Note:
Loading a model from its configuration file does `),_Te=n(jte,"STRONG",{});var qxt=s(_Te);mFr=r(qxt,"not"),qxt.forEach(t),gFr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(jte,"A",{href:!0});var jxt=s(TU);hFr=r(jxt,"from_pretrained()"),jxt.forEach(t),pFr=r(jte," to load the model weights."),jte.forEach(t),_Fr=i(iA),T(C8.$$.fragment,iA),iA.forEach(t),uFr=i($l),xr=n($l,"DIV",{class:!0});var kl=s(xr);T(ex.$$.fragment,kl),bFr=i(kl),uTe=n(kl,"P",{});var Dxt=s(uTe);vFr=r(Dxt,"Instantiate one of the base model classes of the library from a pretrained model."),Dxt.forEach(t),FFr=i(kl),sn=n(kl,"P",{});var dA=s(sn);TFr=r(dA,"The model class to instantiate is selected based on the "),bTe=n(dA,"CODE",{});var Gxt=s(bTe);MFr=r(Gxt,"model_type"),Gxt.forEach(t),EFr=r(dA,` property of the config object (either
passed as an argument or loaded from `),vTe=n(dA,"CODE",{});var Oxt=s(vTe);CFr=r(Oxt,"pretrained_model_name_or_path"),Oxt.forEach(t),wFr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(dA,"CODE",{});var Vxt=s(FTe);AFr=r(Vxt,"pretrained_model_name_or_path"),Vxt.forEach(t),LFr=r(dA,":"),dA.forEach(t),yFr=i(kl),q=n(kl,"UL",{});var D=s(q);w8=n(D,"LI",{});var Lqe=s(w8);TTe=n(Lqe,"STRONG",{});var Xxt=s(TTe);xFr=r(Xxt,"albert"),Xxt.forEach(t),$Fr=r(Lqe," \u2014 "),MU=n(Lqe,"A",{href:!0});var zxt=s(MU);kFr=r(zxt,"TFAlbertModel"),zxt.forEach(t),SFr=r(Lqe," (ALBERT model)"),Lqe.forEach(t),RFr=i(D),A8=n(D,"LI",{});var yqe=s(A8);MTe=n(yqe,"STRONG",{});var Qxt=s(MTe);PFr=r(Qxt,"bart"),Qxt.forEach(t),BFr=r(yqe," \u2014 "),EU=n(yqe,"A",{href:!0});var Wxt=s(EU);NFr=r(Wxt,"TFBartModel"),Wxt.forEach(t),IFr=r(yqe," (BART model)"),yqe.forEach(t),qFr=i(D),L8=n(D,"LI",{});var xqe=s(L8);ETe=n(xqe,"STRONG",{});var Hxt=s(ETe);jFr=r(Hxt,"bert"),Hxt.forEach(t),DFr=r(xqe," \u2014 "),CU=n(xqe,"A",{href:!0});var Uxt=s(CU);GFr=r(Uxt,"TFBertModel"),Uxt.forEach(t),OFr=r(xqe," (BERT model)"),xqe.forEach(t),VFr=i(D),y8=n(D,"LI",{});var $qe=s(y8);CTe=n($qe,"STRONG",{});var Jxt=s(CTe);XFr=r(Jxt,"blenderbot"),Jxt.forEach(t),zFr=r($qe," \u2014 "),wU=n($qe,"A",{href:!0});var Yxt=s(wU);QFr=r(Yxt,"TFBlenderbotModel"),Yxt.forEach(t),WFr=r($qe," (Blenderbot model)"),$qe.forEach(t),HFr=i(D),x8=n(D,"LI",{});var kqe=s(x8);wTe=n(kqe,"STRONG",{});var Kxt=s(wTe);UFr=r(Kxt,"blenderbot-small"),Kxt.forEach(t),JFr=r(kqe," \u2014 "),AU=n(kqe,"A",{href:!0});var Zxt=s(AU);YFr=r(Zxt,"TFBlenderbotSmallModel"),Zxt.forEach(t),KFr=r(kqe," (BlenderbotSmall model)"),kqe.forEach(t),ZFr=i(D),$8=n(D,"LI",{});var Sqe=s($8);ATe=n(Sqe,"STRONG",{});var e$t=s(ATe);e6r=r(e$t,"camembert"),e$t.forEach(t),o6r=r(Sqe," \u2014 "),LU=n(Sqe,"A",{href:!0});var o$t=s(LU);r6r=r(o$t,"TFCamembertModel"),o$t.forEach(t),t6r=r(Sqe," (CamemBERT model)"),Sqe.forEach(t),a6r=i(D),k8=n(D,"LI",{});var Rqe=s(k8);LTe=n(Rqe,"STRONG",{});var r$t=s(LTe);n6r=r(r$t,"clip"),r$t.forEach(t),s6r=r(Rqe," \u2014 "),yU=n(Rqe,"A",{href:!0});var t$t=s(yU);l6r=r(t$t,"TFCLIPModel"),t$t.forEach(t),i6r=r(Rqe," (CLIP model)"),Rqe.forEach(t),d6r=i(D),S8=n(D,"LI",{});var Pqe=s(S8);yTe=n(Pqe,"STRONG",{});var a$t=s(yTe);c6r=r(a$t,"convbert"),a$t.forEach(t),f6r=r(Pqe," \u2014 "),xU=n(Pqe,"A",{href:!0});var n$t=s(xU);m6r=r(n$t,"TFConvBertModel"),n$t.forEach(t),g6r=r(Pqe," (ConvBERT model)"),Pqe.forEach(t),h6r=i(D),R8=n(D,"LI",{});var Bqe=s(R8);xTe=n(Bqe,"STRONG",{});var s$t=s(xTe);p6r=r(s$t,"convnext"),s$t.forEach(t),_6r=r(Bqe," \u2014 "),$U=n(Bqe,"A",{href:!0});var l$t=s($U);u6r=r(l$t,"TFConvNextModel"),l$t.forEach(t),b6r=r(Bqe," (ConvNeXT model)"),Bqe.forEach(t),v6r=i(D),P8=n(D,"LI",{});var Nqe=s(P8);$Te=n(Nqe,"STRONG",{});var i$t=s($Te);F6r=r(i$t,"ctrl"),i$t.forEach(t),T6r=r(Nqe," \u2014 "),kU=n(Nqe,"A",{href:!0});var d$t=s(kU);M6r=r(d$t,"TFCTRLModel"),d$t.forEach(t),E6r=r(Nqe," (CTRL model)"),Nqe.forEach(t),C6r=i(D),B8=n(D,"LI",{});var Iqe=s(B8);kTe=n(Iqe,"STRONG",{});var c$t=s(kTe);w6r=r(c$t,"data2vec-vision"),c$t.forEach(t),A6r=r(Iqe," \u2014 "),SU=n(Iqe,"A",{href:!0});var f$t=s(SU);L6r=r(f$t,"TFData2VecVisionModel"),f$t.forEach(t),y6r=r(Iqe," (Data2VecVision model)"),Iqe.forEach(t),x6r=i(D),N8=n(D,"LI",{});var qqe=s(N8);STe=n(qqe,"STRONG",{});var m$t=s(STe);$6r=r(m$t,"deberta"),m$t.forEach(t),k6r=r(qqe," \u2014 "),RU=n(qqe,"A",{href:!0});var g$t=s(RU);S6r=r(g$t,"TFDebertaModel"),g$t.forEach(t),R6r=r(qqe," (DeBERTa model)"),qqe.forEach(t),P6r=i(D),I8=n(D,"LI",{});var jqe=s(I8);RTe=n(jqe,"STRONG",{});var h$t=s(RTe);B6r=r(h$t,"deberta-v2"),h$t.forEach(t),N6r=r(jqe," \u2014 "),PU=n(jqe,"A",{href:!0});var p$t=s(PU);I6r=r(p$t,"TFDebertaV2Model"),p$t.forEach(t),q6r=r(jqe," (DeBERTa-v2 model)"),jqe.forEach(t),j6r=i(D),q8=n(D,"LI",{});var Dqe=s(q8);PTe=n(Dqe,"STRONG",{});var _$t=s(PTe);D6r=r(_$t,"deit"),_$t.forEach(t),G6r=r(Dqe," \u2014 "),BU=n(Dqe,"A",{href:!0});var u$t=s(BU);O6r=r(u$t,"TFDeiTModel"),u$t.forEach(t),V6r=r(Dqe," (DeiT model)"),Dqe.forEach(t),X6r=i(D),j8=n(D,"LI",{});var Gqe=s(j8);BTe=n(Gqe,"STRONG",{});var b$t=s(BTe);z6r=r(b$t,"distilbert"),b$t.forEach(t),Q6r=r(Gqe," \u2014 "),NU=n(Gqe,"A",{href:!0});var v$t=s(NU);W6r=r(v$t,"TFDistilBertModel"),v$t.forEach(t),H6r=r(Gqe," (DistilBERT model)"),Gqe.forEach(t),U6r=i(D),D8=n(D,"LI",{});var Oqe=s(D8);NTe=n(Oqe,"STRONG",{});var F$t=s(NTe);J6r=r(F$t,"dpr"),F$t.forEach(t),Y6r=r(Oqe," \u2014 "),IU=n(Oqe,"A",{href:!0});var T$t=s(IU);K6r=r(T$t,"TFDPRQuestionEncoder"),T$t.forEach(t),Z6r=r(Oqe," (DPR model)"),Oqe.forEach(t),eTr=i(D),G8=n(D,"LI",{});var Vqe=s(G8);ITe=n(Vqe,"STRONG",{});var M$t=s(ITe);oTr=r(M$t,"electra"),M$t.forEach(t),rTr=r(Vqe," \u2014 "),qU=n(Vqe,"A",{href:!0});var E$t=s(qU);tTr=r(E$t,"TFElectraModel"),E$t.forEach(t),aTr=r(Vqe," (ELECTRA model)"),Vqe.forEach(t),nTr=i(D),O8=n(D,"LI",{});var Xqe=s(O8);qTe=n(Xqe,"STRONG",{});var C$t=s(qTe);sTr=r(C$t,"flaubert"),C$t.forEach(t),lTr=r(Xqe," \u2014 "),jU=n(Xqe,"A",{href:!0});var w$t=s(jU);iTr=r(w$t,"TFFlaubertModel"),w$t.forEach(t),dTr=r(Xqe," (FlauBERT model)"),Xqe.forEach(t),cTr=i(D),Ys=n(D,"LI",{});var DS=s(Ys);jTe=n(DS,"STRONG",{});var A$t=s(jTe);fTr=r(A$t,"funnel"),A$t.forEach(t),mTr=r(DS," \u2014 "),DU=n(DS,"A",{href:!0});var L$t=s(DU);gTr=r(L$t,"TFFunnelModel"),L$t.forEach(t),hTr=r(DS," or "),GU=n(DS,"A",{href:!0});var y$t=s(GU);pTr=r(y$t,"TFFunnelBaseModel"),y$t.forEach(t),_Tr=r(DS," (Funnel Transformer model)"),DS.forEach(t),uTr=i(D),V8=n(D,"LI",{});var zqe=s(V8);DTe=n(zqe,"STRONG",{});var x$t=s(DTe);bTr=r(x$t,"gpt2"),x$t.forEach(t),vTr=r(zqe," \u2014 "),OU=n(zqe,"A",{href:!0});var $$t=s(OU);FTr=r($$t,"TFGPT2Model"),$$t.forEach(t),TTr=r(zqe," (OpenAI GPT-2 model)"),zqe.forEach(t),MTr=i(D),X8=n(D,"LI",{});var Qqe=s(X8);GTe=n(Qqe,"STRONG",{});var k$t=s(GTe);ETr=r(k$t,"gptj"),k$t.forEach(t),CTr=r(Qqe," \u2014 "),VU=n(Qqe,"A",{href:!0});var S$t=s(VU);wTr=r(S$t,"TFGPTJModel"),S$t.forEach(t),ATr=r(Qqe," (GPT-J model)"),Qqe.forEach(t),LTr=i(D),z8=n(D,"LI",{});var Wqe=s(z8);OTe=n(Wqe,"STRONG",{});var R$t=s(OTe);yTr=r(R$t,"hubert"),R$t.forEach(t),xTr=r(Wqe," \u2014 "),XU=n(Wqe,"A",{href:!0});var P$t=s(XU);$Tr=r(P$t,"TFHubertModel"),P$t.forEach(t),kTr=r(Wqe," (Hubert model)"),Wqe.forEach(t),STr=i(D),Q8=n(D,"LI",{});var Hqe=s(Q8);VTe=n(Hqe,"STRONG",{});var B$t=s(VTe);RTr=r(B$t,"layoutlm"),B$t.forEach(t),PTr=r(Hqe," \u2014 "),zU=n(Hqe,"A",{href:!0});var N$t=s(zU);BTr=r(N$t,"TFLayoutLMModel"),N$t.forEach(t),NTr=r(Hqe," (LayoutLM model)"),Hqe.forEach(t),ITr=i(D),W8=n(D,"LI",{});var Uqe=s(W8);XTe=n(Uqe,"STRONG",{});var I$t=s(XTe);qTr=r(I$t,"led"),I$t.forEach(t),jTr=r(Uqe," \u2014 "),QU=n(Uqe,"A",{href:!0});var q$t=s(QU);DTr=r(q$t,"TFLEDModel"),q$t.forEach(t),GTr=r(Uqe," (LED model)"),Uqe.forEach(t),OTr=i(D),H8=n(D,"LI",{});var Jqe=s(H8);zTe=n(Jqe,"STRONG",{});var j$t=s(zTe);VTr=r(j$t,"longformer"),j$t.forEach(t),XTr=r(Jqe," \u2014 "),WU=n(Jqe,"A",{href:!0});var D$t=s(WU);zTr=r(D$t,"TFLongformerModel"),D$t.forEach(t),QTr=r(Jqe," (Longformer model)"),Jqe.forEach(t),WTr=i(D),U8=n(D,"LI",{});var Yqe=s(U8);QTe=n(Yqe,"STRONG",{});var G$t=s(QTe);HTr=r(G$t,"lxmert"),G$t.forEach(t),UTr=r(Yqe," \u2014 "),HU=n(Yqe,"A",{href:!0});var O$t=s(HU);JTr=r(O$t,"TFLxmertModel"),O$t.forEach(t),YTr=r(Yqe," (LXMERT model)"),Yqe.forEach(t),KTr=i(D),J8=n(D,"LI",{});var Kqe=s(J8);WTe=n(Kqe,"STRONG",{});var V$t=s(WTe);ZTr=r(V$t,"marian"),V$t.forEach(t),e7r=r(Kqe," \u2014 "),UU=n(Kqe,"A",{href:!0});var X$t=s(UU);o7r=r(X$t,"TFMarianModel"),X$t.forEach(t),r7r=r(Kqe," (Marian model)"),Kqe.forEach(t),t7r=i(D),Y8=n(D,"LI",{});var Zqe=s(Y8);HTe=n(Zqe,"STRONG",{});var z$t=s(HTe);a7r=r(z$t,"mbart"),z$t.forEach(t),n7r=r(Zqe," \u2014 "),JU=n(Zqe,"A",{href:!0});var Q$t=s(JU);s7r=r(Q$t,"TFMBartModel"),Q$t.forEach(t),l7r=r(Zqe," (mBART model)"),Zqe.forEach(t),i7r=i(D),K8=n(D,"LI",{});var eje=s(K8);UTe=n(eje,"STRONG",{});var W$t=s(UTe);d7r=r(W$t,"mobilebert"),W$t.forEach(t),c7r=r(eje," \u2014 "),YU=n(eje,"A",{href:!0});var H$t=s(YU);f7r=r(H$t,"TFMobileBertModel"),H$t.forEach(t),m7r=r(eje," (MobileBERT model)"),eje.forEach(t),g7r=i(D),Z8=n(D,"LI",{});var oje=s(Z8);JTe=n(oje,"STRONG",{});var U$t=s(JTe);h7r=r(U$t,"mpnet"),U$t.forEach(t),p7r=r(oje," \u2014 "),KU=n(oje,"A",{href:!0});var J$t=s(KU);_7r=r(J$t,"TFMPNetModel"),J$t.forEach(t),u7r=r(oje," (MPNet model)"),oje.forEach(t),b7r=i(D),eM=n(D,"LI",{});var rje=s(eM);YTe=n(rje,"STRONG",{});var Y$t=s(YTe);v7r=r(Y$t,"mt5"),Y$t.forEach(t),F7r=r(rje," \u2014 "),ZU=n(rje,"A",{href:!0});var K$t=s(ZU);T7r=r(K$t,"TFMT5Model"),K$t.forEach(t),M7r=r(rje," (MT5 model)"),rje.forEach(t),E7r=i(D),oM=n(D,"LI",{});var tje=s(oM);KTe=n(tje,"STRONG",{});var Z$t=s(KTe);C7r=r(Z$t,"openai-gpt"),Z$t.forEach(t),w7r=r(tje," \u2014 "),eJ=n(tje,"A",{href:!0});var ekt=s(eJ);A7r=r(ekt,"TFOpenAIGPTModel"),ekt.forEach(t),L7r=r(tje," (OpenAI GPT model)"),tje.forEach(t),y7r=i(D),rM=n(D,"LI",{});var aje=s(rM);ZTe=n(aje,"STRONG",{});var okt=s(ZTe);x7r=r(okt,"opt"),okt.forEach(t),$7r=r(aje," \u2014 "),oJ=n(aje,"A",{href:!0});var rkt=s(oJ);k7r=r(rkt,"TFOPTModel"),rkt.forEach(t),S7r=r(aje," (OPT model)"),aje.forEach(t),R7r=i(D),tM=n(D,"LI",{});var nje=s(tM);e7e=n(nje,"STRONG",{});var tkt=s(e7e);P7r=r(tkt,"pegasus"),tkt.forEach(t),B7r=r(nje," \u2014 "),rJ=n(nje,"A",{href:!0});var akt=s(rJ);N7r=r(akt,"TFPegasusModel"),akt.forEach(t),I7r=r(nje," (Pegasus model)"),nje.forEach(t),q7r=i(D),aM=n(D,"LI",{});var sje=s(aM);o7e=n(sje,"STRONG",{});var nkt=s(o7e);j7r=r(nkt,"regnet"),nkt.forEach(t),D7r=r(sje," \u2014 "),tJ=n(sje,"A",{href:!0});var skt=s(tJ);G7r=r(skt,"TFRegNetModel"),skt.forEach(t),O7r=r(sje," (RegNet model)"),sje.forEach(t),V7r=i(D),nM=n(D,"LI",{});var lje=s(nM);r7e=n(lje,"STRONG",{});var lkt=s(r7e);X7r=r(lkt,"rembert"),lkt.forEach(t),z7r=r(lje," \u2014 "),aJ=n(lje,"A",{href:!0});var ikt=s(aJ);Q7r=r(ikt,"TFRemBertModel"),ikt.forEach(t),W7r=r(lje," (RemBERT model)"),lje.forEach(t),H7r=i(D),sM=n(D,"LI",{});var ije=s(sM);t7e=n(ije,"STRONG",{});var dkt=s(t7e);U7r=r(dkt,"resnet"),dkt.forEach(t),J7r=r(ije," \u2014 "),nJ=n(ije,"A",{href:!0});var ckt=s(nJ);Y7r=r(ckt,"TFResNetModel"),ckt.forEach(t),K7r=r(ije," (ResNet model)"),ije.forEach(t),Z7r=i(D),lM=n(D,"LI",{});var dje=s(lM);a7e=n(dje,"STRONG",{});var fkt=s(a7e);e8r=r(fkt,"roberta"),fkt.forEach(t),o8r=r(dje," \u2014 "),sJ=n(dje,"A",{href:!0});var mkt=s(sJ);r8r=r(mkt,"TFRobertaModel"),mkt.forEach(t),t8r=r(dje," (RoBERTa model)"),dje.forEach(t),a8r=i(D),iM=n(D,"LI",{});var cje=s(iM);n7e=n(cje,"STRONG",{});var gkt=s(n7e);n8r=r(gkt,"roformer"),gkt.forEach(t),s8r=r(cje," \u2014 "),lJ=n(cje,"A",{href:!0});var hkt=s(lJ);l8r=r(hkt,"TFRoFormerModel"),hkt.forEach(t),i8r=r(cje," (RoFormer model)"),cje.forEach(t),d8r=i(D),dM=n(D,"LI",{});var fje=s(dM);s7e=n(fje,"STRONG",{});var pkt=s(s7e);c8r=r(pkt,"speech_to_text"),pkt.forEach(t),f8r=r(fje," \u2014 "),iJ=n(fje,"A",{href:!0});var _kt=s(iJ);m8r=r(_kt,"TFSpeech2TextModel"),_kt.forEach(t),g8r=r(fje," (Speech2Text model)"),fje.forEach(t),h8r=i(D),cM=n(D,"LI",{});var mje=s(cM);l7e=n(mje,"STRONG",{});var ukt=s(l7e);p8r=r(ukt,"swin"),ukt.forEach(t),_8r=r(mje," \u2014 "),dJ=n(mje,"A",{href:!0});var bkt=s(dJ);u8r=r(bkt,"TFSwinModel"),bkt.forEach(t),b8r=r(mje," (Swin Transformer model)"),mje.forEach(t),v8r=i(D),fM=n(D,"LI",{});var gje=s(fM);i7e=n(gje,"STRONG",{});var vkt=s(i7e);F8r=r(vkt,"t5"),vkt.forEach(t),T8r=r(gje," \u2014 "),cJ=n(gje,"A",{href:!0});var Fkt=s(cJ);M8r=r(Fkt,"TFT5Model"),Fkt.forEach(t),E8r=r(gje," (T5 model)"),gje.forEach(t),C8r=i(D),mM=n(D,"LI",{});var hje=s(mM);d7e=n(hje,"STRONG",{});var Tkt=s(d7e);w8r=r(Tkt,"tapas"),Tkt.forEach(t),A8r=r(hje," \u2014 "),fJ=n(hje,"A",{href:!0});var Mkt=s(fJ);L8r=r(Mkt,"TFTapasModel"),Mkt.forEach(t),y8r=r(hje," (TAPAS model)"),hje.forEach(t),x8r=i(D),gM=n(D,"LI",{});var pje=s(gM);c7e=n(pje,"STRONG",{});var Ekt=s(c7e);$8r=r(Ekt,"transfo-xl"),Ekt.forEach(t),k8r=r(pje," \u2014 "),mJ=n(pje,"A",{href:!0});var Ckt=s(mJ);S8r=r(Ckt,"TFTransfoXLModel"),Ckt.forEach(t),R8r=r(pje," (Transformer-XL model)"),pje.forEach(t),P8r=i(D),hM=n(D,"LI",{});var _je=s(hM);f7e=n(_je,"STRONG",{});var wkt=s(f7e);B8r=r(wkt,"vit"),wkt.forEach(t),N8r=r(_je," \u2014 "),gJ=n(_je,"A",{href:!0});var Akt=s(gJ);I8r=r(Akt,"TFViTModel"),Akt.forEach(t),q8r=r(_je," (ViT model)"),_je.forEach(t),j8r=i(D),pM=n(D,"LI",{});var uje=s(pM);m7e=n(uje,"STRONG",{});var Lkt=s(m7e);D8r=r(Lkt,"vit_mae"),Lkt.forEach(t),G8r=r(uje," \u2014 "),hJ=n(uje,"A",{href:!0});var ykt=s(hJ);O8r=r(ykt,"TFViTMAEModel"),ykt.forEach(t),V8r=r(uje," (ViTMAE model)"),uje.forEach(t),X8r=i(D),_M=n(D,"LI",{});var bje=s(_M);g7e=n(bje,"STRONG",{});var xkt=s(g7e);z8r=r(xkt,"wav2vec2"),xkt.forEach(t),Q8r=r(bje," \u2014 "),pJ=n(bje,"A",{href:!0});var $kt=s(pJ);W8r=r($kt,"TFWav2Vec2Model"),$kt.forEach(t),H8r=r(bje," (Wav2Vec2 model)"),bje.forEach(t),U8r=i(D),uM=n(D,"LI",{});var vje=s(uM);h7e=n(vje,"STRONG",{});var kkt=s(h7e);J8r=r(kkt,"xlm"),kkt.forEach(t),Y8r=r(vje," \u2014 "),_J=n(vje,"A",{href:!0});var Skt=s(_J);K8r=r(Skt,"TFXLMModel"),Skt.forEach(t),Z8r=r(vje," (XLM model)"),vje.forEach(t),eMr=i(D),bM=n(D,"LI",{});var Fje=s(bM);p7e=n(Fje,"STRONG",{});var Rkt=s(p7e);oMr=r(Rkt,"xlm-roberta"),Rkt.forEach(t),rMr=r(Fje," \u2014 "),uJ=n(Fje,"A",{href:!0});var Pkt=s(uJ);tMr=r(Pkt,"TFXLMRobertaModel"),Pkt.forEach(t),aMr=r(Fje," (XLM-RoBERTa model)"),Fje.forEach(t),nMr=i(D),vM=n(D,"LI",{});var Tje=s(vM);_7e=n(Tje,"STRONG",{});var Bkt=s(_7e);sMr=r(Bkt,"xlnet"),Bkt.forEach(t),lMr=r(Tje," \u2014 "),bJ=n(Tje,"A",{href:!0});var Nkt=s(bJ);iMr=r(Nkt,"TFXLNetModel"),Nkt.forEach(t),dMr=r(Tje," (XLNet model)"),Tje.forEach(t),D.forEach(t),cMr=i(kl),T(FM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),kze=i(f),cc=n(f,"H2",{class:!0});var jWe=s(cc);TM=n(jWe,"A",{id:!0,class:!0,href:!0});var Ikt=s(TM);u7e=n(Ikt,"SPAN",{});var qkt=s(u7e);T(ox.$$.fragment,qkt),qkt.forEach(t),Ikt.forEach(t),fMr=i(jWe),b7e=n(jWe,"SPAN",{});var jkt=s(b7e);mMr=r(jkt,"TFAutoModelForPreTraining"),jkt.forEach(t),jWe.forEach(t),Sze=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(rx.$$.fragment,Sl),gMr=i(Sl),fc=n(Sl,"P",{});var Dte=s(fc);hMr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vJ=n(Dte,"A",{href:!0});var Dkt=s(vJ);pMr=r(Dkt,"from_pretrained()"),Dkt.forEach(t),_Mr=r(Dte," class method or the "),FJ=n(Dte,"A",{href:!0});var Gkt=s(FJ);uMr=r(Gkt,"from_config()"),Gkt.forEach(t),bMr=r(Dte,` class
method.`),Dte.forEach(t),vMr=i(Sl),tx=n(Sl,"P",{});var DWe=s(tx);FMr=r(DWe,"This class cannot be instantiated directly using "),v7e=n(DWe,"CODE",{});var Okt=s(v7e);TMr=r(Okt,"__init__()"),Okt.forEach(t),MMr=r(DWe," (throws an error)."),DWe.forEach(t),EMr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var cA=s(Pt);T(ax.$$.fragment,cA),CMr=i(cA),F7e=n(cA,"P",{});var Vkt=s(F7e);wMr=r(Vkt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vkt.forEach(t),AMr=i(cA),mc=n(cA,"P",{});var Gte=s(mc);LMr=r(Gte,`Note:
Loading a model from its configuration file does `),T7e=n(Gte,"STRONG",{});var Xkt=s(T7e);yMr=r(Xkt,"not"),Xkt.forEach(t),xMr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(Gte,"A",{href:!0});var zkt=s(TJ);$Mr=r(zkt,"from_pretrained()"),zkt.forEach(t),kMr=r(Gte," to load the model weights."),Gte.forEach(t),SMr=i(cA),T(MM.$$.fragment,cA),cA.forEach(t),RMr=i(Sl),$r=n(Sl,"DIV",{class:!0});var Rl=s($r);T(nx.$$.fragment,Rl),PMr=i(Rl),M7e=n(Rl,"P",{});var Qkt=s(M7e);BMr=r(Qkt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qkt.forEach(t),NMr=i(Rl),ln=n(Rl,"P",{});var fA=s(ln);IMr=r(fA,"The model class to instantiate is selected based on the "),E7e=n(fA,"CODE",{});var Wkt=s(E7e);qMr=r(Wkt,"model_type"),Wkt.forEach(t),jMr=r(fA,` property of the config object (either
passed as an argument or loaded from `),C7e=n(fA,"CODE",{});var Hkt=s(C7e);DMr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),GMr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=n(fA,"CODE",{});var Ukt=s(w7e);OMr=r(Ukt,"pretrained_model_name_or_path"),Ukt.forEach(t),VMr=r(fA,":"),fA.forEach(t),XMr=i(Rl),se=n(Rl,"UL",{});var le=s(se);EM=n(le,"LI",{});var Mje=s(EM);A7e=n(Mje,"STRONG",{});var Jkt=s(A7e);zMr=r(Jkt,"albert"),Jkt.forEach(t),QMr=r(Mje," \u2014 "),MJ=n(Mje,"A",{href:!0});var Ykt=s(MJ);WMr=r(Ykt,"TFAlbertForPreTraining"),Ykt.forEach(t),HMr=r(Mje," (ALBERT model)"),Mje.forEach(t),UMr=i(le),CM=n(le,"LI",{});var Eje=s(CM);L7e=n(Eje,"STRONG",{});var Kkt=s(L7e);JMr=r(Kkt,"bart"),Kkt.forEach(t),YMr=r(Eje," \u2014 "),EJ=n(Eje,"A",{href:!0});var Zkt=s(EJ);KMr=r(Zkt,"TFBartForConditionalGeneration"),Zkt.forEach(t),ZMr=r(Eje," (BART model)"),Eje.forEach(t),e4r=i(le),wM=n(le,"LI",{});var Cje=s(wM);y7e=n(Cje,"STRONG",{});var eSt=s(y7e);o4r=r(eSt,"bert"),eSt.forEach(t),r4r=r(Cje," \u2014 "),CJ=n(Cje,"A",{href:!0});var oSt=s(CJ);t4r=r(oSt,"TFBertForPreTraining"),oSt.forEach(t),a4r=r(Cje," (BERT model)"),Cje.forEach(t),n4r=i(le),AM=n(le,"LI",{});var wje=s(AM);x7e=n(wje,"STRONG",{});var rSt=s(x7e);s4r=r(rSt,"camembert"),rSt.forEach(t),l4r=r(wje," \u2014 "),wJ=n(wje,"A",{href:!0});var tSt=s(wJ);i4r=r(tSt,"TFCamembertForMaskedLM"),tSt.forEach(t),d4r=r(wje," (CamemBERT model)"),wje.forEach(t),c4r=i(le),LM=n(le,"LI",{});var Aje=s(LM);$7e=n(Aje,"STRONG",{});var aSt=s($7e);f4r=r(aSt,"ctrl"),aSt.forEach(t),m4r=r(Aje," \u2014 "),AJ=n(Aje,"A",{href:!0});var nSt=s(AJ);g4r=r(nSt,"TFCTRLLMHeadModel"),nSt.forEach(t),h4r=r(Aje," (CTRL model)"),Aje.forEach(t),p4r=i(le),yM=n(le,"LI",{});var Lje=s(yM);k7e=n(Lje,"STRONG",{});var sSt=s(k7e);_4r=r(sSt,"distilbert"),sSt.forEach(t),u4r=r(Lje," \u2014 "),LJ=n(Lje,"A",{href:!0});var lSt=s(LJ);b4r=r(lSt,"TFDistilBertForMaskedLM"),lSt.forEach(t),v4r=r(Lje," (DistilBERT model)"),Lje.forEach(t),F4r=i(le),xM=n(le,"LI",{});var yje=s(xM);S7e=n(yje,"STRONG",{});var iSt=s(S7e);T4r=r(iSt,"electra"),iSt.forEach(t),M4r=r(yje," \u2014 "),yJ=n(yje,"A",{href:!0});var dSt=s(yJ);E4r=r(dSt,"TFElectraForPreTraining"),dSt.forEach(t),C4r=r(yje," (ELECTRA model)"),yje.forEach(t),w4r=i(le),$M=n(le,"LI",{});var xje=s($M);R7e=n(xje,"STRONG",{});var cSt=s(R7e);A4r=r(cSt,"flaubert"),cSt.forEach(t),L4r=r(xje," \u2014 "),xJ=n(xje,"A",{href:!0});var fSt=s(xJ);y4r=r(fSt,"TFFlaubertWithLMHeadModel"),fSt.forEach(t),x4r=r(xje," (FlauBERT model)"),xje.forEach(t),$4r=i(le),kM=n(le,"LI",{});var $je=s(kM);P7e=n($je,"STRONG",{});var mSt=s(P7e);k4r=r(mSt,"funnel"),mSt.forEach(t),S4r=r($je," \u2014 "),$J=n($je,"A",{href:!0});var gSt=s($J);R4r=r(gSt,"TFFunnelForPreTraining"),gSt.forEach(t),P4r=r($je," (Funnel Transformer model)"),$je.forEach(t),B4r=i(le),SM=n(le,"LI",{});var kje=s(SM);B7e=n(kje,"STRONG",{});var hSt=s(B7e);N4r=r(hSt,"gpt2"),hSt.forEach(t),I4r=r(kje," \u2014 "),kJ=n(kje,"A",{href:!0});var pSt=s(kJ);q4r=r(pSt,"TFGPT2LMHeadModel"),pSt.forEach(t),j4r=r(kje," (OpenAI GPT-2 model)"),kje.forEach(t),D4r=i(le),RM=n(le,"LI",{});var Sje=s(RM);N7e=n(Sje,"STRONG",{});var _St=s(N7e);G4r=r(_St,"layoutlm"),_St.forEach(t),O4r=r(Sje," \u2014 "),SJ=n(Sje,"A",{href:!0});var uSt=s(SJ);V4r=r(uSt,"TFLayoutLMForMaskedLM"),uSt.forEach(t),X4r=r(Sje," (LayoutLM model)"),Sje.forEach(t),z4r=i(le),PM=n(le,"LI",{});var Rje=s(PM);I7e=n(Rje,"STRONG",{});var bSt=s(I7e);Q4r=r(bSt,"lxmert"),bSt.forEach(t),W4r=r(Rje," \u2014 "),RJ=n(Rje,"A",{href:!0});var vSt=s(RJ);H4r=r(vSt,"TFLxmertForPreTraining"),vSt.forEach(t),U4r=r(Rje," (LXMERT model)"),Rje.forEach(t),J4r=i(le),BM=n(le,"LI",{});var Pje=s(BM);q7e=n(Pje,"STRONG",{});var FSt=s(q7e);Y4r=r(FSt,"mobilebert"),FSt.forEach(t),K4r=r(Pje," \u2014 "),PJ=n(Pje,"A",{href:!0});var TSt=s(PJ);Z4r=r(TSt,"TFMobileBertForPreTraining"),TSt.forEach(t),eEr=r(Pje," (MobileBERT model)"),Pje.forEach(t),oEr=i(le),NM=n(le,"LI",{});var Bje=s(NM);j7e=n(Bje,"STRONG",{});var MSt=s(j7e);rEr=r(MSt,"mpnet"),MSt.forEach(t),tEr=r(Bje," \u2014 "),BJ=n(Bje,"A",{href:!0});var ESt=s(BJ);aEr=r(ESt,"TFMPNetForMaskedLM"),ESt.forEach(t),nEr=r(Bje," (MPNet model)"),Bje.forEach(t),sEr=i(le),IM=n(le,"LI",{});var Nje=s(IM);D7e=n(Nje,"STRONG",{});var CSt=s(D7e);lEr=r(CSt,"openai-gpt"),CSt.forEach(t),iEr=r(Nje," \u2014 "),NJ=n(Nje,"A",{href:!0});var wSt=s(NJ);dEr=r(wSt,"TFOpenAIGPTLMHeadModel"),wSt.forEach(t),cEr=r(Nje," (OpenAI GPT model)"),Nje.forEach(t),fEr=i(le),qM=n(le,"LI",{});var Ije=s(qM);G7e=n(Ije,"STRONG",{});var ASt=s(G7e);mEr=r(ASt,"roberta"),ASt.forEach(t),gEr=r(Ije," \u2014 "),IJ=n(Ije,"A",{href:!0});var LSt=s(IJ);hEr=r(LSt,"TFRobertaForMaskedLM"),LSt.forEach(t),pEr=r(Ije," (RoBERTa model)"),Ije.forEach(t),_Er=i(le),jM=n(le,"LI",{});var qje=s(jM);O7e=n(qje,"STRONG",{});var ySt=s(O7e);uEr=r(ySt,"t5"),ySt.forEach(t),bEr=r(qje," \u2014 "),qJ=n(qje,"A",{href:!0});var xSt=s(qJ);vEr=r(xSt,"TFT5ForConditionalGeneration"),xSt.forEach(t),FEr=r(qje," (T5 model)"),qje.forEach(t),TEr=i(le),DM=n(le,"LI",{});var jje=s(DM);V7e=n(jje,"STRONG",{});var $St=s(V7e);MEr=r($St,"tapas"),$St.forEach(t),EEr=r(jje," \u2014 "),jJ=n(jje,"A",{href:!0});var kSt=s(jJ);CEr=r(kSt,"TFTapasForMaskedLM"),kSt.forEach(t),wEr=r(jje," (TAPAS model)"),jje.forEach(t),AEr=i(le),GM=n(le,"LI",{});var Dje=s(GM);X7e=n(Dje,"STRONG",{});var SSt=s(X7e);LEr=r(SSt,"transfo-xl"),SSt.forEach(t),yEr=r(Dje," \u2014 "),DJ=n(Dje,"A",{href:!0});var RSt=s(DJ);xEr=r(RSt,"TFTransfoXLLMHeadModel"),RSt.forEach(t),$Er=r(Dje," (Transformer-XL model)"),Dje.forEach(t),kEr=i(le),OM=n(le,"LI",{});var Gje=s(OM);z7e=n(Gje,"STRONG",{});var PSt=s(z7e);SEr=r(PSt,"vit_mae"),PSt.forEach(t),REr=r(Gje," \u2014 "),GJ=n(Gje,"A",{href:!0});var BSt=s(GJ);PEr=r(BSt,"TFViTMAEForPreTraining"),BSt.forEach(t),BEr=r(Gje," (ViTMAE model)"),Gje.forEach(t),NEr=i(le),VM=n(le,"LI",{});var Oje=s(VM);Q7e=n(Oje,"STRONG",{});var NSt=s(Q7e);IEr=r(NSt,"xlm"),NSt.forEach(t),qEr=r(Oje," \u2014 "),OJ=n(Oje,"A",{href:!0});var ISt=s(OJ);jEr=r(ISt,"TFXLMWithLMHeadModel"),ISt.forEach(t),DEr=r(Oje," (XLM model)"),Oje.forEach(t),GEr=i(le),XM=n(le,"LI",{});var Vje=s(XM);W7e=n(Vje,"STRONG",{});var qSt=s(W7e);OEr=r(qSt,"xlm-roberta"),qSt.forEach(t),VEr=r(Vje," \u2014 "),VJ=n(Vje,"A",{href:!0});var jSt=s(VJ);XEr=r(jSt,"TFXLMRobertaForMaskedLM"),jSt.forEach(t),zEr=r(Vje," (XLM-RoBERTa model)"),Vje.forEach(t),QEr=i(le),zM=n(le,"LI",{});var Xje=s(zM);H7e=n(Xje,"STRONG",{});var DSt=s(H7e);WEr=r(DSt,"xlnet"),DSt.forEach(t),HEr=r(Xje," \u2014 "),XJ=n(Xje,"A",{href:!0});var GSt=s(XJ);UEr=r(GSt,"TFXLNetLMHeadModel"),GSt.forEach(t),JEr=r(Xje," (XLNet model)"),Xje.forEach(t),le.forEach(t),YEr=i(Rl),T(QM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Rze=i(f),gc=n(f,"H2",{class:!0});var GWe=s(gc);WM=n(GWe,"A",{id:!0,class:!0,href:!0});var OSt=s(WM);U7e=n(OSt,"SPAN",{});var VSt=s(U7e);T(sx.$$.fragment,VSt),VSt.forEach(t),OSt.forEach(t),KEr=i(GWe),J7e=n(GWe,"SPAN",{});var XSt=s(J7e);ZEr=r(XSt,"TFAutoModelForCausalLM"),XSt.forEach(t),GWe.forEach(t),Pze=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(lx.$$.fragment,Pl),eCr=i(Pl),hc=n(Pl,"P",{});var Ote=s(hc);oCr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zJ=n(Ote,"A",{href:!0});var zSt=s(zJ);rCr=r(zSt,"from_pretrained()"),zSt.forEach(t),tCr=r(Ote," class method or the "),QJ=n(Ote,"A",{href:!0});var QSt=s(QJ);aCr=r(QSt,"from_config()"),QSt.forEach(t),nCr=r(Ote,` class
method.`),Ote.forEach(t),sCr=i(Pl),ix=n(Pl,"P",{});var OWe=s(ix);lCr=r(OWe,"This class cannot be instantiated directly using "),Y7e=n(OWe,"CODE",{});var WSt=s(Y7e);iCr=r(WSt,"__init__()"),WSt.forEach(t),dCr=r(OWe," (throws an error)."),OWe.forEach(t),cCr=i(Pl),Bt=n(Pl,"DIV",{class:!0});var mA=s(Bt);T(dx.$$.fragment,mA),fCr=i(mA),K7e=n(mA,"P",{});var HSt=s(K7e);mCr=r(HSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),HSt.forEach(t),gCr=i(mA),pc=n(mA,"P",{});var Vte=s(pc);hCr=r(Vte,`Note:
Loading a model from its configuration file does `),Z7e=n(Vte,"STRONG",{});var USt=s(Z7e);pCr=r(USt,"not"),USt.forEach(t),_Cr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(Vte,"A",{href:!0});var JSt=s(WJ);uCr=r(JSt,"from_pretrained()"),JSt.forEach(t),bCr=r(Vte," to load the model weights."),Vte.forEach(t),vCr=i(mA),T(HM.$$.fragment,mA),mA.forEach(t),FCr=i(Pl),kr=n(Pl,"DIV",{class:!0});var Bl=s(kr);T(cx.$$.fragment,Bl),TCr=i(Bl),e8e=n(Bl,"P",{});var YSt=s(e8e);MCr=r(YSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),YSt.forEach(t),ECr=i(Bl),dn=n(Bl,"P",{});var gA=s(dn);CCr=r(gA,"The model class to instantiate is selected based on the "),o8e=n(gA,"CODE",{});var KSt=s(o8e);wCr=r(KSt,"model_type"),KSt.forEach(t),ACr=r(gA,` property of the config object (either
passed as an argument or loaded from `),r8e=n(gA,"CODE",{});var ZSt=s(r8e);LCr=r(ZSt,"pretrained_model_name_or_path"),ZSt.forEach(t),yCr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t8e=n(gA,"CODE",{});var eRt=s(t8e);xCr=r(eRt,"pretrained_model_name_or_path"),eRt.forEach(t),$Cr=r(gA,":"),gA.forEach(t),kCr=i(Bl),Me=n(Bl,"UL",{});var Ce=s(Me);UM=n(Ce,"LI",{});var zje=s(UM);a8e=n(zje,"STRONG",{});var oRt=s(a8e);SCr=r(oRt,"bert"),oRt.forEach(t),RCr=r(zje," \u2014 "),HJ=n(zje,"A",{href:!0});var rRt=s(HJ);PCr=r(rRt,"TFBertLMHeadModel"),rRt.forEach(t),BCr=r(zje," (BERT model)"),zje.forEach(t),NCr=i(Ce),JM=n(Ce,"LI",{});var Qje=s(JM);n8e=n(Qje,"STRONG",{});var tRt=s(n8e);ICr=r(tRt,"camembert"),tRt.forEach(t),qCr=r(Qje," \u2014 "),UJ=n(Qje,"A",{href:!0});var aRt=s(UJ);jCr=r(aRt,"TFCamembertForCausalLM"),aRt.forEach(t),DCr=r(Qje," (CamemBERT model)"),Qje.forEach(t),GCr=i(Ce),YM=n(Ce,"LI",{});var Wje=s(YM);s8e=n(Wje,"STRONG",{});var nRt=s(s8e);OCr=r(nRt,"ctrl"),nRt.forEach(t),VCr=r(Wje," \u2014 "),JJ=n(Wje,"A",{href:!0});var sRt=s(JJ);XCr=r(sRt,"TFCTRLLMHeadModel"),sRt.forEach(t),zCr=r(Wje," (CTRL model)"),Wje.forEach(t),QCr=i(Ce),KM=n(Ce,"LI",{});var Hje=s(KM);l8e=n(Hje,"STRONG",{});var lRt=s(l8e);WCr=r(lRt,"gpt2"),lRt.forEach(t),HCr=r(Hje," \u2014 "),YJ=n(Hje,"A",{href:!0});var iRt=s(YJ);UCr=r(iRt,"TFGPT2LMHeadModel"),iRt.forEach(t),JCr=r(Hje," (OpenAI GPT-2 model)"),Hje.forEach(t),YCr=i(Ce),ZM=n(Ce,"LI",{});var Uje=s(ZM);i8e=n(Uje,"STRONG",{});var dRt=s(i8e);KCr=r(dRt,"gptj"),dRt.forEach(t),ZCr=r(Uje," \u2014 "),KJ=n(Uje,"A",{href:!0});var cRt=s(KJ);e5r=r(cRt,"TFGPTJForCausalLM"),cRt.forEach(t),o5r=r(Uje," (GPT-J model)"),Uje.forEach(t),r5r=i(Ce),e4=n(Ce,"LI",{});var Jje=s(e4);d8e=n(Jje,"STRONG",{});var fRt=s(d8e);t5r=r(fRt,"openai-gpt"),fRt.forEach(t),a5r=r(Jje," \u2014 "),ZJ=n(Jje,"A",{href:!0});var mRt=s(ZJ);n5r=r(mRt,"TFOpenAIGPTLMHeadModel"),mRt.forEach(t),s5r=r(Jje," (OpenAI GPT model)"),Jje.forEach(t),l5r=i(Ce),o4=n(Ce,"LI",{});var Yje=s(o4);c8e=n(Yje,"STRONG",{});var gRt=s(c8e);i5r=r(gRt,"opt"),gRt.forEach(t),d5r=r(Yje," \u2014 "),eY=n(Yje,"A",{href:!0});var hRt=s(eY);c5r=r(hRt,"TFOPTForCausalLM"),hRt.forEach(t),f5r=r(Yje," (OPT model)"),Yje.forEach(t),m5r=i(Ce),r4=n(Ce,"LI",{});var Kje=s(r4);f8e=n(Kje,"STRONG",{});var pRt=s(f8e);g5r=r(pRt,"rembert"),pRt.forEach(t),h5r=r(Kje," \u2014 "),oY=n(Kje,"A",{href:!0});var _Rt=s(oY);p5r=r(_Rt,"TFRemBertForCausalLM"),_Rt.forEach(t),_5r=r(Kje," (RemBERT model)"),Kje.forEach(t),u5r=i(Ce),t4=n(Ce,"LI",{});var Zje=s(t4);m8e=n(Zje,"STRONG",{});var uRt=s(m8e);b5r=r(uRt,"roberta"),uRt.forEach(t),v5r=r(Zje," \u2014 "),rY=n(Zje,"A",{href:!0});var bRt=s(rY);F5r=r(bRt,"TFRobertaForCausalLM"),bRt.forEach(t),T5r=r(Zje," (RoBERTa model)"),Zje.forEach(t),M5r=i(Ce),a4=n(Ce,"LI",{});var eDe=s(a4);g8e=n(eDe,"STRONG",{});var vRt=s(g8e);E5r=r(vRt,"roformer"),vRt.forEach(t),C5r=r(eDe," \u2014 "),tY=n(eDe,"A",{href:!0});var FRt=s(tY);w5r=r(FRt,"TFRoFormerForCausalLM"),FRt.forEach(t),A5r=r(eDe," (RoFormer model)"),eDe.forEach(t),L5r=i(Ce),n4=n(Ce,"LI",{});var oDe=s(n4);h8e=n(oDe,"STRONG",{});var TRt=s(h8e);y5r=r(TRt,"transfo-xl"),TRt.forEach(t),x5r=r(oDe," \u2014 "),aY=n(oDe,"A",{href:!0});var MRt=s(aY);$5r=r(MRt,"TFTransfoXLLMHeadModel"),MRt.forEach(t),k5r=r(oDe," (Transformer-XL model)"),oDe.forEach(t),S5r=i(Ce),s4=n(Ce,"LI",{});var rDe=s(s4);p8e=n(rDe,"STRONG",{});var ERt=s(p8e);R5r=r(ERt,"xlm"),ERt.forEach(t),P5r=r(rDe," \u2014 "),nY=n(rDe,"A",{href:!0});var CRt=s(nY);B5r=r(CRt,"TFXLMWithLMHeadModel"),CRt.forEach(t),N5r=r(rDe," (XLM model)"),rDe.forEach(t),I5r=i(Ce),l4=n(Ce,"LI",{});var tDe=s(l4);_8e=n(tDe,"STRONG",{});var wRt=s(_8e);q5r=r(wRt,"xlnet"),wRt.forEach(t),j5r=r(tDe," \u2014 "),sY=n(tDe,"A",{href:!0});var ARt=s(sY);D5r=r(ARt,"TFXLNetLMHeadModel"),ARt.forEach(t),G5r=r(tDe," (XLNet model)"),tDe.forEach(t),Ce.forEach(t),O5r=i(Bl),T(i4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),Bze=i(f),_c=n(f,"H2",{class:!0});var VWe=s(_c);d4=n(VWe,"A",{id:!0,class:!0,href:!0});var LRt=s(d4);u8e=n(LRt,"SPAN",{});var yRt=s(u8e);T(fx.$$.fragment,yRt),yRt.forEach(t),LRt.forEach(t),V5r=i(VWe),b8e=n(VWe,"SPAN",{});var xRt=s(b8e);X5r=r(xRt,"TFAutoModelForImageClassification"),xRt.forEach(t),VWe.forEach(t),Nze=i(f),ar=n(f,"DIV",{class:!0});var Nl=s(ar);T(mx.$$.fragment,Nl),z5r=i(Nl),uc=n(Nl,"P",{});var Xte=s(uc);Q5r=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lY=n(Xte,"A",{href:!0});var $Rt=s(lY);W5r=r($Rt,"from_pretrained()"),$Rt.forEach(t),H5r=r(Xte," class method or the "),iY=n(Xte,"A",{href:!0});var kRt=s(iY);U5r=r(kRt,"from_config()"),kRt.forEach(t),J5r=r(Xte,` class
method.`),Xte.forEach(t),Y5r=i(Nl),gx=n(Nl,"P",{});var XWe=s(gx);K5r=r(XWe,"This class cannot be instantiated directly using "),v8e=n(XWe,"CODE",{});var SRt=s(v8e);Z5r=r(SRt,"__init__()"),SRt.forEach(t),e3r=r(XWe," (throws an error)."),XWe.forEach(t),o3r=i(Nl),Nt=n(Nl,"DIV",{class:!0});var hA=s(Nt);T(hx.$$.fragment,hA),r3r=i(hA),F8e=n(hA,"P",{});var RRt=s(F8e);t3r=r(RRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),RRt.forEach(t),a3r=i(hA),bc=n(hA,"P",{});var zte=s(bc);n3r=r(zte,`Note:
Loading a model from its configuration file does `),T8e=n(zte,"STRONG",{});var PRt=s(T8e);s3r=r(PRt,"not"),PRt.forEach(t),l3r=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(zte,"A",{href:!0});var BRt=s(dY);i3r=r(BRt,"from_pretrained()"),BRt.forEach(t),d3r=r(zte," to load the model weights."),zte.forEach(t),c3r=i(hA),T(c4.$$.fragment,hA),hA.forEach(t),f3r=i(Nl),Sr=n(Nl,"DIV",{class:!0});var Il=s(Sr);T(px.$$.fragment,Il),m3r=i(Il),M8e=n(Il,"P",{});var NRt=s(M8e);g3r=r(NRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),NRt.forEach(t),h3r=i(Il),cn=n(Il,"P",{});var pA=s(cn);p3r=r(pA,"The model class to instantiate is selected based on the "),E8e=n(pA,"CODE",{});var IRt=s(E8e);_3r=r(IRt,"model_type"),IRt.forEach(t),u3r=r(pA,` property of the config object (either
passed as an argument or loaded from `),C8e=n(pA,"CODE",{});var qRt=s(C8e);b3r=r(qRt,"pretrained_model_name_or_path"),qRt.forEach(t),v3r=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=n(pA,"CODE",{});var jRt=s(w8e);F3r=r(jRt,"pretrained_model_name_or_path"),jRt.forEach(t),T3r=r(pA,":"),pA.forEach(t),M3r=i(Il),Qe=n(Il,"UL",{});var ot=s(Qe);f4=n(ot,"LI",{});var aDe=s(f4);A8e=n(aDe,"STRONG",{});var DRt=s(A8e);E3r=r(DRt,"convnext"),DRt.forEach(t),C3r=r(aDe," \u2014 "),cY=n(aDe,"A",{href:!0});var GRt=s(cY);w3r=r(GRt,"TFConvNextForImageClassification"),GRt.forEach(t),A3r=r(aDe," (ConvNeXT model)"),aDe.forEach(t),L3r=i(ot),m4=n(ot,"LI",{});var nDe=s(m4);L8e=n(nDe,"STRONG",{});var ORt=s(L8e);y3r=r(ORt,"data2vec-vision"),ORt.forEach(t),x3r=r(nDe," \u2014 "),fY=n(nDe,"A",{href:!0});var VRt=s(fY);$3r=r(VRt,"TFData2VecVisionForImageClassification"),VRt.forEach(t),k3r=r(nDe," (Data2VecVision model)"),nDe.forEach(t),S3r=i(ot),Ks=n(ot,"LI",{});var GS=s(Ks);y8e=n(GS,"STRONG",{});var XRt=s(y8e);R3r=r(XRt,"deit"),XRt.forEach(t),P3r=r(GS," \u2014 "),mY=n(GS,"A",{href:!0});var zRt=s(mY);B3r=r(zRt,"TFDeiTForImageClassification"),zRt.forEach(t),N3r=r(GS," or "),gY=n(GS,"A",{href:!0});var QRt=s(gY);I3r=r(QRt,"TFDeiTForImageClassificationWithTeacher"),QRt.forEach(t),q3r=r(GS," (DeiT model)"),GS.forEach(t),j3r=i(ot),g4=n(ot,"LI",{});var sDe=s(g4);x8e=n(sDe,"STRONG",{});var WRt=s(x8e);D3r=r(WRt,"regnet"),WRt.forEach(t),G3r=r(sDe," \u2014 "),hY=n(sDe,"A",{href:!0});var HRt=s(hY);O3r=r(HRt,"TFRegNetForImageClassification"),HRt.forEach(t),V3r=r(sDe," (RegNet model)"),sDe.forEach(t),X3r=i(ot),h4=n(ot,"LI",{});var lDe=s(h4);$8e=n(lDe,"STRONG",{});var URt=s($8e);z3r=r(URt,"resnet"),URt.forEach(t),Q3r=r(lDe," \u2014 "),pY=n(lDe,"A",{href:!0});var JRt=s(pY);W3r=r(JRt,"TFResNetForImageClassification"),JRt.forEach(t),H3r=r(lDe," (ResNet model)"),lDe.forEach(t),U3r=i(ot),p4=n(ot,"LI",{});var iDe=s(p4);k8e=n(iDe,"STRONG",{});var YRt=s(k8e);J3r=r(YRt,"swin"),YRt.forEach(t),Y3r=r(iDe," \u2014 "),_Y=n(iDe,"A",{href:!0});var KRt=s(_Y);K3r=r(KRt,"TFSwinForImageClassification"),KRt.forEach(t),Z3r=r(iDe," (Swin Transformer model)"),iDe.forEach(t),e0r=i(ot),_4=n(ot,"LI",{});var dDe=s(_4);S8e=n(dDe,"STRONG",{});var ZRt=s(S8e);o0r=r(ZRt,"vit"),ZRt.forEach(t),r0r=r(dDe," \u2014 "),uY=n(dDe,"A",{href:!0});var ePt=s(uY);t0r=r(ePt,"TFViTForImageClassification"),ePt.forEach(t),a0r=r(dDe," (ViT model)"),dDe.forEach(t),ot.forEach(t),n0r=i(Il),T(u4.$$.fragment,Il),Il.forEach(t),Nl.forEach(t),Ize=i(f),vc=n(f,"H2",{class:!0});var zWe=s(vc);b4=n(zWe,"A",{id:!0,class:!0,href:!0});var oPt=s(b4);R8e=n(oPt,"SPAN",{});var rPt=s(R8e);T(_x.$$.fragment,rPt),rPt.forEach(t),oPt.forEach(t),s0r=i(zWe),P8e=n(zWe,"SPAN",{});var tPt=s(P8e);l0r=r(tPt,"TFAutoModelForMaskedLM"),tPt.forEach(t),zWe.forEach(t),qze=i(f),nr=n(f,"DIV",{class:!0});var ql=s(nr);T(ux.$$.fragment,ql),i0r=i(ql),Fc=n(ql,"P",{});var Qte=s(Fc);d0r=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bY=n(Qte,"A",{href:!0});var aPt=s(bY);c0r=r(aPt,"from_pretrained()"),aPt.forEach(t),f0r=r(Qte," class method or the "),vY=n(Qte,"A",{href:!0});var nPt=s(vY);m0r=r(nPt,"from_config()"),nPt.forEach(t),g0r=r(Qte,` class
method.`),Qte.forEach(t),h0r=i(ql),bx=n(ql,"P",{});var QWe=s(bx);p0r=r(QWe,"This class cannot be instantiated directly using "),B8e=n(QWe,"CODE",{});var sPt=s(B8e);_0r=r(sPt,"__init__()"),sPt.forEach(t),u0r=r(QWe," (throws an error)."),QWe.forEach(t),b0r=i(ql),It=n(ql,"DIV",{class:!0});var _A=s(It);T(vx.$$.fragment,_A),v0r=i(_A),N8e=n(_A,"P",{});var lPt=s(N8e);F0r=r(lPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lPt.forEach(t),T0r=i(_A),Tc=n(_A,"P",{});var Wte=s(Tc);M0r=r(Wte,`Note:
Loading a model from its configuration file does `),I8e=n(Wte,"STRONG",{});var iPt=s(I8e);E0r=r(iPt,"not"),iPt.forEach(t),C0r=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(Wte,"A",{href:!0});var dPt=s(FY);w0r=r(dPt,"from_pretrained()"),dPt.forEach(t),A0r=r(Wte," to load the model weights."),Wte.forEach(t),L0r=i(_A),T(v4.$$.fragment,_A),_A.forEach(t),y0r=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(Fx.$$.fragment,jl),x0r=i(jl),q8e=n(jl,"P",{});var cPt=s(q8e);$0r=r(cPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cPt.forEach(t),k0r=i(jl),fn=n(jl,"P",{});var uA=s(fn);S0r=r(uA,"The model class to instantiate is selected based on the "),j8e=n(uA,"CODE",{});var fPt=s(j8e);R0r=r(fPt,"model_type"),fPt.forEach(t),P0r=r(uA,` property of the config object (either
passed as an argument or loaded from `),D8e=n(uA,"CODE",{});var mPt=s(D8e);B0r=r(mPt,"pretrained_model_name_or_path"),mPt.forEach(t),N0r=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G8e=n(uA,"CODE",{});var gPt=s(G8e);I0r=r(gPt,"pretrained_model_name_or_path"),gPt.forEach(t),q0r=r(uA,":"),uA.forEach(t),j0r=i(jl),ie=n(jl,"UL",{});var me=s(ie);F4=n(me,"LI",{});var cDe=s(F4);O8e=n(cDe,"STRONG",{});var hPt=s(O8e);D0r=r(hPt,"albert"),hPt.forEach(t),G0r=r(cDe," \u2014 "),TY=n(cDe,"A",{href:!0});var pPt=s(TY);O0r=r(pPt,"TFAlbertForMaskedLM"),pPt.forEach(t),V0r=r(cDe," (ALBERT model)"),cDe.forEach(t),X0r=i(me),T4=n(me,"LI",{});var fDe=s(T4);V8e=n(fDe,"STRONG",{});var _Pt=s(V8e);z0r=r(_Pt,"bert"),_Pt.forEach(t),Q0r=r(fDe," \u2014 "),MY=n(fDe,"A",{href:!0});var uPt=s(MY);W0r=r(uPt,"TFBertForMaskedLM"),uPt.forEach(t),H0r=r(fDe," (BERT model)"),fDe.forEach(t),U0r=i(me),M4=n(me,"LI",{});var mDe=s(M4);X8e=n(mDe,"STRONG",{});var bPt=s(X8e);J0r=r(bPt,"camembert"),bPt.forEach(t),Y0r=r(mDe," \u2014 "),EY=n(mDe,"A",{href:!0});var vPt=s(EY);K0r=r(vPt,"TFCamembertForMaskedLM"),vPt.forEach(t),Z0r=r(mDe," (CamemBERT model)"),mDe.forEach(t),ewr=i(me),E4=n(me,"LI",{});var gDe=s(E4);z8e=n(gDe,"STRONG",{});var FPt=s(z8e);owr=r(FPt,"convbert"),FPt.forEach(t),rwr=r(gDe," \u2014 "),CY=n(gDe,"A",{href:!0});var TPt=s(CY);twr=r(TPt,"TFConvBertForMaskedLM"),TPt.forEach(t),awr=r(gDe," (ConvBERT model)"),gDe.forEach(t),nwr=i(me),C4=n(me,"LI",{});var hDe=s(C4);Q8e=n(hDe,"STRONG",{});var MPt=s(Q8e);swr=r(MPt,"deberta"),MPt.forEach(t),lwr=r(hDe," \u2014 "),wY=n(hDe,"A",{href:!0});var EPt=s(wY);iwr=r(EPt,"TFDebertaForMaskedLM"),EPt.forEach(t),dwr=r(hDe," (DeBERTa model)"),hDe.forEach(t),cwr=i(me),w4=n(me,"LI",{});var pDe=s(w4);W8e=n(pDe,"STRONG",{});var CPt=s(W8e);fwr=r(CPt,"deberta-v2"),CPt.forEach(t),mwr=r(pDe," \u2014 "),AY=n(pDe,"A",{href:!0});var wPt=s(AY);gwr=r(wPt,"TFDebertaV2ForMaskedLM"),wPt.forEach(t),hwr=r(pDe," (DeBERTa-v2 model)"),pDe.forEach(t),pwr=i(me),A4=n(me,"LI",{});var _De=s(A4);H8e=n(_De,"STRONG",{});var APt=s(H8e);_wr=r(APt,"distilbert"),APt.forEach(t),uwr=r(_De," \u2014 "),LY=n(_De,"A",{href:!0});var LPt=s(LY);bwr=r(LPt,"TFDistilBertForMaskedLM"),LPt.forEach(t),vwr=r(_De," (DistilBERT model)"),_De.forEach(t),Fwr=i(me),L4=n(me,"LI",{});var uDe=s(L4);U8e=n(uDe,"STRONG",{});var yPt=s(U8e);Twr=r(yPt,"electra"),yPt.forEach(t),Mwr=r(uDe," \u2014 "),yY=n(uDe,"A",{href:!0});var xPt=s(yY);Ewr=r(xPt,"TFElectraForMaskedLM"),xPt.forEach(t),Cwr=r(uDe," (ELECTRA model)"),uDe.forEach(t),wwr=i(me),y4=n(me,"LI",{});var bDe=s(y4);J8e=n(bDe,"STRONG",{});var $Pt=s(J8e);Awr=r($Pt,"flaubert"),$Pt.forEach(t),Lwr=r(bDe," \u2014 "),xY=n(bDe,"A",{href:!0});var kPt=s(xY);ywr=r(kPt,"TFFlaubertWithLMHeadModel"),kPt.forEach(t),xwr=r(bDe," (FlauBERT model)"),bDe.forEach(t),$wr=i(me),x4=n(me,"LI",{});var vDe=s(x4);Y8e=n(vDe,"STRONG",{});var SPt=s(Y8e);kwr=r(SPt,"funnel"),SPt.forEach(t),Swr=r(vDe," \u2014 "),$Y=n(vDe,"A",{href:!0});var RPt=s($Y);Rwr=r(RPt,"TFFunnelForMaskedLM"),RPt.forEach(t),Pwr=r(vDe," (Funnel Transformer model)"),vDe.forEach(t),Bwr=i(me),$4=n(me,"LI",{});var FDe=s($4);K8e=n(FDe,"STRONG",{});var PPt=s(K8e);Nwr=r(PPt,"layoutlm"),PPt.forEach(t),Iwr=r(FDe," \u2014 "),kY=n(FDe,"A",{href:!0});var BPt=s(kY);qwr=r(BPt,"TFLayoutLMForMaskedLM"),BPt.forEach(t),jwr=r(FDe," (LayoutLM model)"),FDe.forEach(t),Dwr=i(me),k4=n(me,"LI",{});var TDe=s(k4);Z8e=n(TDe,"STRONG",{});var NPt=s(Z8e);Gwr=r(NPt,"longformer"),NPt.forEach(t),Owr=r(TDe," \u2014 "),SY=n(TDe,"A",{href:!0});var IPt=s(SY);Vwr=r(IPt,"TFLongformerForMaskedLM"),IPt.forEach(t),Xwr=r(TDe," (Longformer model)"),TDe.forEach(t),zwr=i(me),S4=n(me,"LI",{});var MDe=s(S4);eMe=n(MDe,"STRONG",{});var qPt=s(eMe);Qwr=r(qPt,"mobilebert"),qPt.forEach(t),Wwr=r(MDe," \u2014 "),RY=n(MDe,"A",{href:!0});var jPt=s(RY);Hwr=r(jPt,"TFMobileBertForMaskedLM"),jPt.forEach(t),Uwr=r(MDe," (MobileBERT model)"),MDe.forEach(t),Jwr=i(me),R4=n(me,"LI",{});var EDe=s(R4);oMe=n(EDe,"STRONG",{});var DPt=s(oMe);Ywr=r(DPt,"mpnet"),DPt.forEach(t),Kwr=r(EDe," \u2014 "),PY=n(EDe,"A",{href:!0});var GPt=s(PY);Zwr=r(GPt,"TFMPNetForMaskedLM"),GPt.forEach(t),eAr=r(EDe," (MPNet model)"),EDe.forEach(t),oAr=i(me),P4=n(me,"LI",{});var CDe=s(P4);rMe=n(CDe,"STRONG",{});var OPt=s(rMe);rAr=r(OPt,"rembert"),OPt.forEach(t),tAr=r(CDe," \u2014 "),BY=n(CDe,"A",{href:!0});var VPt=s(BY);aAr=r(VPt,"TFRemBertForMaskedLM"),VPt.forEach(t),nAr=r(CDe," (RemBERT model)"),CDe.forEach(t),sAr=i(me),B4=n(me,"LI",{});var wDe=s(B4);tMe=n(wDe,"STRONG",{});var XPt=s(tMe);lAr=r(XPt,"roberta"),XPt.forEach(t),iAr=r(wDe," \u2014 "),NY=n(wDe,"A",{href:!0});var zPt=s(NY);dAr=r(zPt,"TFRobertaForMaskedLM"),zPt.forEach(t),cAr=r(wDe," (RoBERTa model)"),wDe.forEach(t),fAr=i(me),N4=n(me,"LI",{});var ADe=s(N4);aMe=n(ADe,"STRONG",{});var QPt=s(aMe);mAr=r(QPt,"roformer"),QPt.forEach(t),gAr=r(ADe," \u2014 "),IY=n(ADe,"A",{href:!0});var WPt=s(IY);hAr=r(WPt,"TFRoFormerForMaskedLM"),WPt.forEach(t),pAr=r(ADe," (RoFormer model)"),ADe.forEach(t),_Ar=i(me),I4=n(me,"LI",{});var LDe=s(I4);nMe=n(LDe,"STRONG",{});var HPt=s(nMe);uAr=r(HPt,"tapas"),HPt.forEach(t),bAr=r(LDe," \u2014 "),qY=n(LDe,"A",{href:!0});var UPt=s(qY);vAr=r(UPt,"TFTapasForMaskedLM"),UPt.forEach(t),FAr=r(LDe," (TAPAS model)"),LDe.forEach(t),TAr=i(me),q4=n(me,"LI",{});var yDe=s(q4);sMe=n(yDe,"STRONG",{});var JPt=s(sMe);MAr=r(JPt,"xlm"),JPt.forEach(t),EAr=r(yDe," \u2014 "),jY=n(yDe,"A",{href:!0});var YPt=s(jY);CAr=r(YPt,"TFXLMWithLMHeadModel"),YPt.forEach(t),wAr=r(yDe," (XLM model)"),yDe.forEach(t),AAr=i(me),j4=n(me,"LI",{});var xDe=s(j4);lMe=n(xDe,"STRONG",{});var KPt=s(lMe);LAr=r(KPt,"xlm-roberta"),KPt.forEach(t),yAr=r(xDe," \u2014 "),DY=n(xDe,"A",{href:!0});var ZPt=s(DY);xAr=r(ZPt,"TFXLMRobertaForMaskedLM"),ZPt.forEach(t),$Ar=r(xDe," (XLM-RoBERTa model)"),xDe.forEach(t),me.forEach(t),kAr=i(jl),T(D4.$$.fragment,jl),jl.forEach(t),ql.forEach(t),jze=i(f),Mc=n(f,"H2",{class:!0});var WWe=s(Mc);G4=n(WWe,"A",{id:!0,class:!0,href:!0});var eBt=s(G4);iMe=n(eBt,"SPAN",{});var oBt=s(iMe);T(Tx.$$.fragment,oBt),oBt.forEach(t),eBt.forEach(t),SAr=i(WWe),dMe=n(WWe,"SPAN",{});var rBt=s(dMe);RAr=r(rBt,"TFAutoModelForSeq2SeqLM"),rBt.forEach(t),WWe.forEach(t),Dze=i(f),sr=n(f,"DIV",{class:!0});var Dl=s(sr);T(Mx.$$.fragment,Dl),PAr=i(Dl),Ec=n(Dl,"P",{});var Hte=s(Ec);BAr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GY=n(Hte,"A",{href:!0});var tBt=s(GY);NAr=r(tBt,"from_pretrained()"),tBt.forEach(t),IAr=r(Hte," class method or the "),OY=n(Hte,"A",{href:!0});var aBt=s(OY);qAr=r(aBt,"from_config()"),aBt.forEach(t),jAr=r(Hte,` class
method.`),Hte.forEach(t),DAr=i(Dl),Ex=n(Dl,"P",{});var HWe=s(Ex);GAr=r(HWe,"This class cannot be instantiated directly using "),cMe=n(HWe,"CODE",{});var nBt=s(cMe);OAr=r(nBt,"__init__()"),nBt.forEach(t),VAr=r(HWe," (throws an error)."),HWe.forEach(t),XAr=i(Dl),qt=n(Dl,"DIV",{class:!0});var bA=s(qt);T(Cx.$$.fragment,bA),zAr=i(bA),fMe=n(bA,"P",{});var sBt=s(fMe);QAr=r(sBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sBt.forEach(t),WAr=i(bA),Cc=n(bA,"P",{});var Ute=s(Cc);HAr=r(Ute,`Note:
Loading a model from its configuration file does `),mMe=n(Ute,"STRONG",{});var lBt=s(mMe);UAr=r(lBt,"not"),lBt.forEach(t),JAr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(Ute,"A",{href:!0});var iBt=s(VY);YAr=r(iBt,"from_pretrained()"),iBt.forEach(t),KAr=r(Ute," to load the model weights."),Ute.forEach(t),ZAr=i(bA),T(O4.$$.fragment,bA),bA.forEach(t),eLr=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(wx.$$.fragment,Gl),oLr=i(Gl),gMe=n(Gl,"P",{});var dBt=s(gMe);rLr=r(dBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dBt.forEach(t),tLr=i(Gl),mn=n(Gl,"P",{});var vA=s(mn);aLr=r(vA,"The model class to instantiate is selected based on the "),hMe=n(vA,"CODE",{});var cBt=s(hMe);nLr=r(cBt,"model_type"),cBt.forEach(t),sLr=r(vA,` property of the config object (either
passed as an argument or loaded from `),pMe=n(vA,"CODE",{});var fBt=s(pMe);lLr=r(fBt,"pretrained_model_name_or_path"),fBt.forEach(t),iLr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=n(vA,"CODE",{});var mBt=s(_Me);dLr=r(mBt,"pretrained_model_name_or_path"),mBt.forEach(t),cLr=r(vA,":"),vA.forEach(t),fLr=i(Gl),ye=n(Gl,"UL",{});var Ne=s(ye);V4=n(Ne,"LI",{});var $De=s(V4);uMe=n($De,"STRONG",{});var gBt=s(uMe);mLr=r(gBt,"bart"),gBt.forEach(t),gLr=r($De," \u2014 "),XY=n($De,"A",{href:!0});var hBt=s(XY);hLr=r(hBt,"TFBartForConditionalGeneration"),hBt.forEach(t),pLr=r($De," (BART model)"),$De.forEach(t),_Lr=i(Ne),X4=n(Ne,"LI",{});var kDe=s(X4);bMe=n(kDe,"STRONG",{});var pBt=s(bMe);uLr=r(pBt,"blenderbot"),pBt.forEach(t),bLr=r(kDe," \u2014 "),zY=n(kDe,"A",{href:!0});var _Bt=s(zY);vLr=r(_Bt,"TFBlenderbotForConditionalGeneration"),_Bt.forEach(t),FLr=r(kDe," (Blenderbot model)"),kDe.forEach(t),TLr=i(Ne),z4=n(Ne,"LI",{});var SDe=s(z4);vMe=n(SDe,"STRONG",{});var uBt=s(vMe);MLr=r(uBt,"blenderbot-small"),uBt.forEach(t),ELr=r(SDe," \u2014 "),QY=n(SDe,"A",{href:!0});var bBt=s(QY);CLr=r(bBt,"TFBlenderbotSmallForConditionalGeneration"),bBt.forEach(t),wLr=r(SDe," (BlenderbotSmall model)"),SDe.forEach(t),ALr=i(Ne),Q4=n(Ne,"LI",{});var RDe=s(Q4);FMe=n(RDe,"STRONG",{});var vBt=s(FMe);LLr=r(vBt,"encoder-decoder"),vBt.forEach(t),yLr=r(RDe," \u2014 "),WY=n(RDe,"A",{href:!0});var FBt=s(WY);xLr=r(FBt,"TFEncoderDecoderModel"),FBt.forEach(t),$Lr=r(RDe," (Encoder decoder model)"),RDe.forEach(t),kLr=i(Ne),W4=n(Ne,"LI",{});var PDe=s(W4);TMe=n(PDe,"STRONG",{});var TBt=s(TMe);SLr=r(TBt,"led"),TBt.forEach(t),RLr=r(PDe," \u2014 "),HY=n(PDe,"A",{href:!0});var MBt=s(HY);PLr=r(MBt,"TFLEDForConditionalGeneration"),MBt.forEach(t),BLr=r(PDe," (LED model)"),PDe.forEach(t),NLr=i(Ne),H4=n(Ne,"LI",{});var BDe=s(H4);MMe=n(BDe,"STRONG",{});var EBt=s(MMe);ILr=r(EBt,"marian"),EBt.forEach(t),qLr=r(BDe," \u2014 "),UY=n(BDe,"A",{href:!0});var CBt=s(UY);jLr=r(CBt,"TFMarianMTModel"),CBt.forEach(t),DLr=r(BDe," (Marian model)"),BDe.forEach(t),GLr=i(Ne),U4=n(Ne,"LI",{});var NDe=s(U4);EMe=n(NDe,"STRONG",{});var wBt=s(EMe);OLr=r(wBt,"mbart"),wBt.forEach(t),VLr=r(NDe," \u2014 "),JY=n(NDe,"A",{href:!0});var ABt=s(JY);XLr=r(ABt,"TFMBartForConditionalGeneration"),ABt.forEach(t),zLr=r(NDe," (mBART model)"),NDe.forEach(t),QLr=i(Ne),J4=n(Ne,"LI",{});var IDe=s(J4);CMe=n(IDe,"STRONG",{});var LBt=s(CMe);WLr=r(LBt,"mt5"),LBt.forEach(t),HLr=r(IDe," \u2014 "),YY=n(IDe,"A",{href:!0});var yBt=s(YY);ULr=r(yBt,"TFMT5ForConditionalGeneration"),yBt.forEach(t),JLr=r(IDe," (MT5 model)"),IDe.forEach(t),YLr=i(Ne),Y4=n(Ne,"LI",{});var qDe=s(Y4);wMe=n(qDe,"STRONG",{});var xBt=s(wMe);KLr=r(xBt,"pegasus"),xBt.forEach(t),ZLr=r(qDe," \u2014 "),KY=n(qDe,"A",{href:!0});var $Bt=s(KY);eyr=r($Bt,"TFPegasusForConditionalGeneration"),$Bt.forEach(t),oyr=r(qDe," (Pegasus model)"),qDe.forEach(t),ryr=i(Ne),K4=n(Ne,"LI",{});var jDe=s(K4);AMe=n(jDe,"STRONG",{});var kBt=s(AMe);tyr=r(kBt,"t5"),kBt.forEach(t),ayr=r(jDe," \u2014 "),ZY=n(jDe,"A",{href:!0});var SBt=s(ZY);nyr=r(SBt,"TFT5ForConditionalGeneration"),SBt.forEach(t),syr=r(jDe," (T5 model)"),jDe.forEach(t),Ne.forEach(t),lyr=i(Gl),T(Z4.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Gze=i(f),wc=n(f,"H2",{class:!0});var UWe=s(wc);eE=n(UWe,"A",{id:!0,class:!0,href:!0});var RBt=s(eE);LMe=n(RBt,"SPAN",{});var PBt=s(LMe);T(Ax.$$.fragment,PBt),PBt.forEach(t),RBt.forEach(t),iyr=i(UWe),yMe=n(UWe,"SPAN",{});var BBt=s(yMe);dyr=r(BBt,"TFAutoModelForSequenceClassification"),BBt.forEach(t),UWe.forEach(t),Oze=i(f),lr=n(f,"DIV",{class:!0});var Ol=s(lr);T(Lx.$$.fragment,Ol),cyr=i(Ol),Ac=n(Ol,"P",{});var Jte=s(Ac);fyr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eK=n(Jte,"A",{href:!0});var NBt=s(eK);myr=r(NBt,"from_pretrained()"),NBt.forEach(t),gyr=r(Jte," class method or the "),oK=n(Jte,"A",{href:!0});var IBt=s(oK);hyr=r(IBt,"from_config()"),IBt.forEach(t),pyr=r(Jte,` class
method.`),Jte.forEach(t),_yr=i(Ol),yx=n(Ol,"P",{});var JWe=s(yx);uyr=r(JWe,"This class cannot be instantiated directly using "),xMe=n(JWe,"CODE",{});var qBt=s(xMe);byr=r(qBt,"__init__()"),qBt.forEach(t),vyr=r(JWe," (throws an error)."),JWe.forEach(t),Fyr=i(Ol),jt=n(Ol,"DIV",{class:!0});var FA=s(jt);T(xx.$$.fragment,FA),Tyr=i(FA),$Me=n(FA,"P",{});var jBt=s($Me);Myr=r(jBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jBt.forEach(t),Eyr=i(FA),Lc=n(FA,"P",{});var Yte=s(Lc);Cyr=r(Yte,`Note:
Loading a model from its configuration file does `),kMe=n(Yte,"STRONG",{});var DBt=s(kMe);wyr=r(DBt,"not"),DBt.forEach(t),Ayr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(Yte,"A",{href:!0});var GBt=s(rK);Lyr=r(GBt,"from_pretrained()"),GBt.forEach(t),yyr=r(Yte," to load the model weights."),Yte.forEach(t),xyr=i(FA),T(oE.$$.fragment,FA),FA.forEach(t),$yr=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T($x.$$.fragment,Vl),kyr=i(Vl),SMe=n(Vl,"P",{});var OBt=s(SMe);Syr=r(OBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),OBt.forEach(t),Ryr=i(Vl),gn=n(Vl,"P",{});var TA=s(gn);Pyr=r(TA,"The model class to instantiate is selected based on the "),RMe=n(TA,"CODE",{});var VBt=s(RMe);Byr=r(VBt,"model_type"),VBt.forEach(t),Nyr=r(TA,` property of the config object (either
passed as an argument or loaded from `),PMe=n(TA,"CODE",{});var XBt=s(PMe);Iyr=r(XBt,"pretrained_model_name_or_path"),XBt.forEach(t),qyr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=n(TA,"CODE",{});var zBt=s(BMe);jyr=r(zBt,"pretrained_model_name_or_path"),zBt.forEach(t),Dyr=r(TA,":"),TA.forEach(t),Gyr=i(Vl),te=n(Vl,"UL",{});var ne=s(te);rE=n(ne,"LI",{});var DDe=s(rE);NMe=n(DDe,"STRONG",{});var QBt=s(NMe);Oyr=r(QBt,"albert"),QBt.forEach(t),Vyr=r(DDe," \u2014 "),tK=n(DDe,"A",{href:!0});var WBt=s(tK);Xyr=r(WBt,"TFAlbertForSequenceClassification"),WBt.forEach(t),zyr=r(DDe," (ALBERT model)"),DDe.forEach(t),Qyr=i(ne),tE=n(ne,"LI",{});var GDe=s(tE);IMe=n(GDe,"STRONG",{});var HBt=s(IMe);Wyr=r(HBt,"bert"),HBt.forEach(t),Hyr=r(GDe," \u2014 "),aK=n(GDe,"A",{href:!0});var UBt=s(aK);Uyr=r(UBt,"TFBertForSequenceClassification"),UBt.forEach(t),Jyr=r(GDe," (BERT model)"),GDe.forEach(t),Yyr=i(ne),aE=n(ne,"LI",{});var ODe=s(aE);qMe=n(ODe,"STRONG",{});var JBt=s(qMe);Kyr=r(JBt,"camembert"),JBt.forEach(t),Zyr=r(ODe," \u2014 "),nK=n(ODe,"A",{href:!0});var YBt=s(nK);e9r=r(YBt,"TFCamembertForSequenceClassification"),YBt.forEach(t),o9r=r(ODe," (CamemBERT model)"),ODe.forEach(t),r9r=i(ne),nE=n(ne,"LI",{});var VDe=s(nE);jMe=n(VDe,"STRONG",{});var KBt=s(jMe);t9r=r(KBt,"convbert"),KBt.forEach(t),a9r=r(VDe," \u2014 "),sK=n(VDe,"A",{href:!0});var ZBt=s(sK);n9r=r(ZBt,"TFConvBertForSequenceClassification"),ZBt.forEach(t),s9r=r(VDe," (ConvBERT model)"),VDe.forEach(t),l9r=i(ne),sE=n(ne,"LI",{});var XDe=s(sE);DMe=n(XDe,"STRONG",{});var eNt=s(DMe);i9r=r(eNt,"ctrl"),eNt.forEach(t),d9r=r(XDe," \u2014 "),lK=n(XDe,"A",{href:!0});var oNt=s(lK);c9r=r(oNt,"TFCTRLForSequenceClassification"),oNt.forEach(t),f9r=r(XDe," (CTRL model)"),XDe.forEach(t),m9r=i(ne),lE=n(ne,"LI",{});var zDe=s(lE);GMe=n(zDe,"STRONG",{});var rNt=s(GMe);g9r=r(rNt,"deberta"),rNt.forEach(t),h9r=r(zDe," \u2014 "),iK=n(zDe,"A",{href:!0});var tNt=s(iK);p9r=r(tNt,"TFDebertaForSequenceClassification"),tNt.forEach(t),_9r=r(zDe," (DeBERTa model)"),zDe.forEach(t),u9r=i(ne),iE=n(ne,"LI",{});var QDe=s(iE);OMe=n(QDe,"STRONG",{});var aNt=s(OMe);b9r=r(aNt,"deberta-v2"),aNt.forEach(t),v9r=r(QDe," \u2014 "),dK=n(QDe,"A",{href:!0});var nNt=s(dK);F9r=r(nNt,"TFDebertaV2ForSequenceClassification"),nNt.forEach(t),T9r=r(QDe," (DeBERTa-v2 model)"),QDe.forEach(t),M9r=i(ne),dE=n(ne,"LI",{});var WDe=s(dE);VMe=n(WDe,"STRONG",{});var sNt=s(VMe);E9r=r(sNt,"distilbert"),sNt.forEach(t),C9r=r(WDe," \u2014 "),cK=n(WDe,"A",{href:!0});var lNt=s(cK);w9r=r(lNt,"TFDistilBertForSequenceClassification"),lNt.forEach(t),A9r=r(WDe," (DistilBERT model)"),WDe.forEach(t),L9r=i(ne),cE=n(ne,"LI",{});var HDe=s(cE);XMe=n(HDe,"STRONG",{});var iNt=s(XMe);y9r=r(iNt,"electra"),iNt.forEach(t),x9r=r(HDe," \u2014 "),fK=n(HDe,"A",{href:!0});var dNt=s(fK);$9r=r(dNt,"TFElectraForSequenceClassification"),dNt.forEach(t),k9r=r(HDe," (ELECTRA model)"),HDe.forEach(t),S9r=i(ne),fE=n(ne,"LI",{});var UDe=s(fE);zMe=n(UDe,"STRONG",{});var cNt=s(zMe);R9r=r(cNt,"flaubert"),cNt.forEach(t),P9r=r(UDe," \u2014 "),mK=n(UDe,"A",{href:!0});var fNt=s(mK);B9r=r(fNt,"TFFlaubertForSequenceClassification"),fNt.forEach(t),N9r=r(UDe," (FlauBERT model)"),UDe.forEach(t),I9r=i(ne),mE=n(ne,"LI",{});var JDe=s(mE);QMe=n(JDe,"STRONG",{});var mNt=s(QMe);q9r=r(mNt,"funnel"),mNt.forEach(t),j9r=r(JDe," \u2014 "),gK=n(JDe,"A",{href:!0});var gNt=s(gK);D9r=r(gNt,"TFFunnelForSequenceClassification"),gNt.forEach(t),G9r=r(JDe," (Funnel Transformer model)"),JDe.forEach(t),O9r=i(ne),gE=n(ne,"LI",{});var YDe=s(gE);WMe=n(YDe,"STRONG",{});var hNt=s(WMe);V9r=r(hNt,"gpt2"),hNt.forEach(t),X9r=r(YDe," \u2014 "),hK=n(YDe,"A",{href:!0});var pNt=s(hK);z9r=r(pNt,"TFGPT2ForSequenceClassification"),pNt.forEach(t),Q9r=r(YDe," (OpenAI GPT-2 model)"),YDe.forEach(t),W9r=i(ne),hE=n(ne,"LI",{});var KDe=s(hE);HMe=n(KDe,"STRONG",{});var _Nt=s(HMe);H9r=r(_Nt,"gptj"),_Nt.forEach(t),U9r=r(KDe," \u2014 "),pK=n(KDe,"A",{href:!0});var uNt=s(pK);J9r=r(uNt,"TFGPTJForSequenceClassification"),uNt.forEach(t),Y9r=r(KDe," (GPT-J model)"),KDe.forEach(t),K9r=i(ne),pE=n(ne,"LI",{});var ZDe=s(pE);UMe=n(ZDe,"STRONG",{});var bNt=s(UMe);Z9r=r(bNt,"layoutlm"),bNt.forEach(t),exr=r(ZDe," \u2014 "),_K=n(ZDe,"A",{href:!0});var vNt=s(_K);oxr=r(vNt,"TFLayoutLMForSequenceClassification"),vNt.forEach(t),rxr=r(ZDe," (LayoutLM model)"),ZDe.forEach(t),txr=i(ne),_E=n(ne,"LI",{});var eGe=s(_E);JMe=n(eGe,"STRONG",{});var FNt=s(JMe);axr=r(FNt,"longformer"),FNt.forEach(t),nxr=r(eGe," \u2014 "),uK=n(eGe,"A",{href:!0});var TNt=s(uK);sxr=r(TNt,"TFLongformerForSequenceClassification"),TNt.forEach(t),lxr=r(eGe," (Longformer model)"),eGe.forEach(t),ixr=i(ne),uE=n(ne,"LI",{});var oGe=s(uE);YMe=n(oGe,"STRONG",{});var MNt=s(YMe);dxr=r(MNt,"mobilebert"),MNt.forEach(t),cxr=r(oGe," \u2014 "),bK=n(oGe,"A",{href:!0});var ENt=s(bK);fxr=r(ENt,"TFMobileBertForSequenceClassification"),ENt.forEach(t),mxr=r(oGe," (MobileBERT model)"),oGe.forEach(t),gxr=i(ne),bE=n(ne,"LI",{});var rGe=s(bE);KMe=n(rGe,"STRONG",{});var CNt=s(KMe);hxr=r(CNt,"mpnet"),CNt.forEach(t),pxr=r(rGe," \u2014 "),vK=n(rGe,"A",{href:!0});var wNt=s(vK);_xr=r(wNt,"TFMPNetForSequenceClassification"),wNt.forEach(t),uxr=r(rGe," (MPNet model)"),rGe.forEach(t),bxr=i(ne),vE=n(ne,"LI",{});var tGe=s(vE);ZMe=n(tGe,"STRONG",{});var ANt=s(ZMe);vxr=r(ANt,"openai-gpt"),ANt.forEach(t),Fxr=r(tGe," \u2014 "),FK=n(tGe,"A",{href:!0});var LNt=s(FK);Txr=r(LNt,"TFOpenAIGPTForSequenceClassification"),LNt.forEach(t),Mxr=r(tGe," (OpenAI GPT model)"),tGe.forEach(t),Exr=i(ne),FE=n(ne,"LI",{});var aGe=s(FE);e4e=n(aGe,"STRONG",{});var yNt=s(e4e);Cxr=r(yNt,"rembert"),yNt.forEach(t),wxr=r(aGe," \u2014 "),TK=n(aGe,"A",{href:!0});var xNt=s(TK);Axr=r(xNt,"TFRemBertForSequenceClassification"),xNt.forEach(t),Lxr=r(aGe," (RemBERT model)"),aGe.forEach(t),yxr=i(ne),TE=n(ne,"LI",{});var nGe=s(TE);o4e=n(nGe,"STRONG",{});var $Nt=s(o4e);xxr=r($Nt,"roberta"),$Nt.forEach(t),$xr=r(nGe," \u2014 "),MK=n(nGe,"A",{href:!0});var kNt=s(MK);kxr=r(kNt,"TFRobertaForSequenceClassification"),kNt.forEach(t),Sxr=r(nGe," (RoBERTa model)"),nGe.forEach(t),Rxr=i(ne),ME=n(ne,"LI",{});var sGe=s(ME);r4e=n(sGe,"STRONG",{});var SNt=s(r4e);Pxr=r(SNt,"roformer"),SNt.forEach(t),Bxr=r(sGe," \u2014 "),EK=n(sGe,"A",{href:!0});var RNt=s(EK);Nxr=r(RNt,"TFRoFormerForSequenceClassification"),RNt.forEach(t),Ixr=r(sGe," (RoFormer model)"),sGe.forEach(t),qxr=i(ne),EE=n(ne,"LI",{});var lGe=s(EE);t4e=n(lGe,"STRONG",{});var PNt=s(t4e);jxr=r(PNt,"tapas"),PNt.forEach(t),Dxr=r(lGe," \u2014 "),CK=n(lGe,"A",{href:!0});var BNt=s(CK);Gxr=r(BNt,"TFTapasForSequenceClassification"),BNt.forEach(t),Oxr=r(lGe," (TAPAS model)"),lGe.forEach(t),Vxr=i(ne),CE=n(ne,"LI",{});var iGe=s(CE);a4e=n(iGe,"STRONG",{});var NNt=s(a4e);Xxr=r(NNt,"transfo-xl"),NNt.forEach(t),zxr=r(iGe," \u2014 "),wK=n(iGe,"A",{href:!0});var INt=s(wK);Qxr=r(INt,"TFTransfoXLForSequenceClassification"),INt.forEach(t),Wxr=r(iGe," (Transformer-XL model)"),iGe.forEach(t),Hxr=i(ne),wE=n(ne,"LI",{});var dGe=s(wE);n4e=n(dGe,"STRONG",{});var qNt=s(n4e);Uxr=r(qNt,"xlm"),qNt.forEach(t),Jxr=r(dGe," \u2014 "),AK=n(dGe,"A",{href:!0});var jNt=s(AK);Yxr=r(jNt,"TFXLMForSequenceClassification"),jNt.forEach(t),Kxr=r(dGe," (XLM model)"),dGe.forEach(t),Zxr=i(ne),AE=n(ne,"LI",{});var cGe=s(AE);s4e=n(cGe,"STRONG",{});var DNt=s(s4e);e$r=r(DNt,"xlm-roberta"),DNt.forEach(t),o$r=r(cGe," \u2014 "),LK=n(cGe,"A",{href:!0});var GNt=s(LK);r$r=r(GNt,"TFXLMRobertaForSequenceClassification"),GNt.forEach(t),t$r=r(cGe," (XLM-RoBERTa model)"),cGe.forEach(t),a$r=i(ne),LE=n(ne,"LI",{});var fGe=s(LE);l4e=n(fGe,"STRONG",{});var ONt=s(l4e);n$r=r(ONt,"xlnet"),ONt.forEach(t),s$r=r(fGe," \u2014 "),yK=n(fGe,"A",{href:!0});var VNt=s(yK);l$r=r(VNt,"TFXLNetForSequenceClassification"),VNt.forEach(t),i$r=r(fGe," (XLNet model)"),fGe.forEach(t),ne.forEach(t),d$r=i(Vl),T(yE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Vze=i(f),yc=n(f,"H2",{class:!0});var YWe=s(yc);xE=n(YWe,"A",{id:!0,class:!0,href:!0});var XNt=s(xE);i4e=n(XNt,"SPAN",{});var zNt=s(i4e);T(kx.$$.fragment,zNt),zNt.forEach(t),XNt.forEach(t),c$r=i(YWe),d4e=n(YWe,"SPAN",{});var QNt=s(d4e);f$r=r(QNt,"TFAutoModelForMultipleChoice"),QNt.forEach(t),YWe.forEach(t),Xze=i(f),ir=n(f,"DIV",{class:!0});var Xl=s(ir);T(Sx.$$.fragment,Xl),m$r=i(Xl),xc=n(Xl,"P",{});var Kte=s(xc);g$r=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xK=n(Kte,"A",{href:!0});var WNt=s(xK);h$r=r(WNt,"from_pretrained()"),WNt.forEach(t),p$r=r(Kte," class method or the "),$K=n(Kte,"A",{href:!0});var HNt=s($K);_$r=r(HNt,"from_config()"),HNt.forEach(t),u$r=r(Kte,` class
method.`),Kte.forEach(t),b$r=i(Xl),Rx=n(Xl,"P",{});var KWe=s(Rx);v$r=r(KWe,"This class cannot be instantiated directly using "),c4e=n(KWe,"CODE",{});var UNt=s(c4e);F$r=r(UNt,"__init__()"),UNt.forEach(t),T$r=r(KWe," (throws an error)."),KWe.forEach(t),M$r=i(Xl),Dt=n(Xl,"DIV",{class:!0});var MA=s(Dt);T(Px.$$.fragment,MA),E$r=i(MA),f4e=n(MA,"P",{});var JNt=s(f4e);C$r=r(JNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JNt.forEach(t),w$r=i(MA),$c=n(MA,"P",{});var Zte=s($c);A$r=r(Zte,`Note:
Loading a model from its configuration file does `),m4e=n(Zte,"STRONG",{});var YNt=s(m4e);L$r=r(YNt,"not"),YNt.forEach(t),y$r=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=n(Zte,"A",{href:!0});var KNt=s(kK);x$r=r(KNt,"from_pretrained()"),KNt.forEach(t),$$r=r(Zte," to load the model weights."),Zte.forEach(t),k$r=i(MA),T($E.$$.fragment,MA),MA.forEach(t),S$r=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Bx.$$.fragment,zl),R$r=i(zl),g4e=n(zl,"P",{});var ZNt=s(g4e);P$r=r(ZNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZNt.forEach(t),B$r=i(zl),hn=n(zl,"P",{});var EA=s(hn);N$r=r(EA,"The model class to instantiate is selected based on the "),h4e=n(EA,"CODE",{});var eIt=s(h4e);I$r=r(eIt,"model_type"),eIt.forEach(t),q$r=r(EA,` property of the config object (either
passed as an argument or loaded from `),p4e=n(EA,"CODE",{});var oIt=s(p4e);j$r=r(oIt,"pretrained_model_name_or_path"),oIt.forEach(t),D$r=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=n(EA,"CODE",{});var rIt=s(_4e);G$r=r(rIt,"pretrained_model_name_or_path"),rIt.forEach(t),O$r=r(EA,":"),EA.forEach(t),V$r=i(zl),ue=n(zl,"UL",{});var Fe=s(ue);kE=n(Fe,"LI",{});var mGe=s(kE);u4e=n(mGe,"STRONG",{});var tIt=s(u4e);X$r=r(tIt,"albert"),tIt.forEach(t),z$r=r(mGe," \u2014 "),SK=n(mGe,"A",{href:!0});var aIt=s(SK);Q$r=r(aIt,"TFAlbertForMultipleChoice"),aIt.forEach(t),W$r=r(mGe," (ALBERT model)"),mGe.forEach(t),H$r=i(Fe),SE=n(Fe,"LI",{});var gGe=s(SE);b4e=n(gGe,"STRONG",{});var nIt=s(b4e);U$r=r(nIt,"bert"),nIt.forEach(t),J$r=r(gGe," \u2014 "),RK=n(gGe,"A",{href:!0});var sIt=s(RK);Y$r=r(sIt,"TFBertForMultipleChoice"),sIt.forEach(t),K$r=r(gGe," (BERT model)"),gGe.forEach(t),Z$r=i(Fe),RE=n(Fe,"LI",{});var hGe=s(RE);v4e=n(hGe,"STRONG",{});var lIt=s(v4e);ekr=r(lIt,"camembert"),lIt.forEach(t),okr=r(hGe," \u2014 "),PK=n(hGe,"A",{href:!0});var iIt=s(PK);rkr=r(iIt,"TFCamembertForMultipleChoice"),iIt.forEach(t),tkr=r(hGe," (CamemBERT model)"),hGe.forEach(t),akr=i(Fe),PE=n(Fe,"LI",{});var pGe=s(PE);F4e=n(pGe,"STRONG",{});var dIt=s(F4e);nkr=r(dIt,"convbert"),dIt.forEach(t),skr=r(pGe," \u2014 "),BK=n(pGe,"A",{href:!0});var cIt=s(BK);lkr=r(cIt,"TFConvBertForMultipleChoice"),cIt.forEach(t),ikr=r(pGe," (ConvBERT model)"),pGe.forEach(t),dkr=i(Fe),BE=n(Fe,"LI",{});var _Ge=s(BE);T4e=n(_Ge,"STRONG",{});var fIt=s(T4e);ckr=r(fIt,"distilbert"),fIt.forEach(t),fkr=r(_Ge," \u2014 "),NK=n(_Ge,"A",{href:!0});var mIt=s(NK);mkr=r(mIt,"TFDistilBertForMultipleChoice"),mIt.forEach(t),gkr=r(_Ge," (DistilBERT model)"),_Ge.forEach(t),hkr=i(Fe),NE=n(Fe,"LI",{});var uGe=s(NE);M4e=n(uGe,"STRONG",{});var gIt=s(M4e);pkr=r(gIt,"electra"),gIt.forEach(t),_kr=r(uGe," \u2014 "),IK=n(uGe,"A",{href:!0});var hIt=s(IK);ukr=r(hIt,"TFElectraForMultipleChoice"),hIt.forEach(t),bkr=r(uGe," (ELECTRA model)"),uGe.forEach(t),vkr=i(Fe),IE=n(Fe,"LI",{});var bGe=s(IE);E4e=n(bGe,"STRONG",{});var pIt=s(E4e);Fkr=r(pIt,"flaubert"),pIt.forEach(t),Tkr=r(bGe," \u2014 "),qK=n(bGe,"A",{href:!0});var _It=s(qK);Mkr=r(_It,"TFFlaubertForMultipleChoice"),_It.forEach(t),Ekr=r(bGe," (FlauBERT model)"),bGe.forEach(t),Ckr=i(Fe),qE=n(Fe,"LI",{});var vGe=s(qE);C4e=n(vGe,"STRONG",{});var uIt=s(C4e);wkr=r(uIt,"funnel"),uIt.forEach(t),Akr=r(vGe," \u2014 "),jK=n(vGe,"A",{href:!0});var bIt=s(jK);Lkr=r(bIt,"TFFunnelForMultipleChoice"),bIt.forEach(t),ykr=r(vGe," (Funnel Transformer model)"),vGe.forEach(t),xkr=i(Fe),jE=n(Fe,"LI",{});var FGe=s(jE);w4e=n(FGe,"STRONG",{});var vIt=s(w4e);$kr=r(vIt,"longformer"),vIt.forEach(t),kkr=r(FGe," \u2014 "),DK=n(FGe,"A",{href:!0});var FIt=s(DK);Skr=r(FIt,"TFLongformerForMultipleChoice"),FIt.forEach(t),Rkr=r(FGe," (Longformer model)"),FGe.forEach(t),Pkr=i(Fe),DE=n(Fe,"LI",{});var TGe=s(DE);A4e=n(TGe,"STRONG",{});var TIt=s(A4e);Bkr=r(TIt,"mobilebert"),TIt.forEach(t),Nkr=r(TGe," \u2014 "),GK=n(TGe,"A",{href:!0});var MIt=s(GK);Ikr=r(MIt,"TFMobileBertForMultipleChoice"),MIt.forEach(t),qkr=r(TGe," (MobileBERT model)"),TGe.forEach(t),jkr=i(Fe),GE=n(Fe,"LI",{});var MGe=s(GE);L4e=n(MGe,"STRONG",{});var EIt=s(L4e);Dkr=r(EIt,"mpnet"),EIt.forEach(t),Gkr=r(MGe," \u2014 "),OK=n(MGe,"A",{href:!0});var CIt=s(OK);Okr=r(CIt,"TFMPNetForMultipleChoice"),CIt.forEach(t),Vkr=r(MGe," (MPNet model)"),MGe.forEach(t),Xkr=i(Fe),OE=n(Fe,"LI",{});var EGe=s(OE);y4e=n(EGe,"STRONG",{});var wIt=s(y4e);zkr=r(wIt,"rembert"),wIt.forEach(t),Qkr=r(EGe," \u2014 "),VK=n(EGe,"A",{href:!0});var AIt=s(VK);Wkr=r(AIt,"TFRemBertForMultipleChoice"),AIt.forEach(t),Hkr=r(EGe," (RemBERT model)"),EGe.forEach(t),Ukr=i(Fe),VE=n(Fe,"LI",{});var CGe=s(VE);x4e=n(CGe,"STRONG",{});var LIt=s(x4e);Jkr=r(LIt,"roberta"),LIt.forEach(t),Ykr=r(CGe," \u2014 "),XK=n(CGe,"A",{href:!0});var yIt=s(XK);Kkr=r(yIt,"TFRobertaForMultipleChoice"),yIt.forEach(t),Zkr=r(CGe," (RoBERTa model)"),CGe.forEach(t),eSr=i(Fe),XE=n(Fe,"LI",{});var wGe=s(XE);$4e=n(wGe,"STRONG",{});var xIt=s($4e);oSr=r(xIt,"roformer"),xIt.forEach(t),rSr=r(wGe," \u2014 "),zK=n(wGe,"A",{href:!0});var $It=s(zK);tSr=r($It,"TFRoFormerForMultipleChoice"),$It.forEach(t),aSr=r(wGe," (RoFormer model)"),wGe.forEach(t),nSr=i(Fe),zE=n(Fe,"LI",{});var AGe=s(zE);k4e=n(AGe,"STRONG",{});var kIt=s(k4e);sSr=r(kIt,"xlm"),kIt.forEach(t),lSr=r(AGe," \u2014 "),QK=n(AGe,"A",{href:!0});var SIt=s(QK);iSr=r(SIt,"TFXLMForMultipleChoice"),SIt.forEach(t),dSr=r(AGe," (XLM model)"),AGe.forEach(t),cSr=i(Fe),QE=n(Fe,"LI",{});var LGe=s(QE);S4e=n(LGe,"STRONG",{});var RIt=s(S4e);fSr=r(RIt,"xlm-roberta"),RIt.forEach(t),mSr=r(LGe," \u2014 "),WK=n(LGe,"A",{href:!0});var PIt=s(WK);gSr=r(PIt,"TFXLMRobertaForMultipleChoice"),PIt.forEach(t),hSr=r(LGe," (XLM-RoBERTa model)"),LGe.forEach(t),pSr=i(Fe),WE=n(Fe,"LI",{});var yGe=s(WE);R4e=n(yGe,"STRONG",{});var BIt=s(R4e);_Sr=r(BIt,"xlnet"),BIt.forEach(t),uSr=r(yGe," \u2014 "),HK=n(yGe,"A",{href:!0});var NIt=s(HK);bSr=r(NIt,"TFXLNetForMultipleChoice"),NIt.forEach(t),vSr=r(yGe," (XLNet model)"),yGe.forEach(t),Fe.forEach(t),FSr=i(zl),T(HE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),zze=i(f),kc=n(f,"H2",{class:!0});var ZWe=s(kc);UE=n(ZWe,"A",{id:!0,class:!0,href:!0});var IIt=s(UE);P4e=n(IIt,"SPAN",{});var qIt=s(P4e);T(Nx.$$.fragment,qIt),qIt.forEach(t),IIt.forEach(t),TSr=i(ZWe),B4e=n(ZWe,"SPAN",{});var jIt=s(B4e);MSr=r(jIt,"TFAutoModelForNextSentencePrediction"),jIt.forEach(t),ZWe.forEach(t),Qze=i(f),dr=n(f,"DIV",{class:!0});var Ql=s(dr);T(Ix.$$.fragment,Ql),ESr=i(Ql),Sc=n(Ql,"P",{});var eae=s(Sc);CSr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UK=n(eae,"A",{href:!0});var DIt=s(UK);wSr=r(DIt,"from_pretrained()"),DIt.forEach(t),ASr=r(eae," class method or the "),JK=n(eae,"A",{href:!0});var GIt=s(JK);LSr=r(GIt,"from_config()"),GIt.forEach(t),ySr=r(eae,` class
method.`),eae.forEach(t),xSr=i(Ql),qx=n(Ql,"P",{});var eHe=s(qx);$Sr=r(eHe,"This class cannot be instantiated directly using "),N4e=n(eHe,"CODE",{});var OIt=s(N4e);kSr=r(OIt,"__init__()"),OIt.forEach(t),SSr=r(eHe," (throws an error)."),eHe.forEach(t),RSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var CA=s(Gt);T(jx.$$.fragment,CA),PSr=i(CA),I4e=n(CA,"P",{});var VIt=s(I4e);BSr=r(VIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),VIt.forEach(t),NSr=i(CA),Rc=n(CA,"P",{});var oae=s(Rc);ISr=r(oae,`Note:
Loading a model from its configuration file does `),q4e=n(oae,"STRONG",{});var XIt=s(q4e);qSr=r(XIt,"not"),XIt.forEach(t),jSr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=n(oae,"A",{href:!0});var zIt=s(YK);DSr=r(zIt,"from_pretrained()"),zIt.forEach(t),GSr=r(oae," to load the model weights."),oae.forEach(t),OSr=i(CA),T(JE.$$.fragment,CA),CA.forEach(t),VSr=i(Ql),Ir=n(Ql,"DIV",{class:!0});var Wl=s(Ir);T(Dx.$$.fragment,Wl),XSr=i(Wl),j4e=n(Wl,"P",{});var QIt=s(j4e);zSr=r(QIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),QIt.forEach(t),QSr=i(Wl),pn=n(Wl,"P",{});var wA=s(pn);WSr=r(wA,"The model class to instantiate is selected based on the "),D4e=n(wA,"CODE",{});var WIt=s(D4e);HSr=r(WIt,"model_type"),WIt.forEach(t),USr=r(wA,` property of the config object (either
passed as an argument or loaded from `),G4e=n(wA,"CODE",{});var HIt=s(G4e);JSr=r(HIt,"pretrained_model_name_or_path"),HIt.forEach(t),YSr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=n(wA,"CODE",{});var UIt=s(O4e);KSr=r(UIt,"pretrained_model_name_or_path"),UIt.forEach(t),ZSr=r(wA,":"),wA.forEach(t),eRr=i(Wl),Gx=n(Wl,"UL",{});var oHe=s(Gx);YE=n(oHe,"LI",{});var xGe=s(YE);V4e=n(xGe,"STRONG",{});var JIt=s(V4e);oRr=r(JIt,"bert"),JIt.forEach(t),rRr=r(xGe," \u2014 "),KK=n(xGe,"A",{href:!0});var YIt=s(KK);tRr=r(YIt,"TFBertForNextSentencePrediction"),YIt.forEach(t),aRr=r(xGe," (BERT model)"),xGe.forEach(t),nRr=i(oHe),KE=n(oHe,"LI",{});var $Ge=s(KE);X4e=n($Ge,"STRONG",{});var KIt=s(X4e);sRr=r(KIt,"mobilebert"),KIt.forEach(t),lRr=r($Ge," \u2014 "),ZK=n($Ge,"A",{href:!0});var ZIt=s(ZK);iRr=r(ZIt,"TFMobileBertForNextSentencePrediction"),ZIt.forEach(t),dRr=r($Ge," (MobileBERT model)"),$Ge.forEach(t),oHe.forEach(t),cRr=i(Wl),T(ZE.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Wze=i(f),Pc=n(f,"H2",{class:!0});var rHe=s(Pc);eC=n(rHe,"A",{id:!0,class:!0,href:!0});var eqt=s(eC);z4e=n(eqt,"SPAN",{});var oqt=s(z4e);T(Ox.$$.fragment,oqt),oqt.forEach(t),eqt.forEach(t),fRr=i(rHe),Q4e=n(rHe,"SPAN",{});var rqt=s(Q4e);mRr=r(rqt,"TFAutoModelForTableQuestionAnswering"),rqt.forEach(t),rHe.forEach(t),Hze=i(f),cr=n(f,"DIV",{class:!0});var Hl=s(cr);T(Vx.$$.fragment,Hl),gRr=i(Hl),Bc=n(Hl,"P",{});var rae=s(Bc);hRr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),eZ=n(rae,"A",{href:!0});var tqt=s(eZ);pRr=r(tqt,"from_pretrained()"),tqt.forEach(t),_Rr=r(rae," class method or the "),oZ=n(rae,"A",{href:!0});var aqt=s(oZ);uRr=r(aqt,"from_config()"),aqt.forEach(t),bRr=r(rae,` class
method.`),rae.forEach(t),vRr=i(Hl),Xx=n(Hl,"P",{});var tHe=s(Xx);FRr=r(tHe,"This class cannot be instantiated directly using "),W4e=n(tHe,"CODE",{});var nqt=s(W4e);TRr=r(nqt,"__init__()"),nqt.forEach(t),MRr=r(tHe," (throws an error)."),tHe.forEach(t),ERr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var AA=s(Ot);T(zx.$$.fragment,AA),CRr=i(AA),H4e=n(AA,"P",{});var sqt=s(H4e);wRr=r(sqt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sqt.forEach(t),ARr=i(AA),Nc=n(AA,"P",{});var tae=s(Nc);LRr=r(tae,`Note:
Loading a model from its configuration file does `),U4e=n(tae,"STRONG",{});var lqt=s(U4e);yRr=r(lqt,"not"),lqt.forEach(t),xRr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(tae,"A",{href:!0});var iqt=s(rZ);$Rr=r(iqt,"from_pretrained()"),iqt.forEach(t),kRr=r(tae," to load the model weights."),tae.forEach(t),SRr=i(AA),T(oC.$$.fragment,AA),AA.forEach(t),RRr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(Qx.$$.fragment,Ul),PRr=i(Ul),J4e=n(Ul,"P",{});var dqt=s(J4e);BRr=r(dqt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dqt.forEach(t),NRr=i(Ul),_n=n(Ul,"P",{});var LA=s(_n);IRr=r(LA,"The model class to instantiate is selected based on the "),Y4e=n(LA,"CODE",{});var cqt=s(Y4e);qRr=r(cqt,"model_type"),cqt.forEach(t),jRr=r(LA,` property of the config object (either
passed as an argument or loaded from `),K4e=n(LA,"CODE",{});var fqt=s(K4e);DRr=r(fqt,"pretrained_model_name_or_path"),fqt.forEach(t),GRr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=n(LA,"CODE",{});var mqt=s(Z4e);ORr=r(mqt,"pretrained_model_name_or_path"),mqt.forEach(t),VRr=r(LA,":"),LA.forEach(t),XRr=i(Ul),eEe=n(Ul,"UL",{});var gqt=s(eEe);rC=n(gqt,"LI",{});var kGe=s(rC);oEe=n(kGe,"STRONG",{});var hqt=s(oEe);zRr=r(hqt,"tapas"),hqt.forEach(t),QRr=r(kGe," \u2014 "),tZ=n(kGe,"A",{href:!0});var pqt=s(tZ);WRr=r(pqt,"TFTapasForQuestionAnswering"),pqt.forEach(t),HRr=r(kGe," (TAPAS model)"),kGe.forEach(t),gqt.forEach(t),URr=i(Ul),T(tC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Uze=i(f),Ic=n(f,"H2",{class:!0});var aHe=s(Ic);aC=n(aHe,"A",{id:!0,class:!0,href:!0});var _qt=s(aC);rEe=n(_qt,"SPAN",{});var uqt=s(rEe);T(Wx.$$.fragment,uqt),uqt.forEach(t),_qt.forEach(t),JRr=i(aHe),tEe=n(aHe,"SPAN",{});var bqt=s(tEe);YRr=r(bqt,"TFAutoModelForTokenClassification"),bqt.forEach(t),aHe.forEach(t),Jze=i(f),fr=n(f,"DIV",{class:!0});var Jl=s(fr);T(Hx.$$.fragment,Jl),KRr=i(Jl),qc=n(Jl,"P",{});var aae=s(qc);ZRr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aZ=n(aae,"A",{href:!0});var vqt=s(aZ);ePr=r(vqt,"from_pretrained()"),vqt.forEach(t),oPr=r(aae," class method or the "),nZ=n(aae,"A",{href:!0});var Fqt=s(nZ);rPr=r(Fqt,"from_config()"),Fqt.forEach(t),tPr=r(aae,` class
method.`),aae.forEach(t),aPr=i(Jl),Ux=n(Jl,"P",{});var nHe=s(Ux);nPr=r(nHe,"This class cannot be instantiated directly using "),aEe=n(nHe,"CODE",{});var Tqt=s(aEe);sPr=r(Tqt,"__init__()"),Tqt.forEach(t),lPr=r(nHe," (throws an error)."),nHe.forEach(t),iPr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var yA=s(Vt);T(Jx.$$.fragment,yA),dPr=i(yA),nEe=n(yA,"P",{});var Mqt=s(nEe);cPr=r(Mqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mqt.forEach(t),fPr=i(yA),jc=n(yA,"P",{});var nae=s(jc);mPr=r(nae,`Note:
Loading a model from its configuration file does `),sEe=n(nae,"STRONG",{});var Eqt=s(sEe);gPr=r(Eqt,"not"),Eqt.forEach(t),hPr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),sZ=n(nae,"A",{href:!0});var Cqt=s(sZ);pPr=r(Cqt,"from_pretrained()"),Cqt.forEach(t),_Pr=r(nae," to load the model weights."),nae.forEach(t),uPr=i(yA),T(nC.$$.fragment,yA),yA.forEach(t),bPr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(Yx.$$.fragment,Yl),vPr=i(Yl),lEe=n(Yl,"P",{});var wqt=s(lEe);FPr=r(wqt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wqt.forEach(t),TPr=i(Yl),un=n(Yl,"P",{});var xA=s(un);MPr=r(xA,"The model class to instantiate is selected based on the "),iEe=n(xA,"CODE",{});var Aqt=s(iEe);EPr=r(Aqt,"model_type"),Aqt.forEach(t),CPr=r(xA,` property of the config object (either
passed as an argument or loaded from `),dEe=n(xA,"CODE",{});var Lqt=s(dEe);wPr=r(Lqt,"pretrained_model_name_or_path"),Lqt.forEach(t),APr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cEe=n(xA,"CODE",{});var yqt=s(cEe);LPr=r(yqt,"pretrained_model_name_or_path"),yqt.forEach(t),yPr=r(xA,":"),xA.forEach(t),xPr=i(Yl),de=n(Yl,"UL",{});var ge=s(de);sC=n(ge,"LI",{});var SGe=s(sC);fEe=n(SGe,"STRONG",{});var xqt=s(fEe);$Pr=r(xqt,"albert"),xqt.forEach(t),kPr=r(SGe," \u2014 "),lZ=n(SGe,"A",{href:!0});var $qt=s(lZ);SPr=r($qt,"TFAlbertForTokenClassification"),$qt.forEach(t),RPr=r(SGe," (ALBERT model)"),SGe.forEach(t),PPr=i(ge),lC=n(ge,"LI",{});var RGe=s(lC);mEe=n(RGe,"STRONG",{});var kqt=s(mEe);BPr=r(kqt,"bert"),kqt.forEach(t),NPr=r(RGe," \u2014 "),iZ=n(RGe,"A",{href:!0});var Sqt=s(iZ);IPr=r(Sqt,"TFBertForTokenClassification"),Sqt.forEach(t),qPr=r(RGe," (BERT model)"),RGe.forEach(t),jPr=i(ge),iC=n(ge,"LI",{});var PGe=s(iC);gEe=n(PGe,"STRONG",{});var Rqt=s(gEe);DPr=r(Rqt,"camembert"),Rqt.forEach(t),GPr=r(PGe," \u2014 "),dZ=n(PGe,"A",{href:!0});var Pqt=s(dZ);OPr=r(Pqt,"TFCamembertForTokenClassification"),Pqt.forEach(t),VPr=r(PGe," (CamemBERT model)"),PGe.forEach(t),XPr=i(ge),dC=n(ge,"LI",{});var BGe=s(dC);hEe=n(BGe,"STRONG",{});var Bqt=s(hEe);zPr=r(Bqt,"convbert"),Bqt.forEach(t),QPr=r(BGe," \u2014 "),cZ=n(BGe,"A",{href:!0});var Nqt=s(cZ);WPr=r(Nqt,"TFConvBertForTokenClassification"),Nqt.forEach(t),HPr=r(BGe," (ConvBERT model)"),BGe.forEach(t),UPr=i(ge),cC=n(ge,"LI",{});var NGe=s(cC);pEe=n(NGe,"STRONG",{});var Iqt=s(pEe);JPr=r(Iqt,"deberta"),Iqt.forEach(t),YPr=r(NGe," \u2014 "),fZ=n(NGe,"A",{href:!0});var qqt=s(fZ);KPr=r(qqt,"TFDebertaForTokenClassification"),qqt.forEach(t),ZPr=r(NGe," (DeBERTa model)"),NGe.forEach(t),eBr=i(ge),fC=n(ge,"LI",{});var IGe=s(fC);_Ee=n(IGe,"STRONG",{});var jqt=s(_Ee);oBr=r(jqt,"deberta-v2"),jqt.forEach(t),rBr=r(IGe," \u2014 "),mZ=n(IGe,"A",{href:!0});var Dqt=s(mZ);tBr=r(Dqt,"TFDebertaV2ForTokenClassification"),Dqt.forEach(t),aBr=r(IGe," (DeBERTa-v2 model)"),IGe.forEach(t),nBr=i(ge),mC=n(ge,"LI",{});var qGe=s(mC);uEe=n(qGe,"STRONG",{});var Gqt=s(uEe);sBr=r(Gqt,"distilbert"),Gqt.forEach(t),lBr=r(qGe," \u2014 "),gZ=n(qGe,"A",{href:!0});var Oqt=s(gZ);iBr=r(Oqt,"TFDistilBertForTokenClassification"),Oqt.forEach(t),dBr=r(qGe," (DistilBERT model)"),qGe.forEach(t),cBr=i(ge),gC=n(ge,"LI",{});var jGe=s(gC);bEe=n(jGe,"STRONG",{});var Vqt=s(bEe);fBr=r(Vqt,"electra"),Vqt.forEach(t),mBr=r(jGe," \u2014 "),hZ=n(jGe,"A",{href:!0});var Xqt=s(hZ);gBr=r(Xqt,"TFElectraForTokenClassification"),Xqt.forEach(t),hBr=r(jGe," (ELECTRA model)"),jGe.forEach(t),pBr=i(ge),hC=n(ge,"LI",{});var DGe=s(hC);vEe=n(DGe,"STRONG",{});var zqt=s(vEe);_Br=r(zqt,"flaubert"),zqt.forEach(t),uBr=r(DGe," \u2014 "),pZ=n(DGe,"A",{href:!0});var Qqt=s(pZ);bBr=r(Qqt,"TFFlaubertForTokenClassification"),Qqt.forEach(t),vBr=r(DGe," (FlauBERT model)"),DGe.forEach(t),FBr=i(ge),pC=n(ge,"LI",{});var GGe=s(pC);FEe=n(GGe,"STRONG",{});var Wqt=s(FEe);TBr=r(Wqt,"funnel"),Wqt.forEach(t),MBr=r(GGe," \u2014 "),_Z=n(GGe,"A",{href:!0});var Hqt=s(_Z);EBr=r(Hqt,"TFFunnelForTokenClassification"),Hqt.forEach(t),CBr=r(GGe," (Funnel Transformer model)"),GGe.forEach(t),wBr=i(ge),_C=n(ge,"LI",{});var OGe=s(_C);TEe=n(OGe,"STRONG",{});var Uqt=s(TEe);ABr=r(Uqt,"layoutlm"),Uqt.forEach(t),LBr=r(OGe," \u2014 "),uZ=n(OGe,"A",{href:!0});var Jqt=s(uZ);yBr=r(Jqt,"TFLayoutLMForTokenClassification"),Jqt.forEach(t),xBr=r(OGe," (LayoutLM model)"),OGe.forEach(t),$Br=i(ge),uC=n(ge,"LI",{});var VGe=s(uC);MEe=n(VGe,"STRONG",{});var Yqt=s(MEe);kBr=r(Yqt,"longformer"),Yqt.forEach(t),SBr=r(VGe," \u2014 "),bZ=n(VGe,"A",{href:!0});var Kqt=s(bZ);RBr=r(Kqt,"TFLongformerForTokenClassification"),Kqt.forEach(t),PBr=r(VGe," (Longformer model)"),VGe.forEach(t),BBr=i(ge),bC=n(ge,"LI",{});var XGe=s(bC);EEe=n(XGe,"STRONG",{});var Zqt=s(EEe);NBr=r(Zqt,"mobilebert"),Zqt.forEach(t),IBr=r(XGe," \u2014 "),vZ=n(XGe,"A",{href:!0});var ejt=s(vZ);qBr=r(ejt,"TFMobileBertForTokenClassification"),ejt.forEach(t),jBr=r(XGe," (MobileBERT model)"),XGe.forEach(t),DBr=i(ge),vC=n(ge,"LI",{});var zGe=s(vC);CEe=n(zGe,"STRONG",{});var ojt=s(CEe);GBr=r(ojt,"mpnet"),ojt.forEach(t),OBr=r(zGe," \u2014 "),FZ=n(zGe,"A",{href:!0});var rjt=s(FZ);VBr=r(rjt,"TFMPNetForTokenClassification"),rjt.forEach(t),XBr=r(zGe," (MPNet model)"),zGe.forEach(t),zBr=i(ge),FC=n(ge,"LI",{});var QGe=s(FC);wEe=n(QGe,"STRONG",{});var tjt=s(wEe);QBr=r(tjt,"rembert"),tjt.forEach(t),WBr=r(QGe," \u2014 "),TZ=n(QGe,"A",{href:!0});var ajt=s(TZ);HBr=r(ajt,"TFRemBertForTokenClassification"),ajt.forEach(t),UBr=r(QGe," (RemBERT model)"),QGe.forEach(t),JBr=i(ge),TC=n(ge,"LI",{});var WGe=s(TC);AEe=n(WGe,"STRONG",{});var njt=s(AEe);YBr=r(njt,"roberta"),njt.forEach(t),KBr=r(WGe," \u2014 "),MZ=n(WGe,"A",{href:!0});var sjt=s(MZ);ZBr=r(sjt,"TFRobertaForTokenClassification"),sjt.forEach(t),eNr=r(WGe," (RoBERTa model)"),WGe.forEach(t),oNr=i(ge),MC=n(ge,"LI",{});var HGe=s(MC);LEe=n(HGe,"STRONG",{});var ljt=s(LEe);rNr=r(ljt,"roformer"),ljt.forEach(t),tNr=r(HGe," \u2014 "),EZ=n(HGe,"A",{href:!0});var ijt=s(EZ);aNr=r(ijt,"TFRoFormerForTokenClassification"),ijt.forEach(t),nNr=r(HGe," (RoFormer model)"),HGe.forEach(t),sNr=i(ge),EC=n(ge,"LI",{});var UGe=s(EC);yEe=n(UGe,"STRONG",{});var djt=s(yEe);lNr=r(djt,"xlm"),djt.forEach(t),iNr=r(UGe," \u2014 "),CZ=n(UGe,"A",{href:!0});var cjt=s(CZ);dNr=r(cjt,"TFXLMForTokenClassification"),cjt.forEach(t),cNr=r(UGe," (XLM model)"),UGe.forEach(t),fNr=i(ge),CC=n(ge,"LI",{});var JGe=s(CC);xEe=n(JGe,"STRONG",{});var fjt=s(xEe);mNr=r(fjt,"xlm-roberta"),fjt.forEach(t),gNr=r(JGe," \u2014 "),wZ=n(JGe,"A",{href:!0});var mjt=s(wZ);hNr=r(mjt,"TFXLMRobertaForTokenClassification"),mjt.forEach(t),pNr=r(JGe," (XLM-RoBERTa model)"),JGe.forEach(t),_Nr=i(ge),wC=n(ge,"LI",{});var YGe=s(wC);$Ee=n(YGe,"STRONG",{});var gjt=s($Ee);uNr=r(gjt,"xlnet"),gjt.forEach(t),bNr=r(YGe," \u2014 "),AZ=n(YGe,"A",{href:!0});var hjt=s(AZ);vNr=r(hjt,"TFXLNetForTokenClassification"),hjt.forEach(t),FNr=r(YGe," (XLNet model)"),YGe.forEach(t),ge.forEach(t),TNr=i(Yl),T(AC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Yze=i(f),Dc=n(f,"H2",{class:!0});var sHe=s(Dc);LC=n(sHe,"A",{id:!0,class:!0,href:!0});var pjt=s(LC);kEe=n(pjt,"SPAN",{});var _jt=s(kEe);T(Kx.$$.fragment,_jt),_jt.forEach(t),pjt.forEach(t),MNr=i(sHe),SEe=n(sHe,"SPAN",{});var ujt=s(SEe);ENr=r(ujt,"TFAutoModelForQuestionAnswering"),ujt.forEach(t),sHe.forEach(t),Kze=i(f),mr=n(f,"DIV",{class:!0});var Kl=s(mr);T(Zx.$$.fragment,Kl),CNr=i(Kl),Gc=n(Kl,"P",{});var sae=s(Gc);wNr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LZ=n(sae,"A",{href:!0});var bjt=s(LZ);ANr=r(bjt,"from_pretrained()"),bjt.forEach(t),LNr=r(sae," class method or the "),yZ=n(sae,"A",{href:!0});var vjt=s(yZ);yNr=r(vjt,"from_config()"),vjt.forEach(t),xNr=r(sae,` class
method.`),sae.forEach(t),$Nr=i(Kl),e$=n(Kl,"P",{});var lHe=s(e$);kNr=r(lHe,"This class cannot be instantiated directly using "),REe=n(lHe,"CODE",{});var Fjt=s(REe);SNr=r(Fjt,"__init__()"),Fjt.forEach(t),RNr=r(lHe," (throws an error)."),lHe.forEach(t),PNr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var $A=s(Xt);T(o$.$$.fragment,$A),BNr=i($A),PEe=n($A,"P",{});var Tjt=s(PEe);NNr=r(Tjt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Tjt.forEach(t),INr=i($A),Oc=n($A,"P",{});var lae=s(Oc);qNr=r(lae,`Note:
Loading a model from its configuration file does `),BEe=n(lae,"STRONG",{});var Mjt=s(BEe);jNr=r(Mjt,"not"),Mjt.forEach(t),DNr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=n(lae,"A",{href:!0});var Ejt=s(xZ);GNr=r(Ejt,"from_pretrained()"),Ejt.forEach(t),ONr=r(lae," to load the model weights."),lae.forEach(t),VNr=i($A),T(yC.$$.fragment,$A),$A.forEach(t),XNr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(r$.$$.fragment,Zl),zNr=i(Zl),NEe=n(Zl,"P",{});var Cjt=s(NEe);QNr=r(Cjt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Cjt.forEach(t),WNr=i(Zl),bn=n(Zl,"P",{});var kA=s(bn);HNr=r(kA,"The model class to instantiate is selected based on the "),IEe=n(kA,"CODE",{});var wjt=s(IEe);UNr=r(wjt,"model_type"),wjt.forEach(t),JNr=r(kA,` property of the config object (either
passed as an argument or loaded from `),qEe=n(kA,"CODE",{});var Ajt=s(qEe);YNr=r(Ajt,"pretrained_model_name_or_path"),Ajt.forEach(t),KNr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jEe=n(kA,"CODE",{});var Ljt=s(jEe);ZNr=r(Ljt,"pretrained_model_name_or_path"),Ljt.forEach(t),eIr=r(kA,":"),kA.forEach(t),oIr=i(Zl),ce=n(Zl,"UL",{});var he=s(ce);xC=n(he,"LI",{});var KGe=s(xC);DEe=n(KGe,"STRONG",{});var yjt=s(DEe);rIr=r(yjt,"albert"),yjt.forEach(t),tIr=r(KGe," \u2014 "),$Z=n(KGe,"A",{href:!0});var xjt=s($Z);aIr=r(xjt,"TFAlbertForQuestionAnswering"),xjt.forEach(t),nIr=r(KGe," (ALBERT model)"),KGe.forEach(t),sIr=i(he),$C=n(he,"LI",{});var ZGe=s($C);GEe=n(ZGe,"STRONG",{});var $jt=s(GEe);lIr=r($jt,"bert"),$jt.forEach(t),iIr=r(ZGe," \u2014 "),kZ=n(ZGe,"A",{href:!0});var kjt=s(kZ);dIr=r(kjt,"TFBertForQuestionAnswering"),kjt.forEach(t),cIr=r(ZGe," (BERT model)"),ZGe.forEach(t),fIr=i(he),kC=n(he,"LI",{});var eOe=s(kC);OEe=n(eOe,"STRONG",{});var Sjt=s(OEe);mIr=r(Sjt,"camembert"),Sjt.forEach(t),gIr=r(eOe," \u2014 "),SZ=n(eOe,"A",{href:!0});var Rjt=s(SZ);hIr=r(Rjt,"TFCamembertForQuestionAnswering"),Rjt.forEach(t),pIr=r(eOe," (CamemBERT model)"),eOe.forEach(t),_Ir=i(he),SC=n(he,"LI",{});var oOe=s(SC);VEe=n(oOe,"STRONG",{});var Pjt=s(VEe);uIr=r(Pjt,"convbert"),Pjt.forEach(t),bIr=r(oOe," \u2014 "),RZ=n(oOe,"A",{href:!0});var Bjt=s(RZ);vIr=r(Bjt,"TFConvBertForQuestionAnswering"),Bjt.forEach(t),FIr=r(oOe," (ConvBERT model)"),oOe.forEach(t),TIr=i(he),RC=n(he,"LI",{});var rOe=s(RC);XEe=n(rOe,"STRONG",{});var Njt=s(XEe);MIr=r(Njt,"deberta"),Njt.forEach(t),EIr=r(rOe," \u2014 "),PZ=n(rOe,"A",{href:!0});var Ijt=s(PZ);CIr=r(Ijt,"TFDebertaForQuestionAnswering"),Ijt.forEach(t),wIr=r(rOe," (DeBERTa model)"),rOe.forEach(t),AIr=i(he),PC=n(he,"LI",{});var tOe=s(PC);zEe=n(tOe,"STRONG",{});var qjt=s(zEe);LIr=r(qjt,"deberta-v2"),qjt.forEach(t),yIr=r(tOe," \u2014 "),BZ=n(tOe,"A",{href:!0});var jjt=s(BZ);xIr=r(jjt,"TFDebertaV2ForQuestionAnswering"),jjt.forEach(t),$Ir=r(tOe," (DeBERTa-v2 model)"),tOe.forEach(t),kIr=i(he),BC=n(he,"LI",{});var aOe=s(BC);QEe=n(aOe,"STRONG",{});var Djt=s(QEe);SIr=r(Djt,"distilbert"),Djt.forEach(t),RIr=r(aOe," \u2014 "),NZ=n(aOe,"A",{href:!0});var Gjt=s(NZ);PIr=r(Gjt,"TFDistilBertForQuestionAnswering"),Gjt.forEach(t),BIr=r(aOe," (DistilBERT model)"),aOe.forEach(t),NIr=i(he),NC=n(he,"LI",{});var nOe=s(NC);WEe=n(nOe,"STRONG",{});var Ojt=s(WEe);IIr=r(Ojt,"electra"),Ojt.forEach(t),qIr=r(nOe," \u2014 "),IZ=n(nOe,"A",{href:!0});var Vjt=s(IZ);jIr=r(Vjt,"TFElectraForQuestionAnswering"),Vjt.forEach(t),DIr=r(nOe," (ELECTRA model)"),nOe.forEach(t),GIr=i(he),IC=n(he,"LI",{});var sOe=s(IC);HEe=n(sOe,"STRONG",{});var Xjt=s(HEe);OIr=r(Xjt,"flaubert"),Xjt.forEach(t),VIr=r(sOe," \u2014 "),qZ=n(sOe,"A",{href:!0});var zjt=s(qZ);XIr=r(zjt,"TFFlaubertForQuestionAnsweringSimple"),zjt.forEach(t),zIr=r(sOe," (FlauBERT model)"),sOe.forEach(t),QIr=i(he),qC=n(he,"LI",{});var lOe=s(qC);UEe=n(lOe,"STRONG",{});var Qjt=s(UEe);WIr=r(Qjt,"funnel"),Qjt.forEach(t),HIr=r(lOe," \u2014 "),jZ=n(lOe,"A",{href:!0});var Wjt=s(jZ);UIr=r(Wjt,"TFFunnelForQuestionAnswering"),Wjt.forEach(t),JIr=r(lOe," (Funnel Transformer model)"),lOe.forEach(t),YIr=i(he),jC=n(he,"LI",{});var iOe=s(jC);JEe=n(iOe,"STRONG",{});var Hjt=s(JEe);KIr=r(Hjt,"gptj"),Hjt.forEach(t),ZIr=r(iOe," \u2014 "),DZ=n(iOe,"A",{href:!0});var Ujt=s(DZ);eqr=r(Ujt,"TFGPTJForQuestionAnswering"),Ujt.forEach(t),oqr=r(iOe," (GPT-J model)"),iOe.forEach(t),rqr=i(he),DC=n(he,"LI",{});var dOe=s(DC);YEe=n(dOe,"STRONG",{});var Jjt=s(YEe);tqr=r(Jjt,"longformer"),Jjt.forEach(t),aqr=r(dOe," \u2014 "),GZ=n(dOe,"A",{href:!0});var Yjt=s(GZ);nqr=r(Yjt,"TFLongformerForQuestionAnswering"),Yjt.forEach(t),sqr=r(dOe," (Longformer model)"),dOe.forEach(t),lqr=i(he),GC=n(he,"LI",{});var cOe=s(GC);KEe=n(cOe,"STRONG",{});var Kjt=s(KEe);iqr=r(Kjt,"mobilebert"),Kjt.forEach(t),dqr=r(cOe," \u2014 "),OZ=n(cOe,"A",{href:!0});var Zjt=s(OZ);cqr=r(Zjt,"TFMobileBertForQuestionAnswering"),Zjt.forEach(t),fqr=r(cOe," (MobileBERT model)"),cOe.forEach(t),mqr=i(he),OC=n(he,"LI",{});var fOe=s(OC);ZEe=n(fOe,"STRONG",{});var eDt=s(ZEe);gqr=r(eDt,"mpnet"),eDt.forEach(t),hqr=r(fOe," \u2014 "),VZ=n(fOe,"A",{href:!0});var oDt=s(VZ);pqr=r(oDt,"TFMPNetForQuestionAnswering"),oDt.forEach(t),_qr=r(fOe," (MPNet model)"),fOe.forEach(t),uqr=i(he),VC=n(he,"LI",{});var mOe=s(VC);eCe=n(mOe,"STRONG",{});var rDt=s(eCe);bqr=r(rDt,"rembert"),rDt.forEach(t),vqr=r(mOe," \u2014 "),XZ=n(mOe,"A",{href:!0});var tDt=s(XZ);Fqr=r(tDt,"TFRemBertForQuestionAnswering"),tDt.forEach(t),Tqr=r(mOe," (RemBERT model)"),mOe.forEach(t),Mqr=i(he),XC=n(he,"LI",{});var gOe=s(XC);oCe=n(gOe,"STRONG",{});var aDt=s(oCe);Eqr=r(aDt,"roberta"),aDt.forEach(t),Cqr=r(gOe," \u2014 "),zZ=n(gOe,"A",{href:!0});var nDt=s(zZ);wqr=r(nDt,"TFRobertaForQuestionAnswering"),nDt.forEach(t),Aqr=r(gOe," (RoBERTa model)"),gOe.forEach(t),Lqr=i(he),zC=n(he,"LI",{});var hOe=s(zC);rCe=n(hOe,"STRONG",{});var sDt=s(rCe);yqr=r(sDt,"roformer"),sDt.forEach(t),xqr=r(hOe," \u2014 "),QZ=n(hOe,"A",{href:!0});var lDt=s(QZ);$qr=r(lDt,"TFRoFormerForQuestionAnswering"),lDt.forEach(t),kqr=r(hOe," (RoFormer model)"),hOe.forEach(t),Sqr=i(he),QC=n(he,"LI",{});var pOe=s(QC);tCe=n(pOe,"STRONG",{});var iDt=s(tCe);Rqr=r(iDt,"xlm"),iDt.forEach(t),Pqr=r(pOe," \u2014 "),WZ=n(pOe,"A",{href:!0});var dDt=s(WZ);Bqr=r(dDt,"TFXLMForQuestionAnsweringSimple"),dDt.forEach(t),Nqr=r(pOe," (XLM model)"),pOe.forEach(t),Iqr=i(he),WC=n(he,"LI",{});var _Oe=s(WC);aCe=n(_Oe,"STRONG",{});var cDt=s(aCe);qqr=r(cDt,"xlm-roberta"),cDt.forEach(t),jqr=r(_Oe," \u2014 "),HZ=n(_Oe,"A",{href:!0});var fDt=s(HZ);Dqr=r(fDt,"TFXLMRobertaForQuestionAnswering"),fDt.forEach(t),Gqr=r(_Oe," (XLM-RoBERTa model)"),_Oe.forEach(t),Oqr=i(he),HC=n(he,"LI",{});var uOe=s(HC);nCe=n(uOe,"STRONG",{});var mDt=s(nCe);Vqr=r(mDt,"xlnet"),mDt.forEach(t),Xqr=r(uOe," \u2014 "),UZ=n(uOe,"A",{href:!0});var gDt=s(UZ);zqr=r(gDt,"TFXLNetForQuestionAnsweringSimple"),gDt.forEach(t),Qqr=r(uOe," (XLNet model)"),uOe.forEach(t),he.forEach(t),Wqr=i(Zl),T(UC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Zze=i(f),Vc=n(f,"H2",{class:!0});var iHe=s(Vc);JC=n(iHe,"A",{id:!0,class:!0,href:!0});var hDt=s(JC);sCe=n(hDt,"SPAN",{});var pDt=s(sCe);T(t$.$$.fragment,pDt),pDt.forEach(t),hDt.forEach(t),Hqr=i(iHe),lCe=n(iHe,"SPAN",{});var _Dt=s(lCe);Uqr=r(_Dt,"TFAutoModelForVision2Seq"),_Dt.forEach(t),iHe.forEach(t),eQe=i(f),gr=n(f,"DIV",{class:!0});var ei=s(gr);T(a$.$$.fragment,ei),Jqr=i(ei),Xc=n(ei,"P",{});var iae=s(Xc);Yqr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JZ=n(iae,"A",{href:!0});var uDt=s(JZ);Kqr=r(uDt,"from_pretrained()"),uDt.forEach(t),Zqr=r(iae," class method or the "),YZ=n(iae,"A",{href:!0});var bDt=s(YZ);ejr=r(bDt,"from_config()"),bDt.forEach(t),ojr=r(iae,` class
method.`),iae.forEach(t),rjr=i(ei),n$=n(ei,"P",{});var dHe=s(n$);tjr=r(dHe,"This class cannot be instantiated directly using "),iCe=n(dHe,"CODE",{});var vDt=s(iCe);ajr=r(vDt,"__init__()"),vDt.forEach(t),njr=r(dHe," (throws an error)."),dHe.forEach(t),sjr=i(ei),zt=n(ei,"DIV",{class:!0});var SA=s(zt);T(s$.$$.fragment,SA),ljr=i(SA),dCe=n(SA,"P",{});var FDt=s(dCe);ijr=r(FDt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FDt.forEach(t),djr=i(SA),zc=n(SA,"P",{});var dae=s(zc);cjr=r(dae,`Note:
Loading a model from its configuration file does `),cCe=n(dae,"STRONG",{});var TDt=s(cCe);fjr=r(TDt,"not"),TDt.forEach(t),mjr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=n(dae,"A",{href:!0});var MDt=s(KZ);gjr=r(MDt,"from_pretrained()"),MDt.forEach(t),hjr=r(dae," to load the model weights."),dae.forEach(t),pjr=i(SA),T(YC.$$.fragment,SA),SA.forEach(t),_jr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(l$.$$.fragment,oi),ujr=i(oi),fCe=n(oi,"P",{});var EDt=s(fCe);bjr=r(EDt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EDt.forEach(t),vjr=i(oi),vn=n(oi,"P",{});var RA=s(vn);Fjr=r(RA,"The model class to instantiate is selected based on the "),mCe=n(RA,"CODE",{});var CDt=s(mCe);Tjr=r(CDt,"model_type"),CDt.forEach(t),Mjr=r(RA,` property of the config object (either
passed as an argument or loaded from `),gCe=n(RA,"CODE",{});var wDt=s(gCe);Ejr=r(wDt,"pretrained_model_name_or_path"),wDt.forEach(t),Cjr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hCe=n(RA,"CODE",{});var ADt=s(hCe);wjr=r(ADt,"pretrained_model_name_or_path"),ADt.forEach(t),Ajr=r(RA,":"),RA.forEach(t),Ljr=i(oi),pCe=n(oi,"UL",{});var LDt=s(pCe);KC=n(LDt,"LI",{});var bOe=s(KC);_Ce=n(bOe,"STRONG",{});var yDt=s(_Ce);yjr=r(yDt,"vision-encoder-decoder"),yDt.forEach(t),xjr=r(bOe," \u2014 "),ZZ=n(bOe,"A",{href:!0});var xDt=s(ZZ);$jr=r(xDt,"TFVisionEncoderDecoderModel"),xDt.forEach(t),kjr=r(bOe," (Vision Encoder decoder model)"),bOe.forEach(t),LDt.forEach(t),Sjr=i(oi),T(ZC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),oQe=i(f),Qc=n(f,"H2",{class:!0});var cHe=s(Qc);e5=n(cHe,"A",{id:!0,class:!0,href:!0});var $Dt=s(e5);uCe=n($Dt,"SPAN",{});var kDt=s(uCe);T(i$.$$.fragment,kDt),kDt.forEach(t),$Dt.forEach(t),Rjr=i(cHe),bCe=n(cHe,"SPAN",{});var SDt=s(bCe);Pjr=r(SDt,"TFAutoModelForSpeechSeq2Seq"),SDt.forEach(t),cHe.forEach(t),rQe=i(f),hr=n(f,"DIV",{class:!0});var ri=s(hr);T(d$.$$.fragment,ri),Bjr=i(ri),Wc=n(ri,"P",{});var cae=s(Wc);Njr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eee=n(cae,"A",{href:!0});var RDt=s(eee);Ijr=r(RDt,"from_pretrained()"),RDt.forEach(t),qjr=r(cae," class method or the "),oee=n(cae,"A",{href:!0});var PDt=s(oee);jjr=r(PDt,"from_config()"),PDt.forEach(t),Djr=r(cae,` class
method.`),cae.forEach(t),Gjr=i(ri),c$=n(ri,"P",{});var fHe=s(c$);Ojr=r(fHe,"This class cannot be instantiated directly using "),vCe=n(fHe,"CODE",{});var BDt=s(vCe);Vjr=r(BDt,"__init__()"),BDt.forEach(t),Xjr=r(fHe," (throws an error)."),fHe.forEach(t),zjr=i(ri),Qt=n(ri,"DIV",{class:!0});var PA=s(Qt);T(f$.$$.fragment,PA),Qjr=i(PA),FCe=n(PA,"P",{});var NDt=s(FCe);Wjr=r(NDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),NDt.forEach(t),Hjr=i(PA),Hc=n(PA,"P",{});var fae=s(Hc);Ujr=r(fae,`Note:
Loading a model from its configuration file does `),TCe=n(fae,"STRONG",{});var IDt=s(TCe);Jjr=r(IDt,"not"),IDt.forEach(t),Yjr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ree=n(fae,"A",{href:!0});var qDt=s(ree);Kjr=r(qDt,"from_pretrained()"),qDt.forEach(t),Zjr=r(fae," to load the model weights."),fae.forEach(t),eDr=i(PA),T(o5.$$.fragment,PA),PA.forEach(t),oDr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(m$.$$.fragment,ti),rDr=i(ti),MCe=n(ti,"P",{});var jDt=s(MCe);tDr=r(jDt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jDt.forEach(t),aDr=i(ti),Fn=n(ti,"P",{});var BA=s(Fn);nDr=r(BA,"The model class to instantiate is selected based on the "),ECe=n(BA,"CODE",{});var DDt=s(ECe);sDr=r(DDt,"model_type"),DDt.forEach(t),lDr=r(BA,` property of the config object (either
passed as an argument or loaded from `),CCe=n(BA,"CODE",{});var GDt=s(CCe);iDr=r(GDt,"pretrained_model_name_or_path"),GDt.forEach(t),dDr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=n(BA,"CODE",{});var ODt=s(wCe);cDr=r(ODt,"pretrained_model_name_or_path"),ODt.forEach(t),fDr=r(BA,":"),BA.forEach(t),mDr=i(ti),ACe=n(ti,"UL",{});var VDt=s(ACe);r5=n(VDt,"LI",{});var vOe=s(r5);LCe=n(vOe,"STRONG",{});var XDt=s(LCe);gDr=r(XDt,"speech_to_text"),XDt.forEach(t),hDr=r(vOe," \u2014 "),tee=n(vOe,"A",{href:!0});var zDt=s(tee);pDr=r(zDt,"TFSpeech2TextForConditionalGeneration"),zDt.forEach(t),_Dr=r(vOe," (Speech2Text model)"),vOe.forEach(t),VDt.forEach(t),uDr=i(ti),T(t5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),tQe=i(f),Uc=n(f,"H2",{class:!0});var mHe=s(Uc);a5=n(mHe,"A",{id:!0,class:!0,href:!0});var QDt=s(a5);yCe=n(QDt,"SPAN",{});var WDt=s(yCe);T(g$.$$.fragment,WDt),WDt.forEach(t),QDt.forEach(t),bDr=i(mHe),xCe=n(mHe,"SPAN",{});var HDt=s(xCe);vDr=r(HDt,"FlaxAutoModel"),HDt.forEach(t),mHe.forEach(t),aQe=i(f),pr=n(f,"DIV",{class:!0});var ai=s(pr);T(h$.$$.fragment,ai),FDr=i(ai),Jc=n(ai,"P",{});var mae=s(Jc);TDr=r(mae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aee=n(mae,"A",{href:!0});var UDt=s(aee);MDr=r(UDt,"from_pretrained()"),UDt.forEach(t),EDr=r(mae," class method or the "),nee=n(mae,"A",{href:!0});var JDt=s(nee);CDr=r(JDt,"from_config()"),JDt.forEach(t),wDr=r(mae,` class
method.`),mae.forEach(t),ADr=i(ai),p$=n(ai,"P",{});var gHe=s(p$);LDr=r(gHe,"This class cannot be instantiated directly using "),$Ce=n(gHe,"CODE",{});var YDt=s($Ce);yDr=r(YDt,"__init__()"),YDt.forEach(t),xDr=r(gHe," (throws an error)."),gHe.forEach(t),$Dr=i(ai),Wt=n(ai,"DIV",{class:!0});var NA=s(Wt);T(_$.$$.fragment,NA),kDr=i(NA),kCe=n(NA,"P",{});var KDt=s(kCe);SDr=r(KDt,"Instantiates one of the base model classes of the library from a configuration."),KDt.forEach(t),RDr=i(NA),Yc=n(NA,"P",{});var gae=s(Yc);PDr=r(gae,`Note:
Loading a model from its configuration file does `),SCe=n(gae,"STRONG",{});var ZDt=s(SCe);BDr=r(ZDt,"not"),ZDt.forEach(t),NDr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),see=n(gae,"A",{href:!0});var eGt=s(see);IDr=r(eGt,"from_pretrained()"),eGt.forEach(t),qDr=r(gae," to load the model weights."),gae.forEach(t),jDr=i(NA),T(n5.$$.fragment,NA),NA.forEach(t),DDr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(u$.$$.fragment,ni),GDr=i(ni),RCe=n(ni,"P",{});var oGt=s(RCe);ODr=r(oGt,"Instantiate one of the base model classes of the library from a pretrained model."),oGt.forEach(t),VDr=i(ni),Tn=n(ni,"P",{});var IA=s(Tn);XDr=r(IA,"The model class to instantiate is selected based on the "),PCe=n(IA,"CODE",{});var rGt=s(PCe);zDr=r(rGt,"model_type"),rGt.forEach(t),QDr=r(IA,` property of the config object (either
passed as an argument or loaded from `),BCe=n(IA,"CODE",{});var tGt=s(BCe);WDr=r(tGt,"pretrained_model_name_or_path"),tGt.forEach(t),HDr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NCe=n(IA,"CODE",{});var aGt=s(NCe);UDr=r(aGt,"pretrained_model_name_or_path"),aGt.forEach(t),JDr=r(IA,":"),IA.forEach(t),YDr=i(ni),oe=n(ni,"UL",{});var ae=s(oe);s5=n(ae,"LI",{});var FOe=s(s5);ICe=n(FOe,"STRONG",{});var nGt=s(ICe);KDr=r(nGt,"albert"),nGt.forEach(t),ZDr=r(FOe," \u2014 "),lee=n(FOe,"A",{href:!0});var sGt=s(lee);eGr=r(sGt,"FlaxAlbertModel"),sGt.forEach(t),oGr=r(FOe," (ALBERT model)"),FOe.forEach(t),rGr=i(ae),l5=n(ae,"LI",{});var TOe=s(l5);qCe=n(TOe,"STRONG",{});var lGt=s(qCe);tGr=r(lGt,"bart"),lGt.forEach(t),aGr=r(TOe," \u2014 "),iee=n(TOe,"A",{href:!0});var iGt=s(iee);nGr=r(iGt,"FlaxBartModel"),iGt.forEach(t),sGr=r(TOe," (BART model)"),TOe.forEach(t),lGr=i(ae),i5=n(ae,"LI",{});var MOe=s(i5);jCe=n(MOe,"STRONG",{});var dGt=s(jCe);iGr=r(dGt,"beit"),dGt.forEach(t),dGr=r(MOe," \u2014 "),dee=n(MOe,"A",{href:!0});var cGt=s(dee);cGr=r(cGt,"FlaxBeitModel"),cGt.forEach(t),fGr=r(MOe," (BEiT model)"),MOe.forEach(t),mGr=i(ae),d5=n(ae,"LI",{});var EOe=s(d5);DCe=n(EOe,"STRONG",{});var fGt=s(DCe);gGr=r(fGt,"bert"),fGt.forEach(t),hGr=r(EOe," \u2014 "),cee=n(EOe,"A",{href:!0});var mGt=s(cee);pGr=r(mGt,"FlaxBertModel"),mGt.forEach(t),_Gr=r(EOe," (BERT model)"),EOe.forEach(t),uGr=i(ae),c5=n(ae,"LI",{});var COe=s(c5);GCe=n(COe,"STRONG",{});var gGt=s(GCe);bGr=r(gGt,"big_bird"),gGt.forEach(t),vGr=r(COe," \u2014 "),fee=n(COe,"A",{href:!0});var hGt=s(fee);FGr=r(hGt,"FlaxBigBirdModel"),hGt.forEach(t),TGr=r(COe," (BigBird model)"),COe.forEach(t),MGr=i(ae),f5=n(ae,"LI",{});var wOe=s(f5);OCe=n(wOe,"STRONG",{});var pGt=s(OCe);EGr=r(pGt,"blenderbot"),pGt.forEach(t),CGr=r(wOe," \u2014 "),mee=n(wOe,"A",{href:!0});var _Gt=s(mee);wGr=r(_Gt,"FlaxBlenderbotModel"),_Gt.forEach(t),AGr=r(wOe," (Blenderbot model)"),wOe.forEach(t),LGr=i(ae),m5=n(ae,"LI",{});var AOe=s(m5);VCe=n(AOe,"STRONG",{});var uGt=s(VCe);yGr=r(uGt,"blenderbot-small"),uGt.forEach(t),xGr=r(AOe," \u2014 "),gee=n(AOe,"A",{href:!0});var bGt=s(gee);$Gr=r(bGt,"FlaxBlenderbotSmallModel"),bGt.forEach(t),kGr=r(AOe," (BlenderbotSmall model)"),AOe.forEach(t),SGr=i(ae),g5=n(ae,"LI",{});var LOe=s(g5);XCe=n(LOe,"STRONG",{});var vGt=s(XCe);RGr=r(vGt,"clip"),vGt.forEach(t),PGr=r(LOe," \u2014 "),hee=n(LOe,"A",{href:!0});var FGt=s(hee);BGr=r(FGt,"FlaxCLIPModel"),FGt.forEach(t),NGr=r(LOe," (CLIP model)"),LOe.forEach(t),IGr=i(ae),h5=n(ae,"LI",{});var yOe=s(h5);zCe=n(yOe,"STRONG",{});var TGt=s(zCe);qGr=r(TGt,"distilbert"),TGt.forEach(t),jGr=r(yOe," \u2014 "),pee=n(yOe,"A",{href:!0});var MGt=s(pee);DGr=r(MGt,"FlaxDistilBertModel"),MGt.forEach(t),GGr=r(yOe," (DistilBERT model)"),yOe.forEach(t),OGr=i(ae),p5=n(ae,"LI",{});var xOe=s(p5);QCe=n(xOe,"STRONG",{});var EGt=s(QCe);VGr=r(EGt,"electra"),EGt.forEach(t),XGr=r(xOe," \u2014 "),_ee=n(xOe,"A",{href:!0});var CGt=s(_ee);zGr=r(CGt,"FlaxElectraModel"),CGt.forEach(t),QGr=r(xOe," (ELECTRA model)"),xOe.forEach(t),WGr=i(ae),_5=n(ae,"LI",{});var $Oe=s(_5);WCe=n($Oe,"STRONG",{});var wGt=s(WCe);HGr=r(wGt,"gpt2"),wGt.forEach(t),UGr=r($Oe," \u2014 "),uee=n($Oe,"A",{href:!0});var AGt=s(uee);JGr=r(AGt,"FlaxGPT2Model"),AGt.forEach(t),YGr=r($Oe," (OpenAI GPT-2 model)"),$Oe.forEach(t),KGr=i(ae),u5=n(ae,"LI",{});var kOe=s(u5);HCe=n(kOe,"STRONG",{});var LGt=s(HCe);ZGr=r(LGt,"gpt_neo"),LGt.forEach(t),eOr=r(kOe," \u2014 "),bee=n(kOe,"A",{href:!0});var yGt=s(bee);oOr=r(yGt,"FlaxGPTNeoModel"),yGt.forEach(t),rOr=r(kOe," (GPT Neo model)"),kOe.forEach(t),tOr=i(ae),b5=n(ae,"LI",{});var SOe=s(b5);UCe=n(SOe,"STRONG",{});var xGt=s(UCe);aOr=r(xGt,"gptj"),xGt.forEach(t),nOr=r(SOe," \u2014 "),vee=n(SOe,"A",{href:!0});var $Gt=s(vee);sOr=r($Gt,"FlaxGPTJModel"),$Gt.forEach(t),lOr=r(SOe," (GPT-J model)"),SOe.forEach(t),iOr=i(ae),v5=n(ae,"LI",{});var ROe=s(v5);JCe=n(ROe,"STRONG",{});var kGt=s(JCe);dOr=r(kGt,"longt5"),kGt.forEach(t),cOr=r(ROe," \u2014 "),Fee=n(ROe,"A",{href:!0});var SGt=s(Fee);fOr=r(SGt,"FlaxLongT5Model"),SGt.forEach(t),mOr=r(ROe," (LongT5 model)"),ROe.forEach(t),gOr=i(ae),F5=n(ae,"LI",{});var POe=s(F5);YCe=n(POe,"STRONG",{});var RGt=s(YCe);hOr=r(RGt,"marian"),RGt.forEach(t),pOr=r(POe," \u2014 "),Tee=n(POe,"A",{href:!0});var PGt=s(Tee);_Or=r(PGt,"FlaxMarianModel"),PGt.forEach(t),uOr=r(POe," (Marian model)"),POe.forEach(t),bOr=i(ae),T5=n(ae,"LI",{});var BOe=s(T5);KCe=n(BOe,"STRONG",{});var BGt=s(KCe);vOr=r(BGt,"mbart"),BGt.forEach(t),FOr=r(BOe," \u2014 "),Mee=n(BOe,"A",{href:!0});var NGt=s(Mee);TOr=r(NGt,"FlaxMBartModel"),NGt.forEach(t),MOr=r(BOe," (mBART model)"),BOe.forEach(t),EOr=i(ae),M5=n(ae,"LI",{});var NOe=s(M5);ZCe=n(NOe,"STRONG",{});var IGt=s(ZCe);COr=r(IGt,"mt5"),IGt.forEach(t),wOr=r(NOe," \u2014 "),Eee=n(NOe,"A",{href:!0});var qGt=s(Eee);AOr=r(qGt,"FlaxMT5Model"),qGt.forEach(t),LOr=r(NOe," (MT5 model)"),NOe.forEach(t),yOr=i(ae),E5=n(ae,"LI",{});var IOe=s(E5);e5e=n(IOe,"STRONG",{});var jGt=s(e5e);xOr=r(jGt,"opt"),jGt.forEach(t),$Or=r(IOe," \u2014 "),Cee=n(IOe,"A",{href:!0});var DGt=s(Cee);kOr=r(DGt,"FlaxOPTModel"),DGt.forEach(t),SOr=r(IOe," (OPT model)"),IOe.forEach(t),ROr=i(ae),C5=n(ae,"LI",{});var qOe=s(C5);o5e=n(qOe,"STRONG",{});var GGt=s(o5e);POr=r(GGt,"pegasus"),GGt.forEach(t),BOr=r(qOe," \u2014 "),wee=n(qOe,"A",{href:!0});var OGt=s(wee);NOr=r(OGt,"FlaxPegasusModel"),OGt.forEach(t),IOr=r(qOe," (Pegasus model)"),qOe.forEach(t),qOr=i(ae),w5=n(ae,"LI",{});var jOe=s(w5);r5e=n(jOe,"STRONG",{});var VGt=s(r5e);jOr=r(VGt,"roberta"),VGt.forEach(t),DOr=r(jOe," \u2014 "),Aee=n(jOe,"A",{href:!0});var XGt=s(Aee);GOr=r(XGt,"FlaxRobertaModel"),XGt.forEach(t),OOr=r(jOe," (RoBERTa model)"),jOe.forEach(t),VOr=i(ae),A5=n(ae,"LI",{});var DOe=s(A5);t5e=n(DOe,"STRONG",{});var zGt=s(t5e);XOr=r(zGt,"roformer"),zGt.forEach(t),zOr=r(DOe," \u2014 "),Lee=n(DOe,"A",{href:!0});var QGt=s(Lee);QOr=r(QGt,"FlaxRoFormerModel"),QGt.forEach(t),WOr=r(DOe," (RoFormer model)"),DOe.forEach(t),HOr=i(ae),L5=n(ae,"LI",{});var GOe=s(L5);a5e=n(GOe,"STRONG",{});var WGt=s(a5e);UOr=r(WGt,"t5"),WGt.forEach(t),JOr=r(GOe," \u2014 "),yee=n(GOe,"A",{href:!0});var HGt=s(yee);YOr=r(HGt,"FlaxT5Model"),HGt.forEach(t),KOr=r(GOe," (T5 model)"),GOe.forEach(t),ZOr=i(ae),y5=n(ae,"LI",{});var OOe=s(y5);n5e=n(OOe,"STRONG",{});var UGt=s(n5e);eVr=r(UGt,"vision-text-dual-encoder"),UGt.forEach(t),oVr=r(OOe," \u2014 "),xee=n(OOe,"A",{href:!0});var JGt=s(xee);rVr=r(JGt,"FlaxVisionTextDualEncoderModel"),JGt.forEach(t),tVr=r(OOe," (VisionTextDualEncoder model)"),OOe.forEach(t),aVr=i(ae),x5=n(ae,"LI",{});var VOe=s(x5);s5e=n(VOe,"STRONG",{});var YGt=s(s5e);nVr=r(YGt,"vit"),YGt.forEach(t),sVr=r(VOe," \u2014 "),$ee=n(VOe,"A",{href:!0});var KGt=s($ee);lVr=r(KGt,"FlaxViTModel"),KGt.forEach(t),iVr=r(VOe," (ViT model)"),VOe.forEach(t),dVr=i(ae),$5=n(ae,"LI",{});var XOe=s($5);l5e=n(XOe,"STRONG",{});var ZGt=s(l5e);cVr=r(ZGt,"wav2vec2"),ZGt.forEach(t),fVr=r(XOe," \u2014 "),kee=n(XOe,"A",{href:!0});var eOt=s(kee);mVr=r(eOt,"FlaxWav2Vec2Model"),eOt.forEach(t),gVr=r(XOe," (Wav2Vec2 model)"),XOe.forEach(t),hVr=i(ae),k5=n(ae,"LI",{});var zOe=s(k5);i5e=n(zOe,"STRONG",{});var oOt=s(i5e);pVr=r(oOt,"xglm"),oOt.forEach(t),_Vr=r(zOe," \u2014 "),See=n(zOe,"A",{href:!0});var rOt=s(See);uVr=r(rOt,"FlaxXGLMModel"),rOt.forEach(t),bVr=r(zOe," (XGLM model)"),zOe.forEach(t),vVr=i(ae),S5=n(ae,"LI",{});var QOe=s(S5);d5e=n(QOe,"STRONG",{});var tOt=s(d5e);FVr=r(tOt,"xlm-roberta"),tOt.forEach(t),TVr=r(QOe," \u2014 "),Ree=n(QOe,"A",{href:!0});var aOt=s(Ree);MVr=r(aOt,"FlaxXLMRobertaModel"),aOt.forEach(t),EVr=r(QOe," (XLM-RoBERTa model)"),QOe.forEach(t),ae.forEach(t),CVr=i(ni),T(R5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),nQe=i(f),Kc=n(f,"H2",{class:!0});var hHe=s(Kc);P5=n(hHe,"A",{id:!0,class:!0,href:!0});var nOt=s(P5);c5e=n(nOt,"SPAN",{});var sOt=s(c5e);T(b$.$$.fragment,sOt),sOt.forEach(t),nOt.forEach(t),wVr=i(hHe),f5e=n(hHe,"SPAN",{});var lOt=s(f5e);AVr=r(lOt,"FlaxAutoModelForCausalLM"),lOt.forEach(t),hHe.forEach(t),sQe=i(f),_r=n(f,"DIV",{class:!0});var si=s(_r);T(v$.$$.fragment,si),LVr=i(si),Zc=n(si,"P",{});var hae=s(Zc);yVr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pee=n(hae,"A",{href:!0});var iOt=s(Pee);xVr=r(iOt,"from_pretrained()"),iOt.forEach(t),$Vr=r(hae," class method or the "),Bee=n(hae,"A",{href:!0});var dOt=s(Bee);kVr=r(dOt,"from_config()"),dOt.forEach(t),SVr=r(hae,` class
method.`),hae.forEach(t),RVr=i(si),F$=n(si,"P",{});var pHe=s(F$);PVr=r(pHe,"This class cannot be instantiated directly using "),m5e=n(pHe,"CODE",{});var cOt=s(m5e);BVr=r(cOt,"__init__()"),cOt.forEach(t),NVr=r(pHe," (throws an error)."),pHe.forEach(t),IVr=i(si),Ht=n(si,"DIV",{class:!0});var qA=s(Ht);T(T$.$$.fragment,qA),qVr=i(qA),g5e=n(qA,"P",{});var fOt=s(g5e);jVr=r(fOt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fOt.forEach(t),DVr=i(qA),ef=n(qA,"P",{});var pae=s(ef);GVr=r(pae,`Note:
Loading a model from its configuration file does `),h5e=n(pae,"STRONG",{});var mOt=s(h5e);OVr=r(mOt,"not"),mOt.forEach(t),VVr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nee=n(pae,"A",{href:!0});var gOt=s(Nee);XVr=r(gOt,"from_pretrained()"),gOt.forEach(t),zVr=r(pae," to load the model weights."),pae.forEach(t),QVr=i(qA),T(B5.$$.fragment,qA),qA.forEach(t),WVr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(M$.$$.fragment,li),HVr=i(li),p5e=n(li,"P",{});var hOt=s(p5e);UVr=r(hOt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hOt.forEach(t),JVr=i(li),Mn=n(li,"P",{});var jA=s(Mn);YVr=r(jA,"The model class to instantiate is selected based on the "),_5e=n(jA,"CODE",{});var pOt=s(_5e);KVr=r(pOt,"model_type"),pOt.forEach(t),ZVr=r(jA,` property of the config object (either
passed as an argument or loaded from `),u5e=n(jA,"CODE",{});var _Ot=s(u5e);eXr=r(_Ot,"pretrained_model_name_or_path"),_Ot.forEach(t),oXr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=n(jA,"CODE",{});var uOt=s(b5e);rXr=r(uOt,"pretrained_model_name_or_path"),uOt.forEach(t),tXr=r(jA,":"),jA.forEach(t),aXr=i(li),xe=n(li,"UL",{});var Ie=s(xe);N5=n(Ie,"LI",{});var WOe=s(N5);v5e=n(WOe,"STRONG",{});var bOt=s(v5e);nXr=r(bOt,"bart"),bOt.forEach(t),sXr=r(WOe," \u2014 "),Iee=n(WOe,"A",{href:!0});var vOt=s(Iee);lXr=r(vOt,"FlaxBartForCausalLM"),vOt.forEach(t),iXr=r(WOe," (BART model)"),WOe.forEach(t),dXr=i(Ie),I5=n(Ie,"LI",{});var HOe=s(I5);F5e=n(HOe,"STRONG",{});var FOt=s(F5e);cXr=r(FOt,"bert"),FOt.forEach(t),fXr=r(HOe," \u2014 "),qee=n(HOe,"A",{href:!0});var TOt=s(qee);mXr=r(TOt,"FlaxBertForCausalLM"),TOt.forEach(t),gXr=r(HOe," (BERT model)"),HOe.forEach(t),hXr=i(Ie),q5=n(Ie,"LI",{});var UOe=s(q5);T5e=n(UOe,"STRONG",{});var MOt=s(T5e);pXr=r(MOt,"big_bird"),MOt.forEach(t),_Xr=r(UOe," \u2014 "),jee=n(UOe,"A",{href:!0});var EOt=s(jee);uXr=r(EOt,"FlaxBigBirdForCausalLM"),EOt.forEach(t),bXr=r(UOe," (BigBird model)"),UOe.forEach(t),vXr=i(Ie),j5=n(Ie,"LI",{});var JOe=s(j5);M5e=n(JOe,"STRONG",{});var COt=s(M5e);FXr=r(COt,"electra"),COt.forEach(t),TXr=r(JOe," \u2014 "),Dee=n(JOe,"A",{href:!0});var wOt=s(Dee);MXr=r(wOt,"FlaxElectraForCausalLM"),wOt.forEach(t),EXr=r(JOe," (ELECTRA model)"),JOe.forEach(t),CXr=i(Ie),D5=n(Ie,"LI",{});var YOe=s(D5);E5e=n(YOe,"STRONG",{});var AOt=s(E5e);wXr=r(AOt,"gpt2"),AOt.forEach(t),AXr=r(YOe," \u2014 "),Gee=n(YOe,"A",{href:!0});var LOt=s(Gee);LXr=r(LOt,"FlaxGPT2LMHeadModel"),LOt.forEach(t),yXr=r(YOe," (OpenAI GPT-2 model)"),YOe.forEach(t),xXr=i(Ie),G5=n(Ie,"LI",{});var KOe=s(G5);C5e=n(KOe,"STRONG",{});var yOt=s(C5e);$Xr=r(yOt,"gpt_neo"),yOt.forEach(t),kXr=r(KOe," \u2014 "),Oee=n(KOe,"A",{href:!0});var xOt=s(Oee);SXr=r(xOt,"FlaxGPTNeoForCausalLM"),xOt.forEach(t),RXr=r(KOe," (GPT Neo model)"),KOe.forEach(t),PXr=i(Ie),O5=n(Ie,"LI",{});var ZOe=s(O5);w5e=n(ZOe,"STRONG",{});var $Ot=s(w5e);BXr=r($Ot,"gptj"),$Ot.forEach(t),NXr=r(ZOe," \u2014 "),Vee=n(ZOe,"A",{href:!0});var kOt=s(Vee);IXr=r(kOt,"FlaxGPTJForCausalLM"),kOt.forEach(t),qXr=r(ZOe," (GPT-J model)"),ZOe.forEach(t),jXr=i(Ie),V5=n(Ie,"LI",{});var eVe=s(V5);A5e=n(eVe,"STRONG",{});var SOt=s(A5e);DXr=r(SOt,"opt"),SOt.forEach(t),GXr=r(eVe," \u2014 "),Xee=n(eVe,"A",{href:!0});var ROt=s(Xee);OXr=r(ROt,"FlaxOPTForCausalLM"),ROt.forEach(t),VXr=r(eVe," (OPT model)"),eVe.forEach(t),XXr=i(Ie),X5=n(Ie,"LI",{});var oVe=s(X5);L5e=n(oVe,"STRONG",{});var POt=s(L5e);zXr=r(POt,"roberta"),POt.forEach(t),QXr=r(oVe," \u2014 "),zee=n(oVe,"A",{href:!0});var BOt=s(zee);WXr=r(BOt,"FlaxRobertaForCausalLM"),BOt.forEach(t),HXr=r(oVe," (RoBERTa model)"),oVe.forEach(t),UXr=i(Ie),z5=n(Ie,"LI",{});var rVe=s(z5);y5e=n(rVe,"STRONG",{});var NOt=s(y5e);JXr=r(NOt,"xglm"),NOt.forEach(t),YXr=r(rVe," \u2014 "),Qee=n(rVe,"A",{href:!0});var IOt=s(Qee);KXr=r(IOt,"FlaxXGLMForCausalLM"),IOt.forEach(t),ZXr=r(rVe," (XGLM model)"),rVe.forEach(t),Ie.forEach(t),ezr=i(li),T(Q5.$$.fragment,li),li.forEach(t),si.forEach(t),lQe=i(f),of=n(f,"H2",{class:!0});var _He=s(of);W5=n(_He,"A",{id:!0,class:!0,href:!0});var qOt=s(W5);x5e=n(qOt,"SPAN",{});var jOt=s(x5e);T(E$.$$.fragment,jOt),jOt.forEach(t),qOt.forEach(t),ozr=i(_He),$5e=n(_He,"SPAN",{});var DOt=s($5e);rzr=r(DOt,"FlaxAutoModelForPreTraining"),DOt.forEach(t),_He.forEach(t),iQe=i(f),ur=n(f,"DIV",{class:!0});var ii=s(ur);T(C$.$$.fragment,ii),tzr=i(ii),rf=n(ii,"P",{});var _ae=s(rf);azr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wee=n(_ae,"A",{href:!0});var GOt=s(Wee);nzr=r(GOt,"from_pretrained()"),GOt.forEach(t),szr=r(_ae," class method or the "),Hee=n(_ae,"A",{href:!0});var OOt=s(Hee);lzr=r(OOt,"from_config()"),OOt.forEach(t),izr=r(_ae,` class
method.`),_ae.forEach(t),dzr=i(ii),w$=n(ii,"P",{});var uHe=s(w$);czr=r(uHe,"This class cannot be instantiated directly using "),k5e=n(uHe,"CODE",{});var VOt=s(k5e);fzr=r(VOt,"__init__()"),VOt.forEach(t),mzr=r(uHe," (throws an error)."),uHe.forEach(t),gzr=i(ii),Ut=n(ii,"DIV",{class:!0});var DA=s(Ut);T(A$.$$.fragment,DA),hzr=i(DA),S5e=n(DA,"P",{});var XOt=s(S5e);pzr=r(XOt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),XOt.forEach(t),_zr=i(DA),tf=n(DA,"P",{});var uae=s(tf);uzr=r(uae,`Note:
Loading a model from its configuration file does `),R5e=n(uae,"STRONG",{});var zOt=s(R5e);bzr=r(zOt,"not"),zOt.forEach(t),vzr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=n(uae,"A",{href:!0});var QOt=s(Uee);Fzr=r(QOt,"from_pretrained()"),QOt.forEach(t),Tzr=r(uae," to load the model weights."),uae.forEach(t),Mzr=i(DA),T(H5.$$.fragment,DA),DA.forEach(t),Ezr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(L$.$$.fragment,di),Czr=i(di),P5e=n(di,"P",{});var WOt=s(P5e);wzr=r(WOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WOt.forEach(t),Azr=i(di),En=n(di,"P",{});var GA=s(En);Lzr=r(GA,"The model class to instantiate is selected based on the "),B5e=n(GA,"CODE",{});var HOt=s(B5e);yzr=r(HOt,"model_type"),HOt.forEach(t),xzr=r(GA,` property of the config object (either
passed as an argument or loaded from `),N5e=n(GA,"CODE",{});var UOt=s(N5e);$zr=r(UOt,"pretrained_model_name_or_path"),UOt.forEach(t),kzr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=n(GA,"CODE",{});var JOt=s(I5e);Szr=r(JOt,"pretrained_model_name_or_path"),JOt.forEach(t),Rzr=r(GA,":"),GA.forEach(t),Pzr=i(di),Ee=n(di,"UL",{});var we=s(Ee);U5=n(we,"LI",{});var tVe=s(U5);q5e=n(tVe,"STRONG",{});var YOt=s(q5e);Bzr=r(YOt,"albert"),YOt.forEach(t),Nzr=r(tVe," \u2014 "),Jee=n(tVe,"A",{href:!0});var KOt=s(Jee);Izr=r(KOt,"FlaxAlbertForPreTraining"),KOt.forEach(t),qzr=r(tVe," (ALBERT model)"),tVe.forEach(t),jzr=i(we),J5=n(we,"LI",{});var aVe=s(J5);j5e=n(aVe,"STRONG",{});var ZOt=s(j5e);Dzr=r(ZOt,"bart"),ZOt.forEach(t),Gzr=r(aVe," \u2014 "),Yee=n(aVe,"A",{href:!0});var eVt=s(Yee);Ozr=r(eVt,"FlaxBartForConditionalGeneration"),eVt.forEach(t),Vzr=r(aVe," (BART model)"),aVe.forEach(t),Xzr=i(we),Y5=n(we,"LI",{});var nVe=s(Y5);D5e=n(nVe,"STRONG",{});var oVt=s(D5e);zzr=r(oVt,"bert"),oVt.forEach(t),Qzr=r(nVe," \u2014 "),Kee=n(nVe,"A",{href:!0});var rVt=s(Kee);Wzr=r(rVt,"FlaxBertForPreTraining"),rVt.forEach(t),Hzr=r(nVe," (BERT model)"),nVe.forEach(t),Uzr=i(we),K5=n(we,"LI",{});var sVe=s(K5);G5e=n(sVe,"STRONG",{});var tVt=s(G5e);Jzr=r(tVt,"big_bird"),tVt.forEach(t),Yzr=r(sVe," \u2014 "),Zee=n(sVe,"A",{href:!0});var aVt=s(Zee);Kzr=r(aVt,"FlaxBigBirdForPreTraining"),aVt.forEach(t),Zzr=r(sVe," (BigBird model)"),sVe.forEach(t),eQr=i(we),Z5=n(we,"LI",{});var lVe=s(Z5);O5e=n(lVe,"STRONG",{});var nVt=s(O5e);oQr=r(nVt,"electra"),nVt.forEach(t),rQr=r(lVe," \u2014 "),eoe=n(lVe,"A",{href:!0});var sVt=s(eoe);tQr=r(sVt,"FlaxElectraForPreTraining"),sVt.forEach(t),aQr=r(lVe," (ELECTRA model)"),lVe.forEach(t),nQr=i(we),e3=n(we,"LI",{});var iVe=s(e3);V5e=n(iVe,"STRONG",{});var lVt=s(V5e);sQr=r(lVt,"longt5"),lVt.forEach(t),lQr=r(iVe," \u2014 "),ooe=n(iVe,"A",{href:!0});var iVt=s(ooe);iQr=r(iVt,"FlaxLongT5ForConditionalGeneration"),iVt.forEach(t),dQr=r(iVe," (LongT5 model)"),iVe.forEach(t),cQr=i(we),o3=n(we,"LI",{});var dVe=s(o3);X5e=n(dVe,"STRONG",{});var dVt=s(X5e);fQr=r(dVt,"mbart"),dVt.forEach(t),mQr=r(dVe," \u2014 "),roe=n(dVe,"A",{href:!0});var cVt=s(roe);gQr=r(cVt,"FlaxMBartForConditionalGeneration"),cVt.forEach(t),hQr=r(dVe," (mBART model)"),dVe.forEach(t),pQr=i(we),r3=n(we,"LI",{});var cVe=s(r3);z5e=n(cVe,"STRONG",{});var fVt=s(z5e);_Qr=r(fVt,"mt5"),fVt.forEach(t),uQr=r(cVe," \u2014 "),toe=n(cVe,"A",{href:!0});var mVt=s(toe);bQr=r(mVt,"FlaxMT5ForConditionalGeneration"),mVt.forEach(t),vQr=r(cVe," (MT5 model)"),cVe.forEach(t),FQr=i(we),t3=n(we,"LI",{});var fVe=s(t3);Q5e=n(fVe,"STRONG",{});var gVt=s(Q5e);TQr=r(gVt,"roberta"),gVt.forEach(t),MQr=r(fVe," \u2014 "),aoe=n(fVe,"A",{href:!0});var hVt=s(aoe);EQr=r(hVt,"FlaxRobertaForMaskedLM"),hVt.forEach(t),CQr=r(fVe," (RoBERTa model)"),fVe.forEach(t),wQr=i(we),a3=n(we,"LI",{});var mVe=s(a3);W5e=n(mVe,"STRONG",{});var pVt=s(W5e);AQr=r(pVt,"roformer"),pVt.forEach(t),LQr=r(mVe," \u2014 "),noe=n(mVe,"A",{href:!0});var _Vt=s(noe);yQr=r(_Vt,"FlaxRoFormerForMaskedLM"),_Vt.forEach(t),xQr=r(mVe," (RoFormer model)"),mVe.forEach(t),$Qr=i(we),n3=n(we,"LI",{});var gVe=s(n3);H5e=n(gVe,"STRONG",{});var uVt=s(H5e);kQr=r(uVt,"t5"),uVt.forEach(t),SQr=r(gVe," \u2014 "),soe=n(gVe,"A",{href:!0});var bVt=s(soe);RQr=r(bVt,"FlaxT5ForConditionalGeneration"),bVt.forEach(t),PQr=r(gVe," (T5 model)"),gVe.forEach(t),BQr=i(we),s3=n(we,"LI",{});var hVe=s(s3);U5e=n(hVe,"STRONG",{});var vVt=s(U5e);NQr=r(vVt,"wav2vec2"),vVt.forEach(t),IQr=r(hVe," \u2014 "),loe=n(hVe,"A",{href:!0});var FVt=s(loe);qQr=r(FVt,"FlaxWav2Vec2ForPreTraining"),FVt.forEach(t),jQr=r(hVe," (Wav2Vec2 model)"),hVe.forEach(t),DQr=i(we),l3=n(we,"LI",{});var pVe=s(l3);J5e=n(pVe,"STRONG",{});var TVt=s(J5e);GQr=r(TVt,"xlm-roberta"),TVt.forEach(t),OQr=r(pVe," \u2014 "),ioe=n(pVe,"A",{href:!0});var MVt=s(ioe);VQr=r(MVt,"FlaxXLMRobertaForMaskedLM"),MVt.forEach(t),XQr=r(pVe," (XLM-RoBERTa model)"),pVe.forEach(t),we.forEach(t),zQr=i(di),T(i3.$$.fragment,di),di.forEach(t),ii.forEach(t),dQe=i(f),af=n(f,"H2",{class:!0});var bHe=s(af);d3=n(bHe,"A",{id:!0,class:!0,href:!0});var EVt=s(d3);Y5e=n(EVt,"SPAN",{});var CVt=s(Y5e);T(y$.$$.fragment,CVt),CVt.forEach(t),EVt.forEach(t),QQr=i(bHe),K5e=n(bHe,"SPAN",{});var wVt=s(K5e);WQr=r(wVt,"FlaxAutoModelForMaskedLM"),wVt.forEach(t),bHe.forEach(t),cQe=i(f),br=n(f,"DIV",{class:!0});var ci=s(br);T(x$.$$.fragment,ci),HQr=i(ci),nf=n(ci,"P",{});var bae=s(nf);UQr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),doe=n(bae,"A",{href:!0});var AVt=s(doe);JQr=r(AVt,"from_pretrained()"),AVt.forEach(t),YQr=r(bae," class method or the "),coe=n(bae,"A",{href:!0});var LVt=s(coe);KQr=r(LVt,"from_config()"),LVt.forEach(t),ZQr=r(bae,` class
method.`),bae.forEach(t),eWr=i(ci),$$=n(ci,"P",{});var vHe=s($$);oWr=r(vHe,"This class cannot be instantiated directly using "),Z5e=n(vHe,"CODE",{});var yVt=s(Z5e);rWr=r(yVt,"__init__()"),yVt.forEach(t),tWr=r(vHe," (throws an error)."),vHe.forEach(t),aWr=i(ci),Jt=n(ci,"DIV",{class:!0});var OA=s(Jt);T(k$.$$.fragment,OA),nWr=i(OA),e3e=n(OA,"P",{});var xVt=s(e3e);sWr=r(xVt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xVt.forEach(t),lWr=i(OA),sf=n(OA,"P",{});var vae=s(sf);iWr=r(vae,`Note:
Loading a model from its configuration file does `),o3e=n(vae,"STRONG",{});var $Vt=s(o3e);dWr=r($Vt,"not"),$Vt.forEach(t),cWr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),foe=n(vae,"A",{href:!0});var kVt=s(foe);fWr=r(kVt,"from_pretrained()"),kVt.forEach(t),mWr=r(vae," to load the model weights."),vae.forEach(t),gWr=i(OA),T(c3.$$.fragment,OA),OA.forEach(t),hWr=i(ci),Qr=n(ci,"DIV",{class:!0});var fi=s(Qr);T(S$.$$.fragment,fi),pWr=i(fi),r3e=n(fi,"P",{});var SVt=s(r3e);_Wr=r(SVt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),SVt.forEach(t),uWr=i(fi),Cn=n(fi,"P",{});var VA=s(Cn);bWr=r(VA,"The model class to instantiate is selected based on the "),t3e=n(VA,"CODE",{});var RVt=s(t3e);vWr=r(RVt,"model_type"),RVt.forEach(t),FWr=r(VA,` property of the config object (either
passed as an argument or loaded from `),a3e=n(VA,"CODE",{});var PVt=s(a3e);TWr=r(PVt,"pretrained_model_name_or_path"),PVt.forEach(t),MWr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=n(VA,"CODE",{});var BVt=s(n3e);EWr=r(BVt,"pretrained_model_name_or_path"),BVt.forEach(t),CWr=r(VA,":"),VA.forEach(t),wWr=i(fi),$e=n(fi,"UL",{});var qe=s($e);f3=n(qe,"LI",{});var _Ve=s(f3);s3e=n(_Ve,"STRONG",{});var NVt=s(s3e);AWr=r(NVt,"albert"),NVt.forEach(t),LWr=r(_Ve," \u2014 "),moe=n(_Ve,"A",{href:!0});var IVt=s(moe);yWr=r(IVt,"FlaxAlbertForMaskedLM"),IVt.forEach(t),xWr=r(_Ve," (ALBERT model)"),_Ve.forEach(t),$Wr=i(qe),m3=n(qe,"LI",{});var uVe=s(m3);l3e=n(uVe,"STRONG",{});var qVt=s(l3e);kWr=r(qVt,"bart"),qVt.forEach(t),SWr=r(uVe," \u2014 "),goe=n(uVe,"A",{href:!0});var jVt=s(goe);RWr=r(jVt,"FlaxBartForConditionalGeneration"),jVt.forEach(t),PWr=r(uVe," (BART model)"),uVe.forEach(t),BWr=i(qe),g3=n(qe,"LI",{});var bVe=s(g3);i3e=n(bVe,"STRONG",{});var DVt=s(i3e);NWr=r(DVt,"bert"),DVt.forEach(t),IWr=r(bVe," \u2014 "),hoe=n(bVe,"A",{href:!0});var GVt=s(hoe);qWr=r(GVt,"FlaxBertForMaskedLM"),GVt.forEach(t),jWr=r(bVe," (BERT model)"),bVe.forEach(t),DWr=i(qe),h3=n(qe,"LI",{});var vVe=s(h3);d3e=n(vVe,"STRONG",{});var OVt=s(d3e);GWr=r(OVt,"big_bird"),OVt.forEach(t),OWr=r(vVe," \u2014 "),poe=n(vVe,"A",{href:!0});var VVt=s(poe);VWr=r(VVt,"FlaxBigBirdForMaskedLM"),VVt.forEach(t),XWr=r(vVe," (BigBird model)"),vVe.forEach(t),zWr=i(qe),p3=n(qe,"LI",{});var FVe=s(p3);c3e=n(FVe,"STRONG",{});var XVt=s(c3e);QWr=r(XVt,"distilbert"),XVt.forEach(t),WWr=r(FVe," \u2014 "),_oe=n(FVe,"A",{href:!0});var zVt=s(_oe);HWr=r(zVt,"FlaxDistilBertForMaskedLM"),zVt.forEach(t),UWr=r(FVe," (DistilBERT model)"),FVe.forEach(t),JWr=i(qe),_3=n(qe,"LI",{});var TVe=s(_3);f3e=n(TVe,"STRONG",{});var QVt=s(f3e);YWr=r(QVt,"electra"),QVt.forEach(t),KWr=r(TVe," \u2014 "),uoe=n(TVe,"A",{href:!0});var WVt=s(uoe);ZWr=r(WVt,"FlaxElectraForMaskedLM"),WVt.forEach(t),eHr=r(TVe," (ELECTRA model)"),TVe.forEach(t),oHr=i(qe),u3=n(qe,"LI",{});var MVe=s(u3);m3e=n(MVe,"STRONG",{});var HVt=s(m3e);rHr=r(HVt,"mbart"),HVt.forEach(t),tHr=r(MVe," \u2014 "),boe=n(MVe,"A",{href:!0});var UVt=s(boe);aHr=r(UVt,"FlaxMBartForConditionalGeneration"),UVt.forEach(t),nHr=r(MVe," (mBART model)"),MVe.forEach(t),sHr=i(qe),b3=n(qe,"LI",{});var EVe=s(b3);g3e=n(EVe,"STRONG",{});var JVt=s(g3e);lHr=r(JVt,"roberta"),JVt.forEach(t),iHr=r(EVe," \u2014 "),voe=n(EVe,"A",{href:!0});var YVt=s(voe);dHr=r(YVt,"FlaxRobertaForMaskedLM"),YVt.forEach(t),cHr=r(EVe," (RoBERTa model)"),EVe.forEach(t),fHr=i(qe),v3=n(qe,"LI",{});var CVe=s(v3);h3e=n(CVe,"STRONG",{});var KVt=s(h3e);mHr=r(KVt,"roformer"),KVt.forEach(t),gHr=r(CVe," \u2014 "),Foe=n(CVe,"A",{href:!0});var ZVt=s(Foe);hHr=r(ZVt,"FlaxRoFormerForMaskedLM"),ZVt.forEach(t),pHr=r(CVe," (RoFormer model)"),CVe.forEach(t),_Hr=i(qe),F3=n(qe,"LI",{});var wVe=s(F3);p3e=n(wVe,"STRONG",{});var eXt=s(p3e);uHr=r(eXt,"xlm-roberta"),eXt.forEach(t),bHr=r(wVe," \u2014 "),Toe=n(wVe,"A",{href:!0});var oXt=s(Toe);vHr=r(oXt,"FlaxXLMRobertaForMaskedLM"),oXt.forEach(t),FHr=r(wVe," (XLM-RoBERTa model)"),wVe.forEach(t),qe.forEach(t),THr=i(fi),T(T3.$$.fragment,fi),fi.forEach(t),ci.forEach(t),fQe=i(f),lf=n(f,"H2",{class:!0});var FHe=s(lf);M3=n(FHe,"A",{id:!0,class:!0,href:!0});var rXt=s(M3);_3e=n(rXt,"SPAN",{});var tXt=s(_3e);T(R$.$$.fragment,tXt),tXt.forEach(t),rXt.forEach(t),MHr=i(FHe),u3e=n(FHe,"SPAN",{});var aXt=s(u3e);EHr=r(aXt,"FlaxAutoModelForSeq2SeqLM"),aXt.forEach(t),FHe.forEach(t),mQe=i(f),vr=n(f,"DIV",{class:!0});var mi=s(vr);T(P$.$$.fragment,mi),CHr=i(mi),df=n(mi,"P",{});var Fae=s(df);wHr=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Moe=n(Fae,"A",{href:!0});var nXt=s(Moe);AHr=r(nXt,"from_pretrained()"),nXt.forEach(t),LHr=r(Fae," class method or the "),Eoe=n(Fae,"A",{href:!0});var sXt=s(Eoe);yHr=r(sXt,"from_config()"),sXt.forEach(t),xHr=r(Fae,` class
method.`),Fae.forEach(t),$Hr=i(mi),B$=n(mi,"P",{});var THe=s(B$);kHr=r(THe,"This class cannot be instantiated directly using "),b3e=n(THe,"CODE",{});var lXt=s(b3e);SHr=r(lXt,"__init__()"),lXt.forEach(t),RHr=r(THe," (throws an error)."),THe.forEach(t),PHr=i(mi),Yt=n(mi,"DIV",{class:!0});var XA=s(Yt);T(N$.$$.fragment,XA),BHr=i(XA),v3e=n(XA,"P",{});var iXt=s(v3e);NHr=r(iXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iXt.forEach(t),IHr=i(XA),cf=n(XA,"P",{});var Tae=s(cf);qHr=r(Tae,`Note:
Loading a model from its configuration file does `),F3e=n(Tae,"STRONG",{});var dXt=s(F3e);jHr=r(dXt,"not"),dXt.forEach(t),DHr=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=n(Tae,"A",{href:!0});var cXt=s(Coe);GHr=r(cXt,"from_pretrained()"),cXt.forEach(t),OHr=r(Tae," to load the model weights."),Tae.forEach(t),VHr=i(XA),T(E3.$$.fragment,XA),XA.forEach(t),XHr=i(mi),Wr=n(mi,"DIV",{class:!0});var gi=s(Wr);T(I$.$$.fragment,gi),zHr=i(gi),T3e=n(gi,"P",{});var fXt=s(T3e);QHr=r(fXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fXt.forEach(t),WHr=i(gi),wn=n(gi,"P",{});var zA=s(wn);HHr=r(zA,"The model class to instantiate is selected based on the "),M3e=n(zA,"CODE",{});var mXt=s(M3e);UHr=r(mXt,"model_type"),mXt.forEach(t),JHr=r(zA,` property of the config object (either
passed as an argument or loaded from `),E3e=n(zA,"CODE",{});var gXt=s(E3e);YHr=r(gXt,"pretrained_model_name_or_path"),gXt.forEach(t),KHr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=n(zA,"CODE",{});var hXt=s(C3e);ZHr=r(hXt,"pretrained_model_name_or_path"),hXt.forEach(t),eUr=r(zA,":"),zA.forEach(t),oUr=i(gi),ke=n(gi,"UL",{});var je=s(ke);C3=n(je,"LI",{});var AVe=s(C3);w3e=n(AVe,"STRONG",{});var pXt=s(w3e);rUr=r(pXt,"bart"),pXt.forEach(t),tUr=r(AVe," \u2014 "),woe=n(AVe,"A",{href:!0});var _Xt=s(woe);aUr=r(_Xt,"FlaxBartForConditionalGeneration"),_Xt.forEach(t),nUr=r(AVe," (BART model)"),AVe.forEach(t),sUr=i(je),w3=n(je,"LI",{});var LVe=s(w3);A3e=n(LVe,"STRONG",{});var uXt=s(A3e);lUr=r(uXt,"blenderbot"),uXt.forEach(t),iUr=r(LVe," \u2014 "),Aoe=n(LVe,"A",{href:!0});var bXt=s(Aoe);dUr=r(bXt,"FlaxBlenderbotForConditionalGeneration"),bXt.forEach(t),cUr=r(LVe," (Blenderbot model)"),LVe.forEach(t),fUr=i(je),A3=n(je,"LI",{});var yVe=s(A3);L3e=n(yVe,"STRONG",{});var vXt=s(L3e);mUr=r(vXt,"blenderbot-small"),vXt.forEach(t),gUr=r(yVe," \u2014 "),Loe=n(yVe,"A",{href:!0});var FXt=s(Loe);hUr=r(FXt,"FlaxBlenderbotSmallForConditionalGeneration"),FXt.forEach(t),pUr=r(yVe," (BlenderbotSmall model)"),yVe.forEach(t),_Ur=i(je),L3=n(je,"LI",{});var xVe=s(L3);y3e=n(xVe,"STRONG",{});var TXt=s(y3e);uUr=r(TXt,"encoder-decoder"),TXt.forEach(t),bUr=r(xVe," \u2014 "),yoe=n(xVe,"A",{href:!0});var MXt=s(yoe);vUr=r(MXt,"FlaxEncoderDecoderModel"),MXt.forEach(t),FUr=r(xVe," (Encoder decoder model)"),xVe.forEach(t),TUr=i(je),y3=n(je,"LI",{});var $Ve=s(y3);x3e=n($Ve,"STRONG",{});var EXt=s(x3e);MUr=r(EXt,"longt5"),EXt.forEach(t),EUr=r($Ve," \u2014 "),xoe=n($Ve,"A",{href:!0});var CXt=s(xoe);CUr=r(CXt,"FlaxLongT5ForConditionalGeneration"),CXt.forEach(t),wUr=r($Ve," (LongT5 model)"),$Ve.forEach(t),AUr=i(je),x3=n(je,"LI",{});var kVe=s(x3);$3e=n(kVe,"STRONG",{});var wXt=s($3e);LUr=r(wXt,"marian"),wXt.forEach(t),yUr=r(kVe," \u2014 "),$oe=n(kVe,"A",{href:!0});var AXt=s($oe);xUr=r(AXt,"FlaxMarianMTModel"),AXt.forEach(t),$Ur=r(kVe," (Marian model)"),kVe.forEach(t),kUr=i(je),$3=n(je,"LI",{});var SVe=s($3);k3e=n(SVe,"STRONG",{});var LXt=s(k3e);SUr=r(LXt,"mbart"),LXt.forEach(t),RUr=r(SVe," \u2014 "),koe=n(SVe,"A",{href:!0});var yXt=s(koe);PUr=r(yXt,"FlaxMBartForConditionalGeneration"),yXt.forEach(t),BUr=r(SVe," (mBART model)"),SVe.forEach(t),NUr=i(je),k3=n(je,"LI",{});var RVe=s(k3);S3e=n(RVe,"STRONG",{});var xXt=s(S3e);IUr=r(xXt,"mt5"),xXt.forEach(t),qUr=r(RVe," \u2014 "),Soe=n(RVe,"A",{href:!0});var $Xt=s(Soe);jUr=r($Xt,"FlaxMT5ForConditionalGeneration"),$Xt.forEach(t),DUr=r(RVe," (MT5 model)"),RVe.forEach(t),GUr=i(je),S3=n(je,"LI",{});var PVe=s(S3);R3e=n(PVe,"STRONG",{});var kXt=s(R3e);OUr=r(kXt,"pegasus"),kXt.forEach(t),VUr=r(PVe," \u2014 "),Roe=n(PVe,"A",{href:!0});var SXt=s(Roe);XUr=r(SXt,"FlaxPegasusForConditionalGeneration"),SXt.forEach(t),zUr=r(PVe," (Pegasus model)"),PVe.forEach(t),QUr=i(je),R3=n(je,"LI",{});var BVe=s(R3);P3e=n(BVe,"STRONG",{});var RXt=s(P3e);WUr=r(RXt,"t5"),RXt.forEach(t),HUr=r(BVe," \u2014 "),Poe=n(BVe,"A",{href:!0});var PXt=s(Poe);UUr=r(PXt,"FlaxT5ForConditionalGeneration"),PXt.forEach(t),JUr=r(BVe," (T5 model)"),BVe.forEach(t),je.forEach(t),YUr=i(gi),T(P3.$$.fragment,gi),gi.forEach(t),mi.forEach(t),gQe=i(f),ff=n(f,"H2",{class:!0});var MHe=s(ff);B3=n(MHe,"A",{id:!0,class:!0,href:!0});var BXt=s(B3);B3e=n(BXt,"SPAN",{});var NXt=s(B3e);T(q$.$$.fragment,NXt),NXt.forEach(t),BXt.forEach(t),KUr=i(MHe),N3e=n(MHe,"SPAN",{});var IXt=s(N3e);ZUr=r(IXt,"FlaxAutoModelForSequenceClassification"),IXt.forEach(t),MHe.forEach(t),hQe=i(f),Fr=n(f,"DIV",{class:!0});var hi=s(Fr);T(j$.$$.fragment,hi),eJr=i(hi),mf=n(hi,"P",{});var Mae=s(mf);oJr=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Boe=n(Mae,"A",{href:!0});var qXt=s(Boe);rJr=r(qXt,"from_pretrained()"),qXt.forEach(t),tJr=r(Mae," class method or the "),Noe=n(Mae,"A",{href:!0});var jXt=s(Noe);aJr=r(jXt,"from_config()"),jXt.forEach(t),nJr=r(Mae,` class
method.`),Mae.forEach(t),sJr=i(hi),D$=n(hi,"P",{});var EHe=s(D$);lJr=r(EHe,"This class cannot be instantiated directly using "),I3e=n(EHe,"CODE",{});var DXt=s(I3e);iJr=r(DXt,"__init__()"),DXt.forEach(t),dJr=r(EHe," (throws an error)."),EHe.forEach(t),cJr=i(hi),Kt=n(hi,"DIV",{class:!0});var QA=s(Kt);T(G$.$$.fragment,QA),fJr=i(QA),q3e=n(QA,"P",{});var GXt=s(q3e);mJr=r(GXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GXt.forEach(t),gJr=i(QA),gf=n(QA,"P",{});var Eae=s(gf);hJr=r(Eae,`Note:
Loading a model from its configuration file does `),j3e=n(Eae,"STRONG",{});var OXt=s(j3e);pJr=r(OXt,"not"),OXt.forEach(t),_Jr=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ioe=n(Eae,"A",{href:!0});var VXt=s(Ioe);uJr=r(VXt,"from_pretrained()"),VXt.forEach(t),bJr=r(Eae," to load the model weights."),Eae.forEach(t),vJr=i(QA),T(N3.$$.fragment,QA),QA.forEach(t),FJr=i(hi),Hr=n(hi,"DIV",{class:!0});var pi=s(Hr);T(O$.$$.fragment,pi),TJr=i(pi),D3e=n(pi,"P",{});var XXt=s(D3e);MJr=r(XXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XXt.forEach(t),EJr=i(pi),An=n(pi,"P",{});var WA=s(An);CJr=r(WA,"The model class to instantiate is selected based on the "),G3e=n(WA,"CODE",{});var zXt=s(G3e);wJr=r(zXt,"model_type"),zXt.forEach(t),AJr=r(WA,` property of the config object (either
passed as an argument or loaded from `),O3e=n(WA,"CODE",{});var QXt=s(O3e);LJr=r(QXt,"pretrained_model_name_or_path"),QXt.forEach(t),yJr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V3e=n(WA,"CODE",{});var WXt=s(V3e);xJr=r(WXt,"pretrained_model_name_or_path"),WXt.forEach(t),$Jr=r(WA,":"),WA.forEach(t),kJr=i(pi),Se=n(pi,"UL",{});var De=s(Se);I3=n(De,"LI",{});var NVe=s(I3);X3e=n(NVe,"STRONG",{});var HXt=s(X3e);SJr=r(HXt,"albert"),HXt.forEach(t),RJr=r(NVe," \u2014 "),qoe=n(NVe,"A",{href:!0});var UXt=s(qoe);PJr=r(UXt,"FlaxAlbertForSequenceClassification"),UXt.forEach(t),BJr=r(NVe," (ALBERT model)"),NVe.forEach(t),NJr=i(De),q3=n(De,"LI",{});var IVe=s(q3);z3e=n(IVe,"STRONG",{});var JXt=s(z3e);IJr=r(JXt,"bart"),JXt.forEach(t),qJr=r(IVe," \u2014 "),joe=n(IVe,"A",{href:!0});var YXt=s(joe);jJr=r(YXt,"FlaxBartForSequenceClassification"),YXt.forEach(t),DJr=r(IVe," (BART model)"),IVe.forEach(t),GJr=i(De),j3=n(De,"LI",{});var qVe=s(j3);Q3e=n(qVe,"STRONG",{});var KXt=s(Q3e);OJr=r(KXt,"bert"),KXt.forEach(t),VJr=r(qVe," \u2014 "),Doe=n(qVe,"A",{href:!0});var ZXt=s(Doe);XJr=r(ZXt,"FlaxBertForSequenceClassification"),ZXt.forEach(t),zJr=r(qVe," (BERT model)"),qVe.forEach(t),QJr=i(De),D3=n(De,"LI",{});var jVe=s(D3);W3e=n(jVe,"STRONG",{});var ezt=s(W3e);WJr=r(ezt,"big_bird"),ezt.forEach(t),HJr=r(jVe," \u2014 "),Goe=n(jVe,"A",{href:!0});var ozt=s(Goe);UJr=r(ozt,"FlaxBigBirdForSequenceClassification"),ozt.forEach(t),JJr=r(jVe," (BigBird model)"),jVe.forEach(t),YJr=i(De),G3=n(De,"LI",{});var DVe=s(G3);H3e=n(DVe,"STRONG",{});var rzt=s(H3e);KJr=r(rzt,"distilbert"),rzt.forEach(t),ZJr=r(DVe," \u2014 "),Ooe=n(DVe,"A",{href:!0});var tzt=s(Ooe);eYr=r(tzt,"FlaxDistilBertForSequenceClassification"),tzt.forEach(t),oYr=r(DVe," (DistilBERT model)"),DVe.forEach(t),rYr=i(De),O3=n(De,"LI",{});var GVe=s(O3);U3e=n(GVe,"STRONG",{});var azt=s(U3e);tYr=r(azt,"electra"),azt.forEach(t),aYr=r(GVe," \u2014 "),Voe=n(GVe,"A",{href:!0});var nzt=s(Voe);nYr=r(nzt,"FlaxElectraForSequenceClassification"),nzt.forEach(t),sYr=r(GVe," (ELECTRA model)"),GVe.forEach(t),lYr=i(De),V3=n(De,"LI",{});var OVe=s(V3);J3e=n(OVe,"STRONG",{});var szt=s(J3e);iYr=r(szt,"mbart"),szt.forEach(t),dYr=r(OVe," \u2014 "),Xoe=n(OVe,"A",{href:!0});var lzt=s(Xoe);cYr=r(lzt,"FlaxMBartForSequenceClassification"),lzt.forEach(t),fYr=r(OVe," (mBART model)"),OVe.forEach(t),mYr=i(De),X3=n(De,"LI",{});var VVe=s(X3);Y3e=n(VVe,"STRONG",{});var izt=s(Y3e);gYr=r(izt,"roberta"),izt.forEach(t),hYr=r(VVe," \u2014 "),zoe=n(VVe,"A",{href:!0});var dzt=s(zoe);pYr=r(dzt,"FlaxRobertaForSequenceClassification"),dzt.forEach(t),_Yr=r(VVe," (RoBERTa model)"),VVe.forEach(t),uYr=i(De),z3=n(De,"LI",{});var XVe=s(z3);K3e=n(XVe,"STRONG",{});var czt=s(K3e);bYr=r(czt,"roformer"),czt.forEach(t),vYr=r(XVe," \u2014 "),Qoe=n(XVe,"A",{href:!0});var fzt=s(Qoe);FYr=r(fzt,"FlaxRoFormerForSequenceClassification"),fzt.forEach(t),TYr=r(XVe," (RoFormer model)"),XVe.forEach(t),MYr=i(De),Q3=n(De,"LI",{});var zVe=s(Q3);Z3e=n(zVe,"STRONG",{});var mzt=s(Z3e);EYr=r(mzt,"xlm-roberta"),mzt.forEach(t),CYr=r(zVe," \u2014 "),Woe=n(zVe,"A",{href:!0});var gzt=s(Woe);wYr=r(gzt,"FlaxXLMRobertaForSequenceClassification"),gzt.forEach(t),AYr=r(zVe," (XLM-RoBERTa model)"),zVe.forEach(t),De.forEach(t),LYr=i(pi),T(W3.$$.fragment,pi),pi.forEach(t),hi.forEach(t),pQe=i(f),hf=n(f,"H2",{class:!0});var CHe=s(hf);H3=n(CHe,"A",{id:!0,class:!0,href:!0});var hzt=s(H3);e0e=n(hzt,"SPAN",{});var pzt=s(e0e);T(V$.$$.fragment,pzt),pzt.forEach(t),hzt.forEach(t),yYr=i(CHe),o0e=n(CHe,"SPAN",{});var _zt=s(o0e);xYr=r(_zt,"FlaxAutoModelForQuestionAnswering"),_zt.forEach(t),CHe.forEach(t),_Qe=i(f),Tr=n(f,"DIV",{class:!0});var _i=s(Tr);T(X$.$$.fragment,_i),$Yr=i(_i),pf=n(_i,"P",{});var Cae=s(pf);kYr=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hoe=n(Cae,"A",{href:!0});var uzt=s(Hoe);SYr=r(uzt,"from_pretrained()"),uzt.forEach(t),RYr=r(Cae," class method or the "),Uoe=n(Cae,"A",{href:!0});var bzt=s(Uoe);PYr=r(bzt,"from_config()"),bzt.forEach(t),BYr=r(Cae,` class
method.`),Cae.forEach(t),NYr=i(_i),z$=n(_i,"P",{});var wHe=s(z$);IYr=r(wHe,"This class cannot be instantiated directly using "),r0e=n(wHe,"CODE",{});var vzt=s(r0e);qYr=r(vzt,"__init__()"),vzt.forEach(t),jYr=r(wHe," (throws an error)."),wHe.forEach(t),DYr=i(_i),Zt=n(_i,"DIV",{class:!0});var HA=s(Zt);T(Q$.$$.fragment,HA),GYr=i(HA),t0e=n(HA,"P",{});var Fzt=s(t0e);OYr=r(Fzt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fzt.forEach(t),VYr=i(HA),_f=n(HA,"P",{});var wae=s(_f);XYr=r(wae,`Note:
Loading a model from its configuration file does `),a0e=n(wae,"STRONG",{});var Tzt=s(a0e);zYr=r(Tzt,"not"),Tzt.forEach(t),QYr=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Joe=n(wae,"A",{href:!0});var Mzt=s(Joe);WYr=r(Mzt,"from_pretrained()"),Mzt.forEach(t),HYr=r(wae," to load the model weights."),wae.forEach(t),UYr=i(HA),T(U3.$$.fragment,HA),HA.forEach(t),JYr=i(_i),Ur=n(_i,"DIV",{class:!0});var ui=s(Ur);T(W$.$$.fragment,ui),YYr=i(ui),n0e=n(ui,"P",{});var Ezt=s(n0e);KYr=r(Ezt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ezt.forEach(t),ZYr=i(ui),Ln=n(ui,"P",{});var UA=s(Ln);eKr=r(UA,"The model class to instantiate is selected based on the "),s0e=n(UA,"CODE",{});var Czt=s(s0e);oKr=r(Czt,"model_type"),Czt.forEach(t),rKr=r(UA,` property of the config object (either
passed as an argument or loaded from `),l0e=n(UA,"CODE",{});var wzt=s(l0e);tKr=r(wzt,"pretrained_model_name_or_path"),wzt.forEach(t),aKr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=n(UA,"CODE",{});var Azt=s(i0e);nKr=r(Azt,"pretrained_model_name_or_path"),Azt.forEach(t),sKr=r(UA,":"),UA.forEach(t),lKr=i(ui),Re=n(ui,"UL",{});var Ge=s(Re);J3=n(Ge,"LI",{});var QVe=s(J3);d0e=n(QVe,"STRONG",{});var Lzt=s(d0e);iKr=r(Lzt,"albert"),Lzt.forEach(t),dKr=r(QVe," \u2014 "),Yoe=n(QVe,"A",{href:!0});var yzt=s(Yoe);cKr=r(yzt,"FlaxAlbertForQuestionAnswering"),yzt.forEach(t),fKr=r(QVe," (ALBERT model)"),QVe.forEach(t),mKr=i(Ge),Y3=n(Ge,"LI",{});var WVe=s(Y3);c0e=n(WVe,"STRONG",{});var xzt=s(c0e);gKr=r(xzt,"bart"),xzt.forEach(t),hKr=r(WVe," \u2014 "),Koe=n(WVe,"A",{href:!0});var $zt=s(Koe);pKr=r($zt,"FlaxBartForQuestionAnswering"),$zt.forEach(t),_Kr=r(WVe," (BART model)"),WVe.forEach(t),uKr=i(Ge),K3=n(Ge,"LI",{});var HVe=s(K3);f0e=n(HVe,"STRONG",{});var kzt=s(f0e);bKr=r(kzt,"bert"),kzt.forEach(t),vKr=r(HVe," \u2014 "),Zoe=n(HVe,"A",{href:!0});var Szt=s(Zoe);FKr=r(Szt,"FlaxBertForQuestionAnswering"),Szt.forEach(t),TKr=r(HVe," (BERT model)"),HVe.forEach(t),MKr=i(Ge),Z3=n(Ge,"LI",{});var UVe=s(Z3);m0e=n(UVe,"STRONG",{});var Rzt=s(m0e);EKr=r(Rzt,"big_bird"),Rzt.forEach(t),CKr=r(UVe," \u2014 "),ere=n(UVe,"A",{href:!0});var Pzt=s(ere);wKr=r(Pzt,"FlaxBigBirdForQuestionAnswering"),Pzt.forEach(t),AKr=r(UVe," (BigBird model)"),UVe.forEach(t),LKr=i(Ge),e0=n(Ge,"LI",{});var JVe=s(e0);g0e=n(JVe,"STRONG",{});var Bzt=s(g0e);yKr=r(Bzt,"distilbert"),Bzt.forEach(t),xKr=r(JVe," \u2014 "),ore=n(JVe,"A",{href:!0});var Nzt=s(ore);$Kr=r(Nzt,"FlaxDistilBertForQuestionAnswering"),Nzt.forEach(t),kKr=r(JVe," (DistilBERT model)"),JVe.forEach(t),SKr=i(Ge),o0=n(Ge,"LI",{});var YVe=s(o0);h0e=n(YVe,"STRONG",{});var Izt=s(h0e);RKr=r(Izt,"electra"),Izt.forEach(t),PKr=r(YVe," \u2014 "),rre=n(YVe,"A",{href:!0});var qzt=s(rre);BKr=r(qzt,"FlaxElectraForQuestionAnswering"),qzt.forEach(t),NKr=r(YVe," (ELECTRA model)"),YVe.forEach(t),IKr=i(Ge),r0=n(Ge,"LI",{});var KVe=s(r0);p0e=n(KVe,"STRONG",{});var jzt=s(p0e);qKr=r(jzt,"mbart"),jzt.forEach(t),jKr=r(KVe," \u2014 "),tre=n(KVe,"A",{href:!0});var Dzt=s(tre);DKr=r(Dzt,"FlaxMBartForQuestionAnswering"),Dzt.forEach(t),GKr=r(KVe," (mBART model)"),KVe.forEach(t),OKr=i(Ge),t0=n(Ge,"LI",{});var ZVe=s(t0);_0e=n(ZVe,"STRONG",{});var Gzt=s(_0e);VKr=r(Gzt,"roberta"),Gzt.forEach(t),XKr=r(ZVe," \u2014 "),are=n(ZVe,"A",{href:!0});var Ozt=s(are);zKr=r(Ozt,"FlaxRobertaForQuestionAnswering"),Ozt.forEach(t),QKr=r(ZVe," (RoBERTa model)"),ZVe.forEach(t),WKr=i(Ge),a0=n(Ge,"LI",{});var eXe=s(a0);u0e=n(eXe,"STRONG",{});var Vzt=s(u0e);HKr=r(Vzt,"roformer"),Vzt.forEach(t),UKr=r(eXe," \u2014 "),nre=n(eXe,"A",{href:!0});var Xzt=s(nre);JKr=r(Xzt,"FlaxRoFormerForQuestionAnswering"),Xzt.forEach(t),YKr=r(eXe," (RoFormer model)"),eXe.forEach(t),KKr=i(Ge),n0=n(Ge,"LI",{});var oXe=s(n0);b0e=n(oXe,"STRONG",{});var zzt=s(b0e);ZKr=r(zzt,"xlm-roberta"),zzt.forEach(t),eZr=r(oXe," \u2014 "),sre=n(oXe,"A",{href:!0});var Qzt=s(sre);oZr=r(Qzt,"FlaxXLMRobertaForQuestionAnswering"),Qzt.forEach(t),rZr=r(oXe," (XLM-RoBERTa model)"),oXe.forEach(t),Ge.forEach(t),tZr=i(ui),T(s0.$$.fragment,ui),ui.forEach(t),_i.forEach(t),uQe=i(f),uf=n(f,"H2",{class:!0});var AHe=s(uf);l0=n(AHe,"A",{id:!0,class:!0,href:!0});var Wzt=s(l0);v0e=n(Wzt,"SPAN",{});var Hzt=s(v0e);T(H$.$$.fragment,Hzt),Hzt.forEach(t),Wzt.forEach(t),aZr=i(AHe),F0e=n(AHe,"SPAN",{});var Uzt=s(F0e);nZr=r(Uzt,"FlaxAutoModelForTokenClassification"),Uzt.forEach(t),AHe.forEach(t),bQe=i(f),Mr=n(f,"DIV",{class:!0});var bi=s(Mr);T(U$.$$.fragment,bi),sZr=i(bi),bf=n(bi,"P",{});var Aae=s(bf);lZr=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lre=n(Aae,"A",{href:!0});var Jzt=s(lre);iZr=r(Jzt,"from_pretrained()"),Jzt.forEach(t),dZr=r(Aae," class method or the "),ire=n(Aae,"A",{href:!0});var Yzt=s(ire);cZr=r(Yzt,"from_config()"),Yzt.forEach(t),fZr=r(Aae,` class
method.`),Aae.forEach(t),mZr=i(bi),J$=n(bi,"P",{});var LHe=s(J$);gZr=r(LHe,"This class cannot be instantiated directly using "),T0e=n(LHe,"CODE",{});var Kzt=s(T0e);hZr=r(Kzt,"__init__()"),Kzt.forEach(t),pZr=r(LHe," (throws an error)."),LHe.forEach(t),_Zr=i(bi),ea=n(bi,"DIV",{class:!0});var JA=s(ea);T(Y$.$$.fragment,JA),uZr=i(JA),M0e=n(JA,"P",{});var Zzt=s(M0e);bZr=r(Zzt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zzt.forEach(t),vZr=i(JA),vf=n(JA,"P",{});var Lae=s(vf);FZr=r(Lae,`Note:
Loading a model from its configuration file does `),E0e=n(Lae,"STRONG",{});var eQt=s(E0e);TZr=r(eQt,"not"),eQt.forEach(t),MZr=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=n(Lae,"A",{href:!0});var oQt=s(dre);EZr=r(oQt,"from_pretrained()"),oQt.forEach(t),CZr=r(Lae," to load the model weights."),Lae.forEach(t),wZr=i(JA),T(i0.$$.fragment,JA),JA.forEach(t),AZr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(K$.$$.fragment,vi),LZr=i(vi),C0e=n(vi,"P",{});var rQt=s(C0e);yZr=r(rQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rQt.forEach(t),xZr=i(vi),yn=n(vi,"P",{});var YA=s(yn);$Zr=r(YA,"The model class to instantiate is selected based on the "),w0e=n(YA,"CODE",{});var tQt=s(w0e);kZr=r(tQt,"model_type"),tQt.forEach(t),SZr=r(YA,` property of the config object (either
passed as an argument or loaded from `),A0e=n(YA,"CODE",{});var aQt=s(A0e);RZr=r(aQt,"pretrained_model_name_or_path"),aQt.forEach(t),PZr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=n(YA,"CODE",{});var nQt=s(L0e);BZr=r(nQt,"pretrained_model_name_or_path"),nQt.forEach(t),NZr=r(YA,":"),YA.forEach(t),IZr=i(vi),Ve=n(vi,"UL",{});var Mo=s(Ve);d0=n(Mo,"LI",{});var rXe=s(d0);y0e=n(rXe,"STRONG",{});var sQt=s(y0e);qZr=r(sQt,"albert"),sQt.forEach(t),jZr=r(rXe," \u2014 "),cre=n(rXe,"A",{href:!0});var lQt=s(cre);DZr=r(lQt,"FlaxAlbertForTokenClassification"),lQt.forEach(t),GZr=r(rXe," (ALBERT model)"),rXe.forEach(t),OZr=i(Mo),c0=n(Mo,"LI",{});var tXe=s(c0);x0e=n(tXe,"STRONG",{});var iQt=s(x0e);VZr=r(iQt,"bert"),iQt.forEach(t),XZr=r(tXe," \u2014 "),fre=n(tXe,"A",{href:!0});var dQt=s(fre);zZr=r(dQt,"FlaxBertForTokenClassification"),dQt.forEach(t),QZr=r(tXe," (BERT model)"),tXe.forEach(t),WZr=i(Mo),f0=n(Mo,"LI",{});var aXe=s(f0);$0e=n(aXe,"STRONG",{});var cQt=s($0e);HZr=r(cQt,"big_bird"),cQt.forEach(t),UZr=r(aXe," \u2014 "),mre=n(aXe,"A",{href:!0});var fQt=s(mre);JZr=r(fQt,"FlaxBigBirdForTokenClassification"),fQt.forEach(t),YZr=r(aXe," (BigBird model)"),aXe.forEach(t),KZr=i(Mo),m0=n(Mo,"LI",{});var nXe=s(m0);k0e=n(nXe,"STRONG",{});var mQt=s(k0e);ZZr=r(mQt,"distilbert"),mQt.forEach(t),eet=r(nXe," \u2014 "),gre=n(nXe,"A",{href:!0});var gQt=s(gre);oet=r(gQt,"FlaxDistilBertForTokenClassification"),gQt.forEach(t),ret=r(nXe," (DistilBERT model)"),nXe.forEach(t),tet=i(Mo),g0=n(Mo,"LI",{});var sXe=s(g0);S0e=n(sXe,"STRONG",{});var hQt=s(S0e);aet=r(hQt,"electra"),hQt.forEach(t),net=r(sXe," \u2014 "),hre=n(sXe,"A",{href:!0});var pQt=s(hre);set=r(pQt,"FlaxElectraForTokenClassification"),pQt.forEach(t),iet=r(sXe," (ELECTRA model)"),sXe.forEach(t),det=i(Mo),h0=n(Mo,"LI",{});var lXe=s(h0);R0e=n(lXe,"STRONG",{});var _Qt=s(R0e);cet=r(_Qt,"roberta"),_Qt.forEach(t),fet=r(lXe," \u2014 "),pre=n(lXe,"A",{href:!0});var uQt=s(pre);met=r(uQt,"FlaxRobertaForTokenClassification"),uQt.forEach(t),get=r(lXe," (RoBERTa model)"),lXe.forEach(t),het=i(Mo),p0=n(Mo,"LI",{});var iXe=s(p0);P0e=n(iXe,"STRONG",{});var bQt=s(P0e);pet=r(bQt,"roformer"),bQt.forEach(t),_et=r(iXe," \u2014 "),_re=n(iXe,"A",{href:!0});var vQt=s(_re);uet=r(vQt,"FlaxRoFormerForTokenClassification"),vQt.forEach(t),bet=r(iXe," (RoFormer model)"),iXe.forEach(t),vet=i(Mo),_0=n(Mo,"LI",{});var dXe=s(_0);B0e=n(dXe,"STRONG",{});var FQt=s(B0e);Fet=r(FQt,"xlm-roberta"),FQt.forEach(t),Tet=r(dXe," \u2014 "),ure=n(dXe,"A",{href:!0});var TQt=s(ure);Met=r(TQt,"FlaxXLMRobertaForTokenClassification"),TQt.forEach(t),Eet=r(dXe," (XLM-RoBERTa model)"),dXe.forEach(t),Mo.forEach(t),Cet=i(vi),T(u0.$$.fragment,vi),vi.forEach(t),bi.forEach(t),vQe=i(f),Ff=n(f,"H2",{class:!0});var yHe=s(Ff);b0=n(yHe,"A",{id:!0,class:!0,href:!0});var MQt=s(b0);N0e=n(MQt,"SPAN",{});var EQt=s(N0e);T(Z$.$$.fragment,EQt),EQt.forEach(t),MQt.forEach(t),wet=i(yHe),I0e=n(yHe,"SPAN",{});var CQt=s(I0e);Aet=r(CQt,"FlaxAutoModelForMultipleChoice"),CQt.forEach(t),yHe.forEach(t),FQe=i(f),Er=n(f,"DIV",{class:!0});var Fi=s(Er);T(ek.$$.fragment,Fi),Let=i(Fi),Tf=n(Fi,"P",{});var yae=s(Tf);yet=r(yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bre=n(yae,"A",{href:!0});var wQt=s(bre);xet=r(wQt,"from_pretrained()"),wQt.forEach(t),$et=r(yae," class method or the "),vre=n(yae,"A",{href:!0});var AQt=s(vre);ket=r(AQt,"from_config()"),AQt.forEach(t),Set=r(yae,` class
method.`),yae.forEach(t),Ret=i(Fi),ok=n(Fi,"P",{});var xHe=s(ok);Pet=r(xHe,"This class cannot be instantiated directly using "),q0e=n(xHe,"CODE",{});var LQt=s(q0e);Bet=r(LQt,"__init__()"),LQt.forEach(t),Net=r(xHe," (throws an error)."),xHe.forEach(t),Iet=i(Fi),oa=n(Fi,"DIV",{class:!0});var KA=s(oa);T(rk.$$.fragment,KA),qet=i(KA),j0e=n(KA,"P",{});var yQt=s(j0e);jet=r(yQt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yQt.forEach(t),Det=i(KA),Mf=n(KA,"P",{});var xae=s(Mf);Get=r(xae,`Note:
Loading a model from its configuration file does `),D0e=n(xae,"STRONG",{});var xQt=s(D0e);Oet=r(xQt,"not"),xQt.forEach(t),Vet=r(xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fre=n(xae,"A",{href:!0});var $Qt=s(Fre);Xet=r($Qt,"from_pretrained()"),$Qt.forEach(t),zet=r(xae," to load the model weights."),xae.forEach(t),Qet=i(KA),T(v0.$$.fragment,KA),KA.forEach(t),Wet=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(tk.$$.fragment,Ti),Het=i(Ti),G0e=n(Ti,"P",{});var kQt=s(G0e);Uet=r(kQt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kQt.forEach(t),Jet=i(Ti),xn=n(Ti,"P",{});var ZA=s(xn);Yet=r(ZA,"The model class to instantiate is selected based on the "),O0e=n(ZA,"CODE",{});var SQt=s(O0e);Ket=r(SQt,"model_type"),SQt.forEach(t),Zet=r(ZA,` property of the config object (either
passed as an argument or loaded from `),V0e=n(ZA,"CODE",{});var RQt=s(V0e);eot=r(RQt,"pretrained_model_name_or_path"),RQt.forEach(t),oot=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=n(ZA,"CODE",{});var PQt=s(X0e);rot=r(PQt,"pretrained_model_name_or_path"),PQt.forEach(t),tot=r(ZA,":"),ZA.forEach(t),aot=i(Ti),Xe=n(Ti,"UL",{});var Eo=s(Xe);F0=n(Eo,"LI",{});var cXe=s(F0);z0e=n(cXe,"STRONG",{});var BQt=s(z0e);not=r(BQt,"albert"),BQt.forEach(t),sot=r(cXe," \u2014 "),Tre=n(cXe,"A",{href:!0});var NQt=s(Tre);lot=r(NQt,"FlaxAlbertForMultipleChoice"),NQt.forEach(t),iot=r(cXe," (ALBERT model)"),cXe.forEach(t),dot=i(Eo),T0=n(Eo,"LI",{});var fXe=s(T0);Q0e=n(fXe,"STRONG",{});var IQt=s(Q0e);cot=r(IQt,"bert"),IQt.forEach(t),fot=r(fXe," \u2014 "),Mre=n(fXe,"A",{href:!0});var qQt=s(Mre);mot=r(qQt,"FlaxBertForMultipleChoice"),qQt.forEach(t),got=r(fXe," (BERT model)"),fXe.forEach(t),hot=i(Eo),M0=n(Eo,"LI",{});var mXe=s(M0);W0e=n(mXe,"STRONG",{});var jQt=s(W0e);pot=r(jQt,"big_bird"),jQt.forEach(t),_ot=r(mXe," \u2014 "),Ere=n(mXe,"A",{href:!0});var DQt=s(Ere);uot=r(DQt,"FlaxBigBirdForMultipleChoice"),DQt.forEach(t),bot=r(mXe," (BigBird model)"),mXe.forEach(t),vot=i(Eo),E0=n(Eo,"LI",{});var gXe=s(E0);H0e=n(gXe,"STRONG",{});var GQt=s(H0e);Fot=r(GQt,"distilbert"),GQt.forEach(t),Tot=r(gXe," \u2014 "),Cre=n(gXe,"A",{href:!0});var OQt=s(Cre);Mot=r(OQt,"FlaxDistilBertForMultipleChoice"),OQt.forEach(t),Eot=r(gXe," (DistilBERT model)"),gXe.forEach(t),Cot=i(Eo),C0=n(Eo,"LI",{});var hXe=s(C0);U0e=n(hXe,"STRONG",{});var VQt=s(U0e);wot=r(VQt,"electra"),VQt.forEach(t),Aot=r(hXe," \u2014 "),wre=n(hXe,"A",{href:!0});var XQt=s(wre);Lot=r(XQt,"FlaxElectraForMultipleChoice"),XQt.forEach(t),yot=r(hXe," (ELECTRA model)"),hXe.forEach(t),xot=i(Eo),w0=n(Eo,"LI",{});var pXe=s(w0);J0e=n(pXe,"STRONG",{});var zQt=s(J0e);$ot=r(zQt,"roberta"),zQt.forEach(t),kot=r(pXe," \u2014 "),Are=n(pXe,"A",{href:!0});var QQt=s(Are);Sot=r(QQt,"FlaxRobertaForMultipleChoice"),QQt.forEach(t),Rot=r(pXe," (RoBERTa model)"),pXe.forEach(t),Pot=i(Eo),A0=n(Eo,"LI",{});var _Xe=s(A0);Y0e=n(_Xe,"STRONG",{});var WQt=s(Y0e);Bot=r(WQt,"roformer"),WQt.forEach(t),Not=r(_Xe," \u2014 "),Lre=n(_Xe,"A",{href:!0});var HQt=s(Lre);Iot=r(HQt,"FlaxRoFormerForMultipleChoice"),HQt.forEach(t),qot=r(_Xe," (RoFormer model)"),_Xe.forEach(t),jot=i(Eo),L0=n(Eo,"LI",{});var uXe=s(L0);K0e=n(uXe,"STRONG",{});var UQt=s(K0e);Dot=r(UQt,"xlm-roberta"),UQt.forEach(t),Got=r(uXe," \u2014 "),yre=n(uXe,"A",{href:!0});var JQt=s(yre);Oot=r(JQt,"FlaxXLMRobertaForMultipleChoice"),JQt.forEach(t),Vot=r(uXe," (XLM-RoBERTa model)"),uXe.forEach(t),Eo.forEach(t),Xot=i(Ti),T(y0.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),TQe=i(f),Ef=n(f,"H2",{class:!0});var $He=s(Ef);x0=n($He,"A",{id:!0,class:!0,href:!0});var YQt=s(x0);Z0e=n(YQt,"SPAN",{});var KQt=s(Z0e);T(ak.$$.fragment,KQt),KQt.forEach(t),YQt.forEach(t),zot=i($He),ewe=n($He,"SPAN",{});var ZQt=s(ewe);Qot=r(ZQt,"FlaxAutoModelForNextSentencePrediction"),ZQt.forEach(t),$He.forEach(t),MQe=i(f),Cr=n(f,"DIV",{class:!0});var Mi=s(Cr);T(nk.$$.fragment,Mi),Wot=i(Mi),Cf=n(Mi,"P",{});var $ae=s(Cf);Hot=r($ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xre=n($ae,"A",{href:!0});var eWt=s(xre);Uot=r(eWt,"from_pretrained()"),eWt.forEach(t),Jot=r($ae," class method or the "),$re=n($ae,"A",{href:!0});var oWt=s($re);Yot=r(oWt,"from_config()"),oWt.forEach(t),Kot=r($ae,` class
method.`),$ae.forEach(t),Zot=i(Mi),sk=n(Mi,"P",{});var kHe=s(sk);ert=r(kHe,"This class cannot be instantiated directly using "),owe=n(kHe,"CODE",{});var rWt=s(owe);ort=r(rWt,"__init__()"),rWt.forEach(t),rrt=r(kHe," (throws an error)."),kHe.forEach(t),trt=i(Mi),ra=n(Mi,"DIV",{class:!0});var eL=s(ra);T(lk.$$.fragment,eL),art=i(eL),rwe=n(eL,"P",{});var tWt=s(rwe);nrt=r(tWt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tWt.forEach(t),srt=i(eL),wf=n(eL,"P",{});var kae=s(wf);lrt=r(kae,`Note:
Loading a model from its configuration file does `),twe=n(kae,"STRONG",{});var aWt=s(twe);irt=r(aWt,"not"),aWt.forEach(t),drt=r(kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=n(kae,"A",{href:!0});var nWt=s(kre);crt=r(nWt,"from_pretrained()"),nWt.forEach(t),frt=r(kae," to load the model weights."),kae.forEach(t),mrt=i(eL),T($0.$$.fragment,eL),eL.forEach(t),grt=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(ik.$$.fragment,Ei),hrt=i(Ei),awe=n(Ei,"P",{});var sWt=s(awe);prt=r(sWt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sWt.forEach(t),_rt=i(Ei),$n=n(Ei,"P",{});var oL=s($n);urt=r(oL,"The model class to instantiate is selected based on the "),nwe=n(oL,"CODE",{});var lWt=s(nwe);brt=r(lWt,"model_type"),lWt.forEach(t),vrt=r(oL,` property of the config object (either
passed as an argument or loaded from `),swe=n(oL,"CODE",{});var iWt=s(swe);Frt=r(iWt,"pretrained_model_name_or_path"),iWt.forEach(t),Trt=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lwe=n(oL,"CODE",{});var dWt=s(lwe);Mrt=r(dWt,"pretrained_model_name_or_path"),dWt.forEach(t),Ert=r(oL,":"),oL.forEach(t),Crt=i(Ei),iwe=n(Ei,"UL",{});var cWt=s(iwe);k0=n(cWt,"LI",{});var bXe=s(k0);dwe=n(bXe,"STRONG",{});var fWt=s(dwe);wrt=r(fWt,"bert"),fWt.forEach(t),Art=r(bXe," \u2014 "),Sre=n(bXe,"A",{href:!0});var mWt=s(Sre);Lrt=r(mWt,"FlaxBertForNextSentencePrediction"),mWt.forEach(t),yrt=r(bXe," (BERT model)"),bXe.forEach(t),cWt.forEach(t),xrt=i(Ei),T(S0.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),EQe=i(f),Af=n(f,"H2",{class:!0});var SHe=s(Af);R0=n(SHe,"A",{id:!0,class:!0,href:!0});var gWt=s(R0);cwe=n(gWt,"SPAN",{});var hWt=s(cwe);T(dk.$$.fragment,hWt),hWt.forEach(t),gWt.forEach(t),$rt=i(SHe),fwe=n(SHe,"SPAN",{});var pWt=s(fwe);krt=r(pWt,"FlaxAutoModelForImageClassification"),pWt.forEach(t),SHe.forEach(t),CQe=i(f),wr=n(f,"DIV",{class:!0});var Ci=s(wr);T(ck.$$.fragment,Ci),Srt=i(Ci),Lf=n(Ci,"P",{});var Sae=s(Lf);Rrt=r(Sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rre=n(Sae,"A",{href:!0});var _Wt=s(Rre);Prt=r(_Wt,"from_pretrained()"),_Wt.forEach(t),Brt=r(Sae," class method or the "),Pre=n(Sae,"A",{href:!0});var uWt=s(Pre);Nrt=r(uWt,"from_config()"),uWt.forEach(t),Irt=r(Sae,` class
method.`),Sae.forEach(t),qrt=i(Ci),fk=n(Ci,"P",{});var RHe=s(fk);jrt=r(RHe,"This class cannot be instantiated directly using "),mwe=n(RHe,"CODE",{});var bWt=s(mwe);Drt=r(bWt,"__init__()"),bWt.forEach(t),Grt=r(RHe," (throws an error)."),RHe.forEach(t),Ort=i(Ci),ta=n(Ci,"DIV",{class:!0});var rL=s(ta);T(mk.$$.fragment,rL),Vrt=i(rL),gwe=n(rL,"P",{});var vWt=s(gwe);Xrt=r(vWt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vWt.forEach(t),zrt=i(rL),yf=n(rL,"P",{});var Rae=s(yf);Qrt=r(Rae,`Note:
Loading a model from its configuration file does `),hwe=n(Rae,"STRONG",{});var FWt=s(hwe);Wrt=r(FWt,"not"),FWt.forEach(t),Hrt=r(Rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=n(Rae,"A",{href:!0});var TWt=s(Bre);Urt=r(TWt,"from_pretrained()"),TWt.forEach(t),Jrt=r(Rae," to load the model weights."),Rae.forEach(t),Yrt=i(rL),T(P0.$$.fragment,rL),rL.forEach(t),Krt=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(gk.$$.fragment,wi),Zrt=i(wi),pwe=n(wi,"P",{});var MWt=s(pwe);ett=r(MWt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MWt.forEach(t),ott=i(wi),kn=n(wi,"P",{});var tL=s(kn);rtt=r(tL,"The model class to instantiate is selected based on the "),_we=n(tL,"CODE",{});var EWt=s(_we);ttt=r(EWt,"model_type"),EWt.forEach(t),att=r(tL,` property of the config object (either
passed as an argument or loaded from `),uwe=n(tL,"CODE",{});var CWt=s(uwe);ntt=r(CWt,"pretrained_model_name_or_path"),CWt.forEach(t),stt=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=n(tL,"CODE",{});var wWt=s(bwe);ltt=r(wWt,"pretrained_model_name_or_path"),wWt.forEach(t),itt=r(tL,":"),tL.forEach(t),dtt=i(wi),hk=n(wi,"UL",{});var PHe=s(hk);B0=n(PHe,"LI",{});var vXe=s(B0);vwe=n(vXe,"STRONG",{});var AWt=s(vwe);ctt=r(AWt,"beit"),AWt.forEach(t),ftt=r(vXe," \u2014 "),Nre=n(vXe,"A",{href:!0});var LWt=s(Nre);mtt=r(LWt,"FlaxBeitForImageClassification"),LWt.forEach(t),gtt=r(vXe," (BEiT model)"),vXe.forEach(t),htt=i(PHe),N0=n(PHe,"LI",{});var FXe=s(N0);Fwe=n(FXe,"STRONG",{});var yWt=s(Fwe);ptt=r(yWt,"vit"),yWt.forEach(t),_tt=r(FXe," \u2014 "),Ire=n(FXe,"A",{href:!0});var xWt=s(Ire);utt=r(xWt,"FlaxViTForImageClassification"),xWt.forEach(t),btt=r(FXe," (ViT model)"),FXe.forEach(t),PHe.forEach(t),vtt=i(wi),T(I0.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),wQe=i(f),xf=n(f,"H2",{class:!0});var BHe=s(xf);q0=n(BHe,"A",{id:!0,class:!0,href:!0});var $Wt=s(q0);Twe=n($Wt,"SPAN",{});var kWt=s(Twe);T(pk.$$.fragment,kWt),kWt.forEach(t),$Wt.forEach(t),Ftt=i(BHe),Mwe=n(BHe,"SPAN",{});var SWt=s(Mwe);Ttt=r(SWt,"FlaxAutoModelForVision2Seq"),SWt.forEach(t),BHe.forEach(t),AQe=i(f),Ar=n(f,"DIV",{class:!0});var Ai=s(Ar);T(_k.$$.fragment,Ai),Mtt=i(Ai),$f=n(Ai,"P",{});var Pae=s($f);Ett=r(Pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qre=n(Pae,"A",{href:!0});var RWt=s(qre);Ctt=r(RWt,"from_pretrained()"),RWt.forEach(t),wtt=r(Pae," class method or the "),jre=n(Pae,"A",{href:!0});var PWt=s(jre);Att=r(PWt,"from_config()"),PWt.forEach(t),Ltt=r(Pae,` class
method.`),Pae.forEach(t),ytt=i(Ai),uk=n(Ai,"P",{});var NHe=s(uk);xtt=r(NHe,"This class cannot be instantiated directly using "),Ewe=n(NHe,"CODE",{});var BWt=s(Ewe);$tt=r(BWt,"__init__()"),BWt.forEach(t),ktt=r(NHe," (throws an error)."),NHe.forEach(t),Stt=i(Ai),aa=n(Ai,"DIV",{class:!0});var aL=s(aa);T(bk.$$.fragment,aL),Rtt=i(aL),Cwe=n(aL,"P",{});var NWt=s(Cwe);Ptt=r(NWt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NWt.forEach(t),Btt=i(aL),kf=n(aL,"P",{});var Bae=s(kf);Ntt=r(Bae,`Note:
Loading a model from its configuration file does `),wwe=n(Bae,"STRONG",{});var IWt=s(wwe);Itt=r(IWt,"not"),IWt.forEach(t),qtt=r(Bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dre=n(Bae,"A",{href:!0});var qWt=s(Dre);jtt=r(qWt,"from_pretrained()"),qWt.forEach(t),Dtt=r(Bae," to load the model weights."),Bae.forEach(t),Gtt=i(aL),T(j0.$$.fragment,aL),aL.forEach(t),Ott=i(Ai),et=n(Ai,"DIV",{class:!0});var Li=s(et);T(vk.$$.fragment,Li),Vtt=i(Li),Awe=n(Li,"P",{});var jWt=s(Awe);Xtt=r(jWt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jWt.forEach(t),ztt=i(Li),Sn=n(Li,"P",{});var nL=s(Sn);Qtt=r(nL,"The model class to instantiate is selected based on the "),Lwe=n(nL,"CODE",{});var DWt=s(Lwe);Wtt=r(DWt,"model_type"),DWt.forEach(t),Htt=r(nL,` property of the config object (either
passed as an argument or loaded from `),ywe=n(nL,"CODE",{});var GWt=s(ywe);Utt=r(GWt,"pretrained_model_name_or_path"),GWt.forEach(t),Jtt=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xwe=n(nL,"CODE",{});var OWt=s(xwe);Ytt=r(OWt,"pretrained_model_name_or_path"),OWt.forEach(t),Ktt=r(nL,":"),nL.forEach(t),Ztt=i(Li),$we=n(Li,"UL",{});var VWt=s($we);D0=n(VWt,"LI",{});var TXe=s(D0);kwe=n(TXe,"STRONG",{});var XWt=s(kwe);eat=r(XWt,"vision-encoder-decoder"),XWt.forEach(t),oat=r(TXe," \u2014 "),Gre=n(TXe,"A",{href:!0});var zWt=s(Gre);rat=r(zWt,"FlaxVisionEncoderDecoderModel"),zWt.forEach(t),tat=r(TXe," (Vision Encoder decoder model)"),TXe.forEach(t),VWt.forEach(t),aat=i(Li),T(G0.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(YUt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoTokenizer"),c(Pi,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel"),c(jf,"id","extending-the-auto-classes"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#extending-the-auto-classes"),c(Bi,"class","relative group"),c(Gf,"id","transformers.AutoConfig"),c(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gf,"href","#transformers.AutoConfig"),c(Ni,"class","relative group"),c(HS,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(US,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig"),c(JS,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig"),c(YS,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig"),c(KS,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig"),c(ZS,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(eR,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig"),c(oR,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(rR,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(tR,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(aR,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig"),c(nR,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig"),c(sR,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig"),c(lR,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig"),c(iR,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig"),c(dR,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig"),c(cR,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig"),c(fR,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig"),c(mR,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig"),c(gR,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(hR,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(pR,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(_R,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig"),c(uR,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(bR,"href","/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(vR,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig"),c(FR,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig"),c(TR,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig"),c(MR,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig"),c(ER,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig"),c(CR,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig"),c(wR,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(AR,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig"),c(LR,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig"),c(yR,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig"),c(xR,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig"),c($R,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig"),c(kR,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNConfig"),c(SR,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config"),c(RR,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(PR,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(BR,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig"),c(NR,"href","/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTConfig"),c(IR,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig"),c(qR,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig"),c(jR,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(DR,"href","/docs/transformers/pr_17826/en/model_doc/jukebox#transformers.JukeboxConfig"),c(GR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(OR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(VR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(XR,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig"),c(zR,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig"),c(QR,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig"),c(WR,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config"),c(HR,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig"),c(UR,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig"),c(JR,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config"),c(YR,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig"),c(KR,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(ZR,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig"),c(eP,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig"),c(oP,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(rP,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(tP,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(aP,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig"),c(nP,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config"),c(sP,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig"),c(lP,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig"),c(iP,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(dP,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(cP,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig"),c(fP,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig"),c(mP,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig"),c(gP,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig"),c(hP,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(pP,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(_P,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(uP,"href","/docs/transformers/pr_17826/en/model_doc/rag#transformers.RagConfig"),c(bP,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmConfig"),c(vP,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig"),c(FP,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig"),c(TP,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig"),c(MP,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig"),c(EP,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig"),c(CP,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig"),c(wP,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig"),c(AP,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig"),c(LP,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig"),c(yP,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig"),c(xP,"href","/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c($P,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(kP,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(SP,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig"),c(RP,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(PP,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig"),c(BP,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config"),c(NP,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig"),c(IP,"href","/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(qP,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(jP,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRConfig"),c(DP,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(GP,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(OP,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig"),c(VP,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig"),c(XP,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(zP,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(QP,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(WP,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig"),c(HP,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(UP,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(JP,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(YP,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig"),c(KP,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig"),c(ZP,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig"),c(eB,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(oB,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(rB,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(tB,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig"),c(aB,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig"),c(nB,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"id","transformers.AutoTokenizer"),c(oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oh,"href","#transformers.AutoTokenizer"),c(qi,"class","relative group"),c(sB,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(lB,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(iB,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartTokenizer"),c(cB,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartTokenizerFast"),c(fB,"href","/docs/transformers/pr_17826/en/model_doc/barthez#transformers.BarthezTokenizer"),c(mB,"href","/docs/transformers/pr_17826/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(gB,"href","/docs/transformers/pr_17826/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(hB,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(pB,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(_B,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(uB,"href","/docs/transformers/pr_17826/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(bB,"href","/docs/transformers/pr_17826/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(vB,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(FB,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(TB,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(MB,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(EB,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(CB,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(wB,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(AB,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(LB,"href","/docs/transformers/pr_17826/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(yB,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertTokenizer"),c(xB,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c($B,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineTokenizer"),c(kB,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizer"),c(SB,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(RB,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(PB,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(BB,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(NB,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(IB,"href","/docs/transformers/pr_17826/en/model_doc/cpm#transformers.CpmTokenizer"),c(qB,"href","/docs/transformers/pr_17826/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(jB,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(DB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OB,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaTokenizer"),c(VB,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(XB,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(zB,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(QB,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(WB,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(HB,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(UB,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(JB,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraTokenizer"),c(YB,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(KB,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(ZB,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetTokenizer"),c(eN,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(oN,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(rN,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelTokenizer"),c(tN,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(aN,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nN,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sN,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lN,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iN,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(dN,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cN,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(fN,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizer"),c(mN,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(gN,"href","/docs/transformers/pr_17826/en/model_doc/herbert#transformers.HerbertTokenizer"),c(hN,"href","/docs/transformers/pr_17826/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(pN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(_N,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uN,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(vN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(FN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(TN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(MN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(EN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(CN,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(wN,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(AN,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDTokenizer"),c(LN,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDTokenizerFast"),c(yN,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerTokenizer"),c(xN,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c($N,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5Tokenizer"),c(kN,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5TokenizerFast"),c(SN,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeTokenizer"),c(RN,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(PN,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(BN,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(NN,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianTokenizer"),c(IN,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartTokenizer"),c(qN,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(jN,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(DN,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(GN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(ON,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(VN,"href","/docs/transformers/pr_17826/en/model_doc/mluke#transformers.MLukeTokenizer"),c(XN,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(zN,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(QN,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(WN,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(HN,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5Tokenizer"),c(UN,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5TokenizerFast"),c(JN,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpTokenizer"),c(YN,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(KN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(ZN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(eI,"href","/docs/transformers/pr_17826/en/model_doc/nllb#transformers.NllbTokenizer"),c(oI,"href","/docs/transformers/pr_17826/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(rI,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(tI,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(aI,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(nI,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(sI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lI,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(iI,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(dI,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(cI,"href","/docs/transformers/pr_17826/en/model_doc/phobert#transformers.PhobertTokenizer"),c(fI,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartTokenizer"),c(mI,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(gI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(hI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(pI,"href","/docs/transformers/pr_17826/en/model_doc/rag#transformers.RagTokenizer"),c(_I,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmTokenizer"),c(uI,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmTokenizerFast"),c(bI,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerTokenizer"),c(vI,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(FI,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertTokenizer"),c(TI,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(MI,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(EI,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(CI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AI,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(LI,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(yI,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(xI,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c($I,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterTokenizer"),c(kI,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(SI,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(RI,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(PI,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5Tokenizer"),c(BI,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5TokenizerFast"),c(NI,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasTokenizer"),c(II,"href","/docs/transformers/pr_17826/en/model_doc/tapex#transformers.TapexTokenizer"),c(qI,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(jI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(DI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(GI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(OI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(VI,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(XI,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(zI,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(QI,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMTokenizer"),c(WI,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(HI,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMTokenizer"),c(UI,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(JI,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(YI,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(KI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eq,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(oq,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(rq,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(tq,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qh,"id","transformers.AutoFeatureExtractor"),c(qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qh,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(aq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(nq,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(sq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(lq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cq,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(fq,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(mq,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(hq,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(pq,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(_q,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(uq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(bq,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(vq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(wq,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xq,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c($q,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(kq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Sq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Rq,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Pq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Bq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Nq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Iq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qq,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mp,"id","transformers.AutoProcessor"),c(Mp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mp,"href","#transformers.AutoProcessor"),c(Di,"class","relative group"),c(jq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Dq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPProcessor"),c(Gq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPProcessor"),c(Oq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Vq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Xq,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(zq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Wq,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Hq,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Uq,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Jq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Yq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Kq,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltProcessor"),c(Zq,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(ej,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oj,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rj,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xp,"id","transformers.AutoModel"),c(Xp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xp,"href","#transformers.AutoModel"),c(Oi,"class","relative group"),c(tj,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aj,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nj,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sj,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertModel"),c(lj,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartModel"),c(ij,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitModel"),c(dj,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel"),c(cj,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(fj,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdModel"),c(mj,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(gj,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(hj,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(pj,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomModel"),c(_j,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertModel"),c(uj,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineModel"),c(bj,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPModel"),c(vj,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenModel"),c(Fj,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertModel"),c(Tj,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextModel"),c(Mj,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLModel"),c(Ej,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtModel"),c(Cj,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(wj,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Aj,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Lj,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaModel"),c(yj,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(xj,"href","/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c($j,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTModel"),c(kj,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrModel"),c(Sj,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertModel"),c(Rj,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Pj,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTModel"),c(Bj,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraModel"),c(Nj,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertModel"),c(Ij,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaModel"),c(qj,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetModel"),c(jj,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTModel"),c(Dj,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelModel"),c(Gj,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Oj,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNModel"),c(Vj,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Model"),c(Xj,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(zj,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Qj,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJModel"),c(Wj,"href","/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTModel"),c(Hj,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertModel"),c(Uj,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertModel"),c(Jj,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Yj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Kj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Zj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(eD,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDModel"),c(oD,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitModel"),c(rD,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerModel"),c(tD,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Model"),c(aD,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeModel"),c(nD,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertModel"),c(sD,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model"),c(lD,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianModel"),c(iD,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerModel"),c(dD,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartModel"),c(cD,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTModel"),c(fD,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(mD,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertModel"),c(gD,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTModel"),c(hD,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetModel"),c(pD,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Model"),c(_D,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpModel"),c(uD,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaModel"),c(bD,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model"),c(vD,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerModel"),c(FD,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(TD,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTModel"),c(MD,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusModel"),c(ED,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverModel"),c(CD,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartModel"),c(wD,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerModel"),c(AD,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(LD,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertModel"),c(yD,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModel"),c(xD,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetModel"),c($D,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertModel"),c(kD,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetModel"),c(SD,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel"),c(RD,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaModel"),c(PD,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerModel"),c(BD,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerModel"),c(ND,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWModel"),c(ID,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDModel"),c(qD,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(jD,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterModel"),c(DD,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(GD,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinModel"),c(OD,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Model"),c(VD,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasModel"),c(XD,"href","/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(zD,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(QD,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechModel"),c(WD,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(HD,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanModel"),c(UD,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltModel"),c(JD,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(YD,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertModel"),c(KD,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTModel"),c(ZD,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(eG,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(oG,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(rG,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMModel"),c(tG,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMModel"),c(aG,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMModel"),c(nG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(sG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(lG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(iG,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetModel"),c(dG,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosModel"),c(cG,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ku,"id","transformers.AutoModelForPreTraining"),c(Ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ku,"href","#transformers.AutoModelForPreTraining"),c(zi,"class","relative group"),c(fG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hG,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForPreTraining"),c(pG,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForPreTraining"),c(uG,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(bG,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM"),c(vG,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(FG,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(TG,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(MG,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(EG,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(CG,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(wG,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForPreTraining"),c(AG,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(LG,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaForPreTraining"),c(yG,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForPreTraining"),c(xG,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c($G,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(kG,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(SG,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(RG,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(PG,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(BG,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(NG,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(IG,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(qG,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(jG,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(DG,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(GG,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(OG,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel"),c(VG,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(XG,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(zG,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(QG,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(WG,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(HG,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(UG,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(JG,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(YG,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(KG,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(ZG,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(eO,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(oO,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(tO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(aO,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W2,"id","transformers.AutoModelForCausalLM"),c(W2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W2,"href","#transformers.AutoModelForCausalLM"),c(Hi,"class","relative group"),c(nO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iO,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForCausalLM"),c(dO,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertLMHeadModel"),c(cO,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(fO,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(mO,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(gO,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(hO,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(pO,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM"),c(_O,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(uO,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(bO,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(vO,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(FO,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForCausalLM"),c(TO,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(MO,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(EO,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(CO,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(wO,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianForCausalLM"),c(AO,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForCausalLM"),c(LO,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(yO,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForCausalLM"),c(xO,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($O,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForCausalLM"),c(kO,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(SO,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(RO,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(PO,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(BO,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(NO,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(IO,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(qO,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(jO,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(DO,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(GO,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(OO,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(VO,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(zO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(QO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(WO,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I1,"id","transformers.AutoModelForMaskedLM"),c(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I1,"href","#transformers.AutoModelForMaskedLM"),c(Yi,"class","relative group"),c(HO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(KO,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ZO,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMaskedLM"),c(eV,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(oV,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(rV,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(tV,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(aV,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(nV,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(sV,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(lV,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(iV,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(dV,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(cV,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(fV,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(mV,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gV,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hV,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeForMaskedLM"),c(pV,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(_V,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(uV,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(bV,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(vV,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(FV,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(TV,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(MV,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(EV,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(CV,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(wV,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(AV,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(LV,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(yV,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(xV,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM"),c($V,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(kV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(SV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(RV,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wb,"id","transformers.AutoModelForSeq2SeqLM"),c(wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wb,"href","#transformers.AutoModelForSeq2SeqLM"),c(ed,"class","relative group"),c(PV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(OV,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianMTModel"),c(WV,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(HV,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(UV,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(JV,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(KV,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(ZV,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(eX,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(oX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hb,"id","transformers.AutoModelForSequenceClassification"),c(Hb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hb,"href","#transformers.AutoModelForSequenceClassification"),c(td,"class","relative group"),c(rX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c($X,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(zX,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(QX,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(WX,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(HX,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(UX,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(YX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(KX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(ez,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForMultipleChoice"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForMultipleChoice"),c(sd,"class","relative group"),c(oz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(dz,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(fz,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(mz,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(vz,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(wz,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Az,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Lz,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(yz,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(xz,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c($z,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(kz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Sz,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Rz,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForNextSentencePrediction"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForNextSentencePrediction"),c(dd,"class","relative group"),c(Pz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(qz,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(jz,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Dz,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Gz,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Oz,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qF,"id","transformers.AutoModelForTokenClassification"),c(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qF,"href","#transformers.AutoModelForTokenClassification"),c(md,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qz,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Wz,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(eQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(tQ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(aQ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(nQ,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(sQ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(lQ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(iQ,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(dQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(cQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(fQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(mQ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(gQ,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(hQ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(pQ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(_Q,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(uQ,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(bQ,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(vQ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(FQ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(TQ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(MQ,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(EQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(CQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(wQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(AQ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(LQ,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C6,"id","transformers.AutoModelForQuestionAnswering"),c(C6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C6,"href","#transformers.AutoModelForQuestionAnswering"),c(pd,"class","relative group"),c(yQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(zQ,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(iW,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(dW,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(cW,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(fW,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(mW,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(gW,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(hW,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(pW,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(_W,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(uW,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(bW,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForTableQuestionAnswering"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForTableQuestionAnswering"),c(bd,"class","relative group"),c(vW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForImageClassification"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForImageClassification"),c(Td,"class","relative group"),c(EW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AW,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForImageClassification"),c(LW,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(yW,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtForImageClassification"),c(xW,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c($W,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassification"),c(kW,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(SW,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(RW,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassification"),c(PW,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(BW,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(NW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(IW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(qW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(jW,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(DW,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(GW,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(OW,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(VW,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForImageClassification"),c(XW,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanForImageClassification"),c(zW,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.AutoModelForVision2Seq"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(QW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ld,"class","relative group"),c(JW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HT,"id","transformers.AutoModelForAudioClassification"),c(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HT,"href","#transformers.AutoModelForAudioClassification"),c($d,"class","relative group"),c(eH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l7,"id","transformers.AutoModelForAudioFrameClassification"),c(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l7,"href","#transformers.AutoModelForAudioFrameClassification"),c(Rd,"class","relative group"),c(mH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(_H,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(uH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(bH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(vH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_7,"id","transformers.AutoModelForCTC"),c(_7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_7,"href","#transformers.AutoModelForCTC"),c(Nd,"class","relative group"),c(FH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(CH,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForCTC"),c(wH,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTForCTC"),c(AH,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForCTC"),c(LH,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForCTC"),c(yH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(xH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c($H,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(kH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(SH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($7,"id","transformers.AutoModelForSpeechSeq2Seq"),c($7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($7,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(jd,"class","relative group"),c(RH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(IH,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N7,"id","transformers.AutoModelForAudioXVector"),c(N7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N7,"href","#transformers.AutoModelForAudioXVector"),c(Od,"class","relative group"),c(qH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(OH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(VH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(XH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(zH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z7,"id","transformers.AutoModelForMaskedImageModeling"),c(z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z7,"href","#transformers.AutoModelForMaskedImageModeling"),c(zd,"class","relative group"),c(QH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(JH,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(YH,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K7,"id","transformers.AutoModelForObjectDetection"),c(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K7,"href","#transformers.AutoModelForObjectDetection"),c(Ud,"class","relative group"),c(KH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oU,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForObjectDetection"),c(rU,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a8,"id","transformers.AutoModelForImageSegmentation"),c(a8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a8,"href","#transformers.AutoModelForImageSegmentation"),c(Kd,"class","relative group"),c(tU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d8,"id","transformers.AutoModelForSemanticSegmentation"),c(d8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d8,"href","#transformers.AutoModelForSemanticSegmentation"),c(oc,"class","relative group"),c(lU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(fU,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(mU,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(gU,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(hU,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b8,"id","transformers.AutoModelForInstanceSegmentation"),c(b8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b8,"href","#transformers.AutoModelForInstanceSegmentation"),c(ac,"class","relative group"),c(pU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E8,"id","transformers.TFAutoModel"),c(E8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E8,"href","#transformers.TFAutoModel"),c(lc,"class","relative group"),c(vU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MU,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertModel"),c(EU,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartModel"),c(CU,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertModel"),c(wU,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(AU,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(LU,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertModel"),c(yU,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.TFCLIPModel"),c(xU,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertModel"),c($U,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextModel"),c(kU,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLModel"),c(SU,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(RU,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaModel"),c(PU,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(BU,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTModel"),c(NU,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(IU,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(qU,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraModel"),c(jU,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(DU,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelModel"),c(GU,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(OU,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2Model"),c(VU,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJModel"),c(XU,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.TFHubertModel"),c(zU,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(QU,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDModel"),c(WU,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerModel"),c(HU,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertModel"),c(UU,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianModel"),c(JU,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartModel"),c(YU,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(KU,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetModel"),c(ZU,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5Model"),c(eJ,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(oJ,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTModel"),c(rJ,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusModel"),c(tJ,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetModel"),c(aJ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertModel"),c(nJ,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetModel"),c(sJ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaModel"),c(lJ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerModel"),c(iJ,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(dJ,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinModel"),c(cJ,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5Model"),c(fJ,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasModel"),c(mJ,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(gJ,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTModel"),c(hJ,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(pJ,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(_J,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMModel"),c(uJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(bJ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModelForPreTraining"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModelForPreTraining"),c(cc,"class","relative group"),c(vJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(EJ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(CJ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForPreTraining"),c(wJ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(LJ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(xJ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c($J,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(kJ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(SJ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(PJ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(BJ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(NJ,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(IJ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(DJ,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(GJ,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(OJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(XJ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WM,"id","transformers.TFAutoModelForCausalLM"),c(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WM,"href","#transformers.TFAutoModelForCausalLM"),c(gc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(UJ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(JJ,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(YJ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(KJ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(ZJ,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(eY,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(oY,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(rY,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(tY,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(aY,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(nY,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(sY,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d4,"id","transformers.TFAutoModelForImageClassification"),c(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d4,"href","#transformers.TFAutoModelForImageClassification"),c(_c,"class","relative group"),c(lY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(fY,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(mY,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(gY,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(hY,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(pY,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(_Y,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(uY,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b4,"id","transformers.TFAutoModelForMaskedLM"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.TFAutoModelForMaskedLM"),c(vc,"class","relative group"),c(bY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(MY,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(EY,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(CY,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(wY,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(AY,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(LY,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(yY,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(xY,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c($Y,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(kY,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(SY,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(RY,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(PY,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(BY,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(NY,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(IY,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(qY,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(jY,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(DY,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Mc,"class","relative group"),c(GY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(QY,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(HY,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianMTModel"),c(JY,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(KY,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(ZY,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.TFAutoModelForSequenceClassification"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.TFAutoModelForSequenceClassification"),c(wc,"class","relative group"),c(eK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tK,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(CK,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(wK,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(AK,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(LK,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(yK,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.TFAutoModelForMultipleChoice"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.TFAutoModelForMultipleChoice"),c(yc,"class","relative group"),c(xK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($K,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SK,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(BK,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(NK,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(IK,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(qK,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(jK,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(DK,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(GK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(OK,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(VK,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(XK,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(zK,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(QK,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(WK,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(HK,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(kc,"class","relative group"),c(UK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(ZK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Pc,"class","relative group"),c(eZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.TFAutoModelForTokenClassification"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(aZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lZ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(dZ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(cZ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(fZ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(mZ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(gZ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(hZ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(pZ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(_Z,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(uZ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(bZ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(vZ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(FZ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(TZ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(MZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(EZ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(CZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(wZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(AZ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.TFAutoModelForQuestionAnswering"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Dc,"class","relative group"),c(LZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Z,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(IZ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(qZ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(jZ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(DZ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(GZ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(OZ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(VZ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(XZ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(zZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(QZ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(WZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(HZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(UZ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JC,"id","transformers.TFAutoModelForVision2Seq"),c(JC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JC,"href","#transformers.TFAutoModelForVision2Seq"),c(Vc,"class","relative group"),c(JZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZZ,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Qc,"class","relative group"),c(eee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ree,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tee,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.FlaxAutoModel"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.FlaxAutoModel"),c(Uc,"class","relative group"),c(aee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(see,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lee,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertModel"),c(iee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartModel"),c(dee,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitModel"),c(cee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertModel"),c(fee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(mee,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(gee,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(hee,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.FlaxCLIPModel"),c(pee,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(_ee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraModel"),c(uee,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(bee,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(vee,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Fee,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Tee,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianModel"),c(Mee,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Eee,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Cee,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTModel"),c(wee,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Aee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Lee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(yee,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5Model"),c(xee,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c($ee,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTModel"),c(kee,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(See,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Ree,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.FlaxAutoModelForCausalLM"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Kc,"class","relative group"),c(Pee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(qee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(jee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Dee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Gee,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Oee,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Vee,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Xee,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(zee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Qee,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.FlaxAutoModelForPreTraining"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.FlaxAutoModelForPreTraining"),c(of,"class","relative group"),c(Wee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jee,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Yee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Kee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Zee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(eoe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(ooe,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(roe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(toe,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(aoe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(noe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(soe,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(loe,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(ioe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.FlaxAutoModelForMaskedLM"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(af,"class","relative group"),c(doe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(coe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(foe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(moe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(goe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hoe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(poe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(_oe,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(uoe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(boe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(voe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Foe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Toe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(lf,"class","relative group"),c(Moe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Coe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(woe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Aoe,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Loe,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(yoe,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(xoe,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c($oe,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(koe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Soe,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Roe,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Poe,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(B3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(ff,"class","relative group"),c(Boe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Noe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ioe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qoe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(joe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Doe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Goe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Ooe,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Voe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Xoe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(zoe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Qoe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Woe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(hf,"class","relative group"),c(Hoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Joe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yoe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Zoe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(ere,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(ore,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(rre,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(tre,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(are,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(nre,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(sre,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l0,"id","transformers.FlaxAutoModelForTokenClassification"),c(l0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(uf,"class","relative group"),c(lre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ire,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cre,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(fre,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(mre,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(gre,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(hre,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(pre,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(_re,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(ure,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(b0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Ff,"class","relative group"),c(bre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tre,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Mre,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Ere,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Cre,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(wre,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Are,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Lre,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(yre,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(x0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Ef,"class","relative group"),c(xre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($re,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sre,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R0,"id","transformers.FlaxAutoModelForImageClassification"),c(R0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R0,"href","#transformers.FlaxAutoModelForImageClassification"),c(Af,"class","relative group"),c(Rre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nre,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Ire,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q0,"id","transformers.FlaxAutoModelForVision2Seq"),c(q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(xf,"class","relative group"),c(qre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gre,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Co),e(Co,yi),b(f,Bf,u),b(f,lt,u),e(lt,xi),e(lt,$i),e($i,sL),e(lt,Nf),b(f,Oe,u),b(f,We,u),e(We,ki),e(We,Pn),e(Pn,lL),e(We,Bn),e(We,Nn),e(Nn,iL),e(We,Si),e(We,In),e(In,dL),e(We,Ri),b(f,If,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,OS),e(Ae,Pi),e(Pi,VS),e(Ae,XS),b(f,wo,u),b(f,Ra,u),e(Ra,zS),e(Ra,qf),e(qf,QS),e(Ra,IHe),b(f,MXe,u),b(f,Bi,u),e(Bi,jf),e(jf,Nae),M(cL,Nae,null),e(Bi,qHe),e(Bi,Iae),e(Iae,jHe),b(f,EXe,u),b(f,qn,u),e(qn,DHe),e(qn,qae),e(qae,GHe),e(qn,OHe),e(qn,jae),e(jae,VHe),e(qn,XHe),b(f,CXe,u),M(fL,f,u),b(f,wXe,u),b(f,WS,u),e(WS,zHe),b(f,AXe,u),M(Df,f,u),b(f,LXe,u),b(f,Ni,u),e(Ni,Gf),e(Gf,Dae),M(mL,Dae,null),e(Ni,QHe),e(Ni,Gae),e(Gae,WHe),b(f,yXe,u),b(f,Ao,u),M(gL,Ao,null),e(Ao,HHe),e(Ao,hL),e(hL,UHe),e(hL,HS),e(HS,JHe),e(hL,YHe),e(Ao,KHe),e(Ao,pL),e(pL,ZHe),e(pL,Oae),e(Oae,eUe),e(pL,oUe),e(Ao,rUe),e(Ao,Lr),M(_L,Lr,null),e(Lr,tUe),e(Lr,Vae),e(Vae,aUe),e(Lr,nUe),e(Lr,Ii),e(Ii,sUe),e(Ii,Xae),e(Xae,lUe),e(Ii,iUe),e(Ii,zae),e(zae,dUe),e(Ii,cUe),e(Lr,fUe),e(Lr,A),e(A,Of),e(Of,Qae),e(Qae,mUe),e(Of,gUe),e(Of,US),e(US,hUe),e(Of,pUe),e(A,_Ue),e(A,Vf),e(Vf,Wae),e(Wae,uUe),e(Vf,bUe),e(Vf,JS),e(JS,vUe),e(Vf,FUe),e(A,TUe),e(A,Xf),e(Xf,Hae),e(Hae,MUe),e(Xf,EUe),e(Xf,YS),e(YS,CUe),e(Xf,wUe),e(A,AUe),e(A,zf),e(zf,Uae),e(Uae,LUe),e(zf,yUe),e(zf,KS),e(KS,xUe),e(zf,$Ue),e(A,kUe),e(A,Qf),e(Qf,Jae),e(Jae,SUe),e(Qf,RUe),e(Qf,ZS),e(ZS,PUe),e(Qf,BUe),e(A,NUe),e(A,Wf),e(Wf,Yae),e(Yae,IUe),e(Wf,qUe),e(Wf,eR),e(eR,jUe),e(Wf,DUe),e(A,GUe),e(A,Hf),e(Hf,Kae),e(Kae,OUe),e(Hf,VUe),e(Hf,oR),e(oR,XUe),e(Hf,zUe),e(A,QUe),e(A,Uf),e(Uf,Zae),e(Zae,WUe),e(Uf,HUe),e(Uf,rR),e(rR,UUe),e(Uf,JUe),e(A,YUe),e(A,Jf),e(Jf,ene),e(ene,KUe),e(Jf,ZUe),e(Jf,tR),e(tR,eJe),e(Jf,oJe),e(A,rJe),e(A,Yf),e(Yf,one),e(one,tJe),e(Yf,aJe),e(Yf,aR),e(aR,nJe),e(Yf,sJe),e(A,lJe),e(A,Kf),e(Kf,rne),e(rne,iJe),e(Kf,dJe),e(Kf,nR),e(nR,cJe),e(Kf,fJe),e(A,mJe),e(A,Zf),e(Zf,tne),e(tne,gJe),e(Zf,hJe),e(Zf,sR),e(sR,pJe),e(Zf,_Je),e(A,uJe),e(A,em),e(em,ane),e(ane,bJe),e(em,vJe),e(em,lR),e(lR,FJe),e(em,TJe),e(A,MJe),e(A,om),e(om,nne),e(nne,EJe),e(om,CJe),e(om,iR),e(iR,wJe),e(om,AJe),e(A,LJe),e(A,rm),e(rm,sne),e(sne,yJe),e(rm,xJe),e(rm,dR),e(dR,$Je),e(rm,kJe),e(A,SJe),e(A,tm),e(tm,lne),e(lne,RJe),e(tm,PJe),e(tm,cR),e(cR,BJe),e(tm,NJe),e(A,IJe),e(A,am),e(am,ine),e(ine,qJe),e(am,jJe),e(am,fR),e(fR,DJe),e(am,GJe),e(A,OJe),e(A,nm),e(nm,dne),e(dne,VJe),e(nm,XJe),e(nm,mR),e(mR,zJe),e(nm,QJe),e(A,WJe),e(A,sm),e(sm,cne),e(cne,HJe),e(sm,UJe),e(sm,gR),e(gR,JJe),e(sm,YJe),e(A,KJe),e(A,lm),e(lm,fne),e(fne,ZJe),e(lm,eYe),e(lm,hR),e(hR,oYe),e(lm,rYe),e(A,tYe),e(A,im),e(im,mne),e(mne,aYe),e(im,nYe),e(im,pR),e(pR,sYe),e(im,lYe),e(A,iYe),e(A,dm),e(dm,gne),e(gne,dYe),e(dm,cYe),e(dm,_R),e(_R,fYe),e(dm,mYe),e(A,gYe),e(A,cm),e(cm,hne),e(hne,hYe),e(cm,pYe),e(cm,uR),e(uR,_Ye),e(cm,uYe),e(A,bYe),e(A,fm),e(fm,pne),e(pne,vYe),e(fm,FYe),e(fm,bR),e(bR,TYe),e(fm,MYe),e(A,EYe),e(A,mm),e(mm,_ne),e(_ne,CYe),e(mm,wYe),e(mm,vR),e(vR,AYe),e(mm,LYe),e(A,yYe),e(A,gm),e(gm,une),e(une,xYe),e(gm,$Ye),e(gm,FR),e(FR,kYe),e(gm,SYe),e(A,RYe),e(A,hm),e(hm,bne),e(bne,PYe),e(hm,BYe),e(hm,TR),e(TR,NYe),e(hm,IYe),e(A,qYe),e(A,pm),e(pm,vne),e(vne,jYe),e(pm,DYe),e(pm,MR),e(MR,GYe),e(pm,OYe),e(A,VYe),e(A,_m),e(_m,Fne),e(Fne,XYe),e(_m,zYe),e(_m,ER),e(ER,QYe),e(_m,WYe),e(A,HYe),e(A,um),e(um,Tne),e(Tne,UYe),e(um,JYe),e(um,CR),e(CR,YYe),e(um,KYe),e(A,ZYe),e(A,bm),e(bm,Mne),e(Mne,eKe),e(bm,oKe),e(bm,wR),e(wR,rKe),e(bm,tKe),e(A,aKe),e(A,vm),e(vm,Ene),e(Ene,nKe),e(vm,sKe),e(vm,AR),e(AR,lKe),e(vm,iKe),e(A,dKe),e(A,Fm),e(Fm,Cne),e(Cne,cKe),e(Fm,fKe),e(Fm,LR),e(LR,mKe),e(Fm,gKe),e(A,hKe),e(A,Tm),e(Tm,wne),e(wne,pKe),e(Tm,_Ke),e(Tm,yR),e(yR,uKe),e(Tm,bKe),e(A,vKe),e(A,Mm),e(Mm,Ane),e(Ane,FKe),e(Mm,TKe),e(Mm,xR),e(xR,MKe),e(Mm,EKe),e(A,CKe),e(A,Em),e(Em,Lne),e(Lne,wKe),e(Em,AKe),e(Em,$R),e($R,LKe),e(Em,yKe),e(A,xKe),e(A,Cm),e(Cm,yne),e(yne,$Ke),e(Cm,kKe),e(Cm,kR),e(kR,SKe),e(Cm,RKe),e(A,PKe),e(A,wm),e(wm,xne),e(xne,BKe),e(wm,NKe),e(wm,SR),e(SR,IKe),e(wm,qKe),e(A,jKe),e(A,Am),e(Am,$ne),e($ne,DKe),e(Am,GKe),e(Am,RR),e(RR,OKe),e(Am,VKe),e(A,XKe),e(A,Lm),e(Lm,kne),e(kne,zKe),e(Lm,QKe),e(Lm,PR),e(PR,WKe),e(Lm,HKe),e(A,UKe),e(A,ym),e(ym,Sne),e(Sne,JKe),e(ym,YKe),e(ym,BR),e(BR,KKe),e(ym,ZKe),e(A,eZe),e(A,xm),e(xm,Rne),e(Rne,oZe),e(xm,rZe),e(xm,NR),e(NR,tZe),e(xm,aZe),e(A,nZe),e(A,$m),e($m,Pne),e(Pne,sZe),e($m,lZe),e($m,IR),e(IR,iZe),e($m,dZe),e(A,cZe),e(A,km),e(km,Bne),e(Bne,fZe),e(km,mZe),e(km,qR),e(qR,gZe),e(km,hZe),e(A,pZe),e(A,Sm),e(Sm,Nne),e(Nne,_Ze),e(Sm,uZe),e(Sm,jR),e(jR,bZe),e(Sm,vZe),e(A,FZe),e(A,Rm),e(Rm,Ine),e(Ine,TZe),e(Rm,MZe),e(Rm,DR),e(DR,EZe),e(Rm,CZe),e(A,wZe),e(A,Pm),e(Pm,qne),e(qne,AZe),e(Pm,LZe),e(Pm,GR),e(GR,yZe),e(Pm,xZe),e(A,$Ze),e(A,Bm),e(Bm,jne),e(jne,kZe),e(Bm,SZe),e(Bm,OR),e(OR,RZe),e(Bm,PZe),e(A,BZe),e(A,Nm),e(Nm,Dne),e(Dne,NZe),e(Nm,IZe),e(Nm,VR),e(VR,qZe),e(Nm,jZe),e(A,DZe),e(A,Im),e(Im,Gne),e(Gne,GZe),e(Im,OZe),e(Im,XR),e(XR,VZe),e(Im,XZe),e(A,zZe),e(A,qm),e(qm,One),e(One,QZe),e(qm,WZe),e(qm,zR),e(zR,HZe),e(qm,UZe),e(A,JZe),e(A,jm),e(jm,Vne),e(Vne,YZe),e(jm,KZe),e(jm,QR),e(QR,ZZe),e(jm,eeo),e(A,oeo),e(A,Dm),e(Dm,Xne),e(Xne,reo),e(Dm,teo),e(Dm,WR),e(WR,aeo),e(Dm,neo),e(A,seo),e(A,Gm),e(Gm,zne),e(zne,leo),e(Gm,ieo),e(Gm,HR),e(HR,deo),e(Gm,ceo),e(A,feo),e(A,Om),e(Om,Qne),e(Qne,meo),e(Om,geo),e(Om,UR),e(UR,heo),e(Om,peo),e(A,_eo),e(A,Vm),e(Vm,Wne),e(Wne,ueo),e(Vm,beo),e(Vm,JR),e(JR,veo),e(Vm,Feo),e(A,Teo),e(A,Xm),e(Xm,Hne),e(Hne,Meo),e(Xm,Eeo),e(Xm,YR),e(YR,Ceo),e(Xm,weo),e(A,Aeo),e(A,zm),e(zm,Une),e(Une,Leo),e(zm,yeo),e(zm,KR),e(KR,xeo),e(zm,$eo),e(A,keo),e(A,Qm),e(Qm,Jne),e(Jne,Seo),e(Qm,Reo),e(Qm,ZR),e(ZR,Peo),e(Qm,Beo),e(A,Neo),e(A,Wm),e(Wm,Yne),e(Yne,Ieo),e(Wm,qeo),e(Wm,eP),e(eP,jeo),e(Wm,Deo),e(A,Geo),e(A,Hm),e(Hm,Kne),e(Kne,Oeo),e(Hm,Veo),e(Hm,oP),e(oP,Xeo),e(Hm,zeo),e(A,Qeo),e(A,Um),e(Um,Zne),e(Zne,Weo),e(Um,Heo),e(Um,rP),e(rP,Ueo),e(Um,Jeo),e(A,Yeo),e(A,Jm),e(Jm,ese),e(ese,Keo),e(Jm,Zeo),e(Jm,tP),e(tP,eoo),e(Jm,ooo),e(A,roo),e(A,Ym),e(Ym,ose),e(ose,too),e(Ym,aoo),e(Ym,aP),e(aP,noo),e(Ym,soo),e(A,loo),e(A,Km),e(Km,rse),e(rse,ioo),e(Km,doo),e(Km,nP),e(nP,coo),e(Km,foo),e(A,moo),e(A,Zm),e(Zm,tse),e(tse,goo),e(Zm,hoo),e(Zm,sP),e(sP,poo),e(Zm,_oo),e(A,uoo),e(A,eg),e(eg,ase),e(ase,boo),e(eg,voo),e(eg,lP),e(lP,Foo),e(eg,Too),e(A,Moo),e(A,og),e(og,nse),e(nse,Eoo),e(og,Coo),e(og,iP),e(iP,woo),e(og,Aoo),e(A,Loo),e(A,rg),e(rg,sse),e(sse,yoo),e(rg,xoo),e(rg,dP),e(dP,$oo),e(rg,koo),e(A,Soo),e(A,tg),e(tg,lse),e(lse,Roo),e(tg,Poo),e(tg,cP),e(cP,Boo),e(tg,Noo),e(A,Ioo),e(A,ag),e(ag,ise),e(ise,qoo),e(ag,joo),e(ag,fP),e(fP,Doo),e(ag,Goo),e(A,Ooo),e(A,ng),e(ng,dse),e(dse,Voo),e(ng,Xoo),e(ng,mP),e(mP,zoo),e(ng,Qoo),e(A,Woo),e(A,sg),e(sg,cse),e(cse,Hoo),e(sg,Uoo),e(sg,gP),e(gP,Joo),e(sg,Yoo),e(A,Koo),e(A,lg),e(lg,fse),e(fse,Zoo),e(lg,ero),e(lg,hP),e(hP,oro),e(lg,rro),e(A,tro),e(A,ig),e(ig,mse),e(mse,aro),e(ig,nro),e(ig,pP),e(pP,sro),e(ig,lro),e(A,iro),e(A,dg),e(dg,gse),e(gse,dro),e(dg,cro),e(dg,_P),e(_P,fro),e(dg,mro),e(A,gro),e(A,cg),e(cg,hse),e(hse,hro),e(cg,pro),e(cg,uP),e(uP,_ro),e(cg,uro),e(A,bro),e(A,fg),e(fg,pse),e(pse,vro),e(fg,Fro),e(fg,bP),e(bP,Tro),e(fg,Mro),e(A,Ero),e(A,mg),e(mg,_se),e(_se,Cro),e(mg,wro),e(mg,vP),e(vP,Aro),e(mg,Lro),e(A,yro),e(A,gg),e(gg,use),e(use,xro),e(gg,$ro),e(gg,FP),e(FP,kro),e(gg,Sro),e(A,Rro),e(A,hg),e(hg,bse),e(bse,Pro),e(hg,Bro),e(hg,TP),e(TP,Nro),e(hg,Iro),e(A,qro),e(A,pg),e(pg,vse),e(vse,jro),e(pg,Dro),e(pg,MP),e(MP,Gro),e(pg,Oro),e(A,Vro),e(A,_g),e(_g,Fse),e(Fse,Xro),e(_g,zro),e(_g,EP),e(EP,Qro),e(_g,Wro),e(A,Hro),e(A,ug),e(ug,Tse),e(Tse,Uro),e(ug,Jro),e(ug,CP),e(CP,Yro),e(ug,Kro),e(A,Zro),e(A,bg),e(bg,Mse),e(Mse,eto),e(bg,oto),e(bg,wP),e(wP,rto),e(bg,tto),e(A,ato),e(A,vg),e(vg,Ese),e(Ese,nto),e(vg,sto),e(vg,AP),e(AP,lto),e(vg,ito),e(A,dto),e(A,Fg),e(Fg,Cse),e(Cse,cto),e(Fg,fto),e(Fg,LP),e(LP,mto),e(Fg,gto),e(A,hto),e(A,Tg),e(Tg,wse),e(wse,pto),e(Tg,_to),e(Tg,yP),e(yP,uto),e(Tg,bto),e(A,vto),e(A,Mg),e(Mg,Ase),e(Ase,Fto),e(Mg,Tto),e(Mg,xP),e(xP,Mto),e(Mg,Eto),e(A,Cto),e(A,Eg),e(Eg,Lse),e(Lse,wto),e(Eg,Ato),e(Eg,$P),e($P,Lto),e(Eg,yto),e(A,xto),e(A,Cg),e(Cg,yse),e(yse,$to),e(Cg,kto),e(Cg,kP),e(kP,Sto),e(Cg,Rto),e(A,Pto),e(A,wg),e(wg,xse),e(xse,Bto),e(wg,Nto),e(wg,SP),e(SP,Ito),e(wg,qto),e(A,jto),e(A,Ag),e(Ag,$se),e($se,Dto),e(Ag,Gto),e(Ag,RP),e(RP,Oto),e(Ag,Vto),e(A,Xto),e(A,Lg),e(Lg,kse),e(kse,zto),e(Lg,Qto),e(Lg,PP),e(PP,Wto),e(Lg,Hto),e(A,Uto),e(A,yg),e(yg,Sse),e(Sse,Jto),e(yg,Yto),e(yg,BP),e(BP,Kto),e(yg,Zto),e(A,eao),e(A,xg),e(xg,Rse),e(Rse,oao),e(xg,rao),e(xg,NP),e(NP,tao),e(xg,aao),e(A,nao),e(A,$g),e($g,Pse),e(Pse,sao),e($g,lao),e($g,IP),e(IP,iao),e($g,dao),e(A,cao),e(A,kg),e(kg,Bse),e(Bse,fao),e(kg,mao),e(kg,qP),e(qP,gao),e(kg,hao),e(A,pao),e(A,Sg),e(Sg,Nse),e(Nse,_ao),e(Sg,uao),e(Sg,jP),e(jP,bao),e(Sg,vao),e(A,Fao),e(A,Rg),e(Rg,Ise),e(Ise,Tao),e(Rg,Mao),e(Rg,DP),e(DP,Eao),e(Rg,Cao),e(A,wao),e(A,Pg),e(Pg,qse),e(qse,Aao),e(Pg,Lao),e(Pg,GP),e(GP,yao),e(Pg,xao),e(A,$ao),e(A,Bg),e(Bg,jse),e(jse,kao),e(Bg,Sao),e(Bg,OP),e(OP,Rao),e(Bg,Pao),e(A,Bao),e(A,Ng),e(Ng,Dse),e(Dse,Nao),e(Ng,Iao),e(Ng,VP),e(VP,qao),e(Ng,jao),e(A,Dao),e(A,Ig),e(Ig,Gse),e(Gse,Gao),e(Ig,Oao),e(Ig,XP),e(XP,Vao),e(Ig,Xao),e(A,zao),e(A,qg),e(qg,Ose),e(Ose,Qao),e(qg,Wao),e(qg,zP),e(zP,Hao),e(qg,Uao),e(A,Jao),e(A,jg),e(jg,Vse),e(Vse,Yao),e(jg,Kao),e(jg,QP),e(QP,Zao),e(jg,eno),e(A,ono),e(A,Dg),e(Dg,Xse),e(Xse,rno),e(Dg,tno),e(Dg,WP),e(WP,ano),e(Dg,nno),e(A,sno),e(A,Gg),e(Gg,zse),e(zse,lno),e(Gg,ino),e(Gg,HP),e(HP,dno),e(Gg,cno),e(A,fno),e(A,Og),e(Og,Qse),e(Qse,mno),e(Og,gno),e(Og,UP),e(UP,hno),e(Og,pno),e(A,_no),e(A,Vg),e(Vg,Wse),e(Wse,uno),e(Vg,bno),e(Vg,JP),e(JP,vno),e(Vg,Fno),e(A,Tno),e(A,Xg),e(Xg,Hse),e(Hse,Mno),e(Xg,Eno),e(Xg,YP),e(YP,Cno),e(Xg,wno),e(A,Ano),e(A,zg),e(zg,Use),e(Use,Lno),e(zg,yno),e(zg,KP),e(KP,xno),e(zg,$no),e(A,kno),e(A,Qg),e(Qg,Jse),e(Jse,Sno),e(Qg,Rno),e(Qg,ZP),e(ZP,Pno),e(Qg,Bno),e(A,Nno),e(A,Wg),e(Wg,Yse),e(Yse,Ino),e(Wg,qno),e(Wg,eB),e(eB,jno),e(Wg,Dno),e(A,Gno),e(A,Hg),e(Hg,Kse),e(Kse,Ono),e(Hg,Vno),e(Hg,oB),e(oB,Xno),e(Hg,zno),e(A,Qno),e(A,Ug),e(Ug,Zse),e(Zse,Wno),e(Ug,Hno),e(Ug,rB),e(rB,Uno),e(Ug,Jno),e(A,Yno),e(A,Jg),e(Jg,ele),e(ele,Kno),e(Jg,Zno),e(Jg,tB),e(tB,eso),e(Jg,oso),e(A,rso),e(A,Yg),e(Yg,ole),e(ole,tso),e(Yg,aso),e(Yg,aB),e(aB,nso),e(Yg,sso),e(A,lso),e(A,Kg),e(Kg,rle),e(rle,iso),e(Kg,dso),e(Kg,nB),e(nB,cso),e(Kg,fso),e(Lr,mso),M(Zg,Lr,null),e(Ao,gso),e(Ao,eh),M(uL,eh,null),e(eh,hso),e(eh,tle),e(tle,pso),b(f,xXe,u),b(f,qi,u),e(qi,oh),e(oh,ale),M(bL,ale,null),e(qi,_so),e(qi,nle),e(nle,uso),b(f,$Xe,u),b(f,Lo,u),M(vL,Lo,null),e(Lo,bso),e(Lo,FL),e(FL,vso),e(FL,sB),e(sB,Fso),e(FL,Tso),e(Lo,Mso),e(Lo,TL),e(TL,Eso),e(TL,sle),e(sle,Cso),e(TL,wso),e(Lo,Aso),e(Lo,yr),M(ML,yr,null),e(yr,Lso),e(yr,lle),e(lle,yso),e(yr,xso),e(yr,Pa),e(Pa,$so),e(Pa,ile),e(ile,kso),e(Pa,Sso),e(Pa,dle),e(dle,Rso),e(Pa,Pso),e(Pa,cle),e(cle,Bso),e(Pa,Nso),e(yr,Iso),e(yr,k),e(k,jn),e(jn,fle),e(fle,qso),e(jn,jso),e(jn,lB),e(lB,Dso),e(jn,Gso),e(jn,iB),e(iB,Oso),e(jn,Vso),e(k,Xso),e(k,Dn),e(Dn,mle),e(mle,zso),e(Dn,Qso),e(Dn,dB),e(dB,Wso),e(Dn,Hso),e(Dn,cB),e(cB,Uso),e(Dn,Jso),e(k,Yso),e(k,Gn),e(Gn,gle),e(gle,Kso),e(Gn,Zso),e(Gn,fB),e(fB,elo),e(Gn,olo),e(Gn,mB),e(mB,rlo),e(Gn,tlo),e(k,alo),e(k,rh),e(rh,hle),e(hle,nlo),e(rh,slo),e(rh,gB),e(gB,llo),e(rh,ilo),e(k,dlo),e(k,On),e(On,ple),e(ple,clo),e(On,flo),e(On,hB),e(hB,mlo),e(On,glo),e(On,pB),e(pB,hlo),e(On,plo),e(k,_lo),e(k,th),e(th,_le),e(_le,ulo),e(th,blo),e(th,_B),e(_B,vlo),e(th,Flo),e(k,Tlo),e(k,ah),e(ah,ule),e(ule,Mlo),e(ah,Elo),e(ah,uB),e(uB,Clo),e(ah,wlo),e(k,Alo),e(k,nh),e(nh,ble),e(ble,Llo),e(nh,ylo),e(nh,bB),e(bB,xlo),e(nh,$lo),e(k,klo),e(k,Vn),e(Vn,vle),e(vle,Slo),e(Vn,Rlo),e(Vn,vB),e(vB,Plo),e(Vn,Blo),e(Vn,FB),e(FB,Nlo),e(Vn,Ilo),e(k,qlo),e(k,Xn),e(Xn,Fle),e(Fle,jlo),e(Xn,Dlo),e(Xn,TB),e(TB,Glo),e(Xn,Olo),e(Xn,MB),e(MB,Vlo),e(Xn,Xlo),e(k,zlo),e(k,zn),e(zn,Tle),e(Tle,Qlo),e(zn,Wlo),e(zn,EB),e(EB,Hlo),e(zn,Ulo),e(zn,CB),e(CB,Jlo),e(zn,Ylo),e(k,Klo),e(k,sh),e(sh,Mle),e(Mle,Zlo),e(sh,eio),e(sh,wB),e(wB,oio),e(sh,rio),e(k,tio),e(k,lh),e(lh,Ele),e(Ele,aio),e(lh,nio),e(lh,AB),e(AB,sio),e(lh,lio),e(k,iio),e(k,ih),e(ih,Cle),e(Cle,dio),e(ih,cio),e(ih,LB),e(LB,fio),e(ih,mio),e(k,gio),e(k,Qn),e(Qn,wle),e(wle,hio),e(Qn,pio),e(Qn,yB),e(yB,_io),e(Qn,uio),e(Qn,xB),e(xB,bio),e(Qn,vio),e(k,Fio),e(k,dh),e(dh,Ale),e(Ale,Tio),e(dh,Mio),e(dh,$B),e($B,Eio),e(dh,Cio),e(k,wio),e(k,Wn),e(Wn,Lle),e(Lle,Aio),e(Wn,Lio),e(Wn,kB),e(kB,yio),e(Wn,xio),e(Wn,SB),e(SB,$io),e(Wn,kio),e(k,Sio),e(k,Hn),e(Hn,yle),e(yle,Rio),e(Hn,Pio),e(Hn,RB),e(RB,Bio),e(Hn,Nio),e(Hn,PB),e(PB,Iio),e(Hn,qio),e(k,jio),e(k,Un),e(Un,xle),e(xle,Dio),e(Un,Gio),e(Un,BB),e(BB,Oio),e(Un,Vio),e(Un,NB),e(NB,Xio),e(Un,zio),e(k,Qio),e(k,Jn),e(Jn,$le),e($le,Wio),e(Jn,Hio),e(Jn,IB),e(IB,Uio),e(Jn,Jio),e(Jn,qB),e(qB,Yio),e(Jn,Kio),e(k,Zio),e(k,ch),e(ch,kle),e(kle,edo),e(ch,odo),e(ch,jB),e(jB,rdo),e(ch,tdo),e(k,ado),e(k,Yn),e(Yn,Sle),e(Sle,ndo),e(Yn,sdo),e(Yn,DB),e(DB,ldo),e(Yn,ido),e(Yn,GB),e(GB,ddo),e(Yn,cdo),e(k,fdo),e(k,Kn),e(Kn,Rle),e(Rle,mdo),e(Kn,gdo),e(Kn,OB),e(OB,hdo),e(Kn,pdo),e(Kn,VB),e(VB,_do),e(Kn,udo),e(k,bdo),e(k,Zn),e(Zn,Ple),e(Ple,vdo),e(Zn,Fdo),e(Zn,XB),e(XB,Tdo),e(Zn,Mdo),e(Zn,zB),e(zB,Edo),e(Zn,Cdo),e(k,wdo),e(k,es),e(es,Ble),e(Ble,Ado),e(es,Ldo),e(es,QB),e(QB,ydo),e(es,xdo),e(es,WB),e(WB,$do),e(es,kdo),e(k,Sdo),e(k,os),e(os,Nle),e(Nle,Rdo),e(os,Pdo),e(os,HB),e(HB,Bdo),e(os,Ndo),e(os,UB),e(UB,Ido),e(os,qdo),e(k,jdo),e(k,rs),e(rs,Ile),e(Ile,Ddo),e(rs,Gdo),e(rs,JB),e(JB,Odo),e(rs,Vdo),e(rs,YB),e(YB,Xdo),e(rs,zdo),e(k,Qdo),e(k,fh),e(fh,qle),e(qle,Wdo),e(fh,Hdo),e(fh,KB),e(KB,Udo),e(fh,Jdo),e(k,Ydo),e(k,ts),e(ts,jle),e(jle,Kdo),e(ts,Zdo),e(ts,ZB),e(ZB,eco),e(ts,oco),e(ts,eN),e(eN,rco),e(ts,tco),e(k,aco),e(k,mh),e(mh,Dle),e(Dle,nco),e(mh,sco),e(mh,oN),e(oN,lco),e(mh,ico),e(k,dco),e(k,as),e(as,Gle),e(Gle,cco),e(as,fco),e(as,rN),e(rN,mco),e(as,gco),e(as,tN),e(tN,hco),e(as,pco),e(k,_co),e(k,ns),e(ns,Ole),e(Ole,uco),e(ns,bco),e(ns,aN),e(aN,vco),e(ns,Fco),e(ns,nN),e(nN,Tco),e(ns,Mco),e(k,Eco),e(k,ss),e(ss,Vle),e(Vle,Cco),e(ss,wco),e(ss,sN),e(sN,Aco),e(ss,Lco),e(ss,lN),e(lN,yco),e(ss,xco),e(k,$co),e(k,gh),e(gh,Xle),e(Xle,kco),e(gh,Sco),e(gh,iN),e(iN,Rco),e(gh,Pco),e(k,Bco),e(k,ls),e(ls,zle),e(zle,Nco),e(ls,Ico),e(ls,dN),e(dN,qco),e(ls,jco),e(ls,cN),e(cN,Dco),e(ls,Gco),e(k,Oco),e(k,is),e(is,Qle),e(Qle,Vco),e(is,Xco),e(is,fN),e(fN,zco),e(is,Qco),e(is,mN),e(mN,Wco),e(is,Hco),e(k,Uco),e(k,ds),e(ds,Wle),e(Wle,Jco),e(ds,Yco),e(ds,gN),e(gN,Kco),e(ds,Zco),e(ds,hN),e(hN,efo),e(ds,ofo),e(k,rfo),e(k,hh),e(hh,Hle),e(Hle,tfo),e(hh,afo),e(hh,pN),e(pN,nfo),e(hh,sfo),e(k,lfo),e(k,cs),e(cs,Ule),e(Ule,ifo),e(cs,dfo),e(cs,_N),e(_N,cfo),e(cs,ffo),e(cs,uN),e(uN,mfo),e(cs,gfo),e(k,hfo),e(k,ph),e(ph,Jle),e(Jle,pfo),e(ph,_fo),e(ph,Yle),e(Yle,ufo),e(ph,bfo),e(k,vfo),e(k,fs),e(fs,Kle),e(Kle,Ffo),e(fs,Tfo),e(fs,bN),e(bN,Mfo),e(fs,Efo),e(fs,vN),e(vN,Cfo),e(fs,wfo),e(k,Afo),e(k,ms),e(ms,Zle),e(Zle,Lfo),e(ms,yfo),e(ms,FN),e(FN,xfo),e(ms,$fo),e(ms,TN),e(TN,kfo),e(ms,Sfo),e(k,Rfo),e(k,gs),e(gs,eie),e(eie,Pfo),e(gs,Bfo),e(gs,MN),e(MN,Nfo),e(gs,Ifo),e(gs,EN),e(EN,qfo),e(gs,jfo),e(k,Dfo),e(k,hs),e(hs,oie),e(oie,Gfo),e(hs,Ofo),e(hs,CN),e(CN,Vfo),e(hs,Xfo),e(hs,wN),e(wN,zfo),e(hs,Qfo),e(k,Wfo),e(k,ps),e(ps,rie),e(rie,Hfo),e(ps,Ufo),e(ps,AN),e(AN,Jfo),e(ps,Yfo),e(ps,LN),e(LN,Kfo),e(ps,Zfo),e(k,emo),e(k,_s),e(_s,tie),e(tie,omo),e(_s,rmo),e(_s,yN),e(yN,tmo),e(_s,amo),e(_s,xN),e(xN,nmo),e(_s,smo),e(k,lmo),e(k,us),e(us,aie),e(aie,imo),e(us,dmo),e(us,$N),e($N,cmo),e(us,fmo),e(us,kN),e(kN,mmo),e(us,gmo),e(k,hmo),e(k,_h),e(_h,nie),e(nie,pmo),e(_h,_mo),e(_h,SN),e(SN,umo),e(_h,bmo),e(k,vmo),e(k,bs),e(bs,sie),e(sie,Fmo),e(bs,Tmo),e(bs,RN),e(RN,Mmo),e(bs,Emo),e(bs,PN),e(PN,Cmo),e(bs,wmo),e(k,Amo),e(k,uh),e(uh,lie),e(lie,Lmo),e(uh,ymo),e(uh,BN),e(BN,xmo),e(uh,$mo),e(k,kmo),e(k,bh),e(bh,iie),e(iie,Smo),e(bh,Rmo),e(bh,NN),e(NN,Pmo),e(bh,Bmo),e(k,Nmo),e(k,vs),e(vs,die),e(die,Imo),e(vs,qmo),e(vs,IN),e(IN,jmo),e(vs,Dmo),e(vs,qN),e(qN,Gmo),e(vs,Omo),e(k,Vmo),e(k,Fs),e(Fs,cie),e(cie,Xmo),e(Fs,zmo),e(Fs,jN),e(jN,Qmo),e(Fs,Wmo),e(Fs,DN),e(DN,Hmo),e(Fs,Umo),e(k,Jmo),e(k,Ts),e(Ts,fie),e(fie,Ymo),e(Ts,Kmo),e(Ts,GN),e(GN,Zmo),e(Ts,ego),e(Ts,ON),e(ON,ogo),e(Ts,rgo),e(k,tgo),e(k,vh),e(vh,mie),e(mie,ago),e(vh,ngo),e(vh,VN),e(VN,sgo),e(vh,lgo),e(k,igo),e(k,Ms),e(Ms,gie),e(gie,dgo),e(Ms,cgo),e(Ms,XN),e(XN,fgo),e(Ms,mgo),e(Ms,zN),e(zN,ggo),e(Ms,hgo),e(k,pgo),e(k,Es),e(Es,hie),e(hie,_go),e(Es,ugo),e(Es,QN),e(QN,bgo),e(Es,vgo),e(Es,WN),e(WN,Fgo),e(Es,Tgo),e(k,Mgo),e(k,Cs),e(Cs,pie),e(pie,Ego),e(Cs,Cgo),e(Cs,HN),e(HN,wgo),e(Cs,Ago),e(Cs,UN),e(UN,Lgo),e(Cs,ygo),e(k,xgo),e(k,ws),e(ws,_ie),e(_ie,$go),e(ws,kgo),e(ws,JN),e(JN,Sgo),e(ws,Rgo),e(ws,YN),e(YN,Pgo),e(ws,Bgo),e(k,Ngo),e(k,As),e(As,uie),e(uie,Igo),e(As,qgo),e(As,KN),e(KN,jgo),e(As,Dgo),e(As,ZN),e(ZN,Ggo),e(As,Ogo),e(k,Vgo),e(k,Ls),e(Ls,bie),e(bie,Xgo),e(Ls,zgo),e(Ls,eI),e(eI,Qgo),e(Ls,Wgo),e(Ls,oI),e(oI,Hgo),e(Ls,Ugo),e(k,Jgo),e(k,ys),e(ys,vie),e(vie,Ygo),e(ys,Kgo),e(ys,rI),e(rI,Zgo),e(ys,eho),e(ys,tI),e(tI,oho),e(ys,rho),e(k,tho),e(k,xs),e(xs,Fie),e(Fie,aho),e(xs,nho),e(xs,aI),e(aI,sho),e(xs,lho),e(xs,nI),e(nI,iho),e(xs,dho),e(k,cho),e(k,Fh),e(Fh,Tie),e(Tie,fho),e(Fh,mho),e(Fh,sI),e(sI,gho),e(Fh,hho),e(k,pho),e(k,$s),e($s,Mie),e(Mie,_ho),e($s,uho),e($s,lI),e(lI,bho),e($s,vho),e($s,iI),e(iI,Fho),e($s,Tho),e(k,Mho),e(k,Th),e(Th,Eie),e(Eie,Eho),e(Th,Cho),e(Th,dI),e(dI,who),e(Th,Aho),e(k,Lho),e(k,Mh),e(Mh,Cie),e(Cie,yho),e(Mh,xho),e(Mh,cI),e(cI,$ho),e(Mh,kho),e(k,Sho),e(k,Eh),e(Eh,wie),e(wie,Rho),e(Eh,Pho),e(Eh,fI),e(fI,Bho),e(Eh,Nho),e(k,Iho),e(k,Ch),e(Ch,Aie),e(Aie,qho),e(Ch,jho),e(Ch,mI),e(mI,Dho),e(Ch,Gho),e(k,Oho),e(k,ks),e(ks,Lie),e(Lie,Vho),e(ks,Xho),e(ks,gI),e(gI,zho),e(ks,Qho),e(ks,hI),e(hI,Who),e(ks,Hho),e(k,Uho),e(k,wh),e(wh,yie),e(yie,Jho),e(wh,Yho),e(wh,pI),e(pI,Kho),e(wh,Zho),e(k,epo),e(k,Ss),e(Ss,xie),e(xie,opo),e(Ss,rpo),e(Ss,_I),e(_I,tpo),e(Ss,apo),e(Ss,uI),e(uI,npo),e(Ss,spo),e(k,lpo),e(k,Rs),e(Rs,$ie),e($ie,ipo),e(Rs,dpo),e(Rs,bI),e(bI,cpo),e(Rs,fpo),e(Rs,vI),e(vI,mpo),e(Rs,gpo),e(k,hpo),e(k,Ps),e(Ps,kie),e(kie,ppo),e(Ps,_po),e(Ps,FI),e(FI,upo),e(Ps,bpo),e(Ps,TI),e(TI,vpo),e(Ps,Fpo),e(k,Tpo),e(k,Bs),e(Bs,Sie),e(Sie,Mpo),e(Bs,Epo),e(Bs,MI),e(MI,Cpo),e(Bs,wpo),e(Bs,EI),e(EI,Apo),e(Bs,Lpo),e(k,ypo),e(k,Ns),e(Ns,Rie),e(Rie,xpo),e(Ns,$po),e(Ns,CI),e(CI,kpo),e(Ns,Spo),e(Ns,wI),e(wI,Rpo),e(Ns,Ppo),e(k,Bpo),e(k,Is),e(Is,Pie),e(Pie,Npo),e(Is,Ipo),e(Is,AI),e(AI,qpo),e(Is,jpo),e(Is,LI),e(LI,Dpo),e(Is,Gpo),e(k,Opo),e(k,Ah),e(Ah,Bie),e(Bie,Vpo),e(Ah,Xpo),e(Ah,yI),e(yI,zpo),e(Ah,Qpo),e(k,Wpo),e(k,Lh),e(Lh,Nie),e(Nie,Hpo),e(Lh,Upo),e(Lh,xI),e(xI,Jpo),e(Lh,Ypo),e(k,Kpo),e(k,qs),e(qs,Iie),e(Iie,Zpo),e(qs,e_o),e(qs,$I),e($I,o_o),e(qs,r_o),e(qs,kI),e(kI,t_o),e(qs,a_o),e(k,n_o),e(k,js),e(js,qie),e(qie,s_o),e(js,l_o),e(js,SI),e(SI,i_o),e(js,d_o),e(js,RI),e(RI,c_o),e(js,f_o),e(k,m_o),e(k,Ds),e(Ds,jie),e(jie,g_o),e(Ds,h_o),e(Ds,PI),e(PI,p_o),e(Ds,__o),e(Ds,BI),e(BI,u_o),e(Ds,b_o),e(k,v_o),e(k,yh),e(yh,Die),e(Die,F_o),e(yh,T_o),e(yh,NI),e(NI,M_o),e(yh,E_o),e(k,C_o),e(k,xh),e(xh,Gie),e(Gie,w_o),e(xh,A_o),e(xh,II),e(II,L_o),e(xh,y_o),e(k,x_o),e(k,$h),e($h,Oie),e(Oie,$_o),e($h,k_o),e($h,qI),e(qI,S_o),e($h,R_o),e(k,P_o),e(k,Gs),e(Gs,Vie),e(Vie,B_o),e(Gs,N_o),e(Gs,jI),e(jI,I_o),e(Gs,q_o),e(Gs,DI),e(DI,j_o),e(Gs,D_o),e(k,G_o),e(k,Os),e(Os,Xie),e(Xie,O_o),e(Os,V_o),e(Os,GI),e(GI,X_o),e(Os,z_o),e(Os,OI),e(OI,Q_o),e(Os,W_o),e(k,H_o),e(k,kh),e(kh,zie),e(zie,U_o),e(kh,J_o),e(kh,VI),e(VI,Y_o),e(kh,K_o),e(k,Z_o),e(k,Sh),e(Sh,Qie),e(Qie,euo),e(Sh,ouo),e(Sh,XI),e(XI,ruo),e(Sh,tuo),e(k,auo),e(k,Rh),e(Rh,Wie),e(Wie,nuo),e(Rh,suo),e(Rh,zI),e(zI,luo),e(Rh,iuo),e(k,duo),e(k,Vs),e(Vs,Hie),e(Hie,cuo),e(Vs,fuo),e(Vs,QI),e(QI,muo),e(Vs,guo),e(Vs,WI),e(WI,huo),e(Vs,puo),e(k,_uo),e(k,Ph),e(Ph,Uie),e(Uie,uuo),e(Ph,buo),e(Ph,HI),e(HI,vuo),e(Ph,Fuo),e(k,Tuo),e(k,Bh),e(Bh,Jie),e(Jie,Muo),e(Bh,Euo),e(Bh,UI),e(UI,Cuo),e(Bh,wuo),e(k,Auo),e(k,Xs),e(Xs,Yie),e(Yie,Luo),e(Xs,yuo),e(Xs,JI),e(JI,xuo),e(Xs,$uo),e(Xs,YI),e(YI,kuo),e(Xs,Suo),e(k,Ruo),e(k,zs),e(zs,Kie),e(Kie,Puo),e(zs,Buo),e(zs,KI),e(KI,Nuo),e(zs,Iuo),e(zs,ZI),e(ZI,quo),e(zs,juo),e(k,Duo),e(k,Qs),e(Qs,Zie),e(Zie,Guo),e(Qs,Ouo),e(Qs,eq),e(eq,Vuo),e(Qs,Xuo),e(Qs,oq),e(oq,zuo),e(Qs,Quo),e(k,Wuo),e(k,Ws),e(Ws,ede),e(ede,Huo),e(Ws,Uuo),e(Ws,rq),e(rq,Juo),e(Ws,Yuo),e(Ws,tq),e(tq,Kuo),e(Ws,Zuo),e(yr,e2o),M(Nh,yr,null),e(Lo,o2o),e(Lo,Ih),M(EL,Ih,null),e(Ih,r2o),e(Ih,ode),e(ode,t2o),b(f,kXe,u),b(f,ji,u),e(ji,qh),e(qh,rde),M(CL,rde,null),e(ji,a2o),e(ji,tde),e(tde,n2o),b(f,SXe,u),b(f,yo,u),M(wL,yo,null),e(yo,s2o),e(yo,AL),e(AL,l2o),e(AL,aq),e(aq,i2o),e(AL,d2o),e(yo,c2o),e(yo,LL),e(LL,f2o),e(LL,ade),e(ade,m2o),e(LL,g2o),e(yo,h2o),e(yo,Ue),M(yL,Ue,null),e(Ue,p2o),e(Ue,nde),e(nde,_2o),e(Ue,u2o),e(Ue,Ba),e(Ba,b2o),e(Ba,sde),e(sde,v2o),e(Ba,F2o),e(Ba,lde),e(lde,T2o),e(Ba,M2o),e(Ba,ide),e(ide,E2o),e(Ba,C2o),e(Ue,w2o),e(Ue,Y),e(Y,jh),e(jh,dde),e(dde,A2o),e(jh,L2o),e(jh,nq),e(nq,y2o),e(jh,x2o),e(Y,$2o),e(Y,Dh),e(Dh,cde),e(cde,k2o),e(Dh,S2o),e(Dh,sq),e(sq,R2o),e(Dh,P2o),e(Y,B2o),e(Y,Gh),e(Gh,fde),e(fde,N2o),e(Gh,I2o),e(Gh,lq),e(lq,q2o),e(Gh,j2o),e(Y,D2o),e(Y,Oh),e(Oh,mde),e(mde,G2o),e(Oh,O2o),e(Oh,iq),e(iq,V2o),e(Oh,X2o),e(Y,z2o),e(Y,Vh),e(Vh,gde),e(gde,Q2o),e(Vh,W2o),e(Vh,dq),e(dq,H2o),e(Vh,U2o),e(Y,J2o),e(Y,Xh),e(Xh,hde),e(hde,Y2o),e(Xh,K2o),e(Xh,cq),e(cq,Z2o),e(Xh,e1o),e(Y,o1o),e(Y,zh),e(zh,pde),e(pde,r1o),e(zh,t1o),e(zh,fq),e(fq,a1o),e(zh,n1o),e(Y,s1o),e(Y,Qh),e(Qh,_de),e(_de,l1o),e(Qh,i1o),e(Qh,mq),e(mq,d1o),e(Qh,c1o),e(Y,f1o),e(Y,Wh),e(Wh,ude),e(ude,m1o),e(Wh,g1o),e(Wh,gq),e(gq,h1o),e(Wh,p1o),e(Y,_1o),e(Y,Hh),e(Hh,bde),e(bde,u1o),e(Hh,b1o),e(Hh,hq),e(hq,v1o),e(Hh,F1o),e(Y,T1o),e(Y,Uh),e(Uh,vde),e(vde,M1o),e(Uh,E1o),e(Uh,pq),e(pq,C1o),e(Uh,w1o),e(Y,A1o),e(Y,Jh),e(Jh,Fde),e(Fde,L1o),e(Jh,y1o),e(Jh,_q),e(_q,x1o),e(Jh,$1o),e(Y,k1o),e(Y,Yh),e(Yh,Tde),e(Tde,S1o),e(Yh,R1o),e(Yh,uq),e(uq,P1o),e(Yh,B1o),e(Y,N1o),e(Y,Kh),e(Kh,Mde),e(Mde,I1o),e(Kh,q1o),e(Kh,bq),e(bq,j1o),e(Kh,D1o),e(Y,G1o),e(Y,Zh),e(Zh,Ede),e(Ede,O1o),e(Zh,V1o),e(Zh,vq),e(vq,X1o),e(Zh,z1o),e(Y,Q1o),e(Y,ep),e(ep,Cde),e(Cde,W1o),e(ep,H1o),e(ep,Fq),e(Fq,U1o),e(ep,J1o),e(Y,Y1o),e(Y,op),e(op,wde),e(wde,K1o),e(op,Z1o),e(op,Tq),e(Tq,ebo),e(op,obo),e(Y,rbo),e(Y,rp),e(rp,Ade),e(Ade,tbo),e(rp,abo),e(rp,Mq),e(Mq,nbo),e(rp,sbo),e(Y,lbo),e(Y,tp),e(tp,Lde),e(Lde,ibo),e(tp,dbo),e(tp,Eq),e(Eq,cbo),e(tp,fbo),e(Y,mbo),e(Y,ap),e(ap,yde),e(yde,gbo),e(ap,hbo),e(ap,Cq),e(Cq,pbo),e(ap,_bo),e(Y,ubo),e(Y,np),e(np,xde),e(xde,bbo),e(np,vbo),e(np,wq),e(wq,Fbo),e(np,Tbo),e(Y,Mbo),e(Y,sp),e(sp,$de),e($de,Ebo),e(sp,Cbo),e(sp,Aq),e(Aq,wbo),e(sp,Abo),e(Y,Lbo),e(Y,lp),e(lp,kde),e(kde,ybo),e(lp,xbo),e(lp,Lq),e(Lq,$bo),e(lp,kbo),e(Y,Sbo),e(Y,ip),e(ip,Sde),e(Sde,Rbo),e(ip,Pbo),e(ip,yq),e(yq,Bbo),e(ip,Nbo),e(Y,Ibo),e(Y,dp),e(dp,Rde),e(Rde,qbo),e(dp,jbo),e(dp,xq),e(xq,Dbo),e(dp,Gbo),e(Y,Obo),e(Y,cp),e(cp,Pde),e(Pde,Vbo),e(cp,Xbo),e(cp,$q),e($q,zbo),e(cp,Qbo),e(Y,Wbo),e(Y,fp),e(fp,Bde),e(Bde,Hbo),e(fp,Ubo),e(fp,kq),e(kq,Jbo),e(fp,Ybo),e(Y,Kbo),e(Y,mp),e(mp,Nde),e(Nde,Zbo),e(mp,evo),e(mp,Sq),e(Sq,ovo),e(mp,rvo),e(Y,tvo),e(Y,gp),e(gp,Ide),e(Ide,avo),e(gp,nvo),e(gp,Rq),e(Rq,svo),e(gp,lvo),e(Y,ivo),e(Y,hp),e(hp,qde),e(qde,dvo),e(hp,cvo),e(hp,Pq),e(Pq,fvo),e(hp,mvo),e(Y,gvo),e(Y,pp),e(pp,jde),e(jde,hvo),e(pp,pvo),e(pp,Bq),e(Bq,_vo),e(pp,uvo),e(Y,bvo),e(Y,_p),e(_p,Dde),e(Dde,vvo),e(_p,Fvo),e(_p,Nq),e(Nq,Tvo),e(_p,Mvo),e(Y,Evo),e(Y,up),e(up,Gde),e(Gde,Cvo),e(up,wvo),e(up,Iq),e(Iq,Avo),e(up,Lvo),e(Y,yvo),e(Y,bp),e(bp,Ode),e(Ode,xvo),e(bp,$vo),e(bp,qq),e(qq,kvo),e(bp,Svo),e(Ue,Rvo),M(vp,Ue,null),e(Ue,Pvo),M(Fp,Ue,null),e(yo,Bvo),e(yo,Tp),M(xL,Tp,null),e(Tp,Nvo),e(Tp,Vde),e(Vde,Ivo),b(f,RXe,u),b(f,Di,u),e(Di,Mp),e(Mp,Xde),M($L,Xde,null),e(Di,qvo),e(Di,zde),e(zde,jvo),b(f,PXe,u),b(f,xo,u),M(kL,xo,null),e(xo,Dvo),e(xo,SL),e(SL,Gvo),e(SL,jq),e(jq,Ovo),e(SL,Vvo),e(xo,Xvo),e(xo,RL),e(RL,zvo),e(RL,Qde),e(Qde,Qvo),e(RL,Wvo),e(xo,Hvo),e(xo,Je),M(PL,Je,null),e(Je,Uvo),e(Je,Wde),e(Wde,Jvo),e(Je,Yvo),e(Je,Gi),e(Gi,Kvo),e(Gi,Hde),e(Hde,Zvo),e(Gi,eFo),e(Gi,Ude),e(Ude,oFo),e(Gi,rFo),e(Je,tFo),e(Je,pe),e(pe,Ep),e(Ep,Jde),e(Jde,aFo),e(Ep,nFo),e(Ep,Dq),e(Dq,sFo),e(Ep,lFo),e(pe,iFo),e(pe,Cp),e(Cp,Yde),e(Yde,dFo),e(Cp,cFo),e(Cp,Kde),e(Kde,fFo),e(Cp,mFo),e(pe,gFo),e(pe,wp),e(wp,Zde),e(Zde,hFo),e(wp,pFo),e(wp,Gq),e(Gq,_Fo),e(wp,uFo),e(pe,bFo),e(pe,Ap),e(Ap,ece),e(ece,vFo),e(Ap,FFo),e(Ap,Oq),e(Oq,TFo),e(Ap,MFo),e(pe,EFo),e(pe,Lp),e(Lp,oce),e(oce,CFo),e(Lp,wFo),e(Lp,Vq),e(Vq,AFo),e(Lp,LFo),e(pe,yFo),e(pe,yp),e(yp,rce),e(rce,xFo),e(yp,$Fo),e(yp,Xq),e(Xq,kFo),e(yp,SFo),e(pe,RFo),e(pe,xp),e(xp,tce),e(tce,PFo),e(xp,BFo),e(xp,zq),e(zq,NFo),e(xp,IFo),e(pe,qFo),e(pe,$p),e($p,ace),e(ace,jFo),e($p,DFo),e($p,Qq),e(Qq,GFo),e($p,OFo),e(pe,VFo),e(pe,kp),e(kp,nce),e(nce,XFo),e(kp,zFo),e(kp,Wq),e(Wq,QFo),e(kp,WFo),e(pe,HFo),e(pe,Sp),e(Sp,sce),e(sce,UFo),e(Sp,JFo),e(Sp,Hq),e(Hq,YFo),e(Sp,KFo),e(pe,ZFo),e(pe,Rp),e(Rp,lce),e(lce,e6o),e(Rp,o6o),e(Rp,Uq),e(Uq,r6o),e(Rp,t6o),e(pe,a6o),e(pe,Pp),e(Pp,ice),e(ice,n6o),e(Pp,s6o),e(Pp,Jq),e(Jq,l6o),e(Pp,i6o),e(pe,d6o),e(pe,Bp),e(Bp,dce),e(dce,c6o),e(Bp,f6o),e(Bp,Yq),e(Yq,m6o),e(Bp,g6o),e(pe,h6o),e(pe,Np),e(Np,cce),e(cce,p6o),e(Np,_6o),e(Np,Kq),e(Kq,u6o),e(Np,b6o),e(pe,v6o),e(pe,Ip),e(Ip,fce),e(fce,F6o),e(Ip,T6o),e(Ip,Zq),e(Zq,M6o),e(Ip,E6o),e(pe,C6o),e(pe,qp),e(qp,mce),e(mce,w6o),e(qp,A6o),e(qp,ej),e(ej,L6o),e(qp,y6o),e(pe,x6o),e(pe,jp),e(jp,gce),e(gce,$6o),e(jp,k6o),e(jp,oj),e(oj,S6o),e(jp,R6o),e(pe,P6o),e(pe,Dp),e(Dp,hce),e(hce,B6o),e(Dp,N6o),e(Dp,rj),e(rj,I6o),e(Dp,q6o),e(Je,j6o),M(Gp,Je,null),e(Je,D6o),M(Op,Je,null),e(xo,G6o),e(xo,Vp),M(BL,Vp,null),e(Vp,O6o),e(Vp,pce),e(pce,V6o),b(f,BXe,u),b(f,Oi,u),e(Oi,Xp),e(Xp,_ce),M(NL,_ce,null),e(Oi,X6o),e(Oi,uce),e(uce,z6o),b(f,NXe,u),b(f,$o,u),M(IL,$o,null),e($o,Q6o),e($o,Vi),e(Vi,W6o),e(Vi,tj),e(tj,H6o),e(Vi,U6o),e(Vi,aj),e(aj,J6o),e(Vi,Y6o),e($o,K6o),e($o,qL),e(qL,Z6o),e(qL,bce),e(bce,eTo),e(qL,oTo),e($o,rTo),e($o,it),M(jL,it,null),e(it,tTo),e(it,vce),e(vce,aTo),e(it,nTo),e(it,Xi),e(Xi,sTo),e(Xi,Fce),e(Fce,lTo),e(Xi,iTo),e(Xi,nj),e(nj,dTo),e(Xi,cTo),e(it,fTo),M(zp,it,null),e($o,mTo),e($o,Ye),M(DL,Ye,null),e(Ye,gTo),e(Ye,Tce),e(Tce,hTo),e(Ye,pTo),e(Ye,Na),e(Na,_To),e(Na,Mce),e(Mce,uTo),e(Na,bTo),e(Na,Ece),e(Ece,vTo),e(Na,FTo),e(Na,Cce),e(Cce,TTo),e(Na,MTo),e(Ye,ETo),e(Ye,y),e(y,Qp),e(Qp,wce),e(wce,CTo),e(Qp,wTo),e(Qp,sj),e(sj,ATo),e(Qp,LTo),e(y,yTo),e(y,Wp),e(Wp,Ace),e(Ace,xTo),e(Wp,$To),e(Wp,lj),e(lj,kTo),e(Wp,STo),e(y,RTo),e(y,Hp),e(Hp,Lce),e(Lce,PTo),e(Hp,BTo),e(Hp,ij),e(ij,NTo),e(Hp,ITo),e(y,qTo),e(y,Up),e(Up,yce),e(yce,jTo),e(Up,DTo),e(Up,dj),e(dj,GTo),e(Up,OTo),e(y,VTo),e(y,Jp),e(Jp,xce),e(xce,XTo),e(Jp,zTo),e(Jp,cj),e(cj,QTo),e(Jp,WTo),e(y,HTo),e(y,Yp),e(Yp,$ce),e($ce,UTo),e(Yp,JTo),e(Yp,fj),e(fj,YTo),e(Yp,KTo),e(y,ZTo),e(y,Kp),e(Kp,kce),e(kce,e7o),e(Kp,o7o),e(Kp,mj),e(mj,r7o),e(Kp,t7o),e(y,a7o),e(y,Zp),e(Zp,Sce),e(Sce,n7o),e(Zp,s7o),e(Zp,gj),e(gj,l7o),e(Zp,i7o),e(y,d7o),e(y,e_),e(e_,Rce),e(Rce,c7o),e(e_,f7o),e(e_,hj),e(hj,m7o),e(e_,g7o),e(y,h7o),e(y,o_),e(o_,Pce),e(Pce,p7o),e(o_,_7o),e(o_,pj),e(pj,u7o),e(o_,b7o),e(y,v7o),e(y,r_),e(r_,Bce),e(Bce,F7o),e(r_,T7o),e(r_,_j),e(_j,M7o),e(r_,E7o),e(y,C7o),e(y,t_),e(t_,Nce),e(Nce,w7o),e(t_,A7o),e(t_,uj),e(uj,L7o),e(t_,y7o),e(y,x7o),e(y,a_),e(a_,Ice),e(Ice,$7o),e(a_,k7o),e(a_,bj),e(bj,S7o),e(a_,R7o),e(y,P7o),e(y,n_),e(n_,qce),e(qce,B7o),e(n_,N7o),e(n_,vj),e(vj,I7o),e(n_,q7o),e(y,j7o),e(y,s_),e(s_,jce),e(jce,D7o),e(s_,G7o),e(s_,Fj),e(Fj,O7o),e(s_,V7o),e(y,X7o),e(y,l_),e(l_,Dce),e(Dce,z7o),e(l_,Q7o),e(l_,Tj),e(Tj,W7o),e(l_,H7o),e(y,U7o),e(y,i_),e(i_,Gce),e(Gce,J7o),e(i_,Y7o),e(i_,Mj),e(Mj,K7o),e(i_,Z7o),e(y,e8o),e(y,d_),e(d_,Oce),e(Oce,o8o),e(d_,r8o),e(d_,Ej),e(Ej,t8o),e(d_,a8o),e(y,n8o),e(y,c_),e(c_,Vce),e(Vce,s8o),e(c_,l8o),e(c_,Cj),e(Cj,i8o),e(c_,d8o),e(y,c8o),e(y,f_),e(f_,Xce),e(Xce,f8o),e(f_,m8o),e(f_,wj),e(wj,g8o),e(f_,h8o),e(y,p8o),e(y,m_),e(m_,zce),e(zce,_8o),e(m_,u8o),e(m_,Aj),e(Aj,b8o),e(m_,v8o),e(y,F8o),e(y,g_),e(g_,Qce),e(Qce,T8o),e(g_,M8o),e(g_,Lj),e(Lj,E8o),e(g_,C8o),e(y,w8o),e(y,h_),e(h_,Wce),e(Wce,A8o),e(h_,L8o),e(h_,yj),e(yj,y8o),e(h_,x8o),e(y,$8o),e(y,p_),e(p_,Hce),e(Hce,k8o),e(p_,S8o),e(p_,xj),e(xj,R8o),e(p_,P8o),e(y,B8o),e(y,__),e(__,Uce),e(Uce,N8o),e(__,I8o),e(__,$j),e($j,q8o),e(__,j8o),e(y,D8o),e(y,u_),e(u_,Jce),e(Jce,G8o),e(u_,O8o),e(u_,kj),e(kj,V8o),e(u_,X8o),e(y,z8o),e(y,b_),e(b_,Yce),e(Yce,Q8o),e(b_,W8o),e(b_,Sj),e(Sj,H8o),e(b_,U8o),e(y,J8o),e(y,v_),e(v_,Kce),e(Kce,Y8o),e(v_,K8o),e(v_,Rj),e(Rj,Z8o),e(v_,eMo),e(y,oMo),e(y,F_),e(F_,Zce),e(Zce,rMo),e(F_,tMo),e(F_,Pj),e(Pj,aMo),e(F_,nMo),e(y,sMo),e(y,T_),e(T_,efe),e(efe,lMo),e(T_,iMo),e(T_,Bj),e(Bj,dMo),e(T_,cMo),e(y,fMo),e(y,M_),e(M_,ofe),e(ofe,mMo),e(M_,gMo),e(M_,Nj),e(Nj,hMo),e(M_,pMo),e(y,_Mo),e(y,E_),e(E_,rfe),e(rfe,uMo),e(E_,bMo),e(E_,Ij),e(Ij,vMo),e(E_,FMo),e(y,TMo),e(y,C_),e(C_,tfe),e(tfe,MMo),e(C_,EMo),e(C_,qj),e(qj,CMo),e(C_,wMo),e(y,AMo),e(y,w_),e(w_,afe),e(afe,LMo),e(w_,yMo),e(w_,jj),e(jj,xMo),e(w_,$Mo),e(y,kMo),e(y,Hs),e(Hs,nfe),e(nfe,SMo),e(Hs,RMo),e(Hs,Dj),e(Dj,PMo),e(Hs,BMo),e(Hs,Gj),e(Gj,NMo),e(Hs,IMo),e(y,qMo),e(y,A_),e(A_,sfe),e(sfe,jMo),e(A_,DMo),e(A_,Oj),e(Oj,GMo),e(A_,OMo),e(y,VMo),e(y,L_),e(L_,lfe),e(lfe,XMo),e(L_,zMo),e(L_,Vj),e(Vj,QMo),e(L_,WMo),e(y,HMo),e(y,y_),e(y_,ife),e(ife,UMo),e(y_,JMo),e(y_,Xj),e(Xj,YMo),e(y_,KMo),e(y,ZMo),e(y,x_),e(x_,dfe),e(dfe,e4o),e(x_,o4o),e(x_,zj),e(zj,r4o),e(x_,t4o),e(y,a4o),e(y,$_),e($_,cfe),e(cfe,n4o),e($_,s4o),e($_,Qj),e(Qj,l4o),e($_,i4o),e(y,d4o),e(y,k_),e(k_,ffe),e(ffe,c4o),e(k_,f4o),e(k_,Wj),e(Wj,m4o),e(k_,g4o),e(y,h4o),e(y,S_),e(S_,mfe),e(mfe,p4o),e(S_,_4o),e(S_,Hj),e(Hj,u4o),e(S_,b4o),e(y,v4o),e(y,R_),e(R_,gfe),e(gfe,F4o),e(R_,T4o),e(R_,Uj),e(Uj,M4o),e(R_,E4o),e(y,C4o),e(y,P_),e(P_,hfe),e(hfe,w4o),e(P_,A4o),e(P_,Jj),e(Jj,L4o),e(P_,y4o),e(y,x4o),e(y,B_),e(B_,pfe),e(pfe,$4o),e(B_,k4o),e(B_,_fe),e(_fe,S4o),e(B_,R4o),e(y,P4o),e(y,N_),e(N_,ufe),e(ufe,B4o),e(N_,N4o),e(N_,Yj),e(Yj,I4o),e(N_,q4o),e(y,j4o),e(y,I_),e(I_,bfe),e(bfe,D4o),e(I_,G4o),e(I_,Kj),e(Kj,O4o),e(I_,V4o),e(y,X4o),e(y,q_),e(q_,vfe),e(vfe,z4o),e(q_,Q4o),e(q_,Zj),e(Zj,W4o),e(q_,H4o),e(y,U4o),e(y,j_),e(j_,Ffe),e(Ffe,J4o),e(j_,Y4o),e(j_,eD),e(eD,K4o),e(j_,Z4o),e(y,eEo),e(y,D_),e(D_,Tfe),e(Tfe,oEo),e(D_,rEo),e(D_,oD),e(oD,tEo),e(D_,aEo),e(y,nEo),e(y,G_),e(G_,Mfe),e(Mfe,sEo),e(G_,lEo),e(G_,rD),e(rD,iEo),e(G_,dEo),e(y,cEo),e(y,O_),e(O_,Efe),e(Efe,fEo),e(O_,mEo),e(O_,tD),e(tD,gEo),e(O_,hEo),e(y,pEo),e(y,V_),e(V_,Cfe),e(Cfe,_Eo),e(V_,uEo),e(V_,aD),e(aD,bEo),e(V_,vEo),e(y,FEo),e(y,X_),e(X_,wfe),e(wfe,TEo),e(X_,MEo),e(X_,nD),e(nD,EEo),e(X_,CEo),e(y,wEo),e(y,z_),e(z_,Afe),e(Afe,AEo),e(z_,LEo),e(z_,sD),e(sD,yEo),e(z_,xEo),e(y,$Eo),e(y,Q_),e(Q_,Lfe),e(Lfe,kEo),e(Q_,SEo),e(Q_,lD),e(lD,REo),e(Q_,PEo),e(y,BEo),e(y,W_),e(W_,yfe),e(yfe,NEo),e(W_,IEo),e(W_,iD),e(iD,qEo),e(W_,jEo),e(y,DEo),e(y,H_),e(H_,xfe),e(xfe,GEo),e(H_,OEo),e(H_,dD),e(dD,VEo),e(H_,XEo),e(y,zEo),e(y,U_),e(U_,$fe),e($fe,QEo),e(U_,WEo),e(U_,cD),e(cD,HEo),e(U_,UEo),e(y,JEo),e(y,J_),e(J_,kfe),e(kfe,YEo),e(J_,KEo),e(J_,fD),e(fD,ZEo),e(J_,eCo),e(y,oCo),e(y,Y_),e(Y_,Sfe),e(Sfe,rCo),e(Y_,tCo),e(Y_,mD),e(mD,aCo),e(Y_,nCo),e(y,sCo),e(y,K_),e(K_,Rfe),e(Rfe,lCo),e(K_,iCo),e(K_,gD),e(gD,dCo),e(K_,cCo),e(y,fCo),e(y,Z_),e(Z_,Pfe),e(Pfe,mCo),e(Z_,gCo),e(Z_,hD),e(hD,hCo),e(Z_,pCo),e(y,_Co),e(y,eu),e(eu,Bfe),e(Bfe,uCo),e(eu,bCo),e(eu,pD),e(pD,vCo),e(eu,FCo),e(y,TCo),e(y,ou),e(ou,Nfe),e(Nfe,MCo),e(ou,ECo),e(ou,_D),e(_D,CCo),e(ou,wCo),e(y,ACo),e(y,ru),e(ru,Ife),e(Ife,LCo),e(ru,yCo),e(ru,uD),e(uD,xCo),e(ru,$Co),e(y,kCo),e(y,tu),e(tu,qfe),e(qfe,SCo),e(tu,RCo),e(tu,bD),e(bD,PCo),e(tu,BCo),e(y,NCo),e(y,au),e(au,jfe),e(jfe,ICo),e(au,qCo),e(au,vD),e(vD,jCo),e(au,DCo),e(y,GCo),e(y,nu),e(nu,Dfe),e(Dfe,OCo),e(nu,VCo),e(nu,FD),e(FD,XCo),e(nu,zCo),e(y,QCo),e(y,su),e(su,Gfe),e(Gfe,WCo),e(su,HCo),e(su,TD),e(TD,UCo),e(su,JCo),e(y,YCo),e(y,lu),e(lu,Ofe),e(Ofe,KCo),e(lu,ZCo),e(lu,MD),e(MD,e5o),e(lu,o5o),e(y,r5o),e(y,iu),e(iu,Vfe),e(Vfe,t5o),e(iu,a5o),e(iu,ED),e(ED,n5o),e(iu,s5o),e(y,l5o),e(y,du),e(du,Xfe),e(Xfe,i5o),e(du,d5o),e(du,CD),e(CD,c5o),e(du,f5o),e(y,m5o),e(y,cu),e(cu,zfe),e(zfe,g5o),e(cu,h5o),e(cu,wD),e(wD,p5o),e(cu,_5o),e(y,u5o),e(y,fu),e(fu,Qfe),e(Qfe,b5o),e(fu,v5o),e(fu,AD),e(AD,F5o),e(fu,T5o),e(y,M5o),e(y,mu),e(mu,Wfe),e(Wfe,E5o),e(mu,C5o),e(mu,LD),e(LD,w5o),e(mu,A5o),e(y,L5o),e(y,gu),e(gu,Hfe),e(Hfe,y5o),e(gu,x5o),e(gu,yD),e(yD,$5o),e(gu,k5o),e(y,S5o),e(y,hu),e(hu,Ufe),e(Ufe,R5o),e(hu,P5o),e(hu,xD),e(xD,B5o),e(hu,N5o),e(y,I5o),e(y,pu),e(pu,Jfe),e(Jfe,q5o),e(pu,j5o),e(pu,$D),e($D,D5o),e(pu,G5o),e(y,O5o),e(y,_u),e(_u,Yfe),e(Yfe,V5o),e(_u,X5o),e(_u,kD),e(kD,z5o),e(_u,Q5o),e(y,W5o),e(y,uu),e(uu,Kfe),e(Kfe,H5o),e(uu,U5o),e(uu,SD),e(SD,J5o),e(uu,Y5o),e(y,K5o),e(y,bu),e(bu,Zfe),e(Zfe,Z5o),e(bu,e3o),e(bu,RD),e(RD,o3o),e(bu,r3o),e(y,t3o),e(y,vu),e(vu,eme),e(eme,a3o),e(vu,n3o),e(vu,PD),e(PD,s3o),e(vu,l3o),e(y,i3o),e(y,Fu),e(Fu,ome),e(ome,d3o),e(Fu,c3o),e(Fu,BD),e(BD,f3o),e(Fu,m3o),e(y,g3o),e(y,Tu),e(Tu,rme),e(rme,h3o),e(Tu,p3o),e(Tu,ND),e(ND,_3o),e(Tu,u3o),e(y,b3o),e(y,Mu),e(Mu,tme),e(tme,v3o),e(Mu,F3o),e(Mu,ID),e(ID,T3o),e(Mu,M3o),e(y,E3o),e(y,Eu),e(Eu,ame),e(ame,C3o),e(Eu,w3o),e(Eu,qD),e(qD,A3o),e(Eu,L3o),e(y,y3o),e(y,Cu),e(Cu,nme),e(nme,x3o),e(Cu,$3o),e(Cu,jD),e(jD,k3o),e(Cu,S3o),e(y,R3o),e(y,wu),e(wu,sme),e(sme,P3o),e(wu,B3o),e(wu,DD),e(DD,N3o),e(wu,I3o),e(y,q3o),e(y,Au),e(Au,lme),e(lme,j3o),e(Au,D3o),e(Au,GD),e(GD,G3o),e(Au,O3o),e(y,V3o),e(y,Lu),e(Lu,ime),e(ime,X3o),e(Lu,z3o),e(Lu,OD),e(OD,Q3o),e(Lu,W3o),e(y,H3o),e(y,yu),e(yu,dme),e(dme,U3o),e(yu,J3o),e(yu,VD),e(VD,Y3o),e(yu,K3o),e(y,Z3o),e(y,xu),e(xu,cme),e(cme,e0o),e(xu,o0o),e(xu,XD),e(XD,r0o),e(xu,t0o),e(y,a0o),e(y,$u),e($u,fme),e(fme,n0o),e($u,s0o),e($u,zD),e(zD,l0o),e($u,i0o),e(y,d0o),e(y,ku),e(ku,mme),e(mme,c0o),e(ku,f0o),e(ku,QD),e(QD,m0o),e(ku,g0o),e(y,h0o),e(y,Su),e(Su,gme),e(gme,p0o),e(Su,_0o),e(Su,WD),e(WD,u0o),e(Su,b0o),e(y,v0o),e(y,Ru),e(Ru,hme),e(hme,F0o),e(Ru,T0o),e(Ru,HD),e(HD,M0o),e(Ru,E0o),e(y,C0o),e(y,Pu),e(Pu,pme),e(pme,w0o),e(Pu,A0o),e(Pu,UD),e(UD,L0o),e(Pu,y0o),e(y,x0o),e(y,Bu),e(Bu,_me),e(_me,$0o),e(Bu,k0o),e(Bu,JD),e(JD,S0o),e(Bu,R0o),e(y,P0o),e(y,Nu),e(Nu,ume),e(ume,B0o),e(Nu,N0o),e(Nu,YD),e(YD,I0o),e(Nu,q0o),e(y,j0o),e(y,Iu),e(Iu,bme),e(bme,D0o),e(Iu,G0o),e(Iu,KD),e(KD,O0o),e(Iu,V0o),e(y,X0o),e(y,qu),e(qu,vme),e(vme,z0o),e(qu,Q0o),e(qu,ZD),e(ZD,W0o),e(qu,H0o),e(y,U0o),e(y,ju),e(ju,Fme),e(Fme,J0o),e(ju,Y0o),e(ju,eG),e(eG,K0o),e(ju,Z0o),e(y,ewo),e(y,Du),e(Du,Tme),e(Tme,owo),e(Du,rwo),e(Du,oG),e(oG,two),e(Du,awo),e(y,nwo),e(y,Gu),e(Gu,Mme),e(Mme,swo),e(Gu,lwo),e(Gu,rG),e(rG,iwo),e(Gu,dwo),e(y,cwo),e(y,Ou),e(Ou,Eme),e(Eme,fwo),e(Ou,mwo),e(Ou,tG),e(tG,gwo),e(Ou,hwo),e(y,pwo),e(y,Vu),e(Vu,Cme),e(Cme,_wo),e(Vu,uwo),e(Vu,aG),e(aG,bwo),e(Vu,vwo),e(y,Fwo),e(y,Xu),e(Xu,wme),e(wme,Two),e(Xu,Mwo),e(Xu,nG),e(nG,Ewo),e(Xu,Cwo),e(y,wwo),e(y,zu),e(zu,Ame),e(Ame,Awo),e(zu,Lwo),e(zu,sG),e(sG,ywo),e(zu,xwo),e(y,$wo),e(y,Qu),e(Qu,Lme),e(Lme,kwo),e(Qu,Swo),e(Qu,lG),e(lG,Rwo),e(Qu,Pwo),e(y,Bwo),e(y,Wu),e(Wu,yme),e(yme,Nwo),e(Wu,Iwo),e(Wu,iG),e(iG,qwo),e(Wu,jwo),e(y,Dwo),e(y,Hu),e(Hu,xme),e(xme,Gwo),e(Hu,Owo),e(Hu,dG),e(dG,Vwo),e(Hu,Xwo),e(y,zwo),e(y,Uu),e(Uu,$me),e($me,Qwo),e(Uu,Wwo),e(Uu,cG),e(cG,Hwo),e(Uu,Uwo),e(Ye,Jwo),e(Ye,Ju),e(Ju,Ywo),e(Ju,kme),e(kme,Kwo),e(Ju,Zwo),e(Ju,Sme),e(Sme,eAo),e(Ye,oAo),M(Yu,Ye,null),b(f,IXe,u),b(f,zi,u),e(zi,Ku),e(Ku,Rme),M(GL,Rme,null),e(zi,rAo),e(zi,Pme),e(Pme,tAo),b(f,qXe,u),b(f,ko,u),M(OL,ko,null),e(ko,aAo),e(ko,Qi),e(Qi,nAo),e(Qi,fG),e(fG,sAo),e(Qi,lAo),e(Qi,mG),e(mG,iAo),e(Qi,dAo),e(ko,cAo),e(ko,VL),e(VL,fAo),e(VL,Bme),e(Bme,mAo),e(VL,gAo),e(ko,hAo),e(ko,dt),M(XL,dt,null),e(dt,pAo),e(dt,Nme),e(Nme,_Ao),e(dt,uAo),e(dt,Wi),e(Wi,bAo),e(Wi,Ime),e(Ime,vAo),e(Wi,FAo),e(Wi,gG),e(gG,TAo),e(Wi,MAo),e(dt,EAo),M(Zu,dt,null),e(ko,CAo),e(ko,Ke),M(zL,Ke,null),e(Ke,wAo),e(Ke,qme),e(qme,AAo),e(Ke,LAo),e(Ke,Ia),e(Ia,yAo),e(Ia,jme),e(jme,xAo),e(Ia,$Ao),e(Ia,Dme),e(Dme,kAo),e(Ia,SAo),e(Ia,Gme),e(Gme,RAo),e(Ia,PAo),e(Ke,BAo),e(Ke,G),e(G,e2),e(e2,Ome),e(Ome,NAo),e(e2,IAo),e(e2,hG),e(hG,qAo),e(e2,jAo),e(G,DAo),e(G,o2),e(o2,Vme),e(Vme,GAo),e(o2,OAo),e(o2,pG),e(pG,VAo),e(o2,XAo),e(G,zAo),e(G,r2),e(r2,Xme),e(Xme,QAo),e(r2,WAo),e(r2,_G),e(_G,HAo),e(r2,UAo),e(G,JAo),e(G,t2),e(t2,zme),e(zme,YAo),e(t2,KAo),e(t2,uG),e(uG,ZAo),e(t2,eLo),e(G,oLo),e(G,a2),e(a2,Qme),e(Qme,rLo),e(a2,tLo),e(a2,bG),e(bG,aLo),e(a2,nLo),e(G,sLo),e(G,n2),e(n2,Wme),e(Wme,lLo),e(n2,iLo),e(n2,vG),e(vG,dLo),e(n2,cLo),e(G,fLo),e(G,s2),e(s2,Hme),e(Hme,mLo),e(s2,gLo),e(s2,FG),e(FG,hLo),e(s2,pLo),e(G,_Lo),e(G,l2),e(l2,Ume),e(Ume,uLo),e(l2,bLo),e(l2,TG),e(TG,vLo),e(l2,FLo),e(G,TLo),e(G,i2),e(i2,Jme),e(Jme,MLo),e(i2,ELo),e(i2,MG),e(MG,CLo),e(i2,wLo),e(G,ALo),e(G,d2),e(d2,Yme),e(Yme,LLo),e(d2,yLo),e(d2,EG),e(EG,xLo),e(d2,$Lo),e(G,kLo),e(G,c2),e(c2,Kme),e(Kme,SLo),e(c2,RLo),e(c2,CG),e(CG,PLo),e(c2,BLo),e(G,NLo),e(G,f2),e(f2,Zme),e(Zme,ILo),e(f2,qLo),e(f2,wG),e(wG,jLo),e(f2,DLo),e(G,GLo),e(G,m2),e(m2,ege),e(ege,OLo),e(m2,VLo),e(m2,AG),e(AG,XLo),e(m2,zLo),e(G,QLo),e(G,g2),e(g2,oge),e(oge,WLo),e(g2,HLo),e(g2,LG),e(LG,ULo),e(g2,JLo),e(G,YLo),e(G,h2),e(h2,rge),e(rge,KLo),e(h2,ZLo),e(h2,yG),e(yG,eyo),e(h2,oyo),e(G,ryo),e(G,p2),e(p2,tge),e(tge,tyo),e(p2,ayo),e(p2,xG),e(xG,nyo),e(p2,syo),e(G,lyo),e(G,_2),e(_2,age),e(age,iyo),e(_2,dyo),e(_2,$G),e($G,cyo),e(_2,fyo),e(G,myo),e(G,u2),e(u2,nge),e(nge,gyo),e(u2,hyo),e(u2,kG),e(kG,pyo),e(u2,_yo),e(G,uyo),e(G,b2),e(b2,sge),e(sge,byo),e(b2,vyo),e(b2,SG),e(SG,Fyo),e(b2,Tyo),e(G,Myo),e(G,v2),e(v2,lge),e(lge,Eyo),e(v2,Cyo),e(v2,RG),e(RG,wyo),e(v2,Ayo),e(G,Lyo),e(G,F2),e(F2,ige),e(ige,yyo),e(F2,xyo),e(F2,PG),e(PG,$yo),e(F2,kyo),e(G,Syo),e(G,T2),e(T2,dge),e(dge,Ryo),e(T2,Pyo),e(T2,BG),e(BG,Byo),e(T2,Nyo),e(G,Iyo),e(G,M2),e(M2,cge),e(cge,qyo),e(M2,jyo),e(M2,NG),e(NG,Dyo),e(M2,Gyo),e(G,Oyo),e(G,E2),e(E2,fge),e(fge,Vyo),e(E2,Xyo),e(E2,IG),e(IG,zyo),e(E2,Qyo),e(G,Wyo),e(G,C2),e(C2,mge),e(mge,Hyo),e(C2,Uyo),e(C2,qG),e(qG,Jyo),e(C2,Yyo),e(G,Kyo),e(G,w2),e(w2,gge),e(gge,Zyo),e(w2,e9o),e(w2,jG),e(jG,o9o),e(w2,r9o),e(G,t9o),e(G,A2),e(A2,hge),e(hge,a9o),e(A2,n9o),e(A2,DG),e(DG,s9o),e(A2,l9o),e(G,i9o),e(G,L2),e(L2,pge),e(pge,d9o),e(L2,c9o),e(L2,GG),e(GG,f9o),e(L2,m9o),e(G,g9o),e(G,y2),e(y2,_ge),e(_ge,h9o),e(y2,p9o),e(y2,OG),e(OG,_9o),e(y2,u9o),e(G,b9o),e(G,x2),e(x2,uge),e(uge,v9o),e(x2,F9o),e(x2,VG),e(VG,T9o),e(x2,M9o),e(G,E9o),e(G,$2),e($2,bge),e(bge,C9o),e($2,w9o),e($2,XG),e(XG,A9o),e($2,L9o),e(G,y9o),e(G,k2),e(k2,vge),e(vge,x9o),e(k2,$9o),e(k2,zG),e(zG,k9o),e(k2,S9o),e(G,R9o),e(G,S2),e(S2,Fge),e(Fge,P9o),e(S2,B9o),e(S2,QG),e(QG,N9o),e(S2,I9o),e(G,q9o),e(G,R2),e(R2,Tge),e(Tge,j9o),e(R2,D9o),e(R2,WG),e(WG,G9o),e(R2,O9o),e(G,V9o),e(G,P2),e(P2,Mge),e(Mge,X9o),e(P2,z9o),e(P2,HG),e(HG,Q9o),e(P2,W9o),e(G,H9o),e(G,B2),e(B2,Ege),e(Ege,U9o),e(B2,J9o),e(B2,UG),e(UG,Y9o),e(B2,K9o),e(G,Z9o),e(G,N2),e(N2,Cge),e(Cge,exo),e(N2,oxo),e(N2,JG),e(JG,rxo),e(N2,txo),e(G,axo),e(G,I2),e(I2,wge),e(wge,nxo),e(I2,sxo),e(I2,YG),e(YG,lxo),e(I2,ixo),e(G,dxo),e(G,q2),e(q2,Age),e(Age,cxo),e(q2,fxo),e(q2,KG),e(KG,mxo),e(q2,gxo),e(G,hxo),e(G,j2),e(j2,Lge),e(Lge,pxo),e(j2,_xo),e(j2,ZG),e(ZG,uxo),e(j2,bxo),e(G,vxo),e(G,D2),e(D2,yge),e(yge,Fxo),e(D2,Txo),e(D2,eO),e(eO,Mxo),e(D2,Exo),e(G,Cxo),e(G,G2),e(G2,xge),e(xge,wxo),e(G2,Axo),e(G2,oO),e(oO,Lxo),e(G2,yxo),e(G,xxo),e(G,O2),e(O2,$ge),e($ge,$xo),e(O2,kxo),e(O2,rO),e(rO,Sxo),e(O2,Rxo),e(G,Pxo),e(G,V2),e(V2,kge),e(kge,Bxo),e(V2,Nxo),e(V2,tO),e(tO,Ixo),e(V2,qxo),e(G,jxo),e(G,X2),e(X2,Sge),e(Sge,Dxo),e(X2,Gxo),e(X2,aO),e(aO,Oxo),e(X2,Vxo),e(Ke,Xxo),e(Ke,z2),e(z2,zxo),e(z2,Rge),e(Rge,Qxo),e(z2,Wxo),e(z2,Pge),e(Pge,Hxo),e(Ke,Uxo),M(Q2,Ke,null),b(f,jXe,u),b(f,Hi,u),e(Hi,W2),e(W2,Bge),M(QL,Bge,null),e(Hi,Jxo),e(Hi,Nge),e(Nge,Yxo),b(f,DXe,u),b(f,So,u),M(WL,So,null),e(So,Kxo),e(So,Ui),e(Ui,Zxo),e(Ui,nO),e(nO,e$o),e(Ui,o$o),e(Ui,sO),e(sO,r$o),e(Ui,t$o),e(So,a$o),e(So,HL),e(HL,n$o),e(HL,Ige),e(Ige,s$o),e(HL,l$o),e(So,i$o),e(So,ct),M(UL,ct,null),e(ct,d$o),e(ct,qge),e(qge,c$o),e(ct,f$o),e(ct,Ji),e(Ji,m$o),e(Ji,jge),e(jge,g$o),e(Ji,h$o),e(Ji,lO),e(lO,p$o),e(Ji,_$o),e(ct,u$o),M(H2,ct,null),e(So,b$o),e(So,Ze),M(JL,Ze,null),e(Ze,v$o),e(Ze,Dge),e(Dge,F$o),e(Ze,T$o),e(Ze,qa),e(qa,M$o),e(qa,Gge),e(Gge,E$o),e(qa,C$o),e(qa,Oge),e(Oge,w$o),e(qa,A$o),e(qa,Vge),e(Vge,L$o),e(qa,y$o),e(Ze,x$o),e(Ze,z),e(z,U2),e(U2,Xge),e(Xge,$$o),e(U2,k$o),e(U2,iO),e(iO,S$o),e(U2,R$o),e(z,P$o),e(z,J2),e(J2,zge),e(zge,B$o),e(J2,N$o),e(J2,dO),e(dO,I$o),e(J2,q$o),e(z,j$o),e(z,Y2),e(Y2,Qge),e(Qge,D$o),e(Y2,G$o),e(Y2,cO),e(cO,O$o),e(Y2,V$o),e(z,X$o),e(z,K2),e(K2,Wge),e(Wge,z$o),e(K2,Q$o),e(K2,fO),e(fO,W$o),e(K2,H$o),e(z,U$o),e(z,Z2),e(Z2,Hge),e(Hge,J$o),e(Z2,Y$o),e(Z2,mO),e(mO,K$o),e(Z2,Z$o),e(z,eko),e(z,e1),e(e1,Uge),e(Uge,oko),e(e1,rko),e(e1,gO),e(gO,tko),e(e1,ako),e(z,nko),e(z,o1),e(o1,Jge),e(Jge,sko),e(o1,lko),e(o1,hO),e(hO,iko),e(o1,dko),e(z,cko),e(z,r1),e(r1,Yge),e(Yge,fko),e(r1,mko),e(r1,pO),e(pO,gko),e(r1,hko),e(z,pko),e(z,t1),e(t1,Kge),e(Kge,_ko),e(t1,uko),e(t1,_O),e(_O,bko),e(t1,vko),e(z,Fko),e(z,a1),e(a1,Zge),e(Zge,Tko),e(a1,Mko),e(a1,uO),e(uO,Eko),e(a1,Cko),e(z,wko),e(z,n1),e(n1,ehe),e(ehe,Ako),e(n1,Lko),e(n1,bO),e(bO,yko),e(n1,xko),e(z,$ko),e(z,s1),e(s1,ohe),e(ohe,kko),e(s1,Sko),e(s1,vO),e(vO,Rko),e(s1,Pko),e(z,Bko),e(z,l1),e(l1,rhe),e(rhe,Nko),e(l1,Iko),e(l1,FO),e(FO,qko),e(l1,jko),e(z,Dko),e(z,i1),e(i1,the),e(the,Gko),e(i1,Oko),e(i1,TO),e(TO,Vko),e(i1,Xko),e(z,zko),e(z,d1),e(d1,ahe),e(ahe,Qko),e(d1,Wko),e(d1,MO),e(MO,Hko),e(d1,Uko),e(z,Jko),e(z,c1),e(c1,nhe),e(nhe,Yko),e(c1,Kko),e(c1,EO),e(EO,Zko),e(c1,eSo),e(z,oSo),e(z,f1),e(f1,she),e(she,rSo),e(f1,tSo),e(f1,CO),e(CO,aSo),e(f1,nSo),e(z,sSo),e(z,m1),e(m1,lhe),e(lhe,lSo),e(m1,iSo),e(m1,wO),e(wO,dSo),e(m1,cSo),e(z,fSo),e(z,g1),e(g1,ihe),e(ihe,mSo),e(g1,gSo),e(g1,AO),e(AO,hSo),e(g1,pSo),e(z,_So),e(z,h1),e(h1,dhe),e(dhe,uSo),e(h1,bSo),e(h1,LO),e(LO,vSo),e(h1,FSo),e(z,TSo),e(z,p1),e(p1,che),e(che,MSo),e(p1,ESo),e(p1,yO),e(yO,CSo),e(p1,wSo),e(z,ASo),e(z,_1),e(_1,fhe),e(fhe,LSo),e(_1,ySo),e(_1,xO),e(xO,xSo),e(_1,$So),e(z,kSo),e(z,u1),e(u1,mhe),e(mhe,SSo),e(u1,RSo),e(u1,$O),e($O,PSo),e(u1,BSo),e(z,NSo),e(z,b1),e(b1,ghe),e(ghe,ISo),e(b1,qSo),e(b1,kO),e(kO,jSo),e(b1,DSo),e(z,GSo),e(z,v1),e(v1,hhe),e(hhe,OSo),e(v1,VSo),e(v1,SO),e(SO,XSo),e(v1,zSo),e(z,QSo),e(z,F1),e(F1,phe),e(phe,WSo),e(F1,HSo),e(F1,RO),e(RO,USo),e(F1,JSo),e(z,YSo),e(z,T1),e(T1,_he),e(_he,KSo),e(T1,ZSo),e(T1,PO),e(PO,eRo),e(T1,oRo),e(z,rRo),e(z,M1),e(M1,uhe),e(uhe,tRo),e(M1,aRo),e(M1,BO),e(BO,nRo),e(M1,sRo),e(z,lRo),e(z,E1),e(E1,bhe),e(bhe,iRo),e(E1,dRo),e(E1,NO),e(NO,cRo),e(E1,fRo),e(z,mRo),e(z,C1),e(C1,vhe),e(vhe,gRo),e(C1,hRo),e(C1,IO),e(IO,pRo),e(C1,_Ro),e(z,uRo),e(z,w1),e(w1,Fhe),e(Fhe,bRo),e(w1,vRo),e(w1,qO),e(qO,FRo),e(w1,TRo),e(z,MRo),e(z,A1),e(A1,The),e(The,ERo),e(A1,CRo),e(A1,jO),e(jO,wRo),e(A1,ARo),e(z,LRo),e(z,L1),e(L1,Mhe),e(Mhe,yRo),e(L1,xRo),e(L1,DO),e(DO,$Ro),e(L1,kRo),e(z,SRo),e(z,y1),e(y1,Ehe),e(Ehe,RRo),e(y1,PRo),e(y1,GO),e(GO,BRo),e(y1,NRo),e(z,IRo),e(z,x1),e(x1,Che),e(Che,qRo),e(x1,jRo),e(x1,OO),e(OO,DRo),e(x1,GRo),e(z,ORo),e(z,$1),e($1,whe),e(whe,VRo),e($1,XRo),e($1,VO),e(VO,zRo),e($1,QRo),e(z,WRo),e(z,k1),e(k1,Ahe),e(Ahe,HRo),e(k1,URo),e(k1,XO),e(XO,JRo),e(k1,YRo),e(z,KRo),e(z,S1),e(S1,Lhe),e(Lhe,ZRo),e(S1,ePo),e(S1,zO),e(zO,oPo),e(S1,rPo),e(z,tPo),e(z,R1),e(R1,yhe),e(yhe,aPo),e(R1,nPo),e(R1,QO),e(QO,sPo),e(R1,lPo),e(z,iPo),e(z,P1),e(P1,xhe),e(xhe,dPo),e(P1,cPo),e(P1,WO),e(WO,fPo),e(P1,mPo),e(Ze,gPo),e(Ze,B1),e(B1,hPo),e(B1,$he),e($he,pPo),e(B1,_Po),e(B1,khe),e(khe,uPo),e(Ze,bPo),M(N1,Ze,null),b(f,GXe,u),b(f,Yi,u),e(Yi,I1),e(I1,She),M(YL,She,null),e(Yi,vPo),e(Yi,Rhe),e(Rhe,FPo),b(f,OXe,u),b(f,Ro,u),M(KL,Ro,null),e(Ro,TPo),e(Ro,Ki),e(Ki,MPo),e(Ki,HO),e(HO,EPo),e(Ki,CPo),e(Ki,UO),e(UO,wPo),e(Ki,APo),e(Ro,LPo),e(Ro,ZL),e(ZL,yPo),e(ZL,Phe),e(Phe,xPo),e(ZL,$Po),e(Ro,kPo),e(Ro,ft),M(ey,ft,null),e(ft,SPo),e(ft,Bhe),e(Bhe,RPo),e(ft,PPo),e(ft,Zi),e(Zi,BPo),e(Zi,Nhe),e(Nhe,NPo),e(Zi,IPo),e(Zi,JO),e(JO,qPo),e(Zi,jPo),e(ft,DPo),M(q1,ft,null),e(Ro,GPo),e(Ro,eo),M(oy,eo,null),e(eo,OPo),e(eo,Ihe),e(Ihe,VPo),e(eo,XPo),e(eo,ja),e(ja,zPo),e(ja,qhe),e(qhe,QPo),e(ja,WPo),e(ja,jhe),e(jhe,HPo),e(ja,UPo),e(ja,Dhe),e(Dhe,JPo),e(ja,YPo),e(eo,KPo),e(eo,W),e(W,j1),e(j1,Ghe),e(Ghe,ZPo),e(j1,eBo),e(j1,YO),e(YO,oBo),e(j1,rBo),e(W,tBo),e(W,D1),e(D1,Ohe),e(Ohe,aBo),e(D1,nBo),e(D1,KO),e(KO,sBo),e(D1,lBo),e(W,iBo),e(W,G1),e(G1,Vhe),e(Vhe,dBo),e(G1,cBo),e(G1,ZO),e(ZO,fBo),e(G1,mBo),e(W,gBo),e(W,O1),e(O1,Xhe),e(Xhe,hBo),e(O1,pBo),e(O1,eV),e(eV,_Bo),e(O1,uBo),e(W,bBo),e(W,V1),e(V1,zhe),e(zhe,vBo),e(V1,FBo),e(V1,oV),e(oV,TBo),e(V1,MBo),e(W,EBo),e(W,X1),e(X1,Qhe),e(Qhe,CBo),e(X1,wBo),e(X1,rV),e(rV,ABo),e(X1,LBo),e(W,yBo),e(W,z1),e(z1,Whe),e(Whe,xBo),e(z1,$Bo),e(z1,tV),e(tV,kBo),e(z1,SBo),e(W,RBo),e(W,Q1),e(Q1,Hhe),e(Hhe,PBo),e(Q1,BBo),e(Q1,aV),e(aV,NBo),e(Q1,IBo),e(W,qBo),e(W,W1),e(W1,Uhe),e(Uhe,jBo),e(W1,DBo),e(W1,nV),e(nV,GBo),e(W1,OBo),e(W,VBo),e(W,H1),e(H1,Jhe),e(Jhe,XBo),e(H1,zBo),e(H1,sV),e(sV,QBo),e(H1,WBo),e(W,HBo),e(W,U1),e(U1,Yhe),e(Yhe,UBo),e(U1,JBo),e(U1,lV),e(lV,YBo),e(U1,KBo),e(W,ZBo),e(W,J1),e(J1,Khe),e(Khe,eNo),e(J1,oNo),e(J1,iV),e(iV,rNo),e(J1,tNo),e(W,aNo),e(W,Y1),e(Y1,Zhe),e(Zhe,nNo),e(Y1,sNo),e(Y1,dV),e(dV,lNo),e(Y1,iNo),e(W,dNo),e(W,K1),e(K1,epe),e(epe,cNo),e(K1,fNo),e(K1,cV),e(cV,mNo),e(K1,gNo),e(W,hNo),e(W,Z1),e(Z1,ope),e(ope,pNo),e(Z1,_No),e(Z1,fV),e(fV,uNo),e(Z1,bNo),e(W,vNo),e(W,eb),e(eb,rpe),e(rpe,FNo),e(eb,TNo),e(eb,mV),e(mV,MNo),e(eb,ENo),e(W,CNo),e(W,ob),e(ob,tpe),e(tpe,wNo),e(ob,ANo),e(ob,gV),e(gV,LNo),e(ob,yNo),e(W,xNo),e(W,rb),e(rb,ape),e(ape,$No),e(rb,kNo),e(rb,hV),e(hV,SNo),e(rb,RNo),e(W,PNo),e(W,tb),e(tb,npe),e(npe,BNo),e(tb,NNo),e(tb,pV),e(pV,INo),e(tb,qNo),e(W,jNo),e(W,ab),e(ab,spe),e(spe,DNo),e(ab,GNo),e(ab,_V),e(_V,ONo),e(ab,VNo),e(W,XNo),e(W,nb),e(nb,lpe),e(lpe,zNo),e(nb,QNo),e(nb,uV),e(uV,WNo),e(nb,HNo),e(W,UNo),e(W,sb),e(sb,ipe),e(ipe,JNo),e(sb,YNo),e(sb,bV),e(bV,KNo),e(sb,ZNo),e(W,eIo),e(W,lb),e(lb,dpe),e(dpe,oIo),e(lb,rIo),e(lb,vV),e(vV,tIo),e(lb,aIo),e(W,nIo),e(W,ib),e(ib,cpe),e(cpe,sIo),e(ib,lIo),e(ib,FV),e(FV,iIo),e(ib,dIo),e(W,cIo),e(W,db),e(db,fpe),e(fpe,fIo),e(db,mIo),e(db,TV),e(TV,gIo),e(db,hIo),e(W,pIo),e(W,cb),e(cb,mpe),e(mpe,_Io),e(cb,uIo),e(cb,MV),e(MV,bIo),e(cb,vIo),e(W,FIo),e(W,fb),e(fb,gpe),e(gpe,TIo),e(fb,MIo),e(fb,EV),e(EV,EIo),e(fb,CIo),e(W,wIo),e(W,mb),e(mb,hpe),e(hpe,AIo),e(mb,LIo),e(mb,CV),e(CV,yIo),e(mb,xIo),e(W,$Io),e(W,gb),e(gb,ppe),e(ppe,kIo),e(gb,SIo),e(gb,wV),e(wV,RIo),e(gb,PIo),e(W,BIo),e(W,hb),e(hb,_pe),e(_pe,NIo),e(hb,IIo),e(hb,AV),e(AV,qIo),e(hb,jIo),e(W,DIo),e(W,pb),e(pb,upe),e(upe,GIo),e(pb,OIo),e(pb,LV),e(LV,VIo),e(pb,XIo),e(W,zIo),e(W,_b),e(_b,bpe),e(bpe,QIo),e(_b,WIo),e(_b,yV),e(yV,HIo),e(_b,UIo),e(W,JIo),e(W,ub),e(ub,vpe),e(vpe,YIo),e(ub,KIo),e(ub,xV),e(xV,ZIo),e(ub,eqo),e(W,oqo),e(W,bb),e(bb,Fpe),e(Fpe,rqo),e(bb,tqo),e(bb,Tpe),e(Tpe,aqo),e(bb,nqo),e(W,sqo),e(W,vb),e(vb,Mpe),e(Mpe,lqo),e(vb,iqo),e(vb,$V),e($V,dqo),e(vb,cqo),e(W,fqo),e(W,Fb),e(Fb,Epe),e(Epe,mqo),e(Fb,gqo),e(Fb,kV),e(kV,hqo),e(Fb,pqo),e(W,_qo),e(W,Tb),e(Tb,Cpe),e(Cpe,uqo),e(Tb,bqo),e(Tb,SV),e(SV,vqo),e(Tb,Fqo),e(W,Tqo),e(W,Mb),e(Mb,wpe),e(wpe,Mqo),e(Mb,Eqo),e(Mb,RV),e(RV,Cqo),e(Mb,wqo),e(eo,Aqo),e(eo,Eb),e(Eb,Lqo),e(Eb,Ape),e(Ape,yqo),e(Eb,xqo),e(Eb,Lpe),e(Lpe,$qo),e(eo,kqo),M(Cb,eo,null),b(f,VXe,u),b(f,ed,u),e(ed,wb),e(wb,ype),M(ry,ype,null),e(ed,Sqo),e(ed,xpe),e(xpe,Rqo),b(f,XXe,u),b(f,Po,u),M(ty,Po,null),e(Po,Pqo),e(Po,od),e(od,Bqo),e(od,PV),e(PV,Nqo),e(od,Iqo),e(od,BV),e(BV,qqo),e(od,jqo),e(Po,Dqo),e(Po,ay),e(ay,Gqo),e(ay,$pe),e($pe,Oqo),e(ay,Vqo),e(Po,Xqo),e(Po,mt),M(ny,mt,null),e(mt,zqo),e(mt,kpe),e(kpe,Qqo),e(mt,Wqo),e(mt,rd),e(rd,Hqo),e(rd,Spe),e(Spe,Uqo),e(rd,Jqo),e(rd,NV),e(NV,Yqo),e(rd,Kqo),e(mt,Zqo),M(Ab,mt,null),e(Po,ejo),e(Po,oo),M(sy,oo,null),e(oo,ojo),e(oo,Rpe),e(Rpe,rjo),e(oo,tjo),e(oo,Da),e(Da,ajo),e(Da,Ppe),e(Ppe,njo),e(Da,sjo),e(Da,Bpe),e(Bpe,ljo),e(Da,ijo),e(Da,Npe),e(Npe,djo),e(Da,cjo),e(oo,fjo),e(oo,fe),e(fe,Lb),e(Lb,Ipe),e(Ipe,mjo),e(Lb,gjo),e(Lb,IV),e(IV,hjo),e(Lb,pjo),e(fe,_jo),e(fe,yb),e(yb,qpe),e(qpe,ujo),e(yb,bjo),e(yb,qV),e(qV,vjo),e(yb,Fjo),e(fe,Tjo),e(fe,xb),e(xb,jpe),e(jpe,Mjo),e(xb,Ejo),e(xb,jV),e(jV,Cjo),e(xb,wjo),e(fe,Ajo),e(fe,$b),e($b,Dpe),e(Dpe,Ljo),e($b,yjo),e($b,DV),e(DV,xjo),e($b,$jo),e(fe,kjo),e(fe,kb),e(kb,Gpe),e(Gpe,Sjo),e(kb,Rjo),e(kb,GV),e(GV,Pjo),e(kb,Bjo),e(fe,Njo),e(fe,Sb),e(Sb,Ope),e(Ope,Ijo),e(Sb,qjo),e(Sb,OV),e(OV,jjo),e(Sb,Djo),e(fe,Gjo),e(fe,Rb),e(Rb,Vpe),e(Vpe,Ojo),e(Rb,Vjo),e(Rb,VV),e(VV,Xjo),e(Rb,zjo),e(fe,Qjo),e(fe,Pb),e(Pb,Xpe),e(Xpe,Wjo),e(Pb,Hjo),e(Pb,XV),e(XV,Ujo),e(Pb,Jjo),e(fe,Yjo),e(fe,Bb),e(Bb,zpe),e(zpe,Kjo),e(Bb,Zjo),e(Bb,zV),e(zV,eDo),e(Bb,oDo),e(fe,rDo),e(fe,Nb),e(Nb,Qpe),e(Qpe,tDo),e(Nb,aDo),e(Nb,QV),e(QV,nDo),e(Nb,sDo),e(fe,lDo),e(fe,Ib),e(Ib,Wpe),e(Wpe,iDo),e(Ib,dDo),e(Ib,WV),e(WV,cDo),e(Ib,fDo),e(fe,mDo),e(fe,qb),e(qb,Hpe),e(Hpe,gDo),e(qb,hDo),e(qb,HV),e(HV,pDo),e(qb,_Do),e(fe,uDo),e(fe,jb),e(jb,Upe),e(Upe,bDo),e(jb,vDo),e(jb,UV),e(UV,FDo),e(jb,TDo),e(fe,MDo),e(fe,Db),e(Db,Jpe),e(Jpe,EDo),e(Db,CDo),e(Db,JV),e(JV,wDo),e(Db,ADo),e(fe,LDo),e(fe,Gb),e(Gb,Ype),e(Ype,yDo),e(Gb,xDo),e(Gb,YV),e(YV,$Do),e(Gb,kDo),e(fe,SDo),e(fe,Ob),e(Ob,Kpe),e(Kpe,RDo),e(Ob,PDo),e(Ob,KV),e(KV,BDo),e(Ob,NDo),e(fe,IDo),e(fe,Vb),e(Vb,Zpe),e(Zpe,qDo),e(Vb,jDo),e(Vb,ZV),e(ZV,DDo),e(Vb,GDo),e(fe,ODo),e(fe,Xb),e(Xb,e_e),e(e_e,VDo),e(Xb,XDo),e(Xb,eX),e(eX,zDo),e(Xb,QDo),e(fe,WDo),e(fe,zb),e(zb,o_e),e(o_e,HDo),e(zb,UDo),e(zb,oX),e(oX,JDo),e(zb,YDo),e(oo,KDo),e(oo,Qb),e(Qb,ZDo),e(Qb,r_e),e(r_e,eGo),e(Qb,oGo),e(Qb,t_e),e(t_e,rGo),e(oo,tGo),M(Wb,oo,null),b(f,zXe,u),b(f,td,u),e(td,Hb),e(Hb,a_e),M(ly,a_e,null),e(td,aGo),e(td,n_e),e(n_e,nGo),b(f,QXe,u),b(f,Bo,u),M(iy,Bo,null),e(Bo,sGo),e(Bo,ad),e(ad,lGo),e(ad,rX),e(rX,iGo),e(ad,dGo),e(ad,tX),e(tX,cGo),e(ad,fGo),e(Bo,mGo),e(Bo,dy),e(dy,gGo),e(dy,s_e),e(s_e,hGo),e(dy,pGo),e(Bo,_Go),e(Bo,gt),M(cy,gt,null),e(gt,uGo),e(gt,l_e),e(l_e,bGo),e(gt,vGo),e(gt,nd),e(nd,FGo),e(nd,i_e),e(i_e,TGo),e(nd,MGo),e(nd,aX),e(aX,EGo),e(nd,CGo),e(gt,wGo),M(Ub,gt,null),e(Bo,AGo),e(Bo,ro),M(fy,ro,null),e(ro,LGo),e(ro,d_e),e(d_e,yGo),e(ro,xGo),e(ro,Ga),e(Ga,$Go),e(Ga,c_e),e(c_e,kGo),e(Ga,SGo),e(Ga,f_e),e(f_e,RGo),e(Ga,PGo),e(Ga,m_e),e(m_e,BGo),e(Ga,NGo),e(ro,IGo),e(ro,I),e(I,Jb),e(Jb,g_e),e(g_e,qGo),e(Jb,jGo),e(Jb,nX),e(nX,DGo),e(Jb,GGo),e(I,OGo),e(I,Yb),e(Yb,h_e),e(h_e,VGo),e(Yb,XGo),e(Yb,sX),e(sX,zGo),e(Yb,QGo),e(I,WGo),e(I,Kb),e(Kb,p_e),e(p_e,HGo),e(Kb,UGo),e(Kb,lX),e(lX,JGo),e(Kb,YGo),e(I,KGo),e(I,Zb),e(Zb,__e),e(__e,ZGo),e(Zb,eOo),e(Zb,iX),e(iX,oOo),e(Zb,rOo),e(I,tOo),e(I,ev),e(ev,u_e),e(u_e,aOo),e(ev,nOo),e(ev,dX),e(dX,sOo),e(ev,lOo),e(I,iOo),e(I,ov),e(ov,b_e),e(b_e,dOo),e(ov,cOo),e(ov,cX),e(cX,fOo),e(ov,mOo),e(I,gOo),e(I,rv),e(rv,v_e),e(v_e,hOo),e(rv,pOo),e(rv,fX),e(fX,_Oo),e(rv,uOo),e(I,bOo),e(I,tv),e(tv,F_e),e(F_e,vOo),e(tv,FOo),e(tv,mX),e(mX,TOo),e(tv,MOo),e(I,EOo),e(I,av),e(av,T_e),e(T_e,COo),e(av,wOo),e(av,gX),e(gX,AOo),e(av,LOo),e(I,yOo),e(I,nv),e(nv,M_e),e(M_e,xOo),e(nv,$Oo),e(nv,hX),e(hX,kOo),e(nv,SOo),e(I,ROo),e(I,sv),e(sv,E_e),e(E_e,POo),e(sv,BOo),e(sv,pX),e(pX,NOo),e(sv,IOo),e(I,qOo),e(I,lv),e(lv,C_e),e(C_e,jOo),e(lv,DOo),e(lv,_X),e(_X,GOo),e(lv,OOo),e(I,VOo),e(I,iv),e(iv,w_e),e(w_e,XOo),e(iv,zOo),e(iv,uX),e(uX,QOo),e(iv,WOo),e(I,HOo),e(I,dv),e(dv,A_e),e(A_e,UOo),e(dv,JOo),e(dv,bX),e(bX,YOo),e(dv,KOo),e(I,ZOo),e(I,cv),e(cv,L_e),e(L_e,eVo),e(cv,oVo),e(cv,vX),e(vX,rVo),e(cv,tVo),e(I,aVo),e(I,fv),e(fv,y_e),e(y_e,nVo),e(fv,sVo),e(fv,FX),e(FX,lVo),e(fv,iVo),e(I,dVo),e(I,mv),e(mv,x_e),e(x_e,cVo),e(mv,fVo),e(mv,TX),e(TX,mVo),e(mv,gVo),e(I,hVo),e(I,gv),e(gv,$_e),e($_e,pVo),e(gv,_Vo),e(gv,MX),e(MX,uVo),e(gv,bVo),e(I,vVo),e(I,hv),e(hv,k_e),e(k_e,FVo),e(hv,TVo),e(hv,EX),e(EX,MVo),e(hv,EVo),e(I,CVo),e(I,pv),e(pv,S_e),e(S_e,wVo),e(pv,AVo),e(pv,CX),e(CX,LVo),e(pv,yVo),e(I,xVo),e(I,_v),e(_v,R_e),e(R_e,$Vo),e(_v,kVo),e(_v,wX),e(wX,SVo),e(_v,RVo),e(I,PVo),e(I,uv),e(uv,P_e),e(P_e,BVo),e(uv,NVo),e(uv,AX),e(AX,IVo),e(uv,qVo),e(I,jVo),e(I,bv),e(bv,B_e),e(B_e,DVo),e(bv,GVo),e(bv,LX),e(LX,OVo),e(bv,VVo),e(I,XVo),e(I,vv),e(vv,N_e),e(N_e,zVo),e(vv,QVo),e(vv,yX),e(yX,WVo),e(vv,HVo),e(I,UVo),e(I,Fv),e(Fv,I_e),e(I_e,JVo),e(Fv,YVo),e(Fv,xX),e(xX,KVo),e(Fv,ZVo),e(I,eXo),e(I,Tv),e(Tv,q_e),e(q_e,oXo),e(Tv,rXo),e(Tv,$X),e($X,tXo),e(Tv,aXo),e(I,nXo),e(I,Mv),e(Mv,j_e),e(j_e,sXo),e(Mv,lXo),e(Mv,kX),e(kX,iXo),e(Mv,dXo),e(I,cXo),e(I,Ev),e(Ev,D_e),e(D_e,fXo),e(Ev,mXo),e(Ev,SX),e(SX,gXo),e(Ev,hXo),e(I,pXo),e(I,Cv),e(Cv,G_e),e(G_e,_Xo),e(Cv,uXo),e(Cv,RX),e(RX,bXo),e(Cv,vXo),e(I,FXo),e(I,wv),e(wv,O_e),e(O_e,TXo),e(wv,MXo),e(wv,PX),e(PX,EXo),e(wv,CXo),e(I,wXo),e(I,Av),e(Av,V_e),e(V_e,AXo),e(Av,LXo),e(Av,BX),e(BX,yXo),e(Av,xXo),e(I,$Xo),e(I,Lv),e(Lv,X_e),e(X_e,kXo),e(Lv,SXo),e(Lv,NX),e(NX,RXo),e(Lv,PXo),e(I,BXo),e(I,yv),e(yv,z_e),e(z_e,NXo),e(yv,IXo),e(yv,IX),e(IX,qXo),e(yv,jXo),e(I,DXo),e(I,xv),e(xv,Q_e),e(Q_e,GXo),e(xv,OXo),e(xv,qX),e(qX,VXo),e(xv,XXo),e(I,zXo),e(I,$v),e($v,W_e),e(W_e,QXo),e($v,WXo),e($v,jX),e(jX,HXo),e($v,UXo),e(I,JXo),e(I,kv),e(kv,H_e),e(H_e,YXo),e(kv,KXo),e(kv,DX),e(DX,ZXo),e(kv,ezo),e(I,ozo),e(I,Sv),e(Sv,U_e),e(U_e,rzo),e(Sv,tzo),e(Sv,GX),e(GX,azo),e(Sv,nzo),e(I,szo),e(I,Rv),e(Rv,J_e),e(J_e,lzo),e(Rv,izo),e(Rv,OX),e(OX,dzo),e(Rv,czo),e(I,fzo),e(I,Pv),e(Pv,Y_e),e(Y_e,mzo),e(Pv,gzo),e(Pv,VX),e(VX,hzo),e(Pv,pzo),e(I,_zo),e(I,Bv),e(Bv,K_e),e(K_e,uzo),e(Bv,bzo),e(Bv,XX),e(XX,vzo),e(Bv,Fzo),e(I,Tzo),e(I,Nv),e(Nv,Z_e),e(Z_e,Mzo),e(Nv,Ezo),e(Nv,zX),e(zX,Czo),e(Nv,wzo),e(I,Azo),e(I,Iv),e(Iv,eue),e(eue,Lzo),e(Iv,yzo),e(Iv,QX),e(QX,xzo),e(Iv,$zo),e(I,kzo),e(I,qv),e(qv,oue),e(oue,Szo),e(qv,Rzo),e(qv,WX),e(WX,Pzo),e(qv,Bzo),e(I,Nzo),e(I,jv),e(jv,rue),e(rue,Izo),e(jv,qzo),e(jv,HX),e(HX,jzo),e(jv,Dzo),e(I,Gzo),e(I,Dv),e(Dv,tue),e(tue,Ozo),e(Dv,Vzo),e(Dv,UX),e(UX,Xzo),e(Dv,zzo),e(I,Qzo),e(I,Gv),e(Gv,aue),e(aue,Wzo),e(Gv,Hzo),e(Gv,JX),e(JX,Uzo),e(Gv,Jzo),e(I,Yzo),e(I,Ov),e(Ov,nue),e(nue,Kzo),e(Ov,Zzo),e(Ov,YX),e(YX,eQo),e(Ov,oQo),e(I,rQo),e(I,Vv),e(Vv,sue),e(sue,tQo),e(Vv,aQo),e(Vv,KX),e(KX,nQo),e(Vv,sQo),e(I,lQo),e(I,Xv),e(Xv,lue),e(lue,iQo),e(Xv,dQo),e(Xv,ZX),e(ZX,cQo),e(Xv,fQo),e(I,mQo),e(I,zv),e(zv,iue),e(iue,gQo),e(zv,hQo),e(zv,ez),e(ez,pQo),e(zv,_Qo),e(ro,uQo),e(ro,Qv),e(Qv,bQo),e(Qv,due),e(due,vQo),e(Qv,FQo),e(Qv,cue),e(cue,TQo),e(ro,MQo),M(Wv,ro,null),b(f,WXe,u),b(f,sd,u),e(sd,Hv),e(Hv,fue),M(my,fue,null),e(sd,EQo),e(sd,mue),e(mue,CQo),b(f,HXe,u),b(f,No,u),M(gy,No,null),e(No,wQo),e(No,ld),e(ld,AQo),e(ld,oz),e(oz,LQo),e(ld,yQo),e(ld,rz),e(rz,xQo),e(ld,$Qo),e(No,kQo),e(No,hy),e(hy,SQo),e(hy,gue),e(gue,RQo),e(hy,PQo),e(No,BQo),e(No,ht),M(py,ht,null),e(ht,NQo),e(ht,hue),e(hue,IQo),e(ht,qQo),e(ht,id),e(id,jQo),e(id,pue),e(pue,DQo),e(id,GQo),e(id,tz),e(tz,OQo),e(id,VQo),e(ht,XQo),M(Uv,ht,null),e(No,zQo),e(No,to),M(_y,to,null),e(to,QQo),e(to,_ue),e(_ue,WQo),e(to,HQo),e(to,Oa),e(Oa,UQo),e(Oa,uue),e(uue,JQo),e(Oa,YQo),e(Oa,bue),e(bue,KQo),e(Oa,ZQo),e(Oa,vue),e(vue,eWo),e(Oa,oWo),e(to,rWo),e(to,Z),e(Z,Jv),e(Jv,Fue),e(Fue,tWo),e(Jv,aWo),e(Jv,az),e(az,nWo),e(Jv,sWo),e(Z,lWo),e(Z,Yv),e(Yv,Tue),e(Tue,iWo),e(Yv,dWo),e(Yv,nz),e(nz,cWo),e(Yv,fWo),e(Z,mWo),e(Z,Kv),e(Kv,Mue),e(Mue,gWo),e(Kv,hWo),e(Kv,sz),e(sz,pWo),e(Kv,_Wo),e(Z,uWo),e(Z,Zv),e(Zv,Eue),e(Eue,bWo),e(Zv,vWo),e(Zv,lz),e(lz,FWo),e(Zv,TWo),e(Z,MWo),e(Z,eF),e(eF,Cue),e(Cue,EWo),e(eF,CWo),e(eF,iz),e(iz,wWo),e(eF,AWo),e(Z,LWo),e(Z,oF),e(oF,wue),e(wue,yWo),e(oF,xWo),e(oF,dz),e(dz,$Wo),e(oF,kWo),e(Z,SWo),e(Z,rF),e(rF,Aue),e(Aue,RWo),e(rF,PWo),e(rF,cz),e(cz,BWo),e(rF,NWo),e(Z,IWo),e(Z,tF),e(tF,Lue),e(Lue,qWo),e(tF,jWo),e(tF,fz),e(fz,DWo),e(tF,GWo),e(Z,OWo),e(Z,aF),e(aF,yue),e(yue,VWo),e(aF,XWo),e(aF,mz),e(mz,zWo),e(aF,QWo),e(Z,WWo),e(Z,nF),e(nF,xue),e(xue,HWo),e(nF,UWo),e(nF,gz),e(gz,JWo),e(nF,YWo),e(Z,KWo),e(Z,sF),e(sF,$ue),e($ue,ZWo),e(sF,eHo),e(sF,hz),e(hz,oHo),e(sF,rHo),e(Z,tHo),e(Z,lF),e(lF,kue),e(kue,aHo),e(lF,nHo),e(lF,pz),e(pz,sHo),e(lF,lHo),e(Z,iHo),e(Z,iF),e(iF,Sue),e(Sue,dHo),e(iF,cHo),e(iF,_z),e(_z,fHo),e(iF,mHo),e(Z,gHo),e(Z,dF),e(dF,Rue),e(Rue,hHo),e(dF,pHo),e(dF,uz),e(uz,_Ho),e(dF,uHo),e(Z,bHo),e(Z,cF),e(cF,Pue),e(Pue,vHo),e(cF,FHo),e(cF,bz),e(bz,THo),e(cF,MHo),e(Z,EHo),e(Z,fF),e(fF,Bue),e(Bue,CHo),e(fF,wHo),e(fF,vz),e(vz,AHo),e(fF,LHo),e(Z,yHo),e(Z,mF),e(mF,Nue),e(Nue,xHo),e(mF,$Ho),e(mF,Fz),e(Fz,kHo),e(mF,SHo),e(Z,RHo),e(Z,gF),e(gF,Iue),e(Iue,PHo),e(gF,BHo),e(gF,Tz),e(Tz,NHo),e(gF,IHo),e(Z,qHo),e(Z,hF),e(hF,que),e(que,jHo),e(hF,DHo),e(hF,Mz),e(Mz,GHo),e(hF,OHo),e(Z,VHo),e(Z,pF),e(pF,jue),e(jue,XHo),e(pF,zHo),e(pF,Ez),e(Ez,QHo),e(pF,WHo),e(Z,HHo),e(Z,_F),e(_F,Due),e(Due,UHo),e(_F,JHo),e(_F,Cz),e(Cz,YHo),e(_F,KHo),e(Z,ZHo),e(Z,uF),e(uF,Gue),e(Gue,eUo),e(uF,oUo),e(uF,wz),e(wz,rUo),e(uF,tUo),e(Z,aUo),e(Z,bF),e(bF,Oue),e(Oue,nUo),e(bF,sUo),e(bF,Az),e(Az,lUo),e(bF,iUo),e(Z,dUo),e(Z,vF),e(vF,Vue),e(Vue,cUo),e(vF,fUo),e(vF,Lz),e(Lz,mUo),e(vF,gUo),e(Z,hUo),e(Z,FF),e(FF,Xue),e(Xue,pUo),e(FF,_Uo),e(FF,yz),e(yz,uUo),e(FF,bUo),e(Z,vUo),e(Z,TF),e(TF,zue),e(zue,FUo),e(TF,TUo),e(TF,xz),e(xz,MUo),e(TF,EUo),e(Z,CUo),e(Z,MF),e(MF,Que),e(Que,wUo),e(MF,AUo),e(MF,$z),e($z,LUo),e(MF,yUo),e(Z,xUo),e(Z,EF),e(EF,Wue),e(Wue,$Uo),e(EF,kUo),e(EF,kz),e(kz,SUo),e(EF,RUo),e(Z,PUo),e(Z,CF),e(CF,Hue),e(Hue,BUo),e(CF,NUo),e(CF,Sz),e(Sz,IUo),e(CF,qUo),e(Z,jUo),e(Z,wF),e(wF,Uue),e(Uue,DUo),e(wF,GUo),e(wF,Rz),e(Rz,OUo),e(wF,VUo),e(to,XUo),e(to,AF),e(AF,zUo),e(AF,Jue),e(Jue,QUo),e(AF,WUo),e(AF,Yue),e(Yue,HUo),e(to,UUo),M(LF,to,null),b(f,UXe,u),b(f,dd,u),e(dd,yF),e(yF,Kue),M(uy,Kue,null),e(dd,JUo),e(dd,Zue),e(Zue,YUo),b(f,JXe,u),b(f,Io,u),M(by,Io,null),e(Io,KUo),e(Io,cd),e(cd,ZUo),e(cd,Pz),e(Pz,eJo),e(cd,oJo),e(cd,Bz),e(Bz,rJo),e(cd,tJo),e(Io,aJo),e(Io,vy),e(vy,nJo),e(vy,e2e),e(e2e,sJo),e(vy,lJo),e(Io,iJo),e(Io,pt),M(Fy,pt,null),e(pt,dJo),e(pt,o2e),e(o2e,cJo),e(pt,fJo),e(pt,fd),e(fd,mJo),e(fd,r2e),e(r2e,gJo),e(fd,hJo),e(fd,Nz),e(Nz,pJo),e(fd,_Jo),e(pt,uJo),M(xF,pt,null),e(Io,bJo),e(Io,ao),M(Ty,ao,null),e(ao,vJo),e(ao,t2e),e(t2e,FJo),e(ao,TJo),e(ao,Va),e(Va,MJo),e(Va,a2e),e(a2e,EJo),e(Va,CJo),e(Va,n2e),e(n2e,wJo),e(Va,AJo),e(Va,s2e),e(s2e,LJo),e(Va,yJo),e(ao,xJo),e(ao,qo),e(qo,$F),e($F,l2e),e(l2e,$Jo),e($F,kJo),e($F,Iz),e(Iz,SJo),e($F,RJo),e(qo,PJo),e(qo,kF),e(kF,i2e),e(i2e,BJo),e(kF,NJo),e(kF,qz),e(qz,IJo),e(kF,qJo),e(qo,jJo),e(qo,SF),e(SF,d2e),e(d2e,DJo),e(SF,GJo),e(SF,jz),e(jz,OJo),e(SF,VJo),e(qo,XJo),e(qo,RF),e(RF,c2e),e(c2e,zJo),e(RF,QJo),e(RF,Dz),e(Dz,WJo),e(RF,HJo),e(qo,UJo),e(qo,PF),e(PF,f2e),e(f2e,JJo),e(PF,YJo),e(PF,Gz),e(Gz,KJo),e(PF,ZJo),e(qo,eYo),e(qo,BF),e(BF,m2e),e(m2e,oYo),e(BF,rYo),e(BF,Oz),e(Oz,tYo),e(BF,aYo),e(ao,nYo),e(ao,NF),e(NF,sYo),e(NF,g2e),e(g2e,lYo),e(NF,iYo),e(NF,h2e),e(h2e,dYo),e(ao,cYo),M(IF,ao,null),b(f,YXe,u),b(f,md,u),e(md,qF),e(qF,p2e),M(My,p2e,null),e(md,fYo),e(md,_2e),e(_2e,mYo),b(f,KXe,u),b(f,jo,u),M(Ey,jo,null),e(jo,gYo),e(jo,gd),e(gd,hYo),e(gd,Vz),e(Vz,pYo),e(gd,_Yo),e(gd,Xz),e(Xz,uYo),e(gd,bYo),e(jo,vYo),e(jo,Cy),e(Cy,FYo),e(Cy,u2e),e(u2e,TYo),e(Cy,MYo),e(jo,EYo),e(jo,_t),M(wy,_t,null),e(_t,CYo),e(_t,b2e),e(b2e,wYo),e(_t,AYo),e(_t,hd),e(hd,LYo),e(hd,v2e),e(v2e,yYo),e(hd,xYo),e(hd,zz),e(zz,$Yo),e(hd,kYo),e(_t,SYo),M(jF,_t,null),e(jo,RYo),e(jo,no),M(Ay,no,null),e(no,PYo),e(no,F2e),e(F2e,BYo),e(no,NYo),e(no,Xa),e(Xa,IYo),e(Xa,T2e),e(T2e,qYo),e(Xa,jYo),e(Xa,M2e),e(M2e,DYo),e(Xa,GYo),e(Xa,E2e),e(E2e,OYo),e(Xa,VYo),e(no,XYo),e(no,U),e(U,DF),e(DF,C2e),e(C2e,zYo),e(DF,QYo),e(DF,Qz),e(Qz,WYo),e(DF,HYo),e(U,UYo),e(U,GF),e(GF,w2e),e(w2e,JYo),e(GF,YYo),e(GF,Wz),e(Wz,KYo),e(GF,ZYo),e(U,eKo),e(U,OF),e(OF,A2e),e(A2e,oKo),e(OF,rKo),e(OF,Hz),e(Hz,tKo),e(OF,aKo),e(U,nKo),e(U,VF),e(VF,L2e),e(L2e,sKo),e(VF,lKo),e(VF,Uz),e(Uz,iKo),e(VF,dKo),e(U,cKo),e(U,XF),e(XF,y2e),e(y2e,fKo),e(XF,mKo),e(XF,Jz),e(Jz,gKo),e(XF,hKo),e(U,pKo),e(U,zF),e(zF,x2e),e(x2e,_Ko),e(zF,uKo),e(zF,Yz),e(Yz,bKo),e(zF,vKo),e(U,FKo),e(U,QF),e(QF,$2e),e($2e,TKo),e(QF,MKo),e(QF,Kz),e(Kz,EKo),e(QF,CKo),e(U,wKo),e(U,WF),e(WF,k2e),e(k2e,AKo),e(WF,LKo),e(WF,Zz),e(Zz,yKo),e(WF,xKo),e(U,$Ko),e(U,HF),e(HF,S2e),e(S2e,kKo),e(HF,SKo),e(HF,eQ),e(eQ,RKo),e(HF,PKo),e(U,BKo),e(U,UF),e(UF,R2e),e(R2e,NKo),e(UF,IKo),e(UF,oQ),e(oQ,qKo),e(UF,jKo),e(U,DKo),e(U,JF),e(JF,P2e),e(P2e,GKo),e(JF,OKo),e(JF,rQ),e(rQ,VKo),e(JF,XKo),e(U,zKo),e(U,YF),e(YF,B2e),e(B2e,QKo),e(YF,WKo),e(YF,tQ),e(tQ,HKo),e(YF,UKo),e(U,JKo),e(U,KF),e(KF,N2e),e(N2e,YKo),e(KF,KKo),e(KF,aQ),e(aQ,ZKo),e(KF,eZo),e(U,oZo),e(U,ZF),e(ZF,I2e),e(I2e,rZo),e(ZF,tZo),e(ZF,nQ),e(nQ,aZo),e(ZF,nZo),e(U,sZo),e(U,e6),e(e6,q2e),e(q2e,lZo),e(e6,iZo),e(e6,sQ),e(sQ,dZo),e(e6,cZo),e(U,fZo),e(U,o6),e(o6,j2e),e(j2e,mZo),e(o6,gZo),e(o6,lQ),e(lQ,hZo),e(o6,pZo),e(U,_Zo),e(U,r6),e(r6,D2e),e(D2e,uZo),e(r6,bZo),e(r6,iQ),e(iQ,vZo),e(r6,FZo),e(U,TZo),e(U,t6),e(t6,G2e),e(G2e,MZo),e(t6,EZo),e(t6,dQ),e(dQ,CZo),e(t6,wZo),e(U,AZo),e(U,a6),e(a6,O2e),e(O2e,LZo),e(a6,yZo),e(a6,cQ),e(cQ,xZo),e(a6,$Zo),e(U,kZo),e(U,n6),e(n6,V2e),e(V2e,SZo),e(n6,RZo),e(n6,fQ),e(fQ,PZo),e(n6,BZo),e(U,NZo),e(U,s6),e(s6,X2e),e(X2e,IZo),e(s6,qZo),e(s6,mQ),e(mQ,jZo),e(s6,DZo),e(U,GZo),e(U,l6),e(l6,z2e),e(z2e,OZo),e(l6,VZo),e(l6,gQ),e(gQ,XZo),e(l6,zZo),e(U,QZo),e(U,i6),e(i6,Q2e),e(Q2e,WZo),e(i6,HZo),e(i6,hQ),e(hQ,UZo),e(i6,JZo),e(U,YZo),e(U,d6),e(d6,W2e),e(W2e,KZo),e(d6,ZZo),e(d6,pQ),e(pQ,eer),e(d6,oer),e(U,rer),e(U,c6),e(c6,H2e),e(H2e,ter),e(c6,aer),e(c6,_Q),e(_Q,ner),e(c6,ser),e(U,ler),e(U,f6),e(f6,U2e),e(U2e,ier),e(f6,der),e(f6,uQ),e(uQ,cer),e(f6,fer),e(U,mer),e(U,m6),e(m6,J2e),e(J2e,ger),e(m6,her),e(m6,bQ),e(bQ,per),e(m6,_er),e(U,uer),e(U,g6),e(g6,Y2e),e(Y2e,ber),e(g6,ver),e(g6,vQ),e(vQ,Fer),e(g6,Ter),e(U,Mer),e(U,h6),e(h6,K2e),e(K2e,Eer),e(h6,Cer),e(h6,FQ),e(FQ,wer),e(h6,Aer),e(U,Ler),e(U,p6),e(p6,Z2e),e(Z2e,yer),e(p6,xer),e(p6,TQ),e(TQ,$er),e(p6,ker),e(U,Ser),e(U,_6),e(_6,e1e),e(e1e,Rer),e(_6,Per),e(_6,MQ),e(MQ,Ber),e(_6,Ner),e(U,Ier),e(U,u6),e(u6,o1e),e(o1e,qer),e(u6,jer),e(u6,EQ),e(EQ,Der),e(u6,Ger),e(U,Oer),e(U,b6),e(b6,r1e),e(r1e,Ver),e(b6,Xer),e(b6,CQ),e(CQ,zer),e(b6,Qer),e(U,Wer),e(U,v6),e(v6,t1e),e(t1e,Her),e(v6,Uer),e(v6,wQ),e(wQ,Jer),e(v6,Yer),e(U,Ker),e(U,F6),e(F6,a1e),e(a1e,Zer),e(F6,eor),e(F6,AQ),e(AQ,oor),e(F6,ror),e(U,tor),e(U,T6),e(T6,n1e),e(n1e,aor),e(T6,nor),e(T6,LQ),e(LQ,sor),e(T6,lor),e(no,ior),e(no,M6),e(M6,dor),e(M6,s1e),e(s1e,cor),e(M6,mor),e(M6,l1e),e(l1e,gor),e(no,hor),M(E6,no,null),b(f,ZXe,u),b(f,pd,u),e(pd,C6),e(C6,i1e),M(Ly,i1e,null),e(pd,por),e(pd,d1e),e(d1e,_or),b(f,eze,u),b(f,Do,u),M(yy,Do,null),e(Do,uor),e(Do,_d),e(_d,bor),e(_d,yQ),e(yQ,vor),e(_d,For),e(_d,xQ),e(xQ,Tor),e(_d,Mor),e(Do,Eor),e(Do,xy),e(xy,Cor),e(xy,c1e),e(c1e,wor),e(xy,Aor),e(Do,Lor),e(Do,ut),M($y,ut,null),e(ut,yor),e(ut,f1e),e(f1e,xor),e(ut,$or),e(ut,ud),e(ud,kor),e(ud,m1e),e(m1e,Sor),e(ud,Ror),e(ud,$Q),e($Q,Por),e(ud,Bor),e(ut,Nor),M(w6,ut,null),e(Do,Ior),e(Do,so),M(ky,so,null),e(so,qor),e(so,g1e),e(g1e,jor),e(so,Dor),e(so,za),e(za,Gor),e(za,h1e),e(h1e,Oor),e(za,Vor),e(za,p1e),e(p1e,Xor),e(za,zor),e(za,_1e),e(_1e,Qor),e(za,Wor),e(so,Hor),e(so,V),e(V,A6),e(A6,u1e),e(u1e,Uor),e(A6,Jor),e(A6,kQ),e(kQ,Yor),e(A6,Kor),e(V,Zor),e(V,L6),e(L6,b1e),e(b1e,err),e(L6,orr),e(L6,SQ),e(SQ,rrr),e(L6,trr),e(V,arr),e(V,y6),e(y6,v1e),e(v1e,nrr),e(y6,srr),e(y6,RQ),e(RQ,lrr),e(y6,irr),e(V,drr),e(V,x6),e(x6,F1e),e(F1e,crr),e(x6,frr),e(x6,PQ),e(PQ,mrr),e(x6,grr),e(V,hrr),e(V,$6),e($6,T1e),e(T1e,prr),e($6,_rr),e($6,BQ),e(BQ,urr),e($6,brr),e(V,vrr),e(V,k6),e(k6,M1e),e(M1e,Frr),e(k6,Trr),e(k6,NQ),e(NQ,Mrr),e(k6,Err),e(V,Crr),e(V,S6),e(S6,E1e),e(E1e,wrr),e(S6,Arr),e(S6,IQ),e(IQ,Lrr),e(S6,yrr),e(V,xrr),e(V,R6),e(R6,C1e),e(C1e,$rr),e(R6,krr),e(R6,qQ),e(qQ,Srr),e(R6,Rrr),e(V,Prr),e(V,P6),e(P6,w1e),e(w1e,Brr),e(P6,Nrr),e(P6,jQ),e(jQ,Irr),e(P6,qrr),e(V,jrr),e(V,B6),e(B6,A1e),e(A1e,Drr),e(B6,Grr),e(B6,DQ),e(DQ,Orr),e(B6,Vrr),e(V,Xrr),e(V,N6),e(N6,L1e),e(L1e,zrr),e(N6,Qrr),e(N6,GQ),e(GQ,Wrr),e(N6,Hrr),e(V,Urr),e(V,I6),e(I6,y1e),e(y1e,Jrr),e(I6,Yrr),e(I6,OQ),e(OQ,Krr),e(I6,Zrr),e(V,etr),e(V,q6),e(q6,x1e),e(x1e,otr),e(q6,rtr),e(q6,VQ),e(VQ,ttr),e(q6,atr),e(V,ntr),e(V,j6),e(j6,$1e),e($1e,str),e(j6,ltr),e(j6,XQ),e(XQ,itr),e(j6,dtr),e(V,ctr),e(V,D6),e(D6,k1e),e(k1e,ftr),e(D6,mtr),e(D6,zQ),e(zQ,gtr),e(D6,htr),e(V,ptr),e(V,G6),e(G6,S1e),e(S1e,_tr),e(G6,utr),e(G6,QQ),e(QQ,btr),e(G6,vtr),e(V,Ftr),e(V,O6),e(O6,R1e),e(R1e,Ttr),e(O6,Mtr),e(O6,WQ),e(WQ,Etr),e(O6,Ctr),e(V,wtr),e(V,V6),e(V6,P1e),e(P1e,Atr),e(V6,Ltr),e(V6,HQ),e(HQ,ytr),e(V6,xtr),e(V,$tr),e(V,X6),e(X6,B1e),e(B1e,ktr),e(X6,Str),e(X6,UQ),e(UQ,Rtr),e(X6,Ptr),e(V,Btr),e(V,z6),e(z6,N1e),e(N1e,Ntr),e(z6,Itr),e(z6,JQ),e(JQ,qtr),e(z6,jtr),e(V,Dtr),e(V,Q6),e(Q6,I1e),e(I1e,Gtr),e(Q6,Otr),e(Q6,YQ),e(YQ,Vtr),e(Q6,Xtr),e(V,ztr),e(V,W6),e(W6,q1e),e(q1e,Qtr),e(W6,Wtr),e(W6,KQ),e(KQ,Htr),e(W6,Utr),e(V,Jtr),e(V,H6),e(H6,j1e),e(j1e,Ytr),e(H6,Ktr),e(H6,ZQ),e(ZQ,Ztr),e(H6,ear),e(V,oar),e(V,U6),e(U6,D1e),e(D1e,rar),e(U6,tar),e(U6,eW),e(eW,aar),e(U6,nar),e(V,sar),e(V,J6),e(J6,G1e),e(G1e,lar),e(J6,iar),e(J6,oW),e(oW,dar),e(J6,car),e(V,far),e(V,Y6),e(Y6,O1e),e(O1e,mar),e(Y6,gar),e(Y6,rW),e(rW,har),e(Y6,par),e(V,_ar),e(V,K6),e(K6,V1e),e(V1e,uar),e(K6,bar),e(K6,tW),e(tW,Far),e(K6,Tar),e(V,Mar),e(V,Z6),e(Z6,X1e),e(X1e,Ear),e(Z6,Car),e(Z6,aW),e(aW,war),e(Z6,Aar),e(V,Lar),e(V,eT),e(eT,z1e),e(z1e,yar),e(eT,xar),e(eT,nW),e(nW,$ar),e(eT,kar),e(V,Sar),e(V,oT),e(oT,Q1e),e(Q1e,Rar),e(oT,Par),e(oT,sW),e(sW,Bar),e(oT,Nar),e(V,Iar),e(V,rT),e(rT,W1e),e(W1e,qar),e(rT,jar),e(rT,lW),e(lW,Dar),e(rT,Gar),e(V,Oar),e(V,tT),e(tT,H1e),e(H1e,Var),e(tT,Xar),e(tT,iW),e(iW,zar),e(tT,Qar),e(V,War),e(V,aT),e(aT,U1e),e(U1e,Har),e(aT,Uar),e(aT,dW),e(dW,Jar),e(aT,Yar),e(V,Kar),e(V,nT),e(nT,J1e),e(J1e,Zar),e(nT,enr),e(nT,cW),e(cW,onr),e(nT,rnr),e(V,tnr),e(V,sT),e(sT,Y1e),e(Y1e,anr),e(sT,nnr),e(sT,fW),e(fW,snr),e(sT,lnr),e(V,inr),e(V,lT),e(lT,K1e),e(K1e,dnr),e(lT,cnr),e(lT,mW),e(mW,fnr),e(lT,mnr),e(V,gnr),e(V,iT),e(iT,Z1e),e(Z1e,hnr),e(iT,pnr),e(iT,gW),e(gW,_nr),e(iT,unr),e(V,bnr),e(V,dT),e(dT,ebe),e(ebe,vnr),e(dT,Fnr),e(dT,hW),e(hW,Tnr),e(dT,Mnr),e(V,Enr),e(V,cT),e(cT,obe),e(obe,Cnr),e(cT,wnr),e(cT,pW),e(pW,Anr),e(cT,Lnr),e(V,ynr),e(V,fT),e(fT,rbe),e(rbe,xnr),e(fT,$nr),e(fT,_W),e(_W,knr),e(fT,Snr),e(V,Rnr),e(V,mT),e(mT,tbe),e(tbe,Pnr),e(mT,Bnr),e(mT,uW),e(uW,Nnr),e(mT,Inr),e(V,qnr),e(V,gT),e(gT,abe),e(abe,jnr),e(gT,Dnr),e(gT,bW),e(bW,Gnr),e(gT,Onr),e(so,Vnr),e(so,hT),e(hT,Xnr),e(hT,nbe),e(nbe,znr),e(hT,Qnr),e(hT,sbe),e(sbe,Wnr),e(so,Hnr),M(pT,so,null),b(f,oze,u),b(f,bd,u),e(bd,_T),e(_T,lbe),M(Sy,lbe,null),e(bd,Unr),e(bd,ibe),e(ibe,Jnr),b(f,rze,u),b(f,Go,u),M(Ry,Go,null),e(Go,Ynr),e(Go,vd),e(vd,Knr),e(vd,vW),e(vW,Znr),e(vd,esr),e(vd,FW),e(FW,osr),e(vd,rsr),e(Go,tsr),e(Go,Py),e(Py,asr),e(Py,dbe),e(dbe,nsr),e(Py,ssr),e(Go,lsr),e(Go,bt),M(By,bt,null),e(bt,isr),e(bt,cbe),e(cbe,dsr),e(bt,csr),e(bt,Fd),e(Fd,fsr),e(Fd,fbe),e(fbe,msr),e(Fd,gsr),e(Fd,TW),e(TW,hsr),e(Fd,psr),e(bt,_sr),M(uT,bt,null),e(Go,usr),e(Go,lo),M(Ny,lo,null),e(lo,bsr),e(lo,mbe),e(mbe,vsr),e(lo,Fsr),e(lo,Qa),e(Qa,Tsr),e(Qa,gbe),e(gbe,Msr),e(Qa,Esr),e(Qa,hbe),e(hbe,Csr),e(Qa,wsr),e(Qa,pbe),e(pbe,Asr),e(Qa,Lsr),e(lo,ysr),e(lo,_be),e(_be,bT),e(bT,ube),e(ube,xsr),e(bT,$sr),e(bT,MW),e(MW,ksr),e(bT,Ssr),e(lo,Rsr),e(lo,vT),e(vT,Psr),e(vT,bbe),e(bbe,Bsr),e(vT,Nsr),e(vT,vbe),e(vbe,Isr),e(lo,qsr),M(FT,lo,null),b(f,tze,u),b(f,Td,u),e(Td,TT),e(TT,Fbe),M(Iy,Fbe,null),e(Td,jsr),e(Td,Tbe),e(Tbe,Dsr),b(f,aze,u),b(f,Oo,u),M(qy,Oo,null),e(Oo,Gsr),e(Oo,Md),e(Md,Osr),e(Md,EW),e(EW,Vsr),e(Md,Xsr),e(Md,CW),e(CW,zsr),e(Md,Qsr),e(Oo,Wsr),e(Oo,jy),e(jy,Hsr),e(jy,Mbe),e(Mbe,Usr),e(jy,Jsr),e(Oo,Ysr),e(Oo,vt),M(Dy,vt,null),e(vt,Ksr),e(vt,Ebe),e(Ebe,Zsr),e(vt,elr),e(vt,Ed),e(Ed,olr),e(Ed,Cbe),e(Cbe,rlr),e(Ed,tlr),e(Ed,wW),e(wW,alr),e(Ed,nlr),e(vt,slr),M(MT,vt,null),e(Oo,llr),e(Oo,io),M(Gy,io,null),e(io,ilr),e(io,wbe),e(wbe,dlr),e(io,clr),e(io,Wa),e(Wa,flr),e(Wa,Abe),e(Abe,mlr),e(Wa,glr),e(Wa,Lbe),e(Lbe,hlr),e(Wa,plr),e(Wa,ybe),e(ybe,_lr),e(Wa,ulr),e(io,blr),e(io,ve),e(ve,ET),e(ET,xbe),e(xbe,vlr),e(ET,Flr),e(ET,AW),e(AW,Tlr),e(ET,Mlr),e(ve,Elr),e(ve,CT),e(CT,$be),e($be,Clr),e(CT,wlr),e(CT,LW),e(LW,Alr),e(CT,Llr),e(ve,ylr),e(ve,wT),e(wT,kbe),e(kbe,xlr),e(wT,$lr),e(wT,yW),e(yW,klr),e(wT,Slr),e(ve,Rlr),e(ve,AT),e(AT,Sbe),e(Sbe,Plr),e(AT,Blr),e(AT,xW),e(xW,Nlr),e(AT,Ilr),e(ve,qlr),e(ve,Us),e(Us,Rbe),e(Rbe,jlr),e(Us,Dlr),e(Us,$W),e($W,Glr),e(Us,Olr),e(Us,kW),e(kW,Vlr),e(Us,Xlr),e(ve,zlr),e(ve,LT),e(LT,Pbe),e(Pbe,Qlr),e(LT,Wlr),e(LT,SW),e(SW,Hlr),e(LT,Ulr),e(ve,Jlr),e(ve,Js),e(Js,Bbe),e(Bbe,Ylr),e(Js,Klr),e(Js,RW),e(RW,Zlr),e(Js,eir),e(Js,PW),e(PW,oir),e(Js,rir),e(ve,tir),e(ve,yT),e(yT,Nbe),e(Nbe,air),e(yT,nir),e(yT,BW),e(BW,sir),e(yT,lir),e(ve,iir),e(ve,Ft),e(Ft,Ibe),e(Ibe,dir),e(Ft,cir),e(Ft,NW),e(NW,fir),e(Ft,mir),e(Ft,IW),e(IW,gir),e(Ft,hir),e(Ft,qW),e(qW,pir),e(Ft,_ir),e(ve,uir),e(ve,xT),e(xT,qbe),e(qbe,bir),e(xT,vir),e(xT,jW),e(jW,Fir),e(xT,Tir),e(ve,Mir),e(ve,$T),e($T,jbe),e(jbe,Eir),e($T,Cir),e($T,DW),e(DW,wir),e($T,Air),e(ve,Lir),e(ve,kT),e(kT,Dbe),e(Dbe,yir),e(kT,xir),e(kT,GW),e(GW,$ir),e(kT,kir),e(ve,Sir),e(ve,ST),e(ST,Gbe),e(Gbe,Rir),e(ST,Pir),e(ST,OW),e(OW,Bir),e(ST,Nir),e(ve,Iir),e(ve,RT),e(RT,Obe),e(Obe,qir),e(RT,jir),e(RT,VW),e(VW,Dir),e(RT,Gir),e(ve,Oir),e(ve,PT),e(PT,Vbe),e(Vbe,Vir),e(PT,Xir),e(PT,XW),e(XW,zir),e(PT,Qir),e(ve,Wir),e(ve,BT),e(BT,Xbe),e(Xbe,Hir),e(BT,Uir),e(BT,zW),e(zW,Jir),e(BT,Yir),e(io,Kir),e(io,NT),e(NT,Zir),e(NT,zbe),e(zbe,edr),e(NT,odr),e(NT,Qbe),e(Qbe,rdr),e(io,tdr),M(IT,io,null),b(f,nze,u),b(f,Cd,u),e(Cd,qT),e(qT,Wbe),M(Oy,Wbe,null),e(Cd,adr),e(Cd,Hbe),e(Hbe,ndr),b(f,sze,u),b(f,Vo,u),M(Vy,Vo,null),e(Vo,sdr),e(Vo,wd),e(wd,ldr),e(wd,QW),e(QW,idr),e(wd,ddr),e(wd,WW),e(WW,cdr),e(wd,fdr),e(Vo,mdr),e(Vo,Xy),e(Xy,gdr),e(Xy,Ube),e(Ube,hdr),e(Xy,pdr),e(Vo,_dr),e(Vo,Tt),M(zy,Tt,null),e(Tt,udr),e(Tt,Jbe),e(Jbe,bdr),e(Tt,vdr),e(Tt,Ad),e(Ad,Fdr),e(Ad,Ybe),e(Ybe,Tdr),e(Ad,Mdr),e(Ad,HW),e(HW,Edr),e(Ad,Cdr),e(Tt,wdr),M(jT,Tt,null),e(Vo,Adr),e(Vo,co),M(Qy,co,null),e(co,Ldr),e(co,Kbe),e(Kbe,ydr),e(co,xdr),e(co,Ha),e(Ha,$dr),e(Ha,Zbe),e(Zbe,kdr),e(Ha,Sdr),e(Ha,eve),e(eve,Rdr),e(Ha,Pdr),e(Ha,ove),e(ove,Bdr),e(Ha,Ndr),e(co,Idr),e(co,rve),e(rve,DT),e(DT,tve),e(tve,qdr),e(DT,jdr),e(DT,UW),e(UW,Ddr),e(DT,Gdr),e(co,Odr),e(co,GT),e(GT,Vdr),e(GT,ave),e(ave,Xdr),e(GT,zdr),e(GT,nve),e(nve,Qdr),e(co,Wdr),M(OT,co,null),b(f,lze,u),b(f,Ld,u),e(Ld,VT),e(VT,sve),M(Wy,sve,null),e(Ld,Hdr),e(Ld,lve),e(lve,Udr),b(f,ize,u),b(f,Xo,u),M(Hy,Xo,null),e(Xo,Jdr),e(Xo,yd),e(yd,Ydr),e(yd,JW),e(JW,Kdr),e(yd,Zdr),e(yd,YW),e(YW,ecr),e(yd,ocr),e(Xo,rcr),e(Xo,Uy),e(Uy,tcr),e(Uy,ive),e(ive,acr),e(Uy,ncr),e(Xo,scr),e(Xo,Mt),M(Jy,Mt,null),e(Mt,lcr),e(Mt,dve),e(dve,icr),e(Mt,dcr),e(Mt,xd),e(xd,ccr),e(xd,cve),e(cve,fcr),e(xd,mcr),e(xd,KW),e(KW,gcr),e(xd,hcr),e(Mt,pcr),M(XT,Mt,null),e(Xo,_cr),e(Xo,fo),M(Yy,fo,null),e(fo,ucr),e(fo,fve),e(fve,bcr),e(fo,vcr),e(fo,Ua),e(Ua,Fcr),e(Ua,mve),e(mve,Tcr),e(Ua,Mcr),e(Ua,gve),e(gve,Ecr),e(Ua,Ccr),e(Ua,hve),e(hve,wcr),e(Ua,Acr),e(fo,Lcr),e(fo,pve),e(pve,zT),e(zT,_ve),e(_ve,ycr),e(zT,xcr),e(zT,ZW),e(ZW,$cr),e(zT,kcr),e(fo,Scr),e(fo,QT),e(QT,Rcr),e(QT,uve),e(uve,Pcr),e(QT,Bcr),e(QT,bve),e(bve,Ncr),e(fo,Icr),M(WT,fo,null),b(f,dze,u),b(f,$d,u),e($d,HT),e(HT,vve),M(Ky,vve,null),e($d,qcr),e($d,Fve),e(Fve,jcr),b(f,cze,u),b(f,zo,u),M(Zy,zo,null),e(zo,Dcr),e(zo,kd),e(kd,Gcr),e(kd,eH),e(eH,Ocr),e(kd,Vcr),e(kd,oH),e(oH,Xcr),e(kd,zcr),e(zo,Qcr),e(zo,e9),e(e9,Wcr),e(e9,Tve),e(Tve,Hcr),e(e9,Ucr),e(zo,Jcr),e(zo,Et),M(o9,Et,null),e(Et,Ycr),e(Et,Mve),e(Mve,Kcr),e(Et,Zcr),e(Et,Sd),e(Sd,efr),e(Sd,Eve),e(Eve,ofr),e(Sd,rfr),e(Sd,rH),e(rH,tfr),e(Sd,afr),e(Et,nfr),M(UT,Et,null),e(zo,sfr),e(zo,mo),M(r9,mo,null),e(mo,lfr),e(mo,Cve),e(Cve,ifr),e(mo,dfr),e(mo,Ja),e(Ja,cfr),e(Ja,wve),e(wve,ffr),e(Ja,mfr),e(Ja,Ave),e(Ave,gfr),e(Ja,hfr),e(Ja,Lve),e(Lve,pfr),e(Ja,_fr),e(mo,ufr),e(mo,Pe),e(Pe,JT),e(JT,yve),e(yve,bfr),e(JT,vfr),e(JT,tH),e(tH,Ffr),e(JT,Tfr),e(Pe,Mfr),e(Pe,YT),e(YT,xve),e(xve,Efr),e(YT,Cfr),e(YT,aH),e(aH,wfr),e(YT,Afr),e(Pe,Lfr),e(Pe,KT),e(KT,$ve),e($ve,yfr),e(KT,xfr),e(KT,nH),e(nH,$fr),e(KT,kfr),e(Pe,Sfr),e(Pe,ZT),e(ZT,kve),e(kve,Rfr),e(ZT,Pfr),e(ZT,sH),e(sH,Bfr),e(ZT,Nfr),e(Pe,Ifr),e(Pe,e7),e(e7,Sve),e(Sve,qfr),e(e7,jfr),e(e7,lH),e(lH,Dfr),e(e7,Gfr),e(Pe,Ofr),e(Pe,o7),e(o7,Rve),e(Rve,Vfr),e(o7,Xfr),e(o7,iH),e(iH,zfr),e(o7,Qfr),e(Pe,Wfr),e(Pe,r7),e(r7,Pve),e(Pve,Hfr),e(r7,Ufr),e(r7,dH),e(dH,Jfr),e(r7,Yfr),e(Pe,Kfr),e(Pe,t7),e(t7,Bve),e(Bve,Zfr),e(t7,emr),e(t7,cH),e(cH,omr),e(t7,rmr),e(Pe,tmr),e(Pe,a7),e(a7,Nve),e(Nve,amr),e(a7,nmr),e(a7,fH),e(fH,smr),e(a7,lmr),e(mo,imr),e(mo,n7),e(n7,dmr),e(n7,Ive),e(Ive,cmr),e(n7,fmr),e(n7,qve),e(qve,mmr),e(mo,gmr),M(s7,mo,null),b(f,fze,u),b(f,Rd,u),e(Rd,l7),e(l7,jve),M(t9,jve,null),e(Rd,hmr),e(Rd,Dve),e(Dve,pmr),b(f,mze,u),b(f,Qo,u),M(a9,Qo,null),e(Qo,_mr),e(Qo,Pd),e(Pd,umr),e(Pd,mH),e(mH,bmr),e(Pd,vmr),e(Pd,gH),e(gH,Fmr),e(Pd,Tmr),e(Qo,Mmr),e(Qo,n9),e(n9,Emr),e(n9,Gve),e(Gve,Cmr),e(n9,wmr),e(Qo,Amr),e(Qo,Ct),M(s9,Ct,null),e(Ct,Lmr),e(Ct,Ove),e(Ove,ymr),e(Ct,xmr),e(Ct,Bd),e(Bd,$mr),e(Bd,Vve),e(Vve,kmr),e(Bd,Smr),e(Bd,hH),e(hH,Rmr),e(Bd,Pmr),e(Ct,Bmr),M(i7,Ct,null),e(Qo,Nmr),e(Qo,go),M(l9,go,null),e(go,Imr),e(go,Xve),e(Xve,qmr),e(go,jmr),e(go,Ya),e(Ya,Dmr),e(Ya,zve),e(zve,Gmr),e(Ya,Omr),e(Ya,Qve),e(Qve,Vmr),e(Ya,Xmr),e(Ya,Wve),e(Wve,zmr),e(Ya,Qmr),e(go,Wmr),e(go,rt),e(rt,d7),e(d7,Hve),e(Hve,Hmr),e(d7,Umr),e(d7,pH),e(pH,Jmr),e(d7,Ymr),e(rt,Kmr),e(rt,c7),e(c7,Uve),e(Uve,Zmr),e(c7,egr),e(c7,_H),e(_H,ogr),e(c7,rgr),e(rt,tgr),e(rt,f7),e(f7,Jve),e(Jve,agr),e(f7,ngr),e(f7,uH),e(uH,sgr),e(f7,lgr),e(rt,igr),e(rt,m7),e(m7,Yve),e(Yve,dgr),e(m7,cgr),e(m7,bH),e(bH,fgr),e(m7,mgr),e(rt,ggr),e(rt,g7),e(g7,Kve),e(Kve,hgr),e(g7,pgr),e(g7,vH),e(vH,_gr),e(g7,ugr),e(go,bgr),e(go,h7),e(h7,vgr),e(h7,Zve),e(Zve,Fgr),e(h7,Tgr),e(h7,eFe),e(eFe,Mgr),e(go,Egr),M(p7,go,null),b(f,gze,u),b(f,Nd,u),e(Nd,_7),e(_7,oFe),M(i9,oFe,null),e(Nd,Cgr),e(Nd,rFe),e(rFe,wgr),b(f,hze,u),b(f,Wo,u),M(d9,Wo,null),e(Wo,Agr),e(Wo,Id),e(Id,Lgr),e(Id,FH),e(FH,ygr),e(Id,xgr),e(Id,TH),e(TH,$gr),e(Id,kgr),e(Wo,Sgr),e(Wo,c9),e(c9,Rgr),e(c9,tFe),e(tFe,Pgr),e(c9,Bgr),e(Wo,Ngr),e(Wo,wt),M(f9,wt,null),e(wt,Igr),e(wt,aFe),e(aFe,qgr),e(wt,jgr),e(wt,qd),e(qd,Dgr),e(qd,nFe),e(nFe,Ggr),e(qd,Ogr),e(qd,MH),e(MH,Vgr),e(qd,Xgr),e(wt,zgr),M(u7,wt,null),e(Wo,Qgr),e(Wo,ho),M(m9,ho,null),e(ho,Wgr),e(ho,sFe),e(sFe,Hgr),e(ho,Ugr),e(ho,Ka),e(Ka,Jgr),e(Ka,lFe),e(lFe,Ygr),e(Ka,Kgr),e(Ka,iFe),e(iFe,Zgr),e(Ka,ehr),e(Ka,dFe),e(dFe,ohr),e(Ka,rhr),e(ho,thr),e(ho,Le),e(Le,b7),e(b7,cFe),e(cFe,ahr),e(b7,nhr),e(b7,EH),e(EH,shr),e(b7,lhr),e(Le,ihr),e(Le,v7),e(v7,fFe),e(fFe,dhr),e(v7,chr),e(v7,CH),e(CH,fhr),e(v7,mhr),e(Le,ghr),e(Le,F7),e(F7,mFe),e(mFe,hhr),e(F7,phr),e(F7,wH),e(wH,_hr),e(F7,uhr),e(Le,bhr),e(Le,T7),e(T7,gFe),e(gFe,vhr),e(T7,Fhr),e(T7,AH),e(AH,Thr),e(T7,Mhr),e(Le,Ehr),e(Le,M7),e(M7,hFe),e(hFe,Chr),e(M7,whr),e(M7,LH),e(LH,Ahr),e(M7,Lhr),e(Le,yhr),e(Le,E7),e(E7,pFe),e(pFe,xhr),e(E7,$hr),e(E7,yH),e(yH,khr),e(E7,Shr),e(Le,Rhr),e(Le,C7),e(C7,_Fe),e(_Fe,Phr),e(C7,Bhr),e(C7,xH),e(xH,Nhr),e(C7,Ihr),e(Le,qhr),e(Le,w7),e(w7,uFe),e(uFe,jhr),e(w7,Dhr),e(w7,$H),e($H,Ghr),e(w7,Ohr),e(Le,Vhr),e(Le,A7),e(A7,bFe),e(bFe,Xhr),e(A7,zhr),e(A7,kH),e(kH,Qhr),e(A7,Whr),e(Le,Hhr),e(Le,L7),e(L7,vFe),e(vFe,Uhr),e(L7,Jhr),e(L7,SH),e(SH,Yhr),e(L7,Khr),e(ho,Zhr),e(ho,y7),e(y7,epr),e(y7,FFe),e(FFe,opr),e(y7,rpr),e(y7,TFe),e(TFe,tpr),e(ho,apr),M(x7,ho,null),b(f,pze,u),b(f,jd,u),e(jd,$7),e($7,MFe),M(g9,MFe,null),e(jd,npr),e(jd,EFe),e(EFe,spr),b(f,_ze,u),b(f,Ho,u),M(h9,Ho,null),e(Ho,lpr),e(Ho,Dd),e(Dd,ipr),e(Dd,RH),e(RH,dpr),e(Dd,cpr),e(Dd,PH),e(PH,fpr),e(Dd,mpr),e(Ho,gpr),e(Ho,p9),e(p9,hpr),e(p9,CFe),e(CFe,ppr),e(p9,_pr),e(Ho,upr),e(Ho,At),M(_9,At,null),e(At,bpr),e(At,wFe),e(wFe,vpr),e(At,Fpr),e(At,Gd),e(Gd,Tpr),e(Gd,AFe),e(AFe,Mpr),e(Gd,Epr),e(Gd,BH),e(BH,Cpr),e(Gd,wpr),e(At,Apr),M(k7,At,null),e(Ho,Lpr),e(Ho,po),M(u9,po,null),e(po,ypr),e(po,LFe),e(LFe,xpr),e(po,$pr),e(po,Za),e(Za,kpr),e(Za,yFe),e(yFe,Spr),e(Za,Rpr),e(Za,xFe),e(xFe,Ppr),e(Za,Bpr),e(Za,$Fe),e($Fe,Npr),e(Za,Ipr),e(po,qpr),e(po,b9),e(b9,S7),e(S7,kFe),e(kFe,jpr),e(S7,Dpr),e(S7,NH),e(NH,Gpr),e(S7,Opr),e(b9,Vpr),e(b9,R7),e(R7,SFe),e(SFe,Xpr),e(R7,zpr),e(R7,IH),e(IH,Qpr),e(R7,Wpr),e(po,Hpr),e(po,P7),e(P7,Upr),e(P7,RFe),e(RFe,Jpr),e(P7,Ypr),e(P7,PFe),e(PFe,Kpr),e(po,Zpr),M(B7,po,null),b(f,uze,u),b(f,Od,u),e(Od,N7),e(N7,BFe),M(v9,BFe,null),e(Od,e_r),e(Od,NFe),e(NFe,o_r),b(f,bze,u),b(f,Uo,u),M(F9,Uo,null),e(Uo,r_r),e(Uo,Vd),e(Vd,t_r),e(Vd,qH),e(qH,a_r),e(Vd,n_r),e(Vd,jH),e(jH,s_r),e(Vd,l_r),e(Uo,i_r),e(Uo,T9),e(T9,d_r),e(T9,IFe),e(IFe,c_r),e(T9,f_r),e(Uo,m_r),e(Uo,Lt),M(M9,Lt,null),e(Lt,g_r),e(Lt,qFe),e(qFe,h_r),e(Lt,p_r),e(Lt,Xd),e(Xd,__r),e(Xd,jFe),e(jFe,u_r),e(Xd,b_r),e(Xd,DH),e(DH,v_r),e(Xd,F_r),e(Lt,T_r),M(I7,Lt,null),e(Uo,M_r),e(Uo,_o),M(E9,_o,null),e(_o,E_r),e(_o,DFe),e(DFe,C_r),e(_o,w_r),e(_o,en),e(en,A_r),e(en,GFe),e(GFe,L_r),e(en,y_r),e(en,OFe),e(OFe,x_r),e(en,$_r),e(en,VFe),e(VFe,k_r),e(en,S_r),e(_o,R_r),e(_o,tt),e(tt,q7),e(q7,XFe),e(XFe,P_r),e(q7,B_r),e(q7,GH),e(GH,N_r),e(q7,I_r),e(tt,q_r),e(tt,j7),e(j7,zFe),e(zFe,j_r),e(j7,D_r),e(j7,OH),e(OH,G_r),e(j7,O_r),e(tt,V_r),e(tt,D7),e(D7,QFe),e(QFe,X_r),e(D7,z_r),e(D7,VH),e(VH,Q_r),e(D7,W_r),e(tt,H_r),e(tt,G7),e(G7,WFe),e(WFe,U_r),e(G7,J_r),e(G7,XH),e(XH,Y_r),e(G7,K_r),e(tt,Z_r),e(tt,O7),e(O7,HFe),e(HFe,eur),e(O7,our),e(O7,zH),e(zH,rur),e(O7,tur),e(_o,aur),e(_o,V7),e(V7,nur),e(V7,UFe),e(UFe,sur),e(V7,lur),e(V7,JFe),e(JFe,iur),e(_o,dur),M(X7,_o,null),b(f,vze,u),b(f,zd,u),e(zd,z7),e(z7,YFe),M(C9,YFe,null),e(zd,cur),e(zd,KFe),e(KFe,fur),b(f,Fze,u),b(f,Jo,u),M(w9,Jo,null),e(Jo,mur),e(Jo,Qd),e(Qd,gur),e(Qd,QH),e(QH,hur),e(Qd,pur),e(Qd,WH),e(WH,_ur),e(Qd,uur),e(Jo,bur),e(Jo,A9),e(A9,vur),e(A9,ZFe),e(ZFe,Fur),e(A9,Tur),e(Jo,Mur),e(Jo,yt),M(L9,yt,null),e(yt,Eur),e(yt,e6e),e(e6e,Cur),e(yt,wur),e(yt,Wd),e(Wd,Aur),e(Wd,o6e),e(o6e,Lur),e(Wd,yur),e(Wd,HH),e(HH,xur),e(Wd,$ur),e(yt,kur),M(Q7,yt,null),e(Jo,Sur),e(Jo,uo),M(y9,uo,null),e(uo,Rur),e(uo,r6e),e(r6e,Pur),e(uo,Bur),e(uo,on),e(on,Nur),e(on,t6e),e(t6e,Iur),e(on,qur),e(on,a6e),e(a6e,jur),e(on,Dur),e(on,n6e),e(n6e,Gur),e(on,Our),e(uo,Vur),e(uo,Hd),e(Hd,W7),e(W7,s6e),e(s6e,Xur),e(W7,zur),e(W7,UH),e(UH,Qur),e(W7,Wur),e(Hd,Hur),e(Hd,H7),e(H7,l6e),e(l6e,Uur),e(H7,Jur),e(H7,JH),e(JH,Yur),e(H7,Kur),e(Hd,Zur),e(Hd,U7),e(U7,i6e),e(i6e,e2r),e(U7,o2r),e(U7,YH),e(YH,r2r),e(U7,t2r),e(uo,a2r),e(uo,J7),e(J7,n2r),e(J7,d6e),e(d6e,s2r),e(J7,l2r),e(J7,c6e),e(c6e,i2r),e(uo,d2r),M(Y7,uo,null),b(f,Tze,u),b(f,Ud,u),e(Ud,K7),e(K7,f6e),M(x9,f6e,null),e(Ud,c2r),e(Ud,m6e),e(m6e,f2r),b(f,Mze,u),b(f,Yo,u),M($9,Yo,null),e(Yo,m2r),e(Yo,Jd),e(Jd,g2r),e(Jd,KH),e(KH,h2r),e(Jd,p2r),e(Jd,ZH),e(ZH,_2r),e(Jd,u2r),e(Yo,b2r),e(Yo,k9),e(k9,v2r),e(k9,g6e),e(g6e,F2r),e(k9,T2r),e(Yo,M2r),e(Yo,xt),M(S9,xt,null),e(xt,E2r),e(xt,h6e),e(h6e,C2r),e(xt,w2r),e(xt,Yd),e(Yd,A2r),e(Yd,p6e),e(p6e,L2r),e(Yd,y2r),e(Yd,eU),e(eU,x2r),e(Yd,$2r),e(xt,k2r),M(Z7,xt,null),e(Yo,S2r),e(Yo,bo),M(R9,bo,null),e(bo,R2r),e(bo,_6e),e(_6e,P2r),e(bo,B2r),e(bo,rn),e(rn,N2r),e(rn,u6e),e(u6e,I2r),e(rn,q2r),e(rn,b6e),e(b6e,j2r),e(rn,D2r),e(rn,v6e),e(v6e,G2r),e(rn,O2r),e(bo,V2r),e(bo,P9),e(P9,e8),e(e8,F6e),e(F6e,X2r),e(e8,z2r),e(e8,oU),e(oU,Q2r),e(e8,W2r),e(P9,H2r),e(P9,o8),e(o8,T6e),e(T6e,U2r),e(o8,J2r),e(o8,rU),e(rU,Y2r),e(o8,K2r),e(bo,Z2r),e(bo,r8),e(r8,e1r),e(r8,M6e),e(M6e,o1r),e(r8,r1r),e(r8,E6e),e(E6e,t1r),e(bo,a1r),M(t8,bo,null),b(f,Eze,u),b(f,Kd,u),e(Kd,a8),e(a8,C6e),M(B9,C6e,null),e(Kd,n1r),e(Kd,w6e),e(w6e,s1r),b(f,Cze,u),b(f,Ko,u),M(N9,Ko,null),e(Ko,l1r),e(Ko,Zd),e(Zd,i1r),e(Zd,tU),e(tU,d1r),e(Zd,c1r),e(Zd,aU),e(aU,f1r),e(Zd,m1r),e(Ko,g1r),e(Ko,I9),e(I9,h1r),e(I9,A6e),e(A6e,p1r),e(I9,_1r),e(Ko,u1r),e(Ko,$t),M(q9,$t,null),e($t,b1r),e($t,L6e),e(L6e,v1r),e($t,F1r),e($t,ec),e(ec,T1r),e(ec,y6e),e(y6e,M1r),e(ec,E1r),e(ec,nU),e(nU,C1r),e(ec,w1r),e($t,A1r),M(n8,$t,null),e(Ko,L1r),e(Ko,vo),M(j9,vo,null),e(vo,y1r),e(vo,x6e),e(x6e,x1r),e(vo,$1r),e(vo,tn),e(tn,k1r),e(tn,$6e),e($6e,S1r),e(tn,R1r),e(tn,k6e),e(k6e,P1r),e(tn,B1r),e(tn,S6e),e(S6e,N1r),e(tn,I1r),e(vo,q1r),e(vo,R6e),e(R6e,s8),e(s8,P6e),e(P6e,j1r),e(s8,D1r),e(s8,sU),e(sU,G1r),e(s8,O1r),e(vo,V1r),e(vo,l8),e(l8,X1r),e(l8,B6e),e(B6e,z1r),e(l8,Q1r),e(l8,N6e),e(N6e,W1r),e(vo,H1r),M(i8,vo,null),b(f,wze,u),b(f,oc,u),e(oc,d8),e(d8,I6e),M(D9,I6e,null),e(oc,U1r),e(oc,q6e),e(q6e,J1r),b(f,Aze,u),b(f,Zo,u),M(G9,Zo,null),e(Zo,Y1r),e(Zo,rc),e(rc,K1r),e(rc,lU),e(lU,Z1r),e(rc,ebr),e(rc,iU),e(iU,obr),e(rc,rbr),e(Zo,tbr),e(Zo,O9),e(O9,abr),e(O9,j6e),e(j6e,nbr),e(O9,sbr),e(Zo,lbr),e(Zo,kt),M(V9,kt,null),e(kt,ibr),e(kt,D6e),e(D6e,dbr),e(kt,cbr),e(kt,tc),e(tc,fbr),e(tc,G6e),e(G6e,mbr),e(tc,gbr),e(tc,dU),e(dU,hbr),e(tc,pbr),e(kt,_br),M(c8,kt,null),e(Zo,ubr),e(Zo,Fo),M(X9,Fo,null),e(Fo,bbr),e(Fo,O6e),e(O6e,vbr),e(Fo,Fbr),e(Fo,an),e(an,Tbr),e(an,V6e),e(V6e,Mbr),e(an,Ebr),e(an,X6e),e(X6e,Cbr),e(an,wbr),e(an,z6e),e(z6e,Abr),e(an,Lbr),e(Fo,ybr),e(Fo,at),e(at,f8),e(f8,Q6e),e(Q6e,xbr),e(f8,$br),e(f8,cU),e(cU,kbr),e(f8,Sbr),e(at,Rbr),e(at,m8),e(m8,W6e),e(W6e,Pbr),e(m8,Bbr),e(m8,fU),e(fU,Nbr),e(m8,Ibr),e(at,qbr),e(at,g8),e(g8,H6e),e(H6e,jbr),e(g8,Dbr),e(g8,mU),e(mU,Gbr),e(g8,Obr),e(at,Vbr),e(at,h8),e(h8,U6e),e(U6e,Xbr),e(h8,zbr),e(h8,gU),e(gU,Qbr),e(h8,Wbr),e(at,Hbr),e(at,p8),e(p8,J6e),e(J6e,Ubr),e(p8,Jbr),e(p8,hU),e(hU,Ybr),e(p8,Kbr),e(Fo,Zbr),e(Fo,_8),e(_8,evr),e(_8,Y6e),e(Y6e,ovr),e(_8,rvr),e(_8,K6e),e(K6e,tvr),e(Fo,avr),M(u8,Fo,null),b(f,Lze,u),b(f,ac,u),e(ac,b8),e(b8,Z6e),M(z9,Z6e,null),e(ac,nvr),e(ac,eTe),e(eTe,svr),b(f,yze,u),b(f,er,u),M(Q9,er,null),e(er,lvr),e(er,nc),e(nc,ivr),e(nc,pU),e(pU,dvr),e(nc,cvr),e(nc,_U),e(_U,fvr),e(nc,mvr),e(er,gvr),e(er,W9),e(W9,hvr),e(W9,oTe),e(oTe,pvr),e(W9,_vr),e(er,uvr),e(er,St),M(H9,St,null),e(St,bvr),e(St,rTe),e(rTe,vvr),e(St,Fvr),e(St,sc),e(sc,Tvr),e(sc,tTe),e(tTe,Mvr),e(sc,Evr),e(sc,uU),e(uU,Cvr),e(sc,wvr),e(St,Avr),M(v8,St,null),e(er,Lvr),e(er,To),M(U9,To,null),e(To,yvr),e(To,aTe),e(aTe,xvr),e(To,$vr),e(To,nn),e(nn,kvr),e(nn,nTe),e(nTe,Svr),e(nn,Rvr),e(nn,sTe),e(sTe,Pvr),e(nn,Bvr),e(nn,lTe),e(lTe,Nvr),e(nn,Ivr),e(To,qvr),e(To,iTe),e(iTe,F8),e(F8,dTe),e(dTe,jvr),e(F8,Dvr),e(F8,bU),e(bU,Gvr),e(F8,Ovr),e(To,Vvr),e(To,T8),e(T8,Xvr),e(T8,cTe),e(cTe,zvr),e(T8,Qvr),e(T8,fTe),e(fTe,Wvr),e(To,Hvr),M(M8,To,null),b(f,xze,u),b(f,lc,u),e(lc,E8),e(E8,mTe),M(J9,mTe,null),e(lc,Uvr),e(lc,gTe),e(gTe,Jvr),b(f,$ze,u),b(f,or,u),M(Y9,or,null),e(or,Yvr),e(or,ic),e(ic,Kvr),e(ic,vU),e(vU,Zvr),e(ic,eFr),e(ic,FU),e(FU,oFr),e(ic,rFr),e(or,tFr),e(or,K9),e(K9,aFr),e(K9,hTe),e(hTe,nFr),e(K9,sFr),e(or,lFr),e(or,Rt),M(Z9,Rt,null),e(Rt,iFr),e(Rt,pTe),e(pTe,dFr),e(Rt,cFr),e(Rt,dc),e(dc,fFr),e(dc,_Te),e(_Te,mFr),e(dc,gFr),e(dc,TU),e(TU,hFr),e(dc,pFr),e(Rt,_Fr),M(C8,Rt,null),e(or,uFr),e(or,xr),M(ex,xr,null),e(xr,bFr),e(xr,uTe),e(uTe,vFr),e(xr,FFr),e(xr,sn),e(sn,TFr),e(sn,bTe),e(bTe,MFr),e(sn,EFr),e(sn,vTe),e(vTe,CFr),e(sn,wFr),e(sn,FTe),e(FTe,AFr),e(sn,LFr),e(xr,yFr),e(xr,q),e(q,w8),e(w8,TTe),e(TTe,xFr),e(w8,$Fr),e(w8,MU),e(MU,kFr),e(w8,SFr),e(q,RFr),e(q,A8),e(A8,MTe),e(MTe,PFr),e(A8,BFr),e(A8,EU),e(EU,NFr),e(A8,IFr),e(q,qFr),e(q,L8),e(L8,ETe),e(ETe,jFr),e(L8,DFr),e(L8,CU),e(CU,GFr),e(L8,OFr),e(q,VFr),e(q,y8),e(y8,CTe),e(CTe,XFr),e(y8,zFr),e(y8,wU),e(wU,QFr),e(y8,WFr),e(q,HFr),e(q,x8),e(x8,wTe),e(wTe,UFr),e(x8,JFr),e(x8,AU),e(AU,YFr),e(x8,KFr),e(q,ZFr),e(q,$8),e($8,ATe),e(ATe,e6r),e($8,o6r),e($8,LU),e(LU,r6r),e($8,t6r),e(q,a6r),e(q,k8),e(k8,LTe),e(LTe,n6r),e(k8,s6r),e(k8,yU),e(yU,l6r),e(k8,i6r),e(q,d6r),e(q,S8),e(S8,yTe),e(yTe,c6r),e(S8,f6r),e(S8,xU),e(xU,m6r),e(S8,g6r),e(q,h6r),e(q,R8),e(R8,xTe),e(xTe,p6r),e(R8,_6r),e(R8,$U),e($U,u6r),e(R8,b6r),e(q,v6r),e(q,P8),e(P8,$Te),e($Te,F6r),e(P8,T6r),e(P8,kU),e(kU,M6r),e(P8,E6r),e(q,C6r),e(q,B8),e(B8,kTe),e(kTe,w6r),e(B8,A6r),e(B8,SU),e(SU,L6r),e(B8,y6r),e(q,x6r),e(q,N8),e(N8,STe),e(STe,$6r),e(N8,k6r),e(N8,RU),e(RU,S6r),e(N8,R6r),e(q,P6r),e(q,I8),e(I8,RTe),e(RTe,B6r),e(I8,N6r),e(I8,PU),e(PU,I6r),e(I8,q6r),e(q,j6r),e(q,q8),e(q8,PTe),e(PTe,D6r),e(q8,G6r),e(q8,BU),e(BU,O6r),e(q8,V6r),e(q,X6r),e(q,j8),e(j8,BTe),e(BTe,z6r),e(j8,Q6r),e(j8,NU),e(NU,W6r),e(j8,H6r),e(q,U6r),e(q,D8),e(D8,NTe),e(NTe,J6r),e(D8,Y6r),e(D8,IU),e(IU,K6r),e(D8,Z6r),e(q,eTr),e(q,G8),e(G8,ITe),e(ITe,oTr),e(G8,rTr),e(G8,qU),e(qU,tTr),e(G8,aTr),e(q,nTr),e(q,O8),e(O8,qTe),e(qTe,sTr),e(O8,lTr),e(O8,jU),e(jU,iTr),e(O8,dTr),e(q,cTr),e(q,Ys),e(Ys,jTe),e(jTe,fTr),e(Ys,mTr),e(Ys,DU),e(DU,gTr),e(Ys,hTr),e(Ys,GU),e(GU,pTr),e(Ys,_Tr),e(q,uTr),e(q,V8),e(V8,DTe),e(DTe,bTr),e(V8,vTr),e(V8,OU),e(OU,FTr),e(V8,TTr),e(q,MTr),e(q,X8),e(X8,GTe),e(GTe,ETr),e(X8,CTr),e(X8,VU),e(VU,wTr),e(X8,ATr),e(q,LTr),e(q,z8),e(z8,OTe),e(OTe,yTr),e(z8,xTr),e(z8,XU),e(XU,$Tr),e(z8,kTr),e(q,STr),e(q,Q8),e(Q8,VTe),e(VTe,RTr),e(Q8,PTr),e(Q8,zU),e(zU,BTr),e(Q8,NTr),e(q,ITr),e(q,W8),e(W8,XTe),e(XTe,qTr),e(W8,jTr),e(W8,QU),e(QU,DTr),e(W8,GTr),e(q,OTr),e(q,H8),e(H8,zTe),e(zTe,VTr),e(H8,XTr),e(H8,WU),e(WU,zTr),e(H8,QTr),e(q,WTr),e(q,U8),e(U8,QTe),e(QTe,HTr),e(U8,UTr),e(U8,HU),e(HU,JTr),e(U8,YTr),e(q,KTr),e(q,J8),e(J8,WTe),e(WTe,ZTr),e(J8,e7r),e(J8,UU),e(UU,o7r),e(J8,r7r),e(q,t7r),e(q,Y8),e(Y8,HTe),e(HTe,a7r),e(Y8,n7r),e(Y8,JU),e(JU,s7r),e(Y8,l7r),e(q,i7r),e(q,K8),e(K8,UTe),e(UTe,d7r),e(K8,c7r),e(K8,YU),e(YU,f7r),e(K8,m7r),e(q,g7r),e(q,Z8),e(Z8,JTe),e(JTe,h7r),e(Z8,p7r),e(Z8,KU),e(KU,_7r),e(Z8,u7r),e(q,b7r),e(q,eM),e(eM,YTe),e(YTe,v7r),e(eM,F7r),e(eM,ZU),e(ZU,T7r),e(eM,M7r),e(q,E7r),e(q,oM),e(oM,KTe),e(KTe,C7r),e(oM,w7r),e(oM,eJ),e(eJ,A7r),e(oM,L7r),e(q,y7r),e(q,rM),e(rM,ZTe),e(ZTe,x7r),e(rM,$7r),e(rM,oJ),e(oJ,k7r),e(rM,S7r),e(q,R7r),e(q,tM),e(tM,e7e),e(e7e,P7r),e(tM,B7r),e(tM,rJ),e(rJ,N7r),e(tM,I7r),e(q,q7r),e(q,aM),e(aM,o7e),e(o7e,j7r),e(aM,D7r),e(aM,tJ),e(tJ,G7r),e(aM,O7r),e(q,V7r),e(q,nM),e(nM,r7e),e(r7e,X7r),e(nM,z7r),e(nM,aJ),e(aJ,Q7r),e(nM,W7r),e(q,H7r),e(q,sM),e(sM,t7e),e(t7e,U7r),e(sM,J7r),e(sM,nJ),e(nJ,Y7r),e(sM,K7r),e(q,Z7r),e(q,lM),e(lM,a7e),e(a7e,e8r),e(lM,o8r),e(lM,sJ),e(sJ,r8r),e(lM,t8r),e(q,a8r),e(q,iM),e(iM,n7e),e(n7e,n8r),e(iM,s8r),e(iM,lJ),e(lJ,l8r),e(iM,i8r),e(q,d8r),e(q,dM),e(dM,s7e),e(s7e,c8r),e(dM,f8r),e(dM,iJ),e(iJ,m8r),e(dM,g8r),e(q,h8r),e(q,cM),e(cM,l7e),e(l7e,p8r),e(cM,_8r),e(cM,dJ),e(dJ,u8r),e(cM,b8r),e(q,v8r),e(q,fM),e(fM,i7e),e(i7e,F8r),e(fM,T8r),e(fM,cJ),e(cJ,M8r),e(fM,E8r),e(q,C8r),e(q,mM),e(mM,d7e),e(d7e,w8r),e(mM,A8r),e(mM,fJ),e(fJ,L8r),e(mM,y8r),e(q,x8r),e(q,gM),e(gM,c7e),e(c7e,$8r),e(gM,k8r),e(gM,mJ),e(mJ,S8r),e(gM,R8r),e(q,P8r),e(q,hM),e(hM,f7e),e(f7e,B8r),e(hM,N8r),e(hM,gJ),e(gJ,I8r),e(hM,q8r),e(q,j8r),e(q,pM),e(pM,m7e),e(m7e,D8r),e(pM,G8r),e(pM,hJ),e(hJ,O8r),e(pM,V8r),e(q,X8r),e(q,_M),e(_M,g7e),e(g7e,z8r),e(_M,Q8r),e(_M,pJ),e(pJ,W8r),e(_M,H8r),e(q,U8r),e(q,uM),e(uM,h7e),e(h7e,J8r),e(uM,Y8r),e(uM,_J),e(_J,K8r),e(uM,Z8r),e(q,eMr),e(q,bM),e(bM,p7e),e(p7e,oMr),e(bM,rMr),e(bM,uJ),e(uJ,tMr),e(bM,aMr),e(q,nMr),e(q,vM),e(vM,_7e),e(_7e,sMr),e(vM,lMr),e(vM,bJ),e(bJ,iMr),e(vM,dMr),e(xr,cMr),M(FM,xr,null),b(f,kze,u),b(f,cc,u),e(cc,TM),e(TM,u7e),M(ox,u7e,null),e(cc,fMr),e(cc,b7e),e(b7e,mMr),b(f,Sze,u),b(f,rr,u),M(rx,rr,null),e(rr,gMr),e(rr,fc),e(fc,hMr),e(fc,vJ),e(vJ,pMr),e(fc,_Mr),e(fc,FJ),e(FJ,uMr),e(fc,bMr),e(rr,vMr),e(rr,tx),e(tx,FMr),e(tx,v7e),e(v7e,TMr),e(tx,MMr),e(rr,EMr),e(rr,Pt),M(ax,Pt,null),e(Pt,CMr),e(Pt,F7e),e(F7e,wMr),e(Pt,AMr),e(Pt,mc),e(mc,LMr),e(mc,T7e),e(T7e,yMr),e(mc,xMr),e(mc,TJ),e(TJ,$Mr),e(mc,kMr),e(Pt,SMr),M(MM,Pt,null),e(rr,RMr),e(rr,$r),M(nx,$r,null),e($r,PMr),e($r,M7e),e(M7e,BMr),e($r,NMr),e($r,ln),e(ln,IMr),e(ln,E7e),e(E7e,qMr),e(ln,jMr),e(ln,C7e),e(C7e,DMr),e(ln,GMr),e(ln,w7e),e(w7e,OMr),e(ln,VMr),e($r,XMr),e($r,se),e(se,EM),e(EM,A7e),e(A7e,zMr),e(EM,QMr),e(EM,MJ),e(MJ,WMr),e(EM,HMr),e(se,UMr),e(se,CM),e(CM,L7e),e(L7e,JMr),e(CM,YMr),e(CM,EJ),e(EJ,KMr),e(CM,ZMr),e(se,e4r),e(se,wM),e(wM,y7e),e(y7e,o4r),e(wM,r4r),e(wM,CJ),e(CJ,t4r),e(wM,a4r),e(se,n4r),e(se,AM),e(AM,x7e),e(x7e,s4r),e(AM,l4r),e(AM,wJ),e(wJ,i4r),e(AM,d4r),e(se,c4r),e(se,LM),e(LM,$7e),e($7e,f4r),e(LM,m4r),e(LM,AJ),e(AJ,g4r),e(LM,h4r),e(se,p4r),e(se,yM),e(yM,k7e),e(k7e,_4r),e(yM,u4r),e(yM,LJ),e(LJ,b4r),e(yM,v4r),e(se,F4r),e(se,xM),e(xM,S7e),e(S7e,T4r),e(xM,M4r),e(xM,yJ),e(yJ,E4r),e(xM,C4r),e(se,w4r),e(se,$M),e($M,R7e),e(R7e,A4r),e($M,L4r),e($M,xJ),e(xJ,y4r),e($M,x4r),e(se,$4r),e(se,kM),e(kM,P7e),e(P7e,k4r),e(kM,S4r),e(kM,$J),e($J,R4r),e(kM,P4r),e(se,B4r),e(se,SM),e(SM,B7e),e(B7e,N4r),e(SM,I4r),e(SM,kJ),e(kJ,q4r),e(SM,j4r),e(se,D4r),e(se,RM),e(RM,N7e),e(N7e,G4r),e(RM,O4r),e(RM,SJ),e(SJ,V4r),e(RM,X4r),e(se,z4r),e(se,PM),e(PM,I7e),e(I7e,Q4r),e(PM,W4r),e(PM,RJ),e(RJ,H4r),e(PM,U4r),e(se,J4r),e(se,BM),e(BM,q7e),e(q7e,Y4r),e(BM,K4r),e(BM,PJ),e(PJ,Z4r),e(BM,eEr),e(se,oEr),e(se,NM),e(NM,j7e),e(j7e,rEr),e(NM,tEr),e(NM,BJ),e(BJ,aEr),e(NM,nEr),e(se,sEr),e(se,IM),e(IM,D7e),e(D7e,lEr),e(IM,iEr),e(IM,NJ),e(NJ,dEr),e(IM,cEr),e(se,fEr),e(se,qM),e(qM,G7e),e(G7e,mEr),e(qM,gEr),e(qM,IJ),e(IJ,hEr),e(qM,pEr),e(se,_Er),e(se,jM),e(jM,O7e),e(O7e,uEr),e(jM,bEr),e(jM,qJ),e(qJ,vEr),e(jM,FEr),e(se,TEr),e(se,DM),e(DM,V7e),e(V7e,MEr),e(DM,EEr),e(DM,jJ),e(jJ,CEr),e(DM,wEr),e(se,AEr),e(se,GM),e(GM,X7e),e(X7e,LEr),e(GM,yEr),e(GM,DJ),e(DJ,xEr),e(GM,$Er),e(se,kEr),e(se,OM),e(OM,z7e),e(z7e,SEr),e(OM,REr),e(OM,GJ),e(GJ,PEr),e(OM,BEr),e(se,NEr),e(se,VM),e(VM,Q7e),e(Q7e,IEr),e(VM,qEr),e(VM,OJ),e(OJ,jEr),e(VM,DEr),e(se,GEr),e(se,XM),e(XM,W7e),e(W7e,OEr),e(XM,VEr),e(XM,VJ),e(VJ,XEr),e(XM,zEr),e(se,QEr),e(se,zM),e(zM,H7e),e(H7e,WEr),e(zM,HEr),e(zM,XJ),e(XJ,UEr),e(zM,JEr),e($r,YEr),M(QM,$r,null),b(f,Rze,u),b(f,gc,u),e(gc,WM),e(WM,U7e),M(sx,U7e,null),e(gc,KEr),e(gc,J7e),e(J7e,ZEr),b(f,Pze,u),b(f,tr,u),M(lx,tr,null),e(tr,eCr),e(tr,hc),e(hc,oCr),e(hc,zJ),e(zJ,rCr),e(hc,tCr),e(hc,QJ),e(QJ,aCr),e(hc,nCr),e(tr,sCr),e(tr,ix),e(ix,lCr),e(ix,Y7e),e(Y7e,iCr),e(ix,dCr),e(tr,cCr),e(tr,Bt),M(dx,Bt,null),e(Bt,fCr),e(Bt,K7e),e(K7e,mCr),e(Bt,gCr),e(Bt,pc),e(pc,hCr),e(pc,Z7e),e(Z7e,pCr),e(pc,_Cr),e(pc,WJ),e(WJ,uCr),e(pc,bCr),e(Bt,vCr),M(HM,Bt,null),e(tr,FCr),e(tr,kr),M(cx,kr,null),e(kr,TCr),e(kr,e8e),e(e8e,MCr),e(kr,ECr),e(kr,dn),e(dn,CCr),e(dn,o8e),e(o8e,wCr),e(dn,ACr),e(dn,r8e),e(r8e,LCr),e(dn,yCr),e(dn,t8e),e(t8e,xCr),e(dn,$Cr),e(kr,kCr),e(kr,Me),e(Me,UM),e(UM,a8e),e(a8e,SCr),e(UM,RCr),e(UM,HJ),e(HJ,PCr),e(UM,BCr),e(Me,NCr),e(Me,JM),e(JM,n8e),e(n8e,ICr),e(JM,qCr),e(JM,UJ),e(UJ,jCr),e(JM,DCr),e(Me,GCr),e(Me,YM),e(YM,s8e),e(s8e,OCr),e(YM,VCr),e(YM,JJ),e(JJ,XCr),e(YM,zCr),e(Me,QCr),e(Me,KM),e(KM,l8e),e(l8e,WCr),e(KM,HCr),e(KM,YJ),e(YJ,UCr),e(KM,JCr),e(Me,YCr),e(Me,ZM),e(ZM,i8e),e(i8e,KCr),e(ZM,ZCr),e(ZM,KJ),e(KJ,e5r),e(ZM,o5r),e(Me,r5r),e(Me,e4),e(e4,d8e),e(d8e,t5r),e(e4,a5r),e(e4,ZJ),e(ZJ,n5r),e(e4,s5r),e(Me,l5r),e(Me,o4),e(o4,c8e),e(c8e,i5r),e(o4,d5r),e(o4,eY),e(eY,c5r),e(o4,f5r),e(Me,m5r),e(Me,r4),e(r4,f8e),e(f8e,g5r),e(r4,h5r),e(r4,oY),e(oY,p5r),e(r4,_5r),e(Me,u5r),e(Me,t4),e(t4,m8e),e(m8e,b5r),e(t4,v5r),e(t4,rY),e(rY,F5r),e(t4,T5r),e(Me,M5r),e(Me,a4),e(a4,g8e),e(g8e,E5r),e(a4,C5r),e(a4,tY),e(tY,w5r),e(a4,A5r),e(Me,L5r),e(Me,n4),e(n4,h8e),e(h8e,y5r),e(n4,x5r),e(n4,aY),e(aY,$5r),e(n4,k5r),e(Me,S5r),e(Me,s4),e(s4,p8e),e(p8e,R5r),e(s4,P5r),e(s4,nY),e(nY,B5r),e(s4,N5r),e(Me,I5r),e(Me,l4),e(l4,_8e),e(_8e,q5r),e(l4,j5r),e(l4,sY),e(sY,D5r),e(l4,G5r),e(kr,O5r),M(i4,kr,null),b(f,Bze,u),b(f,_c,u),e(_c,d4),e(d4,u8e),M(fx,u8e,null),e(_c,V5r),e(_c,b8e),e(b8e,X5r),b(f,Nze,u),b(f,ar,u),M(mx,ar,null),e(ar,z5r),e(ar,uc),e(uc,Q5r),e(uc,lY),e(lY,W5r),e(uc,H5r),e(uc,iY),e(iY,U5r),e(uc,J5r),e(ar,Y5r),e(ar,gx),e(gx,K5r),e(gx,v8e),e(v8e,Z5r),e(gx,e3r),e(ar,o3r),e(ar,Nt),M(hx,Nt,null),e(Nt,r3r),e(Nt,F8e),e(F8e,t3r),e(Nt,a3r),e(Nt,bc),e(bc,n3r),e(bc,T8e),e(T8e,s3r),e(bc,l3r),e(bc,dY),e(dY,i3r),e(bc,d3r),e(Nt,c3r),M(c4,Nt,null),e(ar,f3r),e(ar,Sr),M(px,Sr,null),e(Sr,m3r),e(Sr,M8e),e(M8e,g3r),e(Sr,h3r),e(Sr,cn),e(cn,p3r),e(cn,E8e),e(E8e,_3r),e(cn,u3r),e(cn,C8e),e(C8e,b3r),e(cn,v3r),e(cn,w8e),e(w8e,F3r),e(cn,T3r),e(Sr,M3r),e(Sr,Qe),e(Qe,f4),e(f4,A8e),e(A8e,E3r),e(f4,C3r),e(f4,cY),e(cY,w3r),e(f4,A3r),e(Qe,L3r),e(Qe,m4),e(m4,L8e),e(L8e,y3r),e(m4,x3r),e(m4,fY),e(fY,$3r),e(m4,k3r),e(Qe,S3r),e(Qe,Ks),e(Ks,y8e),e(y8e,R3r),e(Ks,P3r),e(Ks,mY),e(mY,B3r),e(Ks,N3r),e(Ks,gY),e(gY,I3r),e(Ks,q3r),e(Qe,j3r),e(Qe,g4),e(g4,x8e),e(x8e,D3r),e(g4,G3r),e(g4,hY),e(hY,O3r),e(g4,V3r),e(Qe,X3r),e(Qe,h4),e(h4,$8e),e($8e,z3r),e(h4,Q3r),e(h4,pY),e(pY,W3r),e(h4,H3r),e(Qe,U3r),e(Qe,p4),e(p4,k8e),e(k8e,J3r),e(p4,Y3r),e(p4,_Y),e(_Y,K3r),e(p4,Z3r),e(Qe,e0r),e(Qe,_4),e(_4,S8e),e(S8e,o0r),e(_4,r0r),e(_4,uY),e(uY,t0r),e(_4,a0r),e(Sr,n0r),M(u4,Sr,null),b(f,Ize,u),b(f,vc,u),e(vc,b4),e(b4,R8e),M(_x,R8e,null),e(vc,s0r),e(vc,P8e),e(P8e,l0r),b(f,qze,u),b(f,nr,u),M(ux,nr,null),e(nr,i0r),e(nr,Fc),e(Fc,d0r),e(Fc,bY),e(bY,c0r),e(Fc,f0r),e(Fc,vY),e(vY,m0r),e(Fc,g0r),e(nr,h0r),e(nr,bx),e(bx,p0r),e(bx,B8e),e(B8e,_0r),e(bx,u0r),e(nr,b0r),e(nr,It),M(vx,It,null),e(It,v0r),e(It,N8e),e(N8e,F0r),e(It,T0r),e(It,Tc),e(Tc,M0r),e(Tc,I8e),e(I8e,E0r),e(Tc,C0r),e(Tc,FY),e(FY,w0r),e(Tc,A0r),e(It,L0r),M(v4,It,null),e(nr,y0r),e(nr,Rr),M(Fx,Rr,null),e(Rr,x0r),e(Rr,q8e),e(q8e,$0r),e(Rr,k0r),e(Rr,fn),e(fn,S0r),e(fn,j8e),e(j8e,R0r),e(fn,P0r),e(fn,D8e),e(D8e,B0r),e(fn,N0r),e(fn,G8e),e(G8e,I0r),e(fn,q0r),e(Rr,j0r),e(Rr,ie),e(ie,F4),e(F4,O8e),e(O8e,D0r),e(F4,G0r),e(F4,TY),e(TY,O0r),e(F4,V0r),e(ie,X0r),e(ie,T4),e(T4,V8e),e(V8e,z0r),e(T4,Q0r),e(T4,MY),e(MY,W0r),e(T4,H0r),e(ie,U0r),e(ie,M4),e(M4,X8e),e(X8e,J0r),e(M4,Y0r),e(M4,EY),e(EY,K0r),e(M4,Z0r),e(ie,ewr),e(ie,E4),e(E4,z8e),e(z8e,owr),e(E4,rwr),e(E4,CY),e(CY,twr),e(E4,awr),e(ie,nwr),e(ie,C4),e(C4,Q8e),e(Q8e,swr),e(C4,lwr),e(C4,wY),e(wY,iwr),e(C4,dwr),e(ie,cwr),e(ie,w4),e(w4,W8e),e(W8e,fwr),e(w4,mwr),e(w4,AY),e(AY,gwr),e(w4,hwr),e(ie,pwr),e(ie,A4),e(A4,H8e),e(H8e,_wr),e(A4,uwr),e(A4,LY),e(LY,bwr),e(A4,vwr),e(ie,Fwr),e(ie,L4),e(L4,U8e),e(U8e,Twr),e(L4,Mwr),e(L4,yY),e(yY,Ewr),e(L4,Cwr),e(ie,wwr),e(ie,y4),e(y4,J8e),e(J8e,Awr),e(y4,Lwr),e(y4,xY),e(xY,ywr),e(y4,xwr),e(ie,$wr),e(ie,x4),e(x4,Y8e),e(Y8e,kwr),e(x4,Swr),e(x4,$Y),e($Y,Rwr),e(x4,Pwr),e(ie,Bwr),e(ie,$4),e($4,K8e),e(K8e,Nwr),e($4,Iwr),e($4,kY),e(kY,qwr),e($4,jwr),e(ie,Dwr),e(ie,k4),e(k4,Z8e),e(Z8e,Gwr),e(k4,Owr),e(k4,SY),e(SY,Vwr),e(k4,Xwr),e(ie,zwr),e(ie,S4),e(S4,eMe),e(eMe,Qwr),e(S4,Wwr),e(S4,RY),e(RY,Hwr),e(S4,Uwr),e(ie,Jwr),e(ie,R4),e(R4,oMe),e(oMe,Ywr),e(R4,Kwr),e(R4,PY),e(PY,Zwr),e(R4,eAr),e(ie,oAr),e(ie,P4),e(P4,rMe),e(rMe,rAr),e(P4,tAr),e(P4,BY),e(BY,aAr),e(P4,nAr),e(ie,sAr),e(ie,B4),e(B4,tMe),e(tMe,lAr),e(B4,iAr),e(B4,NY),e(NY,dAr),e(B4,cAr),e(ie,fAr),e(ie,N4),e(N4,aMe),e(aMe,mAr),e(N4,gAr),e(N4,IY),e(IY,hAr),e(N4,pAr),e(ie,_Ar),e(ie,I4),e(I4,nMe),e(nMe,uAr),e(I4,bAr),e(I4,qY),e(qY,vAr),e(I4,FAr),e(ie,TAr),e(ie,q4),e(q4,sMe),e(sMe,MAr),e(q4,EAr),e(q4,jY),e(jY,CAr),e(q4,wAr),e(ie,AAr),e(ie,j4),e(j4,lMe),e(lMe,LAr),e(j4,yAr),e(j4,DY),e(DY,xAr),e(j4,$Ar),e(Rr,kAr),M(D4,Rr,null),b(f,jze,u),b(f,Mc,u),e(Mc,G4),e(G4,iMe),M(Tx,iMe,null),e(Mc,SAr),e(Mc,dMe),e(dMe,RAr),b(f,Dze,u),b(f,sr,u),M(Mx,sr,null),e(sr,PAr),e(sr,Ec),e(Ec,BAr),e(Ec,GY),e(GY,NAr),e(Ec,IAr),e(Ec,OY),e(OY,qAr),e(Ec,jAr),e(sr,DAr),e(sr,Ex),e(Ex,GAr),e(Ex,cMe),e(cMe,OAr),e(Ex,VAr),e(sr,XAr),e(sr,qt),M(Cx,qt,null),e(qt,zAr),e(qt,fMe),e(fMe,QAr),e(qt,WAr),e(qt,Cc),e(Cc,HAr),e(Cc,mMe),e(mMe,UAr),e(Cc,JAr),e(Cc,VY),e(VY,YAr),e(Cc,KAr),e(qt,ZAr),M(O4,qt,null),e(sr,eLr),e(sr,Pr),M(wx,Pr,null),e(Pr,oLr),e(Pr,gMe),e(gMe,rLr),e(Pr,tLr),e(Pr,mn),e(mn,aLr),e(mn,hMe),e(hMe,nLr),e(mn,sLr),e(mn,pMe),e(pMe,lLr),e(mn,iLr),e(mn,_Me),e(_Me,dLr),e(mn,cLr),e(Pr,fLr),e(Pr,ye),e(ye,V4),e(V4,uMe),e(uMe,mLr),e(V4,gLr),e(V4,XY),e(XY,hLr),e(V4,pLr),e(ye,_Lr),e(ye,X4),e(X4,bMe),e(bMe,uLr),e(X4,bLr),e(X4,zY),e(zY,vLr),e(X4,FLr),e(ye,TLr),e(ye,z4),e(z4,vMe),e(vMe,MLr),e(z4,ELr),e(z4,QY),e(QY,CLr),e(z4,wLr),e(ye,ALr),e(ye,Q4),e(Q4,FMe),e(FMe,LLr),e(Q4,yLr),e(Q4,WY),e(WY,xLr),e(Q4,$Lr),e(ye,kLr),e(ye,W4),e(W4,TMe),e(TMe,SLr),e(W4,RLr),e(W4,HY),e(HY,PLr),e(W4,BLr),e(ye,NLr),e(ye,H4),e(H4,MMe),e(MMe,ILr),e(H4,qLr),e(H4,UY),e(UY,jLr),e(H4,DLr),e(ye,GLr),e(ye,U4),e(U4,EMe),e(EMe,OLr),e(U4,VLr),e(U4,JY),e(JY,XLr),e(U4,zLr),e(ye,QLr),e(ye,J4),e(J4,CMe),e(CMe,WLr),e(J4,HLr),e(J4,YY),e(YY,ULr),e(J4,JLr),e(ye,YLr),e(ye,Y4),e(Y4,wMe),e(wMe,KLr),e(Y4,ZLr),e(Y4,KY),e(KY,eyr),e(Y4,oyr),e(ye,ryr),e(ye,K4),e(K4,AMe),e(AMe,tyr),e(K4,ayr),e(K4,ZY),e(ZY,nyr),e(K4,syr),e(Pr,lyr),M(Z4,Pr,null),b(f,Gze,u),b(f,wc,u),e(wc,eE),e(eE,LMe),M(Ax,LMe,null),e(wc,iyr),e(wc,yMe),e(yMe,dyr),b(f,Oze,u),b(f,lr,u),M(Lx,lr,null),e(lr,cyr),e(lr,Ac),e(Ac,fyr),e(Ac,eK),e(eK,myr),e(Ac,gyr),e(Ac,oK),e(oK,hyr),e(Ac,pyr),e(lr,_yr),e(lr,yx),e(yx,uyr),e(yx,xMe),e(xMe,byr),e(yx,vyr),e(lr,Fyr),e(lr,jt),M(xx,jt,null),e(jt,Tyr),e(jt,$Me),e($Me,Myr),e(jt,Eyr),e(jt,Lc),e(Lc,Cyr),e(Lc,kMe),e(kMe,wyr),e(Lc,Ayr),e(Lc,rK),e(rK,Lyr),e(Lc,yyr),e(jt,xyr),M(oE,jt,null),e(lr,$yr),e(lr,Br),M($x,Br,null),e(Br,kyr),e(Br,SMe),e(SMe,Syr),e(Br,Ryr),e(Br,gn),e(gn,Pyr),e(gn,RMe),e(RMe,Byr),e(gn,Nyr),e(gn,PMe),e(PMe,Iyr),e(gn,qyr),e(gn,BMe),e(BMe,jyr),e(gn,Dyr),e(Br,Gyr),e(Br,te),e(te,rE),e(rE,NMe),e(NMe,Oyr),e(rE,Vyr),e(rE,tK),e(tK,Xyr),e(rE,zyr),e(te,Qyr),e(te,tE),e(tE,IMe),e(IMe,Wyr),e(tE,Hyr),e(tE,aK),e(aK,Uyr),e(tE,Jyr),e(te,Yyr),e(te,aE),e(aE,qMe),e(qMe,Kyr),e(aE,Zyr),e(aE,nK),e(nK,e9r),e(aE,o9r),e(te,r9r),e(te,nE),e(nE,jMe),e(jMe,t9r),e(nE,a9r),e(nE,sK),e(sK,n9r),e(nE,s9r),e(te,l9r),e(te,sE),e(sE,DMe),e(DMe,i9r),e(sE,d9r),e(sE,lK),e(lK,c9r),e(sE,f9r),e(te,m9r),e(te,lE),e(lE,GMe),e(GMe,g9r),e(lE,h9r),e(lE,iK),e(iK,p9r),e(lE,_9r),e(te,u9r),e(te,iE),e(iE,OMe),e(OMe,b9r),e(iE,v9r),e(iE,dK),e(dK,F9r),e(iE,T9r),e(te,M9r),e(te,dE),e(dE,VMe),e(VMe,E9r),e(dE,C9r),e(dE,cK),e(cK,w9r),e(dE,A9r),e(te,L9r),e(te,cE),e(cE,XMe),e(XMe,y9r),e(cE,x9r),e(cE,fK),e(fK,$9r),e(cE,k9r),e(te,S9r),e(te,fE),e(fE,zMe),e(zMe,R9r),e(fE,P9r),e(fE,mK),e(mK,B9r),e(fE,N9r),e(te,I9r),e(te,mE),e(mE,QMe),e(QMe,q9r),e(mE,j9r),e(mE,gK),e(gK,D9r),e(mE,G9r),e(te,O9r),e(te,gE),e(gE,WMe),e(WMe,V9r),e(gE,X9r),e(gE,hK),e(hK,z9r),e(gE,Q9r),e(te,W9r),e(te,hE),e(hE,HMe),e(HMe,H9r),e(hE,U9r),e(hE,pK),e(pK,J9r),e(hE,Y9r),e(te,K9r),e(te,pE),e(pE,UMe),e(UMe,Z9r),e(pE,exr),e(pE,_K),e(_K,oxr),e(pE,rxr),e(te,txr),e(te,_E),e(_E,JMe),e(JMe,axr),e(_E,nxr),e(_E,uK),e(uK,sxr),e(_E,lxr),e(te,ixr),e(te,uE),e(uE,YMe),e(YMe,dxr),e(uE,cxr),e(uE,bK),e(bK,fxr),e(uE,mxr),e(te,gxr),e(te,bE),e(bE,KMe),e(KMe,hxr),e(bE,pxr),e(bE,vK),e(vK,_xr),e(bE,uxr),e(te,bxr),e(te,vE),e(vE,ZMe),e(ZMe,vxr),e(vE,Fxr),e(vE,FK),e(FK,Txr),e(vE,Mxr),e(te,Exr),e(te,FE),e(FE,e4e),e(e4e,Cxr),e(FE,wxr),e(FE,TK),e(TK,Axr),e(FE,Lxr),e(te,yxr),e(te,TE),e(TE,o4e),e(o4e,xxr),e(TE,$xr),e(TE,MK),e(MK,kxr),e(TE,Sxr),e(te,Rxr),e(te,ME),e(ME,r4e),e(r4e,Pxr),e(ME,Bxr),e(ME,EK),e(EK,Nxr),e(ME,Ixr),e(te,qxr),e(te,EE),e(EE,t4e),e(t4e,jxr),e(EE,Dxr),e(EE,CK),e(CK,Gxr),e(EE,Oxr),e(te,Vxr),e(te,CE),e(CE,a4e),e(a4e,Xxr),e(CE,zxr),e(CE,wK),e(wK,Qxr),e(CE,Wxr),e(te,Hxr),e(te,wE),e(wE,n4e),e(n4e,Uxr),e(wE,Jxr),e(wE,AK),e(AK,Yxr),e(wE,Kxr),e(te,Zxr),e(te,AE),e(AE,s4e),e(s4e,e$r),e(AE,o$r),e(AE,LK),e(LK,r$r),e(AE,t$r),e(te,a$r),e(te,LE),e(LE,l4e),e(l4e,n$r),e(LE,s$r),e(LE,yK),e(yK,l$r),e(LE,i$r),e(Br,d$r),M(yE,Br,null),b(f,Vze,u),b(f,yc,u),e(yc,xE),e(xE,i4e),M(kx,i4e,null),e(yc,c$r),e(yc,d4e),e(d4e,f$r),b(f,Xze,u),b(f,ir,u),M(Sx,ir,null),e(ir,m$r),e(ir,xc),e(xc,g$r),e(xc,xK),e(xK,h$r),e(xc,p$r),e(xc,$K),e($K,_$r),e(xc,u$r),e(ir,b$r),e(ir,Rx),e(Rx,v$r),e(Rx,c4e),e(c4e,F$r),e(Rx,T$r),e(ir,M$r),e(ir,Dt),M(Px,Dt,null),e(Dt,E$r),e(Dt,f4e),e(f4e,C$r),e(Dt,w$r),e(Dt,$c),e($c,A$r),e($c,m4e),e(m4e,L$r),e($c,y$r),e($c,kK),e(kK,x$r),e($c,$$r),e(Dt,k$r),M($E,Dt,null),e(ir,S$r),e(ir,Nr),M(Bx,Nr,null),e(Nr,R$r),e(Nr,g4e),e(g4e,P$r),e(Nr,B$r),e(Nr,hn),e(hn,N$r),e(hn,h4e),e(h4e,I$r),e(hn,q$r),e(hn,p4e),e(p4e,j$r),e(hn,D$r),e(hn,_4e),e(_4e,G$r),e(hn,O$r),e(Nr,V$r),e(Nr,ue),e(ue,kE),e(kE,u4e),e(u4e,X$r),e(kE,z$r),e(kE,SK),e(SK,Q$r),e(kE,W$r),e(ue,H$r),e(ue,SE),e(SE,b4e),e(b4e,U$r),e(SE,J$r),e(SE,RK),e(RK,Y$r),e(SE,K$r),e(ue,Z$r),e(ue,RE),e(RE,v4e),e(v4e,ekr),e(RE,okr),e(RE,PK),e(PK,rkr),e(RE,tkr),e(ue,akr),e(ue,PE),e(PE,F4e),e(F4e,nkr),e(PE,skr),e(PE,BK),e(BK,lkr),e(PE,ikr),e(ue,dkr),e(ue,BE),e(BE,T4e),e(T4e,ckr),e(BE,fkr),e(BE,NK),e(NK,mkr),e(BE,gkr),e(ue,hkr),e(ue,NE),e(NE,M4e),e(M4e,pkr),e(NE,_kr),e(NE,IK),e(IK,ukr),e(NE,bkr),e(ue,vkr),e(ue,IE),e(IE,E4e),e(E4e,Fkr),e(IE,Tkr),e(IE,qK),e(qK,Mkr),e(IE,Ekr),e(ue,Ckr),e(ue,qE),e(qE,C4e),e(C4e,wkr),e(qE,Akr),e(qE,jK),e(jK,Lkr),e(qE,ykr),e(ue,xkr),e(ue,jE),e(jE,w4e),e(w4e,$kr),e(jE,kkr),e(jE,DK),e(DK,Skr),e(jE,Rkr),e(ue,Pkr),e(ue,DE),e(DE,A4e),e(A4e,Bkr),e(DE,Nkr),e(DE,GK),e(GK,Ikr),e(DE,qkr),e(ue,jkr),e(ue,GE),e(GE,L4e),e(L4e,Dkr),e(GE,Gkr),e(GE,OK),e(OK,Okr),e(GE,Vkr),e(ue,Xkr),e(ue,OE),e(OE,y4e),e(y4e,zkr),e(OE,Qkr),e(OE,VK),e(VK,Wkr),e(OE,Hkr),e(ue,Ukr),e(ue,VE),e(VE,x4e),e(x4e,Jkr),e(VE,Ykr),e(VE,XK),e(XK,Kkr),e(VE,Zkr),e(ue,eSr),e(ue,XE),e(XE,$4e),e($4e,oSr),e(XE,rSr),e(XE,zK),e(zK,tSr),e(XE,aSr),e(ue,nSr),e(ue,zE),e(zE,k4e),e(k4e,sSr),e(zE,lSr),e(zE,QK),e(QK,iSr),e(zE,dSr),e(ue,cSr),e(ue,QE),e(QE,S4e),e(S4e,fSr),e(QE,mSr),e(QE,WK),e(WK,gSr),e(QE,hSr),e(ue,pSr),e(ue,WE),e(WE,R4e),e(R4e,_Sr),e(WE,uSr),e(WE,HK),e(HK,bSr),e(WE,vSr),e(Nr,FSr),M(HE,Nr,null),b(f,zze,u),b(f,kc,u),e(kc,UE),e(UE,P4e),M(Nx,P4e,null),e(kc,TSr),e(kc,B4e),e(B4e,MSr),b(f,Qze,u),b(f,dr,u),M(Ix,dr,null),e(dr,ESr),e(dr,Sc),e(Sc,CSr),e(Sc,UK),e(UK,wSr),e(Sc,ASr),e(Sc,JK),e(JK,LSr),e(Sc,ySr),e(dr,xSr),e(dr,qx),e(qx,$Sr),e(qx,N4e),e(N4e,kSr),e(qx,SSr),e(dr,RSr),e(dr,Gt),M(jx,Gt,null),e(Gt,PSr),e(Gt,I4e),e(I4e,BSr),e(Gt,NSr),e(Gt,Rc),e(Rc,ISr),e(Rc,q4e),e(q4e,qSr),e(Rc,jSr),e(Rc,YK),e(YK,DSr),e(Rc,GSr),e(Gt,OSr),M(JE,Gt,null),e(dr,VSr),e(dr,Ir),M(Dx,Ir,null),e(Ir,XSr),e(Ir,j4e),e(j4e,zSr),e(Ir,QSr),e(Ir,pn),e(pn,WSr),e(pn,D4e),e(D4e,HSr),e(pn,USr),e(pn,G4e),e(G4e,JSr),e(pn,YSr),e(pn,O4e),e(O4e,KSr),e(pn,ZSr),e(Ir,eRr),e(Ir,Gx),e(Gx,YE),e(YE,V4e),e(V4e,oRr),e(YE,rRr),e(YE,KK),e(KK,tRr),e(YE,aRr),e(Gx,nRr),e(Gx,KE),e(KE,X4e),e(X4e,sRr),e(KE,lRr),e(KE,ZK),e(ZK,iRr),e(KE,dRr),e(Ir,cRr),M(ZE,Ir,null),b(f,Wze,u),b(f,Pc,u),e(Pc,eC),e(eC,z4e),M(Ox,z4e,null),e(Pc,fRr),e(Pc,Q4e),e(Q4e,mRr),b(f,Hze,u),b(f,cr,u),M(Vx,cr,null),e(cr,gRr),e(cr,Bc),e(Bc,hRr),e(Bc,eZ),e(eZ,pRr),e(Bc,_Rr),e(Bc,oZ),e(oZ,uRr),e(Bc,bRr),e(cr,vRr),e(cr,Xx),e(Xx,FRr),e(Xx,W4e),e(W4e,TRr),e(Xx,MRr),e(cr,ERr),e(cr,Ot),M(zx,Ot,null),e(Ot,CRr),e(Ot,H4e),e(H4e,wRr),e(Ot,ARr),e(Ot,Nc),e(Nc,LRr),e(Nc,U4e),e(U4e,yRr),e(Nc,xRr),e(Nc,rZ),e(rZ,$Rr),e(Nc,kRr),e(Ot,SRr),M(oC,Ot,null),e(cr,RRr),e(cr,qr),M(Qx,qr,null),e(qr,PRr),e(qr,J4e),e(J4e,BRr),e(qr,NRr),e(qr,_n),e(_n,IRr),e(_n,Y4e),e(Y4e,qRr),e(_n,jRr),e(_n,K4e),e(K4e,DRr),e(_n,GRr),e(_n,Z4e),e(Z4e,ORr),e(_n,VRr),e(qr,XRr),e(qr,eEe),e(eEe,rC),e(rC,oEe),e(oEe,zRr),e(rC,QRr),e(rC,tZ),e(tZ,WRr),e(rC,HRr),e(qr,URr),M(tC,qr,null),b(f,Uze,u),b(f,Ic,u),e(Ic,aC),e(aC,rEe),M(Wx,rEe,null),e(Ic,JRr),e(Ic,tEe),e(tEe,YRr),b(f,Jze,u),b(f,fr,u),M(Hx,fr,null),e(fr,KRr),e(fr,qc),e(qc,ZRr),e(qc,aZ),e(aZ,ePr),e(qc,oPr),e(qc,nZ),e(nZ,rPr),e(qc,tPr),e(fr,aPr),e(fr,Ux),e(Ux,nPr),e(Ux,aEe),e(aEe,sPr),e(Ux,lPr),e(fr,iPr),e(fr,Vt),M(Jx,Vt,null),e(Vt,dPr),e(Vt,nEe),e(nEe,cPr),e(Vt,fPr),e(Vt,jc),e(jc,mPr),e(jc,sEe),e(sEe,gPr),e(jc,hPr),e(jc,sZ),e(sZ,pPr),e(jc,_Pr),e(Vt,uPr),M(nC,Vt,null),e(fr,bPr),e(fr,jr),M(Yx,jr,null),e(jr,vPr),e(jr,lEe),e(lEe,FPr),e(jr,TPr),e(jr,un),e(un,MPr),e(un,iEe),e(iEe,EPr),e(un,CPr),e(un,dEe),e(dEe,wPr),e(un,APr),e(un,cEe),e(cEe,LPr),e(un,yPr),e(jr,xPr),e(jr,de),e(de,sC),e(sC,fEe),e(fEe,$Pr),e(sC,kPr),e(sC,lZ),e(lZ,SPr),e(sC,RPr),e(de,PPr),e(de,lC),e(lC,mEe),e(mEe,BPr),e(lC,NPr),e(lC,iZ),e(iZ,IPr),e(lC,qPr),e(de,jPr),e(de,iC),e(iC,gEe),e(gEe,DPr),e(iC,GPr),e(iC,dZ),e(dZ,OPr),e(iC,VPr),e(de,XPr),e(de,dC),e(dC,hEe),e(hEe,zPr),e(dC,QPr),e(dC,cZ),e(cZ,WPr),e(dC,HPr),e(de,UPr),e(de,cC),e(cC,pEe),e(pEe,JPr),e(cC,YPr),e(cC,fZ),e(fZ,KPr),e(cC,ZPr),e(de,eBr),e(de,fC),e(fC,_Ee),e(_Ee,oBr),e(fC,rBr),e(fC,mZ),e(mZ,tBr),e(fC,aBr),e(de,nBr),e(de,mC),e(mC,uEe),e(uEe,sBr),e(mC,lBr),e(mC,gZ),e(gZ,iBr),e(mC,dBr),e(de,cBr),e(de,gC),e(gC,bEe),e(bEe,fBr),e(gC,mBr),e(gC,hZ),e(hZ,gBr),e(gC,hBr),e(de,pBr),e(de,hC),e(hC,vEe),e(vEe,_Br),e(hC,uBr),e(hC,pZ),e(pZ,bBr),e(hC,vBr),e(de,FBr),e(de,pC),e(pC,FEe),e(FEe,TBr),e(pC,MBr),e(pC,_Z),e(_Z,EBr),e(pC,CBr),e(de,wBr),e(de,_C),e(_C,TEe),e(TEe,ABr),e(_C,LBr),e(_C,uZ),e(uZ,yBr),e(_C,xBr),e(de,$Br),e(de,uC),e(uC,MEe),e(MEe,kBr),e(uC,SBr),e(uC,bZ),e(bZ,RBr),e(uC,PBr),e(de,BBr),e(de,bC),e(bC,EEe),e(EEe,NBr),e(bC,IBr),e(bC,vZ),e(vZ,qBr),e(bC,jBr),e(de,DBr),e(de,vC),e(vC,CEe),e(CEe,GBr),e(vC,OBr),e(vC,FZ),e(FZ,VBr),e(vC,XBr),e(de,zBr),e(de,FC),e(FC,wEe),e(wEe,QBr),e(FC,WBr),e(FC,TZ),e(TZ,HBr),e(FC,UBr),e(de,JBr),e(de,TC),e(TC,AEe),e(AEe,YBr),e(TC,KBr),e(TC,MZ),e(MZ,ZBr),e(TC,eNr),e(de,oNr),e(de,MC),e(MC,LEe),e(LEe,rNr),e(MC,tNr),e(MC,EZ),e(EZ,aNr),e(MC,nNr),e(de,sNr),e(de,EC),e(EC,yEe),e(yEe,lNr),e(EC,iNr),e(EC,CZ),e(CZ,dNr),e(EC,cNr),e(de,fNr),e(de,CC),e(CC,xEe),e(xEe,mNr),e(CC,gNr),e(CC,wZ),e(wZ,hNr),e(CC,pNr),e(de,_Nr),e(de,wC),e(wC,$Ee),e($Ee,uNr),e(wC,bNr),e(wC,AZ),e(AZ,vNr),e(wC,FNr),e(jr,TNr),M(AC,jr,null),b(f,Yze,u),b(f,Dc,u),e(Dc,LC),e(LC,kEe),M(Kx,kEe,null),e(Dc,MNr),e(Dc,SEe),e(SEe,ENr),b(f,Kze,u),b(f,mr,u),M(Zx,mr,null),e(mr,CNr),e(mr,Gc),e(Gc,wNr),e(Gc,LZ),e(LZ,ANr),e(Gc,LNr),e(Gc,yZ),e(yZ,yNr),e(Gc,xNr),e(mr,$Nr),e(mr,e$),e(e$,kNr),e(e$,REe),e(REe,SNr),e(e$,RNr),e(mr,PNr),e(mr,Xt),M(o$,Xt,null),e(Xt,BNr),e(Xt,PEe),e(PEe,NNr),e(Xt,INr),e(Xt,Oc),e(Oc,qNr),e(Oc,BEe),e(BEe,jNr),e(Oc,DNr),e(Oc,xZ),e(xZ,GNr),e(Oc,ONr),e(Xt,VNr),M(yC,Xt,null),e(mr,XNr),e(mr,Dr),M(r$,Dr,null),e(Dr,zNr),e(Dr,NEe),e(NEe,QNr),e(Dr,WNr),e(Dr,bn),e(bn,HNr),e(bn,IEe),e(IEe,UNr),e(bn,JNr),e(bn,qEe),e(qEe,YNr),e(bn,KNr),e(bn,jEe),e(jEe,ZNr),e(bn,eIr),e(Dr,oIr),e(Dr,ce),e(ce,xC),e(xC,DEe),e(DEe,rIr),e(xC,tIr),e(xC,$Z),e($Z,aIr),e(xC,nIr),e(ce,sIr),e(ce,$C),e($C,GEe),e(GEe,lIr),e($C,iIr),e($C,kZ),e(kZ,dIr),e($C,cIr),e(ce,fIr),e(ce,kC),e(kC,OEe),e(OEe,mIr),e(kC,gIr),e(kC,SZ),e(SZ,hIr),e(kC,pIr),e(ce,_Ir),e(ce,SC),e(SC,VEe),e(VEe,uIr),e(SC,bIr),e(SC,RZ),e(RZ,vIr),e(SC,FIr),e(ce,TIr),e(ce,RC),e(RC,XEe),e(XEe,MIr),e(RC,EIr),e(RC,PZ),e(PZ,CIr),e(RC,wIr),e(ce,AIr),e(ce,PC),e(PC,zEe),e(zEe,LIr),e(PC,yIr),e(PC,BZ),e(BZ,xIr),e(PC,$Ir),e(ce,kIr),e(ce,BC),e(BC,QEe),e(QEe,SIr),e(BC,RIr),e(BC,NZ),e(NZ,PIr),e(BC,BIr),e(ce,NIr),e(ce,NC),e(NC,WEe),e(WEe,IIr),e(NC,qIr),e(NC,IZ),e(IZ,jIr),e(NC,DIr),e(ce,GIr),e(ce,IC),e(IC,HEe),e(HEe,OIr),e(IC,VIr),e(IC,qZ),e(qZ,XIr),e(IC,zIr),e(ce,QIr),e(ce,qC),e(qC,UEe),e(UEe,WIr),e(qC,HIr),e(qC,jZ),e(jZ,UIr),e(qC,JIr),e(ce,YIr),e(ce,jC),e(jC,JEe),e(JEe,KIr),e(jC,ZIr),e(jC,DZ),e(DZ,eqr),e(jC,oqr),e(ce,rqr),e(ce,DC),e(DC,YEe),e(YEe,tqr),e(DC,aqr),e(DC,GZ),e(GZ,nqr),e(DC,sqr),e(ce,lqr),e(ce,GC),e(GC,KEe),e(KEe,iqr),e(GC,dqr),e(GC,OZ),e(OZ,cqr),e(GC,fqr),e(ce,mqr),e(ce,OC),e(OC,ZEe),e(ZEe,gqr),e(OC,hqr),e(OC,VZ),e(VZ,pqr),e(OC,_qr),e(ce,uqr),e(ce,VC),e(VC,eCe),e(eCe,bqr),e(VC,vqr),e(VC,XZ),e(XZ,Fqr),e(VC,Tqr),e(ce,Mqr),e(ce,XC),e(XC,oCe),e(oCe,Eqr),e(XC,Cqr),e(XC,zZ),e(zZ,wqr),e(XC,Aqr),e(ce,Lqr),e(ce,zC),e(zC,rCe),e(rCe,yqr),e(zC,xqr),e(zC,QZ),e(QZ,$qr),e(zC,kqr),e(ce,Sqr),e(ce,QC),e(QC,tCe),e(tCe,Rqr),e(QC,Pqr),e(QC,WZ),e(WZ,Bqr),e(QC,Nqr),e(ce,Iqr),e(ce,WC),e(WC,aCe),e(aCe,qqr),e(WC,jqr),e(WC,HZ),e(HZ,Dqr),e(WC,Gqr),e(ce,Oqr),e(ce,HC),e(HC,nCe),e(nCe,Vqr),e(HC,Xqr),e(HC,UZ),e(UZ,zqr),e(HC,Qqr),e(Dr,Wqr),M(UC,Dr,null),b(f,Zze,u),b(f,Vc,u),e(Vc,JC),e(JC,sCe),M(t$,sCe,null),e(Vc,Hqr),e(Vc,lCe),e(lCe,Uqr),b(f,eQe,u),b(f,gr,u),M(a$,gr,null),e(gr,Jqr),e(gr,Xc),e(Xc,Yqr),e(Xc,JZ),e(JZ,Kqr),e(Xc,Zqr),e(Xc,YZ),e(YZ,ejr),e(Xc,ojr),e(gr,rjr),e(gr,n$),e(n$,tjr),e(n$,iCe),e(iCe,ajr),e(n$,njr),e(gr,sjr),e(gr,zt),M(s$,zt,null),e(zt,ljr),e(zt,dCe),e(dCe,ijr),e(zt,djr),e(zt,zc),e(zc,cjr),e(zc,cCe),e(cCe,fjr),e(zc,mjr),e(zc,KZ),e(KZ,gjr),e(zc,hjr),e(zt,pjr),M(YC,zt,null),e(gr,_jr),e(gr,Gr),M(l$,Gr,null),e(Gr,ujr),e(Gr,fCe),e(fCe,bjr),e(Gr,vjr),e(Gr,vn),e(vn,Fjr),e(vn,mCe),e(mCe,Tjr),e(vn,Mjr),e(vn,gCe),e(gCe,Ejr),e(vn,Cjr),e(vn,hCe),e(hCe,wjr),e(vn,Ajr),e(Gr,Ljr),e(Gr,pCe),e(pCe,KC),e(KC,_Ce),e(_Ce,yjr),e(KC,xjr),e(KC,ZZ),e(ZZ,$jr),e(KC,kjr),e(Gr,Sjr),M(ZC,Gr,null),b(f,oQe,u),b(f,Qc,u),e(Qc,e5),e(e5,uCe),M(i$,uCe,null),e(Qc,Rjr),e(Qc,bCe),e(bCe,Pjr),b(f,rQe,u),b(f,hr,u),M(d$,hr,null),e(hr,Bjr),e(hr,Wc),e(Wc,Njr),e(Wc,eee),e(eee,Ijr),e(Wc,qjr),e(Wc,oee),e(oee,jjr),e(Wc,Djr),e(hr,Gjr),e(hr,c$),e(c$,Ojr),e(c$,vCe),e(vCe,Vjr),e(c$,Xjr),e(hr,zjr),e(hr,Qt),M(f$,Qt,null),e(Qt,Qjr),e(Qt,FCe),e(FCe,Wjr),e(Qt,Hjr),e(Qt,Hc),e(Hc,Ujr),e(Hc,TCe),e(TCe,Jjr),e(Hc,Yjr),e(Hc,ree),e(ree,Kjr),e(Hc,Zjr),e(Qt,eDr),M(o5,Qt,null),e(hr,oDr),e(hr,Or),M(m$,Or,null),e(Or,rDr),e(Or,MCe),e(MCe,tDr),e(Or,aDr),e(Or,Fn),e(Fn,nDr),e(Fn,ECe),e(ECe,sDr),e(Fn,lDr),e(Fn,CCe),e(CCe,iDr),e(Fn,dDr),e(Fn,wCe),e(wCe,cDr),e(Fn,fDr),e(Or,mDr),e(Or,ACe),e(ACe,r5),e(r5,LCe),e(LCe,gDr),e(r5,hDr),e(r5,tee),e(tee,pDr),e(r5,_Dr),e(Or,uDr),M(t5,Or,null),b(f,tQe,u),b(f,Uc,u),e(Uc,a5),e(a5,yCe),M(g$,yCe,null),e(Uc,bDr),e(Uc,xCe),e(xCe,vDr),b(f,aQe,u),b(f,pr,u),M(h$,pr,null),e(pr,FDr),e(pr,Jc),e(Jc,TDr),e(Jc,aee),e(aee,MDr),e(Jc,EDr),e(Jc,nee),e(nee,CDr),e(Jc,wDr),e(pr,ADr),e(pr,p$),e(p$,LDr),e(p$,$Ce),e($Ce,yDr),e(p$,xDr),e(pr,$Dr),e(pr,Wt),M(_$,Wt,null),e(Wt,kDr),e(Wt,kCe),e(kCe,SDr),e(Wt,RDr),e(Wt,Yc),e(Yc,PDr),e(Yc,SCe),e(SCe,BDr),e(Yc,NDr),e(Yc,see),e(see,IDr),e(Yc,qDr),e(Wt,jDr),M(n5,Wt,null),e(pr,DDr),e(pr,Vr),M(u$,Vr,null),e(Vr,GDr),e(Vr,RCe),e(RCe,ODr),e(Vr,VDr),e(Vr,Tn),e(Tn,XDr),e(Tn,PCe),e(PCe,zDr),e(Tn,QDr),e(Tn,BCe),e(BCe,WDr),e(Tn,HDr),e(Tn,NCe),e(NCe,UDr),e(Tn,JDr),e(Vr,YDr),e(Vr,oe),e(oe,s5),e(s5,ICe),e(ICe,KDr),e(s5,ZDr),e(s5,lee),e(lee,eGr),e(s5,oGr),e(oe,rGr),e(oe,l5),e(l5,qCe),e(qCe,tGr),e(l5,aGr),e(l5,iee),e(iee,nGr),e(l5,sGr),e(oe,lGr),e(oe,i5),e(i5,jCe),e(jCe,iGr),e(i5,dGr),e(i5,dee),e(dee,cGr),e(i5,fGr),e(oe,mGr),e(oe,d5),e(d5,DCe),e(DCe,gGr),e(d5,hGr),e(d5,cee),e(cee,pGr),e(d5,_Gr),e(oe,uGr),e(oe,c5),e(c5,GCe),e(GCe,bGr),e(c5,vGr),e(c5,fee),e(fee,FGr),e(c5,TGr),e(oe,MGr),e(oe,f5),e(f5,OCe),e(OCe,EGr),e(f5,CGr),e(f5,mee),e(mee,wGr),e(f5,AGr),e(oe,LGr),e(oe,m5),e(m5,VCe),e(VCe,yGr),e(m5,xGr),e(m5,gee),e(gee,$Gr),e(m5,kGr),e(oe,SGr),e(oe,g5),e(g5,XCe),e(XCe,RGr),e(g5,PGr),e(g5,hee),e(hee,BGr),e(g5,NGr),e(oe,IGr),e(oe,h5),e(h5,zCe),e(zCe,qGr),e(h5,jGr),e(h5,pee),e(pee,DGr),e(h5,GGr),e(oe,OGr),e(oe,p5),e(p5,QCe),e(QCe,VGr),e(p5,XGr),e(p5,_ee),e(_ee,zGr),e(p5,QGr),e(oe,WGr),e(oe,_5),e(_5,WCe),e(WCe,HGr),e(_5,UGr),e(_5,uee),e(uee,JGr),e(_5,YGr),e(oe,KGr),e(oe,u5),e(u5,HCe),e(HCe,ZGr),e(u5,eOr),e(u5,bee),e(bee,oOr),e(u5,rOr),e(oe,tOr),e(oe,b5),e(b5,UCe),e(UCe,aOr),e(b5,nOr),e(b5,vee),e(vee,sOr),e(b5,lOr),e(oe,iOr),e(oe,v5),e(v5,JCe),e(JCe,dOr),e(v5,cOr),e(v5,Fee),e(Fee,fOr),e(v5,mOr),e(oe,gOr),e(oe,F5),e(F5,YCe),e(YCe,hOr),e(F5,pOr),e(F5,Tee),e(Tee,_Or),e(F5,uOr),e(oe,bOr),e(oe,T5),e(T5,KCe),e(KCe,vOr),e(T5,FOr),e(T5,Mee),e(Mee,TOr),e(T5,MOr),e(oe,EOr),e(oe,M5),e(M5,ZCe),e(ZCe,COr),e(M5,wOr),e(M5,Eee),e(Eee,AOr),e(M5,LOr),e(oe,yOr),e(oe,E5),e(E5,e5e),e(e5e,xOr),e(E5,$Or),e(E5,Cee),e(Cee,kOr),e(E5,SOr),e(oe,ROr),e(oe,C5),e(C5,o5e),e(o5e,POr),e(C5,BOr),e(C5,wee),e(wee,NOr),e(C5,IOr),e(oe,qOr),e(oe,w5),e(w5,r5e),e(r5e,jOr),e(w5,DOr),e(w5,Aee),e(Aee,GOr),e(w5,OOr),e(oe,VOr),e(oe,A5),e(A5,t5e),e(t5e,XOr),e(A5,zOr),e(A5,Lee),e(Lee,QOr),e(A5,WOr),e(oe,HOr),e(oe,L5),e(L5,a5e),e(a5e,UOr),e(L5,JOr),e(L5,yee),e(yee,YOr),e(L5,KOr),e(oe,ZOr),e(oe,y5),e(y5,n5e),e(n5e,eVr),e(y5,oVr),e(y5,xee),e(xee,rVr),e(y5,tVr),e(oe,aVr),e(oe,x5),e(x5,s5e),e(s5e,nVr),e(x5,sVr),e(x5,$ee),e($ee,lVr),e(x5,iVr),e(oe,dVr),e(oe,$5),e($5,l5e),e(l5e,cVr),e($5,fVr),e($5,kee),e(kee,mVr),e($5,gVr),e(oe,hVr),e(oe,k5),e(k5,i5e),e(i5e,pVr),e(k5,_Vr),e(k5,See),e(See,uVr),e(k5,bVr),e(oe,vVr),e(oe,S5),e(S5,d5e),e(d5e,FVr),e(S5,TVr),e(S5,Ree),e(Ree,MVr),e(S5,EVr),e(Vr,CVr),M(R5,Vr,null),b(f,nQe,u),b(f,Kc,u),e(Kc,P5),e(P5,c5e),M(b$,c5e,null),e(Kc,wVr),e(Kc,f5e),e(f5e,AVr),b(f,sQe,u),b(f,_r,u),M(v$,_r,null),e(_r,LVr),e(_r,Zc),e(Zc,yVr),e(Zc,Pee),e(Pee,xVr),e(Zc,$Vr),e(Zc,Bee),e(Bee,kVr),e(Zc,SVr),e(_r,RVr),e(_r,F$),e(F$,PVr),e(F$,m5e),e(m5e,BVr),e(F$,NVr),e(_r,IVr),e(_r,Ht),M(T$,Ht,null),e(Ht,qVr),e(Ht,g5e),e(g5e,jVr),e(Ht,DVr),e(Ht,ef),e(ef,GVr),e(ef,h5e),e(h5e,OVr),e(ef,VVr),e(ef,Nee),e(Nee,XVr),e(ef,zVr),e(Ht,QVr),M(B5,Ht,null),e(_r,WVr),e(_r,Xr),M(M$,Xr,null),e(Xr,HVr),e(Xr,p5e),e(p5e,UVr),e(Xr,JVr),e(Xr,Mn),e(Mn,YVr),e(Mn,_5e),e(_5e,KVr),e(Mn,ZVr),e(Mn,u5e),e(u5e,eXr),e(Mn,oXr),e(Mn,b5e),e(b5e,rXr),e(Mn,tXr),e(Xr,aXr),e(Xr,xe),e(xe,N5),e(N5,v5e),e(v5e,nXr),e(N5,sXr),e(N5,Iee),e(Iee,lXr),e(N5,iXr),e(xe,dXr),e(xe,I5),e(I5,F5e),e(F5e,cXr),e(I5,fXr),e(I5,qee),e(qee,mXr),e(I5,gXr),e(xe,hXr),e(xe,q5),e(q5,T5e),e(T5e,pXr),e(q5,_Xr),e(q5,jee),e(jee,uXr),e(q5,bXr),e(xe,vXr),e(xe,j5),e(j5,M5e),e(M5e,FXr),e(j5,TXr),e(j5,Dee),e(Dee,MXr),e(j5,EXr),e(xe,CXr),e(xe,D5),e(D5,E5e),e(E5e,wXr),e(D5,AXr),e(D5,Gee),e(Gee,LXr),e(D5,yXr),e(xe,xXr),e(xe,G5),e(G5,C5e),e(C5e,$Xr),e(G5,kXr),e(G5,Oee),e(Oee,SXr),e(G5,RXr),e(xe,PXr),e(xe,O5),e(O5,w5e),e(w5e,BXr),e(O5,NXr),e(O5,Vee),e(Vee,IXr),e(O5,qXr),e(xe,jXr),e(xe,V5),e(V5,A5e),e(A5e,DXr),e(V5,GXr),e(V5,Xee),e(Xee,OXr),e(V5,VXr),e(xe,XXr),e(xe,X5),e(X5,L5e),e(L5e,zXr),e(X5,QXr),e(X5,zee),e(zee,WXr),e(X5,HXr),e(xe,UXr),e(xe,z5),e(z5,y5e),e(y5e,JXr),e(z5,YXr),e(z5,Qee),e(Qee,KXr),e(z5,ZXr),e(Xr,ezr),M(Q5,Xr,null),b(f,lQe,u),b(f,of,u),e(of,W5),e(W5,x5e),M(E$,x5e,null),e(of,ozr),e(of,$5e),e($5e,rzr),b(f,iQe,u),b(f,ur,u),M(C$,ur,null),e(ur,tzr),e(ur,rf),e(rf,azr),e(rf,Wee),e(Wee,nzr),e(rf,szr),e(rf,Hee),e(Hee,lzr),e(rf,izr),e(ur,dzr),e(ur,w$),e(w$,czr),e(w$,k5e),e(k5e,fzr),e(w$,mzr),e(ur,gzr),e(ur,Ut),M(A$,Ut,null),e(Ut,hzr),e(Ut,S5e),e(S5e,pzr),e(Ut,_zr),e(Ut,tf),e(tf,uzr),e(tf,R5e),e(R5e,bzr),e(tf,vzr),e(tf,Uee),e(Uee,Fzr),e(tf,Tzr),e(Ut,Mzr),M(H5,Ut,null),e(ur,Ezr),e(ur,zr),M(L$,zr,null),e(zr,Czr),e(zr,P5e),e(P5e,wzr),e(zr,Azr),e(zr,En),e(En,Lzr),e(En,B5e),e(B5e,yzr),e(En,xzr),e(En,N5e),e(N5e,$zr),e(En,kzr),e(En,I5e),e(I5e,Szr),e(En,Rzr),e(zr,Pzr),e(zr,Ee),e(Ee,U5),e(U5,q5e),e(q5e,Bzr),e(U5,Nzr),e(U5,Jee),e(Jee,Izr),e(U5,qzr),e(Ee,jzr),e(Ee,J5),e(J5,j5e),e(j5e,Dzr),e(J5,Gzr),e(J5,Yee),e(Yee,Ozr),e(J5,Vzr),e(Ee,Xzr),e(Ee,Y5),e(Y5,D5e),e(D5e,zzr),e(Y5,Qzr),e(Y5,Kee),e(Kee,Wzr),e(Y5,Hzr),e(Ee,Uzr),e(Ee,K5),e(K5,G5e),e(G5e,Jzr),e(K5,Yzr),e(K5,Zee),e(Zee,Kzr),e(K5,Zzr),e(Ee,eQr),e(Ee,Z5),e(Z5,O5e),e(O5e,oQr),e(Z5,rQr),e(Z5,eoe),e(eoe,tQr),e(Z5,aQr),e(Ee,nQr),e(Ee,e3),e(e3,V5e),e(V5e,sQr),e(e3,lQr),e(e3,ooe),e(ooe,iQr),e(e3,dQr),e(Ee,cQr),e(Ee,o3),e(o3,X5e),e(X5e,fQr),e(o3,mQr),e(o3,roe),e(roe,gQr),e(o3,hQr),e(Ee,pQr),e(Ee,r3),e(r3,z5e),e(z5e,_Qr),e(r3,uQr),e(r3,toe),e(toe,bQr),e(r3,vQr),e(Ee,FQr),e(Ee,t3),e(t3,Q5e),e(Q5e,TQr),e(t3,MQr),e(t3,aoe),e(aoe,EQr),e(t3,CQr),e(Ee,wQr),e(Ee,a3),e(a3,W5e),e(W5e,AQr),e(a3,LQr),e(a3,noe),e(noe,yQr),e(a3,xQr),e(Ee,$Qr),e(Ee,n3),e(n3,H5e),e(H5e,kQr),e(n3,SQr),e(n3,soe),e(soe,RQr),e(n3,PQr),e(Ee,BQr),e(Ee,s3),e(s3,U5e),e(U5e,NQr),e(s3,IQr),e(s3,loe),e(loe,qQr),e(s3,jQr),e(Ee,DQr),e(Ee,l3),e(l3,J5e),e(J5e,GQr),e(l3,OQr),e(l3,ioe),e(ioe,VQr),e(l3,XQr),e(zr,zQr),M(i3,zr,null),b(f,dQe,u),b(f,af,u),e(af,d3),e(d3,Y5e),M(y$,Y5e,null),e(af,QQr),e(af,K5e),e(K5e,WQr),b(f,cQe,u),b(f,br,u),M(x$,br,null),e(br,HQr),e(br,nf),e(nf,UQr),e(nf,doe),e(doe,JQr),e(nf,YQr),e(nf,coe),e(coe,KQr),e(nf,ZQr),e(br,eWr),e(br,$$),e($$,oWr),e($$,Z5e),e(Z5e,rWr),e($$,tWr),e(br,aWr),e(br,Jt),M(k$,Jt,null),e(Jt,nWr),e(Jt,e3e),e(e3e,sWr),e(Jt,lWr),e(Jt,sf),e(sf,iWr),e(sf,o3e),e(o3e,dWr),e(sf,cWr),e(sf,foe),e(foe,fWr),e(sf,mWr),e(Jt,gWr),M(c3,Jt,null),e(br,hWr),e(br,Qr),M(S$,Qr,null),e(Qr,pWr),e(Qr,r3e),e(r3e,_Wr),e(Qr,uWr),e(Qr,Cn),e(Cn,bWr),e(Cn,t3e),e(t3e,vWr),e(Cn,FWr),e(Cn,a3e),e(a3e,TWr),e(Cn,MWr),e(Cn,n3e),e(n3e,EWr),e(Cn,CWr),e(Qr,wWr),e(Qr,$e),e($e,f3),e(f3,s3e),e(s3e,AWr),e(f3,LWr),e(f3,moe),e(moe,yWr),e(f3,xWr),e($e,$Wr),e($e,m3),e(m3,l3e),e(l3e,kWr),e(m3,SWr),e(m3,goe),e(goe,RWr),e(m3,PWr),e($e,BWr),e($e,g3),e(g3,i3e),e(i3e,NWr),e(g3,IWr),e(g3,hoe),e(hoe,qWr),e(g3,jWr),e($e,DWr),e($e,h3),e(h3,d3e),e(d3e,GWr),e(h3,OWr),e(h3,poe),e(poe,VWr),e(h3,XWr),e($e,zWr),e($e,p3),e(p3,c3e),e(c3e,QWr),e(p3,WWr),e(p3,_oe),e(_oe,HWr),e(p3,UWr),e($e,JWr),e($e,_3),e(_3,f3e),e(f3e,YWr),e(_3,KWr),e(_3,uoe),e(uoe,ZWr),e(_3,eHr),e($e,oHr),e($e,u3),e(u3,m3e),e(m3e,rHr),e(u3,tHr),e(u3,boe),e(boe,aHr),e(u3,nHr),e($e,sHr),e($e,b3),e(b3,g3e),e(g3e,lHr),e(b3,iHr),e(b3,voe),e(voe,dHr),e(b3,cHr),e($e,fHr),e($e,v3),e(v3,h3e),e(h3e,mHr),e(v3,gHr),e(v3,Foe),e(Foe,hHr),e(v3,pHr),e($e,_Hr),e($e,F3),e(F3,p3e),e(p3e,uHr),e(F3,bHr),e(F3,Toe),e(Toe,vHr),e(F3,FHr),e(Qr,THr),M(T3,Qr,null),b(f,fQe,u),b(f,lf,u),e(lf,M3),e(M3,_3e),M(R$,_3e,null),e(lf,MHr),e(lf,u3e),e(u3e,EHr),b(f,mQe,u),b(f,vr,u),M(P$,vr,null),e(vr,CHr),e(vr,df),e(df,wHr),e(df,Moe),e(Moe,AHr),e(df,LHr),e(df,Eoe),e(Eoe,yHr),e(df,xHr),e(vr,$Hr),e(vr,B$),e(B$,kHr),e(B$,b3e),e(b3e,SHr),e(B$,RHr),e(vr,PHr),e(vr,Yt),M(N$,Yt,null),e(Yt,BHr),e(Yt,v3e),e(v3e,NHr),e(Yt,IHr),e(Yt,cf),e(cf,qHr),e(cf,F3e),e(F3e,jHr),e(cf,DHr),e(cf,Coe),e(Coe,GHr),e(cf,OHr),e(Yt,VHr),M(E3,Yt,null),e(vr,XHr),e(vr,Wr),M(I$,Wr,null),e(Wr,zHr),e(Wr,T3e),e(T3e,QHr),e(Wr,WHr),e(Wr,wn),e(wn,HHr),e(wn,M3e),e(M3e,UHr),e(wn,JHr),e(wn,E3e),e(E3e,YHr),e(wn,KHr),e(wn,C3e),e(C3e,ZHr),e(wn,eUr),e(Wr,oUr),e(Wr,ke),e(ke,C3),e(C3,w3e),e(w3e,rUr),e(C3,tUr),e(C3,woe),e(woe,aUr),e(C3,nUr),e(ke,sUr),e(ke,w3),e(w3,A3e),e(A3e,lUr),e(w3,iUr),e(w3,Aoe),e(Aoe,dUr),e(w3,cUr),e(ke,fUr),e(ke,A3),e(A3,L3e),e(L3e,mUr),e(A3,gUr),e(A3,Loe),e(Loe,hUr),e(A3,pUr),e(ke,_Ur),e(ke,L3),e(L3,y3e),e(y3e,uUr),e(L3,bUr),e(L3,yoe),e(yoe,vUr),e(L3,FUr),e(ke,TUr),e(ke,y3),e(y3,x3e),e(x3e,MUr),e(y3,EUr),e(y3,xoe),e(xoe,CUr),e(y3,wUr),e(ke,AUr),e(ke,x3),e(x3,$3e),e($3e,LUr),e(x3,yUr),e(x3,$oe),e($oe,xUr),e(x3,$Ur),e(ke,kUr),e(ke,$3),e($3,k3e),e(k3e,SUr),e($3,RUr),e($3,koe),e(koe,PUr),e($3,BUr),e(ke,NUr),e(ke,k3),e(k3,S3e),e(S3e,IUr),e(k3,qUr),e(k3,Soe),e(Soe,jUr),e(k3,DUr),e(ke,GUr),e(ke,S3),e(S3,R3e),e(R3e,OUr),e(S3,VUr),e(S3,Roe),e(Roe,XUr),e(S3,zUr),e(ke,QUr),e(ke,R3),e(R3,P3e),e(P3e,WUr),e(R3,HUr),e(R3,Poe),e(Poe,UUr),e(R3,JUr),e(Wr,YUr),M(P3,Wr,null),b(f,gQe,u),b(f,ff,u),e(ff,B3),e(B3,B3e),M(q$,B3e,null),e(ff,KUr),e(ff,N3e),e(N3e,ZUr),b(f,hQe,u),b(f,Fr,u),M(j$,Fr,null),e(Fr,eJr),e(Fr,mf),e(mf,oJr),e(mf,Boe),e(Boe,rJr),e(mf,tJr),e(mf,Noe),e(Noe,aJr),e(mf,nJr),e(Fr,sJr),e(Fr,D$),e(D$,lJr),e(D$,I3e),e(I3e,iJr),e(D$,dJr),e(Fr,cJr),e(Fr,Kt),M(G$,Kt,null),e(Kt,fJr),e(Kt,q3e),e(q3e,mJr),e(Kt,gJr),e(Kt,gf),e(gf,hJr),e(gf,j3e),e(j3e,pJr),e(gf,_Jr),e(gf,Ioe),e(Ioe,uJr),e(gf,bJr),e(Kt,vJr),M(N3,Kt,null),e(Fr,FJr),e(Fr,Hr),M(O$,Hr,null),e(Hr,TJr),e(Hr,D3e),e(D3e,MJr),e(Hr,EJr),e(Hr,An),e(An,CJr),e(An,G3e),e(G3e,wJr),e(An,AJr),e(An,O3e),e(O3e,LJr),e(An,yJr),e(An,V3e),e(V3e,xJr),e(An,$Jr),e(Hr,kJr),e(Hr,Se),e(Se,I3),e(I3,X3e),e(X3e,SJr),e(I3,RJr),e(I3,qoe),e(qoe,PJr),e(I3,BJr),e(Se,NJr),e(Se,q3),e(q3,z3e),e(z3e,IJr),e(q3,qJr),e(q3,joe),e(joe,jJr),e(q3,DJr),e(Se,GJr),e(Se,j3),e(j3,Q3e),e(Q3e,OJr),e(j3,VJr),e(j3,Doe),e(Doe,XJr),e(j3,zJr),e(Se,QJr),e(Se,D3),e(D3,W3e),e(W3e,WJr),e(D3,HJr),e(D3,Goe),e(Goe,UJr),e(D3,JJr),e(Se,YJr),e(Se,G3),e(G3,H3e),e(H3e,KJr),e(G3,ZJr),e(G3,Ooe),e(Ooe,eYr),e(G3,oYr),e(Se,rYr),e(Se,O3),e(O3,U3e),e(U3e,tYr),e(O3,aYr),e(O3,Voe),e(Voe,nYr),e(O3,sYr),e(Se,lYr),e(Se,V3),e(V3,J3e),e(J3e,iYr),e(V3,dYr),e(V3,Xoe),e(Xoe,cYr),e(V3,fYr),e(Se,mYr),e(Se,X3),e(X3,Y3e),e(Y3e,gYr),e(X3,hYr),e(X3,zoe),e(zoe,pYr),e(X3,_Yr),e(Se,uYr),e(Se,z3),e(z3,K3e),e(K3e,bYr),e(z3,vYr),e(z3,Qoe),e(Qoe,FYr),e(z3,TYr),e(Se,MYr),e(Se,Q3),e(Q3,Z3e),e(Z3e,EYr),e(Q3,CYr),e(Q3,Woe),e(Woe,wYr),e(Q3,AYr),e(Hr,LYr),M(W3,Hr,null),b(f,pQe,u),b(f,hf,u),e(hf,H3),e(H3,e0e),M(V$,e0e,null),e(hf,yYr),e(hf,o0e),e(o0e,xYr),b(f,_Qe,u),b(f,Tr,u),M(X$,Tr,null),e(Tr,$Yr),e(Tr,pf),e(pf,kYr),e(pf,Hoe),e(Hoe,SYr),e(pf,RYr),e(pf,Uoe),e(Uoe,PYr),e(pf,BYr),e(Tr,NYr),e(Tr,z$),e(z$,IYr),e(z$,r0e),e(r0e,qYr),e(z$,jYr),e(Tr,DYr),e(Tr,Zt),M(Q$,Zt,null),e(Zt,GYr),e(Zt,t0e),e(t0e,OYr),e(Zt,VYr),e(Zt,_f),e(_f,XYr),e(_f,a0e),e(a0e,zYr),e(_f,QYr),e(_f,Joe),e(Joe,WYr),e(_f,HYr),e(Zt,UYr),M(U3,Zt,null),e(Tr,JYr),e(Tr,Ur),M(W$,Ur,null),e(Ur,YYr),e(Ur,n0e),e(n0e,KYr),e(Ur,ZYr),e(Ur,Ln),e(Ln,eKr),e(Ln,s0e),e(s0e,oKr),e(Ln,rKr),e(Ln,l0e),e(l0e,tKr),e(Ln,aKr),e(Ln,i0e),e(i0e,nKr),e(Ln,sKr),e(Ur,lKr),e(Ur,Re),e(Re,J3),e(J3,d0e),e(d0e,iKr),e(J3,dKr),e(J3,Yoe),e(Yoe,cKr),e(J3,fKr),e(Re,mKr),e(Re,Y3),e(Y3,c0e),e(c0e,gKr),e(Y3,hKr),e(Y3,Koe),e(Koe,pKr),e(Y3,_Kr),e(Re,uKr),e(Re,K3),e(K3,f0e),e(f0e,bKr),e(K3,vKr),e(K3,Zoe),e(Zoe,FKr),e(K3,TKr),e(Re,MKr),e(Re,Z3),e(Z3,m0e),e(m0e,EKr),e(Z3,CKr),e(Z3,ere),e(ere,wKr),e(Z3,AKr),e(Re,LKr),e(Re,e0),e(e0,g0e),e(g0e,yKr),e(e0,xKr),e(e0,ore),e(ore,$Kr),e(e0,kKr),e(Re,SKr),e(Re,o0),e(o0,h0e),e(h0e,RKr),e(o0,PKr),e(o0,rre),e(rre,BKr),e(o0,NKr),e(Re,IKr),e(Re,r0),e(r0,p0e),e(p0e,qKr),e(r0,jKr),e(r0,tre),e(tre,DKr),e(r0,GKr),e(Re,OKr),e(Re,t0),e(t0,_0e),e(_0e,VKr),e(t0,XKr),e(t0,are),e(are,zKr),e(t0,QKr),e(Re,WKr),e(Re,a0),e(a0,u0e),e(u0e,HKr),e(a0,UKr),e(a0,nre),e(nre,JKr),e(a0,YKr),e(Re,KKr),e(Re,n0),e(n0,b0e),e(b0e,ZKr),e(n0,eZr),e(n0,sre),e(sre,oZr),e(n0,rZr),e(Ur,tZr),M(s0,Ur,null),b(f,uQe,u),b(f,uf,u),e(uf,l0),e(l0,v0e),M(H$,v0e,null),e(uf,aZr),e(uf,F0e),e(F0e,nZr),b(f,bQe,u),b(f,Mr,u),M(U$,Mr,null),e(Mr,sZr),e(Mr,bf),e(bf,lZr),e(bf,lre),e(lre,iZr),e(bf,dZr),e(bf,ire),e(ire,cZr),e(bf,fZr),e(Mr,mZr),e(Mr,J$),e(J$,gZr),e(J$,T0e),e(T0e,hZr),e(J$,pZr),e(Mr,_Zr),e(Mr,ea),M(Y$,ea,null),e(ea,uZr),e(ea,M0e),e(M0e,bZr),e(ea,vZr),e(ea,vf),e(vf,FZr),e(vf,E0e),e(E0e,TZr),e(vf,MZr),e(vf,dre),e(dre,EZr),e(vf,CZr),e(ea,wZr),M(i0,ea,null),e(Mr,AZr),e(Mr,Jr),M(K$,Jr,null),e(Jr,LZr),e(Jr,C0e),e(C0e,yZr),e(Jr,xZr),e(Jr,yn),e(yn,$Zr),e(yn,w0e),e(w0e,kZr),e(yn,SZr),e(yn,A0e),e(A0e,RZr),e(yn,PZr),e(yn,L0e),e(L0e,BZr),e(yn,NZr),e(Jr,IZr),e(Jr,Ve),e(Ve,d0),e(d0,y0e),e(y0e,qZr),e(d0,jZr),e(d0,cre),e(cre,DZr),e(d0,GZr),e(Ve,OZr),e(Ve,c0),e(c0,x0e),e(x0e,VZr),e(c0,XZr),e(c0,fre),e(fre,zZr),e(c0,QZr),e(Ve,WZr),e(Ve,f0),e(f0,$0e),e($0e,HZr),e(f0,UZr),e(f0,mre),e(mre,JZr),e(f0,YZr),e(Ve,KZr),e(Ve,m0),e(m0,k0e),e(k0e,ZZr),e(m0,eet),e(m0,gre),e(gre,oet),e(m0,ret),e(Ve,tet),e(Ve,g0),e(g0,S0e),e(S0e,aet),e(g0,net),e(g0,hre),e(hre,set),e(g0,iet),e(Ve,det),e(Ve,h0),e(h0,R0e),e(R0e,cet),e(h0,fet),e(h0,pre),e(pre,met),e(h0,get),e(Ve,het),e(Ve,p0),e(p0,P0e),e(P0e,pet),e(p0,_et),e(p0,_re),e(_re,uet),e(p0,bet),e(Ve,vet),e(Ve,_0),e(_0,B0e),e(B0e,Fet),e(_0,Tet),e(_0,ure),e(ure,Met),e(_0,Eet),e(Jr,Cet),M(u0,Jr,null),b(f,vQe,u),b(f,Ff,u),e(Ff,b0),e(b0,N0e),M(Z$,N0e,null),e(Ff,wet),e(Ff,I0e),e(I0e,Aet),b(f,FQe,u),b(f,Er,u),M(ek,Er,null),e(Er,Let),e(Er,Tf),e(Tf,yet),e(Tf,bre),e(bre,xet),e(Tf,$et),e(Tf,vre),e(vre,ket),e(Tf,Set),e(Er,Ret),e(Er,ok),e(ok,Pet),e(ok,q0e),e(q0e,Bet),e(ok,Net),e(Er,Iet),e(Er,oa),M(rk,oa,null),e(oa,qet),e(oa,j0e),e(j0e,jet),e(oa,Det),e(oa,Mf),e(Mf,Get),e(Mf,D0e),e(D0e,Oet),e(Mf,Vet),e(Mf,Fre),e(Fre,Xet),e(Mf,zet),e(oa,Qet),M(v0,oa,null),e(Er,Wet),e(Er,Yr),M(tk,Yr,null),e(Yr,Het),e(Yr,G0e),e(G0e,Uet),e(Yr,Jet),e(Yr,xn),e(xn,Yet),e(xn,O0e),e(O0e,Ket),e(xn,Zet),e(xn,V0e),e(V0e,eot),e(xn,oot),e(xn,X0e),e(X0e,rot),e(xn,tot),e(Yr,aot),e(Yr,Xe),e(Xe,F0),e(F0,z0e),e(z0e,not),e(F0,sot),e(F0,Tre),e(Tre,lot),e(F0,iot),e(Xe,dot),e(Xe,T0),e(T0,Q0e),e(Q0e,cot),e(T0,fot),e(T0,Mre),e(Mre,mot),e(T0,got),e(Xe,hot),e(Xe,M0),e(M0,W0e),e(W0e,pot),e(M0,_ot),e(M0,Ere),e(Ere,uot),e(M0,bot),e(Xe,vot),e(Xe,E0),e(E0,H0e),e(H0e,Fot),e(E0,Tot),e(E0,Cre),e(Cre,Mot),e(E0,Eot),e(Xe,Cot),e(Xe,C0),e(C0,U0e),e(U0e,wot),e(C0,Aot),e(C0,wre),e(wre,Lot),e(C0,yot),e(Xe,xot),e(Xe,w0),e(w0,J0e),e(J0e,$ot),e(w0,kot),e(w0,Are),e(Are,Sot),e(w0,Rot),e(Xe,Pot),e(Xe,A0),e(A0,Y0e),e(Y0e,Bot),e(A0,Not),e(A0,Lre),e(Lre,Iot),e(A0,qot),e(Xe,jot),e(Xe,L0),e(L0,K0e),e(K0e,Dot),e(L0,Got),e(L0,yre),e(yre,Oot),e(L0,Vot),e(Yr,Xot),M(y0,Yr,null),b(f,TQe,u),b(f,Ef,u),e(Ef,x0),e(x0,Z0e),M(ak,Z0e,null),e(Ef,zot),e(Ef,ewe),e(ewe,Qot),b(f,MQe,u),b(f,Cr,u),M(nk,Cr,null),e(Cr,Wot),e(Cr,Cf),e(Cf,Hot),e(Cf,xre),e(xre,Uot),e(Cf,Jot),e(Cf,$re),e($re,Yot),e(Cf,Kot),e(Cr,Zot),e(Cr,sk),e(sk,ert),e(sk,owe),e(owe,ort),e(sk,rrt),e(Cr,trt),e(Cr,ra),M(lk,ra,null),e(ra,art),e(ra,rwe),e(rwe,nrt),e(ra,srt),e(ra,wf),e(wf,lrt),e(wf,twe),e(twe,irt),e(wf,drt),e(wf,kre),e(kre,crt),e(wf,frt),e(ra,mrt),M($0,ra,null),e(Cr,grt),e(Cr,Kr),M(ik,Kr,null),e(Kr,hrt),e(Kr,awe),e(awe,prt),e(Kr,_rt),e(Kr,$n),e($n,urt),e($n,nwe),e(nwe,brt),e($n,vrt),e($n,swe),e(swe,Frt),e($n,Trt),e($n,lwe),e(lwe,Mrt),e($n,Ert),e(Kr,Crt),e(Kr,iwe),e(iwe,k0),e(k0,dwe),e(dwe,wrt),e(k0,Art),e(k0,Sre),e(Sre,Lrt),e(k0,yrt),e(Kr,xrt),M(S0,Kr,null),b(f,EQe,u),b(f,Af,u),e(Af,R0),e(R0,cwe),M(dk,cwe,null),e(Af,$rt),e(Af,fwe),e(fwe,krt),b(f,CQe,u),b(f,wr,u),M(ck,wr,null),e(wr,Srt),e(wr,Lf),e(Lf,Rrt),e(Lf,Rre),e(Rre,Prt),e(Lf,Brt),e(Lf,Pre),e(Pre,Nrt),e(Lf,Irt),e(wr,qrt),e(wr,fk),e(fk,jrt),e(fk,mwe),e(mwe,Drt),e(fk,Grt),e(wr,Ort),e(wr,ta),M(mk,ta,null),e(ta,Vrt),e(ta,gwe),e(gwe,Xrt),e(ta,zrt),e(ta,yf),e(yf,Qrt),e(yf,hwe),e(hwe,Wrt),e(yf,Hrt),e(yf,Bre),e(Bre,Urt),e(yf,Jrt),e(ta,Yrt),M(P0,ta,null),e(wr,Krt),e(wr,Zr),M(gk,Zr,null),e(Zr,Zrt),e(Zr,pwe),e(pwe,ett),e(Zr,ott),e(Zr,kn),e(kn,rtt),e(kn,_we),e(_we,ttt),e(kn,att),e(kn,uwe),e(uwe,ntt),e(kn,stt),e(kn,bwe),e(bwe,ltt),e(kn,itt),e(Zr,dtt),e(Zr,hk),e(hk,B0),e(B0,vwe),e(vwe,ctt),e(B0,ftt),e(B0,Nre),e(Nre,mtt),e(B0,gtt),e(hk,htt),e(hk,N0),e(N0,Fwe),e(Fwe,ptt),e(N0,_tt),e(N0,Ire),e(Ire,utt),e(N0,btt),e(Zr,vtt),M(I0,Zr,null),b(f,wQe,u),b(f,xf,u),e(xf,q0),e(q0,Twe),M(pk,Twe,null),e(xf,Ftt),e(xf,Mwe),e(Mwe,Ttt),b(f,AQe,u),b(f,Ar,u),M(_k,Ar,null),e(Ar,Mtt),e(Ar,$f),e($f,Ett),e($f,qre),e(qre,Ctt),e($f,wtt),e($f,jre),e(jre,Att),e($f,Ltt),e(Ar,ytt),e(Ar,uk),e(uk,xtt),e(uk,Ewe),e(Ewe,$tt),e(uk,ktt),e(Ar,Stt),e(Ar,aa),M(bk,aa,null),e(aa,Rtt),e(aa,Cwe),e(Cwe,Ptt),e(aa,Btt),e(aa,kf),e(kf,Ntt),e(kf,wwe),e(wwe,Itt),e(kf,qtt),e(kf,Dre),e(Dre,jtt),e(kf,Dtt),e(aa,Gtt),M(j0,aa,null),e(Ar,Ott),e(Ar,et),M(vk,et,null),e(et,Vtt),e(et,Awe),e(Awe,Xtt),e(et,ztt),e(et,Sn),e(Sn,Qtt),e(Sn,Lwe),e(Lwe,Wtt),e(Sn,Htt),e(Sn,ywe),e(ywe,Utt),e(Sn,Jtt),e(Sn,xwe),e(xwe,Ytt),e(Sn,Ktt),e(et,Ztt),e(et,$we),e($we,D0),e(D0,kwe),e(kwe,eat),e(D0,oat),e(D0,Gre),e(Gre,rat),e(D0,tat),e(et,aat),M(G0,et,null),LQe=!0},p(f,[u]){const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),Df.$set(Fk);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),Zg.$set(Swe);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),Nh.$set(Rwe);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),vp.$set(Pwe);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),Fp.$set(Tk);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),Gp.$set(Bwe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Op.$set(Rn);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),zp.$set(Nwe);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),Yu.$set(Iwe);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),Zu.$set(qwe);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),Q2.$set(Mk);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),H2.$set(jwe);const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),N1.$set(Ek);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),q1.$set(Dwe);const Ck={};u&2&&(Ck.$$scope={dirty:u,ctx:f}),Cb.$set(Ck);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),Ab.$set(Gwe);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),Wb.$set(Owe);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),Ub.$set(Vwe);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),Wv.$set(Sf);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),Uv.$set(Xwe);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),LF.$set(zwe);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),xF.$set(Qwe);const wk={};u&2&&(wk.$$scope={dirty:u,ctx:f}),IF.$set(wk);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),jF.$set(Wwe);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),E6.$set(Hwe);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),w6.$set(Uwe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),pT.$set(nt);const Ak={};u&2&&(Ak.$$scope={dirty:u,ctx:f}),uT.$set(Ak);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),FT.$set(Jwe);const Lk={};u&2&&(Lk.$$scope={dirty:u,ctx:f}),MT.$set(Lk);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),IT.$set(Ywe);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),jT.$set(st);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),OT.$set(Kwe);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),XT.$set(Rf);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),WT.$set(Zwe);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),UT.$set(eAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),s7.$set(L);const O0={};u&2&&(O0.$$scope={dirty:u,ctx:f}),i7.$set(O0);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),p7.$set(oAe);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),u7.$set(rAe);const V0={};u&2&&(V0.$$scope={dirty:u,ctx:f}),x7.$set(V0);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),k7.$set(tAe);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),B7.$set(aAe);const X0={};u&2&&(X0.$$scope={dirty:u,ctx:f}),I7.$set(X0);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),X7.$set(nAe);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),Q7.$set(sAe);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),Y7.$set(z0);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),Z7.$set(lAe);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),t8.$set(iAe);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),n8.$set(Q0);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),i8.$set(dAe);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),c8.$set(cAe);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),u8.$set(W0);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),v8.$set(fAe);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),M8.$set(mAe);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),C8.$set(H0);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),FM.$set(gAe);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),MM.$set(hAe);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),QM.$set(U0);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),HM.$set(pAe);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),i4.$set(_Ae);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),c4.$set(J0);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),u4.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),v4.$set(bAe);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),D4.$set(Y0);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),O4.$set(vAe);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),Z4.$set(FAe);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),oE.$set(K0);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),yE.$set(TAe);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),$E.$set(MAe);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),HE.$set(Z0);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),JE.$set(EAe);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),ZE.$set(CAe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),oC.$set(ew);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),tC.$set(wAe);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),nC.$set(AAe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),AC.$set(ow);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),yC.$set(LAe);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),UC.$set(yAe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),YC.$set(rw);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),ZC.$set(xAe);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),o5.$set($Ae);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),t5.$set(tw);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),n5.$set(kAe);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),R5.$set(SAe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),B5.$set(aw);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),Q5.$set(RAe);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),H5.$set(PAe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),i3.$set(nw);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),c3.$set(BAe);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),T3.$set(NAe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),E3.$set(sw);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),P3.$set(IAe);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),N3.$set(qAe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),W3.$set(lw);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),U3.$set(jAe);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),s0.$set(DAe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),i0.$set(iw);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),u0.$set(GAe);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),v0.$set(OAe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),y0.$set(dw);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),$0.$set(VAe);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),S0.$set(XAe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),P0.$set(cw);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),I0.$set(zAe);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),j0.$set(QAe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),G0.$set(fw)},i(f){LQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(Df.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(_L.$$.fragment,f),E(Zg.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(ML.$$.fragment,f),E(Nh.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(vp.$$.fragment,f),E(Fp.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(PL.$$.fragment,f),E(Gp.$$.fragment,f),E(Op.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(IL.$$.fragment,f),E(jL.$$.fragment,f),E(zp.$$.fragment,f),E(DL.$$.fragment,f),E(Yu.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(Zu.$$.fragment,f),E(zL.$$.fragment,f),E(Q2.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(H2.$$.fragment,f),E(JL.$$.fragment,f),E(N1.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(q1.$$.fragment,f),E(oy.$$.fragment,f),E(Cb.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(Ab.$$.fragment,f),E(sy.$$.fragment,f),E(Wb.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(Ub.$$.fragment,f),E(fy.$$.fragment,f),E(Wv.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(Uv.$$.fragment,f),E(_y.$$.fragment,f),E(LF.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(xF.$$.fragment,f),E(Ty.$$.fragment,f),E(IF.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(jF.$$.fragment,f),E(Ay.$$.fragment,f),E(E6.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(w6.$$.fragment,f),E(ky.$$.fragment,f),E(pT.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(uT.$$.fragment,f),E(Ny.$$.fragment,f),E(FT.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(MT.$$.fragment,f),E(Gy.$$.fragment,f),E(IT.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(jT.$$.fragment,f),E(Qy.$$.fragment,f),E(OT.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(XT.$$.fragment,f),E(Yy.$$.fragment,f),E(WT.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o9.$$.fragment,f),E(UT.$$.fragment,f),E(r9.$$.fragment,f),E(s7.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(i7.$$.fragment,f),E(l9.$$.fragment,f),E(p7.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(u7.$$.fragment,f),E(m9.$$.fragment,f),E(x7.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(_9.$$.fragment,f),E(k7.$$.fragment,f),E(u9.$$.fragment,f),E(B7.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(I7.$$.fragment,f),E(E9.$$.fragment,f),E(X7.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(Q7.$$.fragment,f),E(y9.$$.fragment,f),E(Y7.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(Z7.$$.fragment,f),E(R9.$$.fragment,f),E(t8.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(q9.$$.fragment,f),E(n8.$$.fragment,f),E(j9.$$.fragment,f),E(i8.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(c8.$$.fragment,f),E(X9.$$.fragment,f),E(u8.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(v8.$$.fragment,f),E(U9.$$.fragment,f),E(M8.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(C8.$$.fragment,f),E(ex.$$.fragment,f),E(FM.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(MM.$$.fragment,f),E(nx.$$.fragment,f),E(QM.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(HM.$$.fragment,f),E(cx.$$.fragment,f),E(i4.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(c4.$$.fragment,f),E(px.$$.fragment,f),E(u4.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(v4.$$.fragment,f),E(Fx.$$.fragment,f),E(D4.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(O4.$$.fragment,f),E(wx.$$.fragment,f),E(Z4.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(oE.$$.fragment,f),E($x.$$.fragment,f),E(yE.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E($E.$$.fragment,f),E(Bx.$$.fragment,f),E(HE.$$.fragment,f),E(Nx.$$.fragment,f),E(Ix.$$.fragment,f),E(jx.$$.fragment,f),E(JE.$$.fragment,f),E(Dx.$$.fragment,f),E(ZE.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(oC.$$.fragment,f),E(Qx.$$.fragment,f),E(tC.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(nC.$$.fragment,f),E(Yx.$$.fragment,f),E(AC.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(yC.$$.fragment,f),E(r$.$$.fragment,f),E(UC.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(YC.$$.fragment,f),E(l$.$$.fragment,f),E(ZC.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(o5.$$.fragment,f),E(m$.$$.fragment,f),E(t5.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E(n5.$$.fragment,f),E(u$.$$.fragment,f),E(R5.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(B5.$$.fragment,f),E(M$.$$.fragment,f),E(Q5.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(H5.$$.fragment,f),E(L$.$$.fragment,f),E(i3.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(c3.$$.fragment,f),E(S$.$$.fragment,f),E(T3.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(N$.$$.fragment,f),E(E3.$$.fragment,f),E(I$.$$.fragment,f),E(P3.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(N3.$$.fragment,f),E(O$.$$.fragment,f),E(W3.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(Q$.$$.fragment,f),E(U3.$$.fragment,f),E(W$.$$.fragment,f),E(s0.$$.fragment,f),E(H$.$$.fragment,f),E(U$.$$.fragment,f),E(Y$.$$.fragment,f),E(i0.$$.fragment,f),E(K$.$$.fragment,f),E(u0.$$.fragment,f),E(Z$.$$.fragment,f),E(ek.$$.fragment,f),E(rk.$$.fragment,f),E(v0.$$.fragment,f),E(tk.$$.fragment,f),E(y0.$$.fragment,f),E(ak.$$.fragment,f),E(nk.$$.fragment,f),E(lk.$$.fragment,f),E($0.$$.fragment,f),E(ik.$$.fragment,f),E(S0.$$.fragment,f),E(dk.$$.fragment,f),E(ck.$$.fragment,f),E(mk.$$.fragment,f),E(P0.$$.fragment,f),E(gk.$$.fragment,f),E(I0.$$.fragment,f),E(pk.$$.fragment,f),E(_k.$$.fragment,f),E(bk.$$.fragment,f),E(j0.$$.fragment,f),E(vk.$$.fragment,f),E(G0.$$.fragment,f),LQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(Df.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(_L.$$.fragment,f),C(Zg.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(ML.$$.fragment,f),C(Nh.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(vp.$$.fragment,f),C(Fp.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(PL.$$.fragment,f),C(Gp.$$.fragment,f),C(Op.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(IL.$$.fragment,f),C(jL.$$.fragment,f),C(zp.$$.fragment,f),C(DL.$$.fragment,f),C(Yu.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(Zu.$$.fragment,f),C(zL.$$.fragment,f),C(Q2.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(H2.$$.fragment,f),C(JL.$$.fragment,f),C(N1.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(q1.$$.fragment,f),C(oy.$$.fragment,f),C(Cb.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(Ab.$$.fragment,f),C(sy.$$.fragment,f),C(Wb.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(Ub.$$.fragment,f),C(fy.$$.fragment,f),C(Wv.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(Uv.$$.fragment,f),C(_y.$$.fragment,f),C(LF.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(xF.$$.fragment,f),C(Ty.$$.fragment,f),C(IF.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(jF.$$.fragment,f),C(Ay.$$.fragment,f),C(E6.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(w6.$$.fragment,f),C(ky.$$.fragment,f),C(pT.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(uT.$$.fragment,f),C(Ny.$$.fragment,f),C(FT.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(MT.$$.fragment,f),C(Gy.$$.fragment,f),C(IT.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(jT.$$.fragment,f),C(Qy.$$.fragment,f),C(OT.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(XT.$$.fragment,f),C(Yy.$$.fragment,f),C(WT.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o9.$$.fragment,f),C(UT.$$.fragment,f),C(r9.$$.fragment,f),C(s7.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(i7.$$.fragment,f),C(l9.$$.fragment,f),C(p7.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(u7.$$.fragment,f),C(m9.$$.fragment,f),C(x7.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(_9.$$.fragment,f),C(k7.$$.fragment,f),C(u9.$$.fragment,f),C(B7.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(I7.$$.fragment,f),C(E9.$$.fragment,f),C(X7.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(Q7.$$.fragment,f),C(y9.$$.fragment,f),C(Y7.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(Z7.$$.fragment,f),C(R9.$$.fragment,f),C(t8.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(q9.$$.fragment,f),C(n8.$$.fragment,f),C(j9.$$.fragment,f),C(i8.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(c8.$$.fragment,f),C(X9.$$.fragment,f),C(u8.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(v8.$$.fragment,f),C(U9.$$.fragment,f),C(M8.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(C8.$$.fragment,f),C(ex.$$.fragment,f),C(FM.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(MM.$$.fragment,f),C(nx.$$.fragment,f),C(QM.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(HM.$$.fragment,f),C(cx.$$.fragment,f),C(i4.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(c4.$$.fragment,f),C(px.$$.fragment,f),C(u4.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(v4.$$.fragment,f),C(Fx.$$.fragment,f),C(D4.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(O4.$$.fragment,f),C(wx.$$.fragment,f),C(Z4.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(oE.$$.fragment,f),C($x.$$.fragment,f),C(yE.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C($E.$$.fragment,f),C(Bx.$$.fragment,f),C(HE.$$.fragment,f),C(Nx.$$.fragment,f),C(Ix.$$.fragment,f),C(jx.$$.fragment,f),C(JE.$$.fragment,f),C(Dx.$$.fragment,f),C(ZE.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(oC.$$.fragment,f),C(Qx.$$.fragment,f),C(tC.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(nC.$$.fragment,f),C(Yx.$$.fragment,f),C(AC.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(yC.$$.fragment,f),C(r$.$$.fragment,f),C(UC.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(YC.$$.fragment,f),C(l$.$$.fragment,f),C(ZC.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(o5.$$.fragment,f),C(m$.$$.fragment,f),C(t5.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C(n5.$$.fragment,f),C(u$.$$.fragment,f),C(R5.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(B5.$$.fragment,f),C(M$.$$.fragment,f),C(Q5.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(H5.$$.fragment,f),C(L$.$$.fragment,f),C(i3.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(c3.$$.fragment,f),C(S$.$$.fragment,f),C(T3.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(N$.$$.fragment,f),C(E3.$$.fragment,f),C(I$.$$.fragment,f),C(P3.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(N3.$$.fragment,f),C(O$.$$.fragment,f),C(W3.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(Q$.$$.fragment,f),C(U3.$$.fragment,f),C(W$.$$.fragment,f),C(s0.$$.fragment,f),C(H$.$$.fragment,f),C(U$.$$.fragment,f),C(Y$.$$.fragment,f),C(i0.$$.fragment,f),C(K$.$$.fragment,f),C(u0.$$.fragment,f),C(Z$.$$.fragment,f),C(ek.$$.fragment,f),C(rk.$$.fragment,f),C(v0.$$.fragment,f),C(tk.$$.fragment,f),C(y0.$$.fragment,f),C(ak.$$.fragment,f),C(nk.$$.fragment,f),C(lk.$$.fragment,f),C($0.$$.fragment,f),C(ik.$$.fragment,f),C(S0.$$.fragment,f),C(dk.$$.fragment,f),C(ck.$$.fragment,f),C(mk.$$.fragment,f),C(P0.$$.fragment,f),C(gk.$$.fragment,f),C(I0.$$.fragment,f),C(pk.$$.fragment,f),C(_k.$$.fragment,f),C(bk.$$.fragment,f),C(j0.$$.fragment,f),C(vk.$$.fragment,f),C(G0.$$.fragment,f),LQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Bf),f&&t(lt),f&&t(Oe),f&&t(We),f&&t(If),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(wo),f&&t(Ra),f&&t(MXe),f&&t(Bi),w(cL),f&&t(EXe),f&&t(qn),f&&t(CXe),w(fL,f),f&&t(wXe),f&&t(WS),f&&t(AXe),w(Df,f),f&&t(LXe),f&&t(Ni),w(mL),f&&t(yXe),f&&t(Ao),w(gL),w(_L),w(Zg),w(uL),f&&t(xXe),f&&t(qi),w(bL),f&&t($Xe),f&&t(Lo),w(vL),w(ML),w(Nh),w(EL),f&&t(kXe),f&&t(ji),w(CL),f&&t(SXe),f&&t(yo),w(wL),w(yL),w(vp),w(Fp),w(xL),f&&t(RXe),f&&t(Di),w($L),f&&t(PXe),f&&t(xo),w(kL),w(PL),w(Gp),w(Op),w(BL),f&&t(BXe),f&&t(Oi),w(NL),f&&t(NXe),f&&t($o),w(IL),w(jL),w(zp),w(DL),w(Yu),f&&t(IXe),f&&t(zi),w(GL),f&&t(qXe),f&&t(ko),w(OL),w(XL),w(Zu),w(zL),w(Q2),f&&t(jXe),f&&t(Hi),w(QL),f&&t(DXe),f&&t(So),w(WL),w(UL),w(H2),w(JL),w(N1),f&&t(GXe),f&&t(Yi),w(YL),f&&t(OXe),f&&t(Ro),w(KL),w(ey),w(q1),w(oy),w(Cb),f&&t(VXe),f&&t(ed),w(ry),f&&t(XXe),f&&t(Po),w(ty),w(ny),w(Ab),w(sy),w(Wb),f&&t(zXe),f&&t(td),w(ly),f&&t(QXe),f&&t(Bo),w(iy),w(cy),w(Ub),w(fy),w(Wv),f&&t(WXe),f&&t(sd),w(my),f&&t(HXe),f&&t(No),w(gy),w(py),w(Uv),w(_y),w(LF),f&&t(UXe),f&&t(dd),w(uy),f&&t(JXe),f&&t(Io),w(by),w(Fy),w(xF),w(Ty),w(IF),f&&t(YXe),f&&t(md),w(My),f&&t(KXe),f&&t(jo),w(Ey),w(wy),w(jF),w(Ay),w(E6),f&&t(ZXe),f&&t(pd),w(Ly),f&&t(eze),f&&t(Do),w(yy),w($y),w(w6),w(ky),w(pT),f&&t(oze),f&&t(bd),w(Sy),f&&t(rze),f&&t(Go),w(Ry),w(By),w(uT),w(Ny),w(FT),f&&t(tze),f&&t(Td),w(Iy),f&&t(aze),f&&t(Oo),w(qy),w(Dy),w(MT),w(Gy),w(IT),f&&t(nze),f&&t(Cd),w(Oy),f&&t(sze),f&&t(Vo),w(Vy),w(zy),w(jT),w(Qy),w(OT),f&&t(lze),f&&t(Ld),w(Wy),f&&t(ize),f&&t(Xo),w(Hy),w(Jy),w(XT),w(Yy),w(WT),f&&t(dze),f&&t($d),w(Ky),f&&t(cze),f&&t(zo),w(Zy),w(o9),w(UT),w(r9),w(s7),f&&t(fze),f&&t(Rd),w(t9),f&&t(mze),f&&t(Qo),w(a9),w(s9),w(i7),w(l9),w(p7),f&&t(gze),f&&t(Nd),w(i9),f&&t(hze),f&&t(Wo),w(d9),w(f9),w(u7),w(m9),w(x7),f&&t(pze),f&&t(jd),w(g9),f&&t(_ze),f&&t(Ho),w(h9),w(_9),w(k7),w(u9),w(B7),f&&t(uze),f&&t(Od),w(v9),f&&t(bze),f&&t(Uo),w(F9),w(M9),w(I7),w(E9),w(X7),f&&t(vze),f&&t(zd),w(C9),f&&t(Fze),f&&t(Jo),w(w9),w(L9),w(Q7),w(y9),w(Y7),f&&t(Tze),f&&t(Ud),w(x9),f&&t(Mze),f&&t(Yo),w($9),w(S9),w(Z7),w(R9),w(t8),f&&t(Eze),f&&t(Kd),w(B9),f&&t(Cze),f&&t(Ko),w(N9),w(q9),w(n8),w(j9),w(i8),f&&t(wze),f&&t(oc),w(D9),f&&t(Aze),f&&t(Zo),w(G9),w(V9),w(c8),w(X9),w(u8),f&&t(Lze),f&&t(ac),w(z9),f&&t(yze),f&&t(er),w(Q9),w(H9),w(v8),w(U9),w(M8),f&&t(xze),f&&t(lc),w(J9),f&&t($ze),f&&t(or),w(Y9),w(Z9),w(C8),w(ex),w(FM),f&&t(kze),f&&t(cc),w(ox),f&&t(Sze),f&&t(rr),w(rx),w(ax),w(MM),w(nx),w(QM),f&&t(Rze),f&&t(gc),w(sx),f&&t(Pze),f&&t(tr),w(lx),w(dx),w(HM),w(cx),w(i4),f&&t(Bze),f&&t(_c),w(fx),f&&t(Nze),f&&t(ar),w(mx),w(hx),w(c4),w(px),w(u4),f&&t(Ize),f&&t(vc),w(_x),f&&t(qze),f&&t(nr),w(ux),w(vx),w(v4),w(Fx),w(D4),f&&t(jze),f&&t(Mc),w(Tx),f&&t(Dze),f&&t(sr),w(Mx),w(Cx),w(O4),w(wx),w(Z4),f&&t(Gze),f&&t(wc),w(Ax),f&&t(Oze),f&&t(lr),w(Lx),w(xx),w(oE),w($x),w(yE),f&&t(Vze),f&&t(yc),w(kx),f&&t(Xze),f&&t(ir),w(Sx),w(Px),w($E),w(Bx),w(HE),f&&t(zze),f&&t(kc),w(Nx),f&&t(Qze),f&&t(dr),w(Ix),w(jx),w(JE),w(Dx),w(ZE),f&&t(Wze),f&&t(Pc),w(Ox),f&&t(Hze),f&&t(cr),w(Vx),w(zx),w(oC),w(Qx),w(tC),f&&t(Uze),f&&t(Ic),w(Wx),f&&t(Jze),f&&t(fr),w(Hx),w(Jx),w(nC),w(Yx),w(AC),f&&t(Yze),f&&t(Dc),w(Kx),f&&t(Kze),f&&t(mr),w(Zx),w(o$),w(yC),w(r$),w(UC),f&&t(Zze),f&&t(Vc),w(t$),f&&t(eQe),f&&t(gr),w(a$),w(s$),w(YC),w(l$),w(ZC),f&&t(oQe),f&&t(Qc),w(i$),f&&t(rQe),f&&t(hr),w(d$),w(f$),w(o5),w(m$),w(t5),f&&t(tQe),f&&t(Uc),w(g$),f&&t(aQe),f&&t(pr),w(h$),w(_$),w(n5),w(u$),w(R5),f&&t(nQe),f&&t(Kc),w(b$),f&&t(sQe),f&&t(_r),w(v$),w(T$),w(B5),w(M$),w(Q5),f&&t(lQe),f&&t(of),w(E$),f&&t(iQe),f&&t(ur),w(C$),w(A$),w(H5),w(L$),w(i3),f&&t(dQe),f&&t(af),w(y$),f&&t(cQe),f&&t(br),w(x$),w(k$),w(c3),w(S$),w(T3),f&&t(fQe),f&&t(lf),w(R$),f&&t(mQe),f&&t(vr),w(P$),w(N$),w(E3),w(I$),w(P3),f&&t(gQe),f&&t(ff),w(q$),f&&t(hQe),f&&t(Fr),w(j$),w(G$),w(N3),w(O$),w(W3),f&&t(pQe),f&&t(hf),w(V$),f&&t(_Qe),f&&t(Tr),w(X$),w(Q$),w(U3),w(W$),w(s0),f&&t(uQe),f&&t(uf),w(H$),f&&t(bQe),f&&t(Mr),w(U$),w(Y$),w(i0),w(K$),w(u0),f&&t(vQe),f&&t(Ff),w(Z$),f&&t(FQe),f&&t(Er),w(ek),w(rk),w(v0),w(tk),w(y0),f&&t(TQe),f&&t(Ef),w(ak),f&&t(MQe),f&&t(Cr),w(nk),w(lk),w($0),w(ik),w(S0),f&&t(EQe),f&&t(Af),w(dk),f&&t(CQe),f&&t(wr),w(ck),w(mk),w(P0),w(gk),w(I0),f&&t(wQe),f&&t(xf),w(pk),f&&t(AQe),f&&t(Ar),w(_k),w(bk),w(j0),w(vk),w(G0)}}}const YUt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function KUt($){return JWt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class nJt extends QWt{constructor(g){super();WWt(this,g,KUt,JUt,HWt,{})}}export{nJt as default,YUt as metadata};
