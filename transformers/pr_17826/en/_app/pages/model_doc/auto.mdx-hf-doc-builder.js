import{S as $Ut,i as kUt,s as SUt,e as a,k as l,w as F,t as o,M as RUt,c as n,d as t,m as i,a as s,x as T,h as r,b as d,G as e,g as b,y as M,q as E,o as C,B as w,v as PUt,L as q}from"../../chunks/vendor-hf-doc-builder.js";import{T as Ant}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function BUt($){let g,v,p,m,_,c,h,wo,xi,If,lt,$i,ki,hL,Nf,Oe,Qe,Si,Pn,pL,Bn,In,_L,Ri,Nn,uL,Pi,qf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),c=a("code"),h=o("PretrainedConfig"),wo=o(`, make sure its
`),xi=a("code"),If=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),$i=a("code"),ki=o('"new-model"'),hL=o(")."),Nf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Si=a("code"),Pn=o("NewModel"),pL=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),_L=o(`, make sure its
`),Ri=a("code"),Nn=o("config_class"),uL=o(` attribute is set to the same class you use when registering the model (here
`),Pi=a("code"),qf=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var YS=s(p);m=r(YS,"NewModelConfig"),YS.forEach(t),_=r(Ae," is a subclass of "),c=n(Ae,"CODE",{});var Bi=s(c);h=r(Bi,"PretrainedConfig"),Bi.forEach(t),wo=r(Ae,`, make sure its
`),xi=n(Ae,"CODE",{});var KS=s(xi);If=r(KS,"model_type"),KS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),$i=n(Ae,"CODE",{});var ZS=s($i);ki=r(ZS,'"new-model"'),ZS.forEach(t),hL=r(Ae,")."),Ae.forEach(t),Nf=i(He),Oe=n(He,"P",{});var Ao=s(Oe);Qe=r(Ao,"Likewise, if your "),Si=n(Ao,"CODE",{});var Ra=s(Si);Pn=r(Ra,"NewModel"),Ra.forEach(t),pL=r(Ao," is a subclass of "),Bn=n(Ao,"A",{href:!0});var eR=s(Bn);In=r(eR,"PreTrainedModel"),eR.forEach(t),_L=r(Ao,`, make sure its
`),Ri=n(Ao,"CODE",{});var jf=s(Ri);Nn=r(jf,"config_class"),jf.forEach(t),uL=r(Ao,` attribute is set to the same class you use when registering the model (here
`),Pi=n(Ao,"CODE",{});var oR=s(Pi);qf=r(oR,"NewModelConfig"),oR.forEach(t),Sa=r(Ao,")."),Ao.forEach(t),this.h()},h(){d(Bn,"href","/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,c),e(c,h),e(g,wo),e(g,xi),e(xi,If),e(g,lt),e(g,$i),e($i,ki),e(g,hL),b(He,Nf,Ae),b(He,Oe,Ae),e(Oe,Qe),e(Oe,Si),e(Si,Pn),e(Oe,pL),e(Oe,Bn),e(Bn,In),e(Oe,_L),e(Oe,Ri),e(Ri,Nn),e(Oe,uL),e(Oe,Pi),e(Pi,qf),e(Oe,Sa)},d(He){He&&t(g),He&&t(Nf),He&&t(Oe)}}}function IUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function NUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function qUt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(c){c&&t(g)}}}function jUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function DUt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(c){c&&t(g)}}}function GUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function OUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function VUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function XUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function zUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function WUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function QUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function HUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function UUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function JUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function YUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function KUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function ZUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function eJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function oJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function rJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function tJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function aJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function nJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function sJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function lJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function iJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function dJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function cJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function fJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function mJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function gJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function hJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function pJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function _Jt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function uJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function bJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function vJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function FJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function TJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function MJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function EJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function CJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function wJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function AJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function LJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function yJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function xJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function $Jt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function kJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function SJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function RJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function PJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function BJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function IJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function NJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function qJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function jJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function DJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function GJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function OJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function VJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function XJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function zJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function WJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function QJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function HJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function UJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function JJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function YJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function KJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function ZJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function eYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function oYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function rYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function tYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function aYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function nYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function sYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function lYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function iYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function dYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function cYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function fYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function mYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function gYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function hYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function pYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function _Yt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function uYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function bYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function vYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function FYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function TYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function MYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function EYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function CYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function wYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function AYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function LYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function yYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function xYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function $Yt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function kYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function SYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function RYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function PYt($){let g,v,p,m,_,c,h,wo,xi,If,lt,$i,ki,hL,Nf,Oe,Qe,Si,Pn,pL,Bn,In,_L,Ri,Nn,uL,Pi,qf,Sa,He,Ae,YS,Bi,KS,ZS,Ao,Ra,eR,jf,oR,_Ue,oze,Ii,Df,one,bL,uUe,rne,bUe,rze,qn,vUe,tne,FUe,TUe,ane,MUe,EUe,tze,vL,aze,rR,CUe,nze,Gf,sze,Ni,Of,nne,FL,wUe,sne,AUe,lze,Lo,TL,LUe,ML,yUe,tR,xUe,$Ue,kUe,EL,SUe,lne,RUe,PUe,BUe,yr,CL,IUe,ine,NUe,qUe,qi,jUe,dne,DUe,GUe,cne,OUe,VUe,XUe,A,Vf,fne,zUe,WUe,aR,QUe,HUe,UUe,Xf,mne,JUe,YUe,nR,KUe,ZUe,eJe,zf,gne,oJe,rJe,sR,tJe,aJe,nJe,Wf,hne,sJe,lJe,lR,iJe,dJe,cJe,Qf,pne,fJe,mJe,iR,gJe,hJe,pJe,Hf,_ne,_Je,uJe,dR,bJe,vJe,FJe,Uf,une,TJe,MJe,cR,EJe,CJe,wJe,Jf,bne,AJe,LJe,fR,yJe,xJe,$Je,Yf,vne,kJe,SJe,mR,RJe,PJe,BJe,Kf,Fne,IJe,NJe,gR,qJe,jJe,DJe,Zf,Tne,GJe,OJe,hR,VJe,XJe,zJe,em,Mne,WJe,QJe,pR,HJe,UJe,JJe,om,Ene,YJe,KJe,_R,ZJe,eYe,oYe,rm,Cne,rYe,tYe,uR,aYe,nYe,sYe,tm,wne,lYe,iYe,bR,dYe,cYe,fYe,am,Ane,mYe,gYe,vR,hYe,pYe,_Ye,nm,Lne,uYe,bYe,FR,vYe,FYe,TYe,sm,yne,MYe,EYe,TR,CYe,wYe,AYe,lm,xne,LYe,yYe,MR,xYe,$Ye,kYe,im,$ne,SYe,RYe,ER,PYe,BYe,IYe,dm,kne,NYe,qYe,CR,jYe,DYe,GYe,cm,Sne,OYe,VYe,wR,XYe,zYe,WYe,fm,Rne,QYe,HYe,AR,UYe,JYe,YYe,mm,Pne,KYe,ZYe,LR,eKe,oKe,rKe,gm,Bne,tKe,aKe,yR,nKe,sKe,lKe,hm,Ine,iKe,dKe,xR,cKe,fKe,mKe,pm,Nne,gKe,hKe,$R,pKe,_Ke,uKe,_m,qne,bKe,vKe,kR,FKe,TKe,MKe,um,jne,EKe,CKe,SR,wKe,AKe,LKe,bm,Dne,yKe,xKe,RR,$Ke,kKe,SKe,vm,Gne,RKe,PKe,PR,BKe,IKe,NKe,Fm,One,qKe,jKe,BR,DKe,GKe,OKe,Tm,Vne,VKe,XKe,IR,zKe,WKe,QKe,Mm,Xne,HKe,UKe,NR,JKe,YKe,KKe,Em,zne,ZKe,eZe,qR,oZe,rZe,tZe,Cm,Wne,aZe,nZe,jR,sZe,lZe,iZe,wm,Qne,dZe,cZe,DR,fZe,mZe,gZe,Am,Hne,hZe,pZe,GR,_Ze,uZe,bZe,Lm,Une,vZe,FZe,OR,TZe,MZe,EZe,ym,Jne,CZe,wZe,VR,AZe,LZe,yZe,xm,Yne,xZe,$Ze,XR,kZe,SZe,RZe,$m,Kne,PZe,BZe,zR,IZe,NZe,qZe,km,Zne,jZe,DZe,WR,GZe,OZe,VZe,Sm,ese,XZe,zZe,QR,WZe,QZe,HZe,Rm,ose,UZe,JZe,HR,YZe,KZe,ZZe,Pm,rse,eeo,oeo,UR,reo,teo,aeo,Bm,tse,neo,seo,JR,leo,ieo,deo,Im,ase,ceo,feo,YR,meo,geo,heo,Nm,nse,peo,_eo,KR,ueo,beo,veo,qm,sse,Feo,Teo,ZR,Meo,Eeo,Ceo,jm,lse,weo,Aeo,eP,Leo,yeo,xeo,Dm,ise,$eo,keo,oP,Seo,Reo,Peo,Gm,dse,Beo,Ieo,rP,Neo,qeo,jeo,Om,cse,Deo,Geo,tP,Oeo,Veo,Xeo,Vm,fse,zeo,Weo,aP,Qeo,Heo,Ueo,Xm,mse,Jeo,Yeo,nP,Keo,Zeo,eoo,zm,gse,ooo,roo,sP,too,aoo,noo,Wm,hse,soo,loo,lP,ioo,doo,coo,Qm,pse,foo,moo,iP,goo,hoo,poo,Hm,_se,_oo,uoo,dP,boo,voo,Foo,Um,use,Too,Moo,cP,Eoo,Coo,woo,Jm,bse,Aoo,Loo,fP,yoo,xoo,$oo,Ym,vse,koo,Soo,mP,Roo,Poo,Boo,Km,Fse,Ioo,Noo,gP,qoo,joo,Doo,Zm,Tse,Goo,Ooo,hP,Voo,Xoo,zoo,eg,Mse,Woo,Qoo,pP,Hoo,Uoo,Joo,og,Ese,Yoo,Koo,_P,Zoo,ero,oro,rg,Cse,rro,tro,uP,aro,nro,sro,tg,wse,lro,iro,bP,dro,cro,fro,ag,Ase,mro,gro,vP,hro,pro,_ro,ng,Lse,uro,bro,FP,vro,Fro,Tro,sg,yse,Mro,Ero,TP,Cro,wro,Aro,lg,xse,Lro,yro,MP,xro,$ro,kro,ig,$se,Sro,Rro,EP,Pro,Bro,Iro,dg,kse,Nro,qro,CP,jro,Dro,Gro,cg,Sse,Oro,Vro,wP,Xro,zro,Wro,fg,Rse,Qro,Hro,AP,Uro,Jro,Yro,mg,Pse,Kro,Zro,LP,eto,oto,rto,gg,Bse,tto,ato,yP,nto,sto,lto,hg,Ise,ito,dto,xP,cto,fto,mto,pg,Nse,gto,hto,$P,pto,_to,uto,_g,qse,bto,vto,kP,Fto,Tto,Mto,ug,jse,Eto,Cto,SP,wto,Ato,Lto,bg,Dse,yto,xto,RP,$to,kto,Sto,vg,Gse,Rto,Pto,PP,Bto,Ito,Nto,Fg,Ose,qto,jto,BP,Dto,Gto,Oto,Tg,Vse,Vto,Xto,IP,zto,Wto,Qto,Mg,Xse,Hto,Uto,NP,Jto,Yto,Kto,Eg,zse,Zto,eao,qP,oao,rao,tao,Cg,Wse,aao,nao,jP,sao,lao,iao,wg,Qse,dao,cao,DP,fao,mao,gao,Ag,Hse,hao,pao,GP,_ao,uao,bao,Lg,Use,vao,Fao,OP,Tao,Mao,Eao,yg,Jse,Cao,wao,VP,Aao,Lao,yao,xg,Yse,xao,$ao,XP,kao,Sao,Rao,$g,Kse,Pao,Bao,zP,Iao,Nao,qao,kg,Zse,jao,Dao,WP,Gao,Oao,Vao,Sg,ele,Xao,zao,QP,Wao,Qao,Hao,Rg,ole,Uao,Jao,HP,Yao,Kao,Zao,Pg,rle,eno,ono,UP,rno,tno,ano,Bg,tle,nno,sno,JP,lno,ino,dno,Ig,ale,cno,fno,YP,mno,gno,hno,Ng,nle,pno,_no,KP,uno,bno,vno,qg,sle,Fno,Tno,ZP,Mno,Eno,Cno,jg,lle,wno,Ano,eB,Lno,yno,xno,Dg,ile,$no,kno,oB,Sno,Rno,Pno,Gg,dle,Bno,Ino,rB,Nno,qno,jno,Og,cle,Dno,Gno,tB,Ono,Vno,Xno,Vg,fle,zno,Wno,aB,Qno,Hno,Uno,Xg,mle,Jno,Yno,nB,Kno,Zno,eso,zg,gle,oso,rso,sB,tso,aso,nso,Wg,hle,sso,lso,lB,iso,dso,cso,Qg,ple,fso,mso,iB,gso,hso,pso,Hg,_le,_so,uso,dB,bso,vso,Fso,Ug,ule,Tso,Mso,cB,Eso,Cso,wso,Jg,ble,Aso,Lso,fB,yso,xso,$so,Yg,vle,kso,Sso,mB,Rso,Pso,Bso,Kg,Fle,Iso,Nso,gB,qso,jso,Dso,Zg,Tle,Gso,Oso,hB,Vso,Xso,zso,eh,Mle,Wso,Qso,pB,Hso,Uso,Jso,oh,Yso,rh,wL,Kso,Ele,Zso,ize,ji,th,Cle,AL,elo,wle,olo,dze,yo,LL,rlo,yL,tlo,_B,alo,nlo,slo,xL,llo,Ale,ilo,dlo,clo,xr,$L,flo,Lle,mlo,glo,Pa,hlo,yle,plo,_lo,xle,ulo,blo,$le,vlo,Flo,Tlo,k,jn,kle,Mlo,Elo,uB,Clo,wlo,bB,Alo,Llo,ylo,Dn,Sle,xlo,$lo,vB,klo,Slo,FB,Rlo,Plo,Blo,Gn,Rle,Ilo,Nlo,TB,qlo,jlo,MB,Dlo,Glo,Olo,ah,Ple,Vlo,Xlo,EB,zlo,Wlo,Qlo,On,Ble,Hlo,Ulo,CB,Jlo,Ylo,wB,Klo,Zlo,eio,nh,Ile,oio,rio,AB,tio,aio,nio,sh,Nle,sio,lio,LB,iio,dio,cio,lh,qle,fio,mio,yB,gio,hio,pio,Vn,jle,_io,uio,xB,bio,vio,$B,Fio,Tio,Mio,Xn,Dle,Eio,Cio,kB,wio,Aio,SB,Lio,yio,xio,zn,Gle,$io,kio,RB,Sio,Rio,PB,Pio,Bio,Iio,ih,Ole,Nio,qio,BB,jio,Dio,Gio,dh,Vle,Oio,Vio,IB,Xio,zio,Wio,ch,Xle,Qio,Hio,NB,Uio,Jio,Yio,Wn,zle,Kio,Zio,qB,edo,odo,jB,rdo,tdo,ado,fh,Wle,ndo,sdo,DB,ldo,ido,ddo,Qn,Qle,cdo,fdo,GB,mdo,gdo,OB,hdo,pdo,_do,Hn,Hle,udo,bdo,VB,vdo,Fdo,XB,Tdo,Mdo,Edo,Un,Ule,Cdo,wdo,zB,Ado,Ldo,WB,ydo,xdo,$do,Jn,Jle,kdo,Sdo,QB,Rdo,Pdo,HB,Bdo,Ido,Ndo,mh,Yle,qdo,jdo,UB,Ddo,Gdo,Odo,Yn,Kle,Vdo,Xdo,JB,zdo,Wdo,YB,Qdo,Hdo,Udo,Kn,Zle,Jdo,Ydo,KB,Kdo,Zdo,ZB,eco,oco,rco,Zn,eie,tco,aco,eI,nco,sco,oI,lco,ico,dco,es,oie,cco,fco,rI,mco,gco,tI,hco,pco,_co,os,rie,uco,bco,aI,vco,Fco,nI,Tco,Mco,Eco,rs,tie,Cco,wco,sI,Aco,Lco,lI,yco,xco,$co,gh,aie,kco,Sco,iI,Rco,Pco,Bco,ts,nie,Ico,Nco,dI,qco,jco,cI,Dco,Gco,Oco,hh,sie,Vco,Xco,fI,zco,Wco,Qco,as,lie,Hco,Uco,mI,Jco,Yco,gI,Kco,Zco,efo,ns,iie,ofo,rfo,hI,tfo,afo,pI,nfo,sfo,lfo,ss,die,ifo,dfo,_I,cfo,ffo,uI,mfo,gfo,hfo,ph,cie,pfo,_fo,bI,ufo,bfo,vfo,ls,fie,Ffo,Tfo,vI,Mfo,Efo,FI,Cfo,wfo,Afo,is,mie,Lfo,yfo,TI,xfo,$fo,MI,kfo,Sfo,Rfo,ds,gie,Pfo,Bfo,EI,Ifo,Nfo,CI,qfo,jfo,Dfo,_h,hie,Gfo,Ofo,wI,Vfo,Xfo,zfo,cs,pie,Wfo,Qfo,AI,Hfo,Ufo,LI,Jfo,Yfo,Kfo,uh,_ie,Zfo,emo,uie,omo,rmo,tmo,fs,bie,amo,nmo,yI,smo,lmo,xI,imo,dmo,cmo,ms,vie,fmo,mmo,$I,gmo,hmo,kI,pmo,_mo,umo,gs,Fie,bmo,vmo,SI,Fmo,Tmo,RI,Mmo,Emo,Cmo,hs,Tie,wmo,Amo,PI,Lmo,ymo,BI,xmo,$mo,kmo,ps,Mie,Smo,Rmo,II,Pmo,Bmo,NI,Imo,Nmo,qmo,_s,Eie,jmo,Dmo,qI,Gmo,Omo,jI,Vmo,Xmo,zmo,us,Cie,Wmo,Qmo,DI,Hmo,Umo,GI,Jmo,Ymo,Kmo,bh,wie,Zmo,ego,OI,ogo,rgo,tgo,bs,Aie,ago,ngo,VI,sgo,lgo,XI,igo,dgo,cgo,vh,Lie,fgo,mgo,zI,ggo,hgo,pgo,Fh,yie,_go,ugo,WI,bgo,vgo,Fgo,vs,xie,Tgo,Mgo,QI,Ego,Cgo,HI,wgo,Ago,Lgo,Fs,$ie,ygo,xgo,UI,$go,kgo,JI,Sgo,Rgo,Pgo,Ts,kie,Bgo,Igo,YI,Ngo,qgo,KI,jgo,Dgo,Ggo,Th,Sie,Ogo,Vgo,ZI,Xgo,zgo,Wgo,Ms,Rie,Qgo,Hgo,eN,Ugo,Jgo,oN,Ygo,Kgo,Zgo,Es,Pie,eho,oho,rN,rho,tho,tN,aho,nho,sho,Cs,Bie,lho,iho,aN,dho,cho,nN,fho,mho,gho,ws,Iie,hho,pho,sN,_ho,uho,lN,bho,vho,Fho,As,Nie,Tho,Mho,iN,Eho,Cho,dN,who,Aho,Lho,Ls,qie,yho,xho,cN,$ho,kho,fN,Sho,Rho,Pho,ys,jie,Bho,Iho,mN,Nho,qho,gN,jho,Dho,Gho,xs,Die,Oho,Vho,hN,Xho,zho,pN,Who,Qho,Hho,Mh,Gie,Uho,Jho,_N,Yho,Kho,Zho,$s,Oie,epo,opo,uN,rpo,tpo,bN,apo,npo,spo,ks,Vie,lpo,ipo,vN,dpo,cpo,FN,fpo,mpo,gpo,Eh,Xie,hpo,ppo,TN,_po,upo,bpo,Ch,zie,vpo,Fpo,MN,Tpo,Mpo,Epo,wh,Wie,Cpo,wpo,EN,Apo,Lpo,ypo,Ah,Qie,xpo,$po,CN,kpo,Spo,Rpo,Ss,Hie,Ppo,Bpo,wN,Ipo,Npo,AN,qpo,jpo,Dpo,Lh,Uie,Gpo,Opo,LN,Vpo,Xpo,zpo,Rs,Jie,Wpo,Qpo,yN,Hpo,Upo,xN,Jpo,Ypo,Kpo,Ps,Yie,Zpo,e_o,$N,o_o,r_o,kN,t_o,a_o,n_o,Bs,Kie,s_o,l_o,SN,i_o,d_o,RN,c_o,f_o,m_o,Is,Zie,g_o,h_o,PN,p_o,__o,BN,u_o,b_o,v_o,Ns,ede,F_o,T_o,IN,M_o,E_o,NN,C_o,w_o,A_o,qs,ode,L_o,y_o,qN,x_o,$_o,jN,k_o,S_o,R_o,yh,rde,P_o,B_o,DN,I_o,N_o,q_o,xh,tde,j_o,D_o,GN,G_o,O_o,V_o,js,ade,X_o,z_o,ON,W_o,Q_o,VN,H_o,U_o,J_o,Ds,nde,Y_o,K_o,XN,Z_o,euo,zN,ouo,ruo,tuo,Gs,sde,auo,nuo,WN,suo,luo,QN,iuo,duo,cuo,$h,lde,fuo,muo,HN,guo,huo,puo,kh,ide,_uo,uuo,UN,buo,vuo,Fuo,Sh,dde,Tuo,Muo,JN,Euo,Cuo,wuo,Os,cde,Auo,Luo,YN,yuo,xuo,KN,$uo,kuo,Suo,Vs,fde,Ruo,Puo,ZN,Buo,Iuo,eq,Nuo,quo,juo,Rh,mde,Duo,Guo,oq,Ouo,Vuo,Xuo,Ph,gde,zuo,Wuo,rq,Quo,Huo,Uuo,Bh,hde,Juo,Yuo,tq,Kuo,Zuo,e2o,Xs,pde,o2o,r2o,aq,t2o,a2o,nq,n2o,s2o,l2o,Ih,_de,i2o,d2o,sq,c2o,f2o,m2o,Nh,ude,g2o,h2o,lq,p2o,_2o,u2o,zs,bde,b2o,v2o,iq,F2o,T2o,dq,M2o,E2o,C2o,Ws,vde,w2o,A2o,cq,L2o,y2o,fq,x2o,$2o,k2o,Qs,Fde,S2o,R2o,mq,P2o,B2o,gq,I2o,N2o,q2o,Hs,Tde,j2o,D2o,hq,G2o,O2o,pq,V2o,X2o,z2o,qh,W2o,jh,kL,Q2o,Mde,H2o,cze,Di,Dh,Ede,SL,U2o,Cde,J2o,fze,xo,RL,Y2o,PL,K2o,_q,Z2o,e1o,o1o,BL,r1o,wde,t1o,a1o,n1o,Ue,IL,s1o,Ade,l1o,i1o,Ba,d1o,Lde,c1o,f1o,yde,m1o,g1o,xde,h1o,p1o,_1o,J,Gh,$de,u1o,b1o,uq,v1o,F1o,T1o,Oh,kde,M1o,E1o,bq,C1o,w1o,A1o,Vh,Sde,L1o,y1o,vq,x1o,$1o,k1o,Xh,Rde,S1o,R1o,Fq,P1o,B1o,I1o,zh,Pde,N1o,q1o,Tq,j1o,D1o,G1o,Wh,Bde,O1o,V1o,Mq,X1o,z1o,W1o,Qh,Ide,Q1o,H1o,Eq,U1o,J1o,Y1o,Hh,Nde,K1o,Z1o,Cq,ebo,obo,rbo,Uh,qde,tbo,abo,wq,nbo,sbo,lbo,Jh,jde,ibo,dbo,Aq,cbo,fbo,mbo,Yh,Dde,gbo,hbo,Lq,pbo,_bo,ubo,Kh,Gde,bbo,vbo,yq,Fbo,Tbo,Mbo,Zh,Ode,Ebo,Cbo,xq,wbo,Abo,Lbo,ep,Vde,ybo,xbo,$q,$bo,kbo,Sbo,op,Xde,Rbo,Pbo,kq,Bbo,Ibo,Nbo,rp,zde,qbo,jbo,Sq,Dbo,Gbo,Obo,tp,Wde,Vbo,Xbo,Rq,zbo,Wbo,Qbo,ap,Qde,Hbo,Ubo,Pq,Jbo,Ybo,Kbo,np,Hde,Zbo,evo,Bq,ovo,rvo,tvo,sp,Ude,avo,nvo,Iq,svo,lvo,ivo,lp,Jde,dvo,cvo,Nq,fvo,mvo,gvo,ip,Yde,hvo,pvo,qq,_vo,uvo,bvo,dp,Kde,vvo,Fvo,jq,Tvo,Mvo,Evo,cp,Zde,Cvo,wvo,Dq,Avo,Lvo,yvo,fp,ece,xvo,$vo,Gq,kvo,Svo,Rvo,mp,oce,Pvo,Bvo,Oq,Ivo,Nvo,qvo,gp,rce,jvo,Dvo,Vq,Gvo,Ovo,Vvo,hp,tce,Xvo,zvo,Xq,Wvo,Qvo,Hvo,pp,ace,Uvo,Jvo,zq,Yvo,Kvo,Zvo,_p,nce,eFo,oFo,Wq,rFo,tFo,aFo,up,sce,nFo,sFo,Qq,lFo,iFo,dFo,bp,lce,cFo,fFo,Hq,mFo,gFo,hFo,vp,ice,pFo,_Fo,Uq,uFo,bFo,vFo,Fp,dce,FFo,TFo,Jq,MFo,EFo,CFo,Tp,cce,wFo,AFo,Yq,LFo,yFo,xFo,Mp,$Fo,Ep,kFo,Cp,NL,SFo,fce,RFo,mze,Gi,wp,mce,qL,PFo,gce,BFo,gze,$o,jL,IFo,DL,NFo,Kq,qFo,jFo,DFo,GL,GFo,hce,OFo,VFo,XFo,Je,OL,zFo,pce,WFo,QFo,Oi,HFo,_ce,UFo,JFo,uce,YFo,KFo,ZFo,fe,Ap,bce,e6o,o6o,Zq,r6o,t6o,a6o,Lp,vce,n6o,s6o,ej,l6o,i6o,d6o,yp,Fce,c6o,f6o,oj,m6o,g6o,h6o,xp,Tce,p6o,_6o,rj,u6o,b6o,v6o,$p,Mce,F6o,T6o,tj,M6o,E6o,C6o,kp,Ece,w6o,A6o,aj,L6o,y6o,x6o,Sp,Cce,$6o,k6o,nj,S6o,R6o,P6o,Rp,wce,B6o,I6o,sj,N6o,q6o,j6o,Pp,Ace,D6o,G6o,lj,O6o,V6o,X6o,Bp,Lce,z6o,W6o,ij,Q6o,H6o,U6o,Ip,yce,J6o,Y6o,dj,K6o,Z6o,eTo,Np,xce,oTo,rTo,cj,tTo,aTo,nTo,qp,$ce,sTo,lTo,fj,iTo,dTo,cTo,jp,kce,fTo,mTo,mj,gTo,hTo,pTo,Dp,Sce,_To,uTo,gj,bTo,vTo,FTo,Gp,Rce,TTo,MTo,hj,ETo,CTo,wTo,Op,Pce,ATo,LTo,pj,yTo,xTo,$To,Vp,Bce,kTo,STo,_j,RTo,PTo,BTo,Xp,Ice,ITo,NTo,uj,qTo,jTo,DTo,zp,GTo,Wp,OTo,Qp,VL,VTo,Nce,XTo,hze,Vi,Hp,qce,XL,zTo,jce,WTo,pze,ko,zL,QTo,Xi,HTo,bj,UTo,JTo,vj,YTo,KTo,ZTo,WL,e7o,Dce,o7o,r7o,t7o,it,QL,a7o,Gce,n7o,s7o,zi,l7o,Oce,i7o,d7o,Fj,c7o,f7o,m7o,Up,g7o,Ye,HL,h7o,Vce,p7o,_7o,Ia,u7o,Xce,b7o,v7o,zce,F7o,T7o,Wce,M7o,E7o,C7o,y,Jp,Qce,w7o,A7o,Tj,L7o,y7o,x7o,Yp,Hce,$7o,k7o,Mj,S7o,R7o,P7o,Kp,Uce,B7o,I7o,Ej,N7o,q7o,j7o,Zp,Jce,D7o,G7o,Cj,O7o,V7o,X7o,e_,Yce,z7o,W7o,wj,Q7o,H7o,U7o,o_,Kce,J7o,Y7o,Aj,K7o,Z7o,e8o,r_,Zce,o8o,r8o,Lj,t8o,a8o,n8o,t_,efe,s8o,l8o,yj,i8o,d8o,c8o,a_,ofe,f8o,m8o,xj,g8o,h8o,p8o,n_,rfe,_8o,u8o,$j,b8o,v8o,F8o,s_,tfe,T8o,M8o,kj,E8o,C8o,w8o,l_,afe,A8o,L8o,Sj,y8o,x8o,$8o,i_,nfe,k8o,S8o,Rj,R8o,P8o,B8o,d_,sfe,I8o,N8o,Pj,q8o,j8o,D8o,c_,lfe,G8o,O8o,Bj,V8o,X8o,z8o,f_,ife,W8o,Q8o,Ij,H8o,U8o,J8o,m_,dfe,Y8o,K8o,Nj,Z8o,eMo,oMo,g_,cfe,rMo,tMo,qj,aMo,nMo,sMo,h_,ffe,lMo,iMo,jj,dMo,cMo,fMo,p_,mfe,mMo,gMo,Dj,hMo,pMo,_Mo,__,gfe,uMo,bMo,Gj,vMo,FMo,TMo,u_,hfe,MMo,EMo,Oj,CMo,wMo,AMo,b_,pfe,LMo,yMo,Vj,xMo,$Mo,kMo,v_,_fe,SMo,RMo,Xj,PMo,BMo,IMo,F_,ufe,NMo,qMo,zj,jMo,DMo,GMo,T_,bfe,OMo,VMo,Wj,XMo,zMo,WMo,M_,vfe,QMo,HMo,Qj,UMo,JMo,YMo,E_,Ffe,KMo,ZMo,Hj,e4o,o4o,r4o,C_,Tfe,t4o,a4o,Uj,n4o,s4o,l4o,w_,Mfe,i4o,d4o,Jj,c4o,f4o,m4o,A_,Efe,g4o,h4o,Yj,p4o,_4o,u4o,L_,Cfe,b4o,v4o,Kj,F4o,T4o,M4o,y_,wfe,E4o,C4o,Zj,w4o,A4o,L4o,x_,Afe,y4o,x4o,eD,$4o,k4o,S4o,Us,Lfe,R4o,P4o,oD,B4o,I4o,rD,N4o,q4o,j4o,$_,yfe,D4o,G4o,tD,O4o,V4o,X4o,k_,xfe,z4o,W4o,aD,Q4o,H4o,U4o,S_,$fe,J4o,Y4o,nD,K4o,Z4o,eEo,R_,kfe,oEo,rEo,sD,tEo,aEo,nEo,P_,Sfe,sEo,lEo,lD,iEo,dEo,cEo,B_,Rfe,fEo,mEo,iD,gEo,hEo,pEo,I_,Pfe,_Eo,uEo,dD,bEo,vEo,FEo,N_,Bfe,TEo,MEo,cD,EEo,CEo,wEo,q_,Ife,AEo,LEo,fD,yEo,xEo,$Eo,j_,Nfe,kEo,SEo,qfe,REo,PEo,BEo,D_,jfe,IEo,NEo,mD,qEo,jEo,DEo,G_,Dfe,GEo,OEo,gD,VEo,XEo,zEo,O_,Gfe,WEo,QEo,hD,HEo,UEo,JEo,V_,Ofe,YEo,KEo,pD,ZEo,eCo,oCo,X_,Vfe,rCo,tCo,_D,aCo,nCo,sCo,z_,Xfe,lCo,iCo,uD,dCo,cCo,fCo,W_,zfe,mCo,gCo,bD,hCo,pCo,_Co,Q_,Wfe,uCo,bCo,vD,vCo,FCo,TCo,H_,Qfe,MCo,ECo,FD,CCo,wCo,ACo,U_,Hfe,LCo,yCo,TD,xCo,$Co,kCo,J_,Ufe,SCo,RCo,MD,PCo,BCo,ICo,Y_,Jfe,NCo,qCo,ED,jCo,DCo,GCo,K_,Yfe,OCo,VCo,CD,XCo,zCo,WCo,Z_,Kfe,QCo,HCo,wD,UCo,JCo,YCo,eu,Zfe,KCo,ZCo,AD,e5o,o5o,r5o,ou,eme,t5o,a5o,LD,n5o,s5o,l5o,ru,ome,i5o,d5o,yD,c5o,f5o,m5o,tu,rme,g5o,h5o,xD,p5o,_5o,u5o,au,tme,b5o,v5o,$D,F5o,T5o,M5o,nu,ame,E5o,C5o,kD,w5o,A5o,L5o,su,nme,y5o,x5o,SD,$5o,k5o,S5o,lu,sme,R5o,P5o,RD,B5o,I5o,N5o,iu,lme,q5o,j5o,PD,D5o,G5o,O5o,du,ime,V5o,X5o,BD,z5o,W5o,Q5o,cu,dme,H5o,U5o,ID,J5o,Y5o,K5o,fu,cme,Z5o,e3o,ND,o3o,r3o,t3o,mu,fme,a3o,n3o,qD,s3o,l3o,i3o,gu,mme,d3o,c3o,jD,f3o,m3o,g3o,hu,gme,h3o,p3o,DD,_3o,u3o,b3o,pu,hme,v3o,F3o,GD,T3o,M3o,E3o,_u,pme,C3o,w3o,OD,A3o,L3o,y3o,uu,_me,x3o,$3o,VD,k3o,S3o,R3o,bu,ume,P3o,B3o,XD,I3o,N3o,q3o,vu,bme,j3o,D3o,zD,G3o,O3o,V3o,Fu,vme,X3o,z3o,WD,W3o,Q3o,H3o,Tu,Fme,U3o,J3o,QD,Y3o,K3o,Z3o,Mu,Tme,e0o,o0o,HD,r0o,t0o,a0o,Eu,Mme,n0o,s0o,UD,l0o,i0o,d0o,Cu,Eme,c0o,f0o,JD,m0o,g0o,h0o,wu,Cme,p0o,_0o,YD,u0o,b0o,v0o,Au,wme,F0o,T0o,KD,M0o,E0o,C0o,Lu,Ame,w0o,A0o,ZD,L0o,y0o,x0o,yu,Lme,$0o,k0o,eG,S0o,R0o,P0o,xu,yme,B0o,I0o,oG,N0o,q0o,j0o,$u,xme,D0o,G0o,rG,O0o,V0o,X0o,ku,$me,z0o,W0o,tG,Q0o,H0o,U0o,Su,kme,J0o,Y0o,aG,K0o,Z0o,ewo,Ru,Sme,owo,rwo,nG,two,awo,nwo,Pu,Rme,swo,lwo,sG,iwo,dwo,cwo,Bu,Pme,fwo,mwo,lG,gwo,hwo,pwo,Iu,Bme,_wo,uwo,iG,bwo,vwo,Fwo,Nu,Ime,Two,Mwo,dG,Ewo,Cwo,wwo,qu,Nme,Awo,Lwo,cG,ywo,xwo,$wo,ju,qme,kwo,Swo,fG,Rwo,Pwo,Bwo,Du,jme,Iwo,Nwo,mG,qwo,jwo,Dwo,Gu,Dme,Gwo,Owo,gG,Vwo,Xwo,zwo,Ou,Gme,Wwo,Qwo,hG,Hwo,Uwo,Jwo,Vu,Ome,Ywo,Kwo,pG,Zwo,eAo,oAo,Xu,Vme,rAo,tAo,_G,aAo,nAo,sAo,zu,Xme,lAo,iAo,uG,dAo,cAo,fAo,Wu,zme,mAo,gAo,bG,hAo,pAo,_Ao,Qu,Wme,uAo,bAo,vG,vAo,FAo,TAo,Hu,Qme,MAo,EAo,FG,CAo,wAo,AAo,Uu,Hme,LAo,yAo,TG,xAo,$Ao,kAo,Ju,Ume,SAo,RAo,MG,PAo,BAo,IAo,Yu,Jme,NAo,qAo,EG,jAo,DAo,GAo,Ku,Yme,OAo,VAo,CG,XAo,zAo,WAo,Zu,Kme,QAo,HAo,wG,UAo,JAo,YAo,e2,Zme,KAo,ZAo,AG,eLo,oLo,rLo,o2,tLo,ege,aLo,nLo,oge,sLo,lLo,r2,_ze,Wi,t2,rge,UL,iLo,tge,dLo,uze,So,JL,cLo,Qi,fLo,LG,mLo,gLo,yG,hLo,pLo,_Lo,YL,uLo,age,bLo,vLo,FLo,dt,KL,TLo,nge,MLo,ELo,Hi,CLo,sge,wLo,ALo,xG,LLo,yLo,xLo,a2,$Lo,Ke,ZL,kLo,lge,SLo,RLo,Na,PLo,ige,BLo,ILo,dge,NLo,qLo,cge,jLo,DLo,GLo,G,n2,fge,OLo,VLo,$G,XLo,zLo,WLo,s2,mge,QLo,HLo,kG,ULo,JLo,YLo,l2,gge,KLo,ZLo,SG,eyo,oyo,ryo,i2,hge,tyo,ayo,RG,nyo,syo,lyo,d2,pge,iyo,dyo,PG,cyo,fyo,myo,c2,_ge,gyo,hyo,BG,pyo,_yo,uyo,f2,uge,byo,vyo,IG,Fyo,Tyo,Myo,m2,bge,Eyo,Cyo,NG,wyo,Ayo,Lyo,g2,vge,yyo,xyo,qG,$yo,kyo,Syo,h2,Fge,Ryo,Pyo,jG,Byo,Iyo,Nyo,p2,Tge,qyo,jyo,DG,Dyo,Gyo,Oyo,_2,Mge,Vyo,Xyo,GG,zyo,Wyo,Qyo,u2,Ege,Hyo,Uyo,OG,Jyo,Yyo,Kyo,b2,Cge,Zyo,e9o,VG,o9o,r9o,t9o,v2,wge,a9o,n9o,XG,s9o,l9o,i9o,F2,Age,d9o,c9o,zG,f9o,m9o,g9o,T2,Lge,h9o,p9o,WG,_9o,u9o,b9o,M2,yge,v9o,F9o,QG,T9o,M9o,E9o,E2,xge,C9o,w9o,HG,A9o,L9o,y9o,C2,$ge,x9o,$9o,UG,k9o,S9o,R9o,w2,kge,P9o,B9o,JG,I9o,N9o,q9o,A2,Sge,j9o,D9o,YG,G9o,O9o,V9o,L2,Rge,X9o,z9o,KG,W9o,Q9o,H9o,y2,Pge,U9o,J9o,ZG,Y9o,K9o,Z9o,x2,Bge,exo,oxo,eO,rxo,txo,axo,$2,Ige,nxo,sxo,oO,lxo,ixo,dxo,k2,Nge,cxo,fxo,rO,mxo,gxo,hxo,S2,qge,pxo,_xo,tO,uxo,bxo,vxo,R2,jge,Fxo,Txo,aO,Mxo,Exo,Cxo,P2,Dge,wxo,Axo,nO,Lxo,yxo,xxo,B2,Gge,$xo,kxo,sO,Sxo,Rxo,Pxo,I2,Oge,Bxo,Ixo,lO,Nxo,qxo,jxo,N2,Vge,Dxo,Gxo,iO,Oxo,Vxo,Xxo,q2,Xge,zxo,Wxo,dO,Qxo,Hxo,Uxo,j2,zge,Jxo,Yxo,cO,Kxo,Zxo,e$o,D2,Wge,o$o,r$o,fO,t$o,a$o,n$o,G2,Qge,s$o,l$o,mO,i$o,d$o,c$o,O2,Hge,f$o,m$o,gO,g$o,h$o,p$o,V2,Uge,_$o,u$o,hO,b$o,v$o,F$o,X2,Jge,T$o,M$o,pO,E$o,C$o,w$o,z2,Yge,A$o,L$o,_O,y$o,x$o,$$o,W2,Kge,k$o,S$o,uO,R$o,P$o,B$o,Q2,Zge,I$o,N$o,bO,q$o,j$o,D$o,H2,ehe,G$o,O$o,vO,V$o,X$o,z$o,U2,ohe,W$o,Q$o,FO,H$o,U$o,J$o,J2,Y$o,rhe,K$o,Z$o,the,eko,oko,Y2,bze,Ui,K2,ahe,ey,rko,nhe,tko,vze,Ro,oy,ako,Ji,nko,TO,sko,lko,MO,iko,dko,cko,ry,fko,she,mko,gko,hko,ct,ty,pko,lhe,_ko,uko,Yi,bko,ihe,vko,Fko,EO,Tko,Mko,Eko,Z2,Cko,Ze,ay,wko,dhe,Ako,Lko,qa,yko,che,xko,$ko,fhe,kko,Sko,mhe,Rko,Pko,Bko,z,e1,ghe,Iko,Nko,CO,qko,jko,Dko,o1,hhe,Gko,Oko,wO,Vko,Xko,zko,r1,phe,Wko,Qko,AO,Hko,Uko,Jko,t1,_he,Yko,Kko,LO,Zko,eSo,oSo,a1,uhe,rSo,tSo,yO,aSo,nSo,sSo,n1,bhe,lSo,iSo,xO,dSo,cSo,fSo,s1,vhe,mSo,gSo,$O,hSo,pSo,_So,l1,Fhe,uSo,bSo,kO,vSo,FSo,TSo,i1,The,MSo,ESo,SO,CSo,wSo,ASo,d1,Mhe,LSo,ySo,RO,xSo,$So,kSo,c1,Ehe,SSo,RSo,PO,PSo,BSo,ISo,f1,Che,NSo,qSo,BO,jSo,DSo,GSo,m1,whe,OSo,VSo,IO,XSo,zSo,WSo,g1,Ahe,QSo,HSo,NO,USo,JSo,YSo,h1,Lhe,KSo,ZSo,qO,eRo,oRo,rRo,p1,yhe,tRo,aRo,jO,nRo,sRo,lRo,_1,xhe,iRo,dRo,DO,cRo,fRo,mRo,u1,$he,gRo,hRo,GO,pRo,_Ro,uRo,b1,khe,bRo,vRo,OO,FRo,TRo,MRo,v1,She,ERo,CRo,VO,wRo,ARo,LRo,F1,Rhe,yRo,xRo,XO,$Ro,kRo,SRo,T1,Phe,RRo,PRo,zO,BRo,IRo,NRo,M1,Bhe,qRo,jRo,WO,DRo,GRo,ORo,E1,Ihe,VRo,XRo,QO,zRo,WRo,QRo,C1,Nhe,HRo,URo,HO,JRo,YRo,KRo,w1,qhe,ZRo,ePo,UO,oPo,rPo,tPo,A1,jhe,aPo,nPo,JO,sPo,lPo,iPo,L1,Dhe,dPo,cPo,YO,fPo,mPo,gPo,y1,Ghe,hPo,pPo,KO,_Po,uPo,bPo,x1,Ohe,vPo,FPo,ZO,TPo,MPo,EPo,$1,Vhe,CPo,wPo,eV,APo,LPo,yPo,k1,Xhe,xPo,$Po,oV,kPo,SPo,RPo,S1,zhe,PPo,BPo,rV,IPo,NPo,qPo,R1,Whe,jPo,DPo,tV,GPo,OPo,VPo,P1,Qhe,XPo,zPo,aV,WPo,QPo,HPo,B1,Hhe,UPo,JPo,nV,YPo,KPo,ZPo,I1,Uhe,eBo,oBo,sV,rBo,tBo,aBo,N1,Jhe,nBo,sBo,lV,lBo,iBo,dBo,q1,Yhe,cBo,fBo,iV,mBo,gBo,hBo,j1,Khe,pBo,_Bo,dV,uBo,bBo,vBo,D1,FBo,Zhe,TBo,MBo,epe,EBo,CBo,G1,Fze,Ki,O1,ope,ny,wBo,rpe,ABo,Tze,Po,sy,LBo,Zi,yBo,cV,xBo,$Bo,fV,kBo,SBo,RBo,ly,PBo,tpe,BBo,IBo,NBo,ft,iy,qBo,ape,jBo,DBo,ed,GBo,npe,OBo,VBo,mV,XBo,zBo,WBo,V1,QBo,eo,dy,HBo,spe,UBo,JBo,ja,YBo,lpe,KBo,ZBo,ipe,eIo,oIo,dpe,rIo,tIo,aIo,Q,X1,cpe,nIo,sIo,gV,lIo,iIo,dIo,z1,fpe,cIo,fIo,hV,mIo,gIo,hIo,W1,mpe,pIo,_Io,pV,uIo,bIo,vIo,Q1,gpe,FIo,TIo,_V,MIo,EIo,CIo,H1,hpe,wIo,AIo,uV,LIo,yIo,xIo,U1,ppe,$Io,kIo,bV,SIo,RIo,PIo,J1,_pe,BIo,IIo,vV,NIo,qIo,jIo,Y1,upe,DIo,GIo,FV,OIo,VIo,XIo,K1,bpe,zIo,WIo,TV,QIo,HIo,UIo,Z1,vpe,JIo,YIo,MV,KIo,ZIo,eNo,eb,Fpe,oNo,rNo,EV,tNo,aNo,nNo,ob,Tpe,sNo,lNo,CV,iNo,dNo,cNo,rb,Mpe,fNo,mNo,wV,gNo,hNo,pNo,tb,Epe,_No,uNo,AV,bNo,vNo,FNo,ab,Cpe,TNo,MNo,LV,ENo,CNo,wNo,nb,wpe,ANo,LNo,yV,yNo,xNo,$No,sb,Ape,kNo,SNo,xV,RNo,PNo,BNo,lb,Lpe,INo,NNo,$V,qNo,jNo,DNo,ib,ype,GNo,ONo,kV,VNo,XNo,zNo,db,xpe,WNo,QNo,SV,HNo,UNo,JNo,cb,$pe,YNo,KNo,RV,ZNo,eqo,oqo,fb,kpe,rqo,tqo,PV,aqo,nqo,sqo,mb,Spe,lqo,iqo,BV,dqo,cqo,fqo,gb,Rpe,mqo,gqo,IV,hqo,pqo,_qo,hb,Ppe,uqo,bqo,NV,vqo,Fqo,Tqo,pb,Bpe,Mqo,Eqo,qV,Cqo,wqo,Aqo,_b,Ipe,Lqo,yqo,jV,xqo,$qo,kqo,ub,Npe,Sqo,Rqo,DV,Pqo,Bqo,Iqo,bb,qpe,Nqo,qqo,GV,jqo,Dqo,Gqo,vb,jpe,Oqo,Vqo,OV,Xqo,zqo,Wqo,Fb,Dpe,Qqo,Hqo,VV,Uqo,Jqo,Yqo,Tb,Gpe,Kqo,Zqo,XV,ejo,ojo,rjo,Mb,Ope,tjo,ajo,zV,njo,sjo,ljo,Eb,Vpe,ijo,djo,Xpe,cjo,fjo,mjo,Cb,zpe,gjo,hjo,WV,pjo,_jo,ujo,wb,Wpe,bjo,vjo,QV,Fjo,Tjo,Mjo,Ab,Qpe,Ejo,Cjo,HV,wjo,Ajo,Ljo,Lb,Hpe,yjo,xjo,UV,$jo,kjo,Sjo,yb,Rjo,Upe,Pjo,Bjo,Jpe,Ijo,Njo,xb,Mze,od,$b,Ype,cy,qjo,Kpe,jjo,Eze,Bo,fy,Djo,rd,Gjo,JV,Ojo,Vjo,YV,Xjo,zjo,Wjo,my,Qjo,Zpe,Hjo,Ujo,Jjo,mt,gy,Yjo,e_e,Kjo,Zjo,td,eDo,o_e,oDo,rDo,KV,tDo,aDo,nDo,kb,sDo,oo,hy,lDo,r_e,iDo,dDo,Da,cDo,t_e,fDo,mDo,a_e,gDo,hDo,n_e,pDo,_Do,uDo,me,Sb,s_e,bDo,vDo,ZV,FDo,TDo,MDo,Rb,l_e,EDo,CDo,eX,wDo,ADo,LDo,Pb,i_e,yDo,xDo,oX,$Do,kDo,SDo,Bb,d_e,RDo,PDo,rX,BDo,IDo,NDo,Ib,c_e,qDo,jDo,tX,DDo,GDo,ODo,Nb,f_e,VDo,XDo,aX,zDo,WDo,QDo,qb,m_e,HDo,UDo,nX,JDo,YDo,KDo,jb,g_e,ZDo,eGo,sX,oGo,rGo,tGo,Db,h_e,aGo,nGo,lX,sGo,lGo,iGo,Gb,p_e,dGo,cGo,iX,fGo,mGo,gGo,Ob,__e,hGo,pGo,dX,_Go,uGo,bGo,Vb,u_e,vGo,FGo,cX,TGo,MGo,EGo,Xb,b_e,CGo,wGo,fX,AGo,LGo,yGo,zb,v_e,xGo,$Go,mX,kGo,SGo,RGo,Wb,F_e,PGo,BGo,gX,IGo,NGo,qGo,Qb,T_e,jGo,DGo,hX,GGo,OGo,VGo,Hb,M_e,XGo,zGo,pX,WGo,QGo,HGo,Ub,E_e,UGo,JGo,_X,YGo,KGo,ZGo,Jb,C_e,eOo,oOo,uX,rOo,tOo,aOo,Yb,nOo,w_e,sOo,lOo,A_e,iOo,dOo,Kb,Cze,ad,Zb,L_e,py,cOo,y_e,fOo,wze,Io,_y,mOo,nd,gOo,bX,hOo,pOo,vX,_Oo,uOo,bOo,uy,vOo,x_e,FOo,TOo,MOo,gt,by,EOo,$_e,COo,wOo,sd,AOo,k_e,LOo,yOo,FX,xOo,$Oo,kOo,ev,SOo,ro,vy,ROo,S_e,POo,BOo,Ga,IOo,R_e,NOo,qOo,P_e,jOo,DOo,B_e,GOo,OOo,VOo,B,ov,I_e,XOo,zOo,TX,WOo,QOo,HOo,rv,N_e,UOo,JOo,MX,YOo,KOo,ZOo,tv,q_e,eVo,oVo,EX,rVo,tVo,aVo,av,j_e,nVo,sVo,CX,lVo,iVo,dVo,nv,D_e,cVo,fVo,wX,mVo,gVo,hVo,sv,G_e,pVo,_Vo,AX,uVo,bVo,vVo,lv,O_e,FVo,TVo,LX,MVo,EVo,CVo,iv,V_e,wVo,AVo,yX,LVo,yVo,xVo,dv,X_e,$Vo,kVo,xX,SVo,RVo,PVo,cv,z_e,BVo,IVo,$X,NVo,qVo,jVo,fv,W_e,DVo,GVo,kX,OVo,VVo,XVo,mv,Q_e,zVo,WVo,SX,QVo,HVo,UVo,gv,H_e,JVo,YVo,RX,KVo,ZVo,eXo,hv,U_e,oXo,rXo,PX,tXo,aXo,nXo,pv,J_e,sXo,lXo,BX,iXo,dXo,cXo,_v,Y_e,fXo,mXo,IX,gXo,hXo,pXo,uv,K_e,_Xo,uXo,NX,bXo,vXo,FXo,bv,Z_e,TXo,MXo,qX,EXo,CXo,wXo,vv,eue,AXo,LXo,jX,yXo,xXo,$Xo,Fv,oue,kXo,SXo,DX,RXo,PXo,BXo,Tv,rue,IXo,NXo,GX,qXo,jXo,DXo,Mv,tue,GXo,OXo,OX,VXo,XXo,zXo,Ev,aue,WXo,QXo,VX,HXo,UXo,JXo,Cv,nue,YXo,KXo,XX,ZXo,ezo,ozo,wv,sue,rzo,tzo,zX,azo,nzo,szo,Av,lue,lzo,izo,WX,dzo,czo,fzo,Lv,iue,mzo,gzo,QX,hzo,pzo,_zo,yv,due,uzo,bzo,HX,vzo,Fzo,Tzo,xv,cue,Mzo,Ezo,UX,Czo,wzo,Azo,$v,fue,Lzo,yzo,JX,xzo,$zo,kzo,kv,mue,Szo,Rzo,YX,Pzo,Bzo,Izo,Sv,gue,Nzo,qzo,KX,jzo,Dzo,Gzo,Rv,hue,Ozo,Vzo,ZX,Xzo,zzo,Wzo,Pv,pue,Qzo,Hzo,ez,Uzo,Jzo,Yzo,Bv,_ue,Kzo,Zzo,oz,eWo,oWo,rWo,Iv,uue,tWo,aWo,rz,nWo,sWo,lWo,Nv,bue,iWo,dWo,tz,cWo,fWo,mWo,qv,vue,gWo,hWo,az,pWo,_Wo,uWo,jv,Fue,bWo,vWo,nz,FWo,TWo,MWo,Dv,Tue,EWo,CWo,sz,wWo,AWo,LWo,Gv,Mue,yWo,xWo,lz,$Wo,kWo,SWo,Ov,Eue,RWo,PWo,iz,BWo,IWo,NWo,Vv,Cue,qWo,jWo,dz,DWo,GWo,OWo,Xv,wue,VWo,XWo,cz,zWo,WWo,QWo,zv,Aue,HWo,UWo,fz,JWo,YWo,KWo,Wv,Lue,ZWo,eQo,mz,oQo,rQo,tQo,Qv,yue,aQo,nQo,gz,sQo,lQo,iQo,Hv,xue,dQo,cQo,hz,fQo,mQo,gQo,Uv,$ue,hQo,pQo,pz,_Qo,uQo,bQo,Jv,kue,vQo,FQo,_z,TQo,MQo,EQo,Yv,Sue,CQo,wQo,uz,AQo,LQo,yQo,Kv,xQo,Rue,$Qo,kQo,Pue,SQo,RQo,Zv,Aze,ld,eF,Bue,Fy,PQo,Iue,BQo,Lze,No,Ty,IQo,id,NQo,bz,qQo,jQo,vz,DQo,GQo,OQo,My,VQo,Nue,XQo,zQo,WQo,ht,Ey,QQo,que,HQo,UQo,dd,JQo,jue,YQo,KQo,Fz,ZQo,eHo,oHo,oF,rHo,to,Cy,tHo,Due,aHo,nHo,Oa,sHo,Gue,lHo,iHo,Oue,dHo,cHo,Vue,fHo,mHo,gHo,Z,rF,Xue,hHo,pHo,Tz,_Ho,uHo,bHo,tF,zue,vHo,FHo,Mz,THo,MHo,EHo,aF,Wue,CHo,wHo,Ez,AHo,LHo,yHo,nF,Que,xHo,$Ho,Cz,kHo,SHo,RHo,sF,Hue,PHo,BHo,wz,IHo,NHo,qHo,lF,Uue,jHo,DHo,Az,GHo,OHo,VHo,iF,Jue,XHo,zHo,Lz,WHo,QHo,HHo,dF,Yue,UHo,JHo,yz,YHo,KHo,ZHo,cF,Kue,eUo,oUo,xz,rUo,tUo,aUo,fF,Zue,nUo,sUo,$z,lUo,iUo,dUo,mF,e2e,cUo,fUo,kz,mUo,gUo,hUo,gF,o2e,pUo,_Uo,Sz,uUo,bUo,vUo,hF,r2e,FUo,TUo,Rz,MUo,EUo,CUo,pF,t2e,wUo,AUo,Pz,LUo,yUo,xUo,_F,a2e,$Uo,kUo,Bz,SUo,RUo,PUo,uF,n2e,BUo,IUo,Iz,NUo,qUo,jUo,bF,s2e,DUo,GUo,Nz,OUo,VUo,XUo,vF,l2e,zUo,WUo,qz,QUo,HUo,UUo,FF,i2e,JUo,YUo,jz,KUo,ZUo,eJo,TF,d2e,oJo,rJo,Dz,tJo,aJo,nJo,MF,c2e,sJo,lJo,Gz,iJo,dJo,cJo,EF,f2e,fJo,mJo,Oz,gJo,hJo,pJo,CF,m2e,_Jo,uJo,Vz,bJo,vJo,FJo,wF,g2e,TJo,MJo,Xz,EJo,CJo,wJo,AF,h2e,AJo,LJo,zz,yJo,xJo,$Jo,LF,p2e,kJo,SJo,Wz,RJo,PJo,BJo,yF,_2e,IJo,NJo,Qz,qJo,jJo,DJo,xF,u2e,GJo,OJo,Hz,VJo,XJo,zJo,$F,b2e,WJo,QJo,Uz,HJo,UJo,JJo,kF,v2e,YJo,KJo,Jz,ZJo,eYo,oYo,SF,rYo,F2e,tYo,aYo,T2e,nYo,sYo,RF,yze,cd,PF,M2e,wy,lYo,E2e,iYo,xze,qo,Ay,dYo,fd,cYo,Yz,fYo,mYo,Kz,gYo,hYo,pYo,Ly,_Yo,C2e,uYo,bYo,vYo,pt,yy,FYo,w2e,TYo,MYo,md,EYo,A2e,CYo,wYo,Zz,AYo,LYo,yYo,BF,xYo,ao,xy,$Yo,L2e,kYo,SYo,Va,RYo,y2e,PYo,BYo,x2e,IYo,NYo,$2e,qYo,jYo,DYo,jo,IF,k2e,GYo,OYo,eW,VYo,XYo,zYo,NF,S2e,WYo,QYo,oW,HYo,UYo,JYo,qF,R2e,YYo,KYo,rW,ZYo,eKo,oKo,jF,P2e,rKo,tKo,tW,aKo,nKo,sKo,DF,B2e,lKo,iKo,aW,dKo,cKo,fKo,GF,I2e,mKo,gKo,nW,hKo,pKo,_Ko,OF,uKo,N2e,bKo,vKo,q2e,FKo,TKo,VF,$ze,gd,XF,j2e,$y,MKo,D2e,EKo,kze,Do,ky,CKo,hd,wKo,sW,AKo,LKo,lW,yKo,xKo,$Ko,Sy,kKo,G2e,SKo,RKo,PKo,_t,Ry,BKo,O2e,IKo,NKo,pd,qKo,V2e,jKo,DKo,iW,GKo,OKo,VKo,zF,XKo,no,Py,zKo,X2e,WKo,QKo,Xa,HKo,z2e,UKo,JKo,W2e,YKo,KKo,Q2e,ZKo,eZo,oZo,U,WF,H2e,rZo,tZo,dW,aZo,nZo,sZo,QF,U2e,lZo,iZo,cW,dZo,cZo,fZo,HF,J2e,mZo,gZo,fW,hZo,pZo,_Zo,UF,Y2e,uZo,bZo,mW,vZo,FZo,TZo,JF,K2e,MZo,EZo,gW,CZo,wZo,AZo,YF,Z2e,LZo,yZo,hW,xZo,$Zo,kZo,KF,e1e,SZo,RZo,pW,PZo,BZo,IZo,ZF,o1e,NZo,qZo,_W,jZo,DZo,GZo,e6,r1e,OZo,VZo,uW,XZo,zZo,WZo,o6,t1e,QZo,HZo,bW,UZo,JZo,YZo,r6,a1e,KZo,ZZo,vW,eer,oer,rer,t6,n1e,ter,aer,FW,ner,ser,ler,a6,s1e,ier,der,TW,cer,fer,mer,n6,l1e,ger,her,MW,per,_er,uer,s6,i1e,ber,ver,EW,Fer,Ter,Mer,l6,d1e,Eer,Cer,CW,wer,Aer,Ler,i6,c1e,yer,xer,wW,$er,ker,Ser,d6,f1e,Rer,Per,AW,Ber,Ier,Ner,c6,m1e,qer,jer,LW,Der,Ger,Oer,f6,g1e,Ver,Xer,yW,zer,Wer,Qer,m6,h1e,Her,Uer,xW,Jer,Yer,Ker,g6,p1e,Zer,eor,$W,oor,ror,tor,h6,_1e,aor,nor,kW,sor,lor,ior,p6,u1e,dor,cor,SW,mor,gor,hor,_6,b1e,por,_or,RW,uor,bor,vor,u6,v1e,For,Tor,PW,Mor,Eor,Cor,b6,F1e,wor,Aor,BW,Lor,yor,xor,v6,T1e,$or,kor,IW,Sor,Ror,Por,F6,M1e,Bor,Ior,NW,Nor,qor,jor,T6,E1e,Dor,Gor,qW,Oor,Vor,Xor,M6,C1e,zor,Wor,jW,Qor,Hor,Uor,E6,w1e,Jor,Yor,DW,Kor,Zor,err,C6,A1e,orr,rrr,GW,trr,arr,nrr,w6,L1e,srr,lrr,OW,irr,drr,crr,A6,y1e,frr,mrr,VW,grr,hrr,prr,L6,x1e,_rr,urr,XW,brr,vrr,Frr,y6,Trr,$1e,Mrr,Err,k1e,Crr,wrr,x6,Sze,_d,$6,S1e,By,Arr,R1e,Lrr,Rze,Go,Iy,yrr,ud,xrr,zW,$rr,krr,WW,Srr,Rrr,Prr,Ny,Brr,P1e,Irr,Nrr,qrr,ut,qy,jrr,B1e,Drr,Grr,bd,Orr,I1e,Vrr,Xrr,QW,zrr,Wrr,Qrr,k6,Hrr,so,jy,Urr,N1e,Jrr,Yrr,za,Krr,q1e,Zrr,etr,j1e,otr,rtr,D1e,ttr,atr,ntr,V,S6,G1e,str,ltr,HW,itr,dtr,ctr,R6,O1e,ftr,mtr,UW,gtr,htr,ptr,P6,V1e,_tr,utr,JW,btr,vtr,Ftr,B6,X1e,Ttr,Mtr,YW,Etr,Ctr,wtr,I6,z1e,Atr,Ltr,KW,ytr,xtr,$tr,N6,W1e,ktr,Str,ZW,Rtr,Ptr,Btr,q6,Q1e,Itr,Ntr,eQ,qtr,jtr,Dtr,j6,H1e,Gtr,Otr,oQ,Vtr,Xtr,ztr,D6,U1e,Wtr,Qtr,rQ,Htr,Utr,Jtr,G6,J1e,Ytr,Ktr,tQ,Ztr,ear,oar,O6,Y1e,rar,tar,aQ,aar,nar,sar,V6,K1e,lar,iar,nQ,dar,car,far,X6,Z1e,mar,gar,sQ,har,par,_ar,z6,ebe,uar,bar,lQ,Far,Tar,Mar,W6,obe,Ear,Car,iQ,war,Aar,Lar,Q6,rbe,yar,xar,dQ,$ar,kar,Sar,H6,tbe,Rar,Par,cQ,Bar,Iar,Nar,U6,abe,qar,jar,fQ,Dar,Gar,Oar,J6,nbe,Var,Xar,mQ,zar,War,Qar,Y6,sbe,Har,Uar,gQ,Jar,Yar,Kar,K6,lbe,Zar,enr,hQ,onr,rnr,tnr,Z6,ibe,anr,nnr,pQ,snr,lnr,inr,eT,dbe,dnr,cnr,_Q,fnr,mnr,gnr,oT,cbe,hnr,pnr,uQ,_nr,unr,bnr,rT,fbe,vnr,Fnr,bQ,Tnr,Mnr,Enr,tT,mbe,Cnr,wnr,vQ,Anr,Lnr,ynr,aT,gbe,xnr,$nr,FQ,knr,Snr,Rnr,nT,hbe,Pnr,Bnr,TQ,Inr,Nnr,qnr,sT,pbe,jnr,Dnr,MQ,Gnr,Onr,Vnr,lT,_be,Xnr,znr,EQ,Wnr,Qnr,Hnr,iT,ube,Unr,Jnr,CQ,Ynr,Knr,Znr,dT,bbe,esr,osr,wQ,rsr,tsr,asr,cT,vbe,nsr,ssr,AQ,lsr,isr,dsr,fT,Fbe,csr,fsr,LQ,msr,gsr,hsr,mT,Tbe,psr,_sr,yQ,usr,bsr,vsr,gT,Mbe,Fsr,Tsr,xQ,Msr,Esr,Csr,hT,Ebe,wsr,Asr,$Q,Lsr,ysr,xsr,pT,Cbe,$sr,ksr,kQ,Ssr,Rsr,Psr,_T,wbe,Bsr,Isr,SQ,Nsr,qsr,jsr,uT,Abe,Dsr,Gsr,RQ,Osr,Vsr,Xsr,bT,Lbe,zsr,Wsr,PQ,Qsr,Hsr,Usr,vT,ybe,Jsr,Ysr,BQ,Ksr,Zsr,elr,FT,olr,xbe,rlr,tlr,$be,alr,nlr,TT,Pze,vd,MT,kbe,Dy,slr,Sbe,llr,Bze,Oo,Gy,ilr,Fd,dlr,IQ,clr,flr,NQ,mlr,glr,hlr,Oy,plr,Rbe,_lr,ulr,blr,bt,Vy,vlr,Pbe,Flr,Tlr,Td,Mlr,Bbe,Elr,Clr,qQ,wlr,Alr,Llr,ET,ylr,lo,Xy,xlr,Ibe,$lr,klr,Wa,Slr,Nbe,Rlr,Plr,qbe,Blr,Ilr,jbe,Nlr,qlr,jlr,Dbe,CT,Gbe,Dlr,Glr,jQ,Olr,Vlr,Xlr,wT,zlr,Obe,Wlr,Qlr,Vbe,Hlr,Ulr,AT,Ize,Md,LT,Xbe,zy,Jlr,zbe,Ylr,Nze,Vo,Wy,Klr,Ed,Zlr,DQ,eir,oir,GQ,rir,tir,air,Qy,nir,Wbe,sir,lir,iir,vt,Hy,dir,Qbe,cir,fir,Cd,mir,Hbe,gir,hir,OQ,pir,_ir,uir,yT,bir,io,Uy,vir,Ube,Fir,Tir,Qa,Mir,Jbe,Eir,Cir,Ybe,wir,Air,Kbe,Lir,yir,xir,ve,xT,Zbe,$ir,kir,VQ,Sir,Rir,Pir,$T,eve,Bir,Iir,XQ,Nir,qir,jir,kT,ove,Dir,Gir,zQ,Oir,Vir,Xir,ST,rve,zir,Wir,WQ,Qir,Hir,Uir,Js,tve,Jir,Yir,QQ,Kir,Zir,HQ,edr,odr,rdr,RT,ave,tdr,adr,UQ,ndr,sdr,ldr,Ys,nve,idr,ddr,JQ,cdr,fdr,YQ,mdr,gdr,hdr,PT,sve,pdr,_dr,KQ,udr,bdr,vdr,Ft,lve,Fdr,Tdr,ZQ,Mdr,Edr,eH,Cdr,wdr,oH,Adr,Ldr,ydr,BT,ive,xdr,$dr,rH,kdr,Sdr,Rdr,IT,dve,Pdr,Bdr,tH,Idr,Ndr,qdr,NT,cve,jdr,Ddr,aH,Gdr,Odr,Vdr,qT,fve,Xdr,zdr,nH,Wdr,Qdr,Hdr,jT,mve,Udr,Jdr,sH,Ydr,Kdr,Zdr,DT,gve,ecr,ocr,lH,rcr,tcr,acr,GT,hve,ncr,scr,iH,lcr,icr,dcr,OT,ccr,pve,fcr,mcr,_ve,gcr,hcr,VT,qze,wd,XT,uve,Jy,pcr,bve,_cr,jze,Xo,Yy,ucr,Ad,bcr,dH,vcr,Fcr,cH,Tcr,Mcr,Ecr,Ky,Ccr,vve,wcr,Acr,Lcr,Tt,Zy,ycr,Fve,xcr,$cr,Ld,kcr,Tve,Scr,Rcr,fH,Pcr,Bcr,Icr,zT,Ncr,co,e9,qcr,Mve,jcr,Dcr,Ha,Gcr,Eve,Ocr,Vcr,Cve,Xcr,zcr,wve,Wcr,Qcr,Hcr,Ave,WT,Lve,Ucr,Jcr,mH,Ycr,Kcr,Zcr,QT,efr,yve,ofr,rfr,xve,tfr,afr,HT,Dze,yd,UT,$ve,o9,nfr,kve,sfr,Gze,zo,r9,lfr,xd,ifr,gH,dfr,cfr,hH,ffr,mfr,gfr,t9,hfr,Sve,pfr,_fr,ufr,Mt,a9,bfr,Rve,vfr,Ffr,$d,Tfr,Pve,Mfr,Efr,pH,Cfr,wfr,Afr,JT,Lfr,fo,n9,yfr,Bve,xfr,$fr,Ua,kfr,Ive,Sfr,Rfr,Nve,Pfr,Bfr,qve,Ifr,Nfr,qfr,jve,YT,Dve,jfr,Dfr,_H,Gfr,Ofr,Vfr,KT,Xfr,Gve,zfr,Wfr,Ove,Qfr,Hfr,ZT,Oze,kd,e7,Vve,s9,Ufr,Xve,Jfr,Vze,Wo,l9,Yfr,Sd,Kfr,uH,Zfr,emr,bH,omr,rmr,tmr,i9,amr,zve,nmr,smr,lmr,Et,d9,imr,Wve,dmr,cmr,Rd,fmr,Qve,mmr,gmr,vH,hmr,pmr,_mr,o7,umr,mo,c9,bmr,Hve,vmr,Fmr,Ja,Tmr,Uve,Mmr,Emr,Jve,Cmr,wmr,Yve,Amr,Lmr,ymr,Pe,r7,Kve,xmr,$mr,FH,kmr,Smr,Rmr,t7,Zve,Pmr,Bmr,TH,Imr,Nmr,qmr,a7,eFe,jmr,Dmr,MH,Gmr,Omr,Vmr,n7,oFe,Xmr,zmr,EH,Wmr,Qmr,Hmr,s7,rFe,Umr,Jmr,CH,Ymr,Kmr,Zmr,l7,tFe,egr,ogr,wH,rgr,tgr,agr,i7,aFe,ngr,sgr,AH,lgr,igr,dgr,d7,nFe,cgr,fgr,LH,mgr,ggr,hgr,c7,sFe,pgr,_gr,yH,ugr,bgr,vgr,f7,Fgr,lFe,Tgr,Mgr,iFe,Egr,Cgr,m7,Xze,Pd,g7,dFe,f9,wgr,cFe,Agr,zze,Qo,m9,Lgr,Bd,ygr,xH,xgr,$gr,$H,kgr,Sgr,Rgr,g9,Pgr,fFe,Bgr,Igr,Ngr,Ct,h9,qgr,mFe,jgr,Dgr,Id,Ggr,gFe,Ogr,Vgr,kH,Xgr,zgr,Wgr,h7,Qgr,go,p9,Hgr,hFe,Ugr,Jgr,Ya,Ygr,pFe,Kgr,Zgr,_Fe,ehr,ohr,uFe,rhr,thr,ahr,rt,p7,bFe,nhr,shr,SH,lhr,ihr,dhr,_7,vFe,chr,fhr,RH,mhr,ghr,hhr,u7,FFe,phr,_hr,PH,uhr,bhr,vhr,b7,TFe,Fhr,Thr,BH,Mhr,Ehr,Chr,v7,MFe,whr,Ahr,IH,Lhr,yhr,xhr,F7,$hr,EFe,khr,Shr,CFe,Rhr,Phr,T7,Wze,Nd,M7,wFe,_9,Bhr,AFe,Ihr,Qze,Ho,u9,Nhr,qd,qhr,NH,jhr,Dhr,qH,Ghr,Ohr,Vhr,b9,Xhr,LFe,zhr,Whr,Qhr,wt,v9,Hhr,yFe,Uhr,Jhr,jd,Yhr,xFe,Khr,Zhr,jH,epr,opr,rpr,E7,tpr,ho,F9,apr,$Fe,npr,spr,Ka,lpr,kFe,ipr,dpr,SFe,cpr,fpr,RFe,mpr,gpr,hpr,Le,C7,PFe,ppr,_pr,DH,upr,bpr,vpr,w7,BFe,Fpr,Tpr,GH,Mpr,Epr,Cpr,A7,IFe,wpr,Apr,OH,Lpr,ypr,xpr,L7,NFe,$pr,kpr,VH,Spr,Rpr,Ppr,y7,qFe,Bpr,Ipr,XH,Npr,qpr,jpr,x7,jFe,Dpr,Gpr,zH,Opr,Vpr,Xpr,$7,DFe,zpr,Wpr,WH,Qpr,Hpr,Upr,k7,GFe,Jpr,Ypr,QH,Kpr,Zpr,e_r,S7,OFe,o_r,r_r,HH,t_r,a_r,n_r,R7,VFe,s_r,l_r,UH,i_r,d_r,c_r,P7,f_r,XFe,m_r,g_r,zFe,h_r,p_r,B7,Hze,Dd,I7,WFe,T9,__r,QFe,u_r,Uze,Uo,M9,b_r,Gd,v_r,JH,F_r,T_r,YH,M_r,E_r,C_r,E9,w_r,HFe,A_r,L_r,y_r,At,C9,x_r,UFe,$_r,k_r,Od,S_r,JFe,R_r,P_r,KH,B_r,I_r,N_r,N7,q_r,po,w9,j_r,YFe,D_r,G_r,Za,O_r,KFe,V_r,X_r,ZFe,z_r,W_r,e6e,Q_r,H_r,U_r,A9,q7,o6e,J_r,Y_r,ZH,K_r,Z_r,eur,j7,r6e,our,rur,eU,tur,aur,nur,D7,sur,t6e,lur,iur,a6e,dur,cur,G7,Jze,Vd,O7,n6e,L9,fur,s6e,mur,Yze,Jo,y9,gur,Xd,hur,oU,pur,_ur,rU,uur,bur,vur,x9,Fur,l6e,Tur,Mur,Eur,Lt,$9,Cur,i6e,wur,Aur,zd,Lur,d6e,yur,xur,tU,$ur,kur,Sur,V7,Rur,_o,k9,Pur,c6e,Bur,Iur,en,Nur,f6e,qur,jur,m6e,Dur,Gur,g6e,Our,Vur,Xur,tt,X7,h6e,zur,Wur,aU,Qur,Hur,Uur,z7,p6e,Jur,Yur,nU,Kur,Zur,e2r,W7,_6e,o2r,r2r,sU,t2r,a2r,n2r,Q7,u6e,s2r,l2r,lU,i2r,d2r,c2r,H7,b6e,f2r,m2r,iU,g2r,h2r,p2r,U7,_2r,v6e,u2r,b2r,F6e,v2r,F2r,J7,Kze,Wd,Y7,T6e,S9,T2r,M6e,M2r,Zze,Yo,R9,E2r,Qd,C2r,dU,w2r,A2r,cU,L2r,y2r,x2r,P9,$2r,E6e,k2r,S2r,R2r,yt,B9,P2r,C6e,B2r,I2r,Hd,N2r,w6e,q2r,j2r,fU,D2r,G2r,O2r,K7,V2r,uo,I9,X2r,A6e,z2r,W2r,on,Q2r,L6e,H2r,U2r,y6e,J2r,Y2r,x6e,K2r,Z2r,e1r,Ud,Z7,$6e,o1r,r1r,mU,t1r,a1r,n1r,e8,k6e,s1r,l1r,gU,i1r,d1r,c1r,o8,S6e,f1r,m1r,hU,g1r,h1r,p1r,r8,_1r,R6e,u1r,b1r,P6e,v1r,F1r,t8,eWe,Jd,a8,B6e,N9,T1r,I6e,M1r,oWe,Ko,q9,E1r,Yd,C1r,pU,w1r,A1r,_U,L1r,y1r,x1r,j9,$1r,N6e,k1r,S1r,R1r,xt,D9,P1r,q6e,B1r,I1r,Kd,N1r,j6e,q1r,j1r,uU,D1r,G1r,O1r,n8,V1r,bo,G9,X1r,D6e,z1r,W1r,rn,Q1r,G6e,H1r,U1r,O6e,J1r,Y1r,V6e,K1r,Z1r,ebr,O9,s8,X6e,obr,rbr,bU,tbr,abr,nbr,l8,z6e,sbr,lbr,vU,ibr,dbr,cbr,i8,fbr,W6e,mbr,gbr,Q6e,hbr,pbr,d8,rWe,Zd,c8,H6e,V9,_br,U6e,ubr,tWe,Zo,X9,bbr,ec,vbr,FU,Fbr,Tbr,TU,Mbr,Ebr,Cbr,z9,wbr,J6e,Abr,Lbr,ybr,$t,W9,xbr,Y6e,$br,kbr,oc,Sbr,K6e,Rbr,Pbr,MU,Bbr,Ibr,Nbr,f8,qbr,vo,Q9,jbr,Z6e,Dbr,Gbr,tn,Obr,eTe,Vbr,Xbr,oTe,zbr,Wbr,rTe,Qbr,Hbr,Ubr,tTe,m8,aTe,Jbr,Ybr,EU,Kbr,Zbr,evr,g8,ovr,nTe,rvr,tvr,sTe,avr,nvr,h8,aWe,rc,p8,lTe,H9,svr,iTe,lvr,nWe,er,U9,ivr,tc,dvr,CU,cvr,fvr,wU,mvr,gvr,hvr,J9,pvr,dTe,_vr,uvr,bvr,kt,Y9,vvr,cTe,Fvr,Tvr,ac,Mvr,fTe,Evr,Cvr,AU,wvr,Avr,Lvr,_8,yvr,Fo,K9,xvr,mTe,$vr,kvr,an,Svr,gTe,Rvr,Pvr,hTe,Bvr,Ivr,pTe,Nvr,qvr,jvr,at,u8,_Te,Dvr,Gvr,LU,Ovr,Vvr,Xvr,b8,uTe,zvr,Wvr,yU,Qvr,Hvr,Uvr,v8,bTe,Jvr,Yvr,xU,Kvr,Zvr,eFr,F8,vTe,oFr,rFr,$U,tFr,aFr,nFr,T8,FTe,sFr,lFr,kU,iFr,dFr,cFr,M8,fFr,TTe,mFr,gFr,MTe,hFr,pFr,E8,sWe,nc,C8,ETe,Z9,_Fr,CTe,uFr,lWe,or,ex,bFr,sc,vFr,SU,FFr,TFr,RU,MFr,EFr,CFr,ox,wFr,wTe,AFr,LFr,yFr,St,rx,xFr,ATe,$Fr,kFr,lc,SFr,LTe,RFr,PFr,PU,BFr,IFr,NFr,w8,qFr,To,tx,jFr,yTe,DFr,GFr,nn,OFr,xTe,VFr,XFr,$Te,zFr,WFr,kTe,QFr,HFr,UFr,STe,A8,RTe,JFr,YFr,BU,KFr,ZFr,e6r,L8,o6r,PTe,r6r,t6r,BTe,a6r,n6r,y8,iWe,ic,x8,ITe,ax,s6r,NTe,l6r,dWe,rr,nx,i6r,dc,d6r,IU,c6r,f6r,NU,m6r,g6r,h6r,sx,p6r,qTe,_6r,u6r,b6r,Rt,lx,v6r,jTe,F6r,T6r,cc,M6r,DTe,E6r,C6r,qU,w6r,A6r,L6r,$8,y6r,$r,ix,x6r,GTe,$6r,k6r,sn,S6r,OTe,R6r,P6r,VTe,B6r,I6r,XTe,N6r,q6r,j6r,I,k8,zTe,D6r,G6r,jU,O6r,V6r,X6r,S8,WTe,z6r,W6r,DU,Q6r,H6r,U6r,R8,QTe,J6r,Y6r,GU,K6r,Z6r,eTr,P8,HTe,oTr,rTr,OU,tTr,aTr,nTr,B8,UTe,sTr,lTr,VU,iTr,dTr,cTr,I8,JTe,fTr,mTr,XU,gTr,hTr,pTr,N8,YTe,_Tr,uTr,zU,bTr,vTr,FTr,q8,KTe,TTr,MTr,WU,ETr,CTr,wTr,j8,ZTe,ATr,LTr,QU,yTr,xTr,$Tr,D8,e7e,kTr,STr,HU,RTr,PTr,BTr,G8,o7e,ITr,NTr,UU,qTr,jTr,DTr,O8,r7e,GTr,OTr,JU,VTr,XTr,zTr,V8,t7e,WTr,QTr,YU,HTr,UTr,JTr,X8,a7e,YTr,KTr,KU,ZTr,e7r,o7r,z8,n7e,r7r,t7r,ZU,a7r,n7r,s7r,W8,s7e,l7r,i7r,eJ,d7r,c7r,f7r,Q8,l7e,m7r,g7r,oJ,h7r,p7r,_7r,H8,i7e,u7r,b7r,rJ,v7r,F7r,T7r,Ks,d7e,M7r,E7r,tJ,C7r,w7r,aJ,A7r,L7r,y7r,U8,c7e,x7r,$7r,nJ,k7r,S7r,R7r,J8,f7e,P7r,B7r,sJ,I7r,N7r,q7r,Y8,m7e,j7r,D7r,lJ,G7r,O7r,V7r,K8,g7e,X7r,z7r,iJ,W7r,Q7r,H7r,Z8,h7e,U7r,J7r,dJ,Y7r,K7r,Z7r,eM,p7e,e8r,o8r,cJ,r8r,t8r,a8r,oM,_7e,n8r,s8r,fJ,l8r,i8r,d8r,rM,u7e,c8r,f8r,mJ,m8r,g8r,h8r,tM,b7e,p8r,_8r,gJ,u8r,b8r,v8r,aM,v7e,F8r,T8r,hJ,M8r,E8r,C8r,nM,F7e,w8r,A8r,pJ,L8r,y8r,x8r,sM,T7e,$8r,k8r,_J,S8r,R8r,P8r,lM,M7e,B8r,I8r,uJ,N8r,q8r,j8r,iM,E7e,D8r,G8r,bJ,O8r,V8r,X8r,dM,C7e,z8r,W8r,vJ,Q8r,H8r,U8r,cM,w7e,J8r,Y8r,FJ,K8r,Z8r,eMr,fM,A7e,oMr,rMr,TJ,tMr,aMr,nMr,mM,L7e,sMr,lMr,MJ,iMr,dMr,cMr,gM,y7e,fMr,mMr,EJ,gMr,hMr,pMr,hM,x7e,_Mr,uMr,CJ,bMr,vMr,FMr,pM,$7e,TMr,MMr,wJ,EMr,CMr,wMr,_M,k7e,AMr,LMr,AJ,yMr,xMr,$Mr,uM,S7e,kMr,SMr,LJ,RMr,PMr,BMr,bM,R7e,IMr,NMr,yJ,qMr,jMr,DMr,vM,P7e,GMr,OMr,xJ,VMr,XMr,zMr,FM,B7e,WMr,QMr,$J,HMr,UMr,JMr,TM,I7e,YMr,KMr,kJ,ZMr,e4r,o4r,MM,N7e,r4r,t4r,SJ,a4r,n4r,s4r,EM,q7e,l4r,i4r,RJ,d4r,c4r,f4r,CM,j7e,m4r,g4r,PJ,h4r,p4r,_4r,wM,D7e,u4r,b4r,BJ,v4r,F4r,T4r,AM,G7e,M4r,E4r,IJ,C4r,w4r,A4r,LM,cWe,fc,yM,O7e,dx,L4r,V7e,y4r,fWe,tr,cx,x4r,mc,$4r,NJ,k4r,S4r,qJ,R4r,P4r,B4r,fx,I4r,X7e,N4r,q4r,j4r,Pt,mx,D4r,z7e,G4r,O4r,gc,V4r,W7e,X4r,z4r,jJ,W4r,Q4r,H4r,xM,U4r,kr,gx,J4r,Q7e,Y4r,K4r,ln,Z4r,H7e,eEr,oEr,U7e,rEr,tEr,J7e,aEr,nEr,sEr,se,$M,Y7e,lEr,iEr,DJ,dEr,cEr,fEr,kM,K7e,mEr,gEr,GJ,hEr,pEr,_Er,SM,Z7e,uEr,bEr,OJ,vEr,FEr,TEr,RM,e8e,MEr,EEr,VJ,CEr,wEr,AEr,PM,o8e,LEr,yEr,XJ,xEr,$Er,kEr,BM,r8e,SEr,REr,zJ,PEr,BEr,IEr,IM,t8e,NEr,qEr,WJ,jEr,DEr,GEr,NM,a8e,OEr,VEr,QJ,XEr,zEr,WEr,qM,n8e,QEr,HEr,HJ,UEr,JEr,YEr,jM,s8e,KEr,ZEr,UJ,eCr,oCr,rCr,DM,l8e,tCr,aCr,JJ,nCr,sCr,lCr,GM,i8e,iCr,dCr,YJ,cCr,fCr,mCr,OM,d8e,gCr,hCr,KJ,pCr,_Cr,uCr,VM,c8e,bCr,vCr,ZJ,FCr,TCr,MCr,XM,f8e,ECr,CCr,eY,wCr,ACr,LCr,zM,m8e,yCr,xCr,oY,$Cr,kCr,SCr,WM,g8e,RCr,PCr,rY,BCr,ICr,NCr,QM,h8e,qCr,jCr,tY,DCr,GCr,OCr,HM,p8e,VCr,XCr,aY,zCr,WCr,QCr,UM,_8e,HCr,UCr,nY,JCr,YCr,KCr,JM,u8e,ZCr,e5r,sY,o5r,r5r,t5r,YM,b8e,a5r,n5r,lY,s5r,l5r,i5r,KM,v8e,d5r,c5r,iY,f5r,m5r,g5r,ZM,mWe,hc,e4,F8e,hx,h5r,T8e,p5r,gWe,ar,px,_5r,pc,u5r,dY,b5r,v5r,cY,F5r,T5r,M5r,_x,E5r,M8e,C5r,w5r,A5r,Bt,ux,L5r,E8e,y5r,x5r,_c,$5r,C8e,k5r,S5r,fY,R5r,P5r,B5r,o4,I5r,Sr,bx,N5r,w8e,q5r,j5r,dn,D5r,A8e,G5r,O5r,L8e,V5r,X5r,y8e,z5r,W5r,Q5r,Me,r4,x8e,H5r,U5r,mY,J5r,Y5r,K5r,t4,$8e,Z5r,e3r,gY,o3r,r3r,t3r,a4,k8e,a3r,n3r,hY,s3r,l3r,i3r,n4,S8e,d3r,c3r,pY,f3r,m3r,g3r,s4,R8e,h3r,p3r,_Y,_3r,u3r,b3r,l4,P8e,v3r,F3r,uY,T3r,M3r,E3r,i4,B8e,C3r,w3r,bY,A3r,L3r,y3r,d4,I8e,x3r,$3r,vY,k3r,S3r,R3r,c4,N8e,P3r,B3r,FY,I3r,N3r,q3r,f4,q8e,j3r,D3r,TY,G3r,O3r,V3r,m4,j8e,X3r,z3r,MY,W3r,Q3r,H3r,g4,D8e,U3r,J3r,EY,Y3r,K3r,Z3r,h4,G8e,e0r,o0r,CY,r0r,t0r,a0r,p4,hWe,uc,_4,O8e,vx,n0r,V8e,s0r,pWe,nr,Fx,l0r,bc,i0r,wY,d0r,c0r,AY,f0r,m0r,g0r,Tx,h0r,X8e,p0r,_0r,u0r,It,Mx,b0r,z8e,v0r,F0r,vc,T0r,W8e,M0r,E0r,LY,C0r,w0r,A0r,u4,L0r,Rr,Ex,y0r,Q8e,x0r,$0r,cn,k0r,H8e,S0r,R0r,U8e,P0r,B0r,J8e,I0r,N0r,q0r,Ve,b4,Y8e,j0r,D0r,yY,G0r,O0r,V0r,v4,K8e,X0r,z0r,xY,W0r,Q0r,H0r,Zs,Z8e,U0r,J0r,$Y,Y0r,K0r,kY,Z0r,ewr,owr,F4,eMe,rwr,twr,SY,awr,nwr,swr,T4,oMe,lwr,iwr,RY,dwr,cwr,fwr,M4,rMe,mwr,gwr,PY,hwr,pwr,_wr,E4,tMe,uwr,bwr,BY,vwr,Fwr,Twr,C4,aMe,Mwr,Ewr,IY,Cwr,wwr,Awr,w4,_We,Fc,A4,nMe,Cx,Lwr,sMe,ywr,uWe,sr,wx,xwr,Tc,$wr,NY,kwr,Swr,qY,Rwr,Pwr,Bwr,Ax,Iwr,lMe,Nwr,qwr,jwr,Nt,Lx,Dwr,iMe,Gwr,Owr,Mc,Vwr,dMe,Xwr,zwr,jY,Wwr,Qwr,Hwr,L4,Uwr,Pr,yx,Jwr,cMe,Ywr,Kwr,fn,Zwr,fMe,eAr,oAr,mMe,rAr,tAr,gMe,aAr,nAr,sAr,ie,y4,hMe,lAr,iAr,DY,dAr,cAr,fAr,x4,pMe,mAr,gAr,GY,hAr,pAr,_Ar,$4,_Me,uAr,bAr,OY,vAr,FAr,TAr,k4,uMe,MAr,EAr,VY,CAr,wAr,AAr,S4,bMe,LAr,yAr,XY,xAr,$Ar,kAr,R4,vMe,SAr,RAr,zY,PAr,BAr,IAr,P4,FMe,NAr,qAr,WY,jAr,DAr,GAr,B4,TMe,OAr,VAr,QY,XAr,zAr,WAr,I4,MMe,QAr,HAr,HY,UAr,JAr,YAr,N4,EMe,KAr,ZAr,UY,eLr,oLr,rLr,q4,CMe,tLr,aLr,JY,nLr,sLr,lLr,j4,wMe,iLr,dLr,YY,cLr,fLr,mLr,D4,AMe,gLr,hLr,KY,pLr,_Lr,uLr,G4,LMe,bLr,vLr,ZY,FLr,TLr,MLr,O4,yMe,ELr,CLr,eK,wLr,ALr,LLr,V4,xMe,yLr,xLr,oK,$Lr,kLr,SLr,X4,$Me,RLr,PLr,rK,BLr,ILr,NLr,z4,kMe,qLr,jLr,tK,DLr,GLr,OLr,W4,SMe,VLr,XLr,aK,zLr,WLr,QLr,Q4,RMe,HLr,ULr,nK,JLr,YLr,KLr,H4,bWe,Ec,U4,PMe,xx,ZLr,BMe,eyr,vWe,lr,$x,oyr,Cc,ryr,sK,tyr,ayr,lK,nyr,syr,lyr,kx,iyr,IMe,dyr,cyr,fyr,qt,Sx,myr,NMe,gyr,hyr,wc,pyr,qMe,_yr,uyr,iK,byr,vyr,Fyr,J4,Tyr,Br,Rx,Myr,jMe,Eyr,Cyr,mn,wyr,DMe,Ayr,Lyr,GMe,yyr,xyr,OMe,$yr,kyr,Syr,ye,Y4,VMe,Ryr,Pyr,dK,Byr,Iyr,Nyr,K4,XMe,qyr,jyr,cK,Dyr,Gyr,Oyr,Z4,zMe,Vyr,Xyr,fK,zyr,Wyr,Qyr,eE,WMe,Hyr,Uyr,mK,Jyr,Yyr,Kyr,oE,QMe,Zyr,e9r,gK,o9r,r9r,t9r,rE,HMe,a9r,n9r,hK,s9r,l9r,i9r,tE,UMe,d9r,c9r,pK,f9r,m9r,g9r,aE,JMe,h9r,p9r,_K,_9r,u9r,b9r,nE,YMe,v9r,F9r,uK,T9r,M9r,E9r,sE,KMe,C9r,w9r,bK,A9r,L9r,y9r,lE,FWe,Ac,iE,ZMe,Px,x9r,e4e,$9r,TWe,ir,Bx,k9r,Lc,S9r,vK,R9r,P9r,FK,B9r,I9r,N9r,Ix,q9r,o4e,j9r,D9r,G9r,jt,Nx,O9r,r4e,V9r,X9r,yc,z9r,t4e,W9r,Q9r,TK,H9r,U9r,J9r,dE,Y9r,Ir,qx,K9r,a4e,Z9r,exr,gn,oxr,n4e,rxr,txr,s4e,axr,nxr,l4e,sxr,lxr,ixr,te,cE,i4e,dxr,cxr,MK,fxr,mxr,gxr,fE,d4e,hxr,pxr,EK,_xr,uxr,bxr,mE,c4e,vxr,Fxr,CK,Txr,Mxr,Exr,gE,f4e,Cxr,wxr,wK,Axr,Lxr,yxr,hE,m4e,xxr,$xr,AK,kxr,Sxr,Rxr,pE,g4e,Pxr,Bxr,LK,Ixr,Nxr,qxr,_E,h4e,jxr,Dxr,yK,Gxr,Oxr,Vxr,uE,p4e,Xxr,zxr,xK,Wxr,Qxr,Hxr,bE,_4e,Uxr,Jxr,$K,Yxr,Kxr,Zxr,vE,u4e,e$r,o$r,kK,r$r,t$r,a$r,FE,b4e,n$r,s$r,SK,l$r,i$r,d$r,TE,v4e,c$r,f$r,RK,m$r,g$r,h$r,ME,F4e,p$r,_$r,PK,u$r,b$r,v$r,EE,T4e,F$r,T$r,BK,M$r,E$r,C$r,CE,M4e,w$r,A$r,IK,L$r,y$r,x$r,wE,E4e,$$r,k$r,NK,S$r,R$r,P$r,AE,C4e,B$r,I$r,qK,N$r,q$r,j$r,LE,w4e,D$r,G$r,jK,O$r,V$r,X$r,yE,A4e,z$r,W$r,DK,Q$r,H$r,U$r,xE,L4e,J$r,Y$r,GK,K$r,Z$r,ekr,$E,y4e,okr,rkr,OK,tkr,akr,nkr,kE,x4e,skr,lkr,VK,ikr,dkr,ckr,SE,$4e,fkr,mkr,XK,gkr,hkr,pkr,RE,k4e,_kr,ukr,zK,bkr,vkr,Fkr,PE,S4e,Tkr,Mkr,WK,Ekr,Ckr,wkr,BE,R4e,Akr,Lkr,QK,ykr,xkr,$kr,IE,MWe,xc,NE,P4e,jx,kkr,B4e,Skr,EWe,dr,Dx,Rkr,$c,Pkr,HK,Bkr,Ikr,UK,Nkr,qkr,jkr,Gx,Dkr,I4e,Gkr,Okr,Vkr,Dt,Ox,Xkr,N4e,zkr,Wkr,kc,Qkr,q4e,Hkr,Ukr,JK,Jkr,Ykr,Kkr,qE,Zkr,Nr,Vx,eSr,j4e,oSr,rSr,hn,tSr,D4e,aSr,nSr,G4e,sSr,lSr,O4e,iSr,dSr,cSr,be,jE,V4e,fSr,mSr,YK,gSr,hSr,pSr,DE,X4e,_Sr,uSr,KK,bSr,vSr,FSr,GE,z4e,TSr,MSr,ZK,ESr,CSr,wSr,OE,W4e,ASr,LSr,eZ,ySr,xSr,$Sr,VE,Q4e,kSr,SSr,oZ,RSr,PSr,BSr,XE,H4e,ISr,NSr,rZ,qSr,jSr,DSr,zE,U4e,GSr,OSr,tZ,VSr,XSr,zSr,WE,J4e,WSr,QSr,aZ,HSr,USr,JSr,QE,Y4e,YSr,KSr,nZ,ZSr,eRr,oRr,HE,K4e,rRr,tRr,sZ,aRr,nRr,sRr,UE,Z4e,lRr,iRr,lZ,dRr,cRr,fRr,JE,eEe,mRr,gRr,iZ,hRr,pRr,_Rr,YE,oEe,uRr,bRr,dZ,vRr,FRr,TRr,KE,rEe,MRr,ERr,cZ,CRr,wRr,ARr,ZE,tEe,LRr,yRr,fZ,xRr,$Rr,kRr,eC,aEe,SRr,RRr,mZ,PRr,BRr,IRr,oC,nEe,NRr,qRr,gZ,jRr,DRr,GRr,rC,CWe,Sc,tC,sEe,Xx,ORr,lEe,VRr,wWe,cr,zx,XRr,Rc,zRr,hZ,WRr,QRr,pZ,HRr,URr,JRr,Wx,YRr,iEe,KRr,ZRr,ePr,Gt,Qx,oPr,dEe,rPr,tPr,Pc,aPr,cEe,nPr,sPr,_Z,lPr,iPr,dPr,aC,cPr,qr,Hx,fPr,fEe,mPr,gPr,pn,hPr,mEe,pPr,_Pr,gEe,uPr,bPr,hEe,vPr,FPr,TPr,Ux,nC,pEe,MPr,EPr,uZ,CPr,wPr,APr,sC,_Ee,LPr,yPr,bZ,xPr,$Pr,kPr,lC,AWe,Bc,iC,uEe,Jx,SPr,bEe,RPr,LWe,fr,Yx,PPr,Ic,BPr,vZ,IPr,NPr,FZ,qPr,jPr,DPr,Kx,GPr,vEe,OPr,VPr,XPr,Ot,Zx,zPr,FEe,WPr,QPr,Nc,HPr,TEe,UPr,JPr,TZ,YPr,KPr,ZPr,dC,eBr,jr,e$,oBr,MEe,rBr,tBr,_n,aBr,EEe,nBr,sBr,CEe,lBr,iBr,wEe,dBr,cBr,fBr,AEe,cC,LEe,mBr,gBr,MZ,hBr,pBr,_Br,fC,yWe,qc,mC,yEe,o$,uBr,xEe,bBr,xWe,mr,r$,vBr,jc,FBr,EZ,TBr,MBr,CZ,EBr,CBr,wBr,t$,ABr,$Ee,LBr,yBr,xBr,Vt,a$,$Br,kEe,kBr,SBr,Dc,RBr,SEe,PBr,BBr,wZ,IBr,NBr,qBr,gC,jBr,Dr,n$,DBr,REe,GBr,OBr,un,VBr,PEe,XBr,zBr,BEe,WBr,QBr,IEe,HBr,UBr,JBr,de,hC,NEe,YBr,KBr,AZ,ZBr,eIr,oIr,pC,qEe,rIr,tIr,LZ,aIr,nIr,sIr,_C,jEe,lIr,iIr,yZ,dIr,cIr,fIr,uC,DEe,mIr,gIr,xZ,hIr,pIr,_Ir,bC,GEe,uIr,bIr,$Z,vIr,FIr,TIr,vC,OEe,MIr,EIr,kZ,CIr,wIr,AIr,FC,VEe,LIr,yIr,SZ,xIr,$Ir,kIr,TC,XEe,SIr,RIr,RZ,PIr,BIr,IIr,MC,zEe,NIr,qIr,PZ,jIr,DIr,GIr,EC,WEe,OIr,VIr,BZ,XIr,zIr,WIr,CC,QEe,QIr,HIr,IZ,UIr,JIr,YIr,wC,HEe,KIr,ZIr,NZ,eNr,oNr,rNr,AC,UEe,tNr,aNr,qZ,nNr,sNr,lNr,LC,JEe,iNr,dNr,jZ,cNr,fNr,mNr,yC,YEe,gNr,hNr,DZ,pNr,_Nr,uNr,xC,KEe,bNr,vNr,GZ,FNr,TNr,MNr,$C,ZEe,ENr,CNr,OZ,wNr,ANr,LNr,kC,eCe,yNr,xNr,VZ,$Nr,kNr,SNr,SC,oCe,RNr,PNr,XZ,BNr,INr,NNr,RC,rCe,qNr,jNr,zZ,DNr,GNr,ONr,PC,$We,Gc,BC,tCe,s$,VNr,aCe,XNr,kWe,gr,l$,zNr,Oc,WNr,WZ,QNr,HNr,QZ,UNr,JNr,YNr,i$,KNr,nCe,ZNr,eqr,oqr,Xt,d$,rqr,sCe,tqr,aqr,Vc,nqr,lCe,sqr,lqr,HZ,iqr,dqr,cqr,IC,fqr,Gr,c$,mqr,iCe,gqr,hqr,bn,pqr,dCe,_qr,uqr,cCe,bqr,vqr,fCe,Fqr,Tqr,Mqr,ce,NC,mCe,Eqr,Cqr,UZ,wqr,Aqr,Lqr,qC,gCe,yqr,xqr,JZ,$qr,kqr,Sqr,jC,hCe,Rqr,Pqr,YZ,Bqr,Iqr,Nqr,DC,pCe,qqr,jqr,KZ,Dqr,Gqr,Oqr,GC,_Ce,Vqr,Xqr,ZZ,zqr,Wqr,Qqr,OC,uCe,Hqr,Uqr,eee,Jqr,Yqr,Kqr,VC,bCe,Zqr,ejr,oee,ojr,rjr,tjr,XC,vCe,ajr,njr,ree,sjr,ljr,ijr,zC,FCe,djr,cjr,tee,fjr,mjr,gjr,WC,TCe,hjr,pjr,aee,_jr,ujr,bjr,QC,MCe,vjr,Fjr,nee,Tjr,Mjr,Ejr,HC,ECe,Cjr,wjr,see,Ajr,Ljr,yjr,UC,CCe,xjr,$jr,lee,kjr,Sjr,Rjr,JC,wCe,Pjr,Bjr,iee,Ijr,Njr,qjr,YC,ACe,jjr,Djr,dee,Gjr,Ojr,Vjr,KC,LCe,Xjr,zjr,cee,Wjr,Qjr,Hjr,ZC,yCe,Ujr,Jjr,fee,Yjr,Kjr,Zjr,e5,xCe,eDr,oDr,mee,rDr,tDr,aDr,o5,$Ce,nDr,sDr,gee,lDr,iDr,dDr,r5,kCe,cDr,fDr,hee,mDr,gDr,hDr,t5,SWe,Xc,a5,SCe,f$,pDr,RCe,_Dr,RWe,hr,m$,uDr,zc,bDr,pee,vDr,FDr,_ee,TDr,MDr,EDr,g$,CDr,PCe,wDr,ADr,LDr,zt,h$,yDr,BCe,xDr,$Dr,Wc,kDr,ICe,SDr,RDr,uee,PDr,BDr,IDr,n5,NDr,Or,p$,qDr,NCe,jDr,DDr,vn,GDr,qCe,ODr,VDr,jCe,XDr,zDr,DCe,WDr,QDr,HDr,GCe,s5,OCe,UDr,JDr,bee,YDr,KDr,ZDr,l5,PWe,Qc,i5,VCe,_$,eGr,XCe,oGr,BWe,pr,u$,rGr,Hc,tGr,vee,aGr,nGr,Fee,sGr,lGr,iGr,b$,dGr,zCe,cGr,fGr,mGr,Wt,v$,gGr,WCe,hGr,pGr,Uc,_Gr,QCe,uGr,bGr,Tee,vGr,FGr,TGr,d5,MGr,Vr,F$,EGr,HCe,CGr,wGr,Fn,AGr,UCe,LGr,yGr,JCe,xGr,$Gr,YCe,kGr,SGr,RGr,KCe,c5,ZCe,PGr,BGr,Mee,IGr,NGr,qGr,f5,IWe,Jc,m5,e5e,T$,jGr,o5e,DGr,NWe,_r,M$,GGr,Yc,OGr,Eee,VGr,XGr,Cee,zGr,WGr,QGr,E$,HGr,r5e,UGr,JGr,YGr,Qt,C$,KGr,t5e,ZGr,eOr,Kc,oOr,a5e,rOr,tOr,wee,aOr,nOr,sOr,g5,lOr,Xr,w$,iOr,n5e,dOr,cOr,Tn,fOr,s5e,mOr,gOr,l5e,hOr,pOr,i5e,_Or,uOr,bOr,oe,h5,d5e,vOr,FOr,Aee,TOr,MOr,EOr,p5,c5e,COr,wOr,Lee,AOr,LOr,yOr,_5,f5e,xOr,$Or,yee,kOr,SOr,ROr,u5,m5e,POr,BOr,xee,IOr,NOr,qOr,b5,g5e,jOr,DOr,$ee,GOr,OOr,VOr,v5,h5e,XOr,zOr,kee,WOr,QOr,HOr,F5,p5e,UOr,JOr,See,YOr,KOr,ZOr,T5,_5e,eVr,oVr,Ree,rVr,tVr,aVr,M5,u5e,nVr,sVr,Pee,lVr,iVr,dVr,E5,b5e,cVr,fVr,Bee,mVr,gVr,hVr,C5,v5e,pVr,_Vr,Iee,uVr,bVr,vVr,w5,F5e,FVr,TVr,Nee,MVr,EVr,CVr,A5,T5e,wVr,AVr,qee,LVr,yVr,xVr,L5,M5e,$Vr,kVr,jee,SVr,RVr,PVr,y5,E5e,BVr,IVr,Dee,NVr,qVr,jVr,x5,C5e,DVr,GVr,Gee,OVr,VVr,XVr,$5,w5e,zVr,WVr,Oee,QVr,HVr,UVr,k5,A5e,JVr,YVr,Vee,KVr,ZVr,eXr,S5,L5e,oXr,rXr,Xee,tXr,aXr,nXr,R5,y5e,sXr,lXr,zee,iXr,dXr,cXr,P5,x5e,fXr,mXr,Wee,gXr,hXr,pXr,B5,$5e,_Xr,uXr,Qee,bXr,vXr,FXr,I5,k5e,TXr,MXr,Hee,EXr,CXr,wXr,N5,S5e,AXr,LXr,Uee,yXr,xXr,$Xr,q5,R5e,kXr,SXr,Jee,RXr,PXr,BXr,j5,P5e,IXr,NXr,Yee,qXr,jXr,DXr,D5,B5e,GXr,OXr,Kee,VXr,XXr,zXr,G5,qWe,Zc,O5,I5e,A$,WXr,N5e,QXr,jWe,ur,L$,HXr,ef,UXr,Zee,JXr,YXr,eoe,KXr,ZXr,ezr,y$,ozr,q5e,rzr,tzr,azr,Ht,x$,nzr,j5e,szr,lzr,of,izr,D5e,dzr,czr,ooe,fzr,mzr,gzr,V5,hzr,zr,$$,pzr,G5e,_zr,uzr,Mn,bzr,O5e,vzr,Fzr,V5e,Tzr,Mzr,X5e,Ezr,Czr,wzr,xe,X5,z5e,Azr,Lzr,roe,yzr,xzr,$zr,z5,W5e,kzr,Szr,toe,Rzr,Pzr,Bzr,W5,Q5e,Izr,Nzr,aoe,qzr,jzr,Dzr,Q5,H5e,Gzr,Ozr,noe,Vzr,Xzr,zzr,H5,U5e,Wzr,Qzr,soe,Hzr,Uzr,Jzr,U5,J5e,Yzr,Kzr,loe,Zzr,eWr,oWr,J5,Y5e,rWr,tWr,ioe,aWr,nWr,sWr,Y5,K5e,lWr,iWr,doe,dWr,cWr,fWr,K5,Z5e,mWr,gWr,coe,hWr,pWr,_Wr,Z5,e3e,uWr,bWr,foe,vWr,FWr,TWr,e3,DWe,rf,o3,o3e,k$,MWr,r3e,EWr,GWe,br,S$,CWr,tf,wWr,moe,AWr,LWr,goe,yWr,xWr,$Wr,R$,kWr,t3e,SWr,RWr,PWr,Ut,P$,BWr,a3e,IWr,NWr,af,qWr,n3e,jWr,DWr,hoe,GWr,OWr,VWr,r3,XWr,Wr,B$,zWr,s3e,WWr,QWr,En,HWr,l3e,UWr,JWr,i3e,YWr,KWr,d3e,ZWr,eQr,oQr,Ee,t3,c3e,rQr,tQr,poe,aQr,nQr,sQr,a3,f3e,lQr,iQr,_oe,dQr,cQr,fQr,n3,m3e,mQr,gQr,uoe,hQr,pQr,_Qr,s3,g3e,uQr,bQr,boe,vQr,FQr,TQr,l3,h3e,MQr,EQr,voe,CQr,wQr,AQr,i3,p3e,LQr,yQr,Foe,xQr,$Qr,kQr,d3,_3e,SQr,RQr,Toe,PQr,BQr,IQr,c3,u3e,NQr,qQr,Moe,jQr,DQr,GQr,f3,b3e,OQr,VQr,Eoe,XQr,zQr,WQr,m3,v3e,QQr,HQr,Coe,UQr,JQr,YQr,g3,F3e,KQr,ZQr,woe,eHr,oHr,rHr,h3,T3e,tHr,aHr,Aoe,nHr,sHr,lHr,p3,M3e,iHr,dHr,Loe,cHr,fHr,mHr,_3,OWe,nf,u3,E3e,I$,gHr,C3e,hHr,VWe,vr,N$,pHr,sf,_Hr,yoe,uHr,bHr,xoe,vHr,FHr,THr,q$,MHr,w3e,EHr,CHr,wHr,Jt,j$,AHr,A3e,LHr,yHr,lf,xHr,L3e,$Hr,kHr,$oe,SHr,RHr,PHr,b3,BHr,Qr,D$,IHr,y3e,NHr,qHr,Cn,jHr,x3e,DHr,GHr,$3e,OHr,VHr,k3e,XHr,zHr,WHr,$e,v3,S3e,QHr,HHr,koe,UHr,JHr,YHr,F3,R3e,KHr,ZHr,Soe,eUr,oUr,rUr,T3,P3e,tUr,aUr,Roe,nUr,sUr,lUr,M3,B3e,iUr,dUr,Poe,cUr,fUr,mUr,E3,I3e,gUr,hUr,Boe,pUr,_Ur,uUr,C3,N3e,bUr,vUr,Ioe,FUr,TUr,MUr,w3,q3e,EUr,CUr,Noe,wUr,AUr,LUr,A3,j3e,yUr,xUr,qoe,$Ur,kUr,SUr,L3,D3e,RUr,PUr,joe,BUr,IUr,NUr,y3,G3e,qUr,jUr,Doe,DUr,GUr,OUr,x3,XWe,df,$3,O3e,G$,VUr,V3e,XUr,zWe,Fr,O$,zUr,cf,WUr,Goe,QUr,HUr,Ooe,UUr,JUr,YUr,V$,KUr,X3e,ZUr,eJr,oJr,Yt,X$,rJr,z3e,tJr,aJr,ff,nJr,W3e,sJr,lJr,Voe,iJr,dJr,cJr,k3,fJr,Hr,z$,mJr,Q3e,gJr,hJr,wn,pJr,H3e,_Jr,uJr,U3e,bJr,vJr,J3e,FJr,TJr,MJr,ke,S3,Y3e,EJr,CJr,Xoe,wJr,AJr,LJr,R3,K3e,yJr,xJr,zoe,$Jr,kJr,SJr,P3,Z3e,RJr,PJr,Woe,BJr,IJr,NJr,B3,e0e,qJr,jJr,Qoe,DJr,GJr,OJr,I3,o0e,VJr,XJr,Hoe,zJr,WJr,QJr,N3,r0e,HJr,UJr,Uoe,JJr,YJr,KJr,q3,t0e,ZJr,eYr,Joe,oYr,rYr,tYr,j3,a0e,aYr,nYr,Yoe,sYr,lYr,iYr,D3,n0e,dYr,cYr,Koe,fYr,mYr,gYr,G3,s0e,hYr,pYr,Zoe,_Yr,uYr,bYr,O3,WWe,mf,V3,l0e,W$,vYr,i0e,FYr,QWe,Tr,Q$,TYr,gf,MYr,ere,EYr,CYr,ore,wYr,AYr,LYr,H$,yYr,d0e,xYr,$Yr,kYr,Kt,U$,SYr,c0e,RYr,PYr,hf,BYr,f0e,IYr,NYr,rre,qYr,jYr,DYr,X3,GYr,Ur,J$,OYr,m0e,VYr,XYr,An,zYr,g0e,WYr,QYr,h0e,HYr,UYr,p0e,JYr,YYr,KYr,Se,z3,_0e,ZYr,eKr,tre,oKr,rKr,tKr,W3,u0e,aKr,nKr,are,sKr,lKr,iKr,Q3,b0e,dKr,cKr,nre,fKr,mKr,gKr,H3,v0e,hKr,pKr,sre,_Kr,uKr,bKr,U3,F0e,vKr,FKr,lre,TKr,MKr,EKr,J3,T0e,CKr,wKr,ire,AKr,LKr,yKr,Y3,M0e,xKr,$Kr,dre,kKr,SKr,RKr,K3,E0e,PKr,BKr,cre,IKr,NKr,qKr,Z3,C0e,jKr,DKr,fre,GKr,OKr,VKr,e0,w0e,XKr,zKr,mre,WKr,QKr,HKr,o0,HWe,pf,r0,A0e,Y$,UKr,L0e,JKr,UWe,Mr,K$,YKr,_f,KKr,gre,ZKr,eZr,hre,oZr,rZr,tZr,Z$,aZr,y0e,nZr,sZr,lZr,Zt,ek,iZr,x0e,dZr,cZr,uf,fZr,$0e,mZr,gZr,pre,hZr,pZr,_Zr,t0,uZr,Jr,ok,bZr,k0e,vZr,FZr,Ln,TZr,S0e,MZr,EZr,R0e,CZr,wZr,P0e,AZr,LZr,yZr,Re,a0,B0e,xZr,$Zr,_re,kZr,SZr,RZr,n0,I0e,PZr,BZr,ure,IZr,NZr,qZr,s0,N0e,jZr,DZr,bre,GZr,OZr,VZr,l0,q0e,XZr,zZr,vre,WZr,QZr,HZr,i0,j0e,UZr,JZr,Fre,YZr,KZr,ZZr,d0,D0e,eet,oet,Tre,ret,tet,aet,c0,G0e,net,set,Mre,iet,det,cet,f0,O0e,fet,met,Ere,get,het,pet,m0,V0e,_et,uet,Cre,bet,vet,Fet,g0,X0e,Tet,Met,wre,Eet,Cet,wet,h0,JWe,bf,p0,z0e,rk,Aet,W0e,Let,YWe,Er,tk,yet,vf,xet,Are,$et,ket,Lre,Set,Ret,Pet,ak,Bet,Q0e,Iet,Net,qet,ea,nk,jet,H0e,Det,Get,Ff,Oet,U0e,Vet,Xet,yre,zet,Wet,Qet,_0,Het,Yr,sk,Uet,J0e,Jet,Yet,yn,Ket,Y0e,Zet,eot,K0e,oot,rot,Z0e,tot,aot,not,Xe,u0,ewe,sot,lot,xre,iot,dot,cot,b0,owe,fot,mot,$re,got,hot,pot,v0,rwe,_ot,uot,kre,bot,vot,Fot,F0,twe,Tot,Mot,Sre,Eot,Cot,wot,T0,awe,Aot,Lot,Rre,yot,xot,$ot,M0,nwe,kot,Sot,Pre,Rot,Pot,Bot,E0,swe,Iot,Not,Bre,qot,jot,Dot,C0,lwe,Got,Oot,Ire,Vot,Xot,zot,w0,KWe,Tf,A0,iwe,lk,Wot,dwe,Qot,ZWe,Cr,ik,Hot,Mf,Uot,Nre,Jot,Yot,qre,Kot,Zot,ert,dk,ort,cwe,rrt,trt,art,oa,ck,nrt,fwe,srt,lrt,Ef,irt,mwe,drt,crt,jre,frt,mrt,grt,L0,hrt,Kr,fk,prt,gwe,_rt,urt,xn,brt,hwe,vrt,Frt,pwe,Trt,Mrt,_we,Ert,Crt,wrt,ze,y0,uwe,Art,Lrt,Dre,yrt,xrt,$rt,x0,bwe,krt,Srt,Gre,Rrt,Prt,Brt,$0,vwe,Irt,Nrt,Ore,qrt,jrt,Drt,k0,Fwe,Grt,Ort,Vre,Vrt,Xrt,zrt,S0,Twe,Wrt,Qrt,Xre,Hrt,Urt,Jrt,R0,Mwe,Yrt,Krt,zre,Zrt,ett,ott,P0,Ewe,rtt,ttt,Wre,att,ntt,stt,B0,Cwe,ltt,itt,Qre,dtt,ctt,ftt,I0,eQe,Cf,N0,wwe,mk,mtt,Awe,gtt,oQe,wr,gk,htt,wf,ptt,Hre,_tt,utt,Ure,btt,vtt,Ftt,hk,Ttt,Lwe,Mtt,Ett,Ctt,ra,pk,wtt,ywe,Att,Ltt,Af,ytt,xwe,xtt,$tt,Jre,ktt,Stt,Rtt,q0,Ptt,Zr,_k,Btt,$we,Itt,Ntt,$n,qtt,kwe,jtt,Dtt,Swe,Gtt,Ott,Rwe,Vtt,Xtt,ztt,Pwe,j0,Bwe,Wtt,Qtt,Yre,Htt,Utt,Jtt,D0,rQe,Lf,G0,Iwe,uk,Ytt,Nwe,Ktt,tQe,Ar,bk,Ztt,yf,eat,Kre,oat,rat,Zre,tat,aat,nat,vk,sat,qwe,lat,iat,dat,ta,Fk,cat,jwe,fat,mat,xf,gat,Dwe,hat,pat,ete,_at,uat,bat,O0,vat,et,Tk,Fat,Gwe,Tat,Mat,kn,Eat,Owe,Cat,wat,Vwe,Aat,Lat,Xwe,yat,xat,$at,Mk,V0,zwe,kat,Sat,ote,Rat,Pat,Bat,X0,Wwe,Iat,Nat,rte,qat,jat,Dat,z0,aQe,$f,W0,Qwe,Ek,Gat,Hwe,Oat,nQe,Lr,Ck,Vat,kf,Xat,tte,zat,Wat,ate,Qat,Hat,Uat,wk,Jat,Uwe,Yat,Kat,Zat,aa,Ak,ent,Jwe,ont,rnt,Sf,tnt,Ywe,ant,nnt,nte,snt,lnt,int,Q0,dnt,ot,Lk,cnt,Kwe,fnt,mnt,Sn,gnt,Zwe,hnt,pnt,eAe,_nt,unt,oAe,bnt,vnt,Fnt,rAe,H0,tAe,Tnt,Mnt,ste,Ent,Cnt,wnt,U0,sQe;return c=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),bL=new re({}),vL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new Ant({props:{warning:!0,$$slots:{default:[BUt]},$$scope:{ctx:$}}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L617"}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L640"}}),oh=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[IUt]},$$scope:{ctx:$}}}),wL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L763"}}),AL=new re({}),LL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L412"}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17826/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L426"}}),qh=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[NUt]},$$scope:{ctx:$}}}),kL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L625"}}),SL=new re({}),RL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L196"}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17826/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L210"}}),Mp=new Ant({props:{$$slots:{default:[qUt]},$$scope:{ctx:$}}}),Ep=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[jUt]},$$scope:{ctx:$}}}),NL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L337"}}),qL=new re({}),jL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L90"}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L104"}}),zp=new Ant({props:{$$slots:{default:[DUt]},$$scope:{ctx:$}}}),Wp=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[GUt]},$$scope:{ctx:$}}}),VL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L257"}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L788"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/jukebox#transformers.JukeboxConfig">JukeboxConfig</a> configuration class: <code>JukeboxModel</code> (Jukebox model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Up=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[OUt]},$$scope:{ctx:$}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),r2=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[VUt]},$$scope:{ctx:$}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L795"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),a2=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[XUt]},$$scope:{ctx:$}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Y2=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[zUt]},$$scope:{ctx:$}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L810"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Z2=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[WUt]},$$scope:{ctx:$}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),G1=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[QUt]},$$scope:{ctx:$}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L817"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),V1=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[HUt]},$$scope:{ctx:$}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),xb=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[UUt]},$$scope:{ctx:$}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L824"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),kb=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[JUt]},$$scope:{ctx:$}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Kb=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[YUt]},$$scope:{ctx:$}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L833"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),ev=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[KUt]},$$scope:{ctx:$}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ZUt]},$$scope:{ctx:$}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L878"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[eJt]},$$scope:{ctx:$}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oJt]},$$scope:{ctx:$}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L885"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rJt]},$$scope:{ctx:$}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tJt]},$$scope:{ctx:$}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L871"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[aJt]},$$scope:{ctx:$}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),x6=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[nJt]},$$scope:{ctx:$}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L842"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),k6=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[sJt]},$$scope:{ctx:$}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[lJt]},$$scope:{ctx:$}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L849"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[iJt]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[dJt]},$$scope:{ctx:$}}}),zy=new re({}),Wy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L894"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[cJt]},$$scope:{ctx:$}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[fJt]},$$scope:{ctx:$}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L933"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[mJt]},$$scope:{ctx:$}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[gJt]},$$scope:{ctx:$}}}),o9=new re({}),r9=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L860"}}),a9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[hJt]},$$scope:{ctx:$}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[pJt]},$$scope:{ctx:$}}}),s9=new re({}),l9=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L940"}}),d9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[_Jt]},$$scope:{ctx:$}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),m7=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[uJt]},$$scope:{ctx:$}}}),f9=new re({}),m9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L963"}}),h9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),h7=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[bJt]},$$scope:{ctx:$}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),T7=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[vJt]},$$scope:{ctx:$}}}),_9=new re({}),u9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L947"}}),v9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),E7=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[FJt]},$$scope:{ctx:$}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),B7=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[TJt]},$$scope:{ctx:$}}}),T9=new re({}),M9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L954"}}),C9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[MJt]},$$scope:{ctx:$}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),G7=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[EJt]},$$scope:{ctx:$}}}),L9=new re({}),y9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L972"}}),$9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),V7=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[CJt]},$$scope:{ctx:$}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),J7=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[wJt]},$$scope:{ctx:$}}}),S9=new re({}),R9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L979"}}),B9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),K7=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[AJt]},$$scope:{ctx:$}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),t8=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[LJt]},$$scope:{ctx:$}}}),N9=new re({}),q9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L926"}}),D9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),n8=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[yJt]},$$scope:{ctx:$}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),d8=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[xJt]},$$scope:{ctx:$}}}),V9=new re({}),X9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L901"}}),W9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),f8=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[$Jt]},$$scope:{ctx:$}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),h8=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[kJt]},$$scope:{ctx:$}}}),H9=new re({}),U9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L908"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),_8=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[SJt]},$$scope:{ctx:$}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),E8=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[RJt]},$$scope:{ctx:$}}}),Z9=new re({}),ex=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L917"}}),rx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),w8=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[PJt]},$$scope:{ctx:$}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),y8=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[BJt]},$$scope:{ctx:$}}}),ax=new re({}),nx=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),$8=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[IJt]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[NJt]},$$scope:{ctx:$}}}),dx=new re({}),cx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),xM=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[qJt]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[jJt]},$$scope:{ctx:$}}}),hx=new re({}),px=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[DJt]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),p4=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[GJt]},$$scope:{ctx:$}}}),vx=new re({}),Fx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[OJt]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[VJt]},$$scope:{ctx:$}}}),Cx=new re({}),wx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[XJt]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zJt]},$$scope:{ctx:$}}}),xx=new re({}),$x=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[WJt]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[QJt]},$$scope:{ctx:$}}}),Px=new re({}),Bx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[HJt]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[UJt]},$$scope:{ctx:$}}}),jx=new re({}),Dx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),qE=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[JJt]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[YJt]},$$scope:{ctx:$}}}),Xx=new re({}),zx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[KJt]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ZJt]},$$scope:{ctx:$}}}),Jx=new re({}),Yx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[eYt]},$$scope:{ctx:$}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[oYt]},$$scope:{ctx:$}}}),o$=new re({}),r$=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),a$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[rYt]},$$scope:{ctx:$}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[tYt]},$$scope:{ctx:$}}}),s$=new re({}),l$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),d$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[aYt]},$$scope:{ctx:$}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[nYt]},$$scope:{ctx:$}}}),f$=new re({}),m$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),h$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[sYt]},$$scope:{ctx:$}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lYt]},$$scope:{ctx:$}}}),_$=new re({}),u$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),v$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[iYt]},$$scope:{ctx:$}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[dYt]},$$scope:{ctx:$}}}),T$=new re({}),M$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),C$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[cYt]},$$scope:{ctx:$}}}),w$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[fYt]},$$scope:{ctx:$}}}),A$=new re({}),L$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),x$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[mYt]},$$scope:{ctx:$}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[gYt]},$$scope:{ctx:$}}}),k$=new re({}),S$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),P$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[hYt]},$$scope:{ctx:$}}}),B$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[pYt]},$$scope:{ctx:$}}}),I$=new re({}),N$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),j$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[_Yt]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[uYt]},$$scope:{ctx:$}}}),G$=new re({}),O$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),X$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[bYt]},$$scope:{ctx:$}}}),z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[vYt]},$$scope:{ctx:$}}}),W$=new re({}),Q$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),U$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[FYt]},$$scope:{ctx:$}}}),J$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[TYt]},$$scope:{ctx:$}}}),Y$=new re({}),K$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MYt]},$$scope:{ctx:$}}}),ok=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[EYt]},$$scope:{ctx:$}}}),rk=new re({}),tk=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),nk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[CYt]},$$scope:{ctx:$}}}),sk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wYt]},$$scope:{ctx:$}}}),lk=new re({}),ik=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),ck=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[AYt]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[LYt]},$$scope:{ctx:$}}}),mk=new re({}),gk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),pk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[yYt]},$$scope:{ctx:$}}}),_k=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[xYt]},$$scope:{ctx:$}}}),uk=new re({}),bk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Fk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),O0=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[$Yt]},$$scope:{ctx:$}}}),Tk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kYt]},$$scope:{ctx:$}}}),Ek=new re({}),Ck=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),Ak=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[SYt]},$$scope:{ctx:$}}}),Lk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),U0=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[RYt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(c.$$.fragment),h=l(),wo=a("span"),xi=o("Auto Classes"),If=l(),lt=a("p"),$i=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=a("code"),hL=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Si=o("Instantiating one of "),Pn=a("a"),pL=o("AutoConfig"),Bn=o(", "),In=a("a"),_L=o("AutoModel"),Ri=o(`, and
`),Nn=a("a"),uL=o("AutoTokenizer"),Pi=o(" will directly create a class of the relevant architecture. For instance"),qf=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),YS=o("will create a model that is an instance of "),Bi=a("a"),KS=o("BertModel"),ZS=o("."),Ao=l(),Ra=a("p"),eR=o("There is one class of "),jf=a("code"),oR=o("AutoModel"),_Ue=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),oze=l(),Ii=a("h2"),Df=a("a"),one=a("span"),F(bL.$$.fragment),uUe=l(),rne=a("span"),bUe=o("Extending the Auto Classes"),rze=l(),qn=a("p"),vUe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tne=a("code"),FUe=o("NewModel"),TUe=o(", make sure you have a "),ane=a("code"),MUe=o("NewModelConfig"),EUe=o(` then you can add those to the auto
classes like this:`),tze=l(),F(vL.$$.fragment),aze=l(),rR=a("p"),CUe=o("You will then be able to use the auto classes like you would usually do!"),nze=l(),F(Gf.$$.fragment),sze=l(),Ni=a("h2"),Of=a("a"),nne=a("span"),F(FL.$$.fragment),wUe=l(),sne=a("span"),AUe=o("AutoConfig"),lze=l(),Lo=a("div"),F(TL.$$.fragment),LUe=l(),ML=a("p"),yUe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),tR=a("a"),xUe=o("from_pretrained()"),$Ue=o(" class method."),kUe=l(),EL=a("p"),SUe=o("This class cannot be instantiated directly using "),lne=a("code"),RUe=o("__init__()"),PUe=o(" (throws an error)."),BUe=l(),yr=a("div"),F(CL.$$.fragment),IUe=l(),ine=a("p"),NUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),qUe=l(),qi=a("p"),jUe=o("The configuration class to instantiate is selected based on the "),dne=a("code"),DUe=o("model_type"),GUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cne=a("code"),OUe=o("pretrained_model_name_or_path"),VUe=o(":"),XUe=l(),A=a("ul"),Vf=a("li"),fne=a("strong"),zUe=o("albert"),WUe=o(" \u2014 "),aR=a("a"),QUe=o("AlbertConfig"),HUe=o(" (ALBERT model)"),UUe=l(),Xf=a("li"),mne=a("strong"),JUe=o("bart"),YUe=o(" \u2014 "),nR=a("a"),KUe=o("BartConfig"),ZUe=o(" (BART model)"),eJe=l(),zf=a("li"),gne=a("strong"),oJe=o("beit"),rJe=o(" \u2014 "),sR=a("a"),tJe=o("BeitConfig"),aJe=o(" (BEiT model)"),nJe=l(),Wf=a("li"),hne=a("strong"),sJe=o("bert"),lJe=o(" \u2014 "),lR=a("a"),iJe=o("BertConfig"),dJe=o(" (BERT model)"),cJe=l(),Qf=a("li"),pne=a("strong"),fJe=o("bert-generation"),mJe=o(" \u2014 "),iR=a("a"),gJe=o("BertGenerationConfig"),hJe=o(" (Bert Generation model)"),pJe=l(),Hf=a("li"),_ne=a("strong"),_Je=o("big_bird"),uJe=o(" \u2014 "),dR=a("a"),bJe=o("BigBirdConfig"),vJe=o(" (BigBird model)"),FJe=l(),Uf=a("li"),une=a("strong"),TJe=o("bigbird_pegasus"),MJe=o(" \u2014 "),cR=a("a"),EJe=o("BigBirdPegasusConfig"),CJe=o(" (BigBird-Pegasus model)"),wJe=l(),Jf=a("li"),bne=a("strong"),AJe=o("blenderbot"),LJe=o(" \u2014 "),fR=a("a"),yJe=o("BlenderbotConfig"),xJe=o(" (Blenderbot model)"),$Je=l(),Yf=a("li"),vne=a("strong"),kJe=o("blenderbot-small"),SJe=o(" \u2014 "),mR=a("a"),RJe=o("BlenderbotSmallConfig"),PJe=o(" (BlenderbotSmall model)"),BJe=l(),Kf=a("li"),Fne=a("strong"),IJe=o("bloom"),NJe=o(" \u2014 "),gR=a("a"),qJe=o("BloomConfig"),jJe=o(" (BLOOM model)"),DJe=l(),Zf=a("li"),Tne=a("strong"),GJe=o("camembert"),OJe=o(" \u2014 "),hR=a("a"),VJe=o("CamembertConfig"),XJe=o(" (CamemBERT model)"),zJe=l(),em=a("li"),Mne=a("strong"),WJe=o("canine"),QJe=o(" \u2014 "),pR=a("a"),HJe=o("CanineConfig"),UJe=o(" (CANINE model)"),JJe=l(),om=a("li"),Ene=a("strong"),YJe=o("clip"),KJe=o(" \u2014 "),_R=a("a"),ZJe=o("CLIPConfig"),eYe=o(" (CLIP model)"),oYe=l(),rm=a("li"),Cne=a("strong"),rYe=o("codegen"),tYe=o(" \u2014 "),uR=a("a"),aYe=o("CodeGenConfig"),nYe=o(" (CodeGen model)"),sYe=l(),tm=a("li"),wne=a("strong"),lYe=o("convbert"),iYe=o(" \u2014 "),bR=a("a"),dYe=o("ConvBertConfig"),cYe=o(" (ConvBERT model)"),fYe=l(),am=a("li"),Ane=a("strong"),mYe=o("convnext"),gYe=o(" \u2014 "),vR=a("a"),hYe=o("ConvNextConfig"),pYe=o(" (ConvNeXT model)"),_Ye=l(),nm=a("li"),Lne=a("strong"),uYe=o("ctrl"),bYe=o(" \u2014 "),FR=a("a"),vYe=o("CTRLConfig"),FYe=o(" (CTRL model)"),TYe=l(),sm=a("li"),yne=a("strong"),MYe=o("cvt"),EYe=o(" \u2014 "),TR=a("a"),CYe=o("CvtConfig"),wYe=o(" (CvT model)"),AYe=l(),lm=a("li"),xne=a("strong"),LYe=o("data2vec-audio"),yYe=o(" \u2014 "),MR=a("a"),xYe=o("Data2VecAudioConfig"),$Ye=o(" (Data2VecAudio model)"),kYe=l(),im=a("li"),$ne=a("strong"),SYe=o("data2vec-text"),RYe=o(" \u2014 "),ER=a("a"),PYe=o("Data2VecTextConfig"),BYe=o(" (Data2VecText model)"),IYe=l(),dm=a("li"),kne=a("strong"),NYe=o("data2vec-vision"),qYe=o(" \u2014 "),CR=a("a"),jYe=o("Data2VecVisionConfig"),DYe=o(" (Data2VecVision model)"),GYe=l(),cm=a("li"),Sne=a("strong"),OYe=o("deberta"),VYe=o(" \u2014 "),wR=a("a"),XYe=o("DebertaConfig"),zYe=o(" (DeBERTa model)"),WYe=l(),fm=a("li"),Rne=a("strong"),QYe=o("deberta-v2"),HYe=o(" \u2014 "),AR=a("a"),UYe=o("DebertaV2Config"),JYe=o(" (DeBERTa-v2 model)"),YYe=l(),mm=a("li"),Pne=a("strong"),KYe=o("decision_transformer"),ZYe=o(" \u2014 "),LR=a("a"),eKe=o("DecisionTransformerConfig"),oKe=o(" (Decision Transformer model)"),rKe=l(),gm=a("li"),Bne=a("strong"),tKe=o("deit"),aKe=o(" \u2014 "),yR=a("a"),nKe=o("DeiTConfig"),sKe=o(" (DeiT model)"),lKe=l(),hm=a("li"),Ine=a("strong"),iKe=o("detr"),dKe=o(" \u2014 "),xR=a("a"),cKe=o("DetrConfig"),fKe=o(" (DETR model)"),mKe=l(),pm=a("li"),Nne=a("strong"),gKe=o("distilbert"),hKe=o(" \u2014 "),$R=a("a"),pKe=o("DistilBertConfig"),_Ke=o(" (DistilBERT model)"),uKe=l(),_m=a("li"),qne=a("strong"),bKe=o("dpr"),vKe=o(" \u2014 "),kR=a("a"),FKe=o("DPRConfig"),TKe=o(" (DPR model)"),MKe=l(),um=a("li"),jne=a("strong"),EKe=o("dpt"),CKe=o(" \u2014 "),SR=a("a"),wKe=o("DPTConfig"),AKe=o(" (DPT model)"),LKe=l(),bm=a("li"),Dne=a("strong"),yKe=o("electra"),xKe=o(" \u2014 "),RR=a("a"),$Ke=o("ElectraConfig"),kKe=o(" (ELECTRA model)"),SKe=l(),vm=a("li"),Gne=a("strong"),RKe=o("encoder-decoder"),PKe=o(" \u2014 "),PR=a("a"),BKe=o("EncoderDecoderConfig"),IKe=o(" (Encoder decoder model)"),NKe=l(),Fm=a("li"),One=a("strong"),qKe=o("flaubert"),jKe=o(" \u2014 "),BR=a("a"),DKe=o("FlaubertConfig"),GKe=o(" (FlauBERT model)"),OKe=l(),Tm=a("li"),Vne=a("strong"),VKe=o("flava"),XKe=o(" \u2014 "),IR=a("a"),zKe=o("FlavaConfig"),WKe=o(" (FLAVA model)"),QKe=l(),Mm=a("li"),Xne=a("strong"),HKe=o("fnet"),UKe=o(" \u2014 "),NR=a("a"),JKe=o("FNetConfig"),YKe=o(" (FNet model)"),KKe=l(),Em=a("li"),zne=a("strong"),ZKe=o("fsmt"),eZe=o(" \u2014 "),qR=a("a"),oZe=o("FSMTConfig"),rZe=o(" (FairSeq Machine-Translation model)"),tZe=l(),Cm=a("li"),Wne=a("strong"),aZe=o("funnel"),nZe=o(" \u2014 "),jR=a("a"),sZe=o("FunnelConfig"),lZe=o(" (Funnel Transformer model)"),iZe=l(),wm=a("li"),Qne=a("strong"),dZe=o("glpn"),cZe=o(" \u2014 "),DR=a("a"),fZe=o("GLPNConfig"),mZe=o(" (GLPN model)"),gZe=l(),Am=a("li"),Hne=a("strong"),hZe=o("gpt2"),pZe=o(" \u2014 "),GR=a("a"),_Ze=o("GPT2Config"),uZe=o(" (OpenAI GPT-2 model)"),bZe=l(),Lm=a("li"),Une=a("strong"),vZe=o("gpt_neo"),FZe=o(" \u2014 "),OR=a("a"),TZe=o("GPTNeoConfig"),MZe=o(" (GPT Neo model)"),EZe=l(),ym=a("li"),Jne=a("strong"),CZe=o("gpt_neox"),wZe=o(" \u2014 "),VR=a("a"),AZe=o("GPTNeoXConfig"),LZe=o(" (GPT NeoX model)"),yZe=l(),xm=a("li"),Yne=a("strong"),xZe=o("gptj"),$Ze=o(" \u2014 "),XR=a("a"),kZe=o("GPTJConfig"),SZe=o(" (GPT-J model)"),RZe=l(),$m=a("li"),Kne=a("strong"),PZe=o("groupvit"),BZe=o(" \u2014 "),zR=a("a"),IZe=o("GroupViTConfig"),NZe=o(" (GroupViT model)"),qZe=l(),km=a("li"),Zne=a("strong"),jZe=o("hubert"),DZe=o(" \u2014 "),WR=a("a"),GZe=o("HubertConfig"),OZe=o(" (Hubert model)"),VZe=l(),Sm=a("li"),ese=a("strong"),XZe=o("ibert"),zZe=o(" \u2014 "),QR=a("a"),WZe=o("IBertConfig"),QZe=o(" (I-BERT model)"),HZe=l(),Rm=a("li"),ose=a("strong"),UZe=o("imagegpt"),JZe=o(" \u2014 "),HR=a("a"),YZe=o("ImageGPTConfig"),KZe=o(" (ImageGPT model)"),ZZe=l(),Pm=a("li"),rse=a("strong"),eeo=o("jukebox"),oeo=o(" \u2014 "),UR=a("a"),reo=o("JukeboxConfig"),teo=o(" (Jukebox model)"),aeo=l(),Bm=a("li"),tse=a("strong"),neo=o("layoutlm"),seo=o(" \u2014 "),JR=a("a"),leo=o("LayoutLMConfig"),ieo=o(" (LayoutLM model)"),deo=l(),Im=a("li"),ase=a("strong"),ceo=o("layoutlmv2"),feo=o(" \u2014 "),YR=a("a"),meo=o("LayoutLMv2Config"),geo=o(" (LayoutLMv2 model)"),heo=l(),Nm=a("li"),nse=a("strong"),peo=o("layoutlmv3"),_eo=o(" \u2014 "),KR=a("a"),ueo=o("LayoutLMv3Config"),beo=o(" (LayoutLMv3 model)"),veo=l(),qm=a("li"),sse=a("strong"),Feo=o("led"),Teo=o(" \u2014 "),ZR=a("a"),Meo=o("LEDConfig"),Eeo=o(" (LED model)"),Ceo=l(),jm=a("li"),lse=a("strong"),weo=o("levit"),Aeo=o(" \u2014 "),eP=a("a"),Leo=o("LevitConfig"),yeo=o(" (LeViT model)"),xeo=l(),Dm=a("li"),ise=a("strong"),$eo=o("longformer"),keo=o(" \u2014 "),oP=a("a"),Seo=o("LongformerConfig"),Reo=o(" (Longformer model)"),Peo=l(),Gm=a("li"),dse=a("strong"),Beo=o("longt5"),Ieo=o(" \u2014 "),rP=a("a"),Neo=o("LongT5Config"),qeo=o(" (LongT5 model)"),jeo=l(),Om=a("li"),cse=a("strong"),Deo=o("luke"),Geo=o(" \u2014 "),tP=a("a"),Oeo=o("LukeConfig"),Veo=o(" (LUKE model)"),Xeo=l(),Vm=a("li"),fse=a("strong"),zeo=o("lxmert"),Weo=o(" \u2014 "),aP=a("a"),Qeo=o("LxmertConfig"),Heo=o(" (LXMERT model)"),Ueo=l(),Xm=a("li"),mse=a("strong"),Jeo=o("m2m_100"),Yeo=o(" \u2014 "),nP=a("a"),Keo=o("M2M100Config"),Zeo=o(" (M2M100 model)"),eoo=l(),zm=a("li"),gse=a("strong"),ooo=o("marian"),roo=o(" \u2014 "),sP=a("a"),too=o("MarianConfig"),aoo=o(" (Marian model)"),noo=l(),Wm=a("li"),hse=a("strong"),soo=o("maskformer"),loo=o(" \u2014 "),lP=a("a"),ioo=o("MaskFormerConfig"),doo=o(" (MaskFormer model)"),coo=l(),Qm=a("li"),pse=a("strong"),foo=o("mbart"),moo=o(" \u2014 "),iP=a("a"),goo=o("MBartConfig"),hoo=o(" (mBART model)"),poo=l(),Hm=a("li"),_se=a("strong"),_oo=o("mctct"),uoo=o(" \u2014 "),dP=a("a"),boo=o("MCTCTConfig"),voo=o(" (M-CTC-T model)"),Foo=l(),Um=a("li"),use=a("strong"),Too=o("megatron-bert"),Moo=o(" \u2014 "),cP=a("a"),Eoo=o("MegatronBertConfig"),Coo=o(" (Megatron-BERT model)"),woo=l(),Jm=a("li"),bse=a("strong"),Aoo=o("mobilebert"),Loo=o(" \u2014 "),fP=a("a"),yoo=o("MobileBertConfig"),xoo=o(" (MobileBERT model)"),$oo=l(),Ym=a("li"),vse=a("strong"),koo=o("mobilevit"),Soo=o(" \u2014 "),mP=a("a"),Roo=o("MobileViTConfig"),Poo=o(" (MobileViT model)"),Boo=l(),Km=a("li"),Fse=a("strong"),Ioo=o("mpnet"),Noo=o(" \u2014 "),gP=a("a"),qoo=o("MPNetConfig"),joo=o(" (MPNet model)"),Doo=l(),Zm=a("li"),Tse=a("strong"),Goo=o("mt5"),Ooo=o(" \u2014 "),hP=a("a"),Voo=o("MT5Config"),Xoo=o(" (MT5 model)"),zoo=l(),eg=a("li"),Mse=a("strong"),Woo=o("mvp"),Qoo=o(" \u2014 "),pP=a("a"),Hoo=o("MvpConfig"),Uoo=o(" (MVP model)"),Joo=l(),og=a("li"),Ese=a("strong"),Yoo=o("nezha"),Koo=o(" \u2014 "),_P=a("a"),Zoo=o("NezhaConfig"),ero=o(" (Nezha model)"),oro=l(),rg=a("li"),Cse=a("strong"),rro=o("nystromformer"),tro=o(" \u2014 "),uP=a("a"),aro=o("NystromformerConfig"),nro=o(" (Nystr\xF6mformer model)"),sro=l(),tg=a("li"),wse=a("strong"),lro=o("openai-gpt"),iro=o(" \u2014 "),bP=a("a"),dro=o("OpenAIGPTConfig"),cro=o(" (OpenAI GPT model)"),fro=l(),ag=a("li"),Ase=a("strong"),mro=o("opt"),gro=o(" \u2014 "),vP=a("a"),hro=o("OPTConfig"),pro=o(" (OPT model)"),_ro=l(),ng=a("li"),Lse=a("strong"),uro=o("owlvit"),bro=o(" \u2014 "),FP=a("a"),vro=o("OwlViTConfig"),Fro=o(" (OWL-ViT model)"),Tro=l(),sg=a("li"),yse=a("strong"),Mro=o("pegasus"),Ero=o(" \u2014 "),TP=a("a"),Cro=o("PegasusConfig"),wro=o(" (Pegasus model)"),Aro=l(),lg=a("li"),xse=a("strong"),Lro=o("perceiver"),yro=o(" \u2014 "),MP=a("a"),xro=o("PerceiverConfig"),$ro=o(" (Perceiver model)"),kro=l(),ig=a("li"),$se=a("strong"),Sro=o("plbart"),Rro=o(" \u2014 "),EP=a("a"),Pro=o("PLBartConfig"),Bro=o(" (PLBart model)"),Iro=l(),dg=a("li"),kse=a("strong"),Nro=o("poolformer"),qro=o(" \u2014 "),CP=a("a"),jro=o("PoolFormerConfig"),Dro=o(" (PoolFormer model)"),Gro=l(),cg=a("li"),Sse=a("strong"),Oro=o("prophetnet"),Vro=o(" \u2014 "),wP=a("a"),Xro=o("ProphetNetConfig"),zro=o(" (ProphetNet model)"),Wro=l(),fg=a("li"),Rse=a("strong"),Qro=o("qdqbert"),Hro=o(" \u2014 "),AP=a("a"),Uro=o("QDQBertConfig"),Jro=o(" (QDQBert model)"),Yro=l(),mg=a("li"),Pse=a("strong"),Kro=o("rag"),Zro=o(" \u2014 "),LP=a("a"),eto=o("RagConfig"),oto=o(" (RAG model)"),rto=l(),gg=a("li"),Bse=a("strong"),tto=o("realm"),ato=o(" \u2014 "),yP=a("a"),nto=o("RealmConfig"),sto=o(" (REALM model)"),lto=l(),hg=a("li"),Ise=a("strong"),ito=o("reformer"),dto=o(" \u2014 "),xP=a("a"),cto=o("ReformerConfig"),fto=o(" (Reformer model)"),mto=l(),pg=a("li"),Nse=a("strong"),gto=o("regnet"),hto=o(" \u2014 "),$P=a("a"),pto=o("RegNetConfig"),_to=o(" (RegNet model)"),uto=l(),_g=a("li"),qse=a("strong"),bto=o("rembert"),vto=o(" \u2014 "),kP=a("a"),Fto=o("RemBertConfig"),Tto=o(" (RemBERT model)"),Mto=l(),ug=a("li"),jse=a("strong"),Eto=o("resnet"),Cto=o(" \u2014 "),SP=a("a"),wto=o("ResNetConfig"),Ato=o(" (ResNet model)"),Lto=l(),bg=a("li"),Dse=a("strong"),yto=o("retribert"),xto=o(" \u2014 "),RP=a("a"),$to=o("RetriBertConfig"),kto=o(" (RetriBERT model)"),Sto=l(),vg=a("li"),Gse=a("strong"),Rto=o("roberta"),Pto=o(" \u2014 "),PP=a("a"),Bto=o("RobertaConfig"),Ito=o(" (RoBERTa model)"),Nto=l(),Fg=a("li"),Ose=a("strong"),qto=o("roformer"),jto=o(" \u2014 "),BP=a("a"),Dto=o("RoFormerConfig"),Gto=o(" (RoFormer model)"),Oto=l(),Tg=a("li"),Vse=a("strong"),Vto=o("segformer"),Xto=o(" \u2014 "),IP=a("a"),zto=o("SegformerConfig"),Wto=o(" (SegFormer model)"),Qto=l(),Mg=a("li"),Xse=a("strong"),Hto=o("sew"),Uto=o(" \u2014 "),NP=a("a"),Jto=o("SEWConfig"),Yto=o(" (SEW model)"),Kto=l(),Eg=a("li"),zse=a("strong"),Zto=o("sew-d"),eao=o(" \u2014 "),qP=a("a"),oao=o("SEWDConfig"),rao=o(" (SEW-D model)"),tao=l(),Cg=a("li"),Wse=a("strong"),aao=o("speech-encoder-decoder"),nao=o(" \u2014 "),jP=a("a"),sao=o("SpeechEncoderDecoderConfig"),lao=o(" (Speech Encoder decoder model)"),iao=l(),wg=a("li"),Qse=a("strong"),dao=o("speech_to_text"),cao=o(" \u2014 "),DP=a("a"),fao=o("Speech2TextConfig"),mao=o(" (Speech2Text model)"),gao=l(),Ag=a("li"),Hse=a("strong"),hao=o("speech_to_text_2"),pao=o(" \u2014 "),GP=a("a"),_ao=o("Speech2Text2Config"),uao=o(" (Speech2Text2 model)"),bao=l(),Lg=a("li"),Use=a("strong"),vao=o("splinter"),Fao=o(" \u2014 "),OP=a("a"),Tao=o("SplinterConfig"),Mao=o(" (Splinter model)"),Eao=l(),yg=a("li"),Jse=a("strong"),Cao=o("squeezebert"),wao=o(" \u2014 "),VP=a("a"),Aao=o("SqueezeBertConfig"),Lao=o(" (SqueezeBERT model)"),yao=l(),xg=a("li"),Yse=a("strong"),xao=o("swin"),$ao=o(" \u2014 "),XP=a("a"),kao=o("SwinConfig"),Sao=o(" (Swin Transformer model)"),Rao=l(),$g=a("li"),Kse=a("strong"),Pao=o("t5"),Bao=o(" \u2014 "),zP=a("a"),Iao=o("T5Config"),Nao=o(" (T5 model)"),qao=l(),kg=a("li"),Zse=a("strong"),jao=o("tapas"),Dao=o(" \u2014 "),WP=a("a"),Gao=o("TapasConfig"),Oao=o(" (TAPAS model)"),Vao=l(),Sg=a("li"),ele=a("strong"),Xao=o("trajectory_transformer"),zao=o(" \u2014 "),QP=a("a"),Wao=o("TrajectoryTransformerConfig"),Qao=o(" (Trajectory Transformer model)"),Hao=l(),Rg=a("li"),ole=a("strong"),Uao=o("transfo-xl"),Jao=o(" \u2014 "),HP=a("a"),Yao=o("TransfoXLConfig"),Kao=o(" (Transformer-XL model)"),Zao=l(),Pg=a("li"),rle=a("strong"),eno=o("trocr"),ono=o(" \u2014 "),UP=a("a"),rno=o("TrOCRConfig"),tno=o(" (TrOCR model)"),ano=l(),Bg=a("li"),tle=a("strong"),nno=o("unispeech"),sno=o(" \u2014 "),JP=a("a"),lno=o("UniSpeechConfig"),ino=o(" (UniSpeech model)"),dno=l(),Ig=a("li"),ale=a("strong"),cno=o("unispeech-sat"),fno=o(" \u2014 "),YP=a("a"),mno=o("UniSpeechSatConfig"),gno=o(" (UniSpeechSat model)"),hno=l(),Ng=a("li"),nle=a("strong"),pno=o("van"),_no=o(" \u2014 "),KP=a("a"),uno=o("VanConfig"),bno=o(" (VAN model)"),vno=l(),qg=a("li"),sle=a("strong"),Fno=o("vilt"),Tno=o(" \u2014 "),ZP=a("a"),Mno=o("ViltConfig"),Eno=o(" (ViLT model)"),Cno=l(),jg=a("li"),lle=a("strong"),wno=o("vision-encoder-decoder"),Ano=o(" \u2014 "),eB=a("a"),Lno=o("VisionEncoderDecoderConfig"),yno=o(" (Vision Encoder decoder model)"),xno=l(),Dg=a("li"),ile=a("strong"),$no=o("vision-text-dual-encoder"),kno=o(" \u2014 "),oB=a("a"),Sno=o("VisionTextDualEncoderConfig"),Rno=o(" (VisionTextDualEncoder model)"),Pno=l(),Gg=a("li"),dle=a("strong"),Bno=o("visual_bert"),Ino=o(" \u2014 "),rB=a("a"),Nno=o("VisualBertConfig"),qno=o(" (VisualBERT model)"),jno=l(),Og=a("li"),cle=a("strong"),Dno=o("vit"),Gno=o(" \u2014 "),tB=a("a"),Ono=o("ViTConfig"),Vno=o(" (ViT model)"),Xno=l(),Vg=a("li"),fle=a("strong"),zno=o("vit_mae"),Wno=o(" \u2014 "),aB=a("a"),Qno=o("ViTMAEConfig"),Hno=o(" (ViTMAE model)"),Uno=l(),Xg=a("li"),mle=a("strong"),Jno=o("wav2vec2"),Yno=o(" \u2014 "),nB=a("a"),Kno=o("Wav2Vec2Config"),Zno=o(" (Wav2Vec2 model)"),eso=l(),zg=a("li"),gle=a("strong"),oso=o("wav2vec2-conformer"),rso=o(" \u2014 "),sB=a("a"),tso=o("Wav2Vec2ConformerConfig"),aso=o(" (Wav2Vec2-Conformer model)"),nso=l(),Wg=a("li"),hle=a("strong"),sso=o("wavlm"),lso=o(" \u2014 "),lB=a("a"),iso=o("WavLMConfig"),dso=o(" (WavLM model)"),cso=l(),Qg=a("li"),ple=a("strong"),fso=o("xglm"),mso=o(" \u2014 "),iB=a("a"),gso=o("XGLMConfig"),hso=o(" (XGLM model)"),pso=l(),Hg=a("li"),_le=a("strong"),_so=o("xlm"),uso=o(" \u2014 "),dB=a("a"),bso=o("XLMConfig"),vso=o(" (XLM model)"),Fso=l(),Ug=a("li"),ule=a("strong"),Tso=o("xlm-prophetnet"),Mso=o(" \u2014 "),cB=a("a"),Eso=o("XLMProphetNetConfig"),Cso=o(" (XLM-ProphetNet model)"),wso=l(),Jg=a("li"),ble=a("strong"),Aso=o("xlm-roberta"),Lso=o(" \u2014 "),fB=a("a"),yso=o("XLMRobertaConfig"),xso=o(" (XLM-RoBERTa model)"),$so=l(),Yg=a("li"),vle=a("strong"),kso=o("xlm-roberta-xl"),Sso=o(" \u2014 "),mB=a("a"),Rso=o("XLMRobertaXLConfig"),Pso=o(" (XLM-RoBERTa-XL model)"),Bso=l(),Kg=a("li"),Fle=a("strong"),Iso=o("xlnet"),Nso=o(" \u2014 "),gB=a("a"),qso=o("XLNetConfig"),jso=o(" (XLNet model)"),Dso=l(),Zg=a("li"),Tle=a("strong"),Gso=o("yolos"),Oso=o(" \u2014 "),hB=a("a"),Vso=o("YolosConfig"),Xso=o(" (YOLOS model)"),zso=l(),eh=a("li"),Mle=a("strong"),Wso=o("yoso"),Qso=o(" \u2014 "),pB=a("a"),Hso=o("YosoConfig"),Uso=o(" (YOSO model)"),Jso=l(),F(oh.$$.fragment),Yso=l(),rh=a("div"),F(wL.$$.fragment),Kso=l(),Ele=a("p"),Zso=o("Register a new configuration for this class."),ize=l(),ji=a("h2"),th=a("a"),Cle=a("span"),F(AL.$$.fragment),elo=l(),wle=a("span"),olo=o("AutoTokenizer"),dze=l(),yo=a("div"),F(LL.$$.fragment),rlo=l(),yL=a("p"),tlo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_B=a("a"),alo=o("AutoTokenizer.from_pretrained()"),nlo=o(" class method."),slo=l(),xL=a("p"),llo=o("This class cannot be instantiated directly using "),Ale=a("code"),ilo=o("__init__()"),dlo=o(" (throws an error)."),clo=l(),xr=a("div"),F($L.$$.fragment),flo=l(),Lle=a("p"),mlo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),glo=l(),Pa=a("p"),hlo=o("The tokenizer class to instantiate is selected based on the "),yle=a("code"),plo=o("model_type"),_lo=o(` property of the config object (either
passed as an argument or loaded from `),xle=a("code"),ulo=o("pretrained_model_name_or_path"),blo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$le=a("code"),vlo=o("pretrained_model_name_or_path"),Flo=o(":"),Tlo=l(),k=a("ul"),jn=a("li"),kle=a("strong"),Mlo=o("albert"),Elo=o(" \u2014 "),uB=a("a"),Clo=o("AlbertTokenizer"),wlo=o(" or "),bB=a("a"),Alo=o("AlbertTokenizerFast"),Llo=o(" (ALBERT model)"),ylo=l(),Dn=a("li"),Sle=a("strong"),xlo=o("bart"),$lo=o(" \u2014 "),vB=a("a"),klo=o("BartTokenizer"),Slo=o(" or "),FB=a("a"),Rlo=o("BartTokenizerFast"),Plo=o(" (BART model)"),Blo=l(),Gn=a("li"),Rle=a("strong"),Ilo=o("barthez"),Nlo=o(" \u2014 "),TB=a("a"),qlo=o("BarthezTokenizer"),jlo=o(" or "),MB=a("a"),Dlo=o("BarthezTokenizerFast"),Glo=o(" (BARThez model)"),Olo=l(),ah=a("li"),Ple=a("strong"),Vlo=o("bartpho"),Xlo=o(" \u2014 "),EB=a("a"),zlo=o("BartphoTokenizer"),Wlo=o(" (BARTpho model)"),Qlo=l(),On=a("li"),Ble=a("strong"),Hlo=o("bert"),Ulo=o(" \u2014 "),CB=a("a"),Jlo=o("BertTokenizer"),Ylo=o(" or "),wB=a("a"),Klo=o("BertTokenizerFast"),Zlo=o(" (BERT model)"),eio=l(),nh=a("li"),Ile=a("strong"),oio=o("bert-generation"),rio=o(" \u2014 "),AB=a("a"),tio=o("BertGenerationTokenizer"),aio=o(" (Bert Generation model)"),nio=l(),sh=a("li"),Nle=a("strong"),sio=o("bert-japanese"),lio=o(" \u2014 "),LB=a("a"),iio=o("BertJapaneseTokenizer"),dio=o(" (BertJapanese model)"),cio=l(),lh=a("li"),qle=a("strong"),fio=o("bertweet"),mio=o(" \u2014 "),yB=a("a"),gio=o("BertweetTokenizer"),hio=o(" (BERTweet model)"),pio=l(),Vn=a("li"),jle=a("strong"),_io=o("big_bird"),uio=o(" \u2014 "),xB=a("a"),bio=o("BigBirdTokenizer"),vio=o(" or "),$B=a("a"),Fio=o("BigBirdTokenizerFast"),Tio=o(" (BigBird model)"),Mio=l(),Xn=a("li"),Dle=a("strong"),Eio=o("bigbird_pegasus"),Cio=o(" \u2014 "),kB=a("a"),wio=o("PegasusTokenizer"),Aio=o(" or "),SB=a("a"),Lio=o("PegasusTokenizerFast"),yio=o(" (BigBird-Pegasus model)"),xio=l(),zn=a("li"),Gle=a("strong"),$io=o("blenderbot"),kio=o(" \u2014 "),RB=a("a"),Sio=o("BlenderbotTokenizer"),Rio=o(" or "),PB=a("a"),Pio=o("BlenderbotTokenizerFast"),Bio=o(" (Blenderbot model)"),Iio=l(),ih=a("li"),Ole=a("strong"),Nio=o("blenderbot-small"),qio=o(" \u2014 "),BB=a("a"),jio=o("BlenderbotSmallTokenizer"),Dio=o(" (BlenderbotSmall model)"),Gio=l(),dh=a("li"),Vle=a("strong"),Oio=o("bloom"),Vio=o(" \u2014 "),IB=a("a"),Xio=o("BloomTokenizerFast"),zio=o(" (BLOOM model)"),Wio=l(),ch=a("li"),Xle=a("strong"),Qio=o("byt5"),Hio=o(" \u2014 "),NB=a("a"),Uio=o("ByT5Tokenizer"),Jio=o(" (ByT5 model)"),Yio=l(),Wn=a("li"),zle=a("strong"),Kio=o("camembert"),Zio=o(" \u2014 "),qB=a("a"),edo=o("CamembertTokenizer"),odo=o(" or "),jB=a("a"),rdo=o("CamembertTokenizerFast"),tdo=o(" (CamemBERT model)"),ado=l(),fh=a("li"),Wle=a("strong"),ndo=o("canine"),sdo=o(" \u2014 "),DB=a("a"),ldo=o("CanineTokenizer"),ido=o(" (CANINE model)"),ddo=l(),Qn=a("li"),Qle=a("strong"),cdo=o("clip"),fdo=o(" \u2014 "),GB=a("a"),mdo=o("CLIPTokenizer"),gdo=o(" or "),OB=a("a"),hdo=o("CLIPTokenizerFast"),pdo=o(" (CLIP model)"),_do=l(),Hn=a("li"),Hle=a("strong"),udo=o("codegen"),bdo=o(" \u2014 "),VB=a("a"),vdo=o("CodeGenTokenizer"),Fdo=o(" or "),XB=a("a"),Tdo=o("CodeGenTokenizerFast"),Mdo=o(" (CodeGen model)"),Edo=l(),Un=a("li"),Ule=a("strong"),Cdo=o("convbert"),wdo=o(" \u2014 "),zB=a("a"),Ado=o("ConvBertTokenizer"),Ldo=o(" or "),WB=a("a"),ydo=o("ConvBertTokenizerFast"),xdo=o(" (ConvBERT model)"),$do=l(),Jn=a("li"),Jle=a("strong"),kdo=o("cpm"),Sdo=o(" \u2014 "),QB=a("a"),Rdo=o("CpmTokenizer"),Pdo=o(" or "),HB=a("a"),Bdo=o("CpmTokenizerFast"),Ido=o(" (CPM model)"),Ndo=l(),mh=a("li"),Yle=a("strong"),qdo=o("ctrl"),jdo=o(" \u2014 "),UB=a("a"),Ddo=o("CTRLTokenizer"),Gdo=o(" (CTRL model)"),Odo=l(),Yn=a("li"),Kle=a("strong"),Vdo=o("data2vec-text"),Xdo=o(" \u2014 "),JB=a("a"),zdo=o("RobertaTokenizer"),Wdo=o(" or "),YB=a("a"),Qdo=o("RobertaTokenizerFast"),Hdo=o(" (Data2VecText model)"),Udo=l(),Kn=a("li"),Zle=a("strong"),Jdo=o("deberta"),Ydo=o(" \u2014 "),KB=a("a"),Kdo=o("DebertaTokenizer"),Zdo=o(" or "),ZB=a("a"),eco=o("DebertaTokenizerFast"),oco=o(" (DeBERTa model)"),rco=l(),Zn=a("li"),eie=a("strong"),tco=o("deberta-v2"),aco=o(" \u2014 "),eI=a("a"),nco=o("DebertaV2Tokenizer"),sco=o(" or "),oI=a("a"),lco=o("DebertaV2TokenizerFast"),ico=o(" (DeBERTa-v2 model)"),dco=l(),es=a("li"),oie=a("strong"),cco=o("distilbert"),fco=o(" \u2014 "),rI=a("a"),mco=o("DistilBertTokenizer"),gco=o(" or "),tI=a("a"),hco=o("DistilBertTokenizerFast"),pco=o(" (DistilBERT model)"),_co=l(),os=a("li"),rie=a("strong"),uco=o("dpr"),bco=o(" \u2014 "),aI=a("a"),vco=o("DPRQuestionEncoderTokenizer"),Fco=o(" or "),nI=a("a"),Tco=o("DPRQuestionEncoderTokenizerFast"),Mco=o(" (DPR model)"),Eco=l(),rs=a("li"),tie=a("strong"),Cco=o("electra"),wco=o(" \u2014 "),sI=a("a"),Aco=o("ElectraTokenizer"),Lco=o(" or "),lI=a("a"),yco=o("ElectraTokenizerFast"),xco=o(" (ELECTRA model)"),$co=l(),gh=a("li"),aie=a("strong"),kco=o("flaubert"),Sco=o(" \u2014 "),iI=a("a"),Rco=o("FlaubertTokenizer"),Pco=o(" (FlauBERT model)"),Bco=l(),ts=a("li"),nie=a("strong"),Ico=o("fnet"),Nco=o(" \u2014 "),dI=a("a"),qco=o("FNetTokenizer"),jco=o(" or "),cI=a("a"),Dco=o("FNetTokenizerFast"),Gco=o(" (FNet model)"),Oco=l(),hh=a("li"),sie=a("strong"),Vco=o("fsmt"),Xco=o(" \u2014 "),fI=a("a"),zco=o("FSMTTokenizer"),Wco=o(" (FairSeq Machine-Translation model)"),Qco=l(),as=a("li"),lie=a("strong"),Hco=o("funnel"),Uco=o(" \u2014 "),mI=a("a"),Jco=o("FunnelTokenizer"),Yco=o(" or "),gI=a("a"),Kco=o("FunnelTokenizerFast"),Zco=o(" (Funnel Transformer model)"),efo=l(),ns=a("li"),iie=a("strong"),ofo=o("gpt2"),rfo=o(" \u2014 "),hI=a("a"),tfo=o("GPT2Tokenizer"),afo=o(" or "),pI=a("a"),nfo=o("GPT2TokenizerFast"),sfo=o(" (OpenAI GPT-2 model)"),lfo=l(),ss=a("li"),die=a("strong"),ifo=o("gpt_neo"),dfo=o(" \u2014 "),_I=a("a"),cfo=o("GPT2Tokenizer"),ffo=o(" or "),uI=a("a"),mfo=o("GPT2TokenizerFast"),gfo=o(" (GPT Neo model)"),hfo=l(),ph=a("li"),cie=a("strong"),pfo=o("gpt_neox"),_fo=o(" \u2014 "),bI=a("a"),ufo=o("GPTNeoXTokenizerFast"),bfo=o(" (GPT NeoX model)"),vfo=l(),ls=a("li"),fie=a("strong"),Ffo=o("gptj"),Tfo=o(" \u2014 "),vI=a("a"),Mfo=o("GPT2Tokenizer"),Efo=o(" or "),FI=a("a"),Cfo=o("GPT2TokenizerFast"),wfo=o(" (GPT-J model)"),Afo=l(),is=a("li"),mie=a("strong"),Lfo=o("groupvit"),yfo=o(" \u2014 "),TI=a("a"),xfo=o("CLIPTokenizer"),$fo=o(" or "),MI=a("a"),kfo=o("CLIPTokenizerFast"),Sfo=o(" (GroupViT model)"),Rfo=l(),ds=a("li"),gie=a("strong"),Pfo=o("herbert"),Bfo=o(" \u2014 "),EI=a("a"),Ifo=o("HerbertTokenizer"),Nfo=o(" or "),CI=a("a"),qfo=o("HerbertTokenizerFast"),jfo=o(" (HerBERT model)"),Dfo=l(),_h=a("li"),hie=a("strong"),Gfo=o("hubert"),Ofo=o(" \u2014 "),wI=a("a"),Vfo=o("Wav2Vec2CTCTokenizer"),Xfo=o(" (Hubert model)"),zfo=l(),cs=a("li"),pie=a("strong"),Wfo=o("ibert"),Qfo=o(" \u2014 "),AI=a("a"),Hfo=o("RobertaTokenizer"),Ufo=o(" or "),LI=a("a"),Jfo=o("RobertaTokenizerFast"),Yfo=o(" (I-BERT model)"),Kfo=l(),uh=a("li"),_ie=a("strong"),Zfo=o("jukebox"),emo=o(" \u2014 "),uie=a("code"),omo=o("JukeboxTokenizer"),rmo=o(" (Jukebox model)"),tmo=l(),fs=a("li"),bie=a("strong"),amo=o("layoutlm"),nmo=o(" \u2014 "),yI=a("a"),smo=o("LayoutLMTokenizer"),lmo=o(" or "),xI=a("a"),imo=o("LayoutLMTokenizerFast"),dmo=o(" (LayoutLM model)"),cmo=l(),ms=a("li"),vie=a("strong"),fmo=o("layoutlmv2"),mmo=o(" \u2014 "),$I=a("a"),gmo=o("LayoutLMv2Tokenizer"),hmo=o(" or "),kI=a("a"),pmo=o("LayoutLMv2TokenizerFast"),_mo=o(" (LayoutLMv2 model)"),umo=l(),gs=a("li"),Fie=a("strong"),bmo=o("layoutlmv3"),vmo=o(" \u2014 "),SI=a("a"),Fmo=o("LayoutLMv3Tokenizer"),Tmo=o(" or "),RI=a("a"),Mmo=o("LayoutLMv3TokenizerFast"),Emo=o(" (LayoutLMv3 model)"),Cmo=l(),hs=a("li"),Tie=a("strong"),wmo=o("layoutxlm"),Amo=o(" \u2014 "),PI=a("a"),Lmo=o("LayoutXLMTokenizer"),ymo=o(" or "),BI=a("a"),xmo=o("LayoutXLMTokenizerFast"),$mo=o(" (LayoutXLM model)"),kmo=l(),ps=a("li"),Mie=a("strong"),Smo=o("led"),Rmo=o(" \u2014 "),II=a("a"),Pmo=o("LEDTokenizer"),Bmo=o(" or "),NI=a("a"),Imo=o("LEDTokenizerFast"),Nmo=o(" (LED model)"),qmo=l(),_s=a("li"),Eie=a("strong"),jmo=o("longformer"),Dmo=o(" \u2014 "),qI=a("a"),Gmo=o("LongformerTokenizer"),Omo=o(" or "),jI=a("a"),Vmo=o("LongformerTokenizerFast"),Xmo=o(" (Longformer model)"),zmo=l(),us=a("li"),Cie=a("strong"),Wmo=o("longt5"),Qmo=o(" \u2014 "),DI=a("a"),Hmo=o("T5Tokenizer"),Umo=o(" or "),GI=a("a"),Jmo=o("T5TokenizerFast"),Ymo=o(" (LongT5 model)"),Kmo=l(),bh=a("li"),wie=a("strong"),Zmo=o("luke"),ego=o(" \u2014 "),OI=a("a"),ogo=o("LukeTokenizer"),rgo=o(" (LUKE model)"),tgo=l(),bs=a("li"),Aie=a("strong"),ago=o("lxmert"),ngo=o(" \u2014 "),VI=a("a"),sgo=o("LxmertTokenizer"),lgo=o(" or "),XI=a("a"),igo=o("LxmertTokenizerFast"),dgo=o(" (LXMERT model)"),cgo=l(),vh=a("li"),Lie=a("strong"),fgo=o("m2m_100"),mgo=o(" \u2014 "),zI=a("a"),ggo=o("M2M100Tokenizer"),hgo=o(" (M2M100 model)"),pgo=l(),Fh=a("li"),yie=a("strong"),_go=o("marian"),ugo=o(" \u2014 "),WI=a("a"),bgo=o("MarianTokenizer"),vgo=o(" (Marian model)"),Fgo=l(),vs=a("li"),xie=a("strong"),Tgo=o("mbart"),Mgo=o(" \u2014 "),QI=a("a"),Ego=o("MBartTokenizer"),Cgo=o(" or "),HI=a("a"),wgo=o("MBartTokenizerFast"),Ago=o(" (mBART model)"),Lgo=l(),Fs=a("li"),$ie=a("strong"),ygo=o("mbart50"),xgo=o(" \u2014 "),UI=a("a"),$go=o("MBart50Tokenizer"),kgo=o(" or "),JI=a("a"),Sgo=o("MBart50TokenizerFast"),Rgo=o(" (mBART-50 model)"),Pgo=l(),Ts=a("li"),kie=a("strong"),Bgo=o("megatron-bert"),Igo=o(" \u2014 "),YI=a("a"),Ngo=o("BertTokenizer"),qgo=o(" or "),KI=a("a"),jgo=o("BertTokenizerFast"),Dgo=o(" (Megatron-BERT model)"),Ggo=l(),Th=a("li"),Sie=a("strong"),Ogo=o("mluke"),Vgo=o(" \u2014 "),ZI=a("a"),Xgo=o("MLukeTokenizer"),zgo=o(" (mLUKE model)"),Wgo=l(),Ms=a("li"),Rie=a("strong"),Qgo=o("mobilebert"),Hgo=o(" \u2014 "),eN=a("a"),Ugo=o("MobileBertTokenizer"),Jgo=o(" or "),oN=a("a"),Ygo=o("MobileBertTokenizerFast"),Kgo=o(" (MobileBERT model)"),Zgo=l(),Es=a("li"),Pie=a("strong"),eho=o("mpnet"),oho=o(" \u2014 "),rN=a("a"),rho=o("MPNetTokenizer"),tho=o(" or "),tN=a("a"),aho=o("MPNetTokenizerFast"),nho=o(" (MPNet model)"),sho=l(),Cs=a("li"),Bie=a("strong"),lho=o("mt5"),iho=o(" \u2014 "),aN=a("a"),dho=o("MT5Tokenizer"),cho=o(" or "),nN=a("a"),fho=o("MT5TokenizerFast"),mho=o(" (MT5 model)"),gho=l(),ws=a("li"),Iie=a("strong"),hho=o("mvp"),pho=o(" \u2014 "),sN=a("a"),_ho=o("MvpTokenizer"),uho=o(" or "),lN=a("a"),bho=o("MvpTokenizerFast"),vho=o(" (MVP model)"),Fho=l(),As=a("li"),Nie=a("strong"),Tho=o("nezha"),Mho=o(" \u2014 "),iN=a("a"),Eho=o("BertTokenizer"),Cho=o(" or "),dN=a("a"),who=o("BertTokenizerFast"),Aho=o(" (Nezha model)"),Lho=l(),Ls=a("li"),qie=a("strong"),yho=o("nllb"),xho=o(" \u2014 "),cN=a("a"),$ho=o("NllbTokenizer"),kho=o(" or "),fN=a("a"),Sho=o("NllbTokenizerFast"),Rho=o(" (NLLB model)"),Pho=l(),ys=a("li"),jie=a("strong"),Bho=o("nystromformer"),Iho=o(" \u2014 "),mN=a("a"),Nho=o("AlbertTokenizer"),qho=o(" or "),gN=a("a"),jho=o("AlbertTokenizerFast"),Dho=o(" (Nystr\xF6mformer model)"),Gho=l(),xs=a("li"),Die=a("strong"),Oho=o("openai-gpt"),Vho=o(" \u2014 "),hN=a("a"),Xho=o("OpenAIGPTTokenizer"),zho=o(" or "),pN=a("a"),Who=o("OpenAIGPTTokenizerFast"),Qho=o(" (OpenAI GPT model)"),Hho=l(),Mh=a("li"),Gie=a("strong"),Uho=o("opt"),Jho=o(" \u2014 "),_N=a("a"),Yho=o("GPT2Tokenizer"),Kho=o(" (OPT model)"),Zho=l(),$s=a("li"),Oie=a("strong"),epo=o("owlvit"),opo=o(" \u2014 "),uN=a("a"),rpo=o("CLIPTokenizer"),tpo=o(" or "),bN=a("a"),apo=o("CLIPTokenizerFast"),npo=o(" (OWL-ViT model)"),spo=l(),ks=a("li"),Vie=a("strong"),lpo=o("pegasus"),ipo=o(" \u2014 "),vN=a("a"),dpo=o("PegasusTokenizer"),cpo=o(" or "),FN=a("a"),fpo=o("PegasusTokenizerFast"),mpo=o(" (Pegasus model)"),gpo=l(),Eh=a("li"),Xie=a("strong"),hpo=o("perceiver"),ppo=o(" \u2014 "),TN=a("a"),_po=o("PerceiverTokenizer"),upo=o(" (Perceiver model)"),bpo=l(),Ch=a("li"),zie=a("strong"),vpo=o("phobert"),Fpo=o(" \u2014 "),MN=a("a"),Tpo=o("PhobertTokenizer"),Mpo=o(" (PhoBERT model)"),Epo=l(),wh=a("li"),Wie=a("strong"),Cpo=o("plbart"),wpo=o(" \u2014 "),EN=a("a"),Apo=o("PLBartTokenizer"),Lpo=o(" (PLBart model)"),ypo=l(),Ah=a("li"),Qie=a("strong"),xpo=o("prophetnet"),$po=o(" \u2014 "),CN=a("a"),kpo=o("ProphetNetTokenizer"),Spo=o(" (ProphetNet model)"),Rpo=l(),Ss=a("li"),Hie=a("strong"),Ppo=o("qdqbert"),Bpo=o(" \u2014 "),wN=a("a"),Ipo=o("BertTokenizer"),Npo=o(" or "),AN=a("a"),qpo=o("BertTokenizerFast"),jpo=o(" (QDQBert model)"),Dpo=l(),Lh=a("li"),Uie=a("strong"),Gpo=o("rag"),Opo=o(" \u2014 "),LN=a("a"),Vpo=o("RagTokenizer"),Xpo=o(" (RAG model)"),zpo=l(),Rs=a("li"),Jie=a("strong"),Wpo=o("realm"),Qpo=o(" \u2014 "),yN=a("a"),Hpo=o("RealmTokenizer"),Upo=o(" or "),xN=a("a"),Jpo=o("RealmTokenizerFast"),Ypo=o(" (REALM model)"),Kpo=l(),Ps=a("li"),Yie=a("strong"),Zpo=o("reformer"),e_o=o(" \u2014 "),$N=a("a"),o_o=o("ReformerTokenizer"),r_o=o(" or "),kN=a("a"),t_o=o("ReformerTokenizerFast"),a_o=o(" (Reformer model)"),n_o=l(),Bs=a("li"),Kie=a("strong"),s_o=o("rembert"),l_o=o(" \u2014 "),SN=a("a"),i_o=o("RemBertTokenizer"),d_o=o(" or "),RN=a("a"),c_o=o("RemBertTokenizerFast"),f_o=o(" (RemBERT model)"),m_o=l(),Is=a("li"),Zie=a("strong"),g_o=o("retribert"),h_o=o(" \u2014 "),PN=a("a"),p_o=o("RetriBertTokenizer"),__o=o(" or "),BN=a("a"),u_o=o("RetriBertTokenizerFast"),b_o=o(" (RetriBERT model)"),v_o=l(),Ns=a("li"),ede=a("strong"),F_o=o("roberta"),T_o=o(" \u2014 "),IN=a("a"),M_o=o("RobertaTokenizer"),E_o=o(" or "),NN=a("a"),C_o=o("RobertaTokenizerFast"),w_o=o(" (RoBERTa model)"),A_o=l(),qs=a("li"),ode=a("strong"),L_o=o("roformer"),y_o=o(" \u2014 "),qN=a("a"),x_o=o("RoFormerTokenizer"),$_o=o(" or "),jN=a("a"),k_o=o("RoFormerTokenizerFast"),S_o=o(" (RoFormer model)"),R_o=l(),yh=a("li"),rde=a("strong"),P_o=o("speech_to_text"),B_o=o(" \u2014 "),DN=a("a"),I_o=o("Speech2TextTokenizer"),N_o=o(" (Speech2Text model)"),q_o=l(),xh=a("li"),tde=a("strong"),j_o=o("speech_to_text_2"),D_o=o(" \u2014 "),GN=a("a"),G_o=o("Speech2Text2Tokenizer"),O_o=o(" (Speech2Text2 model)"),V_o=l(),js=a("li"),ade=a("strong"),X_o=o("splinter"),z_o=o(" \u2014 "),ON=a("a"),W_o=o("SplinterTokenizer"),Q_o=o(" or "),VN=a("a"),H_o=o("SplinterTokenizerFast"),U_o=o(" (Splinter model)"),J_o=l(),Ds=a("li"),nde=a("strong"),Y_o=o("squeezebert"),K_o=o(" \u2014 "),XN=a("a"),Z_o=o("SqueezeBertTokenizer"),euo=o(" or "),zN=a("a"),ouo=o("SqueezeBertTokenizerFast"),ruo=o(" (SqueezeBERT model)"),tuo=l(),Gs=a("li"),sde=a("strong"),auo=o("t5"),nuo=o(" \u2014 "),WN=a("a"),suo=o("T5Tokenizer"),luo=o(" or "),QN=a("a"),iuo=o("T5TokenizerFast"),duo=o(" (T5 model)"),cuo=l(),$h=a("li"),lde=a("strong"),fuo=o("tapas"),muo=o(" \u2014 "),HN=a("a"),guo=o("TapasTokenizer"),huo=o(" (TAPAS model)"),puo=l(),kh=a("li"),ide=a("strong"),_uo=o("tapex"),uuo=o(" \u2014 "),UN=a("a"),buo=o("TapexTokenizer"),vuo=o(" (TAPEX model)"),Fuo=l(),Sh=a("li"),dde=a("strong"),Tuo=o("transfo-xl"),Muo=o(" \u2014 "),JN=a("a"),Euo=o("TransfoXLTokenizer"),Cuo=o(" (Transformer-XL model)"),wuo=l(),Os=a("li"),cde=a("strong"),Auo=o("vilt"),Luo=o(" \u2014 "),YN=a("a"),yuo=o("BertTokenizer"),xuo=o(" or "),KN=a("a"),$uo=o("BertTokenizerFast"),kuo=o(" (ViLT model)"),Suo=l(),Vs=a("li"),fde=a("strong"),Ruo=o("visual_bert"),Puo=o(" \u2014 "),ZN=a("a"),Buo=o("BertTokenizer"),Iuo=o(" or "),eq=a("a"),Nuo=o("BertTokenizerFast"),quo=o(" (VisualBERT model)"),juo=l(),Rh=a("li"),mde=a("strong"),Duo=o("wav2vec2"),Guo=o(" \u2014 "),oq=a("a"),Ouo=o("Wav2Vec2CTCTokenizer"),Vuo=o(" (Wav2Vec2 model)"),Xuo=l(),Ph=a("li"),gde=a("strong"),zuo=o("wav2vec2-conformer"),Wuo=o(" \u2014 "),rq=a("a"),Quo=o("Wav2Vec2CTCTokenizer"),Huo=o(" (Wav2Vec2-Conformer model)"),Uuo=l(),Bh=a("li"),hde=a("strong"),Juo=o("wav2vec2_phoneme"),Yuo=o(" \u2014 "),tq=a("a"),Kuo=o("Wav2Vec2PhonemeCTCTokenizer"),Zuo=o(" (Wav2Vec2Phoneme model)"),e2o=l(),Xs=a("li"),pde=a("strong"),o2o=o("xglm"),r2o=o(" \u2014 "),aq=a("a"),t2o=o("XGLMTokenizer"),a2o=o(" or "),nq=a("a"),n2o=o("XGLMTokenizerFast"),s2o=o(" (XGLM model)"),l2o=l(),Ih=a("li"),_de=a("strong"),i2o=o("xlm"),d2o=o(" \u2014 "),sq=a("a"),c2o=o("XLMTokenizer"),f2o=o(" (XLM model)"),m2o=l(),Nh=a("li"),ude=a("strong"),g2o=o("xlm-prophetnet"),h2o=o(" \u2014 "),lq=a("a"),p2o=o("XLMProphetNetTokenizer"),_2o=o(" (XLM-ProphetNet model)"),u2o=l(),zs=a("li"),bde=a("strong"),b2o=o("xlm-roberta"),v2o=o(" \u2014 "),iq=a("a"),F2o=o("XLMRobertaTokenizer"),T2o=o(" or "),dq=a("a"),M2o=o("XLMRobertaTokenizerFast"),E2o=o(" (XLM-RoBERTa model)"),C2o=l(),Ws=a("li"),vde=a("strong"),w2o=o("xlm-roberta-xl"),A2o=o(" \u2014 "),cq=a("a"),L2o=o("RobertaTokenizer"),y2o=o(" or "),fq=a("a"),x2o=o("RobertaTokenizerFast"),$2o=o(" (XLM-RoBERTa-XL model)"),k2o=l(),Qs=a("li"),Fde=a("strong"),S2o=o("xlnet"),R2o=o(" \u2014 "),mq=a("a"),P2o=o("XLNetTokenizer"),B2o=o(" or "),gq=a("a"),I2o=o("XLNetTokenizerFast"),N2o=o(" (XLNet model)"),q2o=l(),Hs=a("li"),Tde=a("strong"),j2o=o("yoso"),D2o=o(" \u2014 "),hq=a("a"),G2o=o("AlbertTokenizer"),O2o=o(" or "),pq=a("a"),V2o=o("AlbertTokenizerFast"),X2o=o(" (YOSO model)"),z2o=l(),F(qh.$$.fragment),W2o=l(),jh=a("div"),F(kL.$$.fragment),Q2o=l(),Mde=a("p"),H2o=o("Register a new tokenizer in this mapping."),cze=l(),Di=a("h2"),Dh=a("a"),Ede=a("span"),F(SL.$$.fragment),U2o=l(),Cde=a("span"),J2o=o("AutoFeatureExtractor"),fze=l(),xo=a("div"),F(RL.$$.fragment),Y2o=l(),PL=a("p"),K2o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_q=a("a"),Z2o=o("AutoFeatureExtractor.from_pretrained()"),e1o=o(" class method."),o1o=l(),BL=a("p"),r1o=o("This class cannot be instantiated directly using "),wde=a("code"),t1o=o("__init__()"),a1o=o(" (throws an error)."),n1o=l(),Ue=a("div"),F(IL.$$.fragment),s1o=l(),Ade=a("p"),l1o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),i1o=l(),Ba=a("p"),d1o=o("The feature extractor class to instantiate is selected based on the "),Lde=a("code"),c1o=o("model_type"),f1o=o(` property of the config object
(either passed as an argument or loaded from `),yde=a("code"),m1o=o("pretrained_model_name_or_path"),g1o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),xde=a("code"),h1o=o("pretrained_model_name_or_path"),p1o=o(":"),_1o=l(),J=a("ul"),Gh=a("li"),$de=a("strong"),u1o=o("beit"),b1o=o(" \u2014 "),uq=a("a"),v1o=o("BeitFeatureExtractor"),F1o=o(" (BEiT model)"),T1o=l(),Oh=a("li"),kde=a("strong"),M1o=o("clip"),E1o=o(" \u2014 "),bq=a("a"),C1o=o("CLIPFeatureExtractor"),w1o=o(" (CLIP model)"),A1o=l(),Vh=a("li"),Sde=a("strong"),L1o=o("convnext"),y1o=o(" \u2014 "),vq=a("a"),x1o=o("ConvNextFeatureExtractor"),$1o=o(" (ConvNeXT model)"),k1o=l(),Xh=a("li"),Rde=a("strong"),S1o=o("cvt"),R1o=o(" \u2014 "),Fq=a("a"),P1o=o("ConvNextFeatureExtractor"),B1o=o(" (CvT model)"),I1o=l(),zh=a("li"),Pde=a("strong"),N1o=o("data2vec-audio"),q1o=o(" \u2014 "),Tq=a("a"),j1o=o("Wav2Vec2FeatureExtractor"),D1o=o(" (Data2VecAudio model)"),G1o=l(),Wh=a("li"),Bde=a("strong"),O1o=o("data2vec-vision"),V1o=o(" \u2014 "),Mq=a("a"),X1o=o("BeitFeatureExtractor"),z1o=o(" (Data2VecVision model)"),W1o=l(),Qh=a("li"),Ide=a("strong"),Q1o=o("deit"),H1o=o(" \u2014 "),Eq=a("a"),U1o=o("DeiTFeatureExtractor"),J1o=o(" (DeiT model)"),Y1o=l(),Hh=a("li"),Nde=a("strong"),K1o=o("detr"),Z1o=o(" \u2014 "),Cq=a("a"),ebo=o("DetrFeatureExtractor"),obo=o(" (DETR model)"),rbo=l(),Uh=a("li"),qde=a("strong"),tbo=o("dpt"),abo=o(" \u2014 "),wq=a("a"),nbo=o("DPTFeatureExtractor"),sbo=o(" (DPT model)"),lbo=l(),Jh=a("li"),jde=a("strong"),ibo=o("flava"),dbo=o(" \u2014 "),Aq=a("a"),cbo=o("FlavaFeatureExtractor"),fbo=o(" (FLAVA model)"),mbo=l(),Yh=a("li"),Dde=a("strong"),gbo=o("glpn"),hbo=o(" \u2014 "),Lq=a("a"),pbo=o("GLPNFeatureExtractor"),_bo=o(" (GLPN model)"),ubo=l(),Kh=a("li"),Gde=a("strong"),bbo=o("groupvit"),vbo=o(" \u2014 "),yq=a("a"),Fbo=o("CLIPFeatureExtractor"),Tbo=o(" (GroupViT model)"),Mbo=l(),Zh=a("li"),Ode=a("strong"),Ebo=o("hubert"),Cbo=o(" \u2014 "),xq=a("a"),wbo=o("Wav2Vec2FeatureExtractor"),Abo=o(" (Hubert model)"),Lbo=l(),ep=a("li"),Vde=a("strong"),ybo=o("imagegpt"),xbo=o(" \u2014 "),$q=a("a"),$bo=o("ImageGPTFeatureExtractor"),kbo=o(" (ImageGPT model)"),Sbo=l(),op=a("li"),Xde=a("strong"),Rbo=o("layoutlmv2"),Pbo=o(" \u2014 "),kq=a("a"),Bbo=o("LayoutLMv2FeatureExtractor"),Ibo=o(" (LayoutLMv2 model)"),Nbo=l(),rp=a("li"),zde=a("strong"),qbo=o("layoutlmv3"),jbo=o(" \u2014 "),Sq=a("a"),Dbo=o("LayoutLMv3FeatureExtractor"),Gbo=o(" (LayoutLMv3 model)"),Obo=l(),tp=a("li"),Wde=a("strong"),Vbo=o("levit"),Xbo=o(" \u2014 "),Rq=a("a"),zbo=o("LevitFeatureExtractor"),Wbo=o(" (LeViT model)"),Qbo=l(),ap=a("li"),Qde=a("strong"),Hbo=o("maskformer"),Ubo=o(" \u2014 "),Pq=a("a"),Jbo=o("MaskFormerFeatureExtractor"),Ybo=o(" (MaskFormer model)"),Kbo=l(),np=a("li"),Hde=a("strong"),Zbo=o("mctct"),evo=o(" \u2014 "),Bq=a("a"),ovo=o("MCTCTFeatureExtractor"),rvo=o(" (M-CTC-T model)"),tvo=l(),sp=a("li"),Ude=a("strong"),avo=o("mobilevit"),nvo=o(" \u2014 "),Iq=a("a"),svo=o("MobileViTFeatureExtractor"),lvo=o(" (MobileViT model)"),ivo=l(),lp=a("li"),Jde=a("strong"),dvo=o("owlvit"),cvo=o(" \u2014 "),Nq=a("a"),fvo=o("OwlViTFeatureExtractor"),mvo=o(" (OWL-ViT model)"),gvo=l(),ip=a("li"),Yde=a("strong"),hvo=o("perceiver"),pvo=o(" \u2014 "),qq=a("a"),_vo=o("PerceiverFeatureExtractor"),uvo=o(" (Perceiver model)"),bvo=l(),dp=a("li"),Kde=a("strong"),vvo=o("poolformer"),Fvo=o(" \u2014 "),jq=a("a"),Tvo=o("PoolFormerFeatureExtractor"),Mvo=o(" (PoolFormer model)"),Evo=l(),cp=a("li"),Zde=a("strong"),Cvo=o("regnet"),wvo=o(" \u2014 "),Dq=a("a"),Avo=o("ConvNextFeatureExtractor"),Lvo=o(" (RegNet model)"),yvo=l(),fp=a("li"),ece=a("strong"),xvo=o("resnet"),$vo=o(" \u2014 "),Gq=a("a"),kvo=o("ConvNextFeatureExtractor"),Svo=o(" (ResNet model)"),Rvo=l(),mp=a("li"),oce=a("strong"),Pvo=o("segformer"),Bvo=o(" \u2014 "),Oq=a("a"),Ivo=o("SegformerFeatureExtractor"),Nvo=o(" (SegFormer model)"),qvo=l(),gp=a("li"),rce=a("strong"),jvo=o("speech_to_text"),Dvo=o(" \u2014 "),Vq=a("a"),Gvo=o("Speech2TextFeatureExtractor"),Ovo=o(" (Speech2Text model)"),Vvo=l(),hp=a("li"),tce=a("strong"),Xvo=o("swin"),zvo=o(" \u2014 "),Xq=a("a"),Wvo=o("ViTFeatureExtractor"),Qvo=o(" (Swin Transformer model)"),Hvo=l(),pp=a("li"),ace=a("strong"),Uvo=o("van"),Jvo=o(" \u2014 "),zq=a("a"),Yvo=o("ConvNextFeatureExtractor"),Kvo=o(" (VAN model)"),Zvo=l(),_p=a("li"),nce=a("strong"),eFo=o("vilt"),oFo=o(" \u2014 "),Wq=a("a"),rFo=o("ViltFeatureExtractor"),tFo=o(" (ViLT model)"),aFo=l(),up=a("li"),sce=a("strong"),nFo=o("vit"),sFo=o(" \u2014 "),Qq=a("a"),lFo=o("ViTFeatureExtractor"),iFo=o(" (ViT model)"),dFo=l(),bp=a("li"),lce=a("strong"),cFo=o("vit_mae"),fFo=o(" \u2014 "),Hq=a("a"),mFo=o("ViTFeatureExtractor"),gFo=o(" (ViTMAE model)"),hFo=l(),vp=a("li"),ice=a("strong"),pFo=o("wav2vec2"),_Fo=o(" \u2014 "),Uq=a("a"),uFo=o("Wav2Vec2FeatureExtractor"),bFo=o(" (Wav2Vec2 model)"),vFo=l(),Fp=a("li"),dce=a("strong"),FFo=o("wav2vec2-conformer"),TFo=o(" \u2014 "),Jq=a("a"),MFo=o("Wav2Vec2FeatureExtractor"),EFo=o(" (Wav2Vec2-Conformer model)"),CFo=l(),Tp=a("li"),cce=a("strong"),wFo=o("yolos"),AFo=o(" \u2014 "),Yq=a("a"),LFo=o("YolosFeatureExtractor"),yFo=o(" (YOLOS model)"),xFo=l(),F(Mp.$$.fragment),$Fo=l(),F(Ep.$$.fragment),kFo=l(),Cp=a("div"),F(NL.$$.fragment),SFo=l(),fce=a("p"),RFo=o("Register a new feature extractor for this class."),mze=l(),Gi=a("h2"),wp=a("a"),mce=a("span"),F(qL.$$.fragment),PFo=l(),gce=a("span"),BFo=o("AutoProcessor"),gze=l(),$o=a("div"),F(jL.$$.fragment),IFo=l(),DL=a("p"),NFo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Kq=a("a"),qFo=o("AutoProcessor.from_pretrained()"),jFo=o(" class method."),DFo=l(),GL=a("p"),GFo=o("This class cannot be instantiated directly using "),hce=a("code"),OFo=o("__init__()"),VFo=o(" (throws an error)."),XFo=l(),Je=a("div"),F(OL.$$.fragment),zFo=l(),pce=a("p"),WFo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),QFo=l(),Oi=a("p"),HFo=o("The processor class to instantiate is selected based on the "),_ce=a("code"),UFo=o("model_type"),JFo=o(` property of the config object (either
passed as an argument or loaded from `),uce=a("code"),YFo=o("pretrained_model_name_or_path"),KFo=o(" if possible):"),ZFo=l(),fe=a("ul"),Ap=a("li"),bce=a("strong"),e6o=o("clip"),o6o=o(" \u2014 "),Zq=a("a"),r6o=o("CLIPProcessor"),t6o=o(" (CLIP model)"),a6o=l(),Lp=a("li"),vce=a("strong"),n6o=o("flava"),s6o=o(" \u2014 "),ej=a("a"),l6o=o("FlavaProcessor"),i6o=o(" (FLAVA model)"),d6o=l(),yp=a("li"),Fce=a("strong"),c6o=o("groupvit"),f6o=o(" \u2014 "),oj=a("a"),m6o=o("CLIPProcessor"),g6o=o(" (GroupViT model)"),h6o=l(),xp=a("li"),Tce=a("strong"),p6o=o("layoutlmv2"),_6o=o(" \u2014 "),rj=a("a"),u6o=o("LayoutLMv2Processor"),b6o=o(" (LayoutLMv2 model)"),v6o=l(),$p=a("li"),Mce=a("strong"),F6o=o("layoutlmv3"),T6o=o(" \u2014 "),tj=a("a"),M6o=o("LayoutLMv3Processor"),E6o=o(" (LayoutLMv3 model)"),C6o=l(),kp=a("li"),Ece=a("strong"),w6o=o("layoutxlm"),A6o=o(" \u2014 "),aj=a("a"),L6o=o("LayoutXLMProcessor"),y6o=o(" (LayoutXLM model)"),x6o=l(),Sp=a("li"),Cce=a("strong"),$6o=o("owlvit"),k6o=o(" \u2014 "),nj=a("a"),S6o=o("OwlViTProcessor"),R6o=o(" (OWL-ViT model)"),P6o=l(),Rp=a("li"),wce=a("strong"),B6o=o("sew"),I6o=o(" \u2014 "),sj=a("a"),N6o=o("Wav2Vec2Processor"),q6o=o(" (SEW model)"),j6o=l(),Pp=a("li"),Ace=a("strong"),D6o=o("sew-d"),G6o=o(" \u2014 "),lj=a("a"),O6o=o("Wav2Vec2Processor"),V6o=o(" (SEW-D model)"),X6o=l(),Bp=a("li"),Lce=a("strong"),z6o=o("speech_to_text"),W6o=o(" \u2014 "),ij=a("a"),Q6o=o("Speech2TextProcessor"),H6o=o(" (Speech2Text model)"),U6o=l(),Ip=a("li"),yce=a("strong"),J6o=o("speech_to_text_2"),Y6o=o(" \u2014 "),dj=a("a"),K6o=o("Speech2Text2Processor"),Z6o=o(" (Speech2Text2 model)"),eTo=l(),Np=a("li"),xce=a("strong"),oTo=o("trocr"),rTo=o(" \u2014 "),cj=a("a"),tTo=o("TrOCRProcessor"),aTo=o(" (TrOCR model)"),nTo=l(),qp=a("li"),$ce=a("strong"),sTo=o("unispeech"),lTo=o(" \u2014 "),fj=a("a"),iTo=o("Wav2Vec2Processor"),dTo=o(" (UniSpeech model)"),cTo=l(),jp=a("li"),kce=a("strong"),fTo=o("unispeech-sat"),mTo=o(" \u2014 "),mj=a("a"),gTo=o("Wav2Vec2Processor"),hTo=o(" (UniSpeechSat model)"),pTo=l(),Dp=a("li"),Sce=a("strong"),_To=o("vilt"),uTo=o(" \u2014 "),gj=a("a"),bTo=o("ViltProcessor"),vTo=o(" (ViLT model)"),FTo=l(),Gp=a("li"),Rce=a("strong"),TTo=o("vision-text-dual-encoder"),MTo=o(" \u2014 "),hj=a("a"),ETo=o("VisionTextDualEncoderProcessor"),CTo=o(" (VisionTextDualEncoder model)"),wTo=l(),Op=a("li"),Pce=a("strong"),ATo=o("wav2vec2"),LTo=o(" \u2014 "),pj=a("a"),yTo=o("Wav2Vec2Processor"),xTo=o(" (Wav2Vec2 model)"),$To=l(),Vp=a("li"),Bce=a("strong"),kTo=o("wav2vec2-conformer"),STo=o(" \u2014 "),_j=a("a"),RTo=o("Wav2Vec2Processor"),PTo=o(" (Wav2Vec2-Conformer model)"),BTo=l(),Xp=a("li"),Ice=a("strong"),ITo=o("wavlm"),NTo=o(" \u2014 "),uj=a("a"),qTo=o("Wav2Vec2Processor"),jTo=o(" (WavLM model)"),DTo=l(),F(zp.$$.fragment),GTo=l(),F(Wp.$$.fragment),OTo=l(),Qp=a("div"),F(VL.$$.fragment),VTo=l(),Nce=a("p"),XTo=o("Register a new processor for this class."),hze=l(),Vi=a("h2"),Hp=a("a"),qce=a("span"),F(XL.$$.fragment),zTo=l(),jce=a("span"),WTo=o("AutoModel"),pze=l(),ko=a("div"),F(zL.$$.fragment),QTo=l(),Xi=a("p"),HTo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bj=a("a"),UTo=o("from_pretrained()"),JTo=o(" class method or the "),vj=a("a"),YTo=o("from_config()"),KTo=o(` class
method.`),ZTo=l(),WL=a("p"),e7o=o("This class cannot be instantiated directly using "),Dce=a("code"),o7o=o("__init__()"),r7o=o(" (throws an error)."),t7o=l(),it=a("div"),F(QL.$$.fragment),a7o=l(),Gce=a("p"),n7o=o("Instantiates one of the base model classes of the library from a configuration."),s7o=l(),zi=a("p"),l7o=o(`Note:
Loading a model from its configuration file does `),Oce=a("strong"),i7o=o("not"),d7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=a("a"),c7o=o("from_pretrained()"),f7o=o(" to load the model weights."),m7o=l(),F(Up.$$.fragment),g7o=l(),Ye=a("div"),F(HL.$$.fragment),h7o=l(),Vce=a("p"),p7o=o("Instantiate one of the base model classes of the library from a pretrained model."),_7o=l(),Ia=a("p"),u7o=o("The model class to instantiate is selected based on the "),Xce=a("code"),b7o=o("model_type"),v7o=o(` property of the config object (either
passed as an argument or loaded from `),zce=a("code"),F7o=o("pretrained_model_name_or_path"),T7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wce=a("code"),M7o=o("pretrained_model_name_or_path"),E7o=o(":"),C7o=l(),y=a("ul"),Jp=a("li"),Qce=a("strong"),w7o=o("albert"),A7o=o(" \u2014 "),Tj=a("a"),L7o=o("AlbertModel"),y7o=o(" (ALBERT model)"),x7o=l(),Yp=a("li"),Hce=a("strong"),$7o=o("bart"),k7o=o(" \u2014 "),Mj=a("a"),S7o=o("BartModel"),R7o=o(" (BART model)"),P7o=l(),Kp=a("li"),Uce=a("strong"),B7o=o("beit"),I7o=o(" \u2014 "),Ej=a("a"),N7o=o("BeitModel"),q7o=o(" (BEiT model)"),j7o=l(),Zp=a("li"),Jce=a("strong"),D7o=o("bert"),G7o=o(" \u2014 "),Cj=a("a"),O7o=o("BertModel"),V7o=o(" (BERT model)"),X7o=l(),e_=a("li"),Yce=a("strong"),z7o=o("bert-generation"),W7o=o(" \u2014 "),wj=a("a"),Q7o=o("BertGenerationEncoder"),H7o=o(" (Bert Generation model)"),U7o=l(),o_=a("li"),Kce=a("strong"),J7o=o("big_bird"),Y7o=o(" \u2014 "),Aj=a("a"),K7o=o("BigBirdModel"),Z7o=o(" (BigBird model)"),e8o=l(),r_=a("li"),Zce=a("strong"),o8o=o("bigbird_pegasus"),r8o=o(" \u2014 "),Lj=a("a"),t8o=o("BigBirdPegasusModel"),a8o=o(" (BigBird-Pegasus model)"),n8o=l(),t_=a("li"),efe=a("strong"),s8o=o("blenderbot"),l8o=o(" \u2014 "),yj=a("a"),i8o=o("BlenderbotModel"),d8o=o(" (Blenderbot model)"),c8o=l(),a_=a("li"),ofe=a("strong"),f8o=o("blenderbot-small"),m8o=o(" \u2014 "),xj=a("a"),g8o=o("BlenderbotSmallModel"),h8o=o(" (BlenderbotSmall model)"),p8o=l(),n_=a("li"),rfe=a("strong"),_8o=o("bloom"),u8o=o(" \u2014 "),$j=a("a"),b8o=o("BloomModel"),v8o=o(" (BLOOM model)"),F8o=l(),s_=a("li"),tfe=a("strong"),T8o=o("camembert"),M8o=o(" \u2014 "),kj=a("a"),E8o=o("CamembertModel"),C8o=o(" (CamemBERT model)"),w8o=l(),l_=a("li"),afe=a("strong"),A8o=o("canine"),L8o=o(" \u2014 "),Sj=a("a"),y8o=o("CanineModel"),x8o=o(" (CANINE model)"),$8o=l(),i_=a("li"),nfe=a("strong"),k8o=o("clip"),S8o=o(" \u2014 "),Rj=a("a"),R8o=o("CLIPModel"),P8o=o(" (CLIP model)"),B8o=l(),d_=a("li"),sfe=a("strong"),I8o=o("codegen"),N8o=o(" \u2014 "),Pj=a("a"),q8o=o("CodeGenModel"),j8o=o(" (CodeGen model)"),D8o=l(),c_=a("li"),lfe=a("strong"),G8o=o("convbert"),O8o=o(" \u2014 "),Bj=a("a"),V8o=o("ConvBertModel"),X8o=o(" (ConvBERT model)"),z8o=l(),f_=a("li"),ife=a("strong"),W8o=o("convnext"),Q8o=o(" \u2014 "),Ij=a("a"),H8o=o("ConvNextModel"),U8o=o(" (ConvNeXT model)"),J8o=l(),m_=a("li"),dfe=a("strong"),Y8o=o("ctrl"),K8o=o(" \u2014 "),Nj=a("a"),Z8o=o("CTRLModel"),eMo=o(" (CTRL model)"),oMo=l(),g_=a("li"),cfe=a("strong"),rMo=o("cvt"),tMo=o(" \u2014 "),qj=a("a"),aMo=o("CvtModel"),nMo=o(" (CvT model)"),sMo=l(),h_=a("li"),ffe=a("strong"),lMo=o("data2vec-audio"),iMo=o(" \u2014 "),jj=a("a"),dMo=o("Data2VecAudioModel"),cMo=o(" (Data2VecAudio model)"),fMo=l(),p_=a("li"),mfe=a("strong"),mMo=o("data2vec-text"),gMo=o(" \u2014 "),Dj=a("a"),hMo=o("Data2VecTextModel"),pMo=o(" (Data2VecText model)"),_Mo=l(),__=a("li"),gfe=a("strong"),uMo=o("data2vec-vision"),bMo=o(" \u2014 "),Gj=a("a"),vMo=o("Data2VecVisionModel"),FMo=o(" (Data2VecVision model)"),TMo=l(),u_=a("li"),hfe=a("strong"),MMo=o("deberta"),EMo=o(" \u2014 "),Oj=a("a"),CMo=o("DebertaModel"),wMo=o(" (DeBERTa model)"),AMo=l(),b_=a("li"),pfe=a("strong"),LMo=o("deberta-v2"),yMo=o(" \u2014 "),Vj=a("a"),xMo=o("DebertaV2Model"),$Mo=o(" (DeBERTa-v2 model)"),kMo=l(),v_=a("li"),_fe=a("strong"),SMo=o("decision_transformer"),RMo=o(" \u2014 "),Xj=a("a"),PMo=o("DecisionTransformerModel"),BMo=o(" (Decision Transformer model)"),IMo=l(),F_=a("li"),ufe=a("strong"),NMo=o("deit"),qMo=o(" \u2014 "),zj=a("a"),jMo=o("DeiTModel"),DMo=o(" (DeiT model)"),GMo=l(),T_=a("li"),bfe=a("strong"),OMo=o("detr"),VMo=o(" \u2014 "),Wj=a("a"),XMo=o("DetrModel"),zMo=o(" (DETR model)"),WMo=l(),M_=a("li"),vfe=a("strong"),QMo=o("distilbert"),HMo=o(" \u2014 "),Qj=a("a"),UMo=o("DistilBertModel"),JMo=o(" (DistilBERT model)"),YMo=l(),E_=a("li"),Ffe=a("strong"),KMo=o("dpr"),ZMo=o(" \u2014 "),Hj=a("a"),e4o=o("DPRQuestionEncoder"),o4o=o(" (DPR model)"),r4o=l(),C_=a("li"),Tfe=a("strong"),t4o=o("dpt"),a4o=o(" \u2014 "),Uj=a("a"),n4o=o("DPTModel"),s4o=o(" (DPT model)"),l4o=l(),w_=a("li"),Mfe=a("strong"),i4o=o("electra"),d4o=o(" \u2014 "),Jj=a("a"),c4o=o("ElectraModel"),f4o=o(" (ELECTRA model)"),m4o=l(),A_=a("li"),Efe=a("strong"),g4o=o("flaubert"),h4o=o(" \u2014 "),Yj=a("a"),p4o=o("FlaubertModel"),_4o=o(" (FlauBERT model)"),u4o=l(),L_=a("li"),Cfe=a("strong"),b4o=o("flava"),v4o=o(" \u2014 "),Kj=a("a"),F4o=o("FlavaModel"),T4o=o(" (FLAVA model)"),M4o=l(),y_=a("li"),wfe=a("strong"),E4o=o("fnet"),C4o=o(" \u2014 "),Zj=a("a"),w4o=o("FNetModel"),A4o=o(" (FNet model)"),L4o=l(),x_=a("li"),Afe=a("strong"),y4o=o("fsmt"),x4o=o(" \u2014 "),eD=a("a"),$4o=o("FSMTModel"),k4o=o(" (FairSeq Machine-Translation model)"),S4o=l(),Us=a("li"),Lfe=a("strong"),R4o=o("funnel"),P4o=o(" \u2014 "),oD=a("a"),B4o=o("FunnelModel"),I4o=o(" or "),rD=a("a"),N4o=o("FunnelBaseModel"),q4o=o(" (Funnel Transformer model)"),j4o=l(),$_=a("li"),yfe=a("strong"),D4o=o("glpn"),G4o=o(" \u2014 "),tD=a("a"),O4o=o("GLPNModel"),V4o=o(" (GLPN model)"),X4o=l(),k_=a("li"),xfe=a("strong"),z4o=o("gpt2"),W4o=o(" \u2014 "),aD=a("a"),Q4o=o("GPT2Model"),H4o=o(" (OpenAI GPT-2 model)"),U4o=l(),S_=a("li"),$fe=a("strong"),J4o=o("gpt_neo"),Y4o=o(" \u2014 "),nD=a("a"),K4o=o("GPTNeoModel"),Z4o=o(" (GPT Neo model)"),eEo=l(),R_=a("li"),kfe=a("strong"),oEo=o("gpt_neox"),rEo=o(" \u2014 "),sD=a("a"),tEo=o("GPTNeoXModel"),aEo=o(" (GPT NeoX model)"),nEo=l(),P_=a("li"),Sfe=a("strong"),sEo=o("gptj"),lEo=o(" \u2014 "),lD=a("a"),iEo=o("GPTJModel"),dEo=o(" (GPT-J model)"),cEo=l(),B_=a("li"),Rfe=a("strong"),fEo=o("groupvit"),mEo=o(" \u2014 "),iD=a("a"),gEo=o("GroupViTModel"),hEo=o(" (GroupViT model)"),pEo=l(),I_=a("li"),Pfe=a("strong"),_Eo=o("hubert"),uEo=o(" \u2014 "),dD=a("a"),bEo=o("HubertModel"),vEo=o(" (Hubert model)"),FEo=l(),N_=a("li"),Bfe=a("strong"),TEo=o("ibert"),MEo=o(" \u2014 "),cD=a("a"),EEo=o("IBertModel"),CEo=o(" (I-BERT model)"),wEo=l(),q_=a("li"),Ife=a("strong"),AEo=o("imagegpt"),LEo=o(" \u2014 "),fD=a("a"),yEo=o("ImageGPTModel"),xEo=o(" (ImageGPT model)"),$Eo=l(),j_=a("li"),Nfe=a("strong"),kEo=o("jukebox"),SEo=o(" \u2014 "),qfe=a("code"),REo=o("JukeboxModel"),PEo=o(" (Jukebox model)"),BEo=l(),D_=a("li"),jfe=a("strong"),IEo=o("layoutlm"),NEo=o(" \u2014 "),mD=a("a"),qEo=o("LayoutLMModel"),jEo=o(" (LayoutLM model)"),DEo=l(),G_=a("li"),Dfe=a("strong"),GEo=o("layoutlmv2"),OEo=o(" \u2014 "),gD=a("a"),VEo=o("LayoutLMv2Model"),XEo=o(" (LayoutLMv2 model)"),zEo=l(),O_=a("li"),Gfe=a("strong"),WEo=o("layoutlmv3"),QEo=o(" \u2014 "),hD=a("a"),HEo=o("LayoutLMv3Model"),UEo=o(" (LayoutLMv3 model)"),JEo=l(),V_=a("li"),Ofe=a("strong"),YEo=o("led"),KEo=o(" \u2014 "),pD=a("a"),ZEo=o("LEDModel"),eCo=o(" (LED model)"),oCo=l(),X_=a("li"),Vfe=a("strong"),rCo=o("levit"),tCo=o(" \u2014 "),_D=a("a"),aCo=o("LevitModel"),nCo=o(" (LeViT model)"),sCo=l(),z_=a("li"),Xfe=a("strong"),lCo=o("longformer"),iCo=o(" \u2014 "),uD=a("a"),dCo=o("LongformerModel"),cCo=o(" (Longformer model)"),fCo=l(),W_=a("li"),zfe=a("strong"),mCo=o("longt5"),gCo=o(" \u2014 "),bD=a("a"),hCo=o("LongT5Model"),pCo=o(" (LongT5 model)"),_Co=l(),Q_=a("li"),Wfe=a("strong"),uCo=o("luke"),bCo=o(" \u2014 "),vD=a("a"),vCo=o("LukeModel"),FCo=o(" (LUKE model)"),TCo=l(),H_=a("li"),Qfe=a("strong"),MCo=o("lxmert"),ECo=o(" \u2014 "),FD=a("a"),CCo=o("LxmertModel"),wCo=o(" (LXMERT model)"),ACo=l(),U_=a("li"),Hfe=a("strong"),LCo=o("m2m_100"),yCo=o(" \u2014 "),TD=a("a"),xCo=o("M2M100Model"),$Co=o(" (M2M100 model)"),kCo=l(),J_=a("li"),Ufe=a("strong"),SCo=o("marian"),RCo=o(" \u2014 "),MD=a("a"),PCo=o("MarianModel"),BCo=o(" (Marian model)"),ICo=l(),Y_=a("li"),Jfe=a("strong"),NCo=o("maskformer"),qCo=o(" \u2014 "),ED=a("a"),jCo=o("MaskFormerModel"),DCo=o(" (MaskFormer model)"),GCo=l(),K_=a("li"),Yfe=a("strong"),OCo=o("mbart"),VCo=o(" \u2014 "),CD=a("a"),XCo=o("MBartModel"),zCo=o(" (mBART model)"),WCo=l(),Z_=a("li"),Kfe=a("strong"),QCo=o("mctct"),HCo=o(" \u2014 "),wD=a("a"),UCo=o("MCTCTModel"),JCo=o(" (M-CTC-T model)"),YCo=l(),eu=a("li"),Zfe=a("strong"),KCo=o("megatron-bert"),ZCo=o(" \u2014 "),AD=a("a"),e5o=o("MegatronBertModel"),o5o=o(" (Megatron-BERT model)"),r5o=l(),ou=a("li"),eme=a("strong"),t5o=o("mobilebert"),a5o=o(" \u2014 "),LD=a("a"),n5o=o("MobileBertModel"),s5o=o(" (MobileBERT model)"),l5o=l(),ru=a("li"),ome=a("strong"),i5o=o("mobilevit"),d5o=o(" \u2014 "),yD=a("a"),c5o=o("MobileViTModel"),f5o=o(" (MobileViT model)"),m5o=l(),tu=a("li"),rme=a("strong"),g5o=o("mpnet"),h5o=o(" \u2014 "),xD=a("a"),p5o=o("MPNetModel"),_5o=o(" (MPNet model)"),u5o=l(),au=a("li"),tme=a("strong"),b5o=o("mt5"),v5o=o(" \u2014 "),$D=a("a"),F5o=o("MT5Model"),T5o=o(" (MT5 model)"),M5o=l(),nu=a("li"),ame=a("strong"),E5o=o("mvp"),C5o=o(" \u2014 "),kD=a("a"),w5o=o("MvpModel"),A5o=o(" (MVP model)"),L5o=l(),su=a("li"),nme=a("strong"),y5o=o("nezha"),x5o=o(" \u2014 "),SD=a("a"),$5o=o("NezhaModel"),k5o=o(" (Nezha model)"),S5o=l(),lu=a("li"),sme=a("strong"),R5o=o("nllb"),P5o=o(" \u2014 "),RD=a("a"),B5o=o("M2M100Model"),I5o=o(" (NLLB model)"),N5o=l(),iu=a("li"),lme=a("strong"),q5o=o("nystromformer"),j5o=o(" \u2014 "),PD=a("a"),D5o=o("NystromformerModel"),G5o=o(" (Nystr\xF6mformer model)"),O5o=l(),du=a("li"),ime=a("strong"),V5o=o("openai-gpt"),X5o=o(" \u2014 "),BD=a("a"),z5o=o("OpenAIGPTModel"),W5o=o(" (OpenAI GPT model)"),Q5o=l(),cu=a("li"),dme=a("strong"),H5o=o("opt"),U5o=o(" \u2014 "),ID=a("a"),J5o=o("OPTModel"),Y5o=o(" (OPT model)"),K5o=l(),fu=a("li"),cme=a("strong"),Z5o=o("owlvit"),e3o=o(" \u2014 "),ND=a("a"),o3o=o("OwlViTModel"),r3o=o(" (OWL-ViT model)"),t3o=l(),mu=a("li"),fme=a("strong"),a3o=o("pegasus"),n3o=o(" \u2014 "),qD=a("a"),s3o=o("PegasusModel"),l3o=o(" (Pegasus model)"),i3o=l(),gu=a("li"),mme=a("strong"),d3o=o("perceiver"),c3o=o(" \u2014 "),jD=a("a"),f3o=o("PerceiverModel"),m3o=o(" (Perceiver model)"),g3o=l(),hu=a("li"),gme=a("strong"),h3o=o("plbart"),p3o=o(" \u2014 "),DD=a("a"),_3o=o("PLBartModel"),u3o=o(" (PLBart model)"),b3o=l(),pu=a("li"),hme=a("strong"),v3o=o("poolformer"),F3o=o(" \u2014 "),GD=a("a"),T3o=o("PoolFormerModel"),M3o=o(" (PoolFormer model)"),E3o=l(),_u=a("li"),pme=a("strong"),C3o=o("prophetnet"),w3o=o(" \u2014 "),OD=a("a"),A3o=o("ProphetNetModel"),L3o=o(" (ProphetNet model)"),y3o=l(),uu=a("li"),_me=a("strong"),x3o=o("qdqbert"),$3o=o(" \u2014 "),VD=a("a"),k3o=o("QDQBertModel"),S3o=o(" (QDQBert model)"),R3o=l(),bu=a("li"),ume=a("strong"),P3o=o("reformer"),B3o=o(" \u2014 "),XD=a("a"),I3o=o("ReformerModel"),N3o=o(" (Reformer model)"),q3o=l(),vu=a("li"),bme=a("strong"),j3o=o("regnet"),D3o=o(" \u2014 "),zD=a("a"),G3o=o("RegNetModel"),O3o=o(" (RegNet model)"),V3o=l(),Fu=a("li"),vme=a("strong"),X3o=o("rembert"),z3o=o(" \u2014 "),WD=a("a"),W3o=o("RemBertModel"),Q3o=o(" (RemBERT model)"),H3o=l(),Tu=a("li"),Fme=a("strong"),U3o=o("resnet"),J3o=o(" \u2014 "),QD=a("a"),Y3o=o("ResNetModel"),K3o=o(" (ResNet model)"),Z3o=l(),Mu=a("li"),Tme=a("strong"),e0o=o("retribert"),o0o=o(" \u2014 "),HD=a("a"),r0o=o("RetriBertModel"),t0o=o(" (RetriBERT model)"),a0o=l(),Eu=a("li"),Mme=a("strong"),n0o=o("roberta"),s0o=o(" \u2014 "),UD=a("a"),l0o=o("RobertaModel"),i0o=o(" (RoBERTa model)"),d0o=l(),Cu=a("li"),Eme=a("strong"),c0o=o("roformer"),f0o=o(" \u2014 "),JD=a("a"),m0o=o("RoFormerModel"),g0o=o(" (RoFormer model)"),h0o=l(),wu=a("li"),Cme=a("strong"),p0o=o("segformer"),_0o=o(" \u2014 "),YD=a("a"),u0o=o("SegformerModel"),b0o=o(" (SegFormer model)"),v0o=l(),Au=a("li"),wme=a("strong"),F0o=o("sew"),T0o=o(" \u2014 "),KD=a("a"),M0o=o("SEWModel"),E0o=o(" (SEW model)"),C0o=l(),Lu=a("li"),Ame=a("strong"),w0o=o("sew-d"),A0o=o(" \u2014 "),ZD=a("a"),L0o=o("SEWDModel"),y0o=o(" (SEW-D model)"),x0o=l(),yu=a("li"),Lme=a("strong"),$0o=o("speech_to_text"),k0o=o(" \u2014 "),eG=a("a"),S0o=o("Speech2TextModel"),R0o=o(" (Speech2Text model)"),P0o=l(),xu=a("li"),yme=a("strong"),B0o=o("splinter"),I0o=o(" \u2014 "),oG=a("a"),N0o=o("SplinterModel"),q0o=o(" (Splinter model)"),j0o=l(),$u=a("li"),xme=a("strong"),D0o=o("squeezebert"),G0o=o(" \u2014 "),rG=a("a"),O0o=o("SqueezeBertModel"),V0o=o(" (SqueezeBERT model)"),X0o=l(),ku=a("li"),$me=a("strong"),z0o=o("swin"),W0o=o(" \u2014 "),tG=a("a"),Q0o=o("SwinModel"),H0o=o(" (Swin Transformer model)"),U0o=l(),Su=a("li"),kme=a("strong"),J0o=o("t5"),Y0o=o(" \u2014 "),aG=a("a"),K0o=o("T5Model"),Z0o=o(" (T5 model)"),ewo=l(),Ru=a("li"),Sme=a("strong"),owo=o("tapas"),rwo=o(" \u2014 "),nG=a("a"),two=o("TapasModel"),awo=o(" (TAPAS model)"),nwo=l(),Pu=a("li"),Rme=a("strong"),swo=o("trajectory_transformer"),lwo=o(" \u2014 "),sG=a("a"),iwo=o("TrajectoryTransformerModel"),dwo=o(" (Trajectory Transformer model)"),cwo=l(),Bu=a("li"),Pme=a("strong"),fwo=o("transfo-xl"),mwo=o(" \u2014 "),lG=a("a"),gwo=o("TransfoXLModel"),hwo=o(" (Transformer-XL model)"),pwo=l(),Iu=a("li"),Bme=a("strong"),_wo=o("unispeech"),uwo=o(" \u2014 "),iG=a("a"),bwo=o("UniSpeechModel"),vwo=o(" (UniSpeech model)"),Fwo=l(),Nu=a("li"),Ime=a("strong"),Two=o("unispeech-sat"),Mwo=o(" \u2014 "),dG=a("a"),Ewo=o("UniSpeechSatModel"),Cwo=o(" (UniSpeechSat model)"),wwo=l(),qu=a("li"),Nme=a("strong"),Awo=o("van"),Lwo=o(" \u2014 "),cG=a("a"),ywo=o("VanModel"),xwo=o(" (VAN model)"),$wo=l(),ju=a("li"),qme=a("strong"),kwo=o("vilt"),Swo=o(" \u2014 "),fG=a("a"),Rwo=o("ViltModel"),Pwo=o(" (ViLT model)"),Bwo=l(),Du=a("li"),jme=a("strong"),Iwo=o("vision-text-dual-encoder"),Nwo=o(" \u2014 "),mG=a("a"),qwo=o("VisionTextDualEncoderModel"),jwo=o(" (VisionTextDualEncoder model)"),Dwo=l(),Gu=a("li"),Dme=a("strong"),Gwo=o("visual_bert"),Owo=o(" \u2014 "),gG=a("a"),Vwo=o("VisualBertModel"),Xwo=o(" (VisualBERT model)"),zwo=l(),Ou=a("li"),Gme=a("strong"),Wwo=o("vit"),Qwo=o(" \u2014 "),hG=a("a"),Hwo=o("ViTModel"),Uwo=o(" (ViT model)"),Jwo=l(),Vu=a("li"),Ome=a("strong"),Ywo=o("vit_mae"),Kwo=o(" \u2014 "),pG=a("a"),Zwo=o("ViTMAEModel"),eAo=o(" (ViTMAE model)"),oAo=l(),Xu=a("li"),Vme=a("strong"),rAo=o("wav2vec2"),tAo=o(" \u2014 "),_G=a("a"),aAo=o("Wav2Vec2Model"),nAo=o(" (Wav2Vec2 model)"),sAo=l(),zu=a("li"),Xme=a("strong"),lAo=o("wav2vec2-conformer"),iAo=o(" \u2014 "),uG=a("a"),dAo=o("Wav2Vec2ConformerModel"),cAo=o(" (Wav2Vec2-Conformer model)"),fAo=l(),Wu=a("li"),zme=a("strong"),mAo=o("wavlm"),gAo=o(" \u2014 "),bG=a("a"),hAo=o("WavLMModel"),pAo=o(" (WavLM model)"),_Ao=l(),Qu=a("li"),Wme=a("strong"),uAo=o("xglm"),bAo=o(" \u2014 "),vG=a("a"),vAo=o("XGLMModel"),FAo=o(" (XGLM model)"),TAo=l(),Hu=a("li"),Qme=a("strong"),MAo=o("xlm"),EAo=o(" \u2014 "),FG=a("a"),CAo=o("XLMModel"),wAo=o(" (XLM model)"),AAo=l(),Uu=a("li"),Hme=a("strong"),LAo=o("xlm-prophetnet"),yAo=o(" \u2014 "),TG=a("a"),xAo=o("XLMProphetNetModel"),$Ao=o(" (XLM-ProphetNet model)"),kAo=l(),Ju=a("li"),Ume=a("strong"),SAo=o("xlm-roberta"),RAo=o(" \u2014 "),MG=a("a"),PAo=o("XLMRobertaModel"),BAo=o(" (XLM-RoBERTa model)"),IAo=l(),Yu=a("li"),Jme=a("strong"),NAo=o("xlm-roberta-xl"),qAo=o(" \u2014 "),EG=a("a"),jAo=o("XLMRobertaXLModel"),DAo=o(" (XLM-RoBERTa-XL model)"),GAo=l(),Ku=a("li"),Yme=a("strong"),OAo=o("xlnet"),VAo=o(" \u2014 "),CG=a("a"),XAo=o("XLNetModel"),zAo=o(" (XLNet model)"),WAo=l(),Zu=a("li"),Kme=a("strong"),QAo=o("yolos"),HAo=o(" \u2014 "),wG=a("a"),UAo=o("YolosModel"),JAo=o(" (YOLOS model)"),YAo=l(),e2=a("li"),Zme=a("strong"),KAo=o("yoso"),ZAo=o(" \u2014 "),AG=a("a"),eLo=o("YosoModel"),oLo=o(" (YOSO model)"),rLo=l(),o2=a("p"),tLo=o("The model is set in evaluation mode by default using "),ege=a("code"),aLo=o("model.eval()"),nLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=a("code"),sLo=o("model.train()"),lLo=l(),F(r2.$$.fragment),_ze=l(),Wi=a("h2"),t2=a("a"),rge=a("span"),F(UL.$$.fragment),iLo=l(),tge=a("span"),dLo=o("AutoModelForPreTraining"),uze=l(),So=a("div"),F(JL.$$.fragment),cLo=l(),Qi=a("p"),fLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LG=a("a"),mLo=o("from_pretrained()"),gLo=o(" class method or the "),yG=a("a"),hLo=o("from_config()"),pLo=o(` class
method.`),_Lo=l(),YL=a("p"),uLo=o("This class cannot be instantiated directly using "),age=a("code"),bLo=o("__init__()"),vLo=o(" (throws an error)."),FLo=l(),dt=a("div"),F(KL.$$.fragment),TLo=l(),nge=a("p"),MLo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ELo=l(),Hi=a("p"),CLo=o(`Note:
Loading a model from its configuration file does `),sge=a("strong"),wLo=o("not"),ALo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),LLo=o("from_pretrained()"),yLo=o(" to load the model weights."),xLo=l(),F(a2.$$.fragment),$Lo=l(),Ke=a("div"),F(ZL.$$.fragment),kLo=l(),lge=a("p"),SLo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),RLo=l(),Na=a("p"),PLo=o("The model class to instantiate is selected based on the "),ige=a("code"),BLo=o("model_type"),ILo=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),NLo=o("pretrained_model_name_or_path"),qLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),jLo=o("pretrained_model_name_or_path"),DLo=o(":"),GLo=l(),G=a("ul"),n2=a("li"),fge=a("strong"),OLo=o("albert"),VLo=o(" \u2014 "),$G=a("a"),XLo=o("AlbertForPreTraining"),zLo=o(" (ALBERT model)"),WLo=l(),s2=a("li"),mge=a("strong"),QLo=o("bart"),HLo=o(" \u2014 "),kG=a("a"),ULo=o("BartForConditionalGeneration"),JLo=o(" (BART model)"),YLo=l(),l2=a("li"),gge=a("strong"),KLo=o("bert"),ZLo=o(" \u2014 "),SG=a("a"),eyo=o("BertForPreTraining"),oyo=o(" (BERT model)"),ryo=l(),i2=a("li"),hge=a("strong"),tyo=o("big_bird"),ayo=o(" \u2014 "),RG=a("a"),nyo=o("BigBirdForPreTraining"),syo=o(" (BigBird model)"),lyo=l(),d2=a("li"),pge=a("strong"),iyo=o("bloom"),dyo=o(" \u2014 "),PG=a("a"),cyo=o("BloomForCausalLM"),fyo=o(" (BLOOM model)"),myo=l(),c2=a("li"),_ge=a("strong"),gyo=o("camembert"),hyo=o(" \u2014 "),BG=a("a"),pyo=o("CamembertForMaskedLM"),_yo=o(" (CamemBERT model)"),uyo=l(),f2=a("li"),uge=a("strong"),byo=o("ctrl"),vyo=o(" \u2014 "),IG=a("a"),Fyo=o("CTRLLMHeadModel"),Tyo=o(" (CTRL model)"),Myo=l(),m2=a("li"),bge=a("strong"),Eyo=o("data2vec-text"),Cyo=o(" \u2014 "),NG=a("a"),wyo=o("Data2VecTextForMaskedLM"),Ayo=o(" (Data2VecText model)"),Lyo=l(),g2=a("li"),vge=a("strong"),yyo=o("deberta"),xyo=o(" \u2014 "),qG=a("a"),$yo=o("DebertaForMaskedLM"),kyo=o(" (DeBERTa model)"),Syo=l(),h2=a("li"),Fge=a("strong"),Ryo=o("deberta-v2"),Pyo=o(" \u2014 "),jG=a("a"),Byo=o("DebertaV2ForMaskedLM"),Iyo=o(" (DeBERTa-v2 model)"),Nyo=l(),p2=a("li"),Tge=a("strong"),qyo=o("distilbert"),jyo=o(" \u2014 "),DG=a("a"),Dyo=o("DistilBertForMaskedLM"),Gyo=o(" (DistilBERT model)"),Oyo=l(),_2=a("li"),Mge=a("strong"),Vyo=o("electra"),Xyo=o(" \u2014 "),GG=a("a"),zyo=o("ElectraForPreTraining"),Wyo=o(" (ELECTRA model)"),Qyo=l(),u2=a("li"),Ege=a("strong"),Hyo=o("flaubert"),Uyo=o(" \u2014 "),OG=a("a"),Jyo=o("FlaubertWithLMHeadModel"),Yyo=o(" (FlauBERT model)"),Kyo=l(),b2=a("li"),Cge=a("strong"),Zyo=o("flava"),e9o=o(" \u2014 "),VG=a("a"),o9o=o("FlavaForPreTraining"),r9o=o(" (FLAVA model)"),t9o=l(),v2=a("li"),wge=a("strong"),a9o=o("fnet"),n9o=o(" \u2014 "),XG=a("a"),s9o=o("FNetForPreTraining"),l9o=o(" (FNet model)"),i9o=l(),F2=a("li"),Age=a("strong"),d9o=o("fsmt"),c9o=o(" \u2014 "),zG=a("a"),f9o=o("FSMTForConditionalGeneration"),m9o=o(" (FairSeq Machine-Translation model)"),g9o=l(),T2=a("li"),Lge=a("strong"),h9o=o("funnel"),p9o=o(" \u2014 "),WG=a("a"),_9o=o("FunnelForPreTraining"),u9o=o(" (Funnel Transformer model)"),b9o=l(),M2=a("li"),yge=a("strong"),v9o=o("gpt2"),F9o=o(" \u2014 "),QG=a("a"),T9o=o("GPT2LMHeadModel"),M9o=o(" (OpenAI GPT-2 model)"),E9o=l(),E2=a("li"),xge=a("strong"),C9o=o("ibert"),w9o=o(" \u2014 "),HG=a("a"),A9o=o("IBertForMaskedLM"),L9o=o(" (I-BERT model)"),y9o=l(),C2=a("li"),$ge=a("strong"),x9o=o("layoutlm"),$9o=o(" \u2014 "),UG=a("a"),k9o=o("LayoutLMForMaskedLM"),S9o=o(" (LayoutLM model)"),R9o=l(),w2=a("li"),kge=a("strong"),P9o=o("longformer"),B9o=o(" \u2014 "),JG=a("a"),I9o=o("LongformerForMaskedLM"),N9o=o(" (Longformer model)"),q9o=l(),A2=a("li"),Sge=a("strong"),j9o=o("lxmert"),D9o=o(" \u2014 "),YG=a("a"),G9o=o("LxmertForPreTraining"),O9o=o(" (LXMERT model)"),V9o=l(),L2=a("li"),Rge=a("strong"),X9o=o("megatron-bert"),z9o=o(" \u2014 "),KG=a("a"),W9o=o("MegatronBertForPreTraining"),Q9o=o(" (Megatron-BERT model)"),H9o=l(),y2=a("li"),Pge=a("strong"),U9o=o("mobilebert"),J9o=o(" \u2014 "),ZG=a("a"),Y9o=o("MobileBertForPreTraining"),K9o=o(" (MobileBERT model)"),Z9o=l(),x2=a("li"),Bge=a("strong"),exo=o("mpnet"),oxo=o(" \u2014 "),eO=a("a"),rxo=o("MPNetForMaskedLM"),txo=o(" (MPNet model)"),axo=l(),$2=a("li"),Ige=a("strong"),nxo=o("mvp"),sxo=o(" \u2014 "),oO=a("a"),lxo=o("MvpForConditionalGeneration"),ixo=o(" (MVP model)"),dxo=l(),k2=a("li"),Nge=a("strong"),cxo=o("nezha"),fxo=o(" \u2014 "),rO=a("a"),mxo=o("NezhaForPreTraining"),gxo=o(" (Nezha model)"),hxo=l(),S2=a("li"),qge=a("strong"),pxo=o("openai-gpt"),_xo=o(" \u2014 "),tO=a("a"),uxo=o("OpenAIGPTLMHeadModel"),bxo=o(" (OpenAI GPT model)"),vxo=l(),R2=a("li"),jge=a("strong"),Fxo=o("retribert"),Txo=o(" \u2014 "),aO=a("a"),Mxo=o("RetriBertModel"),Exo=o(" (RetriBERT model)"),Cxo=l(),P2=a("li"),Dge=a("strong"),wxo=o("roberta"),Axo=o(" \u2014 "),nO=a("a"),Lxo=o("RobertaForMaskedLM"),yxo=o(" (RoBERTa model)"),xxo=l(),B2=a("li"),Gge=a("strong"),$xo=o("splinter"),kxo=o(" \u2014 "),sO=a("a"),Sxo=o("SplinterForPreTraining"),Rxo=o(" (Splinter model)"),Pxo=l(),I2=a("li"),Oge=a("strong"),Bxo=o("squeezebert"),Ixo=o(" \u2014 "),lO=a("a"),Nxo=o("SqueezeBertForMaskedLM"),qxo=o(" (SqueezeBERT model)"),jxo=l(),N2=a("li"),Vge=a("strong"),Dxo=o("t5"),Gxo=o(" \u2014 "),iO=a("a"),Oxo=o("T5ForConditionalGeneration"),Vxo=o(" (T5 model)"),Xxo=l(),q2=a("li"),Xge=a("strong"),zxo=o("tapas"),Wxo=o(" \u2014 "),dO=a("a"),Qxo=o("TapasForMaskedLM"),Hxo=o(" (TAPAS model)"),Uxo=l(),j2=a("li"),zge=a("strong"),Jxo=o("transfo-xl"),Yxo=o(" \u2014 "),cO=a("a"),Kxo=o("TransfoXLLMHeadModel"),Zxo=o(" (Transformer-XL model)"),e$o=l(),D2=a("li"),Wge=a("strong"),o$o=o("unispeech"),r$o=o(" \u2014 "),fO=a("a"),t$o=o("UniSpeechForPreTraining"),a$o=o(" (UniSpeech model)"),n$o=l(),G2=a("li"),Qge=a("strong"),s$o=o("unispeech-sat"),l$o=o(" \u2014 "),mO=a("a"),i$o=o("UniSpeechSatForPreTraining"),d$o=o(" (UniSpeechSat model)"),c$o=l(),O2=a("li"),Hge=a("strong"),f$o=o("visual_bert"),m$o=o(" \u2014 "),gO=a("a"),g$o=o("VisualBertForPreTraining"),h$o=o(" (VisualBERT model)"),p$o=l(),V2=a("li"),Uge=a("strong"),_$o=o("vit_mae"),u$o=o(" \u2014 "),hO=a("a"),b$o=o("ViTMAEForPreTraining"),v$o=o(" (ViTMAE model)"),F$o=l(),X2=a("li"),Jge=a("strong"),T$o=o("wav2vec2"),M$o=o(" \u2014 "),pO=a("a"),E$o=o("Wav2Vec2ForPreTraining"),C$o=o(" (Wav2Vec2 model)"),w$o=l(),z2=a("li"),Yge=a("strong"),A$o=o("wav2vec2-conformer"),L$o=o(" \u2014 "),_O=a("a"),y$o=o("Wav2Vec2ConformerForPreTraining"),x$o=o(" (Wav2Vec2-Conformer model)"),$$o=l(),W2=a("li"),Kge=a("strong"),k$o=o("xlm"),S$o=o(" \u2014 "),uO=a("a"),R$o=o("XLMWithLMHeadModel"),P$o=o(" (XLM model)"),B$o=l(),Q2=a("li"),Zge=a("strong"),I$o=o("xlm-roberta"),N$o=o(" \u2014 "),bO=a("a"),q$o=o("XLMRobertaForMaskedLM"),j$o=o(" (XLM-RoBERTa model)"),D$o=l(),H2=a("li"),ehe=a("strong"),G$o=o("xlm-roberta-xl"),O$o=o(" \u2014 "),vO=a("a"),V$o=o("XLMRobertaXLForMaskedLM"),X$o=o(" (XLM-RoBERTa-XL model)"),z$o=l(),U2=a("li"),ohe=a("strong"),W$o=o("xlnet"),Q$o=o(" \u2014 "),FO=a("a"),H$o=o("XLNetLMHeadModel"),U$o=o(" (XLNet model)"),J$o=l(),J2=a("p"),Y$o=o("The model is set in evaluation mode by default using "),rhe=a("code"),K$o=o("model.eval()"),Z$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=a("code"),eko=o("model.train()"),oko=l(),F(Y2.$$.fragment),bze=l(),Ui=a("h2"),K2=a("a"),ahe=a("span"),F(ey.$$.fragment),rko=l(),nhe=a("span"),tko=o("AutoModelForCausalLM"),vze=l(),Ro=a("div"),F(oy.$$.fragment),ako=l(),Ji=a("p"),nko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TO=a("a"),sko=o("from_pretrained()"),lko=o(" class method or the "),MO=a("a"),iko=o("from_config()"),dko=o(` class
method.`),cko=l(),ry=a("p"),fko=o("This class cannot be instantiated directly using "),she=a("code"),mko=o("__init__()"),gko=o(" (throws an error)."),hko=l(),ct=a("div"),F(ty.$$.fragment),pko=l(),lhe=a("p"),_ko=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uko=l(),Yi=a("p"),bko=o(`Note:
Loading a model from its configuration file does `),ihe=a("strong"),vko=o("not"),Fko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EO=a("a"),Tko=o("from_pretrained()"),Mko=o(" to load the model weights."),Eko=l(),F(Z2.$$.fragment),Cko=l(),Ze=a("div"),F(ay.$$.fragment),wko=l(),dhe=a("p"),Ako=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Lko=l(),qa=a("p"),yko=o("The model class to instantiate is selected based on the "),che=a("code"),xko=o("model_type"),$ko=o(` property of the config object (either
passed as an argument or loaded from `),fhe=a("code"),kko=o("pretrained_model_name_or_path"),Sko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=a("code"),Rko=o("pretrained_model_name_or_path"),Pko=o(":"),Bko=l(),z=a("ul"),e1=a("li"),ghe=a("strong"),Iko=o("bart"),Nko=o(" \u2014 "),CO=a("a"),qko=o("BartForCausalLM"),jko=o(" (BART model)"),Dko=l(),o1=a("li"),hhe=a("strong"),Gko=o("bert"),Oko=o(" \u2014 "),wO=a("a"),Vko=o("BertLMHeadModel"),Xko=o(" (BERT model)"),zko=l(),r1=a("li"),phe=a("strong"),Wko=o("bert-generation"),Qko=o(" \u2014 "),AO=a("a"),Hko=o("BertGenerationDecoder"),Uko=o(" (Bert Generation model)"),Jko=l(),t1=a("li"),_he=a("strong"),Yko=o("big_bird"),Kko=o(" \u2014 "),LO=a("a"),Zko=o("BigBirdForCausalLM"),eSo=o(" (BigBird model)"),oSo=l(),a1=a("li"),uhe=a("strong"),rSo=o("bigbird_pegasus"),tSo=o(" \u2014 "),yO=a("a"),aSo=o("BigBirdPegasusForCausalLM"),nSo=o(" (BigBird-Pegasus model)"),sSo=l(),n1=a("li"),bhe=a("strong"),lSo=o("blenderbot"),iSo=o(" \u2014 "),xO=a("a"),dSo=o("BlenderbotForCausalLM"),cSo=o(" (Blenderbot model)"),fSo=l(),s1=a("li"),vhe=a("strong"),mSo=o("blenderbot-small"),gSo=o(" \u2014 "),$O=a("a"),hSo=o("BlenderbotSmallForCausalLM"),pSo=o(" (BlenderbotSmall model)"),_So=l(),l1=a("li"),Fhe=a("strong"),uSo=o("bloom"),bSo=o(" \u2014 "),kO=a("a"),vSo=o("BloomForCausalLM"),FSo=o(" (BLOOM model)"),TSo=l(),i1=a("li"),The=a("strong"),MSo=o("camembert"),ESo=o(" \u2014 "),SO=a("a"),CSo=o("CamembertForCausalLM"),wSo=o(" (CamemBERT model)"),ASo=l(),d1=a("li"),Mhe=a("strong"),LSo=o("codegen"),ySo=o(" \u2014 "),RO=a("a"),xSo=o("CodeGenForCausalLM"),$So=o(" (CodeGen model)"),kSo=l(),c1=a("li"),Ehe=a("strong"),SSo=o("ctrl"),RSo=o(" \u2014 "),PO=a("a"),PSo=o("CTRLLMHeadModel"),BSo=o(" (CTRL model)"),ISo=l(),f1=a("li"),Che=a("strong"),NSo=o("data2vec-text"),qSo=o(" \u2014 "),BO=a("a"),jSo=o("Data2VecTextForCausalLM"),DSo=o(" (Data2VecText model)"),GSo=l(),m1=a("li"),whe=a("strong"),OSo=o("electra"),VSo=o(" \u2014 "),IO=a("a"),XSo=o("ElectraForCausalLM"),zSo=o(" (ELECTRA model)"),WSo=l(),g1=a("li"),Ahe=a("strong"),QSo=o("gpt2"),HSo=o(" \u2014 "),NO=a("a"),USo=o("GPT2LMHeadModel"),JSo=o(" (OpenAI GPT-2 model)"),YSo=l(),h1=a("li"),Lhe=a("strong"),KSo=o("gpt_neo"),ZSo=o(" \u2014 "),qO=a("a"),eRo=o("GPTNeoForCausalLM"),oRo=o(" (GPT Neo model)"),rRo=l(),p1=a("li"),yhe=a("strong"),tRo=o("gpt_neox"),aRo=o(" \u2014 "),jO=a("a"),nRo=o("GPTNeoXForCausalLM"),sRo=o(" (GPT NeoX model)"),lRo=l(),_1=a("li"),xhe=a("strong"),iRo=o("gptj"),dRo=o(" \u2014 "),DO=a("a"),cRo=o("GPTJForCausalLM"),fRo=o(" (GPT-J model)"),mRo=l(),u1=a("li"),$he=a("strong"),gRo=o("marian"),hRo=o(" \u2014 "),GO=a("a"),pRo=o("MarianForCausalLM"),_Ro=o(" (Marian model)"),uRo=l(),b1=a("li"),khe=a("strong"),bRo=o("mbart"),vRo=o(" \u2014 "),OO=a("a"),FRo=o("MBartForCausalLM"),TRo=o(" (mBART model)"),MRo=l(),v1=a("li"),She=a("strong"),ERo=o("megatron-bert"),CRo=o(" \u2014 "),VO=a("a"),wRo=o("MegatronBertForCausalLM"),ARo=o(" (Megatron-BERT model)"),LRo=l(),F1=a("li"),Rhe=a("strong"),yRo=o("mvp"),xRo=o(" \u2014 "),XO=a("a"),$Ro=o("MvpForCausalLM"),kRo=o(" (MVP model)"),SRo=l(),T1=a("li"),Phe=a("strong"),RRo=o("openai-gpt"),PRo=o(" \u2014 "),zO=a("a"),BRo=o("OpenAIGPTLMHeadModel"),IRo=o(" (OpenAI GPT model)"),NRo=l(),M1=a("li"),Bhe=a("strong"),qRo=o("opt"),jRo=o(" \u2014 "),WO=a("a"),DRo=o("OPTForCausalLM"),GRo=o(" (OPT model)"),ORo=l(),E1=a("li"),Ihe=a("strong"),VRo=o("pegasus"),XRo=o(" \u2014 "),QO=a("a"),zRo=o("PegasusForCausalLM"),WRo=o(" (Pegasus model)"),QRo=l(),C1=a("li"),Nhe=a("strong"),HRo=o("plbart"),URo=o(" \u2014 "),HO=a("a"),JRo=o("PLBartForCausalLM"),YRo=o(" (PLBart model)"),KRo=l(),w1=a("li"),qhe=a("strong"),ZRo=o("prophetnet"),ePo=o(" \u2014 "),UO=a("a"),oPo=o("ProphetNetForCausalLM"),rPo=o(" (ProphetNet model)"),tPo=l(),A1=a("li"),jhe=a("strong"),aPo=o("qdqbert"),nPo=o(" \u2014 "),JO=a("a"),sPo=o("QDQBertLMHeadModel"),lPo=o(" (QDQBert model)"),iPo=l(),L1=a("li"),Dhe=a("strong"),dPo=o("reformer"),cPo=o(" \u2014 "),YO=a("a"),fPo=o("ReformerModelWithLMHead"),mPo=o(" (Reformer model)"),gPo=l(),y1=a("li"),Ghe=a("strong"),hPo=o("rembert"),pPo=o(" \u2014 "),KO=a("a"),_Po=o("RemBertForCausalLM"),uPo=o(" (RemBERT model)"),bPo=l(),x1=a("li"),Ohe=a("strong"),vPo=o("roberta"),FPo=o(" \u2014 "),ZO=a("a"),TPo=o("RobertaForCausalLM"),MPo=o(" (RoBERTa model)"),EPo=l(),$1=a("li"),Vhe=a("strong"),CPo=o("roformer"),wPo=o(" \u2014 "),eV=a("a"),APo=o("RoFormerForCausalLM"),LPo=o(" (RoFormer model)"),yPo=l(),k1=a("li"),Xhe=a("strong"),xPo=o("speech_to_text_2"),$Po=o(" \u2014 "),oV=a("a"),kPo=o("Speech2Text2ForCausalLM"),SPo=o(" (Speech2Text2 model)"),RPo=l(),S1=a("li"),zhe=a("strong"),PPo=o("transfo-xl"),BPo=o(" \u2014 "),rV=a("a"),IPo=o("TransfoXLLMHeadModel"),NPo=o(" (Transformer-XL model)"),qPo=l(),R1=a("li"),Whe=a("strong"),jPo=o("trocr"),DPo=o(" \u2014 "),tV=a("a"),GPo=o("TrOCRForCausalLM"),OPo=o(" (TrOCR model)"),VPo=l(),P1=a("li"),Qhe=a("strong"),XPo=o("xglm"),zPo=o(" \u2014 "),aV=a("a"),WPo=o("XGLMForCausalLM"),QPo=o(" (XGLM model)"),HPo=l(),B1=a("li"),Hhe=a("strong"),UPo=o("xlm"),JPo=o(" \u2014 "),nV=a("a"),YPo=o("XLMWithLMHeadModel"),KPo=o(" (XLM model)"),ZPo=l(),I1=a("li"),Uhe=a("strong"),eBo=o("xlm-prophetnet"),oBo=o(" \u2014 "),sV=a("a"),rBo=o("XLMProphetNetForCausalLM"),tBo=o(" (XLM-ProphetNet model)"),aBo=l(),N1=a("li"),Jhe=a("strong"),nBo=o("xlm-roberta"),sBo=o(" \u2014 "),lV=a("a"),lBo=o("XLMRobertaForCausalLM"),iBo=o(" (XLM-RoBERTa model)"),dBo=l(),q1=a("li"),Yhe=a("strong"),cBo=o("xlm-roberta-xl"),fBo=o(" \u2014 "),iV=a("a"),mBo=o("XLMRobertaXLForCausalLM"),gBo=o(" (XLM-RoBERTa-XL model)"),hBo=l(),j1=a("li"),Khe=a("strong"),pBo=o("xlnet"),_Bo=o(" \u2014 "),dV=a("a"),uBo=o("XLNetLMHeadModel"),bBo=o(" (XLNet model)"),vBo=l(),D1=a("p"),FBo=o("The model is set in evaluation mode by default using "),Zhe=a("code"),TBo=o("model.eval()"),MBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),EBo=o("model.train()"),CBo=l(),F(G1.$$.fragment),Fze=l(),Ki=a("h2"),O1=a("a"),ope=a("span"),F(ny.$$.fragment),wBo=l(),rpe=a("span"),ABo=o("AutoModelForMaskedLM"),Tze=l(),Po=a("div"),F(sy.$$.fragment),LBo=l(),Zi=a("p"),yBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cV=a("a"),xBo=o("from_pretrained()"),$Bo=o(" class method or the "),fV=a("a"),kBo=o("from_config()"),SBo=o(` class
method.`),RBo=l(),ly=a("p"),PBo=o("This class cannot be instantiated directly using "),tpe=a("code"),BBo=o("__init__()"),IBo=o(" (throws an error)."),NBo=l(),ft=a("div"),F(iy.$$.fragment),qBo=l(),ape=a("p"),jBo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),DBo=l(),ed=a("p"),GBo=o(`Note:
Loading a model from its configuration file does `),npe=a("strong"),OBo=o("not"),VBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=a("a"),XBo=o("from_pretrained()"),zBo=o(" to load the model weights."),WBo=l(),F(V1.$$.fragment),QBo=l(),eo=a("div"),F(dy.$$.fragment),HBo=l(),spe=a("p"),UBo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),JBo=l(),ja=a("p"),YBo=o("The model class to instantiate is selected based on the "),lpe=a("code"),KBo=o("model_type"),ZBo=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),eIo=o("pretrained_model_name_or_path"),oIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),rIo=o("pretrained_model_name_or_path"),tIo=o(":"),aIo=l(),Q=a("ul"),X1=a("li"),cpe=a("strong"),nIo=o("albert"),sIo=o(" \u2014 "),gV=a("a"),lIo=o("AlbertForMaskedLM"),iIo=o(" (ALBERT model)"),dIo=l(),z1=a("li"),fpe=a("strong"),cIo=o("bart"),fIo=o(" \u2014 "),hV=a("a"),mIo=o("BartForConditionalGeneration"),gIo=o(" (BART model)"),hIo=l(),W1=a("li"),mpe=a("strong"),pIo=o("bert"),_Io=o(" \u2014 "),pV=a("a"),uIo=o("BertForMaskedLM"),bIo=o(" (BERT model)"),vIo=l(),Q1=a("li"),gpe=a("strong"),FIo=o("big_bird"),TIo=o(" \u2014 "),_V=a("a"),MIo=o("BigBirdForMaskedLM"),EIo=o(" (BigBird model)"),CIo=l(),H1=a("li"),hpe=a("strong"),wIo=o("camembert"),AIo=o(" \u2014 "),uV=a("a"),LIo=o("CamembertForMaskedLM"),yIo=o(" (CamemBERT model)"),xIo=l(),U1=a("li"),ppe=a("strong"),$Io=o("convbert"),kIo=o(" \u2014 "),bV=a("a"),SIo=o("ConvBertForMaskedLM"),RIo=o(" (ConvBERT model)"),PIo=l(),J1=a("li"),_pe=a("strong"),BIo=o("data2vec-text"),IIo=o(" \u2014 "),vV=a("a"),NIo=o("Data2VecTextForMaskedLM"),qIo=o(" (Data2VecText model)"),jIo=l(),Y1=a("li"),upe=a("strong"),DIo=o("deberta"),GIo=o(" \u2014 "),FV=a("a"),OIo=o("DebertaForMaskedLM"),VIo=o(" (DeBERTa model)"),XIo=l(),K1=a("li"),bpe=a("strong"),zIo=o("deberta-v2"),WIo=o(" \u2014 "),TV=a("a"),QIo=o("DebertaV2ForMaskedLM"),HIo=o(" (DeBERTa-v2 model)"),UIo=l(),Z1=a("li"),vpe=a("strong"),JIo=o("distilbert"),YIo=o(" \u2014 "),MV=a("a"),KIo=o("DistilBertForMaskedLM"),ZIo=o(" (DistilBERT model)"),eNo=l(),eb=a("li"),Fpe=a("strong"),oNo=o("electra"),rNo=o(" \u2014 "),EV=a("a"),tNo=o("ElectraForMaskedLM"),aNo=o(" (ELECTRA model)"),nNo=l(),ob=a("li"),Tpe=a("strong"),sNo=o("flaubert"),lNo=o(" \u2014 "),CV=a("a"),iNo=o("FlaubertWithLMHeadModel"),dNo=o(" (FlauBERT model)"),cNo=l(),rb=a("li"),Mpe=a("strong"),fNo=o("fnet"),mNo=o(" \u2014 "),wV=a("a"),gNo=o("FNetForMaskedLM"),hNo=o(" (FNet model)"),pNo=l(),tb=a("li"),Epe=a("strong"),_No=o("funnel"),uNo=o(" \u2014 "),AV=a("a"),bNo=o("FunnelForMaskedLM"),vNo=o(" (Funnel Transformer model)"),FNo=l(),ab=a("li"),Cpe=a("strong"),TNo=o("ibert"),MNo=o(" \u2014 "),LV=a("a"),ENo=o("IBertForMaskedLM"),CNo=o(" (I-BERT model)"),wNo=l(),nb=a("li"),wpe=a("strong"),ANo=o("layoutlm"),LNo=o(" \u2014 "),yV=a("a"),yNo=o("LayoutLMForMaskedLM"),xNo=o(" (LayoutLM model)"),$No=l(),sb=a("li"),Ape=a("strong"),kNo=o("longformer"),SNo=o(" \u2014 "),xV=a("a"),RNo=o("LongformerForMaskedLM"),PNo=o(" (Longformer model)"),BNo=l(),lb=a("li"),Lpe=a("strong"),INo=o("luke"),NNo=o(" \u2014 "),$V=a("a"),qNo=o("LukeForMaskedLM"),jNo=o(" (LUKE model)"),DNo=l(),ib=a("li"),ype=a("strong"),GNo=o("mbart"),ONo=o(" \u2014 "),kV=a("a"),VNo=o("MBartForConditionalGeneration"),XNo=o(" (mBART model)"),zNo=l(),db=a("li"),xpe=a("strong"),WNo=o("megatron-bert"),QNo=o(" \u2014 "),SV=a("a"),HNo=o("MegatronBertForMaskedLM"),UNo=o(" (Megatron-BERT model)"),JNo=l(),cb=a("li"),$pe=a("strong"),YNo=o("mobilebert"),KNo=o(" \u2014 "),RV=a("a"),ZNo=o("MobileBertForMaskedLM"),eqo=o(" (MobileBERT model)"),oqo=l(),fb=a("li"),kpe=a("strong"),rqo=o("mpnet"),tqo=o(" \u2014 "),PV=a("a"),aqo=o("MPNetForMaskedLM"),nqo=o(" (MPNet model)"),sqo=l(),mb=a("li"),Spe=a("strong"),lqo=o("mvp"),iqo=o(" \u2014 "),BV=a("a"),dqo=o("MvpForConditionalGeneration"),cqo=o(" (MVP model)"),fqo=l(),gb=a("li"),Rpe=a("strong"),mqo=o("nezha"),gqo=o(" \u2014 "),IV=a("a"),hqo=o("NezhaForMaskedLM"),pqo=o(" (Nezha model)"),_qo=l(),hb=a("li"),Ppe=a("strong"),uqo=o("nystromformer"),bqo=o(" \u2014 "),NV=a("a"),vqo=o("NystromformerForMaskedLM"),Fqo=o(" (Nystr\xF6mformer model)"),Tqo=l(),pb=a("li"),Bpe=a("strong"),Mqo=o("perceiver"),Eqo=o(" \u2014 "),qV=a("a"),Cqo=o("PerceiverForMaskedLM"),wqo=o(" (Perceiver model)"),Aqo=l(),_b=a("li"),Ipe=a("strong"),Lqo=o("qdqbert"),yqo=o(" \u2014 "),jV=a("a"),xqo=o("QDQBertForMaskedLM"),$qo=o(" (QDQBert model)"),kqo=l(),ub=a("li"),Npe=a("strong"),Sqo=o("reformer"),Rqo=o(" \u2014 "),DV=a("a"),Pqo=o("ReformerForMaskedLM"),Bqo=o(" (Reformer model)"),Iqo=l(),bb=a("li"),qpe=a("strong"),Nqo=o("rembert"),qqo=o(" \u2014 "),GV=a("a"),jqo=o("RemBertForMaskedLM"),Dqo=o(" (RemBERT model)"),Gqo=l(),vb=a("li"),jpe=a("strong"),Oqo=o("roberta"),Vqo=o(" \u2014 "),OV=a("a"),Xqo=o("RobertaForMaskedLM"),zqo=o(" (RoBERTa model)"),Wqo=l(),Fb=a("li"),Dpe=a("strong"),Qqo=o("roformer"),Hqo=o(" \u2014 "),VV=a("a"),Uqo=o("RoFormerForMaskedLM"),Jqo=o(" (RoFormer model)"),Yqo=l(),Tb=a("li"),Gpe=a("strong"),Kqo=o("squeezebert"),Zqo=o(" \u2014 "),XV=a("a"),ejo=o("SqueezeBertForMaskedLM"),ojo=o(" (SqueezeBERT model)"),rjo=l(),Mb=a("li"),Ope=a("strong"),tjo=o("tapas"),ajo=o(" \u2014 "),zV=a("a"),njo=o("TapasForMaskedLM"),sjo=o(" (TAPAS model)"),ljo=l(),Eb=a("li"),Vpe=a("strong"),ijo=o("wav2vec2"),djo=o(" \u2014 "),Xpe=a("code"),cjo=o("Wav2Vec2ForMaskedLM"),fjo=o(" (Wav2Vec2 model)"),mjo=l(),Cb=a("li"),zpe=a("strong"),gjo=o("xlm"),hjo=o(" \u2014 "),WV=a("a"),pjo=o("XLMWithLMHeadModel"),_jo=o(" (XLM model)"),ujo=l(),wb=a("li"),Wpe=a("strong"),bjo=o("xlm-roberta"),vjo=o(" \u2014 "),QV=a("a"),Fjo=o("XLMRobertaForMaskedLM"),Tjo=o(" (XLM-RoBERTa model)"),Mjo=l(),Ab=a("li"),Qpe=a("strong"),Ejo=o("xlm-roberta-xl"),Cjo=o(" \u2014 "),HV=a("a"),wjo=o("XLMRobertaXLForMaskedLM"),Ajo=o(" (XLM-RoBERTa-XL model)"),Ljo=l(),Lb=a("li"),Hpe=a("strong"),yjo=o("yoso"),xjo=o(" \u2014 "),UV=a("a"),$jo=o("YosoForMaskedLM"),kjo=o(" (YOSO model)"),Sjo=l(),yb=a("p"),Rjo=o("The model is set in evaluation mode by default using "),Upe=a("code"),Pjo=o("model.eval()"),Bjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=a("code"),Ijo=o("model.train()"),Njo=l(),F(xb.$$.fragment),Mze=l(),od=a("h2"),$b=a("a"),Ype=a("span"),F(cy.$$.fragment),qjo=l(),Kpe=a("span"),jjo=o("AutoModelForSeq2SeqLM"),Eze=l(),Bo=a("div"),F(fy.$$.fragment),Djo=l(),rd=a("p"),Gjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JV=a("a"),Ojo=o("from_pretrained()"),Vjo=o(" class method or the "),YV=a("a"),Xjo=o("from_config()"),zjo=o(` class
method.`),Wjo=l(),my=a("p"),Qjo=o("This class cannot be instantiated directly using "),Zpe=a("code"),Hjo=o("__init__()"),Ujo=o(" (throws an error)."),Jjo=l(),mt=a("div"),F(gy.$$.fragment),Yjo=l(),e_e=a("p"),Kjo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Zjo=l(),td=a("p"),eDo=o(`Note:
Loading a model from its configuration file does `),o_e=a("strong"),oDo=o("not"),rDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=a("a"),tDo=o("from_pretrained()"),aDo=o(" to load the model weights."),nDo=l(),F(kb.$$.fragment),sDo=l(),oo=a("div"),F(hy.$$.fragment),lDo=l(),r_e=a("p"),iDo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dDo=l(),Da=a("p"),cDo=o("The model class to instantiate is selected based on the "),t_e=a("code"),fDo=o("model_type"),mDo=o(` property of the config object (either
passed as an argument or loaded from `),a_e=a("code"),gDo=o("pretrained_model_name_or_path"),hDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=a("code"),pDo=o("pretrained_model_name_or_path"),_Do=o(":"),uDo=l(),me=a("ul"),Sb=a("li"),s_e=a("strong"),bDo=o("bart"),vDo=o(" \u2014 "),ZV=a("a"),FDo=o("BartForConditionalGeneration"),TDo=o(" (BART model)"),MDo=l(),Rb=a("li"),l_e=a("strong"),EDo=o("bigbird_pegasus"),CDo=o(" \u2014 "),eX=a("a"),wDo=o("BigBirdPegasusForConditionalGeneration"),ADo=o(" (BigBird-Pegasus model)"),LDo=l(),Pb=a("li"),i_e=a("strong"),yDo=o("blenderbot"),xDo=o(" \u2014 "),oX=a("a"),$Do=o("BlenderbotForConditionalGeneration"),kDo=o(" (Blenderbot model)"),SDo=l(),Bb=a("li"),d_e=a("strong"),RDo=o("blenderbot-small"),PDo=o(" \u2014 "),rX=a("a"),BDo=o("BlenderbotSmallForConditionalGeneration"),IDo=o(" (BlenderbotSmall model)"),NDo=l(),Ib=a("li"),c_e=a("strong"),qDo=o("encoder-decoder"),jDo=o(" \u2014 "),tX=a("a"),DDo=o("EncoderDecoderModel"),GDo=o(" (Encoder decoder model)"),ODo=l(),Nb=a("li"),f_e=a("strong"),VDo=o("fsmt"),XDo=o(" \u2014 "),aX=a("a"),zDo=o("FSMTForConditionalGeneration"),WDo=o(" (FairSeq Machine-Translation model)"),QDo=l(),qb=a("li"),m_e=a("strong"),HDo=o("led"),UDo=o(" \u2014 "),nX=a("a"),JDo=o("LEDForConditionalGeneration"),YDo=o(" (LED model)"),KDo=l(),jb=a("li"),g_e=a("strong"),ZDo=o("longt5"),eGo=o(" \u2014 "),sX=a("a"),oGo=o("LongT5ForConditionalGeneration"),rGo=o(" (LongT5 model)"),tGo=l(),Db=a("li"),h_e=a("strong"),aGo=o("m2m_100"),nGo=o(" \u2014 "),lX=a("a"),sGo=o("M2M100ForConditionalGeneration"),lGo=o(" (M2M100 model)"),iGo=l(),Gb=a("li"),p_e=a("strong"),dGo=o("marian"),cGo=o(" \u2014 "),iX=a("a"),fGo=o("MarianMTModel"),mGo=o(" (Marian model)"),gGo=l(),Ob=a("li"),__e=a("strong"),hGo=o("mbart"),pGo=o(" \u2014 "),dX=a("a"),_Go=o("MBartForConditionalGeneration"),uGo=o(" (mBART model)"),bGo=l(),Vb=a("li"),u_e=a("strong"),vGo=o("mt5"),FGo=o(" \u2014 "),cX=a("a"),TGo=o("MT5ForConditionalGeneration"),MGo=o(" (MT5 model)"),EGo=l(),Xb=a("li"),b_e=a("strong"),CGo=o("mvp"),wGo=o(" \u2014 "),fX=a("a"),AGo=o("MvpForConditionalGeneration"),LGo=o(" (MVP model)"),yGo=l(),zb=a("li"),v_e=a("strong"),xGo=o("nllb"),$Go=o(" \u2014 "),mX=a("a"),kGo=o("M2M100ForConditionalGeneration"),SGo=o(" (NLLB model)"),RGo=l(),Wb=a("li"),F_e=a("strong"),PGo=o("pegasus"),BGo=o(" \u2014 "),gX=a("a"),IGo=o("PegasusForConditionalGeneration"),NGo=o(" (Pegasus model)"),qGo=l(),Qb=a("li"),T_e=a("strong"),jGo=o("plbart"),DGo=o(" \u2014 "),hX=a("a"),GGo=o("PLBartForConditionalGeneration"),OGo=o(" (PLBart model)"),VGo=l(),Hb=a("li"),M_e=a("strong"),XGo=o("prophetnet"),zGo=o(" \u2014 "),pX=a("a"),WGo=o("ProphetNetForConditionalGeneration"),QGo=o(" (ProphetNet model)"),HGo=l(),Ub=a("li"),E_e=a("strong"),UGo=o("t5"),JGo=o(" \u2014 "),_X=a("a"),YGo=o("T5ForConditionalGeneration"),KGo=o(" (T5 model)"),ZGo=l(),Jb=a("li"),C_e=a("strong"),eOo=o("xlm-prophetnet"),oOo=o(" \u2014 "),uX=a("a"),rOo=o("XLMProphetNetForConditionalGeneration"),tOo=o(" (XLM-ProphetNet model)"),aOo=l(),Yb=a("p"),nOo=o("The model is set in evaluation mode by default using "),w_e=a("code"),sOo=o("model.eval()"),lOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=a("code"),iOo=o("model.train()"),dOo=l(),F(Kb.$$.fragment),Cze=l(),ad=a("h2"),Zb=a("a"),L_e=a("span"),F(py.$$.fragment),cOo=l(),y_e=a("span"),fOo=o("AutoModelForSequenceClassification"),wze=l(),Io=a("div"),F(_y.$$.fragment),mOo=l(),nd=a("p"),gOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bX=a("a"),hOo=o("from_pretrained()"),pOo=o(" class method or the "),vX=a("a"),_Oo=o("from_config()"),uOo=o(` class
method.`),bOo=l(),uy=a("p"),vOo=o("This class cannot be instantiated directly using "),x_e=a("code"),FOo=o("__init__()"),TOo=o(" (throws an error)."),MOo=l(),gt=a("div"),F(by.$$.fragment),EOo=l(),$_e=a("p"),COo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wOo=l(),sd=a("p"),AOo=o(`Note:
Loading a model from its configuration file does `),k_e=a("strong"),LOo=o("not"),yOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),xOo=o("from_pretrained()"),$Oo=o(" to load the model weights."),kOo=l(),F(ev.$$.fragment),SOo=l(),ro=a("div"),F(vy.$$.fragment),ROo=l(),S_e=a("p"),POo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),BOo=l(),Ga=a("p"),IOo=o("The model class to instantiate is selected based on the "),R_e=a("code"),NOo=o("model_type"),qOo=o(` property of the config object (either
passed as an argument or loaded from `),P_e=a("code"),jOo=o("pretrained_model_name_or_path"),DOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),GOo=o("pretrained_model_name_or_path"),OOo=o(":"),VOo=l(),B=a("ul"),ov=a("li"),I_e=a("strong"),XOo=o("albert"),zOo=o(" \u2014 "),TX=a("a"),WOo=o("AlbertForSequenceClassification"),QOo=o(" (ALBERT model)"),HOo=l(),rv=a("li"),N_e=a("strong"),UOo=o("bart"),JOo=o(" \u2014 "),MX=a("a"),YOo=o("BartForSequenceClassification"),KOo=o(" (BART model)"),ZOo=l(),tv=a("li"),q_e=a("strong"),eVo=o("bert"),oVo=o(" \u2014 "),EX=a("a"),rVo=o("BertForSequenceClassification"),tVo=o(" (BERT model)"),aVo=l(),av=a("li"),j_e=a("strong"),nVo=o("big_bird"),sVo=o(" \u2014 "),CX=a("a"),lVo=o("BigBirdForSequenceClassification"),iVo=o(" (BigBird model)"),dVo=l(),nv=a("li"),D_e=a("strong"),cVo=o("bigbird_pegasus"),fVo=o(" \u2014 "),wX=a("a"),mVo=o("BigBirdPegasusForSequenceClassification"),gVo=o(" (BigBird-Pegasus model)"),hVo=l(),sv=a("li"),G_e=a("strong"),pVo=o("bloom"),_Vo=o(" \u2014 "),AX=a("a"),uVo=o("BloomForSequenceClassification"),bVo=o(" (BLOOM model)"),vVo=l(),lv=a("li"),O_e=a("strong"),FVo=o("camembert"),TVo=o(" \u2014 "),LX=a("a"),MVo=o("CamembertForSequenceClassification"),EVo=o(" (CamemBERT model)"),CVo=l(),iv=a("li"),V_e=a("strong"),wVo=o("canine"),AVo=o(" \u2014 "),yX=a("a"),LVo=o("CanineForSequenceClassification"),yVo=o(" (CANINE model)"),xVo=l(),dv=a("li"),X_e=a("strong"),$Vo=o("convbert"),kVo=o(" \u2014 "),xX=a("a"),SVo=o("ConvBertForSequenceClassification"),RVo=o(" (ConvBERT model)"),PVo=l(),cv=a("li"),z_e=a("strong"),BVo=o("ctrl"),IVo=o(" \u2014 "),$X=a("a"),NVo=o("CTRLForSequenceClassification"),qVo=o(" (CTRL model)"),jVo=l(),fv=a("li"),W_e=a("strong"),DVo=o("data2vec-text"),GVo=o(" \u2014 "),kX=a("a"),OVo=o("Data2VecTextForSequenceClassification"),VVo=o(" (Data2VecText model)"),XVo=l(),mv=a("li"),Q_e=a("strong"),zVo=o("deberta"),WVo=o(" \u2014 "),SX=a("a"),QVo=o("DebertaForSequenceClassification"),HVo=o(" (DeBERTa model)"),UVo=l(),gv=a("li"),H_e=a("strong"),JVo=o("deberta-v2"),YVo=o(" \u2014 "),RX=a("a"),KVo=o("DebertaV2ForSequenceClassification"),ZVo=o(" (DeBERTa-v2 model)"),eXo=l(),hv=a("li"),U_e=a("strong"),oXo=o("distilbert"),rXo=o(" \u2014 "),PX=a("a"),tXo=o("DistilBertForSequenceClassification"),aXo=o(" (DistilBERT model)"),nXo=l(),pv=a("li"),J_e=a("strong"),sXo=o("electra"),lXo=o(" \u2014 "),BX=a("a"),iXo=o("ElectraForSequenceClassification"),dXo=o(" (ELECTRA model)"),cXo=l(),_v=a("li"),Y_e=a("strong"),fXo=o("flaubert"),mXo=o(" \u2014 "),IX=a("a"),gXo=o("FlaubertForSequenceClassification"),hXo=o(" (FlauBERT model)"),pXo=l(),uv=a("li"),K_e=a("strong"),_Xo=o("fnet"),uXo=o(" \u2014 "),NX=a("a"),bXo=o("FNetForSequenceClassification"),vXo=o(" (FNet model)"),FXo=l(),bv=a("li"),Z_e=a("strong"),TXo=o("funnel"),MXo=o(" \u2014 "),qX=a("a"),EXo=o("FunnelForSequenceClassification"),CXo=o(" (Funnel Transformer model)"),wXo=l(),vv=a("li"),eue=a("strong"),AXo=o("gpt2"),LXo=o(" \u2014 "),jX=a("a"),yXo=o("GPT2ForSequenceClassification"),xXo=o(" (OpenAI GPT-2 model)"),$Xo=l(),Fv=a("li"),oue=a("strong"),kXo=o("gpt_neo"),SXo=o(" \u2014 "),DX=a("a"),RXo=o("GPTNeoForSequenceClassification"),PXo=o(" (GPT Neo model)"),BXo=l(),Tv=a("li"),rue=a("strong"),IXo=o("gptj"),NXo=o(" \u2014 "),GX=a("a"),qXo=o("GPTJForSequenceClassification"),jXo=o(" (GPT-J model)"),DXo=l(),Mv=a("li"),tue=a("strong"),GXo=o("ibert"),OXo=o(" \u2014 "),OX=a("a"),VXo=o("IBertForSequenceClassification"),XXo=o(" (I-BERT model)"),zXo=l(),Ev=a("li"),aue=a("strong"),WXo=o("layoutlm"),QXo=o(" \u2014 "),VX=a("a"),HXo=o("LayoutLMForSequenceClassification"),UXo=o(" (LayoutLM model)"),JXo=l(),Cv=a("li"),nue=a("strong"),YXo=o("layoutlmv2"),KXo=o(" \u2014 "),XX=a("a"),ZXo=o("LayoutLMv2ForSequenceClassification"),ezo=o(" (LayoutLMv2 model)"),ozo=l(),wv=a("li"),sue=a("strong"),rzo=o("layoutlmv3"),tzo=o(" \u2014 "),zX=a("a"),azo=o("LayoutLMv3ForSequenceClassification"),nzo=o(" (LayoutLMv3 model)"),szo=l(),Av=a("li"),lue=a("strong"),lzo=o("led"),izo=o(" \u2014 "),WX=a("a"),dzo=o("LEDForSequenceClassification"),czo=o(" (LED model)"),fzo=l(),Lv=a("li"),iue=a("strong"),mzo=o("longformer"),gzo=o(" \u2014 "),QX=a("a"),hzo=o("LongformerForSequenceClassification"),pzo=o(" (Longformer model)"),_zo=l(),yv=a("li"),due=a("strong"),uzo=o("mbart"),bzo=o(" \u2014 "),HX=a("a"),vzo=o("MBartForSequenceClassification"),Fzo=o(" (mBART model)"),Tzo=l(),xv=a("li"),cue=a("strong"),Mzo=o("megatron-bert"),Ezo=o(" \u2014 "),UX=a("a"),Czo=o("MegatronBertForSequenceClassification"),wzo=o(" (Megatron-BERT model)"),Azo=l(),$v=a("li"),fue=a("strong"),Lzo=o("mobilebert"),yzo=o(" \u2014 "),JX=a("a"),xzo=o("MobileBertForSequenceClassification"),$zo=o(" (MobileBERT model)"),kzo=l(),kv=a("li"),mue=a("strong"),Szo=o("mpnet"),Rzo=o(" \u2014 "),YX=a("a"),Pzo=o("MPNetForSequenceClassification"),Bzo=o(" (MPNet model)"),Izo=l(),Sv=a("li"),gue=a("strong"),Nzo=o("mvp"),qzo=o(" \u2014 "),KX=a("a"),jzo=o("MvpForSequenceClassification"),Dzo=o(" (MVP model)"),Gzo=l(),Rv=a("li"),hue=a("strong"),Ozo=o("nezha"),Vzo=o(" \u2014 "),ZX=a("a"),Xzo=o("NezhaForSequenceClassification"),zzo=o(" (Nezha model)"),Wzo=l(),Pv=a("li"),pue=a("strong"),Qzo=o("nystromformer"),Hzo=o(" \u2014 "),ez=a("a"),Uzo=o("NystromformerForSequenceClassification"),Jzo=o(" (Nystr\xF6mformer model)"),Yzo=l(),Bv=a("li"),_ue=a("strong"),Kzo=o("openai-gpt"),Zzo=o(" \u2014 "),oz=a("a"),eWo=o("OpenAIGPTForSequenceClassification"),oWo=o(" (OpenAI GPT model)"),rWo=l(),Iv=a("li"),uue=a("strong"),tWo=o("opt"),aWo=o(" \u2014 "),rz=a("a"),nWo=o("OPTForSequenceClassification"),sWo=o(" (OPT model)"),lWo=l(),Nv=a("li"),bue=a("strong"),iWo=o("perceiver"),dWo=o(" \u2014 "),tz=a("a"),cWo=o("PerceiverForSequenceClassification"),fWo=o(" (Perceiver model)"),mWo=l(),qv=a("li"),vue=a("strong"),gWo=o("plbart"),hWo=o(" \u2014 "),az=a("a"),pWo=o("PLBartForSequenceClassification"),_Wo=o(" (PLBart model)"),uWo=l(),jv=a("li"),Fue=a("strong"),bWo=o("qdqbert"),vWo=o(" \u2014 "),nz=a("a"),FWo=o("QDQBertForSequenceClassification"),TWo=o(" (QDQBert model)"),MWo=l(),Dv=a("li"),Tue=a("strong"),EWo=o("reformer"),CWo=o(" \u2014 "),sz=a("a"),wWo=o("ReformerForSequenceClassification"),AWo=o(" (Reformer model)"),LWo=l(),Gv=a("li"),Mue=a("strong"),yWo=o("rembert"),xWo=o(" \u2014 "),lz=a("a"),$Wo=o("RemBertForSequenceClassification"),kWo=o(" (RemBERT model)"),SWo=l(),Ov=a("li"),Eue=a("strong"),RWo=o("roberta"),PWo=o(" \u2014 "),iz=a("a"),BWo=o("RobertaForSequenceClassification"),IWo=o(" (RoBERTa model)"),NWo=l(),Vv=a("li"),Cue=a("strong"),qWo=o("roformer"),jWo=o(" \u2014 "),dz=a("a"),DWo=o("RoFormerForSequenceClassification"),GWo=o(" (RoFormer model)"),OWo=l(),Xv=a("li"),wue=a("strong"),VWo=o("squeezebert"),XWo=o(" \u2014 "),cz=a("a"),zWo=o("SqueezeBertForSequenceClassification"),WWo=o(" (SqueezeBERT model)"),QWo=l(),zv=a("li"),Aue=a("strong"),HWo=o("tapas"),UWo=o(" \u2014 "),fz=a("a"),JWo=o("TapasForSequenceClassification"),YWo=o(" (TAPAS model)"),KWo=l(),Wv=a("li"),Lue=a("strong"),ZWo=o("transfo-xl"),eQo=o(" \u2014 "),mz=a("a"),oQo=o("TransfoXLForSequenceClassification"),rQo=o(" (Transformer-XL model)"),tQo=l(),Qv=a("li"),yue=a("strong"),aQo=o("xlm"),nQo=o(" \u2014 "),gz=a("a"),sQo=o("XLMForSequenceClassification"),lQo=o(" (XLM model)"),iQo=l(),Hv=a("li"),xue=a("strong"),dQo=o("xlm-roberta"),cQo=o(" \u2014 "),hz=a("a"),fQo=o("XLMRobertaForSequenceClassification"),mQo=o(" (XLM-RoBERTa model)"),gQo=l(),Uv=a("li"),$ue=a("strong"),hQo=o("xlm-roberta-xl"),pQo=o(" \u2014 "),pz=a("a"),_Qo=o("XLMRobertaXLForSequenceClassification"),uQo=o(" (XLM-RoBERTa-XL model)"),bQo=l(),Jv=a("li"),kue=a("strong"),vQo=o("xlnet"),FQo=o(" \u2014 "),_z=a("a"),TQo=o("XLNetForSequenceClassification"),MQo=o(" (XLNet model)"),EQo=l(),Yv=a("li"),Sue=a("strong"),CQo=o("yoso"),wQo=o(" \u2014 "),uz=a("a"),AQo=o("YosoForSequenceClassification"),LQo=o(" (YOSO model)"),yQo=l(),Kv=a("p"),xQo=o("The model is set in evaluation mode by default using "),Rue=a("code"),$Qo=o("model.eval()"),kQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=a("code"),SQo=o("model.train()"),RQo=l(),F(Zv.$$.fragment),Aze=l(),ld=a("h2"),eF=a("a"),Bue=a("span"),F(Fy.$$.fragment),PQo=l(),Iue=a("span"),BQo=o("AutoModelForMultipleChoice"),Lze=l(),No=a("div"),F(Ty.$$.fragment),IQo=l(),id=a("p"),NQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bz=a("a"),qQo=o("from_pretrained()"),jQo=o(" class method or the "),vz=a("a"),DQo=o("from_config()"),GQo=o(` class
method.`),OQo=l(),My=a("p"),VQo=o("This class cannot be instantiated directly using "),Nue=a("code"),XQo=o("__init__()"),zQo=o(" (throws an error)."),WQo=l(),ht=a("div"),F(Ey.$$.fragment),QQo=l(),que=a("p"),HQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UQo=l(),dd=a("p"),JQo=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),YQo=o("not"),KQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),ZQo=o("from_pretrained()"),eHo=o(" to load the model weights."),oHo=l(),F(oF.$$.fragment),rHo=l(),to=a("div"),F(Cy.$$.fragment),tHo=l(),Due=a("p"),aHo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nHo=l(),Oa=a("p"),sHo=o("The model class to instantiate is selected based on the "),Gue=a("code"),lHo=o("model_type"),iHo=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),dHo=o("pretrained_model_name_or_path"),cHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),fHo=o("pretrained_model_name_or_path"),mHo=o(":"),gHo=l(),Z=a("ul"),rF=a("li"),Xue=a("strong"),hHo=o("albert"),pHo=o(" \u2014 "),Tz=a("a"),_Ho=o("AlbertForMultipleChoice"),uHo=o(" (ALBERT model)"),bHo=l(),tF=a("li"),zue=a("strong"),vHo=o("bert"),FHo=o(" \u2014 "),Mz=a("a"),THo=o("BertForMultipleChoice"),MHo=o(" (BERT model)"),EHo=l(),aF=a("li"),Wue=a("strong"),CHo=o("big_bird"),wHo=o(" \u2014 "),Ez=a("a"),AHo=o("BigBirdForMultipleChoice"),LHo=o(" (BigBird model)"),yHo=l(),nF=a("li"),Que=a("strong"),xHo=o("camembert"),$Ho=o(" \u2014 "),Cz=a("a"),kHo=o("CamembertForMultipleChoice"),SHo=o(" (CamemBERT model)"),RHo=l(),sF=a("li"),Hue=a("strong"),PHo=o("canine"),BHo=o(" \u2014 "),wz=a("a"),IHo=o("CanineForMultipleChoice"),NHo=o(" (CANINE model)"),qHo=l(),lF=a("li"),Uue=a("strong"),jHo=o("convbert"),DHo=o(" \u2014 "),Az=a("a"),GHo=o("ConvBertForMultipleChoice"),OHo=o(" (ConvBERT model)"),VHo=l(),iF=a("li"),Jue=a("strong"),XHo=o("data2vec-text"),zHo=o(" \u2014 "),Lz=a("a"),WHo=o("Data2VecTextForMultipleChoice"),QHo=o(" (Data2VecText model)"),HHo=l(),dF=a("li"),Yue=a("strong"),UHo=o("deberta-v2"),JHo=o(" \u2014 "),yz=a("a"),YHo=o("DebertaV2ForMultipleChoice"),KHo=o(" (DeBERTa-v2 model)"),ZHo=l(),cF=a("li"),Kue=a("strong"),eUo=o("distilbert"),oUo=o(" \u2014 "),xz=a("a"),rUo=o("DistilBertForMultipleChoice"),tUo=o(" (DistilBERT model)"),aUo=l(),fF=a("li"),Zue=a("strong"),nUo=o("electra"),sUo=o(" \u2014 "),$z=a("a"),lUo=o("ElectraForMultipleChoice"),iUo=o(" (ELECTRA model)"),dUo=l(),mF=a("li"),e2e=a("strong"),cUo=o("flaubert"),fUo=o(" \u2014 "),kz=a("a"),mUo=o("FlaubertForMultipleChoice"),gUo=o(" (FlauBERT model)"),hUo=l(),gF=a("li"),o2e=a("strong"),pUo=o("fnet"),_Uo=o(" \u2014 "),Sz=a("a"),uUo=o("FNetForMultipleChoice"),bUo=o(" (FNet model)"),vUo=l(),hF=a("li"),r2e=a("strong"),FUo=o("funnel"),TUo=o(" \u2014 "),Rz=a("a"),MUo=o("FunnelForMultipleChoice"),EUo=o(" (Funnel Transformer model)"),CUo=l(),pF=a("li"),t2e=a("strong"),wUo=o("ibert"),AUo=o(" \u2014 "),Pz=a("a"),LUo=o("IBertForMultipleChoice"),yUo=o(" (I-BERT model)"),xUo=l(),_F=a("li"),a2e=a("strong"),$Uo=o("longformer"),kUo=o(" \u2014 "),Bz=a("a"),SUo=o("LongformerForMultipleChoice"),RUo=o(" (Longformer model)"),PUo=l(),uF=a("li"),n2e=a("strong"),BUo=o("megatron-bert"),IUo=o(" \u2014 "),Iz=a("a"),NUo=o("MegatronBertForMultipleChoice"),qUo=o(" (Megatron-BERT model)"),jUo=l(),bF=a("li"),s2e=a("strong"),DUo=o("mobilebert"),GUo=o(" \u2014 "),Nz=a("a"),OUo=o("MobileBertForMultipleChoice"),VUo=o(" (MobileBERT model)"),XUo=l(),vF=a("li"),l2e=a("strong"),zUo=o("mpnet"),WUo=o(" \u2014 "),qz=a("a"),QUo=o("MPNetForMultipleChoice"),HUo=o(" (MPNet model)"),UUo=l(),FF=a("li"),i2e=a("strong"),JUo=o("nezha"),YUo=o(" \u2014 "),jz=a("a"),KUo=o("NezhaForMultipleChoice"),ZUo=o(" (Nezha model)"),eJo=l(),TF=a("li"),d2e=a("strong"),oJo=o("nystromformer"),rJo=o(" \u2014 "),Dz=a("a"),tJo=o("NystromformerForMultipleChoice"),aJo=o(" (Nystr\xF6mformer model)"),nJo=l(),MF=a("li"),c2e=a("strong"),sJo=o("qdqbert"),lJo=o(" \u2014 "),Gz=a("a"),iJo=o("QDQBertForMultipleChoice"),dJo=o(" (QDQBert model)"),cJo=l(),EF=a("li"),f2e=a("strong"),fJo=o("rembert"),mJo=o(" \u2014 "),Oz=a("a"),gJo=o("RemBertForMultipleChoice"),hJo=o(" (RemBERT model)"),pJo=l(),CF=a("li"),m2e=a("strong"),_Jo=o("roberta"),uJo=o(" \u2014 "),Vz=a("a"),bJo=o("RobertaForMultipleChoice"),vJo=o(" (RoBERTa model)"),FJo=l(),wF=a("li"),g2e=a("strong"),TJo=o("roformer"),MJo=o(" \u2014 "),Xz=a("a"),EJo=o("RoFormerForMultipleChoice"),CJo=o(" (RoFormer model)"),wJo=l(),AF=a("li"),h2e=a("strong"),AJo=o("squeezebert"),LJo=o(" \u2014 "),zz=a("a"),yJo=o("SqueezeBertForMultipleChoice"),xJo=o(" (SqueezeBERT model)"),$Jo=l(),LF=a("li"),p2e=a("strong"),kJo=o("xlm"),SJo=o(" \u2014 "),Wz=a("a"),RJo=o("XLMForMultipleChoice"),PJo=o(" (XLM model)"),BJo=l(),yF=a("li"),_2e=a("strong"),IJo=o("xlm-roberta"),NJo=o(" \u2014 "),Qz=a("a"),qJo=o("XLMRobertaForMultipleChoice"),jJo=o(" (XLM-RoBERTa model)"),DJo=l(),xF=a("li"),u2e=a("strong"),GJo=o("xlm-roberta-xl"),OJo=o(" \u2014 "),Hz=a("a"),VJo=o("XLMRobertaXLForMultipleChoice"),XJo=o(" (XLM-RoBERTa-XL model)"),zJo=l(),$F=a("li"),b2e=a("strong"),WJo=o("xlnet"),QJo=o(" \u2014 "),Uz=a("a"),HJo=o("XLNetForMultipleChoice"),UJo=o(" (XLNet model)"),JJo=l(),kF=a("li"),v2e=a("strong"),YJo=o("yoso"),KJo=o(" \u2014 "),Jz=a("a"),ZJo=o("YosoForMultipleChoice"),eYo=o(" (YOSO model)"),oYo=l(),SF=a("p"),rYo=o("The model is set in evaluation mode by default using "),F2e=a("code"),tYo=o("model.eval()"),aYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=a("code"),nYo=o("model.train()"),sYo=l(),F(RF.$$.fragment),yze=l(),cd=a("h2"),PF=a("a"),M2e=a("span"),F(wy.$$.fragment),lYo=l(),E2e=a("span"),iYo=o("AutoModelForNextSentencePrediction"),xze=l(),qo=a("div"),F(Ay.$$.fragment),dYo=l(),fd=a("p"),cYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Yz=a("a"),fYo=o("from_pretrained()"),mYo=o(" class method or the "),Kz=a("a"),gYo=o("from_config()"),hYo=o(` class
method.`),pYo=l(),Ly=a("p"),_Yo=o("This class cannot be instantiated directly using "),C2e=a("code"),uYo=o("__init__()"),bYo=o(" (throws an error)."),vYo=l(),pt=a("div"),F(yy.$$.fragment),FYo=l(),w2e=a("p"),TYo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MYo=l(),md=a("p"),EYo=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),CYo=o("not"),wYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),AYo=o("from_pretrained()"),LYo=o(" to load the model weights."),yYo=l(),F(BF.$$.fragment),xYo=l(),ao=a("div"),F(xy.$$.fragment),$Yo=l(),L2e=a("p"),kYo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SYo=l(),Va=a("p"),RYo=o("The model class to instantiate is selected based on the "),y2e=a("code"),PYo=o("model_type"),BYo=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),IYo=o("pretrained_model_name_or_path"),NYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),qYo=o("pretrained_model_name_or_path"),jYo=o(":"),DYo=l(),jo=a("ul"),IF=a("li"),k2e=a("strong"),GYo=o("bert"),OYo=o(" \u2014 "),eW=a("a"),VYo=o("BertForNextSentencePrediction"),XYo=o(" (BERT model)"),zYo=l(),NF=a("li"),S2e=a("strong"),WYo=o("fnet"),QYo=o(" \u2014 "),oW=a("a"),HYo=o("FNetForNextSentencePrediction"),UYo=o(" (FNet model)"),JYo=l(),qF=a("li"),R2e=a("strong"),YYo=o("megatron-bert"),KYo=o(" \u2014 "),rW=a("a"),ZYo=o("MegatronBertForNextSentencePrediction"),eKo=o(" (Megatron-BERT model)"),oKo=l(),jF=a("li"),P2e=a("strong"),rKo=o("mobilebert"),tKo=o(" \u2014 "),tW=a("a"),aKo=o("MobileBertForNextSentencePrediction"),nKo=o(" (MobileBERT model)"),sKo=l(),DF=a("li"),B2e=a("strong"),lKo=o("nezha"),iKo=o(" \u2014 "),aW=a("a"),dKo=o("NezhaForNextSentencePrediction"),cKo=o(" (Nezha model)"),fKo=l(),GF=a("li"),I2e=a("strong"),mKo=o("qdqbert"),gKo=o(" \u2014 "),nW=a("a"),hKo=o("QDQBertForNextSentencePrediction"),pKo=o(" (QDQBert model)"),_Ko=l(),OF=a("p"),uKo=o("The model is set in evaluation mode by default using "),N2e=a("code"),bKo=o("model.eval()"),vKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=a("code"),FKo=o("model.train()"),TKo=l(),F(VF.$$.fragment),$ze=l(),gd=a("h2"),XF=a("a"),j2e=a("span"),F($y.$$.fragment),MKo=l(),D2e=a("span"),EKo=o("AutoModelForTokenClassification"),kze=l(),Do=a("div"),F(ky.$$.fragment),CKo=l(),hd=a("p"),wKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sW=a("a"),AKo=o("from_pretrained()"),LKo=o(" class method or the "),lW=a("a"),yKo=o("from_config()"),xKo=o(` class
method.`),$Ko=l(),Sy=a("p"),kKo=o("This class cannot be instantiated directly using "),G2e=a("code"),SKo=o("__init__()"),RKo=o(" (throws an error)."),PKo=l(),_t=a("div"),F(Ry.$$.fragment),BKo=l(),O2e=a("p"),IKo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),NKo=l(),pd=a("p"),qKo=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),jKo=o("not"),DKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),GKo=o("from_pretrained()"),OKo=o(" to load the model weights."),VKo=l(),F(zF.$$.fragment),XKo=l(),no=a("div"),F(Py.$$.fragment),zKo=l(),X2e=a("p"),WKo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QKo=l(),Xa=a("p"),HKo=o("The model class to instantiate is selected based on the "),z2e=a("code"),UKo=o("model_type"),JKo=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),YKo=o("pretrained_model_name_or_path"),KKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),ZKo=o("pretrained_model_name_or_path"),eZo=o(":"),oZo=l(),U=a("ul"),WF=a("li"),H2e=a("strong"),rZo=o("albert"),tZo=o(" \u2014 "),dW=a("a"),aZo=o("AlbertForTokenClassification"),nZo=o(" (ALBERT model)"),sZo=l(),QF=a("li"),U2e=a("strong"),lZo=o("bert"),iZo=o(" \u2014 "),cW=a("a"),dZo=o("BertForTokenClassification"),cZo=o(" (BERT model)"),fZo=l(),HF=a("li"),J2e=a("strong"),mZo=o("big_bird"),gZo=o(" \u2014 "),fW=a("a"),hZo=o("BigBirdForTokenClassification"),pZo=o(" (BigBird model)"),_Zo=l(),UF=a("li"),Y2e=a("strong"),uZo=o("bloom"),bZo=o(" \u2014 "),mW=a("a"),vZo=o("BloomForTokenClassification"),FZo=o(" (BLOOM model)"),TZo=l(),JF=a("li"),K2e=a("strong"),MZo=o("camembert"),EZo=o(" \u2014 "),gW=a("a"),CZo=o("CamembertForTokenClassification"),wZo=o(" (CamemBERT model)"),AZo=l(),YF=a("li"),Z2e=a("strong"),LZo=o("canine"),yZo=o(" \u2014 "),hW=a("a"),xZo=o("CanineForTokenClassification"),$Zo=o(" (CANINE model)"),kZo=l(),KF=a("li"),e1e=a("strong"),SZo=o("convbert"),RZo=o(" \u2014 "),pW=a("a"),PZo=o("ConvBertForTokenClassification"),BZo=o(" (ConvBERT model)"),IZo=l(),ZF=a("li"),o1e=a("strong"),NZo=o("data2vec-text"),qZo=o(" \u2014 "),_W=a("a"),jZo=o("Data2VecTextForTokenClassification"),DZo=o(" (Data2VecText model)"),GZo=l(),e6=a("li"),r1e=a("strong"),OZo=o("deberta"),VZo=o(" \u2014 "),uW=a("a"),XZo=o("DebertaForTokenClassification"),zZo=o(" (DeBERTa model)"),WZo=l(),o6=a("li"),t1e=a("strong"),QZo=o("deberta-v2"),HZo=o(" \u2014 "),bW=a("a"),UZo=o("DebertaV2ForTokenClassification"),JZo=o(" (DeBERTa-v2 model)"),YZo=l(),r6=a("li"),a1e=a("strong"),KZo=o("distilbert"),ZZo=o(" \u2014 "),vW=a("a"),eer=o("DistilBertForTokenClassification"),oer=o(" (DistilBERT model)"),rer=l(),t6=a("li"),n1e=a("strong"),ter=o("electra"),aer=o(" \u2014 "),FW=a("a"),ner=o("ElectraForTokenClassification"),ser=o(" (ELECTRA model)"),ler=l(),a6=a("li"),s1e=a("strong"),ier=o("flaubert"),der=o(" \u2014 "),TW=a("a"),cer=o("FlaubertForTokenClassification"),fer=o(" (FlauBERT model)"),mer=l(),n6=a("li"),l1e=a("strong"),ger=o("fnet"),her=o(" \u2014 "),MW=a("a"),per=o("FNetForTokenClassification"),_er=o(" (FNet model)"),uer=l(),s6=a("li"),i1e=a("strong"),ber=o("funnel"),ver=o(" \u2014 "),EW=a("a"),Fer=o("FunnelForTokenClassification"),Ter=o(" (Funnel Transformer model)"),Mer=l(),l6=a("li"),d1e=a("strong"),Eer=o("gpt2"),Cer=o(" \u2014 "),CW=a("a"),wer=o("GPT2ForTokenClassification"),Aer=o(" (OpenAI GPT-2 model)"),Ler=l(),i6=a("li"),c1e=a("strong"),yer=o("ibert"),xer=o(" \u2014 "),wW=a("a"),$er=o("IBertForTokenClassification"),ker=o(" (I-BERT model)"),Ser=l(),d6=a("li"),f1e=a("strong"),Rer=o("layoutlm"),Per=o(" \u2014 "),AW=a("a"),Ber=o("LayoutLMForTokenClassification"),Ier=o(" (LayoutLM model)"),Ner=l(),c6=a("li"),m1e=a("strong"),qer=o("layoutlmv2"),jer=o(" \u2014 "),LW=a("a"),Der=o("LayoutLMv2ForTokenClassification"),Ger=o(" (LayoutLMv2 model)"),Oer=l(),f6=a("li"),g1e=a("strong"),Ver=o("layoutlmv3"),Xer=o(" \u2014 "),yW=a("a"),zer=o("LayoutLMv3ForTokenClassification"),Wer=o(" (LayoutLMv3 model)"),Qer=l(),m6=a("li"),h1e=a("strong"),Her=o("longformer"),Uer=o(" \u2014 "),xW=a("a"),Jer=o("LongformerForTokenClassification"),Yer=o(" (Longformer model)"),Ker=l(),g6=a("li"),p1e=a("strong"),Zer=o("megatron-bert"),eor=o(" \u2014 "),$W=a("a"),oor=o("MegatronBertForTokenClassification"),ror=o(" (Megatron-BERT model)"),tor=l(),h6=a("li"),_1e=a("strong"),aor=o("mobilebert"),nor=o(" \u2014 "),kW=a("a"),sor=o("MobileBertForTokenClassification"),lor=o(" (MobileBERT model)"),ior=l(),p6=a("li"),u1e=a("strong"),dor=o("mpnet"),cor=o(" \u2014 "),SW=a("a"),mor=o("MPNetForTokenClassification"),gor=o(" (MPNet model)"),hor=l(),_6=a("li"),b1e=a("strong"),por=o("nezha"),_or=o(" \u2014 "),RW=a("a"),uor=o("NezhaForTokenClassification"),bor=o(" (Nezha model)"),vor=l(),u6=a("li"),v1e=a("strong"),For=o("nystromformer"),Tor=o(" \u2014 "),PW=a("a"),Mor=o("NystromformerForTokenClassification"),Eor=o(" (Nystr\xF6mformer model)"),Cor=l(),b6=a("li"),F1e=a("strong"),wor=o("qdqbert"),Aor=o(" \u2014 "),BW=a("a"),Lor=o("QDQBertForTokenClassification"),yor=o(" (QDQBert model)"),xor=l(),v6=a("li"),T1e=a("strong"),$or=o("rembert"),kor=o(" \u2014 "),IW=a("a"),Sor=o("RemBertForTokenClassification"),Ror=o(" (RemBERT model)"),Por=l(),F6=a("li"),M1e=a("strong"),Bor=o("roberta"),Ior=o(" \u2014 "),NW=a("a"),Nor=o("RobertaForTokenClassification"),qor=o(" (RoBERTa model)"),jor=l(),T6=a("li"),E1e=a("strong"),Dor=o("roformer"),Gor=o(" \u2014 "),qW=a("a"),Oor=o("RoFormerForTokenClassification"),Vor=o(" (RoFormer model)"),Xor=l(),M6=a("li"),C1e=a("strong"),zor=o("squeezebert"),Wor=o(" \u2014 "),jW=a("a"),Qor=o("SqueezeBertForTokenClassification"),Hor=o(" (SqueezeBERT model)"),Uor=l(),E6=a("li"),w1e=a("strong"),Jor=o("xlm"),Yor=o(" \u2014 "),DW=a("a"),Kor=o("XLMForTokenClassification"),Zor=o(" (XLM model)"),err=l(),C6=a("li"),A1e=a("strong"),orr=o("xlm-roberta"),rrr=o(" \u2014 "),GW=a("a"),trr=o("XLMRobertaForTokenClassification"),arr=o(" (XLM-RoBERTa model)"),nrr=l(),w6=a("li"),L1e=a("strong"),srr=o("xlm-roberta-xl"),lrr=o(" \u2014 "),OW=a("a"),irr=o("XLMRobertaXLForTokenClassification"),drr=o(" (XLM-RoBERTa-XL model)"),crr=l(),A6=a("li"),y1e=a("strong"),frr=o("xlnet"),mrr=o(" \u2014 "),VW=a("a"),grr=o("XLNetForTokenClassification"),hrr=o(" (XLNet model)"),prr=l(),L6=a("li"),x1e=a("strong"),_rr=o("yoso"),urr=o(" \u2014 "),XW=a("a"),brr=o("YosoForTokenClassification"),vrr=o(" (YOSO model)"),Frr=l(),y6=a("p"),Trr=o("The model is set in evaluation mode by default using "),$1e=a("code"),Mrr=o("model.eval()"),Err=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k1e=a("code"),Crr=o("model.train()"),wrr=l(),F(x6.$$.fragment),Sze=l(),_d=a("h2"),$6=a("a"),S1e=a("span"),F(By.$$.fragment),Arr=l(),R1e=a("span"),Lrr=o("AutoModelForQuestionAnswering"),Rze=l(),Go=a("div"),F(Iy.$$.fragment),yrr=l(),ud=a("p"),xrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zW=a("a"),$rr=o("from_pretrained()"),krr=o(" class method or the "),WW=a("a"),Srr=o("from_config()"),Rrr=o(` class
method.`),Prr=l(),Ny=a("p"),Brr=o("This class cannot be instantiated directly using "),P1e=a("code"),Irr=o("__init__()"),Nrr=o(" (throws an error)."),qrr=l(),ut=a("div"),F(qy.$$.fragment),jrr=l(),B1e=a("p"),Drr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Grr=l(),bd=a("p"),Orr=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),Vrr=o("not"),Xrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),zrr=o("from_pretrained()"),Wrr=o(" to load the model weights."),Qrr=l(),F(k6.$$.fragment),Hrr=l(),so=a("div"),F(jy.$$.fragment),Urr=l(),N1e=a("p"),Jrr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Yrr=l(),za=a("p"),Krr=o("The model class to instantiate is selected based on the "),q1e=a("code"),Zrr=o("model_type"),etr=o(` property of the config object (either
passed as an argument or loaded from `),j1e=a("code"),otr=o("pretrained_model_name_or_path"),rtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=a("code"),ttr=o("pretrained_model_name_or_path"),atr=o(":"),ntr=l(),V=a("ul"),S6=a("li"),G1e=a("strong"),str=o("albert"),ltr=o(" \u2014 "),HW=a("a"),itr=o("AlbertForQuestionAnswering"),dtr=o(" (ALBERT model)"),ctr=l(),R6=a("li"),O1e=a("strong"),ftr=o("bart"),mtr=o(" \u2014 "),UW=a("a"),gtr=o("BartForQuestionAnswering"),htr=o(" (BART model)"),ptr=l(),P6=a("li"),V1e=a("strong"),_tr=o("bert"),utr=o(" \u2014 "),JW=a("a"),btr=o("BertForQuestionAnswering"),vtr=o(" (BERT model)"),Ftr=l(),B6=a("li"),X1e=a("strong"),Ttr=o("big_bird"),Mtr=o(" \u2014 "),YW=a("a"),Etr=o("BigBirdForQuestionAnswering"),Ctr=o(" (BigBird model)"),wtr=l(),I6=a("li"),z1e=a("strong"),Atr=o("bigbird_pegasus"),Ltr=o(" \u2014 "),KW=a("a"),ytr=o("BigBirdPegasusForQuestionAnswering"),xtr=o(" (BigBird-Pegasus model)"),$tr=l(),N6=a("li"),W1e=a("strong"),ktr=o("camembert"),Str=o(" \u2014 "),ZW=a("a"),Rtr=o("CamembertForQuestionAnswering"),Ptr=o(" (CamemBERT model)"),Btr=l(),q6=a("li"),Q1e=a("strong"),Itr=o("canine"),Ntr=o(" \u2014 "),eQ=a("a"),qtr=o("CanineForQuestionAnswering"),jtr=o(" (CANINE model)"),Dtr=l(),j6=a("li"),H1e=a("strong"),Gtr=o("convbert"),Otr=o(" \u2014 "),oQ=a("a"),Vtr=o("ConvBertForQuestionAnswering"),Xtr=o(" (ConvBERT model)"),ztr=l(),D6=a("li"),U1e=a("strong"),Wtr=o("data2vec-text"),Qtr=o(" \u2014 "),rQ=a("a"),Htr=o("Data2VecTextForQuestionAnswering"),Utr=o(" (Data2VecText model)"),Jtr=l(),G6=a("li"),J1e=a("strong"),Ytr=o("deberta"),Ktr=o(" \u2014 "),tQ=a("a"),Ztr=o("DebertaForQuestionAnswering"),ear=o(" (DeBERTa model)"),oar=l(),O6=a("li"),Y1e=a("strong"),rar=o("deberta-v2"),tar=o(" \u2014 "),aQ=a("a"),aar=o("DebertaV2ForQuestionAnswering"),nar=o(" (DeBERTa-v2 model)"),sar=l(),V6=a("li"),K1e=a("strong"),lar=o("distilbert"),iar=o(" \u2014 "),nQ=a("a"),dar=o("DistilBertForQuestionAnswering"),car=o(" (DistilBERT model)"),far=l(),X6=a("li"),Z1e=a("strong"),mar=o("electra"),gar=o(" \u2014 "),sQ=a("a"),har=o("ElectraForQuestionAnswering"),par=o(" (ELECTRA model)"),_ar=l(),z6=a("li"),ebe=a("strong"),uar=o("flaubert"),bar=o(" \u2014 "),lQ=a("a"),Far=o("FlaubertForQuestionAnsweringSimple"),Tar=o(" (FlauBERT model)"),Mar=l(),W6=a("li"),obe=a("strong"),Ear=o("fnet"),Car=o(" \u2014 "),iQ=a("a"),war=o("FNetForQuestionAnswering"),Aar=o(" (FNet model)"),Lar=l(),Q6=a("li"),rbe=a("strong"),yar=o("funnel"),xar=o(" \u2014 "),dQ=a("a"),$ar=o("FunnelForQuestionAnswering"),kar=o(" (Funnel Transformer model)"),Sar=l(),H6=a("li"),tbe=a("strong"),Rar=o("gptj"),Par=o(" \u2014 "),cQ=a("a"),Bar=o("GPTJForQuestionAnswering"),Iar=o(" (GPT-J model)"),Nar=l(),U6=a("li"),abe=a("strong"),qar=o("ibert"),jar=o(" \u2014 "),fQ=a("a"),Dar=o("IBertForQuestionAnswering"),Gar=o(" (I-BERT model)"),Oar=l(),J6=a("li"),nbe=a("strong"),Var=o("layoutlmv2"),Xar=o(" \u2014 "),mQ=a("a"),zar=o("LayoutLMv2ForQuestionAnswering"),War=o(" (LayoutLMv2 model)"),Qar=l(),Y6=a("li"),sbe=a("strong"),Har=o("layoutlmv3"),Uar=o(" \u2014 "),gQ=a("a"),Jar=o("LayoutLMv3ForQuestionAnswering"),Yar=o(" (LayoutLMv3 model)"),Kar=l(),K6=a("li"),lbe=a("strong"),Zar=o("led"),enr=o(" \u2014 "),hQ=a("a"),onr=o("LEDForQuestionAnswering"),rnr=o(" (LED model)"),tnr=l(),Z6=a("li"),ibe=a("strong"),anr=o("longformer"),nnr=o(" \u2014 "),pQ=a("a"),snr=o("LongformerForQuestionAnswering"),lnr=o(" (Longformer model)"),inr=l(),eT=a("li"),dbe=a("strong"),dnr=o("lxmert"),cnr=o(" \u2014 "),_Q=a("a"),fnr=o("LxmertForQuestionAnswering"),mnr=o(" (LXMERT model)"),gnr=l(),oT=a("li"),cbe=a("strong"),hnr=o("mbart"),pnr=o(" \u2014 "),uQ=a("a"),_nr=o("MBartForQuestionAnswering"),unr=o(" (mBART model)"),bnr=l(),rT=a("li"),fbe=a("strong"),vnr=o("megatron-bert"),Fnr=o(" \u2014 "),bQ=a("a"),Tnr=o("MegatronBertForQuestionAnswering"),Mnr=o(" (Megatron-BERT model)"),Enr=l(),tT=a("li"),mbe=a("strong"),Cnr=o("mobilebert"),wnr=o(" \u2014 "),vQ=a("a"),Anr=o("MobileBertForQuestionAnswering"),Lnr=o(" (MobileBERT model)"),ynr=l(),aT=a("li"),gbe=a("strong"),xnr=o("mpnet"),$nr=o(" \u2014 "),FQ=a("a"),knr=o("MPNetForQuestionAnswering"),Snr=o(" (MPNet model)"),Rnr=l(),nT=a("li"),hbe=a("strong"),Pnr=o("mvp"),Bnr=o(" \u2014 "),TQ=a("a"),Inr=o("MvpForQuestionAnswering"),Nnr=o(" (MVP model)"),qnr=l(),sT=a("li"),pbe=a("strong"),jnr=o("nezha"),Dnr=o(" \u2014 "),MQ=a("a"),Gnr=o("NezhaForQuestionAnswering"),Onr=o(" (Nezha model)"),Vnr=l(),lT=a("li"),_be=a("strong"),Xnr=o("nystromformer"),znr=o(" \u2014 "),EQ=a("a"),Wnr=o("NystromformerForQuestionAnswering"),Qnr=o(" (Nystr\xF6mformer model)"),Hnr=l(),iT=a("li"),ube=a("strong"),Unr=o("qdqbert"),Jnr=o(" \u2014 "),CQ=a("a"),Ynr=o("QDQBertForQuestionAnswering"),Knr=o(" (QDQBert model)"),Znr=l(),dT=a("li"),bbe=a("strong"),esr=o("reformer"),osr=o(" \u2014 "),wQ=a("a"),rsr=o("ReformerForQuestionAnswering"),tsr=o(" (Reformer model)"),asr=l(),cT=a("li"),vbe=a("strong"),nsr=o("rembert"),ssr=o(" \u2014 "),AQ=a("a"),lsr=o("RemBertForQuestionAnswering"),isr=o(" (RemBERT model)"),dsr=l(),fT=a("li"),Fbe=a("strong"),csr=o("roberta"),fsr=o(" \u2014 "),LQ=a("a"),msr=o("RobertaForQuestionAnswering"),gsr=o(" (RoBERTa model)"),hsr=l(),mT=a("li"),Tbe=a("strong"),psr=o("roformer"),_sr=o(" \u2014 "),yQ=a("a"),usr=o("RoFormerForQuestionAnswering"),bsr=o(" (RoFormer model)"),vsr=l(),gT=a("li"),Mbe=a("strong"),Fsr=o("splinter"),Tsr=o(" \u2014 "),xQ=a("a"),Msr=o("SplinterForQuestionAnswering"),Esr=o(" (Splinter model)"),Csr=l(),hT=a("li"),Ebe=a("strong"),wsr=o("squeezebert"),Asr=o(" \u2014 "),$Q=a("a"),Lsr=o("SqueezeBertForQuestionAnswering"),ysr=o(" (SqueezeBERT model)"),xsr=l(),pT=a("li"),Cbe=a("strong"),$sr=o("xlm"),ksr=o(" \u2014 "),kQ=a("a"),Ssr=o("XLMForQuestionAnsweringSimple"),Rsr=o(" (XLM model)"),Psr=l(),_T=a("li"),wbe=a("strong"),Bsr=o("xlm-roberta"),Isr=o(" \u2014 "),SQ=a("a"),Nsr=o("XLMRobertaForQuestionAnswering"),qsr=o(" (XLM-RoBERTa model)"),jsr=l(),uT=a("li"),Abe=a("strong"),Dsr=o("xlm-roberta-xl"),Gsr=o(" \u2014 "),RQ=a("a"),Osr=o("XLMRobertaXLForQuestionAnswering"),Vsr=o(" (XLM-RoBERTa-XL model)"),Xsr=l(),bT=a("li"),Lbe=a("strong"),zsr=o("xlnet"),Wsr=o(" \u2014 "),PQ=a("a"),Qsr=o("XLNetForQuestionAnsweringSimple"),Hsr=o(" (XLNet model)"),Usr=l(),vT=a("li"),ybe=a("strong"),Jsr=o("yoso"),Ysr=o(" \u2014 "),BQ=a("a"),Ksr=o("YosoForQuestionAnswering"),Zsr=o(" (YOSO model)"),elr=l(),FT=a("p"),olr=o("The model is set in evaluation mode by default using "),xbe=a("code"),rlr=o("model.eval()"),tlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=a("code"),alr=o("model.train()"),nlr=l(),F(TT.$$.fragment),Pze=l(),vd=a("h2"),MT=a("a"),kbe=a("span"),F(Dy.$$.fragment),slr=l(),Sbe=a("span"),llr=o("AutoModelForTableQuestionAnswering"),Bze=l(),Oo=a("div"),F(Gy.$$.fragment),ilr=l(),Fd=a("p"),dlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IQ=a("a"),clr=o("from_pretrained()"),flr=o(" class method or the "),NQ=a("a"),mlr=o("from_config()"),glr=o(` class
method.`),hlr=l(),Oy=a("p"),plr=o("This class cannot be instantiated directly using "),Rbe=a("code"),_lr=o("__init__()"),ulr=o(" (throws an error)."),blr=l(),bt=a("div"),F(Vy.$$.fragment),vlr=l(),Pbe=a("p"),Flr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Tlr=l(),Td=a("p"),Mlr=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),Elr=o("not"),Clr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=a("a"),wlr=o("from_pretrained()"),Alr=o(" to load the model weights."),Llr=l(),F(ET.$$.fragment),ylr=l(),lo=a("div"),F(Xy.$$.fragment),xlr=l(),Ibe=a("p"),$lr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),klr=l(),Wa=a("p"),Slr=o("The model class to instantiate is selected based on the "),Nbe=a("code"),Rlr=o("model_type"),Plr=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),Blr=o("pretrained_model_name_or_path"),Ilr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),Nlr=o("pretrained_model_name_or_path"),qlr=o(":"),jlr=l(),Dbe=a("ul"),CT=a("li"),Gbe=a("strong"),Dlr=o("tapas"),Glr=o(" \u2014 "),jQ=a("a"),Olr=o("TapasForQuestionAnswering"),Vlr=o(" (TAPAS model)"),Xlr=l(),wT=a("p"),zlr=o("The model is set in evaluation mode by default using "),Obe=a("code"),Wlr=o("model.eval()"),Qlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vbe=a("code"),Hlr=o("model.train()"),Ulr=l(),F(AT.$$.fragment),Ize=l(),Md=a("h2"),LT=a("a"),Xbe=a("span"),F(zy.$$.fragment),Jlr=l(),zbe=a("span"),Ylr=o("AutoModelForImageClassification"),Nze=l(),Vo=a("div"),F(Wy.$$.fragment),Klr=l(),Ed=a("p"),Zlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DQ=a("a"),eir=o("from_pretrained()"),oir=o(" class method or the "),GQ=a("a"),rir=o("from_config()"),tir=o(` class
method.`),air=l(),Qy=a("p"),nir=o("This class cannot be instantiated directly using "),Wbe=a("code"),sir=o("__init__()"),lir=o(" (throws an error)."),iir=l(),vt=a("div"),F(Hy.$$.fragment),dir=l(),Qbe=a("p"),cir=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fir=l(),Cd=a("p"),mir=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),gir=o("not"),hir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),pir=o("from_pretrained()"),_ir=o(" to load the model weights."),uir=l(),F(yT.$$.fragment),bir=l(),io=a("div"),F(Uy.$$.fragment),vir=l(),Ube=a("p"),Fir=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tir=l(),Qa=a("p"),Mir=o("The model class to instantiate is selected based on the "),Jbe=a("code"),Eir=o("model_type"),Cir=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),wir=o("pretrained_model_name_or_path"),Air=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),Lir=o("pretrained_model_name_or_path"),yir=o(":"),xir=l(),ve=a("ul"),xT=a("li"),Zbe=a("strong"),$ir=o("beit"),kir=o(" \u2014 "),VQ=a("a"),Sir=o("BeitForImageClassification"),Rir=o(" (BEiT model)"),Pir=l(),$T=a("li"),eve=a("strong"),Bir=o("convnext"),Iir=o(" \u2014 "),XQ=a("a"),Nir=o("ConvNextForImageClassification"),qir=o(" (ConvNeXT model)"),jir=l(),kT=a("li"),ove=a("strong"),Dir=o("cvt"),Gir=o(" \u2014 "),zQ=a("a"),Oir=o("CvtForImageClassification"),Vir=o(" (CvT model)"),Xir=l(),ST=a("li"),rve=a("strong"),zir=o("data2vec-vision"),Wir=o(" \u2014 "),WQ=a("a"),Qir=o("Data2VecVisionForImageClassification"),Hir=o(" (Data2VecVision model)"),Uir=l(),Js=a("li"),tve=a("strong"),Jir=o("deit"),Yir=o(" \u2014 "),QQ=a("a"),Kir=o("DeiTForImageClassification"),Zir=o(" or "),HQ=a("a"),edr=o("DeiTForImageClassificationWithTeacher"),odr=o(" (DeiT model)"),rdr=l(),RT=a("li"),ave=a("strong"),tdr=o("imagegpt"),adr=o(" \u2014 "),UQ=a("a"),ndr=o("ImageGPTForImageClassification"),sdr=o(" (ImageGPT model)"),ldr=l(),Ys=a("li"),nve=a("strong"),idr=o("levit"),ddr=o(" \u2014 "),JQ=a("a"),cdr=o("LevitForImageClassification"),fdr=o(" or "),YQ=a("a"),mdr=o("LevitForImageClassificationWithTeacher"),gdr=o(" (LeViT model)"),hdr=l(),PT=a("li"),sve=a("strong"),pdr=o("mobilevit"),_dr=o(" \u2014 "),KQ=a("a"),udr=o("MobileViTForImageClassification"),bdr=o(" (MobileViT model)"),vdr=l(),Ft=a("li"),lve=a("strong"),Fdr=o("perceiver"),Tdr=o(" \u2014 "),ZQ=a("a"),Mdr=o("PerceiverForImageClassificationLearned"),Edr=o(" or "),eH=a("a"),Cdr=o("PerceiverForImageClassificationFourier"),wdr=o(" or "),oH=a("a"),Adr=o("PerceiverForImageClassificationConvProcessing"),Ldr=o(" (Perceiver model)"),ydr=l(),BT=a("li"),ive=a("strong"),xdr=o("poolformer"),$dr=o(" \u2014 "),rH=a("a"),kdr=o("PoolFormerForImageClassification"),Sdr=o(" (PoolFormer model)"),Rdr=l(),IT=a("li"),dve=a("strong"),Pdr=o("regnet"),Bdr=o(" \u2014 "),tH=a("a"),Idr=o("RegNetForImageClassification"),Ndr=o(" (RegNet model)"),qdr=l(),NT=a("li"),cve=a("strong"),jdr=o("resnet"),Ddr=o(" \u2014 "),aH=a("a"),Gdr=o("ResNetForImageClassification"),Odr=o(" (ResNet model)"),Vdr=l(),qT=a("li"),fve=a("strong"),Xdr=o("segformer"),zdr=o(" \u2014 "),nH=a("a"),Wdr=o("SegformerForImageClassification"),Qdr=o(" (SegFormer model)"),Hdr=l(),jT=a("li"),mve=a("strong"),Udr=o("swin"),Jdr=o(" \u2014 "),sH=a("a"),Ydr=o("SwinForImageClassification"),Kdr=o(" (Swin Transformer model)"),Zdr=l(),DT=a("li"),gve=a("strong"),ecr=o("van"),ocr=o(" \u2014 "),lH=a("a"),rcr=o("VanForImageClassification"),tcr=o(" (VAN model)"),acr=l(),GT=a("li"),hve=a("strong"),ncr=o("vit"),scr=o(" \u2014 "),iH=a("a"),lcr=o("ViTForImageClassification"),icr=o(" (ViT model)"),dcr=l(),OT=a("p"),ccr=o("The model is set in evaluation mode by default using "),pve=a("code"),fcr=o("model.eval()"),mcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ve=a("code"),gcr=o("model.train()"),hcr=l(),F(VT.$$.fragment),qze=l(),wd=a("h2"),XT=a("a"),uve=a("span"),F(Jy.$$.fragment),pcr=l(),bve=a("span"),_cr=o("AutoModelForVision2Seq"),jze=l(),Xo=a("div"),F(Yy.$$.fragment),ucr=l(),Ad=a("p"),bcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dH=a("a"),vcr=o("from_pretrained()"),Fcr=o(" class method or the "),cH=a("a"),Tcr=o("from_config()"),Mcr=o(` class
method.`),Ecr=l(),Ky=a("p"),Ccr=o("This class cannot be instantiated directly using "),vve=a("code"),wcr=o("__init__()"),Acr=o(" (throws an error)."),Lcr=l(),Tt=a("div"),F(Zy.$$.fragment),ycr=l(),Fve=a("p"),xcr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$cr=l(),Ld=a("p"),kcr=o(`Note:
Loading a model from its configuration file does `),Tve=a("strong"),Scr=o("not"),Rcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),Pcr=o("from_pretrained()"),Bcr=o(" to load the model weights."),Icr=l(),F(zT.$$.fragment),Ncr=l(),co=a("div"),F(e9.$$.fragment),qcr=l(),Mve=a("p"),jcr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Dcr=l(),Ha=a("p"),Gcr=o("The model class to instantiate is selected based on the "),Eve=a("code"),Ocr=o("model_type"),Vcr=o(` property of the config object (either
passed as an argument or loaded from `),Cve=a("code"),Xcr=o("pretrained_model_name_or_path"),zcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),Wcr=o("pretrained_model_name_or_path"),Qcr=o(":"),Hcr=l(),Ave=a("ul"),WT=a("li"),Lve=a("strong"),Ucr=o("vision-encoder-decoder"),Jcr=o(" \u2014 "),mH=a("a"),Ycr=o("VisionEncoderDecoderModel"),Kcr=o(" (Vision Encoder decoder model)"),Zcr=l(),QT=a("p"),efr=o("The model is set in evaluation mode by default using "),yve=a("code"),ofr=o("model.eval()"),rfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=a("code"),tfr=o("model.train()"),afr=l(),F(HT.$$.fragment),Dze=l(),yd=a("h2"),UT=a("a"),$ve=a("span"),F(o9.$$.fragment),nfr=l(),kve=a("span"),sfr=o("AutoModelForVisualQuestionAnswering"),Gze=l(),zo=a("div"),F(r9.$$.fragment),lfr=l(),xd=a("p"),ifr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),gH=a("a"),dfr=o("from_pretrained()"),cfr=o(" class method or the "),hH=a("a"),ffr=o("from_config()"),mfr=o(` class
method.`),gfr=l(),t9=a("p"),hfr=o("This class cannot be instantiated directly using "),Sve=a("code"),pfr=o("__init__()"),_fr=o(" (throws an error)."),ufr=l(),Mt=a("div"),F(a9.$$.fragment),bfr=l(),Rve=a("p"),vfr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Ffr=l(),$d=a("p"),Tfr=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),Mfr=o("not"),Efr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),Cfr=o("from_pretrained()"),wfr=o(" to load the model weights."),Afr=l(),F(JT.$$.fragment),Lfr=l(),fo=a("div"),F(n9.$$.fragment),yfr=l(),Bve=a("p"),xfr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),$fr=l(),Ua=a("p"),kfr=o("The model class to instantiate is selected based on the "),Ive=a("code"),Sfr=o("model_type"),Rfr=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),Pfr=o("pretrained_model_name_or_path"),Bfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),Ifr=o("pretrained_model_name_or_path"),Nfr=o(":"),qfr=l(),jve=a("ul"),YT=a("li"),Dve=a("strong"),jfr=o("vilt"),Dfr=o(" \u2014 "),_H=a("a"),Gfr=o("ViltForQuestionAnswering"),Ofr=o(" (ViLT model)"),Vfr=l(),KT=a("p"),Xfr=o("The model is set in evaluation mode by default using "),Gve=a("code"),zfr=o("model.eval()"),Wfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=a("code"),Qfr=o("model.train()"),Hfr=l(),F(ZT.$$.fragment),Oze=l(),kd=a("h2"),e7=a("a"),Vve=a("span"),F(s9.$$.fragment),Ufr=l(),Xve=a("span"),Jfr=o("AutoModelForAudioClassification"),Vze=l(),Wo=a("div"),F(l9.$$.fragment),Yfr=l(),Sd=a("p"),Kfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),uH=a("a"),Zfr=o("from_pretrained()"),emr=o(" class method or the "),bH=a("a"),omr=o("from_config()"),rmr=o(` class
method.`),tmr=l(),i9=a("p"),amr=o("This class cannot be instantiated directly using "),zve=a("code"),nmr=o("__init__()"),smr=o(" (throws an error)."),lmr=l(),Et=a("div"),F(d9.$$.fragment),imr=l(),Wve=a("p"),dmr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),cmr=l(),Rd=a("p"),fmr=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),mmr=o("not"),gmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),hmr=o("from_pretrained()"),pmr=o(" to load the model weights."),_mr=l(),F(o7.$$.fragment),umr=l(),mo=a("div"),F(c9.$$.fragment),bmr=l(),Hve=a("p"),vmr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Fmr=l(),Ja=a("p"),Tmr=o("The model class to instantiate is selected based on the "),Uve=a("code"),Mmr=o("model_type"),Emr=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),Cmr=o("pretrained_model_name_or_path"),wmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),Amr=o("pretrained_model_name_or_path"),Lmr=o(":"),ymr=l(),Pe=a("ul"),r7=a("li"),Kve=a("strong"),xmr=o("data2vec-audio"),$mr=o(" \u2014 "),FH=a("a"),kmr=o("Data2VecAudioForSequenceClassification"),Smr=o(" (Data2VecAudio model)"),Rmr=l(),t7=a("li"),Zve=a("strong"),Pmr=o("hubert"),Bmr=o(" \u2014 "),TH=a("a"),Imr=o("HubertForSequenceClassification"),Nmr=o(" (Hubert model)"),qmr=l(),a7=a("li"),eFe=a("strong"),jmr=o("sew"),Dmr=o(" \u2014 "),MH=a("a"),Gmr=o("SEWForSequenceClassification"),Omr=o(" (SEW model)"),Vmr=l(),n7=a("li"),oFe=a("strong"),Xmr=o("sew-d"),zmr=o(" \u2014 "),EH=a("a"),Wmr=o("SEWDForSequenceClassification"),Qmr=o(" (SEW-D model)"),Hmr=l(),s7=a("li"),rFe=a("strong"),Umr=o("unispeech"),Jmr=o(" \u2014 "),CH=a("a"),Ymr=o("UniSpeechForSequenceClassification"),Kmr=o(" (UniSpeech model)"),Zmr=l(),l7=a("li"),tFe=a("strong"),egr=o("unispeech-sat"),ogr=o(" \u2014 "),wH=a("a"),rgr=o("UniSpeechSatForSequenceClassification"),tgr=o(" (UniSpeechSat model)"),agr=l(),i7=a("li"),aFe=a("strong"),ngr=o("wav2vec2"),sgr=o(" \u2014 "),AH=a("a"),lgr=o("Wav2Vec2ForSequenceClassification"),igr=o(" (Wav2Vec2 model)"),dgr=l(),d7=a("li"),nFe=a("strong"),cgr=o("wav2vec2-conformer"),fgr=o(" \u2014 "),LH=a("a"),mgr=o("Wav2Vec2ConformerForSequenceClassification"),ggr=o(" (Wav2Vec2-Conformer model)"),hgr=l(),c7=a("li"),sFe=a("strong"),pgr=o("wavlm"),_gr=o(" \u2014 "),yH=a("a"),ugr=o("WavLMForSequenceClassification"),bgr=o(" (WavLM model)"),vgr=l(),f7=a("p"),Fgr=o("The model is set in evaluation mode by default using "),lFe=a("code"),Tgr=o("model.eval()"),Mgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iFe=a("code"),Egr=o("model.train()"),Cgr=l(),F(m7.$$.fragment),Xze=l(),Pd=a("h2"),g7=a("a"),dFe=a("span"),F(f9.$$.fragment),wgr=l(),cFe=a("span"),Agr=o("AutoModelForAudioFrameClassification"),zze=l(),Qo=a("div"),F(m9.$$.fragment),Lgr=l(),Bd=a("p"),ygr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),xH=a("a"),xgr=o("from_pretrained()"),$gr=o(" class method or the "),$H=a("a"),kgr=o("from_config()"),Sgr=o(` class
method.`),Rgr=l(),g9=a("p"),Pgr=o("This class cannot be instantiated directly using "),fFe=a("code"),Bgr=o("__init__()"),Igr=o(" (throws an error)."),Ngr=l(),Ct=a("div"),F(h9.$$.fragment),qgr=l(),mFe=a("p"),jgr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Dgr=l(),Id=a("p"),Ggr=o(`Note:
Loading a model from its configuration file does `),gFe=a("strong"),Ogr=o("not"),Vgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),Xgr=o("from_pretrained()"),zgr=o(" to load the model weights."),Wgr=l(),F(h7.$$.fragment),Qgr=l(),go=a("div"),F(p9.$$.fragment),Hgr=l(),hFe=a("p"),Ugr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Jgr=l(),Ya=a("p"),Ygr=o("The model class to instantiate is selected based on the "),pFe=a("code"),Kgr=o("model_type"),Zgr=o(` property of the config object (either
passed as an argument or loaded from `),_Fe=a("code"),ehr=o("pretrained_model_name_or_path"),ohr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=a("code"),rhr=o("pretrained_model_name_or_path"),thr=o(":"),ahr=l(),rt=a("ul"),p7=a("li"),bFe=a("strong"),nhr=o("data2vec-audio"),shr=o(" \u2014 "),SH=a("a"),lhr=o("Data2VecAudioForAudioFrameClassification"),ihr=o(" (Data2VecAudio model)"),dhr=l(),_7=a("li"),vFe=a("strong"),chr=o("unispeech-sat"),fhr=o(" \u2014 "),RH=a("a"),mhr=o("UniSpeechSatForAudioFrameClassification"),ghr=o(" (UniSpeechSat model)"),hhr=l(),u7=a("li"),FFe=a("strong"),phr=o("wav2vec2"),_hr=o(" \u2014 "),PH=a("a"),uhr=o("Wav2Vec2ForAudioFrameClassification"),bhr=o(" (Wav2Vec2 model)"),vhr=l(),b7=a("li"),TFe=a("strong"),Fhr=o("wav2vec2-conformer"),Thr=o(" \u2014 "),BH=a("a"),Mhr=o("Wav2Vec2ConformerForAudioFrameClassification"),Ehr=o(" (Wav2Vec2-Conformer model)"),Chr=l(),v7=a("li"),MFe=a("strong"),whr=o("wavlm"),Ahr=o(" \u2014 "),IH=a("a"),Lhr=o("WavLMForAudioFrameClassification"),yhr=o(" (WavLM model)"),xhr=l(),F7=a("p"),$hr=o("The model is set in evaluation mode by default using "),EFe=a("code"),khr=o("model.eval()"),Shr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CFe=a("code"),Rhr=o("model.train()"),Phr=l(),F(T7.$$.fragment),Wze=l(),Nd=a("h2"),M7=a("a"),wFe=a("span"),F(_9.$$.fragment),Bhr=l(),AFe=a("span"),Ihr=o("AutoModelForCTC"),Qze=l(),Ho=a("div"),F(u9.$$.fragment),Nhr=l(),qd=a("p"),qhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),NH=a("a"),jhr=o("from_pretrained()"),Dhr=o(" class method or the "),qH=a("a"),Ghr=o("from_config()"),Ohr=o(` class
method.`),Vhr=l(),b9=a("p"),Xhr=o("This class cannot be instantiated directly using "),LFe=a("code"),zhr=o("__init__()"),Whr=o(" (throws an error)."),Qhr=l(),wt=a("div"),F(v9.$$.fragment),Hhr=l(),yFe=a("p"),Uhr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Jhr=l(),jd=a("p"),Yhr=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),Khr=o("not"),Zhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),epr=o("from_pretrained()"),opr=o(" to load the model weights."),rpr=l(),F(E7.$$.fragment),tpr=l(),ho=a("div"),F(F9.$$.fragment),apr=l(),$Fe=a("p"),npr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),spr=l(),Ka=a("p"),lpr=o("The model class to instantiate is selected based on the "),kFe=a("code"),ipr=o("model_type"),dpr=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),cpr=o("pretrained_model_name_or_path"),fpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),mpr=o("pretrained_model_name_or_path"),gpr=o(":"),hpr=l(),Le=a("ul"),C7=a("li"),PFe=a("strong"),ppr=o("data2vec-audio"),_pr=o(" \u2014 "),DH=a("a"),upr=o("Data2VecAudioForCTC"),bpr=o(" (Data2VecAudio model)"),vpr=l(),w7=a("li"),BFe=a("strong"),Fpr=o("hubert"),Tpr=o(" \u2014 "),GH=a("a"),Mpr=o("HubertForCTC"),Epr=o(" (Hubert model)"),Cpr=l(),A7=a("li"),IFe=a("strong"),wpr=o("mctct"),Apr=o(" \u2014 "),OH=a("a"),Lpr=o("MCTCTForCTC"),ypr=o(" (M-CTC-T model)"),xpr=l(),L7=a("li"),NFe=a("strong"),$pr=o("sew"),kpr=o(" \u2014 "),VH=a("a"),Spr=o("SEWForCTC"),Rpr=o(" (SEW model)"),Ppr=l(),y7=a("li"),qFe=a("strong"),Bpr=o("sew-d"),Ipr=o(" \u2014 "),XH=a("a"),Npr=o("SEWDForCTC"),qpr=o(" (SEW-D model)"),jpr=l(),x7=a("li"),jFe=a("strong"),Dpr=o("unispeech"),Gpr=o(" \u2014 "),zH=a("a"),Opr=o("UniSpeechForCTC"),Vpr=o(" (UniSpeech model)"),Xpr=l(),$7=a("li"),DFe=a("strong"),zpr=o("unispeech-sat"),Wpr=o(" \u2014 "),WH=a("a"),Qpr=o("UniSpeechSatForCTC"),Hpr=o(" (UniSpeechSat model)"),Upr=l(),k7=a("li"),GFe=a("strong"),Jpr=o("wav2vec2"),Ypr=o(" \u2014 "),QH=a("a"),Kpr=o("Wav2Vec2ForCTC"),Zpr=o(" (Wav2Vec2 model)"),e_r=l(),S7=a("li"),OFe=a("strong"),o_r=o("wav2vec2-conformer"),r_r=o(" \u2014 "),HH=a("a"),t_r=o("Wav2Vec2ConformerForCTC"),a_r=o(" (Wav2Vec2-Conformer model)"),n_r=l(),R7=a("li"),VFe=a("strong"),s_r=o("wavlm"),l_r=o(" \u2014 "),UH=a("a"),i_r=o("WavLMForCTC"),d_r=o(" (WavLM model)"),c_r=l(),P7=a("p"),f_r=o("The model is set in evaluation mode by default using "),XFe=a("code"),m_r=o("model.eval()"),g_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zFe=a("code"),h_r=o("model.train()"),p_r=l(),F(B7.$$.fragment),Hze=l(),Dd=a("h2"),I7=a("a"),WFe=a("span"),F(T9.$$.fragment),__r=l(),QFe=a("span"),u_r=o("AutoModelForSpeechSeq2Seq"),Uze=l(),Uo=a("div"),F(M9.$$.fragment),b_r=l(),Gd=a("p"),v_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JH=a("a"),F_r=o("from_pretrained()"),T_r=o(" class method or the "),YH=a("a"),M_r=o("from_config()"),E_r=o(` class
method.`),C_r=l(),E9=a("p"),w_r=o("This class cannot be instantiated directly using "),HFe=a("code"),A_r=o("__init__()"),L_r=o(" (throws an error)."),y_r=l(),At=a("div"),F(C9.$$.fragment),x_r=l(),UFe=a("p"),$_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),k_r=l(),Od=a("p"),S_r=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),R_r=o("not"),P_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),B_r=o("from_pretrained()"),I_r=o(" to load the model weights."),N_r=l(),F(N7.$$.fragment),q_r=l(),po=a("div"),F(w9.$$.fragment),j_r=l(),YFe=a("p"),D_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),G_r=l(),Za=a("p"),O_r=o("The model class to instantiate is selected based on the "),KFe=a("code"),V_r=o("model_type"),X_r=o(` property of the config object (either
passed as an argument or loaded from `),ZFe=a("code"),z_r=o("pretrained_model_name_or_path"),W_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=a("code"),Q_r=o("pretrained_model_name_or_path"),H_r=o(":"),U_r=l(),A9=a("ul"),q7=a("li"),o6e=a("strong"),J_r=o("speech-encoder-decoder"),Y_r=o(" \u2014 "),ZH=a("a"),K_r=o("SpeechEncoderDecoderModel"),Z_r=o(" (Speech Encoder decoder model)"),eur=l(),j7=a("li"),r6e=a("strong"),our=o("speech_to_text"),rur=o(" \u2014 "),eU=a("a"),tur=o("Speech2TextForConditionalGeneration"),aur=o(" (Speech2Text model)"),nur=l(),D7=a("p"),sur=o("The model is set in evaluation mode by default using "),t6e=a("code"),lur=o("model.eval()"),iur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a6e=a("code"),dur=o("model.train()"),cur=l(),F(G7.$$.fragment),Jze=l(),Vd=a("h2"),O7=a("a"),n6e=a("span"),F(L9.$$.fragment),fur=l(),s6e=a("span"),mur=o("AutoModelForAudioXVector"),Yze=l(),Jo=a("div"),F(y9.$$.fragment),gur=l(),Xd=a("p"),hur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),oU=a("a"),pur=o("from_pretrained()"),_ur=o(" class method or the "),rU=a("a"),uur=o("from_config()"),bur=o(` class
method.`),vur=l(),x9=a("p"),Fur=o("This class cannot be instantiated directly using "),l6e=a("code"),Tur=o("__init__()"),Mur=o(" (throws an error)."),Eur=l(),Lt=a("div"),F($9.$$.fragment),Cur=l(),i6e=a("p"),wur=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Aur=l(),zd=a("p"),Lur=o(`Note:
Loading a model from its configuration file does `),d6e=a("strong"),yur=o("not"),xur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),$ur=o("from_pretrained()"),kur=o(" to load the model weights."),Sur=l(),F(V7.$$.fragment),Rur=l(),_o=a("div"),F(k9.$$.fragment),Pur=l(),c6e=a("p"),Bur=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Iur=l(),en=a("p"),Nur=o("The model class to instantiate is selected based on the "),f6e=a("code"),qur=o("model_type"),jur=o(` property of the config object (either
passed as an argument or loaded from `),m6e=a("code"),Dur=o("pretrained_model_name_or_path"),Gur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=a("code"),Our=o("pretrained_model_name_or_path"),Vur=o(":"),Xur=l(),tt=a("ul"),X7=a("li"),h6e=a("strong"),zur=o("data2vec-audio"),Wur=o(" \u2014 "),aU=a("a"),Qur=o("Data2VecAudioForXVector"),Hur=o(" (Data2VecAudio model)"),Uur=l(),z7=a("li"),p6e=a("strong"),Jur=o("unispeech-sat"),Yur=o(" \u2014 "),nU=a("a"),Kur=o("UniSpeechSatForXVector"),Zur=o(" (UniSpeechSat model)"),e2r=l(),W7=a("li"),_6e=a("strong"),o2r=o("wav2vec2"),r2r=o(" \u2014 "),sU=a("a"),t2r=o("Wav2Vec2ForXVector"),a2r=o(" (Wav2Vec2 model)"),n2r=l(),Q7=a("li"),u6e=a("strong"),s2r=o("wav2vec2-conformer"),l2r=o(" \u2014 "),lU=a("a"),i2r=o("Wav2Vec2ConformerForXVector"),d2r=o(" (Wav2Vec2-Conformer model)"),c2r=l(),H7=a("li"),b6e=a("strong"),f2r=o("wavlm"),m2r=o(" \u2014 "),iU=a("a"),g2r=o("WavLMForXVector"),h2r=o(" (WavLM model)"),p2r=l(),U7=a("p"),_2r=o("The model is set in evaluation mode by default using "),v6e=a("code"),u2r=o("model.eval()"),b2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F6e=a("code"),v2r=o("model.train()"),F2r=l(),F(J7.$$.fragment),Kze=l(),Wd=a("h2"),Y7=a("a"),T6e=a("span"),F(S9.$$.fragment),T2r=l(),M6e=a("span"),M2r=o("AutoModelForMaskedImageModeling"),Zze=l(),Yo=a("div"),F(R9.$$.fragment),E2r=l(),Qd=a("p"),C2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),dU=a("a"),w2r=o("from_pretrained()"),A2r=o(" class method or the "),cU=a("a"),L2r=o("from_config()"),y2r=o(` class
method.`),x2r=l(),P9=a("p"),$2r=o("This class cannot be instantiated directly using "),E6e=a("code"),k2r=o("__init__()"),S2r=o(" (throws an error)."),R2r=l(),yt=a("div"),F(B9.$$.fragment),P2r=l(),C6e=a("p"),B2r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),I2r=l(),Hd=a("p"),N2r=o(`Note:
Loading a model from its configuration file does `),w6e=a("strong"),q2r=o("not"),j2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),D2r=o("from_pretrained()"),G2r=o(" to load the model weights."),O2r=l(),F(K7.$$.fragment),V2r=l(),uo=a("div"),F(I9.$$.fragment),X2r=l(),A6e=a("p"),z2r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),W2r=l(),on=a("p"),Q2r=o("The model class to instantiate is selected based on the "),L6e=a("code"),H2r=o("model_type"),U2r=o(` property of the config object (either
passed as an argument or loaded from `),y6e=a("code"),J2r=o("pretrained_model_name_or_path"),Y2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=a("code"),K2r=o("pretrained_model_name_or_path"),Z2r=o(":"),e1r=l(),Ud=a("ul"),Z7=a("li"),$6e=a("strong"),o1r=o("deit"),r1r=o(" \u2014 "),mU=a("a"),t1r=o("DeiTForMaskedImageModeling"),a1r=o(" (DeiT model)"),n1r=l(),e8=a("li"),k6e=a("strong"),s1r=o("swin"),l1r=o(" \u2014 "),gU=a("a"),i1r=o("SwinForMaskedImageModeling"),d1r=o(" (Swin Transformer model)"),c1r=l(),o8=a("li"),S6e=a("strong"),f1r=o("vit"),m1r=o(" \u2014 "),hU=a("a"),g1r=o("ViTForMaskedImageModeling"),h1r=o(" (ViT model)"),p1r=l(),r8=a("p"),_1r=o("The model is set in evaluation mode by default using "),R6e=a("code"),u1r=o("model.eval()"),b1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P6e=a("code"),v1r=o("model.train()"),F1r=l(),F(t8.$$.fragment),eWe=l(),Jd=a("h2"),a8=a("a"),B6e=a("span"),F(N9.$$.fragment),T1r=l(),I6e=a("span"),M1r=o("AutoModelForObjectDetection"),oWe=l(),Ko=a("div"),F(q9.$$.fragment),E1r=l(),Yd=a("p"),C1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),pU=a("a"),w1r=o("from_pretrained()"),A1r=o(" class method or the "),_U=a("a"),L1r=o("from_config()"),y1r=o(` class
method.`),x1r=l(),j9=a("p"),$1r=o("This class cannot be instantiated directly using "),N6e=a("code"),k1r=o("__init__()"),S1r=o(" (throws an error)."),R1r=l(),xt=a("div"),F(D9.$$.fragment),P1r=l(),q6e=a("p"),B1r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),I1r=l(),Kd=a("p"),N1r=o(`Note:
Loading a model from its configuration file does `),j6e=a("strong"),q1r=o("not"),j1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),D1r=o("from_pretrained()"),G1r=o(" to load the model weights."),O1r=l(),F(n8.$$.fragment),V1r=l(),bo=a("div"),F(G9.$$.fragment),X1r=l(),D6e=a("p"),z1r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),W1r=l(),rn=a("p"),Q1r=o("The model class to instantiate is selected based on the "),G6e=a("code"),H1r=o("model_type"),U1r=o(` property of the config object (either
passed as an argument or loaded from `),O6e=a("code"),J1r=o("pretrained_model_name_or_path"),Y1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V6e=a("code"),K1r=o("pretrained_model_name_or_path"),Z1r=o(":"),ebr=l(),O9=a("ul"),s8=a("li"),X6e=a("strong"),obr=o("detr"),rbr=o(" \u2014 "),bU=a("a"),tbr=o("DetrForObjectDetection"),abr=o(" (DETR model)"),nbr=l(),l8=a("li"),z6e=a("strong"),sbr=o("yolos"),lbr=o(" \u2014 "),vU=a("a"),ibr=o("YolosForObjectDetection"),dbr=o(" (YOLOS model)"),cbr=l(),i8=a("p"),fbr=o("The model is set in evaluation mode by default using "),W6e=a("code"),mbr=o("model.eval()"),gbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q6e=a("code"),hbr=o("model.train()"),pbr=l(),F(d8.$$.fragment),rWe=l(),Zd=a("h2"),c8=a("a"),H6e=a("span"),F(V9.$$.fragment),_br=l(),U6e=a("span"),ubr=o("AutoModelForImageSegmentation"),tWe=l(),Zo=a("div"),F(X9.$$.fragment),bbr=l(),ec=a("p"),vbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),FU=a("a"),Fbr=o("from_pretrained()"),Tbr=o(" class method or the "),TU=a("a"),Mbr=o("from_config()"),Ebr=o(` class
method.`),Cbr=l(),z9=a("p"),wbr=o("This class cannot be instantiated directly using "),J6e=a("code"),Abr=o("__init__()"),Lbr=o(" (throws an error)."),ybr=l(),$t=a("div"),F(W9.$$.fragment),xbr=l(),Y6e=a("p"),$br=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),kbr=l(),oc=a("p"),Sbr=o(`Note:
Loading a model from its configuration file does `),K6e=a("strong"),Rbr=o("not"),Pbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),Bbr=o("from_pretrained()"),Ibr=o(" to load the model weights."),Nbr=l(),F(f8.$$.fragment),qbr=l(),vo=a("div"),F(Q9.$$.fragment),jbr=l(),Z6e=a("p"),Dbr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Gbr=l(),tn=a("p"),Obr=o("The model class to instantiate is selected based on the "),eTe=a("code"),Vbr=o("model_type"),Xbr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),zbr=o("pretrained_model_name_or_path"),Wbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),Qbr=o("pretrained_model_name_or_path"),Hbr=o(":"),Ubr=l(),tTe=a("ul"),m8=a("li"),aTe=a("strong"),Jbr=o("detr"),Ybr=o(" \u2014 "),EU=a("a"),Kbr=o("DetrForSegmentation"),Zbr=o(" (DETR model)"),evr=l(),g8=a("p"),ovr=o("The model is set in evaluation mode by default using "),nTe=a("code"),rvr=o("model.eval()"),tvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sTe=a("code"),avr=o("model.train()"),nvr=l(),F(h8.$$.fragment),aWe=l(),rc=a("h2"),p8=a("a"),lTe=a("span"),F(H9.$$.fragment),svr=l(),iTe=a("span"),lvr=o("AutoModelForSemanticSegmentation"),nWe=l(),er=a("div"),F(U9.$$.fragment),ivr=l(),tc=a("p"),dvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CU=a("a"),cvr=o("from_pretrained()"),fvr=o(" class method or the "),wU=a("a"),mvr=o("from_config()"),gvr=o(` class
method.`),hvr=l(),J9=a("p"),pvr=o("This class cannot be instantiated directly using "),dTe=a("code"),_vr=o("__init__()"),uvr=o(" (throws an error)."),bvr=l(),kt=a("div"),F(Y9.$$.fragment),vvr=l(),cTe=a("p"),Fvr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Tvr=l(),ac=a("p"),Mvr=o(`Note:
Loading a model from its configuration file does `),fTe=a("strong"),Evr=o("not"),Cvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),wvr=o("from_pretrained()"),Avr=o(" to load the model weights."),Lvr=l(),F(_8.$$.fragment),yvr=l(),Fo=a("div"),F(K9.$$.fragment),xvr=l(),mTe=a("p"),$vr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),kvr=l(),an=a("p"),Svr=o("The model class to instantiate is selected based on the "),gTe=a("code"),Rvr=o("model_type"),Pvr=o(` property of the config object (either
passed as an argument or loaded from `),hTe=a("code"),Bvr=o("pretrained_model_name_or_path"),Ivr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=a("code"),Nvr=o("pretrained_model_name_or_path"),qvr=o(":"),jvr=l(),at=a("ul"),u8=a("li"),_Te=a("strong"),Dvr=o("beit"),Gvr=o(" \u2014 "),LU=a("a"),Ovr=o("BeitForSemanticSegmentation"),Vvr=o(" (BEiT model)"),Xvr=l(),b8=a("li"),uTe=a("strong"),zvr=o("data2vec-vision"),Wvr=o(" \u2014 "),yU=a("a"),Qvr=o("Data2VecVisionForSemanticSegmentation"),Hvr=o(" (Data2VecVision model)"),Uvr=l(),v8=a("li"),bTe=a("strong"),Jvr=o("dpt"),Yvr=o(" \u2014 "),xU=a("a"),Kvr=o("DPTForSemanticSegmentation"),Zvr=o(" (DPT model)"),eFr=l(),F8=a("li"),vTe=a("strong"),oFr=o("mobilevit"),rFr=o(" \u2014 "),$U=a("a"),tFr=o("MobileViTForSemanticSegmentation"),aFr=o(" (MobileViT model)"),nFr=l(),T8=a("li"),FTe=a("strong"),sFr=o("segformer"),lFr=o(" \u2014 "),kU=a("a"),iFr=o("SegformerForSemanticSegmentation"),dFr=o(" (SegFormer model)"),cFr=l(),M8=a("p"),fFr=o("The model is set in evaluation mode by default using "),TTe=a("code"),mFr=o("model.eval()"),gFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MTe=a("code"),hFr=o("model.train()"),pFr=l(),F(E8.$$.fragment),sWe=l(),nc=a("h2"),C8=a("a"),ETe=a("span"),F(Z9.$$.fragment),_Fr=l(),CTe=a("span"),uFr=o("AutoModelForInstanceSegmentation"),lWe=l(),or=a("div"),F(ex.$$.fragment),bFr=l(),sc=a("p"),vFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),SU=a("a"),FFr=o("from_pretrained()"),TFr=o(" class method or the "),RU=a("a"),MFr=o("from_config()"),EFr=o(` class
method.`),CFr=l(),ox=a("p"),wFr=o("This class cannot be instantiated directly using "),wTe=a("code"),AFr=o("__init__()"),LFr=o(" (throws an error)."),yFr=l(),St=a("div"),F(rx.$$.fragment),xFr=l(),ATe=a("p"),$Fr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),kFr=l(),lc=a("p"),SFr=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),RFr=o("not"),PFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),BFr=o("from_pretrained()"),IFr=o(" to load the model weights."),NFr=l(),F(w8.$$.fragment),qFr=l(),To=a("div"),F(tx.$$.fragment),jFr=l(),yTe=a("p"),DFr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),GFr=l(),nn=a("p"),OFr=o("The model class to instantiate is selected based on the "),xTe=a("code"),VFr=o("model_type"),XFr=o(` property of the config object (either
passed as an argument or loaded from `),$Te=a("code"),zFr=o("pretrained_model_name_or_path"),WFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=a("code"),QFr=o("pretrained_model_name_or_path"),HFr=o(":"),UFr=l(),STe=a("ul"),A8=a("li"),RTe=a("strong"),JFr=o("maskformer"),YFr=o(" \u2014 "),BU=a("a"),KFr=o("MaskFormerForInstanceSegmentation"),ZFr=o(" (MaskFormer model)"),e6r=l(),L8=a("p"),o6r=o("The model is set in evaluation mode by default using "),PTe=a("code"),r6r=o("model.eval()"),t6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BTe=a("code"),a6r=o("model.train()"),n6r=l(),F(y8.$$.fragment),iWe=l(),ic=a("h2"),x8=a("a"),ITe=a("span"),F(ax.$$.fragment),s6r=l(),NTe=a("span"),l6r=o("TFAutoModel"),dWe=l(),rr=a("div"),F(nx.$$.fragment),i6r=l(),dc=a("p"),d6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IU=a("a"),c6r=o("from_pretrained()"),f6r=o(" class method or the "),NU=a("a"),m6r=o("from_config()"),g6r=o(` class
method.`),h6r=l(),sx=a("p"),p6r=o("This class cannot be instantiated directly using "),qTe=a("code"),_6r=o("__init__()"),u6r=o(" (throws an error)."),b6r=l(),Rt=a("div"),F(lx.$$.fragment),v6r=l(),jTe=a("p"),F6r=o("Instantiates one of the base model classes of the library from a configuration."),T6r=l(),cc=a("p"),M6r=o(`Note:
Loading a model from its configuration file does `),DTe=a("strong"),E6r=o("not"),C6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),w6r=o("from_pretrained()"),A6r=o(" to load the model weights."),L6r=l(),F($8.$$.fragment),y6r=l(),$r=a("div"),F(ix.$$.fragment),x6r=l(),GTe=a("p"),$6r=o("Instantiate one of the base model classes of the library from a pretrained model."),k6r=l(),sn=a("p"),S6r=o("The model class to instantiate is selected based on the "),OTe=a("code"),R6r=o("model_type"),P6r=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),B6r=o("pretrained_model_name_or_path"),I6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),N6r=o("pretrained_model_name_or_path"),q6r=o(":"),j6r=l(),I=a("ul"),k8=a("li"),zTe=a("strong"),D6r=o("albert"),G6r=o(" \u2014 "),jU=a("a"),O6r=o("TFAlbertModel"),V6r=o(" (ALBERT model)"),X6r=l(),S8=a("li"),WTe=a("strong"),z6r=o("bart"),W6r=o(" \u2014 "),DU=a("a"),Q6r=o("TFBartModel"),H6r=o(" (BART model)"),U6r=l(),R8=a("li"),QTe=a("strong"),J6r=o("bert"),Y6r=o(" \u2014 "),GU=a("a"),K6r=o("TFBertModel"),Z6r=o(" (BERT model)"),eTr=l(),P8=a("li"),HTe=a("strong"),oTr=o("blenderbot"),rTr=o(" \u2014 "),OU=a("a"),tTr=o("TFBlenderbotModel"),aTr=o(" (Blenderbot model)"),nTr=l(),B8=a("li"),UTe=a("strong"),sTr=o("blenderbot-small"),lTr=o(" \u2014 "),VU=a("a"),iTr=o("TFBlenderbotSmallModel"),dTr=o(" (BlenderbotSmall model)"),cTr=l(),I8=a("li"),JTe=a("strong"),fTr=o("camembert"),mTr=o(" \u2014 "),XU=a("a"),gTr=o("TFCamembertModel"),hTr=o(" (CamemBERT model)"),pTr=l(),N8=a("li"),YTe=a("strong"),_Tr=o("clip"),uTr=o(" \u2014 "),zU=a("a"),bTr=o("TFCLIPModel"),vTr=o(" (CLIP model)"),FTr=l(),q8=a("li"),KTe=a("strong"),TTr=o("convbert"),MTr=o(" \u2014 "),WU=a("a"),ETr=o("TFConvBertModel"),CTr=o(" (ConvBERT model)"),wTr=l(),j8=a("li"),ZTe=a("strong"),ATr=o("convnext"),LTr=o(" \u2014 "),QU=a("a"),yTr=o("TFConvNextModel"),xTr=o(" (ConvNeXT model)"),$Tr=l(),D8=a("li"),e7e=a("strong"),kTr=o("ctrl"),STr=o(" \u2014 "),HU=a("a"),RTr=o("TFCTRLModel"),PTr=o(" (CTRL model)"),BTr=l(),G8=a("li"),o7e=a("strong"),ITr=o("data2vec-vision"),NTr=o(" \u2014 "),UU=a("a"),qTr=o("TFData2VecVisionModel"),jTr=o(" (Data2VecVision model)"),DTr=l(),O8=a("li"),r7e=a("strong"),GTr=o("deberta"),OTr=o(" \u2014 "),JU=a("a"),VTr=o("TFDebertaModel"),XTr=o(" (DeBERTa model)"),zTr=l(),V8=a("li"),t7e=a("strong"),WTr=o("deberta-v2"),QTr=o(" \u2014 "),YU=a("a"),HTr=o("TFDebertaV2Model"),UTr=o(" (DeBERTa-v2 model)"),JTr=l(),X8=a("li"),a7e=a("strong"),YTr=o("deit"),KTr=o(" \u2014 "),KU=a("a"),ZTr=o("TFDeiTModel"),e7r=o(" (DeiT model)"),o7r=l(),z8=a("li"),n7e=a("strong"),r7r=o("distilbert"),t7r=o(" \u2014 "),ZU=a("a"),a7r=o("TFDistilBertModel"),n7r=o(" (DistilBERT model)"),s7r=l(),W8=a("li"),s7e=a("strong"),l7r=o("dpr"),i7r=o(" \u2014 "),eJ=a("a"),d7r=o("TFDPRQuestionEncoder"),c7r=o(" (DPR model)"),f7r=l(),Q8=a("li"),l7e=a("strong"),m7r=o("electra"),g7r=o(" \u2014 "),oJ=a("a"),h7r=o("TFElectraModel"),p7r=o(" (ELECTRA model)"),_7r=l(),H8=a("li"),i7e=a("strong"),u7r=o("flaubert"),b7r=o(" \u2014 "),rJ=a("a"),v7r=o("TFFlaubertModel"),F7r=o(" (FlauBERT model)"),T7r=l(),Ks=a("li"),d7e=a("strong"),M7r=o("funnel"),E7r=o(" \u2014 "),tJ=a("a"),C7r=o("TFFunnelModel"),w7r=o(" or "),aJ=a("a"),A7r=o("TFFunnelBaseModel"),L7r=o(" (Funnel Transformer model)"),y7r=l(),U8=a("li"),c7e=a("strong"),x7r=o("gpt2"),$7r=o(" \u2014 "),nJ=a("a"),k7r=o("TFGPT2Model"),S7r=o(" (OpenAI GPT-2 model)"),R7r=l(),J8=a("li"),f7e=a("strong"),P7r=o("gptj"),B7r=o(" \u2014 "),sJ=a("a"),I7r=o("TFGPTJModel"),N7r=o(" (GPT-J model)"),q7r=l(),Y8=a("li"),m7e=a("strong"),j7r=o("hubert"),D7r=o(" \u2014 "),lJ=a("a"),G7r=o("TFHubertModel"),O7r=o(" (Hubert model)"),V7r=l(),K8=a("li"),g7e=a("strong"),X7r=o("layoutlm"),z7r=o(" \u2014 "),iJ=a("a"),W7r=o("TFLayoutLMModel"),Q7r=o(" (LayoutLM model)"),H7r=l(),Z8=a("li"),h7e=a("strong"),U7r=o("led"),J7r=o(" \u2014 "),dJ=a("a"),Y7r=o("TFLEDModel"),K7r=o(" (LED model)"),Z7r=l(),eM=a("li"),p7e=a("strong"),e8r=o("longformer"),o8r=o(" \u2014 "),cJ=a("a"),r8r=o("TFLongformerModel"),t8r=o(" (Longformer model)"),a8r=l(),oM=a("li"),_7e=a("strong"),n8r=o("lxmert"),s8r=o(" \u2014 "),fJ=a("a"),l8r=o("TFLxmertModel"),i8r=o(" (LXMERT model)"),d8r=l(),rM=a("li"),u7e=a("strong"),c8r=o("marian"),f8r=o(" \u2014 "),mJ=a("a"),m8r=o("TFMarianModel"),g8r=o(" (Marian model)"),h8r=l(),tM=a("li"),b7e=a("strong"),p8r=o("mbart"),_8r=o(" \u2014 "),gJ=a("a"),u8r=o("TFMBartModel"),b8r=o(" (mBART model)"),v8r=l(),aM=a("li"),v7e=a("strong"),F8r=o("mobilebert"),T8r=o(" \u2014 "),hJ=a("a"),M8r=o("TFMobileBertModel"),E8r=o(" (MobileBERT model)"),C8r=l(),nM=a("li"),F7e=a("strong"),w8r=o("mpnet"),A8r=o(" \u2014 "),pJ=a("a"),L8r=o("TFMPNetModel"),y8r=o(" (MPNet model)"),x8r=l(),sM=a("li"),T7e=a("strong"),$8r=o("mt5"),k8r=o(" \u2014 "),_J=a("a"),S8r=o("TFMT5Model"),R8r=o(" (MT5 model)"),P8r=l(),lM=a("li"),M7e=a("strong"),B8r=o("openai-gpt"),I8r=o(" \u2014 "),uJ=a("a"),N8r=o("TFOpenAIGPTModel"),q8r=o(" (OpenAI GPT model)"),j8r=l(),iM=a("li"),E7e=a("strong"),D8r=o("opt"),G8r=o(" \u2014 "),bJ=a("a"),O8r=o("TFOPTModel"),V8r=o(" (OPT model)"),X8r=l(),dM=a("li"),C7e=a("strong"),z8r=o("pegasus"),W8r=o(" \u2014 "),vJ=a("a"),Q8r=o("TFPegasusModel"),H8r=o(" (Pegasus model)"),U8r=l(),cM=a("li"),w7e=a("strong"),J8r=o("regnet"),Y8r=o(" \u2014 "),FJ=a("a"),K8r=o("TFRegNetModel"),Z8r=o(" (RegNet model)"),eMr=l(),fM=a("li"),A7e=a("strong"),oMr=o("rembert"),rMr=o(" \u2014 "),TJ=a("a"),tMr=o("TFRemBertModel"),aMr=o(" (RemBERT model)"),nMr=l(),mM=a("li"),L7e=a("strong"),sMr=o("resnet"),lMr=o(" \u2014 "),MJ=a("a"),iMr=o("TFResNetModel"),dMr=o(" (ResNet model)"),cMr=l(),gM=a("li"),y7e=a("strong"),fMr=o("roberta"),mMr=o(" \u2014 "),EJ=a("a"),gMr=o("TFRobertaModel"),hMr=o(" (RoBERTa model)"),pMr=l(),hM=a("li"),x7e=a("strong"),_Mr=o("roformer"),uMr=o(" \u2014 "),CJ=a("a"),bMr=o("TFRoFormerModel"),vMr=o(" (RoFormer model)"),FMr=l(),pM=a("li"),$7e=a("strong"),TMr=o("segformer"),MMr=o(" \u2014 "),wJ=a("a"),EMr=o("TFSegformerModel"),CMr=o(" (SegFormer model)"),wMr=l(),_M=a("li"),k7e=a("strong"),AMr=o("speech_to_text"),LMr=o(" \u2014 "),AJ=a("a"),yMr=o("TFSpeech2TextModel"),xMr=o(" (Speech2Text model)"),$Mr=l(),uM=a("li"),S7e=a("strong"),kMr=o("swin"),SMr=o(" \u2014 "),LJ=a("a"),RMr=o("TFSwinModel"),PMr=o(" (Swin Transformer model)"),BMr=l(),bM=a("li"),R7e=a("strong"),IMr=o("t5"),NMr=o(" \u2014 "),yJ=a("a"),qMr=o("TFT5Model"),jMr=o(" (T5 model)"),DMr=l(),vM=a("li"),P7e=a("strong"),GMr=o("tapas"),OMr=o(" \u2014 "),xJ=a("a"),VMr=o("TFTapasModel"),XMr=o(" (TAPAS model)"),zMr=l(),FM=a("li"),B7e=a("strong"),WMr=o("transfo-xl"),QMr=o(" \u2014 "),$J=a("a"),HMr=o("TFTransfoXLModel"),UMr=o(" (Transformer-XL model)"),JMr=l(),TM=a("li"),I7e=a("strong"),YMr=o("vit"),KMr=o(" \u2014 "),kJ=a("a"),ZMr=o("TFViTModel"),e4r=o(" (ViT model)"),o4r=l(),MM=a("li"),N7e=a("strong"),r4r=o("vit_mae"),t4r=o(" \u2014 "),SJ=a("a"),a4r=o("TFViTMAEModel"),n4r=o(" (ViTMAE model)"),s4r=l(),EM=a("li"),q7e=a("strong"),l4r=o("wav2vec2"),i4r=o(" \u2014 "),RJ=a("a"),d4r=o("TFWav2Vec2Model"),c4r=o(" (Wav2Vec2 model)"),f4r=l(),CM=a("li"),j7e=a("strong"),m4r=o("xlm"),g4r=o(" \u2014 "),PJ=a("a"),h4r=o("TFXLMModel"),p4r=o(" (XLM model)"),_4r=l(),wM=a("li"),D7e=a("strong"),u4r=o("xlm-roberta"),b4r=o(" \u2014 "),BJ=a("a"),v4r=o("TFXLMRobertaModel"),F4r=o(" (XLM-RoBERTa model)"),T4r=l(),AM=a("li"),G7e=a("strong"),M4r=o("xlnet"),E4r=o(" \u2014 "),IJ=a("a"),C4r=o("TFXLNetModel"),w4r=o(" (XLNet model)"),A4r=l(),F(LM.$$.fragment),cWe=l(),fc=a("h2"),yM=a("a"),O7e=a("span"),F(dx.$$.fragment),L4r=l(),V7e=a("span"),y4r=o("TFAutoModelForPreTraining"),fWe=l(),tr=a("div"),F(cx.$$.fragment),x4r=l(),mc=a("p"),$4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NJ=a("a"),k4r=o("from_pretrained()"),S4r=o(" class method or the "),qJ=a("a"),R4r=o("from_config()"),P4r=o(` class
method.`),B4r=l(),fx=a("p"),I4r=o("This class cannot be instantiated directly using "),X7e=a("code"),N4r=o("__init__()"),q4r=o(" (throws an error)."),j4r=l(),Pt=a("div"),F(mx.$$.fragment),D4r=l(),z7e=a("p"),G4r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),O4r=l(),gc=a("p"),V4r=o(`Note:
Loading a model from its configuration file does `),W7e=a("strong"),X4r=o("not"),z4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),W4r=o("from_pretrained()"),Q4r=o(" to load the model weights."),H4r=l(),F(xM.$$.fragment),U4r=l(),kr=a("div"),F(gx.$$.fragment),J4r=l(),Q7e=a("p"),Y4r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),K4r=l(),ln=a("p"),Z4r=o("The model class to instantiate is selected based on the "),H7e=a("code"),eEr=o("model_type"),oEr=o(` property of the config object (either
passed as an argument or loaded from `),U7e=a("code"),rEr=o("pretrained_model_name_or_path"),tEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=a("code"),aEr=o("pretrained_model_name_or_path"),nEr=o(":"),sEr=l(),se=a("ul"),$M=a("li"),Y7e=a("strong"),lEr=o("albert"),iEr=o(" \u2014 "),DJ=a("a"),dEr=o("TFAlbertForPreTraining"),cEr=o(" (ALBERT model)"),fEr=l(),kM=a("li"),K7e=a("strong"),mEr=o("bart"),gEr=o(" \u2014 "),GJ=a("a"),hEr=o("TFBartForConditionalGeneration"),pEr=o(" (BART model)"),_Er=l(),SM=a("li"),Z7e=a("strong"),uEr=o("bert"),bEr=o(" \u2014 "),OJ=a("a"),vEr=o("TFBertForPreTraining"),FEr=o(" (BERT model)"),TEr=l(),RM=a("li"),e8e=a("strong"),MEr=o("camembert"),EEr=o(" \u2014 "),VJ=a("a"),CEr=o("TFCamembertForMaskedLM"),wEr=o(" (CamemBERT model)"),AEr=l(),PM=a("li"),o8e=a("strong"),LEr=o("ctrl"),yEr=o(" \u2014 "),XJ=a("a"),xEr=o("TFCTRLLMHeadModel"),$Er=o(" (CTRL model)"),kEr=l(),BM=a("li"),r8e=a("strong"),SEr=o("distilbert"),REr=o(" \u2014 "),zJ=a("a"),PEr=o("TFDistilBertForMaskedLM"),BEr=o(" (DistilBERT model)"),IEr=l(),IM=a("li"),t8e=a("strong"),NEr=o("electra"),qEr=o(" \u2014 "),WJ=a("a"),jEr=o("TFElectraForPreTraining"),DEr=o(" (ELECTRA model)"),GEr=l(),NM=a("li"),a8e=a("strong"),OEr=o("flaubert"),VEr=o(" \u2014 "),QJ=a("a"),XEr=o("TFFlaubertWithLMHeadModel"),zEr=o(" (FlauBERT model)"),WEr=l(),qM=a("li"),n8e=a("strong"),QEr=o("funnel"),HEr=o(" \u2014 "),HJ=a("a"),UEr=o("TFFunnelForPreTraining"),JEr=o(" (Funnel Transformer model)"),YEr=l(),jM=a("li"),s8e=a("strong"),KEr=o("gpt2"),ZEr=o(" \u2014 "),UJ=a("a"),eCr=o("TFGPT2LMHeadModel"),oCr=o(" (OpenAI GPT-2 model)"),rCr=l(),DM=a("li"),l8e=a("strong"),tCr=o("layoutlm"),aCr=o(" \u2014 "),JJ=a("a"),nCr=o("TFLayoutLMForMaskedLM"),sCr=o(" (LayoutLM model)"),lCr=l(),GM=a("li"),i8e=a("strong"),iCr=o("lxmert"),dCr=o(" \u2014 "),YJ=a("a"),cCr=o("TFLxmertForPreTraining"),fCr=o(" (LXMERT model)"),mCr=l(),OM=a("li"),d8e=a("strong"),gCr=o("mobilebert"),hCr=o(" \u2014 "),KJ=a("a"),pCr=o("TFMobileBertForPreTraining"),_Cr=o(" (MobileBERT model)"),uCr=l(),VM=a("li"),c8e=a("strong"),bCr=o("mpnet"),vCr=o(" \u2014 "),ZJ=a("a"),FCr=o("TFMPNetForMaskedLM"),TCr=o(" (MPNet model)"),MCr=l(),XM=a("li"),f8e=a("strong"),ECr=o("openai-gpt"),CCr=o(" \u2014 "),eY=a("a"),wCr=o("TFOpenAIGPTLMHeadModel"),ACr=o(" (OpenAI GPT model)"),LCr=l(),zM=a("li"),m8e=a("strong"),yCr=o("roberta"),xCr=o(" \u2014 "),oY=a("a"),$Cr=o("TFRobertaForMaskedLM"),kCr=o(" (RoBERTa model)"),SCr=l(),WM=a("li"),g8e=a("strong"),RCr=o("t5"),PCr=o(" \u2014 "),rY=a("a"),BCr=o("TFT5ForConditionalGeneration"),ICr=o(" (T5 model)"),NCr=l(),QM=a("li"),h8e=a("strong"),qCr=o("tapas"),jCr=o(" \u2014 "),tY=a("a"),DCr=o("TFTapasForMaskedLM"),GCr=o(" (TAPAS model)"),OCr=l(),HM=a("li"),p8e=a("strong"),VCr=o("transfo-xl"),XCr=o(" \u2014 "),aY=a("a"),zCr=o("TFTransfoXLLMHeadModel"),WCr=o(" (Transformer-XL model)"),QCr=l(),UM=a("li"),_8e=a("strong"),HCr=o("vit_mae"),UCr=o(" \u2014 "),nY=a("a"),JCr=o("TFViTMAEForPreTraining"),YCr=o(" (ViTMAE model)"),KCr=l(),JM=a("li"),u8e=a("strong"),ZCr=o("xlm"),e5r=o(" \u2014 "),sY=a("a"),o5r=o("TFXLMWithLMHeadModel"),r5r=o(" (XLM model)"),t5r=l(),YM=a("li"),b8e=a("strong"),a5r=o("xlm-roberta"),n5r=o(" \u2014 "),lY=a("a"),s5r=o("TFXLMRobertaForMaskedLM"),l5r=o(" (XLM-RoBERTa model)"),i5r=l(),KM=a("li"),v8e=a("strong"),d5r=o("xlnet"),c5r=o(" \u2014 "),iY=a("a"),f5r=o("TFXLNetLMHeadModel"),m5r=o(" (XLNet model)"),g5r=l(),F(ZM.$$.fragment),mWe=l(),hc=a("h2"),e4=a("a"),F8e=a("span"),F(hx.$$.fragment),h5r=l(),T8e=a("span"),p5r=o("TFAutoModelForCausalLM"),gWe=l(),ar=a("div"),F(px.$$.fragment),_5r=l(),pc=a("p"),u5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dY=a("a"),b5r=o("from_pretrained()"),v5r=o(" class method or the "),cY=a("a"),F5r=o("from_config()"),T5r=o(` class
method.`),M5r=l(),_x=a("p"),E5r=o("This class cannot be instantiated directly using "),M8e=a("code"),C5r=o("__init__()"),w5r=o(" (throws an error)."),A5r=l(),Bt=a("div"),F(ux.$$.fragment),L5r=l(),E8e=a("p"),y5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),x5r=l(),_c=a("p"),$5r=o(`Note:
Loading a model from its configuration file does `),C8e=a("strong"),k5r=o("not"),S5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),R5r=o("from_pretrained()"),P5r=o(" to load the model weights."),B5r=l(),F(o4.$$.fragment),I5r=l(),Sr=a("div"),F(bx.$$.fragment),N5r=l(),w8e=a("p"),q5r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),j5r=l(),dn=a("p"),D5r=o("The model class to instantiate is selected based on the "),A8e=a("code"),G5r=o("model_type"),O5r=o(` property of the config object (either
passed as an argument or loaded from `),L8e=a("code"),V5r=o("pretrained_model_name_or_path"),X5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y8e=a("code"),z5r=o("pretrained_model_name_or_path"),W5r=o(":"),Q5r=l(),Me=a("ul"),r4=a("li"),x8e=a("strong"),H5r=o("bert"),U5r=o(" \u2014 "),mY=a("a"),J5r=o("TFBertLMHeadModel"),Y5r=o(" (BERT model)"),K5r=l(),t4=a("li"),$8e=a("strong"),Z5r=o("camembert"),e3r=o(" \u2014 "),gY=a("a"),o3r=o("TFCamembertForCausalLM"),r3r=o(" (CamemBERT model)"),t3r=l(),a4=a("li"),k8e=a("strong"),a3r=o("ctrl"),n3r=o(" \u2014 "),hY=a("a"),s3r=o("TFCTRLLMHeadModel"),l3r=o(" (CTRL model)"),i3r=l(),n4=a("li"),S8e=a("strong"),d3r=o("gpt2"),c3r=o(" \u2014 "),pY=a("a"),f3r=o("TFGPT2LMHeadModel"),m3r=o(" (OpenAI GPT-2 model)"),g3r=l(),s4=a("li"),R8e=a("strong"),h3r=o("gptj"),p3r=o(" \u2014 "),_Y=a("a"),_3r=o("TFGPTJForCausalLM"),u3r=o(" (GPT-J model)"),b3r=l(),l4=a("li"),P8e=a("strong"),v3r=o("openai-gpt"),F3r=o(" \u2014 "),uY=a("a"),T3r=o("TFOpenAIGPTLMHeadModel"),M3r=o(" (OpenAI GPT model)"),E3r=l(),i4=a("li"),B8e=a("strong"),C3r=o("opt"),w3r=o(" \u2014 "),bY=a("a"),A3r=o("TFOPTForCausalLM"),L3r=o(" (OPT model)"),y3r=l(),d4=a("li"),I8e=a("strong"),x3r=o("rembert"),$3r=o(" \u2014 "),vY=a("a"),k3r=o("TFRemBertForCausalLM"),S3r=o(" (RemBERT model)"),R3r=l(),c4=a("li"),N8e=a("strong"),P3r=o("roberta"),B3r=o(" \u2014 "),FY=a("a"),I3r=o("TFRobertaForCausalLM"),N3r=o(" (RoBERTa model)"),q3r=l(),f4=a("li"),q8e=a("strong"),j3r=o("roformer"),D3r=o(" \u2014 "),TY=a("a"),G3r=o("TFRoFormerForCausalLM"),O3r=o(" (RoFormer model)"),V3r=l(),m4=a("li"),j8e=a("strong"),X3r=o("transfo-xl"),z3r=o(" \u2014 "),MY=a("a"),W3r=o("TFTransfoXLLMHeadModel"),Q3r=o(" (Transformer-XL model)"),H3r=l(),g4=a("li"),D8e=a("strong"),U3r=o("xlm"),J3r=o(" \u2014 "),EY=a("a"),Y3r=o("TFXLMWithLMHeadModel"),K3r=o(" (XLM model)"),Z3r=l(),h4=a("li"),G8e=a("strong"),e0r=o("xlnet"),o0r=o(" \u2014 "),CY=a("a"),r0r=o("TFXLNetLMHeadModel"),t0r=o(" (XLNet model)"),a0r=l(),F(p4.$$.fragment),hWe=l(),uc=a("h2"),_4=a("a"),O8e=a("span"),F(vx.$$.fragment),n0r=l(),V8e=a("span"),s0r=o("TFAutoModelForImageClassification"),pWe=l(),nr=a("div"),F(Fx.$$.fragment),l0r=l(),bc=a("p"),i0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wY=a("a"),d0r=o("from_pretrained()"),c0r=o(" class method or the "),AY=a("a"),f0r=o("from_config()"),m0r=o(` class
method.`),g0r=l(),Tx=a("p"),h0r=o("This class cannot be instantiated directly using "),X8e=a("code"),p0r=o("__init__()"),_0r=o(" (throws an error)."),u0r=l(),It=a("div"),F(Mx.$$.fragment),b0r=l(),z8e=a("p"),v0r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),F0r=l(),vc=a("p"),T0r=o(`Note:
Loading a model from its configuration file does `),W8e=a("strong"),M0r=o("not"),E0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),C0r=o("from_pretrained()"),w0r=o(" to load the model weights."),A0r=l(),F(u4.$$.fragment),L0r=l(),Rr=a("div"),F(Ex.$$.fragment),y0r=l(),Q8e=a("p"),x0r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$0r=l(),cn=a("p"),k0r=o("The model class to instantiate is selected based on the "),H8e=a("code"),S0r=o("model_type"),R0r=o(` property of the config object (either
passed as an argument or loaded from `),U8e=a("code"),P0r=o("pretrained_model_name_or_path"),B0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J8e=a("code"),I0r=o("pretrained_model_name_or_path"),N0r=o(":"),q0r=l(),Ve=a("ul"),b4=a("li"),Y8e=a("strong"),j0r=o("convnext"),D0r=o(" \u2014 "),yY=a("a"),G0r=o("TFConvNextForImageClassification"),O0r=o(" (ConvNeXT model)"),V0r=l(),v4=a("li"),K8e=a("strong"),X0r=o("data2vec-vision"),z0r=o(" \u2014 "),xY=a("a"),W0r=o("TFData2VecVisionForImageClassification"),Q0r=o(" (Data2VecVision model)"),H0r=l(),Zs=a("li"),Z8e=a("strong"),U0r=o("deit"),J0r=o(" \u2014 "),$Y=a("a"),Y0r=o("TFDeiTForImageClassification"),K0r=o(" or "),kY=a("a"),Z0r=o("TFDeiTForImageClassificationWithTeacher"),ewr=o(" (DeiT model)"),owr=l(),F4=a("li"),eMe=a("strong"),rwr=o("regnet"),twr=o(" \u2014 "),SY=a("a"),awr=o("TFRegNetForImageClassification"),nwr=o(" (RegNet model)"),swr=l(),T4=a("li"),oMe=a("strong"),lwr=o("resnet"),iwr=o(" \u2014 "),RY=a("a"),dwr=o("TFResNetForImageClassification"),cwr=o(" (ResNet model)"),fwr=l(),M4=a("li"),rMe=a("strong"),mwr=o("segformer"),gwr=o(" \u2014 "),PY=a("a"),hwr=o("TFSegformerForImageClassification"),pwr=o(" (SegFormer model)"),_wr=l(),E4=a("li"),tMe=a("strong"),uwr=o("swin"),bwr=o(" \u2014 "),BY=a("a"),vwr=o("TFSwinForImageClassification"),Fwr=o(" (Swin Transformer model)"),Twr=l(),C4=a("li"),aMe=a("strong"),Mwr=o("vit"),Ewr=o(" \u2014 "),IY=a("a"),Cwr=o("TFViTForImageClassification"),wwr=o(" (ViT model)"),Awr=l(),F(w4.$$.fragment),_We=l(),Fc=a("h2"),A4=a("a"),nMe=a("span"),F(Cx.$$.fragment),Lwr=l(),sMe=a("span"),ywr=o("TFAutoModelForMaskedLM"),uWe=l(),sr=a("div"),F(wx.$$.fragment),xwr=l(),Tc=a("p"),$wr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NY=a("a"),kwr=o("from_pretrained()"),Swr=o(" class method or the "),qY=a("a"),Rwr=o("from_config()"),Pwr=o(` class
method.`),Bwr=l(),Ax=a("p"),Iwr=o("This class cannot be instantiated directly using "),lMe=a("code"),Nwr=o("__init__()"),qwr=o(" (throws an error)."),jwr=l(),Nt=a("div"),F(Lx.$$.fragment),Dwr=l(),iMe=a("p"),Gwr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Owr=l(),Mc=a("p"),Vwr=o(`Note:
Loading a model from its configuration file does `),dMe=a("strong"),Xwr=o("not"),zwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=a("a"),Wwr=o("from_pretrained()"),Qwr=o(" to load the model weights."),Hwr=l(),F(L4.$$.fragment),Uwr=l(),Pr=a("div"),F(yx.$$.fragment),Jwr=l(),cMe=a("p"),Ywr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kwr=l(),fn=a("p"),Zwr=o("The model class to instantiate is selected based on the "),fMe=a("code"),eAr=o("model_type"),oAr=o(` property of the config object (either
passed as an argument or loaded from `),mMe=a("code"),rAr=o("pretrained_model_name_or_path"),tAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=a("code"),aAr=o("pretrained_model_name_or_path"),nAr=o(":"),sAr=l(),ie=a("ul"),y4=a("li"),hMe=a("strong"),lAr=o("albert"),iAr=o(" \u2014 "),DY=a("a"),dAr=o("TFAlbertForMaskedLM"),cAr=o(" (ALBERT model)"),fAr=l(),x4=a("li"),pMe=a("strong"),mAr=o("bert"),gAr=o(" \u2014 "),GY=a("a"),hAr=o("TFBertForMaskedLM"),pAr=o(" (BERT model)"),_Ar=l(),$4=a("li"),_Me=a("strong"),uAr=o("camembert"),bAr=o(" \u2014 "),OY=a("a"),vAr=o("TFCamembertForMaskedLM"),FAr=o(" (CamemBERT model)"),TAr=l(),k4=a("li"),uMe=a("strong"),MAr=o("convbert"),EAr=o(" \u2014 "),VY=a("a"),CAr=o("TFConvBertForMaskedLM"),wAr=o(" (ConvBERT model)"),AAr=l(),S4=a("li"),bMe=a("strong"),LAr=o("deberta"),yAr=o(" \u2014 "),XY=a("a"),xAr=o("TFDebertaForMaskedLM"),$Ar=o(" (DeBERTa model)"),kAr=l(),R4=a("li"),vMe=a("strong"),SAr=o("deberta-v2"),RAr=o(" \u2014 "),zY=a("a"),PAr=o("TFDebertaV2ForMaskedLM"),BAr=o(" (DeBERTa-v2 model)"),IAr=l(),P4=a("li"),FMe=a("strong"),NAr=o("distilbert"),qAr=o(" \u2014 "),WY=a("a"),jAr=o("TFDistilBertForMaskedLM"),DAr=o(" (DistilBERT model)"),GAr=l(),B4=a("li"),TMe=a("strong"),OAr=o("electra"),VAr=o(" \u2014 "),QY=a("a"),XAr=o("TFElectraForMaskedLM"),zAr=o(" (ELECTRA model)"),WAr=l(),I4=a("li"),MMe=a("strong"),QAr=o("flaubert"),HAr=o(" \u2014 "),HY=a("a"),UAr=o("TFFlaubertWithLMHeadModel"),JAr=o(" (FlauBERT model)"),YAr=l(),N4=a("li"),EMe=a("strong"),KAr=o("funnel"),ZAr=o(" \u2014 "),UY=a("a"),eLr=o("TFFunnelForMaskedLM"),oLr=o(" (Funnel Transformer model)"),rLr=l(),q4=a("li"),CMe=a("strong"),tLr=o("layoutlm"),aLr=o(" \u2014 "),JY=a("a"),nLr=o("TFLayoutLMForMaskedLM"),sLr=o(" (LayoutLM model)"),lLr=l(),j4=a("li"),wMe=a("strong"),iLr=o("longformer"),dLr=o(" \u2014 "),YY=a("a"),cLr=o("TFLongformerForMaskedLM"),fLr=o(" (Longformer model)"),mLr=l(),D4=a("li"),AMe=a("strong"),gLr=o("mobilebert"),hLr=o(" \u2014 "),KY=a("a"),pLr=o("TFMobileBertForMaskedLM"),_Lr=o(" (MobileBERT model)"),uLr=l(),G4=a("li"),LMe=a("strong"),bLr=o("mpnet"),vLr=o(" \u2014 "),ZY=a("a"),FLr=o("TFMPNetForMaskedLM"),TLr=o(" (MPNet model)"),MLr=l(),O4=a("li"),yMe=a("strong"),ELr=o("rembert"),CLr=o(" \u2014 "),eK=a("a"),wLr=o("TFRemBertForMaskedLM"),ALr=o(" (RemBERT model)"),LLr=l(),V4=a("li"),xMe=a("strong"),yLr=o("roberta"),xLr=o(" \u2014 "),oK=a("a"),$Lr=o("TFRobertaForMaskedLM"),kLr=o(" (RoBERTa model)"),SLr=l(),X4=a("li"),$Me=a("strong"),RLr=o("roformer"),PLr=o(" \u2014 "),rK=a("a"),BLr=o("TFRoFormerForMaskedLM"),ILr=o(" (RoFormer model)"),NLr=l(),z4=a("li"),kMe=a("strong"),qLr=o("tapas"),jLr=o(" \u2014 "),tK=a("a"),DLr=o("TFTapasForMaskedLM"),GLr=o(" (TAPAS model)"),OLr=l(),W4=a("li"),SMe=a("strong"),VLr=o("xlm"),XLr=o(" \u2014 "),aK=a("a"),zLr=o("TFXLMWithLMHeadModel"),WLr=o(" (XLM model)"),QLr=l(),Q4=a("li"),RMe=a("strong"),HLr=o("xlm-roberta"),ULr=o(" \u2014 "),nK=a("a"),JLr=o("TFXLMRobertaForMaskedLM"),YLr=o(" (XLM-RoBERTa model)"),KLr=l(),F(H4.$$.fragment),bWe=l(),Ec=a("h2"),U4=a("a"),PMe=a("span"),F(xx.$$.fragment),ZLr=l(),BMe=a("span"),eyr=o("TFAutoModelForSeq2SeqLM"),vWe=l(),lr=a("div"),F($x.$$.fragment),oyr=l(),Cc=a("p"),ryr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sK=a("a"),tyr=o("from_pretrained()"),ayr=o(" class method or the "),lK=a("a"),nyr=o("from_config()"),syr=o(` class
method.`),lyr=l(),kx=a("p"),iyr=o("This class cannot be instantiated directly using "),IMe=a("code"),dyr=o("__init__()"),cyr=o(" (throws an error)."),fyr=l(),qt=a("div"),F(Sx.$$.fragment),myr=l(),NMe=a("p"),gyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hyr=l(),wc=a("p"),pyr=o(`Note:
Loading a model from its configuration file does `),qMe=a("strong"),_yr=o("not"),uyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),byr=o("from_pretrained()"),vyr=o(" to load the model weights."),Fyr=l(),F(J4.$$.fragment),Tyr=l(),Br=a("div"),F(Rx.$$.fragment),Myr=l(),jMe=a("p"),Eyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cyr=l(),mn=a("p"),wyr=o("The model class to instantiate is selected based on the "),DMe=a("code"),Ayr=o("model_type"),Lyr=o(` property of the config object (either
passed as an argument or loaded from `),GMe=a("code"),yyr=o("pretrained_model_name_or_path"),xyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=a("code"),$yr=o("pretrained_model_name_or_path"),kyr=o(":"),Syr=l(),ye=a("ul"),Y4=a("li"),VMe=a("strong"),Ryr=o("bart"),Pyr=o(" \u2014 "),dK=a("a"),Byr=o("TFBartForConditionalGeneration"),Iyr=o(" (BART model)"),Nyr=l(),K4=a("li"),XMe=a("strong"),qyr=o("blenderbot"),jyr=o(" \u2014 "),cK=a("a"),Dyr=o("TFBlenderbotForConditionalGeneration"),Gyr=o(" (Blenderbot model)"),Oyr=l(),Z4=a("li"),zMe=a("strong"),Vyr=o("blenderbot-small"),Xyr=o(" \u2014 "),fK=a("a"),zyr=o("TFBlenderbotSmallForConditionalGeneration"),Wyr=o(" (BlenderbotSmall model)"),Qyr=l(),eE=a("li"),WMe=a("strong"),Hyr=o("encoder-decoder"),Uyr=o(" \u2014 "),mK=a("a"),Jyr=o("TFEncoderDecoderModel"),Yyr=o(" (Encoder decoder model)"),Kyr=l(),oE=a("li"),QMe=a("strong"),Zyr=o("led"),e9r=o(" \u2014 "),gK=a("a"),o9r=o("TFLEDForConditionalGeneration"),r9r=o(" (LED model)"),t9r=l(),rE=a("li"),HMe=a("strong"),a9r=o("marian"),n9r=o(" \u2014 "),hK=a("a"),s9r=o("TFMarianMTModel"),l9r=o(" (Marian model)"),i9r=l(),tE=a("li"),UMe=a("strong"),d9r=o("mbart"),c9r=o(" \u2014 "),pK=a("a"),f9r=o("TFMBartForConditionalGeneration"),m9r=o(" (mBART model)"),g9r=l(),aE=a("li"),JMe=a("strong"),h9r=o("mt5"),p9r=o(" \u2014 "),_K=a("a"),_9r=o("TFMT5ForConditionalGeneration"),u9r=o(" (MT5 model)"),b9r=l(),nE=a("li"),YMe=a("strong"),v9r=o("pegasus"),F9r=o(" \u2014 "),uK=a("a"),T9r=o("TFPegasusForConditionalGeneration"),M9r=o(" (Pegasus model)"),E9r=l(),sE=a("li"),KMe=a("strong"),C9r=o("t5"),w9r=o(" \u2014 "),bK=a("a"),A9r=o("TFT5ForConditionalGeneration"),L9r=o(" (T5 model)"),y9r=l(),F(lE.$$.fragment),FWe=l(),Ac=a("h2"),iE=a("a"),ZMe=a("span"),F(Px.$$.fragment),x9r=l(),e4e=a("span"),$9r=o("TFAutoModelForSequenceClassification"),TWe=l(),ir=a("div"),F(Bx.$$.fragment),k9r=l(),Lc=a("p"),S9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vK=a("a"),R9r=o("from_pretrained()"),P9r=o(" class method or the "),FK=a("a"),B9r=o("from_config()"),I9r=o(` class
method.`),N9r=l(),Ix=a("p"),q9r=o("This class cannot be instantiated directly using "),o4e=a("code"),j9r=o("__init__()"),D9r=o(" (throws an error)."),G9r=l(),jt=a("div"),F(Nx.$$.fragment),O9r=l(),r4e=a("p"),V9r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X9r=l(),yc=a("p"),z9r=o(`Note:
Loading a model from its configuration file does `),t4e=a("strong"),W9r=o("not"),Q9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),H9r=o("from_pretrained()"),U9r=o(" to load the model weights."),J9r=l(),F(dE.$$.fragment),Y9r=l(),Ir=a("div"),F(qx.$$.fragment),K9r=l(),a4e=a("p"),Z9r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),exr=l(),gn=a("p"),oxr=o("The model class to instantiate is selected based on the "),n4e=a("code"),rxr=o("model_type"),txr=o(` property of the config object (either
passed as an argument or loaded from `),s4e=a("code"),axr=o("pretrained_model_name_or_path"),nxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=a("code"),sxr=o("pretrained_model_name_or_path"),lxr=o(":"),ixr=l(),te=a("ul"),cE=a("li"),i4e=a("strong"),dxr=o("albert"),cxr=o(" \u2014 "),MK=a("a"),fxr=o("TFAlbertForSequenceClassification"),mxr=o(" (ALBERT model)"),gxr=l(),fE=a("li"),d4e=a("strong"),hxr=o("bert"),pxr=o(" \u2014 "),EK=a("a"),_xr=o("TFBertForSequenceClassification"),uxr=o(" (BERT model)"),bxr=l(),mE=a("li"),c4e=a("strong"),vxr=o("camembert"),Fxr=o(" \u2014 "),CK=a("a"),Txr=o("TFCamembertForSequenceClassification"),Mxr=o(" (CamemBERT model)"),Exr=l(),gE=a("li"),f4e=a("strong"),Cxr=o("convbert"),wxr=o(" \u2014 "),wK=a("a"),Axr=o("TFConvBertForSequenceClassification"),Lxr=o(" (ConvBERT model)"),yxr=l(),hE=a("li"),m4e=a("strong"),xxr=o("ctrl"),$xr=o(" \u2014 "),AK=a("a"),kxr=o("TFCTRLForSequenceClassification"),Sxr=o(" (CTRL model)"),Rxr=l(),pE=a("li"),g4e=a("strong"),Pxr=o("deberta"),Bxr=o(" \u2014 "),LK=a("a"),Ixr=o("TFDebertaForSequenceClassification"),Nxr=o(" (DeBERTa model)"),qxr=l(),_E=a("li"),h4e=a("strong"),jxr=o("deberta-v2"),Dxr=o(" \u2014 "),yK=a("a"),Gxr=o("TFDebertaV2ForSequenceClassification"),Oxr=o(" (DeBERTa-v2 model)"),Vxr=l(),uE=a("li"),p4e=a("strong"),Xxr=o("distilbert"),zxr=o(" \u2014 "),xK=a("a"),Wxr=o("TFDistilBertForSequenceClassification"),Qxr=o(" (DistilBERT model)"),Hxr=l(),bE=a("li"),_4e=a("strong"),Uxr=o("electra"),Jxr=o(" \u2014 "),$K=a("a"),Yxr=o("TFElectraForSequenceClassification"),Kxr=o(" (ELECTRA model)"),Zxr=l(),vE=a("li"),u4e=a("strong"),e$r=o("flaubert"),o$r=o(" \u2014 "),kK=a("a"),r$r=o("TFFlaubertForSequenceClassification"),t$r=o(" (FlauBERT model)"),a$r=l(),FE=a("li"),b4e=a("strong"),n$r=o("funnel"),s$r=o(" \u2014 "),SK=a("a"),l$r=o("TFFunnelForSequenceClassification"),i$r=o(" (Funnel Transformer model)"),d$r=l(),TE=a("li"),v4e=a("strong"),c$r=o("gpt2"),f$r=o(" \u2014 "),RK=a("a"),m$r=o("TFGPT2ForSequenceClassification"),g$r=o(" (OpenAI GPT-2 model)"),h$r=l(),ME=a("li"),F4e=a("strong"),p$r=o("gptj"),_$r=o(" \u2014 "),PK=a("a"),u$r=o("TFGPTJForSequenceClassification"),b$r=o(" (GPT-J model)"),v$r=l(),EE=a("li"),T4e=a("strong"),F$r=o("layoutlm"),T$r=o(" \u2014 "),BK=a("a"),M$r=o("TFLayoutLMForSequenceClassification"),E$r=o(" (LayoutLM model)"),C$r=l(),CE=a("li"),M4e=a("strong"),w$r=o("longformer"),A$r=o(" \u2014 "),IK=a("a"),L$r=o("TFLongformerForSequenceClassification"),y$r=o(" (Longformer model)"),x$r=l(),wE=a("li"),E4e=a("strong"),$$r=o("mobilebert"),k$r=o(" \u2014 "),NK=a("a"),S$r=o("TFMobileBertForSequenceClassification"),R$r=o(" (MobileBERT model)"),P$r=l(),AE=a("li"),C4e=a("strong"),B$r=o("mpnet"),I$r=o(" \u2014 "),qK=a("a"),N$r=o("TFMPNetForSequenceClassification"),q$r=o(" (MPNet model)"),j$r=l(),LE=a("li"),w4e=a("strong"),D$r=o("openai-gpt"),G$r=o(" \u2014 "),jK=a("a"),O$r=o("TFOpenAIGPTForSequenceClassification"),V$r=o(" (OpenAI GPT model)"),X$r=l(),yE=a("li"),A4e=a("strong"),z$r=o("rembert"),W$r=o(" \u2014 "),DK=a("a"),Q$r=o("TFRemBertForSequenceClassification"),H$r=o(" (RemBERT model)"),U$r=l(),xE=a("li"),L4e=a("strong"),J$r=o("roberta"),Y$r=o(" \u2014 "),GK=a("a"),K$r=o("TFRobertaForSequenceClassification"),Z$r=o(" (RoBERTa model)"),ekr=l(),$E=a("li"),y4e=a("strong"),okr=o("roformer"),rkr=o(" \u2014 "),OK=a("a"),tkr=o("TFRoFormerForSequenceClassification"),akr=o(" (RoFormer model)"),nkr=l(),kE=a("li"),x4e=a("strong"),skr=o("tapas"),lkr=o(" \u2014 "),VK=a("a"),ikr=o("TFTapasForSequenceClassification"),dkr=o(" (TAPAS model)"),ckr=l(),SE=a("li"),$4e=a("strong"),fkr=o("transfo-xl"),mkr=o(" \u2014 "),XK=a("a"),gkr=o("TFTransfoXLForSequenceClassification"),hkr=o(" (Transformer-XL model)"),pkr=l(),RE=a("li"),k4e=a("strong"),_kr=o("xlm"),ukr=o(" \u2014 "),zK=a("a"),bkr=o("TFXLMForSequenceClassification"),vkr=o(" (XLM model)"),Fkr=l(),PE=a("li"),S4e=a("strong"),Tkr=o("xlm-roberta"),Mkr=o(" \u2014 "),WK=a("a"),Ekr=o("TFXLMRobertaForSequenceClassification"),Ckr=o(" (XLM-RoBERTa model)"),wkr=l(),BE=a("li"),R4e=a("strong"),Akr=o("xlnet"),Lkr=o(" \u2014 "),QK=a("a"),ykr=o("TFXLNetForSequenceClassification"),xkr=o(" (XLNet model)"),$kr=l(),F(IE.$$.fragment),MWe=l(),xc=a("h2"),NE=a("a"),P4e=a("span"),F(jx.$$.fragment),kkr=l(),B4e=a("span"),Skr=o("TFAutoModelForMultipleChoice"),EWe=l(),dr=a("div"),F(Dx.$$.fragment),Rkr=l(),$c=a("p"),Pkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HK=a("a"),Bkr=o("from_pretrained()"),Ikr=o(" class method or the "),UK=a("a"),Nkr=o("from_config()"),qkr=o(` class
method.`),jkr=l(),Gx=a("p"),Dkr=o("This class cannot be instantiated directly using "),I4e=a("code"),Gkr=o("__init__()"),Okr=o(" (throws an error)."),Vkr=l(),Dt=a("div"),F(Ox.$$.fragment),Xkr=l(),N4e=a("p"),zkr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Wkr=l(),kc=a("p"),Qkr=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),Hkr=o("not"),Ukr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),Jkr=o("from_pretrained()"),Ykr=o(" to load the model weights."),Kkr=l(),F(qE.$$.fragment),Zkr=l(),Nr=a("div"),F(Vx.$$.fragment),eSr=l(),j4e=a("p"),oSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rSr=l(),hn=a("p"),tSr=o("The model class to instantiate is selected based on the "),D4e=a("code"),aSr=o("model_type"),nSr=o(` property of the config object (either
passed as an argument or loaded from `),G4e=a("code"),sSr=o("pretrained_model_name_or_path"),lSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=a("code"),iSr=o("pretrained_model_name_or_path"),dSr=o(":"),cSr=l(),be=a("ul"),jE=a("li"),V4e=a("strong"),fSr=o("albert"),mSr=o(" \u2014 "),YK=a("a"),gSr=o("TFAlbertForMultipleChoice"),hSr=o(" (ALBERT model)"),pSr=l(),DE=a("li"),X4e=a("strong"),_Sr=o("bert"),uSr=o(" \u2014 "),KK=a("a"),bSr=o("TFBertForMultipleChoice"),vSr=o(" (BERT model)"),FSr=l(),GE=a("li"),z4e=a("strong"),TSr=o("camembert"),MSr=o(" \u2014 "),ZK=a("a"),ESr=o("TFCamembertForMultipleChoice"),CSr=o(" (CamemBERT model)"),wSr=l(),OE=a("li"),W4e=a("strong"),ASr=o("convbert"),LSr=o(" \u2014 "),eZ=a("a"),ySr=o("TFConvBertForMultipleChoice"),xSr=o(" (ConvBERT model)"),$Sr=l(),VE=a("li"),Q4e=a("strong"),kSr=o("distilbert"),SSr=o(" \u2014 "),oZ=a("a"),RSr=o("TFDistilBertForMultipleChoice"),PSr=o(" (DistilBERT model)"),BSr=l(),XE=a("li"),H4e=a("strong"),ISr=o("electra"),NSr=o(" \u2014 "),rZ=a("a"),qSr=o("TFElectraForMultipleChoice"),jSr=o(" (ELECTRA model)"),DSr=l(),zE=a("li"),U4e=a("strong"),GSr=o("flaubert"),OSr=o(" \u2014 "),tZ=a("a"),VSr=o("TFFlaubertForMultipleChoice"),XSr=o(" (FlauBERT model)"),zSr=l(),WE=a("li"),J4e=a("strong"),WSr=o("funnel"),QSr=o(" \u2014 "),aZ=a("a"),HSr=o("TFFunnelForMultipleChoice"),USr=o(" (Funnel Transformer model)"),JSr=l(),QE=a("li"),Y4e=a("strong"),YSr=o("longformer"),KSr=o(" \u2014 "),nZ=a("a"),ZSr=o("TFLongformerForMultipleChoice"),eRr=o(" (Longformer model)"),oRr=l(),HE=a("li"),K4e=a("strong"),rRr=o("mobilebert"),tRr=o(" \u2014 "),sZ=a("a"),aRr=o("TFMobileBertForMultipleChoice"),nRr=o(" (MobileBERT model)"),sRr=l(),UE=a("li"),Z4e=a("strong"),lRr=o("mpnet"),iRr=o(" \u2014 "),lZ=a("a"),dRr=o("TFMPNetForMultipleChoice"),cRr=o(" (MPNet model)"),fRr=l(),JE=a("li"),eEe=a("strong"),mRr=o("rembert"),gRr=o(" \u2014 "),iZ=a("a"),hRr=o("TFRemBertForMultipleChoice"),pRr=o(" (RemBERT model)"),_Rr=l(),YE=a("li"),oEe=a("strong"),uRr=o("roberta"),bRr=o(" \u2014 "),dZ=a("a"),vRr=o("TFRobertaForMultipleChoice"),FRr=o(" (RoBERTa model)"),TRr=l(),KE=a("li"),rEe=a("strong"),MRr=o("roformer"),ERr=o(" \u2014 "),cZ=a("a"),CRr=o("TFRoFormerForMultipleChoice"),wRr=o(" (RoFormer model)"),ARr=l(),ZE=a("li"),tEe=a("strong"),LRr=o("xlm"),yRr=o(" \u2014 "),fZ=a("a"),xRr=o("TFXLMForMultipleChoice"),$Rr=o(" (XLM model)"),kRr=l(),eC=a("li"),aEe=a("strong"),SRr=o("xlm-roberta"),RRr=o(" \u2014 "),mZ=a("a"),PRr=o("TFXLMRobertaForMultipleChoice"),BRr=o(" (XLM-RoBERTa model)"),IRr=l(),oC=a("li"),nEe=a("strong"),NRr=o("xlnet"),qRr=o(" \u2014 "),gZ=a("a"),jRr=o("TFXLNetForMultipleChoice"),DRr=o(" (XLNet model)"),GRr=l(),F(rC.$$.fragment),CWe=l(),Sc=a("h2"),tC=a("a"),sEe=a("span"),F(Xx.$$.fragment),ORr=l(),lEe=a("span"),VRr=o("TFAutoModelForNextSentencePrediction"),wWe=l(),cr=a("div"),F(zx.$$.fragment),XRr=l(),Rc=a("p"),zRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hZ=a("a"),WRr=o("from_pretrained()"),QRr=o(" class method or the "),pZ=a("a"),HRr=o("from_config()"),URr=o(` class
method.`),JRr=l(),Wx=a("p"),YRr=o("This class cannot be instantiated directly using "),iEe=a("code"),KRr=o("__init__()"),ZRr=o(" (throws an error)."),ePr=l(),Gt=a("div"),F(Qx.$$.fragment),oPr=l(),dEe=a("p"),rPr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tPr=l(),Pc=a("p"),aPr=o(`Note:
Loading a model from its configuration file does `),cEe=a("strong"),nPr=o("not"),sPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),lPr=o("from_pretrained()"),iPr=o(" to load the model weights."),dPr=l(),F(aC.$$.fragment),cPr=l(),qr=a("div"),F(Hx.$$.fragment),fPr=l(),fEe=a("p"),mPr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gPr=l(),pn=a("p"),hPr=o("The model class to instantiate is selected based on the "),mEe=a("code"),pPr=o("model_type"),_Pr=o(` property of the config object (either
passed as an argument or loaded from `),gEe=a("code"),uPr=o("pretrained_model_name_or_path"),bPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=a("code"),vPr=o("pretrained_model_name_or_path"),FPr=o(":"),TPr=l(),Ux=a("ul"),nC=a("li"),pEe=a("strong"),MPr=o("bert"),EPr=o(" \u2014 "),uZ=a("a"),CPr=o("TFBertForNextSentencePrediction"),wPr=o(" (BERT model)"),APr=l(),sC=a("li"),_Ee=a("strong"),LPr=o("mobilebert"),yPr=o(" \u2014 "),bZ=a("a"),xPr=o("TFMobileBertForNextSentencePrediction"),$Pr=o(" (MobileBERT model)"),kPr=l(),F(lC.$$.fragment),AWe=l(),Bc=a("h2"),iC=a("a"),uEe=a("span"),F(Jx.$$.fragment),SPr=l(),bEe=a("span"),RPr=o("TFAutoModelForTableQuestionAnswering"),LWe=l(),fr=a("div"),F(Yx.$$.fragment),PPr=l(),Ic=a("p"),BPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vZ=a("a"),IPr=o("from_pretrained()"),NPr=o(" class method or the "),FZ=a("a"),qPr=o("from_config()"),jPr=o(` class
method.`),DPr=l(),Kx=a("p"),GPr=o("This class cannot be instantiated directly using "),vEe=a("code"),OPr=o("__init__()"),VPr=o(" (throws an error)."),XPr=l(),Ot=a("div"),F(Zx.$$.fragment),zPr=l(),FEe=a("p"),WPr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),QPr=l(),Nc=a("p"),HPr=o(`Note:
Loading a model from its configuration file does `),TEe=a("strong"),UPr=o("not"),JPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),YPr=o("from_pretrained()"),KPr=o(" to load the model weights."),ZPr=l(),F(dC.$$.fragment),eBr=l(),jr=a("div"),F(e$.$$.fragment),oBr=l(),MEe=a("p"),rBr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tBr=l(),_n=a("p"),aBr=o("The model class to instantiate is selected based on the "),EEe=a("code"),nBr=o("model_type"),sBr=o(` property of the config object (either
passed as an argument or loaded from `),CEe=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=a("code"),dBr=o("pretrained_model_name_or_path"),cBr=o(":"),fBr=l(),AEe=a("ul"),cC=a("li"),LEe=a("strong"),mBr=o("tapas"),gBr=o(" \u2014 "),MZ=a("a"),hBr=o("TFTapasForQuestionAnswering"),pBr=o(" (TAPAS model)"),_Br=l(),F(fC.$$.fragment),yWe=l(),qc=a("h2"),mC=a("a"),yEe=a("span"),F(o$.$$.fragment),uBr=l(),xEe=a("span"),bBr=o("TFAutoModelForTokenClassification"),xWe=l(),mr=a("div"),F(r$.$$.fragment),vBr=l(),jc=a("p"),FBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EZ=a("a"),TBr=o("from_pretrained()"),MBr=o(" class method or the "),CZ=a("a"),EBr=o("from_config()"),CBr=o(` class
method.`),wBr=l(),t$=a("p"),ABr=o("This class cannot be instantiated directly using "),$Ee=a("code"),LBr=o("__init__()"),yBr=o(" (throws an error)."),xBr=l(),Vt=a("div"),F(a$.$$.fragment),$Br=l(),kEe=a("p"),kBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),SBr=l(),Dc=a("p"),RBr=o(`Note:
Loading a model from its configuration file does `),SEe=a("strong"),PBr=o("not"),BBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=a("a"),IBr=o("from_pretrained()"),NBr=o(" to load the model weights."),qBr=l(),F(gC.$$.fragment),jBr=l(),Dr=a("div"),F(n$.$$.fragment),DBr=l(),REe=a("p"),GBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OBr=l(),un=a("p"),VBr=o("The model class to instantiate is selected based on the "),PEe=a("code"),XBr=o("model_type"),zBr=o(` property of the config object (either
passed as an argument or loaded from `),BEe=a("code"),WBr=o("pretrained_model_name_or_path"),QBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=a("code"),HBr=o("pretrained_model_name_or_path"),UBr=o(":"),JBr=l(),de=a("ul"),hC=a("li"),NEe=a("strong"),YBr=o("albert"),KBr=o(" \u2014 "),AZ=a("a"),ZBr=o("TFAlbertForTokenClassification"),eIr=o(" (ALBERT model)"),oIr=l(),pC=a("li"),qEe=a("strong"),rIr=o("bert"),tIr=o(" \u2014 "),LZ=a("a"),aIr=o("TFBertForTokenClassification"),nIr=o(" (BERT model)"),sIr=l(),_C=a("li"),jEe=a("strong"),lIr=o("camembert"),iIr=o(" \u2014 "),yZ=a("a"),dIr=o("TFCamembertForTokenClassification"),cIr=o(" (CamemBERT model)"),fIr=l(),uC=a("li"),DEe=a("strong"),mIr=o("convbert"),gIr=o(" \u2014 "),xZ=a("a"),hIr=o("TFConvBertForTokenClassification"),pIr=o(" (ConvBERT model)"),_Ir=l(),bC=a("li"),GEe=a("strong"),uIr=o("deberta"),bIr=o(" \u2014 "),$Z=a("a"),vIr=o("TFDebertaForTokenClassification"),FIr=o(" (DeBERTa model)"),TIr=l(),vC=a("li"),OEe=a("strong"),MIr=o("deberta-v2"),EIr=o(" \u2014 "),kZ=a("a"),CIr=o("TFDebertaV2ForTokenClassification"),wIr=o(" (DeBERTa-v2 model)"),AIr=l(),FC=a("li"),VEe=a("strong"),LIr=o("distilbert"),yIr=o(" \u2014 "),SZ=a("a"),xIr=o("TFDistilBertForTokenClassification"),$Ir=o(" (DistilBERT model)"),kIr=l(),TC=a("li"),XEe=a("strong"),SIr=o("electra"),RIr=o(" \u2014 "),RZ=a("a"),PIr=o("TFElectraForTokenClassification"),BIr=o(" (ELECTRA model)"),IIr=l(),MC=a("li"),zEe=a("strong"),NIr=o("flaubert"),qIr=o(" \u2014 "),PZ=a("a"),jIr=o("TFFlaubertForTokenClassification"),DIr=o(" (FlauBERT model)"),GIr=l(),EC=a("li"),WEe=a("strong"),OIr=o("funnel"),VIr=o(" \u2014 "),BZ=a("a"),XIr=o("TFFunnelForTokenClassification"),zIr=o(" (Funnel Transformer model)"),WIr=l(),CC=a("li"),QEe=a("strong"),QIr=o("layoutlm"),HIr=o(" \u2014 "),IZ=a("a"),UIr=o("TFLayoutLMForTokenClassification"),JIr=o(" (LayoutLM model)"),YIr=l(),wC=a("li"),HEe=a("strong"),KIr=o("longformer"),ZIr=o(" \u2014 "),NZ=a("a"),eNr=o("TFLongformerForTokenClassification"),oNr=o(" (Longformer model)"),rNr=l(),AC=a("li"),UEe=a("strong"),tNr=o("mobilebert"),aNr=o(" \u2014 "),qZ=a("a"),nNr=o("TFMobileBertForTokenClassification"),sNr=o(" (MobileBERT model)"),lNr=l(),LC=a("li"),JEe=a("strong"),iNr=o("mpnet"),dNr=o(" \u2014 "),jZ=a("a"),cNr=o("TFMPNetForTokenClassification"),fNr=o(" (MPNet model)"),mNr=l(),yC=a("li"),YEe=a("strong"),gNr=o("rembert"),hNr=o(" \u2014 "),DZ=a("a"),pNr=o("TFRemBertForTokenClassification"),_Nr=o(" (RemBERT model)"),uNr=l(),xC=a("li"),KEe=a("strong"),bNr=o("roberta"),vNr=o(" \u2014 "),GZ=a("a"),FNr=o("TFRobertaForTokenClassification"),TNr=o(" (RoBERTa model)"),MNr=l(),$C=a("li"),ZEe=a("strong"),ENr=o("roformer"),CNr=o(" \u2014 "),OZ=a("a"),wNr=o("TFRoFormerForTokenClassification"),ANr=o(" (RoFormer model)"),LNr=l(),kC=a("li"),eCe=a("strong"),yNr=o("xlm"),xNr=o(" \u2014 "),VZ=a("a"),$Nr=o("TFXLMForTokenClassification"),kNr=o(" (XLM model)"),SNr=l(),SC=a("li"),oCe=a("strong"),RNr=o("xlm-roberta"),PNr=o(" \u2014 "),XZ=a("a"),BNr=o("TFXLMRobertaForTokenClassification"),INr=o(" (XLM-RoBERTa model)"),NNr=l(),RC=a("li"),rCe=a("strong"),qNr=o("xlnet"),jNr=o(" \u2014 "),zZ=a("a"),DNr=o("TFXLNetForTokenClassification"),GNr=o(" (XLNet model)"),ONr=l(),F(PC.$$.fragment),$We=l(),Gc=a("h2"),BC=a("a"),tCe=a("span"),F(s$.$$.fragment),VNr=l(),aCe=a("span"),XNr=o("TFAutoModelForQuestionAnswering"),kWe=l(),gr=a("div"),F(l$.$$.fragment),zNr=l(),Oc=a("p"),WNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WZ=a("a"),QNr=o("from_pretrained()"),HNr=o(" class method or the "),QZ=a("a"),UNr=o("from_config()"),JNr=o(` class
method.`),YNr=l(),i$=a("p"),KNr=o("This class cannot be instantiated directly using "),nCe=a("code"),ZNr=o("__init__()"),eqr=o(" (throws an error)."),oqr=l(),Xt=a("div"),F(d$.$$.fragment),rqr=l(),sCe=a("p"),tqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aqr=l(),Vc=a("p"),nqr=o(`Note:
Loading a model from its configuration file does `),lCe=a("strong"),sqr=o("not"),lqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=a("a"),iqr=o("from_pretrained()"),dqr=o(" to load the model weights."),cqr=l(),F(IC.$$.fragment),fqr=l(),Gr=a("div"),F(c$.$$.fragment),mqr=l(),iCe=a("p"),gqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hqr=l(),bn=a("p"),pqr=o("The model class to instantiate is selected based on the "),dCe=a("code"),_qr=o("model_type"),uqr=o(` property of the config object (either
passed as an argument or loaded from `),cCe=a("code"),bqr=o("pretrained_model_name_or_path"),vqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=a("code"),Fqr=o("pretrained_model_name_or_path"),Tqr=o(":"),Mqr=l(),ce=a("ul"),NC=a("li"),mCe=a("strong"),Eqr=o("albert"),Cqr=o(" \u2014 "),UZ=a("a"),wqr=o("TFAlbertForQuestionAnswering"),Aqr=o(" (ALBERT model)"),Lqr=l(),qC=a("li"),gCe=a("strong"),yqr=o("bert"),xqr=o(" \u2014 "),JZ=a("a"),$qr=o("TFBertForQuestionAnswering"),kqr=o(" (BERT model)"),Sqr=l(),jC=a("li"),hCe=a("strong"),Rqr=o("camembert"),Pqr=o(" \u2014 "),YZ=a("a"),Bqr=o("TFCamembertForQuestionAnswering"),Iqr=o(" (CamemBERT model)"),Nqr=l(),DC=a("li"),pCe=a("strong"),qqr=o("convbert"),jqr=o(" \u2014 "),KZ=a("a"),Dqr=o("TFConvBertForQuestionAnswering"),Gqr=o(" (ConvBERT model)"),Oqr=l(),GC=a("li"),_Ce=a("strong"),Vqr=o("deberta"),Xqr=o(" \u2014 "),ZZ=a("a"),zqr=o("TFDebertaForQuestionAnswering"),Wqr=o(" (DeBERTa model)"),Qqr=l(),OC=a("li"),uCe=a("strong"),Hqr=o("deberta-v2"),Uqr=o(" \u2014 "),eee=a("a"),Jqr=o("TFDebertaV2ForQuestionAnswering"),Yqr=o(" (DeBERTa-v2 model)"),Kqr=l(),VC=a("li"),bCe=a("strong"),Zqr=o("distilbert"),ejr=o(" \u2014 "),oee=a("a"),ojr=o("TFDistilBertForQuestionAnswering"),rjr=o(" (DistilBERT model)"),tjr=l(),XC=a("li"),vCe=a("strong"),ajr=o("electra"),njr=o(" \u2014 "),ree=a("a"),sjr=o("TFElectraForQuestionAnswering"),ljr=o(" (ELECTRA model)"),ijr=l(),zC=a("li"),FCe=a("strong"),djr=o("flaubert"),cjr=o(" \u2014 "),tee=a("a"),fjr=o("TFFlaubertForQuestionAnsweringSimple"),mjr=o(" (FlauBERT model)"),gjr=l(),WC=a("li"),TCe=a("strong"),hjr=o("funnel"),pjr=o(" \u2014 "),aee=a("a"),_jr=o("TFFunnelForQuestionAnswering"),ujr=o(" (Funnel Transformer model)"),bjr=l(),QC=a("li"),MCe=a("strong"),vjr=o("gptj"),Fjr=o(" \u2014 "),nee=a("a"),Tjr=o("TFGPTJForQuestionAnswering"),Mjr=o(" (GPT-J model)"),Ejr=l(),HC=a("li"),ECe=a("strong"),Cjr=o("longformer"),wjr=o(" \u2014 "),see=a("a"),Ajr=o("TFLongformerForQuestionAnswering"),Ljr=o(" (Longformer model)"),yjr=l(),UC=a("li"),CCe=a("strong"),xjr=o("mobilebert"),$jr=o(" \u2014 "),lee=a("a"),kjr=o("TFMobileBertForQuestionAnswering"),Sjr=o(" (MobileBERT model)"),Rjr=l(),JC=a("li"),wCe=a("strong"),Pjr=o("mpnet"),Bjr=o(" \u2014 "),iee=a("a"),Ijr=o("TFMPNetForQuestionAnswering"),Njr=o(" (MPNet model)"),qjr=l(),YC=a("li"),ACe=a("strong"),jjr=o("rembert"),Djr=o(" \u2014 "),dee=a("a"),Gjr=o("TFRemBertForQuestionAnswering"),Ojr=o(" (RemBERT model)"),Vjr=l(),KC=a("li"),LCe=a("strong"),Xjr=o("roberta"),zjr=o(" \u2014 "),cee=a("a"),Wjr=o("TFRobertaForQuestionAnswering"),Qjr=o(" (RoBERTa model)"),Hjr=l(),ZC=a("li"),yCe=a("strong"),Ujr=o("roformer"),Jjr=o(" \u2014 "),fee=a("a"),Yjr=o("TFRoFormerForQuestionAnswering"),Kjr=o(" (RoFormer model)"),Zjr=l(),e5=a("li"),xCe=a("strong"),eDr=o("xlm"),oDr=o(" \u2014 "),mee=a("a"),rDr=o("TFXLMForQuestionAnsweringSimple"),tDr=o(" (XLM model)"),aDr=l(),o5=a("li"),$Ce=a("strong"),nDr=o("xlm-roberta"),sDr=o(" \u2014 "),gee=a("a"),lDr=o("TFXLMRobertaForQuestionAnswering"),iDr=o(" (XLM-RoBERTa model)"),dDr=l(),r5=a("li"),kCe=a("strong"),cDr=o("xlnet"),fDr=o(" \u2014 "),hee=a("a"),mDr=o("TFXLNetForQuestionAnsweringSimple"),gDr=o(" (XLNet model)"),hDr=l(),F(t5.$$.fragment),SWe=l(),Xc=a("h2"),a5=a("a"),SCe=a("span"),F(f$.$$.fragment),pDr=l(),RCe=a("span"),_Dr=o("TFAutoModelForVision2Seq"),RWe=l(),hr=a("div"),F(m$.$$.fragment),uDr=l(),zc=a("p"),bDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pee=a("a"),vDr=o("from_pretrained()"),FDr=o(" class method or the "),_ee=a("a"),TDr=o("from_config()"),MDr=o(` class
method.`),EDr=l(),g$=a("p"),CDr=o("This class cannot be instantiated directly using "),PCe=a("code"),wDr=o("__init__()"),ADr=o(" (throws an error)."),LDr=l(),zt=a("div"),F(h$.$$.fragment),yDr=l(),BCe=a("p"),xDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Dr=l(),Wc=a("p"),kDr=o(`Note:
Loading a model from its configuration file does `),ICe=a("strong"),SDr=o("not"),RDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=a("a"),PDr=o("from_pretrained()"),BDr=o(" to load the model weights."),IDr=l(),F(n5.$$.fragment),NDr=l(),Or=a("div"),F(p$.$$.fragment),qDr=l(),NCe=a("p"),jDr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DDr=l(),vn=a("p"),GDr=o("The model class to instantiate is selected based on the "),qCe=a("code"),ODr=o("model_type"),VDr=o(` property of the config object (either
passed as an argument or loaded from `),jCe=a("code"),XDr=o("pretrained_model_name_or_path"),zDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DCe=a("code"),WDr=o("pretrained_model_name_or_path"),QDr=o(":"),HDr=l(),GCe=a("ul"),s5=a("li"),OCe=a("strong"),UDr=o("vision-encoder-decoder"),JDr=o(" \u2014 "),bee=a("a"),YDr=o("TFVisionEncoderDecoderModel"),KDr=o(" (Vision Encoder decoder model)"),ZDr=l(),F(l5.$$.fragment),PWe=l(),Qc=a("h2"),i5=a("a"),VCe=a("span"),F(_$.$$.fragment),eGr=l(),XCe=a("span"),oGr=o("TFAutoModelForSpeechSeq2Seq"),BWe=l(),pr=a("div"),F(u$.$$.fragment),rGr=l(),Hc=a("p"),tGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),vee=a("a"),aGr=o("from_pretrained()"),nGr=o(" class method or the "),Fee=a("a"),sGr=o("from_config()"),lGr=o(` class
method.`),iGr=l(),b$=a("p"),dGr=o("This class cannot be instantiated directly using "),zCe=a("code"),cGr=o("__init__()"),fGr=o(" (throws an error)."),mGr=l(),Wt=a("div"),F(v$.$$.fragment),gGr=l(),WCe=a("p"),hGr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pGr=l(),Uc=a("p"),_Gr=o(`Note:
Loading a model from its configuration file does `),QCe=a("strong"),uGr=o("not"),bGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=a("a"),vGr=o("from_pretrained()"),FGr=o(" to load the model weights."),TGr=l(),F(d5.$$.fragment),MGr=l(),Vr=a("div"),F(F$.$$.fragment),EGr=l(),HCe=a("p"),CGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wGr=l(),Fn=a("p"),AGr=o("The model class to instantiate is selected based on the "),UCe=a("code"),LGr=o("model_type"),yGr=o(` property of the config object (either
passed as an argument or loaded from `),JCe=a("code"),xGr=o("pretrained_model_name_or_path"),$Gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=a("code"),kGr=o("pretrained_model_name_or_path"),SGr=o(":"),RGr=l(),KCe=a("ul"),c5=a("li"),ZCe=a("strong"),PGr=o("speech_to_text"),BGr=o(" \u2014 "),Mee=a("a"),IGr=o("TFSpeech2TextForConditionalGeneration"),NGr=o(" (Speech2Text model)"),qGr=l(),F(f5.$$.fragment),IWe=l(),Jc=a("h2"),m5=a("a"),e5e=a("span"),F(T$.$$.fragment),jGr=l(),o5e=a("span"),DGr=o("FlaxAutoModel"),NWe=l(),_r=a("div"),F(M$.$$.fragment),GGr=l(),Yc=a("p"),OGr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Eee=a("a"),VGr=o("from_pretrained()"),XGr=o(" class method or the "),Cee=a("a"),zGr=o("from_config()"),WGr=o(` class
method.`),QGr=l(),E$=a("p"),HGr=o("This class cannot be instantiated directly using "),r5e=a("code"),UGr=o("__init__()"),JGr=o(" (throws an error)."),YGr=l(),Qt=a("div"),F(C$.$$.fragment),KGr=l(),t5e=a("p"),ZGr=o("Instantiates one of the base model classes of the library from a configuration."),eOr=l(),Kc=a("p"),oOr=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),rOr=o("not"),tOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wee=a("a"),aOr=o("from_pretrained()"),nOr=o(" to load the model weights."),sOr=l(),F(g5.$$.fragment),lOr=l(),Xr=a("div"),F(w$.$$.fragment),iOr=l(),n5e=a("p"),dOr=o("Instantiate one of the base model classes of the library from a pretrained model."),cOr=l(),Tn=a("p"),fOr=o("The model class to instantiate is selected based on the "),s5e=a("code"),mOr=o("model_type"),gOr=o(` property of the config object (either
passed as an argument or loaded from `),l5e=a("code"),hOr=o("pretrained_model_name_or_path"),pOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=a("code"),_Or=o("pretrained_model_name_or_path"),uOr=o(":"),bOr=l(),oe=a("ul"),h5=a("li"),d5e=a("strong"),vOr=o("albert"),FOr=o(" \u2014 "),Aee=a("a"),TOr=o("FlaxAlbertModel"),MOr=o(" (ALBERT model)"),EOr=l(),p5=a("li"),c5e=a("strong"),COr=o("bart"),wOr=o(" \u2014 "),Lee=a("a"),AOr=o("FlaxBartModel"),LOr=o(" (BART model)"),yOr=l(),_5=a("li"),f5e=a("strong"),xOr=o("beit"),$Or=o(" \u2014 "),yee=a("a"),kOr=o("FlaxBeitModel"),SOr=o(" (BEiT model)"),ROr=l(),u5=a("li"),m5e=a("strong"),POr=o("bert"),BOr=o(" \u2014 "),xee=a("a"),IOr=o("FlaxBertModel"),NOr=o(" (BERT model)"),qOr=l(),b5=a("li"),g5e=a("strong"),jOr=o("big_bird"),DOr=o(" \u2014 "),$ee=a("a"),GOr=o("FlaxBigBirdModel"),OOr=o(" (BigBird model)"),VOr=l(),v5=a("li"),h5e=a("strong"),XOr=o("blenderbot"),zOr=o(" \u2014 "),kee=a("a"),WOr=o("FlaxBlenderbotModel"),QOr=o(" (Blenderbot model)"),HOr=l(),F5=a("li"),p5e=a("strong"),UOr=o("blenderbot-small"),JOr=o(" \u2014 "),See=a("a"),YOr=o("FlaxBlenderbotSmallModel"),KOr=o(" (BlenderbotSmall model)"),ZOr=l(),T5=a("li"),_5e=a("strong"),eVr=o("clip"),oVr=o(" \u2014 "),Ree=a("a"),rVr=o("FlaxCLIPModel"),tVr=o(" (CLIP model)"),aVr=l(),M5=a("li"),u5e=a("strong"),nVr=o("distilbert"),sVr=o(" \u2014 "),Pee=a("a"),lVr=o("FlaxDistilBertModel"),iVr=o(" (DistilBERT model)"),dVr=l(),E5=a("li"),b5e=a("strong"),cVr=o("electra"),fVr=o(" \u2014 "),Bee=a("a"),mVr=o("FlaxElectraModel"),gVr=o(" (ELECTRA model)"),hVr=l(),C5=a("li"),v5e=a("strong"),pVr=o("gpt2"),_Vr=o(" \u2014 "),Iee=a("a"),uVr=o("FlaxGPT2Model"),bVr=o(" (OpenAI GPT-2 model)"),vVr=l(),w5=a("li"),F5e=a("strong"),FVr=o("gpt_neo"),TVr=o(" \u2014 "),Nee=a("a"),MVr=o("FlaxGPTNeoModel"),EVr=o(" (GPT Neo model)"),CVr=l(),A5=a("li"),T5e=a("strong"),wVr=o("gptj"),AVr=o(" \u2014 "),qee=a("a"),LVr=o("FlaxGPTJModel"),yVr=o(" (GPT-J model)"),xVr=l(),L5=a("li"),M5e=a("strong"),$Vr=o("longt5"),kVr=o(" \u2014 "),jee=a("a"),SVr=o("FlaxLongT5Model"),RVr=o(" (LongT5 model)"),PVr=l(),y5=a("li"),E5e=a("strong"),BVr=o("marian"),IVr=o(" \u2014 "),Dee=a("a"),NVr=o("FlaxMarianModel"),qVr=o(" (Marian model)"),jVr=l(),x5=a("li"),C5e=a("strong"),DVr=o("mbart"),GVr=o(" \u2014 "),Gee=a("a"),OVr=o("FlaxMBartModel"),VVr=o(" (mBART model)"),XVr=l(),$5=a("li"),w5e=a("strong"),zVr=o("mt5"),WVr=o(" \u2014 "),Oee=a("a"),QVr=o("FlaxMT5Model"),HVr=o(" (MT5 model)"),UVr=l(),k5=a("li"),A5e=a("strong"),JVr=o("opt"),YVr=o(" \u2014 "),Vee=a("a"),KVr=o("FlaxOPTModel"),ZVr=o(" (OPT model)"),eXr=l(),S5=a("li"),L5e=a("strong"),oXr=o("pegasus"),rXr=o(" \u2014 "),Xee=a("a"),tXr=o("FlaxPegasusModel"),aXr=o(" (Pegasus model)"),nXr=l(),R5=a("li"),y5e=a("strong"),sXr=o("roberta"),lXr=o(" \u2014 "),zee=a("a"),iXr=o("FlaxRobertaModel"),dXr=o(" (RoBERTa model)"),cXr=l(),P5=a("li"),x5e=a("strong"),fXr=o("roformer"),mXr=o(" \u2014 "),Wee=a("a"),gXr=o("FlaxRoFormerModel"),hXr=o(" (RoFormer model)"),pXr=l(),B5=a("li"),$5e=a("strong"),_Xr=o("t5"),uXr=o(" \u2014 "),Qee=a("a"),bXr=o("FlaxT5Model"),vXr=o(" (T5 model)"),FXr=l(),I5=a("li"),k5e=a("strong"),TXr=o("vision-text-dual-encoder"),MXr=o(" \u2014 "),Hee=a("a"),EXr=o("FlaxVisionTextDualEncoderModel"),CXr=o(" (VisionTextDualEncoder model)"),wXr=l(),N5=a("li"),S5e=a("strong"),AXr=o("vit"),LXr=o(" \u2014 "),Uee=a("a"),yXr=o("FlaxViTModel"),xXr=o(" (ViT model)"),$Xr=l(),q5=a("li"),R5e=a("strong"),kXr=o("wav2vec2"),SXr=o(" \u2014 "),Jee=a("a"),RXr=o("FlaxWav2Vec2Model"),PXr=o(" (Wav2Vec2 model)"),BXr=l(),j5=a("li"),P5e=a("strong"),IXr=o("xglm"),NXr=o(" \u2014 "),Yee=a("a"),qXr=o("FlaxXGLMModel"),jXr=o(" (XGLM model)"),DXr=l(),D5=a("li"),B5e=a("strong"),GXr=o("xlm-roberta"),OXr=o(" \u2014 "),Kee=a("a"),VXr=o("FlaxXLMRobertaModel"),XXr=o(" (XLM-RoBERTa model)"),zXr=l(),F(G5.$$.fragment),qWe=l(),Zc=a("h2"),O5=a("a"),I5e=a("span"),F(A$.$$.fragment),WXr=l(),N5e=a("span"),QXr=o("FlaxAutoModelForCausalLM"),jWe=l(),ur=a("div"),F(L$.$$.fragment),HXr=l(),ef=a("p"),UXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Zee=a("a"),JXr=o("from_pretrained()"),YXr=o(" class method or the "),eoe=a("a"),KXr=o("from_config()"),ZXr=o(` class
method.`),ezr=l(),y$=a("p"),ozr=o("This class cannot be instantiated directly using "),q5e=a("code"),rzr=o("__init__()"),tzr=o(" (throws an error)."),azr=l(),Ht=a("div"),F(x$.$$.fragment),nzr=l(),j5e=a("p"),szr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lzr=l(),of=a("p"),izr=o(`Note:
Loading a model from its configuration file does `),D5e=a("strong"),dzr=o("not"),czr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=a("a"),fzr=o("from_pretrained()"),mzr=o(" to load the model weights."),gzr=l(),F(V5.$$.fragment),hzr=l(),zr=a("div"),F($$.$$.fragment),pzr=l(),G5e=a("p"),_zr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uzr=l(),Mn=a("p"),bzr=o("The model class to instantiate is selected based on the "),O5e=a("code"),vzr=o("model_type"),Fzr=o(` property of the config object (either
passed as an argument or loaded from `),V5e=a("code"),Tzr=o("pretrained_model_name_or_path"),Mzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=a("code"),Ezr=o("pretrained_model_name_or_path"),Czr=o(":"),wzr=l(),xe=a("ul"),X5=a("li"),z5e=a("strong"),Azr=o("bart"),Lzr=o(" \u2014 "),roe=a("a"),yzr=o("FlaxBartForCausalLM"),xzr=o(" (BART model)"),$zr=l(),z5=a("li"),W5e=a("strong"),kzr=o("bert"),Szr=o(" \u2014 "),toe=a("a"),Rzr=o("FlaxBertForCausalLM"),Pzr=o(" (BERT model)"),Bzr=l(),W5=a("li"),Q5e=a("strong"),Izr=o("big_bird"),Nzr=o(" \u2014 "),aoe=a("a"),qzr=o("FlaxBigBirdForCausalLM"),jzr=o(" (BigBird model)"),Dzr=l(),Q5=a("li"),H5e=a("strong"),Gzr=o("electra"),Ozr=o(" \u2014 "),noe=a("a"),Vzr=o("FlaxElectraForCausalLM"),Xzr=o(" (ELECTRA model)"),zzr=l(),H5=a("li"),U5e=a("strong"),Wzr=o("gpt2"),Qzr=o(" \u2014 "),soe=a("a"),Hzr=o("FlaxGPT2LMHeadModel"),Uzr=o(" (OpenAI GPT-2 model)"),Jzr=l(),U5=a("li"),J5e=a("strong"),Yzr=o("gpt_neo"),Kzr=o(" \u2014 "),loe=a("a"),Zzr=o("FlaxGPTNeoForCausalLM"),eWr=o(" (GPT Neo model)"),oWr=l(),J5=a("li"),Y5e=a("strong"),rWr=o("gptj"),tWr=o(" \u2014 "),ioe=a("a"),aWr=o("FlaxGPTJForCausalLM"),nWr=o(" (GPT-J model)"),sWr=l(),Y5=a("li"),K5e=a("strong"),lWr=o("opt"),iWr=o(" \u2014 "),doe=a("a"),dWr=o("FlaxOPTForCausalLM"),cWr=o(" (OPT model)"),fWr=l(),K5=a("li"),Z5e=a("strong"),mWr=o("roberta"),gWr=o(" \u2014 "),coe=a("a"),hWr=o("FlaxRobertaForCausalLM"),pWr=o(" (RoBERTa model)"),_Wr=l(),Z5=a("li"),e3e=a("strong"),uWr=o("xglm"),bWr=o(" \u2014 "),foe=a("a"),vWr=o("FlaxXGLMForCausalLM"),FWr=o(" (XGLM model)"),TWr=l(),F(e3.$$.fragment),DWe=l(),rf=a("h2"),o3=a("a"),o3e=a("span"),F(k$.$$.fragment),MWr=l(),r3e=a("span"),EWr=o("FlaxAutoModelForPreTraining"),GWe=l(),br=a("div"),F(S$.$$.fragment),CWr=l(),tf=a("p"),wWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),moe=a("a"),AWr=o("from_pretrained()"),LWr=o(" class method or the "),goe=a("a"),yWr=o("from_config()"),xWr=o(` class
method.`),$Wr=l(),R$=a("p"),kWr=o("This class cannot be instantiated directly using "),t3e=a("code"),SWr=o("__init__()"),RWr=o(" (throws an error)."),PWr=l(),Ut=a("div"),F(P$.$$.fragment),BWr=l(),a3e=a("p"),IWr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NWr=l(),af=a("p"),qWr=o(`Note:
Loading a model from its configuration file does `),n3e=a("strong"),jWr=o("not"),DWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=a("a"),GWr=o("from_pretrained()"),OWr=o(" to load the model weights."),VWr=l(),F(r3.$$.fragment),XWr=l(),Wr=a("div"),F(B$.$$.fragment),zWr=l(),s3e=a("p"),WWr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),QWr=l(),En=a("p"),HWr=o("The model class to instantiate is selected based on the "),l3e=a("code"),UWr=o("model_type"),JWr=o(` property of the config object (either
passed as an argument or loaded from `),i3e=a("code"),YWr=o("pretrained_model_name_or_path"),KWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=a("code"),ZWr=o("pretrained_model_name_or_path"),eQr=o(":"),oQr=l(),Ee=a("ul"),t3=a("li"),c3e=a("strong"),rQr=o("albert"),tQr=o(" \u2014 "),poe=a("a"),aQr=o("FlaxAlbertForPreTraining"),nQr=o(" (ALBERT model)"),sQr=l(),a3=a("li"),f3e=a("strong"),lQr=o("bart"),iQr=o(" \u2014 "),_oe=a("a"),dQr=o("FlaxBartForConditionalGeneration"),cQr=o(" (BART model)"),fQr=l(),n3=a("li"),m3e=a("strong"),mQr=o("bert"),gQr=o(" \u2014 "),uoe=a("a"),hQr=o("FlaxBertForPreTraining"),pQr=o(" (BERT model)"),_Qr=l(),s3=a("li"),g3e=a("strong"),uQr=o("big_bird"),bQr=o(" \u2014 "),boe=a("a"),vQr=o("FlaxBigBirdForPreTraining"),FQr=o(" (BigBird model)"),TQr=l(),l3=a("li"),h3e=a("strong"),MQr=o("electra"),EQr=o(" \u2014 "),voe=a("a"),CQr=o("FlaxElectraForPreTraining"),wQr=o(" (ELECTRA model)"),AQr=l(),i3=a("li"),p3e=a("strong"),LQr=o("longt5"),yQr=o(" \u2014 "),Foe=a("a"),xQr=o("FlaxLongT5ForConditionalGeneration"),$Qr=o(" (LongT5 model)"),kQr=l(),d3=a("li"),_3e=a("strong"),SQr=o("mbart"),RQr=o(" \u2014 "),Toe=a("a"),PQr=o("FlaxMBartForConditionalGeneration"),BQr=o(" (mBART model)"),IQr=l(),c3=a("li"),u3e=a("strong"),NQr=o("mt5"),qQr=o(" \u2014 "),Moe=a("a"),jQr=o("FlaxMT5ForConditionalGeneration"),DQr=o(" (MT5 model)"),GQr=l(),f3=a("li"),b3e=a("strong"),OQr=o("roberta"),VQr=o(" \u2014 "),Eoe=a("a"),XQr=o("FlaxRobertaForMaskedLM"),zQr=o(" (RoBERTa model)"),WQr=l(),m3=a("li"),v3e=a("strong"),QQr=o("roformer"),HQr=o(" \u2014 "),Coe=a("a"),UQr=o("FlaxRoFormerForMaskedLM"),JQr=o(" (RoFormer model)"),YQr=l(),g3=a("li"),F3e=a("strong"),KQr=o("t5"),ZQr=o(" \u2014 "),woe=a("a"),eHr=o("FlaxT5ForConditionalGeneration"),oHr=o(" (T5 model)"),rHr=l(),h3=a("li"),T3e=a("strong"),tHr=o("wav2vec2"),aHr=o(" \u2014 "),Aoe=a("a"),nHr=o("FlaxWav2Vec2ForPreTraining"),sHr=o(" (Wav2Vec2 model)"),lHr=l(),p3=a("li"),M3e=a("strong"),iHr=o("xlm-roberta"),dHr=o(" \u2014 "),Loe=a("a"),cHr=o("FlaxXLMRobertaForMaskedLM"),fHr=o(" (XLM-RoBERTa model)"),mHr=l(),F(_3.$$.fragment),OWe=l(),nf=a("h2"),u3=a("a"),E3e=a("span"),F(I$.$$.fragment),gHr=l(),C3e=a("span"),hHr=o("FlaxAutoModelForMaskedLM"),VWe=l(),vr=a("div"),F(N$.$$.fragment),pHr=l(),sf=a("p"),_Hr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yoe=a("a"),uHr=o("from_pretrained()"),bHr=o(" class method or the "),xoe=a("a"),vHr=o("from_config()"),FHr=o(` class
method.`),THr=l(),q$=a("p"),MHr=o("This class cannot be instantiated directly using "),w3e=a("code"),EHr=o("__init__()"),CHr=o(" (throws an error)."),wHr=l(),Jt=a("div"),F(j$.$$.fragment),AHr=l(),A3e=a("p"),LHr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yHr=l(),lf=a("p"),xHr=o(`Note:
Loading a model from its configuration file does `),L3e=a("strong"),$Hr=o("not"),kHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=a("a"),SHr=o("from_pretrained()"),RHr=o(" to load the model weights."),PHr=l(),F(b3.$$.fragment),BHr=l(),Qr=a("div"),F(D$.$$.fragment),IHr=l(),y3e=a("p"),NHr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qHr=l(),Cn=a("p"),jHr=o("The model class to instantiate is selected based on the "),x3e=a("code"),DHr=o("model_type"),GHr=o(` property of the config object (either
passed as an argument or loaded from `),$3e=a("code"),OHr=o("pretrained_model_name_or_path"),VHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=a("code"),XHr=o("pretrained_model_name_or_path"),zHr=o(":"),WHr=l(),$e=a("ul"),v3=a("li"),S3e=a("strong"),QHr=o("albert"),HHr=o(" \u2014 "),koe=a("a"),UHr=o("FlaxAlbertForMaskedLM"),JHr=o(" (ALBERT model)"),YHr=l(),F3=a("li"),R3e=a("strong"),KHr=o("bart"),ZHr=o(" \u2014 "),Soe=a("a"),eUr=o("FlaxBartForConditionalGeneration"),oUr=o(" (BART model)"),rUr=l(),T3=a("li"),P3e=a("strong"),tUr=o("bert"),aUr=o(" \u2014 "),Roe=a("a"),nUr=o("FlaxBertForMaskedLM"),sUr=o(" (BERT model)"),lUr=l(),M3=a("li"),B3e=a("strong"),iUr=o("big_bird"),dUr=o(" \u2014 "),Poe=a("a"),cUr=o("FlaxBigBirdForMaskedLM"),fUr=o(" (BigBird model)"),mUr=l(),E3=a("li"),I3e=a("strong"),gUr=o("distilbert"),hUr=o(" \u2014 "),Boe=a("a"),pUr=o("FlaxDistilBertForMaskedLM"),_Ur=o(" (DistilBERT model)"),uUr=l(),C3=a("li"),N3e=a("strong"),bUr=o("electra"),vUr=o(" \u2014 "),Ioe=a("a"),FUr=o("FlaxElectraForMaskedLM"),TUr=o(" (ELECTRA model)"),MUr=l(),w3=a("li"),q3e=a("strong"),EUr=o("mbart"),CUr=o(" \u2014 "),Noe=a("a"),wUr=o("FlaxMBartForConditionalGeneration"),AUr=o(" (mBART model)"),LUr=l(),A3=a("li"),j3e=a("strong"),yUr=o("roberta"),xUr=o(" \u2014 "),qoe=a("a"),$Ur=o("FlaxRobertaForMaskedLM"),kUr=o(" (RoBERTa model)"),SUr=l(),L3=a("li"),D3e=a("strong"),RUr=o("roformer"),PUr=o(" \u2014 "),joe=a("a"),BUr=o("FlaxRoFormerForMaskedLM"),IUr=o(" (RoFormer model)"),NUr=l(),y3=a("li"),G3e=a("strong"),qUr=o("xlm-roberta"),jUr=o(" \u2014 "),Doe=a("a"),DUr=o("FlaxXLMRobertaForMaskedLM"),GUr=o(" (XLM-RoBERTa model)"),OUr=l(),F(x3.$$.fragment),XWe=l(),df=a("h2"),$3=a("a"),O3e=a("span"),F(G$.$$.fragment),VUr=l(),V3e=a("span"),XUr=o("FlaxAutoModelForSeq2SeqLM"),zWe=l(),Fr=a("div"),F(O$.$$.fragment),zUr=l(),cf=a("p"),WUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Goe=a("a"),QUr=o("from_pretrained()"),HUr=o(" class method or the "),Ooe=a("a"),UUr=o("from_config()"),JUr=o(` class
method.`),YUr=l(),V$=a("p"),KUr=o("This class cannot be instantiated directly using "),X3e=a("code"),ZUr=o("__init__()"),eJr=o(" (throws an error)."),oJr=l(),Yt=a("div"),F(X$.$$.fragment),rJr=l(),z3e=a("p"),tJr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aJr=l(),ff=a("p"),nJr=o(`Note:
Loading a model from its configuration file does `),W3e=a("strong"),sJr=o("not"),lJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Voe=a("a"),iJr=o("from_pretrained()"),dJr=o(" to load the model weights."),cJr=l(),F(k3.$$.fragment),fJr=l(),Hr=a("div"),F(z$.$$.fragment),mJr=l(),Q3e=a("p"),gJr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hJr=l(),wn=a("p"),pJr=o("The model class to instantiate is selected based on the "),H3e=a("code"),_Jr=o("model_type"),uJr=o(` property of the config object (either
passed as an argument or loaded from `),U3e=a("code"),bJr=o("pretrained_model_name_or_path"),vJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=a("code"),FJr=o("pretrained_model_name_or_path"),TJr=o(":"),MJr=l(),ke=a("ul"),S3=a("li"),Y3e=a("strong"),EJr=o("bart"),CJr=o(" \u2014 "),Xoe=a("a"),wJr=o("FlaxBartForConditionalGeneration"),AJr=o(" (BART model)"),LJr=l(),R3=a("li"),K3e=a("strong"),yJr=o("blenderbot"),xJr=o(" \u2014 "),zoe=a("a"),$Jr=o("FlaxBlenderbotForConditionalGeneration"),kJr=o(" (Blenderbot model)"),SJr=l(),P3=a("li"),Z3e=a("strong"),RJr=o("blenderbot-small"),PJr=o(" \u2014 "),Woe=a("a"),BJr=o("FlaxBlenderbotSmallForConditionalGeneration"),IJr=o(" (BlenderbotSmall model)"),NJr=l(),B3=a("li"),e0e=a("strong"),qJr=o("encoder-decoder"),jJr=o(" \u2014 "),Qoe=a("a"),DJr=o("FlaxEncoderDecoderModel"),GJr=o(" (Encoder decoder model)"),OJr=l(),I3=a("li"),o0e=a("strong"),VJr=o("longt5"),XJr=o(" \u2014 "),Hoe=a("a"),zJr=o("FlaxLongT5ForConditionalGeneration"),WJr=o(" (LongT5 model)"),QJr=l(),N3=a("li"),r0e=a("strong"),HJr=o("marian"),UJr=o(" \u2014 "),Uoe=a("a"),JJr=o("FlaxMarianMTModel"),YJr=o(" (Marian model)"),KJr=l(),q3=a("li"),t0e=a("strong"),ZJr=o("mbart"),eYr=o(" \u2014 "),Joe=a("a"),oYr=o("FlaxMBartForConditionalGeneration"),rYr=o(" (mBART model)"),tYr=l(),j3=a("li"),a0e=a("strong"),aYr=o("mt5"),nYr=o(" \u2014 "),Yoe=a("a"),sYr=o("FlaxMT5ForConditionalGeneration"),lYr=o(" (MT5 model)"),iYr=l(),D3=a("li"),n0e=a("strong"),dYr=o("pegasus"),cYr=o(" \u2014 "),Koe=a("a"),fYr=o("FlaxPegasusForConditionalGeneration"),mYr=o(" (Pegasus model)"),gYr=l(),G3=a("li"),s0e=a("strong"),hYr=o("t5"),pYr=o(" \u2014 "),Zoe=a("a"),_Yr=o("FlaxT5ForConditionalGeneration"),uYr=o(" (T5 model)"),bYr=l(),F(O3.$$.fragment),WWe=l(),mf=a("h2"),V3=a("a"),l0e=a("span"),F(W$.$$.fragment),vYr=l(),i0e=a("span"),FYr=o("FlaxAutoModelForSequenceClassification"),QWe=l(),Tr=a("div"),F(Q$.$$.fragment),TYr=l(),gf=a("p"),MYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ere=a("a"),EYr=o("from_pretrained()"),CYr=o(" class method or the "),ore=a("a"),wYr=o("from_config()"),AYr=o(` class
method.`),LYr=l(),H$=a("p"),yYr=o("This class cannot be instantiated directly using "),d0e=a("code"),xYr=o("__init__()"),$Yr=o(" (throws an error)."),kYr=l(),Kt=a("div"),F(U$.$$.fragment),SYr=l(),c0e=a("p"),RYr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PYr=l(),hf=a("p"),BYr=o(`Note:
Loading a model from its configuration file does `),f0e=a("strong"),IYr=o("not"),NYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=a("a"),qYr=o("from_pretrained()"),jYr=o(" to load the model weights."),DYr=l(),F(X3.$$.fragment),GYr=l(),Ur=a("div"),F(J$.$$.fragment),OYr=l(),m0e=a("p"),VYr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XYr=l(),An=a("p"),zYr=o("The model class to instantiate is selected based on the "),g0e=a("code"),WYr=o("model_type"),QYr=o(` property of the config object (either
passed as an argument or loaded from `),h0e=a("code"),HYr=o("pretrained_model_name_or_path"),UYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=a("code"),JYr=o("pretrained_model_name_or_path"),YYr=o(":"),KYr=l(),Se=a("ul"),z3=a("li"),_0e=a("strong"),ZYr=o("albert"),eKr=o(" \u2014 "),tre=a("a"),oKr=o("FlaxAlbertForSequenceClassification"),rKr=o(" (ALBERT model)"),tKr=l(),W3=a("li"),u0e=a("strong"),aKr=o("bart"),nKr=o(" \u2014 "),are=a("a"),sKr=o("FlaxBartForSequenceClassification"),lKr=o(" (BART model)"),iKr=l(),Q3=a("li"),b0e=a("strong"),dKr=o("bert"),cKr=o(" \u2014 "),nre=a("a"),fKr=o("FlaxBertForSequenceClassification"),mKr=o(" (BERT model)"),gKr=l(),H3=a("li"),v0e=a("strong"),hKr=o("big_bird"),pKr=o(" \u2014 "),sre=a("a"),_Kr=o("FlaxBigBirdForSequenceClassification"),uKr=o(" (BigBird model)"),bKr=l(),U3=a("li"),F0e=a("strong"),vKr=o("distilbert"),FKr=o(" \u2014 "),lre=a("a"),TKr=o("FlaxDistilBertForSequenceClassification"),MKr=o(" (DistilBERT model)"),EKr=l(),J3=a("li"),T0e=a("strong"),CKr=o("electra"),wKr=o(" \u2014 "),ire=a("a"),AKr=o("FlaxElectraForSequenceClassification"),LKr=o(" (ELECTRA model)"),yKr=l(),Y3=a("li"),M0e=a("strong"),xKr=o("mbart"),$Kr=o(" \u2014 "),dre=a("a"),kKr=o("FlaxMBartForSequenceClassification"),SKr=o(" (mBART model)"),RKr=l(),K3=a("li"),E0e=a("strong"),PKr=o("roberta"),BKr=o(" \u2014 "),cre=a("a"),IKr=o("FlaxRobertaForSequenceClassification"),NKr=o(" (RoBERTa model)"),qKr=l(),Z3=a("li"),C0e=a("strong"),jKr=o("roformer"),DKr=o(" \u2014 "),fre=a("a"),GKr=o("FlaxRoFormerForSequenceClassification"),OKr=o(" (RoFormer model)"),VKr=l(),e0=a("li"),w0e=a("strong"),XKr=o("xlm-roberta"),zKr=o(" \u2014 "),mre=a("a"),WKr=o("FlaxXLMRobertaForSequenceClassification"),QKr=o(" (XLM-RoBERTa model)"),HKr=l(),F(o0.$$.fragment),HWe=l(),pf=a("h2"),r0=a("a"),A0e=a("span"),F(Y$.$$.fragment),UKr=l(),L0e=a("span"),JKr=o("FlaxAutoModelForQuestionAnswering"),UWe=l(),Mr=a("div"),F(K$.$$.fragment),YKr=l(),_f=a("p"),KKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gre=a("a"),ZKr=o("from_pretrained()"),eZr=o(" class method or the "),hre=a("a"),oZr=o("from_config()"),rZr=o(` class
method.`),tZr=l(),Z$=a("p"),aZr=o("This class cannot be instantiated directly using "),y0e=a("code"),nZr=o("__init__()"),sZr=o(" (throws an error)."),lZr=l(),Zt=a("div"),F(ek.$$.fragment),iZr=l(),x0e=a("p"),dZr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cZr=l(),uf=a("p"),fZr=o(`Note:
Loading a model from its configuration file does `),$0e=a("strong"),mZr=o("not"),gZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pre=a("a"),hZr=o("from_pretrained()"),pZr=o(" to load the model weights."),_Zr=l(),F(t0.$$.fragment),uZr=l(),Jr=a("div"),F(ok.$$.fragment),bZr=l(),k0e=a("p"),vZr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FZr=l(),Ln=a("p"),TZr=o("The model class to instantiate is selected based on the "),S0e=a("code"),MZr=o("model_type"),EZr=o(` property of the config object (either
passed as an argument or loaded from `),R0e=a("code"),CZr=o("pretrained_model_name_or_path"),wZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=a("code"),AZr=o("pretrained_model_name_or_path"),LZr=o(":"),yZr=l(),Re=a("ul"),a0=a("li"),B0e=a("strong"),xZr=o("albert"),$Zr=o(" \u2014 "),_re=a("a"),kZr=o("FlaxAlbertForQuestionAnswering"),SZr=o(" (ALBERT model)"),RZr=l(),n0=a("li"),I0e=a("strong"),PZr=o("bart"),BZr=o(" \u2014 "),ure=a("a"),IZr=o("FlaxBartForQuestionAnswering"),NZr=o(" (BART model)"),qZr=l(),s0=a("li"),N0e=a("strong"),jZr=o("bert"),DZr=o(" \u2014 "),bre=a("a"),GZr=o("FlaxBertForQuestionAnswering"),OZr=o(" (BERT model)"),VZr=l(),l0=a("li"),q0e=a("strong"),XZr=o("big_bird"),zZr=o(" \u2014 "),vre=a("a"),WZr=o("FlaxBigBirdForQuestionAnswering"),QZr=o(" (BigBird model)"),HZr=l(),i0=a("li"),j0e=a("strong"),UZr=o("distilbert"),JZr=o(" \u2014 "),Fre=a("a"),YZr=o("FlaxDistilBertForQuestionAnswering"),KZr=o(" (DistilBERT model)"),ZZr=l(),d0=a("li"),D0e=a("strong"),eet=o("electra"),oet=o(" \u2014 "),Tre=a("a"),ret=o("FlaxElectraForQuestionAnswering"),tet=o(" (ELECTRA model)"),aet=l(),c0=a("li"),G0e=a("strong"),net=o("mbart"),set=o(" \u2014 "),Mre=a("a"),iet=o("FlaxMBartForQuestionAnswering"),det=o(" (mBART model)"),cet=l(),f0=a("li"),O0e=a("strong"),fet=o("roberta"),met=o(" \u2014 "),Ere=a("a"),get=o("FlaxRobertaForQuestionAnswering"),het=o(" (RoBERTa model)"),pet=l(),m0=a("li"),V0e=a("strong"),_et=o("roformer"),uet=o(" \u2014 "),Cre=a("a"),bet=o("FlaxRoFormerForQuestionAnswering"),vet=o(" (RoFormer model)"),Fet=l(),g0=a("li"),X0e=a("strong"),Tet=o("xlm-roberta"),Met=o(" \u2014 "),wre=a("a"),Eet=o("FlaxXLMRobertaForQuestionAnswering"),Cet=o(" (XLM-RoBERTa model)"),wet=l(),F(h0.$$.fragment),JWe=l(),bf=a("h2"),p0=a("a"),z0e=a("span"),F(rk.$$.fragment),Aet=l(),W0e=a("span"),Let=o("FlaxAutoModelForTokenClassification"),YWe=l(),Er=a("div"),F(tk.$$.fragment),yet=l(),vf=a("p"),xet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Are=a("a"),$et=o("from_pretrained()"),ket=o(" class method or the "),Lre=a("a"),Set=o("from_config()"),Ret=o(` class
method.`),Pet=l(),ak=a("p"),Bet=o("This class cannot be instantiated directly using "),Q0e=a("code"),Iet=o("__init__()"),Net=o(" (throws an error)."),qet=l(),ea=a("div"),F(nk.$$.fragment),jet=l(),H0e=a("p"),Det=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Get=l(),Ff=a("p"),Oet=o(`Note:
Loading a model from its configuration file does `),U0e=a("strong"),Vet=o("not"),Xet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=a("a"),zet=o("from_pretrained()"),Wet=o(" to load the model weights."),Qet=l(),F(_0.$$.fragment),Het=l(),Yr=a("div"),F(sk.$$.fragment),Uet=l(),J0e=a("p"),Jet=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Yet=l(),yn=a("p"),Ket=o("The model class to instantiate is selected based on the "),Y0e=a("code"),Zet=o("model_type"),eot=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),oot=o("pretrained_model_name_or_path"),rot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=a("code"),tot=o("pretrained_model_name_or_path"),aot=o(":"),not=l(),Xe=a("ul"),u0=a("li"),ewe=a("strong"),sot=o("albert"),lot=o(" \u2014 "),xre=a("a"),iot=o("FlaxAlbertForTokenClassification"),dot=o(" (ALBERT model)"),cot=l(),b0=a("li"),owe=a("strong"),fot=o("bert"),mot=o(" \u2014 "),$re=a("a"),got=o("FlaxBertForTokenClassification"),hot=o(" (BERT model)"),pot=l(),v0=a("li"),rwe=a("strong"),_ot=o("big_bird"),uot=o(" \u2014 "),kre=a("a"),bot=o("FlaxBigBirdForTokenClassification"),vot=o(" (BigBird model)"),Fot=l(),F0=a("li"),twe=a("strong"),Tot=o("distilbert"),Mot=o(" \u2014 "),Sre=a("a"),Eot=o("FlaxDistilBertForTokenClassification"),Cot=o(" (DistilBERT model)"),wot=l(),T0=a("li"),awe=a("strong"),Aot=o("electra"),Lot=o(" \u2014 "),Rre=a("a"),yot=o("FlaxElectraForTokenClassification"),xot=o(" (ELECTRA model)"),$ot=l(),M0=a("li"),nwe=a("strong"),kot=o("roberta"),Sot=o(" \u2014 "),Pre=a("a"),Rot=o("FlaxRobertaForTokenClassification"),Pot=o(" (RoBERTa model)"),Bot=l(),E0=a("li"),swe=a("strong"),Iot=o("roformer"),Not=o(" \u2014 "),Bre=a("a"),qot=o("FlaxRoFormerForTokenClassification"),jot=o(" (RoFormer model)"),Dot=l(),C0=a("li"),lwe=a("strong"),Got=o("xlm-roberta"),Oot=o(" \u2014 "),Ire=a("a"),Vot=o("FlaxXLMRobertaForTokenClassification"),Xot=o(" (XLM-RoBERTa model)"),zot=l(),F(w0.$$.fragment),KWe=l(),Tf=a("h2"),A0=a("a"),iwe=a("span"),F(lk.$$.fragment),Wot=l(),dwe=a("span"),Qot=o("FlaxAutoModelForMultipleChoice"),ZWe=l(),Cr=a("div"),F(ik.$$.fragment),Hot=l(),Mf=a("p"),Uot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Nre=a("a"),Jot=o("from_pretrained()"),Yot=o(" class method or the "),qre=a("a"),Kot=o("from_config()"),Zot=o(` class
method.`),ert=l(),dk=a("p"),ort=o("This class cannot be instantiated directly using "),cwe=a("code"),rrt=o("__init__()"),trt=o(" (throws an error)."),art=l(),oa=a("div"),F(ck.$$.fragment),nrt=l(),fwe=a("p"),srt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lrt=l(),Ef=a("p"),irt=o(`Note:
Loading a model from its configuration file does `),mwe=a("strong"),drt=o("not"),crt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=a("a"),frt=o("from_pretrained()"),mrt=o(" to load the model weights."),grt=l(),F(L0.$$.fragment),hrt=l(),Kr=a("div"),F(fk.$$.fragment),prt=l(),gwe=a("p"),_rt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),urt=l(),xn=a("p"),brt=o("The model class to instantiate is selected based on the "),hwe=a("code"),vrt=o("model_type"),Frt=o(` property of the config object (either
passed as an argument or loaded from `),pwe=a("code"),Trt=o("pretrained_model_name_or_path"),Mrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_we=a("code"),Ert=o("pretrained_model_name_or_path"),Crt=o(":"),wrt=l(),ze=a("ul"),y0=a("li"),uwe=a("strong"),Art=o("albert"),Lrt=o(" \u2014 "),Dre=a("a"),yrt=o("FlaxAlbertForMultipleChoice"),xrt=o(" (ALBERT model)"),$rt=l(),x0=a("li"),bwe=a("strong"),krt=o("bert"),Srt=o(" \u2014 "),Gre=a("a"),Rrt=o("FlaxBertForMultipleChoice"),Prt=o(" (BERT model)"),Brt=l(),$0=a("li"),vwe=a("strong"),Irt=o("big_bird"),Nrt=o(" \u2014 "),Ore=a("a"),qrt=o("FlaxBigBirdForMultipleChoice"),jrt=o(" (BigBird model)"),Drt=l(),k0=a("li"),Fwe=a("strong"),Grt=o("distilbert"),Ort=o(" \u2014 "),Vre=a("a"),Vrt=o("FlaxDistilBertForMultipleChoice"),Xrt=o(" (DistilBERT model)"),zrt=l(),S0=a("li"),Twe=a("strong"),Wrt=o("electra"),Qrt=o(" \u2014 "),Xre=a("a"),Hrt=o("FlaxElectraForMultipleChoice"),Urt=o(" (ELECTRA model)"),Jrt=l(),R0=a("li"),Mwe=a("strong"),Yrt=o("roberta"),Krt=o(" \u2014 "),zre=a("a"),Zrt=o("FlaxRobertaForMultipleChoice"),ett=o(" (RoBERTa model)"),ott=l(),P0=a("li"),Ewe=a("strong"),rtt=o("roformer"),ttt=o(" \u2014 "),Wre=a("a"),att=o("FlaxRoFormerForMultipleChoice"),ntt=o(" (RoFormer model)"),stt=l(),B0=a("li"),Cwe=a("strong"),ltt=o("xlm-roberta"),itt=o(" \u2014 "),Qre=a("a"),dtt=o("FlaxXLMRobertaForMultipleChoice"),ctt=o(" (XLM-RoBERTa model)"),ftt=l(),F(I0.$$.fragment),eQe=l(),Cf=a("h2"),N0=a("a"),wwe=a("span"),F(mk.$$.fragment),mtt=l(),Awe=a("span"),gtt=o("FlaxAutoModelForNextSentencePrediction"),oQe=l(),wr=a("div"),F(gk.$$.fragment),htt=l(),wf=a("p"),ptt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Hre=a("a"),_tt=o("from_pretrained()"),utt=o(" class method or the "),Ure=a("a"),btt=o("from_config()"),vtt=o(` class
method.`),Ftt=l(),hk=a("p"),Ttt=o("This class cannot be instantiated directly using "),Lwe=a("code"),Mtt=o("__init__()"),Ett=o(" (throws an error)."),Ctt=l(),ra=a("div"),F(pk.$$.fragment),wtt=l(),ywe=a("p"),Att=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ltt=l(),Af=a("p"),ytt=o(`Note:
Loading a model from its configuration file does `),xwe=a("strong"),xtt=o("not"),$tt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=a("a"),ktt=o("from_pretrained()"),Stt=o(" to load the model weights."),Rtt=l(),F(q0.$$.fragment),Ptt=l(),Zr=a("div"),F(_k.$$.fragment),Btt=l(),$we=a("p"),Itt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ntt=l(),$n=a("p"),qtt=o("The model class to instantiate is selected based on the "),kwe=a("code"),jtt=o("model_type"),Dtt=o(` property of the config object (either
passed as an argument or loaded from `),Swe=a("code"),Gtt=o("pretrained_model_name_or_path"),Ott=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rwe=a("code"),Vtt=o("pretrained_model_name_or_path"),Xtt=o(":"),ztt=l(),Pwe=a("ul"),j0=a("li"),Bwe=a("strong"),Wtt=o("bert"),Qtt=o(" \u2014 "),Yre=a("a"),Htt=o("FlaxBertForNextSentencePrediction"),Utt=o(" (BERT model)"),Jtt=l(),F(D0.$$.fragment),rQe=l(),Lf=a("h2"),G0=a("a"),Iwe=a("span"),F(uk.$$.fragment),Ytt=l(),Nwe=a("span"),Ktt=o("FlaxAutoModelForImageClassification"),tQe=l(),Ar=a("div"),F(bk.$$.fragment),Ztt=l(),yf=a("p"),eat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Kre=a("a"),oat=o("from_pretrained()"),rat=o(" class method or the "),Zre=a("a"),tat=o("from_config()"),aat=o(` class
method.`),nat=l(),vk=a("p"),sat=o("This class cannot be instantiated directly using "),qwe=a("code"),lat=o("__init__()"),iat=o(" (throws an error)."),dat=l(),ta=a("div"),F(Fk.$$.fragment),cat=l(),jwe=a("p"),fat=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mat=l(),xf=a("p"),gat=o(`Note:
Loading a model from its configuration file does `),Dwe=a("strong"),hat=o("not"),pat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=a("a"),_at=o("from_pretrained()"),uat=o(" to load the model weights."),bat=l(),F(O0.$$.fragment),vat=l(),et=a("div"),F(Tk.$$.fragment),Fat=l(),Gwe=a("p"),Tat=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mat=l(),kn=a("p"),Eat=o("The model class to instantiate is selected based on the "),Owe=a("code"),Cat=o("model_type"),wat=o(` property of the config object (either
passed as an argument or loaded from `),Vwe=a("code"),Aat=o("pretrained_model_name_or_path"),Lat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xwe=a("code"),yat=o("pretrained_model_name_or_path"),xat=o(":"),$at=l(),Mk=a("ul"),V0=a("li"),zwe=a("strong"),kat=o("beit"),Sat=o(" \u2014 "),ote=a("a"),Rat=o("FlaxBeitForImageClassification"),Pat=o(" (BEiT model)"),Bat=l(),X0=a("li"),Wwe=a("strong"),Iat=o("vit"),Nat=o(" \u2014 "),rte=a("a"),qat=o("FlaxViTForImageClassification"),jat=o(" (ViT model)"),Dat=l(),F(z0.$$.fragment),aQe=l(),$f=a("h2"),W0=a("a"),Qwe=a("span"),F(Ek.$$.fragment),Gat=l(),Hwe=a("span"),Oat=o("FlaxAutoModelForVision2Seq"),nQe=l(),Lr=a("div"),F(Ck.$$.fragment),Vat=l(),kf=a("p"),Xat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tte=a("a"),zat=o("from_pretrained()"),Wat=o(" class method or the "),ate=a("a"),Qat=o("from_config()"),Hat=o(` class
method.`),Uat=l(),wk=a("p"),Jat=o("This class cannot be instantiated directly using "),Uwe=a("code"),Yat=o("__init__()"),Kat=o(" (throws an error)."),Zat=l(),aa=a("div"),F(Ak.$$.fragment),ent=l(),Jwe=a("p"),ont=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rnt=l(),Sf=a("p"),tnt=o(`Note:
Loading a model from its configuration file does `),Ywe=a("strong"),ant=o("not"),nnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nte=a("a"),snt=o("from_pretrained()"),lnt=o(" to load the model weights."),int=l(),F(Q0.$$.fragment),dnt=l(),ot=a("div"),F(Lk.$$.fragment),cnt=l(),Kwe=a("p"),fnt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mnt=l(),Sn=a("p"),gnt=o("The model class to instantiate is selected based on the "),Zwe=a("code"),hnt=o("model_type"),pnt=o(` property of the config object (either
passed as an argument or loaded from `),eAe=a("code"),_nt=o("pretrained_model_name_or_path"),unt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oAe=a("code"),bnt=o("pretrained_model_name_or_path"),vnt=o(":"),Fnt=l(),rAe=a("ul"),H0=a("li"),tAe=a("strong"),Tnt=o("vision-encoder-decoder"),Mnt=o(" \u2014 "),ste=a("a"),Ent=o("FlaxVisionEncoderDecoderModel"),Cnt=o(" (Vision Encoder decoder model)"),wnt=l(),F(U0.$$.fragment),this.h()},l(f){const u=RUt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var yk=s(p);m=n(yk,"A",{id:!0,class:!0,href:!0});var aAe=s(m);_=n(aAe,"SPAN",{});var nAe=s(_);T(c.$$.fragment,nAe),nAe.forEach(t),aAe.forEach(t),h=i(yk),wo=n(yk,"SPAN",{});var sAe=s(wo);xi=r(sAe,"Auto Classes"),sAe.forEach(t),yk.forEach(t),If=i(f),lt=n(f,"P",{});var xk=s(lt);$i=r(xk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=n(xk,"CODE",{});var lAe=s(ki);hL=r(lAe,"from_pretrained()"),lAe.forEach(t),Nf=r(xk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Rn=s(Qe);Si=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var iAe=s(Pn);pL=r(iAe,"AutoConfig"),iAe.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var dAe=s(In);_L=r(dAe,"AutoModel"),dAe.forEach(t),Ri=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var cAe=s(Nn);uL=r(cAe,"AutoTokenizer"),cAe.forEach(t),Pi=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),qf=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var $k=s(Ae);YS=r($k,"will create a model that is an instance of "),Bi=n($k,"A",{href:!0});var fAe=s(Bi);KS=r(fAe,"BertModel"),fAe.forEach(t),ZS=r($k,"."),$k.forEach(t),Ao=i(f),Ra=n(f,"P",{});var kk=s(Ra);eR=r(kk,"There is one class of "),jf=n(kk,"CODE",{});var mAe=s(jf);oR=r(mAe,"AutoModel"),mAe.forEach(t),_Ue=r(kk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),kk.forEach(t),oze=i(f),Ii=n(f,"H2",{class:!0});var Sk=s(Ii);Df=n(Sk,"A",{id:!0,class:!0,href:!0});var gAe=s(Df);one=n(gAe,"SPAN",{});var hAe=s(one);T(bL.$$.fragment,hAe),hAe.forEach(t),gAe.forEach(t),uUe=i(Sk),rne=n(Sk,"SPAN",{});var pAe=s(rne);bUe=r(pAe,"Extending the Auto Classes"),pAe.forEach(t),Sk.forEach(t),rze=i(f),qn=n(f,"P",{});var Rf=s(qn);vUe=r(Rf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tne=n(Rf,"CODE",{});var _Ae=s(tne);FUe=r(_Ae,"NewModel"),_Ae.forEach(t),TUe=r(Rf,", make sure you have a "),ane=n(Rf,"CODE",{});var uAe=s(ane);MUe=r(uAe,"NewModelConfig"),uAe.forEach(t),EUe=r(Rf,` then you can add those to the auto
classes like this:`),Rf.forEach(t),tze=i(f),T(vL.$$.fragment,f),aze=i(f),rR=n(f,"P",{});var bAe=s(rR);CUe=r(bAe,"You will then be able to use the auto classes like you would usually do!"),bAe.forEach(t),nze=i(f),T(Gf.$$.fragment,f),sze=i(f),Ni=n(f,"H2",{class:!0});var Rk=s(Ni);Of=n(Rk,"A",{id:!0,class:!0,href:!0});var vAe=s(Of);nne=n(vAe,"SPAN",{});var FAe=s(nne);T(FL.$$.fragment,FAe),FAe.forEach(t),vAe.forEach(t),wUe=i(Rk),sne=n(Rk,"SPAN",{});var TAe=s(sne);AUe=r(TAe,"AutoConfig"),TAe.forEach(t),Rk.forEach(t),lze=i(f),Lo=n(f,"DIV",{class:!0});var nt=s(Lo);T(TL.$$.fragment,nt),LUe=i(nt),ML=n(nt,"P",{});var Pk=s(ML);yUe=r(Pk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),tR=n(Pk,"A",{href:!0});var MAe=s(tR);xUe=r(MAe,"from_pretrained()"),MAe.forEach(t),$Ue=r(Pk," class method."),Pk.forEach(t),kUe=i(nt),EL=n(nt,"P",{});var Bk=s(EL);SUe=r(Bk,"This class cannot be instantiated directly using "),lne=n(Bk,"CODE",{});var EAe=s(lne);RUe=r(EAe,"__init__()"),EAe.forEach(t),PUe=r(Bk," (throws an error)."),Bk.forEach(t),BUe=i(nt),yr=n(nt,"DIV",{class:!0});var st=s(yr);T(CL.$$.fragment,st),IUe=i(st),ine=n(st,"P",{});var CAe=s(ine);NUe=r(CAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),CAe.forEach(t),qUe=i(st),qi=n(st,"P",{});var Pf=s(qi);jUe=r(Pf,"The configuration class to instantiate is selected based on the "),dne=n(Pf,"CODE",{});var wAe=s(dne);DUe=r(wAe,"model_type"),wAe.forEach(t),GUe=r(Pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cne=n(Pf,"CODE",{});var AAe=s(cne);OUe=r(AAe,"pretrained_model_name_or_path"),AAe.forEach(t),VUe=r(Pf,":"),Pf.forEach(t),XUe=i(st),A=n(st,"UL",{});var L=s(A);Vf=n(L,"LI",{});var J0=s(Vf);fne=n(J0,"STRONG",{});var LAe=s(fne);zUe=r(LAe,"albert"),LAe.forEach(t),WUe=r(J0," \u2014 "),aR=n(J0,"A",{href:!0});var yAe=s(aR);QUe=r(yAe,"AlbertConfig"),yAe.forEach(t),HUe=r(J0," (ALBERT model)"),J0.forEach(t),UUe=i(L),Xf=n(L,"LI",{});var Y0=s(Xf);mne=n(Y0,"STRONG",{});var xAe=s(mne);JUe=r(xAe,"bart"),xAe.forEach(t),YUe=r(Y0," \u2014 "),nR=n(Y0,"A",{href:!0});var $Ae=s(nR);KUe=r($Ae,"BartConfig"),$Ae.forEach(t),ZUe=r(Y0," (BART model)"),Y0.forEach(t),eJe=i(L),zf=n(L,"LI",{});var K0=s(zf);gne=n(K0,"STRONG",{});var kAe=s(gne);oJe=r(kAe,"beit"),kAe.forEach(t),rJe=r(K0," \u2014 "),sR=n(K0,"A",{href:!0});var SAe=s(sR);tJe=r(SAe,"BeitConfig"),SAe.forEach(t),aJe=r(K0," (BEiT model)"),K0.forEach(t),nJe=i(L),Wf=n(L,"LI",{});var Z0=s(Wf);hne=n(Z0,"STRONG",{});var RAe=s(hne);sJe=r(RAe,"bert"),RAe.forEach(t),lJe=r(Z0," \u2014 "),lR=n(Z0,"A",{href:!0});var PAe=s(lR);iJe=r(PAe,"BertConfig"),PAe.forEach(t),dJe=r(Z0," (BERT model)"),Z0.forEach(t),cJe=i(L),Qf=n(L,"LI",{});var ew=s(Qf);pne=n(ew,"STRONG",{});var BAe=s(pne);fJe=r(BAe,"bert-generation"),BAe.forEach(t),mJe=r(ew," \u2014 "),iR=n(ew,"A",{href:!0});var IAe=s(iR);gJe=r(IAe,"BertGenerationConfig"),IAe.forEach(t),hJe=r(ew," (Bert Generation model)"),ew.forEach(t),pJe=i(L),Hf=n(L,"LI",{});var ow=s(Hf);_ne=n(ow,"STRONG",{});var NAe=s(_ne);_Je=r(NAe,"big_bird"),NAe.forEach(t),uJe=r(ow," \u2014 "),dR=n(ow,"A",{href:!0});var qAe=s(dR);bJe=r(qAe,"BigBirdConfig"),qAe.forEach(t),vJe=r(ow," (BigBird model)"),ow.forEach(t),FJe=i(L),Uf=n(L,"LI",{});var rw=s(Uf);une=n(rw,"STRONG",{});var jAe=s(une);TJe=r(jAe,"bigbird_pegasus"),jAe.forEach(t),MJe=r(rw," \u2014 "),cR=n(rw,"A",{href:!0});var DAe=s(cR);EJe=r(DAe,"BigBirdPegasusConfig"),DAe.forEach(t),CJe=r(rw," (BigBird-Pegasus model)"),rw.forEach(t),wJe=i(L),Jf=n(L,"LI",{});var tw=s(Jf);bne=n(tw,"STRONG",{});var GAe=s(bne);AJe=r(GAe,"blenderbot"),GAe.forEach(t),LJe=r(tw," \u2014 "),fR=n(tw,"A",{href:!0});var OAe=s(fR);yJe=r(OAe,"BlenderbotConfig"),OAe.forEach(t),xJe=r(tw," (Blenderbot model)"),tw.forEach(t),$Je=i(L),Yf=n(L,"LI",{});var aw=s(Yf);vne=n(aw,"STRONG",{});var VAe=s(vne);kJe=r(VAe,"blenderbot-small"),VAe.forEach(t),SJe=r(aw," \u2014 "),mR=n(aw,"A",{href:!0});var XAe=s(mR);RJe=r(XAe,"BlenderbotSmallConfig"),XAe.forEach(t),PJe=r(aw," (BlenderbotSmall model)"),aw.forEach(t),BJe=i(L),Kf=n(L,"LI",{});var nw=s(Kf);Fne=n(nw,"STRONG",{});var zAe=s(Fne);IJe=r(zAe,"bloom"),zAe.forEach(t),NJe=r(nw," \u2014 "),gR=n(nw,"A",{href:!0});var WAe=s(gR);qJe=r(WAe,"BloomConfig"),WAe.forEach(t),jJe=r(nw," (BLOOM model)"),nw.forEach(t),DJe=i(L),Zf=n(L,"LI",{});var sw=s(Zf);Tne=n(sw,"STRONG",{});var QAe=s(Tne);GJe=r(QAe,"camembert"),QAe.forEach(t),OJe=r(sw," \u2014 "),hR=n(sw,"A",{href:!0});var HAe=s(hR);VJe=r(HAe,"CamembertConfig"),HAe.forEach(t),XJe=r(sw," (CamemBERT model)"),sw.forEach(t),zJe=i(L),em=n(L,"LI",{});var lw=s(em);Mne=n(lw,"STRONG",{});var UAe=s(Mne);WJe=r(UAe,"canine"),UAe.forEach(t),QJe=r(lw," \u2014 "),pR=n(lw,"A",{href:!0});var JAe=s(pR);HJe=r(JAe,"CanineConfig"),JAe.forEach(t),UJe=r(lw," (CANINE model)"),lw.forEach(t),JJe=i(L),om=n(L,"LI",{});var iw=s(om);Ene=n(iw,"STRONG",{});var YAe=s(Ene);YJe=r(YAe,"clip"),YAe.forEach(t),KJe=r(iw," \u2014 "),_R=n(iw,"A",{href:!0});var KAe=s(_R);ZJe=r(KAe,"CLIPConfig"),KAe.forEach(t),eYe=r(iw," (CLIP model)"),iw.forEach(t),oYe=i(L),rm=n(L,"LI",{});var dw=s(rm);Cne=n(dw,"STRONG",{});var ZAe=s(Cne);rYe=r(ZAe,"codegen"),ZAe.forEach(t),tYe=r(dw," \u2014 "),uR=n(dw,"A",{href:!0});var eLe=s(uR);aYe=r(eLe,"CodeGenConfig"),eLe.forEach(t),nYe=r(dw," (CodeGen model)"),dw.forEach(t),sYe=i(L),tm=n(L,"LI",{});var cw=s(tm);wne=n(cw,"STRONG",{});var oLe=s(wne);lYe=r(oLe,"convbert"),oLe.forEach(t),iYe=r(cw," \u2014 "),bR=n(cw,"A",{href:!0});var rLe=s(bR);dYe=r(rLe,"ConvBertConfig"),rLe.forEach(t),cYe=r(cw," (ConvBERT model)"),cw.forEach(t),fYe=i(L),am=n(L,"LI",{});var fw=s(am);Ane=n(fw,"STRONG",{});var tLe=s(Ane);mYe=r(tLe,"convnext"),tLe.forEach(t),gYe=r(fw," \u2014 "),vR=n(fw,"A",{href:!0});var aLe=s(vR);hYe=r(aLe,"ConvNextConfig"),aLe.forEach(t),pYe=r(fw," (ConvNeXT model)"),fw.forEach(t),_Ye=i(L),nm=n(L,"LI",{});var mw=s(nm);Lne=n(mw,"STRONG",{});var nLe=s(Lne);uYe=r(nLe,"ctrl"),nLe.forEach(t),bYe=r(mw," \u2014 "),FR=n(mw,"A",{href:!0});var sLe=s(FR);vYe=r(sLe,"CTRLConfig"),sLe.forEach(t),FYe=r(mw," (CTRL model)"),mw.forEach(t),TYe=i(L),sm=n(L,"LI",{});var gw=s(sm);yne=n(gw,"STRONG",{});var lLe=s(yne);MYe=r(lLe,"cvt"),lLe.forEach(t),EYe=r(gw," \u2014 "),TR=n(gw,"A",{href:!0});var iLe=s(TR);CYe=r(iLe,"CvtConfig"),iLe.forEach(t),wYe=r(gw," (CvT model)"),gw.forEach(t),AYe=i(L),lm=n(L,"LI",{});var hw=s(lm);xne=n(hw,"STRONG",{});var dLe=s(xne);LYe=r(dLe,"data2vec-audio"),dLe.forEach(t),yYe=r(hw," \u2014 "),MR=n(hw,"A",{href:!0});var cLe=s(MR);xYe=r(cLe,"Data2VecAudioConfig"),cLe.forEach(t),$Ye=r(hw," (Data2VecAudio model)"),hw.forEach(t),kYe=i(L),im=n(L,"LI",{});var pw=s(im);$ne=n(pw,"STRONG",{});var fLe=s($ne);SYe=r(fLe,"data2vec-text"),fLe.forEach(t),RYe=r(pw," \u2014 "),ER=n(pw,"A",{href:!0});var mLe=s(ER);PYe=r(mLe,"Data2VecTextConfig"),mLe.forEach(t),BYe=r(pw," (Data2VecText model)"),pw.forEach(t),IYe=i(L),dm=n(L,"LI",{});var _w=s(dm);kne=n(_w,"STRONG",{});var gLe=s(kne);NYe=r(gLe,"data2vec-vision"),gLe.forEach(t),qYe=r(_w," \u2014 "),CR=n(_w,"A",{href:!0});var hLe=s(CR);jYe=r(hLe,"Data2VecVisionConfig"),hLe.forEach(t),DYe=r(_w," (Data2VecVision model)"),_w.forEach(t),GYe=i(L),cm=n(L,"LI",{});var uw=s(cm);Sne=n(uw,"STRONG",{});var pLe=s(Sne);OYe=r(pLe,"deberta"),pLe.forEach(t),VYe=r(uw," \u2014 "),wR=n(uw,"A",{href:!0});var _Le=s(wR);XYe=r(_Le,"DebertaConfig"),_Le.forEach(t),zYe=r(uw," (DeBERTa model)"),uw.forEach(t),WYe=i(L),fm=n(L,"LI",{});var bw=s(fm);Rne=n(bw,"STRONG",{});var uLe=s(Rne);QYe=r(uLe,"deberta-v2"),uLe.forEach(t),HYe=r(bw," \u2014 "),AR=n(bw,"A",{href:!0});var bLe=s(AR);UYe=r(bLe,"DebertaV2Config"),bLe.forEach(t),JYe=r(bw," (DeBERTa-v2 model)"),bw.forEach(t),YYe=i(L),mm=n(L,"LI",{});var vw=s(mm);Pne=n(vw,"STRONG",{});var Lnt=s(Pne);KYe=r(Lnt,"decision_transformer"),Lnt.forEach(t),ZYe=r(vw," \u2014 "),LR=n(vw,"A",{href:!0});var ynt=s(LR);eKe=r(ynt,"DecisionTransformerConfig"),ynt.forEach(t),oKe=r(vw," (Decision Transformer model)"),vw.forEach(t),rKe=i(L),gm=n(L,"LI",{});var vLe=s(gm);Bne=n(vLe,"STRONG",{});var xnt=s(Bne);tKe=r(xnt,"deit"),xnt.forEach(t),aKe=r(vLe," \u2014 "),yR=n(vLe,"A",{href:!0});var $nt=s(yR);nKe=r($nt,"DeiTConfig"),$nt.forEach(t),sKe=r(vLe," (DeiT model)"),vLe.forEach(t),lKe=i(L),hm=n(L,"LI",{});var FLe=s(hm);Ine=n(FLe,"STRONG",{});var knt=s(Ine);iKe=r(knt,"detr"),knt.forEach(t),dKe=r(FLe," \u2014 "),xR=n(FLe,"A",{href:!0});var Snt=s(xR);cKe=r(Snt,"DetrConfig"),Snt.forEach(t),fKe=r(FLe," (DETR model)"),FLe.forEach(t),mKe=i(L),pm=n(L,"LI",{});var TLe=s(pm);Nne=n(TLe,"STRONG",{});var Rnt=s(Nne);gKe=r(Rnt,"distilbert"),Rnt.forEach(t),hKe=r(TLe," \u2014 "),$R=n(TLe,"A",{href:!0});var Pnt=s($R);pKe=r(Pnt,"DistilBertConfig"),Pnt.forEach(t),_Ke=r(TLe," (DistilBERT model)"),TLe.forEach(t),uKe=i(L),_m=n(L,"LI",{});var MLe=s(_m);qne=n(MLe,"STRONG",{});var Bnt=s(qne);bKe=r(Bnt,"dpr"),Bnt.forEach(t),vKe=r(MLe," \u2014 "),kR=n(MLe,"A",{href:!0});var Int=s(kR);FKe=r(Int,"DPRConfig"),Int.forEach(t),TKe=r(MLe," (DPR model)"),MLe.forEach(t),MKe=i(L),um=n(L,"LI",{});var ELe=s(um);jne=n(ELe,"STRONG",{});var Nnt=s(jne);EKe=r(Nnt,"dpt"),Nnt.forEach(t),CKe=r(ELe," \u2014 "),SR=n(ELe,"A",{href:!0});var qnt=s(SR);wKe=r(qnt,"DPTConfig"),qnt.forEach(t),AKe=r(ELe," (DPT model)"),ELe.forEach(t),LKe=i(L),bm=n(L,"LI",{});var CLe=s(bm);Dne=n(CLe,"STRONG",{});var jnt=s(Dne);yKe=r(jnt,"electra"),jnt.forEach(t),xKe=r(CLe," \u2014 "),RR=n(CLe,"A",{href:!0});var Dnt=s(RR);$Ke=r(Dnt,"ElectraConfig"),Dnt.forEach(t),kKe=r(CLe," (ELECTRA model)"),CLe.forEach(t),SKe=i(L),vm=n(L,"LI",{});var wLe=s(vm);Gne=n(wLe,"STRONG",{});var Gnt=s(Gne);RKe=r(Gnt,"encoder-decoder"),Gnt.forEach(t),PKe=r(wLe," \u2014 "),PR=n(wLe,"A",{href:!0});var Ont=s(PR);BKe=r(Ont,"EncoderDecoderConfig"),Ont.forEach(t),IKe=r(wLe," (Encoder decoder model)"),wLe.forEach(t),NKe=i(L),Fm=n(L,"LI",{});var ALe=s(Fm);One=n(ALe,"STRONG",{});var Vnt=s(One);qKe=r(Vnt,"flaubert"),Vnt.forEach(t),jKe=r(ALe," \u2014 "),BR=n(ALe,"A",{href:!0});var Xnt=s(BR);DKe=r(Xnt,"FlaubertConfig"),Xnt.forEach(t),GKe=r(ALe," (FlauBERT model)"),ALe.forEach(t),OKe=i(L),Tm=n(L,"LI",{});var LLe=s(Tm);Vne=n(LLe,"STRONG",{});var znt=s(Vne);VKe=r(znt,"flava"),znt.forEach(t),XKe=r(LLe," \u2014 "),IR=n(LLe,"A",{href:!0});var Wnt=s(IR);zKe=r(Wnt,"FlavaConfig"),Wnt.forEach(t),WKe=r(LLe," (FLAVA model)"),LLe.forEach(t),QKe=i(L),Mm=n(L,"LI",{});var yLe=s(Mm);Xne=n(yLe,"STRONG",{});var Qnt=s(Xne);HKe=r(Qnt,"fnet"),Qnt.forEach(t),UKe=r(yLe," \u2014 "),NR=n(yLe,"A",{href:!0});var Hnt=s(NR);JKe=r(Hnt,"FNetConfig"),Hnt.forEach(t),YKe=r(yLe," (FNet model)"),yLe.forEach(t),KKe=i(L),Em=n(L,"LI",{});var xLe=s(Em);zne=n(xLe,"STRONG",{});var Unt=s(zne);ZKe=r(Unt,"fsmt"),Unt.forEach(t),eZe=r(xLe," \u2014 "),qR=n(xLe,"A",{href:!0});var Jnt=s(qR);oZe=r(Jnt,"FSMTConfig"),Jnt.forEach(t),rZe=r(xLe," (FairSeq Machine-Translation model)"),xLe.forEach(t),tZe=i(L),Cm=n(L,"LI",{});var $Le=s(Cm);Wne=n($Le,"STRONG",{});var Ynt=s(Wne);aZe=r(Ynt,"funnel"),Ynt.forEach(t),nZe=r($Le," \u2014 "),jR=n($Le,"A",{href:!0});var Knt=s(jR);sZe=r(Knt,"FunnelConfig"),Knt.forEach(t),lZe=r($Le," (Funnel Transformer model)"),$Le.forEach(t),iZe=i(L),wm=n(L,"LI",{});var kLe=s(wm);Qne=n(kLe,"STRONG",{});var Znt=s(Qne);dZe=r(Znt,"glpn"),Znt.forEach(t),cZe=r(kLe," \u2014 "),DR=n(kLe,"A",{href:!0});var est=s(DR);fZe=r(est,"GLPNConfig"),est.forEach(t),mZe=r(kLe," (GLPN model)"),kLe.forEach(t),gZe=i(L),Am=n(L,"LI",{});var SLe=s(Am);Hne=n(SLe,"STRONG",{});var ost=s(Hne);hZe=r(ost,"gpt2"),ost.forEach(t),pZe=r(SLe," \u2014 "),GR=n(SLe,"A",{href:!0});var rst=s(GR);_Ze=r(rst,"GPT2Config"),rst.forEach(t),uZe=r(SLe," (OpenAI GPT-2 model)"),SLe.forEach(t),bZe=i(L),Lm=n(L,"LI",{});var RLe=s(Lm);Une=n(RLe,"STRONG",{});var tst=s(Une);vZe=r(tst,"gpt_neo"),tst.forEach(t),FZe=r(RLe," \u2014 "),OR=n(RLe,"A",{href:!0});var ast=s(OR);TZe=r(ast,"GPTNeoConfig"),ast.forEach(t),MZe=r(RLe," (GPT Neo model)"),RLe.forEach(t),EZe=i(L),ym=n(L,"LI",{});var PLe=s(ym);Jne=n(PLe,"STRONG",{});var nst=s(Jne);CZe=r(nst,"gpt_neox"),nst.forEach(t),wZe=r(PLe," \u2014 "),VR=n(PLe,"A",{href:!0});var sst=s(VR);AZe=r(sst,"GPTNeoXConfig"),sst.forEach(t),LZe=r(PLe," (GPT NeoX model)"),PLe.forEach(t),yZe=i(L),xm=n(L,"LI",{});var BLe=s(xm);Yne=n(BLe,"STRONG",{});var lst=s(Yne);xZe=r(lst,"gptj"),lst.forEach(t),$Ze=r(BLe," \u2014 "),XR=n(BLe,"A",{href:!0});var ist=s(XR);kZe=r(ist,"GPTJConfig"),ist.forEach(t),SZe=r(BLe," (GPT-J model)"),BLe.forEach(t),RZe=i(L),$m=n(L,"LI",{});var ILe=s($m);Kne=n(ILe,"STRONG",{});var dst=s(Kne);PZe=r(dst,"groupvit"),dst.forEach(t),BZe=r(ILe," \u2014 "),zR=n(ILe,"A",{href:!0});var cst=s(zR);IZe=r(cst,"GroupViTConfig"),cst.forEach(t),NZe=r(ILe," (GroupViT model)"),ILe.forEach(t),qZe=i(L),km=n(L,"LI",{});var NLe=s(km);Zne=n(NLe,"STRONG",{});var fst=s(Zne);jZe=r(fst,"hubert"),fst.forEach(t),DZe=r(NLe," \u2014 "),WR=n(NLe,"A",{href:!0});var mst=s(WR);GZe=r(mst,"HubertConfig"),mst.forEach(t),OZe=r(NLe," (Hubert model)"),NLe.forEach(t),VZe=i(L),Sm=n(L,"LI",{});var qLe=s(Sm);ese=n(qLe,"STRONG",{});var gst=s(ese);XZe=r(gst,"ibert"),gst.forEach(t),zZe=r(qLe," \u2014 "),QR=n(qLe,"A",{href:!0});var hst=s(QR);WZe=r(hst,"IBertConfig"),hst.forEach(t),QZe=r(qLe," (I-BERT model)"),qLe.forEach(t),HZe=i(L),Rm=n(L,"LI",{});var jLe=s(Rm);ose=n(jLe,"STRONG",{});var pst=s(ose);UZe=r(pst,"imagegpt"),pst.forEach(t),JZe=r(jLe," \u2014 "),HR=n(jLe,"A",{href:!0});var _st=s(HR);YZe=r(_st,"ImageGPTConfig"),_st.forEach(t),KZe=r(jLe," (ImageGPT model)"),jLe.forEach(t),ZZe=i(L),Pm=n(L,"LI",{});var DLe=s(Pm);rse=n(DLe,"STRONG",{});var ust=s(rse);eeo=r(ust,"jukebox"),ust.forEach(t),oeo=r(DLe," \u2014 "),UR=n(DLe,"A",{href:!0});var bst=s(UR);reo=r(bst,"JukeboxConfig"),bst.forEach(t),teo=r(DLe," (Jukebox model)"),DLe.forEach(t),aeo=i(L),Bm=n(L,"LI",{});var GLe=s(Bm);tse=n(GLe,"STRONG",{});var vst=s(tse);neo=r(vst,"layoutlm"),vst.forEach(t),seo=r(GLe," \u2014 "),JR=n(GLe,"A",{href:!0});var Fst=s(JR);leo=r(Fst,"LayoutLMConfig"),Fst.forEach(t),ieo=r(GLe," (LayoutLM model)"),GLe.forEach(t),deo=i(L),Im=n(L,"LI",{});var OLe=s(Im);ase=n(OLe,"STRONG",{});var Tst=s(ase);ceo=r(Tst,"layoutlmv2"),Tst.forEach(t),feo=r(OLe," \u2014 "),YR=n(OLe,"A",{href:!0});var Mst=s(YR);meo=r(Mst,"LayoutLMv2Config"),Mst.forEach(t),geo=r(OLe," (LayoutLMv2 model)"),OLe.forEach(t),heo=i(L),Nm=n(L,"LI",{});var VLe=s(Nm);nse=n(VLe,"STRONG",{});var Est=s(nse);peo=r(Est,"layoutlmv3"),Est.forEach(t),_eo=r(VLe," \u2014 "),KR=n(VLe,"A",{href:!0});var Cst=s(KR);ueo=r(Cst,"LayoutLMv3Config"),Cst.forEach(t),beo=r(VLe," (LayoutLMv3 model)"),VLe.forEach(t),veo=i(L),qm=n(L,"LI",{});var XLe=s(qm);sse=n(XLe,"STRONG",{});var wst=s(sse);Feo=r(wst,"led"),wst.forEach(t),Teo=r(XLe," \u2014 "),ZR=n(XLe,"A",{href:!0});var Ast=s(ZR);Meo=r(Ast,"LEDConfig"),Ast.forEach(t),Eeo=r(XLe," (LED model)"),XLe.forEach(t),Ceo=i(L),jm=n(L,"LI",{});var zLe=s(jm);lse=n(zLe,"STRONG",{});var Lst=s(lse);weo=r(Lst,"levit"),Lst.forEach(t),Aeo=r(zLe," \u2014 "),eP=n(zLe,"A",{href:!0});var yst=s(eP);Leo=r(yst,"LevitConfig"),yst.forEach(t),yeo=r(zLe," (LeViT model)"),zLe.forEach(t),xeo=i(L),Dm=n(L,"LI",{});var WLe=s(Dm);ise=n(WLe,"STRONG",{});var xst=s(ise);$eo=r(xst,"longformer"),xst.forEach(t),keo=r(WLe," \u2014 "),oP=n(WLe,"A",{href:!0});var $st=s(oP);Seo=r($st,"LongformerConfig"),$st.forEach(t),Reo=r(WLe," (Longformer model)"),WLe.forEach(t),Peo=i(L),Gm=n(L,"LI",{});var QLe=s(Gm);dse=n(QLe,"STRONG",{});var kst=s(dse);Beo=r(kst,"longt5"),kst.forEach(t),Ieo=r(QLe," \u2014 "),rP=n(QLe,"A",{href:!0});var Sst=s(rP);Neo=r(Sst,"LongT5Config"),Sst.forEach(t),qeo=r(QLe," (LongT5 model)"),QLe.forEach(t),jeo=i(L),Om=n(L,"LI",{});var HLe=s(Om);cse=n(HLe,"STRONG",{});var Rst=s(cse);Deo=r(Rst,"luke"),Rst.forEach(t),Geo=r(HLe," \u2014 "),tP=n(HLe,"A",{href:!0});var Pst=s(tP);Oeo=r(Pst,"LukeConfig"),Pst.forEach(t),Veo=r(HLe," (LUKE model)"),HLe.forEach(t),Xeo=i(L),Vm=n(L,"LI",{});var ULe=s(Vm);fse=n(ULe,"STRONG",{});var Bst=s(fse);zeo=r(Bst,"lxmert"),Bst.forEach(t),Weo=r(ULe," \u2014 "),aP=n(ULe,"A",{href:!0});var Ist=s(aP);Qeo=r(Ist,"LxmertConfig"),Ist.forEach(t),Heo=r(ULe," (LXMERT model)"),ULe.forEach(t),Ueo=i(L),Xm=n(L,"LI",{});var JLe=s(Xm);mse=n(JLe,"STRONG",{});var Nst=s(mse);Jeo=r(Nst,"m2m_100"),Nst.forEach(t),Yeo=r(JLe," \u2014 "),nP=n(JLe,"A",{href:!0});var qst=s(nP);Keo=r(qst,"M2M100Config"),qst.forEach(t),Zeo=r(JLe," (M2M100 model)"),JLe.forEach(t),eoo=i(L),zm=n(L,"LI",{});var YLe=s(zm);gse=n(YLe,"STRONG",{});var jst=s(gse);ooo=r(jst,"marian"),jst.forEach(t),roo=r(YLe," \u2014 "),sP=n(YLe,"A",{href:!0});var Dst=s(sP);too=r(Dst,"MarianConfig"),Dst.forEach(t),aoo=r(YLe," (Marian model)"),YLe.forEach(t),noo=i(L),Wm=n(L,"LI",{});var KLe=s(Wm);hse=n(KLe,"STRONG",{});var Gst=s(hse);soo=r(Gst,"maskformer"),Gst.forEach(t),loo=r(KLe," \u2014 "),lP=n(KLe,"A",{href:!0});var Ost=s(lP);ioo=r(Ost,"MaskFormerConfig"),Ost.forEach(t),doo=r(KLe," (MaskFormer model)"),KLe.forEach(t),coo=i(L),Qm=n(L,"LI",{});var ZLe=s(Qm);pse=n(ZLe,"STRONG",{});var Vst=s(pse);foo=r(Vst,"mbart"),Vst.forEach(t),moo=r(ZLe," \u2014 "),iP=n(ZLe,"A",{href:!0});var Xst=s(iP);goo=r(Xst,"MBartConfig"),Xst.forEach(t),hoo=r(ZLe," (mBART model)"),ZLe.forEach(t),poo=i(L),Hm=n(L,"LI",{});var eye=s(Hm);_se=n(eye,"STRONG",{});var zst=s(_se);_oo=r(zst,"mctct"),zst.forEach(t),uoo=r(eye," \u2014 "),dP=n(eye,"A",{href:!0});var Wst=s(dP);boo=r(Wst,"MCTCTConfig"),Wst.forEach(t),voo=r(eye," (M-CTC-T model)"),eye.forEach(t),Foo=i(L),Um=n(L,"LI",{});var oye=s(Um);use=n(oye,"STRONG",{});var Qst=s(use);Too=r(Qst,"megatron-bert"),Qst.forEach(t),Moo=r(oye," \u2014 "),cP=n(oye,"A",{href:!0});var Hst=s(cP);Eoo=r(Hst,"MegatronBertConfig"),Hst.forEach(t),Coo=r(oye," (Megatron-BERT model)"),oye.forEach(t),woo=i(L),Jm=n(L,"LI",{});var rye=s(Jm);bse=n(rye,"STRONG",{});var Ust=s(bse);Aoo=r(Ust,"mobilebert"),Ust.forEach(t),Loo=r(rye," \u2014 "),fP=n(rye,"A",{href:!0});var Jst=s(fP);yoo=r(Jst,"MobileBertConfig"),Jst.forEach(t),xoo=r(rye," (MobileBERT model)"),rye.forEach(t),$oo=i(L),Ym=n(L,"LI",{});var tye=s(Ym);vse=n(tye,"STRONG",{});var Yst=s(vse);koo=r(Yst,"mobilevit"),Yst.forEach(t),Soo=r(tye," \u2014 "),mP=n(tye,"A",{href:!0});var Kst=s(mP);Roo=r(Kst,"MobileViTConfig"),Kst.forEach(t),Poo=r(tye," (MobileViT model)"),tye.forEach(t),Boo=i(L),Km=n(L,"LI",{});var aye=s(Km);Fse=n(aye,"STRONG",{});var Zst=s(Fse);Ioo=r(Zst,"mpnet"),Zst.forEach(t),Noo=r(aye," \u2014 "),gP=n(aye,"A",{href:!0});var elt=s(gP);qoo=r(elt,"MPNetConfig"),elt.forEach(t),joo=r(aye," (MPNet model)"),aye.forEach(t),Doo=i(L),Zm=n(L,"LI",{});var nye=s(Zm);Tse=n(nye,"STRONG",{});var olt=s(Tse);Goo=r(olt,"mt5"),olt.forEach(t),Ooo=r(nye," \u2014 "),hP=n(nye,"A",{href:!0});var rlt=s(hP);Voo=r(rlt,"MT5Config"),rlt.forEach(t),Xoo=r(nye," (MT5 model)"),nye.forEach(t),zoo=i(L),eg=n(L,"LI",{});var sye=s(eg);Mse=n(sye,"STRONG",{});var tlt=s(Mse);Woo=r(tlt,"mvp"),tlt.forEach(t),Qoo=r(sye," \u2014 "),pP=n(sye,"A",{href:!0});var alt=s(pP);Hoo=r(alt,"MvpConfig"),alt.forEach(t),Uoo=r(sye," (MVP model)"),sye.forEach(t),Joo=i(L),og=n(L,"LI",{});var lye=s(og);Ese=n(lye,"STRONG",{});var nlt=s(Ese);Yoo=r(nlt,"nezha"),nlt.forEach(t),Koo=r(lye," \u2014 "),_P=n(lye,"A",{href:!0});var slt=s(_P);Zoo=r(slt,"NezhaConfig"),slt.forEach(t),ero=r(lye," (Nezha model)"),lye.forEach(t),oro=i(L),rg=n(L,"LI",{});var iye=s(rg);Cse=n(iye,"STRONG",{});var llt=s(Cse);rro=r(llt,"nystromformer"),llt.forEach(t),tro=r(iye," \u2014 "),uP=n(iye,"A",{href:!0});var ilt=s(uP);aro=r(ilt,"NystromformerConfig"),ilt.forEach(t),nro=r(iye," (Nystr\xF6mformer model)"),iye.forEach(t),sro=i(L),tg=n(L,"LI",{});var dye=s(tg);wse=n(dye,"STRONG",{});var dlt=s(wse);lro=r(dlt,"openai-gpt"),dlt.forEach(t),iro=r(dye," \u2014 "),bP=n(dye,"A",{href:!0});var clt=s(bP);dro=r(clt,"OpenAIGPTConfig"),clt.forEach(t),cro=r(dye," (OpenAI GPT model)"),dye.forEach(t),fro=i(L),ag=n(L,"LI",{});var cye=s(ag);Ase=n(cye,"STRONG",{});var flt=s(Ase);mro=r(flt,"opt"),flt.forEach(t),gro=r(cye," \u2014 "),vP=n(cye,"A",{href:!0});var mlt=s(vP);hro=r(mlt,"OPTConfig"),mlt.forEach(t),pro=r(cye," (OPT model)"),cye.forEach(t),_ro=i(L),ng=n(L,"LI",{});var fye=s(ng);Lse=n(fye,"STRONG",{});var glt=s(Lse);uro=r(glt,"owlvit"),glt.forEach(t),bro=r(fye," \u2014 "),FP=n(fye,"A",{href:!0});var hlt=s(FP);vro=r(hlt,"OwlViTConfig"),hlt.forEach(t),Fro=r(fye," (OWL-ViT model)"),fye.forEach(t),Tro=i(L),sg=n(L,"LI",{});var mye=s(sg);yse=n(mye,"STRONG",{});var plt=s(yse);Mro=r(plt,"pegasus"),plt.forEach(t),Ero=r(mye," \u2014 "),TP=n(mye,"A",{href:!0});var _lt=s(TP);Cro=r(_lt,"PegasusConfig"),_lt.forEach(t),wro=r(mye," (Pegasus model)"),mye.forEach(t),Aro=i(L),lg=n(L,"LI",{});var gye=s(lg);xse=n(gye,"STRONG",{});var ult=s(xse);Lro=r(ult,"perceiver"),ult.forEach(t),yro=r(gye," \u2014 "),MP=n(gye,"A",{href:!0});var blt=s(MP);xro=r(blt,"PerceiverConfig"),blt.forEach(t),$ro=r(gye," (Perceiver model)"),gye.forEach(t),kro=i(L),ig=n(L,"LI",{});var hye=s(ig);$se=n(hye,"STRONG",{});var vlt=s($se);Sro=r(vlt,"plbart"),vlt.forEach(t),Rro=r(hye," \u2014 "),EP=n(hye,"A",{href:!0});var Flt=s(EP);Pro=r(Flt,"PLBartConfig"),Flt.forEach(t),Bro=r(hye," (PLBart model)"),hye.forEach(t),Iro=i(L),dg=n(L,"LI",{});var pye=s(dg);kse=n(pye,"STRONG",{});var Tlt=s(kse);Nro=r(Tlt,"poolformer"),Tlt.forEach(t),qro=r(pye," \u2014 "),CP=n(pye,"A",{href:!0});var Mlt=s(CP);jro=r(Mlt,"PoolFormerConfig"),Mlt.forEach(t),Dro=r(pye," (PoolFormer model)"),pye.forEach(t),Gro=i(L),cg=n(L,"LI",{});var _ye=s(cg);Sse=n(_ye,"STRONG",{});var Elt=s(Sse);Oro=r(Elt,"prophetnet"),Elt.forEach(t),Vro=r(_ye," \u2014 "),wP=n(_ye,"A",{href:!0});var Clt=s(wP);Xro=r(Clt,"ProphetNetConfig"),Clt.forEach(t),zro=r(_ye," (ProphetNet model)"),_ye.forEach(t),Wro=i(L),fg=n(L,"LI",{});var uye=s(fg);Rse=n(uye,"STRONG",{});var wlt=s(Rse);Qro=r(wlt,"qdqbert"),wlt.forEach(t),Hro=r(uye," \u2014 "),AP=n(uye,"A",{href:!0});var Alt=s(AP);Uro=r(Alt,"QDQBertConfig"),Alt.forEach(t),Jro=r(uye," (QDQBert model)"),uye.forEach(t),Yro=i(L),mg=n(L,"LI",{});var bye=s(mg);Pse=n(bye,"STRONG",{});var Llt=s(Pse);Kro=r(Llt,"rag"),Llt.forEach(t),Zro=r(bye," \u2014 "),LP=n(bye,"A",{href:!0});var ylt=s(LP);eto=r(ylt,"RagConfig"),ylt.forEach(t),oto=r(bye," (RAG model)"),bye.forEach(t),rto=i(L),gg=n(L,"LI",{});var vye=s(gg);Bse=n(vye,"STRONG",{});var xlt=s(Bse);tto=r(xlt,"realm"),xlt.forEach(t),ato=r(vye," \u2014 "),yP=n(vye,"A",{href:!0});var $lt=s(yP);nto=r($lt,"RealmConfig"),$lt.forEach(t),sto=r(vye," (REALM model)"),vye.forEach(t),lto=i(L),hg=n(L,"LI",{});var Fye=s(hg);Ise=n(Fye,"STRONG",{});var klt=s(Ise);ito=r(klt,"reformer"),klt.forEach(t),dto=r(Fye," \u2014 "),xP=n(Fye,"A",{href:!0});var Slt=s(xP);cto=r(Slt,"ReformerConfig"),Slt.forEach(t),fto=r(Fye," (Reformer model)"),Fye.forEach(t),mto=i(L),pg=n(L,"LI",{});var Tye=s(pg);Nse=n(Tye,"STRONG",{});var Rlt=s(Nse);gto=r(Rlt,"regnet"),Rlt.forEach(t),hto=r(Tye," \u2014 "),$P=n(Tye,"A",{href:!0});var Plt=s($P);pto=r(Plt,"RegNetConfig"),Plt.forEach(t),_to=r(Tye," (RegNet model)"),Tye.forEach(t),uto=i(L),_g=n(L,"LI",{});var Mye=s(_g);qse=n(Mye,"STRONG",{});var Blt=s(qse);bto=r(Blt,"rembert"),Blt.forEach(t),vto=r(Mye," \u2014 "),kP=n(Mye,"A",{href:!0});var Ilt=s(kP);Fto=r(Ilt,"RemBertConfig"),Ilt.forEach(t),Tto=r(Mye," (RemBERT model)"),Mye.forEach(t),Mto=i(L),ug=n(L,"LI",{});var Eye=s(ug);jse=n(Eye,"STRONG",{});var Nlt=s(jse);Eto=r(Nlt,"resnet"),Nlt.forEach(t),Cto=r(Eye," \u2014 "),SP=n(Eye,"A",{href:!0});var qlt=s(SP);wto=r(qlt,"ResNetConfig"),qlt.forEach(t),Ato=r(Eye," (ResNet model)"),Eye.forEach(t),Lto=i(L),bg=n(L,"LI",{});var Cye=s(bg);Dse=n(Cye,"STRONG",{});var jlt=s(Dse);yto=r(jlt,"retribert"),jlt.forEach(t),xto=r(Cye," \u2014 "),RP=n(Cye,"A",{href:!0});var Dlt=s(RP);$to=r(Dlt,"RetriBertConfig"),Dlt.forEach(t),kto=r(Cye," (RetriBERT model)"),Cye.forEach(t),Sto=i(L),vg=n(L,"LI",{});var wye=s(vg);Gse=n(wye,"STRONG",{});var Glt=s(Gse);Rto=r(Glt,"roberta"),Glt.forEach(t),Pto=r(wye," \u2014 "),PP=n(wye,"A",{href:!0});var Olt=s(PP);Bto=r(Olt,"RobertaConfig"),Olt.forEach(t),Ito=r(wye," (RoBERTa model)"),wye.forEach(t),Nto=i(L),Fg=n(L,"LI",{});var Aye=s(Fg);Ose=n(Aye,"STRONG",{});var Vlt=s(Ose);qto=r(Vlt,"roformer"),Vlt.forEach(t),jto=r(Aye," \u2014 "),BP=n(Aye,"A",{href:!0});var Xlt=s(BP);Dto=r(Xlt,"RoFormerConfig"),Xlt.forEach(t),Gto=r(Aye," (RoFormer model)"),Aye.forEach(t),Oto=i(L),Tg=n(L,"LI",{});var Lye=s(Tg);Vse=n(Lye,"STRONG",{});var zlt=s(Vse);Vto=r(zlt,"segformer"),zlt.forEach(t),Xto=r(Lye," \u2014 "),IP=n(Lye,"A",{href:!0});var Wlt=s(IP);zto=r(Wlt,"SegformerConfig"),Wlt.forEach(t),Wto=r(Lye," (SegFormer model)"),Lye.forEach(t),Qto=i(L),Mg=n(L,"LI",{});var yye=s(Mg);Xse=n(yye,"STRONG",{});var Qlt=s(Xse);Hto=r(Qlt,"sew"),Qlt.forEach(t),Uto=r(yye," \u2014 "),NP=n(yye,"A",{href:!0});var Hlt=s(NP);Jto=r(Hlt,"SEWConfig"),Hlt.forEach(t),Yto=r(yye," (SEW model)"),yye.forEach(t),Kto=i(L),Eg=n(L,"LI",{});var xye=s(Eg);zse=n(xye,"STRONG",{});var Ult=s(zse);Zto=r(Ult,"sew-d"),Ult.forEach(t),eao=r(xye," \u2014 "),qP=n(xye,"A",{href:!0});var Jlt=s(qP);oao=r(Jlt,"SEWDConfig"),Jlt.forEach(t),rao=r(xye," (SEW-D model)"),xye.forEach(t),tao=i(L),Cg=n(L,"LI",{});var $ye=s(Cg);Wse=n($ye,"STRONG",{});var Ylt=s(Wse);aao=r(Ylt,"speech-encoder-decoder"),Ylt.forEach(t),nao=r($ye," \u2014 "),jP=n($ye,"A",{href:!0});var Klt=s(jP);sao=r(Klt,"SpeechEncoderDecoderConfig"),Klt.forEach(t),lao=r($ye," (Speech Encoder decoder model)"),$ye.forEach(t),iao=i(L),wg=n(L,"LI",{});var kye=s(wg);Qse=n(kye,"STRONG",{});var Zlt=s(Qse);dao=r(Zlt,"speech_to_text"),Zlt.forEach(t),cao=r(kye," \u2014 "),DP=n(kye,"A",{href:!0});var eit=s(DP);fao=r(eit,"Speech2TextConfig"),eit.forEach(t),mao=r(kye," (Speech2Text model)"),kye.forEach(t),gao=i(L),Ag=n(L,"LI",{});var Sye=s(Ag);Hse=n(Sye,"STRONG",{});var oit=s(Hse);hao=r(oit,"speech_to_text_2"),oit.forEach(t),pao=r(Sye," \u2014 "),GP=n(Sye,"A",{href:!0});var rit=s(GP);_ao=r(rit,"Speech2Text2Config"),rit.forEach(t),uao=r(Sye," (Speech2Text2 model)"),Sye.forEach(t),bao=i(L),Lg=n(L,"LI",{});var Rye=s(Lg);Use=n(Rye,"STRONG",{});var tit=s(Use);vao=r(tit,"splinter"),tit.forEach(t),Fao=r(Rye," \u2014 "),OP=n(Rye,"A",{href:!0});var ait=s(OP);Tao=r(ait,"SplinterConfig"),ait.forEach(t),Mao=r(Rye," (Splinter model)"),Rye.forEach(t),Eao=i(L),yg=n(L,"LI",{});var Pye=s(yg);Jse=n(Pye,"STRONG",{});var nit=s(Jse);Cao=r(nit,"squeezebert"),nit.forEach(t),wao=r(Pye," \u2014 "),VP=n(Pye,"A",{href:!0});var sit=s(VP);Aao=r(sit,"SqueezeBertConfig"),sit.forEach(t),Lao=r(Pye," (SqueezeBERT model)"),Pye.forEach(t),yao=i(L),xg=n(L,"LI",{});var Bye=s(xg);Yse=n(Bye,"STRONG",{});var lit=s(Yse);xao=r(lit,"swin"),lit.forEach(t),$ao=r(Bye," \u2014 "),XP=n(Bye,"A",{href:!0});var iit=s(XP);kao=r(iit,"SwinConfig"),iit.forEach(t),Sao=r(Bye," (Swin Transformer model)"),Bye.forEach(t),Rao=i(L),$g=n(L,"LI",{});var Iye=s($g);Kse=n(Iye,"STRONG",{});var dit=s(Kse);Pao=r(dit,"t5"),dit.forEach(t),Bao=r(Iye," \u2014 "),zP=n(Iye,"A",{href:!0});var cit=s(zP);Iao=r(cit,"T5Config"),cit.forEach(t),Nao=r(Iye," (T5 model)"),Iye.forEach(t),qao=i(L),kg=n(L,"LI",{});var Nye=s(kg);Zse=n(Nye,"STRONG",{});var fit=s(Zse);jao=r(fit,"tapas"),fit.forEach(t),Dao=r(Nye," \u2014 "),WP=n(Nye,"A",{href:!0});var mit=s(WP);Gao=r(mit,"TapasConfig"),mit.forEach(t),Oao=r(Nye," (TAPAS model)"),Nye.forEach(t),Vao=i(L),Sg=n(L,"LI",{});var qye=s(Sg);ele=n(qye,"STRONG",{});var git=s(ele);Xao=r(git,"trajectory_transformer"),git.forEach(t),zao=r(qye," \u2014 "),QP=n(qye,"A",{href:!0});var hit=s(QP);Wao=r(hit,"TrajectoryTransformerConfig"),hit.forEach(t),Qao=r(qye," (Trajectory Transformer model)"),qye.forEach(t),Hao=i(L),Rg=n(L,"LI",{});var jye=s(Rg);ole=n(jye,"STRONG",{});var pit=s(ole);Uao=r(pit,"transfo-xl"),pit.forEach(t),Jao=r(jye," \u2014 "),HP=n(jye,"A",{href:!0});var _it=s(HP);Yao=r(_it,"TransfoXLConfig"),_it.forEach(t),Kao=r(jye," (Transformer-XL model)"),jye.forEach(t),Zao=i(L),Pg=n(L,"LI",{});var Dye=s(Pg);rle=n(Dye,"STRONG",{});var uit=s(rle);eno=r(uit,"trocr"),uit.forEach(t),ono=r(Dye," \u2014 "),UP=n(Dye,"A",{href:!0});var bit=s(UP);rno=r(bit,"TrOCRConfig"),bit.forEach(t),tno=r(Dye," (TrOCR model)"),Dye.forEach(t),ano=i(L),Bg=n(L,"LI",{});var Gye=s(Bg);tle=n(Gye,"STRONG",{});var vit=s(tle);nno=r(vit,"unispeech"),vit.forEach(t),sno=r(Gye," \u2014 "),JP=n(Gye,"A",{href:!0});var Fit=s(JP);lno=r(Fit,"UniSpeechConfig"),Fit.forEach(t),ino=r(Gye," (UniSpeech model)"),Gye.forEach(t),dno=i(L),Ig=n(L,"LI",{});var Oye=s(Ig);ale=n(Oye,"STRONG",{});var Tit=s(ale);cno=r(Tit,"unispeech-sat"),Tit.forEach(t),fno=r(Oye," \u2014 "),YP=n(Oye,"A",{href:!0});var Mit=s(YP);mno=r(Mit,"UniSpeechSatConfig"),Mit.forEach(t),gno=r(Oye," (UniSpeechSat model)"),Oye.forEach(t),hno=i(L),Ng=n(L,"LI",{});var Vye=s(Ng);nle=n(Vye,"STRONG",{});var Eit=s(nle);pno=r(Eit,"van"),Eit.forEach(t),_no=r(Vye," \u2014 "),KP=n(Vye,"A",{href:!0});var Cit=s(KP);uno=r(Cit,"VanConfig"),Cit.forEach(t),bno=r(Vye," (VAN model)"),Vye.forEach(t),vno=i(L),qg=n(L,"LI",{});var Xye=s(qg);sle=n(Xye,"STRONG",{});var wit=s(sle);Fno=r(wit,"vilt"),wit.forEach(t),Tno=r(Xye," \u2014 "),ZP=n(Xye,"A",{href:!0});var Ait=s(ZP);Mno=r(Ait,"ViltConfig"),Ait.forEach(t),Eno=r(Xye," (ViLT model)"),Xye.forEach(t),Cno=i(L),jg=n(L,"LI",{});var zye=s(jg);lle=n(zye,"STRONG",{});var Lit=s(lle);wno=r(Lit,"vision-encoder-decoder"),Lit.forEach(t),Ano=r(zye," \u2014 "),eB=n(zye,"A",{href:!0});var yit=s(eB);Lno=r(yit,"VisionEncoderDecoderConfig"),yit.forEach(t),yno=r(zye," (Vision Encoder decoder model)"),zye.forEach(t),xno=i(L),Dg=n(L,"LI",{});var Wye=s(Dg);ile=n(Wye,"STRONG",{});var xit=s(ile);$no=r(xit,"vision-text-dual-encoder"),xit.forEach(t),kno=r(Wye," \u2014 "),oB=n(Wye,"A",{href:!0});var $it=s(oB);Sno=r($it,"VisionTextDualEncoderConfig"),$it.forEach(t),Rno=r(Wye," (VisionTextDualEncoder model)"),Wye.forEach(t),Pno=i(L),Gg=n(L,"LI",{});var Qye=s(Gg);dle=n(Qye,"STRONG",{});var kit=s(dle);Bno=r(kit,"visual_bert"),kit.forEach(t),Ino=r(Qye," \u2014 "),rB=n(Qye,"A",{href:!0});var Sit=s(rB);Nno=r(Sit,"VisualBertConfig"),Sit.forEach(t),qno=r(Qye," (VisualBERT model)"),Qye.forEach(t),jno=i(L),Og=n(L,"LI",{});var Hye=s(Og);cle=n(Hye,"STRONG",{});var Rit=s(cle);Dno=r(Rit,"vit"),Rit.forEach(t),Gno=r(Hye," \u2014 "),tB=n(Hye,"A",{href:!0});var Pit=s(tB);Ono=r(Pit,"ViTConfig"),Pit.forEach(t),Vno=r(Hye," (ViT model)"),Hye.forEach(t),Xno=i(L),Vg=n(L,"LI",{});var Uye=s(Vg);fle=n(Uye,"STRONG",{});var Bit=s(fle);zno=r(Bit,"vit_mae"),Bit.forEach(t),Wno=r(Uye," \u2014 "),aB=n(Uye,"A",{href:!0});var Iit=s(aB);Qno=r(Iit,"ViTMAEConfig"),Iit.forEach(t),Hno=r(Uye," (ViTMAE model)"),Uye.forEach(t),Uno=i(L),Xg=n(L,"LI",{});var Jye=s(Xg);mle=n(Jye,"STRONG",{});var Nit=s(mle);Jno=r(Nit,"wav2vec2"),Nit.forEach(t),Yno=r(Jye," \u2014 "),nB=n(Jye,"A",{href:!0});var qit=s(nB);Kno=r(qit,"Wav2Vec2Config"),qit.forEach(t),Zno=r(Jye," (Wav2Vec2 model)"),Jye.forEach(t),eso=i(L),zg=n(L,"LI",{});var Yye=s(zg);gle=n(Yye,"STRONG",{});var jit=s(gle);oso=r(jit,"wav2vec2-conformer"),jit.forEach(t),rso=r(Yye," \u2014 "),sB=n(Yye,"A",{href:!0});var Dit=s(sB);tso=r(Dit,"Wav2Vec2ConformerConfig"),Dit.forEach(t),aso=r(Yye," (Wav2Vec2-Conformer model)"),Yye.forEach(t),nso=i(L),Wg=n(L,"LI",{});var Kye=s(Wg);hle=n(Kye,"STRONG",{});var Git=s(hle);sso=r(Git,"wavlm"),Git.forEach(t),lso=r(Kye," \u2014 "),lB=n(Kye,"A",{href:!0});var Oit=s(lB);iso=r(Oit,"WavLMConfig"),Oit.forEach(t),dso=r(Kye," (WavLM model)"),Kye.forEach(t),cso=i(L),Qg=n(L,"LI",{});var Zye=s(Qg);ple=n(Zye,"STRONG",{});var Vit=s(ple);fso=r(Vit,"xglm"),Vit.forEach(t),mso=r(Zye," \u2014 "),iB=n(Zye,"A",{href:!0});var Xit=s(iB);gso=r(Xit,"XGLMConfig"),Xit.forEach(t),hso=r(Zye," (XGLM model)"),Zye.forEach(t),pso=i(L),Hg=n(L,"LI",{});var e9e=s(Hg);_le=n(e9e,"STRONG",{});var zit=s(_le);_so=r(zit,"xlm"),zit.forEach(t),uso=r(e9e," \u2014 "),dB=n(e9e,"A",{href:!0});var Wit=s(dB);bso=r(Wit,"XLMConfig"),Wit.forEach(t),vso=r(e9e," (XLM model)"),e9e.forEach(t),Fso=i(L),Ug=n(L,"LI",{});var o9e=s(Ug);ule=n(o9e,"STRONG",{});var Qit=s(ule);Tso=r(Qit,"xlm-prophetnet"),Qit.forEach(t),Mso=r(o9e," \u2014 "),cB=n(o9e,"A",{href:!0});var Hit=s(cB);Eso=r(Hit,"XLMProphetNetConfig"),Hit.forEach(t),Cso=r(o9e," (XLM-ProphetNet model)"),o9e.forEach(t),wso=i(L),Jg=n(L,"LI",{});var r9e=s(Jg);ble=n(r9e,"STRONG",{});var Uit=s(ble);Aso=r(Uit,"xlm-roberta"),Uit.forEach(t),Lso=r(r9e," \u2014 "),fB=n(r9e,"A",{href:!0});var Jit=s(fB);yso=r(Jit,"XLMRobertaConfig"),Jit.forEach(t),xso=r(r9e," (XLM-RoBERTa model)"),r9e.forEach(t),$so=i(L),Yg=n(L,"LI",{});var t9e=s(Yg);vle=n(t9e,"STRONG",{});var Yit=s(vle);kso=r(Yit,"xlm-roberta-xl"),Yit.forEach(t),Sso=r(t9e," \u2014 "),mB=n(t9e,"A",{href:!0});var Kit=s(mB);Rso=r(Kit,"XLMRobertaXLConfig"),Kit.forEach(t),Pso=r(t9e," (XLM-RoBERTa-XL model)"),t9e.forEach(t),Bso=i(L),Kg=n(L,"LI",{});var a9e=s(Kg);Fle=n(a9e,"STRONG",{});var Zit=s(Fle);Iso=r(Zit,"xlnet"),Zit.forEach(t),Nso=r(a9e," \u2014 "),gB=n(a9e,"A",{href:!0});var edt=s(gB);qso=r(edt,"XLNetConfig"),edt.forEach(t),jso=r(a9e," (XLNet model)"),a9e.forEach(t),Dso=i(L),Zg=n(L,"LI",{});var n9e=s(Zg);Tle=n(n9e,"STRONG",{});var odt=s(Tle);Gso=r(odt,"yolos"),odt.forEach(t),Oso=r(n9e," \u2014 "),hB=n(n9e,"A",{href:!0});var rdt=s(hB);Vso=r(rdt,"YolosConfig"),rdt.forEach(t),Xso=r(n9e," (YOLOS model)"),n9e.forEach(t),zso=i(L),eh=n(L,"LI",{});var s9e=s(eh);Mle=n(s9e,"STRONG",{});var tdt=s(Mle);Wso=r(tdt,"yoso"),tdt.forEach(t),Qso=r(s9e," \u2014 "),pB=n(s9e,"A",{href:!0});var adt=s(pB);Hso=r(adt,"YosoConfig"),adt.forEach(t),Uso=r(s9e," (YOSO model)"),s9e.forEach(t),L.forEach(t),Jso=i(st),T(oh.$$.fragment,st),st.forEach(t),Yso=i(nt),rh=n(nt,"DIV",{class:!0});var lQe=s(rh);T(wL.$$.fragment,lQe),Kso=i(lQe),Ele=n(lQe,"P",{});var ndt=s(Ele);Zso=r(ndt,"Register a new configuration for this class."),ndt.forEach(t),lQe.forEach(t),nt.forEach(t),ize=i(f),ji=n(f,"H2",{class:!0});var iQe=s(ji);th=n(iQe,"A",{id:!0,class:!0,href:!0});var sdt=s(th);Cle=n(sdt,"SPAN",{});var ldt=s(Cle);T(AL.$$.fragment,ldt),ldt.forEach(t),sdt.forEach(t),elo=i(iQe),wle=n(iQe,"SPAN",{});var idt=s(wle);olo=r(idt,"AutoTokenizer"),idt.forEach(t),iQe.forEach(t),dze=i(f),yo=n(f,"DIV",{class:!0});var el=s(yo);T(LL.$$.fragment,el),rlo=i(el),yL=n(el,"P",{});var dQe=s(yL);tlo=r(dQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_B=n(dQe,"A",{href:!0});var ddt=s(_B);alo=r(ddt,"AutoTokenizer.from_pretrained()"),ddt.forEach(t),nlo=r(dQe," class method."),dQe.forEach(t),slo=i(el),xL=n(el,"P",{});var cQe=s(xL);llo=r(cQe,"This class cannot be instantiated directly using "),Ale=n(cQe,"CODE",{});var cdt=s(Ale);ilo=r(cdt,"__init__()"),cdt.forEach(t),dlo=r(cQe," (throws an error)."),cQe.forEach(t),clo=i(el),xr=n(el,"DIV",{class:!0});var ol=s(xr);T($L.$$.fragment,ol),flo=i(ol),Lle=n(ol,"P",{});var fdt=s(Lle);mlo=r(fdt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),fdt.forEach(t),glo=i(ol),Pa=n(ol,"P",{});var Fw=s(Pa);hlo=r(Fw,"The tokenizer class to instantiate is selected based on the "),yle=n(Fw,"CODE",{});var mdt=s(yle);plo=r(mdt,"model_type"),mdt.forEach(t),_lo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),xle=n(Fw,"CODE",{});var gdt=s(xle);ulo=r(gdt,"pretrained_model_name_or_path"),gdt.forEach(t),blo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$le=n(Fw,"CODE",{});var hdt=s($le);vlo=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),Flo=r(Fw,":"),Fw.forEach(t),Tlo=i(ol),k=n(ol,"UL",{});var S=s(k);jn=n(S,"LI",{});var Ik=s(jn);kle=n(Ik,"STRONG",{});var pdt=s(kle);Mlo=r(pdt,"albert"),pdt.forEach(t),Elo=r(Ik," \u2014 "),uB=n(Ik,"A",{href:!0});var _dt=s(uB);Clo=r(_dt,"AlbertTokenizer"),_dt.forEach(t),wlo=r(Ik," or "),bB=n(Ik,"A",{href:!0});var udt=s(bB);Alo=r(udt,"AlbertTokenizerFast"),udt.forEach(t),Llo=r(Ik," (ALBERT model)"),Ik.forEach(t),ylo=i(S),Dn=n(S,"LI",{});var Nk=s(Dn);Sle=n(Nk,"STRONG",{});var bdt=s(Sle);xlo=r(bdt,"bart"),bdt.forEach(t),$lo=r(Nk," \u2014 "),vB=n(Nk,"A",{href:!0});var vdt=s(vB);klo=r(vdt,"BartTokenizer"),vdt.forEach(t),Slo=r(Nk," or "),FB=n(Nk,"A",{href:!0});var Fdt=s(FB);Rlo=r(Fdt,"BartTokenizerFast"),Fdt.forEach(t),Plo=r(Nk," (BART model)"),Nk.forEach(t),Blo=i(S),Gn=n(S,"LI",{});var qk=s(Gn);Rle=n(qk,"STRONG",{});var Tdt=s(Rle);Ilo=r(Tdt,"barthez"),Tdt.forEach(t),Nlo=r(qk," \u2014 "),TB=n(qk,"A",{href:!0});var Mdt=s(TB);qlo=r(Mdt,"BarthezTokenizer"),Mdt.forEach(t),jlo=r(qk," or "),MB=n(qk,"A",{href:!0});var Edt=s(MB);Dlo=r(Edt,"BarthezTokenizerFast"),Edt.forEach(t),Glo=r(qk," (BARThez model)"),qk.forEach(t),Olo=i(S),ah=n(S,"LI",{});var l9e=s(ah);Ple=n(l9e,"STRONG",{});var Cdt=s(Ple);Vlo=r(Cdt,"bartpho"),Cdt.forEach(t),Xlo=r(l9e," \u2014 "),EB=n(l9e,"A",{href:!0});var wdt=s(EB);zlo=r(wdt,"BartphoTokenizer"),wdt.forEach(t),Wlo=r(l9e," (BARTpho model)"),l9e.forEach(t),Qlo=i(S),On=n(S,"LI",{});var jk=s(On);Ble=n(jk,"STRONG",{});var Adt=s(Ble);Hlo=r(Adt,"bert"),Adt.forEach(t),Ulo=r(jk," \u2014 "),CB=n(jk,"A",{href:!0});var Ldt=s(CB);Jlo=r(Ldt,"BertTokenizer"),Ldt.forEach(t),Ylo=r(jk," or "),wB=n(jk,"A",{href:!0});var ydt=s(wB);Klo=r(ydt,"BertTokenizerFast"),ydt.forEach(t),Zlo=r(jk," (BERT model)"),jk.forEach(t),eio=i(S),nh=n(S,"LI",{});var i9e=s(nh);Ile=n(i9e,"STRONG",{});var xdt=s(Ile);oio=r(xdt,"bert-generation"),xdt.forEach(t),rio=r(i9e," \u2014 "),AB=n(i9e,"A",{href:!0});var $dt=s(AB);tio=r($dt,"BertGenerationTokenizer"),$dt.forEach(t),aio=r(i9e," (Bert Generation model)"),i9e.forEach(t),nio=i(S),sh=n(S,"LI",{});var d9e=s(sh);Nle=n(d9e,"STRONG",{});var kdt=s(Nle);sio=r(kdt,"bert-japanese"),kdt.forEach(t),lio=r(d9e," \u2014 "),LB=n(d9e,"A",{href:!0});var Sdt=s(LB);iio=r(Sdt,"BertJapaneseTokenizer"),Sdt.forEach(t),dio=r(d9e," (BertJapanese model)"),d9e.forEach(t),cio=i(S),lh=n(S,"LI",{});var c9e=s(lh);qle=n(c9e,"STRONG",{});var Rdt=s(qle);fio=r(Rdt,"bertweet"),Rdt.forEach(t),mio=r(c9e," \u2014 "),yB=n(c9e,"A",{href:!0});var Pdt=s(yB);gio=r(Pdt,"BertweetTokenizer"),Pdt.forEach(t),hio=r(c9e," (BERTweet model)"),c9e.forEach(t),pio=i(S),Vn=n(S,"LI",{});var Dk=s(Vn);jle=n(Dk,"STRONG",{});var Bdt=s(jle);_io=r(Bdt,"big_bird"),Bdt.forEach(t),uio=r(Dk," \u2014 "),xB=n(Dk,"A",{href:!0});var Idt=s(xB);bio=r(Idt,"BigBirdTokenizer"),Idt.forEach(t),vio=r(Dk," or "),$B=n(Dk,"A",{href:!0});var Ndt=s($B);Fio=r(Ndt,"BigBirdTokenizerFast"),Ndt.forEach(t),Tio=r(Dk," (BigBird model)"),Dk.forEach(t),Mio=i(S),Xn=n(S,"LI",{});var Gk=s(Xn);Dle=n(Gk,"STRONG",{});var qdt=s(Dle);Eio=r(qdt,"bigbird_pegasus"),qdt.forEach(t),Cio=r(Gk," \u2014 "),kB=n(Gk,"A",{href:!0});var jdt=s(kB);wio=r(jdt,"PegasusTokenizer"),jdt.forEach(t),Aio=r(Gk," or "),SB=n(Gk,"A",{href:!0});var Ddt=s(SB);Lio=r(Ddt,"PegasusTokenizerFast"),Ddt.forEach(t),yio=r(Gk," (BigBird-Pegasus model)"),Gk.forEach(t),xio=i(S),zn=n(S,"LI",{});var Ok=s(zn);Gle=n(Ok,"STRONG",{});var Gdt=s(Gle);$io=r(Gdt,"blenderbot"),Gdt.forEach(t),kio=r(Ok," \u2014 "),RB=n(Ok,"A",{href:!0});var Odt=s(RB);Sio=r(Odt,"BlenderbotTokenizer"),Odt.forEach(t),Rio=r(Ok," or "),PB=n(Ok,"A",{href:!0});var Vdt=s(PB);Pio=r(Vdt,"BlenderbotTokenizerFast"),Vdt.forEach(t),Bio=r(Ok," (Blenderbot model)"),Ok.forEach(t),Iio=i(S),ih=n(S,"LI",{});var f9e=s(ih);Ole=n(f9e,"STRONG",{});var Xdt=s(Ole);Nio=r(Xdt,"blenderbot-small"),Xdt.forEach(t),qio=r(f9e," \u2014 "),BB=n(f9e,"A",{href:!0});var zdt=s(BB);jio=r(zdt,"BlenderbotSmallTokenizer"),zdt.forEach(t),Dio=r(f9e," (BlenderbotSmall model)"),f9e.forEach(t),Gio=i(S),dh=n(S,"LI",{});var m9e=s(dh);Vle=n(m9e,"STRONG",{});var Wdt=s(Vle);Oio=r(Wdt,"bloom"),Wdt.forEach(t),Vio=r(m9e," \u2014 "),IB=n(m9e,"A",{href:!0});var Qdt=s(IB);Xio=r(Qdt,"BloomTokenizerFast"),Qdt.forEach(t),zio=r(m9e," (BLOOM model)"),m9e.forEach(t),Wio=i(S),ch=n(S,"LI",{});var g9e=s(ch);Xle=n(g9e,"STRONG",{});var Hdt=s(Xle);Qio=r(Hdt,"byt5"),Hdt.forEach(t),Hio=r(g9e," \u2014 "),NB=n(g9e,"A",{href:!0});var Udt=s(NB);Uio=r(Udt,"ByT5Tokenizer"),Udt.forEach(t),Jio=r(g9e," (ByT5 model)"),g9e.forEach(t),Yio=i(S),Wn=n(S,"LI",{});var Vk=s(Wn);zle=n(Vk,"STRONG",{});var Jdt=s(zle);Kio=r(Jdt,"camembert"),Jdt.forEach(t),Zio=r(Vk," \u2014 "),qB=n(Vk,"A",{href:!0});var Ydt=s(qB);edo=r(Ydt,"CamembertTokenizer"),Ydt.forEach(t),odo=r(Vk," or "),jB=n(Vk,"A",{href:!0});var Kdt=s(jB);rdo=r(Kdt,"CamembertTokenizerFast"),Kdt.forEach(t),tdo=r(Vk," (CamemBERT model)"),Vk.forEach(t),ado=i(S),fh=n(S,"LI",{});var h9e=s(fh);Wle=n(h9e,"STRONG",{});var Zdt=s(Wle);ndo=r(Zdt,"canine"),Zdt.forEach(t),sdo=r(h9e," \u2014 "),DB=n(h9e,"A",{href:!0});var ect=s(DB);ldo=r(ect,"CanineTokenizer"),ect.forEach(t),ido=r(h9e," (CANINE model)"),h9e.forEach(t),ddo=i(S),Qn=n(S,"LI",{});var Xk=s(Qn);Qle=n(Xk,"STRONG",{});var oct=s(Qle);cdo=r(oct,"clip"),oct.forEach(t),fdo=r(Xk," \u2014 "),GB=n(Xk,"A",{href:!0});var rct=s(GB);mdo=r(rct,"CLIPTokenizer"),rct.forEach(t),gdo=r(Xk," or "),OB=n(Xk,"A",{href:!0});var tct=s(OB);hdo=r(tct,"CLIPTokenizerFast"),tct.forEach(t),pdo=r(Xk," (CLIP model)"),Xk.forEach(t),_do=i(S),Hn=n(S,"LI",{});var zk=s(Hn);Hle=n(zk,"STRONG",{});var act=s(Hle);udo=r(act,"codegen"),act.forEach(t),bdo=r(zk," \u2014 "),VB=n(zk,"A",{href:!0});var nct=s(VB);vdo=r(nct,"CodeGenTokenizer"),nct.forEach(t),Fdo=r(zk," or "),XB=n(zk,"A",{href:!0});var sct=s(XB);Tdo=r(sct,"CodeGenTokenizerFast"),sct.forEach(t),Mdo=r(zk," (CodeGen model)"),zk.forEach(t),Edo=i(S),Un=n(S,"LI",{});var Wk=s(Un);Ule=n(Wk,"STRONG",{});var lct=s(Ule);Cdo=r(lct,"convbert"),lct.forEach(t),wdo=r(Wk," \u2014 "),zB=n(Wk,"A",{href:!0});var ict=s(zB);Ado=r(ict,"ConvBertTokenizer"),ict.forEach(t),Ldo=r(Wk," or "),WB=n(Wk,"A",{href:!0});var dct=s(WB);ydo=r(dct,"ConvBertTokenizerFast"),dct.forEach(t),xdo=r(Wk," (ConvBERT model)"),Wk.forEach(t),$do=i(S),Jn=n(S,"LI",{});var Qk=s(Jn);Jle=n(Qk,"STRONG",{});var cct=s(Jle);kdo=r(cct,"cpm"),cct.forEach(t),Sdo=r(Qk," \u2014 "),QB=n(Qk,"A",{href:!0});var fct=s(QB);Rdo=r(fct,"CpmTokenizer"),fct.forEach(t),Pdo=r(Qk," or "),HB=n(Qk,"A",{href:!0});var mct=s(HB);Bdo=r(mct,"CpmTokenizerFast"),mct.forEach(t),Ido=r(Qk," (CPM model)"),Qk.forEach(t),Ndo=i(S),mh=n(S,"LI",{});var p9e=s(mh);Yle=n(p9e,"STRONG",{});var gct=s(Yle);qdo=r(gct,"ctrl"),gct.forEach(t),jdo=r(p9e," \u2014 "),UB=n(p9e,"A",{href:!0});var hct=s(UB);Ddo=r(hct,"CTRLTokenizer"),hct.forEach(t),Gdo=r(p9e," (CTRL model)"),p9e.forEach(t),Odo=i(S),Yn=n(S,"LI",{});var Hk=s(Yn);Kle=n(Hk,"STRONG",{});var pct=s(Kle);Vdo=r(pct,"data2vec-text"),pct.forEach(t),Xdo=r(Hk," \u2014 "),JB=n(Hk,"A",{href:!0});var _ct=s(JB);zdo=r(_ct,"RobertaTokenizer"),_ct.forEach(t),Wdo=r(Hk," or "),YB=n(Hk,"A",{href:!0});var uct=s(YB);Qdo=r(uct,"RobertaTokenizerFast"),uct.forEach(t),Hdo=r(Hk," (Data2VecText model)"),Hk.forEach(t),Udo=i(S),Kn=n(S,"LI",{});var Uk=s(Kn);Zle=n(Uk,"STRONG",{});var bct=s(Zle);Jdo=r(bct,"deberta"),bct.forEach(t),Ydo=r(Uk," \u2014 "),KB=n(Uk,"A",{href:!0});var vct=s(KB);Kdo=r(vct,"DebertaTokenizer"),vct.forEach(t),Zdo=r(Uk," or "),ZB=n(Uk,"A",{href:!0});var Fct=s(ZB);eco=r(Fct,"DebertaTokenizerFast"),Fct.forEach(t),oco=r(Uk," (DeBERTa model)"),Uk.forEach(t),rco=i(S),Zn=n(S,"LI",{});var Jk=s(Zn);eie=n(Jk,"STRONG",{});var Tct=s(eie);tco=r(Tct,"deberta-v2"),Tct.forEach(t),aco=r(Jk," \u2014 "),eI=n(Jk,"A",{href:!0});var Mct=s(eI);nco=r(Mct,"DebertaV2Tokenizer"),Mct.forEach(t),sco=r(Jk," or "),oI=n(Jk,"A",{href:!0});var Ect=s(oI);lco=r(Ect,"DebertaV2TokenizerFast"),Ect.forEach(t),ico=r(Jk," (DeBERTa-v2 model)"),Jk.forEach(t),dco=i(S),es=n(S,"LI",{});var Yk=s(es);oie=n(Yk,"STRONG",{});var Cct=s(oie);cco=r(Cct,"distilbert"),Cct.forEach(t),fco=r(Yk," \u2014 "),rI=n(Yk,"A",{href:!0});var wct=s(rI);mco=r(wct,"DistilBertTokenizer"),wct.forEach(t),gco=r(Yk," or "),tI=n(Yk,"A",{href:!0});var Act=s(tI);hco=r(Act,"DistilBertTokenizerFast"),Act.forEach(t),pco=r(Yk," (DistilBERT model)"),Yk.forEach(t),_co=i(S),os=n(S,"LI",{});var Kk=s(os);rie=n(Kk,"STRONG",{});var Lct=s(rie);uco=r(Lct,"dpr"),Lct.forEach(t),bco=r(Kk," \u2014 "),aI=n(Kk,"A",{href:!0});var yct=s(aI);vco=r(yct,"DPRQuestionEncoderTokenizer"),yct.forEach(t),Fco=r(Kk," or "),nI=n(Kk,"A",{href:!0});var xct=s(nI);Tco=r(xct,"DPRQuestionEncoderTokenizerFast"),xct.forEach(t),Mco=r(Kk," (DPR model)"),Kk.forEach(t),Eco=i(S),rs=n(S,"LI",{});var Zk=s(rs);tie=n(Zk,"STRONG",{});var $ct=s(tie);Cco=r($ct,"electra"),$ct.forEach(t),wco=r(Zk," \u2014 "),sI=n(Zk,"A",{href:!0});var kct=s(sI);Aco=r(kct,"ElectraTokenizer"),kct.forEach(t),Lco=r(Zk," or "),lI=n(Zk,"A",{href:!0});var Sct=s(lI);yco=r(Sct,"ElectraTokenizerFast"),Sct.forEach(t),xco=r(Zk," (ELECTRA model)"),Zk.forEach(t),$co=i(S),gh=n(S,"LI",{});var _9e=s(gh);aie=n(_9e,"STRONG",{});var Rct=s(aie);kco=r(Rct,"flaubert"),Rct.forEach(t),Sco=r(_9e," \u2014 "),iI=n(_9e,"A",{href:!0});var Pct=s(iI);Rco=r(Pct,"FlaubertTokenizer"),Pct.forEach(t),Pco=r(_9e," (FlauBERT model)"),_9e.forEach(t),Bco=i(S),ts=n(S,"LI",{});var eS=s(ts);nie=n(eS,"STRONG",{});var Bct=s(nie);Ico=r(Bct,"fnet"),Bct.forEach(t),Nco=r(eS," \u2014 "),dI=n(eS,"A",{href:!0});var Ict=s(dI);qco=r(Ict,"FNetTokenizer"),Ict.forEach(t),jco=r(eS," or "),cI=n(eS,"A",{href:!0});var Nct=s(cI);Dco=r(Nct,"FNetTokenizerFast"),Nct.forEach(t),Gco=r(eS," (FNet model)"),eS.forEach(t),Oco=i(S),hh=n(S,"LI",{});var u9e=s(hh);sie=n(u9e,"STRONG",{});var qct=s(sie);Vco=r(qct,"fsmt"),qct.forEach(t),Xco=r(u9e," \u2014 "),fI=n(u9e,"A",{href:!0});var jct=s(fI);zco=r(jct,"FSMTTokenizer"),jct.forEach(t),Wco=r(u9e," (FairSeq Machine-Translation model)"),u9e.forEach(t),Qco=i(S),as=n(S,"LI",{});var oS=s(as);lie=n(oS,"STRONG",{});var Dct=s(lie);Hco=r(Dct,"funnel"),Dct.forEach(t),Uco=r(oS," \u2014 "),mI=n(oS,"A",{href:!0});var Gct=s(mI);Jco=r(Gct,"FunnelTokenizer"),Gct.forEach(t),Yco=r(oS," or "),gI=n(oS,"A",{href:!0});var Oct=s(gI);Kco=r(Oct,"FunnelTokenizerFast"),Oct.forEach(t),Zco=r(oS," (Funnel Transformer model)"),oS.forEach(t),efo=i(S),ns=n(S,"LI",{});var rS=s(ns);iie=n(rS,"STRONG",{});var Vct=s(iie);ofo=r(Vct,"gpt2"),Vct.forEach(t),rfo=r(rS," \u2014 "),hI=n(rS,"A",{href:!0});var Xct=s(hI);tfo=r(Xct,"GPT2Tokenizer"),Xct.forEach(t),afo=r(rS," or "),pI=n(rS,"A",{href:!0});var zct=s(pI);nfo=r(zct,"GPT2TokenizerFast"),zct.forEach(t),sfo=r(rS," (OpenAI GPT-2 model)"),rS.forEach(t),lfo=i(S),ss=n(S,"LI",{});var tS=s(ss);die=n(tS,"STRONG",{});var Wct=s(die);ifo=r(Wct,"gpt_neo"),Wct.forEach(t),dfo=r(tS," \u2014 "),_I=n(tS,"A",{href:!0});var Qct=s(_I);cfo=r(Qct,"GPT2Tokenizer"),Qct.forEach(t),ffo=r(tS," or "),uI=n(tS,"A",{href:!0});var Hct=s(uI);mfo=r(Hct,"GPT2TokenizerFast"),Hct.forEach(t),gfo=r(tS," (GPT Neo model)"),tS.forEach(t),hfo=i(S),ph=n(S,"LI",{});var b9e=s(ph);cie=n(b9e,"STRONG",{});var Uct=s(cie);pfo=r(Uct,"gpt_neox"),Uct.forEach(t),_fo=r(b9e," \u2014 "),bI=n(b9e,"A",{href:!0});var Jct=s(bI);ufo=r(Jct,"GPTNeoXTokenizerFast"),Jct.forEach(t),bfo=r(b9e," (GPT NeoX model)"),b9e.forEach(t),vfo=i(S),ls=n(S,"LI",{});var aS=s(ls);fie=n(aS,"STRONG",{});var Yct=s(fie);Ffo=r(Yct,"gptj"),Yct.forEach(t),Tfo=r(aS," \u2014 "),vI=n(aS,"A",{href:!0});var Kct=s(vI);Mfo=r(Kct,"GPT2Tokenizer"),Kct.forEach(t),Efo=r(aS," or "),FI=n(aS,"A",{href:!0});var Zct=s(FI);Cfo=r(Zct,"GPT2TokenizerFast"),Zct.forEach(t),wfo=r(aS," (GPT-J model)"),aS.forEach(t),Afo=i(S),is=n(S,"LI",{});var nS=s(is);mie=n(nS,"STRONG",{});var eft=s(mie);Lfo=r(eft,"groupvit"),eft.forEach(t),yfo=r(nS," \u2014 "),TI=n(nS,"A",{href:!0});var oft=s(TI);xfo=r(oft,"CLIPTokenizer"),oft.forEach(t),$fo=r(nS," or "),MI=n(nS,"A",{href:!0});var rft=s(MI);kfo=r(rft,"CLIPTokenizerFast"),rft.forEach(t),Sfo=r(nS," (GroupViT model)"),nS.forEach(t),Rfo=i(S),ds=n(S,"LI",{});var sS=s(ds);gie=n(sS,"STRONG",{});var tft=s(gie);Pfo=r(tft,"herbert"),tft.forEach(t),Bfo=r(sS," \u2014 "),EI=n(sS,"A",{href:!0});var aft=s(EI);Ifo=r(aft,"HerbertTokenizer"),aft.forEach(t),Nfo=r(sS," or "),CI=n(sS,"A",{href:!0});var nft=s(CI);qfo=r(nft,"HerbertTokenizerFast"),nft.forEach(t),jfo=r(sS," (HerBERT model)"),sS.forEach(t),Dfo=i(S),_h=n(S,"LI",{});var v9e=s(_h);hie=n(v9e,"STRONG",{});var sft=s(hie);Gfo=r(sft,"hubert"),sft.forEach(t),Ofo=r(v9e," \u2014 "),wI=n(v9e,"A",{href:!0});var lft=s(wI);Vfo=r(lft,"Wav2Vec2CTCTokenizer"),lft.forEach(t),Xfo=r(v9e," (Hubert model)"),v9e.forEach(t),zfo=i(S),cs=n(S,"LI",{});var lS=s(cs);pie=n(lS,"STRONG",{});var ift=s(pie);Wfo=r(ift,"ibert"),ift.forEach(t),Qfo=r(lS," \u2014 "),AI=n(lS,"A",{href:!0});var dft=s(AI);Hfo=r(dft,"RobertaTokenizer"),dft.forEach(t),Ufo=r(lS," or "),LI=n(lS,"A",{href:!0});var cft=s(LI);Jfo=r(cft,"RobertaTokenizerFast"),cft.forEach(t),Yfo=r(lS," (I-BERT model)"),lS.forEach(t),Kfo=i(S),uh=n(S,"LI",{});var F9e=s(uh);_ie=n(F9e,"STRONG",{});var fft=s(_ie);Zfo=r(fft,"jukebox"),fft.forEach(t),emo=r(F9e," \u2014 "),uie=n(F9e,"CODE",{});var mft=s(uie);omo=r(mft,"JukeboxTokenizer"),mft.forEach(t),rmo=r(F9e," (Jukebox model)"),F9e.forEach(t),tmo=i(S),fs=n(S,"LI",{});var iS=s(fs);bie=n(iS,"STRONG",{});var gft=s(bie);amo=r(gft,"layoutlm"),gft.forEach(t),nmo=r(iS," \u2014 "),yI=n(iS,"A",{href:!0});var hft=s(yI);smo=r(hft,"LayoutLMTokenizer"),hft.forEach(t),lmo=r(iS," or "),xI=n(iS,"A",{href:!0});var pft=s(xI);imo=r(pft,"LayoutLMTokenizerFast"),pft.forEach(t),dmo=r(iS," (LayoutLM model)"),iS.forEach(t),cmo=i(S),ms=n(S,"LI",{});var dS=s(ms);vie=n(dS,"STRONG",{});var _ft=s(vie);fmo=r(_ft,"layoutlmv2"),_ft.forEach(t),mmo=r(dS," \u2014 "),$I=n(dS,"A",{href:!0});var uft=s($I);gmo=r(uft,"LayoutLMv2Tokenizer"),uft.forEach(t),hmo=r(dS," or "),kI=n(dS,"A",{href:!0});var bft=s(kI);pmo=r(bft,"LayoutLMv2TokenizerFast"),bft.forEach(t),_mo=r(dS," (LayoutLMv2 model)"),dS.forEach(t),umo=i(S),gs=n(S,"LI",{});var cS=s(gs);Fie=n(cS,"STRONG",{});var vft=s(Fie);bmo=r(vft,"layoutlmv3"),vft.forEach(t),vmo=r(cS," \u2014 "),SI=n(cS,"A",{href:!0});var Fft=s(SI);Fmo=r(Fft,"LayoutLMv3Tokenizer"),Fft.forEach(t),Tmo=r(cS," or "),RI=n(cS,"A",{href:!0});var Tft=s(RI);Mmo=r(Tft,"LayoutLMv3TokenizerFast"),Tft.forEach(t),Emo=r(cS," (LayoutLMv3 model)"),cS.forEach(t),Cmo=i(S),hs=n(S,"LI",{});var fS=s(hs);Tie=n(fS,"STRONG",{});var Mft=s(Tie);wmo=r(Mft,"layoutxlm"),Mft.forEach(t),Amo=r(fS," \u2014 "),PI=n(fS,"A",{href:!0});var Eft=s(PI);Lmo=r(Eft,"LayoutXLMTokenizer"),Eft.forEach(t),ymo=r(fS," or "),BI=n(fS,"A",{href:!0});var Cft=s(BI);xmo=r(Cft,"LayoutXLMTokenizerFast"),Cft.forEach(t),$mo=r(fS," (LayoutXLM model)"),fS.forEach(t),kmo=i(S),ps=n(S,"LI",{});var mS=s(ps);Mie=n(mS,"STRONG",{});var wft=s(Mie);Smo=r(wft,"led"),wft.forEach(t),Rmo=r(mS," \u2014 "),II=n(mS,"A",{href:!0});var Aft=s(II);Pmo=r(Aft,"LEDTokenizer"),Aft.forEach(t),Bmo=r(mS," or "),NI=n(mS,"A",{href:!0});var Lft=s(NI);Imo=r(Lft,"LEDTokenizerFast"),Lft.forEach(t),Nmo=r(mS," (LED model)"),mS.forEach(t),qmo=i(S),_s=n(S,"LI",{});var gS=s(_s);Eie=n(gS,"STRONG",{});var yft=s(Eie);jmo=r(yft,"longformer"),yft.forEach(t),Dmo=r(gS," \u2014 "),qI=n(gS,"A",{href:!0});var xft=s(qI);Gmo=r(xft,"LongformerTokenizer"),xft.forEach(t),Omo=r(gS," or "),jI=n(gS,"A",{href:!0});var $ft=s(jI);Vmo=r($ft,"LongformerTokenizerFast"),$ft.forEach(t),Xmo=r(gS," (Longformer model)"),gS.forEach(t),zmo=i(S),us=n(S,"LI",{});var hS=s(us);Cie=n(hS,"STRONG",{});var kft=s(Cie);Wmo=r(kft,"longt5"),kft.forEach(t),Qmo=r(hS," \u2014 "),DI=n(hS,"A",{href:!0});var Sft=s(DI);Hmo=r(Sft,"T5Tokenizer"),Sft.forEach(t),Umo=r(hS," or "),GI=n(hS,"A",{href:!0});var Rft=s(GI);Jmo=r(Rft,"T5TokenizerFast"),Rft.forEach(t),Ymo=r(hS," (LongT5 model)"),hS.forEach(t),Kmo=i(S),bh=n(S,"LI",{});var T9e=s(bh);wie=n(T9e,"STRONG",{});var Pft=s(wie);Zmo=r(Pft,"luke"),Pft.forEach(t),ego=r(T9e," \u2014 "),OI=n(T9e,"A",{href:!0});var Bft=s(OI);ogo=r(Bft,"LukeTokenizer"),Bft.forEach(t),rgo=r(T9e," (LUKE model)"),T9e.forEach(t),tgo=i(S),bs=n(S,"LI",{});var pS=s(bs);Aie=n(pS,"STRONG",{});var Ift=s(Aie);ago=r(Ift,"lxmert"),Ift.forEach(t),ngo=r(pS," \u2014 "),VI=n(pS,"A",{href:!0});var Nft=s(VI);sgo=r(Nft,"LxmertTokenizer"),Nft.forEach(t),lgo=r(pS," or "),XI=n(pS,"A",{href:!0});var qft=s(XI);igo=r(qft,"LxmertTokenizerFast"),qft.forEach(t),dgo=r(pS," (LXMERT model)"),pS.forEach(t),cgo=i(S),vh=n(S,"LI",{});var M9e=s(vh);Lie=n(M9e,"STRONG",{});var jft=s(Lie);fgo=r(jft,"m2m_100"),jft.forEach(t),mgo=r(M9e," \u2014 "),zI=n(M9e,"A",{href:!0});var Dft=s(zI);ggo=r(Dft,"M2M100Tokenizer"),Dft.forEach(t),hgo=r(M9e," (M2M100 model)"),M9e.forEach(t),pgo=i(S),Fh=n(S,"LI",{});var E9e=s(Fh);yie=n(E9e,"STRONG",{});var Gft=s(yie);_go=r(Gft,"marian"),Gft.forEach(t),ugo=r(E9e," \u2014 "),WI=n(E9e,"A",{href:!0});var Oft=s(WI);bgo=r(Oft,"MarianTokenizer"),Oft.forEach(t),vgo=r(E9e," (Marian model)"),E9e.forEach(t),Fgo=i(S),vs=n(S,"LI",{});var _S=s(vs);xie=n(_S,"STRONG",{});var Vft=s(xie);Tgo=r(Vft,"mbart"),Vft.forEach(t),Mgo=r(_S," \u2014 "),QI=n(_S,"A",{href:!0});var Xft=s(QI);Ego=r(Xft,"MBartTokenizer"),Xft.forEach(t),Cgo=r(_S," or "),HI=n(_S,"A",{href:!0});var zft=s(HI);wgo=r(zft,"MBartTokenizerFast"),zft.forEach(t),Ago=r(_S," (mBART model)"),_S.forEach(t),Lgo=i(S),Fs=n(S,"LI",{});var uS=s(Fs);$ie=n(uS,"STRONG",{});var Wft=s($ie);ygo=r(Wft,"mbart50"),Wft.forEach(t),xgo=r(uS," \u2014 "),UI=n(uS,"A",{href:!0});var Qft=s(UI);$go=r(Qft,"MBart50Tokenizer"),Qft.forEach(t),kgo=r(uS," or "),JI=n(uS,"A",{href:!0});var Hft=s(JI);Sgo=r(Hft,"MBart50TokenizerFast"),Hft.forEach(t),Rgo=r(uS," (mBART-50 model)"),uS.forEach(t),Pgo=i(S),Ts=n(S,"LI",{});var bS=s(Ts);kie=n(bS,"STRONG",{});var Uft=s(kie);Bgo=r(Uft,"megatron-bert"),Uft.forEach(t),Igo=r(bS," \u2014 "),YI=n(bS,"A",{href:!0});var Jft=s(YI);Ngo=r(Jft,"BertTokenizer"),Jft.forEach(t),qgo=r(bS," or "),KI=n(bS,"A",{href:!0});var Yft=s(KI);jgo=r(Yft,"BertTokenizerFast"),Yft.forEach(t),Dgo=r(bS," (Megatron-BERT model)"),bS.forEach(t),Ggo=i(S),Th=n(S,"LI",{});var C9e=s(Th);Sie=n(C9e,"STRONG",{});var Kft=s(Sie);Ogo=r(Kft,"mluke"),Kft.forEach(t),Vgo=r(C9e," \u2014 "),ZI=n(C9e,"A",{href:!0});var Zft=s(ZI);Xgo=r(Zft,"MLukeTokenizer"),Zft.forEach(t),zgo=r(C9e," (mLUKE model)"),C9e.forEach(t),Wgo=i(S),Ms=n(S,"LI",{});var vS=s(Ms);Rie=n(vS,"STRONG",{});var emt=s(Rie);Qgo=r(emt,"mobilebert"),emt.forEach(t),Hgo=r(vS," \u2014 "),eN=n(vS,"A",{href:!0});var omt=s(eN);Ugo=r(omt,"MobileBertTokenizer"),omt.forEach(t),Jgo=r(vS," or "),oN=n(vS,"A",{href:!0});var rmt=s(oN);Ygo=r(rmt,"MobileBertTokenizerFast"),rmt.forEach(t),Kgo=r(vS," (MobileBERT model)"),vS.forEach(t),Zgo=i(S),Es=n(S,"LI",{});var FS=s(Es);Pie=n(FS,"STRONG",{});var tmt=s(Pie);eho=r(tmt,"mpnet"),tmt.forEach(t),oho=r(FS," \u2014 "),rN=n(FS,"A",{href:!0});var amt=s(rN);rho=r(amt,"MPNetTokenizer"),amt.forEach(t),tho=r(FS," or "),tN=n(FS,"A",{href:!0});var nmt=s(tN);aho=r(nmt,"MPNetTokenizerFast"),nmt.forEach(t),nho=r(FS," (MPNet model)"),FS.forEach(t),sho=i(S),Cs=n(S,"LI",{});var TS=s(Cs);Bie=n(TS,"STRONG",{});var smt=s(Bie);lho=r(smt,"mt5"),smt.forEach(t),iho=r(TS," \u2014 "),aN=n(TS,"A",{href:!0});var lmt=s(aN);dho=r(lmt,"MT5Tokenizer"),lmt.forEach(t),cho=r(TS," or "),nN=n(TS,"A",{href:!0});var imt=s(nN);fho=r(imt,"MT5TokenizerFast"),imt.forEach(t),mho=r(TS," (MT5 model)"),TS.forEach(t),gho=i(S),ws=n(S,"LI",{});var MS=s(ws);Iie=n(MS,"STRONG",{});var dmt=s(Iie);hho=r(dmt,"mvp"),dmt.forEach(t),pho=r(MS," \u2014 "),sN=n(MS,"A",{href:!0});var cmt=s(sN);_ho=r(cmt,"MvpTokenizer"),cmt.forEach(t),uho=r(MS," or "),lN=n(MS,"A",{href:!0});var fmt=s(lN);bho=r(fmt,"MvpTokenizerFast"),fmt.forEach(t),vho=r(MS," (MVP model)"),MS.forEach(t),Fho=i(S),As=n(S,"LI",{});var ES=s(As);Nie=n(ES,"STRONG",{});var mmt=s(Nie);Tho=r(mmt,"nezha"),mmt.forEach(t),Mho=r(ES," \u2014 "),iN=n(ES,"A",{href:!0});var gmt=s(iN);Eho=r(gmt,"BertTokenizer"),gmt.forEach(t),Cho=r(ES," or "),dN=n(ES,"A",{href:!0});var hmt=s(dN);who=r(hmt,"BertTokenizerFast"),hmt.forEach(t),Aho=r(ES," (Nezha model)"),ES.forEach(t),Lho=i(S),Ls=n(S,"LI",{});var CS=s(Ls);qie=n(CS,"STRONG",{});var pmt=s(qie);yho=r(pmt,"nllb"),pmt.forEach(t),xho=r(CS," \u2014 "),cN=n(CS,"A",{href:!0});var _mt=s(cN);$ho=r(_mt,"NllbTokenizer"),_mt.forEach(t),kho=r(CS," or "),fN=n(CS,"A",{href:!0});var umt=s(fN);Sho=r(umt,"NllbTokenizerFast"),umt.forEach(t),Rho=r(CS," (NLLB model)"),CS.forEach(t),Pho=i(S),ys=n(S,"LI",{});var wS=s(ys);jie=n(wS,"STRONG",{});var bmt=s(jie);Bho=r(bmt,"nystromformer"),bmt.forEach(t),Iho=r(wS," \u2014 "),mN=n(wS,"A",{href:!0});var vmt=s(mN);Nho=r(vmt,"AlbertTokenizer"),vmt.forEach(t),qho=r(wS," or "),gN=n(wS,"A",{href:!0});var Fmt=s(gN);jho=r(Fmt,"AlbertTokenizerFast"),Fmt.forEach(t),Dho=r(wS," (Nystr\xF6mformer model)"),wS.forEach(t),Gho=i(S),xs=n(S,"LI",{});var AS=s(xs);Die=n(AS,"STRONG",{});var Tmt=s(Die);Oho=r(Tmt,"openai-gpt"),Tmt.forEach(t),Vho=r(AS," \u2014 "),hN=n(AS,"A",{href:!0});var Mmt=s(hN);Xho=r(Mmt,"OpenAIGPTTokenizer"),Mmt.forEach(t),zho=r(AS," or "),pN=n(AS,"A",{href:!0});var Emt=s(pN);Who=r(Emt,"OpenAIGPTTokenizerFast"),Emt.forEach(t),Qho=r(AS," (OpenAI GPT model)"),AS.forEach(t),Hho=i(S),Mh=n(S,"LI",{});var w9e=s(Mh);Gie=n(w9e,"STRONG",{});var Cmt=s(Gie);Uho=r(Cmt,"opt"),Cmt.forEach(t),Jho=r(w9e," \u2014 "),_N=n(w9e,"A",{href:!0});var wmt=s(_N);Yho=r(wmt,"GPT2Tokenizer"),wmt.forEach(t),Kho=r(w9e," (OPT model)"),w9e.forEach(t),Zho=i(S),$s=n(S,"LI",{});var LS=s($s);Oie=n(LS,"STRONG",{});var Amt=s(Oie);epo=r(Amt,"owlvit"),Amt.forEach(t),opo=r(LS," \u2014 "),uN=n(LS,"A",{href:!0});var Lmt=s(uN);rpo=r(Lmt,"CLIPTokenizer"),Lmt.forEach(t),tpo=r(LS," or "),bN=n(LS,"A",{href:!0});var ymt=s(bN);apo=r(ymt,"CLIPTokenizerFast"),ymt.forEach(t),npo=r(LS," (OWL-ViT model)"),LS.forEach(t),spo=i(S),ks=n(S,"LI",{});var yS=s(ks);Vie=n(yS,"STRONG",{});var xmt=s(Vie);lpo=r(xmt,"pegasus"),xmt.forEach(t),ipo=r(yS," \u2014 "),vN=n(yS,"A",{href:!0});var $mt=s(vN);dpo=r($mt,"PegasusTokenizer"),$mt.forEach(t),cpo=r(yS," or "),FN=n(yS,"A",{href:!0});var kmt=s(FN);fpo=r(kmt,"PegasusTokenizerFast"),kmt.forEach(t),mpo=r(yS," (Pegasus model)"),yS.forEach(t),gpo=i(S),Eh=n(S,"LI",{});var A9e=s(Eh);Xie=n(A9e,"STRONG",{});var Smt=s(Xie);hpo=r(Smt,"perceiver"),Smt.forEach(t),ppo=r(A9e," \u2014 "),TN=n(A9e,"A",{href:!0});var Rmt=s(TN);_po=r(Rmt,"PerceiverTokenizer"),Rmt.forEach(t),upo=r(A9e," (Perceiver model)"),A9e.forEach(t),bpo=i(S),Ch=n(S,"LI",{});var L9e=s(Ch);zie=n(L9e,"STRONG",{});var Pmt=s(zie);vpo=r(Pmt,"phobert"),Pmt.forEach(t),Fpo=r(L9e," \u2014 "),MN=n(L9e,"A",{href:!0});var Bmt=s(MN);Tpo=r(Bmt,"PhobertTokenizer"),Bmt.forEach(t),Mpo=r(L9e," (PhoBERT model)"),L9e.forEach(t),Epo=i(S),wh=n(S,"LI",{});var y9e=s(wh);Wie=n(y9e,"STRONG",{});var Imt=s(Wie);Cpo=r(Imt,"plbart"),Imt.forEach(t),wpo=r(y9e," \u2014 "),EN=n(y9e,"A",{href:!0});var Nmt=s(EN);Apo=r(Nmt,"PLBartTokenizer"),Nmt.forEach(t),Lpo=r(y9e," (PLBart model)"),y9e.forEach(t),ypo=i(S),Ah=n(S,"LI",{});var x9e=s(Ah);Qie=n(x9e,"STRONG",{});var qmt=s(Qie);xpo=r(qmt,"prophetnet"),qmt.forEach(t),$po=r(x9e," \u2014 "),CN=n(x9e,"A",{href:!0});var jmt=s(CN);kpo=r(jmt,"ProphetNetTokenizer"),jmt.forEach(t),Spo=r(x9e," (ProphetNet model)"),x9e.forEach(t),Rpo=i(S),Ss=n(S,"LI",{});var xS=s(Ss);Hie=n(xS,"STRONG",{});var Dmt=s(Hie);Ppo=r(Dmt,"qdqbert"),Dmt.forEach(t),Bpo=r(xS," \u2014 "),wN=n(xS,"A",{href:!0});var Gmt=s(wN);Ipo=r(Gmt,"BertTokenizer"),Gmt.forEach(t),Npo=r(xS," or "),AN=n(xS,"A",{href:!0});var Omt=s(AN);qpo=r(Omt,"BertTokenizerFast"),Omt.forEach(t),jpo=r(xS," (QDQBert model)"),xS.forEach(t),Dpo=i(S),Lh=n(S,"LI",{});var $9e=s(Lh);Uie=n($9e,"STRONG",{});var Vmt=s(Uie);Gpo=r(Vmt,"rag"),Vmt.forEach(t),Opo=r($9e," \u2014 "),LN=n($9e,"A",{href:!0});var Xmt=s(LN);Vpo=r(Xmt,"RagTokenizer"),Xmt.forEach(t),Xpo=r($9e," (RAG model)"),$9e.forEach(t),zpo=i(S),Rs=n(S,"LI",{});var $S=s(Rs);Jie=n($S,"STRONG",{});var zmt=s(Jie);Wpo=r(zmt,"realm"),zmt.forEach(t),Qpo=r($S," \u2014 "),yN=n($S,"A",{href:!0});var Wmt=s(yN);Hpo=r(Wmt,"RealmTokenizer"),Wmt.forEach(t),Upo=r($S," or "),xN=n($S,"A",{href:!0});var Qmt=s(xN);Jpo=r(Qmt,"RealmTokenizerFast"),Qmt.forEach(t),Ypo=r($S," (REALM model)"),$S.forEach(t),Kpo=i(S),Ps=n(S,"LI",{});var kS=s(Ps);Yie=n(kS,"STRONG",{});var Hmt=s(Yie);Zpo=r(Hmt,"reformer"),Hmt.forEach(t),e_o=r(kS," \u2014 "),$N=n(kS,"A",{href:!0});var Umt=s($N);o_o=r(Umt,"ReformerTokenizer"),Umt.forEach(t),r_o=r(kS," or "),kN=n(kS,"A",{href:!0});var Jmt=s(kN);t_o=r(Jmt,"ReformerTokenizerFast"),Jmt.forEach(t),a_o=r(kS," (Reformer model)"),kS.forEach(t),n_o=i(S),Bs=n(S,"LI",{});var SS=s(Bs);Kie=n(SS,"STRONG",{});var Ymt=s(Kie);s_o=r(Ymt,"rembert"),Ymt.forEach(t),l_o=r(SS," \u2014 "),SN=n(SS,"A",{href:!0});var Kmt=s(SN);i_o=r(Kmt,"RemBertTokenizer"),Kmt.forEach(t),d_o=r(SS," or "),RN=n(SS,"A",{href:!0});var Zmt=s(RN);c_o=r(Zmt,"RemBertTokenizerFast"),Zmt.forEach(t),f_o=r(SS," (RemBERT model)"),SS.forEach(t),m_o=i(S),Is=n(S,"LI",{});var RS=s(Is);Zie=n(RS,"STRONG",{});var egt=s(Zie);g_o=r(egt,"retribert"),egt.forEach(t),h_o=r(RS," \u2014 "),PN=n(RS,"A",{href:!0});var ogt=s(PN);p_o=r(ogt,"RetriBertTokenizer"),ogt.forEach(t),__o=r(RS," or "),BN=n(RS,"A",{href:!0});var rgt=s(BN);u_o=r(rgt,"RetriBertTokenizerFast"),rgt.forEach(t),b_o=r(RS," (RetriBERT model)"),RS.forEach(t),v_o=i(S),Ns=n(S,"LI",{});var PS=s(Ns);ede=n(PS,"STRONG",{});var tgt=s(ede);F_o=r(tgt,"roberta"),tgt.forEach(t),T_o=r(PS," \u2014 "),IN=n(PS,"A",{href:!0});var agt=s(IN);M_o=r(agt,"RobertaTokenizer"),agt.forEach(t),E_o=r(PS," or "),NN=n(PS,"A",{href:!0});var ngt=s(NN);C_o=r(ngt,"RobertaTokenizerFast"),ngt.forEach(t),w_o=r(PS," (RoBERTa model)"),PS.forEach(t),A_o=i(S),qs=n(S,"LI",{});var BS=s(qs);ode=n(BS,"STRONG",{});var sgt=s(ode);L_o=r(sgt,"roformer"),sgt.forEach(t),y_o=r(BS," \u2014 "),qN=n(BS,"A",{href:!0});var lgt=s(qN);x_o=r(lgt,"RoFormerTokenizer"),lgt.forEach(t),$_o=r(BS," or "),jN=n(BS,"A",{href:!0});var igt=s(jN);k_o=r(igt,"RoFormerTokenizerFast"),igt.forEach(t),S_o=r(BS," (RoFormer model)"),BS.forEach(t),R_o=i(S),yh=n(S,"LI",{});var k9e=s(yh);rde=n(k9e,"STRONG",{});var dgt=s(rde);P_o=r(dgt,"speech_to_text"),dgt.forEach(t),B_o=r(k9e," \u2014 "),DN=n(k9e,"A",{href:!0});var cgt=s(DN);I_o=r(cgt,"Speech2TextTokenizer"),cgt.forEach(t),N_o=r(k9e," (Speech2Text model)"),k9e.forEach(t),q_o=i(S),xh=n(S,"LI",{});var S9e=s(xh);tde=n(S9e,"STRONG",{});var fgt=s(tde);j_o=r(fgt,"speech_to_text_2"),fgt.forEach(t),D_o=r(S9e," \u2014 "),GN=n(S9e,"A",{href:!0});var mgt=s(GN);G_o=r(mgt,"Speech2Text2Tokenizer"),mgt.forEach(t),O_o=r(S9e," (Speech2Text2 model)"),S9e.forEach(t),V_o=i(S),js=n(S,"LI",{});var IS=s(js);ade=n(IS,"STRONG",{});var ggt=s(ade);X_o=r(ggt,"splinter"),ggt.forEach(t),z_o=r(IS," \u2014 "),ON=n(IS,"A",{href:!0});var hgt=s(ON);W_o=r(hgt,"SplinterTokenizer"),hgt.forEach(t),Q_o=r(IS," or "),VN=n(IS,"A",{href:!0});var pgt=s(VN);H_o=r(pgt,"SplinterTokenizerFast"),pgt.forEach(t),U_o=r(IS," (Splinter model)"),IS.forEach(t),J_o=i(S),Ds=n(S,"LI",{});var NS=s(Ds);nde=n(NS,"STRONG",{});var _gt=s(nde);Y_o=r(_gt,"squeezebert"),_gt.forEach(t),K_o=r(NS," \u2014 "),XN=n(NS,"A",{href:!0});var ugt=s(XN);Z_o=r(ugt,"SqueezeBertTokenizer"),ugt.forEach(t),euo=r(NS," or "),zN=n(NS,"A",{href:!0});var bgt=s(zN);ouo=r(bgt,"SqueezeBertTokenizerFast"),bgt.forEach(t),ruo=r(NS," (SqueezeBERT model)"),NS.forEach(t),tuo=i(S),Gs=n(S,"LI",{});var qS=s(Gs);sde=n(qS,"STRONG",{});var vgt=s(sde);auo=r(vgt,"t5"),vgt.forEach(t),nuo=r(qS," \u2014 "),WN=n(qS,"A",{href:!0});var Fgt=s(WN);suo=r(Fgt,"T5Tokenizer"),Fgt.forEach(t),luo=r(qS," or "),QN=n(qS,"A",{href:!0});var Tgt=s(QN);iuo=r(Tgt,"T5TokenizerFast"),Tgt.forEach(t),duo=r(qS," (T5 model)"),qS.forEach(t),cuo=i(S),$h=n(S,"LI",{});var R9e=s($h);lde=n(R9e,"STRONG",{});var Mgt=s(lde);fuo=r(Mgt,"tapas"),Mgt.forEach(t),muo=r(R9e," \u2014 "),HN=n(R9e,"A",{href:!0});var Egt=s(HN);guo=r(Egt,"TapasTokenizer"),Egt.forEach(t),huo=r(R9e," (TAPAS model)"),R9e.forEach(t),puo=i(S),kh=n(S,"LI",{});var P9e=s(kh);ide=n(P9e,"STRONG",{});var Cgt=s(ide);_uo=r(Cgt,"tapex"),Cgt.forEach(t),uuo=r(P9e," \u2014 "),UN=n(P9e,"A",{href:!0});var wgt=s(UN);buo=r(wgt,"TapexTokenizer"),wgt.forEach(t),vuo=r(P9e," (TAPEX model)"),P9e.forEach(t),Fuo=i(S),Sh=n(S,"LI",{});var B9e=s(Sh);dde=n(B9e,"STRONG",{});var Agt=s(dde);Tuo=r(Agt,"transfo-xl"),Agt.forEach(t),Muo=r(B9e," \u2014 "),JN=n(B9e,"A",{href:!0});var Lgt=s(JN);Euo=r(Lgt,"TransfoXLTokenizer"),Lgt.forEach(t),Cuo=r(B9e," (Transformer-XL model)"),B9e.forEach(t),wuo=i(S),Os=n(S,"LI",{});var jS=s(Os);cde=n(jS,"STRONG",{});var ygt=s(cde);Auo=r(ygt,"vilt"),ygt.forEach(t),Luo=r(jS," \u2014 "),YN=n(jS,"A",{href:!0});var xgt=s(YN);yuo=r(xgt,"BertTokenizer"),xgt.forEach(t),xuo=r(jS," or "),KN=n(jS,"A",{href:!0});var $gt=s(KN);$uo=r($gt,"BertTokenizerFast"),$gt.forEach(t),kuo=r(jS," (ViLT model)"),jS.forEach(t),Suo=i(S),Vs=n(S,"LI",{});var DS=s(Vs);fde=n(DS,"STRONG",{});var kgt=s(fde);Ruo=r(kgt,"visual_bert"),kgt.forEach(t),Puo=r(DS," \u2014 "),ZN=n(DS,"A",{href:!0});var Sgt=s(ZN);Buo=r(Sgt,"BertTokenizer"),Sgt.forEach(t),Iuo=r(DS," or "),eq=n(DS,"A",{href:!0});var Rgt=s(eq);Nuo=r(Rgt,"BertTokenizerFast"),Rgt.forEach(t),quo=r(DS," (VisualBERT model)"),DS.forEach(t),juo=i(S),Rh=n(S,"LI",{});var I9e=s(Rh);mde=n(I9e,"STRONG",{});var Pgt=s(mde);Duo=r(Pgt,"wav2vec2"),Pgt.forEach(t),Guo=r(I9e," \u2014 "),oq=n(I9e,"A",{href:!0});var Bgt=s(oq);Ouo=r(Bgt,"Wav2Vec2CTCTokenizer"),Bgt.forEach(t),Vuo=r(I9e," (Wav2Vec2 model)"),I9e.forEach(t),Xuo=i(S),Ph=n(S,"LI",{});var N9e=s(Ph);gde=n(N9e,"STRONG",{});var Igt=s(gde);zuo=r(Igt,"wav2vec2-conformer"),Igt.forEach(t),Wuo=r(N9e," \u2014 "),rq=n(N9e,"A",{href:!0});var Ngt=s(rq);Quo=r(Ngt,"Wav2Vec2CTCTokenizer"),Ngt.forEach(t),Huo=r(N9e," (Wav2Vec2-Conformer model)"),N9e.forEach(t),Uuo=i(S),Bh=n(S,"LI",{});var q9e=s(Bh);hde=n(q9e,"STRONG",{});var qgt=s(hde);Juo=r(qgt,"wav2vec2_phoneme"),qgt.forEach(t),Yuo=r(q9e," \u2014 "),tq=n(q9e,"A",{href:!0});var jgt=s(tq);Kuo=r(jgt,"Wav2Vec2PhonemeCTCTokenizer"),jgt.forEach(t),Zuo=r(q9e," (Wav2Vec2Phoneme model)"),q9e.forEach(t),e2o=i(S),Xs=n(S,"LI",{});var GS=s(Xs);pde=n(GS,"STRONG",{});var Dgt=s(pde);o2o=r(Dgt,"xglm"),Dgt.forEach(t),r2o=r(GS," \u2014 "),aq=n(GS,"A",{href:!0});var Ggt=s(aq);t2o=r(Ggt,"XGLMTokenizer"),Ggt.forEach(t),a2o=r(GS," or "),nq=n(GS,"A",{href:!0});var Ogt=s(nq);n2o=r(Ogt,"XGLMTokenizerFast"),Ogt.forEach(t),s2o=r(GS," (XGLM model)"),GS.forEach(t),l2o=i(S),Ih=n(S,"LI",{});var j9e=s(Ih);_de=n(j9e,"STRONG",{});var Vgt=s(_de);i2o=r(Vgt,"xlm"),Vgt.forEach(t),d2o=r(j9e," \u2014 "),sq=n(j9e,"A",{href:!0});var Xgt=s(sq);c2o=r(Xgt,"XLMTokenizer"),Xgt.forEach(t),f2o=r(j9e," (XLM model)"),j9e.forEach(t),m2o=i(S),Nh=n(S,"LI",{});var D9e=s(Nh);ude=n(D9e,"STRONG",{});var zgt=s(ude);g2o=r(zgt,"xlm-prophetnet"),zgt.forEach(t),h2o=r(D9e," \u2014 "),lq=n(D9e,"A",{href:!0});var Wgt=s(lq);p2o=r(Wgt,"XLMProphetNetTokenizer"),Wgt.forEach(t),_2o=r(D9e," (XLM-ProphetNet model)"),D9e.forEach(t),u2o=i(S),zs=n(S,"LI",{});var OS=s(zs);bde=n(OS,"STRONG",{});var Qgt=s(bde);b2o=r(Qgt,"xlm-roberta"),Qgt.forEach(t),v2o=r(OS," \u2014 "),iq=n(OS,"A",{href:!0});var Hgt=s(iq);F2o=r(Hgt,"XLMRobertaTokenizer"),Hgt.forEach(t),T2o=r(OS," or "),dq=n(OS,"A",{href:!0});var Ugt=s(dq);M2o=r(Ugt,"XLMRobertaTokenizerFast"),Ugt.forEach(t),E2o=r(OS," (XLM-RoBERTa model)"),OS.forEach(t),C2o=i(S),Ws=n(S,"LI",{});var VS=s(Ws);vde=n(VS,"STRONG",{});var Jgt=s(vde);w2o=r(Jgt,"xlm-roberta-xl"),Jgt.forEach(t),A2o=r(VS," \u2014 "),cq=n(VS,"A",{href:!0});var Ygt=s(cq);L2o=r(Ygt,"RobertaTokenizer"),Ygt.forEach(t),y2o=r(VS," or "),fq=n(VS,"A",{href:!0});var Kgt=s(fq);x2o=r(Kgt,"RobertaTokenizerFast"),Kgt.forEach(t),$2o=r(VS," (XLM-RoBERTa-XL model)"),VS.forEach(t),k2o=i(S),Qs=n(S,"LI",{});var XS=s(Qs);Fde=n(XS,"STRONG",{});var Zgt=s(Fde);S2o=r(Zgt,"xlnet"),Zgt.forEach(t),R2o=r(XS," \u2014 "),mq=n(XS,"A",{href:!0});var eht=s(mq);P2o=r(eht,"XLNetTokenizer"),eht.forEach(t),B2o=r(XS," or "),gq=n(XS,"A",{href:!0});var oht=s(gq);I2o=r(oht,"XLNetTokenizerFast"),oht.forEach(t),N2o=r(XS," (XLNet model)"),XS.forEach(t),q2o=i(S),Hs=n(S,"LI",{});var zS=s(Hs);Tde=n(zS,"STRONG",{});var rht=s(Tde);j2o=r(rht,"yoso"),rht.forEach(t),D2o=r(zS," \u2014 "),hq=n(zS,"A",{href:!0});var tht=s(hq);G2o=r(tht,"AlbertTokenizer"),tht.forEach(t),O2o=r(zS," or "),pq=n(zS,"A",{href:!0});var aht=s(pq);V2o=r(aht,"AlbertTokenizerFast"),aht.forEach(t),X2o=r(zS," (YOSO model)"),zS.forEach(t),S.forEach(t),z2o=i(ol),T(qh.$$.fragment,ol),ol.forEach(t),W2o=i(el),jh=n(el,"DIV",{class:!0});var fQe=s(jh);T(kL.$$.fragment,fQe),Q2o=i(fQe),Mde=n(fQe,"P",{});var nht=s(Mde);H2o=r(nht,"Register a new tokenizer in this mapping."),nht.forEach(t),fQe.forEach(t),el.forEach(t),cze=i(f),Di=n(f,"H2",{class:!0});var mQe=s(Di);Dh=n(mQe,"A",{id:!0,class:!0,href:!0});var sht=s(Dh);Ede=n(sht,"SPAN",{});var lht=s(Ede);T(SL.$$.fragment,lht),lht.forEach(t),sht.forEach(t),U2o=i(mQe),Cde=n(mQe,"SPAN",{});var iht=s(Cde);J2o=r(iht,"AutoFeatureExtractor"),iht.forEach(t),mQe.forEach(t),fze=i(f),xo=n(f,"DIV",{class:!0});var rl=s(xo);T(RL.$$.fragment,rl),Y2o=i(rl),PL=n(rl,"P",{});var gQe=s(PL);K2o=r(gQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_q=n(gQe,"A",{href:!0});var dht=s(_q);Z2o=r(dht,"AutoFeatureExtractor.from_pretrained()"),dht.forEach(t),e1o=r(gQe," class method."),gQe.forEach(t),o1o=i(rl),BL=n(rl,"P",{});var hQe=s(BL);r1o=r(hQe,"This class cannot be instantiated directly using "),wde=n(hQe,"CODE",{});var cht=s(wde);t1o=r(cht,"__init__()"),cht.forEach(t),a1o=r(hQe," (throws an error)."),hQe.forEach(t),n1o=i(rl),Ue=n(rl,"DIV",{class:!0});var na=s(Ue);T(IL.$$.fragment,na),s1o=i(na),Ade=n(na,"P",{});var fht=s(Ade);l1o=r(fht,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),fht.forEach(t),i1o=i(na),Ba=n(na,"P",{});var Tw=s(Ba);d1o=r(Tw,"The feature extractor class to instantiate is selected based on the "),Lde=n(Tw,"CODE",{});var mht=s(Lde);c1o=r(mht,"model_type"),mht.forEach(t),f1o=r(Tw,` property of the config object
(either passed as an argument or loaded from `),yde=n(Tw,"CODE",{});var ght=s(yde);m1o=r(ght,"pretrained_model_name_or_path"),ght.forEach(t),g1o=r(Tw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),xde=n(Tw,"CODE",{});var hht=s(xde);h1o=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),p1o=r(Tw,":"),Tw.forEach(t),_1o=i(na),J=n(na,"UL",{});var K=s(J);Gh=n(K,"LI",{});var G9e=s(Gh);$de=n(G9e,"STRONG",{});var pht=s($de);u1o=r(pht,"beit"),pht.forEach(t),b1o=r(G9e," \u2014 "),uq=n(G9e,"A",{href:!0});var _ht=s(uq);v1o=r(_ht,"BeitFeatureExtractor"),_ht.forEach(t),F1o=r(G9e," (BEiT model)"),G9e.forEach(t),T1o=i(K),Oh=n(K,"LI",{});var O9e=s(Oh);kde=n(O9e,"STRONG",{});var uht=s(kde);M1o=r(uht,"clip"),uht.forEach(t),E1o=r(O9e," \u2014 "),bq=n(O9e,"A",{href:!0});var bht=s(bq);C1o=r(bht,"CLIPFeatureExtractor"),bht.forEach(t),w1o=r(O9e," (CLIP model)"),O9e.forEach(t),A1o=i(K),Vh=n(K,"LI",{});var V9e=s(Vh);Sde=n(V9e,"STRONG",{});var vht=s(Sde);L1o=r(vht,"convnext"),vht.forEach(t),y1o=r(V9e," \u2014 "),vq=n(V9e,"A",{href:!0});var Fht=s(vq);x1o=r(Fht,"ConvNextFeatureExtractor"),Fht.forEach(t),$1o=r(V9e," (ConvNeXT model)"),V9e.forEach(t),k1o=i(K),Xh=n(K,"LI",{});var X9e=s(Xh);Rde=n(X9e,"STRONG",{});var Tht=s(Rde);S1o=r(Tht,"cvt"),Tht.forEach(t),R1o=r(X9e," \u2014 "),Fq=n(X9e,"A",{href:!0});var Mht=s(Fq);P1o=r(Mht,"ConvNextFeatureExtractor"),Mht.forEach(t),B1o=r(X9e," (CvT model)"),X9e.forEach(t),I1o=i(K),zh=n(K,"LI",{});var z9e=s(zh);Pde=n(z9e,"STRONG",{});var Eht=s(Pde);N1o=r(Eht,"data2vec-audio"),Eht.forEach(t),q1o=r(z9e," \u2014 "),Tq=n(z9e,"A",{href:!0});var Cht=s(Tq);j1o=r(Cht,"Wav2Vec2FeatureExtractor"),Cht.forEach(t),D1o=r(z9e," (Data2VecAudio model)"),z9e.forEach(t),G1o=i(K),Wh=n(K,"LI",{});var W9e=s(Wh);Bde=n(W9e,"STRONG",{});var wht=s(Bde);O1o=r(wht,"data2vec-vision"),wht.forEach(t),V1o=r(W9e," \u2014 "),Mq=n(W9e,"A",{href:!0});var Aht=s(Mq);X1o=r(Aht,"BeitFeatureExtractor"),Aht.forEach(t),z1o=r(W9e," (Data2VecVision model)"),W9e.forEach(t),W1o=i(K),Qh=n(K,"LI",{});var Q9e=s(Qh);Ide=n(Q9e,"STRONG",{});var Lht=s(Ide);Q1o=r(Lht,"deit"),Lht.forEach(t),H1o=r(Q9e," \u2014 "),Eq=n(Q9e,"A",{href:!0});var yht=s(Eq);U1o=r(yht,"DeiTFeatureExtractor"),yht.forEach(t),J1o=r(Q9e," (DeiT model)"),Q9e.forEach(t),Y1o=i(K),Hh=n(K,"LI",{});var H9e=s(Hh);Nde=n(H9e,"STRONG",{});var xht=s(Nde);K1o=r(xht,"detr"),xht.forEach(t),Z1o=r(H9e," \u2014 "),Cq=n(H9e,"A",{href:!0});var $ht=s(Cq);ebo=r($ht,"DetrFeatureExtractor"),$ht.forEach(t),obo=r(H9e," (DETR model)"),H9e.forEach(t),rbo=i(K),Uh=n(K,"LI",{});var U9e=s(Uh);qde=n(U9e,"STRONG",{});var kht=s(qde);tbo=r(kht,"dpt"),kht.forEach(t),abo=r(U9e," \u2014 "),wq=n(U9e,"A",{href:!0});var Sht=s(wq);nbo=r(Sht,"DPTFeatureExtractor"),Sht.forEach(t),sbo=r(U9e," (DPT model)"),U9e.forEach(t),lbo=i(K),Jh=n(K,"LI",{});var J9e=s(Jh);jde=n(J9e,"STRONG",{});var Rht=s(jde);ibo=r(Rht,"flava"),Rht.forEach(t),dbo=r(J9e," \u2014 "),Aq=n(J9e,"A",{href:!0});var Pht=s(Aq);cbo=r(Pht,"FlavaFeatureExtractor"),Pht.forEach(t),fbo=r(J9e," (FLAVA model)"),J9e.forEach(t),mbo=i(K),Yh=n(K,"LI",{});var Y9e=s(Yh);Dde=n(Y9e,"STRONG",{});var Bht=s(Dde);gbo=r(Bht,"glpn"),Bht.forEach(t),hbo=r(Y9e," \u2014 "),Lq=n(Y9e,"A",{href:!0});var Iht=s(Lq);pbo=r(Iht,"GLPNFeatureExtractor"),Iht.forEach(t),_bo=r(Y9e," (GLPN model)"),Y9e.forEach(t),ubo=i(K),Kh=n(K,"LI",{});var K9e=s(Kh);Gde=n(K9e,"STRONG",{});var Nht=s(Gde);bbo=r(Nht,"groupvit"),Nht.forEach(t),vbo=r(K9e," \u2014 "),yq=n(K9e,"A",{href:!0});var qht=s(yq);Fbo=r(qht,"CLIPFeatureExtractor"),qht.forEach(t),Tbo=r(K9e," (GroupViT model)"),K9e.forEach(t),Mbo=i(K),Zh=n(K,"LI",{});var Z9e=s(Zh);Ode=n(Z9e,"STRONG",{});var jht=s(Ode);Ebo=r(jht,"hubert"),jht.forEach(t),Cbo=r(Z9e," \u2014 "),xq=n(Z9e,"A",{href:!0});var Dht=s(xq);wbo=r(Dht,"Wav2Vec2FeatureExtractor"),Dht.forEach(t),Abo=r(Z9e," (Hubert model)"),Z9e.forEach(t),Lbo=i(K),ep=n(K,"LI",{});var exe=s(ep);Vde=n(exe,"STRONG",{});var Ght=s(Vde);ybo=r(Ght,"imagegpt"),Ght.forEach(t),xbo=r(exe," \u2014 "),$q=n(exe,"A",{href:!0});var Oht=s($q);$bo=r(Oht,"ImageGPTFeatureExtractor"),Oht.forEach(t),kbo=r(exe," (ImageGPT model)"),exe.forEach(t),Sbo=i(K),op=n(K,"LI",{});var oxe=s(op);Xde=n(oxe,"STRONG",{});var Vht=s(Xde);Rbo=r(Vht,"layoutlmv2"),Vht.forEach(t),Pbo=r(oxe," \u2014 "),kq=n(oxe,"A",{href:!0});var Xht=s(kq);Bbo=r(Xht,"LayoutLMv2FeatureExtractor"),Xht.forEach(t),Ibo=r(oxe," (LayoutLMv2 model)"),oxe.forEach(t),Nbo=i(K),rp=n(K,"LI",{});var rxe=s(rp);zde=n(rxe,"STRONG",{});var zht=s(zde);qbo=r(zht,"layoutlmv3"),zht.forEach(t),jbo=r(rxe," \u2014 "),Sq=n(rxe,"A",{href:!0});var Wht=s(Sq);Dbo=r(Wht,"LayoutLMv3FeatureExtractor"),Wht.forEach(t),Gbo=r(rxe," (LayoutLMv3 model)"),rxe.forEach(t),Obo=i(K),tp=n(K,"LI",{});var txe=s(tp);Wde=n(txe,"STRONG",{});var Qht=s(Wde);Vbo=r(Qht,"levit"),Qht.forEach(t),Xbo=r(txe," \u2014 "),Rq=n(txe,"A",{href:!0});var Hht=s(Rq);zbo=r(Hht,"LevitFeatureExtractor"),Hht.forEach(t),Wbo=r(txe," (LeViT model)"),txe.forEach(t),Qbo=i(K),ap=n(K,"LI",{});var axe=s(ap);Qde=n(axe,"STRONG",{});var Uht=s(Qde);Hbo=r(Uht,"maskformer"),Uht.forEach(t),Ubo=r(axe," \u2014 "),Pq=n(axe,"A",{href:!0});var Jht=s(Pq);Jbo=r(Jht,"MaskFormerFeatureExtractor"),Jht.forEach(t),Ybo=r(axe," (MaskFormer model)"),axe.forEach(t),Kbo=i(K),np=n(K,"LI",{});var nxe=s(np);Hde=n(nxe,"STRONG",{});var Yht=s(Hde);Zbo=r(Yht,"mctct"),Yht.forEach(t),evo=r(nxe," \u2014 "),Bq=n(nxe,"A",{href:!0});var Kht=s(Bq);ovo=r(Kht,"MCTCTFeatureExtractor"),Kht.forEach(t),rvo=r(nxe," (M-CTC-T model)"),nxe.forEach(t),tvo=i(K),sp=n(K,"LI",{});var sxe=s(sp);Ude=n(sxe,"STRONG",{});var Zht=s(Ude);avo=r(Zht,"mobilevit"),Zht.forEach(t),nvo=r(sxe," \u2014 "),Iq=n(sxe,"A",{href:!0});var ept=s(Iq);svo=r(ept,"MobileViTFeatureExtractor"),ept.forEach(t),lvo=r(sxe," (MobileViT model)"),sxe.forEach(t),ivo=i(K),lp=n(K,"LI",{});var lxe=s(lp);Jde=n(lxe,"STRONG",{});var opt=s(Jde);dvo=r(opt,"owlvit"),opt.forEach(t),cvo=r(lxe," \u2014 "),Nq=n(lxe,"A",{href:!0});var rpt=s(Nq);fvo=r(rpt,"OwlViTFeatureExtractor"),rpt.forEach(t),mvo=r(lxe," (OWL-ViT model)"),lxe.forEach(t),gvo=i(K),ip=n(K,"LI",{});var ixe=s(ip);Yde=n(ixe,"STRONG",{});var tpt=s(Yde);hvo=r(tpt,"perceiver"),tpt.forEach(t),pvo=r(ixe," \u2014 "),qq=n(ixe,"A",{href:!0});var apt=s(qq);_vo=r(apt,"PerceiverFeatureExtractor"),apt.forEach(t),uvo=r(ixe," (Perceiver model)"),ixe.forEach(t),bvo=i(K),dp=n(K,"LI",{});var dxe=s(dp);Kde=n(dxe,"STRONG",{});var npt=s(Kde);vvo=r(npt,"poolformer"),npt.forEach(t),Fvo=r(dxe," \u2014 "),jq=n(dxe,"A",{href:!0});var spt=s(jq);Tvo=r(spt,"PoolFormerFeatureExtractor"),spt.forEach(t),Mvo=r(dxe," (PoolFormer model)"),dxe.forEach(t),Evo=i(K),cp=n(K,"LI",{});var cxe=s(cp);Zde=n(cxe,"STRONG",{});var lpt=s(Zde);Cvo=r(lpt,"regnet"),lpt.forEach(t),wvo=r(cxe," \u2014 "),Dq=n(cxe,"A",{href:!0});var ipt=s(Dq);Avo=r(ipt,"ConvNextFeatureExtractor"),ipt.forEach(t),Lvo=r(cxe," (RegNet model)"),cxe.forEach(t),yvo=i(K),fp=n(K,"LI",{});var fxe=s(fp);ece=n(fxe,"STRONG",{});var dpt=s(ece);xvo=r(dpt,"resnet"),dpt.forEach(t),$vo=r(fxe," \u2014 "),Gq=n(fxe,"A",{href:!0});var cpt=s(Gq);kvo=r(cpt,"ConvNextFeatureExtractor"),cpt.forEach(t),Svo=r(fxe," (ResNet model)"),fxe.forEach(t),Rvo=i(K),mp=n(K,"LI",{});var mxe=s(mp);oce=n(mxe,"STRONG",{});var fpt=s(oce);Pvo=r(fpt,"segformer"),fpt.forEach(t),Bvo=r(mxe," \u2014 "),Oq=n(mxe,"A",{href:!0});var mpt=s(Oq);Ivo=r(mpt,"SegformerFeatureExtractor"),mpt.forEach(t),Nvo=r(mxe," (SegFormer model)"),mxe.forEach(t),qvo=i(K),gp=n(K,"LI",{});var gxe=s(gp);rce=n(gxe,"STRONG",{});var gpt=s(rce);jvo=r(gpt,"speech_to_text"),gpt.forEach(t),Dvo=r(gxe," \u2014 "),Vq=n(gxe,"A",{href:!0});var hpt=s(Vq);Gvo=r(hpt,"Speech2TextFeatureExtractor"),hpt.forEach(t),Ovo=r(gxe," (Speech2Text model)"),gxe.forEach(t),Vvo=i(K),hp=n(K,"LI",{});var hxe=s(hp);tce=n(hxe,"STRONG",{});var ppt=s(tce);Xvo=r(ppt,"swin"),ppt.forEach(t),zvo=r(hxe," \u2014 "),Xq=n(hxe,"A",{href:!0});var _pt=s(Xq);Wvo=r(_pt,"ViTFeatureExtractor"),_pt.forEach(t),Qvo=r(hxe," (Swin Transformer model)"),hxe.forEach(t),Hvo=i(K),pp=n(K,"LI",{});var pxe=s(pp);ace=n(pxe,"STRONG",{});var upt=s(ace);Uvo=r(upt,"van"),upt.forEach(t),Jvo=r(pxe," \u2014 "),zq=n(pxe,"A",{href:!0});var bpt=s(zq);Yvo=r(bpt,"ConvNextFeatureExtractor"),bpt.forEach(t),Kvo=r(pxe," (VAN model)"),pxe.forEach(t),Zvo=i(K),_p=n(K,"LI",{});var _xe=s(_p);nce=n(_xe,"STRONG",{});var vpt=s(nce);eFo=r(vpt,"vilt"),vpt.forEach(t),oFo=r(_xe," \u2014 "),Wq=n(_xe,"A",{href:!0});var Fpt=s(Wq);rFo=r(Fpt,"ViltFeatureExtractor"),Fpt.forEach(t),tFo=r(_xe," (ViLT model)"),_xe.forEach(t),aFo=i(K),up=n(K,"LI",{});var uxe=s(up);sce=n(uxe,"STRONG",{});var Tpt=s(sce);nFo=r(Tpt,"vit"),Tpt.forEach(t),sFo=r(uxe," \u2014 "),Qq=n(uxe,"A",{href:!0});var Mpt=s(Qq);lFo=r(Mpt,"ViTFeatureExtractor"),Mpt.forEach(t),iFo=r(uxe," (ViT model)"),uxe.forEach(t),dFo=i(K),bp=n(K,"LI",{});var bxe=s(bp);lce=n(bxe,"STRONG",{});var Ept=s(lce);cFo=r(Ept,"vit_mae"),Ept.forEach(t),fFo=r(bxe," \u2014 "),Hq=n(bxe,"A",{href:!0});var Cpt=s(Hq);mFo=r(Cpt,"ViTFeatureExtractor"),Cpt.forEach(t),gFo=r(bxe," (ViTMAE model)"),bxe.forEach(t),hFo=i(K),vp=n(K,"LI",{});var vxe=s(vp);ice=n(vxe,"STRONG",{});var wpt=s(ice);pFo=r(wpt,"wav2vec2"),wpt.forEach(t),_Fo=r(vxe," \u2014 "),Uq=n(vxe,"A",{href:!0});var Apt=s(Uq);uFo=r(Apt,"Wav2Vec2FeatureExtractor"),Apt.forEach(t),bFo=r(vxe," (Wav2Vec2 model)"),vxe.forEach(t),vFo=i(K),Fp=n(K,"LI",{});var Fxe=s(Fp);dce=n(Fxe,"STRONG",{});var Lpt=s(dce);FFo=r(Lpt,"wav2vec2-conformer"),Lpt.forEach(t),TFo=r(Fxe," \u2014 "),Jq=n(Fxe,"A",{href:!0});var ypt=s(Jq);MFo=r(ypt,"Wav2Vec2FeatureExtractor"),ypt.forEach(t),EFo=r(Fxe," (Wav2Vec2-Conformer model)"),Fxe.forEach(t),CFo=i(K),Tp=n(K,"LI",{});var Txe=s(Tp);cce=n(Txe,"STRONG",{});var xpt=s(cce);wFo=r(xpt,"yolos"),xpt.forEach(t),AFo=r(Txe," \u2014 "),Yq=n(Txe,"A",{href:!0});var $pt=s(Yq);LFo=r($pt,"YolosFeatureExtractor"),$pt.forEach(t),yFo=r(Txe," (YOLOS model)"),Txe.forEach(t),K.forEach(t),xFo=i(na),T(Mp.$$.fragment,na),$Fo=i(na),T(Ep.$$.fragment,na),na.forEach(t),kFo=i(rl),Cp=n(rl,"DIV",{class:!0});var pQe=s(Cp);T(NL.$$.fragment,pQe),SFo=i(pQe),fce=n(pQe,"P",{});var kpt=s(fce);RFo=r(kpt,"Register a new feature extractor for this class."),kpt.forEach(t),pQe.forEach(t),rl.forEach(t),mze=i(f),Gi=n(f,"H2",{class:!0});var _Qe=s(Gi);wp=n(_Qe,"A",{id:!0,class:!0,href:!0});var Spt=s(wp);mce=n(Spt,"SPAN",{});var Rpt=s(mce);T(qL.$$.fragment,Rpt),Rpt.forEach(t),Spt.forEach(t),PFo=i(_Qe),gce=n(_Qe,"SPAN",{});var Ppt=s(gce);BFo=r(Ppt,"AutoProcessor"),Ppt.forEach(t),_Qe.forEach(t),gze=i(f),$o=n(f,"DIV",{class:!0});var tl=s($o);T(jL.$$.fragment,tl),IFo=i(tl),DL=n(tl,"P",{});var uQe=s(DL);NFo=r(uQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Kq=n(uQe,"A",{href:!0});var Bpt=s(Kq);qFo=r(Bpt,"AutoProcessor.from_pretrained()"),Bpt.forEach(t),jFo=r(uQe," class method."),uQe.forEach(t),DFo=i(tl),GL=n(tl,"P",{});var bQe=s(GL);GFo=r(bQe,"This class cannot be instantiated directly using "),hce=n(bQe,"CODE",{});var Ipt=s(hce);OFo=r(Ipt,"__init__()"),Ipt.forEach(t),VFo=r(bQe," (throws an error)."),bQe.forEach(t),XFo=i(tl),Je=n(tl,"DIV",{class:!0});var sa=s(Je);T(OL.$$.fragment,sa),zFo=i(sa),pce=n(sa,"P",{});var Npt=s(pce);WFo=r(Npt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Npt.forEach(t),QFo=i(sa),Oi=n(sa,"P",{});var lte=s(Oi);HFo=r(lte,"The processor class to instantiate is selected based on the "),_ce=n(lte,"CODE",{});var qpt=s(_ce);UFo=r(qpt,"model_type"),qpt.forEach(t),JFo=r(lte,` property of the config object (either
passed as an argument or loaded from `),uce=n(lte,"CODE",{});var jpt=s(uce);YFo=r(jpt,"pretrained_model_name_or_path"),jpt.forEach(t),KFo=r(lte," if possible):"),lte.forEach(t),ZFo=i(sa),fe=n(sa,"UL",{});var _e=s(fe);Ap=n(_e,"LI",{});var Mxe=s(Ap);bce=n(Mxe,"STRONG",{});var Dpt=s(bce);e6o=r(Dpt,"clip"),Dpt.forEach(t),o6o=r(Mxe," \u2014 "),Zq=n(Mxe,"A",{href:!0});var Gpt=s(Zq);r6o=r(Gpt,"CLIPProcessor"),Gpt.forEach(t),t6o=r(Mxe," (CLIP model)"),Mxe.forEach(t),a6o=i(_e),Lp=n(_e,"LI",{});var Exe=s(Lp);vce=n(Exe,"STRONG",{});var Opt=s(vce);n6o=r(Opt,"flava"),Opt.forEach(t),s6o=r(Exe," \u2014 "),ej=n(Exe,"A",{href:!0});var Vpt=s(ej);l6o=r(Vpt,"FlavaProcessor"),Vpt.forEach(t),i6o=r(Exe," (FLAVA model)"),Exe.forEach(t),d6o=i(_e),yp=n(_e,"LI",{});var Cxe=s(yp);Fce=n(Cxe,"STRONG",{});var Xpt=s(Fce);c6o=r(Xpt,"groupvit"),Xpt.forEach(t),f6o=r(Cxe," \u2014 "),oj=n(Cxe,"A",{href:!0});var zpt=s(oj);m6o=r(zpt,"CLIPProcessor"),zpt.forEach(t),g6o=r(Cxe," (GroupViT model)"),Cxe.forEach(t),h6o=i(_e),xp=n(_e,"LI",{});var wxe=s(xp);Tce=n(wxe,"STRONG",{});var Wpt=s(Tce);p6o=r(Wpt,"layoutlmv2"),Wpt.forEach(t),_6o=r(wxe," \u2014 "),rj=n(wxe,"A",{href:!0});var Qpt=s(rj);u6o=r(Qpt,"LayoutLMv2Processor"),Qpt.forEach(t),b6o=r(wxe," (LayoutLMv2 model)"),wxe.forEach(t),v6o=i(_e),$p=n(_e,"LI",{});var Axe=s($p);Mce=n(Axe,"STRONG",{});var Hpt=s(Mce);F6o=r(Hpt,"layoutlmv3"),Hpt.forEach(t),T6o=r(Axe," \u2014 "),tj=n(Axe,"A",{href:!0});var Upt=s(tj);M6o=r(Upt,"LayoutLMv3Processor"),Upt.forEach(t),E6o=r(Axe," (LayoutLMv3 model)"),Axe.forEach(t),C6o=i(_e),kp=n(_e,"LI",{});var Lxe=s(kp);Ece=n(Lxe,"STRONG",{});var Jpt=s(Ece);w6o=r(Jpt,"layoutxlm"),Jpt.forEach(t),A6o=r(Lxe," \u2014 "),aj=n(Lxe,"A",{href:!0});var Ypt=s(aj);L6o=r(Ypt,"LayoutXLMProcessor"),Ypt.forEach(t),y6o=r(Lxe," (LayoutXLM model)"),Lxe.forEach(t),x6o=i(_e),Sp=n(_e,"LI",{});var yxe=s(Sp);Cce=n(yxe,"STRONG",{});var Kpt=s(Cce);$6o=r(Kpt,"owlvit"),Kpt.forEach(t),k6o=r(yxe," \u2014 "),nj=n(yxe,"A",{href:!0});var Zpt=s(nj);S6o=r(Zpt,"OwlViTProcessor"),Zpt.forEach(t),R6o=r(yxe," (OWL-ViT model)"),yxe.forEach(t),P6o=i(_e),Rp=n(_e,"LI",{});var xxe=s(Rp);wce=n(xxe,"STRONG",{});var e_t=s(wce);B6o=r(e_t,"sew"),e_t.forEach(t),I6o=r(xxe," \u2014 "),sj=n(xxe,"A",{href:!0});var o_t=s(sj);N6o=r(o_t,"Wav2Vec2Processor"),o_t.forEach(t),q6o=r(xxe," (SEW model)"),xxe.forEach(t),j6o=i(_e),Pp=n(_e,"LI",{});var $xe=s(Pp);Ace=n($xe,"STRONG",{});var r_t=s(Ace);D6o=r(r_t,"sew-d"),r_t.forEach(t),G6o=r($xe," \u2014 "),lj=n($xe,"A",{href:!0});var t_t=s(lj);O6o=r(t_t,"Wav2Vec2Processor"),t_t.forEach(t),V6o=r($xe," (SEW-D model)"),$xe.forEach(t),X6o=i(_e),Bp=n(_e,"LI",{});var kxe=s(Bp);Lce=n(kxe,"STRONG",{});var a_t=s(Lce);z6o=r(a_t,"speech_to_text"),a_t.forEach(t),W6o=r(kxe," \u2014 "),ij=n(kxe,"A",{href:!0});var n_t=s(ij);Q6o=r(n_t,"Speech2TextProcessor"),n_t.forEach(t),H6o=r(kxe," (Speech2Text model)"),kxe.forEach(t),U6o=i(_e),Ip=n(_e,"LI",{});var Sxe=s(Ip);yce=n(Sxe,"STRONG",{});var s_t=s(yce);J6o=r(s_t,"speech_to_text_2"),s_t.forEach(t),Y6o=r(Sxe," \u2014 "),dj=n(Sxe,"A",{href:!0});var l_t=s(dj);K6o=r(l_t,"Speech2Text2Processor"),l_t.forEach(t),Z6o=r(Sxe," (Speech2Text2 model)"),Sxe.forEach(t),eTo=i(_e),Np=n(_e,"LI",{});var Rxe=s(Np);xce=n(Rxe,"STRONG",{});var i_t=s(xce);oTo=r(i_t,"trocr"),i_t.forEach(t),rTo=r(Rxe," \u2014 "),cj=n(Rxe,"A",{href:!0});var d_t=s(cj);tTo=r(d_t,"TrOCRProcessor"),d_t.forEach(t),aTo=r(Rxe," (TrOCR model)"),Rxe.forEach(t),nTo=i(_e),qp=n(_e,"LI",{});var Pxe=s(qp);$ce=n(Pxe,"STRONG",{});var c_t=s($ce);sTo=r(c_t,"unispeech"),c_t.forEach(t),lTo=r(Pxe," \u2014 "),fj=n(Pxe,"A",{href:!0});var f_t=s(fj);iTo=r(f_t,"Wav2Vec2Processor"),f_t.forEach(t),dTo=r(Pxe," (UniSpeech model)"),Pxe.forEach(t),cTo=i(_e),jp=n(_e,"LI",{});var Bxe=s(jp);kce=n(Bxe,"STRONG",{});var m_t=s(kce);fTo=r(m_t,"unispeech-sat"),m_t.forEach(t),mTo=r(Bxe," \u2014 "),mj=n(Bxe,"A",{href:!0});var g_t=s(mj);gTo=r(g_t,"Wav2Vec2Processor"),g_t.forEach(t),hTo=r(Bxe," (UniSpeechSat model)"),Bxe.forEach(t),pTo=i(_e),Dp=n(_e,"LI",{});var Ixe=s(Dp);Sce=n(Ixe,"STRONG",{});var h_t=s(Sce);_To=r(h_t,"vilt"),h_t.forEach(t),uTo=r(Ixe," \u2014 "),gj=n(Ixe,"A",{href:!0});var p_t=s(gj);bTo=r(p_t,"ViltProcessor"),p_t.forEach(t),vTo=r(Ixe," (ViLT model)"),Ixe.forEach(t),FTo=i(_e),Gp=n(_e,"LI",{});var Nxe=s(Gp);Rce=n(Nxe,"STRONG",{});var __t=s(Rce);TTo=r(__t,"vision-text-dual-encoder"),__t.forEach(t),MTo=r(Nxe," \u2014 "),hj=n(Nxe,"A",{href:!0});var u_t=s(hj);ETo=r(u_t,"VisionTextDualEncoderProcessor"),u_t.forEach(t),CTo=r(Nxe," (VisionTextDualEncoder model)"),Nxe.forEach(t),wTo=i(_e),Op=n(_e,"LI",{});var qxe=s(Op);Pce=n(qxe,"STRONG",{});var b_t=s(Pce);ATo=r(b_t,"wav2vec2"),b_t.forEach(t),LTo=r(qxe," \u2014 "),pj=n(qxe,"A",{href:!0});var v_t=s(pj);yTo=r(v_t,"Wav2Vec2Processor"),v_t.forEach(t),xTo=r(qxe," (Wav2Vec2 model)"),qxe.forEach(t),$To=i(_e),Vp=n(_e,"LI",{});var jxe=s(Vp);Bce=n(jxe,"STRONG",{});var F_t=s(Bce);kTo=r(F_t,"wav2vec2-conformer"),F_t.forEach(t),STo=r(jxe," \u2014 "),_j=n(jxe,"A",{href:!0});var T_t=s(_j);RTo=r(T_t,"Wav2Vec2Processor"),T_t.forEach(t),PTo=r(jxe," (Wav2Vec2-Conformer model)"),jxe.forEach(t),BTo=i(_e),Xp=n(_e,"LI",{});var Dxe=s(Xp);Ice=n(Dxe,"STRONG",{});var M_t=s(Ice);ITo=r(M_t,"wavlm"),M_t.forEach(t),NTo=r(Dxe," \u2014 "),uj=n(Dxe,"A",{href:!0});var E_t=s(uj);qTo=r(E_t,"Wav2Vec2Processor"),E_t.forEach(t),jTo=r(Dxe," (WavLM model)"),Dxe.forEach(t),_e.forEach(t),DTo=i(sa),T(zp.$$.fragment,sa),GTo=i(sa),T(Wp.$$.fragment,sa),sa.forEach(t),OTo=i(tl),Qp=n(tl,"DIV",{class:!0});var vQe=s(Qp);T(VL.$$.fragment,vQe),VTo=i(vQe),Nce=n(vQe,"P",{});var C_t=s(Nce);XTo=r(C_t,"Register a new processor for this class."),C_t.forEach(t),vQe.forEach(t),tl.forEach(t),hze=i(f),Vi=n(f,"H2",{class:!0});var FQe=s(Vi);Hp=n(FQe,"A",{id:!0,class:!0,href:!0});var w_t=s(Hp);qce=n(w_t,"SPAN",{});var A_t=s(qce);T(XL.$$.fragment,A_t),A_t.forEach(t),w_t.forEach(t),zTo=i(FQe),jce=n(FQe,"SPAN",{});var L_t=s(jce);WTo=r(L_t,"AutoModel"),L_t.forEach(t),FQe.forEach(t),pze=i(f),ko=n(f,"DIV",{class:!0});var al=s(ko);T(zL.$$.fragment,al),QTo=i(al),Xi=n(al,"P",{});var ite=s(Xi);HTo=r(ite,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bj=n(ite,"A",{href:!0});var y_t=s(bj);UTo=r(y_t,"from_pretrained()"),y_t.forEach(t),JTo=r(ite," class method or the "),vj=n(ite,"A",{href:!0});var x_t=s(vj);YTo=r(x_t,"from_config()"),x_t.forEach(t),KTo=r(ite,` class
method.`),ite.forEach(t),ZTo=i(al),WL=n(al,"P",{});var TQe=s(WL);e7o=r(TQe,"This class cannot be instantiated directly using "),Dce=n(TQe,"CODE",{});var $_t=s(Dce);o7o=r($_t,"__init__()"),$_t.forEach(t),r7o=r(TQe," (throws an error)."),TQe.forEach(t),t7o=i(al),it=n(al,"DIV",{class:!0});var Mw=s(it);T(QL.$$.fragment,Mw),a7o=i(Mw),Gce=n(Mw,"P",{});var k_t=s(Gce);n7o=r(k_t,"Instantiates one of the base model classes of the library from a configuration."),k_t.forEach(t),s7o=i(Mw),zi=n(Mw,"P",{});var dte=s(zi);l7o=r(dte,`Note:
Loading a model from its configuration file does `),Oce=n(dte,"STRONG",{});var S_t=s(Oce);i7o=r(S_t,"not"),S_t.forEach(t),d7o=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=n(dte,"A",{href:!0});var R_t=s(Fj);c7o=r(R_t,"from_pretrained()"),R_t.forEach(t),f7o=r(dte," to load the model weights."),dte.forEach(t),m7o=i(Mw),T(Up.$$.fragment,Mw),Mw.forEach(t),g7o=i(al),Ye=n(al,"DIV",{class:!0});var la=s(Ye);T(HL.$$.fragment,la),h7o=i(la),Vce=n(la,"P",{});var P_t=s(Vce);p7o=r(P_t,"Instantiate one of the base model classes of the library from a pretrained model."),P_t.forEach(t),_7o=i(la),Ia=n(la,"P",{});var Ew=s(Ia);u7o=r(Ew,"The model class to instantiate is selected based on the "),Xce=n(Ew,"CODE",{});var B_t=s(Xce);b7o=r(B_t,"model_type"),B_t.forEach(t),v7o=r(Ew,` property of the config object (either
passed as an argument or loaded from `),zce=n(Ew,"CODE",{});var I_t=s(zce);F7o=r(I_t,"pretrained_model_name_or_path"),I_t.forEach(t),T7o=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wce=n(Ew,"CODE",{});var N_t=s(Wce);M7o=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),E7o=r(Ew,":"),Ew.forEach(t),C7o=i(la),y=n(la,"UL",{});var x=s(y);Jp=n(x,"LI",{});var Gxe=s(Jp);Qce=n(Gxe,"STRONG",{});var q_t=s(Qce);w7o=r(q_t,"albert"),q_t.forEach(t),A7o=r(Gxe," \u2014 "),Tj=n(Gxe,"A",{href:!0});var j_t=s(Tj);L7o=r(j_t,"AlbertModel"),j_t.forEach(t),y7o=r(Gxe," (ALBERT model)"),Gxe.forEach(t),x7o=i(x),Yp=n(x,"LI",{});var Oxe=s(Yp);Hce=n(Oxe,"STRONG",{});var D_t=s(Hce);$7o=r(D_t,"bart"),D_t.forEach(t),k7o=r(Oxe," \u2014 "),Mj=n(Oxe,"A",{href:!0});var G_t=s(Mj);S7o=r(G_t,"BartModel"),G_t.forEach(t),R7o=r(Oxe," (BART model)"),Oxe.forEach(t),P7o=i(x),Kp=n(x,"LI",{});var Vxe=s(Kp);Uce=n(Vxe,"STRONG",{});var O_t=s(Uce);B7o=r(O_t,"beit"),O_t.forEach(t),I7o=r(Vxe," \u2014 "),Ej=n(Vxe,"A",{href:!0});var V_t=s(Ej);N7o=r(V_t,"BeitModel"),V_t.forEach(t),q7o=r(Vxe," (BEiT model)"),Vxe.forEach(t),j7o=i(x),Zp=n(x,"LI",{});var Xxe=s(Zp);Jce=n(Xxe,"STRONG",{});var X_t=s(Jce);D7o=r(X_t,"bert"),X_t.forEach(t),G7o=r(Xxe," \u2014 "),Cj=n(Xxe,"A",{href:!0});var z_t=s(Cj);O7o=r(z_t,"BertModel"),z_t.forEach(t),V7o=r(Xxe," (BERT model)"),Xxe.forEach(t),X7o=i(x),e_=n(x,"LI",{});var zxe=s(e_);Yce=n(zxe,"STRONG",{});var W_t=s(Yce);z7o=r(W_t,"bert-generation"),W_t.forEach(t),W7o=r(zxe," \u2014 "),wj=n(zxe,"A",{href:!0});var Q_t=s(wj);Q7o=r(Q_t,"BertGenerationEncoder"),Q_t.forEach(t),H7o=r(zxe," (Bert Generation model)"),zxe.forEach(t),U7o=i(x),o_=n(x,"LI",{});var Wxe=s(o_);Kce=n(Wxe,"STRONG",{});var H_t=s(Kce);J7o=r(H_t,"big_bird"),H_t.forEach(t),Y7o=r(Wxe," \u2014 "),Aj=n(Wxe,"A",{href:!0});var U_t=s(Aj);K7o=r(U_t,"BigBirdModel"),U_t.forEach(t),Z7o=r(Wxe," (BigBird model)"),Wxe.forEach(t),e8o=i(x),r_=n(x,"LI",{});var Qxe=s(r_);Zce=n(Qxe,"STRONG",{});var J_t=s(Zce);o8o=r(J_t,"bigbird_pegasus"),J_t.forEach(t),r8o=r(Qxe," \u2014 "),Lj=n(Qxe,"A",{href:!0});var Y_t=s(Lj);t8o=r(Y_t,"BigBirdPegasusModel"),Y_t.forEach(t),a8o=r(Qxe," (BigBird-Pegasus model)"),Qxe.forEach(t),n8o=i(x),t_=n(x,"LI",{});var Hxe=s(t_);efe=n(Hxe,"STRONG",{});var K_t=s(efe);s8o=r(K_t,"blenderbot"),K_t.forEach(t),l8o=r(Hxe," \u2014 "),yj=n(Hxe,"A",{href:!0});var Z_t=s(yj);i8o=r(Z_t,"BlenderbotModel"),Z_t.forEach(t),d8o=r(Hxe," (Blenderbot model)"),Hxe.forEach(t),c8o=i(x),a_=n(x,"LI",{});var Uxe=s(a_);ofe=n(Uxe,"STRONG",{});var eut=s(ofe);f8o=r(eut,"blenderbot-small"),eut.forEach(t),m8o=r(Uxe," \u2014 "),xj=n(Uxe,"A",{href:!0});var out=s(xj);g8o=r(out,"BlenderbotSmallModel"),out.forEach(t),h8o=r(Uxe," (BlenderbotSmall model)"),Uxe.forEach(t),p8o=i(x),n_=n(x,"LI",{});var Jxe=s(n_);rfe=n(Jxe,"STRONG",{});var rut=s(rfe);_8o=r(rut,"bloom"),rut.forEach(t),u8o=r(Jxe," \u2014 "),$j=n(Jxe,"A",{href:!0});var tut=s($j);b8o=r(tut,"BloomModel"),tut.forEach(t),v8o=r(Jxe," (BLOOM model)"),Jxe.forEach(t),F8o=i(x),s_=n(x,"LI",{});var Yxe=s(s_);tfe=n(Yxe,"STRONG",{});var aut=s(tfe);T8o=r(aut,"camembert"),aut.forEach(t),M8o=r(Yxe," \u2014 "),kj=n(Yxe,"A",{href:!0});var nut=s(kj);E8o=r(nut,"CamembertModel"),nut.forEach(t),C8o=r(Yxe," (CamemBERT model)"),Yxe.forEach(t),w8o=i(x),l_=n(x,"LI",{});var Kxe=s(l_);afe=n(Kxe,"STRONG",{});var sut=s(afe);A8o=r(sut,"canine"),sut.forEach(t),L8o=r(Kxe," \u2014 "),Sj=n(Kxe,"A",{href:!0});var lut=s(Sj);y8o=r(lut,"CanineModel"),lut.forEach(t),x8o=r(Kxe," (CANINE model)"),Kxe.forEach(t),$8o=i(x),i_=n(x,"LI",{});var Zxe=s(i_);nfe=n(Zxe,"STRONG",{});var iut=s(nfe);k8o=r(iut,"clip"),iut.forEach(t),S8o=r(Zxe," \u2014 "),Rj=n(Zxe,"A",{href:!0});var dut=s(Rj);R8o=r(dut,"CLIPModel"),dut.forEach(t),P8o=r(Zxe," (CLIP model)"),Zxe.forEach(t),B8o=i(x),d_=n(x,"LI",{});var e$e=s(d_);sfe=n(e$e,"STRONG",{});var cut=s(sfe);I8o=r(cut,"codegen"),cut.forEach(t),N8o=r(e$e," \u2014 "),Pj=n(e$e,"A",{href:!0});var fut=s(Pj);q8o=r(fut,"CodeGenModel"),fut.forEach(t),j8o=r(e$e," (CodeGen model)"),e$e.forEach(t),D8o=i(x),c_=n(x,"LI",{});var o$e=s(c_);lfe=n(o$e,"STRONG",{});var mut=s(lfe);G8o=r(mut,"convbert"),mut.forEach(t),O8o=r(o$e," \u2014 "),Bj=n(o$e,"A",{href:!0});var gut=s(Bj);V8o=r(gut,"ConvBertModel"),gut.forEach(t),X8o=r(o$e," (ConvBERT model)"),o$e.forEach(t),z8o=i(x),f_=n(x,"LI",{});var r$e=s(f_);ife=n(r$e,"STRONG",{});var hut=s(ife);W8o=r(hut,"convnext"),hut.forEach(t),Q8o=r(r$e," \u2014 "),Ij=n(r$e,"A",{href:!0});var put=s(Ij);H8o=r(put,"ConvNextModel"),put.forEach(t),U8o=r(r$e," (ConvNeXT model)"),r$e.forEach(t),J8o=i(x),m_=n(x,"LI",{});var t$e=s(m_);dfe=n(t$e,"STRONG",{});var _ut=s(dfe);Y8o=r(_ut,"ctrl"),_ut.forEach(t),K8o=r(t$e," \u2014 "),Nj=n(t$e,"A",{href:!0});var uut=s(Nj);Z8o=r(uut,"CTRLModel"),uut.forEach(t),eMo=r(t$e," (CTRL model)"),t$e.forEach(t),oMo=i(x),g_=n(x,"LI",{});var a$e=s(g_);cfe=n(a$e,"STRONG",{});var but=s(cfe);rMo=r(but,"cvt"),but.forEach(t),tMo=r(a$e," \u2014 "),qj=n(a$e,"A",{href:!0});var vut=s(qj);aMo=r(vut,"CvtModel"),vut.forEach(t),nMo=r(a$e," (CvT model)"),a$e.forEach(t),sMo=i(x),h_=n(x,"LI",{});var n$e=s(h_);ffe=n(n$e,"STRONG",{});var Fut=s(ffe);lMo=r(Fut,"data2vec-audio"),Fut.forEach(t),iMo=r(n$e," \u2014 "),jj=n(n$e,"A",{href:!0});var Tut=s(jj);dMo=r(Tut,"Data2VecAudioModel"),Tut.forEach(t),cMo=r(n$e," (Data2VecAudio model)"),n$e.forEach(t),fMo=i(x),p_=n(x,"LI",{});var s$e=s(p_);mfe=n(s$e,"STRONG",{});var Mut=s(mfe);mMo=r(Mut,"data2vec-text"),Mut.forEach(t),gMo=r(s$e," \u2014 "),Dj=n(s$e,"A",{href:!0});var Eut=s(Dj);hMo=r(Eut,"Data2VecTextModel"),Eut.forEach(t),pMo=r(s$e," (Data2VecText model)"),s$e.forEach(t),_Mo=i(x),__=n(x,"LI",{});var l$e=s(__);gfe=n(l$e,"STRONG",{});var Cut=s(gfe);uMo=r(Cut,"data2vec-vision"),Cut.forEach(t),bMo=r(l$e," \u2014 "),Gj=n(l$e,"A",{href:!0});var wut=s(Gj);vMo=r(wut,"Data2VecVisionModel"),wut.forEach(t),FMo=r(l$e," (Data2VecVision model)"),l$e.forEach(t),TMo=i(x),u_=n(x,"LI",{});var i$e=s(u_);hfe=n(i$e,"STRONG",{});var Aut=s(hfe);MMo=r(Aut,"deberta"),Aut.forEach(t),EMo=r(i$e," \u2014 "),Oj=n(i$e,"A",{href:!0});var Lut=s(Oj);CMo=r(Lut,"DebertaModel"),Lut.forEach(t),wMo=r(i$e," (DeBERTa model)"),i$e.forEach(t),AMo=i(x),b_=n(x,"LI",{});var d$e=s(b_);pfe=n(d$e,"STRONG",{});var yut=s(pfe);LMo=r(yut,"deberta-v2"),yut.forEach(t),yMo=r(d$e," \u2014 "),Vj=n(d$e,"A",{href:!0});var xut=s(Vj);xMo=r(xut,"DebertaV2Model"),xut.forEach(t),$Mo=r(d$e," (DeBERTa-v2 model)"),d$e.forEach(t),kMo=i(x),v_=n(x,"LI",{});var c$e=s(v_);_fe=n(c$e,"STRONG",{});var $ut=s(_fe);SMo=r($ut,"decision_transformer"),$ut.forEach(t),RMo=r(c$e," \u2014 "),Xj=n(c$e,"A",{href:!0});var kut=s(Xj);PMo=r(kut,"DecisionTransformerModel"),kut.forEach(t),BMo=r(c$e," (Decision Transformer model)"),c$e.forEach(t),IMo=i(x),F_=n(x,"LI",{});var f$e=s(F_);ufe=n(f$e,"STRONG",{});var Sut=s(ufe);NMo=r(Sut,"deit"),Sut.forEach(t),qMo=r(f$e," \u2014 "),zj=n(f$e,"A",{href:!0});var Rut=s(zj);jMo=r(Rut,"DeiTModel"),Rut.forEach(t),DMo=r(f$e," (DeiT model)"),f$e.forEach(t),GMo=i(x),T_=n(x,"LI",{});var m$e=s(T_);bfe=n(m$e,"STRONG",{});var Put=s(bfe);OMo=r(Put,"detr"),Put.forEach(t),VMo=r(m$e," \u2014 "),Wj=n(m$e,"A",{href:!0});var But=s(Wj);XMo=r(But,"DetrModel"),But.forEach(t),zMo=r(m$e," (DETR model)"),m$e.forEach(t),WMo=i(x),M_=n(x,"LI",{});var g$e=s(M_);vfe=n(g$e,"STRONG",{});var Iut=s(vfe);QMo=r(Iut,"distilbert"),Iut.forEach(t),HMo=r(g$e," \u2014 "),Qj=n(g$e,"A",{href:!0});var Nut=s(Qj);UMo=r(Nut,"DistilBertModel"),Nut.forEach(t),JMo=r(g$e," (DistilBERT model)"),g$e.forEach(t),YMo=i(x),E_=n(x,"LI",{});var h$e=s(E_);Ffe=n(h$e,"STRONG",{});var qut=s(Ffe);KMo=r(qut,"dpr"),qut.forEach(t),ZMo=r(h$e," \u2014 "),Hj=n(h$e,"A",{href:!0});var jut=s(Hj);e4o=r(jut,"DPRQuestionEncoder"),jut.forEach(t),o4o=r(h$e," (DPR model)"),h$e.forEach(t),r4o=i(x),C_=n(x,"LI",{});var p$e=s(C_);Tfe=n(p$e,"STRONG",{});var Dut=s(Tfe);t4o=r(Dut,"dpt"),Dut.forEach(t),a4o=r(p$e," \u2014 "),Uj=n(p$e,"A",{href:!0});var Gut=s(Uj);n4o=r(Gut,"DPTModel"),Gut.forEach(t),s4o=r(p$e," (DPT model)"),p$e.forEach(t),l4o=i(x),w_=n(x,"LI",{});var _$e=s(w_);Mfe=n(_$e,"STRONG",{});var Out=s(Mfe);i4o=r(Out,"electra"),Out.forEach(t),d4o=r(_$e," \u2014 "),Jj=n(_$e,"A",{href:!0});var Vut=s(Jj);c4o=r(Vut,"ElectraModel"),Vut.forEach(t),f4o=r(_$e," (ELECTRA model)"),_$e.forEach(t),m4o=i(x),A_=n(x,"LI",{});var u$e=s(A_);Efe=n(u$e,"STRONG",{});var Xut=s(Efe);g4o=r(Xut,"flaubert"),Xut.forEach(t),h4o=r(u$e," \u2014 "),Yj=n(u$e,"A",{href:!0});var zut=s(Yj);p4o=r(zut,"FlaubertModel"),zut.forEach(t),_4o=r(u$e," (FlauBERT model)"),u$e.forEach(t),u4o=i(x),L_=n(x,"LI",{});var b$e=s(L_);Cfe=n(b$e,"STRONG",{});var Wut=s(Cfe);b4o=r(Wut,"flava"),Wut.forEach(t),v4o=r(b$e," \u2014 "),Kj=n(b$e,"A",{href:!0});var Qut=s(Kj);F4o=r(Qut,"FlavaModel"),Qut.forEach(t),T4o=r(b$e," (FLAVA model)"),b$e.forEach(t),M4o=i(x),y_=n(x,"LI",{});var v$e=s(y_);wfe=n(v$e,"STRONG",{});var Hut=s(wfe);E4o=r(Hut,"fnet"),Hut.forEach(t),C4o=r(v$e," \u2014 "),Zj=n(v$e,"A",{href:!0});var Uut=s(Zj);w4o=r(Uut,"FNetModel"),Uut.forEach(t),A4o=r(v$e," (FNet model)"),v$e.forEach(t),L4o=i(x),x_=n(x,"LI",{});var F$e=s(x_);Afe=n(F$e,"STRONG",{});var Jut=s(Afe);y4o=r(Jut,"fsmt"),Jut.forEach(t),x4o=r(F$e," \u2014 "),eD=n(F$e,"A",{href:!0});var Yut=s(eD);$4o=r(Yut,"FSMTModel"),Yut.forEach(t),k4o=r(F$e," (FairSeq Machine-Translation model)"),F$e.forEach(t),S4o=i(x),Us=n(x,"LI",{});var WS=s(Us);Lfe=n(WS,"STRONG",{});var Kut=s(Lfe);R4o=r(Kut,"funnel"),Kut.forEach(t),P4o=r(WS," \u2014 "),oD=n(WS,"A",{href:!0});var Zut=s(oD);B4o=r(Zut,"FunnelModel"),Zut.forEach(t),I4o=r(WS," or "),rD=n(WS,"A",{href:!0});var e2t=s(rD);N4o=r(e2t,"FunnelBaseModel"),e2t.forEach(t),q4o=r(WS," (Funnel Transformer model)"),WS.forEach(t),j4o=i(x),$_=n(x,"LI",{});var T$e=s($_);yfe=n(T$e,"STRONG",{});var o2t=s(yfe);D4o=r(o2t,"glpn"),o2t.forEach(t),G4o=r(T$e," \u2014 "),tD=n(T$e,"A",{href:!0});var r2t=s(tD);O4o=r(r2t,"GLPNModel"),r2t.forEach(t),V4o=r(T$e," (GLPN model)"),T$e.forEach(t),X4o=i(x),k_=n(x,"LI",{});var M$e=s(k_);xfe=n(M$e,"STRONG",{});var t2t=s(xfe);z4o=r(t2t,"gpt2"),t2t.forEach(t),W4o=r(M$e," \u2014 "),aD=n(M$e,"A",{href:!0});var a2t=s(aD);Q4o=r(a2t,"GPT2Model"),a2t.forEach(t),H4o=r(M$e," (OpenAI GPT-2 model)"),M$e.forEach(t),U4o=i(x),S_=n(x,"LI",{});var E$e=s(S_);$fe=n(E$e,"STRONG",{});var n2t=s($fe);J4o=r(n2t,"gpt_neo"),n2t.forEach(t),Y4o=r(E$e," \u2014 "),nD=n(E$e,"A",{href:!0});var s2t=s(nD);K4o=r(s2t,"GPTNeoModel"),s2t.forEach(t),Z4o=r(E$e," (GPT Neo model)"),E$e.forEach(t),eEo=i(x),R_=n(x,"LI",{});var C$e=s(R_);kfe=n(C$e,"STRONG",{});var l2t=s(kfe);oEo=r(l2t,"gpt_neox"),l2t.forEach(t),rEo=r(C$e," \u2014 "),sD=n(C$e,"A",{href:!0});var i2t=s(sD);tEo=r(i2t,"GPTNeoXModel"),i2t.forEach(t),aEo=r(C$e," (GPT NeoX model)"),C$e.forEach(t),nEo=i(x),P_=n(x,"LI",{});var w$e=s(P_);Sfe=n(w$e,"STRONG",{});var d2t=s(Sfe);sEo=r(d2t,"gptj"),d2t.forEach(t),lEo=r(w$e," \u2014 "),lD=n(w$e,"A",{href:!0});var c2t=s(lD);iEo=r(c2t,"GPTJModel"),c2t.forEach(t),dEo=r(w$e," (GPT-J model)"),w$e.forEach(t),cEo=i(x),B_=n(x,"LI",{});var A$e=s(B_);Rfe=n(A$e,"STRONG",{});var f2t=s(Rfe);fEo=r(f2t,"groupvit"),f2t.forEach(t),mEo=r(A$e," \u2014 "),iD=n(A$e,"A",{href:!0});var m2t=s(iD);gEo=r(m2t,"GroupViTModel"),m2t.forEach(t),hEo=r(A$e," (GroupViT model)"),A$e.forEach(t),pEo=i(x),I_=n(x,"LI",{});var L$e=s(I_);Pfe=n(L$e,"STRONG",{});var g2t=s(Pfe);_Eo=r(g2t,"hubert"),g2t.forEach(t),uEo=r(L$e," \u2014 "),dD=n(L$e,"A",{href:!0});var h2t=s(dD);bEo=r(h2t,"HubertModel"),h2t.forEach(t),vEo=r(L$e," (Hubert model)"),L$e.forEach(t),FEo=i(x),N_=n(x,"LI",{});var y$e=s(N_);Bfe=n(y$e,"STRONG",{});var p2t=s(Bfe);TEo=r(p2t,"ibert"),p2t.forEach(t),MEo=r(y$e," \u2014 "),cD=n(y$e,"A",{href:!0});var _2t=s(cD);EEo=r(_2t,"IBertModel"),_2t.forEach(t),CEo=r(y$e," (I-BERT model)"),y$e.forEach(t),wEo=i(x),q_=n(x,"LI",{});var x$e=s(q_);Ife=n(x$e,"STRONG",{});var u2t=s(Ife);AEo=r(u2t,"imagegpt"),u2t.forEach(t),LEo=r(x$e," \u2014 "),fD=n(x$e,"A",{href:!0});var b2t=s(fD);yEo=r(b2t,"ImageGPTModel"),b2t.forEach(t),xEo=r(x$e," (ImageGPT model)"),x$e.forEach(t),$Eo=i(x),j_=n(x,"LI",{});var $$e=s(j_);Nfe=n($$e,"STRONG",{});var v2t=s(Nfe);kEo=r(v2t,"jukebox"),v2t.forEach(t),SEo=r($$e," \u2014 "),qfe=n($$e,"CODE",{});var F2t=s(qfe);REo=r(F2t,"JukeboxModel"),F2t.forEach(t),PEo=r($$e," (Jukebox model)"),$$e.forEach(t),BEo=i(x),D_=n(x,"LI",{});var k$e=s(D_);jfe=n(k$e,"STRONG",{});var T2t=s(jfe);IEo=r(T2t,"layoutlm"),T2t.forEach(t),NEo=r(k$e," \u2014 "),mD=n(k$e,"A",{href:!0});var M2t=s(mD);qEo=r(M2t,"LayoutLMModel"),M2t.forEach(t),jEo=r(k$e," (LayoutLM model)"),k$e.forEach(t),DEo=i(x),G_=n(x,"LI",{});var S$e=s(G_);Dfe=n(S$e,"STRONG",{});var E2t=s(Dfe);GEo=r(E2t,"layoutlmv2"),E2t.forEach(t),OEo=r(S$e," \u2014 "),gD=n(S$e,"A",{href:!0});var C2t=s(gD);VEo=r(C2t,"LayoutLMv2Model"),C2t.forEach(t),XEo=r(S$e," (LayoutLMv2 model)"),S$e.forEach(t),zEo=i(x),O_=n(x,"LI",{});var R$e=s(O_);Gfe=n(R$e,"STRONG",{});var w2t=s(Gfe);WEo=r(w2t,"layoutlmv3"),w2t.forEach(t),QEo=r(R$e," \u2014 "),hD=n(R$e,"A",{href:!0});var A2t=s(hD);HEo=r(A2t,"LayoutLMv3Model"),A2t.forEach(t),UEo=r(R$e," (LayoutLMv3 model)"),R$e.forEach(t),JEo=i(x),V_=n(x,"LI",{});var P$e=s(V_);Ofe=n(P$e,"STRONG",{});var L2t=s(Ofe);YEo=r(L2t,"led"),L2t.forEach(t),KEo=r(P$e," \u2014 "),pD=n(P$e,"A",{href:!0});var y2t=s(pD);ZEo=r(y2t,"LEDModel"),y2t.forEach(t),eCo=r(P$e," (LED model)"),P$e.forEach(t),oCo=i(x),X_=n(x,"LI",{});var B$e=s(X_);Vfe=n(B$e,"STRONG",{});var x2t=s(Vfe);rCo=r(x2t,"levit"),x2t.forEach(t),tCo=r(B$e," \u2014 "),_D=n(B$e,"A",{href:!0});var $2t=s(_D);aCo=r($2t,"LevitModel"),$2t.forEach(t),nCo=r(B$e," (LeViT model)"),B$e.forEach(t),sCo=i(x),z_=n(x,"LI",{});var I$e=s(z_);Xfe=n(I$e,"STRONG",{});var k2t=s(Xfe);lCo=r(k2t,"longformer"),k2t.forEach(t),iCo=r(I$e," \u2014 "),uD=n(I$e,"A",{href:!0});var S2t=s(uD);dCo=r(S2t,"LongformerModel"),S2t.forEach(t),cCo=r(I$e," (Longformer model)"),I$e.forEach(t),fCo=i(x),W_=n(x,"LI",{});var N$e=s(W_);zfe=n(N$e,"STRONG",{});var R2t=s(zfe);mCo=r(R2t,"longt5"),R2t.forEach(t),gCo=r(N$e," \u2014 "),bD=n(N$e,"A",{href:!0});var P2t=s(bD);hCo=r(P2t,"LongT5Model"),P2t.forEach(t),pCo=r(N$e," (LongT5 model)"),N$e.forEach(t),_Co=i(x),Q_=n(x,"LI",{});var q$e=s(Q_);Wfe=n(q$e,"STRONG",{});var B2t=s(Wfe);uCo=r(B2t,"luke"),B2t.forEach(t),bCo=r(q$e," \u2014 "),vD=n(q$e,"A",{href:!0});var I2t=s(vD);vCo=r(I2t,"LukeModel"),I2t.forEach(t),FCo=r(q$e," (LUKE model)"),q$e.forEach(t),TCo=i(x),H_=n(x,"LI",{});var j$e=s(H_);Qfe=n(j$e,"STRONG",{});var N2t=s(Qfe);MCo=r(N2t,"lxmert"),N2t.forEach(t),ECo=r(j$e," \u2014 "),FD=n(j$e,"A",{href:!0});var q2t=s(FD);CCo=r(q2t,"LxmertModel"),q2t.forEach(t),wCo=r(j$e," (LXMERT model)"),j$e.forEach(t),ACo=i(x),U_=n(x,"LI",{});var D$e=s(U_);Hfe=n(D$e,"STRONG",{});var j2t=s(Hfe);LCo=r(j2t,"m2m_100"),j2t.forEach(t),yCo=r(D$e," \u2014 "),TD=n(D$e,"A",{href:!0});var D2t=s(TD);xCo=r(D2t,"M2M100Model"),D2t.forEach(t),$Co=r(D$e," (M2M100 model)"),D$e.forEach(t),kCo=i(x),J_=n(x,"LI",{});var G$e=s(J_);Ufe=n(G$e,"STRONG",{});var G2t=s(Ufe);SCo=r(G2t,"marian"),G2t.forEach(t),RCo=r(G$e," \u2014 "),MD=n(G$e,"A",{href:!0});var O2t=s(MD);PCo=r(O2t,"MarianModel"),O2t.forEach(t),BCo=r(G$e," (Marian model)"),G$e.forEach(t),ICo=i(x),Y_=n(x,"LI",{});var O$e=s(Y_);Jfe=n(O$e,"STRONG",{});var V2t=s(Jfe);NCo=r(V2t,"maskformer"),V2t.forEach(t),qCo=r(O$e," \u2014 "),ED=n(O$e,"A",{href:!0});var X2t=s(ED);jCo=r(X2t,"MaskFormerModel"),X2t.forEach(t),DCo=r(O$e," (MaskFormer model)"),O$e.forEach(t),GCo=i(x),K_=n(x,"LI",{});var V$e=s(K_);Yfe=n(V$e,"STRONG",{});var z2t=s(Yfe);OCo=r(z2t,"mbart"),z2t.forEach(t),VCo=r(V$e," \u2014 "),CD=n(V$e,"A",{href:!0});var W2t=s(CD);XCo=r(W2t,"MBartModel"),W2t.forEach(t),zCo=r(V$e," (mBART model)"),V$e.forEach(t),WCo=i(x),Z_=n(x,"LI",{});var X$e=s(Z_);Kfe=n(X$e,"STRONG",{});var Q2t=s(Kfe);QCo=r(Q2t,"mctct"),Q2t.forEach(t),HCo=r(X$e," \u2014 "),wD=n(X$e,"A",{href:!0});var H2t=s(wD);UCo=r(H2t,"MCTCTModel"),H2t.forEach(t),JCo=r(X$e," (M-CTC-T model)"),X$e.forEach(t),YCo=i(x),eu=n(x,"LI",{});var z$e=s(eu);Zfe=n(z$e,"STRONG",{});var U2t=s(Zfe);KCo=r(U2t,"megatron-bert"),U2t.forEach(t),ZCo=r(z$e," \u2014 "),AD=n(z$e,"A",{href:!0});var J2t=s(AD);e5o=r(J2t,"MegatronBertModel"),J2t.forEach(t),o5o=r(z$e," (Megatron-BERT model)"),z$e.forEach(t),r5o=i(x),ou=n(x,"LI",{});var W$e=s(ou);eme=n(W$e,"STRONG",{});var Y2t=s(eme);t5o=r(Y2t,"mobilebert"),Y2t.forEach(t),a5o=r(W$e," \u2014 "),LD=n(W$e,"A",{href:!0});var K2t=s(LD);n5o=r(K2t,"MobileBertModel"),K2t.forEach(t),s5o=r(W$e," (MobileBERT model)"),W$e.forEach(t),l5o=i(x),ru=n(x,"LI",{});var Q$e=s(ru);ome=n(Q$e,"STRONG",{});var Z2t=s(ome);i5o=r(Z2t,"mobilevit"),Z2t.forEach(t),d5o=r(Q$e," \u2014 "),yD=n(Q$e,"A",{href:!0});var e1t=s(yD);c5o=r(e1t,"MobileViTModel"),e1t.forEach(t),f5o=r(Q$e," (MobileViT model)"),Q$e.forEach(t),m5o=i(x),tu=n(x,"LI",{});var H$e=s(tu);rme=n(H$e,"STRONG",{});var o1t=s(rme);g5o=r(o1t,"mpnet"),o1t.forEach(t),h5o=r(H$e," \u2014 "),xD=n(H$e,"A",{href:!0});var r1t=s(xD);p5o=r(r1t,"MPNetModel"),r1t.forEach(t),_5o=r(H$e," (MPNet model)"),H$e.forEach(t),u5o=i(x),au=n(x,"LI",{});var U$e=s(au);tme=n(U$e,"STRONG",{});var t1t=s(tme);b5o=r(t1t,"mt5"),t1t.forEach(t),v5o=r(U$e," \u2014 "),$D=n(U$e,"A",{href:!0});var a1t=s($D);F5o=r(a1t,"MT5Model"),a1t.forEach(t),T5o=r(U$e," (MT5 model)"),U$e.forEach(t),M5o=i(x),nu=n(x,"LI",{});var J$e=s(nu);ame=n(J$e,"STRONG",{});var n1t=s(ame);E5o=r(n1t,"mvp"),n1t.forEach(t),C5o=r(J$e," \u2014 "),kD=n(J$e,"A",{href:!0});var s1t=s(kD);w5o=r(s1t,"MvpModel"),s1t.forEach(t),A5o=r(J$e," (MVP model)"),J$e.forEach(t),L5o=i(x),su=n(x,"LI",{});var Y$e=s(su);nme=n(Y$e,"STRONG",{});var l1t=s(nme);y5o=r(l1t,"nezha"),l1t.forEach(t),x5o=r(Y$e," \u2014 "),SD=n(Y$e,"A",{href:!0});var i1t=s(SD);$5o=r(i1t,"NezhaModel"),i1t.forEach(t),k5o=r(Y$e," (Nezha model)"),Y$e.forEach(t),S5o=i(x),lu=n(x,"LI",{});var K$e=s(lu);sme=n(K$e,"STRONG",{});var d1t=s(sme);R5o=r(d1t,"nllb"),d1t.forEach(t),P5o=r(K$e," \u2014 "),RD=n(K$e,"A",{href:!0});var c1t=s(RD);B5o=r(c1t,"M2M100Model"),c1t.forEach(t),I5o=r(K$e," (NLLB model)"),K$e.forEach(t),N5o=i(x),iu=n(x,"LI",{});var Z$e=s(iu);lme=n(Z$e,"STRONG",{});var f1t=s(lme);q5o=r(f1t,"nystromformer"),f1t.forEach(t),j5o=r(Z$e," \u2014 "),PD=n(Z$e,"A",{href:!0});var m1t=s(PD);D5o=r(m1t,"NystromformerModel"),m1t.forEach(t),G5o=r(Z$e," (Nystr\xF6mformer model)"),Z$e.forEach(t),O5o=i(x),du=n(x,"LI",{});var eke=s(du);ime=n(eke,"STRONG",{});var g1t=s(ime);V5o=r(g1t,"openai-gpt"),g1t.forEach(t),X5o=r(eke," \u2014 "),BD=n(eke,"A",{href:!0});var h1t=s(BD);z5o=r(h1t,"OpenAIGPTModel"),h1t.forEach(t),W5o=r(eke," (OpenAI GPT model)"),eke.forEach(t),Q5o=i(x),cu=n(x,"LI",{});var oke=s(cu);dme=n(oke,"STRONG",{});var p1t=s(dme);H5o=r(p1t,"opt"),p1t.forEach(t),U5o=r(oke," \u2014 "),ID=n(oke,"A",{href:!0});var _1t=s(ID);J5o=r(_1t,"OPTModel"),_1t.forEach(t),Y5o=r(oke," (OPT model)"),oke.forEach(t),K5o=i(x),fu=n(x,"LI",{});var rke=s(fu);cme=n(rke,"STRONG",{});var u1t=s(cme);Z5o=r(u1t,"owlvit"),u1t.forEach(t),e3o=r(rke," \u2014 "),ND=n(rke,"A",{href:!0});var b1t=s(ND);o3o=r(b1t,"OwlViTModel"),b1t.forEach(t),r3o=r(rke," (OWL-ViT model)"),rke.forEach(t),t3o=i(x),mu=n(x,"LI",{});var tke=s(mu);fme=n(tke,"STRONG",{});var v1t=s(fme);a3o=r(v1t,"pegasus"),v1t.forEach(t),n3o=r(tke," \u2014 "),qD=n(tke,"A",{href:!0});var F1t=s(qD);s3o=r(F1t,"PegasusModel"),F1t.forEach(t),l3o=r(tke," (Pegasus model)"),tke.forEach(t),i3o=i(x),gu=n(x,"LI",{});var ake=s(gu);mme=n(ake,"STRONG",{});var T1t=s(mme);d3o=r(T1t,"perceiver"),T1t.forEach(t),c3o=r(ake," \u2014 "),jD=n(ake,"A",{href:!0});var M1t=s(jD);f3o=r(M1t,"PerceiverModel"),M1t.forEach(t),m3o=r(ake," (Perceiver model)"),ake.forEach(t),g3o=i(x),hu=n(x,"LI",{});var nke=s(hu);gme=n(nke,"STRONG",{});var E1t=s(gme);h3o=r(E1t,"plbart"),E1t.forEach(t),p3o=r(nke," \u2014 "),DD=n(nke,"A",{href:!0});var C1t=s(DD);_3o=r(C1t,"PLBartModel"),C1t.forEach(t),u3o=r(nke," (PLBart model)"),nke.forEach(t),b3o=i(x),pu=n(x,"LI",{});var ske=s(pu);hme=n(ske,"STRONG",{});var w1t=s(hme);v3o=r(w1t,"poolformer"),w1t.forEach(t),F3o=r(ske," \u2014 "),GD=n(ske,"A",{href:!0});var A1t=s(GD);T3o=r(A1t,"PoolFormerModel"),A1t.forEach(t),M3o=r(ske," (PoolFormer model)"),ske.forEach(t),E3o=i(x),_u=n(x,"LI",{});var lke=s(_u);pme=n(lke,"STRONG",{});var L1t=s(pme);C3o=r(L1t,"prophetnet"),L1t.forEach(t),w3o=r(lke," \u2014 "),OD=n(lke,"A",{href:!0});var y1t=s(OD);A3o=r(y1t,"ProphetNetModel"),y1t.forEach(t),L3o=r(lke," (ProphetNet model)"),lke.forEach(t),y3o=i(x),uu=n(x,"LI",{});var ike=s(uu);_me=n(ike,"STRONG",{});var x1t=s(_me);x3o=r(x1t,"qdqbert"),x1t.forEach(t),$3o=r(ike," \u2014 "),VD=n(ike,"A",{href:!0});var $1t=s(VD);k3o=r($1t,"QDQBertModel"),$1t.forEach(t),S3o=r(ike," (QDQBert model)"),ike.forEach(t),R3o=i(x),bu=n(x,"LI",{});var dke=s(bu);ume=n(dke,"STRONG",{});var k1t=s(ume);P3o=r(k1t,"reformer"),k1t.forEach(t),B3o=r(dke," \u2014 "),XD=n(dke,"A",{href:!0});var S1t=s(XD);I3o=r(S1t,"ReformerModel"),S1t.forEach(t),N3o=r(dke," (Reformer model)"),dke.forEach(t),q3o=i(x),vu=n(x,"LI",{});var cke=s(vu);bme=n(cke,"STRONG",{});var R1t=s(bme);j3o=r(R1t,"regnet"),R1t.forEach(t),D3o=r(cke," \u2014 "),zD=n(cke,"A",{href:!0});var P1t=s(zD);G3o=r(P1t,"RegNetModel"),P1t.forEach(t),O3o=r(cke," (RegNet model)"),cke.forEach(t),V3o=i(x),Fu=n(x,"LI",{});var fke=s(Fu);vme=n(fke,"STRONG",{});var B1t=s(vme);X3o=r(B1t,"rembert"),B1t.forEach(t),z3o=r(fke," \u2014 "),WD=n(fke,"A",{href:!0});var I1t=s(WD);W3o=r(I1t,"RemBertModel"),I1t.forEach(t),Q3o=r(fke," (RemBERT model)"),fke.forEach(t),H3o=i(x),Tu=n(x,"LI",{});var mke=s(Tu);Fme=n(mke,"STRONG",{});var N1t=s(Fme);U3o=r(N1t,"resnet"),N1t.forEach(t),J3o=r(mke," \u2014 "),QD=n(mke,"A",{href:!0});var q1t=s(QD);Y3o=r(q1t,"ResNetModel"),q1t.forEach(t),K3o=r(mke," (ResNet model)"),mke.forEach(t),Z3o=i(x),Mu=n(x,"LI",{});var gke=s(Mu);Tme=n(gke,"STRONG",{});var j1t=s(Tme);e0o=r(j1t,"retribert"),j1t.forEach(t),o0o=r(gke," \u2014 "),HD=n(gke,"A",{href:!0});var D1t=s(HD);r0o=r(D1t,"RetriBertModel"),D1t.forEach(t),t0o=r(gke," (RetriBERT model)"),gke.forEach(t),a0o=i(x),Eu=n(x,"LI",{});var hke=s(Eu);Mme=n(hke,"STRONG",{});var G1t=s(Mme);n0o=r(G1t,"roberta"),G1t.forEach(t),s0o=r(hke," \u2014 "),UD=n(hke,"A",{href:!0});var O1t=s(UD);l0o=r(O1t,"RobertaModel"),O1t.forEach(t),i0o=r(hke," (RoBERTa model)"),hke.forEach(t),d0o=i(x),Cu=n(x,"LI",{});var pke=s(Cu);Eme=n(pke,"STRONG",{});var V1t=s(Eme);c0o=r(V1t,"roformer"),V1t.forEach(t),f0o=r(pke," \u2014 "),JD=n(pke,"A",{href:!0});var X1t=s(JD);m0o=r(X1t,"RoFormerModel"),X1t.forEach(t),g0o=r(pke," (RoFormer model)"),pke.forEach(t),h0o=i(x),wu=n(x,"LI",{});var _ke=s(wu);Cme=n(_ke,"STRONG",{});var z1t=s(Cme);p0o=r(z1t,"segformer"),z1t.forEach(t),_0o=r(_ke," \u2014 "),YD=n(_ke,"A",{href:!0});var W1t=s(YD);u0o=r(W1t,"SegformerModel"),W1t.forEach(t),b0o=r(_ke," (SegFormer model)"),_ke.forEach(t),v0o=i(x),Au=n(x,"LI",{});var uke=s(Au);wme=n(uke,"STRONG",{});var Q1t=s(wme);F0o=r(Q1t,"sew"),Q1t.forEach(t),T0o=r(uke," \u2014 "),KD=n(uke,"A",{href:!0});var H1t=s(KD);M0o=r(H1t,"SEWModel"),H1t.forEach(t),E0o=r(uke," (SEW model)"),uke.forEach(t),C0o=i(x),Lu=n(x,"LI",{});var bke=s(Lu);Ame=n(bke,"STRONG",{});var U1t=s(Ame);w0o=r(U1t,"sew-d"),U1t.forEach(t),A0o=r(bke," \u2014 "),ZD=n(bke,"A",{href:!0});var J1t=s(ZD);L0o=r(J1t,"SEWDModel"),J1t.forEach(t),y0o=r(bke," (SEW-D model)"),bke.forEach(t),x0o=i(x),yu=n(x,"LI",{});var vke=s(yu);Lme=n(vke,"STRONG",{});var Y1t=s(Lme);$0o=r(Y1t,"speech_to_text"),Y1t.forEach(t),k0o=r(vke," \u2014 "),eG=n(vke,"A",{href:!0});var K1t=s(eG);S0o=r(K1t,"Speech2TextModel"),K1t.forEach(t),R0o=r(vke," (Speech2Text model)"),vke.forEach(t),P0o=i(x),xu=n(x,"LI",{});var Fke=s(xu);yme=n(Fke,"STRONG",{});var Z1t=s(yme);B0o=r(Z1t,"splinter"),Z1t.forEach(t),I0o=r(Fke," \u2014 "),oG=n(Fke,"A",{href:!0});var ebt=s(oG);N0o=r(ebt,"SplinterModel"),ebt.forEach(t),q0o=r(Fke," (Splinter model)"),Fke.forEach(t),j0o=i(x),$u=n(x,"LI",{});var Tke=s($u);xme=n(Tke,"STRONG",{});var obt=s(xme);D0o=r(obt,"squeezebert"),obt.forEach(t),G0o=r(Tke," \u2014 "),rG=n(Tke,"A",{href:!0});var rbt=s(rG);O0o=r(rbt,"SqueezeBertModel"),rbt.forEach(t),V0o=r(Tke," (SqueezeBERT model)"),Tke.forEach(t),X0o=i(x),ku=n(x,"LI",{});var Mke=s(ku);$me=n(Mke,"STRONG",{});var tbt=s($me);z0o=r(tbt,"swin"),tbt.forEach(t),W0o=r(Mke," \u2014 "),tG=n(Mke,"A",{href:!0});var abt=s(tG);Q0o=r(abt,"SwinModel"),abt.forEach(t),H0o=r(Mke," (Swin Transformer model)"),Mke.forEach(t),U0o=i(x),Su=n(x,"LI",{});var Eke=s(Su);kme=n(Eke,"STRONG",{});var nbt=s(kme);J0o=r(nbt,"t5"),nbt.forEach(t),Y0o=r(Eke," \u2014 "),aG=n(Eke,"A",{href:!0});var sbt=s(aG);K0o=r(sbt,"T5Model"),sbt.forEach(t),Z0o=r(Eke," (T5 model)"),Eke.forEach(t),ewo=i(x),Ru=n(x,"LI",{});var Cke=s(Ru);Sme=n(Cke,"STRONG",{});var lbt=s(Sme);owo=r(lbt,"tapas"),lbt.forEach(t),rwo=r(Cke," \u2014 "),nG=n(Cke,"A",{href:!0});var ibt=s(nG);two=r(ibt,"TapasModel"),ibt.forEach(t),awo=r(Cke," (TAPAS model)"),Cke.forEach(t),nwo=i(x),Pu=n(x,"LI",{});var wke=s(Pu);Rme=n(wke,"STRONG",{});var dbt=s(Rme);swo=r(dbt,"trajectory_transformer"),dbt.forEach(t),lwo=r(wke," \u2014 "),sG=n(wke,"A",{href:!0});var cbt=s(sG);iwo=r(cbt,"TrajectoryTransformerModel"),cbt.forEach(t),dwo=r(wke," (Trajectory Transformer model)"),wke.forEach(t),cwo=i(x),Bu=n(x,"LI",{});var Ake=s(Bu);Pme=n(Ake,"STRONG",{});var fbt=s(Pme);fwo=r(fbt,"transfo-xl"),fbt.forEach(t),mwo=r(Ake," \u2014 "),lG=n(Ake,"A",{href:!0});var mbt=s(lG);gwo=r(mbt,"TransfoXLModel"),mbt.forEach(t),hwo=r(Ake," (Transformer-XL model)"),Ake.forEach(t),pwo=i(x),Iu=n(x,"LI",{});var Lke=s(Iu);Bme=n(Lke,"STRONG",{});var gbt=s(Bme);_wo=r(gbt,"unispeech"),gbt.forEach(t),uwo=r(Lke," \u2014 "),iG=n(Lke,"A",{href:!0});var hbt=s(iG);bwo=r(hbt,"UniSpeechModel"),hbt.forEach(t),vwo=r(Lke," (UniSpeech model)"),Lke.forEach(t),Fwo=i(x),Nu=n(x,"LI",{});var yke=s(Nu);Ime=n(yke,"STRONG",{});var pbt=s(Ime);Two=r(pbt,"unispeech-sat"),pbt.forEach(t),Mwo=r(yke," \u2014 "),dG=n(yke,"A",{href:!0});var _bt=s(dG);Ewo=r(_bt,"UniSpeechSatModel"),_bt.forEach(t),Cwo=r(yke," (UniSpeechSat model)"),yke.forEach(t),wwo=i(x),qu=n(x,"LI",{});var xke=s(qu);Nme=n(xke,"STRONG",{});var ubt=s(Nme);Awo=r(ubt,"van"),ubt.forEach(t),Lwo=r(xke," \u2014 "),cG=n(xke,"A",{href:!0});var bbt=s(cG);ywo=r(bbt,"VanModel"),bbt.forEach(t),xwo=r(xke," (VAN model)"),xke.forEach(t),$wo=i(x),ju=n(x,"LI",{});var $ke=s(ju);qme=n($ke,"STRONG",{});var vbt=s(qme);kwo=r(vbt,"vilt"),vbt.forEach(t),Swo=r($ke," \u2014 "),fG=n($ke,"A",{href:!0});var Fbt=s(fG);Rwo=r(Fbt,"ViltModel"),Fbt.forEach(t),Pwo=r($ke," (ViLT model)"),$ke.forEach(t),Bwo=i(x),Du=n(x,"LI",{});var kke=s(Du);jme=n(kke,"STRONG",{});var Tbt=s(jme);Iwo=r(Tbt,"vision-text-dual-encoder"),Tbt.forEach(t),Nwo=r(kke," \u2014 "),mG=n(kke,"A",{href:!0});var Mbt=s(mG);qwo=r(Mbt,"VisionTextDualEncoderModel"),Mbt.forEach(t),jwo=r(kke," (VisionTextDualEncoder model)"),kke.forEach(t),Dwo=i(x),Gu=n(x,"LI",{});var Ske=s(Gu);Dme=n(Ske,"STRONG",{});var Ebt=s(Dme);Gwo=r(Ebt,"visual_bert"),Ebt.forEach(t),Owo=r(Ske," \u2014 "),gG=n(Ske,"A",{href:!0});var Cbt=s(gG);Vwo=r(Cbt,"VisualBertModel"),Cbt.forEach(t),Xwo=r(Ske," (VisualBERT model)"),Ske.forEach(t),zwo=i(x),Ou=n(x,"LI",{});var Rke=s(Ou);Gme=n(Rke,"STRONG",{});var wbt=s(Gme);Wwo=r(wbt,"vit"),wbt.forEach(t),Qwo=r(Rke," \u2014 "),hG=n(Rke,"A",{href:!0});var Abt=s(hG);Hwo=r(Abt,"ViTModel"),Abt.forEach(t),Uwo=r(Rke," (ViT model)"),Rke.forEach(t),Jwo=i(x),Vu=n(x,"LI",{});var Pke=s(Vu);Ome=n(Pke,"STRONG",{});var Lbt=s(Ome);Ywo=r(Lbt,"vit_mae"),Lbt.forEach(t),Kwo=r(Pke," \u2014 "),pG=n(Pke,"A",{href:!0});var ybt=s(pG);Zwo=r(ybt,"ViTMAEModel"),ybt.forEach(t),eAo=r(Pke," (ViTMAE model)"),Pke.forEach(t),oAo=i(x),Xu=n(x,"LI",{});var Bke=s(Xu);Vme=n(Bke,"STRONG",{});var xbt=s(Vme);rAo=r(xbt,"wav2vec2"),xbt.forEach(t),tAo=r(Bke," \u2014 "),_G=n(Bke,"A",{href:!0});var $bt=s(_G);aAo=r($bt,"Wav2Vec2Model"),$bt.forEach(t),nAo=r(Bke," (Wav2Vec2 model)"),Bke.forEach(t),sAo=i(x),zu=n(x,"LI",{});var Ike=s(zu);Xme=n(Ike,"STRONG",{});var kbt=s(Xme);lAo=r(kbt,"wav2vec2-conformer"),kbt.forEach(t),iAo=r(Ike," \u2014 "),uG=n(Ike,"A",{href:!0});var Sbt=s(uG);dAo=r(Sbt,"Wav2Vec2ConformerModel"),Sbt.forEach(t),cAo=r(Ike," (Wav2Vec2-Conformer model)"),Ike.forEach(t),fAo=i(x),Wu=n(x,"LI",{});var Nke=s(Wu);zme=n(Nke,"STRONG",{});var Rbt=s(zme);mAo=r(Rbt,"wavlm"),Rbt.forEach(t),gAo=r(Nke," \u2014 "),bG=n(Nke,"A",{href:!0});var Pbt=s(bG);hAo=r(Pbt,"WavLMModel"),Pbt.forEach(t),pAo=r(Nke," (WavLM model)"),Nke.forEach(t),_Ao=i(x),Qu=n(x,"LI",{});var qke=s(Qu);Wme=n(qke,"STRONG",{});var Bbt=s(Wme);uAo=r(Bbt,"xglm"),Bbt.forEach(t),bAo=r(qke," \u2014 "),vG=n(qke,"A",{href:!0});var Ibt=s(vG);vAo=r(Ibt,"XGLMModel"),Ibt.forEach(t),FAo=r(qke," (XGLM model)"),qke.forEach(t),TAo=i(x),Hu=n(x,"LI",{});var jke=s(Hu);Qme=n(jke,"STRONG",{});var Nbt=s(Qme);MAo=r(Nbt,"xlm"),Nbt.forEach(t),EAo=r(jke," \u2014 "),FG=n(jke,"A",{href:!0});var qbt=s(FG);CAo=r(qbt,"XLMModel"),qbt.forEach(t),wAo=r(jke," (XLM model)"),jke.forEach(t),AAo=i(x),Uu=n(x,"LI",{});var Dke=s(Uu);Hme=n(Dke,"STRONG",{});var jbt=s(Hme);LAo=r(jbt,"xlm-prophetnet"),jbt.forEach(t),yAo=r(Dke," \u2014 "),TG=n(Dke,"A",{href:!0});var Dbt=s(TG);xAo=r(Dbt,"XLMProphetNetModel"),Dbt.forEach(t),$Ao=r(Dke," (XLM-ProphetNet model)"),Dke.forEach(t),kAo=i(x),Ju=n(x,"LI",{});var Gke=s(Ju);Ume=n(Gke,"STRONG",{});var Gbt=s(Ume);SAo=r(Gbt,"xlm-roberta"),Gbt.forEach(t),RAo=r(Gke," \u2014 "),MG=n(Gke,"A",{href:!0});var Obt=s(MG);PAo=r(Obt,"XLMRobertaModel"),Obt.forEach(t),BAo=r(Gke," (XLM-RoBERTa model)"),Gke.forEach(t),IAo=i(x),Yu=n(x,"LI",{});var Oke=s(Yu);Jme=n(Oke,"STRONG",{});var Vbt=s(Jme);NAo=r(Vbt,"xlm-roberta-xl"),Vbt.forEach(t),qAo=r(Oke," \u2014 "),EG=n(Oke,"A",{href:!0});var Xbt=s(EG);jAo=r(Xbt,"XLMRobertaXLModel"),Xbt.forEach(t),DAo=r(Oke," (XLM-RoBERTa-XL model)"),Oke.forEach(t),GAo=i(x),Ku=n(x,"LI",{});var Vke=s(Ku);Yme=n(Vke,"STRONG",{});var zbt=s(Yme);OAo=r(zbt,"xlnet"),zbt.forEach(t),VAo=r(Vke," \u2014 "),CG=n(Vke,"A",{href:!0});var Wbt=s(CG);XAo=r(Wbt,"XLNetModel"),Wbt.forEach(t),zAo=r(Vke," (XLNet model)"),Vke.forEach(t),WAo=i(x),Zu=n(x,"LI",{});var Xke=s(Zu);Kme=n(Xke,"STRONG",{});var Qbt=s(Kme);QAo=r(Qbt,"yolos"),Qbt.forEach(t),HAo=r(Xke," \u2014 "),wG=n(Xke,"A",{href:!0});var Hbt=s(wG);UAo=r(Hbt,"YolosModel"),Hbt.forEach(t),JAo=r(Xke," (YOLOS model)"),Xke.forEach(t),YAo=i(x),e2=n(x,"LI",{});var zke=s(e2);Zme=n(zke,"STRONG",{});var Ubt=s(Zme);KAo=r(Ubt,"yoso"),Ubt.forEach(t),ZAo=r(zke," \u2014 "),AG=n(zke,"A",{href:!0});var Jbt=s(AG);eLo=r(Jbt,"YosoModel"),Jbt.forEach(t),oLo=r(zke," (YOSO model)"),zke.forEach(t),x.forEach(t),rLo=i(la),o2=n(la,"P",{});var Wke=s(o2);tLo=r(Wke,"The model is set in evaluation mode by default using "),ege=n(Wke,"CODE",{});var Ybt=s(ege);aLo=r(Ybt,"model.eval()"),Ybt.forEach(t),nLo=r(Wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=n(Wke,"CODE",{});var Kbt=s(oge);sLo=r(Kbt,"model.train()"),Kbt.forEach(t),Wke.forEach(t),lLo=i(la),T(r2.$$.fragment,la),la.forEach(t),al.forEach(t),_ze=i(f),Wi=n(f,"H2",{class:!0});var MQe=s(Wi);t2=n(MQe,"A",{id:!0,class:!0,href:!0});var Zbt=s(t2);rge=n(Zbt,"SPAN",{});var evt=s(rge);T(UL.$$.fragment,evt),evt.forEach(t),Zbt.forEach(t),iLo=i(MQe),tge=n(MQe,"SPAN",{});var ovt=s(tge);dLo=r(ovt,"AutoModelForPreTraining"),ovt.forEach(t),MQe.forEach(t),uze=i(f),So=n(f,"DIV",{class:!0});var nl=s(So);T(JL.$$.fragment,nl),cLo=i(nl),Qi=n(nl,"P",{});var cte=s(Qi);fLo=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LG=n(cte,"A",{href:!0});var rvt=s(LG);mLo=r(rvt,"from_pretrained()"),rvt.forEach(t),gLo=r(cte," class method or the "),yG=n(cte,"A",{href:!0});var tvt=s(yG);hLo=r(tvt,"from_config()"),tvt.forEach(t),pLo=r(cte,` class
method.`),cte.forEach(t),_Lo=i(nl),YL=n(nl,"P",{});var EQe=s(YL);uLo=r(EQe,"This class cannot be instantiated directly using "),age=n(EQe,"CODE",{});var avt=s(age);bLo=r(avt,"__init__()"),avt.forEach(t),vLo=r(EQe," (throws an error)."),EQe.forEach(t),FLo=i(nl),dt=n(nl,"DIV",{class:!0});var Cw=s(dt);T(KL.$$.fragment,Cw),TLo=i(Cw),nge=n(Cw,"P",{});var nvt=s(nge);MLo=r(nvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nvt.forEach(t),ELo=i(Cw),Hi=n(Cw,"P",{});var fte=s(Hi);CLo=r(fte,`Note:
Loading a model from its configuration file does `),sge=n(fte,"STRONG",{});var svt=s(sge);wLo=r(svt,"not"),svt.forEach(t),ALo=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(fte,"A",{href:!0});var lvt=s(xG);LLo=r(lvt,"from_pretrained()"),lvt.forEach(t),yLo=r(fte," to load the model weights."),fte.forEach(t),xLo=i(Cw),T(a2.$$.fragment,Cw),Cw.forEach(t),$Lo=i(nl),Ke=n(nl,"DIV",{class:!0});var ia=s(Ke);T(ZL.$$.fragment,ia),kLo=i(ia),lge=n(ia,"P",{});var ivt=s(lge);SLo=r(ivt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ivt.forEach(t),RLo=i(ia),Na=n(ia,"P",{});var ww=s(Na);PLo=r(ww,"The model class to instantiate is selected based on the "),ige=n(ww,"CODE",{});var dvt=s(ige);BLo=r(dvt,"model_type"),dvt.forEach(t),ILo=r(ww,` property of the config object (either
passed as an argument or loaded from `),dge=n(ww,"CODE",{});var cvt=s(dge);NLo=r(cvt,"pretrained_model_name_or_path"),cvt.forEach(t),qLo=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(ww,"CODE",{});var fvt=s(cge);jLo=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),DLo=r(ww,":"),ww.forEach(t),GLo=i(ia),G=n(ia,"UL",{});var O=s(G);n2=n(O,"LI",{});var Qke=s(n2);fge=n(Qke,"STRONG",{});var mvt=s(fge);OLo=r(mvt,"albert"),mvt.forEach(t),VLo=r(Qke," \u2014 "),$G=n(Qke,"A",{href:!0});var gvt=s($G);XLo=r(gvt,"AlbertForPreTraining"),gvt.forEach(t),zLo=r(Qke," (ALBERT model)"),Qke.forEach(t),WLo=i(O),s2=n(O,"LI",{});var Hke=s(s2);mge=n(Hke,"STRONG",{});var hvt=s(mge);QLo=r(hvt,"bart"),hvt.forEach(t),HLo=r(Hke," \u2014 "),kG=n(Hke,"A",{href:!0});var pvt=s(kG);ULo=r(pvt,"BartForConditionalGeneration"),pvt.forEach(t),JLo=r(Hke," (BART model)"),Hke.forEach(t),YLo=i(O),l2=n(O,"LI",{});var Uke=s(l2);gge=n(Uke,"STRONG",{});var _vt=s(gge);KLo=r(_vt,"bert"),_vt.forEach(t),ZLo=r(Uke," \u2014 "),SG=n(Uke,"A",{href:!0});var uvt=s(SG);eyo=r(uvt,"BertForPreTraining"),uvt.forEach(t),oyo=r(Uke," (BERT model)"),Uke.forEach(t),ryo=i(O),i2=n(O,"LI",{});var Jke=s(i2);hge=n(Jke,"STRONG",{});var bvt=s(hge);tyo=r(bvt,"big_bird"),bvt.forEach(t),ayo=r(Jke," \u2014 "),RG=n(Jke,"A",{href:!0});var vvt=s(RG);nyo=r(vvt,"BigBirdForPreTraining"),vvt.forEach(t),syo=r(Jke," (BigBird model)"),Jke.forEach(t),lyo=i(O),d2=n(O,"LI",{});var Yke=s(d2);pge=n(Yke,"STRONG",{});var Fvt=s(pge);iyo=r(Fvt,"bloom"),Fvt.forEach(t),dyo=r(Yke," \u2014 "),PG=n(Yke,"A",{href:!0});var Tvt=s(PG);cyo=r(Tvt,"BloomForCausalLM"),Tvt.forEach(t),fyo=r(Yke," (BLOOM model)"),Yke.forEach(t),myo=i(O),c2=n(O,"LI",{});var Kke=s(c2);_ge=n(Kke,"STRONG",{});var Mvt=s(_ge);gyo=r(Mvt,"camembert"),Mvt.forEach(t),hyo=r(Kke," \u2014 "),BG=n(Kke,"A",{href:!0});var Evt=s(BG);pyo=r(Evt,"CamembertForMaskedLM"),Evt.forEach(t),_yo=r(Kke," (CamemBERT model)"),Kke.forEach(t),uyo=i(O),f2=n(O,"LI",{});var Zke=s(f2);uge=n(Zke,"STRONG",{});var Cvt=s(uge);byo=r(Cvt,"ctrl"),Cvt.forEach(t),vyo=r(Zke," \u2014 "),IG=n(Zke,"A",{href:!0});var wvt=s(IG);Fyo=r(wvt,"CTRLLMHeadModel"),wvt.forEach(t),Tyo=r(Zke," (CTRL model)"),Zke.forEach(t),Myo=i(O),m2=n(O,"LI",{});var eSe=s(m2);bge=n(eSe,"STRONG",{});var Avt=s(bge);Eyo=r(Avt,"data2vec-text"),Avt.forEach(t),Cyo=r(eSe," \u2014 "),NG=n(eSe,"A",{href:!0});var Lvt=s(NG);wyo=r(Lvt,"Data2VecTextForMaskedLM"),Lvt.forEach(t),Ayo=r(eSe," (Data2VecText model)"),eSe.forEach(t),Lyo=i(O),g2=n(O,"LI",{});var oSe=s(g2);vge=n(oSe,"STRONG",{});var yvt=s(vge);yyo=r(yvt,"deberta"),yvt.forEach(t),xyo=r(oSe," \u2014 "),qG=n(oSe,"A",{href:!0});var xvt=s(qG);$yo=r(xvt,"DebertaForMaskedLM"),xvt.forEach(t),kyo=r(oSe," (DeBERTa model)"),oSe.forEach(t),Syo=i(O),h2=n(O,"LI",{});var rSe=s(h2);Fge=n(rSe,"STRONG",{});var $vt=s(Fge);Ryo=r($vt,"deberta-v2"),$vt.forEach(t),Pyo=r(rSe," \u2014 "),jG=n(rSe,"A",{href:!0});var kvt=s(jG);Byo=r(kvt,"DebertaV2ForMaskedLM"),kvt.forEach(t),Iyo=r(rSe," (DeBERTa-v2 model)"),rSe.forEach(t),Nyo=i(O),p2=n(O,"LI",{});var tSe=s(p2);Tge=n(tSe,"STRONG",{});var Svt=s(Tge);qyo=r(Svt,"distilbert"),Svt.forEach(t),jyo=r(tSe," \u2014 "),DG=n(tSe,"A",{href:!0});var Rvt=s(DG);Dyo=r(Rvt,"DistilBertForMaskedLM"),Rvt.forEach(t),Gyo=r(tSe," (DistilBERT model)"),tSe.forEach(t),Oyo=i(O),_2=n(O,"LI",{});var aSe=s(_2);Mge=n(aSe,"STRONG",{});var Pvt=s(Mge);Vyo=r(Pvt,"electra"),Pvt.forEach(t),Xyo=r(aSe," \u2014 "),GG=n(aSe,"A",{href:!0});var Bvt=s(GG);zyo=r(Bvt,"ElectraForPreTraining"),Bvt.forEach(t),Wyo=r(aSe," (ELECTRA model)"),aSe.forEach(t),Qyo=i(O),u2=n(O,"LI",{});var nSe=s(u2);Ege=n(nSe,"STRONG",{});var Ivt=s(Ege);Hyo=r(Ivt,"flaubert"),Ivt.forEach(t),Uyo=r(nSe," \u2014 "),OG=n(nSe,"A",{href:!0});var Nvt=s(OG);Jyo=r(Nvt,"FlaubertWithLMHeadModel"),Nvt.forEach(t),Yyo=r(nSe," (FlauBERT model)"),nSe.forEach(t),Kyo=i(O),b2=n(O,"LI",{});var sSe=s(b2);Cge=n(sSe,"STRONG",{});var qvt=s(Cge);Zyo=r(qvt,"flava"),qvt.forEach(t),e9o=r(sSe," \u2014 "),VG=n(sSe,"A",{href:!0});var jvt=s(VG);o9o=r(jvt,"FlavaForPreTraining"),jvt.forEach(t),r9o=r(sSe," (FLAVA model)"),sSe.forEach(t),t9o=i(O),v2=n(O,"LI",{});var lSe=s(v2);wge=n(lSe,"STRONG",{});var Dvt=s(wge);a9o=r(Dvt,"fnet"),Dvt.forEach(t),n9o=r(lSe," \u2014 "),XG=n(lSe,"A",{href:!0});var Gvt=s(XG);s9o=r(Gvt,"FNetForPreTraining"),Gvt.forEach(t),l9o=r(lSe," (FNet model)"),lSe.forEach(t),i9o=i(O),F2=n(O,"LI",{});var iSe=s(F2);Age=n(iSe,"STRONG",{});var Ovt=s(Age);d9o=r(Ovt,"fsmt"),Ovt.forEach(t),c9o=r(iSe," \u2014 "),zG=n(iSe,"A",{href:!0});var Vvt=s(zG);f9o=r(Vvt,"FSMTForConditionalGeneration"),Vvt.forEach(t),m9o=r(iSe," (FairSeq Machine-Translation model)"),iSe.forEach(t),g9o=i(O),T2=n(O,"LI",{});var dSe=s(T2);Lge=n(dSe,"STRONG",{});var Xvt=s(Lge);h9o=r(Xvt,"funnel"),Xvt.forEach(t),p9o=r(dSe," \u2014 "),WG=n(dSe,"A",{href:!0});var zvt=s(WG);_9o=r(zvt,"FunnelForPreTraining"),zvt.forEach(t),u9o=r(dSe," (Funnel Transformer model)"),dSe.forEach(t),b9o=i(O),M2=n(O,"LI",{});var cSe=s(M2);yge=n(cSe,"STRONG",{});var Wvt=s(yge);v9o=r(Wvt,"gpt2"),Wvt.forEach(t),F9o=r(cSe," \u2014 "),QG=n(cSe,"A",{href:!0});var Qvt=s(QG);T9o=r(Qvt,"GPT2LMHeadModel"),Qvt.forEach(t),M9o=r(cSe," (OpenAI GPT-2 model)"),cSe.forEach(t),E9o=i(O),E2=n(O,"LI",{});var fSe=s(E2);xge=n(fSe,"STRONG",{});var Hvt=s(xge);C9o=r(Hvt,"ibert"),Hvt.forEach(t),w9o=r(fSe," \u2014 "),HG=n(fSe,"A",{href:!0});var Uvt=s(HG);A9o=r(Uvt,"IBertForMaskedLM"),Uvt.forEach(t),L9o=r(fSe," (I-BERT model)"),fSe.forEach(t),y9o=i(O),C2=n(O,"LI",{});var mSe=s(C2);$ge=n(mSe,"STRONG",{});var Jvt=s($ge);x9o=r(Jvt,"layoutlm"),Jvt.forEach(t),$9o=r(mSe," \u2014 "),UG=n(mSe,"A",{href:!0});var Yvt=s(UG);k9o=r(Yvt,"LayoutLMForMaskedLM"),Yvt.forEach(t),S9o=r(mSe," (LayoutLM model)"),mSe.forEach(t),R9o=i(O),w2=n(O,"LI",{});var gSe=s(w2);kge=n(gSe,"STRONG",{});var Kvt=s(kge);P9o=r(Kvt,"longformer"),Kvt.forEach(t),B9o=r(gSe," \u2014 "),JG=n(gSe,"A",{href:!0});var Zvt=s(JG);I9o=r(Zvt,"LongformerForMaskedLM"),Zvt.forEach(t),N9o=r(gSe," (Longformer model)"),gSe.forEach(t),q9o=i(O),A2=n(O,"LI",{});var hSe=s(A2);Sge=n(hSe,"STRONG",{});var eFt=s(Sge);j9o=r(eFt,"lxmert"),eFt.forEach(t),D9o=r(hSe," \u2014 "),YG=n(hSe,"A",{href:!0});var oFt=s(YG);G9o=r(oFt,"LxmertForPreTraining"),oFt.forEach(t),O9o=r(hSe," (LXMERT model)"),hSe.forEach(t),V9o=i(O),L2=n(O,"LI",{});var pSe=s(L2);Rge=n(pSe,"STRONG",{});var rFt=s(Rge);X9o=r(rFt,"megatron-bert"),rFt.forEach(t),z9o=r(pSe," \u2014 "),KG=n(pSe,"A",{href:!0});var tFt=s(KG);W9o=r(tFt,"MegatronBertForPreTraining"),tFt.forEach(t),Q9o=r(pSe," (Megatron-BERT model)"),pSe.forEach(t),H9o=i(O),y2=n(O,"LI",{});var _Se=s(y2);Pge=n(_Se,"STRONG",{});var aFt=s(Pge);U9o=r(aFt,"mobilebert"),aFt.forEach(t),J9o=r(_Se," \u2014 "),ZG=n(_Se,"A",{href:!0});var nFt=s(ZG);Y9o=r(nFt,"MobileBertForPreTraining"),nFt.forEach(t),K9o=r(_Se," (MobileBERT model)"),_Se.forEach(t),Z9o=i(O),x2=n(O,"LI",{});var uSe=s(x2);Bge=n(uSe,"STRONG",{});var sFt=s(Bge);exo=r(sFt,"mpnet"),sFt.forEach(t),oxo=r(uSe," \u2014 "),eO=n(uSe,"A",{href:!0});var lFt=s(eO);rxo=r(lFt,"MPNetForMaskedLM"),lFt.forEach(t),txo=r(uSe," (MPNet model)"),uSe.forEach(t),axo=i(O),$2=n(O,"LI",{});var bSe=s($2);Ige=n(bSe,"STRONG",{});var iFt=s(Ige);nxo=r(iFt,"mvp"),iFt.forEach(t),sxo=r(bSe," \u2014 "),oO=n(bSe,"A",{href:!0});var dFt=s(oO);lxo=r(dFt,"MvpForConditionalGeneration"),dFt.forEach(t),ixo=r(bSe," (MVP model)"),bSe.forEach(t),dxo=i(O),k2=n(O,"LI",{});var vSe=s(k2);Nge=n(vSe,"STRONG",{});var cFt=s(Nge);cxo=r(cFt,"nezha"),cFt.forEach(t),fxo=r(vSe," \u2014 "),rO=n(vSe,"A",{href:!0});var fFt=s(rO);mxo=r(fFt,"NezhaForPreTraining"),fFt.forEach(t),gxo=r(vSe," (Nezha model)"),vSe.forEach(t),hxo=i(O),S2=n(O,"LI",{});var FSe=s(S2);qge=n(FSe,"STRONG",{});var mFt=s(qge);pxo=r(mFt,"openai-gpt"),mFt.forEach(t),_xo=r(FSe," \u2014 "),tO=n(FSe,"A",{href:!0});var gFt=s(tO);uxo=r(gFt,"OpenAIGPTLMHeadModel"),gFt.forEach(t),bxo=r(FSe," (OpenAI GPT model)"),FSe.forEach(t),vxo=i(O),R2=n(O,"LI",{});var TSe=s(R2);jge=n(TSe,"STRONG",{});var hFt=s(jge);Fxo=r(hFt,"retribert"),hFt.forEach(t),Txo=r(TSe," \u2014 "),aO=n(TSe,"A",{href:!0});var pFt=s(aO);Mxo=r(pFt,"RetriBertModel"),pFt.forEach(t),Exo=r(TSe," (RetriBERT model)"),TSe.forEach(t),Cxo=i(O),P2=n(O,"LI",{});var MSe=s(P2);Dge=n(MSe,"STRONG",{});var _Ft=s(Dge);wxo=r(_Ft,"roberta"),_Ft.forEach(t),Axo=r(MSe," \u2014 "),nO=n(MSe,"A",{href:!0});var uFt=s(nO);Lxo=r(uFt,"RobertaForMaskedLM"),uFt.forEach(t),yxo=r(MSe," (RoBERTa model)"),MSe.forEach(t),xxo=i(O),B2=n(O,"LI",{});var ESe=s(B2);Gge=n(ESe,"STRONG",{});var bFt=s(Gge);$xo=r(bFt,"splinter"),bFt.forEach(t),kxo=r(ESe," \u2014 "),sO=n(ESe,"A",{href:!0});var vFt=s(sO);Sxo=r(vFt,"SplinterForPreTraining"),vFt.forEach(t),Rxo=r(ESe," (Splinter model)"),ESe.forEach(t),Pxo=i(O),I2=n(O,"LI",{});var CSe=s(I2);Oge=n(CSe,"STRONG",{});var FFt=s(Oge);Bxo=r(FFt,"squeezebert"),FFt.forEach(t),Ixo=r(CSe," \u2014 "),lO=n(CSe,"A",{href:!0});var TFt=s(lO);Nxo=r(TFt,"SqueezeBertForMaskedLM"),TFt.forEach(t),qxo=r(CSe," (SqueezeBERT model)"),CSe.forEach(t),jxo=i(O),N2=n(O,"LI",{});var wSe=s(N2);Vge=n(wSe,"STRONG",{});var MFt=s(Vge);Dxo=r(MFt,"t5"),MFt.forEach(t),Gxo=r(wSe," \u2014 "),iO=n(wSe,"A",{href:!0});var EFt=s(iO);Oxo=r(EFt,"T5ForConditionalGeneration"),EFt.forEach(t),Vxo=r(wSe," (T5 model)"),wSe.forEach(t),Xxo=i(O),q2=n(O,"LI",{});var ASe=s(q2);Xge=n(ASe,"STRONG",{});var CFt=s(Xge);zxo=r(CFt,"tapas"),CFt.forEach(t),Wxo=r(ASe," \u2014 "),dO=n(ASe,"A",{href:!0});var wFt=s(dO);Qxo=r(wFt,"TapasForMaskedLM"),wFt.forEach(t),Hxo=r(ASe," (TAPAS model)"),ASe.forEach(t),Uxo=i(O),j2=n(O,"LI",{});var LSe=s(j2);zge=n(LSe,"STRONG",{});var AFt=s(zge);Jxo=r(AFt,"transfo-xl"),AFt.forEach(t),Yxo=r(LSe," \u2014 "),cO=n(LSe,"A",{href:!0});var LFt=s(cO);Kxo=r(LFt,"TransfoXLLMHeadModel"),LFt.forEach(t),Zxo=r(LSe," (Transformer-XL model)"),LSe.forEach(t),e$o=i(O),D2=n(O,"LI",{});var ySe=s(D2);Wge=n(ySe,"STRONG",{});var yFt=s(Wge);o$o=r(yFt,"unispeech"),yFt.forEach(t),r$o=r(ySe," \u2014 "),fO=n(ySe,"A",{href:!0});var xFt=s(fO);t$o=r(xFt,"UniSpeechForPreTraining"),xFt.forEach(t),a$o=r(ySe," (UniSpeech model)"),ySe.forEach(t),n$o=i(O),G2=n(O,"LI",{});var xSe=s(G2);Qge=n(xSe,"STRONG",{});var $Ft=s(Qge);s$o=r($Ft,"unispeech-sat"),$Ft.forEach(t),l$o=r(xSe," \u2014 "),mO=n(xSe,"A",{href:!0});var kFt=s(mO);i$o=r(kFt,"UniSpeechSatForPreTraining"),kFt.forEach(t),d$o=r(xSe," (UniSpeechSat model)"),xSe.forEach(t),c$o=i(O),O2=n(O,"LI",{});var $Se=s(O2);Hge=n($Se,"STRONG",{});var SFt=s(Hge);f$o=r(SFt,"visual_bert"),SFt.forEach(t),m$o=r($Se," \u2014 "),gO=n($Se,"A",{href:!0});var RFt=s(gO);g$o=r(RFt,"VisualBertForPreTraining"),RFt.forEach(t),h$o=r($Se," (VisualBERT model)"),$Se.forEach(t),p$o=i(O),V2=n(O,"LI",{});var kSe=s(V2);Uge=n(kSe,"STRONG",{});var PFt=s(Uge);_$o=r(PFt,"vit_mae"),PFt.forEach(t),u$o=r(kSe," \u2014 "),hO=n(kSe,"A",{href:!0});var BFt=s(hO);b$o=r(BFt,"ViTMAEForPreTraining"),BFt.forEach(t),v$o=r(kSe," (ViTMAE model)"),kSe.forEach(t),F$o=i(O),X2=n(O,"LI",{});var SSe=s(X2);Jge=n(SSe,"STRONG",{});var IFt=s(Jge);T$o=r(IFt,"wav2vec2"),IFt.forEach(t),M$o=r(SSe," \u2014 "),pO=n(SSe,"A",{href:!0});var NFt=s(pO);E$o=r(NFt,"Wav2Vec2ForPreTraining"),NFt.forEach(t),C$o=r(SSe," (Wav2Vec2 model)"),SSe.forEach(t),w$o=i(O),z2=n(O,"LI",{});var RSe=s(z2);Yge=n(RSe,"STRONG",{});var qFt=s(Yge);A$o=r(qFt,"wav2vec2-conformer"),qFt.forEach(t),L$o=r(RSe," \u2014 "),_O=n(RSe,"A",{href:!0});var jFt=s(_O);y$o=r(jFt,"Wav2Vec2ConformerForPreTraining"),jFt.forEach(t),x$o=r(RSe," (Wav2Vec2-Conformer model)"),RSe.forEach(t),$$o=i(O),W2=n(O,"LI",{});var PSe=s(W2);Kge=n(PSe,"STRONG",{});var DFt=s(Kge);k$o=r(DFt,"xlm"),DFt.forEach(t),S$o=r(PSe," \u2014 "),uO=n(PSe,"A",{href:!0});var GFt=s(uO);R$o=r(GFt,"XLMWithLMHeadModel"),GFt.forEach(t),P$o=r(PSe," (XLM model)"),PSe.forEach(t),B$o=i(O),Q2=n(O,"LI",{});var BSe=s(Q2);Zge=n(BSe,"STRONG",{});var OFt=s(Zge);I$o=r(OFt,"xlm-roberta"),OFt.forEach(t),N$o=r(BSe," \u2014 "),bO=n(BSe,"A",{href:!0});var VFt=s(bO);q$o=r(VFt,"XLMRobertaForMaskedLM"),VFt.forEach(t),j$o=r(BSe," (XLM-RoBERTa model)"),BSe.forEach(t),D$o=i(O),H2=n(O,"LI",{});var ISe=s(H2);ehe=n(ISe,"STRONG",{});var XFt=s(ehe);G$o=r(XFt,"xlm-roberta-xl"),XFt.forEach(t),O$o=r(ISe," \u2014 "),vO=n(ISe,"A",{href:!0});var zFt=s(vO);V$o=r(zFt,"XLMRobertaXLForMaskedLM"),zFt.forEach(t),X$o=r(ISe," (XLM-RoBERTa-XL model)"),ISe.forEach(t),z$o=i(O),U2=n(O,"LI",{});var NSe=s(U2);ohe=n(NSe,"STRONG",{});var WFt=s(ohe);W$o=r(WFt,"xlnet"),WFt.forEach(t),Q$o=r(NSe," \u2014 "),FO=n(NSe,"A",{href:!0});var QFt=s(FO);H$o=r(QFt,"XLNetLMHeadModel"),QFt.forEach(t),U$o=r(NSe," (XLNet model)"),NSe.forEach(t),O.forEach(t),J$o=i(ia),J2=n(ia,"P",{});var qSe=s(J2);Y$o=r(qSe,"The model is set in evaluation mode by default using "),rhe=n(qSe,"CODE",{});var HFt=s(rhe);K$o=r(HFt,"model.eval()"),HFt.forEach(t),Z$o=r(qSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=n(qSe,"CODE",{});var UFt=s(the);eko=r(UFt,"model.train()"),UFt.forEach(t),qSe.forEach(t),oko=i(ia),T(Y2.$$.fragment,ia),ia.forEach(t),nl.forEach(t),bze=i(f),Ui=n(f,"H2",{class:!0});var CQe=s(Ui);K2=n(CQe,"A",{id:!0,class:!0,href:!0});var JFt=s(K2);ahe=n(JFt,"SPAN",{});var YFt=s(ahe);T(ey.$$.fragment,YFt),YFt.forEach(t),JFt.forEach(t),rko=i(CQe),nhe=n(CQe,"SPAN",{});var KFt=s(nhe);tko=r(KFt,"AutoModelForCausalLM"),KFt.forEach(t),CQe.forEach(t),vze=i(f),Ro=n(f,"DIV",{class:!0});var sl=s(Ro);T(oy.$$.fragment,sl),ako=i(sl),Ji=n(sl,"P",{});var mte=s(Ji);nko=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TO=n(mte,"A",{href:!0});var ZFt=s(TO);sko=r(ZFt,"from_pretrained()"),ZFt.forEach(t),lko=r(mte," class method or the "),MO=n(mte,"A",{href:!0});var e6t=s(MO);iko=r(e6t,"from_config()"),e6t.forEach(t),dko=r(mte,` class
method.`),mte.forEach(t),cko=i(sl),ry=n(sl,"P",{});var wQe=s(ry);fko=r(wQe,"This class cannot be instantiated directly using "),she=n(wQe,"CODE",{});var o6t=s(she);mko=r(o6t,"__init__()"),o6t.forEach(t),gko=r(wQe," (throws an error)."),wQe.forEach(t),hko=i(sl),ct=n(sl,"DIV",{class:!0});var Aw=s(ct);T(ty.$$.fragment,Aw),pko=i(Aw),lhe=n(Aw,"P",{});var r6t=s(lhe);_ko=r(r6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),r6t.forEach(t),uko=i(Aw),Yi=n(Aw,"P",{});var gte=s(Yi);bko=r(gte,`Note:
Loading a model from its configuration file does `),ihe=n(gte,"STRONG",{});var t6t=s(ihe);vko=r(t6t,"not"),t6t.forEach(t),Fko=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EO=n(gte,"A",{href:!0});var a6t=s(EO);Tko=r(a6t,"from_pretrained()"),a6t.forEach(t),Mko=r(gte," to load the model weights."),gte.forEach(t),Eko=i(Aw),T(Z2.$$.fragment,Aw),Aw.forEach(t),Cko=i(sl),Ze=n(sl,"DIV",{class:!0});var da=s(Ze);T(ay.$$.fragment,da),wko=i(da),dhe=n(da,"P",{});var n6t=s(dhe);Ako=r(n6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),n6t.forEach(t),Lko=i(da),qa=n(da,"P",{});var Lw=s(qa);yko=r(Lw,"The model class to instantiate is selected based on the "),che=n(Lw,"CODE",{});var s6t=s(che);xko=r(s6t,"model_type"),s6t.forEach(t),$ko=r(Lw,` property of the config object (either
passed as an argument or loaded from `),fhe=n(Lw,"CODE",{});var l6t=s(fhe);kko=r(l6t,"pretrained_model_name_or_path"),l6t.forEach(t),Sko=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=n(Lw,"CODE",{});var i6t=s(mhe);Rko=r(i6t,"pretrained_model_name_or_path"),i6t.forEach(t),Pko=r(Lw,":"),Lw.forEach(t),Bko=i(da),z=n(da,"UL",{});var W=s(z);e1=n(W,"LI",{});var jSe=s(e1);ghe=n(jSe,"STRONG",{});var d6t=s(ghe);Iko=r(d6t,"bart"),d6t.forEach(t),Nko=r(jSe," \u2014 "),CO=n(jSe,"A",{href:!0});var c6t=s(CO);qko=r(c6t,"BartForCausalLM"),c6t.forEach(t),jko=r(jSe," (BART model)"),jSe.forEach(t),Dko=i(W),o1=n(W,"LI",{});var DSe=s(o1);hhe=n(DSe,"STRONG",{});var f6t=s(hhe);Gko=r(f6t,"bert"),f6t.forEach(t),Oko=r(DSe," \u2014 "),wO=n(DSe,"A",{href:!0});var m6t=s(wO);Vko=r(m6t,"BertLMHeadModel"),m6t.forEach(t),Xko=r(DSe," (BERT model)"),DSe.forEach(t),zko=i(W),r1=n(W,"LI",{});var GSe=s(r1);phe=n(GSe,"STRONG",{});var g6t=s(phe);Wko=r(g6t,"bert-generation"),g6t.forEach(t),Qko=r(GSe," \u2014 "),AO=n(GSe,"A",{href:!0});var h6t=s(AO);Hko=r(h6t,"BertGenerationDecoder"),h6t.forEach(t),Uko=r(GSe," (Bert Generation model)"),GSe.forEach(t),Jko=i(W),t1=n(W,"LI",{});var OSe=s(t1);_he=n(OSe,"STRONG",{});var p6t=s(_he);Yko=r(p6t,"big_bird"),p6t.forEach(t),Kko=r(OSe," \u2014 "),LO=n(OSe,"A",{href:!0});var _6t=s(LO);Zko=r(_6t,"BigBirdForCausalLM"),_6t.forEach(t),eSo=r(OSe," (BigBird model)"),OSe.forEach(t),oSo=i(W),a1=n(W,"LI",{});var VSe=s(a1);uhe=n(VSe,"STRONG",{});var u6t=s(uhe);rSo=r(u6t,"bigbird_pegasus"),u6t.forEach(t),tSo=r(VSe," \u2014 "),yO=n(VSe,"A",{href:!0});var b6t=s(yO);aSo=r(b6t,"BigBirdPegasusForCausalLM"),b6t.forEach(t),nSo=r(VSe," (BigBird-Pegasus model)"),VSe.forEach(t),sSo=i(W),n1=n(W,"LI",{});var XSe=s(n1);bhe=n(XSe,"STRONG",{});var v6t=s(bhe);lSo=r(v6t,"blenderbot"),v6t.forEach(t),iSo=r(XSe," \u2014 "),xO=n(XSe,"A",{href:!0});var F6t=s(xO);dSo=r(F6t,"BlenderbotForCausalLM"),F6t.forEach(t),cSo=r(XSe," (Blenderbot model)"),XSe.forEach(t),fSo=i(W),s1=n(W,"LI",{});var zSe=s(s1);vhe=n(zSe,"STRONG",{});var T6t=s(vhe);mSo=r(T6t,"blenderbot-small"),T6t.forEach(t),gSo=r(zSe," \u2014 "),$O=n(zSe,"A",{href:!0});var M6t=s($O);hSo=r(M6t,"BlenderbotSmallForCausalLM"),M6t.forEach(t),pSo=r(zSe," (BlenderbotSmall model)"),zSe.forEach(t),_So=i(W),l1=n(W,"LI",{});var WSe=s(l1);Fhe=n(WSe,"STRONG",{});var E6t=s(Fhe);uSo=r(E6t,"bloom"),E6t.forEach(t),bSo=r(WSe," \u2014 "),kO=n(WSe,"A",{href:!0});var C6t=s(kO);vSo=r(C6t,"BloomForCausalLM"),C6t.forEach(t),FSo=r(WSe," (BLOOM model)"),WSe.forEach(t),TSo=i(W),i1=n(W,"LI",{});var QSe=s(i1);The=n(QSe,"STRONG",{});var w6t=s(The);MSo=r(w6t,"camembert"),w6t.forEach(t),ESo=r(QSe," \u2014 "),SO=n(QSe,"A",{href:!0});var A6t=s(SO);CSo=r(A6t,"CamembertForCausalLM"),A6t.forEach(t),wSo=r(QSe," (CamemBERT model)"),QSe.forEach(t),ASo=i(W),d1=n(W,"LI",{});var HSe=s(d1);Mhe=n(HSe,"STRONG",{});var L6t=s(Mhe);LSo=r(L6t,"codegen"),L6t.forEach(t),ySo=r(HSe," \u2014 "),RO=n(HSe,"A",{href:!0});var y6t=s(RO);xSo=r(y6t,"CodeGenForCausalLM"),y6t.forEach(t),$So=r(HSe," (CodeGen model)"),HSe.forEach(t),kSo=i(W),c1=n(W,"LI",{});var USe=s(c1);Ehe=n(USe,"STRONG",{});var x6t=s(Ehe);SSo=r(x6t,"ctrl"),x6t.forEach(t),RSo=r(USe," \u2014 "),PO=n(USe,"A",{href:!0});var $6t=s(PO);PSo=r($6t,"CTRLLMHeadModel"),$6t.forEach(t),BSo=r(USe," (CTRL model)"),USe.forEach(t),ISo=i(W),f1=n(W,"LI",{});var JSe=s(f1);Che=n(JSe,"STRONG",{});var k6t=s(Che);NSo=r(k6t,"data2vec-text"),k6t.forEach(t),qSo=r(JSe," \u2014 "),BO=n(JSe,"A",{href:!0});var S6t=s(BO);jSo=r(S6t,"Data2VecTextForCausalLM"),S6t.forEach(t),DSo=r(JSe," (Data2VecText model)"),JSe.forEach(t),GSo=i(W),m1=n(W,"LI",{});var YSe=s(m1);whe=n(YSe,"STRONG",{});var R6t=s(whe);OSo=r(R6t,"electra"),R6t.forEach(t),VSo=r(YSe," \u2014 "),IO=n(YSe,"A",{href:!0});var P6t=s(IO);XSo=r(P6t,"ElectraForCausalLM"),P6t.forEach(t),zSo=r(YSe," (ELECTRA model)"),YSe.forEach(t),WSo=i(W),g1=n(W,"LI",{});var KSe=s(g1);Ahe=n(KSe,"STRONG",{});var B6t=s(Ahe);QSo=r(B6t,"gpt2"),B6t.forEach(t),HSo=r(KSe," \u2014 "),NO=n(KSe,"A",{href:!0});var I6t=s(NO);USo=r(I6t,"GPT2LMHeadModel"),I6t.forEach(t),JSo=r(KSe," (OpenAI GPT-2 model)"),KSe.forEach(t),YSo=i(W),h1=n(W,"LI",{});var ZSe=s(h1);Lhe=n(ZSe,"STRONG",{});var N6t=s(Lhe);KSo=r(N6t,"gpt_neo"),N6t.forEach(t),ZSo=r(ZSe," \u2014 "),qO=n(ZSe,"A",{href:!0});var q6t=s(qO);eRo=r(q6t,"GPTNeoForCausalLM"),q6t.forEach(t),oRo=r(ZSe," (GPT Neo model)"),ZSe.forEach(t),rRo=i(W),p1=n(W,"LI",{});var eRe=s(p1);yhe=n(eRe,"STRONG",{});var j6t=s(yhe);tRo=r(j6t,"gpt_neox"),j6t.forEach(t),aRo=r(eRe," \u2014 "),jO=n(eRe,"A",{href:!0});var D6t=s(jO);nRo=r(D6t,"GPTNeoXForCausalLM"),D6t.forEach(t),sRo=r(eRe," (GPT NeoX model)"),eRe.forEach(t),lRo=i(W),_1=n(W,"LI",{});var oRe=s(_1);xhe=n(oRe,"STRONG",{});var G6t=s(xhe);iRo=r(G6t,"gptj"),G6t.forEach(t),dRo=r(oRe," \u2014 "),DO=n(oRe,"A",{href:!0});var O6t=s(DO);cRo=r(O6t,"GPTJForCausalLM"),O6t.forEach(t),fRo=r(oRe," (GPT-J model)"),oRe.forEach(t),mRo=i(W),u1=n(W,"LI",{});var rRe=s(u1);$he=n(rRe,"STRONG",{});var V6t=s($he);gRo=r(V6t,"marian"),V6t.forEach(t),hRo=r(rRe," \u2014 "),GO=n(rRe,"A",{href:!0});var X6t=s(GO);pRo=r(X6t,"MarianForCausalLM"),X6t.forEach(t),_Ro=r(rRe," (Marian model)"),rRe.forEach(t),uRo=i(W),b1=n(W,"LI",{});var tRe=s(b1);khe=n(tRe,"STRONG",{});var z6t=s(khe);bRo=r(z6t,"mbart"),z6t.forEach(t),vRo=r(tRe," \u2014 "),OO=n(tRe,"A",{href:!0});var W6t=s(OO);FRo=r(W6t,"MBartForCausalLM"),W6t.forEach(t),TRo=r(tRe," (mBART model)"),tRe.forEach(t),MRo=i(W),v1=n(W,"LI",{});var aRe=s(v1);She=n(aRe,"STRONG",{});var Q6t=s(She);ERo=r(Q6t,"megatron-bert"),Q6t.forEach(t),CRo=r(aRe," \u2014 "),VO=n(aRe,"A",{href:!0});var H6t=s(VO);wRo=r(H6t,"MegatronBertForCausalLM"),H6t.forEach(t),ARo=r(aRe," (Megatron-BERT model)"),aRe.forEach(t),LRo=i(W),F1=n(W,"LI",{});var nRe=s(F1);Rhe=n(nRe,"STRONG",{});var U6t=s(Rhe);yRo=r(U6t,"mvp"),U6t.forEach(t),xRo=r(nRe," \u2014 "),XO=n(nRe,"A",{href:!0});var J6t=s(XO);$Ro=r(J6t,"MvpForCausalLM"),J6t.forEach(t),kRo=r(nRe," (MVP model)"),nRe.forEach(t),SRo=i(W),T1=n(W,"LI",{});var sRe=s(T1);Phe=n(sRe,"STRONG",{});var Y6t=s(Phe);RRo=r(Y6t,"openai-gpt"),Y6t.forEach(t),PRo=r(sRe," \u2014 "),zO=n(sRe,"A",{href:!0});var K6t=s(zO);BRo=r(K6t,"OpenAIGPTLMHeadModel"),K6t.forEach(t),IRo=r(sRe," (OpenAI GPT model)"),sRe.forEach(t),NRo=i(W),M1=n(W,"LI",{});var lRe=s(M1);Bhe=n(lRe,"STRONG",{});var Z6t=s(Bhe);qRo=r(Z6t,"opt"),Z6t.forEach(t),jRo=r(lRe," \u2014 "),WO=n(lRe,"A",{href:!0});var eTt=s(WO);DRo=r(eTt,"OPTForCausalLM"),eTt.forEach(t),GRo=r(lRe," (OPT model)"),lRe.forEach(t),ORo=i(W),E1=n(W,"LI",{});var iRe=s(E1);Ihe=n(iRe,"STRONG",{});var oTt=s(Ihe);VRo=r(oTt,"pegasus"),oTt.forEach(t),XRo=r(iRe," \u2014 "),QO=n(iRe,"A",{href:!0});var rTt=s(QO);zRo=r(rTt,"PegasusForCausalLM"),rTt.forEach(t),WRo=r(iRe," (Pegasus model)"),iRe.forEach(t),QRo=i(W),C1=n(W,"LI",{});var dRe=s(C1);Nhe=n(dRe,"STRONG",{});var tTt=s(Nhe);HRo=r(tTt,"plbart"),tTt.forEach(t),URo=r(dRe," \u2014 "),HO=n(dRe,"A",{href:!0});var aTt=s(HO);JRo=r(aTt,"PLBartForCausalLM"),aTt.forEach(t),YRo=r(dRe," (PLBart model)"),dRe.forEach(t),KRo=i(W),w1=n(W,"LI",{});var cRe=s(w1);qhe=n(cRe,"STRONG",{});var nTt=s(qhe);ZRo=r(nTt,"prophetnet"),nTt.forEach(t),ePo=r(cRe," \u2014 "),UO=n(cRe,"A",{href:!0});var sTt=s(UO);oPo=r(sTt,"ProphetNetForCausalLM"),sTt.forEach(t),rPo=r(cRe," (ProphetNet model)"),cRe.forEach(t),tPo=i(W),A1=n(W,"LI",{});var fRe=s(A1);jhe=n(fRe,"STRONG",{});var lTt=s(jhe);aPo=r(lTt,"qdqbert"),lTt.forEach(t),nPo=r(fRe," \u2014 "),JO=n(fRe,"A",{href:!0});var iTt=s(JO);sPo=r(iTt,"QDQBertLMHeadModel"),iTt.forEach(t),lPo=r(fRe," (QDQBert model)"),fRe.forEach(t),iPo=i(W),L1=n(W,"LI",{});var mRe=s(L1);Dhe=n(mRe,"STRONG",{});var dTt=s(Dhe);dPo=r(dTt,"reformer"),dTt.forEach(t),cPo=r(mRe," \u2014 "),YO=n(mRe,"A",{href:!0});var cTt=s(YO);fPo=r(cTt,"ReformerModelWithLMHead"),cTt.forEach(t),mPo=r(mRe," (Reformer model)"),mRe.forEach(t),gPo=i(W),y1=n(W,"LI",{});var gRe=s(y1);Ghe=n(gRe,"STRONG",{});var fTt=s(Ghe);hPo=r(fTt,"rembert"),fTt.forEach(t),pPo=r(gRe," \u2014 "),KO=n(gRe,"A",{href:!0});var mTt=s(KO);_Po=r(mTt,"RemBertForCausalLM"),mTt.forEach(t),uPo=r(gRe," (RemBERT model)"),gRe.forEach(t),bPo=i(W),x1=n(W,"LI",{});var hRe=s(x1);Ohe=n(hRe,"STRONG",{});var gTt=s(Ohe);vPo=r(gTt,"roberta"),gTt.forEach(t),FPo=r(hRe," \u2014 "),ZO=n(hRe,"A",{href:!0});var hTt=s(ZO);TPo=r(hTt,"RobertaForCausalLM"),hTt.forEach(t),MPo=r(hRe," (RoBERTa model)"),hRe.forEach(t),EPo=i(W),$1=n(W,"LI",{});var pRe=s($1);Vhe=n(pRe,"STRONG",{});var pTt=s(Vhe);CPo=r(pTt,"roformer"),pTt.forEach(t),wPo=r(pRe," \u2014 "),eV=n(pRe,"A",{href:!0});var _Tt=s(eV);APo=r(_Tt,"RoFormerForCausalLM"),_Tt.forEach(t),LPo=r(pRe," (RoFormer model)"),pRe.forEach(t),yPo=i(W),k1=n(W,"LI",{});var _Re=s(k1);Xhe=n(_Re,"STRONG",{});var uTt=s(Xhe);xPo=r(uTt,"speech_to_text_2"),uTt.forEach(t),$Po=r(_Re," \u2014 "),oV=n(_Re,"A",{href:!0});var bTt=s(oV);kPo=r(bTt,"Speech2Text2ForCausalLM"),bTt.forEach(t),SPo=r(_Re," (Speech2Text2 model)"),_Re.forEach(t),RPo=i(W),S1=n(W,"LI",{});var uRe=s(S1);zhe=n(uRe,"STRONG",{});var vTt=s(zhe);PPo=r(vTt,"transfo-xl"),vTt.forEach(t),BPo=r(uRe," \u2014 "),rV=n(uRe,"A",{href:!0});var FTt=s(rV);IPo=r(FTt,"TransfoXLLMHeadModel"),FTt.forEach(t),NPo=r(uRe," (Transformer-XL model)"),uRe.forEach(t),qPo=i(W),R1=n(W,"LI",{});var bRe=s(R1);Whe=n(bRe,"STRONG",{});var TTt=s(Whe);jPo=r(TTt,"trocr"),TTt.forEach(t),DPo=r(bRe," \u2014 "),tV=n(bRe,"A",{href:!0});var MTt=s(tV);GPo=r(MTt,"TrOCRForCausalLM"),MTt.forEach(t),OPo=r(bRe," (TrOCR model)"),bRe.forEach(t),VPo=i(W),P1=n(W,"LI",{});var vRe=s(P1);Qhe=n(vRe,"STRONG",{});var ETt=s(Qhe);XPo=r(ETt,"xglm"),ETt.forEach(t),zPo=r(vRe," \u2014 "),aV=n(vRe,"A",{href:!0});var CTt=s(aV);WPo=r(CTt,"XGLMForCausalLM"),CTt.forEach(t),QPo=r(vRe," (XGLM model)"),vRe.forEach(t),HPo=i(W),B1=n(W,"LI",{});var FRe=s(B1);Hhe=n(FRe,"STRONG",{});var wTt=s(Hhe);UPo=r(wTt,"xlm"),wTt.forEach(t),JPo=r(FRe," \u2014 "),nV=n(FRe,"A",{href:!0});var ATt=s(nV);YPo=r(ATt,"XLMWithLMHeadModel"),ATt.forEach(t),KPo=r(FRe," (XLM model)"),FRe.forEach(t),ZPo=i(W),I1=n(W,"LI",{});var TRe=s(I1);Uhe=n(TRe,"STRONG",{});var LTt=s(Uhe);eBo=r(LTt,"xlm-prophetnet"),LTt.forEach(t),oBo=r(TRe," \u2014 "),sV=n(TRe,"A",{href:!0});var yTt=s(sV);rBo=r(yTt,"XLMProphetNetForCausalLM"),yTt.forEach(t),tBo=r(TRe," (XLM-ProphetNet model)"),TRe.forEach(t),aBo=i(W),N1=n(W,"LI",{});var MRe=s(N1);Jhe=n(MRe,"STRONG",{});var xTt=s(Jhe);nBo=r(xTt,"xlm-roberta"),xTt.forEach(t),sBo=r(MRe," \u2014 "),lV=n(MRe,"A",{href:!0});var $Tt=s(lV);lBo=r($Tt,"XLMRobertaForCausalLM"),$Tt.forEach(t),iBo=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),dBo=i(W),q1=n(W,"LI",{});var ERe=s(q1);Yhe=n(ERe,"STRONG",{});var kTt=s(Yhe);cBo=r(kTt,"xlm-roberta-xl"),kTt.forEach(t),fBo=r(ERe," \u2014 "),iV=n(ERe,"A",{href:!0});var STt=s(iV);mBo=r(STt,"XLMRobertaXLForCausalLM"),STt.forEach(t),gBo=r(ERe," (XLM-RoBERTa-XL model)"),ERe.forEach(t),hBo=i(W),j1=n(W,"LI",{});var CRe=s(j1);Khe=n(CRe,"STRONG",{});var RTt=s(Khe);pBo=r(RTt,"xlnet"),RTt.forEach(t),_Bo=r(CRe," \u2014 "),dV=n(CRe,"A",{href:!0});var PTt=s(dV);uBo=r(PTt,"XLNetLMHeadModel"),PTt.forEach(t),bBo=r(CRe," (XLNet model)"),CRe.forEach(t),W.forEach(t),vBo=i(da),D1=n(da,"P",{});var wRe=s(D1);FBo=r(wRe,"The model is set in evaluation mode by default using "),Zhe=n(wRe,"CODE",{});var BTt=s(Zhe);TBo=r(BTt,"model.eval()"),BTt.forEach(t),MBo=r(wRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(wRe,"CODE",{});var ITt=s(epe);EBo=r(ITt,"model.train()"),ITt.forEach(t),wRe.forEach(t),CBo=i(da),T(G1.$$.fragment,da),da.forEach(t),sl.forEach(t),Fze=i(f),Ki=n(f,"H2",{class:!0});var AQe=s(Ki);O1=n(AQe,"A",{id:!0,class:!0,href:!0});var NTt=s(O1);ope=n(NTt,"SPAN",{});var qTt=s(ope);T(ny.$$.fragment,qTt),qTt.forEach(t),NTt.forEach(t),wBo=i(AQe),rpe=n(AQe,"SPAN",{});var jTt=s(rpe);ABo=r(jTt,"AutoModelForMaskedLM"),jTt.forEach(t),AQe.forEach(t),Tze=i(f),Po=n(f,"DIV",{class:!0});var ll=s(Po);T(sy.$$.fragment,ll),LBo=i(ll),Zi=n(ll,"P",{});var hte=s(Zi);yBo=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cV=n(hte,"A",{href:!0});var DTt=s(cV);xBo=r(DTt,"from_pretrained()"),DTt.forEach(t),$Bo=r(hte," class method or the "),fV=n(hte,"A",{href:!0});var GTt=s(fV);kBo=r(GTt,"from_config()"),GTt.forEach(t),SBo=r(hte,` class
method.`),hte.forEach(t),RBo=i(ll),ly=n(ll,"P",{});var LQe=s(ly);PBo=r(LQe,"This class cannot be instantiated directly using "),tpe=n(LQe,"CODE",{});var OTt=s(tpe);BBo=r(OTt,"__init__()"),OTt.forEach(t),IBo=r(LQe," (throws an error)."),LQe.forEach(t),NBo=i(ll),ft=n(ll,"DIV",{class:!0});var yw=s(ft);T(iy.$$.fragment,yw),qBo=i(yw),ape=n(yw,"P",{});var VTt=s(ape);jBo=r(VTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VTt.forEach(t),DBo=i(yw),ed=n(yw,"P",{});var pte=s(ed);GBo=r(pte,`Note:
Loading a model from its configuration file does `),npe=n(pte,"STRONG",{});var XTt=s(npe);OBo=r(XTt,"not"),XTt.forEach(t),VBo=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=n(pte,"A",{href:!0});var zTt=s(mV);XBo=r(zTt,"from_pretrained()"),zTt.forEach(t),zBo=r(pte," to load the model weights."),pte.forEach(t),WBo=i(yw),T(V1.$$.fragment,yw),yw.forEach(t),QBo=i(ll),eo=n(ll,"DIV",{class:!0});var ca=s(eo);T(dy.$$.fragment,ca),HBo=i(ca),spe=n(ca,"P",{});var WTt=s(spe);UBo=r(WTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),WTt.forEach(t),JBo=i(ca),ja=n(ca,"P",{});var xw=s(ja);YBo=r(xw,"The model class to instantiate is selected based on the "),lpe=n(xw,"CODE",{});var QTt=s(lpe);KBo=r(QTt,"model_type"),QTt.forEach(t),ZBo=r(xw,` property of the config object (either
passed as an argument or loaded from `),ipe=n(xw,"CODE",{});var HTt=s(ipe);eIo=r(HTt,"pretrained_model_name_or_path"),HTt.forEach(t),oIo=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(xw,"CODE",{});var UTt=s(dpe);rIo=r(UTt,"pretrained_model_name_or_path"),UTt.forEach(t),tIo=r(xw,":"),xw.forEach(t),aIo=i(ca),Q=n(ca,"UL",{});var H=s(Q);X1=n(H,"LI",{});var ARe=s(X1);cpe=n(ARe,"STRONG",{});var JTt=s(cpe);nIo=r(JTt,"albert"),JTt.forEach(t),sIo=r(ARe," \u2014 "),gV=n(ARe,"A",{href:!0});var YTt=s(gV);lIo=r(YTt,"AlbertForMaskedLM"),YTt.forEach(t),iIo=r(ARe," (ALBERT model)"),ARe.forEach(t),dIo=i(H),z1=n(H,"LI",{});var LRe=s(z1);fpe=n(LRe,"STRONG",{});var KTt=s(fpe);cIo=r(KTt,"bart"),KTt.forEach(t),fIo=r(LRe," \u2014 "),hV=n(LRe,"A",{href:!0});var ZTt=s(hV);mIo=r(ZTt,"BartForConditionalGeneration"),ZTt.forEach(t),gIo=r(LRe," (BART model)"),LRe.forEach(t),hIo=i(H),W1=n(H,"LI",{});var yRe=s(W1);mpe=n(yRe,"STRONG",{});var e7t=s(mpe);pIo=r(e7t,"bert"),e7t.forEach(t),_Io=r(yRe," \u2014 "),pV=n(yRe,"A",{href:!0});var o7t=s(pV);uIo=r(o7t,"BertForMaskedLM"),o7t.forEach(t),bIo=r(yRe," (BERT model)"),yRe.forEach(t),vIo=i(H),Q1=n(H,"LI",{});var xRe=s(Q1);gpe=n(xRe,"STRONG",{});var r7t=s(gpe);FIo=r(r7t,"big_bird"),r7t.forEach(t),TIo=r(xRe," \u2014 "),_V=n(xRe,"A",{href:!0});var t7t=s(_V);MIo=r(t7t,"BigBirdForMaskedLM"),t7t.forEach(t),EIo=r(xRe," (BigBird model)"),xRe.forEach(t),CIo=i(H),H1=n(H,"LI",{});var $Re=s(H1);hpe=n($Re,"STRONG",{});var a7t=s(hpe);wIo=r(a7t,"camembert"),a7t.forEach(t),AIo=r($Re," \u2014 "),uV=n($Re,"A",{href:!0});var n7t=s(uV);LIo=r(n7t,"CamembertForMaskedLM"),n7t.forEach(t),yIo=r($Re," (CamemBERT model)"),$Re.forEach(t),xIo=i(H),U1=n(H,"LI",{});var kRe=s(U1);ppe=n(kRe,"STRONG",{});var s7t=s(ppe);$Io=r(s7t,"convbert"),s7t.forEach(t),kIo=r(kRe," \u2014 "),bV=n(kRe,"A",{href:!0});var l7t=s(bV);SIo=r(l7t,"ConvBertForMaskedLM"),l7t.forEach(t),RIo=r(kRe," (ConvBERT model)"),kRe.forEach(t),PIo=i(H),J1=n(H,"LI",{});var SRe=s(J1);_pe=n(SRe,"STRONG",{});var i7t=s(_pe);BIo=r(i7t,"data2vec-text"),i7t.forEach(t),IIo=r(SRe," \u2014 "),vV=n(SRe,"A",{href:!0});var d7t=s(vV);NIo=r(d7t,"Data2VecTextForMaskedLM"),d7t.forEach(t),qIo=r(SRe," (Data2VecText model)"),SRe.forEach(t),jIo=i(H),Y1=n(H,"LI",{});var RRe=s(Y1);upe=n(RRe,"STRONG",{});var c7t=s(upe);DIo=r(c7t,"deberta"),c7t.forEach(t),GIo=r(RRe," \u2014 "),FV=n(RRe,"A",{href:!0});var f7t=s(FV);OIo=r(f7t,"DebertaForMaskedLM"),f7t.forEach(t),VIo=r(RRe," (DeBERTa model)"),RRe.forEach(t),XIo=i(H),K1=n(H,"LI",{});var PRe=s(K1);bpe=n(PRe,"STRONG",{});var m7t=s(bpe);zIo=r(m7t,"deberta-v2"),m7t.forEach(t),WIo=r(PRe," \u2014 "),TV=n(PRe,"A",{href:!0});var g7t=s(TV);QIo=r(g7t,"DebertaV2ForMaskedLM"),g7t.forEach(t),HIo=r(PRe," (DeBERTa-v2 model)"),PRe.forEach(t),UIo=i(H),Z1=n(H,"LI",{});var BRe=s(Z1);vpe=n(BRe,"STRONG",{});var h7t=s(vpe);JIo=r(h7t,"distilbert"),h7t.forEach(t),YIo=r(BRe," \u2014 "),MV=n(BRe,"A",{href:!0});var p7t=s(MV);KIo=r(p7t,"DistilBertForMaskedLM"),p7t.forEach(t),ZIo=r(BRe," (DistilBERT model)"),BRe.forEach(t),eNo=i(H),eb=n(H,"LI",{});var IRe=s(eb);Fpe=n(IRe,"STRONG",{});var _7t=s(Fpe);oNo=r(_7t,"electra"),_7t.forEach(t),rNo=r(IRe," \u2014 "),EV=n(IRe,"A",{href:!0});var u7t=s(EV);tNo=r(u7t,"ElectraForMaskedLM"),u7t.forEach(t),aNo=r(IRe," (ELECTRA model)"),IRe.forEach(t),nNo=i(H),ob=n(H,"LI",{});var NRe=s(ob);Tpe=n(NRe,"STRONG",{});var b7t=s(Tpe);sNo=r(b7t,"flaubert"),b7t.forEach(t),lNo=r(NRe," \u2014 "),CV=n(NRe,"A",{href:!0});var v7t=s(CV);iNo=r(v7t,"FlaubertWithLMHeadModel"),v7t.forEach(t),dNo=r(NRe," (FlauBERT model)"),NRe.forEach(t),cNo=i(H),rb=n(H,"LI",{});var qRe=s(rb);Mpe=n(qRe,"STRONG",{});var F7t=s(Mpe);fNo=r(F7t,"fnet"),F7t.forEach(t),mNo=r(qRe," \u2014 "),wV=n(qRe,"A",{href:!0});var T7t=s(wV);gNo=r(T7t,"FNetForMaskedLM"),T7t.forEach(t),hNo=r(qRe," (FNet model)"),qRe.forEach(t),pNo=i(H),tb=n(H,"LI",{});var jRe=s(tb);Epe=n(jRe,"STRONG",{});var M7t=s(Epe);_No=r(M7t,"funnel"),M7t.forEach(t),uNo=r(jRe," \u2014 "),AV=n(jRe,"A",{href:!0});var E7t=s(AV);bNo=r(E7t,"FunnelForMaskedLM"),E7t.forEach(t),vNo=r(jRe," (Funnel Transformer model)"),jRe.forEach(t),FNo=i(H),ab=n(H,"LI",{});var DRe=s(ab);Cpe=n(DRe,"STRONG",{});var C7t=s(Cpe);TNo=r(C7t,"ibert"),C7t.forEach(t),MNo=r(DRe," \u2014 "),LV=n(DRe,"A",{href:!0});var w7t=s(LV);ENo=r(w7t,"IBertForMaskedLM"),w7t.forEach(t),CNo=r(DRe," (I-BERT model)"),DRe.forEach(t),wNo=i(H),nb=n(H,"LI",{});var GRe=s(nb);wpe=n(GRe,"STRONG",{});var A7t=s(wpe);ANo=r(A7t,"layoutlm"),A7t.forEach(t),LNo=r(GRe," \u2014 "),yV=n(GRe,"A",{href:!0});var L7t=s(yV);yNo=r(L7t,"LayoutLMForMaskedLM"),L7t.forEach(t),xNo=r(GRe," (LayoutLM model)"),GRe.forEach(t),$No=i(H),sb=n(H,"LI",{});var ORe=s(sb);Ape=n(ORe,"STRONG",{});var y7t=s(Ape);kNo=r(y7t,"longformer"),y7t.forEach(t),SNo=r(ORe," \u2014 "),xV=n(ORe,"A",{href:!0});var x7t=s(xV);RNo=r(x7t,"LongformerForMaskedLM"),x7t.forEach(t),PNo=r(ORe," (Longformer model)"),ORe.forEach(t),BNo=i(H),lb=n(H,"LI",{});var VRe=s(lb);Lpe=n(VRe,"STRONG",{});var $7t=s(Lpe);INo=r($7t,"luke"),$7t.forEach(t),NNo=r(VRe," \u2014 "),$V=n(VRe,"A",{href:!0});var k7t=s($V);qNo=r(k7t,"LukeForMaskedLM"),k7t.forEach(t),jNo=r(VRe," (LUKE model)"),VRe.forEach(t),DNo=i(H),ib=n(H,"LI",{});var XRe=s(ib);ype=n(XRe,"STRONG",{});var S7t=s(ype);GNo=r(S7t,"mbart"),S7t.forEach(t),ONo=r(XRe," \u2014 "),kV=n(XRe,"A",{href:!0});var R7t=s(kV);VNo=r(R7t,"MBartForConditionalGeneration"),R7t.forEach(t),XNo=r(XRe," (mBART model)"),XRe.forEach(t),zNo=i(H),db=n(H,"LI",{});var zRe=s(db);xpe=n(zRe,"STRONG",{});var P7t=s(xpe);WNo=r(P7t,"megatron-bert"),P7t.forEach(t),QNo=r(zRe," \u2014 "),SV=n(zRe,"A",{href:!0});var B7t=s(SV);HNo=r(B7t,"MegatronBertForMaskedLM"),B7t.forEach(t),UNo=r(zRe," (Megatron-BERT model)"),zRe.forEach(t),JNo=i(H),cb=n(H,"LI",{});var WRe=s(cb);$pe=n(WRe,"STRONG",{});var I7t=s($pe);YNo=r(I7t,"mobilebert"),I7t.forEach(t),KNo=r(WRe," \u2014 "),RV=n(WRe,"A",{href:!0});var N7t=s(RV);ZNo=r(N7t,"MobileBertForMaskedLM"),N7t.forEach(t),eqo=r(WRe," (MobileBERT model)"),WRe.forEach(t),oqo=i(H),fb=n(H,"LI",{});var QRe=s(fb);kpe=n(QRe,"STRONG",{});var q7t=s(kpe);rqo=r(q7t,"mpnet"),q7t.forEach(t),tqo=r(QRe," \u2014 "),PV=n(QRe,"A",{href:!0});var j7t=s(PV);aqo=r(j7t,"MPNetForMaskedLM"),j7t.forEach(t),nqo=r(QRe," (MPNet model)"),QRe.forEach(t),sqo=i(H),mb=n(H,"LI",{});var HRe=s(mb);Spe=n(HRe,"STRONG",{});var D7t=s(Spe);lqo=r(D7t,"mvp"),D7t.forEach(t),iqo=r(HRe," \u2014 "),BV=n(HRe,"A",{href:!0});var G7t=s(BV);dqo=r(G7t,"MvpForConditionalGeneration"),G7t.forEach(t),cqo=r(HRe," (MVP model)"),HRe.forEach(t),fqo=i(H),gb=n(H,"LI",{});var URe=s(gb);Rpe=n(URe,"STRONG",{});var O7t=s(Rpe);mqo=r(O7t,"nezha"),O7t.forEach(t),gqo=r(URe," \u2014 "),IV=n(URe,"A",{href:!0});var V7t=s(IV);hqo=r(V7t,"NezhaForMaskedLM"),V7t.forEach(t),pqo=r(URe," (Nezha model)"),URe.forEach(t),_qo=i(H),hb=n(H,"LI",{});var JRe=s(hb);Ppe=n(JRe,"STRONG",{});var X7t=s(Ppe);uqo=r(X7t,"nystromformer"),X7t.forEach(t),bqo=r(JRe," \u2014 "),NV=n(JRe,"A",{href:!0});var z7t=s(NV);vqo=r(z7t,"NystromformerForMaskedLM"),z7t.forEach(t),Fqo=r(JRe," (Nystr\xF6mformer model)"),JRe.forEach(t),Tqo=i(H),pb=n(H,"LI",{});var YRe=s(pb);Bpe=n(YRe,"STRONG",{});var W7t=s(Bpe);Mqo=r(W7t,"perceiver"),W7t.forEach(t),Eqo=r(YRe," \u2014 "),qV=n(YRe,"A",{href:!0});var Q7t=s(qV);Cqo=r(Q7t,"PerceiverForMaskedLM"),Q7t.forEach(t),wqo=r(YRe," (Perceiver model)"),YRe.forEach(t),Aqo=i(H),_b=n(H,"LI",{});var KRe=s(_b);Ipe=n(KRe,"STRONG",{});var H7t=s(Ipe);Lqo=r(H7t,"qdqbert"),H7t.forEach(t),yqo=r(KRe," \u2014 "),jV=n(KRe,"A",{href:!0});var U7t=s(jV);xqo=r(U7t,"QDQBertForMaskedLM"),U7t.forEach(t),$qo=r(KRe," (QDQBert model)"),KRe.forEach(t),kqo=i(H),ub=n(H,"LI",{});var ZRe=s(ub);Npe=n(ZRe,"STRONG",{});var J7t=s(Npe);Sqo=r(J7t,"reformer"),J7t.forEach(t),Rqo=r(ZRe," \u2014 "),DV=n(ZRe,"A",{href:!0});var Y7t=s(DV);Pqo=r(Y7t,"ReformerForMaskedLM"),Y7t.forEach(t),Bqo=r(ZRe," (Reformer model)"),ZRe.forEach(t),Iqo=i(H),bb=n(H,"LI",{});var ePe=s(bb);qpe=n(ePe,"STRONG",{});var K7t=s(qpe);Nqo=r(K7t,"rembert"),K7t.forEach(t),qqo=r(ePe," \u2014 "),GV=n(ePe,"A",{href:!0});var Z7t=s(GV);jqo=r(Z7t,"RemBertForMaskedLM"),Z7t.forEach(t),Dqo=r(ePe," (RemBERT model)"),ePe.forEach(t),Gqo=i(H),vb=n(H,"LI",{});var oPe=s(vb);jpe=n(oPe,"STRONG",{});var e8t=s(jpe);Oqo=r(e8t,"roberta"),e8t.forEach(t),Vqo=r(oPe," \u2014 "),OV=n(oPe,"A",{href:!0});var o8t=s(OV);Xqo=r(o8t,"RobertaForMaskedLM"),o8t.forEach(t),zqo=r(oPe," (RoBERTa model)"),oPe.forEach(t),Wqo=i(H),Fb=n(H,"LI",{});var rPe=s(Fb);Dpe=n(rPe,"STRONG",{});var r8t=s(Dpe);Qqo=r(r8t,"roformer"),r8t.forEach(t),Hqo=r(rPe," \u2014 "),VV=n(rPe,"A",{href:!0});var t8t=s(VV);Uqo=r(t8t,"RoFormerForMaskedLM"),t8t.forEach(t),Jqo=r(rPe," (RoFormer model)"),rPe.forEach(t),Yqo=i(H),Tb=n(H,"LI",{});var tPe=s(Tb);Gpe=n(tPe,"STRONG",{});var a8t=s(Gpe);Kqo=r(a8t,"squeezebert"),a8t.forEach(t),Zqo=r(tPe," \u2014 "),XV=n(tPe,"A",{href:!0});var n8t=s(XV);ejo=r(n8t,"SqueezeBertForMaskedLM"),n8t.forEach(t),ojo=r(tPe," (SqueezeBERT model)"),tPe.forEach(t),rjo=i(H),Mb=n(H,"LI",{});var aPe=s(Mb);Ope=n(aPe,"STRONG",{});var s8t=s(Ope);tjo=r(s8t,"tapas"),s8t.forEach(t),ajo=r(aPe," \u2014 "),zV=n(aPe,"A",{href:!0});var l8t=s(zV);njo=r(l8t,"TapasForMaskedLM"),l8t.forEach(t),sjo=r(aPe," (TAPAS model)"),aPe.forEach(t),ljo=i(H),Eb=n(H,"LI",{});var nPe=s(Eb);Vpe=n(nPe,"STRONG",{});var i8t=s(Vpe);ijo=r(i8t,"wav2vec2"),i8t.forEach(t),djo=r(nPe," \u2014 "),Xpe=n(nPe,"CODE",{});var d8t=s(Xpe);cjo=r(d8t,"Wav2Vec2ForMaskedLM"),d8t.forEach(t),fjo=r(nPe," (Wav2Vec2 model)"),nPe.forEach(t),mjo=i(H),Cb=n(H,"LI",{});var sPe=s(Cb);zpe=n(sPe,"STRONG",{});var c8t=s(zpe);gjo=r(c8t,"xlm"),c8t.forEach(t),hjo=r(sPe," \u2014 "),WV=n(sPe,"A",{href:!0});var f8t=s(WV);pjo=r(f8t,"XLMWithLMHeadModel"),f8t.forEach(t),_jo=r(sPe," (XLM model)"),sPe.forEach(t),ujo=i(H),wb=n(H,"LI",{});var lPe=s(wb);Wpe=n(lPe,"STRONG",{});var m8t=s(Wpe);bjo=r(m8t,"xlm-roberta"),m8t.forEach(t),vjo=r(lPe," \u2014 "),QV=n(lPe,"A",{href:!0});var g8t=s(QV);Fjo=r(g8t,"XLMRobertaForMaskedLM"),g8t.forEach(t),Tjo=r(lPe," (XLM-RoBERTa model)"),lPe.forEach(t),Mjo=i(H),Ab=n(H,"LI",{});var iPe=s(Ab);Qpe=n(iPe,"STRONG",{});var h8t=s(Qpe);Ejo=r(h8t,"xlm-roberta-xl"),h8t.forEach(t),Cjo=r(iPe," \u2014 "),HV=n(iPe,"A",{href:!0});var p8t=s(HV);wjo=r(p8t,"XLMRobertaXLForMaskedLM"),p8t.forEach(t),Ajo=r(iPe," (XLM-RoBERTa-XL model)"),iPe.forEach(t),Ljo=i(H),Lb=n(H,"LI",{});var dPe=s(Lb);Hpe=n(dPe,"STRONG",{});var _8t=s(Hpe);yjo=r(_8t,"yoso"),_8t.forEach(t),xjo=r(dPe," \u2014 "),UV=n(dPe,"A",{href:!0});var u8t=s(UV);$jo=r(u8t,"YosoForMaskedLM"),u8t.forEach(t),kjo=r(dPe," (YOSO model)"),dPe.forEach(t),H.forEach(t),Sjo=i(ca),yb=n(ca,"P",{});var cPe=s(yb);Rjo=r(cPe,"The model is set in evaluation mode by default using "),Upe=n(cPe,"CODE",{});var b8t=s(Upe);Pjo=r(b8t,"model.eval()"),b8t.forEach(t),Bjo=r(cPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=n(cPe,"CODE",{});var v8t=s(Jpe);Ijo=r(v8t,"model.train()"),v8t.forEach(t),cPe.forEach(t),Njo=i(ca),T(xb.$$.fragment,ca),ca.forEach(t),ll.forEach(t),Mze=i(f),od=n(f,"H2",{class:!0});var yQe=s(od);$b=n(yQe,"A",{id:!0,class:!0,href:!0});var F8t=s($b);Ype=n(F8t,"SPAN",{});var T8t=s(Ype);T(cy.$$.fragment,T8t),T8t.forEach(t),F8t.forEach(t),qjo=i(yQe),Kpe=n(yQe,"SPAN",{});var M8t=s(Kpe);jjo=r(M8t,"AutoModelForSeq2SeqLM"),M8t.forEach(t),yQe.forEach(t),Eze=i(f),Bo=n(f,"DIV",{class:!0});var il=s(Bo);T(fy.$$.fragment,il),Djo=i(il),rd=n(il,"P",{});var _te=s(rd);Gjo=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JV=n(_te,"A",{href:!0});var E8t=s(JV);Ojo=r(E8t,"from_pretrained()"),E8t.forEach(t),Vjo=r(_te," class method or the "),YV=n(_te,"A",{href:!0});var C8t=s(YV);Xjo=r(C8t,"from_config()"),C8t.forEach(t),zjo=r(_te,` class
method.`),_te.forEach(t),Wjo=i(il),my=n(il,"P",{});var xQe=s(my);Qjo=r(xQe,"This class cannot be instantiated directly using "),Zpe=n(xQe,"CODE",{});var w8t=s(Zpe);Hjo=r(w8t,"__init__()"),w8t.forEach(t),Ujo=r(xQe," (throws an error)."),xQe.forEach(t),Jjo=i(il),mt=n(il,"DIV",{class:!0});var $w=s(mt);T(gy.$$.fragment,$w),Yjo=i($w),e_e=n($w,"P",{});var A8t=s(e_e);Kjo=r(A8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),A8t.forEach(t),Zjo=i($w),td=n($w,"P",{});var ute=s(td);eDo=r(ute,`Note:
Loading a model from its configuration file does `),o_e=n(ute,"STRONG",{});var L8t=s(o_e);oDo=r(L8t,"not"),L8t.forEach(t),rDo=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=n(ute,"A",{href:!0});var y8t=s(KV);tDo=r(y8t,"from_pretrained()"),y8t.forEach(t),aDo=r(ute," to load the model weights."),ute.forEach(t),nDo=i($w),T(kb.$$.fragment,$w),$w.forEach(t),sDo=i(il),oo=n(il,"DIV",{class:!0});var fa=s(oo);T(hy.$$.fragment,fa),lDo=i(fa),r_e=n(fa,"P",{});var x8t=s(r_e);iDo=r(x8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),x8t.forEach(t),dDo=i(fa),Da=n(fa,"P",{});var kw=s(Da);cDo=r(kw,"The model class to instantiate is selected based on the "),t_e=n(kw,"CODE",{});var $8t=s(t_e);fDo=r($8t,"model_type"),$8t.forEach(t),mDo=r(kw,` property of the config object (either
passed as an argument or loaded from `),a_e=n(kw,"CODE",{});var k8t=s(a_e);gDo=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),hDo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=n(kw,"CODE",{});var S8t=s(n_e);pDo=r(S8t,"pretrained_model_name_or_path"),S8t.forEach(t),_Do=r(kw,":"),kw.forEach(t),uDo=i(fa),me=n(fa,"UL",{});var ue=s(me);Sb=n(ue,"LI",{});var fPe=s(Sb);s_e=n(fPe,"STRONG",{});var R8t=s(s_e);bDo=r(R8t,"bart"),R8t.forEach(t),vDo=r(fPe," \u2014 "),ZV=n(fPe,"A",{href:!0});var P8t=s(ZV);FDo=r(P8t,"BartForConditionalGeneration"),P8t.forEach(t),TDo=r(fPe," (BART model)"),fPe.forEach(t),MDo=i(ue),Rb=n(ue,"LI",{});var mPe=s(Rb);l_e=n(mPe,"STRONG",{});var B8t=s(l_e);EDo=r(B8t,"bigbird_pegasus"),B8t.forEach(t),CDo=r(mPe," \u2014 "),eX=n(mPe,"A",{href:!0});var I8t=s(eX);wDo=r(I8t,"BigBirdPegasusForConditionalGeneration"),I8t.forEach(t),ADo=r(mPe," (BigBird-Pegasus model)"),mPe.forEach(t),LDo=i(ue),Pb=n(ue,"LI",{});var gPe=s(Pb);i_e=n(gPe,"STRONG",{});var N8t=s(i_e);yDo=r(N8t,"blenderbot"),N8t.forEach(t),xDo=r(gPe," \u2014 "),oX=n(gPe,"A",{href:!0});var q8t=s(oX);$Do=r(q8t,"BlenderbotForConditionalGeneration"),q8t.forEach(t),kDo=r(gPe," (Blenderbot model)"),gPe.forEach(t),SDo=i(ue),Bb=n(ue,"LI",{});var hPe=s(Bb);d_e=n(hPe,"STRONG",{});var j8t=s(d_e);RDo=r(j8t,"blenderbot-small"),j8t.forEach(t),PDo=r(hPe," \u2014 "),rX=n(hPe,"A",{href:!0});var D8t=s(rX);BDo=r(D8t,"BlenderbotSmallForConditionalGeneration"),D8t.forEach(t),IDo=r(hPe," (BlenderbotSmall model)"),hPe.forEach(t),NDo=i(ue),Ib=n(ue,"LI",{});var pPe=s(Ib);c_e=n(pPe,"STRONG",{});var G8t=s(c_e);qDo=r(G8t,"encoder-decoder"),G8t.forEach(t),jDo=r(pPe," \u2014 "),tX=n(pPe,"A",{href:!0});var O8t=s(tX);DDo=r(O8t,"EncoderDecoderModel"),O8t.forEach(t),GDo=r(pPe," (Encoder decoder model)"),pPe.forEach(t),ODo=i(ue),Nb=n(ue,"LI",{});var _Pe=s(Nb);f_e=n(_Pe,"STRONG",{});var V8t=s(f_e);VDo=r(V8t,"fsmt"),V8t.forEach(t),XDo=r(_Pe," \u2014 "),aX=n(_Pe,"A",{href:!0});var X8t=s(aX);zDo=r(X8t,"FSMTForConditionalGeneration"),X8t.forEach(t),WDo=r(_Pe," (FairSeq Machine-Translation model)"),_Pe.forEach(t),QDo=i(ue),qb=n(ue,"LI",{});var uPe=s(qb);m_e=n(uPe,"STRONG",{});var z8t=s(m_e);HDo=r(z8t,"led"),z8t.forEach(t),UDo=r(uPe," \u2014 "),nX=n(uPe,"A",{href:!0});var W8t=s(nX);JDo=r(W8t,"LEDForConditionalGeneration"),W8t.forEach(t),YDo=r(uPe," (LED model)"),uPe.forEach(t),KDo=i(ue),jb=n(ue,"LI",{});var bPe=s(jb);g_e=n(bPe,"STRONG",{});var Q8t=s(g_e);ZDo=r(Q8t,"longt5"),Q8t.forEach(t),eGo=r(bPe," \u2014 "),sX=n(bPe,"A",{href:!0});var H8t=s(sX);oGo=r(H8t,"LongT5ForConditionalGeneration"),H8t.forEach(t),rGo=r(bPe," (LongT5 model)"),bPe.forEach(t),tGo=i(ue),Db=n(ue,"LI",{});var vPe=s(Db);h_e=n(vPe,"STRONG",{});var U8t=s(h_e);aGo=r(U8t,"m2m_100"),U8t.forEach(t),nGo=r(vPe," \u2014 "),lX=n(vPe,"A",{href:!0});var J8t=s(lX);sGo=r(J8t,"M2M100ForConditionalGeneration"),J8t.forEach(t),lGo=r(vPe," (M2M100 model)"),vPe.forEach(t),iGo=i(ue),Gb=n(ue,"LI",{});var FPe=s(Gb);p_e=n(FPe,"STRONG",{});var Y8t=s(p_e);dGo=r(Y8t,"marian"),Y8t.forEach(t),cGo=r(FPe," \u2014 "),iX=n(FPe,"A",{href:!0});var K8t=s(iX);fGo=r(K8t,"MarianMTModel"),K8t.forEach(t),mGo=r(FPe," (Marian model)"),FPe.forEach(t),gGo=i(ue),Ob=n(ue,"LI",{});var TPe=s(Ob);__e=n(TPe,"STRONG",{});var Z8t=s(__e);hGo=r(Z8t,"mbart"),Z8t.forEach(t),pGo=r(TPe," \u2014 "),dX=n(TPe,"A",{href:!0});var eMt=s(dX);_Go=r(eMt,"MBartForConditionalGeneration"),eMt.forEach(t),uGo=r(TPe," (mBART model)"),TPe.forEach(t),bGo=i(ue),Vb=n(ue,"LI",{});var MPe=s(Vb);u_e=n(MPe,"STRONG",{});var oMt=s(u_e);vGo=r(oMt,"mt5"),oMt.forEach(t),FGo=r(MPe," \u2014 "),cX=n(MPe,"A",{href:!0});var rMt=s(cX);TGo=r(rMt,"MT5ForConditionalGeneration"),rMt.forEach(t),MGo=r(MPe," (MT5 model)"),MPe.forEach(t),EGo=i(ue),Xb=n(ue,"LI",{});var EPe=s(Xb);b_e=n(EPe,"STRONG",{});var tMt=s(b_e);CGo=r(tMt,"mvp"),tMt.forEach(t),wGo=r(EPe," \u2014 "),fX=n(EPe,"A",{href:!0});var aMt=s(fX);AGo=r(aMt,"MvpForConditionalGeneration"),aMt.forEach(t),LGo=r(EPe," (MVP model)"),EPe.forEach(t),yGo=i(ue),zb=n(ue,"LI",{});var CPe=s(zb);v_e=n(CPe,"STRONG",{});var nMt=s(v_e);xGo=r(nMt,"nllb"),nMt.forEach(t),$Go=r(CPe," \u2014 "),mX=n(CPe,"A",{href:!0});var sMt=s(mX);kGo=r(sMt,"M2M100ForConditionalGeneration"),sMt.forEach(t),SGo=r(CPe," (NLLB model)"),CPe.forEach(t),RGo=i(ue),Wb=n(ue,"LI",{});var wPe=s(Wb);F_e=n(wPe,"STRONG",{});var lMt=s(F_e);PGo=r(lMt,"pegasus"),lMt.forEach(t),BGo=r(wPe," \u2014 "),gX=n(wPe,"A",{href:!0});var iMt=s(gX);IGo=r(iMt,"PegasusForConditionalGeneration"),iMt.forEach(t),NGo=r(wPe," (Pegasus model)"),wPe.forEach(t),qGo=i(ue),Qb=n(ue,"LI",{});var APe=s(Qb);T_e=n(APe,"STRONG",{});var dMt=s(T_e);jGo=r(dMt,"plbart"),dMt.forEach(t),DGo=r(APe," \u2014 "),hX=n(APe,"A",{href:!0});var cMt=s(hX);GGo=r(cMt,"PLBartForConditionalGeneration"),cMt.forEach(t),OGo=r(APe," (PLBart model)"),APe.forEach(t),VGo=i(ue),Hb=n(ue,"LI",{});var LPe=s(Hb);M_e=n(LPe,"STRONG",{});var fMt=s(M_e);XGo=r(fMt,"prophetnet"),fMt.forEach(t),zGo=r(LPe," \u2014 "),pX=n(LPe,"A",{href:!0});var mMt=s(pX);WGo=r(mMt,"ProphetNetForConditionalGeneration"),mMt.forEach(t),QGo=r(LPe," (ProphetNet model)"),LPe.forEach(t),HGo=i(ue),Ub=n(ue,"LI",{});var yPe=s(Ub);E_e=n(yPe,"STRONG",{});var gMt=s(E_e);UGo=r(gMt,"t5"),gMt.forEach(t),JGo=r(yPe," \u2014 "),_X=n(yPe,"A",{href:!0});var hMt=s(_X);YGo=r(hMt,"T5ForConditionalGeneration"),hMt.forEach(t),KGo=r(yPe," (T5 model)"),yPe.forEach(t),ZGo=i(ue),Jb=n(ue,"LI",{});var xPe=s(Jb);C_e=n(xPe,"STRONG",{});var pMt=s(C_e);eOo=r(pMt,"xlm-prophetnet"),pMt.forEach(t),oOo=r(xPe," \u2014 "),uX=n(xPe,"A",{href:!0});var _Mt=s(uX);rOo=r(_Mt,"XLMProphetNetForConditionalGeneration"),_Mt.forEach(t),tOo=r(xPe," (XLM-ProphetNet model)"),xPe.forEach(t),ue.forEach(t),aOo=i(fa),Yb=n(fa,"P",{});var $Pe=s(Yb);nOo=r($Pe,"The model is set in evaluation mode by default using "),w_e=n($Pe,"CODE",{});var uMt=s(w_e);sOo=r(uMt,"model.eval()"),uMt.forEach(t),lOo=r($Pe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=n($Pe,"CODE",{});var bMt=s(A_e);iOo=r(bMt,"model.train()"),bMt.forEach(t),$Pe.forEach(t),dOo=i(fa),T(Kb.$$.fragment,fa),fa.forEach(t),il.forEach(t),Cze=i(f),ad=n(f,"H2",{class:!0});var $Qe=s(ad);Zb=n($Qe,"A",{id:!0,class:!0,href:!0});var vMt=s(Zb);L_e=n(vMt,"SPAN",{});var FMt=s(L_e);T(py.$$.fragment,FMt),FMt.forEach(t),vMt.forEach(t),cOo=i($Qe),y_e=n($Qe,"SPAN",{});var TMt=s(y_e);fOo=r(TMt,"AutoModelForSequenceClassification"),TMt.forEach(t),$Qe.forEach(t),wze=i(f),Io=n(f,"DIV",{class:!0});var dl=s(Io);T(_y.$$.fragment,dl),mOo=i(dl),nd=n(dl,"P",{});var bte=s(nd);gOo=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bX=n(bte,"A",{href:!0});var MMt=s(bX);hOo=r(MMt,"from_pretrained()"),MMt.forEach(t),pOo=r(bte," class method or the "),vX=n(bte,"A",{href:!0});var EMt=s(vX);_Oo=r(EMt,"from_config()"),EMt.forEach(t),uOo=r(bte,` class
method.`),bte.forEach(t),bOo=i(dl),uy=n(dl,"P",{});var kQe=s(uy);vOo=r(kQe,"This class cannot be instantiated directly using "),x_e=n(kQe,"CODE",{});var CMt=s(x_e);FOo=r(CMt,"__init__()"),CMt.forEach(t),TOo=r(kQe," (throws an error)."),kQe.forEach(t),MOo=i(dl),gt=n(dl,"DIV",{class:!0});var Sw=s(gt);T(by.$$.fragment,Sw),EOo=i(Sw),$_e=n(Sw,"P",{});var wMt=s($_e);COo=r(wMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wMt.forEach(t),wOo=i(Sw),sd=n(Sw,"P",{});var vte=s(sd);AOo=r(vte,`Note:
Loading a model from its configuration file does `),k_e=n(vte,"STRONG",{});var AMt=s(k_e);LOo=r(AMt,"not"),AMt.forEach(t),yOo=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(vte,"A",{href:!0});var LMt=s(FX);xOo=r(LMt,"from_pretrained()"),LMt.forEach(t),$Oo=r(vte," to load the model weights."),vte.forEach(t),kOo=i(Sw),T(ev.$$.fragment,Sw),Sw.forEach(t),SOo=i(dl),ro=n(dl,"DIV",{class:!0});var ma=s(ro);T(vy.$$.fragment,ma),ROo=i(ma),S_e=n(ma,"P",{});var yMt=s(S_e);POo=r(yMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yMt.forEach(t),BOo=i(ma),Ga=n(ma,"P",{});var Rw=s(Ga);IOo=r(Rw,"The model class to instantiate is selected based on the "),R_e=n(Rw,"CODE",{});var xMt=s(R_e);NOo=r(xMt,"model_type"),xMt.forEach(t),qOo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),P_e=n(Rw,"CODE",{});var $Mt=s(P_e);jOo=r($Mt,"pretrained_model_name_or_path"),$Mt.forEach(t),DOo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(Rw,"CODE",{});var kMt=s(B_e);GOo=r(kMt,"pretrained_model_name_or_path"),kMt.forEach(t),OOo=r(Rw,":"),Rw.forEach(t),VOo=i(ma),B=n(ma,"UL",{});var j=s(B);ov=n(j,"LI",{});var kPe=s(ov);I_e=n(kPe,"STRONG",{});var SMt=s(I_e);XOo=r(SMt,"albert"),SMt.forEach(t),zOo=r(kPe," \u2014 "),TX=n(kPe,"A",{href:!0});var RMt=s(TX);WOo=r(RMt,"AlbertForSequenceClassification"),RMt.forEach(t),QOo=r(kPe," (ALBERT model)"),kPe.forEach(t),HOo=i(j),rv=n(j,"LI",{});var SPe=s(rv);N_e=n(SPe,"STRONG",{});var PMt=s(N_e);UOo=r(PMt,"bart"),PMt.forEach(t),JOo=r(SPe," \u2014 "),MX=n(SPe,"A",{href:!0});var BMt=s(MX);YOo=r(BMt,"BartForSequenceClassification"),BMt.forEach(t),KOo=r(SPe," (BART model)"),SPe.forEach(t),ZOo=i(j),tv=n(j,"LI",{});var RPe=s(tv);q_e=n(RPe,"STRONG",{});var IMt=s(q_e);eVo=r(IMt,"bert"),IMt.forEach(t),oVo=r(RPe," \u2014 "),EX=n(RPe,"A",{href:!0});var NMt=s(EX);rVo=r(NMt,"BertForSequenceClassification"),NMt.forEach(t),tVo=r(RPe," (BERT model)"),RPe.forEach(t),aVo=i(j),av=n(j,"LI",{});var PPe=s(av);j_e=n(PPe,"STRONG",{});var qMt=s(j_e);nVo=r(qMt,"big_bird"),qMt.forEach(t),sVo=r(PPe," \u2014 "),CX=n(PPe,"A",{href:!0});var jMt=s(CX);lVo=r(jMt,"BigBirdForSequenceClassification"),jMt.forEach(t),iVo=r(PPe," (BigBird model)"),PPe.forEach(t),dVo=i(j),nv=n(j,"LI",{});var BPe=s(nv);D_e=n(BPe,"STRONG",{});var DMt=s(D_e);cVo=r(DMt,"bigbird_pegasus"),DMt.forEach(t),fVo=r(BPe," \u2014 "),wX=n(BPe,"A",{href:!0});var GMt=s(wX);mVo=r(GMt,"BigBirdPegasusForSequenceClassification"),GMt.forEach(t),gVo=r(BPe," (BigBird-Pegasus model)"),BPe.forEach(t),hVo=i(j),sv=n(j,"LI",{});var IPe=s(sv);G_e=n(IPe,"STRONG",{});var OMt=s(G_e);pVo=r(OMt,"bloom"),OMt.forEach(t),_Vo=r(IPe," \u2014 "),AX=n(IPe,"A",{href:!0});var VMt=s(AX);uVo=r(VMt,"BloomForSequenceClassification"),VMt.forEach(t),bVo=r(IPe," (BLOOM model)"),IPe.forEach(t),vVo=i(j),lv=n(j,"LI",{});var NPe=s(lv);O_e=n(NPe,"STRONG",{});var XMt=s(O_e);FVo=r(XMt,"camembert"),XMt.forEach(t),TVo=r(NPe," \u2014 "),LX=n(NPe,"A",{href:!0});var zMt=s(LX);MVo=r(zMt,"CamembertForSequenceClassification"),zMt.forEach(t),EVo=r(NPe," (CamemBERT model)"),NPe.forEach(t),CVo=i(j),iv=n(j,"LI",{});var qPe=s(iv);V_e=n(qPe,"STRONG",{});var WMt=s(V_e);wVo=r(WMt,"canine"),WMt.forEach(t),AVo=r(qPe," \u2014 "),yX=n(qPe,"A",{href:!0});var QMt=s(yX);LVo=r(QMt,"CanineForSequenceClassification"),QMt.forEach(t),yVo=r(qPe," (CANINE model)"),qPe.forEach(t),xVo=i(j),dv=n(j,"LI",{});var jPe=s(dv);X_e=n(jPe,"STRONG",{});var HMt=s(X_e);$Vo=r(HMt,"convbert"),HMt.forEach(t),kVo=r(jPe," \u2014 "),xX=n(jPe,"A",{href:!0});var UMt=s(xX);SVo=r(UMt,"ConvBertForSequenceClassification"),UMt.forEach(t),RVo=r(jPe," (ConvBERT model)"),jPe.forEach(t),PVo=i(j),cv=n(j,"LI",{});var DPe=s(cv);z_e=n(DPe,"STRONG",{});var JMt=s(z_e);BVo=r(JMt,"ctrl"),JMt.forEach(t),IVo=r(DPe," \u2014 "),$X=n(DPe,"A",{href:!0});var YMt=s($X);NVo=r(YMt,"CTRLForSequenceClassification"),YMt.forEach(t),qVo=r(DPe," (CTRL model)"),DPe.forEach(t),jVo=i(j),fv=n(j,"LI",{});var GPe=s(fv);W_e=n(GPe,"STRONG",{});var KMt=s(W_e);DVo=r(KMt,"data2vec-text"),KMt.forEach(t),GVo=r(GPe," \u2014 "),kX=n(GPe,"A",{href:!0});var ZMt=s(kX);OVo=r(ZMt,"Data2VecTextForSequenceClassification"),ZMt.forEach(t),VVo=r(GPe," (Data2VecText model)"),GPe.forEach(t),XVo=i(j),mv=n(j,"LI",{});var OPe=s(mv);Q_e=n(OPe,"STRONG",{});var e4t=s(Q_e);zVo=r(e4t,"deberta"),e4t.forEach(t),WVo=r(OPe," \u2014 "),SX=n(OPe,"A",{href:!0});var o4t=s(SX);QVo=r(o4t,"DebertaForSequenceClassification"),o4t.forEach(t),HVo=r(OPe," (DeBERTa model)"),OPe.forEach(t),UVo=i(j),gv=n(j,"LI",{});var VPe=s(gv);H_e=n(VPe,"STRONG",{});var r4t=s(H_e);JVo=r(r4t,"deberta-v2"),r4t.forEach(t),YVo=r(VPe," \u2014 "),RX=n(VPe,"A",{href:!0});var t4t=s(RX);KVo=r(t4t,"DebertaV2ForSequenceClassification"),t4t.forEach(t),ZVo=r(VPe," (DeBERTa-v2 model)"),VPe.forEach(t),eXo=i(j),hv=n(j,"LI",{});var XPe=s(hv);U_e=n(XPe,"STRONG",{});var a4t=s(U_e);oXo=r(a4t,"distilbert"),a4t.forEach(t),rXo=r(XPe," \u2014 "),PX=n(XPe,"A",{href:!0});var n4t=s(PX);tXo=r(n4t,"DistilBertForSequenceClassification"),n4t.forEach(t),aXo=r(XPe," (DistilBERT model)"),XPe.forEach(t),nXo=i(j),pv=n(j,"LI",{});var zPe=s(pv);J_e=n(zPe,"STRONG",{});var s4t=s(J_e);sXo=r(s4t,"electra"),s4t.forEach(t),lXo=r(zPe," \u2014 "),BX=n(zPe,"A",{href:!0});var l4t=s(BX);iXo=r(l4t,"ElectraForSequenceClassification"),l4t.forEach(t),dXo=r(zPe," (ELECTRA model)"),zPe.forEach(t),cXo=i(j),_v=n(j,"LI",{});var WPe=s(_v);Y_e=n(WPe,"STRONG",{});var i4t=s(Y_e);fXo=r(i4t,"flaubert"),i4t.forEach(t),mXo=r(WPe," \u2014 "),IX=n(WPe,"A",{href:!0});var d4t=s(IX);gXo=r(d4t,"FlaubertForSequenceClassification"),d4t.forEach(t),hXo=r(WPe," (FlauBERT model)"),WPe.forEach(t),pXo=i(j),uv=n(j,"LI",{});var QPe=s(uv);K_e=n(QPe,"STRONG",{});var c4t=s(K_e);_Xo=r(c4t,"fnet"),c4t.forEach(t),uXo=r(QPe," \u2014 "),NX=n(QPe,"A",{href:!0});var f4t=s(NX);bXo=r(f4t,"FNetForSequenceClassification"),f4t.forEach(t),vXo=r(QPe," (FNet model)"),QPe.forEach(t),FXo=i(j),bv=n(j,"LI",{});var HPe=s(bv);Z_e=n(HPe,"STRONG",{});var m4t=s(Z_e);TXo=r(m4t,"funnel"),m4t.forEach(t),MXo=r(HPe," \u2014 "),qX=n(HPe,"A",{href:!0});var g4t=s(qX);EXo=r(g4t,"FunnelForSequenceClassification"),g4t.forEach(t),CXo=r(HPe," (Funnel Transformer model)"),HPe.forEach(t),wXo=i(j),vv=n(j,"LI",{});var UPe=s(vv);eue=n(UPe,"STRONG",{});var h4t=s(eue);AXo=r(h4t,"gpt2"),h4t.forEach(t),LXo=r(UPe," \u2014 "),jX=n(UPe,"A",{href:!0});var p4t=s(jX);yXo=r(p4t,"GPT2ForSequenceClassification"),p4t.forEach(t),xXo=r(UPe," (OpenAI GPT-2 model)"),UPe.forEach(t),$Xo=i(j),Fv=n(j,"LI",{});var JPe=s(Fv);oue=n(JPe,"STRONG",{});var _4t=s(oue);kXo=r(_4t,"gpt_neo"),_4t.forEach(t),SXo=r(JPe," \u2014 "),DX=n(JPe,"A",{href:!0});var u4t=s(DX);RXo=r(u4t,"GPTNeoForSequenceClassification"),u4t.forEach(t),PXo=r(JPe," (GPT Neo model)"),JPe.forEach(t),BXo=i(j),Tv=n(j,"LI",{});var YPe=s(Tv);rue=n(YPe,"STRONG",{});var b4t=s(rue);IXo=r(b4t,"gptj"),b4t.forEach(t),NXo=r(YPe," \u2014 "),GX=n(YPe,"A",{href:!0});var v4t=s(GX);qXo=r(v4t,"GPTJForSequenceClassification"),v4t.forEach(t),jXo=r(YPe," (GPT-J model)"),YPe.forEach(t),DXo=i(j),Mv=n(j,"LI",{});var KPe=s(Mv);tue=n(KPe,"STRONG",{});var F4t=s(tue);GXo=r(F4t,"ibert"),F4t.forEach(t),OXo=r(KPe," \u2014 "),OX=n(KPe,"A",{href:!0});var T4t=s(OX);VXo=r(T4t,"IBertForSequenceClassification"),T4t.forEach(t),XXo=r(KPe," (I-BERT model)"),KPe.forEach(t),zXo=i(j),Ev=n(j,"LI",{});var ZPe=s(Ev);aue=n(ZPe,"STRONG",{});var M4t=s(aue);WXo=r(M4t,"layoutlm"),M4t.forEach(t),QXo=r(ZPe," \u2014 "),VX=n(ZPe,"A",{href:!0});var E4t=s(VX);HXo=r(E4t,"LayoutLMForSequenceClassification"),E4t.forEach(t),UXo=r(ZPe," (LayoutLM model)"),ZPe.forEach(t),JXo=i(j),Cv=n(j,"LI",{});var eBe=s(Cv);nue=n(eBe,"STRONG",{});var C4t=s(nue);YXo=r(C4t,"layoutlmv2"),C4t.forEach(t),KXo=r(eBe," \u2014 "),XX=n(eBe,"A",{href:!0});var w4t=s(XX);ZXo=r(w4t,"LayoutLMv2ForSequenceClassification"),w4t.forEach(t),ezo=r(eBe," (LayoutLMv2 model)"),eBe.forEach(t),ozo=i(j),wv=n(j,"LI",{});var oBe=s(wv);sue=n(oBe,"STRONG",{});var A4t=s(sue);rzo=r(A4t,"layoutlmv3"),A4t.forEach(t),tzo=r(oBe," \u2014 "),zX=n(oBe,"A",{href:!0});var L4t=s(zX);azo=r(L4t,"LayoutLMv3ForSequenceClassification"),L4t.forEach(t),nzo=r(oBe," (LayoutLMv3 model)"),oBe.forEach(t),szo=i(j),Av=n(j,"LI",{});var rBe=s(Av);lue=n(rBe,"STRONG",{});var y4t=s(lue);lzo=r(y4t,"led"),y4t.forEach(t),izo=r(rBe," \u2014 "),WX=n(rBe,"A",{href:!0});var x4t=s(WX);dzo=r(x4t,"LEDForSequenceClassification"),x4t.forEach(t),czo=r(rBe," (LED model)"),rBe.forEach(t),fzo=i(j),Lv=n(j,"LI",{});var tBe=s(Lv);iue=n(tBe,"STRONG",{});var $4t=s(iue);mzo=r($4t,"longformer"),$4t.forEach(t),gzo=r(tBe," \u2014 "),QX=n(tBe,"A",{href:!0});var k4t=s(QX);hzo=r(k4t,"LongformerForSequenceClassification"),k4t.forEach(t),pzo=r(tBe," (Longformer model)"),tBe.forEach(t),_zo=i(j),yv=n(j,"LI",{});var aBe=s(yv);due=n(aBe,"STRONG",{});var S4t=s(due);uzo=r(S4t,"mbart"),S4t.forEach(t),bzo=r(aBe," \u2014 "),HX=n(aBe,"A",{href:!0});var R4t=s(HX);vzo=r(R4t,"MBartForSequenceClassification"),R4t.forEach(t),Fzo=r(aBe," (mBART model)"),aBe.forEach(t),Tzo=i(j),xv=n(j,"LI",{});var nBe=s(xv);cue=n(nBe,"STRONG",{});var P4t=s(cue);Mzo=r(P4t,"megatron-bert"),P4t.forEach(t),Ezo=r(nBe," \u2014 "),UX=n(nBe,"A",{href:!0});var B4t=s(UX);Czo=r(B4t,"MegatronBertForSequenceClassification"),B4t.forEach(t),wzo=r(nBe," (Megatron-BERT model)"),nBe.forEach(t),Azo=i(j),$v=n(j,"LI",{});var sBe=s($v);fue=n(sBe,"STRONG",{});var I4t=s(fue);Lzo=r(I4t,"mobilebert"),I4t.forEach(t),yzo=r(sBe," \u2014 "),JX=n(sBe,"A",{href:!0});var N4t=s(JX);xzo=r(N4t,"MobileBertForSequenceClassification"),N4t.forEach(t),$zo=r(sBe," (MobileBERT model)"),sBe.forEach(t),kzo=i(j),kv=n(j,"LI",{});var lBe=s(kv);mue=n(lBe,"STRONG",{});var q4t=s(mue);Szo=r(q4t,"mpnet"),q4t.forEach(t),Rzo=r(lBe," \u2014 "),YX=n(lBe,"A",{href:!0});var j4t=s(YX);Pzo=r(j4t,"MPNetForSequenceClassification"),j4t.forEach(t),Bzo=r(lBe," (MPNet model)"),lBe.forEach(t),Izo=i(j),Sv=n(j,"LI",{});var iBe=s(Sv);gue=n(iBe,"STRONG",{});var D4t=s(gue);Nzo=r(D4t,"mvp"),D4t.forEach(t),qzo=r(iBe," \u2014 "),KX=n(iBe,"A",{href:!0});var G4t=s(KX);jzo=r(G4t,"MvpForSequenceClassification"),G4t.forEach(t),Dzo=r(iBe," (MVP model)"),iBe.forEach(t),Gzo=i(j),Rv=n(j,"LI",{});var dBe=s(Rv);hue=n(dBe,"STRONG",{});var O4t=s(hue);Ozo=r(O4t,"nezha"),O4t.forEach(t),Vzo=r(dBe," \u2014 "),ZX=n(dBe,"A",{href:!0});var V4t=s(ZX);Xzo=r(V4t,"NezhaForSequenceClassification"),V4t.forEach(t),zzo=r(dBe," (Nezha model)"),dBe.forEach(t),Wzo=i(j),Pv=n(j,"LI",{});var cBe=s(Pv);pue=n(cBe,"STRONG",{});var X4t=s(pue);Qzo=r(X4t,"nystromformer"),X4t.forEach(t),Hzo=r(cBe," \u2014 "),ez=n(cBe,"A",{href:!0});var z4t=s(ez);Uzo=r(z4t,"NystromformerForSequenceClassification"),z4t.forEach(t),Jzo=r(cBe," (Nystr\xF6mformer model)"),cBe.forEach(t),Yzo=i(j),Bv=n(j,"LI",{});var fBe=s(Bv);_ue=n(fBe,"STRONG",{});var W4t=s(_ue);Kzo=r(W4t,"openai-gpt"),W4t.forEach(t),Zzo=r(fBe," \u2014 "),oz=n(fBe,"A",{href:!0});var Q4t=s(oz);eWo=r(Q4t,"OpenAIGPTForSequenceClassification"),Q4t.forEach(t),oWo=r(fBe," (OpenAI GPT model)"),fBe.forEach(t),rWo=i(j),Iv=n(j,"LI",{});var mBe=s(Iv);uue=n(mBe,"STRONG",{});var H4t=s(uue);tWo=r(H4t,"opt"),H4t.forEach(t),aWo=r(mBe," \u2014 "),rz=n(mBe,"A",{href:!0});var U4t=s(rz);nWo=r(U4t,"OPTForSequenceClassification"),U4t.forEach(t),sWo=r(mBe," (OPT model)"),mBe.forEach(t),lWo=i(j),Nv=n(j,"LI",{});var gBe=s(Nv);bue=n(gBe,"STRONG",{});var J4t=s(bue);iWo=r(J4t,"perceiver"),J4t.forEach(t),dWo=r(gBe," \u2014 "),tz=n(gBe,"A",{href:!0});var Y4t=s(tz);cWo=r(Y4t,"PerceiverForSequenceClassification"),Y4t.forEach(t),fWo=r(gBe," (Perceiver model)"),gBe.forEach(t),mWo=i(j),qv=n(j,"LI",{});var hBe=s(qv);vue=n(hBe,"STRONG",{});var K4t=s(vue);gWo=r(K4t,"plbart"),K4t.forEach(t),hWo=r(hBe," \u2014 "),az=n(hBe,"A",{href:!0});var Z4t=s(az);pWo=r(Z4t,"PLBartForSequenceClassification"),Z4t.forEach(t),_Wo=r(hBe," (PLBart model)"),hBe.forEach(t),uWo=i(j),jv=n(j,"LI",{});var pBe=s(jv);Fue=n(pBe,"STRONG",{});var eEt=s(Fue);bWo=r(eEt,"qdqbert"),eEt.forEach(t),vWo=r(pBe," \u2014 "),nz=n(pBe,"A",{href:!0});var oEt=s(nz);FWo=r(oEt,"QDQBertForSequenceClassification"),oEt.forEach(t),TWo=r(pBe," (QDQBert model)"),pBe.forEach(t),MWo=i(j),Dv=n(j,"LI",{});var _Be=s(Dv);Tue=n(_Be,"STRONG",{});var rEt=s(Tue);EWo=r(rEt,"reformer"),rEt.forEach(t),CWo=r(_Be," \u2014 "),sz=n(_Be,"A",{href:!0});var tEt=s(sz);wWo=r(tEt,"ReformerForSequenceClassification"),tEt.forEach(t),AWo=r(_Be," (Reformer model)"),_Be.forEach(t),LWo=i(j),Gv=n(j,"LI",{});var uBe=s(Gv);Mue=n(uBe,"STRONG",{});var aEt=s(Mue);yWo=r(aEt,"rembert"),aEt.forEach(t),xWo=r(uBe," \u2014 "),lz=n(uBe,"A",{href:!0});var nEt=s(lz);$Wo=r(nEt,"RemBertForSequenceClassification"),nEt.forEach(t),kWo=r(uBe," (RemBERT model)"),uBe.forEach(t),SWo=i(j),Ov=n(j,"LI",{});var bBe=s(Ov);Eue=n(bBe,"STRONG",{});var sEt=s(Eue);RWo=r(sEt,"roberta"),sEt.forEach(t),PWo=r(bBe," \u2014 "),iz=n(bBe,"A",{href:!0});var lEt=s(iz);BWo=r(lEt,"RobertaForSequenceClassification"),lEt.forEach(t),IWo=r(bBe," (RoBERTa model)"),bBe.forEach(t),NWo=i(j),Vv=n(j,"LI",{});var vBe=s(Vv);Cue=n(vBe,"STRONG",{});var iEt=s(Cue);qWo=r(iEt,"roformer"),iEt.forEach(t),jWo=r(vBe," \u2014 "),dz=n(vBe,"A",{href:!0});var dEt=s(dz);DWo=r(dEt,"RoFormerForSequenceClassification"),dEt.forEach(t),GWo=r(vBe," (RoFormer model)"),vBe.forEach(t),OWo=i(j),Xv=n(j,"LI",{});var FBe=s(Xv);wue=n(FBe,"STRONG",{});var cEt=s(wue);VWo=r(cEt,"squeezebert"),cEt.forEach(t),XWo=r(FBe," \u2014 "),cz=n(FBe,"A",{href:!0});var fEt=s(cz);zWo=r(fEt,"SqueezeBertForSequenceClassification"),fEt.forEach(t),WWo=r(FBe," (SqueezeBERT model)"),FBe.forEach(t),QWo=i(j),zv=n(j,"LI",{});var TBe=s(zv);Aue=n(TBe,"STRONG",{});var mEt=s(Aue);HWo=r(mEt,"tapas"),mEt.forEach(t),UWo=r(TBe," \u2014 "),fz=n(TBe,"A",{href:!0});var gEt=s(fz);JWo=r(gEt,"TapasForSequenceClassification"),gEt.forEach(t),YWo=r(TBe," (TAPAS model)"),TBe.forEach(t),KWo=i(j),Wv=n(j,"LI",{});var MBe=s(Wv);Lue=n(MBe,"STRONG",{});var hEt=s(Lue);ZWo=r(hEt,"transfo-xl"),hEt.forEach(t),eQo=r(MBe," \u2014 "),mz=n(MBe,"A",{href:!0});var pEt=s(mz);oQo=r(pEt,"TransfoXLForSequenceClassification"),pEt.forEach(t),rQo=r(MBe," (Transformer-XL model)"),MBe.forEach(t),tQo=i(j),Qv=n(j,"LI",{});var EBe=s(Qv);yue=n(EBe,"STRONG",{});var _Et=s(yue);aQo=r(_Et,"xlm"),_Et.forEach(t),nQo=r(EBe," \u2014 "),gz=n(EBe,"A",{href:!0});var uEt=s(gz);sQo=r(uEt,"XLMForSequenceClassification"),uEt.forEach(t),lQo=r(EBe," (XLM model)"),EBe.forEach(t),iQo=i(j),Hv=n(j,"LI",{});var CBe=s(Hv);xue=n(CBe,"STRONG",{});var bEt=s(xue);dQo=r(bEt,"xlm-roberta"),bEt.forEach(t),cQo=r(CBe," \u2014 "),hz=n(CBe,"A",{href:!0});var vEt=s(hz);fQo=r(vEt,"XLMRobertaForSequenceClassification"),vEt.forEach(t),mQo=r(CBe," (XLM-RoBERTa model)"),CBe.forEach(t),gQo=i(j),Uv=n(j,"LI",{});var wBe=s(Uv);$ue=n(wBe,"STRONG",{});var FEt=s($ue);hQo=r(FEt,"xlm-roberta-xl"),FEt.forEach(t),pQo=r(wBe," \u2014 "),pz=n(wBe,"A",{href:!0});var TEt=s(pz);_Qo=r(TEt,"XLMRobertaXLForSequenceClassification"),TEt.forEach(t),uQo=r(wBe," (XLM-RoBERTa-XL model)"),wBe.forEach(t),bQo=i(j),Jv=n(j,"LI",{});var ABe=s(Jv);kue=n(ABe,"STRONG",{});var MEt=s(kue);vQo=r(MEt,"xlnet"),MEt.forEach(t),FQo=r(ABe," \u2014 "),_z=n(ABe,"A",{href:!0});var EEt=s(_z);TQo=r(EEt,"XLNetForSequenceClassification"),EEt.forEach(t),MQo=r(ABe," (XLNet model)"),ABe.forEach(t),EQo=i(j),Yv=n(j,"LI",{});var LBe=s(Yv);Sue=n(LBe,"STRONG",{});var CEt=s(Sue);CQo=r(CEt,"yoso"),CEt.forEach(t),wQo=r(LBe," \u2014 "),uz=n(LBe,"A",{href:!0});var wEt=s(uz);AQo=r(wEt,"YosoForSequenceClassification"),wEt.forEach(t),LQo=r(LBe," (YOSO model)"),LBe.forEach(t),j.forEach(t),yQo=i(ma),Kv=n(ma,"P",{});var yBe=s(Kv);xQo=r(yBe,"The model is set in evaluation mode by default using "),Rue=n(yBe,"CODE",{});var AEt=s(Rue);$Qo=r(AEt,"model.eval()"),AEt.forEach(t),kQo=r(yBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=n(yBe,"CODE",{});var LEt=s(Pue);SQo=r(LEt,"model.train()"),LEt.forEach(t),yBe.forEach(t),RQo=i(ma),T(Zv.$$.fragment,ma),ma.forEach(t),dl.forEach(t),Aze=i(f),ld=n(f,"H2",{class:!0});var SQe=s(ld);eF=n(SQe,"A",{id:!0,class:!0,href:!0});var yEt=s(eF);Bue=n(yEt,"SPAN",{});var xEt=s(Bue);T(Fy.$$.fragment,xEt),xEt.forEach(t),yEt.forEach(t),PQo=i(SQe),Iue=n(SQe,"SPAN",{});var $Et=s(Iue);BQo=r($Et,"AutoModelForMultipleChoice"),$Et.forEach(t),SQe.forEach(t),Lze=i(f),No=n(f,"DIV",{class:!0});var cl=s(No);T(Ty.$$.fragment,cl),IQo=i(cl),id=n(cl,"P",{});var Fte=s(id);NQo=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bz=n(Fte,"A",{href:!0});var kEt=s(bz);qQo=r(kEt,"from_pretrained()"),kEt.forEach(t),jQo=r(Fte," class method or the "),vz=n(Fte,"A",{href:!0});var SEt=s(vz);DQo=r(SEt,"from_config()"),SEt.forEach(t),GQo=r(Fte,` class
method.`),Fte.forEach(t),OQo=i(cl),My=n(cl,"P",{});var RQe=s(My);VQo=r(RQe,"This class cannot be instantiated directly using "),Nue=n(RQe,"CODE",{});var REt=s(Nue);XQo=r(REt,"__init__()"),REt.forEach(t),zQo=r(RQe," (throws an error)."),RQe.forEach(t),WQo=i(cl),ht=n(cl,"DIV",{class:!0});var Pw=s(ht);T(Ey.$$.fragment,Pw),QQo=i(Pw),que=n(Pw,"P",{});var PEt=s(que);HQo=r(PEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PEt.forEach(t),UQo=i(Pw),dd=n(Pw,"P",{});var Tte=s(dd);JQo=r(Tte,`Note:
Loading a model from its configuration file does `),jue=n(Tte,"STRONG",{});var BEt=s(jue);YQo=r(BEt,"not"),BEt.forEach(t),KQo=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(Tte,"A",{href:!0});var IEt=s(Fz);ZQo=r(IEt,"from_pretrained()"),IEt.forEach(t),eHo=r(Tte," to load the model weights."),Tte.forEach(t),oHo=i(Pw),T(oF.$$.fragment,Pw),Pw.forEach(t),rHo=i(cl),to=n(cl,"DIV",{class:!0});var ga=s(to);T(Cy.$$.fragment,ga),tHo=i(ga),Due=n(ga,"P",{});var NEt=s(Due);aHo=r(NEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NEt.forEach(t),nHo=i(ga),Oa=n(ga,"P",{});var Bw=s(Oa);sHo=r(Bw,"The model class to instantiate is selected based on the "),Gue=n(Bw,"CODE",{});var qEt=s(Gue);lHo=r(qEt,"model_type"),qEt.forEach(t),iHo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Oue=n(Bw,"CODE",{});var jEt=s(Oue);dHo=r(jEt,"pretrained_model_name_or_path"),jEt.forEach(t),cHo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(Bw,"CODE",{});var DEt=s(Vue);fHo=r(DEt,"pretrained_model_name_or_path"),DEt.forEach(t),mHo=r(Bw,":"),Bw.forEach(t),gHo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);rF=n(ee,"LI",{});var xBe=s(rF);Xue=n(xBe,"STRONG",{});var GEt=s(Xue);hHo=r(GEt,"albert"),GEt.forEach(t),pHo=r(xBe," \u2014 "),Tz=n(xBe,"A",{href:!0});var OEt=s(Tz);_Ho=r(OEt,"AlbertForMultipleChoice"),OEt.forEach(t),uHo=r(xBe," (ALBERT model)"),xBe.forEach(t),bHo=i(ee),tF=n(ee,"LI",{});var $Be=s(tF);zue=n($Be,"STRONG",{});var VEt=s(zue);vHo=r(VEt,"bert"),VEt.forEach(t),FHo=r($Be," \u2014 "),Mz=n($Be,"A",{href:!0});var XEt=s(Mz);THo=r(XEt,"BertForMultipleChoice"),XEt.forEach(t),MHo=r($Be," (BERT model)"),$Be.forEach(t),EHo=i(ee),aF=n(ee,"LI",{});var kBe=s(aF);Wue=n(kBe,"STRONG",{});var zEt=s(Wue);CHo=r(zEt,"big_bird"),zEt.forEach(t),wHo=r(kBe," \u2014 "),Ez=n(kBe,"A",{href:!0});var WEt=s(Ez);AHo=r(WEt,"BigBirdForMultipleChoice"),WEt.forEach(t),LHo=r(kBe," (BigBird model)"),kBe.forEach(t),yHo=i(ee),nF=n(ee,"LI",{});var SBe=s(nF);Que=n(SBe,"STRONG",{});var QEt=s(Que);xHo=r(QEt,"camembert"),QEt.forEach(t),$Ho=r(SBe," \u2014 "),Cz=n(SBe,"A",{href:!0});var HEt=s(Cz);kHo=r(HEt,"CamembertForMultipleChoice"),HEt.forEach(t),SHo=r(SBe," (CamemBERT model)"),SBe.forEach(t),RHo=i(ee),sF=n(ee,"LI",{});var RBe=s(sF);Hue=n(RBe,"STRONG",{});var UEt=s(Hue);PHo=r(UEt,"canine"),UEt.forEach(t),BHo=r(RBe," \u2014 "),wz=n(RBe,"A",{href:!0});var JEt=s(wz);IHo=r(JEt,"CanineForMultipleChoice"),JEt.forEach(t),NHo=r(RBe," (CANINE model)"),RBe.forEach(t),qHo=i(ee),lF=n(ee,"LI",{});var PBe=s(lF);Uue=n(PBe,"STRONG",{});var YEt=s(Uue);jHo=r(YEt,"convbert"),YEt.forEach(t),DHo=r(PBe," \u2014 "),Az=n(PBe,"A",{href:!0});var KEt=s(Az);GHo=r(KEt,"ConvBertForMultipleChoice"),KEt.forEach(t),OHo=r(PBe," (ConvBERT model)"),PBe.forEach(t),VHo=i(ee),iF=n(ee,"LI",{});var BBe=s(iF);Jue=n(BBe,"STRONG",{});var ZEt=s(Jue);XHo=r(ZEt,"data2vec-text"),ZEt.forEach(t),zHo=r(BBe," \u2014 "),Lz=n(BBe,"A",{href:!0});var eCt=s(Lz);WHo=r(eCt,"Data2VecTextForMultipleChoice"),eCt.forEach(t),QHo=r(BBe," (Data2VecText model)"),BBe.forEach(t),HHo=i(ee),dF=n(ee,"LI",{});var IBe=s(dF);Yue=n(IBe,"STRONG",{});var oCt=s(Yue);UHo=r(oCt,"deberta-v2"),oCt.forEach(t),JHo=r(IBe," \u2014 "),yz=n(IBe,"A",{href:!0});var rCt=s(yz);YHo=r(rCt,"DebertaV2ForMultipleChoice"),rCt.forEach(t),KHo=r(IBe," (DeBERTa-v2 model)"),IBe.forEach(t),ZHo=i(ee),cF=n(ee,"LI",{});var NBe=s(cF);Kue=n(NBe,"STRONG",{});var tCt=s(Kue);eUo=r(tCt,"distilbert"),tCt.forEach(t),oUo=r(NBe," \u2014 "),xz=n(NBe,"A",{href:!0});var aCt=s(xz);rUo=r(aCt,"DistilBertForMultipleChoice"),aCt.forEach(t),tUo=r(NBe," (DistilBERT model)"),NBe.forEach(t),aUo=i(ee),fF=n(ee,"LI",{});var qBe=s(fF);Zue=n(qBe,"STRONG",{});var nCt=s(Zue);nUo=r(nCt,"electra"),nCt.forEach(t),sUo=r(qBe," \u2014 "),$z=n(qBe,"A",{href:!0});var sCt=s($z);lUo=r(sCt,"ElectraForMultipleChoice"),sCt.forEach(t),iUo=r(qBe," (ELECTRA model)"),qBe.forEach(t),dUo=i(ee),mF=n(ee,"LI",{});var jBe=s(mF);e2e=n(jBe,"STRONG",{});var lCt=s(e2e);cUo=r(lCt,"flaubert"),lCt.forEach(t),fUo=r(jBe," \u2014 "),kz=n(jBe,"A",{href:!0});var iCt=s(kz);mUo=r(iCt,"FlaubertForMultipleChoice"),iCt.forEach(t),gUo=r(jBe," (FlauBERT model)"),jBe.forEach(t),hUo=i(ee),gF=n(ee,"LI",{});var DBe=s(gF);o2e=n(DBe,"STRONG",{});var dCt=s(o2e);pUo=r(dCt,"fnet"),dCt.forEach(t),_Uo=r(DBe," \u2014 "),Sz=n(DBe,"A",{href:!0});var cCt=s(Sz);uUo=r(cCt,"FNetForMultipleChoice"),cCt.forEach(t),bUo=r(DBe," (FNet model)"),DBe.forEach(t),vUo=i(ee),hF=n(ee,"LI",{});var GBe=s(hF);r2e=n(GBe,"STRONG",{});var fCt=s(r2e);FUo=r(fCt,"funnel"),fCt.forEach(t),TUo=r(GBe," \u2014 "),Rz=n(GBe,"A",{href:!0});var mCt=s(Rz);MUo=r(mCt,"FunnelForMultipleChoice"),mCt.forEach(t),EUo=r(GBe," (Funnel Transformer model)"),GBe.forEach(t),CUo=i(ee),pF=n(ee,"LI",{});var OBe=s(pF);t2e=n(OBe,"STRONG",{});var gCt=s(t2e);wUo=r(gCt,"ibert"),gCt.forEach(t),AUo=r(OBe," \u2014 "),Pz=n(OBe,"A",{href:!0});var hCt=s(Pz);LUo=r(hCt,"IBertForMultipleChoice"),hCt.forEach(t),yUo=r(OBe," (I-BERT model)"),OBe.forEach(t),xUo=i(ee),_F=n(ee,"LI",{});var VBe=s(_F);a2e=n(VBe,"STRONG",{});var pCt=s(a2e);$Uo=r(pCt,"longformer"),pCt.forEach(t),kUo=r(VBe," \u2014 "),Bz=n(VBe,"A",{href:!0});var _Ct=s(Bz);SUo=r(_Ct,"LongformerForMultipleChoice"),_Ct.forEach(t),RUo=r(VBe," (Longformer model)"),VBe.forEach(t),PUo=i(ee),uF=n(ee,"LI",{});var XBe=s(uF);n2e=n(XBe,"STRONG",{});var uCt=s(n2e);BUo=r(uCt,"megatron-bert"),uCt.forEach(t),IUo=r(XBe," \u2014 "),Iz=n(XBe,"A",{href:!0});var bCt=s(Iz);NUo=r(bCt,"MegatronBertForMultipleChoice"),bCt.forEach(t),qUo=r(XBe," (Megatron-BERT model)"),XBe.forEach(t),jUo=i(ee),bF=n(ee,"LI",{});var zBe=s(bF);s2e=n(zBe,"STRONG",{});var vCt=s(s2e);DUo=r(vCt,"mobilebert"),vCt.forEach(t),GUo=r(zBe," \u2014 "),Nz=n(zBe,"A",{href:!0});var FCt=s(Nz);OUo=r(FCt,"MobileBertForMultipleChoice"),FCt.forEach(t),VUo=r(zBe," (MobileBERT model)"),zBe.forEach(t),XUo=i(ee),vF=n(ee,"LI",{});var WBe=s(vF);l2e=n(WBe,"STRONG",{});var TCt=s(l2e);zUo=r(TCt,"mpnet"),TCt.forEach(t),WUo=r(WBe," \u2014 "),qz=n(WBe,"A",{href:!0});var MCt=s(qz);QUo=r(MCt,"MPNetForMultipleChoice"),MCt.forEach(t),HUo=r(WBe," (MPNet model)"),WBe.forEach(t),UUo=i(ee),FF=n(ee,"LI",{});var QBe=s(FF);i2e=n(QBe,"STRONG",{});var ECt=s(i2e);JUo=r(ECt,"nezha"),ECt.forEach(t),YUo=r(QBe," \u2014 "),jz=n(QBe,"A",{href:!0});var CCt=s(jz);KUo=r(CCt,"NezhaForMultipleChoice"),CCt.forEach(t),ZUo=r(QBe," (Nezha model)"),QBe.forEach(t),eJo=i(ee),TF=n(ee,"LI",{});var HBe=s(TF);d2e=n(HBe,"STRONG",{});var wCt=s(d2e);oJo=r(wCt,"nystromformer"),wCt.forEach(t),rJo=r(HBe," \u2014 "),Dz=n(HBe,"A",{href:!0});var ACt=s(Dz);tJo=r(ACt,"NystromformerForMultipleChoice"),ACt.forEach(t),aJo=r(HBe," (Nystr\xF6mformer model)"),HBe.forEach(t),nJo=i(ee),MF=n(ee,"LI",{});var UBe=s(MF);c2e=n(UBe,"STRONG",{});var LCt=s(c2e);sJo=r(LCt,"qdqbert"),LCt.forEach(t),lJo=r(UBe," \u2014 "),Gz=n(UBe,"A",{href:!0});var yCt=s(Gz);iJo=r(yCt,"QDQBertForMultipleChoice"),yCt.forEach(t),dJo=r(UBe," (QDQBert model)"),UBe.forEach(t),cJo=i(ee),EF=n(ee,"LI",{});var JBe=s(EF);f2e=n(JBe,"STRONG",{});var xCt=s(f2e);fJo=r(xCt,"rembert"),xCt.forEach(t),mJo=r(JBe," \u2014 "),Oz=n(JBe,"A",{href:!0});var $Ct=s(Oz);gJo=r($Ct,"RemBertForMultipleChoice"),$Ct.forEach(t),hJo=r(JBe," (RemBERT model)"),JBe.forEach(t),pJo=i(ee),CF=n(ee,"LI",{});var YBe=s(CF);m2e=n(YBe,"STRONG",{});var kCt=s(m2e);_Jo=r(kCt,"roberta"),kCt.forEach(t),uJo=r(YBe," \u2014 "),Vz=n(YBe,"A",{href:!0});var SCt=s(Vz);bJo=r(SCt,"RobertaForMultipleChoice"),SCt.forEach(t),vJo=r(YBe," (RoBERTa model)"),YBe.forEach(t),FJo=i(ee),wF=n(ee,"LI",{});var KBe=s(wF);g2e=n(KBe,"STRONG",{});var RCt=s(g2e);TJo=r(RCt,"roformer"),RCt.forEach(t),MJo=r(KBe," \u2014 "),Xz=n(KBe,"A",{href:!0});var PCt=s(Xz);EJo=r(PCt,"RoFormerForMultipleChoice"),PCt.forEach(t),CJo=r(KBe," (RoFormer model)"),KBe.forEach(t),wJo=i(ee),AF=n(ee,"LI",{});var ZBe=s(AF);h2e=n(ZBe,"STRONG",{});var BCt=s(h2e);AJo=r(BCt,"squeezebert"),BCt.forEach(t),LJo=r(ZBe," \u2014 "),zz=n(ZBe,"A",{href:!0});var ICt=s(zz);yJo=r(ICt,"SqueezeBertForMultipleChoice"),ICt.forEach(t),xJo=r(ZBe," (SqueezeBERT model)"),ZBe.forEach(t),$Jo=i(ee),LF=n(ee,"LI",{});var eIe=s(LF);p2e=n(eIe,"STRONG",{});var NCt=s(p2e);kJo=r(NCt,"xlm"),NCt.forEach(t),SJo=r(eIe," \u2014 "),Wz=n(eIe,"A",{href:!0});var qCt=s(Wz);RJo=r(qCt,"XLMForMultipleChoice"),qCt.forEach(t),PJo=r(eIe," (XLM model)"),eIe.forEach(t),BJo=i(ee),yF=n(ee,"LI",{});var oIe=s(yF);_2e=n(oIe,"STRONG",{});var jCt=s(_2e);IJo=r(jCt,"xlm-roberta"),jCt.forEach(t),NJo=r(oIe," \u2014 "),Qz=n(oIe,"A",{href:!0});var DCt=s(Qz);qJo=r(DCt,"XLMRobertaForMultipleChoice"),DCt.forEach(t),jJo=r(oIe," (XLM-RoBERTa model)"),oIe.forEach(t),DJo=i(ee),xF=n(ee,"LI",{});var rIe=s(xF);u2e=n(rIe,"STRONG",{});var GCt=s(u2e);GJo=r(GCt,"xlm-roberta-xl"),GCt.forEach(t),OJo=r(rIe," \u2014 "),Hz=n(rIe,"A",{href:!0});var OCt=s(Hz);VJo=r(OCt,"XLMRobertaXLForMultipleChoice"),OCt.forEach(t),XJo=r(rIe," (XLM-RoBERTa-XL model)"),rIe.forEach(t),zJo=i(ee),$F=n(ee,"LI",{});var tIe=s($F);b2e=n(tIe,"STRONG",{});var VCt=s(b2e);WJo=r(VCt,"xlnet"),VCt.forEach(t),QJo=r(tIe," \u2014 "),Uz=n(tIe,"A",{href:!0});var XCt=s(Uz);HJo=r(XCt,"XLNetForMultipleChoice"),XCt.forEach(t),UJo=r(tIe," (XLNet model)"),tIe.forEach(t),JJo=i(ee),kF=n(ee,"LI",{});var aIe=s(kF);v2e=n(aIe,"STRONG",{});var zCt=s(v2e);YJo=r(zCt,"yoso"),zCt.forEach(t),KJo=r(aIe," \u2014 "),Jz=n(aIe,"A",{href:!0});var WCt=s(Jz);ZJo=r(WCt,"YosoForMultipleChoice"),WCt.forEach(t),eYo=r(aIe," (YOSO model)"),aIe.forEach(t),ee.forEach(t),oYo=i(ga),SF=n(ga,"P",{});var nIe=s(SF);rYo=r(nIe,"The model is set in evaluation mode by default using "),F2e=n(nIe,"CODE",{});var QCt=s(F2e);tYo=r(QCt,"model.eval()"),QCt.forEach(t),aYo=r(nIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=n(nIe,"CODE",{});var HCt=s(T2e);nYo=r(HCt,"model.train()"),HCt.forEach(t),nIe.forEach(t),sYo=i(ga),T(RF.$$.fragment,ga),ga.forEach(t),cl.forEach(t),yze=i(f),cd=n(f,"H2",{class:!0});var PQe=s(cd);PF=n(PQe,"A",{id:!0,class:!0,href:!0});var UCt=s(PF);M2e=n(UCt,"SPAN",{});var JCt=s(M2e);T(wy.$$.fragment,JCt),JCt.forEach(t),UCt.forEach(t),lYo=i(PQe),E2e=n(PQe,"SPAN",{});var YCt=s(E2e);iYo=r(YCt,"AutoModelForNextSentencePrediction"),YCt.forEach(t),PQe.forEach(t),xze=i(f),qo=n(f,"DIV",{class:!0});var fl=s(qo);T(Ay.$$.fragment,fl),dYo=i(fl),fd=n(fl,"P",{});var Mte=s(fd);cYo=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Yz=n(Mte,"A",{href:!0});var KCt=s(Yz);fYo=r(KCt,"from_pretrained()"),KCt.forEach(t),mYo=r(Mte," class method or the "),Kz=n(Mte,"A",{href:!0});var ZCt=s(Kz);gYo=r(ZCt,"from_config()"),ZCt.forEach(t),hYo=r(Mte,` class
method.`),Mte.forEach(t),pYo=i(fl),Ly=n(fl,"P",{});var BQe=s(Ly);_Yo=r(BQe,"This class cannot be instantiated directly using "),C2e=n(BQe,"CODE",{});var e5t=s(C2e);uYo=r(e5t,"__init__()"),e5t.forEach(t),bYo=r(BQe," (throws an error)."),BQe.forEach(t),vYo=i(fl),pt=n(fl,"DIV",{class:!0});var Iw=s(pt);T(yy.$$.fragment,Iw),FYo=i(Iw),w2e=n(Iw,"P",{});var o5t=s(w2e);TYo=r(o5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),o5t.forEach(t),MYo=i(Iw),md=n(Iw,"P",{});var Ete=s(md);EYo=r(Ete,`Note:
Loading a model from its configuration file does `),A2e=n(Ete,"STRONG",{});var r5t=s(A2e);CYo=r(r5t,"not"),r5t.forEach(t),wYo=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(Ete,"A",{href:!0});var t5t=s(Zz);AYo=r(t5t,"from_pretrained()"),t5t.forEach(t),LYo=r(Ete," to load the model weights."),Ete.forEach(t),yYo=i(Iw),T(BF.$$.fragment,Iw),Iw.forEach(t),xYo=i(fl),ao=n(fl,"DIV",{class:!0});var ha=s(ao);T(xy.$$.fragment,ha),$Yo=i(ha),L2e=n(ha,"P",{});var a5t=s(L2e);kYo=r(a5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),a5t.forEach(t),SYo=i(ha),Va=n(ha,"P",{});var Nw=s(Va);RYo=r(Nw,"The model class to instantiate is selected based on the "),y2e=n(Nw,"CODE",{});var n5t=s(y2e);PYo=r(n5t,"model_type"),n5t.forEach(t),BYo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),x2e=n(Nw,"CODE",{});var s5t=s(x2e);IYo=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),NYo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(Nw,"CODE",{});var l5t=s($2e);qYo=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),jYo=r(Nw,":"),Nw.forEach(t),DYo=i(ha),jo=n(ha,"UL",{});var pa=s(jo);IF=n(pa,"LI",{});var sIe=s(IF);k2e=n(sIe,"STRONG",{});var i5t=s(k2e);GYo=r(i5t,"bert"),i5t.forEach(t),OYo=r(sIe," \u2014 "),eW=n(sIe,"A",{href:!0});var d5t=s(eW);VYo=r(d5t,"BertForNextSentencePrediction"),d5t.forEach(t),XYo=r(sIe," (BERT model)"),sIe.forEach(t),zYo=i(pa),NF=n(pa,"LI",{});var lIe=s(NF);S2e=n(lIe,"STRONG",{});var c5t=s(S2e);WYo=r(c5t,"fnet"),c5t.forEach(t),QYo=r(lIe," \u2014 "),oW=n(lIe,"A",{href:!0});var f5t=s(oW);HYo=r(f5t,"FNetForNextSentencePrediction"),f5t.forEach(t),UYo=r(lIe," (FNet model)"),lIe.forEach(t),JYo=i(pa),qF=n(pa,"LI",{});var iIe=s(qF);R2e=n(iIe,"STRONG",{});var m5t=s(R2e);YYo=r(m5t,"megatron-bert"),m5t.forEach(t),KYo=r(iIe," \u2014 "),rW=n(iIe,"A",{href:!0});var g5t=s(rW);ZYo=r(g5t,"MegatronBertForNextSentencePrediction"),g5t.forEach(t),eKo=r(iIe," (Megatron-BERT model)"),iIe.forEach(t),oKo=i(pa),jF=n(pa,"LI",{});var dIe=s(jF);P2e=n(dIe,"STRONG",{});var h5t=s(P2e);rKo=r(h5t,"mobilebert"),h5t.forEach(t),tKo=r(dIe," \u2014 "),tW=n(dIe,"A",{href:!0});var p5t=s(tW);aKo=r(p5t,"MobileBertForNextSentencePrediction"),p5t.forEach(t),nKo=r(dIe," (MobileBERT model)"),dIe.forEach(t),sKo=i(pa),DF=n(pa,"LI",{});var cIe=s(DF);B2e=n(cIe,"STRONG",{});var _5t=s(B2e);lKo=r(_5t,"nezha"),_5t.forEach(t),iKo=r(cIe," \u2014 "),aW=n(cIe,"A",{href:!0});var u5t=s(aW);dKo=r(u5t,"NezhaForNextSentencePrediction"),u5t.forEach(t),cKo=r(cIe," (Nezha model)"),cIe.forEach(t),fKo=i(pa),GF=n(pa,"LI",{});var fIe=s(GF);I2e=n(fIe,"STRONG",{});var b5t=s(I2e);mKo=r(b5t,"qdqbert"),b5t.forEach(t),gKo=r(fIe," \u2014 "),nW=n(fIe,"A",{href:!0});var v5t=s(nW);hKo=r(v5t,"QDQBertForNextSentencePrediction"),v5t.forEach(t),pKo=r(fIe," (QDQBert model)"),fIe.forEach(t),pa.forEach(t),_Ko=i(ha),OF=n(ha,"P",{});var mIe=s(OF);uKo=r(mIe,"The model is set in evaluation mode by default using "),N2e=n(mIe,"CODE",{});var F5t=s(N2e);bKo=r(F5t,"model.eval()"),F5t.forEach(t),vKo=r(mIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=n(mIe,"CODE",{});var T5t=s(q2e);FKo=r(T5t,"model.train()"),T5t.forEach(t),mIe.forEach(t),TKo=i(ha),T(VF.$$.fragment,ha),ha.forEach(t),fl.forEach(t),$ze=i(f),gd=n(f,"H2",{class:!0});var IQe=s(gd);XF=n(IQe,"A",{id:!0,class:!0,href:!0});var M5t=s(XF);j2e=n(M5t,"SPAN",{});var E5t=s(j2e);T($y.$$.fragment,E5t),E5t.forEach(t),M5t.forEach(t),MKo=i(IQe),D2e=n(IQe,"SPAN",{});var C5t=s(D2e);EKo=r(C5t,"AutoModelForTokenClassification"),C5t.forEach(t),IQe.forEach(t),kze=i(f),Do=n(f,"DIV",{class:!0});var ml=s(Do);T(ky.$$.fragment,ml),CKo=i(ml),hd=n(ml,"P",{});var Cte=s(hd);wKo=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sW=n(Cte,"A",{href:!0});var w5t=s(sW);AKo=r(w5t,"from_pretrained()"),w5t.forEach(t),LKo=r(Cte," class method or the "),lW=n(Cte,"A",{href:!0});var A5t=s(lW);yKo=r(A5t,"from_config()"),A5t.forEach(t),xKo=r(Cte,` class
method.`),Cte.forEach(t),$Ko=i(ml),Sy=n(ml,"P",{});var NQe=s(Sy);kKo=r(NQe,"This class cannot be instantiated directly using "),G2e=n(NQe,"CODE",{});var L5t=s(G2e);SKo=r(L5t,"__init__()"),L5t.forEach(t),RKo=r(NQe," (throws an error)."),NQe.forEach(t),PKo=i(ml),_t=n(ml,"DIV",{class:!0});var qw=s(_t);T(Ry.$$.fragment,qw),BKo=i(qw),O2e=n(qw,"P",{});var y5t=s(O2e);IKo=r(y5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),y5t.forEach(t),NKo=i(qw),pd=n(qw,"P",{});var wte=s(pd);qKo=r(wte,`Note:
Loading a model from its configuration file does `),V2e=n(wte,"STRONG",{});var x5t=s(V2e);jKo=r(x5t,"not"),x5t.forEach(t),DKo=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(wte,"A",{href:!0});var $5t=s(iW);GKo=r($5t,"from_pretrained()"),$5t.forEach(t),OKo=r(wte," to load the model weights."),wte.forEach(t),VKo=i(qw),T(zF.$$.fragment,qw),qw.forEach(t),XKo=i(ml),no=n(ml,"DIV",{class:!0});var _a=s(no);T(Py.$$.fragment,_a),zKo=i(_a),X2e=n(_a,"P",{});var k5t=s(X2e);WKo=r(k5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),k5t.forEach(t),QKo=i(_a),Xa=n(_a,"P",{});var jw=s(Xa);HKo=r(jw,"The model class to instantiate is selected based on the "),z2e=n(jw,"CODE",{});var S5t=s(z2e);UKo=r(S5t,"model_type"),S5t.forEach(t),JKo=r(jw,` property of the config object (either
passed as an argument or loaded from `),W2e=n(jw,"CODE",{});var R5t=s(W2e);YKo=r(R5t,"pretrained_model_name_or_path"),R5t.forEach(t),KKo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(jw,"CODE",{});var P5t=s(Q2e);ZKo=r(P5t,"pretrained_model_name_or_path"),P5t.forEach(t),eZo=r(jw,":"),jw.forEach(t),oZo=i(_a),U=n(_a,"UL",{});var Y=s(U);WF=n(Y,"LI",{});var gIe=s(WF);H2e=n(gIe,"STRONG",{});var B5t=s(H2e);rZo=r(B5t,"albert"),B5t.forEach(t),tZo=r(gIe," \u2014 "),dW=n(gIe,"A",{href:!0});var I5t=s(dW);aZo=r(I5t,"AlbertForTokenClassification"),I5t.forEach(t),nZo=r(gIe," (ALBERT model)"),gIe.forEach(t),sZo=i(Y),QF=n(Y,"LI",{});var hIe=s(QF);U2e=n(hIe,"STRONG",{});var N5t=s(U2e);lZo=r(N5t,"bert"),N5t.forEach(t),iZo=r(hIe," \u2014 "),cW=n(hIe,"A",{href:!0});var q5t=s(cW);dZo=r(q5t,"BertForTokenClassification"),q5t.forEach(t),cZo=r(hIe," (BERT model)"),hIe.forEach(t),fZo=i(Y),HF=n(Y,"LI",{});var pIe=s(HF);J2e=n(pIe,"STRONG",{});var j5t=s(J2e);mZo=r(j5t,"big_bird"),j5t.forEach(t),gZo=r(pIe," \u2014 "),fW=n(pIe,"A",{href:!0});var D5t=s(fW);hZo=r(D5t,"BigBirdForTokenClassification"),D5t.forEach(t),pZo=r(pIe," (BigBird model)"),pIe.forEach(t),_Zo=i(Y),UF=n(Y,"LI",{});var _Ie=s(UF);Y2e=n(_Ie,"STRONG",{});var G5t=s(Y2e);uZo=r(G5t,"bloom"),G5t.forEach(t),bZo=r(_Ie," \u2014 "),mW=n(_Ie,"A",{href:!0});var O5t=s(mW);vZo=r(O5t,"BloomForTokenClassification"),O5t.forEach(t),FZo=r(_Ie," (BLOOM model)"),_Ie.forEach(t),TZo=i(Y),JF=n(Y,"LI",{});var uIe=s(JF);K2e=n(uIe,"STRONG",{});var V5t=s(K2e);MZo=r(V5t,"camembert"),V5t.forEach(t),EZo=r(uIe," \u2014 "),gW=n(uIe,"A",{href:!0});var X5t=s(gW);CZo=r(X5t,"CamembertForTokenClassification"),X5t.forEach(t),wZo=r(uIe," (CamemBERT model)"),uIe.forEach(t),AZo=i(Y),YF=n(Y,"LI",{});var bIe=s(YF);Z2e=n(bIe,"STRONG",{});var z5t=s(Z2e);LZo=r(z5t,"canine"),z5t.forEach(t),yZo=r(bIe," \u2014 "),hW=n(bIe,"A",{href:!0});var W5t=s(hW);xZo=r(W5t,"CanineForTokenClassification"),W5t.forEach(t),$Zo=r(bIe," (CANINE model)"),bIe.forEach(t),kZo=i(Y),KF=n(Y,"LI",{});var vIe=s(KF);e1e=n(vIe,"STRONG",{});var Q5t=s(e1e);SZo=r(Q5t,"convbert"),Q5t.forEach(t),RZo=r(vIe," \u2014 "),pW=n(vIe,"A",{href:!0});var H5t=s(pW);PZo=r(H5t,"ConvBertForTokenClassification"),H5t.forEach(t),BZo=r(vIe," (ConvBERT model)"),vIe.forEach(t),IZo=i(Y),ZF=n(Y,"LI",{});var FIe=s(ZF);o1e=n(FIe,"STRONG",{});var U5t=s(o1e);NZo=r(U5t,"data2vec-text"),U5t.forEach(t),qZo=r(FIe," \u2014 "),_W=n(FIe,"A",{href:!0});var J5t=s(_W);jZo=r(J5t,"Data2VecTextForTokenClassification"),J5t.forEach(t),DZo=r(FIe," (Data2VecText model)"),FIe.forEach(t),GZo=i(Y),e6=n(Y,"LI",{});var TIe=s(e6);r1e=n(TIe,"STRONG",{});var Y5t=s(r1e);OZo=r(Y5t,"deberta"),Y5t.forEach(t),VZo=r(TIe," \u2014 "),uW=n(TIe,"A",{href:!0});var K5t=s(uW);XZo=r(K5t,"DebertaForTokenClassification"),K5t.forEach(t),zZo=r(TIe," (DeBERTa model)"),TIe.forEach(t),WZo=i(Y),o6=n(Y,"LI",{});var MIe=s(o6);t1e=n(MIe,"STRONG",{});var Z5t=s(t1e);QZo=r(Z5t,"deberta-v2"),Z5t.forEach(t),HZo=r(MIe," \u2014 "),bW=n(MIe,"A",{href:!0});var e3t=s(bW);UZo=r(e3t,"DebertaV2ForTokenClassification"),e3t.forEach(t),JZo=r(MIe," (DeBERTa-v2 model)"),MIe.forEach(t),YZo=i(Y),r6=n(Y,"LI",{});var EIe=s(r6);a1e=n(EIe,"STRONG",{});var o3t=s(a1e);KZo=r(o3t,"distilbert"),o3t.forEach(t),ZZo=r(EIe," \u2014 "),vW=n(EIe,"A",{href:!0});var r3t=s(vW);eer=r(r3t,"DistilBertForTokenClassification"),r3t.forEach(t),oer=r(EIe," (DistilBERT model)"),EIe.forEach(t),rer=i(Y),t6=n(Y,"LI",{});var CIe=s(t6);n1e=n(CIe,"STRONG",{});var t3t=s(n1e);ter=r(t3t,"electra"),t3t.forEach(t),aer=r(CIe," \u2014 "),FW=n(CIe,"A",{href:!0});var a3t=s(FW);ner=r(a3t,"ElectraForTokenClassification"),a3t.forEach(t),ser=r(CIe," (ELECTRA model)"),CIe.forEach(t),ler=i(Y),a6=n(Y,"LI",{});var wIe=s(a6);s1e=n(wIe,"STRONG",{});var n3t=s(s1e);ier=r(n3t,"flaubert"),n3t.forEach(t),der=r(wIe," \u2014 "),TW=n(wIe,"A",{href:!0});var s3t=s(TW);cer=r(s3t,"FlaubertForTokenClassification"),s3t.forEach(t),fer=r(wIe," (FlauBERT model)"),wIe.forEach(t),mer=i(Y),n6=n(Y,"LI",{});var AIe=s(n6);l1e=n(AIe,"STRONG",{});var l3t=s(l1e);ger=r(l3t,"fnet"),l3t.forEach(t),her=r(AIe," \u2014 "),MW=n(AIe,"A",{href:!0});var i3t=s(MW);per=r(i3t,"FNetForTokenClassification"),i3t.forEach(t),_er=r(AIe," (FNet model)"),AIe.forEach(t),uer=i(Y),s6=n(Y,"LI",{});var LIe=s(s6);i1e=n(LIe,"STRONG",{});var d3t=s(i1e);ber=r(d3t,"funnel"),d3t.forEach(t),ver=r(LIe," \u2014 "),EW=n(LIe,"A",{href:!0});var c3t=s(EW);Fer=r(c3t,"FunnelForTokenClassification"),c3t.forEach(t),Ter=r(LIe," (Funnel Transformer model)"),LIe.forEach(t),Mer=i(Y),l6=n(Y,"LI",{});var yIe=s(l6);d1e=n(yIe,"STRONG",{});var f3t=s(d1e);Eer=r(f3t,"gpt2"),f3t.forEach(t),Cer=r(yIe," \u2014 "),CW=n(yIe,"A",{href:!0});var m3t=s(CW);wer=r(m3t,"GPT2ForTokenClassification"),m3t.forEach(t),Aer=r(yIe," (OpenAI GPT-2 model)"),yIe.forEach(t),Ler=i(Y),i6=n(Y,"LI",{});var xIe=s(i6);c1e=n(xIe,"STRONG",{});var g3t=s(c1e);yer=r(g3t,"ibert"),g3t.forEach(t),xer=r(xIe," \u2014 "),wW=n(xIe,"A",{href:!0});var h3t=s(wW);$er=r(h3t,"IBertForTokenClassification"),h3t.forEach(t),ker=r(xIe," (I-BERT model)"),xIe.forEach(t),Ser=i(Y),d6=n(Y,"LI",{});var $Ie=s(d6);f1e=n($Ie,"STRONG",{});var p3t=s(f1e);Rer=r(p3t,"layoutlm"),p3t.forEach(t),Per=r($Ie," \u2014 "),AW=n($Ie,"A",{href:!0});var _3t=s(AW);Ber=r(_3t,"LayoutLMForTokenClassification"),_3t.forEach(t),Ier=r($Ie," (LayoutLM model)"),$Ie.forEach(t),Ner=i(Y),c6=n(Y,"LI",{});var kIe=s(c6);m1e=n(kIe,"STRONG",{});var u3t=s(m1e);qer=r(u3t,"layoutlmv2"),u3t.forEach(t),jer=r(kIe," \u2014 "),LW=n(kIe,"A",{href:!0});var b3t=s(LW);Der=r(b3t,"LayoutLMv2ForTokenClassification"),b3t.forEach(t),Ger=r(kIe," (LayoutLMv2 model)"),kIe.forEach(t),Oer=i(Y),f6=n(Y,"LI",{});var SIe=s(f6);g1e=n(SIe,"STRONG",{});var v3t=s(g1e);Ver=r(v3t,"layoutlmv3"),v3t.forEach(t),Xer=r(SIe," \u2014 "),yW=n(SIe,"A",{href:!0});var F3t=s(yW);zer=r(F3t,"LayoutLMv3ForTokenClassification"),F3t.forEach(t),Wer=r(SIe," (LayoutLMv3 model)"),SIe.forEach(t),Qer=i(Y),m6=n(Y,"LI",{});var RIe=s(m6);h1e=n(RIe,"STRONG",{});var T3t=s(h1e);Her=r(T3t,"longformer"),T3t.forEach(t),Uer=r(RIe," \u2014 "),xW=n(RIe,"A",{href:!0});var M3t=s(xW);Jer=r(M3t,"LongformerForTokenClassification"),M3t.forEach(t),Yer=r(RIe," (Longformer model)"),RIe.forEach(t),Ker=i(Y),g6=n(Y,"LI",{});var PIe=s(g6);p1e=n(PIe,"STRONG",{});var E3t=s(p1e);Zer=r(E3t,"megatron-bert"),E3t.forEach(t),eor=r(PIe," \u2014 "),$W=n(PIe,"A",{href:!0});var C3t=s($W);oor=r(C3t,"MegatronBertForTokenClassification"),C3t.forEach(t),ror=r(PIe," (Megatron-BERT model)"),PIe.forEach(t),tor=i(Y),h6=n(Y,"LI",{});var BIe=s(h6);_1e=n(BIe,"STRONG",{});var w3t=s(_1e);aor=r(w3t,"mobilebert"),w3t.forEach(t),nor=r(BIe," \u2014 "),kW=n(BIe,"A",{href:!0});var A3t=s(kW);sor=r(A3t,"MobileBertForTokenClassification"),A3t.forEach(t),lor=r(BIe," (MobileBERT model)"),BIe.forEach(t),ior=i(Y),p6=n(Y,"LI",{});var IIe=s(p6);u1e=n(IIe,"STRONG",{});var L3t=s(u1e);dor=r(L3t,"mpnet"),L3t.forEach(t),cor=r(IIe," \u2014 "),SW=n(IIe,"A",{href:!0});var y3t=s(SW);mor=r(y3t,"MPNetForTokenClassification"),y3t.forEach(t),gor=r(IIe," (MPNet model)"),IIe.forEach(t),hor=i(Y),_6=n(Y,"LI",{});var NIe=s(_6);b1e=n(NIe,"STRONG",{});var x3t=s(b1e);por=r(x3t,"nezha"),x3t.forEach(t),_or=r(NIe," \u2014 "),RW=n(NIe,"A",{href:!0});var $3t=s(RW);uor=r($3t,"NezhaForTokenClassification"),$3t.forEach(t),bor=r(NIe," (Nezha model)"),NIe.forEach(t),vor=i(Y),u6=n(Y,"LI",{});var qIe=s(u6);v1e=n(qIe,"STRONG",{});var k3t=s(v1e);For=r(k3t,"nystromformer"),k3t.forEach(t),Tor=r(qIe," \u2014 "),PW=n(qIe,"A",{href:!0});var S3t=s(PW);Mor=r(S3t,"NystromformerForTokenClassification"),S3t.forEach(t),Eor=r(qIe," (Nystr\xF6mformer model)"),qIe.forEach(t),Cor=i(Y),b6=n(Y,"LI",{});var jIe=s(b6);F1e=n(jIe,"STRONG",{});var R3t=s(F1e);wor=r(R3t,"qdqbert"),R3t.forEach(t),Aor=r(jIe," \u2014 "),BW=n(jIe,"A",{href:!0});var P3t=s(BW);Lor=r(P3t,"QDQBertForTokenClassification"),P3t.forEach(t),yor=r(jIe," (QDQBert model)"),jIe.forEach(t),xor=i(Y),v6=n(Y,"LI",{});var DIe=s(v6);T1e=n(DIe,"STRONG",{});var B3t=s(T1e);$or=r(B3t,"rembert"),B3t.forEach(t),kor=r(DIe," \u2014 "),IW=n(DIe,"A",{href:!0});var I3t=s(IW);Sor=r(I3t,"RemBertForTokenClassification"),I3t.forEach(t),Ror=r(DIe," (RemBERT model)"),DIe.forEach(t),Por=i(Y),F6=n(Y,"LI",{});var GIe=s(F6);M1e=n(GIe,"STRONG",{});var N3t=s(M1e);Bor=r(N3t,"roberta"),N3t.forEach(t),Ior=r(GIe," \u2014 "),NW=n(GIe,"A",{href:!0});var q3t=s(NW);Nor=r(q3t,"RobertaForTokenClassification"),q3t.forEach(t),qor=r(GIe," (RoBERTa model)"),GIe.forEach(t),jor=i(Y),T6=n(Y,"LI",{});var OIe=s(T6);E1e=n(OIe,"STRONG",{});var j3t=s(E1e);Dor=r(j3t,"roformer"),j3t.forEach(t),Gor=r(OIe," \u2014 "),qW=n(OIe,"A",{href:!0});var D3t=s(qW);Oor=r(D3t,"RoFormerForTokenClassification"),D3t.forEach(t),Vor=r(OIe," (RoFormer model)"),OIe.forEach(t),Xor=i(Y),M6=n(Y,"LI",{});var VIe=s(M6);C1e=n(VIe,"STRONG",{});var G3t=s(C1e);zor=r(G3t,"squeezebert"),G3t.forEach(t),Wor=r(VIe," \u2014 "),jW=n(VIe,"A",{href:!0});var O3t=s(jW);Qor=r(O3t,"SqueezeBertForTokenClassification"),O3t.forEach(t),Hor=r(VIe," (SqueezeBERT model)"),VIe.forEach(t),Uor=i(Y),E6=n(Y,"LI",{});var XIe=s(E6);w1e=n(XIe,"STRONG",{});var V3t=s(w1e);Jor=r(V3t,"xlm"),V3t.forEach(t),Yor=r(XIe," \u2014 "),DW=n(XIe,"A",{href:!0});var X3t=s(DW);Kor=r(X3t,"XLMForTokenClassification"),X3t.forEach(t),Zor=r(XIe," (XLM model)"),XIe.forEach(t),err=i(Y),C6=n(Y,"LI",{});var zIe=s(C6);A1e=n(zIe,"STRONG",{});var z3t=s(A1e);orr=r(z3t,"xlm-roberta"),z3t.forEach(t),rrr=r(zIe," \u2014 "),GW=n(zIe,"A",{href:!0});var W3t=s(GW);trr=r(W3t,"XLMRobertaForTokenClassification"),W3t.forEach(t),arr=r(zIe," (XLM-RoBERTa model)"),zIe.forEach(t),nrr=i(Y),w6=n(Y,"LI",{});var WIe=s(w6);L1e=n(WIe,"STRONG",{});var Q3t=s(L1e);srr=r(Q3t,"xlm-roberta-xl"),Q3t.forEach(t),lrr=r(WIe," \u2014 "),OW=n(WIe,"A",{href:!0});var H3t=s(OW);irr=r(H3t,"XLMRobertaXLForTokenClassification"),H3t.forEach(t),drr=r(WIe," (XLM-RoBERTa-XL model)"),WIe.forEach(t),crr=i(Y),A6=n(Y,"LI",{});var QIe=s(A6);y1e=n(QIe,"STRONG",{});var U3t=s(y1e);frr=r(U3t,"xlnet"),U3t.forEach(t),mrr=r(QIe," \u2014 "),VW=n(QIe,"A",{href:!0});var J3t=s(VW);grr=r(J3t,"XLNetForTokenClassification"),J3t.forEach(t),hrr=r(QIe," (XLNet model)"),QIe.forEach(t),prr=i(Y),L6=n(Y,"LI",{});var HIe=s(L6);x1e=n(HIe,"STRONG",{});var Y3t=s(x1e);_rr=r(Y3t,"yoso"),Y3t.forEach(t),urr=r(HIe," \u2014 "),XW=n(HIe,"A",{href:!0});var K3t=s(XW);brr=r(K3t,"YosoForTokenClassification"),K3t.forEach(t),vrr=r(HIe," (YOSO model)"),HIe.forEach(t),Y.forEach(t),Frr=i(_a),y6=n(_a,"P",{});var UIe=s(y6);Trr=r(UIe,"The model is set in evaluation mode by default using "),$1e=n(UIe,"CODE",{});var Z3t=s($1e);Mrr=r(Z3t,"model.eval()"),Z3t.forEach(t),Err=r(UIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k1e=n(UIe,"CODE",{});var e0t=s(k1e);Crr=r(e0t,"model.train()"),e0t.forEach(t),UIe.forEach(t),wrr=i(_a),T(x6.$$.fragment,_a),_a.forEach(t),ml.forEach(t),Sze=i(f),_d=n(f,"H2",{class:!0});var qQe=s(_d);$6=n(qQe,"A",{id:!0,class:!0,href:!0});var o0t=s($6);S1e=n(o0t,"SPAN",{});var r0t=s(S1e);T(By.$$.fragment,r0t),r0t.forEach(t),o0t.forEach(t),Arr=i(qQe),R1e=n(qQe,"SPAN",{});var t0t=s(R1e);Lrr=r(t0t,"AutoModelForQuestionAnswering"),t0t.forEach(t),qQe.forEach(t),Rze=i(f),Go=n(f,"DIV",{class:!0});var gl=s(Go);T(Iy.$$.fragment,gl),yrr=i(gl),ud=n(gl,"P",{});var Ate=s(ud);xrr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zW=n(Ate,"A",{href:!0});var a0t=s(zW);$rr=r(a0t,"from_pretrained()"),a0t.forEach(t),krr=r(Ate," class method or the "),WW=n(Ate,"A",{href:!0});var n0t=s(WW);Srr=r(n0t,"from_config()"),n0t.forEach(t),Rrr=r(Ate,` class
method.`),Ate.forEach(t),Prr=i(gl),Ny=n(gl,"P",{});var jQe=s(Ny);Brr=r(jQe,"This class cannot be instantiated directly using "),P1e=n(jQe,"CODE",{});var s0t=s(P1e);Irr=r(s0t,"__init__()"),s0t.forEach(t),Nrr=r(jQe," (throws an error)."),jQe.forEach(t),qrr=i(gl),ut=n(gl,"DIV",{class:!0});var Dw=s(ut);T(qy.$$.fragment,Dw),jrr=i(Dw),B1e=n(Dw,"P",{});var l0t=s(B1e);Drr=r(l0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),l0t.forEach(t),Grr=i(Dw),bd=n(Dw,"P",{});var Lte=s(bd);Orr=r(Lte,`Note:
Loading a model from its configuration file does `),I1e=n(Lte,"STRONG",{});var i0t=s(I1e);Vrr=r(i0t,"not"),i0t.forEach(t),Xrr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(Lte,"A",{href:!0});var d0t=s(QW);zrr=r(d0t,"from_pretrained()"),d0t.forEach(t),Wrr=r(Lte," to load the model weights."),Lte.forEach(t),Qrr=i(Dw),T(k6.$$.fragment,Dw),Dw.forEach(t),Hrr=i(gl),so=n(gl,"DIV",{class:!0});var ua=s(so);T(jy.$$.fragment,ua),Urr=i(ua),N1e=n(ua,"P",{});var c0t=s(N1e);Jrr=r(c0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),c0t.forEach(t),Yrr=i(ua),za=n(ua,"P",{});var Gw=s(za);Krr=r(Gw,"The model class to instantiate is selected based on the "),q1e=n(Gw,"CODE",{});var f0t=s(q1e);Zrr=r(f0t,"model_type"),f0t.forEach(t),etr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),j1e=n(Gw,"CODE",{});var m0t=s(j1e);otr=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),rtr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=n(Gw,"CODE",{});var g0t=s(D1e);ttr=r(g0t,"pretrained_model_name_or_path"),g0t.forEach(t),atr=r(Gw,":"),Gw.forEach(t),ntr=i(ua),V=n(ua,"UL",{});var X=s(V);S6=n(X,"LI",{});var JIe=s(S6);G1e=n(JIe,"STRONG",{});var h0t=s(G1e);str=r(h0t,"albert"),h0t.forEach(t),ltr=r(JIe," \u2014 "),HW=n(JIe,"A",{href:!0});var p0t=s(HW);itr=r(p0t,"AlbertForQuestionAnswering"),p0t.forEach(t),dtr=r(JIe," (ALBERT model)"),JIe.forEach(t),ctr=i(X),R6=n(X,"LI",{});var YIe=s(R6);O1e=n(YIe,"STRONG",{});var _0t=s(O1e);ftr=r(_0t,"bart"),_0t.forEach(t),mtr=r(YIe," \u2014 "),UW=n(YIe,"A",{href:!0});var u0t=s(UW);gtr=r(u0t,"BartForQuestionAnswering"),u0t.forEach(t),htr=r(YIe," (BART model)"),YIe.forEach(t),ptr=i(X),P6=n(X,"LI",{});var KIe=s(P6);V1e=n(KIe,"STRONG",{});var b0t=s(V1e);_tr=r(b0t,"bert"),b0t.forEach(t),utr=r(KIe," \u2014 "),JW=n(KIe,"A",{href:!0});var v0t=s(JW);btr=r(v0t,"BertForQuestionAnswering"),v0t.forEach(t),vtr=r(KIe," (BERT model)"),KIe.forEach(t),Ftr=i(X),B6=n(X,"LI",{});var ZIe=s(B6);X1e=n(ZIe,"STRONG",{});var F0t=s(X1e);Ttr=r(F0t,"big_bird"),F0t.forEach(t),Mtr=r(ZIe," \u2014 "),YW=n(ZIe,"A",{href:!0});var T0t=s(YW);Etr=r(T0t,"BigBirdForQuestionAnswering"),T0t.forEach(t),Ctr=r(ZIe," (BigBird model)"),ZIe.forEach(t),wtr=i(X),I6=n(X,"LI",{});var eNe=s(I6);z1e=n(eNe,"STRONG",{});var M0t=s(z1e);Atr=r(M0t,"bigbird_pegasus"),M0t.forEach(t),Ltr=r(eNe," \u2014 "),KW=n(eNe,"A",{href:!0});var E0t=s(KW);ytr=r(E0t,"BigBirdPegasusForQuestionAnswering"),E0t.forEach(t),xtr=r(eNe," (BigBird-Pegasus model)"),eNe.forEach(t),$tr=i(X),N6=n(X,"LI",{});var oNe=s(N6);W1e=n(oNe,"STRONG",{});var C0t=s(W1e);ktr=r(C0t,"camembert"),C0t.forEach(t),Str=r(oNe," \u2014 "),ZW=n(oNe,"A",{href:!0});var w0t=s(ZW);Rtr=r(w0t,"CamembertForQuestionAnswering"),w0t.forEach(t),Ptr=r(oNe," (CamemBERT model)"),oNe.forEach(t),Btr=i(X),q6=n(X,"LI",{});var rNe=s(q6);Q1e=n(rNe,"STRONG",{});var A0t=s(Q1e);Itr=r(A0t,"canine"),A0t.forEach(t),Ntr=r(rNe," \u2014 "),eQ=n(rNe,"A",{href:!0});var L0t=s(eQ);qtr=r(L0t,"CanineForQuestionAnswering"),L0t.forEach(t),jtr=r(rNe," (CANINE model)"),rNe.forEach(t),Dtr=i(X),j6=n(X,"LI",{});var tNe=s(j6);H1e=n(tNe,"STRONG",{});var y0t=s(H1e);Gtr=r(y0t,"convbert"),y0t.forEach(t),Otr=r(tNe," \u2014 "),oQ=n(tNe,"A",{href:!0});var x0t=s(oQ);Vtr=r(x0t,"ConvBertForQuestionAnswering"),x0t.forEach(t),Xtr=r(tNe," (ConvBERT model)"),tNe.forEach(t),ztr=i(X),D6=n(X,"LI",{});var aNe=s(D6);U1e=n(aNe,"STRONG",{});var $0t=s(U1e);Wtr=r($0t,"data2vec-text"),$0t.forEach(t),Qtr=r(aNe," \u2014 "),rQ=n(aNe,"A",{href:!0});var k0t=s(rQ);Htr=r(k0t,"Data2VecTextForQuestionAnswering"),k0t.forEach(t),Utr=r(aNe," (Data2VecText model)"),aNe.forEach(t),Jtr=i(X),G6=n(X,"LI",{});var nNe=s(G6);J1e=n(nNe,"STRONG",{});var S0t=s(J1e);Ytr=r(S0t,"deberta"),S0t.forEach(t),Ktr=r(nNe," \u2014 "),tQ=n(nNe,"A",{href:!0});var R0t=s(tQ);Ztr=r(R0t,"DebertaForQuestionAnswering"),R0t.forEach(t),ear=r(nNe," (DeBERTa model)"),nNe.forEach(t),oar=i(X),O6=n(X,"LI",{});var sNe=s(O6);Y1e=n(sNe,"STRONG",{});var P0t=s(Y1e);rar=r(P0t,"deberta-v2"),P0t.forEach(t),tar=r(sNe," \u2014 "),aQ=n(sNe,"A",{href:!0});var B0t=s(aQ);aar=r(B0t,"DebertaV2ForQuestionAnswering"),B0t.forEach(t),nar=r(sNe," (DeBERTa-v2 model)"),sNe.forEach(t),sar=i(X),V6=n(X,"LI",{});var lNe=s(V6);K1e=n(lNe,"STRONG",{});var I0t=s(K1e);lar=r(I0t,"distilbert"),I0t.forEach(t),iar=r(lNe," \u2014 "),nQ=n(lNe,"A",{href:!0});var N0t=s(nQ);dar=r(N0t,"DistilBertForQuestionAnswering"),N0t.forEach(t),car=r(lNe," (DistilBERT model)"),lNe.forEach(t),far=i(X),X6=n(X,"LI",{});var iNe=s(X6);Z1e=n(iNe,"STRONG",{});var q0t=s(Z1e);mar=r(q0t,"electra"),q0t.forEach(t),gar=r(iNe," \u2014 "),sQ=n(iNe,"A",{href:!0});var j0t=s(sQ);har=r(j0t,"ElectraForQuestionAnswering"),j0t.forEach(t),par=r(iNe," (ELECTRA model)"),iNe.forEach(t),_ar=i(X),z6=n(X,"LI",{});var dNe=s(z6);ebe=n(dNe,"STRONG",{});var D0t=s(ebe);uar=r(D0t,"flaubert"),D0t.forEach(t),bar=r(dNe," \u2014 "),lQ=n(dNe,"A",{href:!0});var G0t=s(lQ);Far=r(G0t,"FlaubertForQuestionAnsweringSimple"),G0t.forEach(t),Tar=r(dNe," (FlauBERT model)"),dNe.forEach(t),Mar=i(X),W6=n(X,"LI",{});var cNe=s(W6);obe=n(cNe,"STRONG",{});var O0t=s(obe);Ear=r(O0t,"fnet"),O0t.forEach(t),Car=r(cNe," \u2014 "),iQ=n(cNe,"A",{href:!0});var V0t=s(iQ);war=r(V0t,"FNetForQuestionAnswering"),V0t.forEach(t),Aar=r(cNe," (FNet model)"),cNe.forEach(t),Lar=i(X),Q6=n(X,"LI",{});var fNe=s(Q6);rbe=n(fNe,"STRONG",{});var X0t=s(rbe);yar=r(X0t,"funnel"),X0t.forEach(t),xar=r(fNe," \u2014 "),dQ=n(fNe,"A",{href:!0});var z0t=s(dQ);$ar=r(z0t,"FunnelForQuestionAnswering"),z0t.forEach(t),kar=r(fNe," (Funnel Transformer model)"),fNe.forEach(t),Sar=i(X),H6=n(X,"LI",{});var mNe=s(H6);tbe=n(mNe,"STRONG",{});var W0t=s(tbe);Rar=r(W0t,"gptj"),W0t.forEach(t),Par=r(mNe," \u2014 "),cQ=n(mNe,"A",{href:!0});var Q0t=s(cQ);Bar=r(Q0t,"GPTJForQuestionAnswering"),Q0t.forEach(t),Iar=r(mNe," (GPT-J model)"),mNe.forEach(t),Nar=i(X),U6=n(X,"LI",{});var gNe=s(U6);abe=n(gNe,"STRONG",{});var H0t=s(abe);qar=r(H0t,"ibert"),H0t.forEach(t),jar=r(gNe," \u2014 "),fQ=n(gNe,"A",{href:!0});var U0t=s(fQ);Dar=r(U0t,"IBertForQuestionAnswering"),U0t.forEach(t),Gar=r(gNe," (I-BERT model)"),gNe.forEach(t),Oar=i(X),J6=n(X,"LI",{});var hNe=s(J6);nbe=n(hNe,"STRONG",{});var J0t=s(nbe);Var=r(J0t,"layoutlmv2"),J0t.forEach(t),Xar=r(hNe," \u2014 "),mQ=n(hNe,"A",{href:!0});var Y0t=s(mQ);zar=r(Y0t,"LayoutLMv2ForQuestionAnswering"),Y0t.forEach(t),War=r(hNe," (LayoutLMv2 model)"),hNe.forEach(t),Qar=i(X),Y6=n(X,"LI",{});var pNe=s(Y6);sbe=n(pNe,"STRONG",{});var K0t=s(sbe);Har=r(K0t,"layoutlmv3"),K0t.forEach(t),Uar=r(pNe," \u2014 "),gQ=n(pNe,"A",{href:!0});var Z0t=s(gQ);Jar=r(Z0t,"LayoutLMv3ForQuestionAnswering"),Z0t.forEach(t),Yar=r(pNe," (LayoutLMv3 model)"),pNe.forEach(t),Kar=i(X),K6=n(X,"LI",{});var _Ne=s(K6);lbe=n(_Ne,"STRONG",{});var ewt=s(lbe);Zar=r(ewt,"led"),ewt.forEach(t),enr=r(_Ne," \u2014 "),hQ=n(_Ne,"A",{href:!0});var owt=s(hQ);onr=r(owt,"LEDForQuestionAnswering"),owt.forEach(t),rnr=r(_Ne," (LED model)"),_Ne.forEach(t),tnr=i(X),Z6=n(X,"LI",{});var uNe=s(Z6);ibe=n(uNe,"STRONG",{});var rwt=s(ibe);anr=r(rwt,"longformer"),rwt.forEach(t),nnr=r(uNe," \u2014 "),pQ=n(uNe,"A",{href:!0});var twt=s(pQ);snr=r(twt,"LongformerForQuestionAnswering"),twt.forEach(t),lnr=r(uNe," (Longformer model)"),uNe.forEach(t),inr=i(X),eT=n(X,"LI",{});var bNe=s(eT);dbe=n(bNe,"STRONG",{});var awt=s(dbe);dnr=r(awt,"lxmert"),awt.forEach(t),cnr=r(bNe," \u2014 "),_Q=n(bNe,"A",{href:!0});var nwt=s(_Q);fnr=r(nwt,"LxmertForQuestionAnswering"),nwt.forEach(t),mnr=r(bNe," (LXMERT model)"),bNe.forEach(t),gnr=i(X),oT=n(X,"LI",{});var vNe=s(oT);cbe=n(vNe,"STRONG",{});var swt=s(cbe);hnr=r(swt,"mbart"),swt.forEach(t),pnr=r(vNe," \u2014 "),uQ=n(vNe,"A",{href:!0});var lwt=s(uQ);_nr=r(lwt,"MBartForQuestionAnswering"),lwt.forEach(t),unr=r(vNe," (mBART model)"),vNe.forEach(t),bnr=i(X),rT=n(X,"LI",{});var FNe=s(rT);fbe=n(FNe,"STRONG",{});var iwt=s(fbe);vnr=r(iwt,"megatron-bert"),iwt.forEach(t),Fnr=r(FNe," \u2014 "),bQ=n(FNe,"A",{href:!0});var dwt=s(bQ);Tnr=r(dwt,"MegatronBertForQuestionAnswering"),dwt.forEach(t),Mnr=r(FNe," (Megatron-BERT model)"),FNe.forEach(t),Enr=i(X),tT=n(X,"LI",{});var TNe=s(tT);mbe=n(TNe,"STRONG",{});var cwt=s(mbe);Cnr=r(cwt,"mobilebert"),cwt.forEach(t),wnr=r(TNe," \u2014 "),vQ=n(TNe,"A",{href:!0});var fwt=s(vQ);Anr=r(fwt,"MobileBertForQuestionAnswering"),fwt.forEach(t),Lnr=r(TNe," (MobileBERT model)"),TNe.forEach(t),ynr=i(X),aT=n(X,"LI",{});var MNe=s(aT);gbe=n(MNe,"STRONG",{});var mwt=s(gbe);xnr=r(mwt,"mpnet"),mwt.forEach(t),$nr=r(MNe," \u2014 "),FQ=n(MNe,"A",{href:!0});var gwt=s(FQ);knr=r(gwt,"MPNetForQuestionAnswering"),gwt.forEach(t),Snr=r(MNe," (MPNet model)"),MNe.forEach(t),Rnr=i(X),nT=n(X,"LI",{});var ENe=s(nT);hbe=n(ENe,"STRONG",{});var hwt=s(hbe);Pnr=r(hwt,"mvp"),hwt.forEach(t),Bnr=r(ENe," \u2014 "),TQ=n(ENe,"A",{href:!0});var pwt=s(TQ);Inr=r(pwt,"MvpForQuestionAnswering"),pwt.forEach(t),Nnr=r(ENe," (MVP model)"),ENe.forEach(t),qnr=i(X),sT=n(X,"LI",{});var CNe=s(sT);pbe=n(CNe,"STRONG",{});var _wt=s(pbe);jnr=r(_wt,"nezha"),_wt.forEach(t),Dnr=r(CNe," \u2014 "),MQ=n(CNe,"A",{href:!0});var uwt=s(MQ);Gnr=r(uwt,"NezhaForQuestionAnswering"),uwt.forEach(t),Onr=r(CNe," (Nezha model)"),CNe.forEach(t),Vnr=i(X),lT=n(X,"LI",{});var wNe=s(lT);_be=n(wNe,"STRONG",{});var bwt=s(_be);Xnr=r(bwt,"nystromformer"),bwt.forEach(t),znr=r(wNe," \u2014 "),EQ=n(wNe,"A",{href:!0});var vwt=s(EQ);Wnr=r(vwt,"NystromformerForQuestionAnswering"),vwt.forEach(t),Qnr=r(wNe," (Nystr\xF6mformer model)"),wNe.forEach(t),Hnr=i(X),iT=n(X,"LI",{});var ANe=s(iT);ube=n(ANe,"STRONG",{});var Fwt=s(ube);Unr=r(Fwt,"qdqbert"),Fwt.forEach(t),Jnr=r(ANe," \u2014 "),CQ=n(ANe,"A",{href:!0});var Twt=s(CQ);Ynr=r(Twt,"QDQBertForQuestionAnswering"),Twt.forEach(t),Knr=r(ANe," (QDQBert model)"),ANe.forEach(t),Znr=i(X),dT=n(X,"LI",{});var LNe=s(dT);bbe=n(LNe,"STRONG",{});var Mwt=s(bbe);esr=r(Mwt,"reformer"),Mwt.forEach(t),osr=r(LNe," \u2014 "),wQ=n(LNe,"A",{href:!0});var Ewt=s(wQ);rsr=r(Ewt,"ReformerForQuestionAnswering"),Ewt.forEach(t),tsr=r(LNe," (Reformer model)"),LNe.forEach(t),asr=i(X),cT=n(X,"LI",{});var yNe=s(cT);vbe=n(yNe,"STRONG",{});var Cwt=s(vbe);nsr=r(Cwt,"rembert"),Cwt.forEach(t),ssr=r(yNe," \u2014 "),AQ=n(yNe,"A",{href:!0});var wwt=s(AQ);lsr=r(wwt,"RemBertForQuestionAnswering"),wwt.forEach(t),isr=r(yNe," (RemBERT model)"),yNe.forEach(t),dsr=i(X),fT=n(X,"LI",{});var xNe=s(fT);Fbe=n(xNe,"STRONG",{});var Awt=s(Fbe);csr=r(Awt,"roberta"),Awt.forEach(t),fsr=r(xNe," \u2014 "),LQ=n(xNe,"A",{href:!0});var Lwt=s(LQ);msr=r(Lwt,"RobertaForQuestionAnswering"),Lwt.forEach(t),gsr=r(xNe," (RoBERTa model)"),xNe.forEach(t),hsr=i(X),mT=n(X,"LI",{});var $Ne=s(mT);Tbe=n($Ne,"STRONG",{});var ywt=s(Tbe);psr=r(ywt,"roformer"),ywt.forEach(t),_sr=r($Ne," \u2014 "),yQ=n($Ne,"A",{href:!0});var xwt=s(yQ);usr=r(xwt,"RoFormerForQuestionAnswering"),xwt.forEach(t),bsr=r($Ne," (RoFormer model)"),$Ne.forEach(t),vsr=i(X),gT=n(X,"LI",{});var kNe=s(gT);Mbe=n(kNe,"STRONG",{});var $wt=s(Mbe);Fsr=r($wt,"splinter"),$wt.forEach(t),Tsr=r(kNe," \u2014 "),xQ=n(kNe,"A",{href:!0});var kwt=s(xQ);Msr=r(kwt,"SplinterForQuestionAnswering"),kwt.forEach(t),Esr=r(kNe," (Splinter model)"),kNe.forEach(t),Csr=i(X),hT=n(X,"LI",{});var SNe=s(hT);Ebe=n(SNe,"STRONG",{});var Swt=s(Ebe);wsr=r(Swt,"squeezebert"),Swt.forEach(t),Asr=r(SNe," \u2014 "),$Q=n(SNe,"A",{href:!0});var Rwt=s($Q);Lsr=r(Rwt,"SqueezeBertForQuestionAnswering"),Rwt.forEach(t),ysr=r(SNe," (SqueezeBERT model)"),SNe.forEach(t),xsr=i(X),pT=n(X,"LI",{});var RNe=s(pT);Cbe=n(RNe,"STRONG",{});var Pwt=s(Cbe);$sr=r(Pwt,"xlm"),Pwt.forEach(t),ksr=r(RNe," \u2014 "),kQ=n(RNe,"A",{href:!0});var Bwt=s(kQ);Ssr=r(Bwt,"XLMForQuestionAnsweringSimple"),Bwt.forEach(t),Rsr=r(RNe," (XLM model)"),RNe.forEach(t),Psr=i(X),_T=n(X,"LI",{});var PNe=s(_T);wbe=n(PNe,"STRONG",{});var Iwt=s(wbe);Bsr=r(Iwt,"xlm-roberta"),Iwt.forEach(t),Isr=r(PNe," \u2014 "),SQ=n(PNe,"A",{href:!0});var Nwt=s(SQ);Nsr=r(Nwt,"XLMRobertaForQuestionAnswering"),Nwt.forEach(t),qsr=r(PNe," (XLM-RoBERTa model)"),PNe.forEach(t),jsr=i(X),uT=n(X,"LI",{});var BNe=s(uT);Abe=n(BNe,"STRONG",{});var qwt=s(Abe);Dsr=r(qwt,"xlm-roberta-xl"),qwt.forEach(t),Gsr=r(BNe," \u2014 "),RQ=n(BNe,"A",{href:!0});var jwt=s(RQ);Osr=r(jwt,"XLMRobertaXLForQuestionAnswering"),jwt.forEach(t),Vsr=r(BNe," (XLM-RoBERTa-XL model)"),BNe.forEach(t),Xsr=i(X),bT=n(X,"LI",{});var INe=s(bT);Lbe=n(INe,"STRONG",{});var Dwt=s(Lbe);zsr=r(Dwt,"xlnet"),Dwt.forEach(t),Wsr=r(INe," \u2014 "),PQ=n(INe,"A",{href:!0});var Gwt=s(PQ);Qsr=r(Gwt,"XLNetForQuestionAnsweringSimple"),Gwt.forEach(t),Hsr=r(INe," (XLNet model)"),INe.forEach(t),Usr=i(X),vT=n(X,"LI",{});var NNe=s(vT);ybe=n(NNe,"STRONG",{});var Owt=s(ybe);Jsr=r(Owt,"yoso"),Owt.forEach(t),Ysr=r(NNe," \u2014 "),BQ=n(NNe,"A",{href:!0});var Vwt=s(BQ);Ksr=r(Vwt,"YosoForQuestionAnswering"),Vwt.forEach(t),Zsr=r(NNe," (YOSO model)"),NNe.forEach(t),X.forEach(t),elr=i(ua),FT=n(ua,"P",{});var qNe=s(FT);olr=r(qNe,"The model is set in evaluation mode by default using "),xbe=n(qNe,"CODE",{});var Xwt=s(xbe);rlr=r(Xwt,"model.eval()"),Xwt.forEach(t),tlr=r(qNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=n(qNe,"CODE",{});var zwt=s($be);alr=r(zwt,"model.train()"),zwt.forEach(t),qNe.forEach(t),nlr=i(ua),T(TT.$$.fragment,ua),ua.forEach(t),gl.forEach(t),Pze=i(f),vd=n(f,"H2",{class:!0});var DQe=s(vd);MT=n(DQe,"A",{id:!0,class:!0,href:!0});var Wwt=s(MT);kbe=n(Wwt,"SPAN",{});var Qwt=s(kbe);T(Dy.$$.fragment,Qwt),Qwt.forEach(t),Wwt.forEach(t),slr=i(DQe),Sbe=n(DQe,"SPAN",{});var Hwt=s(Sbe);llr=r(Hwt,"AutoModelForTableQuestionAnswering"),Hwt.forEach(t),DQe.forEach(t),Bze=i(f),Oo=n(f,"DIV",{class:!0});var hl=s(Oo);T(Gy.$$.fragment,hl),ilr=i(hl),Fd=n(hl,"P",{});var yte=s(Fd);dlr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IQ=n(yte,"A",{href:!0});var Uwt=s(IQ);clr=r(Uwt,"from_pretrained()"),Uwt.forEach(t),flr=r(yte," class method or the "),NQ=n(yte,"A",{href:!0});var Jwt=s(NQ);mlr=r(Jwt,"from_config()"),Jwt.forEach(t),glr=r(yte,` class
method.`),yte.forEach(t),hlr=i(hl),Oy=n(hl,"P",{});var GQe=s(Oy);plr=r(GQe,"This class cannot be instantiated directly using "),Rbe=n(GQe,"CODE",{});var Ywt=s(Rbe);_lr=r(Ywt,"__init__()"),Ywt.forEach(t),ulr=r(GQe," (throws an error)."),GQe.forEach(t),blr=i(hl),bt=n(hl,"DIV",{class:!0});var Ow=s(bt);T(Vy.$$.fragment,Ow),vlr=i(Ow),Pbe=n(Ow,"P",{});var Kwt=s(Pbe);Flr=r(Kwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Kwt.forEach(t),Tlr=i(Ow),Td=n(Ow,"P",{});var xte=s(Td);Mlr=r(xte,`Note:
Loading a model from its configuration file does `),Bbe=n(xte,"STRONG",{});var Zwt=s(Bbe);Elr=r(Zwt,"not"),Zwt.forEach(t),Clr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=n(xte,"A",{href:!0});var eAt=s(qQ);wlr=r(eAt,"from_pretrained()"),eAt.forEach(t),Alr=r(xte," to load the model weights."),xte.forEach(t),Llr=i(Ow),T(ET.$$.fragment,Ow),Ow.forEach(t),ylr=i(hl),lo=n(hl,"DIV",{class:!0});var ba=s(lo);T(Xy.$$.fragment,ba),xlr=i(ba),Ibe=n(ba,"P",{});var oAt=s(Ibe);$lr=r(oAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),oAt.forEach(t),klr=i(ba),Wa=n(ba,"P",{});var Vw=s(Wa);Slr=r(Vw,"The model class to instantiate is selected based on the "),Nbe=n(Vw,"CODE",{});var rAt=s(Nbe);Rlr=r(rAt,"model_type"),rAt.forEach(t),Plr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),qbe=n(Vw,"CODE",{});var tAt=s(qbe);Blr=r(tAt,"pretrained_model_name_or_path"),tAt.forEach(t),Ilr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(Vw,"CODE",{});var aAt=s(jbe);Nlr=r(aAt,"pretrained_model_name_or_path"),aAt.forEach(t),qlr=r(Vw,":"),Vw.forEach(t),jlr=i(ba),Dbe=n(ba,"UL",{});var nAt=s(Dbe);CT=n(nAt,"LI",{});var jNe=s(CT);Gbe=n(jNe,"STRONG",{});var sAt=s(Gbe);Dlr=r(sAt,"tapas"),sAt.forEach(t),Glr=r(jNe," \u2014 "),jQ=n(jNe,"A",{href:!0});var lAt=s(jQ);Olr=r(lAt,"TapasForQuestionAnswering"),lAt.forEach(t),Vlr=r(jNe," (TAPAS model)"),jNe.forEach(t),nAt.forEach(t),Xlr=i(ba),wT=n(ba,"P",{});var DNe=s(wT);zlr=r(DNe,"The model is set in evaluation mode by default using "),Obe=n(DNe,"CODE",{});var iAt=s(Obe);Wlr=r(iAt,"model.eval()"),iAt.forEach(t),Qlr=r(DNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vbe=n(DNe,"CODE",{});var dAt=s(Vbe);Hlr=r(dAt,"model.train()"),dAt.forEach(t),DNe.forEach(t),Ulr=i(ba),T(AT.$$.fragment,ba),ba.forEach(t),hl.forEach(t),Ize=i(f),Md=n(f,"H2",{class:!0});var OQe=s(Md);LT=n(OQe,"A",{id:!0,class:!0,href:!0});var cAt=s(LT);Xbe=n(cAt,"SPAN",{});var fAt=s(Xbe);T(zy.$$.fragment,fAt),fAt.forEach(t),cAt.forEach(t),Jlr=i(OQe),zbe=n(OQe,"SPAN",{});var mAt=s(zbe);Ylr=r(mAt,"AutoModelForImageClassification"),mAt.forEach(t),OQe.forEach(t),Nze=i(f),Vo=n(f,"DIV",{class:!0});var pl=s(Vo);T(Wy.$$.fragment,pl),Klr=i(pl),Ed=n(pl,"P",{});var $te=s(Ed);Zlr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DQ=n($te,"A",{href:!0});var gAt=s(DQ);eir=r(gAt,"from_pretrained()"),gAt.forEach(t),oir=r($te," class method or the "),GQ=n($te,"A",{href:!0});var hAt=s(GQ);rir=r(hAt,"from_config()"),hAt.forEach(t),tir=r($te,` class
method.`),$te.forEach(t),air=i(pl),Qy=n(pl,"P",{});var VQe=s(Qy);nir=r(VQe,"This class cannot be instantiated directly using "),Wbe=n(VQe,"CODE",{});var pAt=s(Wbe);sir=r(pAt,"__init__()"),pAt.forEach(t),lir=r(VQe," (throws an error)."),VQe.forEach(t),iir=i(pl),vt=n(pl,"DIV",{class:!0});var Xw=s(vt);T(Hy.$$.fragment,Xw),dir=i(Xw),Qbe=n(Xw,"P",{});var _At=s(Qbe);cir=r(_At,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_At.forEach(t),fir=i(Xw),Cd=n(Xw,"P",{});var kte=s(Cd);mir=r(kte,`Note:
Loading a model from its configuration file does `),Hbe=n(kte,"STRONG",{});var uAt=s(Hbe);gir=r(uAt,"not"),uAt.forEach(t),hir=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(kte,"A",{href:!0});var bAt=s(OQ);pir=r(bAt,"from_pretrained()"),bAt.forEach(t),_ir=r(kte," to load the model weights."),kte.forEach(t),uir=i(Xw),T(yT.$$.fragment,Xw),Xw.forEach(t),bir=i(pl),io=n(pl,"DIV",{class:!0});var va=s(io);T(Uy.$$.fragment,va),vir=i(va),Ube=n(va,"P",{});var vAt=s(Ube);Fir=r(vAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vAt.forEach(t),Tir=i(va),Qa=n(va,"P",{});var zw=s(Qa);Mir=r(zw,"The model class to instantiate is selected based on the "),Jbe=n(zw,"CODE",{});var FAt=s(Jbe);Eir=r(FAt,"model_type"),FAt.forEach(t),Cir=r(zw,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(zw,"CODE",{});var TAt=s(Ybe);wir=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),Air=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(zw,"CODE",{});var MAt=s(Kbe);Lir=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),yir=r(zw,":"),zw.forEach(t),xir=i(va),ve=n(va,"UL",{});var Te=s(ve);xT=n(Te,"LI",{});var GNe=s(xT);Zbe=n(GNe,"STRONG",{});var EAt=s(Zbe);$ir=r(EAt,"beit"),EAt.forEach(t),kir=r(GNe," \u2014 "),VQ=n(GNe,"A",{href:!0});var CAt=s(VQ);Sir=r(CAt,"BeitForImageClassification"),CAt.forEach(t),Rir=r(GNe," (BEiT model)"),GNe.forEach(t),Pir=i(Te),$T=n(Te,"LI",{});var ONe=s($T);eve=n(ONe,"STRONG",{});var wAt=s(eve);Bir=r(wAt,"convnext"),wAt.forEach(t),Iir=r(ONe," \u2014 "),XQ=n(ONe,"A",{href:!0});var AAt=s(XQ);Nir=r(AAt,"ConvNextForImageClassification"),AAt.forEach(t),qir=r(ONe," (ConvNeXT model)"),ONe.forEach(t),jir=i(Te),kT=n(Te,"LI",{});var VNe=s(kT);ove=n(VNe,"STRONG",{});var LAt=s(ove);Dir=r(LAt,"cvt"),LAt.forEach(t),Gir=r(VNe," \u2014 "),zQ=n(VNe,"A",{href:!0});var yAt=s(zQ);Oir=r(yAt,"CvtForImageClassification"),yAt.forEach(t),Vir=r(VNe," (CvT model)"),VNe.forEach(t),Xir=i(Te),ST=n(Te,"LI",{});var XNe=s(ST);rve=n(XNe,"STRONG",{});var xAt=s(rve);zir=r(xAt,"data2vec-vision"),xAt.forEach(t),Wir=r(XNe," \u2014 "),WQ=n(XNe,"A",{href:!0});var $At=s(WQ);Qir=r($At,"Data2VecVisionForImageClassification"),$At.forEach(t),Hir=r(XNe," (Data2VecVision model)"),XNe.forEach(t),Uir=i(Te),Js=n(Te,"LI",{});var QS=s(Js);tve=n(QS,"STRONG",{});var kAt=s(tve);Jir=r(kAt,"deit"),kAt.forEach(t),Yir=r(QS," \u2014 "),QQ=n(QS,"A",{href:!0});var SAt=s(QQ);Kir=r(SAt,"DeiTForImageClassification"),SAt.forEach(t),Zir=r(QS," or "),HQ=n(QS,"A",{href:!0});var RAt=s(HQ);edr=r(RAt,"DeiTForImageClassificationWithTeacher"),RAt.forEach(t),odr=r(QS," (DeiT model)"),QS.forEach(t),rdr=i(Te),RT=n(Te,"LI",{});var zNe=s(RT);ave=n(zNe,"STRONG",{});var PAt=s(ave);tdr=r(PAt,"imagegpt"),PAt.forEach(t),adr=r(zNe," \u2014 "),UQ=n(zNe,"A",{href:!0});var BAt=s(UQ);ndr=r(BAt,"ImageGPTForImageClassification"),BAt.forEach(t),sdr=r(zNe," (ImageGPT model)"),zNe.forEach(t),ldr=i(Te),Ys=n(Te,"LI",{});var HS=s(Ys);nve=n(HS,"STRONG",{});var IAt=s(nve);idr=r(IAt,"levit"),IAt.forEach(t),ddr=r(HS," \u2014 "),JQ=n(HS,"A",{href:!0});var NAt=s(JQ);cdr=r(NAt,"LevitForImageClassification"),NAt.forEach(t),fdr=r(HS," or "),YQ=n(HS,"A",{href:!0});var qAt=s(YQ);mdr=r(qAt,"LevitForImageClassificationWithTeacher"),qAt.forEach(t),gdr=r(HS," (LeViT model)"),HS.forEach(t),hdr=i(Te),PT=n(Te,"LI",{});var WNe=s(PT);sve=n(WNe,"STRONG",{});var jAt=s(sve);pdr=r(jAt,"mobilevit"),jAt.forEach(t),_dr=r(WNe," \u2014 "),KQ=n(WNe,"A",{href:!0});var DAt=s(KQ);udr=r(DAt,"MobileViTForImageClassification"),DAt.forEach(t),bdr=r(WNe," (MobileViT model)"),WNe.forEach(t),vdr=i(Te),Ft=n(Te,"LI",{});var Bf=s(Ft);lve=n(Bf,"STRONG",{});var GAt=s(lve);Fdr=r(GAt,"perceiver"),GAt.forEach(t),Tdr=r(Bf," \u2014 "),ZQ=n(Bf,"A",{href:!0});var OAt=s(ZQ);Mdr=r(OAt,"PerceiverForImageClassificationLearned"),OAt.forEach(t),Edr=r(Bf," or "),eH=n(Bf,"A",{href:!0});var VAt=s(eH);Cdr=r(VAt,"PerceiverForImageClassificationFourier"),VAt.forEach(t),wdr=r(Bf," or "),oH=n(Bf,"A",{href:!0});var XAt=s(oH);Adr=r(XAt,"PerceiverForImageClassificationConvProcessing"),XAt.forEach(t),Ldr=r(Bf," (Perceiver model)"),Bf.forEach(t),ydr=i(Te),BT=n(Te,"LI",{});var QNe=s(BT);ive=n(QNe,"STRONG",{});var zAt=s(ive);xdr=r(zAt,"poolformer"),zAt.forEach(t),$dr=r(QNe," \u2014 "),rH=n(QNe,"A",{href:!0});var WAt=s(rH);kdr=r(WAt,"PoolFormerForImageClassification"),WAt.forEach(t),Sdr=r(QNe," (PoolFormer model)"),QNe.forEach(t),Rdr=i(Te),IT=n(Te,"LI",{});var HNe=s(IT);dve=n(HNe,"STRONG",{});var QAt=s(dve);Pdr=r(QAt,"regnet"),QAt.forEach(t),Bdr=r(HNe," \u2014 "),tH=n(HNe,"A",{href:!0});var HAt=s(tH);Idr=r(HAt,"RegNetForImageClassification"),HAt.forEach(t),Ndr=r(HNe," (RegNet model)"),HNe.forEach(t),qdr=i(Te),NT=n(Te,"LI",{});var UNe=s(NT);cve=n(UNe,"STRONG",{});var UAt=s(cve);jdr=r(UAt,"resnet"),UAt.forEach(t),Ddr=r(UNe," \u2014 "),aH=n(UNe,"A",{href:!0});var JAt=s(aH);Gdr=r(JAt,"ResNetForImageClassification"),JAt.forEach(t),Odr=r(UNe," (ResNet model)"),UNe.forEach(t),Vdr=i(Te),qT=n(Te,"LI",{});var JNe=s(qT);fve=n(JNe,"STRONG",{});var YAt=s(fve);Xdr=r(YAt,"segformer"),YAt.forEach(t),zdr=r(JNe," \u2014 "),nH=n(JNe,"A",{href:!0});var KAt=s(nH);Wdr=r(KAt,"SegformerForImageClassification"),KAt.forEach(t),Qdr=r(JNe," (SegFormer model)"),JNe.forEach(t),Hdr=i(Te),jT=n(Te,"LI",{});var YNe=s(jT);mve=n(YNe,"STRONG",{});var ZAt=s(mve);Udr=r(ZAt,"swin"),ZAt.forEach(t),Jdr=r(YNe," \u2014 "),sH=n(YNe,"A",{href:!0});var eLt=s(sH);Ydr=r(eLt,"SwinForImageClassification"),eLt.forEach(t),Kdr=r(YNe," (Swin Transformer model)"),YNe.forEach(t),Zdr=i(Te),DT=n(Te,"LI",{});var KNe=s(DT);gve=n(KNe,"STRONG",{});var oLt=s(gve);ecr=r(oLt,"van"),oLt.forEach(t),ocr=r(KNe," \u2014 "),lH=n(KNe,"A",{href:!0});var rLt=s(lH);rcr=r(rLt,"VanForImageClassification"),rLt.forEach(t),tcr=r(KNe," (VAN model)"),KNe.forEach(t),acr=i(Te),GT=n(Te,"LI",{});var ZNe=s(GT);hve=n(ZNe,"STRONG",{});var tLt=s(hve);ncr=r(tLt,"vit"),tLt.forEach(t),scr=r(ZNe," \u2014 "),iH=n(ZNe,"A",{href:!0});var aLt=s(iH);lcr=r(aLt,"ViTForImageClassification"),aLt.forEach(t),icr=r(ZNe," (ViT model)"),ZNe.forEach(t),Te.forEach(t),dcr=i(va),OT=n(va,"P",{});var eqe=s(OT);ccr=r(eqe,"The model is set in evaluation mode by default using "),pve=n(eqe,"CODE",{});var nLt=s(pve);fcr=r(nLt,"model.eval()"),nLt.forEach(t),mcr=r(eqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ve=n(eqe,"CODE",{});var sLt=s(_ve);gcr=r(sLt,"model.train()"),sLt.forEach(t),eqe.forEach(t),hcr=i(va),T(VT.$$.fragment,va),va.forEach(t),pl.forEach(t),qze=i(f),wd=n(f,"H2",{class:!0});var XQe=s(wd);XT=n(XQe,"A",{id:!0,class:!0,href:!0});var lLt=s(XT);uve=n(lLt,"SPAN",{});var iLt=s(uve);T(Jy.$$.fragment,iLt),iLt.forEach(t),lLt.forEach(t),pcr=i(XQe),bve=n(XQe,"SPAN",{});var dLt=s(bve);_cr=r(dLt,"AutoModelForVision2Seq"),dLt.forEach(t),XQe.forEach(t),jze=i(f),Xo=n(f,"DIV",{class:!0});var _l=s(Xo);T(Yy.$$.fragment,_l),ucr=i(_l),Ad=n(_l,"P",{});var Ste=s(Ad);bcr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dH=n(Ste,"A",{href:!0});var cLt=s(dH);vcr=r(cLt,"from_pretrained()"),cLt.forEach(t),Fcr=r(Ste," class method or the "),cH=n(Ste,"A",{href:!0});var fLt=s(cH);Tcr=r(fLt,"from_config()"),fLt.forEach(t),Mcr=r(Ste,` class
method.`),Ste.forEach(t),Ecr=i(_l),Ky=n(_l,"P",{});var zQe=s(Ky);Ccr=r(zQe,"This class cannot be instantiated directly using "),vve=n(zQe,"CODE",{});var mLt=s(vve);wcr=r(mLt,"__init__()"),mLt.forEach(t),Acr=r(zQe," (throws an error)."),zQe.forEach(t),Lcr=i(_l),Tt=n(_l,"DIV",{class:!0});var Ww=s(Tt);T(Zy.$$.fragment,Ww),ycr=i(Ww),Fve=n(Ww,"P",{});var gLt=s(Fve);xcr=r(gLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gLt.forEach(t),$cr=i(Ww),Ld=n(Ww,"P",{});var Rte=s(Ld);kcr=r(Rte,`Note:
Loading a model from its configuration file does `),Tve=n(Rte,"STRONG",{});var hLt=s(Tve);Scr=r(hLt,"not"),hLt.forEach(t),Rcr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(Rte,"A",{href:!0});var pLt=s(fH);Pcr=r(pLt,"from_pretrained()"),pLt.forEach(t),Bcr=r(Rte," to load the model weights."),Rte.forEach(t),Icr=i(Ww),T(zT.$$.fragment,Ww),Ww.forEach(t),Ncr=i(_l),co=n(_l,"DIV",{class:!0});var Fa=s(co);T(e9.$$.fragment,Fa),qcr=i(Fa),Mve=n(Fa,"P",{});var _Lt=s(Mve);jcr=r(_Lt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Lt.forEach(t),Dcr=i(Fa),Ha=n(Fa,"P",{});var Qw=s(Ha);Gcr=r(Qw,"The model class to instantiate is selected based on the "),Eve=n(Qw,"CODE",{});var uLt=s(Eve);Ocr=r(uLt,"model_type"),uLt.forEach(t),Vcr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Cve=n(Qw,"CODE",{});var bLt=s(Cve);Xcr=r(bLt,"pretrained_model_name_or_path"),bLt.forEach(t),zcr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(Qw,"CODE",{});var vLt=s(wve);Wcr=r(vLt,"pretrained_model_name_or_path"),vLt.forEach(t),Qcr=r(Qw,":"),Qw.forEach(t),Hcr=i(Fa),Ave=n(Fa,"UL",{});var FLt=s(Ave);WT=n(FLt,"LI",{});var oqe=s(WT);Lve=n(oqe,"STRONG",{});var TLt=s(Lve);Ucr=r(TLt,"vision-encoder-decoder"),TLt.forEach(t),Jcr=r(oqe," \u2014 "),mH=n(oqe,"A",{href:!0});var MLt=s(mH);Ycr=r(MLt,"VisionEncoderDecoderModel"),MLt.forEach(t),Kcr=r(oqe," (Vision Encoder decoder model)"),oqe.forEach(t),FLt.forEach(t),Zcr=i(Fa),QT=n(Fa,"P",{});var rqe=s(QT);efr=r(rqe,"The model is set in evaluation mode by default using "),yve=n(rqe,"CODE",{});var ELt=s(yve);ofr=r(ELt,"model.eval()"),ELt.forEach(t),rfr=r(rqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=n(rqe,"CODE",{});var CLt=s(xve);tfr=r(CLt,"model.train()"),CLt.forEach(t),rqe.forEach(t),afr=i(Fa),T(HT.$$.fragment,Fa),Fa.forEach(t),_l.forEach(t),Dze=i(f),yd=n(f,"H2",{class:!0});var WQe=s(yd);UT=n(WQe,"A",{id:!0,class:!0,href:!0});var wLt=s(UT);$ve=n(wLt,"SPAN",{});var ALt=s($ve);T(o9.$$.fragment,ALt),ALt.forEach(t),wLt.forEach(t),nfr=i(WQe),kve=n(WQe,"SPAN",{});var LLt=s(kve);sfr=r(LLt,"AutoModelForVisualQuestionAnswering"),LLt.forEach(t),WQe.forEach(t),Gze=i(f),zo=n(f,"DIV",{class:!0});var ul=s(zo);T(r9.$$.fragment,ul),lfr=i(ul),xd=n(ul,"P",{});var Pte=s(xd);ifr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),gH=n(Pte,"A",{href:!0});var yLt=s(gH);dfr=r(yLt,"from_pretrained()"),yLt.forEach(t),cfr=r(Pte," class method or the "),hH=n(Pte,"A",{href:!0});var xLt=s(hH);ffr=r(xLt,"from_config()"),xLt.forEach(t),mfr=r(Pte,` class
method.`),Pte.forEach(t),gfr=i(ul),t9=n(ul,"P",{});var QQe=s(t9);hfr=r(QQe,"This class cannot be instantiated directly using "),Sve=n(QQe,"CODE",{});var $Lt=s(Sve);pfr=r($Lt,"__init__()"),$Lt.forEach(t),_fr=r(QQe," (throws an error)."),QQe.forEach(t),ufr=i(ul),Mt=n(ul,"DIV",{class:!0});var Hw=s(Mt);T(a9.$$.fragment,Hw),bfr=i(Hw),Rve=n(Hw,"P",{});var kLt=s(Rve);vfr=r(kLt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),kLt.forEach(t),Ffr=i(Hw),$d=n(Hw,"P",{});var Bte=s($d);Tfr=r(Bte,`Note:
Loading a model from its configuration file does `),Pve=n(Bte,"STRONG",{});var SLt=s(Pve);Mfr=r(SLt,"not"),SLt.forEach(t),Efr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(Bte,"A",{href:!0});var RLt=s(pH);Cfr=r(RLt,"from_pretrained()"),RLt.forEach(t),wfr=r(Bte," to load the model weights."),Bte.forEach(t),Afr=i(Hw),T(JT.$$.fragment,Hw),Hw.forEach(t),Lfr=i(ul),fo=n(ul,"DIV",{class:!0});var Ta=s(fo);T(n9.$$.fragment,Ta),yfr=i(Ta),Bve=n(Ta,"P",{});var PLt=s(Bve);xfr=r(PLt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),PLt.forEach(t),$fr=i(Ta),Ua=n(Ta,"P",{});var Uw=s(Ua);kfr=r(Uw,"The model class to instantiate is selected based on the "),Ive=n(Uw,"CODE",{});var BLt=s(Ive);Sfr=r(BLt,"model_type"),BLt.forEach(t),Rfr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),Nve=n(Uw,"CODE",{});var ILt=s(Nve);Pfr=r(ILt,"pretrained_model_name_or_path"),ILt.forEach(t),Bfr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(Uw,"CODE",{});var NLt=s(qve);Ifr=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),Nfr=r(Uw,":"),Uw.forEach(t),qfr=i(Ta),jve=n(Ta,"UL",{});var qLt=s(jve);YT=n(qLt,"LI",{});var tqe=s(YT);Dve=n(tqe,"STRONG",{});var jLt=s(Dve);jfr=r(jLt,"vilt"),jLt.forEach(t),Dfr=r(tqe," \u2014 "),_H=n(tqe,"A",{href:!0});var DLt=s(_H);Gfr=r(DLt,"ViltForQuestionAnswering"),DLt.forEach(t),Ofr=r(tqe," (ViLT model)"),tqe.forEach(t),qLt.forEach(t),Vfr=i(Ta),KT=n(Ta,"P",{});var aqe=s(KT);Xfr=r(aqe,"The model is set in evaluation mode by default using "),Gve=n(aqe,"CODE",{});var GLt=s(Gve);zfr=r(GLt,"model.eval()"),GLt.forEach(t),Wfr=r(aqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=n(aqe,"CODE",{});var OLt=s(Ove);Qfr=r(OLt,"model.train()"),OLt.forEach(t),aqe.forEach(t),Hfr=i(Ta),T(ZT.$$.fragment,Ta),Ta.forEach(t),ul.forEach(t),Oze=i(f),kd=n(f,"H2",{class:!0});var HQe=s(kd);e7=n(HQe,"A",{id:!0,class:!0,href:!0});var VLt=s(e7);Vve=n(VLt,"SPAN",{});var XLt=s(Vve);T(s9.$$.fragment,XLt),XLt.forEach(t),VLt.forEach(t),Ufr=i(HQe),Xve=n(HQe,"SPAN",{});var zLt=s(Xve);Jfr=r(zLt,"AutoModelForAudioClassification"),zLt.forEach(t),HQe.forEach(t),Vze=i(f),Wo=n(f,"DIV",{class:!0});var bl=s(Wo);T(l9.$$.fragment,bl),Yfr=i(bl),Sd=n(bl,"P",{});var Ite=s(Sd);Kfr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),uH=n(Ite,"A",{href:!0});var WLt=s(uH);Zfr=r(WLt,"from_pretrained()"),WLt.forEach(t),emr=r(Ite," class method or the "),bH=n(Ite,"A",{href:!0});var QLt=s(bH);omr=r(QLt,"from_config()"),QLt.forEach(t),rmr=r(Ite,` class
method.`),Ite.forEach(t),tmr=i(bl),i9=n(bl,"P",{});var UQe=s(i9);amr=r(UQe,"This class cannot be instantiated directly using "),zve=n(UQe,"CODE",{});var HLt=s(zve);nmr=r(HLt,"__init__()"),HLt.forEach(t),smr=r(UQe," (throws an error)."),UQe.forEach(t),lmr=i(bl),Et=n(bl,"DIV",{class:!0});var Jw=s(Et);T(d9.$$.fragment,Jw),imr=i(Jw),Wve=n(Jw,"P",{});var ULt=s(Wve);dmr=r(ULt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ULt.forEach(t),cmr=i(Jw),Rd=n(Jw,"P",{});var Nte=s(Rd);fmr=r(Nte,`Note:
Loading a model from its configuration file does `),Qve=n(Nte,"STRONG",{});var JLt=s(Qve);mmr=r(JLt,"not"),JLt.forEach(t),gmr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(Nte,"A",{href:!0});var YLt=s(vH);hmr=r(YLt,"from_pretrained()"),YLt.forEach(t),pmr=r(Nte," to load the model weights."),Nte.forEach(t),_mr=i(Jw),T(o7.$$.fragment,Jw),Jw.forEach(t),umr=i(bl),mo=n(bl,"DIV",{class:!0});var Ma=s(mo);T(c9.$$.fragment,Ma),bmr=i(Ma),Hve=n(Ma,"P",{});var KLt=s(Hve);vmr=r(KLt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),KLt.forEach(t),Fmr=i(Ma),Ja=n(Ma,"P",{});var Yw=s(Ja);Tmr=r(Yw,"The model class to instantiate is selected based on the "),Uve=n(Yw,"CODE",{});var ZLt=s(Uve);Mmr=r(ZLt,"model_type"),ZLt.forEach(t),Emr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),Jve=n(Yw,"CODE",{});var eyt=s(Jve);Cmr=r(eyt,"pretrained_model_name_or_path"),eyt.forEach(t),wmr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(Yw,"CODE",{});var oyt=s(Yve);Amr=r(oyt,"pretrained_model_name_or_path"),oyt.forEach(t),Lmr=r(Yw,":"),Yw.forEach(t),ymr=i(Ma),Pe=n(Ma,"UL",{});var We=s(Pe);r7=n(We,"LI",{});var nqe=s(r7);Kve=n(nqe,"STRONG",{});var ryt=s(Kve);xmr=r(ryt,"data2vec-audio"),ryt.forEach(t),$mr=r(nqe," \u2014 "),FH=n(nqe,"A",{href:!0});var tyt=s(FH);kmr=r(tyt,"Data2VecAudioForSequenceClassification"),tyt.forEach(t),Smr=r(nqe," (Data2VecAudio model)"),nqe.forEach(t),Rmr=i(We),t7=n(We,"LI",{});var sqe=s(t7);Zve=n(sqe,"STRONG",{});var ayt=s(Zve);Pmr=r(ayt,"hubert"),ayt.forEach(t),Bmr=r(sqe," \u2014 "),TH=n(sqe,"A",{href:!0});var nyt=s(TH);Imr=r(nyt,"HubertForSequenceClassification"),nyt.forEach(t),Nmr=r(sqe," (Hubert model)"),sqe.forEach(t),qmr=i(We),a7=n(We,"LI",{});var lqe=s(a7);eFe=n(lqe,"STRONG",{});var syt=s(eFe);jmr=r(syt,"sew"),syt.forEach(t),Dmr=r(lqe," \u2014 "),MH=n(lqe,"A",{href:!0});var lyt=s(MH);Gmr=r(lyt,"SEWForSequenceClassification"),lyt.forEach(t),Omr=r(lqe," (SEW model)"),lqe.forEach(t),Vmr=i(We),n7=n(We,"LI",{});var iqe=s(n7);oFe=n(iqe,"STRONG",{});var iyt=s(oFe);Xmr=r(iyt,"sew-d"),iyt.forEach(t),zmr=r(iqe," \u2014 "),EH=n(iqe,"A",{href:!0});var dyt=s(EH);Wmr=r(dyt,"SEWDForSequenceClassification"),dyt.forEach(t),Qmr=r(iqe," (SEW-D model)"),iqe.forEach(t),Hmr=i(We),s7=n(We,"LI",{});var dqe=s(s7);rFe=n(dqe,"STRONG",{});var cyt=s(rFe);Umr=r(cyt,"unispeech"),cyt.forEach(t),Jmr=r(dqe," \u2014 "),CH=n(dqe,"A",{href:!0});var fyt=s(CH);Ymr=r(fyt,"UniSpeechForSequenceClassification"),fyt.forEach(t),Kmr=r(dqe," (UniSpeech model)"),dqe.forEach(t),Zmr=i(We),l7=n(We,"LI",{});var cqe=s(l7);tFe=n(cqe,"STRONG",{});var myt=s(tFe);egr=r(myt,"unispeech-sat"),myt.forEach(t),ogr=r(cqe," \u2014 "),wH=n(cqe,"A",{href:!0});var gyt=s(wH);rgr=r(gyt,"UniSpeechSatForSequenceClassification"),gyt.forEach(t),tgr=r(cqe," (UniSpeechSat model)"),cqe.forEach(t),agr=i(We),i7=n(We,"LI",{});var fqe=s(i7);aFe=n(fqe,"STRONG",{});var hyt=s(aFe);ngr=r(hyt,"wav2vec2"),hyt.forEach(t),sgr=r(fqe," \u2014 "),AH=n(fqe,"A",{href:!0});var pyt=s(AH);lgr=r(pyt,"Wav2Vec2ForSequenceClassification"),pyt.forEach(t),igr=r(fqe," (Wav2Vec2 model)"),fqe.forEach(t),dgr=i(We),d7=n(We,"LI",{});var mqe=s(d7);nFe=n(mqe,"STRONG",{});var _yt=s(nFe);cgr=r(_yt,"wav2vec2-conformer"),_yt.forEach(t),fgr=r(mqe," \u2014 "),LH=n(mqe,"A",{href:!0});var uyt=s(LH);mgr=r(uyt,"Wav2Vec2ConformerForSequenceClassification"),uyt.forEach(t),ggr=r(mqe," (Wav2Vec2-Conformer model)"),mqe.forEach(t),hgr=i(We),c7=n(We,"LI",{});var gqe=s(c7);sFe=n(gqe,"STRONG",{});var byt=s(sFe);pgr=r(byt,"wavlm"),byt.forEach(t),_gr=r(gqe," \u2014 "),yH=n(gqe,"A",{href:!0});var vyt=s(yH);ugr=r(vyt,"WavLMForSequenceClassification"),vyt.forEach(t),bgr=r(gqe," (WavLM model)"),gqe.forEach(t),We.forEach(t),vgr=i(Ma),f7=n(Ma,"P",{});var hqe=s(f7);Fgr=r(hqe,"The model is set in evaluation mode by default using "),lFe=n(hqe,"CODE",{});var Fyt=s(lFe);Tgr=r(Fyt,"model.eval()"),Fyt.forEach(t),Mgr=r(hqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iFe=n(hqe,"CODE",{});var Tyt=s(iFe);Egr=r(Tyt,"model.train()"),Tyt.forEach(t),hqe.forEach(t),Cgr=i(Ma),T(m7.$$.fragment,Ma),Ma.forEach(t),bl.forEach(t),Xze=i(f),Pd=n(f,"H2",{class:!0});var JQe=s(Pd);g7=n(JQe,"A",{id:!0,class:!0,href:!0});var Myt=s(g7);dFe=n(Myt,"SPAN",{});var Eyt=s(dFe);T(f9.$$.fragment,Eyt),Eyt.forEach(t),Myt.forEach(t),wgr=i(JQe),cFe=n(JQe,"SPAN",{});var Cyt=s(cFe);Agr=r(Cyt,"AutoModelForAudioFrameClassification"),Cyt.forEach(t),JQe.forEach(t),zze=i(f),Qo=n(f,"DIV",{class:!0});var vl=s(Qo);T(m9.$$.fragment,vl),Lgr=i(vl),Bd=n(vl,"P",{});var qte=s(Bd);ygr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),xH=n(qte,"A",{href:!0});var wyt=s(xH);xgr=r(wyt,"from_pretrained()"),wyt.forEach(t),$gr=r(qte," class method or the "),$H=n(qte,"A",{href:!0});var Ayt=s($H);kgr=r(Ayt,"from_config()"),Ayt.forEach(t),Sgr=r(qte,` class
method.`),qte.forEach(t),Rgr=i(vl),g9=n(vl,"P",{});var YQe=s(g9);Pgr=r(YQe,"This class cannot be instantiated directly using "),fFe=n(YQe,"CODE",{});var Lyt=s(fFe);Bgr=r(Lyt,"__init__()"),Lyt.forEach(t),Igr=r(YQe," (throws an error)."),YQe.forEach(t),Ngr=i(vl),Ct=n(vl,"DIV",{class:!0});var Kw=s(Ct);T(h9.$$.fragment,Kw),qgr=i(Kw),mFe=n(Kw,"P",{});var yyt=s(mFe);jgr=r(yyt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),yyt.forEach(t),Dgr=i(Kw),Id=n(Kw,"P",{});var jte=s(Id);Ggr=r(jte,`Note:
Loading a model from its configuration file does `),gFe=n(jte,"STRONG",{});var xyt=s(gFe);Ogr=r(xyt,"not"),xyt.forEach(t),Vgr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(jte,"A",{href:!0});var $yt=s(kH);Xgr=r($yt,"from_pretrained()"),$yt.forEach(t),zgr=r(jte," to load the model weights."),jte.forEach(t),Wgr=i(Kw),T(h7.$$.fragment,Kw),Kw.forEach(t),Qgr=i(vl),go=n(vl,"DIV",{class:!0});var Ea=s(go);T(p9.$$.fragment,Ea),Hgr=i(Ea),hFe=n(Ea,"P",{});var kyt=s(hFe);Ugr=r(kyt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),kyt.forEach(t),Jgr=i(Ea),Ya=n(Ea,"P",{});var Zw=s(Ya);Ygr=r(Zw,"The model class to instantiate is selected based on the "),pFe=n(Zw,"CODE",{});var Syt=s(pFe);Kgr=r(Syt,"model_type"),Syt.forEach(t),Zgr=r(Zw,` property of the config object (either
passed as an argument or loaded from `),_Fe=n(Zw,"CODE",{});var Ryt=s(_Fe);ehr=r(Ryt,"pretrained_model_name_or_path"),Ryt.forEach(t),ohr=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=n(Zw,"CODE",{});var Pyt=s(uFe);rhr=r(Pyt,"pretrained_model_name_or_path"),Pyt.forEach(t),thr=r(Zw,":"),Zw.forEach(t),ahr=i(Ea),rt=n(Ea,"UL",{});var Fl=s(rt);p7=n(Fl,"LI",{});var pqe=s(p7);bFe=n(pqe,"STRONG",{});var Byt=s(bFe);nhr=r(Byt,"data2vec-audio"),Byt.forEach(t),shr=r(pqe," \u2014 "),SH=n(pqe,"A",{href:!0});var Iyt=s(SH);lhr=r(Iyt,"Data2VecAudioForAudioFrameClassification"),Iyt.forEach(t),ihr=r(pqe," (Data2VecAudio model)"),pqe.forEach(t),dhr=i(Fl),_7=n(Fl,"LI",{});var _qe=s(_7);vFe=n(_qe,"STRONG",{});var Nyt=s(vFe);chr=r(Nyt,"unispeech-sat"),Nyt.forEach(t),fhr=r(_qe," \u2014 "),RH=n(_qe,"A",{href:!0});var qyt=s(RH);mhr=r(qyt,"UniSpeechSatForAudioFrameClassification"),qyt.forEach(t),ghr=r(_qe," (UniSpeechSat model)"),_qe.forEach(t),hhr=i(Fl),u7=n(Fl,"LI",{});var uqe=s(u7);FFe=n(uqe,"STRONG",{});var jyt=s(FFe);phr=r(jyt,"wav2vec2"),jyt.forEach(t),_hr=r(uqe," \u2014 "),PH=n(uqe,"A",{href:!0});var Dyt=s(PH);uhr=r(Dyt,"Wav2Vec2ForAudioFrameClassification"),Dyt.forEach(t),bhr=r(uqe," (Wav2Vec2 model)"),uqe.forEach(t),vhr=i(Fl),b7=n(Fl,"LI",{});var bqe=s(b7);TFe=n(bqe,"STRONG",{});var Gyt=s(TFe);Fhr=r(Gyt,"wav2vec2-conformer"),Gyt.forEach(t),Thr=r(bqe," \u2014 "),BH=n(bqe,"A",{href:!0});var Oyt=s(BH);Mhr=r(Oyt,"Wav2Vec2ConformerForAudioFrameClassification"),Oyt.forEach(t),Ehr=r(bqe," (Wav2Vec2-Conformer model)"),bqe.forEach(t),Chr=i(Fl),v7=n(Fl,"LI",{});var vqe=s(v7);MFe=n(vqe,"STRONG",{});var Vyt=s(MFe);whr=r(Vyt,"wavlm"),Vyt.forEach(t),Ahr=r(vqe," \u2014 "),IH=n(vqe,"A",{href:!0});var Xyt=s(IH);Lhr=r(Xyt,"WavLMForAudioFrameClassification"),Xyt.forEach(t),yhr=r(vqe," (WavLM model)"),vqe.forEach(t),Fl.forEach(t),xhr=i(Ea),F7=n(Ea,"P",{});var Fqe=s(F7);$hr=r(Fqe,"The model is set in evaluation mode by default using "),EFe=n(Fqe,"CODE",{});var zyt=s(EFe);khr=r(zyt,"model.eval()"),zyt.forEach(t),Shr=r(Fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CFe=n(Fqe,"CODE",{});var Wyt=s(CFe);Rhr=r(Wyt,"model.train()"),Wyt.forEach(t),Fqe.forEach(t),Phr=i(Ea),T(T7.$$.fragment,Ea),Ea.forEach(t),vl.forEach(t),Wze=i(f),Nd=n(f,"H2",{class:!0});var KQe=s(Nd);M7=n(KQe,"A",{id:!0,class:!0,href:!0});var Qyt=s(M7);wFe=n(Qyt,"SPAN",{});var Hyt=s(wFe);T(_9.$$.fragment,Hyt),Hyt.forEach(t),Qyt.forEach(t),Bhr=i(KQe),AFe=n(KQe,"SPAN",{});var Uyt=s(AFe);Ihr=r(Uyt,"AutoModelForCTC"),Uyt.forEach(t),KQe.forEach(t),Qze=i(f),Ho=n(f,"DIV",{class:!0});var Tl=s(Ho);T(u9.$$.fragment,Tl),Nhr=i(Tl),qd=n(Tl,"P",{});var Dte=s(qd);qhr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),NH=n(Dte,"A",{href:!0});var Jyt=s(NH);jhr=r(Jyt,"from_pretrained()"),Jyt.forEach(t),Dhr=r(Dte," class method or the "),qH=n(Dte,"A",{href:!0});var Yyt=s(qH);Ghr=r(Yyt,"from_config()"),Yyt.forEach(t),Ohr=r(Dte,` class
method.`),Dte.forEach(t),Vhr=i(Tl),b9=n(Tl,"P",{});var ZQe=s(b9);Xhr=r(ZQe,"This class cannot be instantiated directly using "),LFe=n(ZQe,"CODE",{});var Kyt=s(LFe);zhr=r(Kyt,"__init__()"),Kyt.forEach(t),Whr=r(ZQe," (throws an error)."),ZQe.forEach(t),Qhr=i(Tl),wt=n(Tl,"DIV",{class:!0});var eA=s(wt);T(v9.$$.fragment,eA),Hhr=i(eA),yFe=n(eA,"P",{});var Zyt=s(yFe);Uhr=r(Zyt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Zyt.forEach(t),Jhr=i(eA),jd=n(eA,"P",{});var Gte=s(jd);Yhr=r(Gte,`Note:
Loading a model from its configuration file does `),xFe=n(Gte,"STRONG",{});var e9t=s(xFe);Khr=r(e9t,"not"),e9t.forEach(t),Zhr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(Gte,"A",{href:!0});var o9t=s(jH);epr=r(o9t,"from_pretrained()"),o9t.forEach(t),opr=r(Gte," to load the model weights."),Gte.forEach(t),rpr=i(eA),T(E7.$$.fragment,eA),eA.forEach(t),tpr=i(Tl),ho=n(Tl,"DIV",{class:!0});var Ca=s(ho);T(F9.$$.fragment,Ca),apr=i(Ca),$Fe=n(Ca,"P",{});var r9t=s($Fe);npr=r(r9t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),r9t.forEach(t),spr=i(Ca),Ka=n(Ca,"P",{});var oA=s(Ka);lpr=r(oA,"The model class to instantiate is selected based on the "),kFe=n(oA,"CODE",{});var t9t=s(kFe);ipr=r(t9t,"model_type"),t9t.forEach(t),dpr=r(oA,` property of the config object (either
passed as an argument or loaded from `),SFe=n(oA,"CODE",{});var a9t=s(SFe);cpr=r(a9t,"pretrained_model_name_or_path"),a9t.forEach(t),fpr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(oA,"CODE",{});var n9t=s(RFe);mpr=r(n9t,"pretrained_model_name_or_path"),n9t.forEach(t),gpr=r(oA,":"),oA.forEach(t),hpr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);C7=n(Be,"LI",{});var Tqe=s(C7);PFe=n(Tqe,"STRONG",{});var s9t=s(PFe);ppr=r(s9t,"data2vec-audio"),s9t.forEach(t),_pr=r(Tqe," \u2014 "),DH=n(Tqe,"A",{href:!0});var l9t=s(DH);upr=r(l9t,"Data2VecAudioForCTC"),l9t.forEach(t),bpr=r(Tqe," (Data2VecAudio model)"),Tqe.forEach(t),vpr=i(Be),w7=n(Be,"LI",{});var Mqe=s(w7);BFe=n(Mqe,"STRONG",{});var i9t=s(BFe);Fpr=r(i9t,"hubert"),i9t.forEach(t),Tpr=r(Mqe," \u2014 "),GH=n(Mqe,"A",{href:!0});var d9t=s(GH);Mpr=r(d9t,"HubertForCTC"),d9t.forEach(t),Epr=r(Mqe," (Hubert model)"),Mqe.forEach(t),Cpr=i(Be),A7=n(Be,"LI",{});var Eqe=s(A7);IFe=n(Eqe,"STRONG",{});var c9t=s(IFe);wpr=r(c9t,"mctct"),c9t.forEach(t),Apr=r(Eqe," \u2014 "),OH=n(Eqe,"A",{href:!0});var f9t=s(OH);Lpr=r(f9t,"MCTCTForCTC"),f9t.forEach(t),ypr=r(Eqe," (M-CTC-T model)"),Eqe.forEach(t),xpr=i(Be),L7=n(Be,"LI",{});var Cqe=s(L7);NFe=n(Cqe,"STRONG",{});var m9t=s(NFe);$pr=r(m9t,"sew"),m9t.forEach(t),kpr=r(Cqe," \u2014 "),VH=n(Cqe,"A",{href:!0});var g9t=s(VH);Spr=r(g9t,"SEWForCTC"),g9t.forEach(t),Rpr=r(Cqe," (SEW model)"),Cqe.forEach(t),Ppr=i(Be),y7=n(Be,"LI",{});var wqe=s(y7);qFe=n(wqe,"STRONG",{});var h9t=s(qFe);Bpr=r(h9t,"sew-d"),h9t.forEach(t),Ipr=r(wqe," \u2014 "),XH=n(wqe,"A",{href:!0});var p9t=s(XH);Npr=r(p9t,"SEWDForCTC"),p9t.forEach(t),qpr=r(wqe," (SEW-D model)"),wqe.forEach(t),jpr=i(Be),x7=n(Be,"LI",{});var Aqe=s(x7);jFe=n(Aqe,"STRONG",{});var _9t=s(jFe);Dpr=r(_9t,"unispeech"),_9t.forEach(t),Gpr=r(Aqe," \u2014 "),zH=n(Aqe,"A",{href:!0});var u9t=s(zH);Opr=r(u9t,"UniSpeechForCTC"),u9t.forEach(t),Vpr=r(Aqe," (UniSpeech model)"),Aqe.forEach(t),Xpr=i(Be),$7=n(Be,"LI",{});var Lqe=s($7);DFe=n(Lqe,"STRONG",{});var b9t=s(DFe);zpr=r(b9t,"unispeech-sat"),b9t.forEach(t),Wpr=r(Lqe," \u2014 "),WH=n(Lqe,"A",{href:!0});var v9t=s(WH);Qpr=r(v9t,"UniSpeechSatForCTC"),v9t.forEach(t),Hpr=r(Lqe," (UniSpeechSat model)"),Lqe.forEach(t),Upr=i(Be),k7=n(Be,"LI",{});var yqe=s(k7);GFe=n(yqe,"STRONG",{});var F9t=s(GFe);Jpr=r(F9t,"wav2vec2"),F9t.forEach(t),Ypr=r(yqe," \u2014 "),QH=n(yqe,"A",{href:!0});var T9t=s(QH);Kpr=r(T9t,"Wav2Vec2ForCTC"),T9t.forEach(t),Zpr=r(yqe," (Wav2Vec2 model)"),yqe.forEach(t),e_r=i(Be),S7=n(Be,"LI",{});var xqe=s(S7);OFe=n(xqe,"STRONG",{});var M9t=s(OFe);o_r=r(M9t,"wav2vec2-conformer"),M9t.forEach(t),r_r=r(xqe," \u2014 "),HH=n(xqe,"A",{href:!0});var E9t=s(HH);t_r=r(E9t,"Wav2Vec2ConformerForCTC"),E9t.forEach(t),a_r=r(xqe," (Wav2Vec2-Conformer model)"),xqe.forEach(t),n_r=i(Be),R7=n(Be,"LI",{});var $qe=s(R7);VFe=n($qe,"STRONG",{});var C9t=s(VFe);s_r=r(C9t,"wavlm"),C9t.forEach(t),l_r=r($qe," \u2014 "),UH=n($qe,"A",{href:!0});var w9t=s(UH);i_r=r(w9t,"WavLMForCTC"),w9t.forEach(t),d_r=r($qe," (WavLM model)"),$qe.forEach(t),Be.forEach(t),c_r=i(Ca),P7=n(Ca,"P",{});var kqe=s(P7);f_r=r(kqe,"The model is set in evaluation mode by default using "),XFe=n(kqe,"CODE",{});var A9t=s(XFe);m_r=r(A9t,"model.eval()"),A9t.forEach(t),g_r=r(kqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zFe=n(kqe,"CODE",{});var L9t=s(zFe);h_r=r(L9t,"model.train()"),L9t.forEach(t),kqe.forEach(t),p_r=i(Ca),T(B7.$$.fragment,Ca),Ca.forEach(t),Tl.forEach(t),Hze=i(f),Dd=n(f,"H2",{class:!0});var eHe=s(Dd);I7=n(eHe,"A",{id:!0,class:!0,href:!0});var y9t=s(I7);WFe=n(y9t,"SPAN",{});var x9t=s(WFe);T(T9.$$.fragment,x9t),x9t.forEach(t),y9t.forEach(t),__r=i(eHe),QFe=n(eHe,"SPAN",{});var $9t=s(QFe);u_r=r($9t,"AutoModelForSpeechSeq2Seq"),$9t.forEach(t),eHe.forEach(t),Uze=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(M9.$$.fragment,Ml),b_r=i(Ml),Gd=n(Ml,"P",{});var Ote=s(Gd);v_r=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JH=n(Ote,"A",{href:!0});var k9t=s(JH);F_r=r(k9t,"from_pretrained()"),k9t.forEach(t),T_r=r(Ote," class method or the "),YH=n(Ote,"A",{href:!0});var S9t=s(YH);M_r=r(S9t,"from_config()"),S9t.forEach(t),E_r=r(Ote,` class
method.`),Ote.forEach(t),C_r=i(Ml),E9=n(Ml,"P",{});var oHe=s(E9);w_r=r(oHe,"This class cannot be instantiated directly using "),HFe=n(oHe,"CODE",{});var R9t=s(HFe);A_r=r(R9t,"__init__()"),R9t.forEach(t),L_r=r(oHe," (throws an error)."),oHe.forEach(t),y_r=i(Ml),At=n(Ml,"DIV",{class:!0});var rA=s(At);T(C9.$$.fragment,rA),x_r=i(rA),UFe=n(rA,"P",{});var P9t=s(UFe);$_r=r(P9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),P9t.forEach(t),k_r=i(rA),Od=n(rA,"P",{});var Vte=s(Od);S_r=r(Vte,`Note:
Loading a model from its configuration file does `),JFe=n(Vte,"STRONG",{});var B9t=s(JFe);R_r=r(B9t,"not"),B9t.forEach(t),P_r=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(Vte,"A",{href:!0});var I9t=s(KH);B_r=r(I9t,"from_pretrained()"),I9t.forEach(t),I_r=r(Vte," to load the model weights."),Vte.forEach(t),N_r=i(rA),T(N7.$$.fragment,rA),rA.forEach(t),q_r=i(Ml),po=n(Ml,"DIV",{class:!0});var wa=s(po);T(w9.$$.fragment,wa),j_r=i(wa),YFe=n(wa,"P",{});var N9t=s(YFe);D_r=r(N9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),N9t.forEach(t),G_r=i(wa),Za=n(wa,"P",{});var tA=s(Za);O_r=r(tA,"The model class to instantiate is selected based on the "),KFe=n(tA,"CODE",{});var q9t=s(KFe);V_r=r(q9t,"model_type"),q9t.forEach(t),X_r=r(tA,` property of the config object (either
passed as an argument or loaded from `),ZFe=n(tA,"CODE",{});var j9t=s(ZFe);z_r=r(j9t,"pretrained_model_name_or_path"),j9t.forEach(t),W_r=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=n(tA,"CODE",{});var D9t=s(e6e);Q_r=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),H_r=r(tA,":"),tA.forEach(t),U_r=i(wa),A9=n(wa,"UL",{});var rHe=s(A9);q7=n(rHe,"LI",{});var Sqe=s(q7);o6e=n(Sqe,"STRONG",{});var G9t=s(o6e);J_r=r(G9t,"speech-encoder-decoder"),G9t.forEach(t),Y_r=r(Sqe," \u2014 "),ZH=n(Sqe,"A",{href:!0});var O9t=s(ZH);K_r=r(O9t,"SpeechEncoderDecoderModel"),O9t.forEach(t),Z_r=r(Sqe," (Speech Encoder decoder model)"),Sqe.forEach(t),eur=i(rHe),j7=n(rHe,"LI",{});var Rqe=s(j7);r6e=n(Rqe,"STRONG",{});var V9t=s(r6e);our=r(V9t,"speech_to_text"),V9t.forEach(t),rur=r(Rqe," \u2014 "),eU=n(Rqe,"A",{href:!0});var X9t=s(eU);tur=r(X9t,"Speech2TextForConditionalGeneration"),X9t.forEach(t),aur=r(Rqe," (Speech2Text model)"),Rqe.forEach(t),rHe.forEach(t),nur=i(wa),D7=n(wa,"P",{});var Pqe=s(D7);sur=r(Pqe,"The model is set in evaluation mode by default using "),t6e=n(Pqe,"CODE",{});var z9t=s(t6e);lur=r(z9t,"model.eval()"),z9t.forEach(t),iur=r(Pqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a6e=n(Pqe,"CODE",{});var W9t=s(a6e);dur=r(W9t,"model.train()"),W9t.forEach(t),Pqe.forEach(t),cur=i(wa),T(G7.$$.fragment,wa),wa.forEach(t),Ml.forEach(t),Jze=i(f),Vd=n(f,"H2",{class:!0});var tHe=s(Vd);O7=n(tHe,"A",{id:!0,class:!0,href:!0});var Q9t=s(O7);n6e=n(Q9t,"SPAN",{});var H9t=s(n6e);T(L9.$$.fragment,H9t),H9t.forEach(t),Q9t.forEach(t),fur=i(tHe),s6e=n(tHe,"SPAN",{});var U9t=s(s6e);mur=r(U9t,"AutoModelForAudioXVector"),U9t.forEach(t),tHe.forEach(t),Yze=i(f),Jo=n(f,"DIV",{class:!0});var El=s(Jo);T(y9.$$.fragment,El),gur=i(El),Xd=n(El,"P",{});var Xte=s(Xd);hur=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),oU=n(Xte,"A",{href:!0});var J9t=s(oU);pur=r(J9t,"from_pretrained()"),J9t.forEach(t),_ur=r(Xte," class method or the "),rU=n(Xte,"A",{href:!0});var Y9t=s(rU);uur=r(Y9t,"from_config()"),Y9t.forEach(t),bur=r(Xte,` class
method.`),Xte.forEach(t),vur=i(El),x9=n(El,"P",{});var aHe=s(x9);Fur=r(aHe,"This class cannot be instantiated directly using "),l6e=n(aHe,"CODE",{});var K9t=s(l6e);Tur=r(K9t,"__init__()"),K9t.forEach(t),Mur=r(aHe," (throws an error)."),aHe.forEach(t),Eur=i(El),Lt=n(El,"DIV",{class:!0});var aA=s(Lt);T($9.$$.fragment,aA),Cur=i(aA),i6e=n(aA,"P",{});var Z9t=s(i6e);wur=r(Z9t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Z9t.forEach(t),Aur=i(aA),zd=n(aA,"P",{});var zte=s(zd);Lur=r(zte,`Note:
Loading a model from its configuration file does `),d6e=n(zte,"STRONG",{});var ext=s(d6e);yur=r(ext,"not"),ext.forEach(t),xur=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(zte,"A",{href:!0});var oxt=s(tU);$ur=r(oxt,"from_pretrained()"),oxt.forEach(t),kur=r(zte," to load the model weights."),zte.forEach(t),Sur=i(aA),T(V7.$$.fragment,aA),aA.forEach(t),Rur=i(El),_o=n(El,"DIV",{class:!0});var Aa=s(_o);T(k9.$$.fragment,Aa),Pur=i(Aa),c6e=n(Aa,"P",{});var rxt=s(c6e);Bur=r(rxt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),rxt.forEach(t),Iur=i(Aa),en=n(Aa,"P",{});var nA=s(en);Nur=r(nA,"The model class to instantiate is selected based on the "),f6e=n(nA,"CODE",{});var txt=s(f6e);qur=r(txt,"model_type"),txt.forEach(t),jur=r(nA,` property of the config object (either
passed as an argument or loaded from `),m6e=n(nA,"CODE",{});var axt=s(m6e);Dur=r(axt,"pretrained_model_name_or_path"),axt.forEach(t),Gur=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=n(nA,"CODE",{});var nxt=s(g6e);Our=r(nxt,"pretrained_model_name_or_path"),nxt.forEach(t),Vur=r(nA,":"),nA.forEach(t),Xur=i(Aa),tt=n(Aa,"UL",{});var Cl=s(tt);X7=n(Cl,"LI",{});var Bqe=s(X7);h6e=n(Bqe,"STRONG",{});var sxt=s(h6e);zur=r(sxt,"data2vec-audio"),sxt.forEach(t),Wur=r(Bqe," \u2014 "),aU=n(Bqe,"A",{href:!0});var lxt=s(aU);Qur=r(lxt,"Data2VecAudioForXVector"),lxt.forEach(t),Hur=r(Bqe," (Data2VecAudio model)"),Bqe.forEach(t),Uur=i(Cl),z7=n(Cl,"LI",{});var Iqe=s(z7);p6e=n(Iqe,"STRONG",{});var ixt=s(p6e);Jur=r(ixt,"unispeech-sat"),ixt.forEach(t),Yur=r(Iqe," \u2014 "),nU=n(Iqe,"A",{href:!0});var dxt=s(nU);Kur=r(dxt,"UniSpeechSatForXVector"),dxt.forEach(t),Zur=r(Iqe," (UniSpeechSat model)"),Iqe.forEach(t),e2r=i(Cl),W7=n(Cl,"LI",{});var Nqe=s(W7);_6e=n(Nqe,"STRONG",{});var cxt=s(_6e);o2r=r(cxt,"wav2vec2"),cxt.forEach(t),r2r=r(Nqe," \u2014 "),sU=n(Nqe,"A",{href:!0});var fxt=s(sU);t2r=r(fxt,"Wav2Vec2ForXVector"),fxt.forEach(t),a2r=r(Nqe," (Wav2Vec2 model)"),Nqe.forEach(t),n2r=i(Cl),Q7=n(Cl,"LI",{});var qqe=s(Q7);u6e=n(qqe,"STRONG",{});var mxt=s(u6e);s2r=r(mxt,"wav2vec2-conformer"),mxt.forEach(t),l2r=r(qqe," \u2014 "),lU=n(qqe,"A",{href:!0});var gxt=s(lU);i2r=r(gxt,"Wav2Vec2ConformerForXVector"),gxt.forEach(t),d2r=r(qqe," (Wav2Vec2-Conformer model)"),qqe.forEach(t),c2r=i(Cl),H7=n(Cl,"LI",{});var jqe=s(H7);b6e=n(jqe,"STRONG",{});var hxt=s(b6e);f2r=r(hxt,"wavlm"),hxt.forEach(t),m2r=r(jqe," \u2014 "),iU=n(jqe,"A",{href:!0});var pxt=s(iU);g2r=r(pxt,"WavLMForXVector"),pxt.forEach(t),h2r=r(jqe," (WavLM model)"),jqe.forEach(t),Cl.forEach(t),p2r=i(Aa),U7=n(Aa,"P",{});var Dqe=s(U7);_2r=r(Dqe,"The model is set in evaluation mode by default using "),v6e=n(Dqe,"CODE",{});var _xt=s(v6e);u2r=r(_xt,"model.eval()"),_xt.forEach(t),b2r=r(Dqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F6e=n(Dqe,"CODE",{});var uxt=s(F6e);v2r=r(uxt,"model.train()"),uxt.forEach(t),Dqe.forEach(t),F2r=i(Aa),T(J7.$$.fragment,Aa),Aa.forEach(t),El.forEach(t),Kze=i(f),Wd=n(f,"H2",{class:!0});var nHe=s(Wd);Y7=n(nHe,"A",{id:!0,class:!0,href:!0});var bxt=s(Y7);T6e=n(bxt,"SPAN",{});var vxt=s(T6e);T(S9.$$.fragment,vxt),vxt.forEach(t),bxt.forEach(t),T2r=i(nHe),M6e=n(nHe,"SPAN",{});var Fxt=s(M6e);M2r=r(Fxt,"AutoModelForMaskedImageModeling"),Fxt.forEach(t),nHe.forEach(t),Zze=i(f),Yo=n(f,"DIV",{class:!0});var wl=s(Yo);T(R9.$$.fragment,wl),E2r=i(wl),Qd=n(wl,"P",{});var Wte=s(Qd);C2r=r(Wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),dU=n(Wte,"A",{href:!0});var Txt=s(dU);w2r=r(Txt,"from_pretrained()"),Txt.forEach(t),A2r=r(Wte," class method or the "),cU=n(Wte,"A",{href:!0});var Mxt=s(cU);L2r=r(Mxt,"from_config()"),Mxt.forEach(t),y2r=r(Wte,` class
method.`),Wte.forEach(t),x2r=i(wl),P9=n(wl,"P",{});var sHe=s(P9);$2r=r(sHe,"This class cannot be instantiated directly using "),E6e=n(sHe,"CODE",{});var Ext=s(E6e);k2r=r(Ext,"__init__()"),Ext.forEach(t),S2r=r(sHe," (throws an error)."),sHe.forEach(t),R2r=i(wl),yt=n(wl,"DIV",{class:!0});var sA=s(yt);T(B9.$$.fragment,sA),P2r=i(sA),C6e=n(sA,"P",{});var Cxt=s(C6e);B2r=r(Cxt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Cxt.forEach(t),I2r=i(sA),Hd=n(sA,"P",{});var Qte=s(Hd);N2r=r(Qte,`Note:
Loading a model from its configuration file does `),w6e=n(Qte,"STRONG",{});var wxt=s(w6e);q2r=r(wxt,"not"),wxt.forEach(t),j2r=r(Qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(Qte,"A",{href:!0});var Axt=s(fU);D2r=r(Axt,"from_pretrained()"),Axt.forEach(t),G2r=r(Qte," to load the model weights."),Qte.forEach(t),O2r=i(sA),T(K7.$$.fragment,sA),sA.forEach(t),V2r=i(wl),uo=n(wl,"DIV",{class:!0});var La=s(uo);T(I9.$$.fragment,La),X2r=i(La),A6e=n(La,"P",{});var Lxt=s(A6e);z2r=r(Lxt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Lxt.forEach(t),W2r=i(La),on=n(La,"P",{});var lA=s(on);Q2r=r(lA,"The model class to instantiate is selected based on the "),L6e=n(lA,"CODE",{});var yxt=s(L6e);H2r=r(yxt,"model_type"),yxt.forEach(t),U2r=r(lA,` property of the config object (either
passed as an argument or loaded from `),y6e=n(lA,"CODE",{});var xxt=s(y6e);J2r=r(xxt,"pretrained_model_name_or_path"),xxt.forEach(t),Y2r=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=n(lA,"CODE",{});var $xt=s(x6e);K2r=r($xt,"pretrained_model_name_or_path"),$xt.forEach(t),Z2r=r(lA,":"),lA.forEach(t),e1r=i(La),Ud=n(La,"UL",{});var Hte=s(Ud);Z7=n(Hte,"LI",{});var Gqe=s(Z7);$6e=n(Gqe,"STRONG",{});var kxt=s($6e);o1r=r(kxt,"deit"),kxt.forEach(t),r1r=r(Gqe," \u2014 "),mU=n(Gqe,"A",{href:!0});var Sxt=s(mU);t1r=r(Sxt,"DeiTForMaskedImageModeling"),Sxt.forEach(t),a1r=r(Gqe," (DeiT model)"),Gqe.forEach(t),n1r=i(Hte),e8=n(Hte,"LI",{});var Oqe=s(e8);k6e=n(Oqe,"STRONG",{});var Rxt=s(k6e);s1r=r(Rxt,"swin"),Rxt.forEach(t),l1r=r(Oqe," \u2014 "),gU=n(Oqe,"A",{href:!0});var Pxt=s(gU);i1r=r(Pxt,"SwinForMaskedImageModeling"),Pxt.forEach(t),d1r=r(Oqe," (Swin Transformer model)"),Oqe.forEach(t),c1r=i(Hte),o8=n(Hte,"LI",{});var Vqe=s(o8);S6e=n(Vqe,"STRONG",{});var Bxt=s(S6e);f1r=r(Bxt,"vit"),Bxt.forEach(t),m1r=r(Vqe," \u2014 "),hU=n(Vqe,"A",{href:!0});var Ixt=s(hU);g1r=r(Ixt,"ViTForMaskedImageModeling"),Ixt.forEach(t),h1r=r(Vqe," (ViT model)"),Vqe.forEach(t),Hte.forEach(t),p1r=i(La),r8=n(La,"P",{});var Xqe=s(r8);_1r=r(Xqe,"The model is set in evaluation mode by default using "),R6e=n(Xqe,"CODE",{});var Nxt=s(R6e);u1r=r(Nxt,"model.eval()"),Nxt.forEach(t),b1r=r(Xqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P6e=n(Xqe,"CODE",{});var qxt=s(P6e);v1r=r(qxt,"model.train()"),qxt.forEach(t),Xqe.forEach(t),F1r=i(La),T(t8.$$.fragment,La),La.forEach(t),wl.forEach(t),eWe=i(f),Jd=n(f,"H2",{class:!0});var lHe=s(Jd);a8=n(lHe,"A",{id:!0,class:!0,href:!0});var jxt=s(a8);B6e=n(jxt,"SPAN",{});var Dxt=s(B6e);T(N9.$$.fragment,Dxt),Dxt.forEach(t),jxt.forEach(t),T1r=i(lHe),I6e=n(lHe,"SPAN",{});var Gxt=s(I6e);M1r=r(Gxt,"AutoModelForObjectDetection"),Gxt.forEach(t),lHe.forEach(t),oWe=i(f),Ko=n(f,"DIV",{class:!0});var Al=s(Ko);T(q9.$$.fragment,Al),E1r=i(Al),Yd=n(Al,"P",{});var Ute=s(Yd);C1r=r(Ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),pU=n(Ute,"A",{href:!0});var Oxt=s(pU);w1r=r(Oxt,"from_pretrained()"),Oxt.forEach(t),A1r=r(Ute," class method or the "),_U=n(Ute,"A",{href:!0});var Vxt=s(_U);L1r=r(Vxt,"from_config()"),Vxt.forEach(t),y1r=r(Ute,` class
method.`),Ute.forEach(t),x1r=i(Al),j9=n(Al,"P",{});var iHe=s(j9);$1r=r(iHe,"This class cannot be instantiated directly using "),N6e=n(iHe,"CODE",{});var Xxt=s(N6e);k1r=r(Xxt,"__init__()"),Xxt.forEach(t),S1r=r(iHe," (throws an error)."),iHe.forEach(t),R1r=i(Al),xt=n(Al,"DIV",{class:!0});var iA=s(xt);T(D9.$$.fragment,iA),P1r=i(iA),q6e=n(iA,"P",{});var zxt=s(q6e);B1r=r(zxt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),zxt.forEach(t),I1r=i(iA),Kd=n(iA,"P",{});var Jte=s(Kd);N1r=r(Jte,`Note:
Loading a model from its configuration file does `),j6e=n(Jte,"STRONG",{});var Wxt=s(j6e);q1r=r(Wxt,"not"),Wxt.forEach(t),j1r=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(Jte,"A",{href:!0});var Qxt=s(uU);D1r=r(Qxt,"from_pretrained()"),Qxt.forEach(t),G1r=r(Jte," to load the model weights."),Jte.forEach(t),O1r=i(iA),T(n8.$$.fragment,iA),iA.forEach(t),V1r=i(Al),bo=n(Al,"DIV",{class:!0});var ya=s(bo);T(G9.$$.fragment,ya),X1r=i(ya),D6e=n(ya,"P",{});var Hxt=s(D6e);z1r=r(Hxt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Hxt.forEach(t),W1r=i(ya),rn=n(ya,"P",{});var dA=s(rn);Q1r=r(dA,"The model class to instantiate is selected based on the "),G6e=n(dA,"CODE",{});var Uxt=s(G6e);H1r=r(Uxt,"model_type"),Uxt.forEach(t),U1r=r(dA,` property of the config object (either
passed as an argument or loaded from `),O6e=n(dA,"CODE",{});var Jxt=s(O6e);J1r=r(Jxt,"pretrained_model_name_or_path"),Jxt.forEach(t),Y1r=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V6e=n(dA,"CODE",{});var Yxt=s(V6e);K1r=r(Yxt,"pretrained_model_name_or_path"),Yxt.forEach(t),Z1r=r(dA,":"),dA.forEach(t),ebr=i(ya),O9=n(ya,"UL",{});var dHe=s(O9);s8=n(dHe,"LI",{});var zqe=s(s8);X6e=n(zqe,"STRONG",{});var Kxt=s(X6e);obr=r(Kxt,"detr"),Kxt.forEach(t),rbr=r(zqe," \u2014 "),bU=n(zqe,"A",{href:!0});var Zxt=s(bU);tbr=r(Zxt,"DetrForObjectDetection"),Zxt.forEach(t),abr=r(zqe," (DETR model)"),zqe.forEach(t),nbr=i(dHe),l8=n(dHe,"LI",{});var Wqe=s(l8);z6e=n(Wqe,"STRONG",{});var e$t=s(z6e);sbr=r(e$t,"yolos"),e$t.forEach(t),lbr=r(Wqe," \u2014 "),vU=n(Wqe,"A",{href:!0});var o$t=s(vU);ibr=r(o$t,"YolosForObjectDetection"),o$t.forEach(t),dbr=r(Wqe," (YOLOS model)"),Wqe.forEach(t),dHe.forEach(t),cbr=i(ya),i8=n(ya,"P",{});var Qqe=s(i8);fbr=r(Qqe,"The model is set in evaluation mode by default using "),W6e=n(Qqe,"CODE",{});var r$t=s(W6e);mbr=r(r$t,"model.eval()"),r$t.forEach(t),gbr=r(Qqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q6e=n(Qqe,"CODE",{});var t$t=s(Q6e);hbr=r(t$t,"model.train()"),t$t.forEach(t),Qqe.forEach(t),pbr=i(ya),T(d8.$$.fragment,ya),ya.forEach(t),Al.forEach(t),rWe=i(f),Zd=n(f,"H2",{class:!0});var cHe=s(Zd);c8=n(cHe,"A",{id:!0,class:!0,href:!0});var a$t=s(c8);H6e=n(a$t,"SPAN",{});var n$t=s(H6e);T(V9.$$.fragment,n$t),n$t.forEach(t),a$t.forEach(t),_br=i(cHe),U6e=n(cHe,"SPAN",{});var s$t=s(U6e);ubr=r(s$t,"AutoModelForImageSegmentation"),s$t.forEach(t),cHe.forEach(t),tWe=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(X9.$$.fragment,Ll),bbr=i(Ll),ec=n(Ll,"P",{});var Yte=s(ec);vbr=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),FU=n(Yte,"A",{href:!0});var l$t=s(FU);Fbr=r(l$t,"from_pretrained()"),l$t.forEach(t),Tbr=r(Yte," class method or the "),TU=n(Yte,"A",{href:!0});var i$t=s(TU);Mbr=r(i$t,"from_config()"),i$t.forEach(t),Ebr=r(Yte,` class
method.`),Yte.forEach(t),Cbr=i(Ll),z9=n(Ll,"P",{});var fHe=s(z9);wbr=r(fHe,"This class cannot be instantiated directly using "),J6e=n(fHe,"CODE",{});var d$t=s(J6e);Abr=r(d$t,"__init__()"),d$t.forEach(t),Lbr=r(fHe," (throws an error)."),fHe.forEach(t),ybr=i(Ll),$t=n(Ll,"DIV",{class:!0});var cA=s($t);T(W9.$$.fragment,cA),xbr=i(cA),Y6e=n(cA,"P",{});var c$t=s(Y6e);$br=r(c$t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),c$t.forEach(t),kbr=i(cA),oc=n(cA,"P",{});var Kte=s(oc);Sbr=r(Kte,`Note:
Loading a model from its configuration file does `),K6e=n(Kte,"STRONG",{});var f$t=s(K6e);Rbr=r(f$t,"not"),f$t.forEach(t),Pbr=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(Kte,"A",{href:!0});var m$t=s(MU);Bbr=r(m$t,"from_pretrained()"),m$t.forEach(t),Ibr=r(Kte," to load the model weights."),Kte.forEach(t),Nbr=i(cA),T(f8.$$.fragment,cA),cA.forEach(t),qbr=i(Ll),vo=n(Ll,"DIV",{class:!0});var xa=s(vo);T(Q9.$$.fragment,xa),jbr=i(xa),Z6e=n(xa,"P",{});var g$t=s(Z6e);Dbr=r(g$t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),g$t.forEach(t),Gbr=i(xa),tn=n(xa,"P",{});var fA=s(tn);Obr=r(fA,"The model class to instantiate is selected based on the "),eTe=n(fA,"CODE",{});var h$t=s(eTe);Vbr=r(h$t,"model_type"),h$t.forEach(t),Xbr=r(fA,` property of the config object (either
passed as an argument or loaded from `),oTe=n(fA,"CODE",{});var p$t=s(oTe);zbr=r(p$t,"pretrained_model_name_or_path"),p$t.forEach(t),Wbr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(fA,"CODE",{});var _$t=s(rTe);Qbr=r(_$t,"pretrained_model_name_or_path"),_$t.forEach(t),Hbr=r(fA,":"),fA.forEach(t),Ubr=i(xa),tTe=n(xa,"UL",{});var u$t=s(tTe);m8=n(u$t,"LI",{});var Hqe=s(m8);aTe=n(Hqe,"STRONG",{});var b$t=s(aTe);Jbr=r(b$t,"detr"),b$t.forEach(t),Ybr=r(Hqe," \u2014 "),EU=n(Hqe,"A",{href:!0});var v$t=s(EU);Kbr=r(v$t,"DetrForSegmentation"),v$t.forEach(t),Zbr=r(Hqe," (DETR model)"),Hqe.forEach(t),u$t.forEach(t),evr=i(xa),g8=n(xa,"P",{});var Uqe=s(g8);ovr=r(Uqe,"The model is set in evaluation mode by default using "),nTe=n(Uqe,"CODE",{});var F$t=s(nTe);rvr=r(F$t,"model.eval()"),F$t.forEach(t),tvr=r(Uqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sTe=n(Uqe,"CODE",{});var T$t=s(sTe);avr=r(T$t,"model.train()"),T$t.forEach(t),Uqe.forEach(t),nvr=i(xa),T(h8.$$.fragment,xa),xa.forEach(t),Ll.forEach(t),aWe=i(f),rc=n(f,"H2",{class:!0});var mHe=s(rc);p8=n(mHe,"A",{id:!0,class:!0,href:!0});var M$t=s(p8);lTe=n(M$t,"SPAN",{});var E$t=s(lTe);T(H9.$$.fragment,E$t),E$t.forEach(t),M$t.forEach(t),svr=i(mHe),iTe=n(mHe,"SPAN",{});var C$t=s(iTe);lvr=r(C$t,"AutoModelForSemanticSegmentation"),C$t.forEach(t),mHe.forEach(t),nWe=i(f),er=n(f,"DIV",{class:!0});var yl=s(er);T(U9.$$.fragment,yl),ivr=i(yl),tc=n(yl,"P",{});var Zte=s(tc);dvr=r(Zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CU=n(Zte,"A",{href:!0});var w$t=s(CU);cvr=r(w$t,"from_pretrained()"),w$t.forEach(t),fvr=r(Zte," class method or the "),wU=n(Zte,"A",{href:!0});var A$t=s(wU);mvr=r(A$t,"from_config()"),A$t.forEach(t),gvr=r(Zte,` class
method.`),Zte.forEach(t),hvr=i(yl),J9=n(yl,"P",{});var gHe=s(J9);pvr=r(gHe,"This class cannot be instantiated directly using "),dTe=n(gHe,"CODE",{});var L$t=s(dTe);_vr=r(L$t,"__init__()"),L$t.forEach(t),uvr=r(gHe," (throws an error)."),gHe.forEach(t),bvr=i(yl),kt=n(yl,"DIV",{class:!0});var mA=s(kt);T(Y9.$$.fragment,mA),vvr=i(mA),cTe=n(mA,"P",{});var y$t=s(cTe);Fvr=r(y$t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),y$t.forEach(t),Tvr=i(mA),ac=n(mA,"P",{});var eae=s(ac);Mvr=r(eae,`Note:
Loading a model from its configuration file does `),fTe=n(eae,"STRONG",{});var x$t=s(fTe);Evr=r(x$t,"not"),x$t.forEach(t),Cvr=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(eae,"A",{href:!0});var $$t=s(AU);wvr=r($$t,"from_pretrained()"),$$t.forEach(t),Avr=r(eae," to load the model weights."),eae.forEach(t),Lvr=i(mA),T(_8.$$.fragment,mA),mA.forEach(t),yvr=i(yl),Fo=n(yl,"DIV",{class:!0});var $a=s(Fo);T(K9.$$.fragment,$a),xvr=i($a),mTe=n($a,"P",{});var k$t=s(mTe);$vr=r(k$t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),k$t.forEach(t),kvr=i($a),an=n($a,"P",{});var gA=s(an);Svr=r(gA,"The model class to instantiate is selected based on the "),gTe=n(gA,"CODE",{});var S$t=s(gTe);Rvr=r(S$t,"model_type"),S$t.forEach(t),Pvr=r(gA,` property of the config object (either
passed as an argument or loaded from `),hTe=n(gA,"CODE",{});var R$t=s(hTe);Bvr=r(R$t,"pretrained_model_name_or_path"),R$t.forEach(t),Ivr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=n(gA,"CODE",{});var P$t=s(pTe);Nvr=r(P$t,"pretrained_model_name_or_path"),P$t.forEach(t),qvr=r(gA,":"),gA.forEach(t),jvr=i($a),at=n($a,"UL",{});var xl=s(at);u8=n(xl,"LI",{});var Jqe=s(u8);_Te=n(Jqe,"STRONG",{});var B$t=s(_Te);Dvr=r(B$t,"beit"),B$t.forEach(t),Gvr=r(Jqe," \u2014 "),LU=n(Jqe,"A",{href:!0});var I$t=s(LU);Ovr=r(I$t,"BeitForSemanticSegmentation"),I$t.forEach(t),Vvr=r(Jqe," (BEiT model)"),Jqe.forEach(t),Xvr=i(xl),b8=n(xl,"LI",{});var Yqe=s(b8);uTe=n(Yqe,"STRONG",{});var N$t=s(uTe);zvr=r(N$t,"data2vec-vision"),N$t.forEach(t),Wvr=r(Yqe," \u2014 "),yU=n(Yqe,"A",{href:!0});var q$t=s(yU);Qvr=r(q$t,"Data2VecVisionForSemanticSegmentation"),q$t.forEach(t),Hvr=r(Yqe," (Data2VecVision model)"),Yqe.forEach(t),Uvr=i(xl),v8=n(xl,"LI",{});var Kqe=s(v8);bTe=n(Kqe,"STRONG",{});var j$t=s(bTe);Jvr=r(j$t,"dpt"),j$t.forEach(t),Yvr=r(Kqe," \u2014 "),xU=n(Kqe,"A",{href:!0});var D$t=s(xU);Kvr=r(D$t,"DPTForSemanticSegmentation"),D$t.forEach(t),Zvr=r(Kqe," (DPT model)"),Kqe.forEach(t),eFr=i(xl),F8=n(xl,"LI",{});var Zqe=s(F8);vTe=n(Zqe,"STRONG",{});var G$t=s(vTe);oFr=r(G$t,"mobilevit"),G$t.forEach(t),rFr=r(Zqe," \u2014 "),$U=n(Zqe,"A",{href:!0});var O$t=s($U);tFr=r(O$t,"MobileViTForSemanticSegmentation"),O$t.forEach(t),aFr=r(Zqe," (MobileViT model)"),Zqe.forEach(t),nFr=i(xl),T8=n(xl,"LI",{});var eje=s(T8);FTe=n(eje,"STRONG",{});var V$t=s(FTe);sFr=r(V$t,"segformer"),V$t.forEach(t),lFr=r(eje," \u2014 "),kU=n(eje,"A",{href:!0});var X$t=s(kU);iFr=r(X$t,"SegformerForSemanticSegmentation"),X$t.forEach(t),dFr=r(eje," (SegFormer model)"),eje.forEach(t),xl.forEach(t),cFr=i($a),M8=n($a,"P",{});var oje=s(M8);fFr=r(oje,"The model is set in evaluation mode by default using "),TTe=n(oje,"CODE",{});var z$t=s(TTe);mFr=r(z$t,"model.eval()"),z$t.forEach(t),gFr=r(oje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MTe=n(oje,"CODE",{});var W$t=s(MTe);hFr=r(W$t,"model.train()"),W$t.forEach(t),oje.forEach(t),pFr=i($a),T(E8.$$.fragment,$a),$a.forEach(t),yl.forEach(t),sWe=i(f),nc=n(f,"H2",{class:!0});var hHe=s(nc);C8=n(hHe,"A",{id:!0,class:!0,href:!0});var Q$t=s(C8);ETe=n(Q$t,"SPAN",{});var H$t=s(ETe);T(Z9.$$.fragment,H$t),H$t.forEach(t),Q$t.forEach(t),_Fr=i(hHe),CTe=n(hHe,"SPAN",{});var U$t=s(CTe);uFr=r(U$t,"AutoModelForInstanceSegmentation"),U$t.forEach(t),hHe.forEach(t),lWe=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(ex.$$.fragment,$l),bFr=i($l),sc=n($l,"P",{});var oae=s(sc);vFr=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),SU=n(oae,"A",{href:!0});var J$t=s(SU);FFr=r(J$t,"from_pretrained()"),J$t.forEach(t),TFr=r(oae," class method or the "),RU=n(oae,"A",{href:!0});var Y$t=s(RU);MFr=r(Y$t,"from_config()"),Y$t.forEach(t),EFr=r(oae,` class
method.`),oae.forEach(t),CFr=i($l),ox=n($l,"P",{});var pHe=s(ox);wFr=r(pHe,"This class cannot be instantiated directly using "),wTe=n(pHe,"CODE",{});var K$t=s(wTe);AFr=r(K$t,"__init__()"),K$t.forEach(t),LFr=r(pHe," (throws an error)."),pHe.forEach(t),yFr=i($l),St=n($l,"DIV",{class:!0});var hA=s(St);T(rx.$$.fragment,hA),xFr=i(hA),ATe=n(hA,"P",{});var Z$t=s(ATe);$Fr=r(Z$t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Z$t.forEach(t),kFr=i(hA),lc=n(hA,"P",{});var rae=s(lc);SFr=r(rae,`Note:
Loading a model from its configuration file does `),LTe=n(rae,"STRONG",{});var ekt=s(LTe);RFr=r(ekt,"not"),ekt.forEach(t),PFr=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(rae,"A",{href:!0});var okt=s(PU);BFr=r(okt,"from_pretrained()"),okt.forEach(t),IFr=r(rae," to load the model weights."),rae.forEach(t),NFr=i(hA),T(w8.$$.fragment,hA),hA.forEach(t),qFr=i($l),To=n($l,"DIV",{class:!0});var ka=s(To);T(tx.$$.fragment,ka),jFr=i(ka),yTe=n(ka,"P",{});var rkt=s(yTe);DFr=r(rkt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rkt.forEach(t),GFr=i(ka),nn=n(ka,"P",{});var pA=s(nn);OFr=r(pA,"The model class to instantiate is selected based on the "),xTe=n(pA,"CODE",{});var tkt=s(xTe);VFr=r(tkt,"model_type"),tkt.forEach(t),XFr=r(pA,` property of the config object (either
passed as an argument or loaded from `),$Te=n(pA,"CODE",{});var akt=s($Te);zFr=r(akt,"pretrained_model_name_or_path"),akt.forEach(t),WFr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=n(pA,"CODE",{});var nkt=s(kTe);QFr=r(nkt,"pretrained_model_name_or_path"),nkt.forEach(t),HFr=r(pA,":"),pA.forEach(t),UFr=i(ka),STe=n(ka,"UL",{});var skt=s(STe);A8=n(skt,"LI",{});var rje=s(A8);RTe=n(rje,"STRONG",{});var lkt=s(RTe);JFr=r(lkt,"maskformer"),lkt.forEach(t),YFr=r(rje," \u2014 "),BU=n(rje,"A",{href:!0});var ikt=s(BU);KFr=r(ikt,"MaskFormerForInstanceSegmentation"),ikt.forEach(t),ZFr=r(rje," (MaskFormer model)"),rje.forEach(t),skt.forEach(t),e6r=i(ka),L8=n(ka,"P",{});var tje=s(L8);o6r=r(tje,"The model is set in evaluation mode by default using "),PTe=n(tje,"CODE",{});var dkt=s(PTe);r6r=r(dkt,"model.eval()"),dkt.forEach(t),t6r=r(tje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BTe=n(tje,"CODE",{});var ckt=s(BTe);a6r=r(ckt,"model.train()"),ckt.forEach(t),tje.forEach(t),n6r=i(ka),T(y8.$$.fragment,ka),ka.forEach(t),$l.forEach(t),iWe=i(f),ic=n(f,"H2",{class:!0});var _He=s(ic);x8=n(_He,"A",{id:!0,class:!0,href:!0});var fkt=s(x8);ITe=n(fkt,"SPAN",{});var mkt=s(ITe);T(ax.$$.fragment,mkt),mkt.forEach(t),fkt.forEach(t),s6r=i(_He),NTe=n(_He,"SPAN",{});var gkt=s(NTe);l6r=r(gkt,"TFAutoModel"),gkt.forEach(t),_He.forEach(t),dWe=i(f),rr=n(f,"DIV",{class:!0});var kl=s(rr);T(nx.$$.fragment,kl),i6r=i(kl),dc=n(kl,"P",{});var tae=s(dc);d6r=r(tae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IU=n(tae,"A",{href:!0});var hkt=s(IU);c6r=r(hkt,"from_pretrained()"),hkt.forEach(t),f6r=r(tae," class method or the "),NU=n(tae,"A",{href:!0});var pkt=s(NU);m6r=r(pkt,"from_config()"),pkt.forEach(t),g6r=r(tae,` class
method.`),tae.forEach(t),h6r=i(kl),sx=n(kl,"P",{});var uHe=s(sx);p6r=r(uHe,"This class cannot be instantiated directly using "),qTe=n(uHe,"CODE",{});var _kt=s(qTe);_6r=r(_kt,"__init__()"),_kt.forEach(t),u6r=r(uHe," (throws an error)."),uHe.forEach(t),b6r=i(kl),Rt=n(kl,"DIV",{class:!0});var _A=s(Rt);T(lx.$$.fragment,_A),v6r=i(_A),jTe=n(_A,"P",{});var ukt=s(jTe);F6r=r(ukt,"Instantiates one of the base model classes of the library from a configuration."),ukt.forEach(t),T6r=i(_A),cc=n(_A,"P",{});var aae=s(cc);M6r=r(aae,`Note:
Loading a model from its configuration file does `),DTe=n(aae,"STRONG",{});var bkt=s(DTe);E6r=r(bkt,"not"),bkt.forEach(t),C6r=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(aae,"A",{href:!0});var vkt=s(qU);w6r=r(vkt,"from_pretrained()"),vkt.forEach(t),A6r=r(aae," to load the model weights."),aae.forEach(t),L6r=i(_A),T($8.$$.fragment,_A),_A.forEach(t),y6r=i(kl),$r=n(kl,"DIV",{class:!0});var Sl=s($r);T(ix.$$.fragment,Sl),x6r=i(Sl),GTe=n(Sl,"P",{});var Fkt=s(GTe);$6r=r(Fkt,"Instantiate one of the base model classes of the library from a pretrained model."),Fkt.forEach(t),k6r=i(Sl),sn=n(Sl,"P",{});var uA=s(sn);S6r=r(uA,"The model class to instantiate is selected based on the "),OTe=n(uA,"CODE",{});var Tkt=s(OTe);R6r=r(Tkt,"model_type"),Tkt.forEach(t),P6r=r(uA,` property of the config object (either
passed as an argument or loaded from `),VTe=n(uA,"CODE",{});var Mkt=s(VTe);B6r=r(Mkt,"pretrained_model_name_or_path"),Mkt.forEach(t),I6r=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(uA,"CODE",{});var Ekt=s(XTe);N6r=r(Ekt,"pretrained_model_name_or_path"),Ekt.forEach(t),q6r=r(uA,":"),uA.forEach(t),j6r=i(Sl),I=n(Sl,"UL",{});var D=s(I);k8=n(D,"LI",{});var aje=s(k8);zTe=n(aje,"STRONG",{});var Ckt=s(zTe);D6r=r(Ckt,"albert"),Ckt.forEach(t),G6r=r(aje," \u2014 "),jU=n(aje,"A",{href:!0});var wkt=s(jU);O6r=r(wkt,"TFAlbertModel"),wkt.forEach(t),V6r=r(aje," (ALBERT model)"),aje.forEach(t),X6r=i(D),S8=n(D,"LI",{});var nje=s(S8);WTe=n(nje,"STRONG",{});var Akt=s(WTe);z6r=r(Akt,"bart"),Akt.forEach(t),W6r=r(nje," \u2014 "),DU=n(nje,"A",{href:!0});var Lkt=s(DU);Q6r=r(Lkt,"TFBartModel"),Lkt.forEach(t),H6r=r(nje," (BART model)"),nje.forEach(t),U6r=i(D),R8=n(D,"LI",{});var sje=s(R8);QTe=n(sje,"STRONG",{});var ykt=s(QTe);J6r=r(ykt,"bert"),ykt.forEach(t),Y6r=r(sje," \u2014 "),GU=n(sje,"A",{href:!0});var xkt=s(GU);K6r=r(xkt,"TFBertModel"),xkt.forEach(t),Z6r=r(sje," (BERT model)"),sje.forEach(t),eTr=i(D),P8=n(D,"LI",{});var lje=s(P8);HTe=n(lje,"STRONG",{});var $kt=s(HTe);oTr=r($kt,"blenderbot"),$kt.forEach(t),rTr=r(lje," \u2014 "),OU=n(lje,"A",{href:!0});var kkt=s(OU);tTr=r(kkt,"TFBlenderbotModel"),kkt.forEach(t),aTr=r(lje," (Blenderbot model)"),lje.forEach(t),nTr=i(D),B8=n(D,"LI",{});var ije=s(B8);UTe=n(ije,"STRONG",{});var Skt=s(UTe);sTr=r(Skt,"blenderbot-small"),Skt.forEach(t),lTr=r(ije," \u2014 "),VU=n(ije,"A",{href:!0});var Rkt=s(VU);iTr=r(Rkt,"TFBlenderbotSmallModel"),Rkt.forEach(t),dTr=r(ije," (BlenderbotSmall model)"),ije.forEach(t),cTr=i(D),I8=n(D,"LI",{});var dje=s(I8);JTe=n(dje,"STRONG",{});var Pkt=s(JTe);fTr=r(Pkt,"camembert"),Pkt.forEach(t),mTr=r(dje," \u2014 "),XU=n(dje,"A",{href:!0});var Bkt=s(XU);gTr=r(Bkt,"TFCamembertModel"),Bkt.forEach(t),hTr=r(dje," (CamemBERT model)"),dje.forEach(t),pTr=i(D),N8=n(D,"LI",{});var cje=s(N8);YTe=n(cje,"STRONG",{});var Ikt=s(YTe);_Tr=r(Ikt,"clip"),Ikt.forEach(t),uTr=r(cje," \u2014 "),zU=n(cje,"A",{href:!0});var Nkt=s(zU);bTr=r(Nkt,"TFCLIPModel"),Nkt.forEach(t),vTr=r(cje," (CLIP model)"),cje.forEach(t),FTr=i(D),q8=n(D,"LI",{});var fje=s(q8);KTe=n(fje,"STRONG",{});var qkt=s(KTe);TTr=r(qkt,"convbert"),qkt.forEach(t),MTr=r(fje," \u2014 "),WU=n(fje,"A",{href:!0});var jkt=s(WU);ETr=r(jkt,"TFConvBertModel"),jkt.forEach(t),CTr=r(fje," (ConvBERT model)"),fje.forEach(t),wTr=i(D),j8=n(D,"LI",{});var mje=s(j8);ZTe=n(mje,"STRONG",{});var Dkt=s(ZTe);ATr=r(Dkt,"convnext"),Dkt.forEach(t),LTr=r(mje," \u2014 "),QU=n(mje,"A",{href:!0});var Gkt=s(QU);yTr=r(Gkt,"TFConvNextModel"),Gkt.forEach(t),xTr=r(mje," (ConvNeXT model)"),mje.forEach(t),$Tr=i(D),D8=n(D,"LI",{});var gje=s(D8);e7e=n(gje,"STRONG",{});var Okt=s(e7e);kTr=r(Okt,"ctrl"),Okt.forEach(t),STr=r(gje," \u2014 "),HU=n(gje,"A",{href:!0});var Vkt=s(HU);RTr=r(Vkt,"TFCTRLModel"),Vkt.forEach(t),PTr=r(gje," (CTRL model)"),gje.forEach(t),BTr=i(D),G8=n(D,"LI",{});var hje=s(G8);o7e=n(hje,"STRONG",{});var Xkt=s(o7e);ITr=r(Xkt,"data2vec-vision"),Xkt.forEach(t),NTr=r(hje," \u2014 "),UU=n(hje,"A",{href:!0});var zkt=s(UU);qTr=r(zkt,"TFData2VecVisionModel"),zkt.forEach(t),jTr=r(hje," (Data2VecVision model)"),hje.forEach(t),DTr=i(D),O8=n(D,"LI",{});var pje=s(O8);r7e=n(pje,"STRONG",{});var Wkt=s(r7e);GTr=r(Wkt,"deberta"),Wkt.forEach(t),OTr=r(pje," \u2014 "),JU=n(pje,"A",{href:!0});var Qkt=s(JU);VTr=r(Qkt,"TFDebertaModel"),Qkt.forEach(t),XTr=r(pje," (DeBERTa model)"),pje.forEach(t),zTr=i(D),V8=n(D,"LI",{});var _je=s(V8);t7e=n(_je,"STRONG",{});var Hkt=s(t7e);WTr=r(Hkt,"deberta-v2"),Hkt.forEach(t),QTr=r(_je," \u2014 "),YU=n(_je,"A",{href:!0});var Ukt=s(YU);HTr=r(Ukt,"TFDebertaV2Model"),Ukt.forEach(t),UTr=r(_je," (DeBERTa-v2 model)"),_je.forEach(t),JTr=i(D),X8=n(D,"LI",{});var uje=s(X8);a7e=n(uje,"STRONG",{});var Jkt=s(a7e);YTr=r(Jkt,"deit"),Jkt.forEach(t),KTr=r(uje," \u2014 "),KU=n(uje,"A",{href:!0});var Ykt=s(KU);ZTr=r(Ykt,"TFDeiTModel"),Ykt.forEach(t),e7r=r(uje," (DeiT model)"),uje.forEach(t),o7r=i(D),z8=n(D,"LI",{});var bje=s(z8);n7e=n(bje,"STRONG",{});var Kkt=s(n7e);r7r=r(Kkt,"distilbert"),Kkt.forEach(t),t7r=r(bje," \u2014 "),ZU=n(bje,"A",{href:!0});var Zkt=s(ZU);a7r=r(Zkt,"TFDistilBertModel"),Zkt.forEach(t),n7r=r(bje," (DistilBERT model)"),bje.forEach(t),s7r=i(D),W8=n(D,"LI",{});var vje=s(W8);s7e=n(vje,"STRONG",{});var eSt=s(s7e);l7r=r(eSt,"dpr"),eSt.forEach(t),i7r=r(vje," \u2014 "),eJ=n(vje,"A",{href:!0});var oSt=s(eJ);d7r=r(oSt,"TFDPRQuestionEncoder"),oSt.forEach(t),c7r=r(vje," (DPR model)"),vje.forEach(t),f7r=i(D),Q8=n(D,"LI",{});var Fje=s(Q8);l7e=n(Fje,"STRONG",{});var rSt=s(l7e);m7r=r(rSt,"electra"),rSt.forEach(t),g7r=r(Fje," \u2014 "),oJ=n(Fje,"A",{href:!0});var tSt=s(oJ);h7r=r(tSt,"TFElectraModel"),tSt.forEach(t),p7r=r(Fje," (ELECTRA model)"),Fje.forEach(t),_7r=i(D),H8=n(D,"LI",{});var Tje=s(H8);i7e=n(Tje,"STRONG",{});var aSt=s(i7e);u7r=r(aSt,"flaubert"),aSt.forEach(t),b7r=r(Tje," \u2014 "),rJ=n(Tje,"A",{href:!0});var nSt=s(rJ);v7r=r(nSt,"TFFlaubertModel"),nSt.forEach(t),F7r=r(Tje," (FlauBERT model)"),Tje.forEach(t),T7r=i(D),Ks=n(D,"LI",{});var US=s(Ks);d7e=n(US,"STRONG",{});var sSt=s(d7e);M7r=r(sSt,"funnel"),sSt.forEach(t),E7r=r(US," \u2014 "),tJ=n(US,"A",{href:!0});var lSt=s(tJ);C7r=r(lSt,"TFFunnelModel"),lSt.forEach(t),w7r=r(US," or "),aJ=n(US,"A",{href:!0});var iSt=s(aJ);A7r=r(iSt,"TFFunnelBaseModel"),iSt.forEach(t),L7r=r(US," (Funnel Transformer model)"),US.forEach(t),y7r=i(D),U8=n(D,"LI",{});var Mje=s(U8);c7e=n(Mje,"STRONG",{});var dSt=s(c7e);x7r=r(dSt,"gpt2"),dSt.forEach(t),$7r=r(Mje," \u2014 "),nJ=n(Mje,"A",{href:!0});var cSt=s(nJ);k7r=r(cSt,"TFGPT2Model"),cSt.forEach(t),S7r=r(Mje," (OpenAI GPT-2 model)"),Mje.forEach(t),R7r=i(D),J8=n(D,"LI",{});var Eje=s(J8);f7e=n(Eje,"STRONG",{});var fSt=s(f7e);P7r=r(fSt,"gptj"),fSt.forEach(t),B7r=r(Eje," \u2014 "),sJ=n(Eje,"A",{href:!0});var mSt=s(sJ);I7r=r(mSt,"TFGPTJModel"),mSt.forEach(t),N7r=r(Eje," (GPT-J model)"),Eje.forEach(t),q7r=i(D),Y8=n(D,"LI",{});var Cje=s(Y8);m7e=n(Cje,"STRONG",{});var gSt=s(m7e);j7r=r(gSt,"hubert"),gSt.forEach(t),D7r=r(Cje," \u2014 "),lJ=n(Cje,"A",{href:!0});var hSt=s(lJ);G7r=r(hSt,"TFHubertModel"),hSt.forEach(t),O7r=r(Cje," (Hubert model)"),Cje.forEach(t),V7r=i(D),K8=n(D,"LI",{});var wje=s(K8);g7e=n(wje,"STRONG",{});var pSt=s(g7e);X7r=r(pSt,"layoutlm"),pSt.forEach(t),z7r=r(wje," \u2014 "),iJ=n(wje,"A",{href:!0});var _St=s(iJ);W7r=r(_St,"TFLayoutLMModel"),_St.forEach(t),Q7r=r(wje," (LayoutLM model)"),wje.forEach(t),H7r=i(D),Z8=n(D,"LI",{});var Aje=s(Z8);h7e=n(Aje,"STRONG",{});var uSt=s(h7e);U7r=r(uSt,"led"),uSt.forEach(t),J7r=r(Aje," \u2014 "),dJ=n(Aje,"A",{href:!0});var bSt=s(dJ);Y7r=r(bSt,"TFLEDModel"),bSt.forEach(t),K7r=r(Aje," (LED model)"),Aje.forEach(t),Z7r=i(D),eM=n(D,"LI",{});var Lje=s(eM);p7e=n(Lje,"STRONG",{});var vSt=s(p7e);e8r=r(vSt,"longformer"),vSt.forEach(t),o8r=r(Lje," \u2014 "),cJ=n(Lje,"A",{href:!0});var FSt=s(cJ);r8r=r(FSt,"TFLongformerModel"),FSt.forEach(t),t8r=r(Lje," (Longformer model)"),Lje.forEach(t),a8r=i(D),oM=n(D,"LI",{});var yje=s(oM);_7e=n(yje,"STRONG",{});var TSt=s(_7e);n8r=r(TSt,"lxmert"),TSt.forEach(t),s8r=r(yje," \u2014 "),fJ=n(yje,"A",{href:!0});var MSt=s(fJ);l8r=r(MSt,"TFLxmertModel"),MSt.forEach(t),i8r=r(yje," (LXMERT model)"),yje.forEach(t),d8r=i(D),rM=n(D,"LI",{});var xje=s(rM);u7e=n(xje,"STRONG",{});var ESt=s(u7e);c8r=r(ESt,"marian"),ESt.forEach(t),f8r=r(xje," \u2014 "),mJ=n(xje,"A",{href:!0});var CSt=s(mJ);m8r=r(CSt,"TFMarianModel"),CSt.forEach(t),g8r=r(xje," (Marian model)"),xje.forEach(t),h8r=i(D),tM=n(D,"LI",{});var $je=s(tM);b7e=n($je,"STRONG",{});var wSt=s(b7e);p8r=r(wSt,"mbart"),wSt.forEach(t),_8r=r($je," \u2014 "),gJ=n($je,"A",{href:!0});var ASt=s(gJ);u8r=r(ASt,"TFMBartModel"),ASt.forEach(t),b8r=r($je," (mBART model)"),$je.forEach(t),v8r=i(D),aM=n(D,"LI",{});var kje=s(aM);v7e=n(kje,"STRONG",{});var LSt=s(v7e);F8r=r(LSt,"mobilebert"),LSt.forEach(t),T8r=r(kje," \u2014 "),hJ=n(kje,"A",{href:!0});var ySt=s(hJ);M8r=r(ySt,"TFMobileBertModel"),ySt.forEach(t),E8r=r(kje," (MobileBERT model)"),kje.forEach(t),C8r=i(D),nM=n(D,"LI",{});var Sje=s(nM);F7e=n(Sje,"STRONG",{});var xSt=s(F7e);w8r=r(xSt,"mpnet"),xSt.forEach(t),A8r=r(Sje," \u2014 "),pJ=n(Sje,"A",{href:!0});var $St=s(pJ);L8r=r($St,"TFMPNetModel"),$St.forEach(t),y8r=r(Sje," (MPNet model)"),Sje.forEach(t),x8r=i(D),sM=n(D,"LI",{});var Rje=s(sM);T7e=n(Rje,"STRONG",{});var kSt=s(T7e);$8r=r(kSt,"mt5"),kSt.forEach(t),k8r=r(Rje," \u2014 "),_J=n(Rje,"A",{href:!0});var SSt=s(_J);S8r=r(SSt,"TFMT5Model"),SSt.forEach(t),R8r=r(Rje," (MT5 model)"),Rje.forEach(t),P8r=i(D),lM=n(D,"LI",{});var Pje=s(lM);M7e=n(Pje,"STRONG",{});var RSt=s(M7e);B8r=r(RSt,"openai-gpt"),RSt.forEach(t),I8r=r(Pje," \u2014 "),uJ=n(Pje,"A",{href:!0});var PSt=s(uJ);N8r=r(PSt,"TFOpenAIGPTModel"),PSt.forEach(t),q8r=r(Pje," (OpenAI GPT model)"),Pje.forEach(t),j8r=i(D),iM=n(D,"LI",{});var Bje=s(iM);E7e=n(Bje,"STRONG",{});var BSt=s(E7e);D8r=r(BSt,"opt"),BSt.forEach(t),G8r=r(Bje," \u2014 "),bJ=n(Bje,"A",{href:!0});var ISt=s(bJ);O8r=r(ISt,"TFOPTModel"),ISt.forEach(t),V8r=r(Bje," (OPT model)"),Bje.forEach(t),X8r=i(D),dM=n(D,"LI",{});var Ije=s(dM);C7e=n(Ije,"STRONG",{});var NSt=s(C7e);z8r=r(NSt,"pegasus"),NSt.forEach(t),W8r=r(Ije," \u2014 "),vJ=n(Ije,"A",{href:!0});var qSt=s(vJ);Q8r=r(qSt,"TFPegasusModel"),qSt.forEach(t),H8r=r(Ije," (Pegasus model)"),Ije.forEach(t),U8r=i(D),cM=n(D,"LI",{});var Nje=s(cM);w7e=n(Nje,"STRONG",{});var jSt=s(w7e);J8r=r(jSt,"regnet"),jSt.forEach(t),Y8r=r(Nje," \u2014 "),FJ=n(Nje,"A",{href:!0});var DSt=s(FJ);K8r=r(DSt,"TFRegNetModel"),DSt.forEach(t),Z8r=r(Nje," (RegNet model)"),Nje.forEach(t),eMr=i(D),fM=n(D,"LI",{});var qje=s(fM);A7e=n(qje,"STRONG",{});var GSt=s(A7e);oMr=r(GSt,"rembert"),GSt.forEach(t),rMr=r(qje," \u2014 "),TJ=n(qje,"A",{href:!0});var OSt=s(TJ);tMr=r(OSt,"TFRemBertModel"),OSt.forEach(t),aMr=r(qje," (RemBERT model)"),qje.forEach(t),nMr=i(D),mM=n(D,"LI",{});var jje=s(mM);L7e=n(jje,"STRONG",{});var VSt=s(L7e);sMr=r(VSt,"resnet"),VSt.forEach(t),lMr=r(jje," \u2014 "),MJ=n(jje,"A",{href:!0});var XSt=s(MJ);iMr=r(XSt,"TFResNetModel"),XSt.forEach(t),dMr=r(jje," (ResNet model)"),jje.forEach(t),cMr=i(D),gM=n(D,"LI",{});var Dje=s(gM);y7e=n(Dje,"STRONG",{});var zSt=s(y7e);fMr=r(zSt,"roberta"),zSt.forEach(t),mMr=r(Dje," \u2014 "),EJ=n(Dje,"A",{href:!0});var WSt=s(EJ);gMr=r(WSt,"TFRobertaModel"),WSt.forEach(t),hMr=r(Dje," (RoBERTa model)"),Dje.forEach(t),pMr=i(D),hM=n(D,"LI",{});var Gje=s(hM);x7e=n(Gje,"STRONG",{});var QSt=s(x7e);_Mr=r(QSt,"roformer"),QSt.forEach(t),uMr=r(Gje," \u2014 "),CJ=n(Gje,"A",{href:!0});var HSt=s(CJ);bMr=r(HSt,"TFRoFormerModel"),HSt.forEach(t),vMr=r(Gje," (RoFormer model)"),Gje.forEach(t),FMr=i(D),pM=n(D,"LI",{});var Oje=s(pM);$7e=n(Oje,"STRONG",{});var USt=s($7e);TMr=r(USt,"segformer"),USt.forEach(t),MMr=r(Oje," \u2014 "),wJ=n(Oje,"A",{href:!0});var JSt=s(wJ);EMr=r(JSt,"TFSegformerModel"),JSt.forEach(t),CMr=r(Oje," (SegFormer model)"),Oje.forEach(t),wMr=i(D),_M=n(D,"LI",{});var Vje=s(_M);k7e=n(Vje,"STRONG",{});var YSt=s(k7e);AMr=r(YSt,"speech_to_text"),YSt.forEach(t),LMr=r(Vje," \u2014 "),AJ=n(Vje,"A",{href:!0});var KSt=s(AJ);yMr=r(KSt,"TFSpeech2TextModel"),KSt.forEach(t),xMr=r(Vje," (Speech2Text model)"),Vje.forEach(t),$Mr=i(D),uM=n(D,"LI",{});var Xje=s(uM);S7e=n(Xje,"STRONG",{});var ZSt=s(S7e);kMr=r(ZSt,"swin"),ZSt.forEach(t),SMr=r(Xje," \u2014 "),LJ=n(Xje,"A",{href:!0});var eRt=s(LJ);RMr=r(eRt,"TFSwinModel"),eRt.forEach(t),PMr=r(Xje," (Swin Transformer model)"),Xje.forEach(t),BMr=i(D),bM=n(D,"LI",{});var zje=s(bM);R7e=n(zje,"STRONG",{});var oRt=s(R7e);IMr=r(oRt,"t5"),oRt.forEach(t),NMr=r(zje," \u2014 "),yJ=n(zje,"A",{href:!0});var rRt=s(yJ);qMr=r(rRt,"TFT5Model"),rRt.forEach(t),jMr=r(zje," (T5 model)"),zje.forEach(t),DMr=i(D),vM=n(D,"LI",{});var Wje=s(vM);P7e=n(Wje,"STRONG",{});var tRt=s(P7e);GMr=r(tRt,"tapas"),tRt.forEach(t),OMr=r(Wje," \u2014 "),xJ=n(Wje,"A",{href:!0});var aRt=s(xJ);VMr=r(aRt,"TFTapasModel"),aRt.forEach(t),XMr=r(Wje," (TAPAS model)"),Wje.forEach(t),zMr=i(D),FM=n(D,"LI",{});var Qje=s(FM);B7e=n(Qje,"STRONG",{});var nRt=s(B7e);WMr=r(nRt,"transfo-xl"),nRt.forEach(t),QMr=r(Qje," \u2014 "),$J=n(Qje,"A",{href:!0});var sRt=s($J);HMr=r(sRt,"TFTransfoXLModel"),sRt.forEach(t),UMr=r(Qje," (Transformer-XL model)"),Qje.forEach(t),JMr=i(D),TM=n(D,"LI",{});var Hje=s(TM);I7e=n(Hje,"STRONG",{});var lRt=s(I7e);YMr=r(lRt,"vit"),lRt.forEach(t),KMr=r(Hje," \u2014 "),kJ=n(Hje,"A",{href:!0});var iRt=s(kJ);ZMr=r(iRt,"TFViTModel"),iRt.forEach(t),e4r=r(Hje," (ViT model)"),Hje.forEach(t),o4r=i(D),MM=n(D,"LI",{});var Uje=s(MM);N7e=n(Uje,"STRONG",{});var dRt=s(N7e);r4r=r(dRt,"vit_mae"),dRt.forEach(t),t4r=r(Uje," \u2014 "),SJ=n(Uje,"A",{href:!0});var cRt=s(SJ);a4r=r(cRt,"TFViTMAEModel"),cRt.forEach(t),n4r=r(Uje," (ViTMAE model)"),Uje.forEach(t),s4r=i(D),EM=n(D,"LI",{});var Jje=s(EM);q7e=n(Jje,"STRONG",{});var fRt=s(q7e);l4r=r(fRt,"wav2vec2"),fRt.forEach(t),i4r=r(Jje," \u2014 "),RJ=n(Jje,"A",{href:!0});var mRt=s(RJ);d4r=r(mRt,"TFWav2Vec2Model"),mRt.forEach(t),c4r=r(Jje," (Wav2Vec2 model)"),Jje.forEach(t),f4r=i(D),CM=n(D,"LI",{});var Yje=s(CM);j7e=n(Yje,"STRONG",{});var gRt=s(j7e);m4r=r(gRt,"xlm"),gRt.forEach(t),g4r=r(Yje," \u2014 "),PJ=n(Yje,"A",{href:!0});var hRt=s(PJ);h4r=r(hRt,"TFXLMModel"),hRt.forEach(t),p4r=r(Yje," (XLM model)"),Yje.forEach(t),_4r=i(D),wM=n(D,"LI",{});var Kje=s(wM);D7e=n(Kje,"STRONG",{});var pRt=s(D7e);u4r=r(pRt,"xlm-roberta"),pRt.forEach(t),b4r=r(Kje," \u2014 "),BJ=n(Kje,"A",{href:!0});var _Rt=s(BJ);v4r=r(_Rt,"TFXLMRobertaModel"),_Rt.forEach(t),F4r=r(Kje," (XLM-RoBERTa model)"),Kje.forEach(t),T4r=i(D),AM=n(D,"LI",{});var Zje=s(AM);G7e=n(Zje,"STRONG",{});var uRt=s(G7e);M4r=r(uRt,"xlnet"),uRt.forEach(t),E4r=r(Zje," \u2014 "),IJ=n(Zje,"A",{href:!0});var bRt=s(IJ);C4r=r(bRt,"TFXLNetModel"),bRt.forEach(t),w4r=r(Zje," (XLNet model)"),Zje.forEach(t),D.forEach(t),A4r=i(Sl),T(LM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),cWe=i(f),fc=n(f,"H2",{class:!0});var bHe=s(fc);yM=n(bHe,"A",{id:!0,class:!0,href:!0});var vRt=s(yM);O7e=n(vRt,"SPAN",{});var FRt=s(O7e);T(dx.$$.fragment,FRt),FRt.forEach(t),vRt.forEach(t),L4r=i(bHe),V7e=n(bHe,"SPAN",{});var TRt=s(V7e);y4r=r(TRt,"TFAutoModelForPreTraining"),TRt.forEach(t),bHe.forEach(t),fWe=i(f),tr=n(f,"DIV",{class:!0});var Rl=s(tr);T(cx.$$.fragment,Rl),x4r=i(Rl),mc=n(Rl,"P",{});var nae=s(mc);$4r=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NJ=n(nae,"A",{href:!0});var MRt=s(NJ);k4r=r(MRt,"from_pretrained()"),MRt.forEach(t),S4r=r(nae," class method or the "),qJ=n(nae,"A",{href:!0});var ERt=s(qJ);R4r=r(ERt,"from_config()"),ERt.forEach(t),P4r=r(nae,` class
method.`),nae.forEach(t),B4r=i(Rl),fx=n(Rl,"P",{});var vHe=s(fx);I4r=r(vHe,"This class cannot be instantiated directly using "),X7e=n(vHe,"CODE",{});var CRt=s(X7e);N4r=r(CRt,"__init__()"),CRt.forEach(t),q4r=r(vHe," (throws an error)."),vHe.forEach(t),j4r=i(Rl),Pt=n(Rl,"DIV",{class:!0});var bA=s(Pt);T(mx.$$.fragment,bA),D4r=i(bA),z7e=n(bA,"P",{});var wRt=s(z7e);G4r=r(wRt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wRt.forEach(t),O4r=i(bA),gc=n(bA,"P",{});var sae=s(gc);V4r=r(sae,`Note:
Loading a model from its configuration file does `),W7e=n(sae,"STRONG",{});var ARt=s(W7e);X4r=r(ARt,"not"),ARt.forEach(t),z4r=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(sae,"A",{href:!0});var LRt=s(jJ);W4r=r(LRt,"from_pretrained()"),LRt.forEach(t),Q4r=r(sae," to load the model weights."),sae.forEach(t),H4r=i(bA),T(xM.$$.fragment,bA),bA.forEach(t),U4r=i(Rl),kr=n(Rl,"DIV",{class:!0});var Pl=s(kr);T(gx.$$.fragment,Pl),J4r=i(Pl),Q7e=n(Pl,"P",{});var yRt=s(Q7e);Y4r=r(yRt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),yRt.forEach(t),K4r=i(Pl),ln=n(Pl,"P",{});var vA=s(ln);Z4r=r(vA,"The model class to instantiate is selected based on the "),H7e=n(vA,"CODE",{});var xRt=s(H7e);eEr=r(xRt,"model_type"),xRt.forEach(t),oEr=r(vA,` property of the config object (either
passed as an argument or loaded from `),U7e=n(vA,"CODE",{});var $Rt=s(U7e);rEr=r($Rt,"pretrained_model_name_or_path"),$Rt.forEach(t),tEr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=n(vA,"CODE",{});var kRt=s(J7e);aEr=r(kRt,"pretrained_model_name_or_path"),kRt.forEach(t),nEr=r(vA,":"),vA.forEach(t),sEr=i(Pl),se=n(Pl,"UL",{});var le=s(se);$M=n(le,"LI",{});var eDe=s($M);Y7e=n(eDe,"STRONG",{});var SRt=s(Y7e);lEr=r(SRt,"albert"),SRt.forEach(t),iEr=r(eDe," \u2014 "),DJ=n(eDe,"A",{href:!0});var RRt=s(DJ);dEr=r(RRt,"TFAlbertForPreTraining"),RRt.forEach(t),cEr=r(eDe," (ALBERT model)"),eDe.forEach(t),fEr=i(le),kM=n(le,"LI",{});var oDe=s(kM);K7e=n(oDe,"STRONG",{});var PRt=s(K7e);mEr=r(PRt,"bart"),PRt.forEach(t),gEr=r(oDe," \u2014 "),GJ=n(oDe,"A",{href:!0});var BRt=s(GJ);hEr=r(BRt,"TFBartForConditionalGeneration"),BRt.forEach(t),pEr=r(oDe," (BART model)"),oDe.forEach(t),_Er=i(le),SM=n(le,"LI",{});var rDe=s(SM);Z7e=n(rDe,"STRONG",{});var IRt=s(Z7e);uEr=r(IRt,"bert"),IRt.forEach(t),bEr=r(rDe," \u2014 "),OJ=n(rDe,"A",{href:!0});var NRt=s(OJ);vEr=r(NRt,"TFBertForPreTraining"),NRt.forEach(t),FEr=r(rDe," (BERT model)"),rDe.forEach(t),TEr=i(le),RM=n(le,"LI",{});var tDe=s(RM);e8e=n(tDe,"STRONG",{});var qRt=s(e8e);MEr=r(qRt,"camembert"),qRt.forEach(t),EEr=r(tDe," \u2014 "),VJ=n(tDe,"A",{href:!0});var jRt=s(VJ);CEr=r(jRt,"TFCamembertForMaskedLM"),jRt.forEach(t),wEr=r(tDe," (CamemBERT model)"),tDe.forEach(t),AEr=i(le),PM=n(le,"LI",{});var aDe=s(PM);o8e=n(aDe,"STRONG",{});var DRt=s(o8e);LEr=r(DRt,"ctrl"),DRt.forEach(t),yEr=r(aDe," \u2014 "),XJ=n(aDe,"A",{href:!0});var GRt=s(XJ);xEr=r(GRt,"TFCTRLLMHeadModel"),GRt.forEach(t),$Er=r(aDe," (CTRL model)"),aDe.forEach(t),kEr=i(le),BM=n(le,"LI",{});var nDe=s(BM);r8e=n(nDe,"STRONG",{});var ORt=s(r8e);SEr=r(ORt,"distilbert"),ORt.forEach(t),REr=r(nDe," \u2014 "),zJ=n(nDe,"A",{href:!0});var VRt=s(zJ);PEr=r(VRt,"TFDistilBertForMaskedLM"),VRt.forEach(t),BEr=r(nDe," (DistilBERT model)"),nDe.forEach(t),IEr=i(le),IM=n(le,"LI",{});var sDe=s(IM);t8e=n(sDe,"STRONG",{});var XRt=s(t8e);NEr=r(XRt,"electra"),XRt.forEach(t),qEr=r(sDe," \u2014 "),WJ=n(sDe,"A",{href:!0});var zRt=s(WJ);jEr=r(zRt,"TFElectraForPreTraining"),zRt.forEach(t),DEr=r(sDe," (ELECTRA model)"),sDe.forEach(t),GEr=i(le),NM=n(le,"LI",{});var lDe=s(NM);a8e=n(lDe,"STRONG",{});var WRt=s(a8e);OEr=r(WRt,"flaubert"),WRt.forEach(t),VEr=r(lDe," \u2014 "),QJ=n(lDe,"A",{href:!0});var QRt=s(QJ);XEr=r(QRt,"TFFlaubertWithLMHeadModel"),QRt.forEach(t),zEr=r(lDe," (FlauBERT model)"),lDe.forEach(t),WEr=i(le),qM=n(le,"LI",{});var iDe=s(qM);n8e=n(iDe,"STRONG",{});var HRt=s(n8e);QEr=r(HRt,"funnel"),HRt.forEach(t),HEr=r(iDe," \u2014 "),HJ=n(iDe,"A",{href:!0});var URt=s(HJ);UEr=r(URt,"TFFunnelForPreTraining"),URt.forEach(t),JEr=r(iDe," (Funnel Transformer model)"),iDe.forEach(t),YEr=i(le),jM=n(le,"LI",{});var dDe=s(jM);s8e=n(dDe,"STRONG",{});var JRt=s(s8e);KEr=r(JRt,"gpt2"),JRt.forEach(t),ZEr=r(dDe," \u2014 "),UJ=n(dDe,"A",{href:!0});var YRt=s(UJ);eCr=r(YRt,"TFGPT2LMHeadModel"),YRt.forEach(t),oCr=r(dDe," (OpenAI GPT-2 model)"),dDe.forEach(t),rCr=i(le),DM=n(le,"LI",{});var cDe=s(DM);l8e=n(cDe,"STRONG",{});var KRt=s(l8e);tCr=r(KRt,"layoutlm"),KRt.forEach(t),aCr=r(cDe," \u2014 "),JJ=n(cDe,"A",{href:!0});var ZRt=s(JJ);nCr=r(ZRt,"TFLayoutLMForMaskedLM"),ZRt.forEach(t),sCr=r(cDe," (LayoutLM model)"),cDe.forEach(t),lCr=i(le),GM=n(le,"LI",{});var fDe=s(GM);i8e=n(fDe,"STRONG",{});var ePt=s(i8e);iCr=r(ePt,"lxmert"),ePt.forEach(t),dCr=r(fDe," \u2014 "),YJ=n(fDe,"A",{href:!0});var oPt=s(YJ);cCr=r(oPt,"TFLxmertForPreTraining"),oPt.forEach(t),fCr=r(fDe," (LXMERT model)"),fDe.forEach(t),mCr=i(le),OM=n(le,"LI",{});var mDe=s(OM);d8e=n(mDe,"STRONG",{});var rPt=s(d8e);gCr=r(rPt,"mobilebert"),rPt.forEach(t),hCr=r(mDe," \u2014 "),KJ=n(mDe,"A",{href:!0});var tPt=s(KJ);pCr=r(tPt,"TFMobileBertForPreTraining"),tPt.forEach(t),_Cr=r(mDe," (MobileBERT model)"),mDe.forEach(t),uCr=i(le),VM=n(le,"LI",{});var gDe=s(VM);c8e=n(gDe,"STRONG",{});var aPt=s(c8e);bCr=r(aPt,"mpnet"),aPt.forEach(t),vCr=r(gDe," \u2014 "),ZJ=n(gDe,"A",{href:!0});var nPt=s(ZJ);FCr=r(nPt,"TFMPNetForMaskedLM"),nPt.forEach(t),TCr=r(gDe," (MPNet model)"),gDe.forEach(t),MCr=i(le),XM=n(le,"LI",{});var hDe=s(XM);f8e=n(hDe,"STRONG",{});var sPt=s(f8e);ECr=r(sPt,"openai-gpt"),sPt.forEach(t),CCr=r(hDe," \u2014 "),eY=n(hDe,"A",{href:!0});var lPt=s(eY);wCr=r(lPt,"TFOpenAIGPTLMHeadModel"),lPt.forEach(t),ACr=r(hDe," (OpenAI GPT model)"),hDe.forEach(t),LCr=i(le),zM=n(le,"LI",{});var pDe=s(zM);m8e=n(pDe,"STRONG",{});var iPt=s(m8e);yCr=r(iPt,"roberta"),iPt.forEach(t),xCr=r(pDe," \u2014 "),oY=n(pDe,"A",{href:!0});var dPt=s(oY);$Cr=r(dPt,"TFRobertaForMaskedLM"),dPt.forEach(t),kCr=r(pDe," (RoBERTa model)"),pDe.forEach(t),SCr=i(le),WM=n(le,"LI",{});var _De=s(WM);g8e=n(_De,"STRONG",{});var cPt=s(g8e);RCr=r(cPt,"t5"),cPt.forEach(t),PCr=r(_De," \u2014 "),rY=n(_De,"A",{href:!0});var fPt=s(rY);BCr=r(fPt,"TFT5ForConditionalGeneration"),fPt.forEach(t),ICr=r(_De," (T5 model)"),_De.forEach(t),NCr=i(le),QM=n(le,"LI",{});var uDe=s(QM);h8e=n(uDe,"STRONG",{});var mPt=s(h8e);qCr=r(mPt,"tapas"),mPt.forEach(t),jCr=r(uDe," \u2014 "),tY=n(uDe,"A",{href:!0});var gPt=s(tY);DCr=r(gPt,"TFTapasForMaskedLM"),gPt.forEach(t),GCr=r(uDe," (TAPAS model)"),uDe.forEach(t),OCr=i(le),HM=n(le,"LI",{});var bDe=s(HM);p8e=n(bDe,"STRONG",{});var hPt=s(p8e);VCr=r(hPt,"transfo-xl"),hPt.forEach(t),XCr=r(bDe," \u2014 "),aY=n(bDe,"A",{href:!0});var pPt=s(aY);zCr=r(pPt,"TFTransfoXLLMHeadModel"),pPt.forEach(t),WCr=r(bDe," (Transformer-XL model)"),bDe.forEach(t),QCr=i(le),UM=n(le,"LI",{});var vDe=s(UM);_8e=n(vDe,"STRONG",{});var _Pt=s(_8e);HCr=r(_Pt,"vit_mae"),_Pt.forEach(t),UCr=r(vDe," \u2014 "),nY=n(vDe,"A",{href:!0});var uPt=s(nY);JCr=r(uPt,"TFViTMAEForPreTraining"),uPt.forEach(t),YCr=r(vDe," (ViTMAE model)"),vDe.forEach(t),KCr=i(le),JM=n(le,"LI",{});var FDe=s(JM);u8e=n(FDe,"STRONG",{});var bPt=s(u8e);ZCr=r(bPt,"xlm"),bPt.forEach(t),e5r=r(FDe," \u2014 "),sY=n(FDe,"A",{href:!0});var vPt=s(sY);o5r=r(vPt,"TFXLMWithLMHeadModel"),vPt.forEach(t),r5r=r(FDe," (XLM model)"),FDe.forEach(t),t5r=i(le),YM=n(le,"LI",{});var TDe=s(YM);b8e=n(TDe,"STRONG",{});var FPt=s(b8e);a5r=r(FPt,"xlm-roberta"),FPt.forEach(t),n5r=r(TDe," \u2014 "),lY=n(TDe,"A",{href:!0});var TPt=s(lY);s5r=r(TPt,"TFXLMRobertaForMaskedLM"),TPt.forEach(t),l5r=r(TDe," (XLM-RoBERTa model)"),TDe.forEach(t),i5r=i(le),KM=n(le,"LI",{});var MDe=s(KM);v8e=n(MDe,"STRONG",{});var MPt=s(v8e);d5r=r(MPt,"xlnet"),MPt.forEach(t),c5r=r(MDe," \u2014 "),iY=n(MDe,"A",{href:!0});var EPt=s(iY);f5r=r(EPt,"TFXLNetLMHeadModel"),EPt.forEach(t),m5r=r(MDe," (XLNet model)"),MDe.forEach(t),le.forEach(t),g5r=i(Pl),T(ZM.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),mWe=i(f),hc=n(f,"H2",{class:!0});var FHe=s(hc);e4=n(FHe,"A",{id:!0,class:!0,href:!0});var CPt=s(e4);F8e=n(CPt,"SPAN",{});var wPt=s(F8e);T(hx.$$.fragment,wPt),wPt.forEach(t),CPt.forEach(t),h5r=i(FHe),T8e=n(FHe,"SPAN",{});var APt=s(T8e);p5r=r(APt,"TFAutoModelForCausalLM"),APt.forEach(t),FHe.forEach(t),gWe=i(f),ar=n(f,"DIV",{class:!0});var Bl=s(ar);T(px.$$.fragment,Bl),_5r=i(Bl),pc=n(Bl,"P",{});var lae=s(pc);u5r=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dY=n(lae,"A",{href:!0});var LPt=s(dY);b5r=r(LPt,"from_pretrained()"),LPt.forEach(t),v5r=r(lae," class method or the "),cY=n(lae,"A",{href:!0});var yPt=s(cY);F5r=r(yPt,"from_config()"),yPt.forEach(t),T5r=r(lae,` class
method.`),lae.forEach(t),M5r=i(Bl),_x=n(Bl,"P",{});var THe=s(_x);E5r=r(THe,"This class cannot be instantiated directly using "),M8e=n(THe,"CODE",{});var xPt=s(M8e);C5r=r(xPt,"__init__()"),xPt.forEach(t),w5r=r(THe," (throws an error)."),THe.forEach(t),A5r=i(Bl),Bt=n(Bl,"DIV",{class:!0});var FA=s(Bt);T(ux.$$.fragment,FA),L5r=i(FA),E8e=n(FA,"P",{});var $Pt=s(E8e);y5r=r($Pt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Pt.forEach(t),x5r=i(FA),_c=n(FA,"P",{});var iae=s(_c);$5r=r(iae,`Note:
Loading a model from its configuration file does `),C8e=n(iae,"STRONG",{});var kPt=s(C8e);k5r=r(kPt,"not"),kPt.forEach(t),S5r=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(iae,"A",{href:!0});var SPt=s(fY);R5r=r(SPt,"from_pretrained()"),SPt.forEach(t),P5r=r(iae," to load the model weights."),iae.forEach(t),B5r=i(FA),T(o4.$$.fragment,FA),FA.forEach(t),I5r=i(Bl),Sr=n(Bl,"DIV",{class:!0});var Il=s(Sr);T(bx.$$.fragment,Il),N5r=i(Il),w8e=n(Il,"P",{});var RPt=s(w8e);q5r=r(RPt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),RPt.forEach(t),j5r=i(Il),dn=n(Il,"P",{});var TA=s(dn);D5r=r(TA,"The model class to instantiate is selected based on the "),A8e=n(TA,"CODE",{});var PPt=s(A8e);G5r=r(PPt,"model_type"),PPt.forEach(t),O5r=r(TA,` property of the config object (either
passed as an argument or loaded from `),L8e=n(TA,"CODE",{});var BPt=s(L8e);V5r=r(BPt,"pretrained_model_name_or_path"),BPt.forEach(t),X5r=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y8e=n(TA,"CODE",{});var IPt=s(y8e);z5r=r(IPt,"pretrained_model_name_or_path"),IPt.forEach(t),W5r=r(TA,":"),TA.forEach(t),Q5r=i(Il),Me=n(Il,"UL",{});var Ce=s(Me);r4=n(Ce,"LI",{});var EDe=s(r4);x8e=n(EDe,"STRONG",{});var NPt=s(x8e);H5r=r(NPt,"bert"),NPt.forEach(t),U5r=r(EDe," \u2014 "),mY=n(EDe,"A",{href:!0});var qPt=s(mY);J5r=r(qPt,"TFBertLMHeadModel"),qPt.forEach(t),Y5r=r(EDe," (BERT model)"),EDe.forEach(t),K5r=i(Ce),t4=n(Ce,"LI",{});var CDe=s(t4);$8e=n(CDe,"STRONG",{});var jPt=s($8e);Z5r=r(jPt,"camembert"),jPt.forEach(t),e3r=r(CDe," \u2014 "),gY=n(CDe,"A",{href:!0});var DPt=s(gY);o3r=r(DPt,"TFCamembertForCausalLM"),DPt.forEach(t),r3r=r(CDe," (CamemBERT model)"),CDe.forEach(t),t3r=i(Ce),a4=n(Ce,"LI",{});var wDe=s(a4);k8e=n(wDe,"STRONG",{});var GPt=s(k8e);a3r=r(GPt,"ctrl"),GPt.forEach(t),n3r=r(wDe," \u2014 "),hY=n(wDe,"A",{href:!0});var OPt=s(hY);s3r=r(OPt,"TFCTRLLMHeadModel"),OPt.forEach(t),l3r=r(wDe," (CTRL model)"),wDe.forEach(t),i3r=i(Ce),n4=n(Ce,"LI",{});var ADe=s(n4);S8e=n(ADe,"STRONG",{});var VPt=s(S8e);d3r=r(VPt,"gpt2"),VPt.forEach(t),c3r=r(ADe," \u2014 "),pY=n(ADe,"A",{href:!0});var XPt=s(pY);f3r=r(XPt,"TFGPT2LMHeadModel"),XPt.forEach(t),m3r=r(ADe," (OpenAI GPT-2 model)"),ADe.forEach(t),g3r=i(Ce),s4=n(Ce,"LI",{});var LDe=s(s4);R8e=n(LDe,"STRONG",{});var zPt=s(R8e);h3r=r(zPt,"gptj"),zPt.forEach(t),p3r=r(LDe," \u2014 "),_Y=n(LDe,"A",{href:!0});var WPt=s(_Y);_3r=r(WPt,"TFGPTJForCausalLM"),WPt.forEach(t),u3r=r(LDe," (GPT-J model)"),LDe.forEach(t),b3r=i(Ce),l4=n(Ce,"LI",{});var yDe=s(l4);P8e=n(yDe,"STRONG",{});var QPt=s(P8e);v3r=r(QPt,"openai-gpt"),QPt.forEach(t),F3r=r(yDe," \u2014 "),uY=n(yDe,"A",{href:!0});var HPt=s(uY);T3r=r(HPt,"TFOpenAIGPTLMHeadModel"),HPt.forEach(t),M3r=r(yDe," (OpenAI GPT model)"),yDe.forEach(t),E3r=i(Ce),i4=n(Ce,"LI",{});var xDe=s(i4);B8e=n(xDe,"STRONG",{});var UPt=s(B8e);C3r=r(UPt,"opt"),UPt.forEach(t),w3r=r(xDe," \u2014 "),bY=n(xDe,"A",{href:!0});var JPt=s(bY);A3r=r(JPt,"TFOPTForCausalLM"),JPt.forEach(t),L3r=r(xDe," (OPT model)"),xDe.forEach(t),y3r=i(Ce),d4=n(Ce,"LI",{});var $De=s(d4);I8e=n($De,"STRONG",{});var YPt=s(I8e);x3r=r(YPt,"rembert"),YPt.forEach(t),$3r=r($De," \u2014 "),vY=n($De,"A",{href:!0});var KPt=s(vY);k3r=r(KPt,"TFRemBertForCausalLM"),KPt.forEach(t),S3r=r($De," (RemBERT model)"),$De.forEach(t),R3r=i(Ce),c4=n(Ce,"LI",{});var kDe=s(c4);N8e=n(kDe,"STRONG",{});var ZPt=s(N8e);P3r=r(ZPt,"roberta"),ZPt.forEach(t),B3r=r(kDe," \u2014 "),FY=n(kDe,"A",{href:!0});var eBt=s(FY);I3r=r(eBt,"TFRobertaForCausalLM"),eBt.forEach(t),N3r=r(kDe," (RoBERTa model)"),kDe.forEach(t),q3r=i(Ce),f4=n(Ce,"LI",{});var SDe=s(f4);q8e=n(SDe,"STRONG",{});var oBt=s(q8e);j3r=r(oBt,"roformer"),oBt.forEach(t),D3r=r(SDe," \u2014 "),TY=n(SDe,"A",{href:!0});var rBt=s(TY);G3r=r(rBt,"TFRoFormerForCausalLM"),rBt.forEach(t),O3r=r(SDe," (RoFormer model)"),SDe.forEach(t),V3r=i(Ce),m4=n(Ce,"LI",{});var RDe=s(m4);j8e=n(RDe,"STRONG",{});var tBt=s(j8e);X3r=r(tBt,"transfo-xl"),tBt.forEach(t),z3r=r(RDe," \u2014 "),MY=n(RDe,"A",{href:!0});var aBt=s(MY);W3r=r(aBt,"TFTransfoXLLMHeadModel"),aBt.forEach(t),Q3r=r(RDe," (Transformer-XL model)"),RDe.forEach(t),H3r=i(Ce),g4=n(Ce,"LI",{});var PDe=s(g4);D8e=n(PDe,"STRONG",{});var nBt=s(D8e);U3r=r(nBt,"xlm"),nBt.forEach(t),J3r=r(PDe," \u2014 "),EY=n(PDe,"A",{href:!0});var sBt=s(EY);Y3r=r(sBt,"TFXLMWithLMHeadModel"),sBt.forEach(t),K3r=r(PDe," (XLM model)"),PDe.forEach(t),Z3r=i(Ce),h4=n(Ce,"LI",{});var BDe=s(h4);G8e=n(BDe,"STRONG",{});var lBt=s(G8e);e0r=r(lBt,"xlnet"),lBt.forEach(t),o0r=r(BDe," \u2014 "),CY=n(BDe,"A",{href:!0});var iBt=s(CY);r0r=r(iBt,"TFXLNetLMHeadModel"),iBt.forEach(t),t0r=r(BDe," (XLNet model)"),BDe.forEach(t),Ce.forEach(t),a0r=i(Il),T(p4.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),hWe=i(f),uc=n(f,"H2",{class:!0});var MHe=s(uc);_4=n(MHe,"A",{id:!0,class:!0,href:!0});var dBt=s(_4);O8e=n(dBt,"SPAN",{});var cBt=s(O8e);T(vx.$$.fragment,cBt),cBt.forEach(t),dBt.forEach(t),n0r=i(MHe),V8e=n(MHe,"SPAN",{});var fBt=s(V8e);s0r=r(fBt,"TFAutoModelForImageClassification"),fBt.forEach(t),MHe.forEach(t),pWe=i(f),nr=n(f,"DIV",{class:!0});var Nl=s(nr);T(Fx.$$.fragment,Nl),l0r=i(Nl),bc=n(Nl,"P",{});var dae=s(bc);i0r=r(dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wY=n(dae,"A",{href:!0});var mBt=s(wY);d0r=r(mBt,"from_pretrained()"),mBt.forEach(t),c0r=r(dae," class method or the "),AY=n(dae,"A",{href:!0});var gBt=s(AY);f0r=r(gBt,"from_config()"),gBt.forEach(t),m0r=r(dae,` class
method.`),dae.forEach(t),g0r=i(Nl),Tx=n(Nl,"P",{});var EHe=s(Tx);h0r=r(EHe,"This class cannot be instantiated directly using "),X8e=n(EHe,"CODE",{});var hBt=s(X8e);p0r=r(hBt,"__init__()"),hBt.forEach(t),_0r=r(EHe," (throws an error)."),EHe.forEach(t),u0r=i(Nl),It=n(Nl,"DIV",{class:!0});var MA=s(It);T(Mx.$$.fragment,MA),b0r=i(MA),z8e=n(MA,"P",{});var pBt=s(z8e);v0r=r(pBt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pBt.forEach(t),F0r=i(MA),vc=n(MA,"P",{});var cae=s(vc);T0r=r(cae,`Note:
Loading a model from its configuration file does `),W8e=n(cae,"STRONG",{});var _Bt=s(W8e);M0r=r(_Bt,"not"),_Bt.forEach(t),E0r=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(cae,"A",{href:!0});var uBt=s(LY);C0r=r(uBt,"from_pretrained()"),uBt.forEach(t),w0r=r(cae," to load the model weights."),cae.forEach(t),A0r=i(MA),T(u4.$$.fragment,MA),MA.forEach(t),L0r=i(Nl),Rr=n(Nl,"DIV",{class:!0});var ql=s(Rr);T(Ex.$$.fragment,ql),y0r=i(ql),Q8e=n(ql,"P",{});var bBt=s(Q8e);x0r=r(bBt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bBt.forEach(t),$0r=i(ql),cn=n(ql,"P",{});var EA=s(cn);k0r=r(EA,"The model class to instantiate is selected based on the "),H8e=n(EA,"CODE",{});var vBt=s(H8e);S0r=r(vBt,"model_type"),vBt.forEach(t),R0r=r(EA,` property of the config object (either
passed as an argument or loaded from `),U8e=n(EA,"CODE",{});var FBt=s(U8e);P0r=r(FBt,"pretrained_model_name_or_path"),FBt.forEach(t),B0r=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J8e=n(EA,"CODE",{});var TBt=s(J8e);I0r=r(TBt,"pretrained_model_name_or_path"),TBt.forEach(t),N0r=r(EA,":"),EA.forEach(t),q0r=i(ql),Ve=n(ql,"UL",{});var Mo=s(Ve);b4=n(Mo,"LI",{});var IDe=s(b4);Y8e=n(IDe,"STRONG",{});var MBt=s(Y8e);j0r=r(MBt,"convnext"),MBt.forEach(t),D0r=r(IDe," \u2014 "),yY=n(IDe,"A",{href:!0});var EBt=s(yY);G0r=r(EBt,"TFConvNextForImageClassification"),EBt.forEach(t),O0r=r(IDe," (ConvNeXT model)"),IDe.forEach(t),V0r=i(Mo),v4=n(Mo,"LI",{});var NDe=s(v4);K8e=n(NDe,"STRONG",{});var CBt=s(K8e);X0r=r(CBt,"data2vec-vision"),CBt.forEach(t),z0r=r(NDe," \u2014 "),xY=n(NDe,"A",{href:!0});var wBt=s(xY);W0r=r(wBt,"TFData2VecVisionForImageClassification"),wBt.forEach(t),Q0r=r(NDe," (Data2VecVision model)"),NDe.forEach(t),H0r=i(Mo),Zs=n(Mo,"LI",{});var JS=s(Zs);Z8e=n(JS,"STRONG",{});var ABt=s(Z8e);U0r=r(ABt,"deit"),ABt.forEach(t),J0r=r(JS," \u2014 "),$Y=n(JS,"A",{href:!0});var LBt=s($Y);Y0r=r(LBt,"TFDeiTForImageClassification"),LBt.forEach(t),K0r=r(JS," or "),kY=n(JS,"A",{href:!0});var yBt=s(kY);Z0r=r(yBt,"TFDeiTForImageClassificationWithTeacher"),yBt.forEach(t),ewr=r(JS," (DeiT model)"),JS.forEach(t),owr=i(Mo),F4=n(Mo,"LI",{});var qDe=s(F4);eMe=n(qDe,"STRONG",{});var xBt=s(eMe);rwr=r(xBt,"regnet"),xBt.forEach(t),twr=r(qDe," \u2014 "),SY=n(qDe,"A",{href:!0});var $Bt=s(SY);awr=r($Bt,"TFRegNetForImageClassification"),$Bt.forEach(t),nwr=r(qDe," (RegNet model)"),qDe.forEach(t),swr=i(Mo),T4=n(Mo,"LI",{});var jDe=s(T4);oMe=n(jDe,"STRONG",{});var kBt=s(oMe);lwr=r(kBt,"resnet"),kBt.forEach(t),iwr=r(jDe," \u2014 "),RY=n(jDe,"A",{href:!0});var SBt=s(RY);dwr=r(SBt,"TFResNetForImageClassification"),SBt.forEach(t),cwr=r(jDe," (ResNet model)"),jDe.forEach(t),fwr=i(Mo),M4=n(Mo,"LI",{});var DDe=s(M4);rMe=n(DDe,"STRONG",{});var RBt=s(rMe);mwr=r(RBt,"segformer"),RBt.forEach(t),gwr=r(DDe," \u2014 "),PY=n(DDe,"A",{href:!0});var PBt=s(PY);hwr=r(PBt,"TFSegformerForImageClassification"),PBt.forEach(t),pwr=r(DDe," (SegFormer model)"),DDe.forEach(t),_wr=i(Mo),E4=n(Mo,"LI",{});var GDe=s(E4);tMe=n(GDe,"STRONG",{});var BBt=s(tMe);uwr=r(BBt,"swin"),BBt.forEach(t),bwr=r(GDe," \u2014 "),BY=n(GDe,"A",{href:!0});var IBt=s(BY);vwr=r(IBt,"TFSwinForImageClassification"),IBt.forEach(t),Fwr=r(GDe," (Swin Transformer model)"),GDe.forEach(t),Twr=i(Mo),C4=n(Mo,"LI",{});var ODe=s(C4);aMe=n(ODe,"STRONG",{});var NBt=s(aMe);Mwr=r(NBt,"vit"),NBt.forEach(t),Ewr=r(ODe," \u2014 "),IY=n(ODe,"A",{href:!0});var qBt=s(IY);Cwr=r(qBt,"TFViTForImageClassification"),qBt.forEach(t),wwr=r(ODe," (ViT model)"),ODe.forEach(t),Mo.forEach(t),Awr=i(ql),T(w4.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),_We=i(f),Fc=n(f,"H2",{class:!0});var CHe=s(Fc);A4=n(CHe,"A",{id:!0,class:!0,href:!0});var jBt=s(A4);nMe=n(jBt,"SPAN",{});var DBt=s(nMe);T(Cx.$$.fragment,DBt),DBt.forEach(t),jBt.forEach(t),Lwr=i(CHe),sMe=n(CHe,"SPAN",{});var GBt=s(sMe);ywr=r(GBt,"TFAutoModelForMaskedLM"),GBt.forEach(t),CHe.forEach(t),uWe=i(f),sr=n(f,"DIV",{class:!0});var jl=s(sr);T(wx.$$.fragment,jl),xwr=i(jl),Tc=n(jl,"P",{});var fae=s(Tc);$wr=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NY=n(fae,"A",{href:!0});var OBt=s(NY);kwr=r(OBt,"from_pretrained()"),OBt.forEach(t),Swr=r(fae," class method or the "),qY=n(fae,"A",{href:!0});var VBt=s(qY);Rwr=r(VBt,"from_config()"),VBt.forEach(t),Pwr=r(fae,` class
method.`),fae.forEach(t),Bwr=i(jl),Ax=n(jl,"P",{});var wHe=s(Ax);Iwr=r(wHe,"This class cannot be instantiated directly using "),lMe=n(wHe,"CODE",{});var XBt=s(lMe);Nwr=r(XBt,"__init__()"),XBt.forEach(t),qwr=r(wHe," (throws an error)."),wHe.forEach(t),jwr=i(jl),Nt=n(jl,"DIV",{class:!0});var CA=s(Nt);T(Lx.$$.fragment,CA),Dwr=i(CA),iMe=n(CA,"P",{});var zBt=s(iMe);Gwr=r(zBt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zBt.forEach(t),Owr=i(CA),Mc=n(CA,"P",{});var mae=s(Mc);Vwr=r(mae,`Note:
Loading a model from its configuration file does `),dMe=n(mae,"STRONG",{});var WBt=s(dMe);Xwr=r(WBt,"not"),WBt.forEach(t),zwr=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=n(mae,"A",{href:!0});var QBt=s(jY);Wwr=r(QBt,"from_pretrained()"),QBt.forEach(t),Qwr=r(mae," to load the model weights."),mae.forEach(t),Hwr=i(CA),T(L4.$$.fragment,CA),CA.forEach(t),Uwr=i(jl),Pr=n(jl,"DIV",{class:!0});var Dl=s(Pr);T(yx.$$.fragment,Dl),Jwr=i(Dl),cMe=n(Dl,"P",{});var HBt=s(cMe);Ywr=r(HBt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HBt.forEach(t),Kwr=i(Dl),fn=n(Dl,"P",{});var wA=s(fn);Zwr=r(wA,"The model class to instantiate is selected based on the "),fMe=n(wA,"CODE",{});var UBt=s(fMe);eAr=r(UBt,"model_type"),UBt.forEach(t),oAr=r(wA,` property of the config object (either
passed as an argument or loaded from `),mMe=n(wA,"CODE",{});var JBt=s(mMe);rAr=r(JBt,"pretrained_model_name_or_path"),JBt.forEach(t),tAr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=n(wA,"CODE",{});var YBt=s(gMe);aAr=r(YBt,"pretrained_model_name_or_path"),YBt.forEach(t),nAr=r(wA,":"),wA.forEach(t),sAr=i(Dl),ie=n(Dl,"UL",{});var ge=s(ie);y4=n(ge,"LI",{});var VDe=s(y4);hMe=n(VDe,"STRONG",{});var KBt=s(hMe);lAr=r(KBt,"albert"),KBt.forEach(t),iAr=r(VDe," \u2014 "),DY=n(VDe,"A",{href:!0});var ZBt=s(DY);dAr=r(ZBt,"TFAlbertForMaskedLM"),ZBt.forEach(t),cAr=r(VDe," (ALBERT model)"),VDe.forEach(t),fAr=i(ge),x4=n(ge,"LI",{});var XDe=s(x4);pMe=n(XDe,"STRONG",{});var eIt=s(pMe);mAr=r(eIt,"bert"),eIt.forEach(t),gAr=r(XDe," \u2014 "),GY=n(XDe,"A",{href:!0});var oIt=s(GY);hAr=r(oIt,"TFBertForMaskedLM"),oIt.forEach(t),pAr=r(XDe," (BERT model)"),XDe.forEach(t),_Ar=i(ge),$4=n(ge,"LI",{});var zDe=s($4);_Me=n(zDe,"STRONG",{});var rIt=s(_Me);uAr=r(rIt,"camembert"),rIt.forEach(t),bAr=r(zDe," \u2014 "),OY=n(zDe,"A",{href:!0});var tIt=s(OY);vAr=r(tIt,"TFCamembertForMaskedLM"),tIt.forEach(t),FAr=r(zDe," (CamemBERT model)"),zDe.forEach(t),TAr=i(ge),k4=n(ge,"LI",{});var WDe=s(k4);uMe=n(WDe,"STRONG",{});var aIt=s(uMe);MAr=r(aIt,"convbert"),aIt.forEach(t),EAr=r(WDe," \u2014 "),VY=n(WDe,"A",{href:!0});var nIt=s(VY);CAr=r(nIt,"TFConvBertForMaskedLM"),nIt.forEach(t),wAr=r(WDe," (ConvBERT model)"),WDe.forEach(t),AAr=i(ge),S4=n(ge,"LI",{});var QDe=s(S4);bMe=n(QDe,"STRONG",{});var sIt=s(bMe);LAr=r(sIt,"deberta"),sIt.forEach(t),yAr=r(QDe," \u2014 "),XY=n(QDe,"A",{href:!0});var lIt=s(XY);xAr=r(lIt,"TFDebertaForMaskedLM"),lIt.forEach(t),$Ar=r(QDe," (DeBERTa model)"),QDe.forEach(t),kAr=i(ge),R4=n(ge,"LI",{});var HDe=s(R4);vMe=n(HDe,"STRONG",{});var iIt=s(vMe);SAr=r(iIt,"deberta-v2"),iIt.forEach(t),RAr=r(HDe," \u2014 "),zY=n(HDe,"A",{href:!0});var dIt=s(zY);PAr=r(dIt,"TFDebertaV2ForMaskedLM"),dIt.forEach(t),BAr=r(HDe," (DeBERTa-v2 model)"),HDe.forEach(t),IAr=i(ge),P4=n(ge,"LI",{});var UDe=s(P4);FMe=n(UDe,"STRONG",{});var cIt=s(FMe);NAr=r(cIt,"distilbert"),cIt.forEach(t),qAr=r(UDe," \u2014 "),WY=n(UDe,"A",{href:!0});var fIt=s(WY);jAr=r(fIt,"TFDistilBertForMaskedLM"),fIt.forEach(t),DAr=r(UDe," (DistilBERT model)"),UDe.forEach(t),GAr=i(ge),B4=n(ge,"LI",{});var JDe=s(B4);TMe=n(JDe,"STRONG",{});var mIt=s(TMe);OAr=r(mIt,"electra"),mIt.forEach(t),VAr=r(JDe," \u2014 "),QY=n(JDe,"A",{href:!0});var gIt=s(QY);XAr=r(gIt,"TFElectraForMaskedLM"),gIt.forEach(t),zAr=r(JDe," (ELECTRA model)"),JDe.forEach(t),WAr=i(ge),I4=n(ge,"LI",{});var YDe=s(I4);MMe=n(YDe,"STRONG",{});var hIt=s(MMe);QAr=r(hIt,"flaubert"),hIt.forEach(t),HAr=r(YDe," \u2014 "),HY=n(YDe,"A",{href:!0});var pIt=s(HY);UAr=r(pIt,"TFFlaubertWithLMHeadModel"),pIt.forEach(t),JAr=r(YDe," (FlauBERT model)"),YDe.forEach(t),YAr=i(ge),N4=n(ge,"LI",{});var KDe=s(N4);EMe=n(KDe,"STRONG",{});var _It=s(EMe);KAr=r(_It,"funnel"),_It.forEach(t),ZAr=r(KDe," \u2014 "),UY=n(KDe,"A",{href:!0});var uIt=s(UY);eLr=r(uIt,"TFFunnelForMaskedLM"),uIt.forEach(t),oLr=r(KDe," (Funnel Transformer model)"),KDe.forEach(t),rLr=i(ge),q4=n(ge,"LI",{});var ZDe=s(q4);CMe=n(ZDe,"STRONG",{});var bIt=s(CMe);tLr=r(bIt,"layoutlm"),bIt.forEach(t),aLr=r(ZDe," \u2014 "),JY=n(ZDe,"A",{href:!0});var vIt=s(JY);nLr=r(vIt,"TFLayoutLMForMaskedLM"),vIt.forEach(t),sLr=r(ZDe," (LayoutLM model)"),ZDe.forEach(t),lLr=i(ge),j4=n(ge,"LI",{});var eGe=s(j4);wMe=n(eGe,"STRONG",{});var FIt=s(wMe);iLr=r(FIt,"longformer"),FIt.forEach(t),dLr=r(eGe," \u2014 "),YY=n(eGe,"A",{href:!0});var TIt=s(YY);cLr=r(TIt,"TFLongformerForMaskedLM"),TIt.forEach(t),fLr=r(eGe," (Longformer model)"),eGe.forEach(t),mLr=i(ge),D4=n(ge,"LI",{});var oGe=s(D4);AMe=n(oGe,"STRONG",{});var MIt=s(AMe);gLr=r(MIt,"mobilebert"),MIt.forEach(t),hLr=r(oGe," \u2014 "),KY=n(oGe,"A",{href:!0});var EIt=s(KY);pLr=r(EIt,"TFMobileBertForMaskedLM"),EIt.forEach(t),_Lr=r(oGe," (MobileBERT model)"),oGe.forEach(t),uLr=i(ge),G4=n(ge,"LI",{});var rGe=s(G4);LMe=n(rGe,"STRONG",{});var CIt=s(LMe);bLr=r(CIt,"mpnet"),CIt.forEach(t),vLr=r(rGe," \u2014 "),ZY=n(rGe,"A",{href:!0});var wIt=s(ZY);FLr=r(wIt,"TFMPNetForMaskedLM"),wIt.forEach(t),TLr=r(rGe," (MPNet model)"),rGe.forEach(t),MLr=i(ge),O4=n(ge,"LI",{});var tGe=s(O4);yMe=n(tGe,"STRONG",{});var AIt=s(yMe);ELr=r(AIt,"rembert"),AIt.forEach(t),CLr=r(tGe," \u2014 "),eK=n(tGe,"A",{href:!0});var LIt=s(eK);wLr=r(LIt,"TFRemBertForMaskedLM"),LIt.forEach(t),ALr=r(tGe," (RemBERT model)"),tGe.forEach(t),LLr=i(ge),V4=n(ge,"LI",{});var aGe=s(V4);xMe=n(aGe,"STRONG",{});var yIt=s(xMe);yLr=r(yIt,"roberta"),yIt.forEach(t),xLr=r(aGe," \u2014 "),oK=n(aGe,"A",{href:!0});var xIt=s(oK);$Lr=r(xIt,"TFRobertaForMaskedLM"),xIt.forEach(t),kLr=r(aGe," (RoBERTa model)"),aGe.forEach(t),SLr=i(ge),X4=n(ge,"LI",{});var nGe=s(X4);$Me=n(nGe,"STRONG",{});var $It=s($Me);RLr=r($It,"roformer"),$It.forEach(t),PLr=r(nGe," \u2014 "),rK=n(nGe,"A",{href:!0});var kIt=s(rK);BLr=r(kIt,"TFRoFormerForMaskedLM"),kIt.forEach(t),ILr=r(nGe," (RoFormer model)"),nGe.forEach(t),NLr=i(ge),z4=n(ge,"LI",{});var sGe=s(z4);kMe=n(sGe,"STRONG",{});var SIt=s(kMe);qLr=r(SIt,"tapas"),SIt.forEach(t),jLr=r(sGe," \u2014 "),tK=n(sGe,"A",{href:!0});var RIt=s(tK);DLr=r(RIt,"TFTapasForMaskedLM"),RIt.forEach(t),GLr=r(sGe," (TAPAS model)"),sGe.forEach(t),OLr=i(ge),W4=n(ge,"LI",{});var lGe=s(W4);SMe=n(lGe,"STRONG",{});var PIt=s(SMe);VLr=r(PIt,"xlm"),PIt.forEach(t),XLr=r(lGe," \u2014 "),aK=n(lGe,"A",{href:!0});var BIt=s(aK);zLr=r(BIt,"TFXLMWithLMHeadModel"),BIt.forEach(t),WLr=r(lGe," (XLM model)"),lGe.forEach(t),QLr=i(ge),Q4=n(ge,"LI",{});var iGe=s(Q4);RMe=n(iGe,"STRONG",{});var IIt=s(RMe);HLr=r(IIt,"xlm-roberta"),IIt.forEach(t),ULr=r(iGe," \u2014 "),nK=n(iGe,"A",{href:!0});var NIt=s(nK);JLr=r(NIt,"TFXLMRobertaForMaskedLM"),NIt.forEach(t),YLr=r(iGe," (XLM-RoBERTa model)"),iGe.forEach(t),ge.forEach(t),KLr=i(Dl),T(H4.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),bWe=i(f),Ec=n(f,"H2",{class:!0});var AHe=s(Ec);U4=n(AHe,"A",{id:!0,class:!0,href:!0});var qIt=s(U4);PMe=n(qIt,"SPAN",{});var jIt=s(PMe);T(xx.$$.fragment,jIt),jIt.forEach(t),qIt.forEach(t),ZLr=i(AHe),BMe=n(AHe,"SPAN",{});var DIt=s(BMe);eyr=r(DIt,"TFAutoModelForSeq2SeqLM"),DIt.forEach(t),AHe.forEach(t),vWe=i(f),lr=n(f,"DIV",{class:!0});var Gl=s(lr);T($x.$$.fragment,Gl),oyr=i(Gl),Cc=n(Gl,"P",{});var gae=s(Cc);ryr=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sK=n(gae,"A",{href:!0});var GIt=s(sK);tyr=r(GIt,"from_pretrained()"),GIt.forEach(t),ayr=r(gae," class method or the "),lK=n(gae,"A",{href:!0});var OIt=s(lK);nyr=r(OIt,"from_config()"),OIt.forEach(t),syr=r(gae,` class
method.`),gae.forEach(t),lyr=i(Gl),kx=n(Gl,"P",{});var LHe=s(kx);iyr=r(LHe,"This class cannot be instantiated directly using "),IMe=n(LHe,"CODE",{});var VIt=s(IMe);dyr=r(VIt,"__init__()"),VIt.forEach(t),cyr=r(LHe," (throws an error)."),LHe.forEach(t),fyr=i(Gl),qt=n(Gl,"DIV",{class:!0});var AA=s(qt);T(Sx.$$.fragment,AA),myr=i(AA),NMe=n(AA,"P",{});var XIt=s(NMe);gyr=r(XIt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),XIt.forEach(t),hyr=i(AA),wc=n(AA,"P",{});var hae=s(wc);pyr=r(hae,`Note:
Loading a model from its configuration file does `),qMe=n(hae,"STRONG",{});var zIt=s(qMe);_yr=r(zIt,"not"),zIt.forEach(t),uyr=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(hae,"A",{href:!0});var WIt=s(iK);byr=r(WIt,"from_pretrained()"),WIt.forEach(t),vyr=r(hae," to load the model weights."),hae.forEach(t),Fyr=i(AA),T(J4.$$.fragment,AA),AA.forEach(t),Tyr=i(Gl),Br=n(Gl,"DIV",{class:!0});var Ol=s(Br);T(Rx.$$.fragment,Ol),Myr=i(Ol),jMe=n(Ol,"P",{});var QIt=s(jMe);Eyr=r(QIt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QIt.forEach(t),Cyr=i(Ol),mn=n(Ol,"P",{});var LA=s(mn);wyr=r(LA,"The model class to instantiate is selected based on the "),DMe=n(LA,"CODE",{});var HIt=s(DMe);Ayr=r(HIt,"model_type"),HIt.forEach(t),Lyr=r(LA,` property of the config object (either
passed as an argument or loaded from `),GMe=n(LA,"CODE",{});var UIt=s(GMe);yyr=r(UIt,"pretrained_model_name_or_path"),UIt.forEach(t),xyr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=n(LA,"CODE",{});var JIt=s(OMe);$yr=r(JIt,"pretrained_model_name_or_path"),JIt.forEach(t),kyr=r(LA,":"),LA.forEach(t),Syr=i(Ol),ye=n(Ol,"UL",{});var Ie=s(ye);Y4=n(Ie,"LI",{});var dGe=s(Y4);VMe=n(dGe,"STRONG",{});var YIt=s(VMe);Ryr=r(YIt,"bart"),YIt.forEach(t),Pyr=r(dGe," \u2014 "),dK=n(dGe,"A",{href:!0});var KIt=s(dK);Byr=r(KIt,"TFBartForConditionalGeneration"),KIt.forEach(t),Iyr=r(dGe," (BART model)"),dGe.forEach(t),Nyr=i(Ie),K4=n(Ie,"LI",{});var cGe=s(K4);XMe=n(cGe,"STRONG",{});var ZIt=s(XMe);qyr=r(ZIt,"blenderbot"),ZIt.forEach(t),jyr=r(cGe," \u2014 "),cK=n(cGe,"A",{href:!0});var eNt=s(cK);Dyr=r(eNt,"TFBlenderbotForConditionalGeneration"),eNt.forEach(t),Gyr=r(cGe," (Blenderbot model)"),cGe.forEach(t),Oyr=i(Ie),Z4=n(Ie,"LI",{});var fGe=s(Z4);zMe=n(fGe,"STRONG",{});var oNt=s(zMe);Vyr=r(oNt,"blenderbot-small"),oNt.forEach(t),Xyr=r(fGe," \u2014 "),fK=n(fGe,"A",{href:!0});var rNt=s(fK);zyr=r(rNt,"TFBlenderbotSmallForConditionalGeneration"),rNt.forEach(t),Wyr=r(fGe," (BlenderbotSmall model)"),fGe.forEach(t),Qyr=i(Ie),eE=n(Ie,"LI",{});var mGe=s(eE);WMe=n(mGe,"STRONG",{});var tNt=s(WMe);Hyr=r(tNt,"encoder-decoder"),tNt.forEach(t),Uyr=r(mGe," \u2014 "),mK=n(mGe,"A",{href:!0});var aNt=s(mK);Jyr=r(aNt,"TFEncoderDecoderModel"),aNt.forEach(t),Yyr=r(mGe," (Encoder decoder model)"),mGe.forEach(t),Kyr=i(Ie),oE=n(Ie,"LI",{});var gGe=s(oE);QMe=n(gGe,"STRONG",{});var nNt=s(QMe);Zyr=r(nNt,"led"),nNt.forEach(t),e9r=r(gGe," \u2014 "),gK=n(gGe,"A",{href:!0});var sNt=s(gK);o9r=r(sNt,"TFLEDForConditionalGeneration"),sNt.forEach(t),r9r=r(gGe," (LED model)"),gGe.forEach(t),t9r=i(Ie),rE=n(Ie,"LI",{});var hGe=s(rE);HMe=n(hGe,"STRONG",{});var lNt=s(HMe);a9r=r(lNt,"marian"),lNt.forEach(t),n9r=r(hGe," \u2014 "),hK=n(hGe,"A",{href:!0});var iNt=s(hK);s9r=r(iNt,"TFMarianMTModel"),iNt.forEach(t),l9r=r(hGe," (Marian model)"),hGe.forEach(t),i9r=i(Ie),tE=n(Ie,"LI",{});var pGe=s(tE);UMe=n(pGe,"STRONG",{});var dNt=s(UMe);d9r=r(dNt,"mbart"),dNt.forEach(t),c9r=r(pGe," \u2014 "),pK=n(pGe,"A",{href:!0});var cNt=s(pK);f9r=r(cNt,"TFMBartForConditionalGeneration"),cNt.forEach(t),m9r=r(pGe," (mBART model)"),pGe.forEach(t),g9r=i(Ie),aE=n(Ie,"LI",{});var _Ge=s(aE);JMe=n(_Ge,"STRONG",{});var fNt=s(JMe);h9r=r(fNt,"mt5"),fNt.forEach(t),p9r=r(_Ge," \u2014 "),_K=n(_Ge,"A",{href:!0});var mNt=s(_K);_9r=r(mNt,"TFMT5ForConditionalGeneration"),mNt.forEach(t),u9r=r(_Ge," (MT5 model)"),_Ge.forEach(t),b9r=i(Ie),nE=n(Ie,"LI",{});var uGe=s(nE);YMe=n(uGe,"STRONG",{});var gNt=s(YMe);v9r=r(gNt,"pegasus"),gNt.forEach(t),F9r=r(uGe," \u2014 "),uK=n(uGe,"A",{href:!0});var hNt=s(uK);T9r=r(hNt,"TFPegasusForConditionalGeneration"),hNt.forEach(t),M9r=r(uGe," (Pegasus model)"),uGe.forEach(t),E9r=i(Ie),sE=n(Ie,"LI",{});var bGe=s(sE);KMe=n(bGe,"STRONG",{});var pNt=s(KMe);C9r=r(pNt,"t5"),pNt.forEach(t),w9r=r(bGe," \u2014 "),bK=n(bGe,"A",{href:!0});var _Nt=s(bK);A9r=r(_Nt,"TFT5ForConditionalGeneration"),_Nt.forEach(t),L9r=r(bGe," (T5 model)"),bGe.forEach(t),Ie.forEach(t),y9r=i(Ol),T(lE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),FWe=i(f),Ac=n(f,"H2",{class:!0});var yHe=s(Ac);iE=n(yHe,"A",{id:!0,class:!0,href:!0});var uNt=s(iE);ZMe=n(uNt,"SPAN",{});var bNt=s(ZMe);T(Px.$$.fragment,bNt),bNt.forEach(t),uNt.forEach(t),x9r=i(yHe),e4e=n(yHe,"SPAN",{});var vNt=s(e4e);$9r=r(vNt,"TFAutoModelForSequenceClassification"),vNt.forEach(t),yHe.forEach(t),TWe=i(f),ir=n(f,"DIV",{class:!0});var Vl=s(ir);T(Bx.$$.fragment,Vl),k9r=i(Vl),Lc=n(Vl,"P",{});var pae=s(Lc);S9r=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vK=n(pae,"A",{href:!0});var FNt=s(vK);R9r=r(FNt,"from_pretrained()"),FNt.forEach(t),P9r=r(pae," class method or the "),FK=n(pae,"A",{href:!0});var TNt=s(FK);B9r=r(TNt,"from_config()"),TNt.forEach(t),I9r=r(pae,` class
method.`),pae.forEach(t),N9r=i(Vl),Ix=n(Vl,"P",{});var xHe=s(Ix);q9r=r(xHe,"This class cannot be instantiated directly using "),o4e=n(xHe,"CODE",{});var MNt=s(o4e);j9r=r(MNt,"__init__()"),MNt.forEach(t),D9r=r(xHe," (throws an error)."),xHe.forEach(t),G9r=i(Vl),jt=n(Vl,"DIV",{class:!0});var yA=s(jt);T(Nx.$$.fragment,yA),O9r=i(yA),r4e=n(yA,"P",{});var ENt=s(r4e);V9r=r(ENt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ENt.forEach(t),X9r=i(yA),yc=n(yA,"P",{});var _ae=s(yc);z9r=r(_ae,`Note:
Loading a model from its configuration file does `),t4e=n(_ae,"STRONG",{});var CNt=s(t4e);W9r=r(CNt,"not"),CNt.forEach(t),Q9r=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(_ae,"A",{href:!0});var wNt=s(TK);H9r=r(wNt,"from_pretrained()"),wNt.forEach(t),U9r=r(_ae," to load the model weights."),_ae.forEach(t),J9r=i(yA),T(dE.$$.fragment,yA),yA.forEach(t),Y9r=i(Vl),Ir=n(Vl,"DIV",{class:!0});var Xl=s(Ir);T(qx.$$.fragment,Xl),K9r=i(Xl),a4e=n(Xl,"P",{});var ANt=s(a4e);Z9r=r(ANt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ANt.forEach(t),exr=i(Xl),gn=n(Xl,"P",{});var xA=s(gn);oxr=r(xA,"The model class to instantiate is selected based on the "),n4e=n(xA,"CODE",{});var LNt=s(n4e);rxr=r(LNt,"model_type"),LNt.forEach(t),txr=r(xA,` property of the config object (either
passed as an argument or loaded from `),s4e=n(xA,"CODE",{});var yNt=s(s4e);axr=r(yNt,"pretrained_model_name_or_path"),yNt.forEach(t),nxr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=n(xA,"CODE",{});var xNt=s(l4e);sxr=r(xNt,"pretrained_model_name_or_path"),xNt.forEach(t),lxr=r(xA,":"),xA.forEach(t),ixr=i(Xl),te=n(Xl,"UL",{});var ne=s(te);cE=n(ne,"LI",{});var vGe=s(cE);i4e=n(vGe,"STRONG",{});var $Nt=s(i4e);dxr=r($Nt,"albert"),$Nt.forEach(t),cxr=r(vGe," \u2014 "),MK=n(vGe,"A",{href:!0});var kNt=s(MK);fxr=r(kNt,"TFAlbertForSequenceClassification"),kNt.forEach(t),mxr=r(vGe," (ALBERT model)"),vGe.forEach(t),gxr=i(ne),fE=n(ne,"LI",{});var FGe=s(fE);d4e=n(FGe,"STRONG",{});var SNt=s(d4e);hxr=r(SNt,"bert"),SNt.forEach(t),pxr=r(FGe," \u2014 "),EK=n(FGe,"A",{href:!0});var RNt=s(EK);_xr=r(RNt,"TFBertForSequenceClassification"),RNt.forEach(t),uxr=r(FGe," (BERT model)"),FGe.forEach(t),bxr=i(ne),mE=n(ne,"LI",{});var TGe=s(mE);c4e=n(TGe,"STRONG",{});var PNt=s(c4e);vxr=r(PNt,"camembert"),PNt.forEach(t),Fxr=r(TGe," \u2014 "),CK=n(TGe,"A",{href:!0});var BNt=s(CK);Txr=r(BNt,"TFCamembertForSequenceClassification"),BNt.forEach(t),Mxr=r(TGe," (CamemBERT model)"),TGe.forEach(t),Exr=i(ne),gE=n(ne,"LI",{});var MGe=s(gE);f4e=n(MGe,"STRONG",{});var INt=s(f4e);Cxr=r(INt,"convbert"),INt.forEach(t),wxr=r(MGe," \u2014 "),wK=n(MGe,"A",{href:!0});var NNt=s(wK);Axr=r(NNt,"TFConvBertForSequenceClassification"),NNt.forEach(t),Lxr=r(MGe," (ConvBERT model)"),MGe.forEach(t),yxr=i(ne),hE=n(ne,"LI",{});var EGe=s(hE);m4e=n(EGe,"STRONG",{});var qNt=s(m4e);xxr=r(qNt,"ctrl"),qNt.forEach(t),$xr=r(EGe," \u2014 "),AK=n(EGe,"A",{href:!0});var jNt=s(AK);kxr=r(jNt,"TFCTRLForSequenceClassification"),jNt.forEach(t),Sxr=r(EGe," (CTRL model)"),EGe.forEach(t),Rxr=i(ne),pE=n(ne,"LI",{});var CGe=s(pE);g4e=n(CGe,"STRONG",{});var DNt=s(g4e);Pxr=r(DNt,"deberta"),DNt.forEach(t),Bxr=r(CGe," \u2014 "),LK=n(CGe,"A",{href:!0});var GNt=s(LK);Ixr=r(GNt,"TFDebertaForSequenceClassification"),GNt.forEach(t),Nxr=r(CGe," (DeBERTa model)"),CGe.forEach(t),qxr=i(ne),_E=n(ne,"LI",{});var wGe=s(_E);h4e=n(wGe,"STRONG",{});var ONt=s(h4e);jxr=r(ONt,"deberta-v2"),ONt.forEach(t),Dxr=r(wGe," \u2014 "),yK=n(wGe,"A",{href:!0});var VNt=s(yK);Gxr=r(VNt,"TFDebertaV2ForSequenceClassification"),VNt.forEach(t),Oxr=r(wGe," (DeBERTa-v2 model)"),wGe.forEach(t),Vxr=i(ne),uE=n(ne,"LI",{});var AGe=s(uE);p4e=n(AGe,"STRONG",{});var XNt=s(p4e);Xxr=r(XNt,"distilbert"),XNt.forEach(t),zxr=r(AGe," \u2014 "),xK=n(AGe,"A",{href:!0});var zNt=s(xK);Wxr=r(zNt,"TFDistilBertForSequenceClassification"),zNt.forEach(t),Qxr=r(AGe," (DistilBERT model)"),AGe.forEach(t),Hxr=i(ne),bE=n(ne,"LI",{});var LGe=s(bE);_4e=n(LGe,"STRONG",{});var WNt=s(_4e);Uxr=r(WNt,"electra"),WNt.forEach(t),Jxr=r(LGe," \u2014 "),$K=n(LGe,"A",{href:!0});var QNt=s($K);Yxr=r(QNt,"TFElectraForSequenceClassification"),QNt.forEach(t),Kxr=r(LGe," (ELECTRA model)"),LGe.forEach(t),Zxr=i(ne),vE=n(ne,"LI",{});var yGe=s(vE);u4e=n(yGe,"STRONG",{});var HNt=s(u4e);e$r=r(HNt,"flaubert"),HNt.forEach(t),o$r=r(yGe," \u2014 "),kK=n(yGe,"A",{href:!0});var UNt=s(kK);r$r=r(UNt,"TFFlaubertForSequenceClassification"),UNt.forEach(t),t$r=r(yGe," (FlauBERT model)"),yGe.forEach(t),a$r=i(ne),FE=n(ne,"LI",{});var xGe=s(FE);b4e=n(xGe,"STRONG",{});var JNt=s(b4e);n$r=r(JNt,"funnel"),JNt.forEach(t),s$r=r(xGe," \u2014 "),SK=n(xGe,"A",{href:!0});var YNt=s(SK);l$r=r(YNt,"TFFunnelForSequenceClassification"),YNt.forEach(t),i$r=r(xGe," (Funnel Transformer model)"),xGe.forEach(t),d$r=i(ne),TE=n(ne,"LI",{});var $Ge=s(TE);v4e=n($Ge,"STRONG",{});var KNt=s(v4e);c$r=r(KNt,"gpt2"),KNt.forEach(t),f$r=r($Ge," \u2014 "),RK=n($Ge,"A",{href:!0});var ZNt=s(RK);m$r=r(ZNt,"TFGPT2ForSequenceClassification"),ZNt.forEach(t),g$r=r($Ge," (OpenAI GPT-2 model)"),$Ge.forEach(t),h$r=i(ne),ME=n(ne,"LI",{});var kGe=s(ME);F4e=n(kGe,"STRONG",{});var eqt=s(F4e);p$r=r(eqt,"gptj"),eqt.forEach(t),_$r=r(kGe," \u2014 "),PK=n(kGe,"A",{href:!0});var oqt=s(PK);u$r=r(oqt,"TFGPTJForSequenceClassification"),oqt.forEach(t),b$r=r(kGe," (GPT-J model)"),kGe.forEach(t),v$r=i(ne),EE=n(ne,"LI",{});var SGe=s(EE);T4e=n(SGe,"STRONG",{});var rqt=s(T4e);F$r=r(rqt,"layoutlm"),rqt.forEach(t),T$r=r(SGe," \u2014 "),BK=n(SGe,"A",{href:!0});var tqt=s(BK);M$r=r(tqt,"TFLayoutLMForSequenceClassification"),tqt.forEach(t),E$r=r(SGe," (LayoutLM model)"),SGe.forEach(t),C$r=i(ne),CE=n(ne,"LI",{});var RGe=s(CE);M4e=n(RGe,"STRONG",{});var aqt=s(M4e);w$r=r(aqt,"longformer"),aqt.forEach(t),A$r=r(RGe," \u2014 "),IK=n(RGe,"A",{href:!0});var nqt=s(IK);L$r=r(nqt,"TFLongformerForSequenceClassification"),nqt.forEach(t),y$r=r(RGe," (Longformer model)"),RGe.forEach(t),x$r=i(ne),wE=n(ne,"LI",{});var PGe=s(wE);E4e=n(PGe,"STRONG",{});var sqt=s(E4e);$$r=r(sqt,"mobilebert"),sqt.forEach(t),k$r=r(PGe," \u2014 "),NK=n(PGe,"A",{href:!0});var lqt=s(NK);S$r=r(lqt,"TFMobileBertForSequenceClassification"),lqt.forEach(t),R$r=r(PGe," (MobileBERT model)"),PGe.forEach(t),P$r=i(ne),AE=n(ne,"LI",{});var BGe=s(AE);C4e=n(BGe,"STRONG",{});var iqt=s(C4e);B$r=r(iqt,"mpnet"),iqt.forEach(t),I$r=r(BGe," \u2014 "),qK=n(BGe,"A",{href:!0});var dqt=s(qK);N$r=r(dqt,"TFMPNetForSequenceClassification"),dqt.forEach(t),q$r=r(BGe," (MPNet model)"),BGe.forEach(t),j$r=i(ne),LE=n(ne,"LI",{});var IGe=s(LE);w4e=n(IGe,"STRONG",{});var cqt=s(w4e);D$r=r(cqt,"openai-gpt"),cqt.forEach(t),G$r=r(IGe," \u2014 "),jK=n(IGe,"A",{href:!0});var fqt=s(jK);O$r=r(fqt,"TFOpenAIGPTForSequenceClassification"),fqt.forEach(t),V$r=r(IGe," (OpenAI GPT model)"),IGe.forEach(t),X$r=i(ne),yE=n(ne,"LI",{});var NGe=s(yE);A4e=n(NGe,"STRONG",{});var mqt=s(A4e);z$r=r(mqt,"rembert"),mqt.forEach(t),W$r=r(NGe," \u2014 "),DK=n(NGe,"A",{href:!0});var gqt=s(DK);Q$r=r(gqt,"TFRemBertForSequenceClassification"),gqt.forEach(t),H$r=r(NGe," (RemBERT model)"),NGe.forEach(t),U$r=i(ne),xE=n(ne,"LI",{});var qGe=s(xE);L4e=n(qGe,"STRONG",{});var hqt=s(L4e);J$r=r(hqt,"roberta"),hqt.forEach(t),Y$r=r(qGe," \u2014 "),GK=n(qGe,"A",{href:!0});var pqt=s(GK);K$r=r(pqt,"TFRobertaForSequenceClassification"),pqt.forEach(t),Z$r=r(qGe," (RoBERTa model)"),qGe.forEach(t),ekr=i(ne),$E=n(ne,"LI",{});var jGe=s($E);y4e=n(jGe,"STRONG",{});var _qt=s(y4e);okr=r(_qt,"roformer"),_qt.forEach(t),rkr=r(jGe," \u2014 "),OK=n(jGe,"A",{href:!0});var uqt=s(OK);tkr=r(uqt,"TFRoFormerForSequenceClassification"),uqt.forEach(t),akr=r(jGe," (RoFormer model)"),jGe.forEach(t),nkr=i(ne),kE=n(ne,"LI",{});var DGe=s(kE);x4e=n(DGe,"STRONG",{});var bqt=s(x4e);skr=r(bqt,"tapas"),bqt.forEach(t),lkr=r(DGe," \u2014 "),VK=n(DGe,"A",{href:!0});var vqt=s(VK);ikr=r(vqt,"TFTapasForSequenceClassification"),vqt.forEach(t),dkr=r(DGe," (TAPAS model)"),DGe.forEach(t),ckr=i(ne),SE=n(ne,"LI",{});var GGe=s(SE);$4e=n(GGe,"STRONG",{});var Fqt=s($4e);fkr=r(Fqt,"transfo-xl"),Fqt.forEach(t),mkr=r(GGe," \u2014 "),XK=n(GGe,"A",{href:!0});var Tqt=s(XK);gkr=r(Tqt,"TFTransfoXLForSequenceClassification"),Tqt.forEach(t),hkr=r(GGe," (Transformer-XL model)"),GGe.forEach(t),pkr=i(ne),RE=n(ne,"LI",{});var OGe=s(RE);k4e=n(OGe,"STRONG",{});var Mqt=s(k4e);_kr=r(Mqt,"xlm"),Mqt.forEach(t),ukr=r(OGe," \u2014 "),zK=n(OGe,"A",{href:!0});var Eqt=s(zK);bkr=r(Eqt,"TFXLMForSequenceClassification"),Eqt.forEach(t),vkr=r(OGe," (XLM model)"),OGe.forEach(t),Fkr=i(ne),PE=n(ne,"LI",{});var VGe=s(PE);S4e=n(VGe,"STRONG",{});var Cqt=s(S4e);Tkr=r(Cqt,"xlm-roberta"),Cqt.forEach(t),Mkr=r(VGe," \u2014 "),WK=n(VGe,"A",{href:!0});var wqt=s(WK);Ekr=r(wqt,"TFXLMRobertaForSequenceClassification"),wqt.forEach(t),Ckr=r(VGe," (XLM-RoBERTa model)"),VGe.forEach(t),wkr=i(ne),BE=n(ne,"LI",{});var XGe=s(BE);R4e=n(XGe,"STRONG",{});var Aqt=s(R4e);Akr=r(Aqt,"xlnet"),Aqt.forEach(t),Lkr=r(XGe," \u2014 "),QK=n(XGe,"A",{href:!0});var Lqt=s(QK);ykr=r(Lqt,"TFXLNetForSequenceClassification"),Lqt.forEach(t),xkr=r(XGe," (XLNet model)"),XGe.forEach(t),ne.forEach(t),$kr=i(Xl),T(IE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),MWe=i(f),xc=n(f,"H2",{class:!0});var $He=s(xc);NE=n($He,"A",{id:!0,class:!0,href:!0});var yqt=s(NE);P4e=n(yqt,"SPAN",{});var xqt=s(P4e);T(jx.$$.fragment,xqt),xqt.forEach(t),yqt.forEach(t),kkr=i($He),B4e=n($He,"SPAN",{});var $qt=s(B4e);Skr=r($qt,"TFAutoModelForMultipleChoice"),$qt.forEach(t),$He.forEach(t),EWe=i(f),dr=n(f,"DIV",{class:!0});var zl=s(dr);T(Dx.$$.fragment,zl),Rkr=i(zl),$c=n(zl,"P",{});var uae=s($c);Pkr=r(uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HK=n(uae,"A",{href:!0});var kqt=s(HK);Bkr=r(kqt,"from_pretrained()"),kqt.forEach(t),Ikr=r(uae," class method or the "),UK=n(uae,"A",{href:!0});var Sqt=s(UK);Nkr=r(Sqt,"from_config()"),Sqt.forEach(t),qkr=r(uae,` class
method.`),uae.forEach(t),jkr=i(zl),Gx=n(zl,"P",{});var kHe=s(Gx);Dkr=r(kHe,"This class cannot be instantiated directly using "),I4e=n(kHe,"CODE",{});var Rqt=s(I4e);Gkr=r(Rqt,"__init__()"),Rqt.forEach(t),Okr=r(kHe," (throws an error)."),kHe.forEach(t),Vkr=i(zl),Dt=n(zl,"DIV",{class:!0});var $A=s(Dt);T(Ox.$$.fragment,$A),Xkr=i($A),N4e=n($A,"P",{});var Pqt=s(N4e);zkr=r(Pqt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pqt.forEach(t),Wkr=i($A),kc=n($A,"P",{});var bae=s(kc);Qkr=r(bae,`Note:
Loading a model from its configuration file does `),q4e=n(bae,"STRONG",{});var Bqt=s(q4e);Hkr=r(Bqt,"not"),Bqt.forEach(t),Ukr=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(bae,"A",{href:!0});var Iqt=s(JK);Jkr=r(Iqt,"from_pretrained()"),Iqt.forEach(t),Ykr=r(bae," to load the model weights."),bae.forEach(t),Kkr=i($A),T(qE.$$.fragment,$A),$A.forEach(t),Zkr=i(zl),Nr=n(zl,"DIV",{class:!0});var Wl=s(Nr);T(Vx.$$.fragment,Wl),eSr=i(Wl),j4e=n(Wl,"P",{});var Nqt=s(j4e);oSr=r(Nqt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nqt.forEach(t),rSr=i(Wl),hn=n(Wl,"P",{});var kA=s(hn);tSr=r(kA,"The model class to instantiate is selected based on the "),D4e=n(kA,"CODE",{});var qqt=s(D4e);aSr=r(qqt,"model_type"),qqt.forEach(t),nSr=r(kA,` property of the config object (either
passed as an argument or loaded from `),G4e=n(kA,"CODE",{});var jqt=s(G4e);sSr=r(jqt,"pretrained_model_name_or_path"),jqt.forEach(t),lSr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=n(kA,"CODE",{});var Dqt=s(O4e);iSr=r(Dqt,"pretrained_model_name_or_path"),Dqt.forEach(t),dSr=r(kA,":"),kA.forEach(t),cSr=i(Wl),be=n(Wl,"UL",{});var Fe=s(be);jE=n(Fe,"LI",{});var zGe=s(jE);V4e=n(zGe,"STRONG",{});var Gqt=s(V4e);fSr=r(Gqt,"albert"),Gqt.forEach(t),mSr=r(zGe," \u2014 "),YK=n(zGe,"A",{href:!0});var Oqt=s(YK);gSr=r(Oqt,"TFAlbertForMultipleChoice"),Oqt.forEach(t),hSr=r(zGe," (ALBERT model)"),zGe.forEach(t),pSr=i(Fe),DE=n(Fe,"LI",{});var WGe=s(DE);X4e=n(WGe,"STRONG",{});var Vqt=s(X4e);_Sr=r(Vqt,"bert"),Vqt.forEach(t),uSr=r(WGe," \u2014 "),KK=n(WGe,"A",{href:!0});var Xqt=s(KK);bSr=r(Xqt,"TFBertForMultipleChoice"),Xqt.forEach(t),vSr=r(WGe," (BERT model)"),WGe.forEach(t),FSr=i(Fe),GE=n(Fe,"LI",{});var QGe=s(GE);z4e=n(QGe,"STRONG",{});var zqt=s(z4e);TSr=r(zqt,"camembert"),zqt.forEach(t),MSr=r(QGe," \u2014 "),ZK=n(QGe,"A",{href:!0});var Wqt=s(ZK);ESr=r(Wqt,"TFCamembertForMultipleChoice"),Wqt.forEach(t),CSr=r(QGe," (CamemBERT model)"),QGe.forEach(t),wSr=i(Fe),OE=n(Fe,"LI",{});var HGe=s(OE);W4e=n(HGe,"STRONG",{});var Qqt=s(W4e);ASr=r(Qqt,"convbert"),Qqt.forEach(t),LSr=r(HGe," \u2014 "),eZ=n(HGe,"A",{href:!0});var Hqt=s(eZ);ySr=r(Hqt,"TFConvBertForMultipleChoice"),Hqt.forEach(t),xSr=r(HGe," (ConvBERT model)"),HGe.forEach(t),$Sr=i(Fe),VE=n(Fe,"LI",{});var UGe=s(VE);Q4e=n(UGe,"STRONG",{});var Uqt=s(Q4e);kSr=r(Uqt,"distilbert"),Uqt.forEach(t),SSr=r(UGe," \u2014 "),oZ=n(UGe,"A",{href:!0});var Jqt=s(oZ);RSr=r(Jqt,"TFDistilBertForMultipleChoice"),Jqt.forEach(t),PSr=r(UGe," (DistilBERT model)"),UGe.forEach(t),BSr=i(Fe),XE=n(Fe,"LI",{});var JGe=s(XE);H4e=n(JGe,"STRONG",{});var Yqt=s(H4e);ISr=r(Yqt,"electra"),Yqt.forEach(t),NSr=r(JGe," \u2014 "),rZ=n(JGe,"A",{href:!0});var Kqt=s(rZ);qSr=r(Kqt,"TFElectraForMultipleChoice"),Kqt.forEach(t),jSr=r(JGe," (ELECTRA model)"),JGe.forEach(t),DSr=i(Fe),zE=n(Fe,"LI",{});var YGe=s(zE);U4e=n(YGe,"STRONG",{});var Zqt=s(U4e);GSr=r(Zqt,"flaubert"),Zqt.forEach(t),OSr=r(YGe," \u2014 "),tZ=n(YGe,"A",{href:!0});var ejt=s(tZ);VSr=r(ejt,"TFFlaubertForMultipleChoice"),ejt.forEach(t),XSr=r(YGe," (FlauBERT model)"),YGe.forEach(t),zSr=i(Fe),WE=n(Fe,"LI",{});var KGe=s(WE);J4e=n(KGe,"STRONG",{});var ojt=s(J4e);WSr=r(ojt,"funnel"),ojt.forEach(t),QSr=r(KGe," \u2014 "),aZ=n(KGe,"A",{href:!0});var rjt=s(aZ);HSr=r(rjt,"TFFunnelForMultipleChoice"),rjt.forEach(t),USr=r(KGe," (Funnel Transformer model)"),KGe.forEach(t),JSr=i(Fe),QE=n(Fe,"LI",{});var ZGe=s(QE);Y4e=n(ZGe,"STRONG",{});var tjt=s(Y4e);YSr=r(tjt,"longformer"),tjt.forEach(t),KSr=r(ZGe," \u2014 "),nZ=n(ZGe,"A",{href:!0});var ajt=s(nZ);ZSr=r(ajt,"TFLongformerForMultipleChoice"),ajt.forEach(t),eRr=r(ZGe," (Longformer model)"),ZGe.forEach(t),oRr=i(Fe),HE=n(Fe,"LI",{});var eOe=s(HE);K4e=n(eOe,"STRONG",{});var njt=s(K4e);rRr=r(njt,"mobilebert"),njt.forEach(t),tRr=r(eOe," \u2014 "),sZ=n(eOe,"A",{href:!0});var sjt=s(sZ);aRr=r(sjt,"TFMobileBertForMultipleChoice"),sjt.forEach(t),nRr=r(eOe," (MobileBERT model)"),eOe.forEach(t),sRr=i(Fe),UE=n(Fe,"LI",{});var oOe=s(UE);Z4e=n(oOe,"STRONG",{});var ljt=s(Z4e);lRr=r(ljt,"mpnet"),ljt.forEach(t),iRr=r(oOe," \u2014 "),lZ=n(oOe,"A",{href:!0});var ijt=s(lZ);dRr=r(ijt,"TFMPNetForMultipleChoice"),ijt.forEach(t),cRr=r(oOe," (MPNet model)"),oOe.forEach(t),fRr=i(Fe),JE=n(Fe,"LI",{});var rOe=s(JE);eEe=n(rOe,"STRONG",{});var djt=s(eEe);mRr=r(djt,"rembert"),djt.forEach(t),gRr=r(rOe," \u2014 "),iZ=n(rOe,"A",{href:!0});var cjt=s(iZ);hRr=r(cjt,"TFRemBertForMultipleChoice"),cjt.forEach(t),pRr=r(rOe," (RemBERT model)"),rOe.forEach(t),_Rr=i(Fe),YE=n(Fe,"LI",{});var tOe=s(YE);oEe=n(tOe,"STRONG",{});var fjt=s(oEe);uRr=r(fjt,"roberta"),fjt.forEach(t),bRr=r(tOe," \u2014 "),dZ=n(tOe,"A",{href:!0});var mjt=s(dZ);vRr=r(mjt,"TFRobertaForMultipleChoice"),mjt.forEach(t),FRr=r(tOe," (RoBERTa model)"),tOe.forEach(t),TRr=i(Fe),KE=n(Fe,"LI",{});var aOe=s(KE);rEe=n(aOe,"STRONG",{});var gjt=s(rEe);MRr=r(gjt,"roformer"),gjt.forEach(t),ERr=r(aOe," \u2014 "),cZ=n(aOe,"A",{href:!0});var hjt=s(cZ);CRr=r(hjt,"TFRoFormerForMultipleChoice"),hjt.forEach(t),wRr=r(aOe," (RoFormer model)"),aOe.forEach(t),ARr=i(Fe),ZE=n(Fe,"LI",{});var nOe=s(ZE);tEe=n(nOe,"STRONG",{});var pjt=s(tEe);LRr=r(pjt,"xlm"),pjt.forEach(t),yRr=r(nOe," \u2014 "),fZ=n(nOe,"A",{href:!0});var _jt=s(fZ);xRr=r(_jt,"TFXLMForMultipleChoice"),_jt.forEach(t),$Rr=r(nOe," (XLM model)"),nOe.forEach(t),kRr=i(Fe),eC=n(Fe,"LI",{});var sOe=s(eC);aEe=n(sOe,"STRONG",{});var ujt=s(aEe);SRr=r(ujt,"xlm-roberta"),ujt.forEach(t),RRr=r(sOe," \u2014 "),mZ=n(sOe,"A",{href:!0});var bjt=s(mZ);PRr=r(bjt,"TFXLMRobertaForMultipleChoice"),bjt.forEach(t),BRr=r(sOe," (XLM-RoBERTa model)"),sOe.forEach(t),IRr=i(Fe),oC=n(Fe,"LI",{});var lOe=s(oC);nEe=n(lOe,"STRONG",{});var vjt=s(nEe);NRr=r(vjt,"xlnet"),vjt.forEach(t),qRr=r(lOe," \u2014 "),gZ=n(lOe,"A",{href:!0});var Fjt=s(gZ);jRr=r(Fjt,"TFXLNetForMultipleChoice"),Fjt.forEach(t),DRr=r(lOe," (XLNet model)"),lOe.forEach(t),Fe.forEach(t),GRr=i(Wl),T(rC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),CWe=i(f),Sc=n(f,"H2",{class:!0});var SHe=s(Sc);tC=n(SHe,"A",{id:!0,class:!0,href:!0});var Tjt=s(tC);sEe=n(Tjt,"SPAN",{});var Mjt=s(sEe);T(Xx.$$.fragment,Mjt),Mjt.forEach(t),Tjt.forEach(t),ORr=i(SHe),lEe=n(SHe,"SPAN",{});var Ejt=s(lEe);VRr=r(Ejt,"TFAutoModelForNextSentencePrediction"),Ejt.forEach(t),SHe.forEach(t),wWe=i(f),cr=n(f,"DIV",{class:!0});var Ql=s(cr);T(zx.$$.fragment,Ql),XRr=i(Ql),Rc=n(Ql,"P",{});var vae=s(Rc);zRr=r(vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hZ=n(vae,"A",{href:!0});var Cjt=s(hZ);WRr=r(Cjt,"from_pretrained()"),Cjt.forEach(t),QRr=r(vae," class method or the "),pZ=n(vae,"A",{href:!0});var wjt=s(pZ);HRr=r(wjt,"from_config()"),wjt.forEach(t),URr=r(vae,` class
method.`),vae.forEach(t),JRr=i(Ql),Wx=n(Ql,"P",{});var RHe=s(Wx);YRr=r(RHe,"This class cannot be instantiated directly using "),iEe=n(RHe,"CODE",{});var Ajt=s(iEe);KRr=r(Ajt,"__init__()"),Ajt.forEach(t),ZRr=r(RHe," (throws an error)."),RHe.forEach(t),ePr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var SA=s(Gt);T(Qx.$$.fragment,SA),oPr=i(SA),dEe=n(SA,"P",{});var Ljt=s(dEe);rPr=r(Ljt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ljt.forEach(t),tPr=i(SA),Pc=n(SA,"P",{});var Fae=s(Pc);aPr=r(Fae,`Note:
Loading a model from its configuration file does `),cEe=n(Fae,"STRONG",{});var yjt=s(cEe);nPr=r(yjt,"not"),yjt.forEach(t),sPr=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(Fae,"A",{href:!0});var xjt=s(_Z);lPr=r(xjt,"from_pretrained()"),xjt.forEach(t),iPr=r(Fae," to load the model weights."),Fae.forEach(t),dPr=i(SA),T(aC.$$.fragment,SA),SA.forEach(t),cPr=i(Ql),qr=n(Ql,"DIV",{class:!0});var Hl=s(qr);T(Hx.$$.fragment,Hl),fPr=i(Hl),fEe=n(Hl,"P",{});var $jt=s(fEe);mPr=r($jt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$jt.forEach(t),gPr=i(Hl),pn=n(Hl,"P",{});var RA=s(pn);hPr=r(RA,"The model class to instantiate is selected based on the "),mEe=n(RA,"CODE",{});var kjt=s(mEe);pPr=r(kjt,"model_type"),kjt.forEach(t),_Pr=r(RA,` property of the config object (either
passed as an argument or loaded from `),gEe=n(RA,"CODE",{});var Sjt=s(gEe);uPr=r(Sjt,"pretrained_model_name_or_path"),Sjt.forEach(t),bPr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=n(RA,"CODE",{});var Rjt=s(hEe);vPr=r(Rjt,"pretrained_model_name_or_path"),Rjt.forEach(t),FPr=r(RA,":"),RA.forEach(t),TPr=i(Hl),Ux=n(Hl,"UL",{});var PHe=s(Ux);nC=n(PHe,"LI",{});var iOe=s(nC);pEe=n(iOe,"STRONG",{});var Pjt=s(pEe);MPr=r(Pjt,"bert"),Pjt.forEach(t),EPr=r(iOe," \u2014 "),uZ=n(iOe,"A",{href:!0});var Bjt=s(uZ);CPr=r(Bjt,"TFBertForNextSentencePrediction"),Bjt.forEach(t),wPr=r(iOe," (BERT model)"),iOe.forEach(t),APr=i(PHe),sC=n(PHe,"LI",{});var dOe=s(sC);_Ee=n(dOe,"STRONG",{});var Ijt=s(_Ee);LPr=r(Ijt,"mobilebert"),Ijt.forEach(t),yPr=r(dOe," \u2014 "),bZ=n(dOe,"A",{href:!0});var Njt=s(bZ);xPr=r(Njt,"TFMobileBertForNextSentencePrediction"),Njt.forEach(t),$Pr=r(dOe," (MobileBERT model)"),dOe.forEach(t),PHe.forEach(t),kPr=i(Hl),T(lC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),AWe=i(f),Bc=n(f,"H2",{class:!0});var BHe=s(Bc);iC=n(BHe,"A",{id:!0,class:!0,href:!0});var qjt=s(iC);uEe=n(qjt,"SPAN",{});var jjt=s(uEe);T(Jx.$$.fragment,jjt),jjt.forEach(t),qjt.forEach(t),SPr=i(BHe),bEe=n(BHe,"SPAN",{});var Djt=s(bEe);RPr=r(Djt,"TFAutoModelForTableQuestionAnswering"),Djt.forEach(t),BHe.forEach(t),LWe=i(f),fr=n(f,"DIV",{class:!0});var Ul=s(fr);T(Yx.$$.fragment,Ul),PPr=i(Ul),Ic=n(Ul,"P",{});var Tae=s(Ic);BPr=r(Tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vZ=n(Tae,"A",{href:!0});var Gjt=s(vZ);IPr=r(Gjt,"from_pretrained()"),Gjt.forEach(t),NPr=r(Tae," class method or the "),FZ=n(Tae,"A",{href:!0});var Ojt=s(FZ);qPr=r(Ojt,"from_config()"),Ojt.forEach(t),jPr=r(Tae,` class
method.`),Tae.forEach(t),DPr=i(Ul),Kx=n(Ul,"P",{});var IHe=s(Kx);GPr=r(IHe,"This class cannot be instantiated directly using "),vEe=n(IHe,"CODE",{});var Vjt=s(vEe);OPr=r(Vjt,"__init__()"),Vjt.forEach(t),VPr=r(IHe," (throws an error)."),IHe.forEach(t),XPr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var PA=s(Ot);T(Zx.$$.fragment,PA),zPr=i(PA),FEe=n(PA,"P",{});var Xjt=s(FEe);WPr=r(Xjt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Xjt.forEach(t),QPr=i(PA),Nc=n(PA,"P",{});var Mae=s(Nc);HPr=r(Mae,`Note:
Loading a model from its configuration file does `),TEe=n(Mae,"STRONG",{});var zjt=s(TEe);UPr=r(zjt,"not"),zjt.forEach(t),JPr=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(Mae,"A",{href:!0});var Wjt=s(TZ);YPr=r(Wjt,"from_pretrained()"),Wjt.forEach(t),KPr=r(Mae," to load the model weights."),Mae.forEach(t),ZPr=i(PA),T(dC.$$.fragment,PA),PA.forEach(t),eBr=i(Ul),jr=n(Ul,"DIV",{class:!0});var Jl=s(jr);T(e$.$$.fragment,Jl),oBr=i(Jl),MEe=n(Jl,"P",{});var Qjt=s(MEe);rBr=r(Qjt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Qjt.forEach(t),tBr=i(Jl),_n=n(Jl,"P",{});var BA=s(_n);aBr=r(BA,"The model class to instantiate is selected based on the "),EEe=n(BA,"CODE",{});var Hjt=s(EEe);nBr=r(Hjt,"model_type"),Hjt.forEach(t),sBr=r(BA,` property of the config object (either
passed as an argument or loaded from `),CEe=n(BA,"CODE",{});var Ujt=s(CEe);lBr=r(Ujt,"pretrained_model_name_or_path"),Ujt.forEach(t),iBr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=n(BA,"CODE",{});var Jjt=s(wEe);dBr=r(Jjt,"pretrained_model_name_or_path"),Jjt.forEach(t),cBr=r(BA,":"),BA.forEach(t),fBr=i(Jl),AEe=n(Jl,"UL",{});var Yjt=s(AEe);cC=n(Yjt,"LI",{});var cOe=s(cC);LEe=n(cOe,"STRONG",{});var Kjt=s(LEe);mBr=r(Kjt,"tapas"),Kjt.forEach(t),gBr=r(cOe," \u2014 "),MZ=n(cOe,"A",{href:!0});var Zjt=s(MZ);hBr=r(Zjt,"TFTapasForQuestionAnswering"),Zjt.forEach(t),pBr=r(cOe," (TAPAS model)"),cOe.forEach(t),Yjt.forEach(t),_Br=i(Jl),T(fC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),yWe=i(f),qc=n(f,"H2",{class:!0});var NHe=s(qc);mC=n(NHe,"A",{id:!0,class:!0,href:!0});var eDt=s(mC);yEe=n(eDt,"SPAN",{});var oDt=s(yEe);T(o$.$$.fragment,oDt),oDt.forEach(t),eDt.forEach(t),uBr=i(NHe),xEe=n(NHe,"SPAN",{});var rDt=s(xEe);bBr=r(rDt,"TFAutoModelForTokenClassification"),rDt.forEach(t),NHe.forEach(t),xWe=i(f),mr=n(f,"DIV",{class:!0});var Yl=s(mr);T(r$.$$.fragment,Yl),vBr=i(Yl),jc=n(Yl,"P",{});var Eae=s(jc);FBr=r(Eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EZ=n(Eae,"A",{href:!0});var tDt=s(EZ);TBr=r(tDt,"from_pretrained()"),tDt.forEach(t),MBr=r(Eae," class method or the "),CZ=n(Eae,"A",{href:!0});var aDt=s(CZ);EBr=r(aDt,"from_config()"),aDt.forEach(t),CBr=r(Eae,` class
method.`),Eae.forEach(t),wBr=i(Yl),t$=n(Yl,"P",{});var qHe=s(t$);ABr=r(qHe,"This class cannot be instantiated directly using "),$Ee=n(qHe,"CODE",{});var nDt=s($Ee);LBr=r(nDt,"__init__()"),nDt.forEach(t),yBr=r(qHe," (throws an error)."),qHe.forEach(t),xBr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var IA=s(Vt);T(a$.$$.fragment,IA),$Br=i(IA),kEe=n(IA,"P",{});var sDt=s(kEe);kBr=r(sDt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sDt.forEach(t),SBr=i(IA),Dc=n(IA,"P",{});var Cae=s(Dc);RBr=r(Cae,`Note:
Loading a model from its configuration file does `),SEe=n(Cae,"STRONG",{});var lDt=s(SEe);PBr=r(lDt,"not"),lDt.forEach(t),BBr=r(Cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=n(Cae,"A",{href:!0});var iDt=s(wZ);IBr=r(iDt,"from_pretrained()"),iDt.forEach(t),NBr=r(Cae," to load the model weights."),Cae.forEach(t),qBr=i(IA),T(gC.$$.fragment,IA),IA.forEach(t),jBr=i(Yl),Dr=n(Yl,"DIV",{class:!0});var Kl=s(Dr);T(n$.$$.fragment,Kl),DBr=i(Kl),REe=n(Kl,"P",{});var dDt=s(REe);GBr=r(dDt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dDt.forEach(t),OBr=i(Kl),un=n(Kl,"P",{});var NA=s(un);VBr=r(NA,"The model class to instantiate is selected based on the "),PEe=n(NA,"CODE",{});var cDt=s(PEe);XBr=r(cDt,"model_type"),cDt.forEach(t),zBr=r(NA,` property of the config object (either
passed as an argument or loaded from `),BEe=n(NA,"CODE",{});var fDt=s(BEe);WBr=r(fDt,"pretrained_model_name_or_path"),fDt.forEach(t),QBr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=n(NA,"CODE",{});var mDt=s(IEe);HBr=r(mDt,"pretrained_model_name_or_path"),mDt.forEach(t),UBr=r(NA,":"),NA.forEach(t),JBr=i(Kl),de=n(Kl,"UL",{});var he=s(de);hC=n(he,"LI",{});var fOe=s(hC);NEe=n(fOe,"STRONG",{});var gDt=s(NEe);YBr=r(gDt,"albert"),gDt.forEach(t),KBr=r(fOe," \u2014 "),AZ=n(fOe,"A",{href:!0});var hDt=s(AZ);ZBr=r(hDt,"TFAlbertForTokenClassification"),hDt.forEach(t),eIr=r(fOe," (ALBERT model)"),fOe.forEach(t),oIr=i(he),pC=n(he,"LI",{});var mOe=s(pC);qEe=n(mOe,"STRONG",{});var pDt=s(qEe);rIr=r(pDt,"bert"),pDt.forEach(t),tIr=r(mOe," \u2014 "),LZ=n(mOe,"A",{href:!0});var _Dt=s(LZ);aIr=r(_Dt,"TFBertForTokenClassification"),_Dt.forEach(t),nIr=r(mOe," (BERT model)"),mOe.forEach(t),sIr=i(he),_C=n(he,"LI",{});var gOe=s(_C);jEe=n(gOe,"STRONG",{});var uDt=s(jEe);lIr=r(uDt,"camembert"),uDt.forEach(t),iIr=r(gOe," \u2014 "),yZ=n(gOe,"A",{href:!0});var bDt=s(yZ);dIr=r(bDt,"TFCamembertForTokenClassification"),bDt.forEach(t),cIr=r(gOe," (CamemBERT model)"),gOe.forEach(t),fIr=i(he),uC=n(he,"LI",{});var hOe=s(uC);DEe=n(hOe,"STRONG",{});var vDt=s(DEe);mIr=r(vDt,"convbert"),vDt.forEach(t),gIr=r(hOe," \u2014 "),xZ=n(hOe,"A",{href:!0});var FDt=s(xZ);hIr=r(FDt,"TFConvBertForTokenClassification"),FDt.forEach(t),pIr=r(hOe," (ConvBERT model)"),hOe.forEach(t),_Ir=i(he),bC=n(he,"LI",{});var pOe=s(bC);GEe=n(pOe,"STRONG",{});var TDt=s(GEe);uIr=r(TDt,"deberta"),TDt.forEach(t),bIr=r(pOe," \u2014 "),$Z=n(pOe,"A",{href:!0});var MDt=s($Z);vIr=r(MDt,"TFDebertaForTokenClassification"),MDt.forEach(t),FIr=r(pOe," (DeBERTa model)"),pOe.forEach(t),TIr=i(he),vC=n(he,"LI",{});var _Oe=s(vC);OEe=n(_Oe,"STRONG",{});var EDt=s(OEe);MIr=r(EDt,"deberta-v2"),EDt.forEach(t),EIr=r(_Oe," \u2014 "),kZ=n(_Oe,"A",{href:!0});var CDt=s(kZ);CIr=r(CDt,"TFDebertaV2ForTokenClassification"),CDt.forEach(t),wIr=r(_Oe," (DeBERTa-v2 model)"),_Oe.forEach(t),AIr=i(he),FC=n(he,"LI",{});var uOe=s(FC);VEe=n(uOe,"STRONG",{});var wDt=s(VEe);LIr=r(wDt,"distilbert"),wDt.forEach(t),yIr=r(uOe," \u2014 "),SZ=n(uOe,"A",{href:!0});var ADt=s(SZ);xIr=r(ADt,"TFDistilBertForTokenClassification"),ADt.forEach(t),$Ir=r(uOe," (DistilBERT model)"),uOe.forEach(t),kIr=i(he),TC=n(he,"LI",{});var bOe=s(TC);XEe=n(bOe,"STRONG",{});var LDt=s(XEe);SIr=r(LDt,"electra"),LDt.forEach(t),RIr=r(bOe," \u2014 "),RZ=n(bOe,"A",{href:!0});var yDt=s(RZ);PIr=r(yDt,"TFElectraForTokenClassification"),yDt.forEach(t),BIr=r(bOe," (ELECTRA model)"),bOe.forEach(t),IIr=i(he),MC=n(he,"LI",{});var vOe=s(MC);zEe=n(vOe,"STRONG",{});var xDt=s(zEe);NIr=r(xDt,"flaubert"),xDt.forEach(t),qIr=r(vOe," \u2014 "),PZ=n(vOe,"A",{href:!0});var $Dt=s(PZ);jIr=r($Dt,"TFFlaubertForTokenClassification"),$Dt.forEach(t),DIr=r(vOe," (FlauBERT model)"),vOe.forEach(t),GIr=i(he),EC=n(he,"LI",{});var FOe=s(EC);WEe=n(FOe,"STRONG",{});var kDt=s(WEe);OIr=r(kDt,"funnel"),kDt.forEach(t),VIr=r(FOe," \u2014 "),BZ=n(FOe,"A",{href:!0});var SDt=s(BZ);XIr=r(SDt,"TFFunnelForTokenClassification"),SDt.forEach(t),zIr=r(FOe," (Funnel Transformer model)"),FOe.forEach(t),WIr=i(he),CC=n(he,"LI",{});var TOe=s(CC);QEe=n(TOe,"STRONG",{});var RDt=s(QEe);QIr=r(RDt,"layoutlm"),RDt.forEach(t),HIr=r(TOe," \u2014 "),IZ=n(TOe,"A",{href:!0});var PDt=s(IZ);UIr=r(PDt,"TFLayoutLMForTokenClassification"),PDt.forEach(t),JIr=r(TOe," (LayoutLM model)"),TOe.forEach(t),YIr=i(he),wC=n(he,"LI",{});var MOe=s(wC);HEe=n(MOe,"STRONG",{});var BDt=s(HEe);KIr=r(BDt,"longformer"),BDt.forEach(t),ZIr=r(MOe," \u2014 "),NZ=n(MOe,"A",{href:!0});var IDt=s(NZ);eNr=r(IDt,"TFLongformerForTokenClassification"),IDt.forEach(t),oNr=r(MOe," (Longformer model)"),MOe.forEach(t),rNr=i(he),AC=n(he,"LI",{});var EOe=s(AC);UEe=n(EOe,"STRONG",{});var NDt=s(UEe);tNr=r(NDt,"mobilebert"),NDt.forEach(t),aNr=r(EOe," \u2014 "),qZ=n(EOe,"A",{href:!0});var qDt=s(qZ);nNr=r(qDt,"TFMobileBertForTokenClassification"),qDt.forEach(t),sNr=r(EOe," (MobileBERT model)"),EOe.forEach(t),lNr=i(he),LC=n(he,"LI",{});var COe=s(LC);JEe=n(COe,"STRONG",{});var jDt=s(JEe);iNr=r(jDt,"mpnet"),jDt.forEach(t),dNr=r(COe," \u2014 "),jZ=n(COe,"A",{href:!0});var DDt=s(jZ);cNr=r(DDt,"TFMPNetForTokenClassification"),DDt.forEach(t),fNr=r(COe," (MPNet model)"),COe.forEach(t),mNr=i(he),yC=n(he,"LI",{});var wOe=s(yC);YEe=n(wOe,"STRONG",{});var GDt=s(YEe);gNr=r(GDt,"rembert"),GDt.forEach(t),hNr=r(wOe," \u2014 "),DZ=n(wOe,"A",{href:!0});var ODt=s(DZ);pNr=r(ODt,"TFRemBertForTokenClassification"),ODt.forEach(t),_Nr=r(wOe," (RemBERT model)"),wOe.forEach(t),uNr=i(he),xC=n(he,"LI",{});var AOe=s(xC);KEe=n(AOe,"STRONG",{});var VDt=s(KEe);bNr=r(VDt,"roberta"),VDt.forEach(t),vNr=r(AOe," \u2014 "),GZ=n(AOe,"A",{href:!0});var XDt=s(GZ);FNr=r(XDt,"TFRobertaForTokenClassification"),XDt.forEach(t),TNr=r(AOe," (RoBERTa model)"),AOe.forEach(t),MNr=i(he),$C=n(he,"LI",{});var LOe=s($C);ZEe=n(LOe,"STRONG",{});var zDt=s(ZEe);ENr=r(zDt,"roformer"),zDt.forEach(t),CNr=r(LOe," \u2014 "),OZ=n(LOe,"A",{href:!0});var WDt=s(OZ);wNr=r(WDt,"TFRoFormerForTokenClassification"),WDt.forEach(t),ANr=r(LOe," (RoFormer model)"),LOe.forEach(t),LNr=i(he),kC=n(he,"LI",{});var yOe=s(kC);eCe=n(yOe,"STRONG",{});var QDt=s(eCe);yNr=r(QDt,"xlm"),QDt.forEach(t),xNr=r(yOe," \u2014 "),VZ=n(yOe,"A",{href:!0});var HDt=s(VZ);$Nr=r(HDt,"TFXLMForTokenClassification"),HDt.forEach(t),kNr=r(yOe," (XLM model)"),yOe.forEach(t),SNr=i(he),SC=n(he,"LI",{});var xOe=s(SC);oCe=n(xOe,"STRONG",{});var UDt=s(oCe);RNr=r(UDt,"xlm-roberta"),UDt.forEach(t),PNr=r(xOe," \u2014 "),XZ=n(xOe,"A",{href:!0});var JDt=s(XZ);BNr=r(JDt,"TFXLMRobertaForTokenClassification"),JDt.forEach(t),INr=r(xOe," (XLM-RoBERTa model)"),xOe.forEach(t),NNr=i(he),RC=n(he,"LI",{});var $Oe=s(RC);rCe=n($Oe,"STRONG",{});var YDt=s(rCe);qNr=r(YDt,"xlnet"),YDt.forEach(t),jNr=r($Oe," \u2014 "),zZ=n($Oe,"A",{href:!0});var KDt=s(zZ);DNr=r(KDt,"TFXLNetForTokenClassification"),KDt.forEach(t),GNr=r($Oe," (XLNet model)"),$Oe.forEach(t),he.forEach(t),ONr=i(Kl),T(PC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),$We=i(f),Gc=n(f,"H2",{class:!0});var jHe=s(Gc);BC=n(jHe,"A",{id:!0,class:!0,href:!0});var ZDt=s(BC);tCe=n(ZDt,"SPAN",{});var eGt=s(tCe);T(s$.$$.fragment,eGt),eGt.forEach(t),ZDt.forEach(t),VNr=i(jHe),aCe=n(jHe,"SPAN",{});var oGt=s(aCe);XNr=r(oGt,"TFAutoModelForQuestionAnswering"),oGt.forEach(t),jHe.forEach(t),kWe=i(f),gr=n(f,"DIV",{class:!0});var Zl=s(gr);T(l$.$$.fragment,Zl),zNr=i(Zl),Oc=n(Zl,"P",{});var wae=s(Oc);WNr=r(wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WZ=n(wae,"A",{href:!0});var rGt=s(WZ);QNr=r(rGt,"from_pretrained()"),rGt.forEach(t),HNr=r(wae," class method or the "),QZ=n(wae,"A",{href:!0});var tGt=s(QZ);UNr=r(tGt,"from_config()"),tGt.forEach(t),JNr=r(wae,` class
method.`),wae.forEach(t),YNr=i(Zl),i$=n(Zl,"P",{});var DHe=s(i$);KNr=r(DHe,"This class cannot be instantiated directly using "),nCe=n(DHe,"CODE",{});var aGt=s(nCe);ZNr=r(aGt,"__init__()"),aGt.forEach(t),eqr=r(DHe," (throws an error)."),DHe.forEach(t),oqr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var qA=s(Xt);T(d$.$$.fragment,qA),rqr=i(qA),sCe=n(qA,"P",{});var nGt=s(sCe);tqr=r(nGt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nGt.forEach(t),aqr=i(qA),Vc=n(qA,"P",{});var Aae=s(Vc);nqr=r(Aae,`Note:
Loading a model from its configuration file does `),lCe=n(Aae,"STRONG",{});var sGt=s(lCe);sqr=r(sGt,"not"),sGt.forEach(t),lqr=r(Aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=n(Aae,"A",{href:!0});var lGt=s(HZ);iqr=r(lGt,"from_pretrained()"),lGt.forEach(t),dqr=r(Aae," to load the model weights."),Aae.forEach(t),cqr=i(qA),T(IC.$$.fragment,qA),qA.forEach(t),fqr=i(Zl),Gr=n(Zl,"DIV",{class:!0});var ei=s(Gr);T(c$.$$.fragment,ei),mqr=i(ei),iCe=n(ei,"P",{});var iGt=s(iCe);gqr=r(iGt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iGt.forEach(t),hqr=i(ei),bn=n(ei,"P",{});var jA=s(bn);pqr=r(jA,"The model class to instantiate is selected based on the "),dCe=n(jA,"CODE",{});var dGt=s(dCe);_qr=r(dGt,"model_type"),dGt.forEach(t),uqr=r(jA,` property of the config object (either
passed as an argument or loaded from `),cCe=n(jA,"CODE",{});var cGt=s(cCe);bqr=r(cGt,"pretrained_model_name_or_path"),cGt.forEach(t),vqr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=n(jA,"CODE",{});var fGt=s(fCe);Fqr=r(fGt,"pretrained_model_name_or_path"),fGt.forEach(t),Tqr=r(jA,":"),jA.forEach(t),Mqr=i(ei),ce=n(ei,"UL",{});var pe=s(ce);NC=n(pe,"LI",{});var kOe=s(NC);mCe=n(kOe,"STRONG",{});var mGt=s(mCe);Eqr=r(mGt,"albert"),mGt.forEach(t),Cqr=r(kOe," \u2014 "),UZ=n(kOe,"A",{href:!0});var gGt=s(UZ);wqr=r(gGt,"TFAlbertForQuestionAnswering"),gGt.forEach(t),Aqr=r(kOe," (ALBERT model)"),kOe.forEach(t),Lqr=i(pe),qC=n(pe,"LI",{});var SOe=s(qC);gCe=n(SOe,"STRONG",{});var hGt=s(gCe);yqr=r(hGt,"bert"),hGt.forEach(t),xqr=r(SOe," \u2014 "),JZ=n(SOe,"A",{href:!0});var pGt=s(JZ);$qr=r(pGt,"TFBertForQuestionAnswering"),pGt.forEach(t),kqr=r(SOe," (BERT model)"),SOe.forEach(t),Sqr=i(pe),jC=n(pe,"LI",{});var ROe=s(jC);hCe=n(ROe,"STRONG",{});var _Gt=s(hCe);Rqr=r(_Gt,"camembert"),_Gt.forEach(t),Pqr=r(ROe," \u2014 "),YZ=n(ROe,"A",{href:!0});var uGt=s(YZ);Bqr=r(uGt,"TFCamembertForQuestionAnswering"),uGt.forEach(t),Iqr=r(ROe," (CamemBERT model)"),ROe.forEach(t),Nqr=i(pe),DC=n(pe,"LI",{});var POe=s(DC);pCe=n(POe,"STRONG",{});var bGt=s(pCe);qqr=r(bGt,"convbert"),bGt.forEach(t),jqr=r(POe," \u2014 "),KZ=n(POe,"A",{href:!0});var vGt=s(KZ);Dqr=r(vGt,"TFConvBertForQuestionAnswering"),vGt.forEach(t),Gqr=r(POe," (ConvBERT model)"),POe.forEach(t),Oqr=i(pe),GC=n(pe,"LI",{});var BOe=s(GC);_Ce=n(BOe,"STRONG",{});var FGt=s(_Ce);Vqr=r(FGt,"deberta"),FGt.forEach(t),Xqr=r(BOe," \u2014 "),ZZ=n(BOe,"A",{href:!0});var TGt=s(ZZ);zqr=r(TGt,"TFDebertaForQuestionAnswering"),TGt.forEach(t),Wqr=r(BOe," (DeBERTa model)"),BOe.forEach(t),Qqr=i(pe),OC=n(pe,"LI",{});var IOe=s(OC);uCe=n(IOe,"STRONG",{});var MGt=s(uCe);Hqr=r(MGt,"deberta-v2"),MGt.forEach(t),Uqr=r(IOe," \u2014 "),eee=n(IOe,"A",{href:!0});var EGt=s(eee);Jqr=r(EGt,"TFDebertaV2ForQuestionAnswering"),EGt.forEach(t),Yqr=r(IOe," (DeBERTa-v2 model)"),IOe.forEach(t),Kqr=i(pe),VC=n(pe,"LI",{});var NOe=s(VC);bCe=n(NOe,"STRONG",{});var CGt=s(bCe);Zqr=r(CGt,"distilbert"),CGt.forEach(t),ejr=r(NOe," \u2014 "),oee=n(NOe,"A",{href:!0});var wGt=s(oee);ojr=r(wGt,"TFDistilBertForQuestionAnswering"),wGt.forEach(t),rjr=r(NOe," (DistilBERT model)"),NOe.forEach(t),tjr=i(pe),XC=n(pe,"LI",{});var qOe=s(XC);vCe=n(qOe,"STRONG",{});var AGt=s(vCe);ajr=r(AGt,"electra"),AGt.forEach(t),njr=r(qOe," \u2014 "),ree=n(qOe,"A",{href:!0});var LGt=s(ree);sjr=r(LGt,"TFElectraForQuestionAnswering"),LGt.forEach(t),ljr=r(qOe," (ELECTRA model)"),qOe.forEach(t),ijr=i(pe),zC=n(pe,"LI",{});var jOe=s(zC);FCe=n(jOe,"STRONG",{});var yGt=s(FCe);djr=r(yGt,"flaubert"),yGt.forEach(t),cjr=r(jOe," \u2014 "),tee=n(jOe,"A",{href:!0});var xGt=s(tee);fjr=r(xGt,"TFFlaubertForQuestionAnsweringSimple"),xGt.forEach(t),mjr=r(jOe," (FlauBERT model)"),jOe.forEach(t),gjr=i(pe),WC=n(pe,"LI",{});var DOe=s(WC);TCe=n(DOe,"STRONG",{});var $Gt=s(TCe);hjr=r($Gt,"funnel"),$Gt.forEach(t),pjr=r(DOe," \u2014 "),aee=n(DOe,"A",{href:!0});var kGt=s(aee);_jr=r(kGt,"TFFunnelForQuestionAnswering"),kGt.forEach(t),ujr=r(DOe," (Funnel Transformer model)"),DOe.forEach(t),bjr=i(pe),QC=n(pe,"LI",{});var GOe=s(QC);MCe=n(GOe,"STRONG",{});var SGt=s(MCe);vjr=r(SGt,"gptj"),SGt.forEach(t),Fjr=r(GOe," \u2014 "),nee=n(GOe,"A",{href:!0});var RGt=s(nee);Tjr=r(RGt,"TFGPTJForQuestionAnswering"),RGt.forEach(t),Mjr=r(GOe," (GPT-J model)"),GOe.forEach(t),Ejr=i(pe),HC=n(pe,"LI",{});var OOe=s(HC);ECe=n(OOe,"STRONG",{});var PGt=s(ECe);Cjr=r(PGt,"longformer"),PGt.forEach(t),wjr=r(OOe," \u2014 "),see=n(OOe,"A",{href:!0});var BGt=s(see);Ajr=r(BGt,"TFLongformerForQuestionAnswering"),BGt.forEach(t),Ljr=r(OOe," (Longformer model)"),OOe.forEach(t),yjr=i(pe),UC=n(pe,"LI",{});var VOe=s(UC);CCe=n(VOe,"STRONG",{});var IGt=s(CCe);xjr=r(IGt,"mobilebert"),IGt.forEach(t),$jr=r(VOe," \u2014 "),lee=n(VOe,"A",{href:!0});var NGt=s(lee);kjr=r(NGt,"TFMobileBertForQuestionAnswering"),NGt.forEach(t),Sjr=r(VOe," (MobileBERT model)"),VOe.forEach(t),Rjr=i(pe),JC=n(pe,"LI",{});var XOe=s(JC);wCe=n(XOe,"STRONG",{});var qGt=s(wCe);Pjr=r(qGt,"mpnet"),qGt.forEach(t),Bjr=r(XOe," \u2014 "),iee=n(XOe,"A",{href:!0});var jGt=s(iee);Ijr=r(jGt,"TFMPNetForQuestionAnswering"),jGt.forEach(t),Njr=r(XOe," (MPNet model)"),XOe.forEach(t),qjr=i(pe),YC=n(pe,"LI",{});var zOe=s(YC);ACe=n(zOe,"STRONG",{});var DGt=s(ACe);jjr=r(DGt,"rembert"),DGt.forEach(t),Djr=r(zOe," \u2014 "),dee=n(zOe,"A",{href:!0});var GGt=s(dee);Gjr=r(GGt,"TFRemBertForQuestionAnswering"),GGt.forEach(t),Ojr=r(zOe," (RemBERT model)"),zOe.forEach(t),Vjr=i(pe),KC=n(pe,"LI",{});var WOe=s(KC);LCe=n(WOe,"STRONG",{});var OGt=s(LCe);Xjr=r(OGt,"roberta"),OGt.forEach(t),zjr=r(WOe," \u2014 "),cee=n(WOe,"A",{href:!0});var VGt=s(cee);Wjr=r(VGt,"TFRobertaForQuestionAnswering"),VGt.forEach(t),Qjr=r(WOe," (RoBERTa model)"),WOe.forEach(t),Hjr=i(pe),ZC=n(pe,"LI",{});var QOe=s(ZC);yCe=n(QOe,"STRONG",{});var XGt=s(yCe);Ujr=r(XGt,"roformer"),XGt.forEach(t),Jjr=r(QOe," \u2014 "),fee=n(QOe,"A",{href:!0});var zGt=s(fee);Yjr=r(zGt,"TFRoFormerForQuestionAnswering"),zGt.forEach(t),Kjr=r(QOe," (RoFormer model)"),QOe.forEach(t),Zjr=i(pe),e5=n(pe,"LI",{});var HOe=s(e5);xCe=n(HOe,"STRONG",{});var WGt=s(xCe);eDr=r(WGt,"xlm"),WGt.forEach(t),oDr=r(HOe," \u2014 "),mee=n(HOe,"A",{href:!0});var QGt=s(mee);rDr=r(QGt,"TFXLMForQuestionAnsweringSimple"),QGt.forEach(t),tDr=r(HOe," (XLM model)"),HOe.forEach(t),aDr=i(pe),o5=n(pe,"LI",{});var UOe=s(o5);$Ce=n(UOe,"STRONG",{});var HGt=s($Ce);nDr=r(HGt,"xlm-roberta"),HGt.forEach(t),sDr=r(UOe," \u2014 "),gee=n(UOe,"A",{href:!0});var UGt=s(gee);lDr=r(UGt,"TFXLMRobertaForQuestionAnswering"),UGt.forEach(t),iDr=r(UOe," (XLM-RoBERTa model)"),UOe.forEach(t),dDr=i(pe),r5=n(pe,"LI",{});var JOe=s(r5);kCe=n(JOe,"STRONG",{});var JGt=s(kCe);cDr=r(JGt,"xlnet"),JGt.forEach(t),fDr=r(JOe," \u2014 "),hee=n(JOe,"A",{href:!0});var YGt=s(hee);mDr=r(YGt,"TFXLNetForQuestionAnsweringSimple"),YGt.forEach(t),gDr=r(JOe," (XLNet model)"),JOe.forEach(t),pe.forEach(t),hDr=i(ei),T(t5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),SWe=i(f),Xc=n(f,"H2",{class:!0});var GHe=s(Xc);a5=n(GHe,"A",{id:!0,class:!0,href:!0});var KGt=s(a5);SCe=n(KGt,"SPAN",{});var ZGt=s(SCe);T(f$.$$.fragment,ZGt),ZGt.forEach(t),KGt.forEach(t),pDr=i(GHe),RCe=n(GHe,"SPAN",{});var eOt=s(RCe);_Dr=r(eOt,"TFAutoModelForVision2Seq"),eOt.forEach(t),GHe.forEach(t),RWe=i(f),hr=n(f,"DIV",{class:!0});var oi=s(hr);T(m$.$$.fragment,oi),uDr=i(oi),zc=n(oi,"P",{});var Lae=s(zc);bDr=r(Lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pee=n(Lae,"A",{href:!0});var oOt=s(pee);vDr=r(oOt,"from_pretrained()"),oOt.forEach(t),FDr=r(Lae," class method or the "),_ee=n(Lae,"A",{href:!0});var rOt=s(_ee);TDr=r(rOt,"from_config()"),rOt.forEach(t),MDr=r(Lae,` class
method.`),Lae.forEach(t),EDr=i(oi),g$=n(oi,"P",{});var OHe=s(g$);CDr=r(OHe,"This class cannot be instantiated directly using "),PCe=n(OHe,"CODE",{});var tOt=s(PCe);wDr=r(tOt,"__init__()"),tOt.forEach(t),ADr=r(OHe," (throws an error)."),OHe.forEach(t),LDr=i(oi),zt=n(oi,"DIV",{class:!0});var DA=s(zt);T(h$.$$.fragment,DA),yDr=i(DA),BCe=n(DA,"P",{});var aOt=s(BCe);xDr=r(aOt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aOt.forEach(t),$Dr=i(DA),Wc=n(DA,"P",{});var yae=s(Wc);kDr=r(yae,`Note:
Loading a model from its configuration file does `),ICe=n(yae,"STRONG",{});var nOt=s(ICe);SDr=r(nOt,"not"),nOt.forEach(t),RDr=r(yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=n(yae,"A",{href:!0});var sOt=s(uee);PDr=r(sOt,"from_pretrained()"),sOt.forEach(t),BDr=r(yae," to load the model weights."),yae.forEach(t),IDr=i(DA),T(n5.$$.fragment,DA),DA.forEach(t),NDr=i(oi),Or=n(oi,"DIV",{class:!0});var ri=s(Or);T(p$.$$.fragment,ri),qDr=i(ri),NCe=n(ri,"P",{});var lOt=s(NCe);jDr=r(lOt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lOt.forEach(t),DDr=i(ri),vn=n(ri,"P",{});var GA=s(vn);GDr=r(GA,"The model class to instantiate is selected based on the "),qCe=n(GA,"CODE",{});var iOt=s(qCe);ODr=r(iOt,"model_type"),iOt.forEach(t),VDr=r(GA,` property of the config object (either
passed as an argument or loaded from `),jCe=n(GA,"CODE",{});var dOt=s(jCe);XDr=r(dOt,"pretrained_model_name_or_path"),dOt.forEach(t),zDr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DCe=n(GA,"CODE",{});var cOt=s(DCe);WDr=r(cOt,"pretrained_model_name_or_path"),cOt.forEach(t),QDr=r(GA,":"),GA.forEach(t),HDr=i(ri),GCe=n(ri,"UL",{});var fOt=s(GCe);s5=n(fOt,"LI",{});var YOe=s(s5);OCe=n(YOe,"STRONG",{});var mOt=s(OCe);UDr=r(mOt,"vision-encoder-decoder"),mOt.forEach(t),JDr=r(YOe," \u2014 "),bee=n(YOe,"A",{href:!0});var gOt=s(bee);YDr=r(gOt,"TFVisionEncoderDecoderModel"),gOt.forEach(t),KDr=r(YOe," (Vision Encoder decoder model)"),YOe.forEach(t),fOt.forEach(t),ZDr=i(ri),T(l5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),PWe=i(f),Qc=n(f,"H2",{class:!0});var VHe=s(Qc);i5=n(VHe,"A",{id:!0,class:!0,href:!0});var hOt=s(i5);VCe=n(hOt,"SPAN",{});var pOt=s(VCe);T(_$.$$.fragment,pOt),pOt.forEach(t),hOt.forEach(t),eGr=i(VHe),XCe=n(VHe,"SPAN",{});var _Ot=s(XCe);oGr=r(_Ot,"TFAutoModelForSpeechSeq2Seq"),_Ot.forEach(t),VHe.forEach(t),BWe=i(f),pr=n(f,"DIV",{class:!0});var ti=s(pr);T(u$.$$.fragment,ti),rGr=i(ti),Hc=n(ti,"P",{});var xae=s(Hc);tGr=r(xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),vee=n(xae,"A",{href:!0});var uOt=s(vee);aGr=r(uOt,"from_pretrained()"),uOt.forEach(t),nGr=r(xae," class method or the "),Fee=n(xae,"A",{href:!0});var bOt=s(Fee);sGr=r(bOt,"from_config()"),bOt.forEach(t),lGr=r(xae,` class
method.`),xae.forEach(t),iGr=i(ti),b$=n(ti,"P",{});var XHe=s(b$);dGr=r(XHe,"This class cannot be instantiated directly using "),zCe=n(XHe,"CODE",{});var vOt=s(zCe);cGr=r(vOt,"__init__()"),vOt.forEach(t),fGr=r(XHe," (throws an error)."),XHe.forEach(t),mGr=i(ti),Wt=n(ti,"DIV",{class:!0});var OA=s(Wt);T(v$.$$.fragment,OA),gGr=i(OA),WCe=n(OA,"P",{});var FOt=s(WCe);hGr=r(FOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),FOt.forEach(t),pGr=i(OA),Uc=n(OA,"P",{});var $ae=s(Uc);_Gr=r($ae,`Note:
Loading a model from its configuration file does `),QCe=n($ae,"STRONG",{});var TOt=s(QCe);uGr=r(TOt,"not"),TOt.forEach(t),bGr=r($ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=n($ae,"A",{href:!0});var MOt=s(Tee);vGr=r(MOt,"from_pretrained()"),MOt.forEach(t),FGr=r($ae," to load the model weights."),$ae.forEach(t),TGr=i(OA),T(d5.$$.fragment,OA),OA.forEach(t),MGr=i(ti),Vr=n(ti,"DIV",{class:!0});var ai=s(Vr);T(F$.$$.fragment,ai),EGr=i(ai),HCe=n(ai,"P",{});var EOt=s(HCe);CGr=r(EOt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),EOt.forEach(t),wGr=i(ai),Fn=n(ai,"P",{});var VA=s(Fn);AGr=r(VA,"The model class to instantiate is selected based on the "),UCe=n(VA,"CODE",{});var COt=s(UCe);LGr=r(COt,"model_type"),COt.forEach(t),yGr=r(VA,` property of the config object (either
passed as an argument or loaded from `),JCe=n(VA,"CODE",{});var wOt=s(JCe);xGr=r(wOt,"pretrained_model_name_or_path"),wOt.forEach(t),$Gr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=n(VA,"CODE",{});var AOt=s(YCe);kGr=r(AOt,"pretrained_model_name_or_path"),AOt.forEach(t),SGr=r(VA,":"),VA.forEach(t),RGr=i(ai),KCe=n(ai,"UL",{});var LOt=s(KCe);c5=n(LOt,"LI",{});var KOe=s(c5);ZCe=n(KOe,"STRONG",{});var yOt=s(ZCe);PGr=r(yOt,"speech_to_text"),yOt.forEach(t),BGr=r(KOe," \u2014 "),Mee=n(KOe,"A",{href:!0});var xOt=s(Mee);IGr=r(xOt,"TFSpeech2TextForConditionalGeneration"),xOt.forEach(t),NGr=r(KOe," (Speech2Text model)"),KOe.forEach(t),LOt.forEach(t),qGr=i(ai),T(f5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),IWe=i(f),Jc=n(f,"H2",{class:!0});var zHe=s(Jc);m5=n(zHe,"A",{id:!0,class:!0,href:!0});var $Ot=s(m5);e5e=n($Ot,"SPAN",{});var kOt=s(e5e);T(T$.$$.fragment,kOt),kOt.forEach(t),$Ot.forEach(t),jGr=i(zHe),o5e=n(zHe,"SPAN",{});var SOt=s(o5e);DGr=r(SOt,"FlaxAutoModel"),SOt.forEach(t),zHe.forEach(t),NWe=i(f),_r=n(f,"DIV",{class:!0});var ni=s(_r);T(M$.$$.fragment,ni),GGr=i(ni),Yc=n(ni,"P",{});var kae=s(Yc);OGr=r(kae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Eee=n(kae,"A",{href:!0});var ROt=s(Eee);VGr=r(ROt,"from_pretrained()"),ROt.forEach(t),XGr=r(kae," class method or the "),Cee=n(kae,"A",{href:!0});var POt=s(Cee);zGr=r(POt,"from_config()"),POt.forEach(t),WGr=r(kae,` class
method.`),kae.forEach(t),QGr=i(ni),E$=n(ni,"P",{});var WHe=s(E$);HGr=r(WHe,"This class cannot be instantiated directly using "),r5e=n(WHe,"CODE",{});var BOt=s(r5e);UGr=r(BOt,"__init__()"),BOt.forEach(t),JGr=r(WHe," (throws an error)."),WHe.forEach(t),YGr=i(ni),Qt=n(ni,"DIV",{class:!0});var XA=s(Qt);T(C$.$$.fragment,XA),KGr=i(XA),t5e=n(XA,"P",{});var IOt=s(t5e);ZGr=r(IOt,"Instantiates one of the base model classes of the library from a configuration."),IOt.forEach(t),eOr=i(XA),Kc=n(XA,"P",{});var Sae=s(Kc);oOr=r(Sae,`Note:
Loading a model from its configuration file does `),a5e=n(Sae,"STRONG",{});var NOt=s(a5e);rOr=r(NOt,"not"),NOt.forEach(t),tOr=r(Sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),wee=n(Sae,"A",{href:!0});var qOt=s(wee);aOr=r(qOt,"from_pretrained()"),qOt.forEach(t),nOr=r(Sae," to load the model weights."),Sae.forEach(t),sOr=i(XA),T(g5.$$.fragment,XA),XA.forEach(t),lOr=i(ni),Xr=n(ni,"DIV",{class:!0});var si=s(Xr);T(w$.$$.fragment,si),iOr=i(si),n5e=n(si,"P",{});var jOt=s(n5e);dOr=r(jOt,"Instantiate one of the base model classes of the library from a pretrained model."),jOt.forEach(t),cOr=i(si),Tn=n(si,"P",{});var zA=s(Tn);fOr=r(zA,"The model class to instantiate is selected based on the "),s5e=n(zA,"CODE",{});var DOt=s(s5e);mOr=r(DOt,"model_type"),DOt.forEach(t),gOr=r(zA,` property of the config object (either
passed as an argument or loaded from `),l5e=n(zA,"CODE",{});var GOt=s(l5e);hOr=r(GOt,"pretrained_model_name_or_path"),GOt.forEach(t),pOr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=n(zA,"CODE",{});var OOt=s(i5e);_Or=r(OOt,"pretrained_model_name_or_path"),OOt.forEach(t),uOr=r(zA,":"),zA.forEach(t),bOr=i(si),oe=n(si,"UL",{});var ae=s(oe);h5=n(ae,"LI",{});var ZOe=s(h5);d5e=n(ZOe,"STRONG",{});var VOt=s(d5e);vOr=r(VOt,"albert"),VOt.forEach(t),FOr=r(ZOe," \u2014 "),Aee=n(ZOe,"A",{href:!0});var XOt=s(Aee);TOr=r(XOt,"FlaxAlbertModel"),XOt.forEach(t),MOr=r(ZOe," (ALBERT model)"),ZOe.forEach(t),EOr=i(ae),p5=n(ae,"LI",{});var eVe=s(p5);c5e=n(eVe,"STRONG",{});var zOt=s(c5e);COr=r(zOt,"bart"),zOt.forEach(t),wOr=r(eVe," \u2014 "),Lee=n(eVe,"A",{href:!0});var WOt=s(Lee);AOr=r(WOt,"FlaxBartModel"),WOt.forEach(t),LOr=r(eVe," (BART model)"),eVe.forEach(t),yOr=i(ae),_5=n(ae,"LI",{});var oVe=s(_5);f5e=n(oVe,"STRONG",{});var QOt=s(f5e);xOr=r(QOt,"beit"),QOt.forEach(t),$Or=r(oVe," \u2014 "),yee=n(oVe,"A",{href:!0});var HOt=s(yee);kOr=r(HOt,"FlaxBeitModel"),HOt.forEach(t),SOr=r(oVe," (BEiT model)"),oVe.forEach(t),ROr=i(ae),u5=n(ae,"LI",{});var rVe=s(u5);m5e=n(rVe,"STRONG",{});var UOt=s(m5e);POr=r(UOt,"bert"),UOt.forEach(t),BOr=r(rVe," \u2014 "),xee=n(rVe,"A",{href:!0});var JOt=s(xee);IOr=r(JOt,"FlaxBertModel"),JOt.forEach(t),NOr=r(rVe," (BERT model)"),rVe.forEach(t),qOr=i(ae),b5=n(ae,"LI",{});var tVe=s(b5);g5e=n(tVe,"STRONG",{});var YOt=s(g5e);jOr=r(YOt,"big_bird"),YOt.forEach(t),DOr=r(tVe," \u2014 "),$ee=n(tVe,"A",{href:!0});var KOt=s($ee);GOr=r(KOt,"FlaxBigBirdModel"),KOt.forEach(t),OOr=r(tVe," (BigBird model)"),tVe.forEach(t),VOr=i(ae),v5=n(ae,"LI",{});var aVe=s(v5);h5e=n(aVe,"STRONG",{});var ZOt=s(h5e);XOr=r(ZOt,"blenderbot"),ZOt.forEach(t),zOr=r(aVe," \u2014 "),kee=n(aVe,"A",{href:!0});var eVt=s(kee);WOr=r(eVt,"FlaxBlenderbotModel"),eVt.forEach(t),QOr=r(aVe," (Blenderbot model)"),aVe.forEach(t),HOr=i(ae),F5=n(ae,"LI",{});var nVe=s(F5);p5e=n(nVe,"STRONG",{});var oVt=s(p5e);UOr=r(oVt,"blenderbot-small"),oVt.forEach(t),JOr=r(nVe," \u2014 "),See=n(nVe,"A",{href:!0});var rVt=s(See);YOr=r(rVt,"FlaxBlenderbotSmallModel"),rVt.forEach(t),KOr=r(nVe," (BlenderbotSmall model)"),nVe.forEach(t),ZOr=i(ae),T5=n(ae,"LI",{});var sVe=s(T5);_5e=n(sVe,"STRONG",{});var tVt=s(_5e);eVr=r(tVt,"clip"),tVt.forEach(t),oVr=r(sVe," \u2014 "),Ree=n(sVe,"A",{href:!0});var aVt=s(Ree);rVr=r(aVt,"FlaxCLIPModel"),aVt.forEach(t),tVr=r(sVe," (CLIP model)"),sVe.forEach(t),aVr=i(ae),M5=n(ae,"LI",{});var lVe=s(M5);u5e=n(lVe,"STRONG",{});var nVt=s(u5e);nVr=r(nVt,"distilbert"),nVt.forEach(t),sVr=r(lVe," \u2014 "),Pee=n(lVe,"A",{href:!0});var sVt=s(Pee);lVr=r(sVt,"FlaxDistilBertModel"),sVt.forEach(t),iVr=r(lVe," (DistilBERT model)"),lVe.forEach(t),dVr=i(ae),E5=n(ae,"LI",{});var iVe=s(E5);b5e=n(iVe,"STRONG",{});var lVt=s(b5e);cVr=r(lVt,"electra"),lVt.forEach(t),fVr=r(iVe," \u2014 "),Bee=n(iVe,"A",{href:!0});var iVt=s(Bee);mVr=r(iVt,"FlaxElectraModel"),iVt.forEach(t),gVr=r(iVe," (ELECTRA model)"),iVe.forEach(t),hVr=i(ae),C5=n(ae,"LI",{});var dVe=s(C5);v5e=n(dVe,"STRONG",{});var dVt=s(v5e);pVr=r(dVt,"gpt2"),dVt.forEach(t),_Vr=r(dVe," \u2014 "),Iee=n(dVe,"A",{href:!0});var cVt=s(Iee);uVr=r(cVt,"FlaxGPT2Model"),cVt.forEach(t),bVr=r(dVe," (OpenAI GPT-2 model)"),dVe.forEach(t),vVr=i(ae),w5=n(ae,"LI",{});var cVe=s(w5);F5e=n(cVe,"STRONG",{});var fVt=s(F5e);FVr=r(fVt,"gpt_neo"),fVt.forEach(t),TVr=r(cVe," \u2014 "),Nee=n(cVe,"A",{href:!0});var mVt=s(Nee);MVr=r(mVt,"FlaxGPTNeoModel"),mVt.forEach(t),EVr=r(cVe," (GPT Neo model)"),cVe.forEach(t),CVr=i(ae),A5=n(ae,"LI",{});var fVe=s(A5);T5e=n(fVe,"STRONG",{});var gVt=s(T5e);wVr=r(gVt,"gptj"),gVt.forEach(t),AVr=r(fVe," \u2014 "),qee=n(fVe,"A",{href:!0});var hVt=s(qee);LVr=r(hVt,"FlaxGPTJModel"),hVt.forEach(t),yVr=r(fVe," (GPT-J model)"),fVe.forEach(t),xVr=i(ae),L5=n(ae,"LI",{});var mVe=s(L5);M5e=n(mVe,"STRONG",{});var pVt=s(M5e);$Vr=r(pVt,"longt5"),pVt.forEach(t),kVr=r(mVe," \u2014 "),jee=n(mVe,"A",{href:!0});var _Vt=s(jee);SVr=r(_Vt,"FlaxLongT5Model"),_Vt.forEach(t),RVr=r(mVe," (LongT5 model)"),mVe.forEach(t),PVr=i(ae),y5=n(ae,"LI",{});var gVe=s(y5);E5e=n(gVe,"STRONG",{});var uVt=s(E5e);BVr=r(uVt,"marian"),uVt.forEach(t),IVr=r(gVe," \u2014 "),Dee=n(gVe,"A",{href:!0});var bVt=s(Dee);NVr=r(bVt,"FlaxMarianModel"),bVt.forEach(t),qVr=r(gVe," (Marian model)"),gVe.forEach(t),jVr=i(ae),x5=n(ae,"LI",{});var hVe=s(x5);C5e=n(hVe,"STRONG",{});var vVt=s(C5e);DVr=r(vVt,"mbart"),vVt.forEach(t),GVr=r(hVe," \u2014 "),Gee=n(hVe,"A",{href:!0});var FVt=s(Gee);OVr=r(FVt,"FlaxMBartModel"),FVt.forEach(t),VVr=r(hVe," (mBART model)"),hVe.forEach(t),XVr=i(ae),$5=n(ae,"LI",{});var pVe=s($5);w5e=n(pVe,"STRONG",{});var TVt=s(w5e);zVr=r(TVt,"mt5"),TVt.forEach(t),WVr=r(pVe," \u2014 "),Oee=n(pVe,"A",{href:!0});var MVt=s(Oee);QVr=r(MVt,"FlaxMT5Model"),MVt.forEach(t),HVr=r(pVe," (MT5 model)"),pVe.forEach(t),UVr=i(ae),k5=n(ae,"LI",{});var _Ve=s(k5);A5e=n(_Ve,"STRONG",{});var EVt=s(A5e);JVr=r(EVt,"opt"),EVt.forEach(t),YVr=r(_Ve," \u2014 "),Vee=n(_Ve,"A",{href:!0});var CVt=s(Vee);KVr=r(CVt,"FlaxOPTModel"),CVt.forEach(t),ZVr=r(_Ve," (OPT model)"),_Ve.forEach(t),eXr=i(ae),S5=n(ae,"LI",{});var uVe=s(S5);L5e=n(uVe,"STRONG",{});var wVt=s(L5e);oXr=r(wVt,"pegasus"),wVt.forEach(t),rXr=r(uVe," \u2014 "),Xee=n(uVe,"A",{href:!0});var AVt=s(Xee);tXr=r(AVt,"FlaxPegasusModel"),AVt.forEach(t),aXr=r(uVe," (Pegasus model)"),uVe.forEach(t),nXr=i(ae),R5=n(ae,"LI",{});var bVe=s(R5);y5e=n(bVe,"STRONG",{});var LVt=s(y5e);sXr=r(LVt,"roberta"),LVt.forEach(t),lXr=r(bVe," \u2014 "),zee=n(bVe,"A",{href:!0});var yVt=s(zee);iXr=r(yVt,"FlaxRobertaModel"),yVt.forEach(t),dXr=r(bVe," (RoBERTa model)"),bVe.forEach(t),cXr=i(ae),P5=n(ae,"LI",{});var vVe=s(P5);x5e=n(vVe,"STRONG",{});var xVt=s(x5e);fXr=r(xVt,"roformer"),xVt.forEach(t),mXr=r(vVe," \u2014 "),Wee=n(vVe,"A",{href:!0});var $Vt=s(Wee);gXr=r($Vt,"FlaxRoFormerModel"),$Vt.forEach(t),hXr=r(vVe," (RoFormer model)"),vVe.forEach(t),pXr=i(ae),B5=n(ae,"LI",{});var FVe=s(B5);$5e=n(FVe,"STRONG",{});var kVt=s($5e);_Xr=r(kVt,"t5"),kVt.forEach(t),uXr=r(FVe," \u2014 "),Qee=n(FVe,"A",{href:!0});var SVt=s(Qee);bXr=r(SVt,"FlaxT5Model"),SVt.forEach(t),vXr=r(FVe," (T5 model)"),FVe.forEach(t),FXr=i(ae),I5=n(ae,"LI",{});var TVe=s(I5);k5e=n(TVe,"STRONG",{});var RVt=s(k5e);TXr=r(RVt,"vision-text-dual-encoder"),RVt.forEach(t),MXr=r(TVe," \u2014 "),Hee=n(TVe,"A",{href:!0});var PVt=s(Hee);EXr=r(PVt,"FlaxVisionTextDualEncoderModel"),PVt.forEach(t),CXr=r(TVe," (VisionTextDualEncoder model)"),TVe.forEach(t),wXr=i(ae),N5=n(ae,"LI",{});var MVe=s(N5);S5e=n(MVe,"STRONG",{});var BVt=s(S5e);AXr=r(BVt,"vit"),BVt.forEach(t),LXr=r(MVe," \u2014 "),Uee=n(MVe,"A",{href:!0});var IVt=s(Uee);yXr=r(IVt,"FlaxViTModel"),IVt.forEach(t),xXr=r(MVe," (ViT model)"),MVe.forEach(t),$Xr=i(ae),q5=n(ae,"LI",{});var EVe=s(q5);R5e=n(EVe,"STRONG",{});var NVt=s(R5e);kXr=r(NVt,"wav2vec2"),NVt.forEach(t),SXr=r(EVe," \u2014 "),Jee=n(EVe,"A",{href:!0});var qVt=s(Jee);RXr=r(qVt,"FlaxWav2Vec2Model"),qVt.forEach(t),PXr=r(EVe," (Wav2Vec2 model)"),EVe.forEach(t),BXr=i(ae),j5=n(ae,"LI",{});var CVe=s(j5);P5e=n(CVe,"STRONG",{});var jVt=s(P5e);IXr=r(jVt,"xglm"),jVt.forEach(t),NXr=r(CVe," \u2014 "),Yee=n(CVe,"A",{href:!0});var DVt=s(Yee);qXr=r(DVt,"FlaxXGLMModel"),DVt.forEach(t),jXr=r(CVe," (XGLM model)"),CVe.forEach(t),DXr=i(ae),D5=n(ae,"LI",{});var wVe=s(D5);B5e=n(wVe,"STRONG",{});var GVt=s(B5e);GXr=r(GVt,"xlm-roberta"),GVt.forEach(t),OXr=r(wVe," \u2014 "),Kee=n(wVe,"A",{href:!0});var OVt=s(Kee);VXr=r(OVt,"FlaxXLMRobertaModel"),OVt.forEach(t),XXr=r(wVe," (XLM-RoBERTa model)"),wVe.forEach(t),ae.forEach(t),zXr=i(si),T(G5.$$.fragment,si),si.forEach(t),ni.forEach(t),qWe=i(f),Zc=n(f,"H2",{class:!0});var QHe=s(Zc);O5=n(QHe,"A",{id:!0,class:!0,href:!0});var VVt=s(O5);I5e=n(VVt,"SPAN",{});var XVt=s(I5e);T(A$.$$.fragment,XVt),XVt.forEach(t),VVt.forEach(t),WXr=i(QHe),N5e=n(QHe,"SPAN",{});var zVt=s(N5e);QXr=r(zVt,"FlaxAutoModelForCausalLM"),zVt.forEach(t),QHe.forEach(t),jWe=i(f),ur=n(f,"DIV",{class:!0});var li=s(ur);T(L$.$$.fragment,li),HXr=i(li),ef=n(li,"P",{});var Rae=s(ef);UXr=r(Rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Zee=n(Rae,"A",{href:!0});var WVt=s(Zee);JXr=r(WVt,"from_pretrained()"),WVt.forEach(t),YXr=r(Rae," class method or the "),eoe=n(Rae,"A",{href:!0});var QVt=s(eoe);KXr=r(QVt,"from_config()"),QVt.forEach(t),ZXr=r(Rae,` class
method.`),Rae.forEach(t),ezr=i(li),y$=n(li,"P",{});var HHe=s(y$);ozr=r(HHe,"This class cannot be instantiated directly using "),q5e=n(HHe,"CODE",{});var HVt=s(q5e);rzr=r(HVt,"__init__()"),HVt.forEach(t),tzr=r(HHe," (throws an error)."),HHe.forEach(t),azr=i(li),Ht=n(li,"DIV",{class:!0});var WA=s(Ht);T(x$.$$.fragment,WA),nzr=i(WA),j5e=n(WA,"P",{});var UVt=s(j5e);szr=r(UVt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UVt.forEach(t),lzr=i(WA),of=n(WA,"P",{});var Pae=s(of);izr=r(Pae,`Note:
Loading a model from its configuration file does `),D5e=n(Pae,"STRONG",{});var JVt=s(D5e);dzr=r(JVt,"not"),JVt.forEach(t),czr=r(Pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=n(Pae,"A",{href:!0});var YVt=s(ooe);fzr=r(YVt,"from_pretrained()"),YVt.forEach(t),mzr=r(Pae," to load the model weights."),Pae.forEach(t),gzr=i(WA),T(V5.$$.fragment,WA),WA.forEach(t),hzr=i(li),zr=n(li,"DIV",{class:!0});var ii=s(zr);T($$.$$.fragment,ii),pzr=i(ii),G5e=n(ii,"P",{});var KVt=s(G5e);_zr=r(KVt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),KVt.forEach(t),uzr=i(ii),Mn=n(ii,"P",{});var QA=s(Mn);bzr=r(QA,"The model class to instantiate is selected based on the "),O5e=n(QA,"CODE",{});var ZVt=s(O5e);vzr=r(ZVt,"model_type"),ZVt.forEach(t),Fzr=r(QA,` property of the config object (either
passed as an argument or loaded from `),V5e=n(QA,"CODE",{});var eXt=s(V5e);Tzr=r(eXt,"pretrained_model_name_or_path"),eXt.forEach(t),Mzr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=n(QA,"CODE",{});var oXt=s(X5e);Ezr=r(oXt,"pretrained_model_name_or_path"),oXt.forEach(t),Czr=r(QA,":"),QA.forEach(t),wzr=i(ii),xe=n(ii,"UL",{});var Ne=s(xe);X5=n(Ne,"LI",{});var AVe=s(X5);z5e=n(AVe,"STRONG",{});var rXt=s(z5e);Azr=r(rXt,"bart"),rXt.forEach(t),Lzr=r(AVe," \u2014 "),roe=n(AVe,"A",{href:!0});var tXt=s(roe);yzr=r(tXt,"FlaxBartForCausalLM"),tXt.forEach(t),xzr=r(AVe," (BART model)"),AVe.forEach(t),$zr=i(Ne),z5=n(Ne,"LI",{});var LVe=s(z5);W5e=n(LVe,"STRONG",{});var aXt=s(W5e);kzr=r(aXt,"bert"),aXt.forEach(t),Szr=r(LVe," \u2014 "),toe=n(LVe,"A",{href:!0});var nXt=s(toe);Rzr=r(nXt,"FlaxBertForCausalLM"),nXt.forEach(t),Pzr=r(LVe," (BERT model)"),LVe.forEach(t),Bzr=i(Ne),W5=n(Ne,"LI",{});var yVe=s(W5);Q5e=n(yVe,"STRONG",{});var sXt=s(Q5e);Izr=r(sXt,"big_bird"),sXt.forEach(t),Nzr=r(yVe," \u2014 "),aoe=n(yVe,"A",{href:!0});var lXt=s(aoe);qzr=r(lXt,"FlaxBigBirdForCausalLM"),lXt.forEach(t),jzr=r(yVe," (BigBird model)"),yVe.forEach(t),Dzr=i(Ne),Q5=n(Ne,"LI",{});var xVe=s(Q5);H5e=n(xVe,"STRONG",{});var iXt=s(H5e);Gzr=r(iXt,"electra"),iXt.forEach(t),Ozr=r(xVe," \u2014 "),noe=n(xVe,"A",{href:!0});var dXt=s(noe);Vzr=r(dXt,"FlaxElectraForCausalLM"),dXt.forEach(t),Xzr=r(xVe," (ELECTRA model)"),xVe.forEach(t),zzr=i(Ne),H5=n(Ne,"LI",{});var $Ve=s(H5);U5e=n($Ve,"STRONG",{});var cXt=s(U5e);Wzr=r(cXt,"gpt2"),cXt.forEach(t),Qzr=r($Ve," \u2014 "),soe=n($Ve,"A",{href:!0});var fXt=s(soe);Hzr=r(fXt,"FlaxGPT2LMHeadModel"),fXt.forEach(t),Uzr=r($Ve," (OpenAI GPT-2 model)"),$Ve.forEach(t),Jzr=i(Ne),U5=n(Ne,"LI",{});var kVe=s(U5);J5e=n(kVe,"STRONG",{});var mXt=s(J5e);Yzr=r(mXt,"gpt_neo"),mXt.forEach(t),Kzr=r(kVe," \u2014 "),loe=n(kVe,"A",{href:!0});var gXt=s(loe);Zzr=r(gXt,"FlaxGPTNeoForCausalLM"),gXt.forEach(t),eWr=r(kVe," (GPT Neo model)"),kVe.forEach(t),oWr=i(Ne),J5=n(Ne,"LI",{});var SVe=s(J5);Y5e=n(SVe,"STRONG",{});var hXt=s(Y5e);rWr=r(hXt,"gptj"),hXt.forEach(t),tWr=r(SVe," \u2014 "),ioe=n(SVe,"A",{href:!0});var pXt=s(ioe);aWr=r(pXt,"FlaxGPTJForCausalLM"),pXt.forEach(t),nWr=r(SVe," (GPT-J model)"),SVe.forEach(t),sWr=i(Ne),Y5=n(Ne,"LI",{});var RVe=s(Y5);K5e=n(RVe,"STRONG",{});var _Xt=s(K5e);lWr=r(_Xt,"opt"),_Xt.forEach(t),iWr=r(RVe," \u2014 "),doe=n(RVe,"A",{href:!0});var uXt=s(doe);dWr=r(uXt,"FlaxOPTForCausalLM"),uXt.forEach(t),cWr=r(RVe," (OPT model)"),RVe.forEach(t),fWr=i(Ne),K5=n(Ne,"LI",{});var PVe=s(K5);Z5e=n(PVe,"STRONG",{});var bXt=s(Z5e);mWr=r(bXt,"roberta"),bXt.forEach(t),gWr=r(PVe," \u2014 "),coe=n(PVe,"A",{href:!0});var vXt=s(coe);hWr=r(vXt,"FlaxRobertaForCausalLM"),vXt.forEach(t),pWr=r(PVe," (RoBERTa model)"),PVe.forEach(t),_Wr=i(Ne),Z5=n(Ne,"LI",{});var BVe=s(Z5);e3e=n(BVe,"STRONG",{});var FXt=s(e3e);uWr=r(FXt,"xglm"),FXt.forEach(t),bWr=r(BVe," \u2014 "),foe=n(BVe,"A",{href:!0});var TXt=s(foe);vWr=r(TXt,"FlaxXGLMForCausalLM"),TXt.forEach(t),FWr=r(BVe," (XGLM model)"),BVe.forEach(t),Ne.forEach(t),TWr=i(ii),T(e3.$$.fragment,ii),ii.forEach(t),li.forEach(t),DWe=i(f),rf=n(f,"H2",{class:!0});var UHe=s(rf);o3=n(UHe,"A",{id:!0,class:!0,href:!0});var MXt=s(o3);o3e=n(MXt,"SPAN",{});var EXt=s(o3e);T(k$.$$.fragment,EXt),EXt.forEach(t),MXt.forEach(t),MWr=i(UHe),r3e=n(UHe,"SPAN",{});var CXt=s(r3e);EWr=r(CXt,"FlaxAutoModelForPreTraining"),CXt.forEach(t),UHe.forEach(t),GWe=i(f),br=n(f,"DIV",{class:!0});var di=s(br);T(S$.$$.fragment,di),CWr=i(di),tf=n(di,"P",{});var Bae=s(tf);wWr=r(Bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),moe=n(Bae,"A",{href:!0});var wXt=s(moe);AWr=r(wXt,"from_pretrained()"),wXt.forEach(t),LWr=r(Bae," class method or the "),goe=n(Bae,"A",{href:!0});var AXt=s(goe);yWr=r(AXt,"from_config()"),AXt.forEach(t),xWr=r(Bae,` class
method.`),Bae.forEach(t),$Wr=i(di),R$=n(di,"P",{});var JHe=s(R$);kWr=r(JHe,"This class cannot be instantiated directly using "),t3e=n(JHe,"CODE",{});var LXt=s(t3e);SWr=r(LXt,"__init__()"),LXt.forEach(t),RWr=r(JHe," (throws an error)."),JHe.forEach(t),PWr=i(di),Ut=n(di,"DIV",{class:!0});var HA=s(Ut);T(P$.$$.fragment,HA),BWr=i(HA),a3e=n(HA,"P",{});var yXt=s(a3e);IWr=r(yXt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yXt.forEach(t),NWr=i(HA),af=n(HA,"P",{});var Iae=s(af);qWr=r(Iae,`Note:
Loading a model from its configuration file does `),n3e=n(Iae,"STRONG",{});var xXt=s(n3e);jWr=r(xXt,"not"),xXt.forEach(t),DWr=r(Iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=n(Iae,"A",{href:!0});var $Xt=s(hoe);GWr=r($Xt,"from_pretrained()"),$Xt.forEach(t),OWr=r(Iae," to load the model weights."),Iae.forEach(t),VWr=i(HA),T(r3.$$.fragment,HA),HA.forEach(t),XWr=i(di),Wr=n(di,"DIV",{class:!0});var ci=s(Wr);T(B$.$$.fragment,ci),zWr=i(ci),s3e=n(ci,"P",{});var kXt=s(s3e);WWr=r(kXt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kXt.forEach(t),QWr=i(ci),En=n(ci,"P",{});var UA=s(En);HWr=r(UA,"The model class to instantiate is selected based on the "),l3e=n(UA,"CODE",{});var SXt=s(l3e);UWr=r(SXt,"model_type"),SXt.forEach(t),JWr=r(UA,` property of the config object (either
passed as an argument or loaded from `),i3e=n(UA,"CODE",{});var RXt=s(i3e);YWr=r(RXt,"pretrained_model_name_or_path"),RXt.forEach(t),KWr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=n(UA,"CODE",{});var PXt=s(d3e);ZWr=r(PXt,"pretrained_model_name_or_path"),PXt.forEach(t),eQr=r(UA,":"),UA.forEach(t),oQr=i(ci),Ee=n(ci,"UL",{});var we=s(Ee);t3=n(we,"LI",{});var IVe=s(t3);c3e=n(IVe,"STRONG",{});var BXt=s(c3e);rQr=r(BXt,"albert"),BXt.forEach(t),tQr=r(IVe," \u2014 "),poe=n(IVe,"A",{href:!0});var IXt=s(poe);aQr=r(IXt,"FlaxAlbertForPreTraining"),IXt.forEach(t),nQr=r(IVe," (ALBERT model)"),IVe.forEach(t),sQr=i(we),a3=n(we,"LI",{});var NVe=s(a3);f3e=n(NVe,"STRONG",{});var NXt=s(f3e);lQr=r(NXt,"bart"),NXt.forEach(t),iQr=r(NVe," \u2014 "),_oe=n(NVe,"A",{href:!0});var qXt=s(_oe);dQr=r(qXt,"FlaxBartForConditionalGeneration"),qXt.forEach(t),cQr=r(NVe," (BART model)"),NVe.forEach(t),fQr=i(we),n3=n(we,"LI",{});var qVe=s(n3);m3e=n(qVe,"STRONG",{});var jXt=s(m3e);mQr=r(jXt,"bert"),jXt.forEach(t),gQr=r(qVe," \u2014 "),uoe=n(qVe,"A",{href:!0});var DXt=s(uoe);hQr=r(DXt,"FlaxBertForPreTraining"),DXt.forEach(t),pQr=r(qVe," (BERT model)"),qVe.forEach(t),_Qr=i(we),s3=n(we,"LI",{});var jVe=s(s3);g3e=n(jVe,"STRONG",{});var GXt=s(g3e);uQr=r(GXt,"big_bird"),GXt.forEach(t),bQr=r(jVe," \u2014 "),boe=n(jVe,"A",{href:!0});var OXt=s(boe);vQr=r(OXt,"FlaxBigBirdForPreTraining"),OXt.forEach(t),FQr=r(jVe," (BigBird model)"),jVe.forEach(t),TQr=i(we),l3=n(we,"LI",{});var DVe=s(l3);h3e=n(DVe,"STRONG",{});var VXt=s(h3e);MQr=r(VXt,"electra"),VXt.forEach(t),EQr=r(DVe," \u2014 "),voe=n(DVe,"A",{href:!0});var XXt=s(voe);CQr=r(XXt,"FlaxElectraForPreTraining"),XXt.forEach(t),wQr=r(DVe," (ELECTRA model)"),DVe.forEach(t),AQr=i(we),i3=n(we,"LI",{});var GVe=s(i3);p3e=n(GVe,"STRONG",{});var zXt=s(p3e);LQr=r(zXt,"longt5"),zXt.forEach(t),yQr=r(GVe," \u2014 "),Foe=n(GVe,"A",{href:!0});var WXt=s(Foe);xQr=r(WXt,"FlaxLongT5ForConditionalGeneration"),WXt.forEach(t),$Qr=r(GVe," (LongT5 model)"),GVe.forEach(t),kQr=i(we),d3=n(we,"LI",{});var OVe=s(d3);_3e=n(OVe,"STRONG",{});var QXt=s(_3e);SQr=r(QXt,"mbart"),QXt.forEach(t),RQr=r(OVe," \u2014 "),Toe=n(OVe,"A",{href:!0});var HXt=s(Toe);PQr=r(HXt,"FlaxMBartForConditionalGeneration"),HXt.forEach(t),BQr=r(OVe," (mBART model)"),OVe.forEach(t),IQr=i(we),c3=n(we,"LI",{});var VVe=s(c3);u3e=n(VVe,"STRONG",{});var UXt=s(u3e);NQr=r(UXt,"mt5"),UXt.forEach(t),qQr=r(VVe," \u2014 "),Moe=n(VVe,"A",{href:!0});var JXt=s(Moe);jQr=r(JXt,"FlaxMT5ForConditionalGeneration"),JXt.forEach(t),DQr=r(VVe," (MT5 model)"),VVe.forEach(t),GQr=i(we),f3=n(we,"LI",{});var XVe=s(f3);b3e=n(XVe,"STRONG",{});var YXt=s(b3e);OQr=r(YXt,"roberta"),YXt.forEach(t),VQr=r(XVe," \u2014 "),Eoe=n(XVe,"A",{href:!0});var KXt=s(Eoe);XQr=r(KXt,"FlaxRobertaForMaskedLM"),KXt.forEach(t),zQr=r(XVe," (RoBERTa model)"),XVe.forEach(t),WQr=i(we),m3=n(we,"LI",{});var zVe=s(m3);v3e=n(zVe,"STRONG",{});var ZXt=s(v3e);QQr=r(ZXt,"roformer"),ZXt.forEach(t),HQr=r(zVe," \u2014 "),Coe=n(zVe,"A",{href:!0});var ezt=s(Coe);UQr=r(ezt,"FlaxRoFormerForMaskedLM"),ezt.forEach(t),JQr=r(zVe," (RoFormer model)"),zVe.forEach(t),YQr=i(we),g3=n(we,"LI",{});var WVe=s(g3);F3e=n(WVe,"STRONG",{});var ozt=s(F3e);KQr=r(ozt,"t5"),ozt.forEach(t),ZQr=r(WVe," \u2014 "),woe=n(WVe,"A",{href:!0});var rzt=s(woe);eHr=r(rzt,"FlaxT5ForConditionalGeneration"),rzt.forEach(t),oHr=r(WVe," (T5 model)"),WVe.forEach(t),rHr=i(we),h3=n(we,"LI",{});var QVe=s(h3);T3e=n(QVe,"STRONG",{});var tzt=s(T3e);tHr=r(tzt,"wav2vec2"),tzt.forEach(t),aHr=r(QVe," \u2014 "),Aoe=n(QVe,"A",{href:!0});var azt=s(Aoe);nHr=r(azt,"FlaxWav2Vec2ForPreTraining"),azt.forEach(t),sHr=r(QVe," (Wav2Vec2 model)"),QVe.forEach(t),lHr=i(we),p3=n(we,"LI",{});var HVe=s(p3);M3e=n(HVe,"STRONG",{});var nzt=s(M3e);iHr=r(nzt,"xlm-roberta"),nzt.forEach(t),dHr=r(HVe," \u2014 "),Loe=n(HVe,"A",{href:!0});var szt=s(Loe);cHr=r(szt,"FlaxXLMRobertaForMaskedLM"),szt.forEach(t),fHr=r(HVe," (XLM-RoBERTa model)"),HVe.forEach(t),we.forEach(t),mHr=i(ci),T(_3.$$.fragment,ci),ci.forEach(t),di.forEach(t),OWe=i(f),nf=n(f,"H2",{class:!0});var YHe=s(nf);u3=n(YHe,"A",{id:!0,class:!0,href:!0});var lzt=s(u3);E3e=n(lzt,"SPAN",{});var izt=s(E3e);T(I$.$$.fragment,izt),izt.forEach(t),lzt.forEach(t),gHr=i(YHe),C3e=n(YHe,"SPAN",{});var dzt=s(C3e);hHr=r(dzt,"FlaxAutoModelForMaskedLM"),dzt.forEach(t),YHe.forEach(t),VWe=i(f),vr=n(f,"DIV",{class:!0});var fi=s(vr);T(N$.$$.fragment,fi),pHr=i(fi),sf=n(fi,"P",{});var Nae=s(sf);_Hr=r(Nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yoe=n(Nae,"A",{href:!0});var czt=s(yoe);uHr=r(czt,"from_pretrained()"),czt.forEach(t),bHr=r(Nae," class method or the "),xoe=n(Nae,"A",{href:!0});var fzt=s(xoe);vHr=r(fzt,"from_config()"),fzt.forEach(t),FHr=r(Nae,` class
method.`),Nae.forEach(t),THr=i(fi),q$=n(fi,"P",{});var KHe=s(q$);MHr=r(KHe,"This class cannot be instantiated directly using "),w3e=n(KHe,"CODE",{});var mzt=s(w3e);EHr=r(mzt,"__init__()"),mzt.forEach(t),CHr=r(KHe," (throws an error)."),KHe.forEach(t),wHr=i(fi),Jt=n(fi,"DIV",{class:!0});var JA=s(Jt);T(j$.$$.fragment,JA),AHr=i(JA),A3e=n(JA,"P",{});var gzt=s(A3e);LHr=r(gzt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gzt.forEach(t),yHr=i(JA),lf=n(JA,"P",{});var qae=s(lf);xHr=r(qae,`Note:
Loading a model from its configuration file does `),L3e=n(qae,"STRONG",{});var hzt=s(L3e);$Hr=r(hzt,"not"),hzt.forEach(t),kHr=r(qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=n(qae,"A",{href:!0});var pzt=s($oe);SHr=r(pzt,"from_pretrained()"),pzt.forEach(t),RHr=r(qae," to load the model weights."),qae.forEach(t),PHr=i(JA),T(b3.$$.fragment,JA),JA.forEach(t),BHr=i(fi),Qr=n(fi,"DIV",{class:!0});var mi=s(Qr);T(D$.$$.fragment,mi),IHr=i(mi),y3e=n(mi,"P",{});var _zt=s(y3e);NHr=r(_zt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_zt.forEach(t),qHr=i(mi),Cn=n(mi,"P",{});var YA=s(Cn);jHr=r(YA,"The model class to instantiate is selected based on the "),x3e=n(YA,"CODE",{});var uzt=s(x3e);DHr=r(uzt,"model_type"),uzt.forEach(t),GHr=r(YA,` property of the config object (either
passed as an argument or loaded from `),$3e=n(YA,"CODE",{});var bzt=s($3e);OHr=r(bzt,"pretrained_model_name_or_path"),bzt.forEach(t),VHr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=n(YA,"CODE",{});var vzt=s(k3e);XHr=r(vzt,"pretrained_model_name_or_path"),vzt.forEach(t),zHr=r(YA,":"),YA.forEach(t),WHr=i(mi),$e=n(mi,"UL",{});var qe=s($e);v3=n(qe,"LI",{});var UVe=s(v3);S3e=n(UVe,"STRONG",{});var Fzt=s(S3e);QHr=r(Fzt,"albert"),Fzt.forEach(t),HHr=r(UVe," \u2014 "),koe=n(UVe,"A",{href:!0});var Tzt=s(koe);UHr=r(Tzt,"FlaxAlbertForMaskedLM"),Tzt.forEach(t),JHr=r(UVe," (ALBERT model)"),UVe.forEach(t),YHr=i(qe),F3=n(qe,"LI",{});var JVe=s(F3);R3e=n(JVe,"STRONG",{});var Mzt=s(R3e);KHr=r(Mzt,"bart"),Mzt.forEach(t),ZHr=r(JVe," \u2014 "),Soe=n(JVe,"A",{href:!0});var Ezt=s(Soe);eUr=r(Ezt,"FlaxBartForConditionalGeneration"),Ezt.forEach(t),oUr=r(JVe," (BART model)"),JVe.forEach(t),rUr=i(qe),T3=n(qe,"LI",{});var YVe=s(T3);P3e=n(YVe,"STRONG",{});var Czt=s(P3e);tUr=r(Czt,"bert"),Czt.forEach(t),aUr=r(YVe," \u2014 "),Roe=n(YVe,"A",{href:!0});var wzt=s(Roe);nUr=r(wzt,"FlaxBertForMaskedLM"),wzt.forEach(t),sUr=r(YVe," (BERT model)"),YVe.forEach(t),lUr=i(qe),M3=n(qe,"LI",{});var KVe=s(M3);B3e=n(KVe,"STRONG",{});var Azt=s(B3e);iUr=r(Azt,"big_bird"),Azt.forEach(t),dUr=r(KVe," \u2014 "),Poe=n(KVe,"A",{href:!0});var Lzt=s(Poe);cUr=r(Lzt,"FlaxBigBirdForMaskedLM"),Lzt.forEach(t),fUr=r(KVe," (BigBird model)"),KVe.forEach(t),mUr=i(qe),E3=n(qe,"LI",{});var ZVe=s(E3);I3e=n(ZVe,"STRONG",{});var yzt=s(I3e);gUr=r(yzt,"distilbert"),yzt.forEach(t),hUr=r(ZVe," \u2014 "),Boe=n(ZVe,"A",{href:!0});var xzt=s(Boe);pUr=r(xzt,"FlaxDistilBertForMaskedLM"),xzt.forEach(t),_Ur=r(ZVe," (DistilBERT model)"),ZVe.forEach(t),uUr=i(qe),C3=n(qe,"LI",{});var eXe=s(C3);N3e=n(eXe,"STRONG",{});var $zt=s(N3e);bUr=r($zt,"electra"),$zt.forEach(t),vUr=r(eXe," \u2014 "),Ioe=n(eXe,"A",{href:!0});var kzt=s(Ioe);FUr=r(kzt,"FlaxElectraForMaskedLM"),kzt.forEach(t),TUr=r(eXe," (ELECTRA model)"),eXe.forEach(t),MUr=i(qe),w3=n(qe,"LI",{});var oXe=s(w3);q3e=n(oXe,"STRONG",{});var Szt=s(q3e);EUr=r(Szt,"mbart"),Szt.forEach(t),CUr=r(oXe," \u2014 "),Noe=n(oXe,"A",{href:!0});var Rzt=s(Noe);wUr=r(Rzt,"FlaxMBartForConditionalGeneration"),Rzt.forEach(t),AUr=r(oXe," (mBART model)"),oXe.forEach(t),LUr=i(qe),A3=n(qe,"LI",{});var rXe=s(A3);j3e=n(rXe,"STRONG",{});var Pzt=s(j3e);yUr=r(Pzt,"roberta"),Pzt.forEach(t),xUr=r(rXe," \u2014 "),qoe=n(rXe,"A",{href:!0});var Bzt=s(qoe);$Ur=r(Bzt,"FlaxRobertaForMaskedLM"),Bzt.forEach(t),kUr=r(rXe," (RoBERTa model)"),rXe.forEach(t),SUr=i(qe),L3=n(qe,"LI",{});var tXe=s(L3);D3e=n(tXe,"STRONG",{});var Izt=s(D3e);RUr=r(Izt,"roformer"),Izt.forEach(t),PUr=r(tXe," \u2014 "),joe=n(tXe,"A",{href:!0});var Nzt=s(joe);BUr=r(Nzt,"FlaxRoFormerForMaskedLM"),Nzt.forEach(t),IUr=r(tXe," (RoFormer model)"),tXe.forEach(t),NUr=i(qe),y3=n(qe,"LI",{});var aXe=s(y3);G3e=n(aXe,"STRONG",{});var qzt=s(G3e);qUr=r(qzt,"xlm-roberta"),qzt.forEach(t),jUr=r(aXe," \u2014 "),Doe=n(aXe,"A",{href:!0});var jzt=s(Doe);DUr=r(jzt,"FlaxXLMRobertaForMaskedLM"),jzt.forEach(t),GUr=r(aXe," (XLM-RoBERTa model)"),aXe.forEach(t),qe.forEach(t),OUr=i(mi),T(x3.$$.fragment,mi),mi.forEach(t),fi.forEach(t),XWe=i(f),df=n(f,"H2",{class:!0});var ZHe=s(df);$3=n(ZHe,"A",{id:!0,class:!0,href:!0});var Dzt=s($3);O3e=n(Dzt,"SPAN",{});var Gzt=s(O3e);T(G$.$$.fragment,Gzt),Gzt.forEach(t),Dzt.forEach(t),VUr=i(ZHe),V3e=n(ZHe,"SPAN",{});var Ozt=s(V3e);XUr=r(Ozt,"FlaxAutoModelForSeq2SeqLM"),Ozt.forEach(t),ZHe.forEach(t),zWe=i(f),Fr=n(f,"DIV",{class:!0});var gi=s(Fr);T(O$.$$.fragment,gi),zUr=i(gi),cf=n(gi,"P",{});var jae=s(cf);WUr=r(jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Goe=n(jae,"A",{href:!0});var Vzt=s(Goe);QUr=r(Vzt,"from_pretrained()"),Vzt.forEach(t),HUr=r(jae," class method or the "),Ooe=n(jae,"A",{href:!0});var Xzt=s(Ooe);UUr=r(Xzt,"from_config()"),Xzt.forEach(t),JUr=r(jae,` class
method.`),jae.forEach(t),YUr=i(gi),V$=n(gi,"P",{});var eUe=s(V$);KUr=r(eUe,"This class cannot be instantiated directly using "),X3e=n(eUe,"CODE",{});var zzt=s(X3e);ZUr=r(zzt,"__init__()"),zzt.forEach(t),eJr=r(eUe," (throws an error)."),eUe.forEach(t),oJr=i(gi),Yt=n(gi,"DIV",{class:!0});var KA=s(Yt);T(X$.$$.fragment,KA),rJr=i(KA),z3e=n(KA,"P",{});var Wzt=s(z3e);tJr=r(Wzt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Wzt.forEach(t),aJr=i(KA),ff=n(KA,"P",{});var Dae=s(ff);nJr=r(Dae,`Note:
Loading a model from its configuration file does `),W3e=n(Dae,"STRONG",{});var Qzt=s(W3e);sJr=r(Qzt,"not"),Qzt.forEach(t),lJr=r(Dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Voe=n(Dae,"A",{href:!0});var Hzt=s(Voe);iJr=r(Hzt,"from_pretrained()"),Hzt.forEach(t),dJr=r(Dae," to load the model weights."),Dae.forEach(t),cJr=i(KA),T(k3.$$.fragment,KA),KA.forEach(t),fJr=i(gi),Hr=n(gi,"DIV",{class:!0});var hi=s(Hr);T(z$.$$.fragment,hi),mJr=i(hi),Q3e=n(hi,"P",{});var Uzt=s(Q3e);gJr=r(Uzt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Uzt.forEach(t),hJr=i(hi),wn=n(hi,"P",{});var ZA=s(wn);pJr=r(ZA,"The model class to instantiate is selected based on the "),H3e=n(ZA,"CODE",{});var Jzt=s(H3e);_Jr=r(Jzt,"model_type"),Jzt.forEach(t),uJr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),U3e=n(ZA,"CODE",{});var Yzt=s(U3e);bJr=r(Yzt,"pretrained_model_name_or_path"),Yzt.forEach(t),vJr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=n(ZA,"CODE",{});var Kzt=s(J3e);FJr=r(Kzt,"pretrained_model_name_or_path"),Kzt.forEach(t),TJr=r(ZA,":"),ZA.forEach(t),MJr=i(hi),ke=n(hi,"UL",{});var je=s(ke);S3=n(je,"LI",{});var nXe=s(S3);Y3e=n(nXe,"STRONG",{});var Zzt=s(Y3e);EJr=r(Zzt,"bart"),Zzt.forEach(t),CJr=r(nXe," \u2014 "),Xoe=n(nXe,"A",{href:!0});var eWt=s(Xoe);wJr=r(eWt,"FlaxBartForConditionalGeneration"),eWt.forEach(t),AJr=r(nXe," (BART model)"),nXe.forEach(t),LJr=i(je),R3=n(je,"LI",{});var sXe=s(R3);K3e=n(sXe,"STRONG",{});var oWt=s(K3e);yJr=r(oWt,"blenderbot"),oWt.forEach(t),xJr=r(sXe," \u2014 "),zoe=n(sXe,"A",{href:!0});var rWt=s(zoe);$Jr=r(rWt,"FlaxBlenderbotForConditionalGeneration"),rWt.forEach(t),kJr=r(sXe," (Blenderbot model)"),sXe.forEach(t),SJr=i(je),P3=n(je,"LI",{});var lXe=s(P3);Z3e=n(lXe,"STRONG",{});var tWt=s(Z3e);RJr=r(tWt,"blenderbot-small"),tWt.forEach(t),PJr=r(lXe," \u2014 "),Woe=n(lXe,"A",{href:!0});var aWt=s(Woe);BJr=r(aWt,"FlaxBlenderbotSmallForConditionalGeneration"),aWt.forEach(t),IJr=r(lXe," (BlenderbotSmall model)"),lXe.forEach(t),NJr=i(je),B3=n(je,"LI",{});var iXe=s(B3);e0e=n(iXe,"STRONG",{});var nWt=s(e0e);qJr=r(nWt,"encoder-decoder"),nWt.forEach(t),jJr=r(iXe," \u2014 "),Qoe=n(iXe,"A",{href:!0});var sWt=s(Qoe);DJr=r(sWt,"FlaxEncoderDecoderModel"),sWt.forEach(t),GJr=r(iXe," (Encoder decoder model)"),iXe.forEach(t),OJr=i(je),I3=n(je,"LI",{});var dXe=s(I3);o0e=n(dXe,"STRONG",{});var lWt=s(o0e);VJr=r(lWt,"longt5"),lWt.forEach(t),XJr=r(dXe," \u2014 "),Hoe=n(dXe,"A",{href:!0});var iWt=s(Hoe);zJr=r(iWt,"FlaxLongT5ForConditionalGeneration"),iWt.forEach(t),WJr=r(dXe," (LongT5 model)"),dXe.forEach(t),QJr=i(je),N3=n(je,"LI",{});var cXe=s(N3);r0e=n(cXe,"STRONG",{});var dWt=s(r0e);HJr=r(dWt,"marian"),dWt.forEach(t),UJr=r(cXe," \u2014 "),Uoe=n(cXe,"A",{href:!0});var cWt=s(Uoe);JJr=r(cWt,"FlaxMarianMTModel"),cWt.forEach(t),YJr=r(cXe," (Marian model)"),cXe.forEach(t),KJr=i(je),q3=n(je,"LI",{});var fXe=s(q3);t0e=n(fXe,"STRONG",{});var fWt=s(t0e);ZJr=r(fWt,"mbart"),fWt.forEach(t),eYr=r(fXe," \u2014 "),Joe=n(fXe,"A",{href:!0});var mWt=s(Joe);oYr=r(mWt,"FlaxMBartForConditionalGeneration"),mWt.forEach(t),rYr=r(fXe," (mBART model)"),fXe.forEach(t),tYr=i(je),j3=n(je,"LI",{});var mXe=s(j3);a0e=n(mXe,"STRONG",{});var gWt=s(a0e);aYr=r(gWt,"mt5"),gWt.forEach(t),nYr=r(mXe," \u2014 "),Yoe=n(mXe,"A",{href:!0});var hWt=s(Yoe);sYr=r(hWt,"FlaxMT5ForConditionalGeneration"),hWt.forEach(t),lYr=r(mXe," (MT5 model)"),mXe.forEach(t),iYr=i(je),D3=n(je,"LI",{});var gXe=s(D3);n0e=n(gXe,"STRONG",{});var pWt=s(n0e);dYr=r(pWt,"pegasus"),pWt.forEach(t),cYr=r(gXe," \u2014 "),Koe=n(gXe,"A",{href:!0});var _Wt=s(Koe);fYr=r(_Wt,"FlaxPegasusForConditionalGeneration"),_Wt.forEach(t),mYr=r(gXe," (Pegasus model)"),gXe.forEach(t),gYr=i(je),G3=n(je,"LI",{});var hXe=s(G3);s0e=n(hXe,"STRONG",{});var uWt=s(s0e);hYr=r(uWt,"t5"),uWt.forEach(t),pYr=r(hXe," \u2014 "),Zoe=n(hXe,"A",{href:!0});var bWt=s(Zoe);_Yr=r(bWt,"FlaxT5ForConditionalGeneration"),bWt.forEach(t),uYr=r(hXe," (T5 model)"),hXe.forEach(t),je.forEach(t),bYr=i(hi),T(O3.$$.fragment,hi),hi.forEach(t),gi.forEach(t),WWe=i(f),mf=n(f,"H2",{class:!0});var oUe=s(mf);V3=n(oUe,"A",{id:!0,class:!0,href:!0});var vWt=s(V3);l0e=n(vWt,"SPAN",{});var FWt=s(l0e);T(W$.$$.fragment,FWt),FWt.forEach(t),vWt.forEach(t),vYr=i(oUe),i0e=n(oUe,"SPAN",{});var TWt=s(i0e);FYr=r(TWt,"FlaxAutoModelForSequenceClassification"),TWt.forEach(t),oUe.forEach(t),QWe=i(f),Tr=n(f,"DIV",{class:!0});var pi=s(Tr);T(Q$.$$.fragment,pi),TYr=i(pi),gf=n(pi,"P",{});var Gae=s(gf);MYr=r(Gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ere=n(Gae,"A",{href:!0});var MWt=s(ere);EYr=r(MWt,"from_pretrained()"),MWt.forEach(t),CYr=r(Gae," class method or the "),ore=n(Gae,"A",{href:!0});var EWt=s(ore);wYr=r(EWt,"from_config()"),EWt.forEach(t),AYr=r(Gae,` class
method.`),Gae.forEach(t),LYr=i(pi),H$=n(pi,"P",{});var rUe=s(H$);yYr=r(rUe,"This class cannot be instantiated directly using "),d0e=n(rUe,"CODE",{});var CWt=s(d0e);xYr=r(CWt,"__init__()"),CWt.forEach(t),$Yr=r(rUe," (throws an error)."),rUe.forEach(t),kYr=i(pi),Kt=n(pi,"DIV",{class:!0});var eL=s(Kt);T(U$.$$.fragment,eL),SYr=i(eL),c0e=n(eL,"P",{});var wWt=s(c0e);RYr=r(wWt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wWt.forEach(t),PYr=i(eL),hf=n(eL,"P",{});var Oae=s(hf);BYr=r(Oae,`Note:
Loading a model from its configuration file does `),f0e=n(Oae,"STRONG",{});var AWt=s(f0e);IYr=r(AWt,"not"),AWt.forEach(t),NYr=r(Oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=n(Oae,"A",{href:!0});var LWt=s(rre);qYr=r(LWt,"from_pretrained()"),LWt.forEach(t),jYr=r(Oae," to load the model weights."),Oae.forEach(t),DYr=i(eL),T(X3.$$.fragment,eL),eL.forEach(t),GYr=i(pi),Ur=n(pi,"DIV",{class:!0});var _i=s(Ur);T(J$.$$.fragment,_i),OYr=i(_i),m0e=n(_i,"P",{});var yWt=s(m0e);VYr=r(yWt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yWt.forEach(t),XYr=i(_i),An=n(_i,"P",{});var oL=s(An);zYr=r(oL,"The model class to instantiate is selected based on the "),g0e=n(oL,"CODE",{});var xWt=s(g0e);WYr=r(xWt,"model_type"),xWt.forEach(t),QYr=r(oL,` property of the config object (either
passed as an argument or loaded from `),h0e=n(oL,"CODE",{});var $Wt=s(h0e);HYr=r($Wt,"pretrained_model_name_or_path"),$Wt.forEach(t),UYr=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=n(oL,"CODE",{});var kWt=s(p0e);JYr=r(kWt,"pretrained_model_name_or_path"),kWt.forEach(t),YYr=r(oL,":"),oL.forEach(t),KYr=i(_i),Se=n(_i,"UL",{});var De=s(Se);z3=n(De,"LI",{});var pXe=s(z3);_0e=n(pXe,"STRONG",{});var SWt=s(_0e);ZYr=r(SWt,"albert"),SWt.forEach(t),eKr=r(pXe," \u2014 "),tre=n(pXe,"A",{href:!0});var RWt=s(tre);oKr=r(RWt,"FlaxAlbertForSequenceClassification"),RWt.forEach(t),rKr=r(pXe," (ALBERT model)"),pXe.forEach(t),tKr=i(De),W3=n(De,"LI",{});var _Xe=s(W3);u0e=n(_Xe,"STRONG",{});var PWt=s(u0e);aKr=r(PWt,"bart"),PWt.forEach(t),nKr=r(_Xe," \u2014 "),are=n(_Xe,"A",{href:!0});var BWt=s(are);sKr=r(BWt,"FlaxBartForSequenceClassification"),BWt.forEach(t),lKr=r(_Xe," (BART model)"),_Xe.forEach(t),iKr=i(De),Q3=n(De,"LI",{});var uXe=s(Q3);b0e=n(uXe,"STRONG",{});var IWt=s(b0e);dKr=r(IWt,"bert"),IWt.forEach(t),cKr=r(uXe," \u2014 "),nre=n(uXe,"A",{href:!0});var NWt=s(nre);fKr=r(NWt,"FlaxBertForSequenceClassification"),NWt.forEach(t),mKr=r(uXe," (BERT model)"),uXe.forEach(t),gKr=i(De),H3=n(De,"LI",{});var bXe=s(H3);v0e=n(bXe,"STRONG",{});var qWt=s(v0e);hKr=r(qWt,"big_bird"),qWt.forEach(t),pKr=r(bXe," \u2014 "),sre=n(bXe,"A",{href:!0});var jWt=s(sre);_Kr=r(jWt,"FlaxBigBirdForSequenceClassification"),jWt.forEach(t),uKr=r(bXe," (BigBird model)"),bXe.forEach(t),bKr=i(De),U3=n(De,"LI",{});var vXe=s(U3);F0e=n(vXe,"STRONG",{});var DWt=s(F0e);vKr=r(DWt,"distilbert"),DWt.forEach(t),FKr=r(vXe," \u2014 "),lre=n(vXe,"A",{href:!0});var GWt=s(lre);TKr=r(GWt,"FlaxDistilBertForSequenceClassification"),GWt.forEach(t),MKr=r(vXe," (DistilBERT model)"),vXe.forEach(t),EKr=i(De),J3=n(De,"LI",{});var FXe=s(J3);T0e=n(FXe,"STRONG",{});var OWt=s(T0e);CKr=r(OWt,"electra"),OWt.forEach(t),wKr=r(FXe," \u2014 "),ire=n(FXe,"A",{href:!0});var VWt=s(ire);AKr=r(VWt,"FlaxElectraForSequenceClassification"),VWt.forEach(t),LKr=r(FXe," (ELECTRA model)"),FXe.forEach(t),yKr=i(De),Y3=n(De,"LI",{});var TXe=s(Y3);M0e=n(TXe,"STRONG",{});var XWt=s(M0e);xKr=r(XWt,"mbart"),XWt.forEach(t),$Kr=r(TXe," \u2014 "),dre=n(TXe,"A",{href:!0});var zWt=s(dre);kKr=r(zWt,"FlaxMBartForSequenceClassification"),zWt.forEach(t),SKr=r(TXe," (mBART model)"),TXe.forEach(t),RKr=i(De),K3=n(De,"LI",{});var MXe=s(K3);E0e=n(MXe,"STRONG",{});var WWt=s(E0e);PKr=r(WWt,"roberta"),WWt.forEach(t),BKr=r(MXe," \u2014 "),cre=n(MXe,"A",{href:!0});var QWt=s(cre);IKr=r(QWt,"FlaxRobertaForSequenceClassification"),QWt.forEach(t),NKr=r(MXe," (RoBERTa model)"),MXe.forEach(t),qKr=i(De),Z3=n(De,"LI",{});var EXe=s(Z3);C0e=n(EXe,"STRONG",{});var HWt=s(C0e);jKr=r(HWt,"roformer"),HWt.forEach(t),DKr=r(EXe," \u2014 "),fre=n(EXe,"A",{href:!0});var UWt=s(fre);GKr=r(UWt,"FlaxRoFormerForSequenceClassification"),UWt.forEach(t),OKr=r(EXe," (RoFormer model)"),EXe.forEach(t),VKr=i(De),e0=n(De,"LI",{});var CXe=s(e0);w0e=n(CXe,"STRONG",{});var JWt=s(w0e);XKr=r(JWt,"xlm-roberta"),JWt.forEach(t),zKr=r(CXe," \u2014 "),mre=n(CXe,"A",{href:!0});var YWt=s(mre);WKr=r(YWt,"FlaxXLMRobertaForSequenceClassification"),YWt.forEach(t),QKr=r(CXe," (XLM-RoBERTa model)"),CXe.forEach(t),De.forEach(t),HKr=i(_i),T(o0.$$.fragment,_i),_i.forEach(t),pi.forEach(t),HWe=i(f),pf=n(f,"H2",{class:!0});var tUe=s(pf);r0=n(tUe,"A",{id:!0,class:!0,href:!0});var KWt=s(r0);A0e=n(KWt,"SPAN",{});var ZWt=s(A0e);T(Y$.$$.fragment,ZWt),ZWt.forEach(t),KWt.forEach(t),UKr=i(tUe),L0e=n(tUe,"SPAN",{});var eQt=s(L0e);JKr=r(eQt,"FlaxAutoModelForQuestionAnswering"),eQt.forEach(t),tUe.forEach(t),UWe=i(f),Mr=n(f,"DIV",{class:!0});var ui=s(Mr);T(K$.$$.fragment,ui),YKr=i(ui),_f=n(ui,"P",{});var Vae=s(_f);KKr=r(Vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gre=n(Vae,"A",{href:!0});var oQt=s(gre);ZKr=r(oQt,"from_pretrained()"),oQt.forEach(t),eZr=r(Vae," class method or the "),hre=n(Vae,"A",{href:!0});var rQt=s(hre);oZr=r(rQt,"from_config()"),rQt.forEach(t),rZr=r(Vae,` class
method.`),Vae.forEach(t),tZr=i(ui),Z$=n(ui,"P",{});var aUe=s(Z$);aZr=r(aUe,"This class cannot be instantiated directly using "),y0e=n(aUe,"CODE",{});var tQt=s(y0e);nZr=r(tQt,"__init__()"),tQt.forEach(t),sZr=r(aUe," (throws an error)."),aUe.forEach(t),lZr=i(ui),Zt=n(ui,"DIV",{class:!0});var rL=s(Zt);T(ek.$$.fragment,rL),iZr=i(rL),x0e=n(rL,"P",{});var aQt=s(x0e);dZr=r(aQt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aQt.forEach(t),cZr=i(rL),uf=n(rL,"P",{});var Xae=s(uf);fZr=r(Xae,`Note:
Loading a model from its configuration file does `),$0e=n(Xae,"STRONG",{});var nQt=s($0e);mZr=r(nQt,"not"),nQt.forEach(t),gZr=r(Xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),pre=n(Xae,"A",{href:!0});var sQt=s(pre);hZr=r(sQt,"from_pretrained()"),sQt.forEach(t),pZr=r(Xae," to load the model weights."),Xae.forEach(t),_Zr=i(rL),T(t0.$$.fragment,rL),rL.forEach(t),uZr=i(ui),Jr=n(ui,"DIV",{class:!0});var bi=s(Jr);T(ok.$$.fragment,bi),bZr=i(bi),k0e=n(bi,"P",{});var lQt=s(k0e);vZr=r(lQt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lQt.forEach(t),FZr=i(bi),Ln=n(bi,"P",{});var tL=s(Ln);TZr=r(tL,"The model class to instantiate is selected based on the "),S0e=n(tL,"CODE",{});var iQt=s(S0e);MZr=r(iQt,"model_type"),iQt.forEach(t),EZr=r(tL,` property of the config object (either
passed as an argument or loaded from `),R0e=n(tL,"CODE",{});var dQt=s(R0e);CZr=r(dQt,"pretrained_model_name_or_path"),dQt.forEach(t),wZr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=n(tL,"CODE",{});var cQt=s(P0e);AZr=r(cQt,"pretrained_model_name_or_path"),cQt.forEach(t),LZr=r(tL,":"),tL.forEach(t),yZr=i(bi),Re=n(bi,"UL",{});var Ge=s(Re);a0=n(Ge,"LI",{});var wXe=s(a0);B0e=n(wXe,"STRONG",{});var fQt=s(B0e);xZr=r(fQt,"albert"),fQt.forEach(t),$Zr=r(wXe," \u2014 "),_re=n(wXe,"A",{href:!0});var mQt=s(_re);kZr=r(mQt,"FlaxAlbertForQuestionAnswering"),mQt.forEach(t),SZr=r(wXe," (ALBERT model)"),wXe.forEach(t),RZr=i(Ge),n0=n(Ge,"LI",{});var AXe=s(n0);I0e=n(AXe,"STRONG",{});var gQt=s(I0e);PZr=r(gQt,"bart"),gQt.forEach(t),BZr=r(AXe," \u2014 "),ure=n(AXe,"A",{href:!0});var hQt=s(ure);IZr=r(hQt,"FlaxBartForQuestionAnswering"),hQt.forEach(t),NZr=r(AXe," (BART model)"),AXe.forEach(t),qZr=i(Ge),s0=n(Ge,"LI",{});var LXe=s(s0);N0e=n(LXe,"STRONG",{});var pQt=s(N0e);jZr=r(pQt,"bert"),pQt.forEach(t),DZr=r(LXe," \u2014 "),bre=n(LXe,"A",{href:!0});var _Qt=s(bre);GZr=r(_Qt,"FlaxBertForQuestionAnswering"),_Qt.forEach(t),OZr=r(LXe," (BERT model)"),LXe.forEach(t),VZr=i(Ge),l0=n(Ge,"LI",{});var yXe=s(l0);q0e=n(yXe,"STRONG",{});var uQt=s(q0e);XZr=r(uQt,"big_bird"),uQt.forEach(t),zZr=r(yXe," \u2014 "),vre=n(yXe,"A",{href:!0});var bQt=s(vre);WZr=r(bQt,"FlaxBigBirdForQuestionAnswering"),bQt.forEach(t),QZr=r(yXe," (BigBird model)"),yXe.forEach(t),HZr=i(Ge),i0=n(Ge,"LI",{});var xXe=s(i0);j0e=n(xXe,"STRONG",{});var vQt=s(j0e);UZr=r(vQt,"distilbert"),vQt.forEach(t),JZr=r(xXe," \u2014 "),Fre=n(xXe,"A",{href:!0});var FQt=s(Fre);YZr=r(FQt,"FlaxDistilBertForQuestionAnswering"),FQt.forEach(t),KZr=r(xXe," (DistilBERT model)"),xXe.forEach(t),ZZr=i(Ge),d0=n(Ge,"LI",{});var $Xe=s(d0);D0e=n($Xe,"STRONG",{});var TQt=s(D0e);eet=r(TQt,"electra"),TQt.forEach(t),oet=r($Xe," \u2014 "),Tre=n($Xe,"A",{href:!0});var MQt=s(Tre);ret=r(MQt,"FlaxElectraForQuestionAnswering"),MQt.forEach(t),tet=r($Xe," (ELECTRA model)"),$Xe.forEach(t),aet=i(Ge),c0=n(Ge,"LI",{});var kXe=s(c0);G0e=n(kXe,"STRONG",{});var EQt=s(G0e);net=r(EQt,"mbart"),EQt.forEach(t),set=r(kXe," \u2014 "),Mre=n(kXe,"A",{href:!0});var CQt=s(Mre);iet=r(CQt,"FlaxMBartForQuestionAnswering"),CQt.forEach(t),det=r(kXe," (mBART model)"),kXe.forEach(t),cet=i(Ge),f0=n(Ge,"LI",{});var SXe=s(f0);O0e=n(SXe,"STRONG",{});var wQt=s(O0e);fet=r(wQt,"roberta"),wQt.forEach(t),met=r(SXe," \u2014 "),Ere=n(SXe,"A",{href:!0});var AQt=s(Ere);get=r(AQt,"FlaxRobertaForQuestionAnswering"),AQt.forEach(t),het=r(SXe," (RoBERTa model)"),SXe.forEach(t),pet=i(Ge),m0=n(Ge,"LI",{});var RXe=s(m0);V0e=n(RXe,"STRONG",{});var LQt=s(V0e);_et=r(LQt,"roformer"),LQt.forEach(t),uet=r(RXe," \u2014 "),Cre=n(RXe,"A",{href:!0});var yQt=s(Cre);bet=r(yQt,"FlaxRoFormerForQuestionAnswering"),yQt.forEach(t),vet=r(RXe," (RoFormer model)"),RXe.forEach(t),Fet=i(Ge),g0=n(Ge,"LI",{});var PXe=s(g0);X0e=n(PXe,"STRONG",{});var xQt=s(X0e);Tet=r(xQt,"xlm-roberta"),xQt.forEach(t),Met=r(PXe," \u2014 "),wre=n(PXe,"A",{href:!0});var $Qt=s(wre);Eet=r($Qt,"FlaxXLMRobertaForQuestionAnswering"),$Qt.forEach(t),Cet=r(PXe," (XLM-RoBERTa model)"),PXe.forEach(t),Ge.forEach(t),wet=i(bi),T(h0.$$.fragment,bi),bi.forEach(t),ui.forEach(t),JWe=i(f),bf=n(f,"H2",{class:!0});var nUe=s(bf);p0=n(nUe,"A",{id:!0,class:!0,href:!0});var kQt=s(p0);z0e=n(kQt,"SPAN",{});var SQt=s(z0e);T(rk.$$.fragment,SQt),SQt.forEach(t),kQt.forEach(t),Aet=i(nUe),W0e=n(nUe,"SPAN",{});var RQt=s(W0e);Let=r(RQt,"FlaxAutoModelForTokenClassification"),RQt.forEach(t),nUe.forEach(t),YWe=i(f),Er=n(f,"DIV",{class:!0});var vi=s(Er);T(tk.$$.fragment,vi),yet=i(vi),vf=n(vi,"P",{});var zae=s(vf);xet=r(zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Are=n(zae,"A",{href:!0});var PQt=s(Are);$et=r(PQt,"from_pretrained()"),PQt.forEach(t),ket=r(zae," class method or the "),Lre=n(zae,"A",{href:!0});var BQt=s(Lre);Set=r(BQt,"from_config()"),BQt.forEach(t),Ret=r(zae,` class
method.`),zae.forEach(t),Pet=i(vi),ak=n(vi,"P",{});var sUe=s(ak);Bet=r(sUe,"This class cannot be instantiated directly using "),Q0e=n(sUe,"CODE",{});var IQt=s(Q0e);Iet=r(IQt,"__init__()"),IQt.forEach(t),Net=r(sUe," (throws an error)."),sUe.forEach(t),qet=i(vi),ea=n(vi,"DIV",{class:!0});var aL=s(ea);T(nk.$$.fragment,aL),jet=i(aL),H0e=n(aL,"P",{});var NQt=s(H0e);Det=r(NQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),NQt.forEach(t),Get=i(aL),Ff=n(aL,"P",{});var Wae=s(Ff);Oet=r(Wae,`Note:
Loading a model from its configuration file does `),U0e=n(Wae,"STRONG",{});var qQt=s(U0e);Vet=r(qQt,"not"),qQt.forEach(t),Xet=r(Wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=n(Wae,"A",{href:!0});var jQt=s(yre);zet=r(jQt,"from_pretrained()"),jQt.forEach(t),Wet=r(Wae," to load the model weights."),Wae.forEach(t),Qet=i(aL),T(_0.$$.fragment,aL),aL.forEach(t),Het=i(vi),Yr=n(vi,"DIV",{class:!0});var Fi=s(Yr);T(sk.$$.fragment,Fi),Uet=i(Fi),J0e=n(Fi,"P",{});var DQt=s(J0e);Jet=r(DQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),DQt.forEach(t),Yet=i(Fi),yn=n(Fi,"P",{});var nL=s(yn);Ket=r(nL,"The model class to instantiate is selected based on the "),Y0e=n(nL,"CODE",{});var GQt=s(Y0e);Zet=r(GQt,"model_type"),GQt.forEach(t),eot=r(nL,` property of the config object (either
passed as an argument or loaded from `),K0e=n(nL,"CODE",{});var OQt=s(K0e);oot=r(OQt,"pretrained_model_name_or_path"),OQt.forEach(t),rot=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=n(nL,"CODE",{});var VQt=s(Z0e);tot=r(VQt,"pretrained_model_name_or_path"),VQt.forEach(t),aot=r(nL,":"),nL.forEach(t),not=i(Fi),Xe=n(Fi,"UL",{});var Eo=s(Xe);u0=n(Eo,"LI",{});var BXe=s(u0);ewe=n(BXe,"STRONG",{});var XQt=s(ewe);sot=r(XQt,"albert"),XQt.forEach(t),lot=r(BXe," \u2014 "),xre=n(BXe,"A",{href:!0});var zQt=s(xre);iot=r(zQt,"FlaxAlbertForTokenClassification"),zQt.forEach(t),dot=r(BXe," (ALBERT model)"),BXe.forEach(t),cot=i(Eo),b0=n(Eo,"LI",{});var IXe=s(b0);owe=n(IXe,"STRONG",{});var WQt=s(owe);fot=r(WQt,"bert"),WQt.forEach(t),mot=r(IXe," \u2014 "),$re=n(IXe,"A",{href:!0});var QQt=s($re);got=r(QQt,"FlaxBertForTokenClassification"),QQt.forEach(t),hot=r(IXe," (BERT model)"),IXe.forEach(t),pot=i(Eo),v0=n(Eo,"LI",{});var NXe=s(v0);rwe=n(NXe,"STRONG",{});var HQt=s(rwe);_ot=r(HQt,"big_bird"),HQt.forEach(t),uot=r(NXe," \u2014 "),kre=n(NXe,"A",{href:!0});var UQt=s(kre);bot=r(UQt,"FlaxBigBirdForTokenClassification"),UQt.forEach(t),vot=r(NXe," (BigBird model)"),NXe.forEach(t),Fot=i(Eo),F0=n(Eo,"LI",{});var qXe=s(F0);twe=n(qXe,"STRONG",{});var JQt=s(twe);Tot=r(JQt,"distilbert"),JQt.forEach(t),Mot=r(qXe," \u2014 "),Sre=n(qXe,"A",{href:!0});var YQt=s(Sre);Eot=r(YQt,"FlaxDistilBertForTokenClassification"),YQt.forEach(t),Cot=r(qXe," (DistilBERT model)"),qXe.forEach(t),wot=i(Eo),T0=n(Eo,"LI",{});var jXe=s(T0);awe=n(jXe,"STRONG",{});var KQt=s(awe);Aot=r(KQt,"electra"),KQt.forEach(t),Lot=r(jXe," \u2014 "),Rre=n(jXe,"A",{href:!0});var ZQt=s(Rre);yot=r(ZQt,"FlaxElectraForTokenClassification"),ZQt.forEach(t),xot=r(jXe," (ELECTRA model)"),jXe.forEach(t),$ot=i(Eo),M0=n(Eo,"LI",{});var DXe=s(M0);nwe=n(DXe,"STRONG",{});var eHt=s(nwe);kot=r(eHt,"roberta"),eHt.forEach(t),Sot=r(DXe," \u2014 "),Pre=n(DXe,"A",{href:!0});var oHt=s(Pre);Rot=r(oHt,"FlaxRobertaForTokenClassification"),oHt.forEach(t),Pot=r(DXe," (RoBERTa model)"),DXe.forEach(t),Bot=i(Eo),E0=n(Eo,"LI",{});var GXe=s(E0);swe=n(GXe,"STRONG",{});var rHt=s(swe);Iot=r(rHt,"roformer"),rHt.forEach(t),Not=r(GXe," \u2014 "),Bre=n(GXe,"A",{href:!0});var tHt=s(Bre);qot=r(tHt,"FlaxRoFormerForTokenClassification"),tHt.forEach(t),jot=r(GXe," (RoFormer model)"),GXe.forEach(t),Dot=i(Eo),C0=n(Eo,"LI",{});var OXe=s(C0);lwe=n(OXe,"STRONG",{});var aHt=s(lwe);Got=r(aHt,"xlm-roberta"),aHt.forEach(t),Oot=r(OXe," \u2014 "),Ire=n(OXe,"A",{href:!0});var nHt=s(Ire);Vot=r(nHt,"FlaxXLMRobertaForTokenClassification"),nHt.forEach(t),Xot=r(OXe," (XLM-RoBERTa model)"),OXe.forEach(t),Eo.forEach(t),zot=i(Fi),T(w0.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),KWe=i(f),Tf=n(f,"H2",{class:!0});var lUe=s(Tf);A0=n(lUe,"A",{id:!0,class:!0,href:!0});var sHt=s(A0);iwe=n(sHt,"SPAN",{});var lHt=s(iwe);T(lk.$$.fragment,lHt),lHt.forEach(t),sHt.forEach(t),Wot=i(lUe),dwe=n(lUe,"SPAN",{});var iHt=s(dwe);Qot=r(iHt,"FlaxAutoModelForMultipleChoice"),iHt.forEach(t),lUe.forEach(t),ZWe=i(f),Cr=n(f,"DIV",{class:!0});var Ti=s(Cr);T(ik.$$.fragment,Ti),Hot=i(Ti),Mf=n(Ti,"P",{});var Qae=s(Mf);Uot=r(Qae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Nre=n(Qae,"A",{href:!0});var dHt=s(Nre);Jot=r(dHt,"from_pretrained()"),dHt.forEach(t),Yot=r(Qae," class method or the "),qre=n(Qae,"A",{href:!0});var cHt=s(qre);Kot=r(cHt,"from_config()"),cHt.forEach(t),Zot=r(Qae,` class
method.`),Qae.forEach(t),ert=i(Ti),dk=n(Ti,"P",{});var iUe=s(dk);ort=r(iUe,"This class cannot be instantiated directly using "),cwe=n(iUe,"CODE",{});var fHt=s(cwe);rrt=r(fHt,"__init__()"),fHt.forEach(t),trt=r(iUe," (throws an error)."),iUe.forEach(t),art=i(Ti),oa=n(Ti,"DIV",{class:!0});var sL=s(oa);T(ck.$$.fragment,sL),nrt=i(sL),fwe=n(sL,"P",{});var mHt=s(fwe);srt=r(mHt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mHt.forEach(t),lrt=i(sL),Ef=n(sL,"P",{});var Hae=s(Ef);irt=r(Hae,`Note:
Loading a model from its configuration file does `),mwe=n(Hae,"STRONG",{});var gHt=s(mwe);drt=r(gHt,"not"),gHt.forEach(t),crt=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=n(Hae,"A",{href:!0});var hHt=s(jre);frt=r(hHt,"from_pretrained()"),hHt.forEach(t),mrt=r(Hae," to load the model weights."),Hae.forEach(t),grt=i(sL),T(L0.$$.fragment,sL),sL.forEach(t),hrt=i(Ti),Kr=n(Ti,"DIV",{class:!0});var Mi=s(Kr);T(fk.$$.fragment,Mi),prt=i(Mi),gwe=n(Mi,"P",{});var pHt=s(gwe);_rt=r(pHt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pHt.forEach(t),urt=i(Mi),xn=n(Mi,"P",{});var lL=s(xn);brt=r(lL,"The model class to instantiate is selected based on the "),hwe=n(lL,"CODE",{});var _Ht=s(hwe);vrt=r(_Ht,"model_type"),_Ht.forEach(t),Frt=r(lL,` property of the config object (either
passed as an argument or loaded from `),pwe=n(lL,"CODE",{});var uHt=s(pwe);Trt=r(uHt,"pretrained_model_name_or_path"),uHt.forEach(t),Mrt=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_we=n(lL,"CODE",{});var bHt=s(_we);Ert=r(bHt,"pretrained_model_name_or_path"),bHt.forEach(t),Crt=r(lL,":"),lL.forEach(t),wrt=i(Mi),ze=n(Mi,"UL",{});var Co=s(ze);y0=n(Co,"LI",{});var VXe=s(y0);uwe=n(VXe,"STRONG",{});var vHt=s(uwe);Art=r(vHt,"albert"),vHt.forEach(t),Lrt=r(VXe," \u2014 "),Dre=n(VXe,"A",{href:!0});var FHt=s(Dre);yrt=r(FHt,"FlaxAlbertForMultipleChoice"),FHt.forEach(t),xrt=r(VXe," (ALBERT model)"),VXe.forEach(t),$rt=i(Co),x0=n(Co,"LI",{});var XXe=s(x0);bwe=n(XXe,"STRONG",{});var THt=s(bwe);krt=r(THt,"bert"),THt.forEach(t),Srt=r(XXe," \u2014 "),Gre=n(XXe,"A",{href:!0});var MHt=s(Gre);Rrt=r(MHt,"FlaxBertForMultipleChoice"),MHt.forEach(t),Prt=r(XXe," (BERT model)"),XXe.forEach(t),Brt=i(Co),$0=n(Co,"LI",{});var zXe=s($0);vwe=n(zXe,"STRONG",{});var EHt=s(vwe);Irt=r(EHt,"big_bird"),EHt.forEach(t),Nrt=r(zXe," \u2014 "),Ore=n(zXe,"A",{href:!0});var CHt=s(Ore);qrt=r(CHt,"FlaxBigBirdForMultipleChoice"),CHt.forEach(t),jrt=r(zXe," (BigBird model)"),zXe.forEach(t),Drt=i(Co),k0=n(Co,"LI",{});var WXe=s(k0);Fwe=n(WXe,"STRONG",{});var wHt=s(Fwe);Grt=r(wHt,"distilbert"),wHt.forEach(t),Ort=r(WXe," \u2014 "),Vre=n(WXe,"A",{href:!0});var AHt=s(Vre);Vrt=r(AHt,"FlaxDistilBertForMultipleChoice"),AHt.forEach(t),Xrt=r(WXe," (DistilBERT model)"),WXe.forEach(t),zrt=i(Co),S0=n(Co,"LI",{});var QXe=s(S0);Twe=n(QXe,"STRONG",{});var LHt=s(Twe);Wrt=r(LHt,"electra"),LHt.forEach(t),Qrt=r(QXe," \u2014 "),Xre=n(QXe,"A",{href:!0});var yHt=s(Xre);Hrt=r(yHt,"FlaxElectraForMultipleChoice"),yHt.forEach(t),Urt=r(QXe," (ELECTRA model)"),QXe.forEach(t),Jrt=i(Co),R0=n(Co,"LI",{});var HXe=s(R0);Mwe=n(HXe,"STRONG",{});var xHt=s(Mwe);Yrt=r(xHt,"roberta"),xHt.forEach(t),Krt=r(HXe," \u2014 "),zre=n(HXe,"A",{href:!0});var $Ht=s(zre);Zrt=r($Ht,"FlaxRobertaForMultipleChoice"),$Ht.forEach(t),ett=r(HXe," (RoBERTa model)"),HXe.forEach(t),ott=i(Co),P0=n(Co,"LI",{});var UXe=s(P0);Ewe=n(UXe,"STRONG",{});var kHt=s(Ewe);rtt=r(kHt,"roformer"),kHt.forEach(t),ttt=r(UXe," \u2014 "),Wre=n(UXe,"A",{href:!0});var SHt=s(Wre);att=r(SHt,"FlaxRoFormerForMultipleChoice"),SHt.forEach(t),ntt=r(UXe," (RoFormer model)"),UXe.forEach(t),stt=i(Co),B0=n(Co,"LI",{});var JXe=s(B0);Cwe=n(JXe,"STRONG",{});var RHt=s(Cwe);ltt=r(RHt,"xlm-roberta"),RHt.forEach(t),itt=r(JXe," \u2014 "),Qre=n(JXe,"A",{href:!0});var PHt=s(Qre);dtt=r(PHt,"FlaxXLMRobertaForMultipleChoice"),PHt.forEach(t),ctt=r(JXe," (XLM-RoBERTa model)"),JXe.forEach(t),Co.forEach(t),ftt=i(Mi),T(I0.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),eQe=i(f),Cf=n(f,"H2",{class:!0});var dUe=s(Cf);N0=n(dUe,"A",{id:!0,class:!0,href:!0});var BHt=s(N0);wwe=n(BHt,"SPAN",{});var IHt=s(wwe);T(mk.$$.fragment,IHt),IHt.forEach(t),BHt.forEach(t),mtt=i(dUe),Awe=n(dUe,"SPAN",{});var NHt=s(Awe);gtt=r(NHt,"FlaxAutoModelForNextSentencePrediction"),NHt.forEach(t),dUe.forEach(t),oQe=i(f),wr=n(f,"DIV",{class:!0});var Ei=s(wr);T(gk.$$.fragment,Ei),htt=i(Ei),wf=n(Ei,"P",{});var Uae=s(wf);ptt=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Hre=n(Uae,"A",{href:!0});var qHt=s(Hre);_tt=r(qHt,"from_pretrained()"),qHt.forEach(t),utt=r(Uae," class method or the "),Ure=n(Uae,"A",{href:!0});var jHt=s(Ure);btt=r(jHt,"from_config()"),jHt.forEach(t),vtt=r(Uae,` class
method.`),Uae.forEach(t),Ftt=i(Ei),hk=n(Ei,"P",{});var cUe=s(hk);Ttt=r(cUe,"This class cannot be instantiated directly using "),Lwe=n(cUe,"CODE",{});var DHt=s(Lwe);Mtt=r(DHt,"__init__()"),DHt.forEach(t),Ett=r(cUe," (throws an error)."),cUe.forEach(t),Ctt=i(Ei),ra=n(Ei,"DIV",{class:!0});var iL=s(ra);T(pk.$$.fragment,iL),wtt=i(iL),ywe=n(iL,"P",{});var GHt=s(ywe);Att=r(GHt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),GHt.forEach(t),Ltt=i(iL),Af=n(iL,"P",{});var Jae=s(Af);ytt=r(Jae,`Note:
Loading a model from its configuration file does `),xwe=n(Jae,"STRONG",{});var OHt=s(xwe);xtt=r(OHt,"not"),OHt.forEach(t),$tt=r(Jae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=n(Jae,"A",{href:!0});var VHt=s(Jre);ktt=r(VHt,"from_pretrained()"),VHt.forEach(t),Stt=r(Jae," to load the model weights."),Jae.forEach(t),Rtt=i(iL),T(q0.$$.fragment,iL),iL.forEach(t),Ptt=i(Ei),Zr=n(Ei,"DIV",{class:!0});var Ci=s(Zr);T(_k.$$.fragment,Ci),Btt=i(Ci),$we=n(Ci,"P",{});var XHt=s($we);Itt=r(XHt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XHt.forEach(t),Ntt=i(Ci),$n=n(Ci,"P",{});var dL=s($n);qtt=r(dL,"The model class to instantiate is selected based on the "),kwe=n(dL,"CODE",{});var zHt=s(kwe);jtt=r(zHt,"model_type"),zHt.forEach(t),Dtt=r(dL,` property of the config object (either
passed as an argument or loaded from `),Swe=n(dL,"CODE",{});var WHt=s(Swe);Gtt=r(WHt,"pretrained_model_name_or_path"),WHt.forEach(t),Ott=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rwe=n(dL,"CODE",{});var QHt=s(Rwe);Vtt=r(QHt,"pretrained_model_name_or_path"),QHt.forEach(t),Xtt=r(dL,":"),dL.forEach(t),ztt=i(Ci),Pwe=n(Ci,"UL",{});var HHt=s(Pwe);j0=n(HHt,"LI",{});var YXe=s(j0);Bwe=n(YXe,"STRONG",{});var UHt=s(Bwe);Wtt=r(UHt,"bert"),UHt.forEach(t),Qtt=r(YXe," \u2014 "),Yre=n(YXe,"A",{href:!0});var JHt=s(Yre);Htt=r(JHt,"FlaxBertForNextSentencePrediction"),JHt.forEach(t),Utt=r(YXe," (BERT model)"),YXe.forEach(t),HHt.forEach(t),Jtt=i(Ci),T(D0.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),rQe=i(f),Lf=n(f,"H2",{class:!0});var fUe=s(Lf);G0=n(fUe,"A",{id:!0,class:!0,href:!0});var YHt=s(G0);Iwe=n(YHt,"SPAN",{});var KHt=s(Iwe);T(uk.$$.fragment,KHt),KHt.forEach(t),YHt.forEach(t),Ytt=i(fUe),Nwe=n(fUe,"SPAN",{});var ZHt=s(Nwe);Ktt=r(ZHt,"FlaxAutoModelForImageClassification"),ZHt.forEach(t),fUe.forEach(t),tQe=i(f),Ar=n(f,"DIV",{class:!0});var wi=s(Ar);T(bk.$$.fragment,wi),Ztt=i(wi),yf=n(wi,"P",{});var Yae=s(yf);eat=r(Yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Kre=n(Yae,"A",{href:!0});var eUt=s(Kre);oat=r(eUt,"from_pretrained()"),eUt.forEach(t),rat=r(Yae," class method or the "),Zre=n(Yae,"A",{href:!0});var oUt=s(Zre);tat=r(oUt,"from_config()"),oUt.forEach(t),aat=r(Yae,` class
method.`),Yae.forEach(t),nat=i(wi),vk=n(wi,"P",{});var mUe=s(vk);sat=r(mUe,"This class cannot be instantiated directly using "),qwe=n(mUe,"CODE",{});var rUt=s(qwe);lat=r(rUt,"__init__()"),rUt.forEach(t),iat=r(mUe," (throws an error)."),mUe.forEach(t),dat=i(wi),ta=n(wi,"DIV",{class:!0});var cL=s(ta);T(Fk.$$.fragment,cL),cat=i(cL),jwe=n(cL,"P",{});var tUt=s(jwe);fat=r(tUt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tUt.forEach(t),mat=i(cL),xf=n(cL,"P",{});var Kae=s(xf);gat=r(Kae,`Note:
Loading a model from its configuration file does `),Dwe=n(Kae,"STRONG",{});var aUt=s(Dwe);hat=r(aUt,"not"),aUt.forEach(t),pat=r(Kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=n(Kae,"A",{href:!0});var nUt=s(ete);_at=r(nUt,"from_pretrained()"),nUt.forEach(t),uat=r(Kae," to load the model weights."),Kae.forEach(t),bat=i(cL),T(O0.$$.fragment,cL),cL.forEach(t),vat=i(wi),et=n(wi,"DIV",{class:!0});var Ai=s(et);T(Tk.$$.fragment,Ai),Fat=i(Ai),Gwe=n(Ai,"P",{});var sUt=s(Gwe);Tat=r(sUt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sUt.forEach(t),Mat=i(Ai),kn=n(Ai,"P",{});var fL=s(kn);Eat=r(fL,"The model class to instantiate is selected based on the "),Owe=n(fL,"CODE",{});var lUt=s(Owe);Cat=r(lUt,"model_type"),lUt.forEach(t),wat=r(fL,` property of the config object (either
passed as an argument or loaded from `),Vwe=n(fL,"CODE",{});var iUt=s(Vwe);Aat=r(iUt,"pretrained_model_name_or_path"),iUt.forEach(t),Lat=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xwe=n(fL,"CODE",{});var dUt=s(Xwe);yat=r(dUt,"pretrained_model_name_or_path"),dUt.forEach(t),xat=r(fL,":"),fL.forEach(t),$at=i(Ai),Mk=n(Ai,"UL",{});var gUe=s(Mk);V0=n(gUe,"LI",{});var KXe=s(V0);zwe=n(KXe,"STRONG",{});var cUt=s(zwe);kat=r(cUt,"beit"),cUt.forEach(t),Sat=r(KXe," \u2014 "),ote=n(KXe,"A",{href:!0});var fUt=s(ote);Rat=r(fUt,"FlaxBeitForImageClassification"),fUt.forEach(t),Pat=r(KXe," (BEiT model)"),KXe.forEach(t),Bat=i(gUe),X0=n(gUe,"LI",{});var ZXe=s(X0);Wwe=n(ZXe,"STRONG",{});var mUt=s(Wwe);Iat=r(mUt,"vit"),mUt.forEach(t),Nat=r(ZXe," \u2014 "),rte=n(ZXe,"A",{href:!0});var gUt=s(rte);qat=r(gUt,"FlaxViTForImageClassification"),gUt.forEach(t),jat=r(ZXe," (ViT model)"),ZXe.forEach(t),gUe.forEach(t),Dat=i(Ai),T(z0.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),aQe=i(f),$f=n(f,"H2",{class:!0});var hUe=s($f);W0=n(hUe,"A",{id:!0,class:!0,href:!0});var hUt=s(W0);Qwe=n(hUt,"SPAN",{});var pUt=s(Qwe);T(Ek.$$.fragment,pUt),pUt.forEach(t),hUt.forEach(t),Gat=i(hUe),Hwe=n(hUe,"SPAN",{});var _Ut=s(Hwe);Oat=r(_Ut,"FlaxAutoModelForVision2Seq"),_Ut.forEach(t),hUe.forEach(t),nQe=i(f),Lr=n(f,"DIV",{class:!0});var Li=s(Lr);T(Ck.$$.fragment,Li),Vat=i(Li),kf=n(Li,"P",{});var Zae=s(kf);Xat=r(Zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tte=n(Zae,"A",{href:!0});var uUt=s(tte);zat=r(uUt,"from_pretrained()"),uUt.forEach(t),Wat=r(Zae," class method or the "),ate=n(Zae,"A",{href:!0});var bUt=s(ate);Qat=r(bUt,"from_config()"),bUt.forEach(t),Hat=r(Zae,` class
method.`),Zae.forEach(t),Uat=i(Li),wk=n(Li,"P",{});var pUe=s(wk);Jat=r(pUe,"This class cannot be instantiated directly using "),Uwe=n(pUe,"CODE",{});var vUt=s(Uwe);Yat=r(vUt,"__init__()"),vUt.forEach(t),Kat=r(pUe," (throws an error)."),pUe.forEach(t),Zat=i(Li),aa=n(Li,"DIV",{class:!0});var mL=s(aa);T(Ak.$$.fragment,mL),ent=i(mL),Jwe=n(mL,"P",{});var FUt=s(Jwe);ont=r(FUt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FUt.forEach(t),rnt=i(mL),Sf=n(mL,"P",{});var ene=s(Sf);tnt=r(ene,`Note:
Loading a model from its configuration file does `),Ywe=n(ene,"STRONG",{});var TUt=s(Ywe);ant=r(TUt,"not"),TUt.forEach(t),nnt=r(ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),nte=n(ene,"A",{href:!0});var MUt=s(nte);snt=r(MUt,"from_pretrained()"),MUt.forEach(t),lnt=r(ene," to load the model weights."),ene.forEach(t),int=i(mL),T(Q0.$$.fragment,mL),mL.forEach(t),dnt=i(Li),ot=n(Li,"DIV",{class:!0});var yi=s(ot);T(Lk.$$.fragment,yi),cnt=i(yi),Kwe=n(yi,"P",{});var EUt=s(Kwe);fnt=r(EUt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EUt.forEach(t),mnt=i(yi),Sn=n(yi,"P",{});var gL=s(Sn);gnt=r(gL,"The model class to instantiate is selected based on the "),Zwe=n(gL,"CODE",{});var CUt=s(Zwe);hnt=r(CUt,"model_type"),CUt.forEach(t),pnt=r(gL,` property of the config object (either
passed as an argument or loaded from `),eAe=n(gL,"CODE",{});var wUt=s(eAe);_nt=r(wUt,"pretrained_model_name_or_path"),wUt.forEach(t),unt=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oAe=n(gL,"CODE",{});var AUt=s(oAe);bnt=r(AUt,"pretrained_model_name_or_path"),AUt.forEach(t),vnt=r(gL,":"),gL.forEach(t),Fnt=i(yi),rAe=n(yi,"UL",{});var LUt=s(rAe);H0=n(LUt,"LI",{});var eze=s(H0);tAe=n(eze,"STRONG",{});var yUt=s(tAe);Tnt=r(yUt,"vision-encoder-decoder"),yUt.forEach(t),Mnt=r(eze," \u2014 "),ste=n(eze,"A",{href:!0});var xUt=s(ste);Ent=r(xUt,"FlaxVisionEncoderDecoderModel"),xUt.forEach(t),Cnt=r(eze," (Vision Encoder decoder model)"),eze.forEach(t),LUt.forEach(t),wnt=i(yi),T(U0.$$.fragment,yi),yi.forEach(t),Li.forEach(t),this.h()},h(){d(g,"name","hf:doc:metadata"),d(g,"content",JSON.stringify(BYt)),d(m,"id","auto-classes"),d(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m,"href","#auto-classes"),d(p,"class","relative group"),d(Pn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoConfig"),d(In,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoModel"),d(Nn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoTokenizer"),d(Bi,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel"),d(Df,"id","extending-the-auto-classes"),d(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Df,"href","#extending-the-auto-classes"),d(Ii,"class","relative group"),d(Of,"id","transformers.AutoConfig"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#transformers.AutoConfig"),d(Ni,"class","relative group"),d(tR,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(aR,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig"),d(nR,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig"),d(sR,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig"),d(lR,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig"),d(iR,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(dR,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig"),d(cR,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(fR,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(mR,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(gR,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig"),d(hR,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig"),d(pR,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig"),d(_R,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig"),d(uR,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig"),d(bR,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig"),d(vR,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig"),d(FR,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig"),d(TR,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig"),d(MR,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(ER,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(CR,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(wR,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig"),d(AR,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(LR,"href","/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(yR,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig"),d(xR,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig"),d($R,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig"),d(kR,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig"),d(SR,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig"),d(RR,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig"),d(PR,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(BR,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig"),d(IR,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig"),d(NR,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig"),d(qR,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig"),d(jR,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig"),d(DR,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNConfig"),d(GR,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config"),d(OR,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(VR,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),d(XR,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig"),d(zR,"href","/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTConfig"),d(WR,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig"),d(QR,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig"),d(HR,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(UR,"href","/docs/transformers/pr_17826/en/model_doc/jukebox#transformers.JukeboxConfig"),d(JR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(YR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(KR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),d(ZR,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig"),d(eP,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig"),d(oP,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig"),d(rP,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config"),d(tP,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig"),d(aP,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig"),d(nP,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config"),d(sP,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig"),d(lP,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(iP,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig"),d(dP,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig"),d(cP,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(fP,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(mP,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig"),d(gP,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig"),d(hP,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config"),d(pP,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig"),d(_P,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig"),d(uP,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(bP,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(vP,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig"),d(FP,"href","/docs/transformers/pr_17826/en/model_doc/owlvit#transformers.OwlViTConfig"),d(TP,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig"),d(MP,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig"),d(EP,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig"),d(CP,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(wP,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(AP,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(LP,"href","/docs/transformers/pr_17826/en/model_doc/rag#transformers.RagConfig"),d(yP,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmConfig"),d(xP,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig"),d($P,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig"),d(kP,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig"),d(SP,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig"),d(RP,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig"),d(PP,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig"),d(BP,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig"),d(IP,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig"),d(NP,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig"),d(qP,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig"),d(jP,"href","/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(DP,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(GP,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(OP,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig"),d(VP,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(XP,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig"),d(zP,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config"),d(WP,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig"),d(QP,"href","/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),d(HP,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(UP,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRConfig"),d(JP,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(YP,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(KP,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig"),d(ZP,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig"),d(eB,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(oB,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(rB,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(tB,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig"),d(aB,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(nB,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(sB,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),d(lB,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig"),d(iB,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig"),d(dB,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig"),d(cB,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(fB,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(mB,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(gB,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig"),d(hB,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig"),d(pB,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(th,"id","transformers.AutoTokenizer"),d(th,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(th,"href","#transformers.AutoTokenizer"),d(ji,"class","relative group"),d(_B,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(uB,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),d(bB,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(vB,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartTokenizer"),d(FB,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartTokenizerFast"),d(TB,"href","/docs/transformers/pr_17826/en/model_doc/barthez#transformers.BarthezTokenizer"),d(MB,"href","/docs/transformers/pr_17826/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(EB,"href","/docs/transformers/pr_17826/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(CB,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),d(wB,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),d(AB,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(LB,"href","/docs/transformers/pr_17826/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(yB,"href","/docs/transformers/pr_17826/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(xB,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d($B,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(kB,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(SB,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(RB,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(PB,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(BB,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(IB,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomTokenizerFast"),d(NB,"href","/docs/transformers/pr_17826/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(qB,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertTokenizer"),d(jB,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(DB,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineTokenizer"),d(GB,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizer"),d(OB,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(VB,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenTokenizer"),d(XB,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),d(zB,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(WB,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(QB,"href","/docs/transformers/pr_17826/en/model_doc/cpm#transformers.CpmTokenizer"),d(HB,"href","/docs/transformers/pr_17826/en/model_doc/cpm#transformers.CpmTokenizerFast"),d(UB,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(JB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),d(YB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(KB,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaTokenizer"),d(ZB,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(eI,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(oI,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(rI,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(tI,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(aI,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(nI,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(sI,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraTokenizer"),d(lI,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(iI,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(dI,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetTokenizer"),d(cI,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(fI,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(mI,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelTokenizer"),d(gI,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(hI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(pI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(_I,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(uI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(bI,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),d(vI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(FI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(TI,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizer"),d(MI,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(EI,"href","/docs/transformers/pr_17826/en/model_doc/herbert#transformers.HerbertTokenizer"),d(CI,"href","/docs/transformers/pr_17826/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(wI,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(AI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),d(LI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(yI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(xI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d($I,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(kI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(SI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),d(RI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),d(PI,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(BI,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(II,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDTokenizer"),d(NI,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDTokenizerFast"),d(qI,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerTokenizer"),d(jI,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(DI,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5Tokenizer"),d(GI,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5TokenizerFast"),d(OI,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeTokenizer"),d(VI,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(XI,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(zI,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(WI,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianTokenizer"),d(QI,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartTokenizer"),d(HI,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(UI,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(JI,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(YI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),d(KI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),d(ZI,"href","/docs/transformers/pr_17826/en/model_doc/mluke#transformers.MLukeTokenizer"),d(eN,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(oN,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(rN,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(tN,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(aN,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5Tokenizer"),d(nN,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5TokenizerFast"),d(sN,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpTokenizer"),d(lN,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpTokenizerFast"),d(iN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),d(dN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),d(cN,"href","/docs/transformers/pr_17826/en/model_doc/nllb#transformers.NllbTokenizer"),d(fN,"href","/docs/transformers/pr_17826/en/model_doc/nllb#transformers.NllbTokenizerFast"),d(mN,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),d(gN,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(hN,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(pN,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(_N,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(uN,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizer"),d(bN,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(vN,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(FN,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(TN,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(MN,"href","/docs/transformers/pr_17826/en/model_doc/phobert#transformers.PhobertTokenizer"),d(EN,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartTokenizer"),d(CN,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(wN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),d(AN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),d(LN,"href","/docs/transformers/pr_17826/en/model_doc/rag#transformers.RagTokenizer"),d(yN,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmTokenizer"),d(xN,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmTokenizerFast"),d($N,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerTokenizer"),d(kN,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(SN,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertTokenizer"),d(RN,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(PN,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(BN,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(IN,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),d(NN,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(qN,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(jN,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(DN,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(GN,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(ON,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterTokenizer"),d(VN,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(XN,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(zN,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(WN,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5Tokenizer"),d(QN,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.T5TokenizerFast"),d(HN,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasTokenizer"),d(UN,"href","/docs/transformers/pr_17826/en/model_doc/tapex#transformers.TapexTokenizer"),d(JN,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(YN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),d(KN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),d(ZN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),d(eq,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),d(oq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(rq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(tq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(aq,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMTokenizer"),d(nq,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(sq,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMTokenizer"),d(lq,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(iq,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(dq,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(cq,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),d(fq,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(mq,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(gq,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(hq,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),d(pq,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dh,"id","transformers.AutoFeatureExtractor"),d(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dh,"href","#transformers.AutoFeatureExtractor"),d(Di,"class","relative group"),d(_q,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(uq,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(bq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(vq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Fq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Tq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Mq,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(Eq,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(Cq,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(wq,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTFeatureExtractor"),d(Aq,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaFeatureExtractor"),d(Lq,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),d(yq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(xq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($q,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),d(kq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(Sq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),d(Rq,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitFeatureExtractor"),d(Pq,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(Bq,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),d(Iq,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),d(Nq,"href","/docs/transformers/pr_17826/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(qq,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(jq,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Dq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Gq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Oq,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(Vq,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(Xq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(zq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Wq,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltFeatureExtractor"),d(Qq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Hq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Uq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Jq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Yq,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosFeatureExtractor"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wp,"id","transformers.AutoProcessor"),d(wp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wp,"href","#transformers.AutoProcessor"),d(Gi,"class","relative group"),d(Kq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(Zq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPProcessor"),d(ej,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaProcessor"),d(oj,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPProcessor"),d(rj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(tj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),d(aj,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(nj,"href","/docs/transformers/pr_17826/en/model_doc/owlvit#transformers.OwlViTProcessor"),d(sj,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(lj,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(ij,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(dj,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(cj,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRProcessor"),d(fj,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(mj,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(gj,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltProcessor"),d(hj,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(pj,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(_j,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(uj,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hp,"id","transformers.AutoModel"),d(Hp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hp,"href","#transformers.AutoModel"),d(Vi,"class","relative group"),d(bj,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vj,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fj,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tj,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertModel"),d(Mj,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartModel"),d(Ej,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitModel"),d(Cj,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel"),d(wj,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(Aj,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdModel"),d(Lj,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(yj,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(xj,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d($j,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomModel"),d(kj,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertModel"),d(Sj,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineModel"),d(Rj,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPModel"),d(Pj,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenModel"),d(Bj,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertModel"),d(Ij,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextModel"),d(Nj,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLModel"),d(qj,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtModel"),d(jj,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(Dj,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(Gj,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(Oj,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaModel"),d(Vj,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(Xj,"href","/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(zj,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTModel"),d(Wj,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrModel"),d(Qj,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertModel"),d(Hj,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(Uj,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTModel"),d(Jj,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraModel"),d(Yj,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertModel"),d(Kj,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaModel"),d(Zj,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetModel"),d(eD,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTModel"),d(oD,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelModel"),d(rD,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelBaseModel"),d(tD,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNModel"),d(aD,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Model"),d(nD,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(sD,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),d(lD,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJModel"),d(iD,"href","/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTModel"),d(dD,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertModel"),d(cD,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertModel"),d(fD,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(mD,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(gD,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(hD,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),d(pD,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDModel"),d(_D,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitModel"),d(uD,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerModel"),d(bD,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Model"),d(vD,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeModel"),d(FD,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertModel"),d(TD,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model"),d(MD,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianModel"),d(ED,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerModel"),d(CD,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartModel"),d(wD,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTModel"),d(AD,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(LD,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertModel"),d(yD,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTModel"),d(xD,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetModel"),d($D,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Model"),d(kD,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpModel"),d(SD,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaModel"),d(RD,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model"),d(PD,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerModel"),d(BD,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(ID,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTModel"),d(ND,"href","/docs/transformers/pr_17826/en/model_doc/owlvit#transformers.OwlViTModel"),d(qD,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusModel"),d(jD,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverModel"),d(DD,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartModel"),d(GD,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerModel"),d(OD,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(VD,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertModel"),d(XD,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModel"),d(zD,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetModel"),d(WD,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertModel"),d(QD,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetModel"),d(HD,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel"),d(UD,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaModel"),d(JD,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerModel"),d(YD,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerModel"),d(KD,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWModel"),d(ZD,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDModel"),d(eG,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(oG,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterModel"),d(rG,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(tG,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinModel"),d(aG,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Model"),d(nG,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasModel"),d(sG,"href","/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),d(lG,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(iG,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechModel"),d(dG,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(cG,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanModel"),d(fG,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltModel"),d(mG,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(gG,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertModel"),d(hG,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTModel"),d(pG,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(_G,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(uG,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),d(bG,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMModel"),d(vG,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMModel"),d(FG,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMModel"),d(TG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(MG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(EG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(CG,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetModel"),d(wG,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosModel"),d(AG,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoModel"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t2,"id","transformers.AutoModelForPreTraining"),d(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t2,"href","#transformers.AutoModelForPreTraining"),d(Wi,"class","relative group"),d(LG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($G,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForPreTraining"),d(kG,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(SG,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForPreTraining"),d(RG,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(PG,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM"),d(BG,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(IG,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(NG,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(qG,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(jG,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(DG,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(GG,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForPreTraining"),d(OG,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(VG,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaForPreTraining"),d(XG,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForPreTraining"),d(zG,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(WG,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(QG,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(HG,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(UG,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(JG,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(YG,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(KG,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(ZG,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(eO,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(oO,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(rO,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForPreTraining"),d(tO,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(aO,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel"),d(nO,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(sO,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForPreTraining"),d(lO,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(iO,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(dO,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(cO,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(fO,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(mO,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(gO,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(hO,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(pO,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(_O,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),d(uO,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(bO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(vO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(FO,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K2,"id","transformers.AutoModelForCausalLM"),d(K2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K2,"href","#transformers.AutoModelForCausalLM"),d(Ui,"class","relative group"),d(TO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CO,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForCausalLM"),d(wO,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertLMHeadModel"),d(AO,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(LO,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(yO,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(xO,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d($O,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(kO,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM"),d(SO,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(RO,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenForCausalLM"),d(PO,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(BO,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(IO,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForCausalLM"),d(NO,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(qO,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(jO,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),d(DO,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(GO,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianForCausalLM"),d(OO,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForCausalLM"),d(VO,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(XO,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForCausalLM"),d(zO,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(WO,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForCausalLM"),d(QO,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(HO,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(UO,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(JO,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(YO,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(KO,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(ZO,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(eV,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(oV,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(rV,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(tV,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(aV,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(nV,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(sV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(lV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(iV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(dV,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O1,"id","transformers.AutoModelForMaskedLM"),d(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O1,"href","#transformers.AutoModelForMaskedLM"),d(Ki,"class","relative group"),d(cV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gV,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(hV,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(pV,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMaskedLM"),d(_V,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(uV,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(bV,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(vV,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(FV,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(TV,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(MV,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(EV,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(CV,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(wV,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(AV,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(LV,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(yV,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(xV,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d($V,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeForMaskedLM"),d(kV,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(SV,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(RV,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(PV,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(BV,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(IV,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMaskedLM"),d(NV,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(qV,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(jV,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(DV,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(GV,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(OV,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(VV,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(XV,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(zV,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(WV,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(QV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(HV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(UV,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($b,"id","transformers.AutoModelForSeq2SeqLM"),d($b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($b,"href","#transformers.AutoModelForSeq2SeqLM"),d(od,"class","relative group"),d(JV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZV,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(eX,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(oX,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(rX,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(tX,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(aX,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(nX,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(sX,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(lX,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(iX,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianMTModel"),d(dX,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(cX,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(fX,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(mX,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(gX,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(hX,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(pX,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(_X,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(uX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zb,"id","transformers.AutoModelForSequenceClassification"),d(Zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zb,"href","#transformers.AutoModelForSequenceClassification"),d(ad,"class","relative group"),d(bX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TX,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(MX,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForSequenceClassification"),d(EX,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForSequenceClassification"),d(CX,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(wX,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(AX,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForSequenceClassification"),d(LX,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(yX,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(xX,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d($X,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(kX,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(SX,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(RX,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(PX,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(BX,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(IX,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(NX,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(qX,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(jX,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(DX,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(GX,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(OX,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(VX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(XX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(zX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),d(WX,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForSequenceClassification"),d(QX,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(HX,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(UX,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(JX,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(YX,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(KX,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),d(ez,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(oz,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(rz,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForSequenceClassification"),d(tz,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(az,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(nz,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(sz,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(lz,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(iz,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(dz,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(cz,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(fz,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(mz,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(gz,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(hz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(pz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(_z,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(uz,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eF,"id","transformers.AutoModelForMultipleChoice"),d(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eF,"href","#transformers.AutoModelForMultipleChoice"),d(ld,"class","relative group"),d(bz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tz,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(wz,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Az,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(yz,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),d(xz,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d($z,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(kz,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(qz,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(jz,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(zz,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Wz,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Qz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Hz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(Uz,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(Jz,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PF,"id","transformers.AutoModelForNextSentencePrediction"),d(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PF,"href","#transformers.AutoModelForNextSentencePrediction"),d(cd,"class","relative group"),d(Yz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Zz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eW,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(oW,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(rW,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(tW,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(aW,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),d(nW,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XF,"id","transformers.AutoModelForTokenClassification"),d(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XF,"href","#transformers.AutoModelForTokenClassification"),d(gd,"class","relative group"),d(sW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dW,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(cW,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForTokenClassification"),d(fW,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(mW,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForTokenClassification"),d(gW,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(hW,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForTokenClassification"),d(pW,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(_W,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(uW,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(bW,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(vW,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(FW,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(TW,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(MW,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(EW,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(CW,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(wW,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(AW,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(LW,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(yW,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),d(xW,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d($W,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(kW,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(SW,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(RW,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForTokenClassification"),d(PW,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(BW,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(IW,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(NW,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(qW,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(jW,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(DW,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(GW,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(OW,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(VW,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(XW,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($6,"id","transformers.AutoModelForQuestionAnswering"),d($6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($6,"href","#transformers.AutoModelForQuestionAnswering"),d(_d,"class","relative group"),d(zW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HW,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(UW,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(JW,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(YW,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(KW,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(ZW,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(eQ,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(oQ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(rQ,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(tQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(aQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(nQ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(lQ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(iQ,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(xQ,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(SQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(PQ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(BQ,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MT,"id","transformers.AutoModelForTableQuestionAnswering"),d(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MT,"href","#transformers.AutoModelForTableQuestionAnswering"),d(vd,"class","relative group"),d(IQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jQ,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LT,"id","transformers.AutoModelForImageClassification"),d(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LT,"href","#transformers.AutoModelForImageClassification"),d(Md,"class","relative group"),d(DQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VQ,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForImageClassification"),d(XQ,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(zQ,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtForImageClassification"),d(WQ,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(QQ,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassification"),d(HQ,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(UQ,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(JQ,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassification"),d(YQ,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),d(KQ,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),d(ZQ,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(eH,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(oH,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(rH,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(tH,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(aH,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(nH,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(sH,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForImageClassification"),d(lH,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanForImageClassification"),d(iH,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForImageClassification"),d(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XT,"id","transformers.AutoModelForVision2Seq"),d(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XT,"href","#transformers.AutoModelForVision2Seq"),d(wd,"class","relative group"),d(dH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mH,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UT,"id","transformers.AutoModelForVisualQuestionAnswering"),d(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UT,"href","#transformers.AutoModelForVisualQuestionAnswering"),d(yd,"class","relative group"),d(gH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_H,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),d(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e7,"id","transformers.AutoModelForAudioClassification"),d(e7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e7,"href","#transformers.AutoModelForAudioClassification"),d(kd,"class","relative group"),d(uH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(TH,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(MH,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(EH,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(CH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(wH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(AH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(LH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),d(yH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(g7,"id","transformers.AutoModelForAudioFrameClassification"),d(g7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g7,"href","#transformers.AutoModelForAudioFrameClassification"),d(Pd,"class","relative group"),d(xH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($H,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(RH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(PH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(BH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),d(IH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M7,"id","transformers.AutoModelForCTC"),d(M7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M7,"href","#transformers.AutoModelForCTC"),d(Nd,"class","relative group"),d(NH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(GH,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForCTC"),d(OH,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTForCTC"),d(VH,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForCTC"),d(XH,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForCTC"),d(zH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(WH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(QH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(HH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),d(UH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForCTC"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I7,"id","transformers.AutoModelForSpeechSeq2Seq"),d(I7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I7,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Dd,"class","relative group"),d(JH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZH,"href","/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(eU,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O7,"id","transformers.AutoModelForAudioXVector"),d(O7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O7,"href","#transformers.AutoModelForAudioXVector"),d(Vd,"class","relative group"),d(oU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aU,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(nU,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(sU,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(lU,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),d(iU,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForXVector"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y7,"id","transformers.AutoModelForMaskedImageModeling"),d(Y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y7,"href","#transformers.AutoModelForMaskedImageModeling"),d(Wd,"class","relative group"),d(dU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mU,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(gU,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(hU,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a8,"id","transformers.AutoModelForObjectDetection"),d(a8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a8,"href","#transformers.AutoModelForObjectDetection"),d(Jd,"class","relative group"),d(pU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_U,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bU,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForObjectDetection"),d(vU,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosForObjectDetection"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c8,"id","transformers.AutoModelForImageSegmentation"),d(c8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c8,"href","#transformers.AutoModelForImageSegmentation"),d(Zd,"class","relative group"),d(FU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EU,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForSegmentation"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(p8,"id","transformers.AutoModelForSemanticSegmentation"),d(p8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p8,"href","#transformers.AutoModelForSemanticSegmentation"),d(rc,"class","relative group"),d(CU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LU,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(yU,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(xU,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d($U,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),d(kU,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C8,"id","transformers.AutoModelForInstanceSegmentation"),d(C8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C8,"href","#transformers.AutoModelForInstanceSegmentation"),d(nc,"class","relative group"),d(SU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BU,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x8,"id","transformers.TFAutoModel"),d(x8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x8,"href","#transformers.TFAutoModel"),d(ic,"class","relative group"),d(IU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jU,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertModel"),d(DU,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartModel"),d(GU,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertModel"),d(OU,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(VU,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(XU,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertModel"),d(zU,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.TFCLIPModel"),d(WU,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertModel"),d(QU,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextModel"),d(HU,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLModel"),d(UU,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),d(JU,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaModel"),d(YU,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(KU,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTModel"),d(ZU,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(eJ,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(oJ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraModel"),d(rJ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(tJ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelModel"),d(aJ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(nJ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2Model"),d(sJ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJModel"),d(lJ,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.TFHubertModel"),d(iJ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(dJ,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDModel"),d(cJ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerModel"),d(fJ,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertModel"),d(mJ,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianModel"),d(gJ,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartModel"),d(hJ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(pJ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetModel"),d(_J,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5Model"),d(uJ,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(bJ,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTModel"),d(vJ,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusModel"),d(FJ,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetModel"),d(TJ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertModel"),d(MJ,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetModel"),d(EJ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaModel"),d(CJ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerModel"),d(wJ,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.TFSegformerModel"),d(AJ,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(LJ,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinModel"),d(yJ,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5Model"),d(xJ,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasModel"),d($J,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(kJ,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTModel"),d(SJ,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(RJ,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(PJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMModel"),d(BJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(IJ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetModel"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yM,"id","transformers.TFAutoModelForPreTraining"),d(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yM,"href","#transformers.TFAutoModelForPreTraining"),d(fc,"class","relative group"),d(NJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DJ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(GJ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(OJ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForPreTraining"),d(VJ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(XJ,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(zJ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(WJ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(QJ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(HJ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(UJ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(JJ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(YJ,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(KJ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(ZJ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(eY,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(oY,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(rY,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(tY,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(aY,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(nY,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(sY,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(lY,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(iY,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e4,"id","transformers.TFAutoModelForCausalLM"),d(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e4,"href","#transformers.TFAutoModelForCausalLM"),d(hc,"class","relative group"),d(dY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mY,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(gY,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(hY,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(pY,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(_Y,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(uY,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(bY,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTForCausalLM"),d(vY,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(FY,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(TY,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(MY,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(EY,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(CY,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_4,"id","transformers.TFAutoModelForImageClassification"),d(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_4,"href","#transformers.TFAutoModelForImageClassification"),d(uc,"class","relative group"),d(wY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yY,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(xY,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),d($Y,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTForImageClassification"),d(kY,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),d(SY,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),d(RY,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetForImageClassification"),d(PY,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),d(BY,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinForImageClassification"),d(IY,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTForImageClassification"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A4,"id","transformers.TFAutoModelForMaskedLM"),d(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A4,"href","#transformers.TFAutoModelForMaskedLM"),d(Fc,"class","relative group"),d(NY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DY,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(GY,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(OY,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(VY,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(XY,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(zY,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(WY,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(QY,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(HY,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(UY,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(JY,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(YY,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(KY,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(ZY,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(eK,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(oK,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(rK,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(tK,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(aK,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(nK,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U4,"id","transformers.TFAutoModelForSeq2SeqLM"),d(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U4,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ec,"class","relative group"),d(sK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dK,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(cK,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(fK,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(mK,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(gK,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(hK,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianMTModel"),d(pK,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(_K,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(uK,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(bK,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iE,"id","transformers.TFAutoModelForSequenceClassification"),d(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iE,"href","#transformers.TFAutoModelForSequenceClassification"),d(Ac,"class","relative group"),d(vK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MK,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(EK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(CK,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(wK,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(AK,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(LK,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(yK,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(xK,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d($K,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(kK,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(SK,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(RK,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(PK,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(BK,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(IK,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(NK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(qK,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(jK,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(DK,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(GK,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(OK,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(VK,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(XK,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(zK,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(WK,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(QK,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NE,"id","transformers.TFAutoModelForMultipleChoice"),d(NE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NE,"href","#transformers.TFAutoModelForMultipleChoice"),d(xc,"class","relative group"),d(HK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YK,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(KK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(ZK,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(eZ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(oZ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(rZ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(tZ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(aZ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(nZ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(sZ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(lZ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(iZ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(dZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(cZ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(fZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(mZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(gZ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tC,"id","transformers.TFAutoModelForNextSentencePrediction"),d(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tC,"href","#transformers.TFAutoModelForNextSentencePrediction"),d(Sc,"class","relative group"),d(hZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_Z,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),d(bZ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iC,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Bc,"class","relative group"),d(vZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MZ,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mC,"id","transformers.TFAutoModelForTokenClassification"),d(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mC,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(EZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AZ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(LZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(yZ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(xZ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d($Z,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(kZ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(SZ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(RZ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(PZ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(BZ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(IZ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(NZ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(qZ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(jZ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(DZ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(GZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(OZ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(VZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(XZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(zZ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BC,"id","transformers.TFAutoModelForQuestionAnswering"),d(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BC,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Gc,"class","relative group"),d(WZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UZ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(JZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(YZ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(KZ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(ZZ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(eee,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(oee,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(ree,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(tee,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(aee,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(nee,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(see,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(lee,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(iee,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(dee,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(cee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(fee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(mee,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(gee,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(hee,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a5,"id","transformers.TFAutoModelForVision2Seq"),d(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a5,"href","#transformers.TFAutoModelForVision2Seq"),d(Xc,"class","relative group"),d(pee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_ee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bee,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(i5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Qc,"class","relative group"),d(vee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Fee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Tee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mee,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m5,"id","transformers.FlaxAutoModel"),d(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m5,"href","#transformers.FlaxAutoModel"),d(Jc,"class","relative group"),d(Eee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Cee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Aee,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertModel"),d(Lee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartModel"),d(yee,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitModel"),d(xee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertModel"),d($ee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(kee,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(See,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(Ree,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.FlaxCLIPModel"),d(Pee,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(Bee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraModel"),d(Iee,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(Nee,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(qee,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(jee,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(Dee,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianModel"),d(Gee,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartModel"),d(Oee,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5Model"),d(Vee,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTModel"),d(Xee,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(zee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(Wee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(Qee,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5Model"),d(Hee,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(Uee,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTModel"),d(Jee,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(Yee,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(Kee,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O5,"id","transformers.FlaxAutoModelForCausalLM"),d(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O5,"href","#transformers.FlaxAutoModelForCausalLM"),d(Zc,"class","relative group"),d(Zee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ooe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(roe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(toe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForCausalLM"),d(aoe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),d(noe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),d(soe,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(loe,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(ioe,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(doe,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),d(coe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),d(foe,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o3,"id","transformers.FlaxAutoModelForPreTraining"),d(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o3,"href","#transformers.FlaxAutoModelForPreTraining"),d(rf,"class","relative group"),d(moe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(goe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(poe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(_oe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(uoe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(boe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(voe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(Foe,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(Toe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(Moe,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(Eoe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(Coe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(woe,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Aoe,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Loe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u3,"id","transformers.FlaxAutoModelForMaskedLM"),d(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u3,"href","#transformers.FlaxAutoModelForMaskedLM"),d(nf,"class","relative group"),d(yoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($oe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(koe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(Soe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Roe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(Poe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(Boe,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(Ioe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(Noe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(qoe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(joe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Doe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(df,"class","relative group"),d(Goe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ooe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Voe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xoe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(zoe,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(Woe,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(Qoe,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(Hoe,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(Uoe,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(Joe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(Yoe,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(Koe,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(Zoe,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V3,"id","transformers.FlaxAutoModelForSequenceClassification"),d(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V3,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(mf,"class","relative group"),d(ere,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ore,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tre,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(are,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(nre,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(sre,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(lre,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(ire,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(dre,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(cre,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(fre,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(mre,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(r0,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(pf,"class","relative group"),d(gre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_re,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(ure,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(bre,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(vre,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Fre,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Tre,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(Mre,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(Ere,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Cre,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(wre,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(p0,"id","transformers.FlaxAutoModelForTokenClassification"),d(p0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p0,"href","#transformers.FlaxAutoModelForTokenClassification"),d(bf,"class","relative group"),d(Are,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xre,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d($re,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(kre,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Sre,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Rre,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Pre,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Bre,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Ire,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A0,"id","transformers.FlaxAutoModelForMultipleChoice"),d(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A0,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Tf,"class","relative group"),d(Nre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dre,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Gre,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Ore,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Vre,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Xre,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(zre,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Wre,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Qre,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Cf,"class","relative group"),d(Hre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ure,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yre,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G0,"id","transformers.FlaxAutoModelForImageClassification"),d(G0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G0,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lf,"class","relative group"),d(Kre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ete,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ote,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(rte,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W0,"id","transformers.FlaxAutoModelForVision2Seq"),d(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W0,"href","#transformers.FlaxAutoModelForVision2Seq"),d($f,"class","relative group"),d(tte,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ate,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nte,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ste,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(c,_,null),e(p,h),e(p,wo),e(wo,xi),b(f,If,u),b(f,lt,u),e(lt,$i),e(lt,ki),e(ki,hL),e(lt,Nf),b(f,Oe,u),b(f,Qe,u),e(Qe,Si),e(Qe,Pn),e(Pn,pL),e(Qe,Bn),e(Qe,In),e(In,_L),e(Qe,Ri),e(Qe,Nn),e(Nn,uL),e(Qe,Pi),b(f,qf,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,YS),e(Ae,Bi),e(Bi,KS),e(Ae,ZS),b(f,Ao,u),b(f,Ra,u),e(Ra,eR),e(Ra,jf),e(jf,oR),e(Ra,_Ue),b(f,oze,u),b(f,Ii,u),e(Ii,Df),e(Df,one),M(bL,one,null),e(Ii,uUe),e(Ii,rne),e(rne,bUe),b(f,rze,u),b(f,qn,u),e(qn,vUe),e(qn,tne),e(tne,FUe),e(qn,TUe),e(qn,ane),e(ane,MUe),e(qn,EUe),b(f,tze,u),M(vL,f,u),b(f,aze,u),b(f,rR,u),e(rR,CUe),b(f,nze,u),M(Gf,f,u),b(f,sze,u),b(f,Ni,u),e(Ni,Of),e(Of,nne),M(FL,nne,null),e(Ni,wUe),e(Ni,sne),e(sne,AUe),b(f,lze,u),b(f,Lo,u),M(TL,Lo,null),e(Lo,LUe),e(Lo,ML),e(ML,yUe),e(ML,tR),e(tR,xUe),e(ML,$Ue),e(Lo,kUe),e(Lo,EL),e(EL,SUe),e(EL,lne),e(lne,RUe),e(EL,PUe),e(Lo,BUe),e(Lo,yr),M(CL,yr,null),e(yr,IUe),e(yr,ine),e(ine,NUe),e(yr,qUe),e(yr,qi),e(qi,jUe),e(qi,dne),e(dne,DUe),e(qi,GUe),e(qi,cne),e(cne,OUe),e(qi,VUe),e(yr,XUe),e(yr,A),e(A,Vf),e(Vf,fne),e(fne,zUe),e(Vf,WUe),e(Vf,aR),e(aR,QUe),e(Vf,HUe),e(A,UUe),e(A,Xf),e(Xf,mne),e(mne,JUe),e(Xf,YUe),e(Xf,nR),e(nR,KUe),e(Xf,ZUe),e(A,eJe),e(A,zf),e(zf,gne),e(gne,oJe),e(zf,rJe),e(zf,sR),e(sR,tJe),e(zf,aJe),e(A,nJe),e(A,Wf),e(Wf,hne),e(hne,sJe),e(Wf,lJe),e(Wf,lR),e(lR,iJe),e(Wf,dJe),e(A,cJe),e(A,Qf),e(Qf,pne),e(pne,fJe),e(Qf,mJe),e(Qf,iR),e(iR,gJe),e(Qf,hJe),e(A,pJe),e(A,Hf),e(Hf,_ne),e(_ne,_Je),e(Hf,uJe),e(Hf,dR),e(dR,bJe),e(Hf,vJe),e(A,FJe),e(A,Uf),e(Uf,une),e(une,TJe),e(Uf,MJe),e(Uf,cR),e(cR,EJe),e(Uf,CJe),e(A,wJe),e(A,Jf),e(Jf,bne),e(bne,AJe),e(Jf,LJe),e(Jf,fR),e(fR,yJe),e(Jf,xJe),e(A,$Je),e(A,Yf),e(Yf,vne),e(vne,kJe),e(Yf,SJe),e(Yf,mR),e(mR,RJe),e(Yf,PJe),e(A,BJe),e(A,Kf),e(Kf,Fne),e(Fne,IJe),e(Kf,NJe),e(Kf,gR),e(gR,qJe),e(Kf,jJe),e(A,DJe),e(A,Zf),e(Zf,Tne),e(Tne,GJe),e(Zf,OJe),e(Zf,hR),e(hR,VJe),e(Zf,XJe),e(A,zJe),e(A,em),e(em,Mne),e(Mne,WJe),e(em,QJe),e(em,pR),e(pR,HJe),e(em,UJe),e(A,JJe),e(A,om),e(om,Ene),e(Ene,YJe),e(om,KJe),e(om,_R),e(_R,ZJe),e(om,eYe),e(A,oYe),e(A,rm),e(rm,Cne),e(Cne,rYe),e(rm,tYe),e(rm,uR),e(uR,aYe),e(rm,nYe),e(A,sYe),e(A,tm),e(tm,wne),e(wne,lYe),e(tm,iYe),e(tm,bR),e(bR,dYe),e(tm,cYe),e(A,fYe),e(A,am),e(am,Ane),e(Ane,mYe),e(am,gYe),e(am,vR),e(vR,hYe),e(am,pYe),e(A,_Ye),e(A,nm),e(nm,Lne),e(Lne,uYe),e(nm,bYe),e(nm,FR),e(FR,vYe),e(nm,FYe),e(A,TYe),e(A,sm),e(sm,yne),e(yne,MYe),e(sm,EYe),e(sm,TR),e(TR,CYe),e(sm,wYe),e(A,AYe),e(A,lm),e(lm,xne),e(xne,LYe),e(lm,yYe),e(lm,MR),e(MR,xYe),e(lm,$Ye),e(A,kYe),e(A,im),e(im,$ne),e($ne,SYe),e(im,RYe),e(im,ER),e(ER,PYe),e(im,BYe),e(A,IYe),e(A,dm),e(dm,kne),e(kne,NYe),e(dm,qYe),e(dm,CR),e(CR,jYe),e(dm,DYe),e(A,GYe),e(A,cm),e(cm,Sne),e(Sne,OYe),e(cm,VYe),e(cm,wR),e(wR,XYe),e(cm,zYe),e(A,WYe),e(A,fm),e(fm,Rne),e(Rne,QYe),e(fm,HYe),e(fm,AR),e(AR,UYe),e(fm,JYe),e(A,YYe),e(A,mm),e(mm,Pne),e(Pne,KYe),e(mm,ZYe),e(mm,LR),e(LR,eKe),e(mm,oKe),e(A,rKe),e(A,gm),e(gm,Bne),e(Bne,tKe),e(gm,aKe),e(gm,yR),e(yR,nKe),e(gm,sKe),e(A,lKe),e(A,hm),e(hm,Ine),e(Ine,iKe),e(hm,dKe),e(hm,xR),e(xR,cKe),e(hm,fKe),e(A,mKe),e(A,pm),e(pm,Nne),e(Nne,gKe),e(pm,hKe),e(pm,$R),e($R,pKe),e(pm,_Ke),e(A,uKe),e(A,_m),e(_m,qne),e(qne,bKe),e(_m,vKe),e(_m,kR),e(kR,FKe),e(_m,TKe),e(A,MKe),e(A,um),e(um,jne),e(jne,EKe),e(um,CKe),e(um,SR),e(SR,wKe),e(um,AKe),e(A,LKe),e(A,bm),e(bm,Dne),e(Dne,yKe),e(bm,xKe),e(bm,RR),e(RR,$Ke),e(bm,kKe),e(A,SKe),e(A,vm),e(vm,Gne),e(Gne,RKe),e(vm,PKe),e(vm,PR),e(PR,BKe),e(vm,IKe),e(A,NKe),e(A,Fm),e(Fm,One),e(One,qKe),e(Fm,jKe),e(Fm,BR),e(BR,DKe),e(Fm,GKe),e(A,OKe),e(A,Tm),e(Tm,Vne),e(Vne,VKe),e(Tm,XKe),e(Tm,IR),e(IR,zKe),e(Tm,WKe),e(A,QKe),e(A,Mm),e(Mm,Xne),e(Xne,HKe),e(Mm,UKe),e(Mm,NR),e(NR,JKe),e(Mm,YKe),e(A,KKe),e(A,Em),e(Em,zne),e(zne,ZKe),e(Em,eZe),e(Em,qR),e(qR,oZe),e(Em,rZe),e(A,tZe),e(A,Cm),e(Cm,Wne),e(Wne,aZe),e(Cm,nZe),e(Cm,jR),e(jR,sZe),e(Cm,lZe),e(A,iZe),e(A,wm),e(wm,Qne),e(Qne,dZe),e(wm,cZe),e(wm,DR),e(DR,fZe),e(wm,mZe),e(A,gZe),e(A,Am),e(Am,Hne),e(Hne,hZe),e(Am,pZe),e(Am,GR),e(GR,_Ze),e(Am,uZe),e(A,bZe),e(A,Lm),e(Lm,Une),e(Une,vZe),e(Lm,FZe),e(Lm,OR),e(OR,TZe),e(Lm,MZe),e(A,EZe),e(A,ym),e(ym,Jne),e(Jne,CZe),e(ym,wZe),e(ym,VR),e(VR,AZe),e(ym,LZe),e(A,yZe),e(A,xm),e(xm,Yne),e(Yne,xZe),e(xm,$Ze),e(xm,XR),e(XR,kZe),e(xm,SZe),e(A,RZe),e(A,$m),e($m,Kne),e(Kne,PZe),e($m,BZe),e($m,zR),e(zR,IZe),e($m,NZe),e(A,qZe),e(A,km),e(km,Zne),e(Zne,jZe),e(km,DZe),e(km,WR),e(WR,GZe),e(km,OZe),e(A,VZe),e(A,Sm),e(Sm,ese),e(ese,XZe),e(Sm,zZe),e(Sm,QR),e(QR,WZe),e(Sm,QZe),e(A,HZe),e(A,Rm),e(Rm,ose),e(ose,UZe),e(Rm,JZe),e(Rm,HR),e(HR,YZe),e(Rm,KZe),e(A,ZZe),e(A,Pm),e(Pm,rse),e(rse,eeo),e(Pm,oeo),e(Pm,UR),e(UR,reo),e(Pm,teo),e(A,aeo),e(A,Bm),e(Bm,tse),e(tse,neo),e(Bm,seo),e(Bm,JR),e(JR,leo),e(Bm,ieo),e(A,deo),e(A,Im),e(Im,ase),e(ase,ceo),e(Im,feo),e(Im,YR),e(YR,meo),e(Im,geo),e(A,heo),e(A,Nm),e(Nm,nse),e(nse,peo),e(Nm,_eo),e(Nm,KR),e(KR,ueo),e(Nm,beo),e(A,veo),e(A,qm),e(qm,sse),e(sse,Feo),e(qm,Teo),e(qm,ZR),e(ZR,Meo),e(qm,Eeo),e(A,Ceo),e(A,jm),e(jm,lse),e(lse,weo),e(jm,Aeo),e(jm,eP),e(eP,Leo),e(jm,yeo),e(A,xeo),e(A,Dm),e(Dm,ise),e(ise,$eo),e(Dm,keo),e(Dm,oP),e(oP,Seo),e(Dm,Reo),e(A,Peo),e(A,Gm),e(Gm,dse),e(dse,Beo),e(Gm,Ieo),e(Gm,rP),e(rP,Neo),e(Gm,qeo),e(A,jeo),e(A,Om),e(Om,cse),e(cse,Deo),e(Om,Geo),e(Om,tP),e(tP,Oeo),e(Om,Veo),e(A,Xeo),e(A,Vm),e(Vm,fse),e(fse,zeo),e(Vm,Weo),e(Vm,aP),e(aP,Qeo),e(Vm,Heo),e(A,Ueo),e(A,Xm),e(Xm,mse),e(mse,Jeo),e(Xm,Yeo),e(Xm,nP),e(nP,Keo),e(Xm,Zeo),e(A,eoo),e(A,zm),e(zm,gse),e(gse,ooo),e(zm,roo),e(zm,sP),e(sP,too),e(zm,aoo),e(A,noo),e(A,Wm),e(Wm,hse),e(hse,soo),e(Wm,loo),e(Wm,lP),e(lP,ioo),e(Wm,doo),e(A,coo),e(A,Qm),e(Qm,pse),e(pse,foo),e(Qm,moo),e(Qm,iP),e(iP,goo),e(Qm,hoo),e(A,poo),e(A,Hm),e(Hm,_se),e(_se,_oo),e(Hm,uoo),e(Hm,dP),e(dP,boo),e(Hm,voo),e(A,Foo),e(A,Um),e(Um,use),e(use,Too),e(Um,Moo),e(Um,cP),e(cP,Eoo),e(Um,Coo),e(A,woo),e(A,Jm),e(Jm,bse),e(bse,Aoo),e(Jm,Loo),e(Jm,fP),e(fP,yoo),e(Jm,xoo),e(A,$oo),e(A,Ym),e(Ym,vse),e(vse,koo),e(Ym,Soo),e(Ym,mP),e(mP,Roo),e(Ym,Poo),e(A,Boo),e(A,Km),e(Km,Fse),e(Fse,Ioo),e(Km,Noo),e(Km,gP),e(gP,qoo),e(Km,joo),e(A,Doo),e(A,Zm),e(Zm,Tse),e(Tse,Goo),e(Zm,Ooo),e(Zm,hP),e(hP,Voo),e(Zm,Xoo),e(A,zoo),e(A,eg),e(eg,Mse),e(Mse,Woo),e(eg,Qoo),e(eg,pP),e(pP,Hoo),e(eg,Uoo),e(A,Joo),e(A,og),e(og,Ese),e(Ese,Yoo),e(og,Koo),e(og,_P),e(_P,Zoo),e(og,ero),e(A,oro),e(A,rg),e(rg,Cse),e(Cse,rro),e(rg,tro),e(rg,uP),e(uP,aro),e(rg,nro),e(A,sro),e(A,tg),e(tg,wse),e(wse,lro),e(tg,iro),e(tg,bP),e(bP,dro),e(tg,cro),e(A,fro),e(A,ag),e(ag,Ase),e(Ase,mro),e(ag,gro),e(ag,vP),e(vP,hro),e(ag,pro),e(A,_ro),e(A,ng),e(ng,Lse),e(Lse,uro),e(ng,bro),e(ng,FP),e(FP,vro),e(ng,Fro),e(A,Tro),e(A,sg),e(sg,yse),e(yse,Mro),e(sg,Ero),e(sg,TP),e(TP,Cro),e(sg,wro),e(A,Aro),e(A,lg),e(lg,xse),e(xse,Lro),e(lg,yro),e(lg,MP),e(MP,xro),e(lg,$ro),e(A,kro),e(A,ig),e(ig,$se),e($se,Sro),e(ig,Rro),e(ig,EP),e(EP,Pro),e(ig,Bro),e(A,Iro),e(A,dg),e(dg,kse),e(kse,Nro),e(dg,qro),e(dg,CP),e(CP,jro),e(dg,Dro),e(A,Gro),e(A,cg),e(cg,Sse),e(Sse,Oro),e(cg,Vro),e(cg,wP),e(wP,Xro),e(cg,zro),e(A,Wro),e(A,fg),e(fg,Rse),e(Rse,Qro),e(fg,Hro),e(fg,AP),e(AP,Uro),e(fg,Jro),e(A,Yro),e(A,mg),e(mg,Pse),e(Pse,Kro),e(mg,Zro),e(mg,LP),e(LP,eto),e(mg,oto),e(A,rto),e(A,gg),e(gg,Bse),e(Bse,tto),e(gg,ato),e(gg,yP),e(yP,nto),e(gg,sto),e(A,lto),e(A,hg),e(hg,Ise),e(Ise,ito),e(hg,dto),e(hg,xP),e(xP,cto),e(hg,fto),e(A,mto),e(A,pg),e(pg,Nse),e(Nse,gto),e(pg,hto),e(pg,$P),e($P,pto),e(pg,_to),e(A,uto),e(A,_g),e(_g,qse),e(qse,bto),e(_g,vto),e(_g,kP),e(kP,Fto),e(_g,Tto),e(A,Mto),e(A,ug),e(ug,jse),e(jse,Eto),e(ug,Cto),e(ug,SP),e(SP,wto),e(ug,Ato),e(A,Lto),e(A,bg),e(bg,Dse),e(Dse,yto),e(bg,xto),e(bg,RP),e(RP,$to),e(bg,kto),e(A,Sto),e(A,vg),e(vg,Gse),e(Gse,Rto),e(vg,Pto),e(vg,PP),e(PP,Bto),e(vg,Ito),e(A,Nto),e(A,Fg),e(Fg,Ose),e(Ose,qto),e(Fg,jto),e(Fg,BP),e(BP,Dto),e(Fg,Gto),e(A,Oto),e(A,Tg),e(Tg,Vse),e(Vse,Vto),e(Tg,Xto),e(Tg,IP),e(IP,zto),e(Tg,Wto),e(A,Qto),e(A,Mg),e(Mg,Xse),e(Xse,Hto),e(Mg,Uto),e(Mg,NP),e(NP,Jto),e(Mg,Yto),e(A,Kto),e(A,Eg),e(Eg,zse),e(zse,Zto),e(Eg,eao),e(Eg,qP),e(qP,oao),e(Eg,rao),e(A,tao),e(A,Cg),e(Cg,Wse),e(Wse,aao),e(Cg,nao),e(Cg,jP),e(jP,sao),e(Cg,lao),e(A,iao),e(A,wg),e(wg,Qse),e(Qse,dao),e(wg,cao),e(wg,DP),e(DP,fao),e(wg,mao),e(A,gao),e(A,Ag),e(Ag,Hse),e(Hse,hao),e(Ag,pao),e(Ag,GP),e(GP,_ao),e(Ag,uao),e(A,bao),e(A,Lg),e(Lg,Use),e(Use,vao),e(Lg,Fao),e(Lg,OP),e(OP,Tao),e(Lg,Mao),e(A,Eao),e(A,yg),e(yg,Jse),e(Jse,Cao),e(yg,wao),e(yg,VP),e(VP,Aao),e(yg,Lao),e(A,yao),e(A,xg),e(xg,Yse),e(Yse,xao),e(xg,$ao),e(xg,XP),e(XP,kao),e(xg,Sao),e(A,Rao),e(A,$g),e($g,Kse),e(Kse,Pao),e($g,Bao),e($g,zP),e(zP,Iao),e($g,Nao),e(A,qao),e(A,kg),e(kg,Zse),e(Zse,jao),e(kg,Dao),e(kg,WP),e(WP,Gao),e(kg,Oao),e(A,Vao),e(A,Sg),e(Sg,ele),e(ele,Xao),e(Sg,zao),e(Sg,QP),e(QP,Wao),e(Sg,Qao),e(A,Hao),e(A,Rg),e(Rg,ole),e(ole,Uao),e(Rg,Jao),e(Rg,HP),e(HP,Yao),e(Rg,Kao),e(A,Zao),e(A,Pg),e(Pg,rle),e(rle,eno),e(Pg,ono),e(Pg,UP),e(UP,rno),e(Pg,tno),e(A,ano),e(A,Bg),e(Bg,tle),e(tle,nno),e(Bg,sno),e(Bg,JP),e(JP,lno),e(Bg,ino),e(A,dno),e(A,Ig),e(Ig,ale),e(ale,cno),e(Ig,fno),e(Ig,YP),e(YP,mno),e(Ig,gno),e(A,hno),e(A,Ng),e(Ng,nle),e(nle,pno),e(Ng,_no),e(Ng,KP),e(KP,uno),e(Ng,bno),e(A,vno),e(A,qg),e(qg,sle),e(sle,Fno),e(qg,Tno),e(qg,ZP),e(ZP,Mno),e(qg,Eno),e(A,Cno),e(A,jg),e(jg,lle),e(lle,wno),e(jg,Ano),e(jg,eB),e(eB,Lno),e(jg,yno),e(A,xno),e(A,Dg),e(Dg,ile),e(ile,$no),e(Dg,kno),e(Dg,oB),e(oB,Sno),e(Dg,Rno),e(A,Pno),e(A,Gg),e(Gg,dle),e(dle,Bno),e(Gg,Ino),e(Gg,rB),e(rB,Nno),e(Gg,qno),e(A,jno),e(A,Og),e(Og,cle),e(cle,Dno),e(Og,Gno),e(Og,tB),e(tB,Ono),e(Og,Vno),e(A,Xno),e(A,Vg),e(Vg,fle),e(fle,zno),e(Vg,Wno),e(Vg,aB),e(aB,Qno),e(Vg,Hno),e(A,Uno),e(A,Xg),e(Xg,mle),e(mle,Jno),e(Xg,Yno),e(Xg,nB),e(nB,Kno),e(Xg,Zno),e(A,eso),e(A,zg),e(zg,gle),e(gle,oso),e(zg,rso),e(zg,sB),e(sB,tso),e(zg,aso),e(A,nso),e(A,Wg),e(Wg,hle),e(hle,sso),e(Wg,lso),e(Wg,lB),e(lB,iso),e(Wg,dso),e(A,cso),e(A,Qg),e(Qg,ple),e(ple,fso),e(Qg,mso),e(Qg,iB),e(iB,gso),e(Qg,hso),e(A,pso),e(A,Hg),e(Hg,_le),e(_le,_so),e(Hg,uso),e(Hg,dB),e(dB,bso),e(Hg,vso),e(A,Fso),e(A,Ug),e(Ug,ule),e(ule,Tso),e(Ug,Mso),e(Ug,cB),e(cB,Eso),e(Ug,Cso),e(A,wso),e(A,Jg),e(Jg,ble),e(ble,Aso),e(Jg,Lso),e(Jg,fB),e(fB,yso),e(Jg,xso),e(A,$so),e(A,Yg),e(Yg,vle),e(vle,kso),e(Yg,Sso),e(Yg,mB),e(mB,Rso),e(Yg,Pso),e(A,Bso),e(A,Kg),e(Kg,Fle),e(Fle,Iso),e(Kg,Nso),e(Kg,gB),e(gB,qso),e(Kg,jso),e(A,Dso),e(A,Zg),e(Zg,Tle),e(Tle,Gso),e(Zg,Oso),e(Zg,hB),e(hB,Vso),e(Zg,Xso),e(A,zso),e(A,eh),e(eh,Mle),e(Mle,Wso),e(eh,Qso),e(eh,pB),e(pB,Hso),e(eh,Uso),e(yr,Jso),M(oh,yr,null),e(Lo,Yso),e(Lo,rh),M(wL,rh,null),e(rh,Kso),e(rh,Ele),e(Ele,Zso),b(f,ize,u),b(f,ji,u),e(ji,th),e(th,Cle),M(AL,Cle,null),e(ji,elo),e(ji,wle),e(wle,olo),b(f,dze,u),b(f,yo,u),M(LL,yo,null),e(yo,rlo),e(yo,yL),e(yL,tlo),e(yL,_B),e(_B,alo),e(yL,nlo),e(yo,slo),e(yo,xL),e(xL,llo),e(xL,Ale),e(Ale,ilo),e(xL,dlo),e(yo,clo),e(yo,xr),M($L,xr,null),e(xr,flo),e(xr,Lle),e(Lle,mlo),e(xr,glo),e(xr,Pa),e(Pa,hlo),e(Pa,yle),e(yle,plo),e(Pa,_lo),e(Pa,xle),e(xle,ulo),e(Pa,blo),e(Pa,$le),e($le,vlo),e(Pa,Flo),e(xr,Tlo),e(xr,k),e(k,jn),e(jn,kle),e(kle,Mlo),e(jn,Elo),e(jn,uB),e(uB,Clo),e(jn,wlo),e(jn,bB),e(bB,Alo),e(jn,Llo),e(k,ylo),e(k,Dn),e(Dn,Sle),e(Sle,xlo),e(Dn,$lo),e(Dn,vB),e(vB,klo),e(Dn,Slo),e(Dn,FB),e(FB,Rlo),e(Dn,Plo),e(k,Blo),e(k,Gn),e(Gn,Rle),e(Rle,Ilo),e(Gn,Nlo),e(Gn,TB),e(TB,qlo),e(Gn,jlo),e(Gn,MB),e(MB,Dlo),e(Gn,Glo),e(k,Olo),e(k,ah),e(ah,Ple),e(Ple,Vlo),e(ah,Xlo),e(ah,EB),e(EB,zlo),e(ah,Wlo),e(k,Qlo),e(k,On),e(On,Ble),e(Ble,Hlo),e(On,Ulo),e(On,CB),e(CB,Jlo),e(On,Ylo),e(On,wB),e(wB,Klo),e(On,Zlo),e(k,eio),e(k,nh),e(nh,Ile),e(Ile,oio),e(nh,rio),e(nh,AB),e(AB,tio),e(nh,aio),e(k,nio),e(k,sh),e(sh,Nle),e(Nle,sio),e(sh,lio),e(sh,LB),e(LB,iio),e(sh,dio),e(k,cio),e(k,lh),e(lh,qle),e(qle,fio),e(lh,mio),e(lh,yB),e(yB,gio),e(lh,hio),e(k,pio),e(k,Vn),e(Vn,jle),e(jle,_io),e(Vn,uio),e(Vn,xB),e(xB,bio),e(Vn,vio),e(Vn,$B),e($B,Fio),e(Vn,Tio),e(k,Mio),e(k,Xn),e(Xn,Dle),e(Dle,Eio),e(Xn,Cio),e(Xn,kB),e(kB,wio),e(Xn,Aio),e(Xn,SB),e(SB,Lio),e(Xn,yio),e(k,xio),e(k,zn),e(zn,Gle),e(Gle,$io),e(zn,kio),e(zn,RB),e(RB,Sio),e(zn,Rio),e(zn,PB),e(PB,Pio),e(zn,Bio),e(k,Iio),e(k,ih),e(ih,Ole),e(Ole,Nio),e(ih,qio),e(ih,BB),e(BB,jio),e(ih,Dio),e(k,Gio),e(k,dh),e(dh,Vle),e(Vle,Oio),e(dh,Vio),e(dh,IB),e(IB,Xio),e(dh,zio),e(k,Wio),e(k,ch),e(ch,Xle),e(Xle,Qio),e(ch,Hio),e(ch,NB),e(NB,Uio),e(ch,Jio),e(k,Yio),e(k,Wn),e(Wn,zle),e(zle,Kio),e(Wn,Zio),e(Wn,qB),e(qB,edo),e(Wn,odo),e(Wn,jB),e(jB,rdo),e(Wn,tdo),e(k,ado),e(k,fh),e(fh,Wle),e(Wle,ndo),e(fh,sdo),e(fh,DB),e(DB,ldo),e(fh,ido),e(k,ddo),e(k,Qn),e(Qn,Qle),e(Qle,cdo),e(Qn,fdo),e(Qn,GB),e(GB,mdo),e(Qn,gdo),e(Qn,OB),e(OB,hdo),e(Qn,pdo),e(k,_do),e(k,Hn),e(Hn,Hle),e(Hle,udo),e(Hn,bdo),e(Hn,VB),e(VB,vdo),e(Hn,Fdo),e(Hn,XB),e(XB,Tdo),e(Hn,Mdo),e(k,Edo),e(k,Un),e(Un,Ule),e(Ule,Cdo),e(Un,wdo),e(Un,zB),e(zB,Ado),e(Un,Ldo),e(Un,WB),e(WB,ydo),e(Un,xdo),e(k,$do),e(k,Jn),e(Jn,Jle),e(Jle,kdo),e(Jn,Sdo),e(Jn,QB),e(QB,Rdo),e(Jn,Pdo),e(Jn,HB),e(HB,Bdo),e(Jn,Ido),e(k,Ndo),e(k,mh),e(mh,Yle),e(Yle,qdo),e(mh,jdo),e(mh,UB),e(UB,Ddo),e(mh,Gdo),e(k,Odo),e(k,Yn),e(Yn,Kle),e(Kle,Vdo),e(Yn,Xdo),e(Yn,JB),e(JB,zdo),e(Yn,Wdo),e(Yn,YB),e(YB,Qdo),e(Yn,Hdo),e(k,Udo),e(k,Kn),e(Kn,Zle),e(Zle,Jdo),e(Kn,Ydo),e(Kn,KB),e(KB,Kdo),e(Kn,Zdo),e(Kn,ZB),e(ZB,eco),e(Kn,oco),e(k,rco),e(k,Zn),e(Zn,eie),e(eie,tco),e(Zn,aco),e(Zn,eI),e(eI,nco),e(Zn,sco),e(Zn,oI),e(oI,lco),e(Zn,ico),e(k,dco),e(k,es),e(es,oie),e(oie,cco),e(es,fco),e(es,rI),e(rI,mco),e(es,gco),e(es,tI),e(tI,hco),e(es,pco),e(k,_co),e(k,os),e(os,rie),e(rie,uco),e(os,bco),e(os,aI),e(aI,vco),e(os,Fco),e(os,nI),e(nI,Tco),e(os,Mco),e(k,Eco),e(k,rs),e(rs,tie),e(tie,Cco),e(rs,wco),e(rs,sI),e(sI,Aco),e(rs,Lco),e(rs,lI),e(lI,yco),e(rs,xco),e(k,$co),e(k,gh),e(gh,aie),e(aie,kco),e(gh,Sco),e(gh,iI),e(iI,Rco),e(gh,Pco),e(k,Bco),e(k,ts),e(ts,nie),e(nie,Ico),e(ts,Nco),e(ts,dI),e(dI,qco),e(ts,jco),e(ts,cI),e(cI,Dco),e(ts,Gco),e(k,Oco),e(k,hh),e(hh,sie),e(sie,Vco),e(hh,Xco),e(hh,fI),e(fI,zco),e(hh,Wco),e(k,Qco),e(k,as),e(as,lie),e(lie,Hco),e(as,Uco),e(as,mI),e(mI,Jco),e(as,Yco),e(as,gI),e(gI,Kco),e(as,Zco),e(k,efo),e(k,ns),e(ns,iie),e(iie,ofo),e(ns,rfo),e(ns,hI),e(hI,tfo),e(ns,afo),e(ns,pI),e(pI,nfo),e(ns,sfo),e(k,lfo),e(k,ss),e(ss,die),e(die,ifo),e(ss,dfo),e(ss,_I),e(_I,cfo),e(ss,ffo),e(ss,uI),e(uI,mfo),e(ss,gfo),e(k,hfo),e(k,ph),e(ph,cie),e(cie,pfo),e(ph,_fo),e(ph,bI),e(bI,ufo),e(ph,bfo),e(k,vfo),e(k,ls),e(ls,fie),e(fie,Ffo),e(ls,Tfo),e(ls,vI),e(vI,Mfo),e(ls,Efo),e(ls,FI),e(FI,Cfo),e(ls,wfo),e(k,Afo),e(k,is),e(is,mie),e(mie,Lfo),e(is,yfo),e(is,TI),e(TI,xfo),e(is,$fo),e(is,MI),e(MI,kfo),e(is,Sfo),e(k,Rfo),e(k,ds),e(ds,gie),e(gie,Pfo),e(ds,Bfo),e(ds,EI),e(EI,Ifo),e(ds,Nfo),e(ds,CI),e(CI,qfo),e(ds,jfo),e(k,Dfo),e(k,_h),e(_h,hie),e(hie,Gfo),e(_h,Ofo),e(_h,wI),e(wI,Vfo),e(_h,Xfo),e(k,zfo),e(k,cs),e(cs,pie),e(pie,Wfo),e(cs,Qfo),e(cs,AI),e(AI,Hfo),e(cs,Ufo),e(cs,LI),e(LI,Jfo),e(cs,Yfo),e(k,Kfo),e(k,uh),e(uh,_ie),e(_ie,Zfo),e(uh,emo),e(uh,uie),e(uie,omo),e(uh,rmo),e(k,tmo),e(k,fs),e(fs,bie),e(bie,amo),e(fs,nmo),e(fs,yI),e(yI,smo),e(fs,lmo),e(fs,xI),e(xI,imo),e(fs,dmo),e(k,cmo),e(k,ms),e(ms,vie),e(vie,fmo),e(ms,mmo),e(ms,$I),e($I,gmo),e(ms,hmo),e(ms,kI),e(kI,pmo),e(ms,_mo),e(k,umo),e(k,gs),e(gs,Fie),e(Fie,bmo),e(gs,vmo),e(gs,SI),e(SI,Fmo),e(gs,Tmo),e(gs,RI),e(RI,Mmo),e(gs,Emo),e(k,Cmo),e(k,hs),e(hs,Tie),e(Tie,wmo),e(hs,Amo),e(hs,PI),e(PI,Lmo),e(hs,ymo),e(hs,BI),e(BI,xmo),e(hs,$mo),e(k,kmo),e(k,ps),e(ps,Mie),e(Mie,Smo),e(ps,Rmo),e(ps,II),e(II,Pmo),e(ps,Bmo),e(ps,NI),e(NI,Imo),e(ps,Nmo),e(k,qmo),e(k,_s),e(_s,Eie),e(Eie,jmo),e(_s,Dmo),e(_s,qI),e(qI,Gmo),e(_s,Omo),e(_s,jI),e(jI,Vmo),e(_s,Xmo),e(k,zmo),e(k,us),e(us,Cie),e(Cie,Wmo),e(us,Qmo),e(us,DI),e(DI,Hmo),e(us,Umo),e(us,GI),e(GI,Jmo),e(us,Ymo),e(k,Kmo),e(k,bh),e(bh,wie),e(wie,Zmo),e(bh,ego),e(bh,OI),e(OI,ogo),e(bh,rgo),e(k,tgo),e(k,bs),e(bs,Aie),e(Aie,ago),e(bs,ngo),e(bs,VI),e(VI,sgo),e(bs,lgo),e(bs,XI),e(XI,igo),e(bs,dgo),e(k,cgo),e(k,vh),e(vh,Lie),e(Lie,fgo),e(vh,mgo),e(vh,zI),e(zI,ggo),e(vh,hgo),e(k,pgo),e(k,Fh),e(Fh,yie),e(yie,_go),e(Fh,ugo),e(Fh,WI),e(WI,bgo),e(Fh,vgo),e(k,Fgo),e(k,vs),e(vs,xie),e(xie,Tgo),e(vs,Mgo),e(vs,QI),e(QI,Ego),e(vs,Cgo),e(vs,HI),e(HI,wgo),e(vs,Ago),e(k,Lgo),e(k,Fs),e(Fs,$ie),e($ie,ygo),e(Fs,xgo),e(Fs,UI),e(UI,$go),e(Fs,kgo),e(Fs,JI),e(JI,Sgo),e(Fs,Rgo),e(k,Pgo),e(k,Ts),e(Ts,kie),e(kie,Bgo),e(Ts,Igo),e(Ts,YI),e(YI,Ngo),e(Ts,qgo),e(Ts,KI),e(KI,jgo),e(Ts,Dgo),e(k,Ggo),e(k,Th),e(Th,Sie),e(Sie,Ogo),e(Th,Vgo),e(Th,ZI),e(ZI,Xgo),e(Th,zgo),e(k,Wgo),e(k,Ms),e(Ms,Rie),e(Rie,Qgo),e(Ms,Hgo),e(Ms,eN),e(eN,Ugo),e(Ms,Jgo),e(Ms,oN),e(oN,Ygo),e(Ms,Kgo),e(k,Zgo),e(k,Es),e(Es,Pie),e(Pie,eho),e(Es,oho),e(Es,rN),e(rN,rho),e(Es,tho),e(Es,tN),e(tN,aho),e(Es,nho),e(k,sho),e(k,Cs),e(Cs,Bie),e(Bie,lho),e(Cs,iho),e(Cs,aN),e(aN,dho),e(Cs,cho),e(Cs,nN),e(nN,fho),e(Cs,mho),e(k,gho),e(k,ws),e(ws,Iie),e(Iie,hho),e(ws,pho),e(ws,sN),e(sN,_ho),e(ws,uho),e(ws,lN),e(lN,bho),e(ws,vho),e(k,Fho),e(k,As),e(As,Nie),e(Nie,Tho),e(As,Mho),e(As,iN),e(iN,Eho),e(As,Cho),e(As,dN),e(dN,who),e(As,Aho),e(k,Lho),e(k,Ls),e(Ls,qie),e(qie,yho),e(Ls,xho),e(Ls,cN),e(cN,$ho),e(Ls,kho),e(Ls,fN),e(fN,Sho),e(Ls,Rho),e(k,Pho),e(k,ys),e(ys,jie),e(jie,Bho),e(ys,Iho),e(ys,mN),e(mN,Nho),e(ys,qho),e(ys,gN),e(gN,jho),e(ys,Dho),e(k,Gho),e(k,xs),e(xs,Die),e(Die,Oho),e(xs,Vho),e(xs,hN),e(hN,Xho),e(xs,zho),e(xs,pN),e(pN,Who),e(xs,Qho),e(k,Hho),e(k,Mh),e(Mh,Gie),e(Gie,Uho),e(Mh,Jho),e(Mh,_N),e(_N,Yho),e(Mh,Kho),e(k,Zho),e(k,$s),e($s,Oie),e(Oie,epo),e($s,opo),e($s,uN),e(uN,rpo),e($s,tpo),e($s,bN),e(bN,apo),e($s,npo),e(k,spo),e(k,ks),e(ks,Vie),e(Vie,lpo),e(ks,ipo),e(ks,vN),e(vN,dpo),e(ks,cpo),e(ks,FN),e(FN,fpo),e(ks,mpo),e(k,gpo),e(k,Eh),e(Eh,Xie),e(Xie,hpo),e(Eh,ppo),e(Eh,TN),e(TN,_po),e(Eh,upo),e(k,bpo),e(k,Ch),e(Ch,zie),e(zie,vpo),e(Ch,Fpo),e(Ch,MN),e(MN,Tpo),e(Ch,Mpo),e(k,Epo),e(k,wh),e(wh,Wie),e(Wie,Cpo),e(wh,wpo),e(wh,EN),e(EN,Apo),e(wh,Lpo),e(k,ypo),e(k,Ah),e(Ah,Qie),e(Qie,xpo),e(Ah,$po),e(Ah,CN),e(CN,kpo),e(Ah,Spo),e(k,Rpo),e(k,Ss),e(Ss,Hie),e(Hie,Ppo),e(Ss,Bpo),e(Ss,wN),e(wN,Ipo),e(Ss,Npo),e(Ss,AN),e(AN,qpo),e(Ss,jpo),e(k,Dpo),e(k,Lh),e(Lh,Uie),e(Uie,Gpo),e(Lh,Opo),e(Lh,LN),e(LN,Vpo),e(Lh,Xpo),e(k,zpo),e(k,Rs),e(Rs,Jie),e(Jie,Wpo),e(Rs,Qpo),e(Rs,yN),e(yN,Hpo),e(Rs,Upo),e(Rs,xN),e(xN,Jpo),e(Rs,Ypo),e(k,Kpo),e(k,Ps),e(Ps,Yie),e(Yie,Zpo),e(Ps,e_o),e(Ps,$N),e($N,o_o),e(Ps,r_o),e(Ps,kN),e(kN,t_o),e(Ps,a_o),e(k,n_o),e(k,Bs),e(Bs,Kie),e(Kie,s_o),e(Bs,l_o),e(Bs,SN),e(SN,i_o),e(Bs,d_o),e(Bs,RN),e(RN,c_o),e(Bs,f_o),e(k,m_o),e(k,Is),e(Is,Zie),e(Zie,g_o),e(Is,h_o),e(Is,PN),e(PN,p_o),e(Is,__o),e(Is,BN),e(BN,u_o),e(Is,b_o),e(k,v_o),e(k,Ns),e(Ns,ede),e(ede,F_o),e(Ns,T_o),e(Ns,IN),e(IN,M_o),e(Ns,E_o),e(Ns,NN),e(NN,C_o),e(Ns,w_o),e(k,A_o),e(k,qs),e(qs,ode),e(ode,L_o),e(qs,y_o),e(qs,qN),e(qN,x_o),e(qs,$_o),e(qs,jN),e(jN,k_o),e(qs,S_o),e(k,R_o),e(k,yh),e(yh,rde),e(rde,P_o),e(yh,B_o),e(yh,DN),e(DN,I_o),e(yh,N_o),e(k,q_o),e(k,xh),e(xh,tde),e(tde,j_o),e(xh,D_o),e(xh,GN),e(GN,G_o),e(xh,O_o),e(k,V_o),e(k,js),e(js,ade),e(ade,X_o),e(js,z_o),e(js,ON),e(ON,W_o),e(js,Q_o),e(js,VN),e(VN,H_o),e(js,U_o),e(k,J_o),e(k,Ds),e(Ds,nde),e(nde,Y_o),e(Ds,K_o),e(Ds,XN),e(XN,Z_o),e(Ds,euo),e(Ds,zN),e(zN,ouo),e(Ds,ruo),e(k,tuo),e(k,Gs),e(Gs,sde),e(sde,auo),e(Gs,nuo),e(Gs,WN),e(WN,suo),e(Gs,luo),e(Gs,QN),e(QN,iuo),e(Gs,duo),e(k,cuo),e(k,$h),e($h,lde),e(lde,fuo),e($h,muo),e($h,HN),e(HN,guo),e($h,huo),e(k,puo),e(k,kh),e(kh,ide),e(ide,_uo),e(kh,uuo),e(kh,UN),e(UN,buo),e(kh,vuo),e(k,Fuo),e(k,Sh),e(Sh,dde),e(dde,Tuo),e(Sh,Muo),e(Sh,JN),e(JN,Euo),e(Sh,Cuo),e(k,wuo),e(k,Os),e(Os,cde),e(cde,Auo),e(Os,Luo),e(Os,YN),e(YN,yuo),e(Os,xuo),e(Os,KN),e(KN,$uo),e(Os,kuo),e(k,Suo),e(k,Vs),e(Vs,fde),e(fde,Ruo),e(Vs,Puo),e(Vs,ZN),e(ZN,Buo),e(Vs,Iuo),e(Vs,eq),e(eq,Nuo),e(Vs,quo),e(k,juo),e(k,Rh),e(Rh,mde),e(mde,Duo),e(Rh,Guo),e(Rh,oq),e(oq,Ouo),e(Rh,Vuo),e(k,Xuo),e(k,Ph),e(Ph,gde),e(gde,zuo),e(Ph,Wuo),e(Ph,rq),e(rq,Quo),e(Ph,Huo),e(k,Uuo),e(k,Bh),e(Bh,hde),e(hde,Juo),e(Bh,Yuo),e(Bh,tq),e(tq,Kuo),e(Bh,Zuo),e(k,e2o),e(k,Xs),e(Xs,pde),e(pde,o2o),e(Xs,r2o),e(Xs,aq),e(aq,t2o),e(Xs,a2o),e(Xs,nq),e(nq,n2o),e(Xs,s2o),e(k,l2o),e(k,Ih),e(Ih,_de),e(_de,i2o),e(Ih,d2o),e(Ih,sq),e(sq,c2o),e(Ih,f2o),e(k,m2o),e(k,Nh),e(Nh,ude),e(ude,g2o),e(Nh,h2o),e(Nh,lq),e(lq,p2o),e(Nh,_2o),e(k,u2o),e(k,zs),e(zs,bde),e(bde,b2o),e(zs,v2o),e(zs,iq),e(iq,F2o),e(zs,T2o),e(zs,dq),e(dq,M2o),e(zs,E2o),e(k,C2o),e(k,Ws),e(Ws,vde),e(vde,w2o),e(Ws,A2o),e(Ws,cq),e(cq,L2o),e(Ws,y2o),e(Ws,fq),e(fq,x2o),e(Ws,$2o),e(k,k2o),e(k,Qs),e(Qs,Fde),e(Fde,S2o),e(Qs,R2o),e(Qs,mq),e(mq,P2o),e(Qs,B2o),e(Qs,gq),e(gq,I2o),e(Qs,N2o),e(k,q2o),e(k,Hs),e(Hs,Tde),e(Tde,j2o),e(Hs,D2o),e(Hs,hq),e(hq,G2o),e(Hs,O2o),e(Hs,pq),e(pq,V2o),e(Hs,X2o),e(xr,z2o),M(qh,xr,null),e(yo,W2o),e(yo,jh),M(kL,jh,null),e(jh,Q2o),e(jh,Mde),e(Mde,H2o),b(f,cze,u),b(f,Di,u),e(Di,Dh),e(Dh,Ede),M(SL,Ede,null),e(Di,U2o),e(Di,Cde),e(Cde,J2o),b(f,fze,u),b(f,xo,u),M(RL,xo,null),e(xo,Y2o),e(xo,PL),e(PL,K2o),e(PL,_q),e(_q,Z2o),e(PL,e1o),e(xo,o1o),e(xo,BL),e(BL,r1o),e(BL,wde),e(wde,t1o),e(BL,a1o),e(xo,n1o),e(xo,Ue),M(IL,Ue,null),e(Ue,s1o),e(Ue,Ade),e(Ade,l1o),e(Ue,i1o),e(Ue,Ba),e(Ba,d1o),e(Ba,Lde),e(Lde,c1o),e(Ba,f1o),e(Ba,yde),e(yde,m1o),e(Ba,g1o),e(Ba,xde),e(xde,h1o),e(Ba,p1o),e(Ue,_1o),e(Ue,J),e(J,Gh),e(Gh,$de),e($de,u1o),e(Gh,b1o),e(Gh,uq),e(uq,v1o),e(Gh,F1o),e(J,T1o),e(J,Oh),e(Oh,kde),e(kde,M1o),e(Oh,E1o),e(Oh,bq),e(bq,C1o),e(Oh,w1o),e(J,A1o),e(J,Vh),e(Vh,Sde),e(Sde,L1o),e(Vh,y1o),e(Vh,vq),e(vq,x1o),e(Vh,$1o),e(J,k1o),e(J,Xh),e(Xh,Rde),e(Rde,S1o),e(Xh,R1o),e(Xh,Fq),e(Fq,P1o),e(Xh,B1o),e(J,I1o),e(J,zh),e(zh,Pde),e(Pde,N1o),e(zh,q1o),e(zh,Tq),e(Tq,j1o),e(zh,D1o),e(J,G1o),e(J,Wh),e(Wh,Bde),e(Bde,O1o),e(Wh,V1o),e(Wh,Mq),e(Mq,X1o),e(Wh,z1o),e(J,W1o),e(J,Qh),e(Qh,Ide),e(Ide,Q1o),e(Qh,H1o),e(Qh,Eq),e(Eq,U1o),e(Qh,J1o),e(J,Y1o),e(J,Hh),e(Hh,Nde),e(Nde,K1o),e(Hh,Z1o),e(Hh,Cq),e(Cq,ebo),e(Hh,obo),e(J,rbo),e(J,Uh),e(Uh,qde),e(qde,tbo),e(Uh,abo),e(Uh,wq),e(wq,nbo),e(Uh,sbo),e(J,lbo),e(J,Jh),e(Jh,jde),e(jde,ibo),e(Jh,dbo),e(Jh,Aq),e(Aq,cbo),e(Jh,fbo),e(J,mbo),e(J,Yh),e(Yh,Dde),e(Dde,gbo),e(Yh,hbo),e(Yh,Lq),e(Lq,pbo),e(Yh,_bo),e(J,ubo),e(J,Kh),e(Kh,Gde),e(Gde,bbo),e(Kh,vbo),e(Kh,yq),e(yq,Fbo),e(Kh,Tbo),e(J,Mbo),e(J,Zh),e(Zh,Ode),e(Ode,Ebo),e(Zh,Cbo),e(Zh,xq),e(xq,wbo),e(Zh,Abo),e(J,Lbo),e(J,ep),e(ep,Vde),e(Vde,ybo),e(ep,xbo),e(ep,$q),e($q,$bo),e(ep,kbo),e(J,Sbo),e(J,op),e(op,Xde),e(Xde,Rbo),e(op,Pbo),e(op,kq),e(kq,Bbo),e(op,Ibo),e(J,Nbo),e(J,rp),e(rp,zde),e(zde,qbo),e(rp,jbo),e(rp,Sq),e(Sq,Dbo),e(rp,Gbo),e(J,Obo),e(J,tp),e(tp,Wde),e(Wde,Vbo),e(tp,Xbo),e(tp,Rq),e(Rq,zbo),e(tp,Wbo),e(J,Qbo),e(J,ap),e(ap,Qde),e(Qde,Hbo),e(ap,Ubo),e(ap,Pq),e(Pq,Jbo),e(ap,Ybo),e(J,Kbo),e(J,np),e(np,Hde),e(Hde,Zbo),e(np,evo),e(np,Bq),e(Bq,ovo),e(np,rvo),e(J,tvo),e(J,sp),e(sp,Ude),e(Ude,avo),e(sp,nvo),e(sp,Iq),e(Iq,svo),e(sp,lvo),e(J,ivo),e(J,lp),e(lp,Jde),e(Jde,dvo),e(lp,cvo),e(lp,Nq),e(Nq,fvo),e(lp,mvo),e(J,gvo),e(J,ip),e(ip,Yde),e(Yde,hvo),e(ip,pvo),e(ip,qq),e(qq,_vo),e(ip,uvo),e(J,bvo),e(J,dp),e(dp,Kde),e(Kde,vvo),e(dp,Fvo),e(dp,jq),e(jq,Tvo),e(dp,Mvo),e(J,Evo),e(J,cp),e(cp,Zde),e(Zde,Cvo),e(cp,wvo),e(cp,Dq),e(Dq,Avo),e(cp,Lvo),e(J,yvo),e(J,fp),e(fp,ece),e(ece,xvo),e(fp,$vo),e(fp,Gq),e(Gq,kvo),e(fp,Svo),e(J,Rvo),e(J,mp),e(mp,oce),e(oce,Pvo),e(mp,Bvo),e(mp,Oq),e(Oq,Ivo),e(mp,Nvo),e(J,qvo),e(J,gp),e(gp,rce),e(rce,jvo),e(gp,Dvo),e(gp,Vq),e(Vq,Gvo),e(gp,Ovo),e(J,Vvo),e(J,hp),e(hp,tce),e(tce,Xvo),e(hp,zvo),e(hp,Xq),e(Xq,Wvo),e(hp,Qvo),e(J,Hvo),e(J,pp),e(pp,ace),e(ace,Uvo),e(pp,Jvo),e(pp,zq),e(zq,Yvo),e(pp,Kvo),e(J,Zvo),e(J,_p),e(_p,nce),e(nce,eFo),e(_p,oFo),e(_p,Wq),e(Wq,rFo),e(_p,tFo),e(J,aFo),e(J,up),e(up,sce),e(sce,nFo),e(up,sFo),e(up,Qq),e(Qq,lFo),e(up,iFo),e(J,dFo),e(J,bp),e(bp,lce),e(lce,cFo),e(bp,fFo),e(bp,Hq),e(Hq,mFo),e(bp,gFo),e(J,hFo),e(J,vp),e(vp,ice),e(ice,pFo),e(vp,_Fo),e(vp,Uq),e(Uq,uFo),e(vp,bFo),e(J,vFo),e(J,Fp),e(Fp,dce),e(dce,FFo),e(Fp,TFo),e(Fp,Jq),e(Jq,MFo),e(Fp,EFo),e(J,CFo),e(J,Tp),e(Tp,cce),e(cce,wFo),e(Tp,AFo),e(Tp,Yq),e(Yq,LFo),e(Tp,yFo),e(Ue,xFo),M(Mp,Ue,null),e(Ue,$Fo),M(Ep,Ue,null),e(xo,kFo),e(xo,Cp),M(NL,Cp,null),e(Cp,SFo),e(Cp,fce),e(fce,RFo),b(f,mze,u),b(f,Gi,u),e(Gi,wp),e(wp,mce),M(qL,mce,null),e(Gi,PFo),e(Gi,gce),e(gce,BFo),b(f,gze,u),b(f,$o,u),M(jL,$o,null),e($o,IFo),e($o,DL),e(DL,NFo),e(DL,Kq),e(Kq,qFo),e(DL,jFo),e($o,DFo),e($o,GL),e(GL,GFo),e(GL,hce),e(hce,OFo),e(GL,VFo),e($o,XFo),e($o,Je),M(OL,Je,null),e(Je,zFo),e(Je,pce),e(pce,WFo),e(Je,QFo),e(Je,Oi),e(Oi,HFo),e(Oi,_ce),e(_ce,UFo),e(Oi,JFo),e(Oi,uce),e(uce,YFo),e(Oi,KFo),e(Je,ZFo),e(Je,fe),e(fe,Ap),e(Ap,bce),e(bce,e6o),e(Ap,o6o),e(Ap,Zq),e(Zq,r6o),e(Ap,t6o),e(fe,a6o),e(fe,Lp),e(Lp,vce),e(vce,n6o),e(Lp,s6o),e(Lp,ej),e(ej,l6o),e(Lp,i6o),e(fe,d6o),e(fe,yp),e(yp,Fce),e(Fce,c6o),e(yp,f6o),e(yp,oj),e(oj,m6o),e(yp,g6o),e(fe,h6o),e(fe,xp),e(xp,Tce),e(Tce,p6o),e(xp,_6o),e(xp,rj),e(rj,u6o),e(xp,b6o),e(fe,v6o),e(fe,$p),e($p,Mce),e(Mce,F6o),e($p,T6o),e($p,tj),e(tj,M6o),e($p,E6o),e(fe,C6o),e(fe,kp),e(kp,Ece),e(Ece,w6o),e(kp,A6o),e(kp,aj),e(aj,L6o),e(kp,y6o),e(fe,x6o),e(fe,Sp),e(Sp,Cce),e(Cce,$6o),e(Sp,k6o),e(Sp,nj),e(nj,S6o),e(Sp,R6o),e(fe,P6o),e(fe,Rp),e(Rp,wce),e(wce,B6o),e(Rp,I6o),e(Rp,sj),e(sj,N6o),e(Rp,q6o),e(fe,j6o),e(fe,Pp),e(Pp,Ace),e(Ace,D6o),e(Pp,G6o),e(Pp,lj),e(lj,O6o),e(Pp,V6o),e(fe,X6o),e(fe,Bp),e(Bp,Lce),e(Lce,z6o),e(Bp,W6o),e(Bp,ij),e(ij,Q6o),e(Bp,H6o),e(fe,U6o),e(fe,Ip),e(Ip,yce),e(yce,J6o),e(Ip,Y6o),e(Ip,dj),e(dj,K6o),e(Ip,Z6o),e(fe,eTo),e(fe,Np),e(Np,xce),e(xce,oTo),e(Np,rTo),e(Np,cj),e(cj,tTo),e(Np,aTo),e(fe,nTo),e(fe,qp),e(qp,$ce),e($ce,sTo),e(qp,lTo),e(qp,fj),e(fj,iTo),e(qp,dTo),e(fe,cTo),e(fe,jp),e(jp,kce),e(kce,fTo),e(jp,mTo),e(jp,mj),e(mj,gTo),e(jp,hTo),e(fe,pTo),e(fe,Dp),e(Dp,Sce),e(Sce,_To),e(Dp,uTo),e(Dp,gj),e(gj,bTo),e(Dp,vTo),e(fe,FTo),e(fe,Gp),e(Gp,Rce),e(Rce,TTo),e(Gp,MTo),e(Gp,hj),e(hj,ETo),e(Gp,CTo),e(fe,wTo),e(fe,Op),e(Op,Pce),e(Pce,ATo),e(Op,LTo),e(Op,pj),e(pj,yTo),e(Op,xTo),e(fe,$To),e(fe,Vp),e(Vp,Bce),e(Bce,kTo),e(Vp,STo),e(Vp,_j),e(_j,RTo),e(Vp,PTo),e(fe,BTo),e(fe,Xp),e(Xp,Ice),e(Ice,ITo),e(Xp,NTo),e(Xp,uj),e(uj,qTo),e(Xp,jTo),e(Je,DTo),M(zp,Je,null),e(Je,GTo),M(Wp,Je,null),e($o,OTo),e($o,Qp),M(VL,Qp,null),e(Qp,VTo),e(Qp,Nce),e(Nce,XTo),b(f,hze,u),b(f,Vi,u),e(Vi,Hp),e(Hp,qce),M(XL,qce,null),e(Vi,zTo),e(Vi,jce),e(jce,WTo),b(f,pze,u),b(f,ko,u),M(zL,ko,null),e(ko,QTo),e(ko,Xi),e(Xi,HTo),e(Xi,bj),e(bj,UTo),e(Xi,JTo),e(Xi,vj),e(vj,YTo),e(Xi,KTo),e(ko,ZTo),e(ko,WL),e(WL,e7o),e(WL,Dce),e(Dce,o7o),e(WL,r7o),e(ko,t7o),e(ko,it),M(QL,it,null),e(it,a7o),e(it,Gce),e(Gce,n7o),e(it,s7o),e(it,zi),e(zi,l7o),e(zi,Oce),e(Oce,i7o),e(zi,d7o),e(zi,Fj),e(Fj,c7o),e(zi,f7o),e(it,m7o),M(Up,it,null),e(ko,g7o),e(ko,Ye),M(HL,Ye,null),e(Ye,h7o),e(Ye,Vce),e(Vce,p7o),e(Ye,_7o),e(Ye,Ia),e(Ia,u7o),e(Ia,Xce),e(Xce,b7o),e(Ia,v7o),e(Ia,zce),e(zce,F7o),e(Ia,T7o),e(Ia,Wce),e(Wce,M7o),e(Ia,E7o),e(Ye,C7o),e(Ye,y),e(y,Jp),e(Jp,Qce),e(Qce,w7o),e(Jp,A7o),e(Jp,Tj),e(Tj,L7o),e(Jp,y7o),e(y,x7o),e(y,Yp),e(Yp,Hce),e(Hce,$7o),e(Yp,k7o),e(Yp,Mj),e(Mj,S7o),e(Yp,R7o),e(y,P7o),e(y,Kp),e(Kp,Uce),e(Uce,B7o),e(Kp,I7o),e(Kp,Ej),e(Ej,N7o),e(Kp,q7o),e(y,j7o),e(y,Zp),e(Zp,Jce),e(Jce,D7o),e(Zp,G7o),e(Zp,Cj),e(Cj,O7o),e(Zp,V7o),e(y,X7o),e(y,e_),e(e_,Yce),e(Yce,z7o),e(e_,W7o),e(e_,wj),e(wj,Q7o),e(e_,H7o),e(y,U7o),e(y,o_),e(o_,Kce),e(Kce,J7o),e(o_,Y7o),e(o_,Aj),e(Aj,K7o),e(o_,Z7o),e(y,e8o),e(y,r_),e(r_,Zce),e(Zce,o8o),e(r_,r8o),e(r_,Lj),e(Lj,t8o),e(r_,a8o),e(y,n8o),e(y,t_),e(t_,efe),e(efe,s8o),e(t_,l8o),e(t_,yj),e(yj,i8o),e(t_,d8o),e(y,c8o),e(y,a_),e(a_,ofe),e(ofe,f8o),e(a_,m8o),e(a_,xj),e(xj,g8o),e(a_,h8o),e(y,p8o),e(y,n_),e(n_,rfe),e(rfe,_8o),e(n_,u8o),e(n_,$j),e($j,b8o),e(n_,v8o),e(y,F8o),e(y,s_),e(s_,tfe),e(tfe,T8o),e(s_,M8o),e(s_,kj),e(kj,E8o),e(s_,C8o),e(y,w8o),e(y,l_),e(l_,afe),e(afe,A8o),e(l_,L8o),e(l_,Sj),e(Sj,y8o),e(l_,x8o),e(y,$8o),e(y,i_),e(i_,nfe),e(nfe,k8o),e(i_,S8o),e(i_,Rj),e(Rj,R8o),e(i_,P8o),e(y,B8o),e(y,d_),e(d_,sfe),e(sfe,I8o),e(d_,N8o),e(d_,Pj),e(Pj,q8o),e(d_,j8o),e(y,D8o),e(y,c_),e(c_,lfe),e(lfe,G8o),e(c_,O8o),e(c_,Bj),e(Bj,V8o),e(c_,X8o),e(y,z8o),e(y,f_),e(f_,ife),e(ife,W8o),e(f_,Q8o),e(f_,Ij),e(Ij,H8o),e(f_,U8o),e(y,J8o),e(y,m_),e(m_,dfe),e(dfe,Y8o),e(m_,K8o),e(m_,Nj),e(Nj,Z8o),e(m_,eMo),e(y,oMo),e(y,g_),e(g_,cfe),e(cfe,rMo),e(g_,tMo),e(g_,qj),e(qj,aMo),e(g_,nMo),e(y,sMo),e(y,h_),e(h_,ffe),e(ffe,lMo),e(h_,iMo),e(h_,jj),e(jj,dMo),e(h_,cMo),e(y,fMo),e(y,p_),e(p_,mfe),e(mfe,mMo),e(p_,gMo),e(p_,Dj),e(Dj,hMo),e(p_,pMo),e(y,_Mo),e(y,__),e(__,gfe),e(gfe,uMo),e(__,bMo),e(__,Gj),e(Gj,vMo),e(__,FMo),e(y,TMo),e(y,u_),e(u_,hfe),e(hfe,MMo),e(u_,EMo),e(u_,Oj),e(Oj,CMo),e(u_,wMo),e(y,AMo),e(y,b_),e(b_,pfe),e(pfe,LMo),e(b_,yMo),e(b_,Vj),e(Vj,xMo),e(b_,$Mo),e(y,kMo),e(y,v_),e(v_,_fe),e(_fe,SMo),e(v_,RMo),e(v_,Xj),e(Xj,PMo),e(v_,BMo),e(y,IMo),e(y,F_),e(F_,ufe),e(ufe,NMo),e(F_,qMo),e(F_,zj),e(zj,jMo),e(F_,DMo),e(y,GMo),e(y,T_),e(T_,bfe),e(bfe,OMo),e(T_,VMo),e(T_,Wj),e(Wj,XMo),e(T_,zMo),e(y,WMo),e(y,M_),e(M_,vfe),e(vfe,QMo),e(M_,HMo),e(M_,Qj),e(Qj,UMo),e(M_,JMo),e(y,YMo),e(y,E_),e(E_,Ffe),e(Ffe,KMo),e(E_,ZMo),e(E_,Hj),e(Hj,e4o),e(E_,o4o),e(y,r4o),e(y,C_),e(C_,Tfe),e(Tfe,t4o),e(C_,a4o),e(C_,Uj),e(Uj,n4o),e(C_,s4o),e(y,l4o),e(y,w_),e(w_,Mfe),e(Mfe,i4o),e(w_,d4o),e(w_,Jj),e(Jj,c4o),e(w_,f4o),e(y,m4o),e(y,A_),e(A_,Efe),e(Efe,g4o),e(A_,h4o),e(A_,Yj),e(Yj,p4o),e(A_,_4o),e(y,u4o),e(y,L_),e(L_,Cfe),e(Cfe,b4o),e(L_,v4o),e(L_,Kj),e(Kj,F4o),e(L_,T4o),e(y,M4o),e(y,y_),e(y_,wfe),e(wfe,E4o),e(y_,C4o),e(y_,Zj),e(Zj,w4o),e(y_,A4o),e(y,L4o),e(y,x_),e(x_,Afe),e(Afe,y4o),e(x_,x4o),e(x_,eD),e(eD,$4o),e(x_,k4o),e(y,S4o),e(y,Us),e(Us,Lfe),e(Lfe,R4o),e(Us,P4o),e(Us,oD),e(oD,B4o),e(Us,I4o),e(Us,rD),e(rD,N4o),e(Us,q4o),e(y,j4o),e(y,$_),e($_,yfe),e(yfe,D4o),e($_,G4o),e($_,tD),e(tD,O4o),e($_,V4o),e(y,X4o),e(y,k_),e(k_,xfe),e(xfe,z4o),e(k_,W4o),e(k_,aD),e(aD,Q4o),e(k_,H4o),e(y,U4o),e(y,S_),e(S_,$fe),e($fe,J4o),e(S_,Y4o),e(S_,nD),e(nD,K4o),e(S_,Z4o),e(y,eEo),e(y,R_),e(R_,kfe),e(kfe,oEo),e(R_,rEo),e(R_,sD),e(sD,tEo),e(R_,aEo),e(y,nEo),e(y,P_),e(P_,Sfe),e(Sfe,sEo),e(P_,lEo),e(P_,lD),e(lD,iEo),e(P_,dEo),e(y,cEo),e(y,B_),e(B_,Rfe),e(Rfe,fEo),e(B_,mEo),e(B_,iD),e(iD,gEo),e(B_,hEo),e(y,pEo),e(y,I_),e(I_,Pfe),e(Pfe,_Eo),e(I_,uEo),e(I_,dD),e(dD,bEo),e(I_,vEo),e(y,FEo),e(y,N_),e(N_,Bfe),e(Bfe,TEo),e(N_,MEo),e(N_,cD),e(cD,EEo),e(N_,CEo),e(y,wEo),e(y,q_),e(q_,Ife),e(Ife,AEo),e(q_,LEo),e(q_,fD),e(fD,yEo),e(q_,xEo),e(y,$Eo),e(y,j_),e(j_,Nfe),e(Nfe,kEo),e(j_,SEo),e(j_,qfe),e(qfe,REo),e(j_,PEo),e(y,BEo),e(y,D_),e(D_,jfe),e(jfe,IEo),e(D_,NEo),e(D_,mD),e(mD,qEo),e(D_,jEo),e(y,DEo),e(y,G_),e(G_,Dfe),e(Dfe,GEo),e(G_,OEo),e(G_,gD),e(gD,VEo),e(G_,XEo),e(y,zEo),e(y,O_),e(O_,Gfe),e(Gfe,WEo),e(O_,QEo),e(O_,hD),e(hD,HEo),e(O_,UEo),e(y,JEo),e(y,V_),e(V_,Ofe),e(Ofe,YEo),e(V_,KEo),e(V_,pD),e(pD,ZEo),e(V_,eCo),e(y,oCo),e(y,X_),e(X_,Vfe),e(Vfe,rCo),e(X_,tCo),e(X_,_D),e(_D,aCo),e(X_,nCo),e(y,sCo),e(y,z_),e(z_,Xfe),e(Xfe,lCo),e(z_,iCo),e(z_,uD),e(uD,dCo),e(z_,cCo),e(y,fCo),e(y,W_),e(W_,zfe),e(zfe,mCo),e(W_,gCo),e(W_,bD),e(bD,hCo),e(W_,pCo),e(y,_Co),e(y,Q_),e(Q_,Wfe),e(Wfe,uCo),e(Q_,bCo),e(Q_,vD),e(vD,vCo),e(Q_,FCo),e(y,TCo),e(y,H_),e(H_,Qfe),e(Qfe,MCo),e(H_,ECo),e(H_,FD),e(FD,CCo),e(H_,wCo),e(y,ACo),e(y,U_),e(U_,Hfe),e(Hfe,LCo),e(U_,yCo),e(U_,TD),e(TD,xCo),e(U_,$Co),e(y,kCo),e(y,J_),e(J_,Ufe),e(Ufe,SCo),e(J_,RCo),e(J_,MD),e(MD,PCo),e(J_,BCo),e(y,ICo),e(y,Y_),e(Y_,Jfe),e(Jfe,NCo),e(Y_,qCo),e(Y_,ED),e(ED,jCo),e(Y_,DCo),e(y,GCo),e(y,K_),e(K_,Yfe),e(Yfe,OCo),e(K_,VCo),e(K_,CD),e(CD,XCo),e(K_,zCo),e(y,WCo),e(y,Z_),e(Z_,Kfe),e(Kfe,QCo),e(Z_,HCo),e(Z_,wD),e(wD,UCo),e(Z_,JCo),e(y,YCo),e(y,eu),e(eu,Zfe),e(Zfe,KCo),e(eu,ZCo),e(eu,AD),e(AD,e5o),e(eu,o5o),e(y,r5o),e(y,ou),e(ou,eme),e(eme,t5o),e(ou,a5o),e(ou,LD),e(LD,n5o),e(ou,s5o),e(y,l5o),e(y,ru),e(ru,ome),e(ome,i5o),e(ru,d5o),e(ru,yD),e(yD,c5o),e(ru,f5o),e(y,m5o),e(y,tu),e(tu,rme),e(rme,g5o),e(tu,h5o),e(tu,xD),e(xD,p5o),e(tu,_5o),e(y,u5o),e(y,au),e(au,tme),e(tme,b5o),e(au,v5o),e(au,$D),e($D,F5o),e(au,T5o),e(y,M5o),e(y,nu),e(nu,ame),e(ame,E5o),e(nu,C5o),e(nu,kD),e(kD,w5o),e(nu,A5o),e(y,L5o),e(y,su),e(su,nme),e(nme,y5o),e(su,x5o),e(su,SD),e(SD,$5o),e(su,k5o),e(y,S5o),e(y,lu),e(lu,sme),e(sme,R5o),e(lu,P5o),e(lu,RD),e(RD,B5o),e(lu,I5o),e(y,N5o),e(y,iu),e(iu,lme),e(lme,q5o),e(iu,j5o),e(iu,PD),e(PD,D5o),e(iu,G5o),e(y,O5o),e(y,du),e(du,ime),e(ime,V5o),e(du,X5o),e(du,BD),e(BD,z5o),e(du,W5o),e(y,Q5o),e(y,cu),e(cu,dme),e(dme,H5o),e(cu,U5o),e(cu,ID),e(ID,J5o),e(cu,Y5o),e(y,K5o),e(y,fu),e(fu,cme),e(cme,Z5o),e(fu,e3o),e(fu,ND),e(ND,o3o),e(fu,r3o),e(y,t3o),e(y,mu),e(mu,fme),e(fme,a3o),e(mu,n3o),e(mu,qD),e(qD,s3o),e(mu,l3o),e(y,i3o),e(y,gu),e(gu,mme),e(mme,d3o),e(gu,c3o),e(gu,jD),e(jD,f3o),e(gu,m3o),e(y,g3o),e(y,hu),e(hu,gme),e(gme,h3o),e(hu,p3o),e(hu,DD),e(DD,_3o),e(hu,u3o),e(y,b3o),e(y,pu),e(pu,hme),e(hme,v3o),e(pu,F3o),e(pu,GD),e(GD,T3o),e(pu,M3o),e(y,E3o),e(y,_u),e(_u,pme),e(pme,C3o),e(_u,w3o),e(_u,OD),e(OD,A3o),e(_u,L3o),e(y,y3o),e(y,uu),e(uu,_me),e(_me,x3o),e(uu,$3o),e(uu,VD),e(VD,k3o),e(uu,S3o),e(y,R3o),e(y,bu),e(bu,ume),e(ume,P3o),e(bu,B3o),e(bu,XD),e(XD,I3o),e(bu,N3o),e(y,q3o),e(y,vu),e(vu,bme),e(bme,j3o),e(vu,D3o),e(vu,zD),e(zD,G3o),e(vu,O3o),e(y,V3o),e(y,Fu),e(Fu,vme),e(vme,X3o),e(Fu,z3o),e(Fu,WD),e(WD,W3o),e(Fu,Q3o),e(y,H3o),e(y,Tu),e(Tu,Fme),e(Fme,U3o),e(Tu,J3o),e(Tu,QD),e(QD,Y3o),e(Tu,K3o),e(y,Z3o),e(y,Mu),e(Mu,Tme),e(Tme,e0o),e(Mu,o0o),e(Mu,HD),e(HD,r0o),e(Mu,t0o),e(y,a0o),e(y,Eu),e(Eu,Mme),e(Mme,n0o),e(Eu,s0o),e(Eu,UD),e(UD,l0o),e(Eu,i0o),e(y,d0o),e(y,Cu),e(Cu,Eme),e(Eme,c0o),e(Cu,f0o),e(Cu,JD),e(JD,m0o),e(Cu,g0o),e(y,h0o),e(y,wu),e(wu,Cme),e(Cme,p0o),e(wu,_0o),e(wu,YD),e(YD,u0o),e(wu,b0o),e(y,v0o),e(y,Au),e(Au,wme),e(wme,F0o),e(Au,T0o),e(Au,KD),e(KD,M0o),e(Au,E0o),e(y,C0o),e(y,Lu),e(Lu,Ame),e(Ame,w0o),e(Lu,A0o),e(Lu,ZD),e(ZD,L0o),e(Lu,y0o),e(y,x0o),e(y,yu),e(yu,Lme),e(Lme,$0o),e(yu,k0o),e(yu,eG),e(eG,S0o),e(yu,R0o),e(y,P0o),e(y,xu),e(xu,yme),e(yme,B0o),e(xu,I0o),e(xu,oG),e(oG,N0o),e(xu,q0o),e(y,j0o),e(y,$u),e($u,xme),e(xme,D0o),e($u,G0o),e($u,rG),e(rG,O0o),e($u,V0o),e(y,X0o),e(y,ku),e(ku,$me),e($me,z0o),e(ku,W0o),e(ku,tG),e(tG,Q0o),e(ku,H0o),e(y,U0o),e(y,Su),e(Su,kme),e(kme,J0o),e(Su,Y0o),e(Su,aG),e(aG,K0o),e(Su,Z0o),e(y,ewo),e(y,Ru),e(Ru,Sme),e(Sme,owo),e(Ru,rwo),e(Ru,nG),e(nG,two),e(Ru,awo),e(y,nwo),e(y,Pu),e(Pu,Rme),e(Rme,swo),e(Pu,lwo),e(Pu,sG),e(sG,iwo),e(Pu,dwo),e(y,cwo),e(y,Bu),e(Bu,Pme),e(Pme,fwo),e(Bu,mwo),e(Bu,lG),e(lG,gwo),e(Bu,hwo),e(y,pwo),e(y,Iu),e(Iu,Bme),e(Bme,_wo),e(Iu,uwo),e(Iu,iG),e(iG,bwo),e(Iu,vwo),e(y,Fwo),e(y,Nu),e(Nu,Ime),e(Ime,Two),e(Nu,Mwo),e(Nu,dG),e(dG,Ewo),e(Nu,Cwo),e(y,wwo),e(y,qu),e(qu,Nme),e(Nme,Awo),e(qu,Lwo),e(qu,cG),e(cG,ywo),e(qu,xwo),e(y,$wo),e(y,ju),e(ju,qme),e(qme,kwo),e(ju,Swo),e(ju,fG),e(fG,Rwo),e(ju,Pwo),e(y,Bwo),e(y,Du),e(Du,jme),e(jme,Iwo),e(Du,Nwo),e(Du,mG),e(mG,qwo),e(Du,jwo),e(y,Dwo),e(y,Gu),e(Gu,Dme),e(Dme,Gwo),e(Gu,Owo),e(Gu,gG),e(gG,Vwo),e(Gu,Xwo),e(y,zwo),e(y,Ou),e(Ou,Gme),e(Gme,Wwo),e(Ou,Qwo),e(Ou,hG),e(hG,Hwo),e(Ou,Uwo),e(y,Jwo),e(y,Vu),e(Vu,Ome),e(Ome,Ywo),e(Vu,Kwo),e(Vu,pG),e(pG,Zwo),e(Vu,eAo),e(y,oAo),e(y,Xu),e(Xu,Vme),e(Vme,rAo),e(Xu,tAo),e(Xu,_G),e(_G,aAo),e(Xu,nAo),e(y,sAo),e(y,zu),e(zu,Xme),e(Xme,lAo),e(zu,iAo),e(zu,uG),e(uG,dAo),e(zu,cAo),e(y,fAo),e(y,Wu),e(Wu,zme),e(zme,mAo),e(Wu,gAo),e(Wu,bG),e(bG,hAo),e(Wu,pAo),e(y,_Ao),e(y,Qu),e(Qu,Wme),e(Wme,uAo),e(Qu,bAo),e(Qu,vG),e(vG,vAo),e(Qu,FAo),e(y,TAo),e(y,Hu),e(Hu,Qme),e(Qme,MAo),e(Hu,EAo),e(Hu,FG),e(FG,CAo),e(Hu,wAo),e(y,AAo),e(y,Uu),e(Uu,Hme),e(Hme,LAo),e(Uu,yAo),e(Uu,TG),e(TG,xAo),e(Uu,$Ao),e(y,kAo),e(y,Ju),e(Ju,Ume),e(Ume,SAo),e(Ju,RAo),e(Ju,MG),e(MG,PAo),e(Ju,BAo),e(y,IAo),e(y,Yu),e(Yu,Jme),e(Jme,NAo),e(Yu,qAo),e(Yu,EG),e(EG,jAo),e(Yu,DAo),e(y,GAo),e(y,Ku),e(Ku,Yme),e(Yme,OAo),e(Ku,VAo),e(Ku,CG),e(CG,XAo),e(Ku,zAo),e(y,WAo),e(y,Zu),e(Zu,Kme),e(Kme,QAo),e(Zu,HAo),e(Zu,wG),e(wG,UAo),e(Zu,JAo),e(y,YAo),e(y,e2),e(e2,Zme),e(Zme,KAo),e(e2,ZAo),e(e2,AG),e(AG,eLo),e(e2,oLo),e(Ye,rLo),e(Ye,o2),e(o2,tLo),e(o2,ege),e(ege,aLo),e(o2,nLo),e(o2,oge),e(oge,sLo),e(Ye,lLo),M(r2,Ye,null),b(f,_ze,u),b(f,Wi,u),e(Wi,t2),e(t2,rge),M(UL,rge,null),e(Wi,iLo),e(Wi,tge),e(tge,dLo),b(f,uze,u),b(f,So,u),M(JL,So,null),e(So,cLo),e(So,Qi),e(Qi,fLo),e(Qi,LG),e(LG,mLo),e(Qi,gLo),e(Qi,yG),e(yG,hLo),e(Qi,pLo),e(So,_Lo),e(So,YL),e(YL,uLo),e(YL,age),e(age,bLo),e(YL,vLo),e(So,FLo),e(So,dt),M(KL,dt,null),e(dt,TLo),e(dt,nge),e(nge,MLo),e(dt,ELo),e(dt,Hi),e(Hi,CLo),e(Hi,sge),e(sge,wLo),e(Hi,ALo),e(Hi,xG),e(xG,LLo),e(Hi,yLo),e(dt,xLo),M(a2,dt,null),e(So,$Lo),e(So,Ke),M(ZL,Ke,null),e(Ke,kLo),e(Ke,lge),e(lge,SLo),e(Ke,RLo),e(Ke,Na),e(Na,PLo),e(Na,ige),e(ige,BLo),e(Na,ILo),e(Na,dge),e(dge,NLo),e(Na,qLo),e(Na,cge),e(cge,jLo),e(Na,DLo),e(Ke,GLo),e(Ke,G),e(G,n2),e(n2,fge),e(fge,OLo),e(n2,VLo),e(n2,$G),e($G,XLo),e(n2,zLo),e(G,WLo),e(G,s2),e(s2,mge),e(mge,QLo),e(s2,HLo),e(s2,kG),e(kG,ULo),e(s2,JLo),e(G,YLo),e(G,l2),e(l2,gge),e(gge,KLo),e(l2,ZLo),e(l2,SG),e(SG,eyo),e(l2,oyo),e(G,ryo),e(G,i2),e(i2,hge),e(hge,tyo),e(i2,ayo),e(i2,RG),e(RG,nyo),e(i2,syo),e(G,lyo),e(G,d2),e(d2,pge),e(pge,iyo),e(d2,dyo),e(d2,PG),e(PG,cyo),e(d2,fyo),e(G,myo),e(G,c2),e(c2,_ge),e(_ge,gyo),e(c2,hyo),e(c2,BG),e(BG,pyo),e(c2,_yo),e(G,uyo),e(G,f2),e(f2,uge),e(uge,byo),e(f2,vyo),e(f2,IG),e(IG,Fyo),e(f2,Tyo),e(G,Myo),e(G,m2),e(m2,bge),e(bge,Eyo),e(m2,Cyo),e(m2,NG),e(NG,wyo),e(m2,Ayo),e(G,Lyo),e(G,g2),e(g2,vge),e(vge,yyo),e(g2,xyo),e(g2,qG),e(qG,$yo),e(g2,kyo),e(G,Syo),e(G,h2),e(h2,Fge),e(Fge,Ryo),e(h2,Pyo),e(h2,jG),e(jG,Byo),e(h2,Iyo),e(G,Nyo),e(G,p2),e(p2,Tge),e(Tge,qyo),e(p2,jyo),e(p2,DG),e(DG,Dyo),e(p2,Gyo),e(G,Oyo),e(G,_2),e(_2,Mge),e(Mge,Vyo),e(_2,Xyo),e(_2,GG),e(GG,zyo),e(_2,Wyo),e(G,Qyo),e(G,u2),e(u2,Ege),e(Ege,Hyo),e(u2,Uyo),e(u2,OG),e(OG,Jyo),e(u2,Yyo),e(G,Kyo),e(G,b2),e(b2,Cge),e(Cge,Zyo),e(b2,e9o),e(b2,VG),e(VG,o9o),e(b2,r9o),e(G,t9o),e(G,v2),e(v2,wge),e(wge,a9o),e(v2,n9o),e(v2,XG),e(XG,s9o),e(v2,l9o),e(G,i9o),e(G,F2),e(F2,Age),e(Age,d9o),e(F2,c9o),e(F2,zG),e(zG,f9o),e(F2,m9o),e(G,g9o),e(G,T2),e(T2,Lge),e(Lge,h9o),e(T2,p9o),e(T2,WG),e(WG,_9o),e(T2,u9o),e(G,b9o),e(G,M2),e(M2,yge),e(yge,v9o),e(M2,F9o),e(M2,QG),e(QG,T9o),e(M2,M9o),e(G,E9o),e(G,E2),e(E2,xge),e(xge,C9o),e(E2,w9o),e(E2,HG),e(HG,A9o),e(E2,L9o),e(G,y9o),e(G,C2),e(C2,$ge),e($ge,x9o),e(C2,$9o),e(C2,UG),e(UG,k9o),e(C2,S9o),e(G,R9o),e(G,w2),e(w2,kge),e(kge,P9o),e(w2,B9o),e(w2,JG),e(JG,I9o),e(w2,N9o),e(G,q9o),e(G,A2),e(A2,Sge),e(Sge,j9o),e(A2,D9o),e(A2,YG),e(YG,G9o),e(A2,O9o),e(G,V9o),e(G,L2),e(L2,Rge),e(Rge,X9o),e(L2,z9o),e(L2,KG),e(KG,W9o),e(L2,Q9o),e(G,H9o),e(G,y2),e(y2,Pge),e(Pge,U9o),e(y2,J9o),e(y2,ZG),e(ZG,Y9o),e(y2,K9o),e(G,Z9o),e(G,x2),e(x2,Bge),e(Bge,exo),e(x2,oxo),e(x2,eO),e(eO,rxo),e(x2,txo),e(G,axo),e(G,$2),e($2,Ige),e(Ige,nxo),e($2,sxo),e($2,oO),e(oO,lxo),e($2,ixo),e(G,dxo),e(G,k2),e(k2,Nge),e(Nge,cxo),e(k2,fxo),e(k2,rO),e(rO,mxo),e(k2,gxo),e(G,hxo),e(G,S2),e(S2,qge),e(qge,pxo),e(S2,_xo),e(S2,tO),e(tO,uxo),e(S2,bxo),e(G,vxo),e(G,R2),e(R2,jge),e(jge,Fxo),e(R2,Txo),e(R2,aO),e(aO,Mxo),e(R2,Exo),e(G,Cxo),e(G,P2),e(P2,Dge),e(Dge,wxo),e(P2,Axo),e(P2,nO),e(nO,Lxo),e(P2,yxo),e(G,xxo),e(G,B2),e(B2,Gge),e(Gge,$xo),e(B2,kxo),e(B2,sO),e(sO,Sxo),e(B2,Rxo),e(G,Pxo),e(G,I2),e(I2,Oge),e(Oge,Bxo),e(I2,Ixo),e(I2,lO),e(lO,Nxo),e(I2,qxo),e(G,jxo),e(G,N2),e(N2,Vge),e(Vge,Dxo),e(N2,Gxo),e(N2,iO),e(iO,Oxo),e(N2,Vxo),e(G,Xxo),e(G,q2),e(q2,Xge),e(Xge,zxo),e(q2,Wxo),e(q2,dO),e(dO,Qxo),e(q2,Hxo),e(G,Uxo),e(G,j2),e(j2,zge),e(zge,Jxo),e(j2,Yxo),e(j2,cO),e(cO,Kxo),e(j2,Zxo),e(G,e$o),e(G,D2),e(D2,Wge),e(Wge,o$o),e(D2,r$o),e(D2,fO),e(fO,t$o),e(D2,a$o),e(G,n$o),e(G,G2),e(G2,Qge),e(Qge,s$o),e(G2,l$o),e(G2,mO),e(mO,i$o),e(G2,d$o),e(G,c$o),e(G,O2),e(O2,Hge),e(Hge,f$o),e(O2,m$o),e(O2,gO),e(gO,g$o),e(O2,h$o),e(G,p$o),e(G,V2),e(V2,Uge),e(Uge,_$o),e(V2,u$o),e(V2,hO),e(hO,b$o),e(V2,v$o),e(G,F$o),e(G,X2),e(X2,Jge),e(Jge,T$o),e(X2,M$o),e(X2,pO),e(pO,E$o),e(X2,C$o),e(G,w$o),e(G,z2),e(z2,Yge),e(Yge,A$o),e(z2,L$o),e(z2,_O),e(_O,y$o),e(z2,x$o),e(G,$$o),e(G,W2),e(W2,Kge),e(Kge,k$o),e(W2,S$o),e(W2,uO),e(uO,R$o),e(W2,P$o),e(G,B$o),e(G,Q2),e(Q2,Zge),e(Zge,I$o),e(Q2,N$o),e(Q2,bO),e(bO,q$o),e(Q2,j$o),e(G,D$o),e(G,H2),e(H2,ehe),e(ehe,G$o),e(H2,O$o),e(H2,vO),e(vO,V$o),e(H2,X$o),e(G,z$o),e(G,U2),e(U2,ohe),e(ohe,W$o),e(U2,Q$o),e(U2,FO),e(FO,H$o),e(U2,U$o),e(Ke,J$o),e(Ke,J2),e(J2,Y$o),e(J2,rhe),e(rhe,K$o),e(J2,Z$o),e(J2,the),e(the,eko),e(Ke,oko),M(Y2,Ke,null),b(f,bze,u),b(f,Ui,u),e(Ui,K2),e(K2,ahe),M(ey,ahe,null),e(Ui,rko),e(Ui,nhe),e(nhe,tko),b(f,vze,u),b(f,Ro,u),M(oy,Ro,null),e(Ro,ako),e(Ro,Ji),e(Ji,nko),e(Ji,TO),e(TO,sko),e(Ji,lko),e(Ji,MO),e(MO,iko),e(Ji,dko),e(Ro,cko),e(Ro,ry),e(ry,fko),e(ry,she),e(she,mko),e(ry,gko),e(Ro,hko),e(Ro,ct),M(ty,ct,null),e(ct,pko),e(ct,lhe),e(lhe,_ko),e(ct,uko),e(ct,Yi),e(Yi,bko),e(Yi,ihe),e(ihe,vko),e(Yi,Fko),e(Yi,EO),e(EO,Tko),e(Yi,Mko),e(ct,Eko),M(Z2,ct,null),e(Ro,Cko),e(Ro,Ze),M(ay,Ze,null),e(Ze,wko),e(Ze,dhe),e(dhe,Ako),e(Ze,Lko),e(Ze,qa),e(qa,yko),e(qa,che),e(che,xko),e(qa,$ko),e(qa,fhe),e(fhe,kko),e(qa,Sko),e(qa,mhe),e(mhe,Rko),e(qa,Pko),e(Ze,Bko),e(Ze,z),e(z,e1),e(e1,ghe),e(ghe,Iko),e(e1,Nko),e(e1,CO),e(CO,qko),e(e1,jko),e(z,Dko),e(z,o1),e(o1,hhe),e(hhe,Gko),e(o1,Oko),e(o1,wO),e(wO,Vko),e(o1,Xko),e(z,zko),e(z,r1),e(r1,phe),e(phe,Wko),e(r1,Qko),e(r1,AO),e(AO,Hko),e(r1,Uko),e(z,Jko),e(z,t1),e(t1,_he),e(_he,Yko),e(t1,Kko),e(t1,LO),e(LO,Zko),e(t1,eSo),e(z,oSo),e(z,a1),e(a1,uhe),e(uhe,rSo),e(a1,tSo),e(a1,yO),e(yO,aSo),e(a1,nSo),e(z,sSo),e(z,n1),e(n1,bhe),e(bhe,lSo),e(n1,iSo),e(n1,xO),e(xO,dSo),e(n1,cSo),e(z,fSo),e(z,s1),e(s1,vhe),e(vhe,mSo),e(s1,gSo),e(s1,$O),e($O,hSo),e(s1,pSo),e(z,_So),e(z,l1),e(l1,Fhe),e(Fhe,uSo),e(l1,bSo),e(l1,kO),e(kO,vSo),e(l1,FSo),e(z,TSo),e(z,i1),e(i1,The),e(The,MSo),e(i1,ESo),e(i1,SO),e(SO,CSo),e(i1,wSo),e(z,ASo),e(z,d1),e(d1,Mhe),e(Mhe,LSo),e(d1,ySo),e(d1,RO),e(RO,xSo),e(d1,$So),e(z,kSo),e(z,c1),e(c1,Ehe),e(Ehe,SSo),e(c1,RSo),e(c1,PO),e(PO,PSo),e(c1,BSo),e(z,ISo),e(z,f1),e(f1,Che),e(Che,NSo),e(f1,qSo),e(f1,BO),e(BO,jSo),e(f1,DSo),e(z,GSo),e(z,m1),e(m1,whe),e(whe,OSo),e(m1,VSo),e(m1,IO),e(IO,XSo),e(m1,zSo),e(z,WSo),e(z,g1),e(g1,Ahe),e(Ahe,QSo),e(g1,HSo),e(g1,NO),e(NO,USo),e(g1,JSo),e(z,YSo),e(z,h1),e(h1,Lhe),e(Lhe,KSo),e(h1,ZSo),e(h1,qO),e(qO,eRo),e(h1,oRo),e(z,rRo),e(z,p1),e(p1,yhe),e(yhe,tRo),e(p1,aRo),e(p1,jO),e(jO,nRo),e(p1,sRo),e(z,lRo),e(z,_1),e(_1,xhe),e(xhe,iRo),e(_1,dRo),e(_1,DO),e(DO,cRo),e(_1,fRo),e(z,mRo),e(z,u1),e(u1,$he),e($he,gRo),e(u1,hRo),e(u1,GO),e(GO,pRo),e(u1,_Ro),e(z,uRo),e(z,b1),e(b1,khe),e(khe,bRo),e(b1,vRo),e(b1,OO),e(OO,FRo),e(b1,TRo),e(z,MRo),e(z,v1),e(v1,She),e(She,ERo),e(v1,CRo),e(v1,VO),e(VO,wRo),e(v1,ARo),e(z,LRo),e(z,F1),e(F1,Rhe),e(Rhe,yRo),e(F1,xRo),e(F1,XO),e(XO,$Ro),e(F1,kRo),e(z,SRo),e(z,T1),e(T1,Phe),e(Phe,RRo),e(T1,PRo),e(T1,zO),e(zO,BRo),e(T1,IRo),e(z,NRo),e(z,M1),e(M1,Bhe),e(Bhe,qRo),e(M1,jRo),e(M1,WO),e(WO,DRo),e(M1,GRo),e(z,ORo),e(z,E1),e(E1,Ihe),e(Ihe,VRo),e(E1,XRo),e(E1,QO),e(QO,zRo),e(E1,WRo),e(z,QRo),e(z,C1),e(C1,Nhe),e(Nhe,HRo),e(C1,URo),e(C1,HO),e(HO,JRo),e(C1,YRo),e(z,KRo),e(z,w1),e(w1,qhe),e(qhe,ZRo),e(w1,ePo),e(w1,UO),e(UO,oPo),e(w1,rPo),e(z,tPo),e(z,A1),e(A1,jhe),e(jhe,aPo),e(A1,nPo),e(A1,JO),e(JO,sPo),e(A1,lPo),e(z,iPo),e(z,L1),e(L1,Dhe),e(Dhe,dPo),e(L1,cPo),e(L1,YO),e(YO,fPo),e(L1,mPo),e(z,gPo),e(z,y1),e(y1,Ghe),e(Ghe,hPo),e(y1,pPo),e(y1,KO),e(KO,_Po),e(y1,uPo),e(z,bPo),e(z,x1),e(x1,Ohe),e(Ohe,vPo),e(x1,FPo),e(x1,ZO),e(ZO,TPo),e(x1,MPo),e(z,EPo),e(z,$1),e($1,Vhe),e(Vhe,CPo),e($1,wPo),e($1,eV),e(eV,APo),e($1,LPo),e(z,yPo),e(z,k1),e(k1,Xhe),e(Xhe,xPo),e(k1,$Po),e(k1,oV),e(oV,kPo),e(k1,SPo),e(z,RPo),e(z,S1),e(S1,zhe),e(zhe,PPo),e(S1,BPo),e(S1,rV),e(rV,IPo),e(S1,NPo),e(z,qPo),e(z,R1),e(R1,Whe),e(Whe,jPo),e(R1,DPo),e(R1,tV),e(tV,GPo),e(R1,OPo),e(z,VPo),e(z,P1),e(P1,Qhe),e(Qhe,XPo),e(P1,zPo),e(P1,aV),e(aV,WPo),e(P1,QPo),e(z,HPo),e(z,B1),e(B1,Hhe),e(Hhe,UPo),e(B1,JPo),e(B1,nV),e(nV,YPo),e(B1,KPo),e(z,ZPo),e(z,I1),e(I1,Uhe),e(Uhe,eBo),e(I1,oBo),e(I1,sV),e(sV,rBo),e(I1,tBo),e(z,aBo),e(z,N1),e(N1,Jhe),e(Jhe,nBo),e(N1,sBo),e(N1,lV),e(lV,lBo),e(N1,iBo),e(z,dBo),e(z,q1),e(q1,Yhe),e(Yhe,cBo),e(q1,fBo),e(q1,iV),e(iV,mBo),e(q1,gBo),e(z,hBo),e(z,j1),e(j1,Khe),e(Khe,pBo),e(j1,_Bo),e(j1,dV),e(dV,uBo),e(j1,bBo),e(Ze,vBo),e(Ze,D1),e(D1,FBo),e(D1,Zhe),e(Zhe,TBo),e(D1,MBo),e(D1,epe),e(epe,EBo),e(Ze,CBo),M(G1,Ze,null),b(f,Fze,u),b(f,Ki,u),e(Ki,O1),e(O1,ope),M(ny,ope,null),e(Ki,wBo),e(Ki,rpe),e(rpe,ABo),b(f,Tze,u),b(f,Po,u),M(sy,Po,null),e(Po,LBo),e(Po,Zi),e(Zi,yBo),e(Zi,cV),e(cV,xBo),e(Zi,$Bo),e(Zi,fV),e(fV,kBo),e(Zi,SBo),e(Po,RBo),e(Po,ly),e(ly,PBo),e(ly,tpe),e(tpe,BBo),e(ly,IBo),e(Po,NBo),e(Po,ft),M(iy,ft,null),e(ft,qBo),e(ft,ape),e(ape,jBo),e(ft,DBo),e(ft,ed),e(ed,GBo),e(ed,npe),e(npe,OBo),e(ed,VBo),e(ed,mV),e(mV,XBo),e(ed,zBo),e(ft,WBo),M(V1,ft,null),e(Po,QBo),e(Po,eo),M(dy,eo,null),e(eo,HBo),e(eo,spe),e(spe,UBo),e(eo,JBo),e(eo,ja),e(ja,YBo),e(ja,lpe),e(lpe,KBo),e(ja,ZBo),e(ja,ipe),e(ipe,eIo),e(ja,oIo),e(ja,dpe),e(dpe,rIo),e(ja,tIo),e(eo,aIo),e(eo,Q),e(Q,X1),e(X1,cpe),e(cpe,nIo),e(X1,sIo),e(X1,gV),e(gV,lIo),e(X1,iIo),e(Q,dIo),e(Q,z1),e(z1,fpe),e(fpe,cIo),e(z1,fIo),e(z1,hV),e(hV,mIo),e(z1,gIo),e(Q,hIo),e(Q,W1),e(W1,mpe),e(mpe,pIo),e(W1,_Io),e(W1,pV),e(pV,uIo),e(W1,bIo),e(Q,vIo),e(Q,Q1),e(Q1,gpe),e(gpe,FIo),e(Q1,TIo),e(Q1,_V),e(_V,MIo),e(Q1,EIo),e(Q,CIo),e(Q,H1),e(H1,hpe),e(hpe,wIo),e(H1,AIo),e(H1,uV),e(uV,LIo),e(H1,yIo),e(Q,xIo),e(Q,U1),e(U1,ppe),e(ppe,$Io),e(U1,kIo),e(U1,bV),e(bV,SIo),e(U1,RIo),e(Q,PIo),e(Q,J1),e(J1,_pe),e(_pe,BIo),e(J1,IIo),e(J1,vV),e(vV,NIo),e(J1,qIo),e(Q,jIo),e(Q,Y1),e(Y1,upe),e(upe,DIo),e(Y1,GIo),e(Y1,FV),e(FV,OIo),e(Y1,VIo),e(Q,XIo),e(Q,K1),e(K1,bpe),e(bpe,zIo),e(K1,WIo),e(K1,TV),e(TV,QIo),e(K1,HIo),e(Q,UIo),e(Q,Z1),e(Z1,vpe),e(vpe,JIo),e(Z1,YIo),e(Z1,MV),e(MV,KIo),e(Z1,ZIo),e(Q,eNo),e(Q,eb),e(eb,Fpe),e(Fpe,oNo),e(eb,rNo),e(eb,EV),e(EV,tNo),e(eb,aNo),e(Q,nNo),e(Q,ob),e(ob,Tpe),e(Tpe,sNo),e(ob,lNo),e(ob,CV),e(CV,iNo),e(ob,dNo),e(Q,cNo),e(Q,rb),e(rb,Mpe),e(Mpe,fNo),e(rb,mNo),e(rb,wV),e(wV,gNo),e(rb,hNo),e(Q,pNo),e(Q,tb),e(tb,Epe),e(Epe,_No),e(tb,uNo),e(tb,AV),e(AV,bNo),e(tb,vNo),e(Q,FNo),e(Q,ab),e(ab,Cpe),e(Cpe,TNo),e(ab,MNo),e(ab,LV),e(LV,ENo),e(ab,CNo),e(Q,wNo),e(Q,nb),e(nb,wpe),e(wpe,ANo),e(nb,LNo),e(nb,yV),e(yV,yNo),e(nb,xNo),e(Q,$No),e(Q,sb),e(sb,Ape),e(Ape,kNo),e(sb,SNo),e(sb,xV),e(xV,RNo),e(sb,PNo),e(Q,BNo),e(Q,lb),e(lb,Lpe),e(Lpe,INo),e(lb,NNo),e(lb,$V),e($V,qNo),e(lb,jNo),e(Q,DNo),e(Q,ib),e(ib,ype),e(ype,GNo),e(ib,ONo),e(ib,kV),e(kV,VNo),e(ib,XNo),e(Q,zNo),e(Q,db),e(db,xpe),e(xpe,WNo),e(db,QNo),e(db,SV),e(SV,HNo),e(db,UNo),e(Q,JNo),e(Q,cb),e(cb,$pe),e($pe,YNo),e(cb,KNo),e(cb,RV),e(RV,ZNo),e(cb,eqo),e(Q,oqo),e(Q,fb),e(fb,kpe),e(kpe,rqo),e(fb,tqo),e(fb,PV),e(PV,aqo),e(fb,nqo),e(Q,sqo),e(Q,mb),e(mb,Spe),e(Spe,lqo),e(mb,iqo),e(mb,BV),e(BV,dqo),e(mb,cqo),e(Q,fqo),e(Q,gb),e(gb,Rpe),e(Rpe,mqo),e(gb,gqo),e(gb,IV),e(IV,hqo),e(gb,pqo),e(Q,_qo),e(Q,hb),e(hb,Ppe),e(Ppe,uqo),e(hb,bqo),e(hb,NV),e(NV,vqo),e(hb,Fqo),e(Q,Tqo),e(Q,pb),e(pb,Bpe),e(Bpe,Mqo),e(pb,Eqo),e(pb,qV),e(qV,Cqo),e(pb,wqo),e(Q,Aqo),e(Q,_b),e(_b,Ipe),e(Ipe,Lqo),e(_b,yqo),e(_b,jV),e(jV,xqo),e(_b,$qo),e(Q,kqo),e(Q,ub),e(ub,Npe),e(Npe,Sqo),e(ub,Rqo),e(ub,DV),e(DV,Pqo),e(ub,Bqo),e(Q,Iqo),e(Q,bb),e(bb,qpe),e(qpe,Nqo),e(bb,qqo),e(bb,GV),e(GV,jqo),e(bb,Dqo),e(Q,Gqo),e(Q,vb),e(vb,jpe),e(jpe,Oqo),e(vb,Vqo),e(vb,OV),e(OV,Xqo),e(vb,zqo),e(Q,Wqo),e(Q,Fb),e(Fb,Dpe),e(Dpe,Qqo),e(Fb,Hqo),e(Fb,VV),e(VV,Uqo),e(Fb,Jqo),e(Q,Yqo),e(Q,Tb),e(Tb,Gpe),e(Gpe,Kqo),e(Tb,Zqo),e(Tb,XV),e(XV,ejo),e(Tb,ojo),e(Q,rjo),e(Q,Mb),e(Mb,Ope),e(Ope,tjo),e(Mb,ajo),e(Mb,zV),e(zV,njo),e(Mb,sjo),e(Q,ljo),e(Q,Eb),e(Eb,Vpe),e(Vpe,ijo),e(Eb,djo),e(Eb,Xpe),e(Xpe,cjo),e(Eb,fjo),e(Q,mjo),e(Q,Cb),e(Cb,zpe),e(zpe,gjo),e(Cb,hjo),e(Cb,WV),e(WV,pjo),e(Cb,_jo),e(Q,ujo),e(Q,wb),e(wb,Wpe),e(Wpe,bjo),e(wb,vjo),e(wb,QV),e(QV,Fjo),e(wb,Tjo),e(Q,Mjo),e(Q,Ab),e(Ab,Qpe),e(Qpe,Ejo),e(Ab,Cjo),e(Ab,HV),e(HV,wjo),e(Ab,Ajo),e(Q,Ljo),e(Q,Lb),e(Lb,Hpe),e(Hpe,yjo),e(Lb,xjo),e(Lb,UV),e(UV,$jo),e(Lb,kjo),e(eo,Sjo),e(eo,yb),e(yb,Rjo),e(yb,Upe),e(Upe,Pjo),e(yb,Bjo),e(yb,Jpe),e(Jpe,Ijo),e(eo,Njo),M(xb,eo,null),b(f,Mze,u),b(f,od,u),e(od,$b),e($b,Ype),M(cy,Ype,null),e(od,qjo),e(od,Kpe),e(Kpe,jjo),b(f,Eze,u),b(f,Bo,u),M(fy,Bo,null),e(Bo,Djo),e(Bo,rd),e(rd,Gjo),e(rd,JV),e(JV,Ojo),e(rd,Vjo),e(rd,YV),e(YV,Xjo),e(rd,zjo),e(Bo,Wjo),e(Bo,my),e(my,Qjo),e(my,Zpe),e(Zpe,Hjo),e(my,Ujo),e(Bo,Jjo),e(Bo,mt),M(gy,mt,null),e(mt,Yjo),e(mt,e_e),e(e_e,Kjo),e(mt,Zjo),e(mt,td),e(td,eDo),e(td,o_e),e(o_e,oDo),e(td,rDo),e(td,KV),e(KV,tDo),e(td,aDo),e(mt,nDo),M(kb,mt,null),e(Bo,sDo),e(Bo,oo),M(hy,oo,null),e(oo,lDo),e(oo,r_e),e(r_e,iDo),e(oo,dDo),e(oo,Da),e(Da,cDo),e(Da,t_e),e(t_e,fDo),e(Da,mDo),e(Da,a_e),e(a_e,gDo),e(Da,hDo),e(Da,n_e),e(n_e,pDo),e(Da,_Do),e(oo,uDo),e(oo,me),e(me,Sb),e(Sb,s_e),e(s_e,bDo),e(Sb,vDo),e(Sb,ZV),e(ZV,FDo),e(Sb,TDo),e(me,MDo),e(me,Rb),e(Rb,l_e),e(l_e,EDo),e(Rb,CDo),e(Rb,eX),e(eX,wDo),e(Rb,ADo),e(me,LDo),e(me,Pb),e(Pb,i_e),e(i_e,yDo),e(Pb,xDo),e(Pb,oX),e(oX,$Do),e(Pb,kDo),e(me,SDo),e(me,Bb),e(Bb,d_e),e(d_e,RDo),e(Bb,PDo),e(Bb,rX),e(rX,BDo),e(Bb,IDo),e(me,NDo),e(me,Ib),e(Ib,c_e),e(c_e,qDo),e(Ib,jDo),e(Ib,tX),e(tX,DDo),e(Ib,GDo),e(me,ODo),e(me,Nb),e(Nb,f_e),e(f_e,VDo),e(Nb,XDo),e(Nb,aX),e(aX,zDo),e(Nb,WDo),e(me,QDo),e(me,qb),e(qb,m_e),e(m_e,HDo),e(qb,UDo),e(qb,nX),e(nX,JDo),e(qb,YDo),e(me,KDo),e(me,jb),e(jb,g_e),e(g_e,ZDo),e(jb,eGo),e(jb,sX),e(sX,oGo),e(jb,rGo),e(me,tGo),e(me,Db),e(Db,h_e),e(h_e,aGo),e(Db,nGo),e(Db,lX),e(lX,sGo),e(Db,lGo),e(me,iGo),e(me,Gb),e(Gb,p_e),e(p_e,dGo),e(Gb,cGo),e(Gb,iX),e(iX,fGo),e(Gb,mGo),e(me,gGo),e(me,Ob),e(Ob,__e),e(__e,hGo),e(Ob,pGo),e(Ob,dX),e(dX,_Go),e(Ob,uGo),e(me,bGo),e(me,Vb),e(Vb,u_e),e(u_e,vGo),e(Vb,FGo),e(Vb,cX),e(cX,TGo),e(Vb,MGo),e(me,EGo),e(me,Xb),e(Xb,b_e),e(b_e,CGo),e(Xb,wGo),e(Xb,fX),e(fX,AGo),e(Xb,LGo),e(me,yGo),e(me,zb),e(zb,v_e),e(v_e,xGo),e(zb,$Go),e(zb,mX),e(mX,kGo),e(zb,SGo),e(me,RGo),e(me,Wb),e(Wb,F_e),e(F_e,PGo),e(Wb,BGo),e(Wb,gX),e(gX,IGo),e(Wb,NGo),e(me,qGo),e(me,Qb),e(Qb,T_e),e(T_e,jGo),e(Qb,DGo),e(Qb,hX),e(hX,GGo),e(Qb,OGo),e(me,VGo),e(me,Hb),e(Hb,M_e),e(M_e,XGo),e(Hb,zGo),e(Hb,pX),e(pX,WGo),e(Hb,QGo),e(me,HGo),e(me,Ub),e(Ub,E_e),e(E_e,UGo),e(Ub,JGo),e(Ub,_X),e(_X,YGo),e(Ub,KGo),e(me,ZGo),e(me,Jb),e(Jb,C_e),e(C_e,eOo),e(Jb,oOo),e(Jb,uX),e(uX,rOo),e(Jb,tOo),e(oo,aOo),e(oo,Yb),e(Yb,nOo),e(Yb,w_e),e(w_e,sOo),e(Yb,lOo),e(Yb,A_e),e(A_e,iOo),e(oo,dOo),M(Kb,oo,null),b(f,Cze,u),b(f,ad,u),e(ad,Zb),e(Zb,L_e),M(py,L_e,null),e(ad,cOo),e(ad,y_e),e(y_e,fOo),b(f,wze,u),b(f,Io,u),M(_y,Io,null),e(Io,mOo),e(Io,nd),e(nd,gOo),e(nd,bX),e(bX,hOo),e(nd,pOo),e(nd,vX),e(vX,_Oo),e(nd,uOo),e(Io,bOo),e(Io,uy),e(uy,vOo),e(uy,x_e),e(x_e,FOo),e(uy,TOo),e(Io,MOo),e(Io,gt),M(by,gt,null),e(gt,EOo),e(gt,$_e),e($_e,COo),e(gt,wOo),e(gt,sd),e(sd,AOo),e(sd,k_e),e(k_e,LOo),e(sd,yOo),e(sd,FX),e(FX,xOo),e(sd,$Oo),e(gt,kOo),M(ev,gt,null),e(Io,SOo),e(Io,ro),M(vy,ro,null),e(ro,ROo),e(ro,S_e),e(S_e,POo),e(ro,BOo),e(ro,Ga),e(Ga,IOo),e(Ga,R_e),e(R_e,NOo),e(Ga,qOo),e(Ga,P_e),e(P_e,jOo),e(Ga,DOo),e(Ga,B_e),e(B_e,GOo),e(Ga,OOo),e(ro,VOo),e(ro,B),e(B,ov),e(ov,I_e),e(I_e,XOo),e(ov,zOo),e(ov,TX),e(TX,WOo),e(ov,QOo),e(B,HOo),e(B,rv),e(rv,N_e),e(N_e,UOo),e(rv,JOo),e(rv,MX),e(MX,YOo),e(rv,KOo),e(B,ZOo),e(B,tv),e(tv,q_e),e(q_e,eVo),e(tv,oVo),e(tv,EX),e(EX,rVo),e(tv,tVo),e(B,aVo),e(B,av),e(av,j_e),e(j_e,nVo),e(av,sVo),e(av,CX),e(CX,lVo),e(av,iVo),e(B,dVo),e(B,nv),e(nv,D_e),e(D_e,cVo),e(nv,fVo),e(nv,wX),e(wX,mVo),e(nv,gVo),e(B,hVo),e(B,sv),e(sv,G_e),e(G_e,pVo),e(sv,_Vo),e(sv,AX),e(AX,uVo),e(sv,bVo),e(B,vVo),e(B,lv),e(lv,O_e),e(O_e,FVo),e(lv,TVo),e(lv,LX),e(LX,MVo),e(lv,EVo),e(B,CVo),e(B,iv),e(iv,V_e),e(V_e,wVo),e(iv,AVo),e(iv,yX),e(yX,LVo),e(iv,yVo),e(B,xVo),e(B,dv),e(dv,X_e),e(X_e,$Vo),e(dv,kVo),e(dv,xX),e(xX,SVo),e(dv,RVo),e(B,PVo),e(B,cv),e(cv,z_e),e(z_e,BVo),e(cv,IVo),e(cv,$X),e($X,NVo),e(cv,qVo),e(B,jVo),e(B,fv),e(fv,W_e),e(W_e,DVo),e(fv,GVo),e(fv,kX),e(kX,OVo),e(fv,VVo),e(B,XVo),e(B,mv),e(mv,Q_e),e(Q_e,zVo),e(mv,WVo),e(mv,SX),e(SX,QVo),e(mv,HVo),e(B,UVo),e(B,gv),e(gv,H_e),e(H_e,JVo),e(gv,YVo),e(gv,RX),e(RX,KVo),e(gv,ZVo),e(B,eXo),e(B,hv),e(hv,U_e),e(U_e,oXo),e(hv,rXo),e(hv,PX),e(PX,tXo),e(hv,aXo),e(B,nXo),e(B,pv),e(pv,J_e),e(J_e,sXo),e(pv,lXo),e(pv,BX),e(BX,iXo),e(pv,dXo),e(B,cXo),e(B,_v),e(_v,Y_e),e(Y_e,fXo),e(_v,mXo),e(_v,IX),e(IX,gXo),e(_v,hXo),e(B,pXo),e(B,uv),e(uv,K_e),e(K_e,_Xo),e(uv,uXo),e(uv,NX),e(NX,bXo),e(uv,vXo),e(B,FXo),e(B,bv),e(bv,Z_e),e(Z_e,TXo),e(bv,MXo),e(bv,qX),e(qX,EXo),e(bv,CXo),e(B,wXo),e(B,vv),e(vv,eue),e(eue,AXo),e(vv,LXo),e(vv,jX),e(jX,yXo),e(vv,xXo),e(B,$Xo),e(B,Fv),e(Fv,oue),e(oue,kXo),e(Fv,SXo),e(Fv,DX),e(DX,RXo),e(Fv,PXo),e(B,BXo),e(B,Tv),e(Tv,rue),e(rue,IXo),e(Tv,NXo),e(Tv,GX),e(GX,qXo),e(Tv,jXo),e(B,DXo),e(B,Mv),e(Mv,tue),e(tue,GXo),e(Mv,OXo),e(Mv,OX),e(OX,VXo),e(Mv,XXo),e(B,zXo),e(B,Ev),e(Ev,aue),e(aue,WXo),e(Ev,QXo),e(Ev,VX),e(VX,HXo),e(Ev,UXo),e(B,JXo),e(B,Cv),e(Cv,nue),e(nue,YXo),e(Cv,KXo),e(Cv,XX),e(XX,ZXo),e(Cv,ezo),e(B,ozo),e(B,wv),e(wv,sue),e(sue,rzo),e(wv,tzo),e(wv,zX),e(zX,azo),e(wv,nzo),e(B,szo),e(B,Av),e(Av,lue),e(lue,lzo),e(Av,izo),e(Av,WX),e(WX,dzo),e(Av,czo),e(B,fzo),e(B,Lv),e(Lv,iue),e(iue,mzo),e(Lv,gzo),e(Lv,QX),e(QX,hzo),e(Lv,pzo),e(B,_zo),e(B,yv),e(yv,due),e(due,uzo),e(yv,bzo),e(yv,HX),e(HX,vzo),e(yv,Fzo),e(B,Tzo),e(B,xv),e(xv,cue),e(cue,Mzo),e(xv,Ezo),e(xv,UX),e(UX,Czo),e(xv,wzo),e(B,Azo),e(B,$v),e($v,fue),e(fue,Lzo),e($v,yzo),e($v,JX),e(JX,xzo),e($v,$zo),e(B,kzo),e(B,kv),e(kv,mue),e(mue,Szo),e(kv,Rzo),e(kv,YX),e(YX,Pzo),e(kv,Bzo),e(B,Izo),e(B,Sv),e(Sv,gue),e(gue,Nzo),e(Sv,qzo),e(Sv,KX),e(KX,jzo),e(Sv,Dzo),e(B,Gzo),e(B,Rv),e(Rv,hue),e(hue,Ozo),e(Rv,Vzo),e(Rv,ZX),e(ZX,Xzo),e(Rv,zzo),e(B,Wzo),e(B,Pv),e(Pv,pue),e(pue,Qzo),e(Pv,Hzo),e(Pv,ez),e(ez,Uzo),e(Pv,Jzo),e(B,Yzo),e(B,Bv),e(Bv,_ue),e(_ue,Kzo),e(Bv,Zzo),e(Bv,oz),e(oz,eWo),e(Bv,oWo),e(B,rWo),e(B,Iv),e(Iv,uue),e(uue,tWo),e(Iv,aWo),e(Iv,rz),e(rz,nWo),e(Iv,sWo),e(B,lWo),e(B,Nv),e(Nv,bue),e(bue,iWo),e(Nv,dWo),e(Nv,tz),e(tz,cWo),e(Nv,fWo),e(B,mWo),e(B,qv),e(qv,vue),e(vue,gWo),e(qv,hWo),e(qv,az),e(az,pWo),e(qv,_Wo),e(B,uWo),e(B,jv),e(jv,Fue),e(Fue,bWo),e(jv,vWo),e(jv,nz),e(nz,FWo),e(jv,TWo),e(B,MWo),e(B,Dv),e(Dv,Tue),e(Tue,EWo),e(Dv,CWo),e(Dv,sz),e(sz,wWo),e(Dv,AWo),e(B,LWo),e(B,Gv),e(Gv,Mue),e(Mue,yWo),e(Gv,xWo),e(Gv,lz),e(lz,$Wo),e(Gv,kWo),e(B,SWo),e(B,Ov),e(Ov,Eue),e(Eue,RWo),e(Ov,PWo),e(Ov,iz),e(iz,BWo),e(Ov,IWo),e(B,NWo),e(B,Vv),e(Vv,Cue),e(Cue,qWo),e(Vv,jWo),e(Vv,dz),e(dz,DWo),e(Vv,GWo),e(B,OWo),e(B,Xv),e(Xv,wue),e(wue,VWo),e(Xv,XWo),e(Xv,cz),e(cz,zWo),e(Xv,WWo),e(B,QWo),e(B,zv),e(zv,Aue),e(Aue,HWo),e(zv,UWo),e(zv,fz),e(fz,JWo),e(zv,YWo),e(B,KWo),e(B,Wv),e(Wv,Lue),e(Lue,ZWo),e(Wv,eQo),e(Wv,mz),e(mz,oQo),e(Wv,rQo),e(B,tQo),e(B,Qv),e(Qv,yue),e(yue,aQo),e(Qv,nQo),e(Qv,gz),e(gz,sQo),e(Qv,lQo),e(B,iQo),e(B,Hv),e(Hv,xue),e(xue,dQo),e(Hv,cQo),e(Hv,hz),e(hz,fQo),e(Hv,mQo),e(B,gQo),e(B,Uv),e(Uv,$ue),e($ue,hQo),e(Uv,pQo),e(Uv,pz),e(pz,_Qo),e(Uv,uQo),e(B,bQo),e(B,Jv),e(Jv,kue),e(kue,vQo),e(Jv,FQo),e(Jv,_z),e(_z,TQo),e(Jv,MQo),e(B,EQo),e(B,Yv),e(Yv,Sue),e(Sue,CQo),e(Yv,wQo),e(Yv,uz),e(uz,AQo),e(Yv,LQo),e(ro,yQo),e(ro,Kv),e(Kv,xQo),e(Kv,Rue),e(Rue,$Qo),e(Kv,kQo),e(Kv,Pue),e(Pue,SQo),e(ro,RQo),M(Zv,ro,null),b(f,Aze,u),b(f,ld,u),e(ld,eF),e(eF,Bue),M(Fy,Bue,null),e(ld,PQo),e(ld,Iue),e(Iue,BQo),b(f,Lze,u),b(f,No,u),M(Ty,No,null),e(No,IQo),e(No,id),e(id,NQo),e(id,bz),e(bz,qQo),e(id,jQo),e(id,vz),e(vz,DQo),e(id,GQo),e(No,OQo),e(No,My),e(My,VQo),e(My,Nue),e(Nue,XQo),e(My,zQo),e(No,WQo),e(No,ht),M(Ey,ht,null),e(ht,QQo),e(ht,que),e(que,HQo),e(ht,UQo),e(ht,dd),e(dd,JQo),e(dd,jue),e(jue,YQo),e(dd,KQo),e(dd,Fz),e(Fz,ZQo),e(dd,eHo),e(ht,oHo),M(oF,ht,null),e(No,rHo),e(No,to),M(Cy,to,null),e(to,tHo),e(to,Due),e(Due,aHo),e(to,nHo),e(to,Oa),e(Oa,sHo),e(Oa,Gue),e(Gue,lHo),e(Oa,iHo),e(Oa,Oue),e(Oue,dHo),e(Oa,cHo),e(Oa,Vue),e(Vue,fHo),e(Oa,mHo),e(to,gHo),e(to,Z),e(Z,rF),e(rF,Xue),e(Xue,hHo),e(rF,pHo),e(rF,Tz),e(Tz,_Ho),e(rF,uHo),e(Z,bHo),e(Z,tF),e(tF,zue),e(zue,vHo),e(tF,FHo),e(tF,Mz),e(Mz,THo),e(tF,MHo),e(Z,EHo),e(Z,aF),e(aF,Wue),e(Wue,CHo),e(aF,wHo),e(aF,Ez),e(Ez,AHo),e(aF,LHo),e(Z,yHo),e(Z,nF),e(nF,Que),e(Que,xHo),e(nF,$Ho),e(nF,Cz),e(Cz,kHo),e(nF,SHo),e(Z,RHo),e(Z,sF),e(sF,Hue),e(Hue,PHo),e(sF,BHo),e(sF,wz),e(wz,IHo),e(sF,NHo),e(Z,qHo),e(Z,lF),e(lF,Uue),e(Uue,jHo),e(lF,DHo),e(lF,Az),e(Az,GHo),e(lF,OHo),e(Z,VHo),e(Z,iF),e(iF,Jue),e(Jue,XHo),e(iF,zHo),e(iF,Lz),e(Lz,WHo),e(iF,QHo),e(Z,HHo),e(Z,dF),e(dF,Yue),e(Yue,UHo),e(dF,JHo),e(dF,yz),e(yz,YHo),e(dF,KHo),e(Z,ZHo),e(Z,cF),e(cF,Kue),e(Kue,eUo),e(cF,oUo),e(cF,xz),e(xz,rUo),e(cF,tUo),e(Z,aUo),e(Z,fF),e(fF,Zue),e(Zue,nUo),e(fF,sUo),e(fF,$z),e($z,lUo),e(fF,iUo),e(Z,dUo),e(Z,mF),e(mF,e2e),e(e2e,cUo),e(mF,fUo),e(mF,kz),e(kz,mUo),e(mF,gUo),e(Z,hUo),e(Z,gF),e(gF,o2e),e(o2e,pUo),e(gF,_Uo),e(gF,Sz),e(Sz,uUo),e(gF,bUo),e(Z,vUo),e(Z,hF),e(hF,r2e),e(r2e,FUo),e(hF,TUo),e(hF,Rz),e(Rz,MUo),e(hF,EUo),e(Z,CUo),e(Z,pF),e(pF,t2e),e(t2e,wUo),e(pF,AUo),e(pF,Pz),e(Pz,LUo),e(pF,yUo),e(Z,xUo),e(Z,_F),e(_F,a2e),e(a2e,$Uo),e(_F,kUo),e(_F,Bz),e(Bz,SUo),e(_F,RUo),e(Z,PUo),e(Z,uF),e(uF,n2e),e(n2e,BUo),e(uF,IUo),e(uF,Iz),e(Iz,NUo),e(uF,qUo),e(Z,jUo),e(Z,bF),e(bF,s2e),e(s2e,DUo),e(bF,GUo),e(bF,Nz),e(Nz,OUo),e(bF,VUo),e(Z,XUo),e(Z,vF),e(vF,l2e),e(l2e,zUo),e(vF,WUo),e(vF,qz),e(qz,QUo),e(vF,HUo),e(Z,UUo),e(Z,FF),e(FF,i2e),e(i2e,JUo),e(FF,YUo),e(FF,jz),e(jz,KUo),e(FF,ZUo),e(Z,eJo),e(Z,TF),e(TF,d2e),e(d2e,oJo),e(TF,rJo),e(TF,Dz),e(Dz,tJo),e(TF,aJo),e(Z,nJo),e(Z,MF),e(MF,c2e),e(c2e,sJo),e(MF,lJo),e(MF,Gz),e(Gz,iJo),e(MF,dJo),e(Z,cJo),e(Z,EF),e(EF,f2e),e(f2e,fJo),e(EF,mJo),e(EF,Oz),e(Oz,gJo),e(EF,hJo),e(Z,pJo),e(Z,CF),e(CF,m2e),e(m2e,_Jo),e(CF,uJo),e(CF,Vz),e(Vz,bJo),e(CF,vJo),e(Z,FJo),e(Z,wF),e(wF,g2e),e(g2e,TJo),e(wF,MJo),e(wF,Xz),e(Xz,EJo),e(wF,CJo),e(Z,wJo),e(Z,AF),e(AF,h2e),e(h2e,AJo),e(AF,LJo),e(AF,zz),e(zz,yJo),e(AF,xJo),e(Z,$Jo),e(Z,LF),e(LF,p2e),e(p2e,kJo),e(LF,SJo),e(LF,Wz),e(Wz,RJo),e(LF,PJo),e(Z,BJo),e(Z,yF),e(yF,_2e),e(_2e,IJo),e(yF,NJo),e(yF,Qz),e(Qz,qJo),e(yF,jJo),e(Z,DJo),e(Z,xF),e(xF,u2e),e(u2e,GJo),e(xF,OJo),e(xF,Hz),e(Hz,VJo),e(xF,XJo),e(Z,zJo),e(Z,$F),e($F,b2e),e(b2e,WJo),e($F,QJo),e($F,Uz),e(Uz,HJo),e($F,UJo),e(Z,JJo),e(Z,kF),e(kF,v2e),e(v2e,YJo),e(kF,KJo),e(kF,Jz),e(Jz,ZJo),e(kF,eYo),e(to,oYo),e(to,SF),e(SF,rYo),e(SF,F2e),e(F2e,tYo),e(SF,aYo),e(SF,T2e),e(T2e,nYo),e(to,sYo),M(RF,to,null),b(f,yze,u),b(f,cd,u),e(cd,PF),e(PF,M2e),M(wy,M2e,null),e(cd,lYo),e(cd,E2e),e(E2e,iYo),b(f,xze,u),b(f,qo,u),M(Ay,qo,null),e(qo,dYo),e(qo,fd),e(fd,cYo),e(fd,Yz),e(Yz,fYo),e(fd,mYo),e(fd,Kz),e(Kz,gYo),e(fd,hYo),e(qo,pYo),e(qo,Ly),e(Ly,_Yo),e(Ly,C2e),e(C2e,uYo),e(Ly,bYo),e(qo,vYo),e(qo,pt),M(yy,pt,null),e(pt,FYo),e(pt,w2e),e(w2e,TYo),e(pt,MYo),e(pt,md),e(md,EYo),e(md,A2e),e(A2e,CYo),e(md,wYo),e(md,Zz),e(Zz,AYo),e(md,LYo),e(pt,yYo),M(BF,pt,null),e(qo,xYo),e(qo,ao),M(xy,ao,null),e(ao,$Yo),e(ao,L2e),e(L2e,kYo),e(ao,SYo),e(ao,Va),e(Va,RYo),e(Va,y2e),e(y2e,PYo),e(Va,BYo),e(Va,x2e),e(x2e,IYo),e(Va,NYo),e(Va,$2e),e($2e,qYo),e(Va,jYo),e(ao,DYo),e(ao,jo),e(jo,IF),e(IF,k2e),e(k2e,GYo),e(IF,OYo),e(IF,eW),e(eW,VYo),e(IF,XYo),e(jo,zYo),e(jo,NF),e(NF,S2e),e(S2e,WYo),e(NF,QYo),e(NF,oW),e(oW,HYo),e(NF,UYo),e(jo,JYo),e(jo,qF),e(qF,R2e),e(R2e,YYo),e(qF,KYo),e(qF,rW),e(rW,ZYo),e(qF,eKo),e(jo,oKo),e(jo,jF),e(jF,P2e),e(P2e,rKo),e(jF,tKo),e(jF,tW),e(tW,aKo),e(jF,nKo),e(jo,sKo),e(jo,DF),e(DF,B2e),e(B2e,lKo),e(DF,iKo),e(DF,aW),e(aW,dKo),e(DF,cKo),e(jo,fKo),e(jo,GF),e(GF,I2e),e(I2e,mKo),e(GF,gKo),e(GF,nW),e(nW,hKo),e(GF,pKo),e(ao,_Ko),e(ao,OF),e(OF,uKo),e(OF,N2e),e(N2e,bKo),e(OF,vKo),e(OF,q2e),e(q2e,FKo),e(ao,TKo),M(VF,ao,null),b(f,$ze,u),b(f,gd,u),e(gd,XF),e(XF,j2e),M($y,j2e,null),e(gd,MKo),e(gd,D2e),e(D2e,EKo),b(f,kze,u),b(f,Do,u),M(ky,Do,null),e(Do,CKo),e(Do,hd),e(hd,wKo),e(hd,sW),e(sW,AKo),e(hd,LKo),e(hd,lW),e(lW,yKo),e(hd,xKo),e(Do,$Ko),e(Do,Sy),e(Sy,kKo),e(Sy,G2e),e(G2e,SKo),e(Sy,RKo),e(Do,PKo),e(Do,_t),M(Ry,_t,null),e(_t,BKo),e(_t,O2e),e(O2e,IKo),e(_t,NKo),e(_t,pd),e(pd,qKo),e(pd,V2e),e(V2e,jKo),e(pd,DKo),e(pd,iW),e(iW,GKo),e(pd,OKo),e(_t,VKo),M(zF,_t,null),e(Do,XKo),e(Do,no),M(Py,no,null),e(no,zKo),e(no,X2e),e(X2e,WKo),e(no,QKo),e(no,Xa),e(Xa,HKo),e(Xa,z2e),e(z2e,UKo),e(Xa,JKo),e(Xa,W2e),e(W2e,YKo),e(Xa,KKo),e(Xa,Q2e),e(Q2e,ZKo),e(Xa,eZo),e(no,oZo),e(no,U),e(U,WF),e(WF,H2e),e(H2e,rZo),e(WF,tZo),e(WF,dW),e(dW,aZo),e(WF,nZo),e(U,sZo),e(U,QF),e(QF,U2e),e(U2e,lZo),e(QF,iZo),e(QF,cW),e(cW,dZo),e(QF,cZo),e(U,fZo),e(U,HF),e(HF,J2e),e(J2e,mZo),e(HF,gZo),e(HF,fW),e(fW,hZo),e(HF,pZo),e(U,_Zo),e(U,UF),e(UF,Y2e),e(Y2e,uZo),e(UF,bZo),e(UF,mW),e(mW,vZo),e(UF,FZo),e(U,TZo),e(U,JF),e(JF,K2e),e(K2e,MZo),e(JF,EZo),e(JF,gW),e(gW,CZo),e(JF,wZo),e(U,AZo),e(U,YF),e(YF,Z2e),e(Z2e,LZo),e(YF,yZo),e(YF,hW),e(hW,xZo),e(YF,$Zo),e(U,kZo),e(U,KF),e(KF,e1e),e(e1e,SZo),e(KF,RZo),e(KF,pW),e(pW,PZo),e(KF,BZo),e(U,IZo),e(U,ZF),e(ZF,o1e),e(o1e,NZo),e(ZF,qZo),e(ZF,_W),e(_W,jZo),e(ZF,DZo),e(U,GZo),e(U,e6),e(e6,r1e),e(r1e,OZo),e(e6,VZo),e(e6,uW),e(uW,XZo),e(e6,zZo),e(U,WZo),e(U,o6),e(o6,t1e),e(t1e,QZo),e(o6,HZo),e(o6,bW),e(bW,UZo),e(o6,JZo),e(U,YZo),e(U,r6),e(r6,a1e),e(a1e,KZo),e(r6,ZZo),e(r6,vW),e(vW,eer),e(r6,oer),e(U,rer),e(U,t6),e(t6,n1e),e(n1e,ter),e(t6,aer),e(t6,FW),e(FW,ner),e(t6,ser),e(U,ler),e(U,a6),e(a6,s1e),e(s1e,ier),e(a6,der),e(a6,TW),e(TW,cer),e(a6,fer),e(U,mer),e(U,n6),e(n6,l1e),e(l1e,ger),e(n6,her),e(n6,MW),e(MW,per),e(n6,_er),e(U,uer),e(U,s6),e(s6,i1e),e(i1e,ber),e(s6,ver),e(s6,EW),e(EW,Fer),e(s6,Ter),e(U,Mer),e(U,l6),e(l6,d1e),e(d1e,Eer),e(l6,Cer),e(l6,CW),e(CW,wer),e(l6,Aer),e(U,Ler),e(U,i6),e(i6,c1e),e(c1e,yer),e(i6,xer),e(i6,wW),e(wW,$er),e(i6,ker),e(U,Ser),e(U,d6),e(d6,f1e),e(f1e,Rer),e(d6,Per),e(d6,AW),e(AW,Ber),e(d6,Ier),e(U,Ner),e(U,c6),e(c6,m1e),e(m1e,qer),e(c6,jer),e(c6,LW),e(LW,Der),e(c6,Ger),e(U,Oer),e(U,f6),e(f6,g1e),e(g1e,Ver),e(f6,Xer),e(f6,yW),e(yW,zer),e(f6,Wer),e(U,Qer),e(U,m6),e(m6,h1e),e(h1e,Her),e(m6,Uer),e(m6,xW),e(xW,Jer),e(m6,Yer),e(U,Ker),e(U,g6),e(g6,p1e),e(p1e,Zer),e(g6,eor),e(g6,$W),e($W,oor),e(g6,ror),e(U,tor),e(U,h6),e(h6,_1e),e(_1e,aor),e(h6,nor),e(h6,kW),e(kW,sor),e(h6,lor),e(U,ior),e(U,p6),e(p6,u1e),e(u1e,dor),e(p6,cor),e(p6,SW),e(SW,mor),e(p6,gor),e(U,hor),e(U,_6),e(_6,b1e),e(b1e,por),e(_6,_or),e(_6,RW),e(RW,uor),e(_6,bor),e(U,vor),e(U,u6),e(u6,v1e),e(v1e,For),e(u6,Tor),e(u6,PW),e(PW,Mor),e(u6,Eor),e(U,Cor),e(U,b6),e(b6,F1e),e(F1e,wor),e(b6,Aor),e(b6,BW),e(BW,Lor),e(b6,yor),e(U,xor),e(U,v6),e(v6,T1e),e(T1e,$or),e(v6,kor),e(v6,IW),e(IW,Sor),e(v6,Ror),e(U,Por),e(U,F6),e(F6,M1e),e(M1e,Bor),e(F6,Ior),e(F6,NW),e(NW,Nor),e(F6,qor),e(U,jor),e(U,T6),e(T6,E1e),e(E1e,Dor),e(T6,Gor),e(T6,qW),e(qW,Oor),e(T6,Vor),e(U,Xor),e(U,M6),e(M6,C1e),e(C1e,zor),e(M6,Wor),e(M6,jW),e(jW,Qor),e(M6,Hor),e(U,Uor),e(U,E6),e(E6,w1e),e(w1e,Jor),e(E6,Yor),e(E6,DW),e(DW,Kor),e(E6,Zor),e(U,err),e(U,C6),e(C6,A1e),e(A1e,orr),e(C6,rrr),e(C6,GW),e(GW,trr),e(C6,arr),e(U,nrr),e(U,w6),e(w6,L1e),e(L1e,srr),e(w6,lrr),e(w6,OW),e(OW,irr),e(w6,drr),e(U,crr),e(U,A6),e(A6,y1e),e(y1e,frr),e(A6,mrr),e(A6,VW),e(VW,grr),e(A6,hrr),e(U,prr),e(U,L6),e(L6,x1e),e(x1e,_rr),e(L6,urr),e(L6,XW),e(XW,brr),e(L6,vrr),e(no,Frr),e(no,y6),e(y6,Trr),e(y6,$1e),e($1e,Mrr),e(y6,Err),e(y6,k1e),e(k1e,Crr),e(no,wrr),M(x6,no,null),b(f,Sze,u),b(f,_d,u),e(_d,$6),e($6,S1e),M(By,S1e,null),e(_d,Arr),e(_d,R1e),e(R1e,Lrr),b(f,Rze,u),b(f,Go,u),M(Iy,Go,null),e(Go,yrr),e(Go,ud),e(ud,xrr),e(ud,zW),e(zW,$rr),e(ud,krr),e(ud,WW),e(WW,Srr),e(ud,Rrr),e(Go,Prr),e(Go,Ny),e(Ny,Brr),e(Ny,P1e),e(P1e,Irr),e(Ny,Nrr),e(Go,qrr),e(Go,ut),M(qy,ut,null),e(ut,jrr),e(ut,B1e),e(B1e,Drr),e(ut,Grr),e(ut,bd),e(bd,Orr),e(bd,I1e),e(I1e,Vrr),e(bd,Xrr),e(bd,QW),e(QW,zrr),e(bd,Wrr),e(ut,Qrr),M(k6,ut,null),e(Go,Hrr),e(Go,so),M(jy,so,null),e(so,Urr),e(so,N1e),e(N1e,Jrr),e(so,Yrr),e(so,za),e(za,Krr),e(za,q1e),e(q1e,Zrr),e(za,etr),e(za,j1e),e(j1e,otr),e(za,rtr),e(za,D1e),e(D1e,ttr),e(za,atr),e(so,ntr),e(so,V),e(V,S6),e(S6,G1e),e(G1e,str),e(S6,ltr),e(S6,HW),e(HW,itr),e(S6,dtr),e(V,ctr),e(V,R6),e(R6,O1e),e(O1e,ftr),e(R6,mtr),e(R6,UW),e(UW,gtr),e(R6,htr),e(V,ptr),e(V,P6),e(P6,V1e),e(V1e,_tr),e(P6,utr),e(P6,JW),e(JW,btr),e(P6,vtr),e(V,Ftr),e(V,B6),e(B6,X1e),e(X1e,Ttr),e(B6,Mtr),e(B6,YW),e(YW,Etr),e(B6,Ctr),e(V,wtr),e(V,I6),e(I6,z1e),e(z1e,Atr),e(I6,Ltr),e(I6,KW),e(KW,ytr),e(I6,xtr),e(V,$tr),e(V,N6),e(N6,W1e),e(W1e,ktr),e(N6,Str),e(N6,ZW),e(ZW,Rtr),e(N6,Ptr),e(V,Btr),e(V,q6),e(q6,Q1e),e(Q1e,Itr),e(q6,Ntr),e(q6,eQ),e(eQ,qtr),e(q6,jtr),e(V,Dtr),e(V,j6),e(j6,H1e),e(H1e,Gtr),e(j6,Otr),e(j6,oQ),e(oQ,Vtr),e(j6,Xtr),e(V,ztr),e(V,D6),e(D6,U1e),e(U1e,Wtr),e(D6,Qtr),e(D6,rQ),e(rQ,Htr),e(D6,Utr),e(V,Jtr),e(V,G6),e(G6,J1e),e(J1e,Ytr),e(G6,Ktr),e(G6,tQ),e(tQ,Ztr),e(G6,ear),e(V,oar),e(V,O6),e(O6,Y1e),e(Y1e,rar),e(O6,tar),e(O6,aQ),e(aQ,aar),e(O6,nar),e(V,sar),e(V,V6),e(V6,K1e),e(K1e,lar),e(V6,iar),e(V6,nQ),e(nQ,dar),e(V6,car),e(V,far),e(V,X6),e(X6,Z1e),e(Z1e,mar),e(X6,gar),e(X6,sQ),e(sQ,har),e(X6,par),e(V,_ar),e(V,z6),e(z6,ebe),e(ebe,uar),e(z6,bar),e(z6,lQ),e(lQ,Far),e(z6,Tar),e(V,Mar),e(V,W6),e(W6,obe),e(obe,Ear),e(W6,Car),e(W6,iQ),e(iQ,war),e(W6,Aar),e(V,Lar),e(V,Q6),e(Q6,rbe),e(rbe,yar),e(Q6,xar),e(Q6,dQ),e(dQ,$ar),e(Q6,kar),e(V,Sar),e(V,H6),e(H6,tbe),e(tbe,Rar),e(H6,Par),e(H6,cQ),e(cQ,Bar),e(H6,Iar),e(V,Nar),e(V,U6),e(U6,abe),e(abe,qar),e(U6,jar),e(U6,fQ),e(fQ,Dar),e(U6,Gar),e(V,Oar),e(V,J6),e(J6,nbe),e(nbe,Var),e(J6,Xar),e(J6,mQ),e(mQ,zar),e(J6,War),e(V,Qar),e(V,Y6),e(Y6,sbe),e(sbe,Har),e(Y6,Uar),e(Y6,gQ),e(gQ,Jar),e(Y6,Yar),e(V,Kar),e(V,K6),e(K6,lbe),e(lbe,Zar),e(K6,enr),e(K6,hQ),e(hQ,onr),e(K6,rnr),e(V,tnr),e(V,Z6),e(Z6,ibe),e(ibe,anr),e(Z6,nnr),e(Z6,pQ),e(pQ,snr),e(Z6,lnr),e(V,inr),e(V,eT),e(eT,dbe),e(dbe,dnr),e(eT,cnr),e(eT,_Q),e(_Q,fnr),e(eT,mnr),e(V,gnr),e(V,oT),e(oT,cbe),e(cbe,hnr),e(oT,pnr),e(oT,uQ),e(uQ,_nr),e(oT,unr),e(V,bnr),e(V,rT),e(rT,fbe),e(fbe,vnr),e(rT,Fnr),e(rT,bQ),e(bQ,Tnr),e(rT,Mnr),e(V,Enr),e(V,tT),e(tT,mbe),e(mbe,Cnr),e(tT,wnr),e(tT,vQ),e(vQ,Anr),e(tT,Lnr),e(V,ynr),e(V,aT),e(aT,gbe),e(gbe,xnr),e(aT,$nr),e(aT,FQ),e(FQ,knr),e(aT,Snr),e(V,Rnr),e(V,nT),e(nT,hbe),e(hbe,Pnr),e(nT,Bnr),e(nT,TQ),e(TQ,Inr),e(nT,Nnr),e(V,qnr),e(V,sT),e(sT,pbe),e(pbe,jnr),e(sT,Dnr),e(sT,MQ),e(MQ,Gnr),e(sT,Onr),e(V,Vnr),e(V,lT),e(lT,_be),e(_be,Xnr),e(lT,znr),e(lT,EQ),e(EQ,Wnr),e(lT,Qnr),e(V,Hnr),e(V,iT),e(iT,ube),e(ube,Unr),e(iT,Jnr),e(iT,CQ),e(CQ,Ynr),e(iT,Knr),e(V,Znr),e(V,dT),e(dT,bbe),e(bbe,esr),e(dT,osr),e(dT,wQ),e(wQ,rsr),e(dT,tsr),e(V,asr),e(V,cT),e(cT,vbe),e(vbe,nsr),e(cT,ssr),e(cT,AQ),e(AQ,lsr),e(cT,isr),e(V,dsr),e(V,fT),e(fT,Fbe),e(Fbe,csr),e(fT,fsr),e(fT,LQ),e(LQ,msr),e(fT,gsr),e(V,hsr),e(V,mT),e(mT,Tbe),e(Tbe,psr),e(mT,_sr),e(mT,yQ),e(yQ,usr),e(mT,bsr),e(V,vsr),e(V,gT),e(gT,Mbe),e(Mbe,Fsr),e(gT,Tsr),e(gT,xQ),e(xQ,Msr),e(gT,Esr),e(V,Csr),e(V,hT),e(hT,Ebe),e(Ebe,wsr),e(hT,Asr),e(hT,$Q),e($Q,Lsr),e(hT,ysr),e(V,xsr),e(V,pT),e(pT,Cbe),e(Cbe,$sr),e(pT,ksr),e(pT,kQ),e(kQ,Ssr),e(pT,Rsr),e(V,Psr),e(V,_T),e(_T,wbe),e(wbe,Bsr),e(_T,Isr),e(_T,SQ),e(SQ,Nsr),e(_T,qsr),e(V,jsr),e(V,uT),e(uT,Abe),e(Abe,Dsr),e(uT,Gsr),e(uT,RQ),e(RQ,Osr),e(uT,Vsr),e(V,Xsr),e(V,bT),e(bT,Lbe),e(Lbe,zsr),e(bT,Wsr),e(bT,PQ),e(PQ,Qsr),e(bT,Hsr),e(V,Usr),e(V,vT),e(vT,ybe),e(ybe,Jsr),e(vT,Ysr),e(vT,BQ),e(BQ,Ksr),e(vT,Zsr),e(so,elr),e(so,FT),e(FT,olr),e(FT,xbe),e(xbe,rlr),e(FT,tlr),e(FT,$be),e($be,alr),e(so,nlr),M(TT,so,null),b(f,Pze,u),b(f,vd,u),e(vd,MT),e(MT,kbe),M(Dy,kbe,null),e(vd,slr),e(vd,Sbe),e(Sbe,llr),b(f,Bze,u),b(f,Oo,u),M(Gy,Oo,null),e(Oo,ilr),e(Oo,Fd),e(Fd,dlr),e(Fd,IQ),e(IQ,clr),e(Fd,flr),e(Fd,NQ),e(NQ,mlr),e(Fd,glr),e(Oo,hlr),e(Oo,Oy),e(Oy,plr),e(Oy,Rbe),e(Rbe,_lr),e(Oy,ulr),e(Oo,blr),e(Oo,bt),M(Vy,bt,null),e(bt,vlr),e(bt,Pbe),e(Pbe,Flr),e(bt,Tlr),e(bt,Td),e(Td,Mlr),e(Td,Bbe),e(Bbe,Elr),e(Td,Clr),e(Td,qQ),e(qQ,wlr),e(Td,Alr),e(bt,Llr),M(ET,bt,null),e(Oo,ylr),e(Oo,lo),M(Xy,lo,null),e(lo,xlr),e(lo,Ibe),e(Ibe,$lr),e(lo,klr),e(lo,Wa),e(Wa,Slr),e(Wa,Nbe),e(Nbe,Rlr),e(Wa,Plr),e(Wa,qbe),e(qbe,Blr),e(Wa,Ilr),e(Wa,jbe),e(jbe,Nlr),e(Wa,qlr),e(lo,jlr),e(lo,Dbe),e(Dbe,CT),e(CT,Gbe),e(Gbe,Dlr),e(CT,Glr),e(CT,jQ),e(jQ,Olr),e(CT,Vlr),e(lo,Xlr),e(lo,wT),e(wT,zlr),e(wT,Obe),e(Obe,Wlr),e(wT,Qlr),e(wT,Vbe),e(Vbe,Hlr),e(lo,Ulr),M(AT,lo,null),b(f,Ize,u),b(f,Md,u),e(Md,LT),e(LT,Xbe),M(zy,Xbe,null),e(Md,Jlr),e(Md,zbe),e(zbe,Ylr),b(f,Nze,u),b(f,Vo,u),M(Wy,Vo,null),e(Vo,Klr),e(Vo,Ed),e(Ed,Zlr),e(Ed,DQ),e(DQ,eir),e(Ed,oir),e(Ed,GQ),e(GQ,rir),e(Ed,tir),e(Vo,air),e(Vo,Qy),e(Qy,nir),e(Qy,Wbe),e(Wbe,sir),e(Qy,lir),e(Vo,iir),e(Vo,vt),M(Hy,vt,null),e(vt,dir),e(vt,Qbe),e(Qbe,cir),e(vt,fir),e(vt,Cd),e(Cd,mir),e(Cd,Hbe),e(Hbe,gir),e(Cd,hir),e(Cd,OQ),e(OQ,pir),e(Cd,_ir),e(vt,uir),M(yT,vt,null),e(Vo,bir),e(Vo,io),M(Uy,io,null),e(io,vir),e(io,Ube),e(Ube,Fir),e(io,Tir),e(io,Qa),e(Qa,Mir),e(Qa,Jbe),e(Jbe,Eir),e(Qa,Cir),e(Qa,Ybe),e(Ybe,wir),e(Qa,Air),e(Qa,Kbe),e(Kbe,Lir),e(Qa,yir),e(io,xir),e(io,ve),e(ve,xT),e(xT,Zbe),e(Zbe,$ir),e(xT,kir),e(xT,VQ),e(VQ,Sir),e(xT,Rir),e(ve,Pir),e(ve,$T),e($T,eve),e(eve,Bir),e($T,Iir),e($T,XQ),e(XQ,Nir),e($T,qir),e(ve,jir),e(ve,kT),e(kT,ove),e(ove,Dir),e(kT,Gir),e(kT,zQ),e(zQ,Oir),e(kT,Vir),e(ve,Xir),e(ve,ST),e(ST,rve),e(rve,zir),e(ST,Wir),e(ST,WQ),e(WQ,Qir),e(ST,Hir),e(ve,Uir),e(ve,Js),e(Js,tve),e(tve,Jir),e(Js,Yir),e(Js,QQ),e(QQ,Kir),e(Js,Zir),e(Js,HQ),e(HQ,edr),e(Js,odr),e(ve,rdr),e(ve,RT),e(RT,ave),e(ave,tdr),e(RT,adr),e(RT,UQ),e(UQ,ndr),e(RT,sdr),e(ve,ldr),e(ve,Ys),e(Ys,nve),e(nve,idr),e(Ys,ddr),e(Ys,JQ),e(JQ,cdr),e(Ys,fdr),e(Ys,YQ),e(YQ,mdr),e(Ys,gdr),e(ve,hdr),e(ve,PT),e(PT,sve),e(sve,pdr),e(PT,_dr),e(PT,KQ),e(KQ,udr),e(PT,bdr),e(ve,vdr),e(ve,Ft),e(Ft,lve),e(lve,Fdr),e(Ft,Tdr),e(Ft,ZQ),e(ZQ,Mdr),e(Ft,Edr),e(Ft,eH),e(eH,Cdr),e(Ft,wdr),e(Ft,oH),e(oH,Adr),e(Ft,Ldr),e(ve,ydr),e(ve,BT),e(BT,ive),e(ive,xdr),e(BT,$dr),e(BT,rH),e(rH,kdr),e(BT,Sdr),e(ve,Rdr),e(ve,IT),e(IT,dve),e(dve,Pdr),e(IT,Bdr),e(IT,tH),e(tH,Idr),e(IT,Ndr),e(ve,qdr),e(ve,NT),e(NT,cve),e(cve,jdr),e(NT,Ddr),e(NT,aH),e(aH,Gdr),e(NT,Odr),e(ve,Vdr),e(ve,qT),e(qT,fve),e(fve,Xdr),e(qT,zdr),e(qT,nH),e(nH,Wdr),e(qT,Qdr),e(ve,Hdr),e(ve,jT),e(jT,mve),e(mve,Udr),e(jT,Jdr),e(jT,sH),e(sH,Ydr),e(jT,Kdr),e(ve,Zdr),e(ve,DT),e(DT,gve),e(gve,ecr),e(DT,ocr),e(DT,lH),e(lH,rcr),e(DT,tcr),e(ve,acr),e(ve,GT),e(GT,hve),e(hve,ncr),e(GT,scr),e(GT,iH),e(iH,lcr),e(GT,icr),e(io,dcr),e(io,OT),e(OT,ccr),e(OT,pve),e(pve,fcr),e(OT,mcr),e(OT,_ve),e(_ve,gcr),e(io,hcr),M(VT,io,null),b(f,qze,u),b(f,wd,u),e(wd,XT),e(XT,uve),M(Jy,uve,null),e(wd,pcr),e(wd,bve),e(bve,_cr),b(f,jze,u),b(f,Xo,u),M(Yy,Xo,null),e(Xo,ucr),e(Xo,Ad),e(Ad,bcr),e(Ad,dH),e(dH,vcr),e(Ad,Fcr),e(Ad,cH),e(cH,Tcr),e(Ad,Mcr),e(Xo,Ecr),e(Xo,Ky),e(Ky,Ccr),e(Ky,vve),e(vve,wcr),e(Ky,Acr),e(Xo,Lcr),e(Xo,Tt),M(Zy,Tt,null),e(Tt,ycr),e(Tt,Fve),e(Fve,xcr),e(Tt,$cr),e(Tt,Ld),e(Ld,kcr),e(Ld,Tve),e(Tve,Scr),e(Ld,Rcr),e(Ld,fH),e(fH,Pcr),e(Ld,Bcr),e(Tt,Icr),M(zT,Tt,null),e(Xo,Ncr),e(Xo,co),M(e9,co,null),e(co,qcr),e(co,Mve),e(Mve,jcr),e(co,Dcr),e(co,Ha),e(Ha,Gcr),e(Ha,Eve),e(Eve,Ocr),e(Ha,Vcr),e(Ha,Cve),e(Cve,Xcr),e(Ha,zcr),e(Ha,wve),e(wve,Wcr),e(Ha,Qcr),e(co,Hcr),e(co,Ave),e(Ave,WT),e(WT,Lve),e(Lve,Ucr),e(WT,Jcr),e(WT,mH),e(mH,Ycr),e(WT,Kcr),e(co,Zcr),e(co,QT),e(QT,efr),e(QT,yve),e(yve,ofr),e(QT,rfr),e(QT,xve),e(xve,tfr),e(co,afr),M(HT,co,null),b(f,Dze,u),b(f,yd,u),e(yd,UT),e(UT,$ve),M(o9,$ve,null),e(yd,nfr),e(yd,kve),e(kve,sfr),b(f,Gze,u),b(f,zo,u),M(r9,zo,null),e(zo,lfr),e(zo,xd),e(xd,ifr),e(xd,gH),e(gH,dfr),e(xd,cfr),e(xd,hH),e(hH,ffr),e(xd,mfr),e(zo,gfr),e(zo,t9),e(t9,hfr),e(t9,Sve),e(Sve,pfr),e(t9,_fr),e(zo,ufr),e(zo,Mt),M(a9,Mt,null),e(Mt,bfr),e(Mt,Rve),e(Rve,vfr),e(Mt,Ffr),e(Mt,$d),e($d,Tfr),e($d,Pve),e(Pve,Mfr),e($d,Efr),e($d,pH),e(pH,Cfr),e($d,wfr),e(Mt,Afr),M(JT,Mt,null),e(zo,Lfr),e(zo,fo),M(n9,fo,null),e(fo,yfr),e(fo,Bve),e(Bve,xfr),e(fo,$fr),e(fo,Ua),e(Ua,kfr),e(Ua,Ive),e(Ive,Sfr),e(Ua,Rfr),e(Ua,Nve),e(Nve,Pfr),e(Ua,Bfr),e(Ua,qve),e(qve,Ifr),e(Ua,Nfr),e(fo,qfr),e(fo,jve),e(jve,YT),e(YT,Dve),e(Dve,jfr),e(YT,Dfr),e(YT,_H),e(_H,Gfr),e(YT,Ofr),e(fo,Vfr),e(fo,KT),e(KT,Xfr),e(KT,Gve),e(Gve,zfr),e(KT,Wfr),e(KT,Ove),e(Ove,Qfr),e(fo,Hfr),M(ZT,fo,null),b(f,Oze,u),b(f,kd,u),e(kd,e7),e(e7,Vve),M(s9,Vve,null),e(kd,Ufr),e(kd,Xve),e(Xve,Jfr),b(f,Vze,u),b(f,Wo,u),M(l9,Wo,null),e(Wo,Yfr),e(Wo,Sd),e(Sd,Kfr),e(Sd,uH),e(uH,Zfr),e(Sd,emr),e(Sd,bH),e(bH,omr),e(Sd,rmr),e(Wo,tmr),e(Wo,i9),e(i9,amr),e(i9,zve),e(zve,nmr),e(i9,smr),e(Wo,lmr),e(Wo,Et),M(d9,Et,null),e(Et,imr),e(Et,Wve),e(Wve,dmr),e(Et,cmr),e(Et,Rd),e(Rd,fmr),e(Rd,Qve),e(Qve,mmr),e(Rd,gmr),e(Rd,vH),e(vH,hmr),e(Rd,pmr),e(Et,_mr),M(o7,Et,null),e(Wo,umr),e(Wo,mo),M(c9,mo,null),e(mo,bmr),e(mo,Hve),e(Hve,vmr),e(mo,Fmr),e(mo,Ja),e(Ja,Tmr),e(Ja,Uve),e(Uve,Mmr),e(Ja,Emr),e(Ja,Jve),e(Jve,Cmr),e(Ja,wmr),e(Ja,Yve),e(Yve,Amr),e(Ja,Lmr),e(mo,ymr),e(mo,Pe),e(Pe,r7),e(r7,Kve),e(Kve,xmr),e(r7,$mr),e(r7,FH),e(FH,kmr),e(r7,Smr),e(Pe,Rmr),e(Pe,t7),e(t7,Zve),e(Zve,Pmr),e(t7,Bmr),e(t7,TH),e(TH,Imr),e(t7,Nmr),e(Pe,qmr),e(Pe,a7),e(a7,eFe),e(eFe,jmr),e(a7,Dmr),e(a7,MH),e(MH,Gmr),e(a7,Omr),e(Pe,Vmr),e(Pe,n7),e(n7,oFe),e(oFe,Xmr),e(n7,zmr),e(n7,EH),e(EH,Wmr),e(n7,Qmr),e(Pe,Hmr),e(Pe,s7),e(s7,rFe),e(rFe,Umr),e(s7,Jmr),e(s7,CH),e(CH,Ymr),e(s7,Kmr),e(Pe,Zmr),e(Pe,l7),e(l7,tFe),e(tFe,egr),e(l7,ogr),e(l7,wH),e(wH,rgr),e(l7,tgr),e(Pe,agr),e(Pe,i7),e(i7,aFe),e(aFe,ngr),e(i7,sgr),e(i7,AH),e(AH,lgr),e(i7,igr),e(Pe,dgr),e(Pe,d7),e(d7,nFe),e(nFe,cgr),e(d7,fgr),e(d7,LH),e(LH,mgr),e(d7,ggr),e(Pe,hgr),e(Pe,c7),e(c7,sFe),e(sFe,pgr),e(c7,_gr),e(c7,yH),e(yH,ugr),e(c7,bgr),e(mo,vgr),e(mo,f7),e(f7,Fgr),e(f7,lFe),e(lFe,Tgr),e(f7,Mgr),e(f7,iFe),e(iFe,Egr),e(mo,Cgr),M(m7,mo,null),b(f,Xze,u),b(f,Pd,u),e(Pd,g7),e(g7,dFe),M(f9,dFe,null),e(Pd,wgr),e(Pd,cFe),e(cFe,Agr),b(f,zze,u),b(f,Qo,u),M(m9,Qo,null),e(Qo,Lgr),e(Qo,Bd),e(Bd,ygr),e(Bd,xH),e(xH,xgr),e(Bd,$gr),e(Bd,$H),e($H,kgr),e(Bd,Sgr),e(Qo,Rgr),e(Qo,g9),e(g9,Pgr),e(g9,fFe),e(fFe,Bgr),e(g9,Igr),e(Qo,Ngr),e(Qo,Ct),M(h9,Ct,null),e(Ct,qgr),e(Ct,mFe),e(mFe,jgr),e(Ct,Dgr),e(Ct,Id),e(Id,Ggr),e(Id,gFe),e(gFe,Ogr),e(Id,Vgr),e(Id,kH),e(kH,Xgr),e(Id,zgr),e(Ct,Wgr),M(h7,Ct,null),e(Qo,Qgr),e(Qo,go),M(p9,go,null),e(go,Hgr),e(go,hFe),e(hFe,Ugr),e(go,Jgr),e(go,Ya),e(Ya,Ygr),e(Ya,pFe),e(pFe,Kgr),e(Ya,Zgr),e(Ya,_Fe),e(_Fe,ehr),e(Ya,ohr),e(Ya,uFe),e(uFe,rhr),e(Ya,thr),e(go,ahr),e(go,rt),e(rt,p7),e(p7,bFe),e(bFe,nhr),e(p7,shr),e(p7,SH),e(SH,lhr),e(p7,ihr),e(rt,dhr),e(rt,_7),e(_7,vFe),e(vFe,chr),e(_7,fhr),e(_7,RH),e(RH,mhr),e(_7,ghr),e(rt,hhr),e(rt,u7),e(u7,FFe),e(FFe,phr),e(u7,_hr),e(u7,PH),e(PH,uhr),e(u7,bhr),e(rt,vhr),e(rt,b7),e(b7,TFe),e(TFe,Fhr),e(b7,Thr),e(b7,BH),e(BH,Mhr),e(b7,Ehr),e(rt,Chr),e(rt,v7),e(v7,MFe),e(MFe,whr),e(v7,Ahr),e(v7,IH),e(IH,Lhr),e(v7,yhr),e(go,xhr),e(go,F7),e(F7,$hr),e(F7,EFe),e(EFe,khr),e(F7,Shr),e(F7,CFe),e(CFe,Rhr),e(go,Phr),M(T7,go,null),b(f,Wze,u),b(f,Nd,u),e(Nd,M7),e(M7,wFe),M(_9,wFe,null),e(Nd,Bhr),e(Nd,AFe),e(AFe,Ihr),b(f,Qze,u),b(f,Ho,u),M(u9,Ho,null),e(Ho,Nhr),e(Ho,qd),e(qd,qhr),e(qd,NH),e(NH,jhr),e(qd,Dhr),e(qd,qH),e(qH,Ghr),e(qd,Ohr),e(Ho,Vhr),e(Ho,b9),e(b9,Xhr),e(b9,LFe),e(LFe,zhr),e(b9,Whr),e(Ho,Qhr),e(Ho,wt),M(v9,wt,null),e(wt,Hhr),e(wt,yFe),e(yFe,Uhr),e(wt,Jhr),e(wt,jd),e(jd,Yhr),e(jd,xFe),e(xFe,Khr),e(jd,Zhr),e(jd,jH),e(jH,epr),e(jd,opr),e(wt,rpr),M(E7,wt,null),e(Ho,tpr),e(Ho,ho),M(F9,ho,null),e(ho,apr),e(ho,$Fe),e($Fe,npr),e(ho,spr),e(ho,Ka),e(Ka,lpr),e(Ka,kFe),e(kFe,ipr),e(Ka,dpr),e(Ka,SFe),e(SFe,cpr),e(Ka,fpr),e(Ka,RFe),e(RFe,mpr),e(Ka,gpr),e(ho,hpr),e(ho,Le),e(Le,C7),e(C7,PFe),e(PFe,ppr),e(C7,_pr),e(C7,DH),e(DH,upr),e(C7,bpr),e(Le,vpr),e(Le,w7),e(w7,BFe),e(BFe,Fpr),e(w7,Tpr),e(w7,GH),e(GH,Mpr),e(w7,Epr),e(Le,Cpr),e(Le,A7),e(A7,IFe),e(IFe,wpr),e(A7,Apr),e(A7,OH),e(OH,Lpr),e(A7,ypr),e(Le,xpr),e(Le,L7),e(L7,NFe),e(NFe,$pr),e(L7,kpr),e(L7,VH),e(VH,Spr),e(L7,Rpr),e(Le,Ppr),e(Le,y7),e(y7,qFe),e(qFe,Bpr),e(y7,Ipr),e(y7,XH),e(XH,Npr),e(y7,qpr),e(Le,jpr),e(Le,x7),e(x7,jFe),e(jFe,Dpr),e(x7,Gpr),e(x7,zH),e(zH,Opr),e(x7,Vpr),e(Le,Xpr),e(Le,$7),e($7,DFe),e(DFe,zpr),e($7,Wpr),e($7,WH),e(WH,Qpr),e($7,Hpr),e(Le,Upr),e(Le,k7),e(k7,GFe),e(GFe,Jpr),e(k7,Ypr),e(k7,QH),e(QH,Kpr),e(k7,Zpr),e(Le,e_r),e(Le,S7),e(S7,OFe),e(OFe,o_r),e(S7,r_r),e(S7,HH),e(HH,t_r),e(S7,a_r),e(Le,n_r),e(Le,R7),e(R7,VFe),e(VFe,s_r),e(R7,l_r),e(R7,UH),e(UH,i_r),e(R7,d_r),e(ho,c_r),e(ho,P7),e(P7,f_r),e(P7,XFe),e(XFe,m_r),e(P7,g_r),e(P7,zFe),e(zFe,h_r),e(ho,p_r),M(B7,ho,null),b(f,Hze,u),b(f,Dd,u),e(Dd,I7),e(I7,WFe),M(T9,WFe,null),e(Dd,__r),e(Dd,QFe),e(QFe,u_r),b(f,Uze,u),b(f,Uo,u),M(M9,Uo,null),e(Uo,b_r),e(Uo,Gd),e(Gd,v_r),e(Gd,JH),e(JH,F_r),e(Gd,T_r),e(Gd,YH),e(YH,M_r),e(Gd,E_r),e(Uo,C_r),e(Uo,E9),e(E9,w_r),e(E9,HFe),e(HFe,A_r),e(E9,L_r),e(Uo,y_r),e(Uo,At),M(C9,At,null),e(At,x_r),e(At,UFe),e(UFe,$_r),e(At,k_r),e(At,Od),e(Od,S_r),e(Od,JFe),e(JFe,R_r),e(Od,P_r),e(Od,KH),e(KH,B_r),e(Od,I_r),e(At,N_r),M(N7,At,null),e(Uo,q_r),e(Uo,po),M(w9,po,null),e(po,j_r),e(po,YFe),e(YFe,D_r),e(po,G_r),e(po,Za),e(Za,O_r),e(Za,KFe),e(KFe,V_r),e(Za,X_r),e(Za,ZFe),e(ZFe,z_r),e(Za,W_r),e(Za,e6e),e(e6e,Q_r),e(Za,H_r),e(po,U_r),e(po,A9),e(A9,q7),e(q7,o6e),e(o6e,J_r),e(q7,Y_r),e(q7,ZH),e(ZH,K_r),e(q7,Z_r),e(A9,eur),e(A9,j7),e(j7,r6e),e(r6e,our),e(j7,rur),e(j7,eU),e(eU,tur),e(j7,aur),e(po,nur),e(po,D7),e(D7,sur),e(D7,t6e),e(t6e,lur),e(D7,iur),e(D7,a6e),e(a6e,dur),e(po,cur),M(G7,po,null),b(f,Jze,u),b(f,Vd,u),e(Vd,O7),e(O7,n6e),M(L9,n6e,null),e(Vd,fur),e(Vd,s6e),e(s6e,mur),b(f,Yze,u),b(f,Jo,u),M(y9,Jo,null),e(Jo,gur),e(Jo,Xd),e(Xd,hur),e(Xd,oU),e(oU,pur),e(Xd,_ur),e(Xd,rU),e(rU,uur),e(Xd,bur),e(Jo,vur),e(Jo,x9),e(x9,Fur),e(x9,l6e),e(l6e,Tur),e(x9,Mur),e(Jo,Eur),e(Jo,Lt),M($9,Lt,null),e(Lt,Cur),e(Lt,i6e),e(i6e,wur),e(Lt,Aur),e(Lt,zd),e(zd,Lur),e(zd,d6e),e(d6e,yur),e(zd,xur),e(zd,tU),e(tU,$ur),e(zd,kur),e(Lt,Sur),M(V7,Lt,null),e(Jo,Rur),e(Jo,_o),M(k9,_o,null),e(_o,Pur),e(_o,c6e),e(c6e,Bur),e(_o,Iur),e(_o,en),e(en,Nur),e(en,f6e),e(f6e,qur),e(en,jur),e(en,m6e),e(m6e,Dur),e(en,Gur),e(en,g6e),e(g6e,Our),e(en,Vur),e(_o,Xur),e(_o,tt),e(tt,X7),e(X7,h6e),e(h6e,zur),e(X7,Wur),e(X7,aU),e(aU,Qur),e(X7,Hur),e(tt,Uur),e(tt,z7),e(z7,p6e),e(p6e,Jur),e(z7,Yur),e(z7,nU),e(nU,Kur),e(z7,Zur),e(tt,e2r),e(tt,W7),e(W7,_6e),e(_6e,o2r),e(W7,r2r),e(W7,sU),e(sU,t2r),e(W7,a2r),e(tt,n2r),e(tt,Q7),e(Q7,u6e),e(u6e,s2r),e(Q7,l2r),e(Q7,lU),e(lU,i2r),e(Q7,d2r),e(tt,c2r),e(tt,H7),e(H7,b6e),e(b6e,f2r),e(H7,m2r),e(H7,iU),e(iU,g2r),e(H7,h2r),e(_o,p2r),e(_o,U7),e(U7,_2r),e(U7,v6e),e(v6e,u2r),e(U7,b2r),e(U7,F6e),e(F6e,v2r),e(_o,F2r),M(J7,_o,null),b(f,Kze,u),b(f,Wd,u),e(Wd,Y7),e(Y7,T6e),M(S9,T6e,null),e(Wd,T2r),e(Wd,M6e),e(M6e,M2r),b(f,Zze,u),b(f,Yo,u),M(R9,Yo,null),e(Yo,E2r),e(Yo,Qd),e(Qd,C2r),e(Qd,dU),e(dU,w2r),e(Qd,A2r),e(Qd,cU),e(cU,L2r),e(Qd,y2r),e(Yo,x2r),e(Yo,P9),e(P9,$2r),e(P9,E6e),e(E6e,k2r),e(P9,S2r),e(Yo,R2r),e(Yo,yt),M(B9,yt,null),e(yt,P2r),e(yt,C6e),e(C6e,B2r),e(yt,I2r),e(yt,Hd),e(Hd,N2r),e(Hd,w6e),e(w6e,q2r),e(Hd,j2r),e(Hd,fU),e(fU,D2r),e(Hd,G2r),e(yt,O2r),M(K7,yt,null),e(Yo,V2r),e(Yo,uo),M(I9,uo,null),e(uo,X2r),e(uo,A6e),e(A6e,z2r),e(uo,W2r),e(uo,on),e(on,Q2r),e(on,L6e),e(L6e,H2r),e(on,U2r),e(on,y6e),e(y6e,J2r),e(on,Y2r),e(on,x6e),e(x6e,K2r),e(on,Z2r),e(uo,e1r),e(uo,Ud),e(Ud,Z7),e(Z7,$6e),e($6e,o1r),e(Z7,r1r),e(Z7,mU),e(mU,t1r),e(Z7,a1r),e(Ud,n1r),e(Ud,e8),e(e8,k6e),e(k6e,s1r),e(e8,l1r),e(e8,gU),e(gU,i1r),e(e8,d1r),e(Ud,c1r),e(Ud,o8),e(o8,S6e),e(S6e,f1r),e(o8,m1r),e(o8,hU),e(hU,g1r),e(o8,h1r),e(uo,p1r),e(uo,r8),e(r8,_1r),e(r8,R6e),e(R6e,u1r),e(r8,b1r),e(r8,P6e),e(P6e,v1r),e(uo,F1r),M(t8,uo,null),b(f,eWe,u),b(f,Jd,u),e(Jd,a8),e(a8,B6e),M(N9,B6e,null),e(Jd,T1r),e(Jd,I6e),e(I6e,M1r),b(f,oWe,u),b(f,Ko,u),M(q9,Ko,null),e(Ko,E1r),e(Ko,Yd),e(Yd,C1r),e(Yd,pU),e(pU,w1r),e(Yd,A1r),e(Yd,_U),e(_U,L1r),e(Yd,y1r),e(Ko,x1r),e(Ko,j9),e(j9,$1r),e(j9,N6e),e(N6e,k1r),e(j9,S1r),e(Ko,R1r),e(Ko,xt),M(D9,xt,null),e(xt,P1r),e(xt,q6e),e(q6e,B1r),e(xt,I1r),e(xt,Kd),e(Kd,N1r),e(Kd,j6e),e(j6e,q1r),e(Kd,j1r),e(Kd,uU),e(uU,D1r),e(Kd,G1r),e(xt,O1r),M(n8,xt,null),e(Ko,V1r),e(Ko,bo),M(G9,bo,null),e(bo,X1r),e(bo,D6e),e(D6e,z1r),e(bo,W1r),e(bo,rn),e(rn,Q1r),e(rn,G6e),e(G6e,H1r),e(rn,U1r),e(rn,O6e),e(O6e,J1r),e(rn,Y1r),e(rn,V6e),e(V6e,K1r),e(rn,Z1r),e(bo,ebr),e(bo,O9),e(O9,s8),e(s8,X6e),e(X6e,obr),e(s8,rbr),e(s8,bU),e(bU,tbr),e(s8,abr),e(O9,nbr),e(O9,l8),e(l8,z6e),e(z6e,sbr),e(l8,lbr),e(l8,vU),e(vU,ibr),e(l8,dbr),e(bo,cbr),e(bo,i8),e(i8,fbr),e(i8,W6e),e(W6e,mbr),e(i8,gbr),e(i8,Q6e),e(Q6e,hbr),e(bo,pbr),M(d8,bo,null),b(f,rWe,u),b(f,Zd,u),e(Zd,c8),e(c8,H6e),M(V9,H6e,null),e(Zd,_br),e(Zd,U6e),e(U6e,ubr),b(f,tWe,u),b(f,Zo,u),M(X9,Zo,null),e(Zo,bbr),e(Zo,ec),e(ec,vbr),e(ec,FU),e(FU,Fbr),e(ec,Tbr),e(ec,TU),e(TU,Mbr),e(ec,Ebr),e(Zo,Cbr),e(Zo,z9),e(z9,wbr),e(z9,J6e),e(J6e,Abr),e(z9,Lbr),e(Zo,ybr),e(Zo,$t),M(W9,$t,null),e($t,xbr),e($t,Y6e),e(Y6e,$br),e($t,kbr),e($t,oc),e(oc,Sbr),e(oc,K6e),e(K6e,Rbr),e(oc,Pbr),e(oc,MU),e(MU,Bbr),e(oc,Ibr),e($t,Nbr),M(f8,$t,null),e(Zo,qbr),e(Zo,vo),M(Q9,vo,null),e(vo,jbr),e(vo,Z6e),e(Z6e,Dbr),e(vo,Gbr),e(vo,tn),e(tn,Obr),e(tn,eTe),e(eTe,Vbr),e(tn,Xbr),e(tn,oTe),e(oTe,zbr),e(tn,Wbr),e(tn,rTe),e(rTe,Qbr),e(tn,Hbr),e(vo,Ubr),e(vo,tTe),e(tTe,m8),e(m8,aTe),e(aTe,Jbr),e(m8,Ybr),e(m8,EU),e(EU,Kbr),e(m8,Zbr),e(vo,evr),e(vo,g8),e(g8,ovr),e(g8,nTe),e(nTe,rvr),e(g8,tvr),e(g8,sTe),e(sTe,avr),e(vo,nvr),M(h8,vo,null),b(f,aWe,u),b(f,rc,u),e(rc,p8),e(p8,lTe),M(H9,lTe,null),e(rc,svr),e(rc,iTe),e(iTe,lvr),b(f,nWe,u),b(f,er,u),M(U9,er,null),e(er,ivr),e(er,tc),e(tc,dvr),e(tc,CU),e(CU,cvr),e(tc,fvr),e(tc,wU),e(wU,mvr),e(tc,gvr),e(er,hvr),e(er,J9),e(J9,pvr),e(J9,dTe),e(dTe,_vr),e(J9,uvr),e(er,bvr),e(er,kt),M(Y9,kt,null),e(kt,vvr),e(kt,cTe),e(cTe,Fvr),e(kt,Tvr),e(kt,ac),e(ac,Mvr),e(ac,fTe),e(fTe,Evr),e(ac,Cvr),e(ac,AU),e(AU,wvr),e(ac,Avr),e(kt,Lvr),M(_8,kt,null),e(er,yvr),e(er,Fo),M(K9,Fo,null),e(Fo,xvr),e(Fo,mTe),e(mTe,$vr),e(Fo,kvr),e(Fo,an),e(an,Svr),e(an,gTe),e(gTe,Rvr),e(an,Pvr),e(an,hTe),e(hTe,Bvr),e(an,Ivr),e(an,pTe),e(pTe,Nvr),e(an,qvr),e(Fo,jvr),e(Fo,at),e(at,u8),e(u8,_Te),e(_Te,Dvr),e(u8,Gvr),e(u8,LU),e(LU,Ovr),e(u8,Vvr),e(at,Xvr),e(at,b8),e(b8,uTe),e(uTe,zvr),e(b8,Wvr),e(b8,yU),e(yU,Qvr),e(b8,Hvr),e(at,Uvr),e(at,v8),e(v8,bTe),e(bTe,Jvr),e(v8,Yvr),e(v8,xU),e(xU,Kvr),e(v8,Zvr),e(at,eFr),e(at,F8),e(F8,vTe),e(vTe,oFr),e(F8,rFr),e(F8,$U),e($U,tFr),e(F8,aFr),e(at,nFr),e(at,T8),e(T8,FTe),e(FTe,sFr),e(T8,lFr),e(T8,kU),e(kU,iFr),e(T8,dFr),e(Fo,cFr),e(Fo,M8),e(M8,fFr),e(M8,TTe),e(TTe,mFr),e(M8,gFr),e(M8,MTe),e(MTe,hFr),e(Fo,pFr),M(E8,Fo,null),b(f,sWe,u),b(f,nc,u),e(nc,C8),e(C8,ETe),M(Z9,ETe,null),e(nc,_Fr),e(nc,CTe),e(CTe,uFr),b(f,lWe,u),b(f,or,u),M(ex,or,null),e(or,bFr),e(or,sc),e(sc,vFr),e(sc,SU),e(SU,FFr),e(sc,TFr),e(sc,RU),e(RU,MFr),e(sc,EFr),e(or,CFr),e(or,ox),e(ox,wFr),e(ox,wTe),e(wTe,AFr),e(ox,LFr),e(or,yFr),e(or,St),M(rx,St,null),e(St,xFr),e(St,ATe),e(ATe,$Fr),e(St,kFr),e(St,lc),e(lc,SFr),e(lc,LTe),e(LTe,RFr),e(lc,PFr),e(lc,PU),e(PU,BFr),e(lc,IFr),e(St,NFr),M(w8,St,null),e(or,qFr),e(or,To),M(tx,To,null),e(To,jFr),e(To,yTe),e(yTe,DFr),e(To,GFr),e(To,nn),e(nn,OFr),e(nn,xTe),e(xTe,VFr),e(nn,XFr),e(nn,$Te),e($Te,zFr),e(nn,WFr),e(nn,kTe),e(kTe,QFr),e(nn,HFr),e(To,UFr),e(To,STe),e(STe,A8),e(A8,RTe),e(RTe,JFr),e(A8,YFr),e(A8,BU),e(BU,KFr),e(A8,ZFr),e(To,e6r),e(To,L8),e(L8,o6r),e(L8,PTe),e(PTe,r6r),e(L8,t6r),e(L8,BTe),e(BTe,a6r),e(To,n6r),M(y8,To,null),b(f,iWe,u),b(f,ic,u),e(ic,x8),e(x8,ITe),M(ax,ITe,null),e(ic,s6r),e(ic,NTe),e(NTe,l6r),b(f,dWe,u),b(f,rr,u),M(nx,rr,null),e(rr,i6r),e(rr,dc),e(dc,d6r),e(dc,IU),e(IU,c6r),e(dc,f6r),e(dc,NU),e(NU,m6r),e(dc,g6r),e(rr,h6r),e(rr,sx),e(sx,p6r),e(sx,qTe),e(qTe,_6r),e(sx,u6r),e(rr,b6r),e(rr,Rt),M(lx,Rt,null),e(Rt,v6r),e(Rt,jTe),e(jTe,F6r),e(Rt,T6r),e(Rt,cc),e(cc,M6r),e(cc,DTe),e(DTe,E6r),e(cc,C6r),e(cc,qU),e(qU,w6r),e(cc,A6r),e(Rt,L6r),M($8,Rt,null),e(rr,y6r),e(rr,$r),M(ix,$r,null),e($r,x6r),e($r,GTe),e(GTe,$6r),e($r,k6r),e($r,sn),e(sn,S6r),e(sn,OTe),e(OTe,R6r),e(sn,P6r),e(sn,VTe),e(VTe,B6r),e(sn,I6r),e(sn,XTe),e(XTe,N6r),e(sn,q6r),e($r,j6r),e($r,I),e(I,k8),e(k8,zTe),e(zTe,D6r),e(k8,G6r),e(k8,jU),e(jU,O6r),e(k8,V6r),e(I,X6r),e(I,S8),e(S8,WTe),e(WTe,z6r),e(S8,W6r),e(S8,DU),e(DU,Q6r),e(S8,H6r),e(I,U6r),e(I,R8),e(R8,QTe),e(QTe,J6r),e(R8,Y6r),e(R8,GU),e(GU,K6r),e(R8,Z6r),e(I,eTr),e(I,P8),e(P8,HTe),e(HTe,oTr),e(P8,rTr),e(P8,OU),e(OU,tTr),e(P8,aTr),e(I,nTr),e(I,B8),e(B8,UTe),e(UTe,sTr),e(B8,lTr),e(B8,VU),e(VU,iTr),e(B8,dTr),e(I,cTr),e(I,I8),e(I8,JTe),e(JTe,fTr),e(I8,mTr),e(I8,XU),e(XU,gTr),e(I8,hTr),e(I,pTr),e(I,N8),e(N8,YTe),e(YTe,_Tr),e(N8,uTr),e(N8,zU),e(zU,bTr),e(N8,vTr),e(I,FTr),e(I,q8),e(q8,KTe),e(KTe,TTr),e(q8,MTr),e(q8,WU),e(WU,ETr),e(q8,CTr),e(I,wTr),e(I,j8),e(j8,ZTe),e(ZTe,ATr),e(j8,LTr),e(j8,QU),e(QU,yTr),e(j8,xTr),e(I,$Tr),e(I,D8),e(D8,e7e),e(e7e,kTr),e(D8,STr),e(D8,HU),e(HU,RTr),e(D8,PTr),e(I,BTr),e(I,G8),e(G8,o7e),e(o7e,ITr),e(G8,NTr),e(G8,UU),e(UU,qTr),e(G8,jTr),e(I,DTr),e(I,O8),e(O8,r7e),e(r7e,GTr),e(O8,OTr),e(O8,JU),e(JU,VTr),e(O8,XTr),e(I,zTr),e(I,V8),e(V8,t7e),e(t7e,WTr),e(V8,QTr),e(V8,YU),e(YU,HTr),e(V8,UTr),e(I,JTr),e(I,X8),e(X8,a7e),e(a7e,YTr),e(X8,KTr),e(X8,KU),e(KU,ZTr),e(X8,e7r),e(I,o7r),e(I,z8),e(z8,n7e),e(n7e,r7r),e(z8,t7r),e(z8,ZU),e(ZU,a7r),e(z8,n7r),e(I,s7r),e(I,W8),e(W8,s7e),e(s7e,l7r),e(W8,i7r),e(W8,eJ),e(eJ,d7r),e(W8,c7r),e(I,f7r),e(I,Q8),e(Q8,l7e),e(l7e,m7r),e(Q8,g7r),e(Q8,oJ),e(oJ,h7r),e(Q8,p7r),e(I,_7r),e(I,H8),e(H8,i7e),e(i7e,u7r),e(H8,b7r),e(H8,rJ),e(rJ,v7r),e(H8,F7r),e(I,T7r),e(I,Ks),e(Ks,d7e),e(d7e,M7r),e(Ks,E7r),e(Ks,tJ),e(tJ,C7r),e(Ks,w7r),e(Ks,aJ),e(aJ,A7r),e(Ks,L7r),e(I,y7r),e(I,U8),e(U8,c7e),e(c7e,x7r),e(U8,$7r),e(U8,nJ),e(nJ,k7r),e(U8,S7r),e(I,R7r),e(I,J8),e(J8,f7e),e(f7e,P7r),e(J8,B7r),e(J8,sJ),e(sJ,I7r),e(J8,N7r),e(I,q7r),e(I,Y8),e(Y8,m7e),e(m7e,j7r),e(Y8,D7r),e(Y8,lJ),e(lJ,G7r),e(Y8,O7r),e(I,V7r),e(I,K8),e(K8,g7e),e(g7e,X7r),e(K8,z7r),e(K8,iJ),e(iJ,W7r),e(K8,Q7r),e(I,H7r),e(I,Z8),e(Z8,h7e),e(h7e,U7r),e(Z8,J7r),e(Z8,dJ),e(dJ,Y7r),e(Z8,K7r),e(I,Z7r),e(I,eM),e(eM,p7e),e(p7e,e8r),e(eM,o8r),e(eM,cJ),e(cJ,r8r),e(eM,t8r),e(I,a8r),e(I,oM),e(oM,_7e),e(_7e,n8r),e(oM,s8r),e(oM,fJ),e(fJ,l8r),e(oM,i8r),e(I,d8r),e(I,rM),e(rM,u7e),e(u7e,c8r),e(rM,f8r),e(rM,mJ),e(mJ,m8r),e(rM,g8r),e(I,h8r),e(I,tM),e(tM,b7e),e(b7e,p8r),e(tM,_8r),e(tM,gJ),e(gJ,u8r),e(tM,b8r),e(I,v8r),e(I,aM),e(aM,v7e),e(v7e,F8r),e(aM,T8r),e(aM,hJ),e(hJ,M8r),e(aM,E8r),e(I,C8r),e(I,nM),e(nM,F7e),e(F7e,w8r),e(nM,A8r),e(nM,pJ),e(pJ,L8r),e(nM,y8r),e(I,x8r),e(I,sM),e(sM,T7e),e(T7e,$8r),e(sM,k8r),e(sM,_J),e(_J,S8r),e(sM,R8r),e(I,P8r),e(I,lM),e(lM,M7e),e(M7e,B8r),e(lM,I8r),e(lM,uJ),e(uJ,N8r),e(lM,q8r),e(I,j8r),e(I,iM),e(iM,E7e),e(E7e,D8r),e(iM,G8r),e(iM,bJ),e(bJ,O8r),e(iM,V8r),e(I,X8r),e(I,dM),e(dM,C7e),e(C7e,z8r),e(dM,W8r),e(dM,vJ),e(vJ,Q8r),e(dM,H8r),e(I,U8r),e(I,cM),e(cM,w7e),e(w7e,J8r),e(cM,Y8r),e(cM,FJ),e(FJ,K8r),e(cM,Z8r),e(I,eMr),e(I,fM),e(fM,A7e),e(A7e,oMr),e(fM,rMr),e(fM,TJ),e(TJ,tMr),e(fM,aMr),e(I,nMr),e(I,mM),e(mM,L7e),e(L7e,sMr),e(mM,lMr),e(mM,MJ),e(MJ,iMr),e(mM,dMr),e(I,cMr),e(I,gM),e(gM,y7e),e(y7e,fMr),e(gM,mMr),e(gM,EJ),e(EJ,gMr),e(gM,hMr),e(I,pMr),e(I,hM),e(hM,x7e),e(x7e,_Mr),e(hM,uMr),e(hM,CJ),e(CJ,bMr),e(hM,vMr),e(I,FMr),e(I,pM),e(pM,$7e),e($7e,TMr),e(pM,MMr),e(pM,wJ),e(wJ,EMr),e(pM,CMr),e(I,wMr),e(I,_M),e(_M,k7e),e(k7e,AMr),e(_M,LMr),e(_M,AJ),e(AJ,yMr),e(_M,xMr),e(I,$Mr),e(I,uM),e(uM,S7e),e(S7e,kMr),e(uM,SMr),e(uM,LJ),e(LJ,RMr),e(uM,PMr),e(I,BMr),e(I,bM),e(bM,R7e),e(R7e,IMr),e(bM,NMr),e(bM,yJ),e(yJ,qMr),e(bM,jMr),e(I,DMr),e(I,vM),e(vM,P7e),e(P7e,GMr),e(vM,OMr),e(vM,xJ),e(xJ,VMr),e(vM,XMr),e(I,zMr),e(I,FM),e(FM,B7e),e(B7e,WMr),e(FM,QMr),e(FM,$J),e($J,HMr),e(FM,UMr),e(I,JMr),e(I,TM),e(TM,I7e),e(I7e,YMr),e(TM,KMr),e(TM,kJ),e(kJ,ZMr),e(TM,e4r),e(I,o4r),e(I,MM),e(MM,N7e),e(N7e,r4r),e(MM,t4r),e(MM,SJ),e(SJ,a4r),e(MM,n4r),e(I,s4r),e(I,EM),e(EM,q7e),e(q7e,l4r),e(EM,i4r),e(EM,RJ),e(RJ,d4r),e(EM,c4r),e(I,f4r),e(I,CM),e(CM,j7e),e(j7e,m4r),e(CM,g4r),e(CM,PJ),e(PJ,h4r),e(CM,p4r),e(I,_4r),e(I,wM),e(wM,D7e),e(D7e,u4r),e(wM,b4r),e(wM,BJ),e(BJ,v4r),e(wM,F4r),e(I,T4r),e(I,AM),e(AM,G7e),e(G7e,M4r),e(AM,E4r),e(AM,IJ),e(IJ,C4r),e(AM,w4r),e($r,A4r),M(LM,$r,null),b(f,cWe,u),b(f,fc,u),e(fc,yM),e(yM,O7e),M(dx,O7e,null),e(fc,L4r),e(fc,V7e),e(V7e,y4r),b(f,fWe,u),b(f,tr,u),M(cx,tr,null),e(tr,x4r),e(tr,mc),e(mc,$4r),e(mc,NJ),e(NJ,k4r),e(mc,S4r),e(mc,qJ),e(qJ,R4r),e(mc,P4r),e(tr,B4r),e(tr,fx),e(fx,I4r),e(fx,X7e),e(X7e,N4r),e(fx,q4r),e(tr,j4r),e(tr,Pt),M(mx,Pt,null),e(Pt,D4r),e(Pt,z7e),e(z7e,G4r),e(Pt,O4r),e(Pt,gc),e(gc,V4r),e(gc,W7e),e(W7e,X4r),e(gc,z4r),e(gc,jJ),e(jJ,W4r),e(gc,Q4r),e(Pt,H4r),M(xM,Pt,null),e(tr,U4r),e(tr,kr),M(gx,kr,null),e(kr,J4r),e(kr,Q7e),e(Q7e,Y4r),e(kr,K4r),e(kr,ln),e(ln,Z4r),e(ln,H7e),e(H7e,eEr),e(ln,oEr),e(ln,U7e),e(U7e,rEr),e(ln,tEr),e(ln,J7e),e(J7e,aEr),e(ln,nEr),e(kr,sEr),e(kr,se),e(se,$M),e($M,Y7e),e(Y7e,lEr),e($M,iEr),e($M,DJ),e(DJ,dEr),e($M,cEr),e(se,fEr),e(se,kM),e(kM,K7e),e(K7e,mEr),e(kM,gEr),e(kM,GJ),e(GJ,hEr),e(kM,pEr),e(se,_Er),e(se,SM),e(SM,Z7e),e(Z7e,uEr),e(SM,bEr),e(SM,OJ),e(OJ,vEr),e(SM,FEr),e(se,TEr),e(se,RM),e(RM,e8e),e(e8e,MEr),e(RM,EEr),e(RM,VJ),e(VJ,CEr),e(RM,wEr),e(se,AEr),e(se,PM),e(PM,o8e),e(o8e,LEr),e(PM,yEr),e(PM,XJ),e(XJ,xEr),e(PM,$Er),e(se,kEr),e(se,BM),e(BM,r8e),e(r8e,SEr),e(BM,REr),e(BM,zJ),e(zJ,PEr),e(BM,BEr),e(se,IEr),e(se,IM),e(IM,t8e),e(t8e,NEr),e(IM,qEr),e(IM,WJ),e(WJ,jEr),e(IM,DEr),e(se,GEr),e(se,NM),e(NM,a8e),e(a8e,OEr),e(NM,VEr),e(NM,QJ),e(QJ,XEr),e(NM,zEr),e(se,WEr),e(se,qM),e(qM,n8e),e(n8e,QEr),e(qM,HEr),e(qM,HJ),e(HJ,UEr),e(qM,JEr),e(se,YEr),e(se,jM),e(jM,s8e),e(s8e,KEr),e(jM,ZEr),e(jM,UJ),e(UJ,eCr),e(jM,oCr),e(se,rCr),e(se,DM),e(DM,l8e),e(l8e,tCr),e(DM,aCr),e(DM,JJ),e(JJ,nCr),e(DM,sCr),e(se,lCr),e(se,GM),e(GM,i8e),e(i8e,iCr),e(GM,dCr),e(GM,YJ),e(YJ,cCr),e(GM,fCr),e(se,mCr),e(se,OM),e(OM,d8e),e(d8e,gCr),e(OM,hCr),e(OM,KJ),e(KJ,pCr),e(OM,_Cr),e(se,uCr),e(se,VM),e(VM,c8e),e(c8e,bCr),e(VM,vCr),e(VM,ZJ),e(ZJ,FCr),e(VM,TCr),e(se,MCr),e(se,XM),e(XM,f8e),e(f8e,ECr),e(XM,CCr),e(XM,eY),e(eY,wCr),e(XM,ACr),e(se,LCr),e(se,zM),e(zM,m8e),e(m8e,yCr),e(zM,xCr),e(zM,oY),e(oY,$Cr),e(zM,kCr),e(se,SCr),e(se,WM),e(WM,g8e),e(g8e,RCr),e(WM,PCr),e(WM,rY),e(rY,BCr),e(WM,ICr),e(se,NCr),e(se,QM),e(QM,h8e),e(h8e,qCr),e(QM,jCr),e(QM,tY),e(tY,DCr),e(QM,GCr),e(se,OCr),e(se,HM),e(HM,p8e),e(p8e,VCr),e(HM,XCr),e(HM,aY),e(aY,zCr),e(HM,WCr),e(se,QCr),e(se,UM),e(UM,_8e),e(_8e,HCr),e(UM,UCr),e(UM,nY),e(nY,JCr),e(UM,YCr),e(se,KCr),e(se,JM),e(JM,u8e),e(u8e,ZCr),e(JM,e5r),e(JM,sY),e(sY,o5r),e(JM,r5r),e(se,t5r),e(se,YM),e(YM,b8e),e(b8e,a5r),e(YM,n5r),e(YM,lY),e(lY,s5r),e(YM,l5r),e(se,i5r),e(se,KM),e(KM,v8e),e(v8e,d5r),e(KM,c5r),e(KM,iY),e(iY,f5r),e(KM,m5r),e(kr,g5r),M(ZM,kr,null),b(f,mWe,u),b(f,hc,u),e(hc,e4),e(e4,F8e),M(hx,F8e,null),e(hc,h5r),e(hc,T8e),e(T8e,p5r),b(f,gWe,u),b(f,ar,u),M(px,ar,null),e(ar,_5r),e(ar,pc),e(pc,u5r),e(pc,dY),e(dY,b5r),e(pc,v5r),e(pc,cY),e(cY,F5r),e(pc,T5r),e(ar,M5r),e(ar,_x),e(_x,E5r),e(_x,M8e),e(M8e,C5r),e(_x,w5r),e(ar,A5r),e(ar,Bt),M(ux,Bt,null),e(Bt,L5r),e(Bt,E8e),e(E8e,y5r),e(Bt,x5r),e(Bt,_c),e(_c,$5r),e(_c,C8e),e(C8e,k5r),e(_c,S5r),e(_c,fY),e(fY,R5r),e(_c,P5r),e(Bt,B5r),M(o4,Bt,null),e(ar,I5r),e(ar,Sr),M(bx,Sr,null),e(Sr,N5r),e(Sr,w8e),e(w8e,q5r),e(Sr,j5r),e(Sr,dn),e(dn,D5r),e(dn,A8e),e(A8e,G5r),e(dn,O5r),e(dn,L8e),e(L8e,V5r),e(dn,X5r),e(dn,y8e),e(y8e,z5r),e(dn,W5r),e(Sr,Q5r),e(Sr,Me),e(Me,r4),e(r4,x8e),e(x8e,H5r),e(r4,U5r),e(r4,mY),e(mY,J5r),e(r4,Y5r),e(Me,K5r),e(Me,t4),e(t4,$8e),e($8e,Z5r),e(t4,e3r),e(t4,gY),e(gY,o3r),e(t4,r3r),e(Me,t3r),e(Me,a4),e(a4,k8e),e(k8e,a3r),e(a4,n3r),e(a4,hY),e(hY,s3r),e(a4,l3r),e(Me,i3r),e(Me,n4),e(n4,S8e),e(S8e,d3r),e(n4,c3r),e(n4,pY),e(pY,f3r),e(n4,m3r),e(Me,g3r),e(Me,s4),e(s4,R8e),e(R8e,h3r),e(s4,p3r),e(s4,_Y),e(_Y,_3r),e(s4,u3r),e(Me,b3r),e(Me,l4),e(l4,P8e),e(P8e,v3r),e(l4,F3r),e(l4,uY),e(uY,T3r),e(l4,M3r),e(Me,E3r),e(Me,i4),e(i4,B8e),e(B8e,C3r),e(i4,w3r),e(i4,bY),e(bY,A3r),e(i4,L3r),e(Me,y3r),e(Me,d4),e(d4,I8e),e(I8e,x3r),e(d4,$3r),e(d4,vY),e(vY,k3r),e(d4,S3r),e(Me,R3r),e(Me,c4),e(c4,N8e),e(N8e,P3r),e(c4,B3r),e(c4,FY),e(FY,I3r),e(c4,N3r),e(Me,q3r),e(Me,f4),e(f4,q8e),e(q8e,j3r),e(f4,D3r),e(f4,TY),e(TY,G3r),e(f4,O3r),e(Me,V3r),e(Me,m4),e(m4,j8e),e(j8e,X3r),e(m4,z3r),e(m4,MY),e(MY,W3r),e(m4,Q3r),e(Me,H3r),e(Me,g4),e(g4,D8e),e(D8e,U3r),e(g4,J3r),e(g4,EY),e(EY,Y3r),e(g4,K3r),e(Me,Z3r),e(Me,h4),e(h4,G8e),e(G8e,e0r),e(h4,o0r),e(h4,CY),e(CY,r0r),e(h4,t0r),e(Sr,a0r),M(p4,Sr,null),b(f,hWe,u),b(f,uc,u),e(uc,_4),e(_4,O8e),M(vx,O8e,null),e(uc,n0r),e(uc,V8e),e(V8e,s0r),b(f,pWe,u),b(f,nr,u),M(Fx,nr,null),e(nr,l0r),e(nr,bc),e(bc,i0r),e(bc,wY),e(wY,d0r),e(bc,c0r),e(bc,AY),e(AY,f0r),e(bc,m0r),e(nr,g0r),e(nr,Tx),e(Tx,h0r),e(Tx,X8e),e(X8e,p0r),e(Tx,_0r),e(nr,u0r),e(nr,It),M(Mx,It,null),e(It,b0r),e(It,z8e),e(z8e,v0r),e(It,F0r),e(It,vc),e(vc,T0r),e(vc,W8e),e(W8e,M0r),e(vc,E0r),e(vc,LY),e(LY,C0r),e(vc,w0r),e(It,A0r),M(u4,It,null),e(nr,L0r),e(nr,Rr),M(Ex,Rr,null),e(Rr,y0r),e(Rr,Q8e),e(Q8e,x0r),e(Rr,$0r),e(Rr,cn),e(cn,k0r),e(cn,H8e),e(H8e,S0r),e(cn,R0r),e(cn,U8e),e(U8e,P0r),e(cn,B0r),e(cn,J8e),e(J8e,I0r),e(cn,N0r),e(Rr,q0r),e(Rr,Ve),e(Ve,b4),e(b4,Y8e),e(Y8e,j0r),e(b4,D0r),e(b4,yY),e(yY,G0r),e(b4,O0r),e(Ve,V0r),e(Ve,v4),e(v4,K8e),e(K8e,X0r),e(v4,z0r),e(v4,xY),e(xY,W0r),e(v4,Q0r),e(Ve,H0r),e(Ve,Zs),e(Zs,Z8e),e(Z8e,U0r),e(Zs,J0r),e(Zs,$Y),e($Y,Y0r),e(Zs,K0r),e(Zs,kY),e(kY,Z0r),e(Zs,ewr),e(Ve,owr),e(Ve,F4),e(F4,eMe),e(eMe,rwr),e(F4,twr),e(F4,SY),e(SY,awr),e(F4,nwr),e(Ve,swr),e(Ve,T4),e(T4,oMe),e(oMe,lwr),e(T4,iwr),e(T4,RY),e(RY,dwr),e(T4,cwr),e(Ve,fwr),e(Ve,M4),e(M4,rMe),e(rMe,mwr),e(M4,gwr),e(M4,PY),e(PY,hwr),e(M4,pwr),e(Ve,_wr),e(Ve,E4),e(E4,tMe),e(tMe,uwr),e(E4,bwr),e(E4,BY),e(BY,vwr),e(E4,Fwr),e(Ve,Twr),e(Ve,C4),e(C4,aMe),e(aMe,Mwr),e(C4,Ewr),e(C4,IY),e(IY,Cwr),e(C4,wwr),e(Rr,Awr),M(w4,Rr,null),b(f,_We,u),b(f,Fc,u),e(Fc,A4),e(A4,nMe),M(Cx,nMe,null),e(Fc,Lwr),e(Fc,sMe),e(sMe,ywr),b(f,uWe,u),b(f,sr,u),M(wx,sr,null),e(sr,xwr),e(sr,Tc),e(Tc,$wr),e(Tc,NY),e(NY,kwr),e(Tc,Swr),e(Tc,qY),e(qY,Rwr),e(Tc,Pwr),e(sr,Bwr),e(sr,Ax),e(Ax,Iwr),e(Ax,lMe),e(lMe,Nwr),e(Ax,qwr),e(sr,jwr),e(sr,Nt),M(Lx,Nt,null),e(Nt,Dwr),e(Nt,iMe),e(iMe,Gwr),e(Nt,Owr),e(Nt,Mc),e(Mc,Vwr),e(Mc,dMe),e(dMe,Xwr),e(Mc,zwr),e(Mc,jY),e(jY,Wwr),e(Mc,Qwr),e(Nt,Hwr),M(L4,Nt,null),e(sr,Uwr),e(sr,Pr),M(yx,Pr,null),e(Pr,Jwr),e(Pr,cMe),e(cMe,Ywr),e(Pr,Kwr),e(Pr,fn),e(fn,Zwr),e(fn,fMe),e(fMe,eAr),e(fn,oAr),e(fn,mMe),e(mMe,rAr),e(fn,tAr),e(fn,gMe),e(gMe,aAr),e(fn,nAr),e(Pr,sAr),e(Pr,ie),e(ie,y4),e(y4,hMe),e(hMe,lAr),e(y4,iAr),e(y4,DY),e(DY,dAr),e(y4,cAr),e(ie,fAr),e(ie,x4),e(x4,pMe),e(pMe,mAr),e(x4,gAr),e(x4,GY),e(GY,hAr),e(x4,pAr),e(ie,_Ar),e(ie,$4),e($4,_Me),e(_Me,uAr),e($4,bAr),e($4,OY),e(OY,vAr),e($4,FAr),e(ie,TAr),e(ie,k4),e(k4,uMe),e(uMe,MAr),e(k4,EAr),e(k4,VY),e(VY,CAr),e(k4,wAr),e(ie,AAr),e(ie,S4),e(S4,bMe),e(bMe,LAr),e(S4,yAr),e(S4,XY),e(XY,xAr),e(S4,$Ar),e(ie,kAr),e(ie,R4),e(R4,vMe),e(vMe,SAr),e(R4,RAr),e(R4,zY),e(zY,PAr),e(R4,BAr),e(ie,IAr),e(ie,P4),e(P4,FMe),e(FMe,NAr),e(P4,qAr),e(P4,WY),e(WY,jAr),e(P4,DAr),e(ie,GAr),e(ie,B4),e(B4,TMe),e(TMe,OAr),e(B4,VAr),e(B4,QY),e(QY,XAr),e(B4,zAr),e(ie,WAr),e(ie,I4),e(I4,MMe),e(MMe,QAr),e(I4,HAr),e(I4,HY),e(HY,UAr),e(I4,JAr),e(ie,YAr),e(ie,N4),e(N4,EMe),e(EMe,KAr),e(N4,ZAr),e(N4,UY),e(UY,eLr),e(N4,oLr),e(ie,rLr),e(ie,q4),e(q4,CMe),e(CMe,tLr),e(q4,aLr),e(q4,JY),e(JY,nLr),e(q4,sLr),e(ie,lLr),e(ie,j4),e(j4,wMe),e(wMe,iLr),e(j4,dLr),e(j4,YY),e(YY,cLr),e(j4,fLr),e(ie,mLr),e(ie,D4),e(D4,AMe),e(AMe,gLr),e(D4,hLr),e(D4,KY),e(KY,pLr),e(D4,_Lr),e(ie,uLr),e(ie,G4),e(G4,LMe),e(LMe,bLr),e(G4,vLr),e(G4,ZY),e(ZY,FLr),e(G4,TLr),e(ie,MLr),e(ie,O4),e(O4,yMe),e(yMe,ELr),e(O4,CLr),e(O4,eK),e(eK,wLr),e(O4,ALr),e(ie,LLr),e(ie,V4),e(V4,xMe),e(xMe,yLr),e(V4,xLr),e(V4,oK),e(oK,$Lr),e(V4,kLr),e(ie,SLr),e(ie,X4),e(X4,$Me),e($Me,RLr),e(X4,PLr),e(X4,rK),e(rK,BLr),e(X4,ILr),e(ie,NLr),e(ie,z4),e(z4,kMe),e(kMe,qLr),e(z4,jLr),e(z4,tK),e(tK,DLr),e(z4,GLr),e(ie,OLr),e(ie,W4),e(W4,SMe),e(SMe,VLr),e(W4,XLr),e(W4,aK),e(aK,zLr),e(W4,WLr),e(ie,QLr),e(ie,Q4),e(Q4,RMe),e(RMe,HLr),e(Q4,ULr),e(Q4,nK),e(nK,JLr),e(Q4,YLr),e(Pr,KLr),M(H4,Pr,null),b(f,bWe,u),b(f,Ec,u),e(Ec,U4),e(U4,PMe),M(xx,PMe,null),e(Ec,ZLr),e(Ec,BMe),e(BMe,eyr),b(f,vWe,u),b(f,lr,u),M($x,lr,null),e(lr,oyr),e(lr,Cc),e(Cc,ryr),e(Cc,sK),e(sK,tyr),e(Cc,ayr),e(Cc,lK),e(lK,nyr),e(Cc,syr),e(lr,lyr),e(lr,kx),e(kx,iyr),e(kx,IMe),e(IMe,dyr),e(kx,cyr),e(lr,fyr),e(lr,qt),M(Sx,qt,null),e(qt,myr),e(qt,NMe),e(NMe,gyr),e(qt,hyr),e(qt,wc),e(wc,pyr),e(wc,qMe),e(qMe,_yr),e(wc,uyr),e(wc,iK),e(iK,byr),e(wc,vyr),e(qt,Fyr),M(J4,qt,null),e(lr,Tyr),e(lr,Br),M(Rx,Br,null),e(Br,Myr),e(Br,jMe),e(jMe,Eyr),e(Br,Cyr),e(Br,mn),e(mn,wyr),e(mn,DMe),e(DMe,Ayr),e(mn,Lyr),e(mn,GMe),e(GMe,yyr),e(mn,xyr),e(mn,OMe),e(OMe,$yr),e(mn,kyr),e(Br,Syr),e(Br,ye),e(ye,Y4),e(Y4,VMe),e(VMe,Ryr),e(Y4,Pyr),e(Y4,dK),e(dK,Byr),e(Y4,Iyr),e(ye,Nyr),e(ye,K4),e(K4,XMe),e(XMe,qyr),e(K4,jyr),e(K4,cK),e(cK,Dyr),e(K4,Gyr),e(ye,Oyr),e(ye,Z4),e(Z4,zMe),e(zMe,Vyr),e(Z4,Xyr),e(Z4,fK),e(fK,zyr),e(Z4,Wyr),e(ye,Qyr),e(ye,eE),e(eE,WMe),e(WMe,Hyr),e(eE,Uyr),e(eE,mK),e(mK,Jyr),e(eE,Yyr),e(ye,Kyr),e(ye,oE),e(oE,QMe),e(QMe,Zyr),e(oE,e9r),e(oE,gK),e(gK,o9r),e(oE,r9r),e(ye,t9r),e(ye,rE),e(rE,HMe),e(HMe,a9r),e(rE,n9r),e(rE,hK),e(hK,s9r),e(rE,l9r),e(ye,i9r),e(ye,tE),e(tE,UMe),e(UMe,d9r),e(tE,c9r),e(tE,pK),e(pK,f9r),e(tE,m9r),e(ye,g9r),e(ye,aE),e(aE,JMe),e(JMe,h9r),e(aE,p9r),e(aE,_K),e(_K,_9r),e(aE,u9r),e(ye,b9r),e(ye,nE),e(nE,YMe),e(YMe,v9r),e(nE,F9r),e(nE,uK),e(uK,T9r),e(nE,M9r),e(ye,E9r),e(ye,sE),e(sE,KMe),e(KMe,C9r),e(sE,w9r),e(sE,bK),e(bK,A9r),e(sE,L9r),e(Br,y9r),M(lE,Br,null),b(f,FWe,u),b(f,Ac,u),e(Ac,iE),e(iE,ZMe),M(Px,ZMe,null),e(Ac,x9r),e(Ac,e4e),e(e4e,$9r),b(f,TWe,u),b(f,ir,u),M(Bx,ir,null),e(ir,k9r),e(ir,Lc),e(Lc,S9r),e(Lc,vK),e(vK,R9r),e(Lc,P9r),e(Lc,FK),e(FK,B9r),e(Lc,I9r),e(ir,N9r),e(ir,Ix),e(Ix,q9r),e(Ix,o4e),e(o4e,j9r),e(Ix,D9r),e(ir,G9r),e(ir,jt),M(Nx,jt,null),e(jt,O9r),e(jt,r4e),e(r4e,V9r),e(jt,X9r),e(jt,yc),e(yc,z9r),e(yc,t4e),e(t4e,W9r),e(yc,Q9r),e(yc,TK),e(TK,H9r),e(yc,U9r),e(jt,J9r),M(dE,jt,null),e(ir,Y9r),e(ir,Ir),M(qx,Ir,null),e(Ir,K9r),e(Ir,a4e),e(a4e,Z9r),e(Ir,exr),e(Ir,gn),e(gn,oxr),e(gn,n4e),e(n4e,rxr),e(gn,txr),e(gn,s4e),e(s4e,axr),e(gn,nxr),e(gn,l4e),e(l4e,sxr),e(gn,lxr),e(Ir,ixr),e(Ir,te),e(te,cE),e(cE,i4e),e(i4e,dxr),e(cE,cxr),e(cE,MK),e(MK,fxr),e(cE,mxr),e(te,gxr),e(te,fE),e(fE,d4e),e(d4e,hxr),e(fE,pxr),e(fE,EK),e(EK,_xr),e(fE,uxr),e(te,bxr),e(te,mE),e(mE,c4e),e(c4e,vxr),e(mE,Fxr),e(mE,CK),e(CK,Txr),e(mE,Mxr),e(te,Exr),e(te,gE),e(gE,f4e),e(f4e,Cxr),e(gE,wxr),e(gE,wK),e(wK,Axr),e(gE,Lxr),e(te,yxr),e(te,hE),e(hE,m4e),e(m4e,xxr),e(hE,$xr),e(hE,AK),e(AK,kxr),e(hE,Sxr),e(te,Rxr),e(te,pE),e(pE,g4e),e(g4e,Pxr),e(pE,Bxr),e(pE,LK),e(LK,Ixr),e(pE,Nxr),e(te,qxr),e(te,_E),e(_E,h4e),e(h4e,jxr),e(_E,Dxr),e(_E,yK),e(yK,Gxr),e(_E,Oxr),e(te,Vxr),e(te,uE),e(uE,p4e),e(p4e,Xxr),e(uE,zxr),e(uE,xK),e(xK,Wxr),e(uE,Qxr),e(te,Hxr),e(te,bE),e(bE,_4e),e(_4e,Uxr),e(bE,Jxr),e(bE,$K),e($K,Yxr),e(bE,Kxr),e(te,Zxr),e(te,vE),e(vE,u4e),e(u4e,e$r),e(vE,o$r),e(vE,kK),e(kK,r$r),e(vE,t$r),e(te,a$r),e(te,FE),e(FE,b4e),e(b4e,n$r),e(FE,s$r),e(FE,SK),e(SK,l$r),e(FE,i$r),e(te,d$r),e(te,TE),e(TE,v4e),e(v4e,c$r),e(TE,f$r),e(TE,RK),e(RK,m$r),e(TE,g$r),e(te,h$r),e(te,ME),e(ME,F4e),e(F4e,p$r),e(ME,_$r),e(ME,PK),e(PK,u$r),e(ME,b$r),e(te,v$r),e(te,EE),e(EE,T4e),e(T4e,F$r),e(EE,T$r),e(EE,BK),e(BK,M$r),e(EE,E$r),e(te,C$r),e(te,CE),e(CE,M4e),e(M4e,w$r),e(CE,A$r),e(CE,IK),e(IK,L$r),e(CE,y$r),e(te,x$r),e(te,wE),e(wE,E4e),e(E4e,$$r),e(wE,k$r),e(wE,NK),e(NK,S$r),e(wE,R$r),e(te,P$r),e(te,AE),e(AE,C4e),e(C4e,B$r),e(AE,I$r),e(AE,qK),e(qK,N$r),e(AE,q$r),e(te,j$r),e(te,LE),e(LE,w4e),e(w4e,D$r),e(LE,G$r),e(LE,jK),e(jK,O$r),e(LE,V$r),e(te,X$r),e(te,yE),e(yE,A4e),e(A4e,z$r),e(yE,W$r),e(yE,DK),e(DK,Q$r),e(yE,H$r),e(te,U$r),e(te,xE),e(xE,L4e),e(L4e,J$r),e(xE,Y$r),e(xE,GK),e(GK,K$r),e(xE,Z$r),e(te,ekr),e(te,$E),e($E,y4e),e(y4e,okr),e($E,rkr),e($E,OK),e(OK,tkr),e($E,akr),e(te,nkr),e(te,kE),e(kE,x4e),e(x4e,skr),e(kE,lkr),e(kE,VK),e(VK,ikr),e(kE,dkr),e(te,ckr),e(te,SE),e(SE,$4e),e($4e,fkr),e(SE,mkr),e(SE,XK),e(XK,gkr),e(SE,hkr),e(te,pkr),e(te,RE),e(RE,k4e),e(k4e,_kr),e(RE,ukr),e(RE,zK),e(zK,bkr),e(RE,vkr),e(te,Fkr),e(te,PE),e(PE,S4e),e(S4e,Tkr),e(PE,Mkr),e(PE,WK),e(WK,Ekr),e(PE,Ckr),e(te,wkr),e(te,BE),e(BE,R4e),e(R4e,Akr),e(BE,Lkr),e(BE,QK),e(QK,ykr),e(BE,xkr),e(Ir,$kr),M(IE,Ir,null),b(f,MWe,u),b(f,xc,u),e(xc,NE),e(NE,P4e),M(jx,P4e,null),e(xc,kkr),e(xc,B4e),e(B4e,Skr),b(f,EWe,u),b(f,dr,u),M(Dx,dr,null),e(dr,Rkr),e(dr,$c),e($c,Pkr),e($c,HK),e(HK,Bkr),e($c,Ikr),e($c,UK),e(UK,Nkr),e($c,qkr),e(dr,jkr),e(dr,Gx),e(Gx,Dkr),e(Gx,I4e),e(I4e,Gkr),e(Gx,Okr),e(dr,Vkr),e(dr,Dt),M(Ox,Dt,null),e(Dt,Xkr),e(Dt,N4e),e(N4e,zkr),e(Dt,Wkr),e(Dt,kc),e(kc,Qkr),e(kc,q4e),e(q4e,Hkr),e(kc,Ukr),e(kc,JK),e(JK,Jkr),e(kc,Ykr),e(Dt,Kkr),M(qE,Dt,null),e(dr,Zkr),e(dr,Nr),M(Vx,Nr,null),e(Nr,eSr),e(Nr,j4e),e(j4e,oSr),e(Nr,rSr),e(Nr,hn),e(hn,tSr),e(hn,D4e),e(D4e,aSr),e(hn,nSr),e(hn,G4e),e(G4e,sSr),e(hn,lSr),e(hn,O4e),e(O4e,iSr),e(hn,dSr),e(Nr,cSr),e(Nr,be),e(be,jE),e(jE,V4e),e(V4e,fSr),e(jE,mSr),e(jE,YK),e(YK,gSr),e(jE,hSr),e(be,pSr),e(be,DE),e(DE,X4e),e(X4e,_Sr),e(DE,uSr),e(DE,KK),e(KK,bSr),e(DE,vSr),e(be,FSr),e(be,GE),e(GE,z4e),e(z4e,TSr),e(GE,MSr),e(GE,ZK),e(ZK,ESr),e(GE,CSr),e(be,wSr),e(be,OE),e(OE,W4e),e(W4e,ASr),e(OE,LSr),e(OE,eZ),e(eZ,ySr),e(OE,xSr),e(be,$Sr),e(be,VE),e(VE,Q4e),e(Q4e,kSr),e(VE,SSr),e(VE,oZ),e(oZ,RSr),e(VE,PSr),e(be,BSr),e(be,XE),e(XE,H4e),e(H4e,ISr),e(XE,NSr),e(XE,rZ),e(rZ,qSr),e(XE,jSr),e(be,DSr),e(be,zE),e(zE,U4e),e(U4e,GSr),e(zE,OSr),e(zE,tZ),e(tZ,VSr),e(zE,XSr),e(be,zSr),e(be,WE),e(WE,J4e),e(J4e,WSr),e(WE,QSr),e(WE,aZ),e(aZ,HSr),e(WE,USr),e(be,JSr),e(be,QE),e(QE,Y4e),e(Y4e,YSr),e(QE,KSr),e(QE,nZ),e(nZ,ZSr),e(QE,eRr),e(be,oRr),e(be,HE),e(HE,K4e),e(K4e,rRr),e(HE,tRr),e(HE,sZ),e(sZ,aRr),e(HE,nRr),e(be,sRr),e(be,UE),e(UE,Z4e),e(Z4e,lRr),e(UE,iRr),e(UE,lZ),e(lZ,dRr),e(UE,cRr),e(be,fRr),e(be,JE),e(JE,eEe),e(eEe,mRr),e(JE,gRr),e(JE,iZ),e(iZ,hRr),e(JE,pRr),e(be,_Rr),e(be,YE),e(YE,oEe),e(oEe,uRr),e(YE,bRr),e(YE,dZ),e(dZ,vRr),e(YE,FRr),e(be,TRr),e(be,KE),e(KE,rEe),e(rEe,MRr),e(KE,ERr),e(KE,cZ),e(cZ,CRr),e(KE,wRr),e(be,ARr),e(be,ZE),e(ZE,tEe),e(tEe,LRr),e(ZE,yRr),e(ZE,fZ),e(fZ,xRr),e(ZE,$Rr),e(be,kRr),e(be,eC),e(eC,aEe),e(aEe,SRr),e(eC,RRr),e(eC,mZ),e(mZ,PRr),e(eC,BRr),e(be,IRr),e(be,oC),e(oC,nEe),e(nEe,NRr),e(oC,qRr),e(oC,gZ),e(gZ,jRr),e(oC,DRr),e(Nr,GRr),M(rC,Nr,null),b(f,CWe,u),b(f,Sc,u),e(Sc,tC),e(tC,sEe),M(Xx,sEe,null),e(Sc,ORr),e(Sc,lEe),e(lEe,VRr),b(f,wWe,u),b(f,cr,u),M(zx,cr,null),e(cr,XRr),e(cr,Rc),e(Rc,zRr),e(Rc,hZ),e(hZ,WRr),e(Rc,QRr),e(Rc,pZ),e(pZ,HRr),e(Rc,URr),e(cr,JRr),e(cr,Wx),e(Wx,YRr),e(Wx,iEe),e(iEe,KRr),e(Wx,ZRr),e(cr,ePr),e(cr,Gt),M(Qx,Gt,null),e(Gt,oPr),e(Gt,dEe),e(dEe,rPr),e(Gt,tPr),e(Gt,Pc),e(Pc,aPr),e(Pc,cEe),e(cEe,nPr),e(Pc,sPr),e(Pc,_Z),e(_Z,lPr),e(Pc,iPr),e(Gt,dPr),M(aC,Gt,null),e(cr,cPr),e(cr,qr),M(Hx,qr,null),e(qr,fPr),e(qr,fEe),e(fEe,mPr),e(qr,gPr),e(qr,pn),e(pn,hPr),e(pn,mEe),e(mEe,pPr),e(pn,_Pr),e(pn,gEe),e(gEe,uPr),e(pn,bPr),e(pn,hEe),e(hEe,vPr),e(pn,FPr),e(qr,TPr),e(qr,Ux),e(Ux,nC),e(nC,pEe),e(pEe,MPr),e(nC,EPr),e(nC,uZ),e(uZ,CPr),e(nC,wPr),e(Ux,APr),e(Ux,sC),e(sC,_Ee),e(_Ee,LPr),e(sC,yPr),e(sC,bZ),e(bZ,xPr),e(sC,$Pr),e(qr,kPr),M(lC,qr,null),b(f,AWe,u),b(f,Bc,u),e(Bc,iC),e(iC,uEe),M(Jx,uEe,null),e(Bc,SPr),e(Bc,bEe),e(bEe,RPr),b(f,LWe,u),b(f,fr,u),M(Yx,fr,null),e(fr,PPr),e(fr,Ic),e(Ic,BPr),e(Ic,vZ),e(vZ,IPr),e(Ic,NPr),e(Ic,FZ),e(FZ,qPr),e(Ic,jPr),e(fr,DPr),e(fr,Kx),e(Kx,GPr),e(Kx,vEe),e(vEe,OPr),e(Kx,VPr),e(fr,XPr),e(fr,Ot),M(Zx,Ot,null),e(Ot,zPr),e(Ot,FEe),e(FEe,WPr),e(Ot,QPr),e(Ot,Nc),e(Nc,HPr),e(Nc,TEe),e(TEe,UPr),e(Nc,JPr),e(Nc,TZ),e(TZ,YPr),e(Nc,KPr),e(Ot,ZPr),M(dC,Ot,null),e(fr,eBr),e(fr,jr),M(e$,jr,null),e(jr,oBr),e(jr,MEe),e(MEe,rBr),e(jr,tBr),e(jr,_n),e(_n,aBr),e(_n,EEe),e(EEe,nBr),e(_n,sBr),e(_n,CEe),e(CEe,lBr),e(_n,iBr),e(_n,wEe),e(wEe,dBr),e(_n,cBr),e(jr,fBr),e(jr,AEe),e(AEe,cC),e(cC,LEe),e(LEe,mBr),e(cC,gBr),e(cC,MZ),e(MZ,hBr),e(cC,pBr),e(jr,_Br),M(fC,jr,null),b(f,yWe,u),b(f,qc,u),e(qc,mC),e(mC,yEe),M(o$,yEe,null),e(qc,uBr),e(qc,xEe),e(xEe,bBr),b(f,xWe,u),b(f,mr,u),M(r$,mr,null),e(mr,vBr),e(mr,jc),e(jc,FBr),e(jc,EZ),e(EZ,TBr),e(jc,MBr),e(jc,CZ),e(CZ,EBr),e(jc,CBr),e(mr,wBr),e(mr,t$),e(t$,ABr),e(t$,$Ee),e($Ee,LBr),e(t$,yBr),e(mr,xBr),e(mr,Vt),M(a$,Vt,null),e(Vt,$Br),e(Vt,kEe),e(kEe,kBr),e(Vt,SBr),e(Vt,Dc),e(Dc,RBr),e(Dc,SEe),e(SEe,PBr),e(Dc,BBr),e(Dc,wZ),e(wZ,IBr),e(Dc,NBr),e(Vt,qBr),M(gC,Vt,null),e(mr,jBr),e(mr,Dr),M(n$,Dr,null),e(Dr,DBr),e(Dr,REe),e(REe,GBr),e(Dr,OBr),e(Dr,un),e(un,VBr),e(un,PEe),e(PEe,XBr),e(un,zBr),e(un,BEe),e(BEe,WBr),e(un,QBr),e(un,IEe),e(IEe,HBr),e(un,UBr),e(Dr,JBr),e(Dr,de),e(de,hC),e(hC,NEe),e(NEe,YBr),e(hC,KBr),e(hC,AZ),e(AZ,ZBr),e(hC,eIr),e(de,oIr),e(de,pC),e(pC,qEe),e(qEe,rIr),e(pC,tIr),e(pC,LZ),e(LZ,aIr),e(pC,nIr),e(de,sIr),e(de,_C),e(_C,jEe),e(jEe,lIr),e(_C,iIr),e(_C,yZ),e(yZ,dIr),e(_C,cIr),e(de,fIr),e(de,uC),e(uC,DEe),e(DEe,mIr),e(uC,gIr),e(uC,xZ),e(xZ,hIr),e(uC,pIr),e(de,_Ir),e(de,bC),e(bC,GEe),e(GEe,uIr),e(bC,bIr),e(bC,$Z),e($Z,vIr),e(bC,FIr),e(de,TIr),e(de,vC),e(vC,OEe),e(OEe,MIr),e(vC,EIr),e(vC,kZ),e(kZ,CIr),e(vC,wIr),e(de,AIr),e(de,FC),e(FC,VEe),e(VEe,LIr),e(FC,yIr),e(FC,SZ),e(SZ,xIr),e(FC,$Ir),e(de,kIr),e(de,TC),e(TC,XEe),e(XEe,SIr),e(TC,RIr),e(TC,RZ),e(RZ,PIr),e(TC,BIr),e(de,IIr),e(de,MC),e(MC,zEe),e(zEe,NIr),e(MC,qIr),e(MC,PZ),e(PZ,jIr),e(MC,DIr),e(de,GIr),e(de,EC),e(EC,WEe),e(WEe,OIr),e(EC,VIr),e(EC,BZ),e(BZ,XIr),e(EC,zIr),e(de,WIr),e(de,CC),e(CC,QEe),e(QEe,QIr),e(CC,HIr),e(CC,IZ),e(IZ,UIr),e(CC,JIr),e(de,YIr),e(de,wC),e(wC,HEe),e(HEe,KIr),e(wC,ZIr),e(wC,NZ),e(NZ,eNr),e(wC,oNr),e(de,rNr),e(de,AC),e(AC,UEe),e(UEe,tNr),e(AC,aNr),e(AC,qZ),e(qZ,nNr),e(AC,sNr),e(de,lNr),e(de,LC),e(LC,JEe),e(JEe,iNr),e(LC,dNr),e(LC,jZ),e(jZ,cNr),e(LC,fNr),e(de,mNr),e(de,yC),e(yC,YEe),e(YEe,gNr),e(yC,hNr),e(yC,DZ),e(DZ,pNr),e(yC,_Nr),e(de,uNr),e(de,xC),e(xC,KEe),e(KEe,bNr),e(xC,vNr),e(xC,GZ),e(GZ,FNr),e(xC,TNr),e(de,MNr),e(de,$C),e($C,ZEe),e(ZEe,ENr),e($C,CNr),e($C,OZ),e(OZ,wNr),e($C,ANr),e(de,LNr),e(de,kC),e(kC,eCe),e(eCe,yNr),e(kC,xNr),e(kC,VZ),e(VZ,$Nr),e(kC,kNr),e(de,SNr),e(de,SC),e(SC,oCe),e(oCe,RNr),e(SC,PNr),e(SC,XZ),e(XZ,BNr),e(SC,INr),e(de,NNr),e(de,RC),e(RC,rCe),e(rCe,qNr),e(RC,jNr),e(RC,zZ),e(zZ,DNr),e(RC,GNr),e(Dr,ONr),M(PC,Dr,null),b(f,$We,u),b(f,Gc,u),e(Gc,BC),e(BC,tCe),M(s$,tCe,null),e(Gc,VNr),e(Gc,aCe),e(aCe,XNr),b(f,kWe,u),b(f,gr,u),M(l$,gr,null),e(gr,zNr),e(gr,Oc),e(Oc,WNr),e(Oc,WZ),e(WZ,QNr),e(Oc,HNr),e(Oc,QZ),e(QZ,UNr),e(Oc,JNr),e(gr,YNr),e(gr,i$),e(i$,KNr),e(i$,nCe),e(nCe,ZNr),e(i$,eqr),e(gr,oqr),e(gr,Xt),M(d$,Xt,null),e(Xt,rqr),e(Xt,sCe),e(sCe,tqr),e(Xt,aqr),e(Xt,Vc),e(Vc,nqr),e(Vc,lCe),e(lCe,sqr),e(Vc,lqr),e(Vc,HZ),e(HZ,iqr),e(Vc,dqr),e(Xt,cqr),M(IC,Xt,null),e(gr,fqr),e(gr,Gr),M(c$,Gr,null),e(Gr,mqr),e(Gr,iCe),e(iCe,gqr),e(Gr,hqr),e(Gr,bn),e(bn,pqr),e(bn,dCe),e(dCe,_qr),e(bn,uqr),e(bn,cCe),e(cCe,bqr),e(bn,vqr),e(bn,fCe),e(fCe,Fqr),e(bn,Tqr),e(Gr,Mqr),e(Gr,ce),e(ce,NC),e(NC,mCe),e(mCe,Eqr),e(NC,Cqr),e(NC,UZ),e(UZ,wqr),e(NC,Aqr),e(ce,Lqr),e(ce,qC),e(qC,gCe),e(gCe,yqr),e(qC,xqr),e(qC,JZ),e(JZ,$qr),e(qC,kqr),e(ce,Sqr),e(ce,jC),e(jC,hCe),e(hCe,Rqr),e(jC,Pqr),e(jC,YZ),e(YZ,Bqr),e(jC,Iqr),e(ce,Nqr),e(ce,DC),e(DC,pCe),e(pCe,qqr),e(DC,jqr),e(DC,KZ),e(KZ,Dqr),e(DC,Gqr),e(ce,Oqr),e(ce,GC),e(GC,_Ce),e(_Ce,Vqr),e(GC,Xqr),e(GC,ZZ),e(ZZ,zqr),e(GC,Wqr),e(ce,Qqr),e(ce,OC),e(OC,uCe),e(uCe,Hqr),e(OC,Uqr),e(OC,eee),e(eee,Jqr),e(OC,Yqr),e(ce,Kqr),e(ce,VC),e(VC,bCe),e(bCe,Zqr),e(VC,ejr),e(VC,oee),e(oee,ojr),e(VC,rjr),e(ce,tjr),e(ce,XC),e(XC,vCe),e(vCe,ajr),e(XC,njr),e(XC,ree),e(ree,sjr),e(XC,ljr),e(ce,ijr),e(ce,zC),e(zC,FCe),e(FCe,djr),e(zC,cjr),e(zC,tee),e(tee,fjr),e(zC,mjr),e(ce,gjr),e(ce,WC),e(WC,TCe),e(TCe,hjr),e(WC,pjr),e(WC,aee),e(aee,_jr),e(WC,ujr),e(ce,bjr),e(ce,QC),e(QC,MCe),e(MCe,vjr),e(QC,Fjr),e(QC,nee),e(nee,Tjr),e(QC,Mjr),e(ce,Ejr),e(ce,HC),e(HC,ECe),e(ECe,Cjr),e(HC,wjr),e(HC,see),e(see,Ajr),e(HC,Ljr),e(ce,yjr),e(ce,UC),e(UC,CCe),e(CCe,xjr),e(UC,$jr),e(UC,lee),e(lee,kjr),e(UC,Sjr),e(ce,Rjr),e(ce,JC),e(JC,wCe),e(wCe,Pjr),e(JC,Bjr),e(JC,iee),e(iee,Ijr),e(JC,Njr),e(ce,qjr),e(ce,YC),e(YC,ACe),e(ACe,jjr),e(YC,Djr),e(YC,dee),e(dee,Gjr),e(YC,Ojr),e(ce,Vjr),e(ce,KC),e(KC,LCe),e(LCe,Xjr),e(KC,zjr),e(KC,cee),e(cee,Wjr),e(KC,Qjr),e(ce,Hjr),e(ce,ZC),e(ZC,yCe),e(yCe,Ujr),e(ZC,Jjr),e(ZC,fee),e(fee,Yjr),e(ZC,Kjr),e(ce,Zjr),e(ce,e5),e(e5,xCe),e(xCe,eDr),e(e5,oDr),e(e5,mee),e(mee,rDr),e(e5,tDr),e(ce,aDr),e(ce,o5),e(o5,$Ce),e($Ce,nDr),e(o5,sDr),e(o5,gee),e(gee,lDr),e(o5,iDr),e(ce,dDr),e(ce,r5),e(r5,kCe),e(kCe,cDr),e(r5,fDr),e(r5,hee),e(hee,mDr),e(r5,gDr),e(Gr,hDr),M(t5,Gr,null),b(f,SWe,u),b(f,Xc,u),e(Xc,a5),e(a5,SCe),M(f$,SCe,null),e(Xc,pDr),e(Xc,RCe),e(RCe,_Dr),b(f,RWe,u),b(f,hr,u),M(m$,hr,null),e(hr,uDr),e(hr,zc),e(zc,bDr),e(zc,pee),e(pee,vDr),e(zc,FDr),e(zc,_ee),e(_ee,TDr),e(zc,MDr),e(hr,EDr),e(hr,g$),e(g$,CDr),e(g$,PCe),e(PCe,wDr),e(g$,ADr),e(hr,LDr),e(hr,zt),M(h$,zt,null),e(zt,yDr),e(zt,BCe),e(BCe,xDr),e(zt,$Dr),e(zt,Wc),e(Wc,kDr),e(Wc,ICe),e(ICe,SDr),e(Wc,RDr),e(Wc,uee),e(uee,PDr),e(Wc,BDr),e(zt,IDr),M(n5,zt,null),e(hr,NDr),e(hr,Or),M(p$,Or,null),e(Or,qDr),e(Or,NCe),e(NCe,jDr),e(Or,DDr),e(Or,vn),e(vn,GDr),e(vn,qCe),e(qCe,ODr),e(vn,VDr),e(vn,jCe),e(jCe,XDr),e(vn,zDr),e(vn,DCe),e(DCe,WDr),e(vn,QDr),e(Or,HDr),e(Or,GCe),e(GCe,s5),e(s5,OCe),e(OCe,UDr),e(s5,JDr),e(s5,bee),e(bee,YDr),e(s5,KDr),e(Or,ZDr),M(l5,Or,null),b(f,PWe,u),b(f,Qc,u),e(Qc,i5),e(i5,VCe),M(_$,VCe,null),e(Qc,eGr),e(Qc,XCe),e(XCe,oGr),b(f,BWe,u),b(f,pr,u),M(u$,pr,null),e(pr,rGr),e(pr,Hc),e(Hc,tGr),e(Hc,vee),e(vee,aGr),e(Hc,nGr),e(Hc,Fee),e(Fee,sGr),e(Hc,lGr),e(pr,iGr),e(pr,b$),e(b$,dGr),e(b$,zCe),e(zCe,cGr),e(b$,fGr),e(pr,mGr),e(pr,Wt),M(v$,Wt,null),e(Wt,gGr),e(Wt,WCe),e(WCe,hGr),e(Wt,pGr),e(Wt,Uc),e(Uc,_Gr),e(Uc,QCe),e(QCe,uGr),e(Uc,bGr),e(Uc,Tee),e(Tee,vGr),e(Uc,FGr),e(Wt,TGr),M(d5,Wt,null),e(pr,MGr),e(pr,Vr),M(F$,Vr,null),e(Vr,EGr),e(Vr,HCe),e(HCe,CGr),e(Vr,wGr),e(Vr,Fn),e(Fn,AGr),e(Fn,UCe),e(UCe,LGr),e(Fn,yGr),e(Fn,JCe),e(JCe,xGr),e(Fn,$Gr),e(Fn,YCe),e(YCe,kGr),e(Fn,SGr),e(Vr,RGr),e(Vr,KCe),e(KCe,c5),e(c5,ZCe),e(ZCe,PGr),e(c5,BGr),e(c5,Mee),e(Mee,IGr),e(c5,NGr),e(Vr,qGr),M(f5,Vr,null),b(f,IWe,u),b(f,Jc,u),e(Jc,m5),e(m5,e5e),M(T$,e5e,null),e(Jc,jGr),e(Jc,o5e),e(o5e,DGr),b(f,NWe,u),b(f,_r,u),M(M$,_r,null),e(_r,GGr),e(_r,Yc),e(Yc,OGr),e(Yc,Eee),e(Eee,VGr),e(Yc,XGr),e(Yc,Cee),e(Cee,zGr),e(Yc,WGr),e(_r,QGr),e(_r,E$),e(E$,HGr),e(E$,r5e),e(r5e,UGr),e(E$,JGr),e(_r,YGr),e(_r,Qt),M(C$,Qt,null),e(Qt,KGr),e(Qt,t5e),e(t5e,ZGr),e(Qt,eOr),e(Qt,Kc),e(Kc,oOr),e(Kc,a5e),e(a5e,rOr),e(Kc,tOr),e(Kc,wee),e(wee,aOr),e(Kc,nOr),e(Qt,sOr),M(g5,Qt,null),e(_r,lOr),e(_r,Xr),M(w$,Xr,null),e(Xr,iOr),e(Xr,n5e),e(n5e,dOr),e(Xr,cOr),e(Xr,Tn),e(Tn,fOr),e(Tn,s5e),e(s5e,mOr),e(Tn,gOr),e(Tn,l5e),e(l5e,hOr),e(Tn,pOr),e(Tn,i5e),e(i5e,_Or),e(Tn,uOr),e(Xr,bOr),e(Xr,oe),e(oe,h5),e(h5,d5e),e(d5e,vOr),e(h5,FOr),e(h5,Aee),e(Aee,TOr),e(h5,MOr),e(oe,EOr),e(oe,p5),e(p5,c5e),e(c5e,COr),e(p5,wOr),e(p5,Lee),e(Lee,AOr),e(p5,LOr),e(oe,yOr),e(oe,_5),e(_5,f5e),e(f5e,xOr),e(_5,$Or),e(_5,yee),e(yee,kOr),e(_5,SOr),e(oe,ROr),e(oe,u5),e(u5,m5e),e(m5e,POr),e(u5,BOr),e(u5,xee),e(xee,IOr),e(u5,NOr),e(oe,qOr),e(oe,b5),e(b5,g5e),e(g5e,jOr),e(b5,DOr),e(b5,$ee),e($ee,GOr),e(b5,OOr),e(oe,VOr),e(oe,v5),e(v5,h5e),e(h5e,XOr),e(v5,zOr),e(v5,kee),e(kee,WOr),e(v5,QOr),e(oe,HOr),e(oe,F5),e(F5,p5e),e(p5e,UOr),e(F5,JOr),e(F5,See),e(See,YOr),e(F5,KOr),e(oe,ZOr),e(oe,T5),e(T5,_5e),e(_5e,eVr),e(T5,oVr),e(T5,Ree),e(Ree,rVr),e(T5,tVr),e(oe,aVr),e(oe,M5),e(M5,u5e),e(u5e,nVr),e(M5,sVr),e(M5,Pee),e(Pee,lVr),e(M5,iVr),e(oe,dVr),e(oe,E5),e(E5,b5e),e(b5e,cVr),e(E5,fVr),e(E5,Bee),e(Bee,mVr),e(E5,gVr),e(oe,hVr),e(oe,C5),e(C5,v5e),e(v5e,pVr),e(C5,_Vr),e(C5,Iee),e(Iee,uVr),e(C5,bVr),e(oe,vVr),e(oe,w5),e(w5,F5e),e(F5e,FVr),e(w5,TVr),e(w5,Nee),e(Nee,MVr),e(w5,EVr),e(oe,CVr),e(oe,A5),e(A5,T5e),e(T5e,wVr),e(A5,AVr),e(A5,qee),e(qee,LVr),e(A5,yVr),e(oe,xVr),e(oe,L5),e(L5,M5e),e(M5e,$Vr),e(L5,kVr),e(L5,jee),e(jee,SVr),e(L5,RVr),e(oe,PVr),e(oe,y5),e(y5,E5e),e(E5e,BVr),e(y5,IVr),e(y5,Dee),e(Dee,NVr),e(y5,qVr),e(oe,jVr),e(oe,x5),e(x5,C5e),e(C5e,DVr),e(x5,GVr),e(x5,Gee),e(Gee,OVr),e(x5,VVr),e(oe,XVr),e(oe,$5),e($5,w5e),e(w5e,zVr),e($5,WVr),e($5,Oee),e(Oee,QVr),e($5,HVr),e(oe,UVr),e(oe,k5),e(k5,A5e),e(A5e,JVr),e(k5,YVr),e(k5,Vee),e(Vee,KVr),e(k5,ZVr),e(oe,eXr),e(oe,S5),e(S5,L5e),e(L5e,oXr),e(S5,rXr),e(S5,Xee),e(Xee,tXr),e(S5,aXr),e(oe,nXr),e(oe,R5),e(R5,y5e),e(y5e,sXr),e(R5,lXr),e(R5,zee),e(zee,iXr),e(R5,dXr),e(oe,cXr),e(oe,P5),e(P5,x5e),e(x5e,fXr),e(P5,mXr),e(P5,Wee),e(Wee,gXr),e(P5,hXr),e(oe,pXr),e(oe,B5),e(B5,$5e),e($5e,_Xr),e(B5,uXr),e(B5,Qee),e(Qee,bXr),e(B5,vXr),e(oe,FXr),e(oe,I5),e(I5,k5e),e(k5e,TXr),e(I5,MXr),e(I5,Hee),e(Hee,EXr),e(I5,CXr),e(oe,wXr),e(oe,N5),e(N5,S5e),e(S5e,AXr),e(N5,LXr),e(N5,Uee),e(Uee,yXr),e(N5,xXr),e(oe,$Xr),e(oe,q5),e(q5,R5e),e(R5e,kXr),e(q5,SXr),e(q5,Jee),e(Jee,RXr),e(q5,PXr),e(oe,BXr),e(oe,j5),e(j5,P5e),e(P5e,IXr),e(j5,NXr),e(j5,Yee),e(Yee,qXr),e(j5,jXr),e(oe,DXr),e(oe,D5),e(D5,B5e),e(B5e,GXr),e(D5,OXr),e(D5,Kee),e(Kee,VXr),e(D5,XXr),e(Xr,zXr),M(G5,Xr,null),b(f,qWe,u),b(f,Zc,u),e(Zc,O5),e(O5,I5e),M(A$,I5e,null),e(Zc,WXr),e(Zc,N5e),e(N5e,QXr),b(f,jWe,u),b(f,ur,u),M(L$,ur,null),e(ur,HXr),e(ur,ef),e(ef,UXr),e(ef,Zee),e(Zee,JXr),e(ef,YXr),e(ef,eoe),e(eoe,KXr),e(ef,ZXr),e(ur,ezr),e(ur,y$),e(y$,ozr),e(y$,q5e),e(q5e,rzr),e(y$,tzr),e(ur,azr),e(ur,Ht),M(x$,Ht,null),e(Ht,nzr),e(Ht,j5e),e(j5e,szr),e(Ht,lzr),e(Ht,of),e(of,izr),e(of,D5e),e(D5e,dzr),e(of,czr),e(of,ooe),e(ooe,fzr),e(of,mzr),e(Ht,gzr),M(V5,Ht,null),e(ur,hzr),e(ur,zr),M($$,zr,null),e(zr,pzr),e(zr,G5e),e(G5e,_zr),e(zr,uzr),e(zr,Mn),e(Mn,bzr),e(Mn,O5e),e(O5e,vzr),e(Mn,Fzr),e(Mn,V5e),e(V5e,Tzr),e(Mn,Mzr),e(Mn,X5e),e(X5e,Ezr),e(Mn,Czr),e(zr,wzr),e(zr,xe),e(xe,X5),e(X5,z5e),e(z5e,Azr),e(X5,Lzr),e(X5,roe),e(roe,yzr),e(X5,xzr),e(xe,$zr),e(xe,z5),e(z5,W5e),e(W5e,kzr),e(z5,Szr),e(z5,toe),e(toe,Rzr),e(z5,Pzr),e(xe,Bzr),e(xe,W5),e(W5,Q5e),e(Q5e,Izr),e(W5,Nzr),e(W5,aoe),e(aoe,qzr),e(W5,jzr),e(xe,Dzr),e(xe,Q5),e(Q5,H5e),e(H5e,Gzr),e(Q5,Ozr),e(Q5,noe),e(noe,Vzr),e(Q5,Xzr),e(xe,zzr),e(xe,H5),e(H5,U5e),e(U5e,Wzr),e(H5,Qzr),e(H5,soe),e(soe,Hzr),e(H5,Uzr),e(xe,Jzr),e(xe,U5),e(U5,J5e),e(J5e,Yzr),e(U5,Kzr),e(U5,loe),e(loe,Zzr),e(U5,eWr),e(xe,oWr),e(xe,J5),e(J5,Y5e),e(Y5e,rWr),e(J5,tWr),e(J5,ioe),e(ioe,aWr),e(J5,nWr),e(xe,sWr),e(xe,Y5),e(Y5,K5e),e(K5e,lWr),e(Y5,iWr),e(Y5,doe),e(doe,dWr),e(Y5,cWr),e(xe,fWr),e(xe,K5),e(K5,Z5e),e(Z5e,mWr),e(K5,gWr),e(K5,coe),e(coe,hWr),e(K5,pWr),e(xe,_Wr),e(xe,Z5),e(Z5,e3e),e(e3e,uWr),e(Z5,bWr),e(Z5,foe),e(foe,vWr),e(Z5,FWr),e(zr,TWr),M(e3,zr,null),b(f,DWe,u),b(f,rf,u),e(rf,o3),e(o3,o3e),M(k$,o3e,null),e(rf,MWr),e(rf,r3e),e(r3e,EWr),b(f,GWe,u),b(f,br,u),M(S$,br,null),e(br,CWr),e(br,tf),e(tf,wWr),e(tf,moe),e(moe,AWr),e(tf,LWr),e(tf,goe),e(goe,yWr),e(tf,xWr),e(br,$Wr),e(br,R$),e(R$,kWr),e(R$,t3e),e(t3e,SWr),e(R$,RWr),e(br,PWr),e(br,Ut),M(P$,Ut,null),e(Ut,BWr),e(Ut,a3e),e(a3e,IWr),e(Ut,NWr),e(Ut,af),e(af,qWr),e(af,n3e),e(n3e,jWr),e(af,DWr),e(af,hoe),e(hoe,GWr),e(af,OWr),e(Ut,VWr),M(r3,Ut,null),e(br,XWr),e(br,Wr),M(B$,Wr,null),e(Wr,zWr),e(Wr,s3e),e(s3e,WWr),e(Wr,QWr),e(Wr,En),e(En,HWr),e(En,l3e),e(l3e,UWr),e(En,JWr),e(En,i3e),e(i3e,YWr),e(En,KWr),e(En,d3e),e(d3e,ZWr),e(En,eQr),e(Wr,oQr),e(Wr,Ee),e(Ee,t3),e(t3,c3e),e(c3e,rQr),e(t3,tQr),e(t3,poe),e(poe,aQr),e(t3,nQr),e(Ee,sQr),e(Ee,a3),e(a3,f3e),e(f3e,lQr),e(a3,iQr),e(a3,_oe),e(_oe,dQr),e(a3,cQr),e(Ee,fQr),e(Ee,n3),e(n3,m3e),e(m3e,mQr),e(n3,gQr),e(n3,uoe),e(uoe,hQr),e(n3,pQr),e(Ee,_Qr),e(Ee,s3),e(s3,g3e),e(g3e,uQr),e(s3,bQr),e(s3,boe),e(boe,vQr),e(s3,FQr),e(Ee,TQr),e(Ee,l3),e(l3,h3e),e(h3e,MQr),e(l3,EQr),e(l3,voe),e(voe,CQr),e(l3,wQr),e(Ee,AQr),e(Ee,i3),e(i3,p3e),e(p3e,LQr),e(i3,yQr),e(i3,Foe),e(Foe,xQr),e(i3,$Qr),e(Ee,kQr),e(Ee,d3),e(d3,_3e),e(_3e,SQr),e(d3,RQr),e(d3,Toe),e(Toe,PQr),e(d3,BQr),e(Ee,IQr),e(Ee,c3),e(c3,u3e),e(u3e,NQr),e(c3,qQr),e(c3,Moe),e(Moe,jQr),e(c3,DQr),e(Ee,GQr),e(Ee,f3),e(f3,b3e),e(b3e,OQr),e(f3,VQr),e(f3,Eoe),e(Eoe,XQr),e(f3,zQr),e(Ee,WQr),e(Ee,m3),e(m3,v3e),e(v3e,QQr),e(m3,HQr),e(m3,Coe),e(Coe,UQr),e(m3,JQr),e(Ee,YQr),e(Ee,g3),e(g3,F3e),e(F3e,KQr),e(g3,ZQr),e(g3,woe),e(woe,eHr),e(g3,oHr),e(Ee,rHr),e(Ee,h3),e(h3,T3e),e(T3e,tHr),e(h3,aHr),e(h3,Aoe),e(Aoe,nHr),e(h3,sHr),e(Ee,lHr),e(Ee,p3),e(p3,M3e),e(M3e,iHr),e(p3,dHr),e(p3,Loe),e(Loe,cHr),e(p3,fHr),e(Wr,mHr),M(_3,Wr,null),b(f,OWe,u),b(f,nf,u),e(nf,u3),e(u3,E3e),M(I$,E3e,null),e(nf,gHr),e(nf,C3e),e(C3e,hHr),b(f,VWe,u),b(f,vr,u),M(N$,vr,null),e(vr,pHr),e(vr,sf),e(sf,_Hr),e(sf,yoe),e(yoe,uHr),e(sf,bHr),e(sf,xoe),e(xoe,vHr),e(sf,FHr),e(vr,THr),e(vr,q$),e(q$,MHr),e(q$,w3e),e(w3e,EHr),e(q$,CHr),e(vr,wHr),e(vr,Jt),M(j$,Jt,null),e(Jt,AHr),e(Jt,A3e),e(A3e,LHr),e(Jt,yHr),e(Jt,lf),e(lf,xHr),e(lf,L3e),e(L3e,$Hr),e(lf,kHr),e(lf,$oe),e($oe,SHr),e(lf,RHr),e(Jt,PHr),M(b3,Jt,null),e(vr,BHr),e(vr,Qr),M(D$,Qr,null),e(Qr,IHr),e(Qr,y3e),e(y3e,NHr),e(Qr,qHr),e(Qr,Cn),e(Cn,jHr),e(Cn,x3e),e(x3e,DHr),e(Cn,GHr),e(Cn,$3e),e($3e,OHr),e(Cn,VHr),e(Cn,k3e),e(k3e,XHr),e(Cn,zHr),e(Qr,WHr),e(Qr,$e),e($e,v3),e(v3,S3e),e(S3e,QHr),e(v3,HHr),e(v3,koe),e(koe,UHr),e(v3,JHr),e($e,YHr),e($e,F3),e(F3,R3e),e(R3e,KHr),e(F3,ZHr),e(F3,Soe),e(Soe,eUr),e(F3,oUr),e($e,rUr),e($e,T3),e(T3,P3e),e(P3e,tUr),e(T3,aUr),e(T3,Roe),e(Roe,nUr),e(T3,sUr),e($e,lUr),e($e,M3),e(M3,B3e),e(B3e,iUr),e(M3,dUr),e(M3,Poe),e(Poe,cUr),e(M3,fUr),e($e,mUr),e($e,E3),e(E3,I3e),e(I3e,gUr),e(E3,hUr),e(E3,Boe),e(Boe,pUr),e(E3,_Ur),e($e,uUr),e($e,C3),e(C3,N3e),e(N3e,bUr),e(C3,vUr),e(C3,Ioe),e(Ioe,FUr),e(C3,TUr),e($e,MUr),e($e,w3),e(w3,q3e),e(q3e,EUr),e(w3,CUr),e(w3,Noe),e(Noe,wUr),e(w3,AUr),e($e,LUr),e($e,A3),e(A3,j3e),e(j3e,yUr),e(A3,xUr),e(A3,qoe),e(qoe,$Ur),e(A3,kUr),e($e,SUr),e($e,L3),e(L3,D3e),e(D3e,RUr),e(L3,PUr),e(L3,joe),e(joe,BUr),e(L3,IUr),e($e,NUr),e($e,y3),e(y3,G3e),e(G3e,qUr),e(y3,jUr),e(y3,Doe),e(Doe,DUr),e(y3,GUr),e(Qr,OUr),M(x3,Qr,null),b(f,XWe,u),b(f,df,u),e(df,$3),e($3,O3e),M(G$,O3e,null),e(df,VUr),e(df,V3e),e(V3e,XUr),b(f,zWe,u),b(f,Fr,u),M(O$,Fr,null),e(Fr,zUr),e(Fr,cf),e(cf,WUr),e(cf,Goe),e(Goe,QUr),e(cf,HUr),e(cf,Ooe),e(Ooe,UUr),e(cf,JUr),e(Fr,YUr),e(Fr,V$),e(V$,KUr),e(V$,X3e),e(X3e,ZUr),e(V$,eJr),e(Fr,oJr),e(Fr,Yt),M(X$,Yt,null),e(Yt,rJr),e(Yt,z3e),e(z3e,tJr),e(Yt,aJr),e(Yt,ff),e(ff,nJr),e(ff,W3e),e(W3e,sJr),e(ff,lJr),e(ff,Voe),e(Voe,iJr),e(ff,dJr),e(Yt,cJr),M(k3,Yt,null),e(Fr,fJr),e(Fr,Hr),M(z$,Hr,null),e(Hr,mJr),e(Hr,Q3e),e(Q3e,gJr),e(Hr,hJr),e(Hr,wn),e(wn,pJr),e(wn,H3e),e(H3e,_Jr),e(wn,uJr),e(wn,U3e),e(U3e,bJr),e(wn,vJr),e(wn,J3e),e(J3e,FJr),e(wn,TJr),e(Hr,MJr),e(Hr,ke),e(ke,S3),e(S3,Y3e),e(Y3e,EJr),e(S3,CJr),e(S3,Xoe),e(Xoe,wJr),e(S3,AJr),e(ke,LJr),e(ke,R3),e(R3,K3e),e(K3e,yJr),e(R3,xJr),e(R3,zoe),e(zoe,$Jr),e(R3,kJr),e(ke,SJr),e(ke,P3),e(P3,Z3e),e(Z3e,RJr),e(P3,PJr),e(P3,Woe),e(Woe,BJr),e(P3,IJr),e(ke,NJr),e(ke,B3),e(B3,e0e),e(e0e,qJr),e(B3,jJr),e(B3,Qoe),e(Qoe,DJr),e(B3,GJr),e(ke,OJr),e(ke,I3),e(I3,o0e),e(o0e,VJr),e(I3,XJr),e(I3,Hoe),e(Hoe,zJr),e(I3,WJr),e(ke,QJr),e(ke,N3),e(N3,r0e),e(r0e,HJr),e(N3,UJr),e(N3,Uoe),e(Uoe,JJr),e(N3,YJr),e(ke,KJr),e(ke,q3),e(q3,t0e),e(t0e,ZJr),e(q3,eYr),e(q3,Joe),e(Joe,oYr),e(q3,rYr),e(ke,tYr),e(ke,j3),e(j3,a0e),e(a0e,aYr),e(j3,nYr),e(j3,Yoe),e(Yoe,sYr),e(j3,lYr),e(ke,iYr),e(ke,D3),e(D3,n0e),e(n0e,dYr),e(D3,cYr),e(D3,Koe),e(Koe,fYr),e(D3,mYr),e(ke,gYr),e(ke,G3),e(G3,s0e),e(s0e,hYr),e(G3,pYr),e(G3,Zoe),e(Zoe,_Yr),e(G3,uYr),e(Hr,bYr),M(O3,Hr,null),b(f,WWe,u),b(f,mf,u),e(mf,V3),e(V3,l0e),M(W$,l0e,null),e(mf,vYr),e(mf,i0e),e(i0e,FYr),b(f,QWe,u),b(f,Tr,u),M(Q$,Tr,null),e(Tr,TYr),e(Tr,gf),e(gf,MYr),e(gf,ere),e(ere,EYr),e(gf,CYr),e(gf,ore),e(ore,wYr),e(gf,AYr),e(Tr,LYr),e(Tr,H$),e(H$,yYr),e(H$,d0e),e(d0e,xYr),e(H$,$Yr),e(Tr,kYr),e(Tr,Kt),M(U$,Kt,null),e(Kt,SYr),e(Kt,c0e),e(c0e,RYr),e(Kt,PYr),e(Kt,hf),e(hf,BYr),e(hf,f0e),e(f0e,IYr),e(hf,NYr),e(hf,rre),e(rre,qYr),e(hf,jYr),e(Kt,DYr),M(X3,Kt,null),e(Tr,GYr),e(Tr,Ur),M(J$,Ur,null),e(Ur,OYr),e(Ur,m0e),e(m0e,VYr),e(Ur,XYr),e(Ur,An),e(An,zYr),e(An,g0e),e(g0e,WYr),e(An,QYr),e(An,h0e),e(h0e,HYr),e(An,UYr),e(An,p0e),e(p0e,JYr),e(An,YYr),e(Ur,KYr),e(Ur,Se),e(Se,z3),e(z3,_0e),e(_0e,ZYr),e(z3,eKr),e(z3,tre),e(tre,oKr),e(z3,rKr),e(Se,tKr),e(Se,W3),e(W3,u0e),e(u0e,aKr),e(W3,nKr),e(W3,are),e(are,sKr),e(W3,lKr),e(Se,iKr),e(Se,Q3),e(Q3,b0e),e(b0e,dKr),e(Q3,cKr),e(Q3,nre),e(nre,fKr),e(Q3,mKr),e(Se,gKr),e(Se,H3),e(H3,v0e),e(v0e,hKr),e(H3,pKr),e(H3,sre),e(sre,_Kr),e(H3,uKr),e(Se,bKr),e(Se,U3),e(U3,F0e),e(F0e,vKr),e(U3,FKr),e(U3,lre),e(lre,TKr),e(U3,MKr),e(Se,EKr),e(Se,J3),e(J3,T0e),e(T0e,CKr),e(J3,wKr),e(J3,ire),e(ire,AKr),e(J3,LKr),e(Se,yKr),e(Se,Y3),e(Y3,M0e),e(M0e,xKr),e(Y3,$Kr),e(Y3,dre),e(dre,kKr),e(Y3,SKr),e(Se,RKr),e(Se,K3),e(K3,E0e),e(E0e,PKr),e(K3,BKr),e(K3,cre),e(cre,IKr),e(K3,NKr),e(Se,qKr),e(Se,Z3),e(Z3,C0e),e(C0e,jKr),e(Z3,DKr),e(Z3,fre),e(fre,GKr),e(Z3,OKr),e(Se,VKr),e(Se,e0),e(e0,w0e),e(w0e,XKr),e(e0,zKr),e(e0,mre),e(mre,WKr),e(e0,QKr),e(Ur,HKr),M(o0,Ur,null),b(f,HWe,u),b(f,pf,u),e(pf,r0),e(r0,A0e),M(Y$,A0e,null),e(pf,UKr),e(pf,L0e),e(L0e,JKr),b(f,UWe,u),b(f,Mr,u),M(K$,Mr,null),e(Mr,YKr),e(Mr,_f),e(_f,KKr),e(_f,gre),e(gre,ZKr),e(_f,eZr),e(_f,hre),e(hre,oZr),e(_f,rZr),e(Mr,tZr),e(Mr,Z$),e(Z$,aZr),e(Z$,y0e),e(y0e,nZr),e(Z$,sZr),e(Mr,lZr),e(Mr,Zt),M(ek,Zt,null),e(Zt,iZr),e(Zt,x0e),e(x0e,dZr),e(Zt,cZr),e(Zt,uf),e(uf,fZr),e(uf,$0e),e($0e,mZr),e(uf,gZr),e(uf,pre),e(pre,hZr),e(uf,pZr),e(Zt,_Zr),M(t0,Zt,null),e(Mr,uZr),e(Mr,Jr),M(ok,Jr,null),e(Jr,bZr),e(Jr,k0e),e(k0e,vZr),e(Jr,FZr),e(Jr,Ln),e(Ln,TZr),e(Ln,S0e),e(S0e,MZr),e(Ln,EZr),e(Ln,R0e),e(R0e,CZr),e(Ln,wZr),e(Ln,P0e),e(P0e,AZr),e(Ln,LZr),e(Jr,yZr),e(Jr,Re),e(Re,a0),e(a0,B0e),e(B0e,xZr),e(a0,$Zr),e(a0,_re),e(_re,kZr),e(a0,SZr),e(Re,RZr),e(Re,n0),e(n0,I0e),e(I0e,PZr),e(n0,BZr),e(n0,ure),e(ure,IZr),e(n0,NZr),e(Re,qZr),e(Re,s0),e(s0,N0e),e(N0e,jZr),e(s0,DZr),e(s0,bre),e(bre,GZr),e(s0,OZr),e(Re,VZr),e(Re,l0),e(l0,q0e),e(q0e,XZr),e(l0,zZr),e(l0,vre),e(vre,WZr),e(l0,QZr),e(Re,HZr),e(Re,i0),e(i0,j0e),e(j0e,UZr),e(i0,JZr),e(i0,Fre),e(Fre,YZr),e(i0,KZr),e(Re,ZZr),e(Re,d0),e(d0,D0e),e(D0e,eet),e(d0,oet),e(d0,Tre),e(Tre,ret),e(d0,tet),e(Re,aet),e(Re,c0),e(c0,G0e),e(G0e,net),e(c0,set),e(c0,Mre),e(Mre,iet),e(c0,det),e(Re,cet),e(Re,f0),e(f0,O0e),e(O0e,fet),e(f0,met),e(f0,Ere),e(Ere,get),e(f0,het),e(Re,pet),e(Re,m0),e(m0,V0e),e(V0e,_et),e(m0,uet),e(m0,Cre),e(Cre,bet),e(m0,vet),e(Re,Fet),e(Re,g0),e(g0,X0e),e(X0e,Tet),e(g0,Met),e(g0,wre),e(wre,Eet),e(g0,Cet),e(Jr,wet),M(h0,Jr,null),b(f,JWe,u),b(f,bf,u),e(bf,p0),e(p0,z0e),M(rk,z0e,null),e(bf,Aet),e(bf,W0e),e(W0e,Let),b(f,YWe,u),b(f,Er,u),M(tk,Er,null),e(Er,yet),e(Er,vf),e(vf,xet),e(vf,Are),e(Are,$et),e(vf,ket),e(vf,Lre),e(Lre,Set),e(vf,Ret),e(Er,Pet),e(Er,ak),e(ak,Bet),e(ak,Q0e),e(Q0e,Iet),e(ak,Net),e(Er,qet),e(Er,ea),M(nk,ea,null),e(ea,jet),e(ea,H0e),e(H0e,Det),e(ea,Get),e(ea,Ff),e(Ff,Oet),e(Ff,U0e),e(U0e,Vet),e(Ff,Xet),e(Ff,yre),e(yre,zet),e(Ff,Wet),e(ea,Qet),M(_0,ea,null),e(Er,Het),e(Er,Yr),M(sk,Yr,null),e(Yr,Uet),e(Yr,J0e),e(J0e,Jet),e(Yr,Yet),e(Yr,yn),e(yn,Ket),e(yn,Y0e),e(Y0e,Zet),e(yn,eot),e(yn,K0e),e(K0e,oot),e(yn,rot),e(yn,Z0e),e(Z0e,tot),e(yn,aot),e(Yr,not),e(Yr,Xe),e(Xe,u0),e(u0,ewe),e(ewe,sot),e(u0,lot),e(u0,xre),e(xre,iot),e(u0,dot),e(Xe,cot),e(Xe,b0),e(b0,owe),e(owe,fot),e(b0,mot),e(b0,$re),e($re,got),e(b0,hot),e(Xe,pot),e(Xe,v0),e(v0,rwe),e(rwe,_ot),e(v0,uot),e(v0,kre),e(kre,bot),e(v0,vot),e(Xe,Fot),e(Xe,F0),e(F0,twe),e(twe,Tot),e(F0,Mot),e(F0,Sre),e(Sre,Eot),e(F0,Cot),e(Xe,wot),e(Xe,T0),e(T0,awe),e(awe,Aot),e(T0,Lot),e(T0,Rre),e(Rre,yot),e(T0,xot),e(Xe,$ot),e(Xe,M0),e(M0,nwe),e(nwe,kot),e(M0,Sot),e(M0,Pre),e(Pre,Rot),e(M0,Pot),e(Xe,Bot),e(Xe,E0),e(E0,swe),e(swe,Iot),e(E0,Not),e(E0,Bre),e(Bre,qot),e(E0,jot),e(Xe,Dot),e(Xe,C0),e(C0,lwe),e(lwe,Got),e(C0,Oot),e(C0,Ire),e(Ire,Vot),e(C0,Xot),e(Yr,zot),M(w0,Yr,null),b(f,KWe,u),b(f,Tf,u),e(Tf,A0),e(A0,iwe),M(lk,iwe,null),e(Tf,Wot),e(Tf,dwe),e(dwe,Qot),b(f,ZWe,u),b(f,Cr,u),M(ik,Cr,null),e(Cr,Hot),e(Cr,Mf),e(Mf,Uot),e(Mf,Nre),e(Nre,Jot),e(Mf,Yot),e(Mf,qre),e(qre,Kot),e(Mf,Zot),e(Cr,ert),e(Cr,dk),e(dk,ort),e(dk,cwe),e(cwe,rrt),e(dk,trt),e(Cr,art),e(Cr,oa),M(ck,oa,null),e(oa,nrt),e(oa,fwe),e(fwe,srt),e(oa,lrt),e(oa,Ef),e(Ef,irt),e(Ef,mwe),e(mwe,drt),e(Ef,crt),e(Ef,jre),e(jre,frt),e(Ef,mrt),e(oa,grt),M(L0,oa,null),e(Cr,hrt),e(Cr,Kr),M(fk,Kr,null),e(Kr,prt),e(Kr,gwe),e(gwe,_rt),e(Kr,urt),e(Kr,xn),e(xn,brt),e(xn,hwe),e(hwe,vrt),e(xn,Frt),e(xn,pwe),e(pwe,Trt),e(xn,Mrt),e(xn,_we),e(_we,Ert),e(xn,Crt),e(Kr,wrt),e(Kr,ze),e(ze,y0),e(y0,uwe),e(uwe,Art),e(y0,Lrt),e(y0,Dre),e(Dre,yrt),e(y0,xrt),e(ze,$rt),e(ze,x0),e(x0,bwe),e(bwe,krt),e(x0,Srt),e(x0,Gre),e(Gre,Rrt),e(x0,Prt),e(ze,Brt),e(ze,$0),e($0,vwe),e(vwe,Irt),e($0,Nrt),e($0,Ore),e(Ore,qrt),e($0,jrt),e(ze,Drt),e(ze,k0),e(k0,Fwe),e(Fwe,Grt),e(k0,Ort),e(k0,Vre),e(Vre,Vrt),e(k0,Xrt),e(ze,zrt),e(ze,S0),e(S0,Twe),e(Twe,Wrt),e(S0,Qrt),e(S0,Xre),e(Xre,Hrt),e(S0,Urt),e(ze,Jrt),e(ze,R0),e(R0,Mwe),e(Mwe,Yrt),e(R0,Krt),e(R0,zre),e(zre,Zrt),e(R0,ett),e(ze,ott),e(ze,P0),e(P0,Ewe),e(Ewe,rtt),e(P0,ttt),e(P0,Wre),e(Wre,att),e(P0,ntt),e(ze,stt),e(ze,B0),e(B0,Cwe),e(Cwe,ltt),e(B0,itt),e(B0,Qre),e(Qre,dtt),e(B0,ctt),e(Kr,ftt),M(I0,Kr,null),b(f,eQe,u),b(f,Cf,u),e(Cf,N0),e(N0,wwe),M(mk,wwe,null),e(Cf,mtt),e(Cf,Awe),e(Awe,gtt),b(f,oQe,u),b(f,wr,u),M(gk,wr,null),e(wr,htt),e(wr,wf),e(wf,ptt),e(wf,Hre),e(Hre,_tt),e(wf,utt),e(wf,Ure),e(Ure,btt),e(wf,vtt),e(wr,Ftt),e(wr,hk),e(hk,Ttt),e(hk,Lwe),e(Lwe,Mtt),e(hk,Ett),e(wr,Ctt),e(wr,ra),M(pk,ra,null),e(ra,wtt),e(ra,ywe),e(ywe,Att),e(ra,Ltt),e(ra,Af),e(Af,ytt),e(Af,xwe),e(xwe,xtt),e(Af,$tt),e(Af,Jre),e(Jre,ktt),e(Af,Stt),e(ra,Rtt),M(q0,ra,null),e(wr,Ptt),e(wr,Zr),M(_k,Zr,null),e(Zr,Btt),e(Zr,$we),e($we,Itt),e(Zr,Ntt),e(Zr,$n),e($n,qtt),e($n,kwe),e(kwe,jtt),e($n,Dtt),e($n,Swe),e(Swe,Gtt),e($n,Ott),e($n,Rwe),e(Rwe,Vtt),e($n,Xtt),e(Zr,ztt),e(Zr,Pwe),e(Pwe,j0),e(j0,Bwe),e(Bwe,Wtt),e(j0,Qtt),e(j0,Yre),e(Yre,Htt),e(j0,Utt),e(Zr,Jtt),M(D0,Zr,null),b(f,rQe,u),b(f,Lf,u),e(Lf,G0),e(G0,Iwe),M(uk,Iwe,null),e(Lf,Ytt),e(Lf,Nwe),e(Nwe,Ktt),b(f,tQe,u),b(f,Ar,u),M(bk,Ar,null),e(Ar,Ztt),e(Ar,yf),e(yf,eat),e(yf,Kre),e(Kre,oat),e(yf,rat),e(yf,Zre),e(Zre,tat),e(yf,aat),e(Ar,nat),e(Ar,vk),e(vk,sat),e(vk,qwe),e(qwe,lat),e(vk,iat),e(Ar,dat),e(Ar,ta),M(Fk,ta,null),e(ta,cat),e(ta,jwe),e(jwe,fat),e(ta,mat),e(ta,xf),e(xf,gat),e(xf,Dwe),e(Dwe,hat),e(xf,pat),e(xf,ete),e(ete,_at),e(xf,uat),e(ta,bat),M(O0,ta,null),e(Ar,vat),e(Ar,et),M(Tk,et,null),e(et,Fat),e(et,Gwe),e(Gwe,Tat),e(et,Mat),e(et,kn),e(kn,Eat),e(kn,Owe),e(Owe,Cat),e(kn,wat),e(kn,Vwe),e(Vwe,Aat),e(kn,Lat),e(kn,Xwe),e(Xwe,yat),e(kn,xat),e(et,$at),e(et,Mk),e(Mk,V0),e(V0,zwe),e(zwe,kat),e(V0,Sat),e(V0,ote),e(ote,Rat),e(V0,Pat),e(Mk,Bat),e(Mk,X0),e(X0,Wwe),e(Wwe,Iat),e(X0,Nat),e(X0,rte),e(rte,qat),e(X0,jat),e(et,Dat),M(z0,et,null),b(f,aQe,u),b(f,$f,u),e($f,W0),e(W0,Qwe),M(Ek,Qwe,null),e($f,Gat),e($f,Hwe),e(Hwe,Oat),b(f,nQe,u),b(f,Lr,u),M(Ck,Lr,null),e(Lr,Vat),e(Lr,kf),e(kf,Xat),e(kf,tte),e(tte,zat),e(kf,Wat),e(kf,ate),e(ate,Qat),e(kf,Hat),e(Lr,Uat),e(Lr,wk),e(wk,Jat),e(wk,Uwe),e(Uwe,Yat),e(wk,Kat),e(Lr,Zat),e(Lr,aa),M(Ak,aa,null),e(aa,ent),e(aa,Jwe),e(Jwe,ont),e(aa,rnt),e(aa,Sf),e(Sf,tnt),e(Sf,Ywe),e(Ywe,ant),e(Sf,nnt),e(Sf,nte),e(nte,snt),e(Sf,lnt),e(aa,int),M(Q0,aa,null),e(Lr,dnt),e(Lr,ot),M(Lk,ot,null),e(ot,cnt),e(ot,Kwe),e(Kwe,fnt),e(ot,mnt),e(ot,Sn),e(Sn,gnt),e(Sn,Zwe),e(Zwe,hnt),e(Sn,pnt),e(Sn,eAe),e(eAe,_nt),e(Sn,unt),e(Sn,oAe),e(oAe,bnt),e(Sn,vnt),e(ot,Fnt),e(ot,rAe),e(rAe,H0),e(H0,tAe),e(tAe,Tnt),e(H0,Mnt),e(H0,ste),e(ste,Ent),e(H0,Cnt),e(ot,wnt),M(U0,ot,null),sQe=!0},p(f,[u]){const yk={};u&2&&(yk.$$scope={dirty:u,ctx:f}),Gf.$set(yk);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),oh.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),qh.$set(nAe);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),Mp.$set(sAe);const xk={};u&2&&(xk.$$scope={dirty:u,ctx:f}),Ep.$set(xk);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),zp.$set(lAe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Wp.$set(Rn);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),Up.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),r2.$set(dAe);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),a2.$set(cAe);const $k={};u&2&&($k.$$scope={dirty:u,ctx:f}),Y2.$set($k);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),Z2.$set(fAe);const kk={};u&2&&(kk.$$scope={dirty:u,ctx:f}),G1.$set(kk);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),V1.$set(mAe);const Sk={};u&2&&(Sk.$$scope={dirty:u,ctx:f}),xb.$set(Sk);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),kb.$set(gAe);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),Kb.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),ev.$set(pAe);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),Zv.$set(Rf);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),oF.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),RF.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),BF.$set(bAe);const Rk={};u&2&&(Rk.$$scope={dirty:u,ctx:f}),VF.$set(Rk);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),zF.$set(vAe);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),x6.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),k6.$set(TAe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),TT.$set(nt);const Pk={};u&2&&(Pk.$$scope={dirty:u,ctx:f}),ET.$set(Pk);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),AT.$set(MAe);const Bk={};u&2&&(Bk.$$scope={dirty:u,ctx:f}),yT.$set(Bk);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),VT.$set(EAe);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),zT.$set(st);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),HT.$set(CAe);const Pf={};u&2&&(Pf.$$scope={dirty:u,ctx:f}),JT.$set(Pf);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),ZT.$set(wAe);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),o7.$set(AAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),m7.$set(L);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),h7.$set(J0);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),T7.$set(LAe);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),E7.$set(yAe);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),B7.$set(Y0);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),N7.$set(xAe);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),G7.$set($Ae);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),V7.$set(K0);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),J7.$set(kAe);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),K7.$set(SAe);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),t8.$set(Z0);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),n8.$set(RAe);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),d8.$set(PAe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),f8.$set(ew);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),h8.$set(BAe);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),_8.$set(IAe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),E8.$set(ow);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),w8.$set(NAe);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),y8.$set(qAe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),$8.$set(rw);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),LM.$set(jAe);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),xM.$set(DAe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),ZM.$set(tw);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),o4.$set(GAe);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),p4.$set(OAe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),u4.$set(aw);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),w4.$set(VAe);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),L4.$set(XAe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),H4.$set(nw);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),J4.$set(zAe);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),lE.$set(WAe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),dE.$set(sw);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),IE.$set(QAe);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),qE.$set(HAe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),rC.$set(lw);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),aC.$set(UAe);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),lC.$set(JAe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),dC.$set(iw);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),fC.$set(YAe);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),gC.$set(KAe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),PC.$set(dw);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),IC.$set(ZAe);const eLe={};u&2&&(eLe.$$scope={dirty:u,ctx:f}),t5.$set(eLe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),n5.$set(cw);const oLe={};u&2&&(oLe.$$scope={dirty:u,ctx:f}),l5.$set(oLe);const rLe={};u&2&&(rLe.$$scope={dirty:u,ctx:f}),d5.$set(rLe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),f5.$set(fw);const tLe={};u&2&&(tLe.$$scope={dirty:u,ctx:f}),g5.$set(tLe);const aLe={};u&2&&(aLe.$$scope={dirty:u,ctx:f}),G5.$set(aLe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),V5.$set(mw);const nLe={};u&2&&(nLe.$$scope={dirty:u,ctx:f}),e3.$set(nLe);const sLe={};u&2&&(sLe.$$scope={dirty:u,ctx:f}),r3.$set(sLe);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),_3.$set(gw);const lLe={};u&2&&(lLe.$$scope={dirty:u,ctx:f}),b3.$set(lLe);const iLe={};u&2&&(iLe.$$scope={dirty:u,ctx:f}),x3.$set(iLe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),k3.$set(hw);const dLe={};u&2&&(dLe.$$scope={dirty:u,ctx:f}),O3.$set(dLe);const cLe={};u&2&&(cLe.$$scope={dirty:u,ctx:f}),X3.$set(cLe);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),o0.$set(pw);const fLe={};u&2&&(fLe.$$scope={dirty:u,ctx:f}),t0.$set(fLe);const mLe={};u&2&&(mLe.$$scope={dirty:u,ctx:f}),h0.$set(mLe);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),_0.$set(_w);const gLe={};u&2&&(gLe.$$scope={dirty:u,ctx:f}),w0.$set(gLe);const hLe={};u&2&&(hLe.$$scope={dirty:u,ctx:f}),L0.$set(hLe);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),I0.$set(uw);const pLe={};u&2&&(pLe.$$scope={dirty:u,ctx:f}),q0.$set(pLe);const _Le={};u&2&&(_Le.$$scope={dirty:u,ctx:f}),D0.$set(_Le);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),O0.$set(bw);const uLe={};u&2&&(uLe.$$scope={dirty:u,ctx:f}),z0.$set(uLe);const bLe={};u&2&&(bLe.$$scope={dirty:u,ctx:f}),Q0.$set(bLe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),U0.$set(vw)},i(f){sQe||(E(c.$$.fragment,f),E(Sa.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(Gf.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(CL.$$.fragment,f),E(oh.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(qh.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(IL.$$.fragment,f),E(Mp.$$.fragment,f),E(Ep.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(OL.$$.fragment,f),E(zp.$$.fragment,f),E(Wp.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(Up.$$.fragment,f),E(HL.$$.fragment,f),E(r2.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(a2.$$.fragment,f),E(ZL.$$.fragment,f),E(Y2.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(Z2.$$.fragment,f),E(ay.$$.fragment,f),E(G1.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(V1.$$.fragment,f),E(dy.$$.fragment,f),E(xb.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(kb.$$.fragment,f),E(hy.$$.fragment,f),E(Kb.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(ev.$$.fragment,f),E(vy.$$.fragment,f),E(Zv.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(oF.$$.fragment,f),E(Cy.$$.fragment,f),E(RF.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(BF.$$.fragment,f),E(xy.$$.fragment,f),E(VF.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(zF.$$.fragment,f),E(Py.$$.fragment,f),E(x6.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(k6.$$.fragment,f),E(jy.$$.fragment,f),E(TT.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(ET.$$.fragment,f),E(Xy.$$.fragment,f),E(AT.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(yT.$$.fragment,f),E(Uy.$$.fragment,f),E(VT.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(zT.$$.fragment,f),E(e9.$$.fragment,f),E(HT.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(JT.$$.fragment,f),E(n9.$$.fragment,f),E(ZT.$$.fragment,f),E(s9.$$.fragment,f),E(l9.$$.fragment,f),E(d9.$$.fragment,f),E(o7.$$.fragment,f),E(c9.$$.fragment,f),E(m7.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(h7.$$.fragment,f),E(p9.$$.fragment,f),E(T7.$$.fragment,f),E(_9.$$.fragment,f),E(u9.$$.fragment,f),E(v9.$$.fragment,f),E(E7.$$.fragment,f),E(F9.$$.fragment,f),E(B7.$$.fragment,f),E(T9.$$.fragment,f),E(M9.$$.fragment,f),E(C9.$$.fragment,f),E(N7.$$.fragment,f),E(w9.$$.fragment,f),E(G7.$$.fragment,f),E(L9.$$.fragment,f),E(y9.$$.fragment,f),E($9.$$.fragment,f),E(V7.$$.fragment,f),E(k9.$$.fragment,f),E(J7.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(K7.$$.fragment,f),E(I9.$$.fragment,f),E(t8.$$.fragment,f),E(N9.$$.fragment,f),E(q9.$$.fragment,f),E(D9.$$.fragment,f),E(n8.$$.fragment,f),E(G9.$$.fragment,f),E(d8.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(W9.$$.fragment,f),E(f8.$$.fragment,f),E(Q9.$$.fragment,f),E(h8.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(_8.$$.fragment,f),E(K9.$$.fragment,f),E(E8.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(w8.$$.fragment,f),E(tx.$$.fragment,f),E(y8.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E($8.$$.fragment,f),E(ix.$$.fragment,f),E(LM.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(xM.$$.fragment,f),E(gx.$$.fragment,f),E(ZM.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(o4.$$.fragment,f),E(bx.$$.fragment,f),E(p4.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(u4.$$.fragment,f),E(Ex.$$.fragment,f),E(w4.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(L4.$$.fragment,f),E(yx.$$.fragment,f),E(H4.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(J4.$$.fragment,f),E(Rx.$$.fragment,f),E(lE.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(dE.$$.fragment,f),E(qx.$$.fragment,f),E(IE.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(qE.$$.fragment,f),E(Vx.$$.fragment,f),E(rC.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(aC.$$.fragment,f),E(Hx.$$.fragment,f),E(lC.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(dC.$$.fragment,f),E(e$.$$.fragment,f),E(fC.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(gC.$$.fragment,f),E(n$.$$.fragment,f),E(PC.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(IC.$$.fragment,f),E(c$.$$.fragment,f),E(t5.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(n5.$$.fragment,f),E(p$.$$.fragment,f),E(l5.$$.fragment,f),E(_$.$$.fragment,f),E(u$.$$.fragment,f),E(v$.$$.fragment,f),E(d5.$$.fragment,f),E(F$.$$.fragment,f),E(f5.$$.fragment,f),E(T$.$$.fragment,f),E(M$.$$.fragment,f),E(C$.$$.fragment,f),E(g5.$$.fragment,f),E(w$.$$.fragment,f),E(G5.$$.fragment,f),E(A$.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(V5.$$.fragment,f),E($$.$$.fragment,f),E(e3.$$.fragment,f),E(k$.$$.fragment,f),E(S$.$$.fragment,f),E(P$.$$.fragment,f),E(r3.$$.fragment,f),E(B$.$$.fragment,f),E(_3.$$.fragment,f),E(I$.$$.fragment,f),E(N$.$$.fragment,f),E(j$.$$.fragment,f),E(b3.$$.fragment,f),E(D$.$$.fragment,f),E(x3.$$.fragment,f),E(G$.$$.fragment,f),E(O$.$$.fragment,f),E(X$.$$.fragment,f),E(k3.$$.fragment,f),E(z$.$$.fragment,f),E(O3.$$.fragment,f),E(W$.$$.fragment,f),E(Q$.$$.fragment,f),E(U$.$$.fragment,f),E(X3.$$.fragment,f),E(J$.$$.fragment,f),E(o0.$$.fragment,f),E(Y$.$$.fragment,f),E(K$.$$.fragment,f),E(ek.$$.fragment,f),E(t0.$$.fragment,f),E(ok.$$.fragment,f),E(h0.$$.fragment,f),E(rk.$$.fragment,f),E(tk.$$.fragment,f),E(nk.$$.fragment,f),E(_0.$$.fragment,f),E(sk.$$.fragment,f),E(w0.$$.fragment,f),E(lk.$$.fragment,f),E(ik.$$.fragment,f),E(ck.$$.fragment,f),E(L0.$$.fragment,f),E(fk.$$.fragment,f),E(I0.$$.fragment,f),E(mk.$$.fragment,f),E(gk.$$.fragment,f),E(pk.$$.fragment,f),E(q0.$$.fragment,f),E(_k.$$.fragment,f),E(D0.$$.fragment,f),E(uk.$$.fragment,f),E(bk.$$.fragment,f),E(Fk.$$.fragment,f),E(O0.$$.fragment,f),E(Tk.$$.fragment,f),E(z0.$$.fragment,f),E(Ek.$$.fragment,f),E(Ck.$$.fragment,f),E(Ak.$$.fragment,f),E(Q0.$$.fragment,f),E(Lk.$$.fragment,f),E(U0.$$.fragment,f),sQe=!0)},o(f){C(c.$$.fragment,f),C(Sa.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(Gf.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(CL.$$.fragment,f),C(oh.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(qh.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(IL.$$.fragment,f),C(Mp.$$.fragment,f),C(Ep.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(OL.$$.fragment,f),C(zp.$$.fragment,f),C(Wp.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(Up.$$.fragment,f),C(HL.$$.fragment,f),C(r2.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(a2.$$.fragment,f),C(ZL.$$.fragment,f),C(Y2.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(Z2.$$.fragment,f),C(ay.$$.fragment,f),C(G1.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(V1.$$.fragment,f),C(dy.$$.fragment,f),C(xb.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(kb.$$.fragment,f),C(hy.$$.fragment,f),C(Kb.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(ev.$$.fragment,f),C(vy.$$.fragment,f),C(Zv.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(oF.$$.fragment,f),C(Cy.$$.fragment,f),C(RF.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(BF.$$.fragment,f),C(xy.$$.fragment,f),C(VF.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(zF.$$.fragment,f),C(Py.$$.fragment,f),C(x6.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(k6.$$.fragment,f),C(jy.$$.fragment,f),C(TT.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(ET.$$.fragment,f),C(Xy.$$.fragment,f),C(AT.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(yT.$$.fragment,f),C(Uy.$$.fragment,f),C(VT.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(zT.$$.fragment,f),C(e9.$$.fragment,f),C(HT.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(JT.$$.fragment,f),C(n9.$$.fragment,f),C(ZT.$$.fragment,f),C(s9.$$.fragment,f),C(l9.$$.fragment,f),C(d9.$$.fragment,f),C(o7.$$.fragment,f),C(c9.$$.fragment,f),C(m7.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(h7.$$.fragment,f),C(p9.$$.fragment,f),C(T7.$$.fragment,f),C(_9.$$.fragment,f),C(u9.$$.fragment,f),C(v9.$$.fragment,f),C(E7.$$.fragment,f),C(F9.$$.fragment,f),C(B7.$$.fragment,f),C(T9.$$.fragment,f),C(M9.$$.fragment,f),C(C9.$$.fragment,f),C(N7.$$.fragment,f),C(w9.$$.fragment,f),C(G7.$$.fragment,f),C(L9.$$.fragment,f),C(y9.$$.fragment,f),C($9.$$.fragment,f),C(V7.$$.fragment,f),C(k9.$$.fragment,f),C(J7.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(K7.$$.fragment,f),C(I9.$$.fragment,f),C(t8.$$.fragment,f),C(N9.$$.fragment,f),C(q9.$$.fragment,f),C(D9.$$.fragment,f),C(n8.$$.fragment,f),C(G9.$$.fragment,f),C(d8.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(W9.$$.fragment,f),C(f8.$$.fragment,f),C(Q9.$$.fragment,f),C(h8.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(_8.$$.fragment,f),C(K9.$$.fragment,f),C(E8.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(w8.$$.fragment,f),C(tx.$$.fragment,f),C(y8.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C($8.$$.fragment,f),C(ix.$$.fragment,f),C(LM.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(xM.$$.fragment,f),C(gx.$$.fragment,f),C(ZM.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(o4.$$.fragment,f),C(bx.$$.fragment,f),C(p4.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(u4.$$.fragment,f),C(Ex.$$.fragment,f),C(w4.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(L4.$$.fragment,f),C(yx.$$.fragment,f),C(H4.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(J4.$$.fragment,f),C(Rx.$$.fragment,f),C(lE.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(dE.$$.fragment,f),C(qx.$$.fragment,f),C(IE.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(qE.$$.fragment,f),C(Vx.$$.fragment,f),C(rC.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(aC.$$.fragment,f),C(Hx.$$.fragment,f),C(lC.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(dC.$$.fragment,f),C(e$.$$.fragment,f),C(fC.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(gC.$$.fragment,f),C(n$.$$.fragment,f),C(PC.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(IC.$$.fragment,f),C(c$.$$.fragment,f),C(t5.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(n5.$$.fragment,f),C(p$.$$.fragment,f),C(l5.$$.fragment,f),C(_$.$$.fragment,f),C(u$.$$.fragment,f),C(v$.$$.fragment,f),C(d5.$$.fragment,f),C(F$.$$.fragment,f),C(f5.$$.fragment,f),C(T$.$$.fragment,f),C(M$.$$.fragment,f),C(C$.$$.fragment,f),C(g5.$$.fragment,f),C(w$.$$.fragment,f),C(G5.$$.fragment,f),C(A$.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(V5.$$.fragment,f),C($$.$$.fragment,f),C(e3.$$.fragment,f),C(k$.$$.fragment,f),C(S$.$$.fragment,f),C(P$.$$.fragment,f),C(r3.$$.fragment,f),C(B$.$$.fragment,f),C(_3.$$.fragment,f),C(I$.$$.fragment,f),C(N$.$$.fragment,f),C(j$.$$.fragment,f),C(b3.$$.fragment,f),C(D$.$$.fragment,f),C(x3.$$.fragment,f),C(G$.$$.fragment,f),C(O$.$$.fragment,f),C(X$.$$.fragment,f),C(k3.$$.fragment,f),C(z$.$$.fragment,f),C(O3.$$.fragment,f),C(W$.$$.fragment,f),C(Q$.$$.fragment,f),C(U$.$$.fragment,f),C(X3.$$.fragment,f),C(J$.$$.fragment,f),C(o0.$$.fragment,f),C(Y$.$$.fragment,f),C(K$.$$.fragment,f),C(ek.$$.fragment,f),C(t0.$$.fragment,f),C(ok.$$.fragment,f),C(h0.$$.fragment,f),C(rk.$$.fragment,f),C(tk.$$.fragment,f),C(nk.$$.fragment,f),C(_0.$$.fragment,f),C(sk.$$.fragment,f),C(w0.$$.fragment,f),C(lk.$$.fragment,f),C(ik.$$.fragment,f),C(ck.$$.fragment,f),C(L0.$$.fragment,f),C(fk.$$.fragment,f),C(I0.$$.fragment,f),C(mk.$$.fragment,f),C(gk.$$.fragment,f),C(pk.$$.fragment,f),C(q0.$$.fragment,f),C(_k.$$.fragment,f),C(D0.$$.fragment,f),C(uk.$$.fragment,f),C(bk.$$.fragment,f),C(Fk.$$.fragment,f),C(O0.$$.fragment,f),C(Tk.$$.fragment,f),C(z0.$$.fragment,f),C(Ek.$$.fragment,f),C(Ck.$$.fragment,f),C(Ak.$$.fragment,f),C(Q0.$$.fragment,f),C(Lk.$$.fragment,f),C(U0.$$.fragment,f),sQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(c),f&&t(If),f&&t(lt),f&&t(Oe),f&&t(Qe),f&&t(qf),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(Ao),f&&t(Ra),f&&t(oze),f&&t(Ii),w(bL),f&&t(rze),f&&t(qn),f&&t(tze),w(vL,f),f&&t(aze),f&&t(rR),f&&t(nze),w(Gf,f),f&&t(sze),f&&t(Ni),w(FL),f&&t(lze),f&&t(Lo),w(TL),w(CL),w(oh),w(wL),f&&t(ize),f&&t(ji),w(AL),f&&t(dze),f&&t(yo),w(LL),w($L),w(qh),w(kL),f&&t(cze),f&&t(Di),w(SL),f&&t(fze),f&&t(xo),w(RL),w(IL),w(Mp),w(Ep),w(NL),f&&t(mze),f&&t(Gi),w(qL),f&&t(gze),f&&t($o),w(jL),w(OL),w(zp),w(Wp),w(VL),f&&t(hze),f&&t(Vi),w(XL),f&&t(pze),f&&t(ko),w(zL),w(QL),w(Up),w(HL),w(r2),f&&t(_ze),f&&t(Wi),w(UL),f&&t(uze),f&&t(So),w(JL),w(KL),w(a2),w(ZL),w(Y2),f&&t(bze),f&&t(Ui),w(ey),f&&t(vze),f&&t(Ro),w(oy),w(ty),w(Z2),w(ay),w(G1),f&&t(Fze),f&&t(Ki),w(ny),f&&t(Tze),f&&t(Po),w(sy),w(iy),w(V1),w(dy),w(xb),f&&t(Mze),f&&t(od),w(cy),f&&t(Eze),f&&t(Bo),w(fy),w(gy),w(kb),w(hy),w(Kb),f&&t(Cze),f&&t(ad),w(py),f&&t(wze),f&&t(Io),w(_y),w(by),w(ev),w(vy),w(Zv),f&&t(Aze),f&&t(ld),w(Fy),f&&t(Lze),f&&t(No),w(Ty),w(Ey),w(oF),w(Cy),w(RF),f&&t(yze),f&&t(cd),w(wy),f&&t(xze),f&&t(qo),w(Ay),w(yy),w(BF),w(xy),w(VF),f&&t($ze),f&&t(gd),w($y),f&&t(kze),f&&t(Do),w(ky),w(Ry),w(zF),w(Py),w(x6),f&&t(Sze),f&&t(_d),w(By),f&&t(Rze),f&&t(Go),w(Iy),w(qy),w(k6),w(jy),w(TT),f&&t(Pze),f&&t(vd),w(Dy),f&&t(Bze),f&&t(Oo),w(Gy),w(Vy),w(ET),w(Xy),w(AT),f&&t(Ize),f&&t(Md),w(zy),f&&t(Nze),f&&t(Vo),w(Wy),w(Hy),w(yT),w(Uy),w(VT),f&&t(qze),f&&t(wd),w(Jy),f&&t(jze),f&&t(Xo),w(Yy),w(Zy),w(zT),w(e9),w(HT),f&&t(Dze),f&&t(yd),w(o9),f&&t(Gze),f&&t(zo),w(r9),w(a9),w(JT),w(n9),w(ZT),f&&t(Oze),f&&t(kd),w(s9),f&&t(Vze),f&&t(Wo),w(l9),w(d9),w(o7),w(c9),w(m7),f&&t(Xze),f&&t(Pd),w(f9),f&&t(zze),f&&t(Qo),w(m9),w(h9),w(h7),w(p9),w(T7),f&&t(Wze),f&&t(Nd),w(_9),f&&t(Qze),f&&t(Ho),w(u9),w(v9),w(E7),w(F9),w(B7),f&&t(Hze),f&&t(Dd),w(T9),f&&t(Uze),f&&t(Uo),w(M9),w(C9),w(N7),w(w9),w(G7),f&&t(Jze),f&&t(Vd),w(L9),f&&t(Yze),f&&t(Jo),w(y9),w($9),w(V7),w(k9),w(J7),f&&t(Kze),f&&t(Wd),w(S9),f&&t(Zze),f&&t(Yo),w(R9),w(B9),w(K7),w(I9),w(t8),f&&t(eWe),f&&t(Jd),w(N9),f&&t(oWe),f&&t(Ko),w(q9),w(D9),w(n8),w(G9),w(d8),f&&t(rWe),f&&t(Zd),w(V9),f&&t(tWe),f&&t(Zo),w(X9),w(W9),w(f8),w(Q9),w(h8),f&&t(aWe),f&&t(rc),w(H9),f&&t(nWe),f&&t(er),w(U9),w(Y9),w(_8),w(K9),w(E8),f&&t(sWe),f&&t(nc),w(Z9),f&&t(lWe),f&&t(or),w(ex),w(rx),w(w8),w(tx),w(y8),f&&t(iWe),f&&t(ic),w(ax),f&&t(dWe),f&&t(rr),w(nx),w(lx),w($8),w(ix),w(LM),f&&t(cWe),f&&t(fc),w(dx),f&&t(fWe),f&&t(tr),w(cx),w(mx),w(xM),w(gx),w(ZM),f&&t(mWe),f&&t(hc),w(hx),f&&t(gWe),f&&t(ar),w(px),w(ux),w(o4),w(bx),w(p4),f&&t(hWe),f&&t(uc),w(vx),f&&t(pWe),f&&t(nr),w(Fx),w(Mx),w(u4),w(Ex),w(w4),f&&t(_We),f&&t(Fc),w(Cx),f&&t(uWe),f&&t(sr),w(wx),w(Lx),w(L4),w(yx),w(H4),f&&t(bWe),f&&t(Ec),w(xx),f&&t(vWe),f&&t(lr),w($x),w(Sx),w(J4),w(Rx),w(lE),f&&t(FWe),f&&t(Ac),w(Px),f&&t(TWe),f&&t(ir),w(Bx),w(Nx),w(dE),w(qx),w(IE),f&&t(MWe),f&&t(xc),w(jx),f&&t(EWe),f&&t(dr),w(Dx),w(Ox),w(qE),w(Vx),w(rC),f&&t(CWe),f&&t(Sc),w(Xx),f&&t(wWe),f&&t(cr),w(zx),w(Qx),w(aC),w(Hx),w(lC),f&&t(AWe),f&&t(Bc),w(Jx),f&&t(LWe),f&&t(fr),w(Yx),w(Zx),w(dC),w(e$),w(fC),f&&t(yWe),f&&t(qc),w(o$),f&&t(xWe),f&&t(mr),w(r$),w(a$),w(gC),w(n$),w(PC),f&&t($We),f&&t(Gc),w(s$),f&&t(kWe),f&&t(gr),w(l$),w(d$),w(IC),w(c$),w(t5),f&&t(SWe),f&&t(Xc),w(f$),f&&t(RWe),f&&t(hr),w(m$),w(h$),w(n5),w(p$),w(l5),f&&t(PWe),f&&t(Qc),w(_$),f&&t(BWe),f&&t(pr),w(u$),w(v$),w(d5),w(F$),w(f5),f&&t(IWe),f&&t(Jc),w(T$),f&&t(NWe),f&&t(_r),w(M$),w(C$),w(g5),w(w$),w(G5),f&&t(qWe),f&&t(Zc),w(A$),f&&t(jWe),f&&t(ur),w(L$),w(x$),w(V5),w($$),w(e3),f&&t(DWe),f&&t(rf),w(k$),f&&t(GWe),f&&t(br),w(S$),w(P$),w(r3),w(B$),w(_3),f&&t(OWe),f&&t(nf),w(I$),f&&t(VWe),f&&t(vr),w(N$),w(j$),w(b3),w(D$),w(x3),f&&t(XWe),f&&t(df),w(G$),f&&t(zWe),f&&t(Fr),w(O$),w(X$),w(k3),w(z$),w(O3),f&&t(WWe),f&&t(mf),w(W$),f&&t(QWe),f&&t(Tr),w(Q$),w(U$),w(X3),w(J$),w(o0),f&&t(HWe),f&&t(pf),w(Y$),f&&t(UWe),f&&t(Mr),w(K$),w(ek),w(t0),w(ok),w(h0),f&&t(JWe),f&&t(bf),w(rk),f&&t(YWe),f&&t(Er),w(tk),w(nk),w(_0),w(sk),w(w0),f&&t(KWe),f&&t(Tf),w(lk),f&&t(ZWe),f&&t(Cr),w(ik),w(ck),w(L0),w(fk),w(I0),f&&t(eQe),f&&t(Cf),w(mk),f&&t(oQe),f&&t(wr),w(gk),w(pk),w(q0),w(_k),w(D0),f&&t(rQe),f&&t(Lf),w(uk),f&&t(tQe),f&&t(Ar),w(bk),w(Fk),w(O0),w(Tk),w(z0),f&&t(aQe),f&&t($f),w(Ek),f&&t(nQe),f&&t(Lr),w(Ck),w(Ak),w(Q0),w(Lk),w(U0)}}}const BYt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function IYt($){return PUt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class VYt extends $Ut{constructor(g){super();kUt(this,g,IYt,PYt,SUt,{})}}export{VYt as default,BYt as metadata};
