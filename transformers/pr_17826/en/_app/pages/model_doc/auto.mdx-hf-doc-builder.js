import{S as QGt,i as WGt,s as HGt,e as a,k as l,w as F,t as o,M as UGt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as JGt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as cZr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function YGt($){let g,v,p,m,_,d,h,Eo,Mi,xf,at,Ei,Ci,SA,$f,Oe,Qe,wi,Rn,RA,Pn,Bn,PA,Ai,In,BA,Li,kf,xa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Mi=a("code"),xf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ei=a("code"),Ci=o('"new-model"'),SA=o(")."),$f=l(),Oe=a("p"),Qe=o("Likewise, if your "),wi=a("code"),Rn=o("NewModel"),RA=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),PA=o(`, make sure its
`),Ai=a("code"),In=o("config_class"),BA=o(` attribute is set to the same class you use when registering the model (here
`),Li=a("code"),kf=o("NewModelConfig"),xa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var cS=s(p);m=r(cS,"NewModelConfig"),cS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var yi=s(d);h=r(yi,"PretrainedConfig"),yi.forEach(t),Eo=r(Ae,`, make sure its
`),Mi=n(Ae,"CODE",{});var fS=s(Mi);xf=r(fS,"model_type"),fS.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ei=n(Ae,"CODE",{});var mS=s(Ei);Ci=r(mS,'"new-model"'),mS.forEach(t),SA=r(Ae,")."),Ae.forEach(t),$f=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),wi=n(Co,"CODE",{});var $a=s(wi);Rn=r($a,"NewModel"),$a.forEach(t),RA=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var gS=s(Pn);Bn=r(gS,"PreTrainedModel"),gS.forEach(t),PA=r(Co,`, make sure its
`),Ai=n(Co,"CODE",{});var Sf=s(Ai);In=r(Sf,"config_class"),Sf.forEach(t),BA=r(Co,` attribute is set to the same class you use when registering the model (here
`),Li=n(Co,"CODE",{});var hS=s(Li);kf=r(hS,"NewModelConfig"),hS.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Mi),e(Mi,xf),e(g,at),e(g,Ei),e(Ei,Ci),e(g,SA),b(We,$f,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,wi),e(wi,Rn),e(Oe,RA),e(Oe,Pn),e(Pn,Bn),e(Oe,PA),e(Oe,Ai),e(Ai,In),e(Oe,BA),e(Oe,Li),e(Li,kf),e(Oe,xa)},d(We){We&&t(g),We&&t($f),We&&t(Oe)}}}function KGt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZGt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eOt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function oOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rOt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function tOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ot($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function COt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ot($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ROt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function POt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Vt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Vt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JVt($){let g,v,p,m,_,d,h,Eo,Mi,xf,at,Ei,Ci,SA,$f,Oe,Qe,wi,Rn,RA,Pn,Bn,PA,Ai,In,BA,Li,kf,xa,We,Ae,cS,yi,fS,mS,Co,$a,gS,Sf,hS,xQe,hOe,xi,Rf,Ate,IA,$Qe,Lte,kQe,pOe,Nn,SQe,yte,RQe,PQe,xte,BQe,IQe,_Oe,NA,uOe,pS,NQe,bOe,Pf,vOe,$i,Bf,$te,qA,qQe,kte,jQe,FOe,wo,jA,DQe,DA,GQe,_S,OQe,VQe,XQe,GA,zQe,Ste,QQe,WQe,HQe,Ar,OA,UQe,Rte,JQe,YQe,ki,KQe,Pte,ZQe,eWe,Bte,oWe,rWe,tWe,A,If,Ite,aWe,nWe,uS,sWe,lWe,iWe,Nf,Nte,dWe,cWe,bS,fWe,mWe,gWe,qf,qte,hWe,pWe,vS,_We,uWe,bWe,jf,jte,vWe,FWe,FS,TWe,MWe,EWe,Df,Dte,CWe,wWe,TS,AWe,LWe,yWe,Gf,Gte,xWe,$We,MS,kWe,SWe,RWe,Of,Ote,PWe,BWe,ES,IWe,NWe,qWe,Vf,Vte,jWe,DWe,CS,GWe,OWe,VWe,Xf,Xte,XWe,zWe,wS,QWe,WWe,HWe,zf,zte,UWe,JWe,AS,YWe,KWe,ZWe,Qf,Qte,eHe,oHe,LS,rHe,tHe,aHe,Wf,Wte,nHe,sHe,yS,lHe,iHe,dHe,Hf,Hte,cHe,fHe,xS,mHe,gHe,hHe,Uf,Ute,pHe,_He,$S,uHe,bHe,vHe,Jf,Jte,FHe,THe,kS,MHe,EHe,CHe,Yf,Yte,wHe,AHe,SS,LHe,yHe,xHe,Kf,Kte,$He,kHe,RS,SHe,RHe,PHe,Zf,Zte,BHe,IHe,PS,NHe,qHe,jHe,em,eae,DHe,GHe,BS,OHe,VHe,XHe,om,oae,zHe,QHe,IS,WHe,HHe,UHe,rm,rae,JHe,YHe,NS,KHe,ZHe,eUe,tm,tae,oUe,rUe,qS,tUe,aUe,nUe,am,aae,sUe,lUe,jS,iUe,dUe,cUe,nm,nae,fUe,mUe,DS,gUe,hUe,pUe,sm,sae,_Ue,uUe,GS,bUe,vUe,FUe,lm,lae,TUe,MUe,OS,EUe,CUe,wUe,im,iae,AUe,LUe,VS,yUe,xUe,$Ue,dm,dae,kUe,SUe,XS,RUe,PUe,BUe,cm,cae,IUe,NUe,zS,qUe,jUe,DUe,fm,fae,GUe,OUe,QS,VUe,XUe,zUe,mm,mae,QUe,WUe,WS,HUe,UUe,JUe,gm,gae,YUe,KUe,HS,ZUe,eJe,oJe,hm,hae,rJe,tJe,US,aJe,nJe,sJe,pm,pae,lJe,iJe,JS,dJe,cJe,fJe,_m,_ae,mJe,gJe,YS,hJe,pJe,_Je,um,uae,uJe,bJe,KS,vJe,FJe,TJe,bm,bae,MJe,EJe,ZS,CJe,wJe,AJe,vm,vae,LJe,yJe,eR,xJe,$Je,kJe,Fm,Fae,SJe,RJe,oR,PJe,BJe,IJe,Tm,Tae,NJe,qJe,rR,jJe,DJe,GJe,Mm,Mae,OJe,VJe,tR,XJe,zJe,QJe,Em,Eae,WJe,HJe,aR,UJe,JJe,YJe,Cm,Cae,KJe,ZJe,nR,eYe,oYe,rYe,wm,wae,tYe,aYe,sR,nYe,sYe,lYe,Am,Aae,iYe,dYe,lR,cYe,fYe,mYe,Lm,Lae,gYe,hYe,iR,pYe,_Ye,uYe,ym,yae,bYe,vYe,dR,FYe,TYe,MYe,xm,xae,EYe,CYe,cR,wYe,AYe,LYe,$m,$ae,yYe,xYe,fR,$Ye,kYe,SYe,km,kae,RYe,PYe,mR,BYe,IYe,NYe,Sm,Sae,qYe,jYe,gR,DYe,GYe,OYe,Rm,Rae,VYe,XYe,hR,zYe,QYe,WYe,Pm,Pae,HYe,UYe,pR,JYe,YYe,KYe,Bm,Bae,ZYe,eKe,_R,oKe,rKe,tKe,Im,Iae,aKe,nKe,uR,sKe,lKe,iKe,Nm,Nae,dKe,cKe,bR,fKe,mKe,gKe,qm,qae,hKe,pKe,vR,_Ke,uKe,bKe,jm,jae,vKe,FKe,FR,TKe,MKe,EKe,Dm,Dae,CKe,wKe,TR,AKe,LKe,yKe,Gm,Gae,xKe,$Ke,MR,kKe,SKe,RKe,Om,Oae,PKe,BKe,ER,IKe,NKe,qKe,Vm,Vae,jKe,DKe,CR,GKe,OKe,VKe,Xm,Xae,XKe,zKe,wR,QKe,WKe,HKe,zm,zae,UKe,JKe,AR,YKe,KKe,ZKe,Qm,Qae,eZe,oZe,LR,rZe,tZe,aZe,Wm,Wae,nZe,sZe,yR,lZe,iZe,dZe,Hm,Hae,cZe,fZe,xR,mZe,gZe,hZe,Um,Uae,pZe,_Ze,$R,uZe,bZe,vZe,Jm,Jae,FZe,TZe,kR,MZe,EZe,CZe,Ym,Yae,wZe,AZe,SR,LZe,yZe,xZe,Km,Kae,$Ze,kZe,RR,SZe,RZe,PZe,Zm,Zae,BZe,IZe,PR,NZe,qZe,jZe,eg,ene,DZe,GZe,BR,OZe,VZe,XZe,og,one,zZe,QZe,IR,WZe,HZe,UZe,rg,rne,JZe,YZe,NR,KZe,ZZe,eeo,tg,tne,oeo,reo,qR,teo,aeo,neo,ag,ane,seo,leo,jR,ieo,deo,ceo,ng,nne,feo,meo,DR,geo,heo,peo,sg,sne,_eo,ueo,GR,beo,veo,Feo,lg,lne,Teo,Meo,OR,Eeo,Ceo,weo,ig,ine,Aeo,Leo,VR,yeo,xeo,$eo,dg,dne,keo,Seo,XR,Reo,Peo,Beo,cg,cne,Ieo,Neo,zR,qeo,jeo,Deo,fg,fne,Geo,Oeo,QR,Veo,Xeo,zeo,mg,mne,Qeo,Weo,WR,Heo,Ueo,Jeo,gg,gne,Yeo,Keo,HR,Zeo,eoo,ooo,hg,hne,roo,too,UR,aoo,noo,soo,pg,pne,loo,ioo,JR,doo,coo,foo,_g,_ne,moo,goo,YR,hoo,poo,_oo,ug,une,uoo,boo,KR,voo,Foo,Too,bg,bne,Moo,Eoo,ZR,Coo,woo,Aoo,vg,vne,Loo,yoo,eP,xoo,$oo,koo,Fg,Fne,Soo,Roo,oP,Poo,Boo,Ioo,Tg,Tne,Noo,qoo,rP,joo,Doo,Goo,Mg,Mne,Ooo,Voo,tP,Xoo,zoo,Qoo,Eg,Ene,Woo,Hoo,aP,Uoo,Joo,Yoo,Cg,Cne,Koo,Zoo,nP,ero,oro,rro,wg,wne,tro,aro,sP,nro,sro,lro,Ag,Ane,iro,dro,lP,cro,fro,mro,Lg,Lne,gro,hro,iP,pro,_ro,uro,yg,yne,bro,vro,dP,Fro,Tro,Mro,xg,xne,Ero,Cro,cP,wro,Aro,Lro,$g,$ne,yro,xro,fP,$ro,kro,Sro,kg,kne,Rro,Pro,mP,Bro,Iro,Nro,Sg,Sne,qro,jro,gP,Dro,Gro,Oro,Rg,Rne,Vro,Xro,hP,zro,Qro,Wro,Pg,Pne,Hro,Uro,pP,Jro,Yro,Kro,Bg,Bne,Zro,eto,_P,oto,rto,tto,Ig,Ine,ato,nto,uP,sto,lto,ito,Ng,Nne,dto,cto,bP,fto,mto,gto,qg,qne,hto,pto,vP,_to,uto,bto,jg,jne,vto,Fto,FP,Tto,Mto,Eto,Dg,Dne,Cto,wto,TP,Ato,Lto,yto,Gg,Gne,xto,$to,MP,kto,Sto,Rto,Og,One,Pto,Bto,EP,Ito,Nto,qto,Vg,Vne,jto,Dto,CP,Gto,Oto,Vto,Xg,Xto,zg,VA,zto,Xne,Qto,TOe,Si,Qg,zne,XA,Wto,Qne,Hto,MOe,Ao,zA,Uto,QA,Jto,wP,Yto,Kto,Zto,WA,eao,Wne,oao,rao,tao,Lr,HA,aao,Hne,nao,sao,ka,lao,Une,iao,dao,Jne,cao,fao,Yne,mao,gao,hao,k,qn,Kne,pao,_ao,AP,uao,bao,LP,vao,Fao,Tao,jn,Zne,Mao,Eao,yP,Cao,wao,xP,Aao,Lao,yao,Dn,ese,xao,$ao,$P,kao,Sao,kP,Rao,Pao,Bao,Wg,ose,Iao,Nao,SP,qao,jao,Dao,Gn,rse,Gao,Oao,RP,Vao,Xao,PP,zao,Qao,Wao,Hg,tse,Hao,Uao,BP,Jao,Yao,Kao,Ug,ase,Zao,eno,IP,ono,rno,tno,Jg,nse,ano,nno,NP,sno,lno,ino,On,sse,dno,cno,qP,fno,mno,jP,gno,hno,pno,Vn,lse,_no,uno,DP,bno,vno,GP,Fno,Tno,Mno,Xn,ise,Eno,Cno,OP,wno,Ano,VP,Lno,yno,xno,Yg,dse,$no,kno,XP,Sno,Rno,Pno,Kg,cse,Bno,Ino,zP,Nno,qno,jno,Zg,fse,Dno,Gno,QP,Ono,Vno,Xno,zn,mse,zno,Qno,WP,Wno,Hno,HP,Uno,Jno,Yno,eh,gse,Kno,Zno,UP,eso,oso,rso,Qn,hse,tso,aso,JP,nso,sso,YP,lso,iso,dso,Wn,pse,cso,fso,KP,mso,gso,ZP,hso,pso,_so,Hn,_se,uso,bso,eB,vso,Fso,oB,Tso,Mso,Eso,Un,use,Cso,wso,rB,Aso,Lso,tB,yso,xso,$so,oh,bse,kso,Sso,aB,Rso,Pso,Bso,Jn,vse,Iso,Nso,nB,qso,jso,sB,Dso,Gso,Oso,Yn,Fse,Vso,Xso,lB,zso,Qso,iB,Wso,Hso,Uso,Kn,Tse,Jso,Yso,dB,Kso,Zso,cB,elo,olo,rlo,Zn,Mse,tlo,alo,fB,nlo,slo,mB,llo,ilo,dlo,es,Ese,clo,flo,gB,mlo,glo,hB,hlo,plo,_lo,os,Cse,ulo,blo,pB,vlo,Flo,_B,Tlo,Mlo,Elo,rh,wse,Clo,wlo,uB,Alo,Llo,ylo,rs,Ase,xlo,$lo,bB,klo,Slo,vB,Rlo,Plo,Blo,th,Lse,Ilo,Nlo,FB,qlo,jlo,Dlo,ts,yse,Glo,Olo,TB,Vlo,Xlo,MB,zlo,Qlo,Wlo,as,xse,Hlo,Ulo,EB,Jlo,Ylo,CB,Klo,Zlo,eio,ns,$se,oio,rio,wB,tio,aio,AB,nio,sio,lio,ah,kse,iio,dio,LB,cio,fio,mio,ss,Sse,gio,hio,yB,pio,_io,xB,uio,bio,vio,ls,Rse,Fio,Tio,$B,Mio,Eio,kB,Cio,wio,Aio,nh,Pse,Lio,yio,SB,xio,$io,kio,is,Bse,Sio,Rio,RB,Pio,Bio,PB,Iio,Nio,qio,sh,Ise,jio,Dio,Nse,Gio,Oio,Vio,ds,qse,Xio,zio,BB,Qio,Wio,IB,Hio,Uio,Jio,cs,jse,Yio,Kio,NB,Zio,edo,qB,odo,rdo,tdo,fs,Dse,ado,ndo,jB,sdo,ldo,DB,ido,ddo,cdo,ms,Gse,fdo,mdo,GB,gdo,hdo,OB,pdo,_do,udo,gs,Ose,bdo,vdo,VB,Fdo,Tdo,XB,Mdo,Edo,Cdo,hs,Vse,wdo,Ado,zB,Ldo,ydo,QB,xdo,$do,kdo,ps,Xse,Sdo,Rdo,WB,Pdo,Bdo,HB,Ido,Ndo,qdo,lh,zse,jdo,Ddo,UB,Gdo,Odo,Vdo,_s,Qse,Xdo,zdo,JB,Qdo,Wdo,YB,Hdo,Udo,Jdo,ih,Wse,Ydo,Kdo,KB,Zdo,eco,oco,dh,Hse,rco,tco,ZB,aco,nco,sco,us,Use,lco,ico,eI,dco,cco,oI,fco,mco,gco,bs,Jse,hco,pco,rI,_co,uco,tI,bco,vco,Fco,vs,Yse,Tco,Mco,aI,Eco,Cco,nI,wco,Aco,Lco,ch,Kse,yco,xco,sI,$co,kco,Sco,Fs,Zse,Rco,Pco,lI,Bco,Ico,iI,Nco,qco,jco,Ts,ele,Dco,Gco,dI,Oco,Vco,cI,Xco,zco,Qco,Ms,ole,Wco,Hco,fI,Uco,Jco,mI,Yco,Kco,Zco,Es,rle,efo,ofo,gI,rfo,tfo,hI,afo,nfo,sfo,Cs,tle,lfo,ifo,pI,dfo,cfo,_I,ffo,mfo,gfo,ws,ale,hfo,pfo,uI,_fo,ufo,bI,bfo,vfo,Ffo,fh,nle,Tfo,Mfo,vI,Efo,Cfo,wfo,As,sle,Afo,Lfo,FI,yfo,xfo,TI,$fo,kfo,Sfo,mh,lle,Rfo,Pfo,MI,Bfo,Ifo,Nfo,gh,ile,qfo,jfo,EI,Dfo,Gfo,Ofo,hh,dle,Vfo,Xfo,CI,zfo,Qfo,Wfo,ph,cle,Hfo,Ufo,wI,Jfo,Yfo,Kfo,Ls,fle,Zfo,emo,AI,omo,rmo,LI,tmo,amo,nmo,_h,mle,smo,lmo,yI,imo,dmo,cmo,ys,gle,fmo,mmo,xI,gmo,hmo,$I,pmo,_mo,umo,xs,hle,bmo,vmo,kI,Fmo,Tmo,SI,Mmo,Emo,Cmo,$s,ple,wmo,Amo,RI,Lmo,ymo,PI,xmo,$mo,kmo,ks,_le,Smo,Rmo,BI,Pmo,Bmo,II,Imo,Nmo,qmo,Ss,ule,jmo,Dmo,NI,Gmo,Omo,qI,Vmo,Xmo,zmo,Rs,ble,Qmo,Wmo,jI,Hmo,Umo,DI,Jmo,Ymo,Kmo,uh,vle,Zmo,ego,GI,ogo,rgo,tgo,bh,Fle,ago,ngo,OI,sgo,lgo,igo,Ps,Tle,dgo,cgo,VI,fgo,mgo,XI,ggo,hgo,pgo,Bs,Mle,_go,ugo,zI,bgo,vgo,QI,Fgo,Tgo,Mgo,Is,Ele,Ego,Cgo,WI,wgo,Ago,HI,Lgo,ygo,xgo,vh,Cle,$go,kgo,UI,Sgo,Rgo,Pgo,Fh,wle,Bgo,Igo,JI,Ngo,qgo,jgo,Th,Ale,Dgo,Ggo,YI,Ogo,Vgo,Xgo,Ns,Lle,zgo,Qgo,KI,Wgo,Hgo,ZI,Ugo,Jgo,Ygo,qs,yle,Kgo,Zgo,eN,eho,oho,oN,rho,tho,aho,Mh,xle,nho,sho,rN,lho,iho,dho,Eh,$le,cho,fho,tN,mho,gho,hho,Ch,kle,pho,_ho,aN,uho,bho,vho,js,Sle,Fho,Tho,nN,Mho,Eho,sN,Cho,who,Aho,wh,Rle,Lho,yho,lN,xho,$ho,kho,Ah,Ple,Sho,Rho,iN,Pho,Bho,Iho,Ds,Ble,Nho,qho,dN,jho,Dho,cN,Gho,Oho,Vho,Gs,Ile,Xho,zho,fN,Qho,Who,mN,Hho,Uho,Jho,Os,Nle,Yho,Kho,gN,Zho,epo,hN,opo,rpo,tpo,Vs,qle,apo,npo,pN,spo,lpo,_N,ipo,dpo,cpo,Lh,fpo,yh,UA,mpo,jle,gpo,EOe,Ri,xh,Dle,JA,hpo,Gle,ppo,COe,Lo,YA,_po,KA,upo,uN,bpo,vpo,Fpo,ZA,Tpo,Ole,Mpo,Epo,Cpo,He,eL,wpo,Vle,Apo,Lpo,Sa,ypo,Xle,xpo,$po,zle,kpo,Spo,Qle,Rpo,Ppo,Bpo,Y,$h,Wle,Ipo,Npo,bN,qpo,jpo,Dpo,kh,Hle,Gpo,Opo,vN,Vpo,Xpo,zpo,Sh,Ule,Qpo,Wpo,FN,Hpo,Upo,Jpo,Rh,Jle,Ypo,Kpo,TN,Zpo,e_o,o_o,Ph,Yle,r_o,t_o,MN,a_o,n_o,s_o,Bh,Kle,l_o,i_o,EN,d_o,c_o,f_o,Ih,Zle,m_o,g_o,CN,h_o,p_o,__o,Nh,eie,u_o,b_o,wN,v_o,F_o,T_o,qh,oie,M_o,E_o,AN,C_o,w_o,A_o,jh,rie,L_o,y_o,LN,x_o,$_o,k_o,Dh,tie,S_o,R_o,yN,P_o,B_o,I_o,Gh,aie,N_o,q_o,xN,j_o,D_o,G_o,Oh,nie,O_o,V_o,$N,X_o,z_o,Q_o,Vh,sie,W_o,H_o,kN,U_o,J_o,Y_o,Xh,lie,K_o,Z_o,SN,euo,ouo,ruo,zh,iie,tuo,auo,RN,nuo,suo,luo,Qh,die,iuo,duo,PN,cuo,fuo,muo,Wh,cie,guo,huo,BN,puo,_uo,uuo,Hh,fie,buo,vuo,IN,Fuo,Tuo,Muo,Uh,mie,Euo,Cuo,NN,wuo,Auo,Luo,Jh,gie,yuo,xuo,qN,$uo,kuo,Suo,Yh,hie,Ruo,Puo,jN,Buo,Iuo,Nuo,Kh,pie,quo,juo,DN,Duo,Guo,Ouo,Zh,_ie,Vuo,Xuo,GN,zuo,Quo,Wuo,ep,uie,Huo,Uuo,ON,Juo,Yuo,Kuo,op,bie,Zuo,e2o,VN,o2o,r2o,t2o,rp,vie,a2o,n2o,XN,s2o,l2o,i2o,tp,Fie,d2o,c2o,zN,f2o,m2o,g2o,ap,Tie,h2o,p2o,QN,_2o,u2o,b2o,np,Mie,v2o,F2o,WN,T2o,M2o,E2o,sp,Eie,C2o,w2o,HN,A2o,L2o,y2o,lp,Cie,x2o,$2o,UN,k2o,S2o,R2o,ip,P2o,dp,B2o,cp,oL,I2o,wie,N2o,wOe,Pi,fp,Aie,rL,q2o,Lie,j2o,AOe,yo,tL,D2o,aL,G2o,JN,O2o,V2o,X2o,nL,z2o,yie,Q2o,W2o,H2o,Ue,sL,U2o,xie,J2o,Y2o,Bi,K2o,$ie,Z2o,e1o,kie,o1o,r1o,t1o,he,mp,Sie,a1o,n1o,YN,s1o,l1o,i1o,gp,Rie,d1o,c1o,Pie,f1o,m1o,g1o,hp,Bie,h1o,p1o,KN,_1o,u1o,b1o,pp,Iie,v1o,F1o,ZN,T1o,M1o,E1o,_p,Nie,C1o,w1o,eq,A1o,L1o,y1o,up,qie,x1o,$1o,oq,k1o,S1o,R1o,bp,jie,P1o,B1o,rq,I1o,N1o,q1o,vp,Die,j1o,D1o,tq,G1o,O1o,V1o,Fp,Gie,X1o,z1o,aq,Q1o,W1o,H1o,Tp,Oie,U1o,J1o,nq,Y1o,K1o,Z1o,Mp,Vie,ebo,obo,sq,rbo,tbo,abo,Ep,Xie,nbo,sbo,lq,lbo,ibo,dbo,Cp,zie,cbo,fbo,iq,mbo,gbo,hbo,wp,Qie,pbo,_bo,dq,ubo,bbo,vbo,Ap,Wie,Fbo,Tbo,cq,Mbo,Ebo,Cbo,Lp,Hie,wbo,Abo,fq,Lbo,ybo,xbo,yp,Uie,$bo,kbo,mq,Sbo,Rbo,Pbo,xp,Bbo,$p,Ibo,kp,lL,Nbo,Jie,qbo,LOe,Ii,Sp,Yie,iL,jbo,Kie,Dbo,yOe,xo,dL,Gbo,Ni,Obo,gq,Vbo,Xbo,hq,zbo,Qbo,Wbo,cL,Hbo,Zie,Ubo,Jbo,Ybo,nt,fL,Kbo,ede,Zbo,evo,qi,ovo,ode,rvo,tvo,pq,avo,nvo,svo,Rp,lvo,Je,mL,ivo,rde,dvo,cvo,Ra,fvo,tde,mvo,gvo,ade,hvo,pvo,nde,_vo,uvo,bvo,y,Pp,sde,vvo,Fvo,_q,Tvo,Mvo,Evo,Bp,lde,Cvo,wvo,uq,Avo,Lvo,yvo,Ip,ide,xvo,$vo,bq,kvo,Svo,Rvo,Np,dde,Pvo,Bvo,vq,Ivo,Nvo,qvo,qp,cde,jvo,Dvo,Fq,Gvo,Ovo,Vvo,jp,fde,Xvo,zvo,Tq,Qvo,Wvo,Hvo,Dp,mde,Uvo,Jvo,Mq,Yvo,Kvo,Zvo,Gp,gde,eFo,oFo,Eq,rFo,tFo,aFo,Op,hde,nFo,sFo,Cq,lFo,iFo,dFo,Vp,pde,cFo,fFo,wq,mFo,gFo,hFo,Xp,_de,pFo,_Fo,Aq,uFo,bFo,vFo,zp,ude,FFo,TFo,Lq,MFo,EFo,CFo,Qp,bde,wFo,AFo,yq,LFo,yFo,xFo,Wp,vde,$Fo,kFo,xq,SFo,RFo,PFo,Hp,Fde,BFo,IFo,$q,NFo,qFo,jFo,Up,Tde,DFo,GFo,kq,OFo,VFo,XFo,Jp,Mde,zFo,QFo,Sq,WFo,HFo,UFo,Yp,Ede,JFo,YFo,Rq,KFo,ZFo,e6o,Kp,Cde,o6o,r6o,Pq,t6o,a6o,n6o,Zp,wde,s6o,l6o,Bq,i6o,d6o,c6o,e_,Ade,f6o,m6o,Iq,g6o,h6o,p6o,o_,Lde,_6o,u6o,Nq,b6o,v6o,F6o,r_,yde,T6o,M6o,qq,E6o,C6o,w6o,t_,xde,A6o,L6o,jq,y6o,x6o,$6o,a_,$de,k6o,S6o,Dq,R6o,P6o,B6o,n_,kde,I6o,N6o,Gq,q6o,j6o,D6o,s_,Sde,G6o,O6o,Oq,V6o,X6o,z6o,l_,Rde,Q6o,W6o,Vq,H6o,U6o,J6o,i_,Pde,Y6o,K6o,Xq,Z6o,eTo,oTo,d_,Bde,rTo,tTo,zq,aTo,nTo,sTo,c_,Ide,lTo,iTo,Qq,dTo,cTo,fTo,f_,Nde,mTo,gTo,Wq,hTo,pTo,_To,m_,qde,uTo,bTo,Hq,vTo,FTo,TTo,g_,jde,MTo,ETo,Uq,CTo,wTo,ATo,Xs,Dde,LTo,yTo,Jq,xTo,$To,Yq,kTo,STo,RTo,h_,Gde,PTo,BTo,Kq,ITo,NTo,qTo,p_,Ode,jTo,DTo,Zq,GTo,OTo,VTo,__,Vde,XTo,zTo,ej,QTo,WTo,HTo,u_,Xde,UTo,JTo,oj,YTo,KTo,ZTo,b_,zde,e7o,o7o,rj,r7o,t7o,a7o,v_,Qde,n7o,s7o,tj,l7o,i7o,d7o,F_,Wde,c7o,f7o,aj,m7o,g7o,h7o,T_,Hde,p7o,_7o,nj,u7o,b7o,v7o,M_,Ude,F7o,T7o,Jde,M7o,E7o,C7o,E_,Yde,w7o,A7o,sj,L7o,y7o,x7o,C_,Kde,$7o,k7o,lj,S7o,R7o,P7o,w_,Zde,B7o,I7o,ij,N7o,q7o,j7o,A_,ece,D7o,G7o,dj,O7o,V7o,X7o,L_,oce,z7o,Q7o,cj,W7o,H7o,U7o,y_,rce,J7o,Y7o,fj,K7o,Z7o,e8o,x_,tce,o8o,r8o,mj,t8o,a8o,n8o,$_,ace,s8o,l8o,gj,i8o,d8o,c8o,k_,nce,f8o,m8o,hj,g8o,h8o,p8o,S_,sce,_8o,u8o,pj,b8o,v8o,F8o,R_,lce,T8o,M8o,_j,E8o,C8o,w8o,P_,ice,A8o,L8o,uj,y8o,x8o,$8o,B_,dce,k8o,S8o,bj,R8o,P8o,B8o,I_,cce,I8o,N8o,vj,q8o,j8o,D8o,N_,fce,G8o,O8o,Fj,V8o,X8o,z8o,q_,mce,Q8o,W8o,Tj,H8o,U8o,J8o,j_,gce,Y8o,K8o,Mj,Z8o,eMo,oMo,D_,hce,rMo,tMo,Ej,aMo,nMo,sMo,G_,pce,lMo,iMo,Cj,dMo,cMo,fMo,O_,_ce,mMo,gMo,wj,hMo,pMo,_Mo,V_,uce,uMo,bMo,Aj,vMo,FMo,TMo,X_,bce,MMo,EMo,Lj,CMo,wMo,AMo,z_,vce,LMo,yMo,yj,xMo,$Mo,kMo,Q_,Fce,SMo,RMo,xj,PMo,BMo,IMo,W_,Tce,NMo,qMo,$j,jMo,DMo,GMo,H_,Mce,OMo,VMo,kj,XMo,zMo,QMo,U_,Ece,WMo,HMo,Sj,UMo,JMo,YMo,J_,Cce,KMo,ZMo,Rj,eEo,oEo,rEo,Y_,wce,tEo,aEo,Pj,nEo,sEo,lEo,K_,Ace,iEo,dEo,Bj,cEo,fEo,mEo,Z_,Lce,gEo,hEo,Ij,pEo,_Eo,uEo,eu,yce,bEo,vEo,Nj,FEo,TEo,MEo,ou,xce,EEo,CEo,qj,wEo,AEo,LEo,ru,$ce,yEo,xEo,jj,$Eo,kEo,SEo,tu,kce,REo,PEo,Dj,BEo,IEo,NEo,au,Sce,qEo,jEo,Gj,DEo,GEo,OEo,nu,Rce,VEo,XEo,Oj,zEo,QEo,WEo,su,Pce,HEo,UEo,Vj,JEo,YEo,KEo,lu,Bce,ZEo,e4o,Xj,o4o,r4o,t4o,iu,Ice,a4o,n4o,zj,s4o,l4o,i4o,du,Nce,d4o,c4o,Qj,f4o,m4o,g4o,cu,qce,h4o,p4o,Wj,_4o,u4o,b4o,fu,jce,v4o,F4o,Hj,T4o,M4o,E4o,mu,Dce,C4o,w4o,Uj,A4o,L4o,y4o,gu,Gce,x4o,$4o,Jj,k4o,S4o,R4o,hu,Oce,P4o,B4o,Yj,I4o,N4o,q4o,pu,Vce,j4o,D4o,Kj,G4o,O4o,V4o,_u,Xce,X4o,z4o,Zj,Q4o,W4o,H4o,uu,zce,U4o,J4o,eD,Y4o,K4o,Z4o,bu,Qce,eCo,oCo,oD,rCo,tCo,aCo,vu,Wce,nCo,sCo,rD,lCo,iCo,dCo,Fu,Hce,cCo,fCo,tD,mCo,gCo,hCo,Tu,Uce,pCo,_Co,aD,uCo,bCo,vCo,Mu,Jce,FCo,TCo,nD,MCo,ECo,CCo,Eu,Yce,wCo,ACo,sD,LCo,yCo,xCo,Cu,Kce,$Co,kCo,lD,SCo,RCo,PCo,wu,Zce,BCo,ICo,iD,NCo,qCo,jCo,Au,efe,DCo,GCo,dD,OCo,VCo,XCo,Lu,ofe,zCo,QCo,cD,WCo,HCo,UCo,yu,rfe,JCo,YCo,fD,KCo,ZCo,e5o,xu,tfe,o5o,r5o,mD,t5o,a5o,n5o,$u,afe,s5o,l5o,gD,i5o,d5o,c5o,ku,nfe,f5o,m5o,hD,g5o,h5o,p5o,Su,sfe,_5o,u5o,pD,b5o,v5o,F5o,Ru,lfe,T5o,M5o,_D,E5o,C5o,w5o,Pu,A5o,ife,L5o,y5o,dfe,x5o,$5o,Bu,xOe,ji,Iu,cfe,gL,k5o,ffe,S5o,$Oe,$o,hL,R5o,Di,P5o,uD,B5o,I5o,bD,N5o,q5o,j5o,pL,D5o,mfe,G5o,O5o,V5o,st,_L,X5o,gfe,z5o,Q5o,Gi,W5o,hfe,H5o,U5o,vD,J5o,Y5o,K5o,Nu,Z5o,Ye,uL,e3o,pfe,o3o,r3o,Pa,t3o,_fe,a3o,n3o,ufe,s3o,l3o,bfe,i3o,d3o,c3o,G,qu,vfe,f3o,m3o,FD,g3o,h3o,p3o,ju,Ffe,_3o,u3o,TD,b3o,v3o,F3o,Du,Tfe,T3o,M3o,MD,E3o,C3o,w3o,Gu,Mfe,A3o,L3o,ED,y3o,x3o,$3o,Ou,Efe,k3o,S3o,CD,R3o,P3o,B3o,Vu,Cfe,I3o,N3o,wD,q3o,j3o,D3o,Xu,wfe,G3o,O3o,AD,V3o,X3o,z3o,zu,Afe,Q3o,W3o,LD,H3o,U3o,J3o,Qu,Lfe,Y3o,K3o,yD,Z3o,e0o,o0o,Wu,yfe,r0o,t0o,xD,a0o,n0o,s0o,Hu,xfe,l0o,i0o,$D,d0o,c0o,f0o,Uu,$fe,m0o,g0o,kD,h0o,p0o,_0o,Ju,kfe,u0o,b0o,SD,v0o,F0o,T0o,Yu,Sfe,M0o,E0o,RD,C0o,w0o,A0o,Ku,Rfe,L0o,y0o,PD,x0o,$0o,k0o,Zu,Pfe,S0o,R0o,BD,P0o,B0o,I0o,e2,Bfe,N0o,q0o,ID,j0o,D0o,G0o,o2,Ife,O0o,V0o,ND,X0o,z0o,Q0o,r2,Nfe,W0o,H0o,qD,U0o,J0o,Y0o,t2,qfe,K0o,Z0o,jD,ewo,owo,rwo,a2,jfe,two,awo,DD,nwo,swo,lwo,n2,Dfe,iwo,dwo,GD,cwo,fwo,mwo,s2,Gfe,gwo,hwo,OD,pwo,_wo,uwo,l2,Ofe,bwo,vwo,VD,Fwo,Two,Mwo,i2,Vfe,Ewo,Cwo,XD,wwo,Awo,Lwo,d2,Xfe,ywo,xwo,zD,$wo,kwo,Swo,c2,zfe,Rwo,Pwo,QD,Bwo,Iwo,Nwo,f2,Qfe,qwo,jwo,WD,Dwo,Gwo,Owo,m2,Wfe,Vwo,Xwo,HD,zwo,Qwo,Wwo,g2,Hfe,Hwo,Uwo,UD,Jwo,Ywo,Kwo,h2,Ufe,Zwo,eAo,JD,oAo,rAo,tAo,p2,Jfe,aAo,nAo,YD,sAo,lAo,iAo,_2,Yfe,dAo,cAo,KD,fAo,mAo,gAo,u2,Kfe,hAo,pAo,ZD,_Ao,uAo,bAo,b2,Zfe,vAo,FAo,eG,TAo,MAo,EAo,v2,eme,CAo,wAo,oG,AAo,LAo,yAo,F2,ome,xAo,$Ao,rG,kAo,SAo,RAo,T2,rme,PAo,BAo,tG,IAo,NAo,qAo,M2,tme,jAo,DAo,aG,GAo,OAo,VAo,E2,ame,XAo,zAo,nG,QAo,WAo,HAo,C2,nme,UAo,JAo,sG,YAo,KAo,ZAo,w2,sme,eLo,oLo,lG,rLo,tLo,aLo,A2,lme,nLo,sLo,iG,lLo,iLo,dLo,L2,ime,cLo,fLo,dG,mLo,gLo,hLo,y2,pLo,dme,_Lo,uLo,cme,bLo,vLo,x2,kOe,Oi,$2,fme,bL,FLo,mme,TLo,SOe,ko,vL,MLo,Vi,ELo,cG,CLo,wLo,fG,ALo,LLo,yLo,FL,xLo,gme,$Lo,kLo,SLo,lt,TL,RLo,hme,PLo,BLo,Xi,ILo,pme,NLo,qLo,mG,jLo,DLo,GLo,k2,OLo,Ke,ML,VLo,_me,XLo,zLo,Ba,QLo,ume,WLo,HLo,bme,ULo,JLo,vme,YLo,KLo,ZLo,z,S2,Fme,eyo,oyo,gG,ryo,tyo,ayo,R2,Tme,nyo,syo,hG,lyo,iyo,dyo,P2,Mme,cyo,fyo,pG,myo,gyo,hyo,B2,Eme,pyo,_yo,_G,uyo,byo,vyo,I2,Cme,Fyo,Tyo,uG,Myo,Eyo,Cyo,N2,wme,wyo,Ayo,bG,Lyo,yyo,xyo,q2,Ame,$yo,kyo,vG,Syo,Ryo,Pyo,j2,Lme,Byo,Iyo,FG,Nyo,qyo,jyo,D2,yme,Dyo,Gyo,TG,Oyo,Vyo,Xyo,G2,xme,zyo,Qyo,MG,Wyo,Hyo,Uyo,O2,$me,Jyo,Yyo,EG,Kyo,Zyo,e9o,V2,kme,o9o,r9o,CG,t9o,a9o,n9o,X2,Sme,s9o,l9o,wG,i9o,d9o,c9o,z2,Rme,f9o,m9o,AG,g9o,h9o,p9o,Q2,Pme,_9o,u9o,LG,b9o,v9o,F9o,W2,Bme,T9o,M9o,yG,E9o,C9o,w9o,H2,Ime,A9o,L9o,xG,y9o,x9o,$9o,U2,Nme,k9o,S9o,$G,R9o,P9o,B9o,J2,qme,I9o,N9o,kG,q9o,j9o,D9o,Y2,jme,G9o,O9o,SG,V9o,X9o,z9o,K2,Dme,Q9o,W9o,RG,H9o,U9o,J9o,Z2,Gme,Y9o,K9o,PG,Z9o,exo,oxo,e1,Ome,rxo,txo,BG,axo,nxo,sxo,o1,Vme,lxo,ixo,IG,dxo,cxo,fxo,r1,Xme,mxo,gxo,NG,hxo,pxo,_xo,t1,zme,uxo,bxo,qG,vxo,Fxo,Txo,a1,Qme,Mxo,Exo,jG,Cxo,wxo,Axo,n1,Wme,Lxo,yxo,DG,xxo,$xo,kxo,s1,Hme,Sxo,Rxo,GG,Pxo,Bxo,Ixo,l1,Ume,Nxo,qxo,OG,jxo,Dxo,Gxo,i1,Jme,Oxo,Vxo,VG,Xxo,zxo,Qxo,d1,Yme,Wxo,Hxo,XG,Uxo,Jxo,Yxo,c1,Kme,Kxo,Zxo,zG,e$o,o$o,r$o,f1,Zme,t$o,a$o,QG,n$o,s$o,l$o,m1,ege,i$o,d$o,WG,c$o,f$o,m$o,g1,oge,g$o,h$o,HG,p$o,_$o,u$o,h1,rge,b$o,v$o,UG,F$o,T$o,M$o,p1,tge,E$o,C$o,JG,w$o,A$o,L$o,_1,age,y$o,x$o,YG,$$o,k$o,S$o,u1,R$o,nge,P$o,B$o,sge,I$o,N$o,b1,ROe,zi,v1,lge,EL,q$o,ige,j$o,POe,So,CL,D$o,Qi,G$o,KG,O$o,V$o,ZG,X$o,z$o,Q$o,wL,W$o,dge,H$o,U$o,J$o,it,AL,Y$o,cge,K$o,Z$o,Wi,eko,fge,oko,rko,eO,tko,ako,nko,F1,sko,Ze,LL,lko,mge,iko,dko,Ia,cko,gge,fko,mko,hge,gko,hko,pge,pko,_ko,uko,W,T1,_ge,bko,vko,oO,Fko,Tko,Mko,M1,uge,Eko,Cko,rO,wko,Ako,Lko,E1,bge,yko,xko,tO,$ko,kko,Sko,C1,vge,Rko,Pko,aO,Bko,Iko,Nko,w1,Fge,qko,jko,nO,Dko,Gko,Oko,A1,Tge,Vko,Xko,sO,zko,Qko,Wko,L1,Mge,Hko,Uko,lO,Jko,Yko,Kko,y1,Ege,Zko,eSo,iO,oSo,rSo,tSo,x1,Cge,aSo,nSo,dO,sSo,lSo,iSo,$1,wge,dSo,cSo,cO,fSo,mSo,gSo,k1,Age,hSo,pSo,fO,_So,uSo,bSo,S1,Lge,vSo,FSo,mO,TSo,MSo,ESo,R1,yge,CSo,wSo,gO,ASo,LSo,ySo,P1,xge,xSo,$So,hO,kSo,SSo,RSo,B1,$ge,PSo,BSo,pO,ISo,NSo,qSo,I1,kge,jSo,DSo,_O,GSo,OSo,VSo,N1,Sge,XSo,zSo,uO,QSo,WSo,HSo,q1,Rge,USo,JSo,bO,YSo,KSo,ZSo,j1,Pge,eRo,oRo,vO,rRo,tRo,aRo,D1,Bge,nRo,sRo,FO,lRo,iRo,dRo,G1,Ige,cRo,fRo,TO,mRo,gRo,hRo,O1,Nge,pRo,_Ro,MO,uRo,bRo,vRo,V1,qge,FRo,TRo,EO,MRo,ERo,CRo,X1,jge,wRo,ARo,CO,LRo,yRo,xRo,z1,Dge,$Ro,kRo,wO,SRo,RRo,PRo,Q1,Gge,BRo,IRo,AO,NRo,qRo,jRo,W1,Oge,DRo,GRo,LO,ORo,VRo,XRo,H1,Vge,zRo,QRo,yO,WRo,HRo,URo,U1,Xge,JRo,YRo,xO,KRo,ZRo,ePo,J1,zge,oPo,rPo,$O,tPo,aPo,nPo,Y1,Qge,sPo,lPo,kO,iPo,dPo,cPo,K1,Wge,fPo,mPo,SO,gPo,hPo,pPo,Z1,Hge,_Po,uPo,Uge,bPo,vPo,FPo,eb,Jge,TPo,MPo,RO,EPo,CPo,wPo,ob,Yge,APo,LPo,PO,yPo,xPo,$Po,rb,Kge,kPo,SPo,BO,RPo,PPo,BPo,tb,Zge,IPo,NPo,IO,qPo,jPo,DPo,ab,GPo,ehe,OPo,VPo,ohe,XPo,zPo,nb,BOe,Hi,sb,rhe,yL,QPo,the,WPo,IOe,Ro,xL,HPo,Ui,UPo,NO,JPo,YPo,qO,KPo,ZPo,eBo,$L,oBo,ahe,rBo,tBo,aBo,dt,kL,nBo,nhe,sBo,lBo,Ji,iBo,she,dBo,cBo,jO,fBo,mBo,gBo,lb,hBo,eo,SL,pBo,lhe,_Bo,uBo,Na,bBo,ihe,vBo,FBo,dhe,TBo,MBo,che,EBo,CBo,wBo,pe,ib,fhe,ABo,LBo,DO,yBo,xBo,$Bo,db,mhe,kBo,SBo,GO,RBo,PBo,BBo,cb,ghe,IBo,NBo,OO,qBo,jBo,DBo,fb,hhe,GBo,OBo,VO,VBo,XBo,zBo,mb,phe,QBo,WBo,XO,HBo,UBo,JBo,gb,_he,YBo,KBo,zO,ZBo,eIo,oIo,hb,uhe,rIo,tIo,QO,aIo,nIo,sIo,pb,bhe,lIo,iIo,WO,dIo,cIo,fIo,_b,vhe,mIo,gIo,HO,hIo,pIo,_Io,ub,Fhe,uIo,bIo,UO,vIo,FIo,TIo,bb,The,MIo,EIo,JO,CIo,wIo,AIo,vb,Mhe,LIo,yIo,YO,xIo,$Io,kIo,Fb,Ehe,SIo,RIo,KO,PIo,BIo,IIo,Tb,Che,NIo,qIo,ZO,jIo,DIo,GIo,Mb,whe,OIo,VIo,eV,XIo,zIo,QIo,Eb,Ahe,WIo,HIo,oV,UIo,JIo,YIo,Cb,Lhe,KIo,ZIo,rV,eNo,oNo,rNo,wb,tNo,yhe,aNo,nNo,xhe,sNo,lNo,Ab,NOe,Yi,Lb,$he,RL,iNo,khe,dNo,qOe,Po,PL,cNo,Ki,fNo,tV,mNo,gNo,aV,hNo,pNo,_No,BL,uNo,She,bNo,vNo,FNo,ct,IL,TNo,Rhe,MNo,ENo,Zi,CNo,Phe,wNo,ANo,nV,LNo,yNo,xNo,yb,$No,oo,NL,kNo,Bhe,SNo,RNo,qa,PNo,Ihe,BNo,INo,Nhe,NNo,qNo,qhe,jNo,DNo,GNo,N,xb,jhe,ONo,VNo,sV,XNo,zNo,QNo,$b,Dhe,WNo,HNo,lV,UNo,JNo,YNo,kb,Ghe,KNo,ZNo,iV,eqo,oqo,rqo,Sb,Ohe,tqo,aqo,dV,nqo,sqo,lqo,Rb,Vhe,iqo,dqo,cV,cqo,fqo,mqo,Pb,Xhe,gqo,hqo,fV,pqo,_qo,uqo,Bb,zhe,bqo,vqo,mV,Fqo,Tqo,Mqo,Ib,Qhe,Eqo,Cqo,gV,wqo,Aqo,Lqo,Nb,Whe,yqo,xqo,hV,$qo,kqo,Sqo,qb,Hhe,Rqo,Pqo,pV,Bqo,Iqo,Nqo,jb,Uhe,qqo,jqo,_V,Dqo,Gqo,Oqo,Db,Jhe,Vqo,Xqo,uV,zqo,Qqo,Wqo,Gb,Yhe,Hqo,Uqo,bV,Jqo,Yqo,Kqo,Ob,Khe,Zqo,ejo,vV,ojo,rjo,tjo,Vb,Zhe,ajo,njo,FV,sjo,ljo,ijo,Xb,epe,djo,cjo,TV,fjo,mjo,gjo,zb,ope,hjo,pjo,MV,_jo,ujo,bjo,Qb,rpe,vjo,Fjo,EV,Tjo,Mjo,Ejo,Wb,tpe,Cjo,wjo,CV,Ajo,Ljo,yjo,Hb,ape,xjo,$jo,wV,kjo,Sjo,Rjo,Ub,npe,Pjo,Bjo,AV,Ijo,Njo,qjo,Jb,spe,jjo,Djo,LV,Gjo,Ojo,Vjo,Yb,lpe,Xjo,zjo,yV,Qjo,Wjo,Hjo,Kb,ipe,Ujo,Jjo,xV,Yjo,Kjo,Zjo,Zb,dpe,eDo,oDo,$V,rDo,tDo,aDo,ev,cpe,nDo,sDo,kV,lDo,iDo,dDo,ov,fpe,cDo,fDo,SV,mDo,gDo,hDo,rv,mpe,pDo,_Do,RV,uDo,bDo,vDo,tv,gpe,FDo,TDo,PV,MDo,EDo,CDo,av,hpe,wDo,ADo,BV,LDo,yDo,xDo,nv,ppe,$Do,kDo,IV,SDo,RDo,PDo,sv,_pe,BDo,IDo,NV,NDo,qDo,jDo,lv,upe,DDo,GDo,qV,ODo,VDo,XDo,iv,bpe,zDo,QDo,jV,WDo,HDo,UDo,dv,vpe,JDo,YDo,DV,KDo,ZDo,eGo,cv,Fpe,oGo,rGo,GV,tGo,aGo,nGo,fv,Tpe,sGo,lGo,OV,iGo,dGo,cGo,mv,Mpe,fGo,mGo,VV,gGo,hGo,pGo,gv,Epe,_Go,uGo,XV,bGo,vGo,FGo,hv,Cpe,TGo,MGo,zV,EGo,CGo,wGo,pv,wpe,AGo,LGo,QV,yGo,xGo,$Go,_v,Ape,kGo,SGo,WV,RGo,PGo,BGo,uv,Lpe,IGo,NGo,HV,qGo,jGo,DGo,bv,ype,GGo,OGo,UV,VGo,XGo,zGo,vv,xpe,QGo,WGo,JV,HGo,UGo,JGo,Fv,$pe,YGo,KGo,YV,ZGo,eOo,oOo,Tv,kpe,rOo,tOo,KV,aOo,nOo,sOo,Mv,Spe,lOo,iOo,ZV,dOo,cOo,fOo,Ev,Rpe,mOo,gOo,eX,hOo,pOo,_Oo,Cv,uOo,Ppe,bOo,vOo,Bpe,FOo,TOo,wv,jOe,ed,Av,Ipe,qL,MOo,Npe,EOo,DOe,Bo,jL,COo,od,wOo,oX,AOo,LOo,rX,yOo,xOo,$Oo,DL,kOo,qpe,SOo,ROo,POo,ft,GL,BOo,jpe,IOo,NOo,rd,qOo,Dpe,jOo,DOo,tX,GOo,OOo,VOo,Lv,XOo,ro,OL,zOo,Gpe,QOo,WOo,ja,HOo,Ope,UOo,JOo,Vpe,YOo,KOo,Xpe,ZOo,eVo,oVo,Z,yv,zpe,rVo,tVo,aX,aVo,nVo,sVo,xv,Qpe,lVo,iVo,nX,dVo,cVo,fVo,$v,Wpe,mVo,gVo,sX,hVo,pVo,_Vo,kv,Hpe,uVo,bVo,lX,vVo,FVo,TVo,Sv,Upe,MVo,EVo,iX,CVo,wVo,AVo,Rv,Jpe,LVo,yVo,dX,xVo,$Vo,kVo,Pv,Ype,SVo,RVo,cX,PVo,BVo,IVo,Bv,Kpe,NVo,qVo,fX,jVo,DVo,GVo,Iv,Zpe,OVo,VVo,mX,XVo,zVo,QVo,Nv,e_e,WVo,HVo,gX,UVo,JVo,YVo,qv,o_e,KVo,ZVo,hX,eXo,oXo,rXo,jv,r_e,tXo,aXo,pX,nXo,sXo,lXo,Dv,t_e,iXo,dXo,_X,cXo,fXo,mXo,Gv,a_e,gXo,hXo,uX,pXo,_Xo,uXo,Ov,n_e,bXo,vXo,bX,FXo,TXo,MXo,Vv,s_e,EXo,CXo,vX,wXo,AXo,LXo,Xv,l_e,yXo,xXo,FX,$Xo,kXo,SXo,zv,i_e,RXo,PXo,TX,BXo,IXo,NXo,Qv,d_e,qXo,jXo,MX,DXo,GXo,OXo,Wv,c_e,VXo,XXo,EX,zXo,QXo,WXo,Hv,f_e,HXo,UXo,CX,JXo,YXo,KXo,Uv,m_e,ZXo,ezo,wX,ozo,rzo,tzo,Jv,g_e,azo,nzo,AX,szo,lzo,izo,Yv,h_e,dzo,czo,LX,fzo,mzo,gzo,Kv,p_e,hzo,pzo,yX,_zo,uzo,bzo,Zv,__e,vzo,Fzo,xX,Tzo,Mzo,Ezo,eF,u_e,Czo,wzo,$X,Azo,Lzo,yzo,oF,b_e,xzo,$zo,kX,kzo,Szo,Rzo,rF,v_e,Pzo,Bzo,SX,Izo,Nzo,qzo,tF,F_e,jzo,Dzo,RX,Gzo,Ozo,Vzo,aF,Xzo,T_e,zzo,Qzo,M_e,Wzo,Hzo,nF,GOe,td,sF,E_e,VL,Uzo,C_e,Jzo,OOe,Io,XL,Yzo,ad,Kzo,PX,Zzo,eQo,BX,oQo,rQo,tQo,zL,aQo,w_e,nQo,sQo,lQo,mt,QL,iQo,A_e,dQo,cQo,nd,fQo,L_e,mQo,gQo,IX,hQo,pQo,_Qo,lF,uQo,to,WL,bQo,y_e,vQo,FQo,Da,TQo,x_e,MQo,EQo,$_e,CQo,wQo,k_e,AQo,LQo,yQo,No,iF,S_e,xQo,$Qo,NX,kQo,SQo,RQo,dF,R_e,PQo,BQo,qX,IQo,NQo,qQo,cF,P_e,jQo,DQo,jX,GQo,OQo,VQo,fF,B_e,XQo,zQo,DX,QQo,WQo,HQo,mF,I_e,UQo,JQo,GX,YQo,KQo,ZQo,gF,N_e,eWo,oWo,OX,rWo,tWo,aWo,hF,nWo,q_e,sWo,lWo,j_e,iWo,dWo,pF,VOe,sd,_F,D_e,HL,cWo,G_e,fWo,XOe,qo,UL,mWo,ld,gWo,VX,hWo,pWo,XX,_Wo,uWo,bWo,JL,vWo,O_e,FWo,TWo,MWo,gt,YL,EWo,V_e,CWo,wWo,id,AWo,X_e,LWo,yWo,zX,xWo,$Wo,kWo,uF,SWo,ao,KL,RWo,z_e,PWo,BWo,Ga,IWo,Q_e,NWo,qWo,W_e,jWo,DWo,H_e,GWo,OWo,VWo,H,bF,U_e,XWo,zWo,QX,QWo,WWo,HWo,vF,J_e,UWo,JWo,WX,YWo,KWo,ZWo,FF,Y_e,eHo,oHo,HX,rHo,tHo,aHo,TF,K_e,nHo,sHo,UX,lHo,iHo,dHo,MF,Z_e,cHo,fHo,JX,mHo,gHo,hHo,EF,eue,pHo,_Ho,YX,uHo,bHo,vHo,CF,oue,FHo,THo,KX,MHo,EHo,CHo,wF,rue,wHo,AHo,ZX,LHo,yHo,xHo,AF,tue,$Ho,kHo,ez,SHo,RHo,PHo,LF,aue,BHo,IHo,oz,NHo,qHo,jHo,yF,nue,DHo,GHo,rz,OHo,VHo,XHo,xF,sue,zHo,QHo,tz,WHo,HHo,UHo,$F,lue,JHo,YHo,az,KHo,ZHo,eUo,kF,iue,oUo,rUo,nz,tUo,aUo,nUo,SF,due,sUo,lUo,sz,iUo,dUo,cUo,RF,cue,fUo,mUo,lz,gUo,hUo,pUo,PF,fue,_Uo,uUo,iz,bUo,vUo,FUo,BF,mue,TUo,MUo,dz,EUo,CUo,wUo,IF,gue,AUo,LUo,cz,yUo,xUo,$Uo,NF,hue,kUo,SUo,fz,RUo,PUo,BUo,qF,pue,IUo,NUo,mz,qUo,jUo,DUo,jF,_ue,GUo,OUo,gz,VUo,XUo,zUo,DF,uue,QUo,WUo,hz,HUo,UUo,JUo,GF,bue,YUo,KUo,pz,ZUo,eJo,oJo,OF,vue,rJo,tJo,_z,aJo,nJo,sJo,VF,Fue,lJo,iJo,uz,dJo,cJo,fJo,XF,Tue,mJo,gJo,bz,hJo,pJo,_Jo,zF,Mue,uJo,bJo,vz,vJo,FJo,TJo,QF,Eue,MJo,EJo,Fz,CJo,wJo,AJo,WF,Cue,LJo,yJo,Tz,xJo,$Jo,kJo,HF,wue,SJo,RJo,Mz,PJo,BJo,IJo,UF,Aue,NJo,qJo,Ez,jJo,DJo,GJo,JF,Lue,OJo,VJo,Cz,XJo,zJo,QJo,YF,yue,WJo,HJo,wz,UJo,JJo,YJo,KF,xue,KJo,ZJo,Az,eYo,oYo,rYo,ZF,$ue,tYo,aYo,Lz,nYo,sYo,lYo,e6,iYo,kue,dYo,cYo,Sue,fYo,mYo,o6,zOe,dd,r6,Rue,ZL,gYo,Pue,hYo,QOe,jo,ey,pYo,cd,_Yo,yz,uYo,bYo,xz,vYo,FYo,TYo,oy,MYo,Bue,EYo,CYo,wYo,ht,ry,AYo,Iue,LYo,yYo,fd,xYo,Nue,$Yo,kYo,$z,SYo,RYo,PYo,t6,BYo,no,ty,IYo,que,NYo,qYo,Oa,jYo,jue,DYo,GYo,Due,OYo,VYo,Gue,XYo,zYo,QYo,V,a6,Oue,WYo,HYo,kz,UYo,JYo,YYo,n6,Vue,KYo,ZYo,Sz,eKo,oKo,rKo,s6,Xue,tKo,aKo,Rz,nKo,sKo,lKo,l6,zue,iKo,dKo,Pz,cKo,fKo,mKo,i6,Que,gKo,hKo,Bz,pKo,_Ko,uKo,d6,Wue,bKo,vKo,Iz,FKo,TKo,MKo,c6,Hue,EKo,CKo,Nz,wKo,AKo,LKo,f6,Uue,yKo,xKo,qz,$Ko,kKo,SKo,m6,Jue,RKo,PKo,jz,BKo,IKo,NKo,g6,Yue,qKo,jKo,Dz,DKo,GKo,OKo,h6,Kue,VKo,XKo,Gz,zKo,QKo,WKo,p6,Zue,HKo,UKo,Oz,JKo,YKo,KKo,_6,e2e,ZKo,eZo,Vz,oZo,rZo,tZo,u6,o2e,aZo,nZo,Xz,sZo,lZo,iZo,b6,r2e,dZo,cZo,zz,fZo,mZo,gZo,v6,t2e,hZo,pZo,Qz,_Zo,uZo,bZo,F6,a2e,vZo,FZo,Wz,TZo,MZo,EZo,T6,n2e,CZo,wZo,Hz,AZo,LZo,yZo,M6,s2e,xZo,$Zo,Uz,kZo,SZo,RZo,E6,l2e,PZo,BZo,Jz,IZo,NZo,qZo,C6,i2e,jZo,DZo,Yz,GZo,OZo,VZo,w6,d2e,XZo,zZo,Kz,QZo,WZo,HZo,A6,c2e,UZo,JZo,Zz,YZo,KZo,ZZo,L6,f2e,eer,oer,eQ,rer,ter,aer,y6,m2e,ner,ser,oQ,ler,ier,der,x6,g2e,cer,fer,rQ,mer,ger,her,$6,h2e,per,_er,tQ,uer,ber,ver,k6,p2e,Fer,Ter,aQ,Mer,Eer,Cer,S6,_2e,wer,Aer,nQ,Ler,yer,xer,R6,u2e,$er,ker,sQ,Ser,Rer,Per,P6,b2e,Ber,Ier,lQ,Ner,qer,jer,B6,v2e,Der,Ger,iQ,Oer,Ver,Xer,I6,F2e,zer,Qer,dQ,Wer,Her,Uer,N6,T2e,Jer,Yer,cQ,Ker,Zer,eor,q6,M2e,oor,ror,fQ,tor,aor,nor,j6,E2e,sor,lor,mQ,ior,dor,cor,D6,C2e,mor,gor,gQ,hor,por,_or,G6,w2e,uor,bor,hQ,vor,For,Tor,O6,A2e,Mor,Eor,pQ,Cor,wor,Aor,V6,L2e,Lor,yor,_Q,xor,$or,kor,X6,y2e,Sor,Ror,uQ,Por,Bor,Ior,z6,Nor,x2e,qor,jor,$2e,Dor,Gor,Q6,WOe,md,W6,k2e,ay,Oor,S2e,Vor,HOe,Do,ny,Xor,gd,zor,bQ,Qor,Wor,vQ,Hor,Uor,Jor,sy,Yor,R2e,Kor,Zor,err,pt,ly,orr,P2e,rrr,trr,hd,arr,B2e,nrr,srr,FQ,lrr,irr,drr,H6,crr,so,iy,frr,I2e,mrr,grr,Va,hrr,N2e,prr,_rr,q2e,urr,brr,j2e,vrr,Frr,Trr,D2e,U6,G2e,Mrr,Err,TQ,Crr,wrr,Arr,J6,Lrr,O2e,yrr,xrr,V2e,$rr,krr,Y6,UOe,pd,K6,X2e,dy,Srr,z2e,Rrr,JOe,Go,cy,Prr,_d,Brr,MQ,Irr,Nrr,EQ,qrr,jrr,Drr,fy,Grr,Q2e,Orr,Vrr,Xrr,_t,my,zrr,W2e,Qrr,Wrr,ud,Hrr,H2e,Urr,Jrr,CQ,Yrr,Krr,Zrr,Z6,etr,lo,gy,otr,U2e,rtr,ttr,Xa,atr,J2e,ntr,str,Y2e,ltr,itr,K2e,dtr,ctr,ftr,Fe,eT,Z2e,mtr,gtr,wQ,htr,ptr,_tr,oT,e1e,utr,btr,AQ,vtr,Ftr,Ttr,rT,o1e,Mtr,Etr,LQ,Ctr,wtr,Atr,tT,r1e,Ltr,ytr,yQ,xtr,$tr,ktr,zs,t1e,Str,Rtr,xQ,Ptr,Btr,$Q,Itr,Ntr,qtr,aT,a1e,jtr,Dtr,kQ,Gtr,Otr,Vtr,Qs,n1e,Xtr,ztr,SQ,Qtr,Wtr,RQ,Htr,Utr,Jtr,ut,s1e,Ytr,Ktr,PQ,Ztr,ear,BQ,oar,rar,IQ,tar,aar,nar,nT,l1e,sar,lar,NQ,iar,dar,car,sT,i1e,far,mar,qQ,gar,har,par,lT,d1e,_ar,uar,jQ,bar,Far,Tar,iT,c1e,Mar,Ear,DQ,Car,war,Aar,dT,f1e,Lar,yar,GQ,xar,$ar,kar,cT,m1e,Sar,Rar,OQ,Par,Bar,Iar,fT,g1e,Nar,qar,VQ,jar,Dar,Gar,mT,Oar,h1e,Var,Xar,p1e,zar,Qar,gT,YOe,bd,hT,_1e,hy,War,u1e,Har,KOe,Oo,py,Uar,vd,Jar,XQ,Yar,Kar,zQ,Zar,enr,onr,_y,rnr,b1e,tnr,anr,nnr,bt,uy,snr,v1e,lnr,inr,Fd,dnr,F1e,cnr,fnr,QQ,mnr,gnr,hnr,pT,pnr,io,by,_nr,T1e,unr,bnr,za,vnr,M1e,Fnr,Tnr,E1e,Mnr,Enr,C1e,Cnr,wnr,Anr,w1e,_T,A1e,Lnr,ynr,WQ,xnr,$nr,knr,uT,Snr,L1e,Rnr,Pnr,y1e,Bnr,Inr,bT,ZOe,Td,vT,x1e,vy,Nnr,$1e,qnr,eVe,Vo,Fy,jnr,Md,Dnr,HQ,Gnr,Onr,UQ,Vnr,Xnr,znr,Ty,Qnr,k1e,Wnr,Hnr,Unr,vt,My,Jnr,S1e,Ynr,Knr,Ed,Znr,R1e,esr,osr,JQ,rsr,tsr,asr,FT,nsr,co,Ey,ssr,P1e,lsr,isr,Qa,dsr,B1e,csr,fsr,I1e,msr,gsr,N1e,hsr,psr,_sr,q1e,TT,j1e,usr,bsr,YQ,vsr,Fsr,Tsr,MT,Msr,D1e,Esr,Csr,G1e,wsr,Asr,ET,oVe,Cd,CT,O1e,Cy,Lsr,V1e,ysr,rVe,Xo,wy,xsr,wd,$sr,KQ,ksr,Ssr,ZQ,Rsr,Psr,Bsr,Ay,Isr,X1e,Nsr,qsr,jsr,Ft,Ly,Dsr,z1e,Gsr,Osr,Ad,Vsr,Q1e,Xsr,zsr,eW,Qsr,Wsr,Hsr,wT,Usr,fo,yy,Jsr,W1e,Ysr,Ksr,Wa,Zsr,H1e,elr,olr,U1e,rlr,tlr,J1e,alr,nlr,slr,Pe,AT,Y1e,llr,ilr,oW,dlr,clr,flr,LT,K1e,mlr,glr,rW,hlr,plr,_lr,yT,Z1e,ulr,blr,tW,vlr,Flr,Tlr,xT,ebe,Mlr,Elr,aW,Clr,wlr,Alr,$T,obe,Llr,ylr,nW,xlr,$lr,klr,kT,rbe,Slr,Rlr,sW,Plr,Blr,Ilr,ST,tbe,Nlr,qlr,lW,jlr,Dlr,Glr,RT,abe,Olr,Vlr,iW,Xlr,zlr,Qlr,PT,nbe,Wlr,Hlr,dW,Ulr,Jlr,Ylr,BT,Klr,sbe,Zlr,eir,lbe,oir,rir,IT,tVe,Ld,NT,ibe,xy,tir,dbe,air,aVe,zo,$y,nir,yd,sir,cW,lir,iir,fW,dir,cir,fir,ky,mir,cbe,gir,hir,pir,Tt,Sy,_ir,fbe,uir,bir,xd,vir,mbe,Fir,Tir,mW,Mir,Eir,Cir,qT,wir,mo,Ry,Air,gbe,Lir,yir,Ha,xir,hbe,$ir,kir,pbe,Sir,Rir,_be,Pir,Bir,Iir,et,jT,ube,Nir,qir,gW,jir,Dir,Gir,DT,bbe,Oir,Vir,hW,Xir,zir,Qir,GT,vbe,Wir,Hir,pW,Uir,Jir,Yir,OT,Fbe,Kir,Zir,_W,edr,odr,rdr,VT,Tbe,tdr,adr,uW,ndr,sdr,ldr,XT,idr,Mbe,ddr,cdr,Ebe,fdr,mdr,zT,nVe,$d,QT,Cbe,Py,gdr,wbe,hdr,sVe,Qo,By,pdr,kd,_dr,bW,udr,bdr,vW,vdr,Fdr,Tdr,Iy,Mdr,Abe,Edr,Cdr,wdr,Mt,Ny,Adr,Lbe,Ldr,ydr,Sd,xdr,ybe,$dr,kdr,FW,Sdr,Rdr,Pdr,WT,Bdr,go,qy,Idr,xbe,Ndr,qdr,Ua,jdr,$be,Ddr,Gdr,kbe,Odr,Vdr,Sbe,Xdr,zdr,Qdr,Le,HT,Rbe,Wdr,Hdr,TW,Udr,Jdr,Ydr,UT,Pbe,Kdr,Zdr,MW,ecr,ocr,rcr,JT,Bbe,tcr,acr,EW,ncr,scr,lcr,YT,Ibe,icr,dcr,CW,ccr,fcr,mcr,KT,Nbe,gcr,hcr,wW,pcr,_cr,ucr,ZT,qbe,bcr,vcr,AW,Fcr,Tcr,Mcr,e7,jbe,Ecr,Ccr,LW,wcr,Acr,Lcr,o7,Dbe,ycr,xcr,yW,$cr,kcr,Scr,r7,Gbe,Rcr,Pcr,xW,Bcr,Icr,Ncr,t7,Obe,qcr,jcr,$W,Dcr,Gcr,Ocr,a7,Vcr,Vbe,Xcr,zcr,Xbe,Qcr,Wcr,n7,lVe,Rd,s7,zbe,jy,Hcr,Qbe,Ucr,iVe,Wo,Dy,Jcr,Pd,Ycr,kW,Kcr,Zcr,SW,efr,ofr,rfr,Gy,tfr,Wbe,afr,nfr,sfr,Et,Oy,lfr,Hbe,ifr,dfr,Bd,cfr,Ube,ffr,mfr,RW,gfr,hfr,pfr,l7,_fr,ho,Vy,ufr,Jbe,bfr,vfr,Ja,Ffr,Ybe,Tfr,Mfr,Kbe,Efr,Cfr,Zbe,wfr,Afr,Lfr,Xy,i7,eve,yfr,xfr,PW,$fr,kfr,Sfr,d7,ove,Rfr,Pfr,BW,Bfr,Ifr,Nfr,c7,qfr,rve,jfr,Dfr,tve,Gfr,Ofr,f7,dVe,Id,m7,ave,zy,Vfr,nve,Xfr,cVe,Ho,Qy,zfr,Nd,Qfr,IW,Wfr,Hfr,NW,Ufr,Jfr,Yfr,Wy,Kfr,sve,Zfr,emr,omr,Ct,Hy,rmr,lve,tmr,amr,qd,nmr,ive,smr,lmr,qW,imr,dmr,cmr,g7,fmr,po,Uy,mmr,dve,gmr,hmr,Ya,pmr,cve,_mr,umr,fve,bmr,vmr,mve,Fmr,Tmr,Mmr,ot,h7,gve,Emr,Cmr,jW,wmr,Amr,Lmr,p7,hve,ymr,xmr,DW,$mr,kmr,Smr,_7,pve,Rmr,Pmr,GW,Bmr,Imr,Nmr,u7,_ve,qmr,jmr,OW,Dmr,Gmr,Omr,b7,uve,Vmr,Xmr,VW,zmr,Qmr,Wmr,v7,Hmr,bve,Umr,Jmr,vve,Ymr,Kmr,F7,fVe,jd,T7,Fve,Jy,Zmr,Tve,egr,mVe,Uo,Yy,ogr,Dd,rgr,XW,tgr,agr,zW,ngr,sgr,lgr,Ky,igr,Mve,dgr,cgr,fgr,wt,Zy,mgr,Eve,ggr,hgr,Gd,pgr,Cve,_gr,ugr,QW,bgr,vgr,Fgr,M7,Tgr,_o,e9,Mgr,wve,Egr,Cgr,Ka,wgr,Ave,Agr,Lgr,Lve,ygr,xgr,yve,$gr,kgr,Sgr,Od,E7,xve,Rgr,Pgr,WW,Bgr,Igr,Ngr,C7,$ve,qgr,jgr,HW,Dgr,Ggr,Ogr,w7,kve,Vgr,Xgr,UW,zgr,Qgr,Wgr,A7,Hgr,Sve,Ugr,Jgr,Rve,Ygr,Kgr,L7,gVe,Vd,y7,Pve,o9,Zgr,Bve,ehr,hVe,Jo,r9,ohr,Xd,rhr,JW,thr,ahr,YW,nhr,shr,lhr,t9,ihr,Ive,dhr,chr,fhr,At,a9,mhr,Nve,ghr,hhr,zd,phr,qve,_hr,uhr,KW,bhr,vhr,Fhr,x7,Thr,uo,n9,Mhr,jve,Ehr,Chr,Za,whr,Dve,Ahr,Lhr,Gve,yhr,xhr,Ove,$hr,khr,Shr,s9,$7,Vve,Rhr,Phr,ZW,Bhr,Ihr,Nhr,k7,Xve,qhr,jhr,eH,Dhr,Ghr,Ohr,S7,Vhr,zve,Xhr,zhr,Qve,Qhr,Whr,R7,pVe,Qd,P7,Wve,l9,Hhr,Hve,Uhr,_Ve,Yo,i9,Jhr,Wd,Yhr,oH,Khr,Zhr,rH,epr,opr,rpr,d9,tpr,Uve,apr,npr,spr,Lt,c9,lpr,Jve,ipr,dpr,Hd,cpr,Yve,fpr,mpr,tH,gpr,hpr,ppr,B7,_pr,bo,f9,upr,Kve,bpr,vpr,en,Fpr,Zve,Tpr,Mpr,eFe,Epr,Cpr,oFe,wpr,Apr,Lpr,rFe,I7,tFe,ypr,xpr,aH,$pr,kpr,Spr,N7,Rpr,aFe,Ppr,Bpr,nFe,Ipr,Npr,q7,uVe,Ud,j7,sFe,m9,qpr,lFe,jpr,bVe,Ko,g9,Dpr,Jd,Gpr,nH,Opr,Vpr,sH,Xpr,zpr,Qpr,h9,Wpr,iFe,Hpr,Upr,Jpr,yt,p9,Ypr,dFe,Kpr,Zpr,Yd,e_r,cFe,o_r,r_r,lH,t_r,a_r,n_r,D7,s_r,vo,_9,l_r,fFe,i_r,d_r,on,c_r,mFe,f_r,m_r,gFe,g_r,h_r,hFe,p_r,__r,u_r,rn,G7,pFe,b_r,v_r,iH,F_r,T_r,M_r,O7,_Fe,E_r,C_r,dH,w_r,A_r,L_r,V7,uFe,y_r,x_r,cH,$_r,k_r,S_r,X7,bFe,R_r,P_r,fH,B_r,I_r,N_r,z7,q_r,vFe,j_r,D_r,FFe,G_r,O_r,Q7,vVe,Kd,W7,TFe,u9,V_r,MFe,X_r,FVe,Zo,b9,z_r,Zd,Q_r,mH,W_r,H_r,gH,U_r,J_r,Y_r,v9,K_r,EFe,Z_r,eur,our,xt,F9,rur,CFe,tur,aur,ec,nur,wFe,sur,lur,hH,iur,dur,cur,H7,fur,Fo,T9,mur,AFe,gur,hur,tn,pur,LFe,_ur,uur,yFe,bur,vur,xFe,Fur,Tur,Mur,$Fe,U7,kFe,Eur,Cur,pH,wur,Aur,Lur,J7,yur,SFe,xur,$ur,RFe,kur,Sur,Y7,TVe,oc,K7,PFe,M9,Rur,BFe,Pur,MVe,er,E9,Bur,rc,Iur,_H,Nur,qur,uH,jur,Dur,Gur,C9,Our,IFe,Vur,Xur,zur,$t,w9,Qur,NFe,Wur,Hur,tc,Uur,qFe,Jur,Yur,bH,Kur,Zur,e2r,Z7,o2r,yr,A9,r2r,jFe,t2r,a2r,an,n2r,DFe,s2r,l2r,GFe,i2r,d2r,OFe,c2r,f2r,m2r,j,e8,VFe,g2r,h2r,vH,p2r,_2r,u2r,o8,XFe,b2r,v2r,FH,F2r,T2r,M2r,r8,zFe,E2r,C2r,TH,w2r,A2r,L2r,t8,QFe,y2r,x2r,MH,$2r,k2r,S2r,a8,WFe,R2r,P2r,EH,B2r,I2r,N2r,n8,HFe,q2r,j2r,CH,D2r,G2r,O2r,s8,UFe,V2r,X2r,wH,z2r,Q2r,W2r,l8,JFe,H2r,U2r,AH,J2r,Y2r,K2r,i8,YFe,Z2r,e1r,LH,o1r,r1r,t1r,d8,KFe,a1r,n1r,yH,s1r,l1r,i1r,c8,ZFe,d1r,c1r,xH,f1r,m1r,g1r,f8,e6e,h1r,p1r,$H,_1r,u1r,b1r,m8,o6e,v1r,F1r,kH,T1r,M1r,E1r,g8,r6e,C1r,w1r,SH,A1r,L1r,y1r,h8,t6e,x1r,$1r,RH,k1r,S1r,R1r,p8,a6e,P1r,B1r,PH,I1r,N1r,q1r,_8,n6e,j1r,D1r,BH,G1r,O1r,V1r,Ws,s6e,X1r,z1r,IH,Q1r,W1r,NH,H1r,U1r,J1r,u8,l6e,Y1r,K1r,qH,Z1r,ebr,obr,b8,i6e,rbr,tbr,jH,abr,nbr,sbr,v8,d6e,lbr,ibr,DH,dbr,cbr,fbr,F8,c6e,mbr,gbr,GH,hbr,pbr,_br,T8,f6e,ubr,bbr,OH,vbr,Fbr,Tbr,M8,m6e,Mbr,Ebr,VH,Cbr,wbr,Abr,E8,g6e,Lbr,ybr,XH,xbr,$br,kbr,C8,h6e,Sbr,Rbr,zH,Pbr,Bbr,Ibr,w8,p6e,Nbr,qbr,QH,jbr,Dbr,Gbr,A8,_6e,Obr,Vbr,WH,Xbr,zbr,Qbr,L8,u6e,Wbr,Hbr,HH,Ubr,Jbr,Ybr,y8,b6e,Kbr,Zbr,UH,evr,ovr,rvr,x8,v6e,tvr,avr,JH,nvr,svr,lvr,$8,F6e,ivr,dvr,YH,cvr,fvr,mvr,k8,T6e,gvr,hvr,KH,pvr,_vr,uvr,S8,M6e,bvr,vvr,ZH,Fvr,Tvr,Mvr,R8,E6e,Evr,Cvr,eU,wvr,Avr,Lvr,P8,C6e,yvr,xvr,oU,$vr,kvr,Svr,B8,w6e,Rvr,Pvr,rU,Bvr,Ivr,Nvr,I8,A6e,qvr,jvr,tU,Dvr,Gvr,Ovr,N8,L6e,Vvr,Xvr,aU,zvr,Qvr,Wvr,q8,y6e,Hvr,Uvr,nU,Jvr,Yvr,Kvr,j8,x6e,Zvr,eFr,sU,oFr,rFr,tFr,D8,$6e,aFr,nFr,lU,sFr,lFr,iFr,G8,k6e,dFr,cFr,iU,fFr,mFr,gFr,O8,S6e,hFr,pFr,dU,_Fr,uFr,bFr,V8,R6e,vFr,FFr,cU,TFr,MFr,EFr,X8,P6e,CFr,wFr,fU,AFr,LFr,yFr,z8,B6e,xFr,$Fr,mU,kFr,SFr,RFr,Q8,EVe,ac,W8,I6e,L9,PFr,N6e,BFr,CVe,or,y9,IFr,nc,NFr,gU,qFr,jFr,hU,DFr,GFr,OFr,x9,VFr,q6e,XFr,zFr,QFr,kt,$9,WFr,j6e,HFr,UFr,sc,JFr,D6e,YFr,KFr,pU,ZFr,e6r,o6r,H8,r6r,xr,k9,t6r,G6e,a6r,n6r,nn,s6r,O6e,l6r,i6r,V6e,d6r,c6r,X6e,f6r,m6r,g6r,se,U8,z6e,h6r,p6r,_U,_6r,u6r,b6r,J8,Q6e,v6r,F6r,uU,T6r,M6r,E6r,Y8,W6e,C6r,w6r,bU,A6r,L6r,y6r,K8,H6e,x6r,$6r,vU,k6r,S6r,R6r,Z8,U6e,P6r,B6r,FU,I6r,N6r,q6r,eM,J6e,j6r,D6r,TU,G6r,O6r,V6r,oM,Y6e,X6r,z6r,MU,Q6r,W6r,H6r,rM,K6e,U6r,J6r,EU,Y6r,K6r,Z6r,tM,Z6e,eTr,oTr,CU,rTr,tTr,aTr,aM,eTe,nTr,sTr,wU,lTr,iTr,dTr,nM,oTe,cTr,fTr,AU,mTr,gTr,hTr,sM,rTe,pTr,_Tr,LU,uTr,bTr,vTr,lM,tTe,FTr,TTr,yU,MTr,ETr,CTr,iM,aTe,wTr,ATr,xU,LTr,yTr,xTr,dM,nTe,$Tr,kTr,$U,STr,RTr,PTr,cM,sTe,BTr,ITr,kU,NTr,qTr,jTr,fM,lTe,DTr,GTr,SU,OTr,VTr,XTr,mM,iTe,zTr,QTr,RU,WTr,HTr,UTr,gM,dTe,JTr,YTr,PU,KTr,ZTr,e7r,hM,cTe,o7r,r7r,BU,t7r,a7r,n7r,pM,fTe,s7r,l7r,IU,i7r,d7r,c7r,_M,mTe,f7r,m7r,NU,g7r,h7r,p7r,uM,gTe,_7r,u7r,qU,b7r,v7r,F7r,bM,wVe,lc,vM,hTe,S9,T7r,pTe,M7r,AVe,rr,R9,E7r,ic,C7r,jU,w7r,A7r,DU,L7r,y7r,x7r,P9,$7r,_Te,k7r,S7r,R7r,St,B9,P7r,uTe,B7r,I7r,dc,N7r,bTe,q7r,j7r,GU,D7r,G7r,O7r,FM,V7r,$r,I9,X7r,vTe,z7r,Q7r,sn,W7r,FTe,H7r,U7r,TTe,J7r,Y7r,MTe,K7r,Z7r,e8r,Me,TM,ETe,o8r,r8r,OU,t8r,a8r,n8r,MM,CTe,s8r,l8r,VU,i8r,d8r,c8r,EM,wTe,f8r,m8r,XU,g8r,h8r,p8r,CM,ATe,_8r,u8r,zU,b8r,v8r,F8r,wM,LTe,T8r,M8r,QU,E8r,C8r,w8r,AM,yTe,A8r,L8r,WU,y8r,x8r,$8r,LM,xTe,k8r,S8r,HU,R8r,P8r,B8r,yM,$Te,I8r,N8r,UU,q8r,j8r,D8r,xM,kTe,G8r,O8r,JU,V8r,X8r,z8r,$M,STe,Q8r,W8r,YU,H8r,U8r,J8r,kM,RTe,Y8r,K8r,KU,Z8r,eMr,oMr,SM,PTe,rMr,tMr,ZU,aMr,nMr,sMr,RM,BTe,lMr,iMr,eJ,dMr,cMr,fMr,PM,LVe,cc,BM,ITe,N9,mMr,NTe,gMr,yVe,tr,q9,hMr,fc,pMr,oJ,_Mr,uMr,rJ,bMr,vMr,FMr,j9,TMr,qTe,MMr,EMr,CMr,Rt,D9,wMr,jTe,AMr,LMr,mc,yMr,DTe,xMr,$Mr,tJ,kMr,SMr,RMr,IM,PMr,kr,G9,BMr,GTe,IMr,NMr,ln,qMr,OTe,jMr,DMr,VTe,GMr,OMr,XTe,VMr,XMr,zMr,dn,NM,zTe,QMr,WMr,aJ,HMr,UMr,JMr,qM,QTe,YMr,KMr,nJ,ZMr,eEr,oEr,jM,WTe,rEr,tEr,sJ,aEr,nEr,sEr,DM,HTe,lEr,iEr,lJ,dEr,cEr,fEr,GM,xVe,gc,OM,UTe,O9,mEr,JTe,gEr,$Ve,ar,V9,hEr,hc,pEr,iJ,_Er,uEr,dJ,bEr,vEr,FEr,X9,TEr,YTe,MEr,EEr,CEr,Pt,z9,wEr,KTe,AEr,LEr,pc,yEr,ZTe,xEr,$Er,cJ,kEr,SEr,REr,VM,PEr,Sr,Q9,BEr,e7e,IEr,NEr,cn,qEr,o7e,jEr,DEr,r7e,GEr,OEr,t7e,VEr,XEr,zEr,ie,XM,a7e,QEr,WEr,fJ,HEr,UEr,JEr,zM,n7e,YEr,KEr,mJ,ZEr,e4r,o4r,QM,s7e,r4r,t4r,gJ,a4r,n4r,s4r,WM,l7e,l4r,i4r,hJ,d4r,c4r,f4r,HM,i7e,m4r,g4r,pJ,h4r,p4r,_4r,UM,d7e,u4r,b4r,_J,v4r,F4r,T4r,JM,c7e,M4r,E4r,uJ,C4r,w4r,A4r,YM,f7e,L4r,y4r,bJ,x4r,$4r,k4r,KM,m7e,S4r,R4r,vJ,P4r,B4r,I4r,ZM,g7e,N4r,q4r,FJ,j4r,D4r,G4r,eE,h7e,O4r,V4r,TJ,X4r,z4r,Q4r,oE,p7e,W4r,H4r,MJ,U4r,J4r,Y4r,rE,_7e,K4r,Z4r,EJ,eCr,oCr,rCr,tE,u7e,tCr,aCr,CJ,nCr,sCr,lCr,aE,b7e,iCr,dCr,wJ,cCr,fCr,mCr,nE,v7e,gCr,hCr,AJ,pCr,_Cr,uCr,sE,F7e,bCr,vCr,LJ,FCr,TCr,MCr,lE,T7e,ECr,CCr,yJ,wCr,ACr,LCr,iE,M7e,yCr,xCr,xJ,$Cr,kCr,SCr,dE,E7e,RCr,PCr,$J,BCr,ICr,NCr,cE,kVe,_c,fE,C7e,W9,qCr,w7e,jCr,SVe,nr,H9,DCr,uc,GCr,kJ,OCr,VCr,SJ,XCr,zCr,QCr,U9,WCr,A7e,HCr,UCr,JCr,Bt,J9,YCr,L7e,KCr,ZCr,bc,e5r,y7e,o5r,r5r,RJ,t5r,a5r,n5r,mE,s5r,Rr,Y9,l5r,x7e,i5r,d5r,fn,c5r,$7e,f5r,m5r,k7e,g5r,h5r,S7e,p5r,_5r,u5r,ye,gE,R7e,b5r,v5r,PJ,F5r,T5r,M5r,hE,P7e,E5r,C5r,BJ,w5r,A5r,L5r,pE,B7e,y5r,x5r,IJ,$5r,k5r,S5r,_E,I7e,R5r,P5r,NJ,B5r,I5r,N5r,uE,N7e,q5r,j5r,qJ,D5r,G5r,O5r,bE,q7e,V5r,X5r,jJ,z5r,Q5r,W5r,vE,j7e,H5r,U5r,DJ,J5r,Y5r,K5r,FE,D7e,Z5r,e3r,GJ,o3r,r3r,t3r,TE,G7e,a3r,n3r,OJ,s3r,l3r,i3r,ME,O7e,d3r,c3r,VJ,f3r,m3r,g3r,EE,RVe,vc,CE,V7e,K9,h3r,X7e,p3r,PVe,sr,Z9,_3r,Fc,u3r,XJ,b3r,v3r,zJ,F3r,T3r,M3r,ex,E3r,z7e,C3r,w3r,A3r,It,ox,L3r,Q7e,y3r,x3r,Tc,$3r,W7e,k3r,S3r,QJ,R3r,P3r,B3r,wE,I3r,Pr,rx,N3r,H7e,q3r,j3r,mn,D3r,U7e,G3r,O3r,J7e,V3r,X3r,Y7e,z3r,Q3r,W3r,te,AE,K7e,H3r,U3r,WJ,J3r,Y3r,K3r,LE,Z7e,Z3r,e0r,HJ,o0r,r0r,t0r,yE,e8e,a0r,n0r,UJ,s0r,l0r,i0r,xE,o8e,d0r,c0r,JJ,f0r,m0r,g0r,$E,r8e,h0r,p0r,YJ,_0r,u0r,b0r,kE,t8e,v0r,F0r,KJ,T0r,M0r,E0r,SE,a8e,C0r,w0r,ZJ,A0r,L0r,y0r,RE,n8e,x0r,$0r,eY,k0r,S0r,R0r,PE,s8e,P0r,B0r,oY,I0r,N0r,q0r,BE,l8e,j0r,D0r,rY,G0r,O0r,V0r,IE,i8e,X0r,z0r,tY,Q0r,W0r,H0r,NE,d8e,U0r,J0r,aY,Y0r,K0r,Z0r,qE,c8e,ewr,owr,nY,rwr,twr,awr,jE,f8e,nwr,swr,sY,lwr,iwr,dwr,DE,m8e,cwr,fwr,lY,mwr,gwr,hwr,GE,g8e,pwr,_wr,iY,uwr,bwr,vwr,OE,h8e,Fwr,Twr,dY,Mwr,Ewr,Cwr,VE,p8e,wwr,Awr,cY,Lwr,ywr,xwr,XE,_8e,$wr,kwr,fY,Swr,Rwr,Pwr,zE,u8e,Bwr,Iwr,mY,Nwr,qwr,jwr,QE,b8e,Dwr,Gwr,gY,Owr,Vwr,Xwr,WE,v8e,zwr,Qwr,hY,Wwr,Hwr,Uwr,HE,F8e,Jwr,Ywr,pY,Kwr,Zwr,eAr,UE,T8e,oAr,rAr,_Y,tAr,aAr,nAr,JE,M8e,sAr,lAr,uY,iAr,dAr,cAr,YE,E8e,fAr,mAr,bY,gAr,hAr,pAr,KE,BVe,Mc,ZE,C8e,tx,_Ar,w8e,uAr,IVe,lr,ax,bAr,Ec,vAr,vY,FAr,TAr,FY,MAr,EAr,CAr,nx,wAr,A8e,AAr,LAr,yAr,Nt,sx,xAr,L8e,$Ar,kAr,Cc,SAr,y8e,RAr,PAr,TY,BAr,IAr,NAr,e4,qAr,Br,lx,jAr,x8e,DAr,GAr,gn,OAr,$8e,VAr,XAr,k8e,zAr,QAr,S8e,WAr,HAr,UAr,_e,o4,R8e,JAr,YAr,MY,KAr,ZAr,eLr,r4,P8e,oLr,rLr,EY,tLr,aLr,nLr,t4,B8e,sLr,lLr,CY,iLr,dLr,cLr,a4,I8e,fLr,mLr,wY,gLr,hLr,pLr,n4,N8e,_Lr,uLr,AY,bLr,vLr,FLr,s4,q8e,TLr,MLr,LY,ELr,CLr,wLr,l4,j8e,ALr,LLr,yY,yLr,xLr,$Lr,i4,D8e,kLr,SLr,xY,RLr,PLr,BLr,d4,G8e,ILr,NLr,$Y,qLr,jLr,DLr,c4,O8e,GLr,OLr,kY,VLr,XLr,zLr,f4,V8e,QLr,WLr,SY,HLr,ULr,JLr,m4,X8e,YLr,KLr,RY,ZLr,eyr,oyr,g4,z8e,ryr,tyr,PY,ayr,nyr,syr,h4,Q8e,lyr,iyr,BY,dyr,cyr,fyr,p4,W8e,myr,gyr,IY,hyr,pyr,_yr,_4,H8e,uyr,byr,NY,vyr,Fyr,Tyr,u4,U8e,Myr,Eyr,qY,Cyr,wyr,Ayr,b4,NVe,wc,v4,J8e,ix,Lyr,Y8e,yyr,qVe,ir,dx,xyr,Ac,$yr,jY,kyr,Syr,DY,Ryr,Pyr,Byr,cx,Iyr,K8e,Nyr,qyr,jyr,qt,fx,Dyr,Z8e,Gyr,Oyr,Lc,Vyr,eMe,Xyr,zyr,GY,Qyr,Wyr,Hyr,F4,Uyr,Ir,mx,Jyr,oMe,Yyr,Kyr,hn,Zyr,rMe,e9r,o9r,tMe,r9r,t9r,aMe,a9r,n9r,s9r,gx,T4,nMe,l9r,i9r,OY,d9r,c9r,f9r,M4,sMe,m9r,g9r,VY,h9r,p9r,_9r,E4,jVe,yc,C4,lMe,hx,u9r,iMe,b9r,DVe,dr,px,v9r,xc,F9r,XY,T9r,M9r,zY,E9r,C9r,w9r,_x,A9r,dMe,L9r,y9r,x9r,jt,ux,$9r,cMe,k9r,S9r,$c,R9r,fMe,P9r,B9r,QY,I9r,N9r,q9r,w4,j9r,Nr,bx,D9r,mMe,G9r,O9r,pn,V9r,gMe,X9r,z9r,hMe,Q9r,W9r,pMe,H9r,U9r,J9r,_Me,A4,uMe,Y9r,K9r,WY,Z9r,exr,oxr,L4,GVe,kc,y4,bMe,vx,rxr,vMe,txr,OVe,cr,Fx,axr,Sc,nxr,HY,sxr,lxr,UY,ixr,dxr,cxr,Tx,fxr,FMe,mxr,gxr,hxr,Dt,Mx,pxr,TMe,_xr,uxr,Rc,bxr,MMe,vxr,Fxr,JY,Txr,Mxr,Exr,x4,Cxr,qr,Ex,wxr,EMe,Axr,Lxr,_n,yxr,CMe,xxr,$xr,wMe,kxr,Sxr,AMe,Rxr,Pxr,Bxr,de,$4,LMe,Ixr,Nxr,YY,qxr,jxr,Dxr,k4,yMe,Gxr,Oxr,KY,Vxr,Xxr,zxr,S4,xMe,Qxr,Wxr,ZY,Hxr,Uxr,Jxr,R4,$Me,Yxr,Kxr,eK,Zxr,e$r,o$r,P4,kMe,r$r,t$r,oK,a$r,n$r,s$r,B4,SMe,l$r,i$r,rK,d$r,c$r,f$r,I4,RMe,m$r,g$r,tK,h$r,p$r,_$r,N4,PMe,u$r,b$r,aK,v$r,F$r,T$r,q4,BMe,M$r,E$r,nK,C$r,w$r,A$r,j4,IMe,L$r,y$r,sK,x$r,$$r,k$r,D4,NMe,S$r,R$r,lK,P$r,B$r,I$r,G4,qMe,N$r,q$r,iK,j$r,D$r,G$r,O4,jMe,O$r,V$r,dK,X$r,z$r,Q$r,V4,DMe,W$r,H$r,cK,U$r,J$r,Y$r,X4,GMe,K$r,Z$r,fK,ekr,okr,rkr,z4,OMe,tkr,akr,mK,nkr,skr,lkr,Q4,VMe,ikr,dkr,gK,ckr,fkr,mkr,W4,XMe,gkr,hkr,hK,pkr,_kr,ukr,H4,zMe,bkr,vkr,pK,Fkr,Tkr,Mkr,U4,QMe,Ekr,Ckr,_K,wkr,Akr,Lkr,J4,VVe,Pc,Y4,WMe,Cx,ykr,HMe,xkr,XVe,fr,wx,$kr,Bc,kkr,uK,Skr,Rkr,bK,Pkr,Bkr,Ikr,Ax,Nkr,UMe,qkr,jkr,Dkr,Gt,Lx,Gkr,JMe,Okr,Vkr,Ic,Xkr,YMe,zkr,Qkr,vK,Wkr,Hkr,Ukr,K4,Jkr,jr,yx,Ykr,KMe,Kkr,Zkr,un,eSr,ZMe,oSr,rSr,eEe,tSr,aSr,oEe,nSr,sSr,lSr,ce,Z4,rEe,iSr,dSr,FK,cSr,fSr,mSr,eC,tEe,gSr,hSr,TK,pSr,_Sr,uSr,oC,aEe,bSr,vSr,MK,FSr,TSr,MSr,rC,nEe,ESr,CSr,EK,wSr,ASr,LSr,tC,sEe,ySr,xSr,CK,$Sr,kSr,SSr,aC,lEe,RSr,PSr,wK,BSr,ISr,NSr,nC,iEe,qSr,jSr,AK,DSr,GSr,OSr,sC,dEe,VSr,XSr,LK,zSr,QSr,WSr,lC,cEe,HSr,USr,yK,JSr,YSr,KSr,iC,fEe,ZSr,eRr,xK,oRr,rRr,tRr,dC,mEe,aRr,nRr,$K,sRr,lRr,iRr,cC,gEe,dRr,cRr,kK,fRr,mRr,gRr,fC,hEe,hRr,pRr,SK,_Rr,uRr,bRr,mC,pEe,vRr,FRr,RK,TRr,MRr,ERr,gC,_Ee,CRr,wRr,PK,ARr,LRr,yRr,hC,uEe,xRr,$Rr,BK,kRr,SRr,RRr,pC,bEe,PRr,BRr,IK,IRr,NRr,qRr,_C,vEe,jRr,DRr,NK,GRr,ORr,VRr,uC,FEe,XRr,zRr,qK,QRr,WRr,HRr,bC,TEe,URr,JRr,jK,YRr,KRr,ZRr,vC,zVe,Nc,FC,MEe,xx,ePr,EEe,oPr,QVe,mr,$x,rPr,qc,tPr,DK,aPr,nPr,GK,sPr,lPr,iPr,kx,dPr,CEe,cPr,fPr,mPr,Ot,Sx,gPr,wEe,hPr,pPr,jc,_Pr,AEe,uPr,bPr,OK,vPr,FPr,TPr,TC,MPr,Dr,Rx,EPr,LEe,CPr,wPr,bn,APr,yEe,LPr,yPr,xEe,xPr,$Pr,$Ee,kPr,SPr,RPr,kEe,MC,SEe,PPr,BPr,VK,IPr,NPr,qPr,EC,WVe,Dc,CC,REe,Px,jPr,PEe,DPr,HVe,gr,Bx,GPr,Gc,OPr,XK,VPr,XPr,zK,zPr,QPr,WPr,Ix,HPr,BEe,UPr,JPr,YPr,Vt,Nx,KPr,IEe,ZPr,eBr,Oc,oBr,NEe,rBr,tBr,QK,aBr,nBr,sBr,wC,lBr,Gr,qx,iBr,qEe,dBr,cBr,vn,fBr,jEe,mBr,gBr,DEe,hBr,pBr,GEe,_Br,uBr,bBr,OEe,AC,VEe,vBr,FBr,WK,TBr,MBr,EBr,LC,UVe,Vc,yC,XEe,jx,CBr,zEe,wBr,JVe,hr,Dx,ABr,Xc,LBr,HK,yBr,xBr,UK,$Br,kBr,SBr,Gx,RBr,QEe,PBr,BBr,IBr,Xt,Ox,NBr,WEe,qBr,jBr,zc,DBr,HEe,GBr,OBr,JK,VBr,XBr,zBr,xC,QBr,Or,Vx,WBr,UEe,HBr,UBr,Fn,JBr,JEe,YBr,KBr,YEe,ZBr,eIr,KEe,oIr,rIr,tIr,oe,$C,ZEe,aIr,nIr,YK,sIr,lIr,iIr,kC,e4e,dIr,cIr,KK,fIr,mIr,gIr,SC,o4e,hIr,pIr,ZK,_Ir,uIr,bIr,RC,r4e,vIr,FIr,eZ,TIr,MIr,EIr,PC,t4e,CIr,wIr,oZ,AIr,LIr,yIr,BC,a4e,xIr,$Ir,rZ,kIr,SIr,RIr,IC,n4e,PIr,BIr,tZ,IIr,NIr,qIr,NC,s4e,jIr,DIr,aZ,GIr,OIr,VIr,qC,l4e,XIr,zIr,nZ,QIr,WIr,HIr,jC,i4e,UIr,JIr,sZ,YIr,KIr,ZIr,DC,d4e,eNr,oNr,lZ,rNr,tNr,aNr,GC,c4e,nNr,sNr,iZ,lNr,iNr,dNr,OC,f4e,cNr,fNr,dZ,mNr,gNr,hNr,VC,m4e,pNr,_Nr,cZ,uNr,bNr,vNr,XC,g4e,FNr,TNr,fZ,MNr,ENr,CNr,zC,h4e,wNr,ANr,mZ,LNr,yNr,xNr,QC,p4e,$Nr,kNr,gZ,SNr,RNr,PNr,WC,_4e,BNr,INr,hZ,NNr,qNr,jNr,HC,u4e,DNr,GNr,pZ,ONr,VNr,XNr,UC,b4e,zNr,QNr,_Z,WNr,HNr,UNr,JC,v4e,JNr,YNr,uZ,KNr,ZNr,eqr,YC,F4e,oqr,rqr,bZ,tqr,aqr,nqr,KC,T4e,sqr,lqr,vZ,iqr,dqr,cqr,ZC,M4e,fqr,mqr,FZ,gqr,hqr,pqr,e5,E4e,_qr,uqr,TZ,bqr,vqr,Fqr,o5,C4e,Tqr,Mqr,MZ,Eqr,Cqr,wqr,r5,w4e,Aqr,Lqr,EZ,yqr,xqr,$qr,t5,YVe,Qc,a5,A4e,Xx,kqr,L4e,Sqr,KVe,pr,zx,Rqr,Wc,Pqr,CZ,Bqr,Iqr,wZ,Nqr,qqr,jqr,Qx,Dqr,y4e,Gqr,Oqr,Vqr,zt,Wx,Xqr,x4e,zqr,Qqr,Hc,Wqr,$4e,Hqr,Uqr,AZ,Jqr,Yqr,Kqr,n5,Zqr,Vr,Hx,ejr,k4e,ojr,rjr,Tn,tjr,S4e,ajr,njr,R4e,sjr,ljr,P4e,ijr,djr,cjr,xe,s5,B4e,fjr,mjr,LZ,gjr,hjr,pjr,l5,I4e,_jr,ujr,yZ,bjr,vjr,Fjr,i5,N4e,Tjr,Mjr,xZ,Ejr,Cjr,wjr,d5,q4e,Ajr,Ljr,$Z,yjr,xjr,$jr,c5,j4e,kjr,Sjr,kZ,Rjr,Pjr,Bjr,f5,D4e,Ijr,Njr,SZ,qjr,jjr,Djr,m5,G4e,Gjr,Ojr,RZ,Vjr,Xjr,zjr,g5,O4e,Qjr,Wjr,PZ,Hjr,Ujr,Jjr,h5,V4e,Yjr,Kjr,BZ,Zjr,eDr,oDr,p5,X4e,rDr,tDr,IZ,aDr,nDr,sDr,_5,ZVe,Uc,u5,z4e,Ux,lDr,Q4e,iDr,eXe,_r,Jx,dDr,Jc,cDr,NZ,fDr,mDr,qZ,gDr,hDr,pDr,Yx,_Dr,W4e,uDr,bDr,vDr,Qt,Kx,FDr,H4e,TDr,MDr,Yc,EDr,U4e,CDr,wDr,jZ,ADr,LDr,yDr,b5,xDr,Xr,Zx,$Dr,J4e,kDr,SDr,Mn,RDr,Y4e,PDr,BDr,K4e,IDr,NDr,Z4e,qDr,jDr,DDr,Ee,v5,eCe,GDr,ODr,DZ,VDr,XDr,zDr,F5,oCe,QDr,WDr,GZ,HDr,UDr,JDr,T5,rCe,YDr,KDr,OZ,ZDr,eGr,oGr,M5,tCe,rGr,tGr,VZ,aGr,nGr,sGr,E5,aCe,lGr,iGr,XZ,dGr,cGr,fGr,C5,nCe,mGr,gGr,zZ,hGr,pGr,_Gr,w5,sCe,uGr,bGr,QZ,vGr,FGr,TGr,A5,lCe,MGr,EGr,WZ,CGr,wGr,AGr,L5,iCe,LGr,yGr,HZ,xGr,$Gr,kGr,y5,dCe,SGr,RGr,UZ,PGr,BGr,IGr,x5,cCe,NGr,qGr,JZ,jGr,DGr,GGr,$5,fCe,OGr,VGr,YZ,XGr,zGr,QGr,k5,mCe,WGr,HGr,KZ,UGr,JGr,YGr,S5,oXe,Kc,R5,gCe,e$,KGr,hCe,ZGr,rXe,ur,o$,eOr,Zc,oOr,ZZ,rOr,tOr,eee,aOr,nOr,sOr,r$,lOr,pCe,iOr,dOr,cOr,Wt,t$,fOr,_Ce,mOr,gOr,ef,hOr,uCe,pOr,_Or,oee,uOr,bOr,vOr,P5,FOr,zr,a$,TOr,bCe,MOr,EOr,En,COr,vCe,wOr,AOr,FCe,LOr,yOr,TCe,xOr,$Or,kOr,$e,B5,MCe,SOr,ROr,ree,POr,BOr,IOr,I5,ECe,NOr,qOr,tee,jOr,DOr,GOr,N5,CCe,OOr,VOr,aee,XOr,zOr,QOr,q5,wCe,WOr,HOr,nee,UOr,JOr,YOr,j5,ACe,KOr,ZOr,see,eVr,oVr,rVr,D5,LCe,tVr,aVr,lee,nVr,sVr,lVr,G5,yCe,iVr,dVr,iee,cVr,fVr,mVr,O5,xCe,gVr,hVr,dee,pVr,_Vr,uVr,V5,$Ce,bVr,vVr,cee,FVr,TVr,MVr,X5,kCe,EVr,CVr,fee,wVr,AVr,LVr,z5,tXe,of,Q5,SCe,n$,yVr,RCe,xVr,aXe,br,s$,$Vr,rf,kVr,mee,SVr,RVr,gee,PVr,BVr,IVr,l$,NVr,PCe,qVr,jVr,DVr,Ht,i$,GVr,BCe,OVr,VVr,tf,XVr,ICe,zVr,QVr,hee,WVr,HVr,UVr,W5,JVr,Qr,d$,YVr,NCe,KVr,ZVr,Cn,eXr,qCe,oXr,rXr,jCe,tXr,aXr,DCe,nXr,sXr,lXr,ke,H5,GCe,iXr,dXr,pee,cXr,fXr,mXr,U5,OCe,gXr,hXr,_ee,pXr,_Xr,uXr,J5,VCe,bXr,vXr,uee,FXr,TXr,MXr,Y5,XCe,EXr,CXr,bee,wXr,AXr,LXr,K5,zCe,yXr,xXr,vee,$Xr,kXr,SXr,Z5,QCe,RXr,PXr,Fee,BXr,IXr,NXr,e3,WCe,qXr,jXr,Tee,DXr,GXr,OXr,o3,HCe,VXr,XXr,Mee,zXr,QXr,WXr,r3,UCe,HXr,UXr,Eee,JXr,YXr,KXr,t3,JCe,ZXr,ezr,Cee,ozr,rzr,tzr,a3,nXe,af,n3,YCe,c$,azr,KCe,nzr,sXe,vr,f$,szr,nf,lzr,wee,izr,dzr,Aee,czr,fzr,mzr,m$,gzr,ZCe,hzr,pzr,_zr,Ut,g$,uzr,e5e,bzr,vzr,sf,Fzr,o5e,Tzr,Mzr,Lee,Ezr,Czr,wzr,s3,Azr,Wr,h$,Lzr,r5e,yzr,xzr,wn,$zr,t5e,kzr,Szr,a5e,Rzr,Pzr,n5e,Bzr,Izr,Nzr,Se,l3,s5e,qzr,jzr,yee,Dzr,Gzr,Ozr,i3,l5e,Vzr,Xzr,xee,zzr,Qzr,Wzr,d3,i5e,Hzr,Uzr,$ee,Jzr,Yzr,Kzr,c3,d5e,Zzr,eQr,kee,oQr,rQr,tQr,f3,c5e,aQr,nQr,See,sQr,lQr,iQr,m3,f5e,dQr,cQr,Ree,fQr,mQr,gQr,g3,m5e,hQr,pQr,Pee,_Qr,uQr,bQr,h3,g5e,vQr,FQr,Bee,TQr,MQr,EQr,p3,h5e,CQr,wQr,Iee,AQr,LQr,yQr,_3,p5e,xQr,$Qr,Nee,kQr,SQr,RQr,u3,lXe,lf,b3,_5e,p$,PQr,u5e,BQr,iXe,Fr,_$,IQr,df,NQr,qee,qQr,jQr,jee,DQr,GQr,OQr,u$,VQr,b5e,XQr,zQr,QQr,Jt,b$,WQr,v5e,HQr,UQr,cf,JQr,F5e,YQr,KQr,Dee,ZQr,eWr,oWr,v3,rWr,Hr,v$,tWr,T5e,aWr,nWr,An,sWr,M5e,lWr,iWr,E5e,dWr,cWr,C5e,fWr,mWr,gWr,Re,F3,w5e,hWr,pWr,Gee,_Wr,uWr,bWr,T3,A5e,vWr,FWr,Oee,TWr,MWr,EWr,M3,L5e,CWr,wWr,Vee,AWr,LWr,yWr,E3,y5e,xWr,$Wr,Xee,kWr,SWr,RWr,C3,x5e,PWr,BWr,zee,IWr,NWr,qWr,w3,$5e,jWr,DWr,Qee,GWr,OWr,VWr,A3,k5e,XWr,zWr,Wee,QWr,WWr,HWr,L3,S5e,UWr,JWr,Hee,YWr,KWr,ZWr,y3,R5e,eHr,oHr,Uee,rHr,tHr,aHr,x3,P5e,nHr,sHr,Jee,lHr,iHr,dHr,$3,dXe,ff,k3,B5e,F$,cHr,I5e,fHr,cXe,Tr,T$,mHr,mf,gHr,Yee,hHr,pHr,Kee,_Hr,uHr,bHr,M$,vHr,N5e,FHr,THr,MHr,Yt,E$,EHr,q5e,CHr,wHr,gf,AHr,j5e,LHr,yHr,Zee,xHr,$Hr,kHr,S3,SHr,Ur,C$,RHr,D5e,PHr,BHr,Ln,IHr,G5e,NHr,qHr,O5e,jHr,DHr,V5e,GHr,OHr,VHr,Ve,R3,X5e,XHr,zHr,eoe,QHr,WHr,HHr,P3,z5e,UHr,JHr,ooe,YHr,KHr,ZHr,B3,Q5e,eUr,oUr,roe,rUr,tUr,aUr,I3,W5e,nUr,sUr,toe,lUr,iUr,dUr,N3,H5e,cUr,fUr,aoe,mUr,gUr,hUr,q3,U5e,pUr,_Ur,noe,uUr,bUr,vUr,j3,J5e,FUr,TUr,soe,MUr,EUr,CUr,D3,Y5e,wUr,AUr,loe,LUr,yUr,xUr,G3,fXe,hf,O3,K5e,w$,$Ur,Z5e,kUr,mXe,Mr,A$,SUr,pf,RUr,ioe,PUr,BUr,doe,IUr,NUr,qUr,L$,jUr,e3e,DUr,GUr,OUr,Kt,y$,VUr,o3e,XUr,zUr,_f,QUr,r3e,WUr,HUr,coe,UUr,JUr,YUr,V3,KUr,Jr,x$,ZUr,t3e,eJr,oJr,yn,rJr,a3e,tJr,aJr,n3e,nJr,sJr,s3e,lJr,iJr,dJr,Xe,X3,l3e,cJr,fJr,foe,mJr,gJr,hJr,z3,i3e,pJr,_Jr,moe,uJr,bJr,vJr,Q3,d3e,FJr,TJr,goe,MJr,EJr,CJr,W3,c3e,wJr,AJr,hoe,LJr,yJr,xJr,H3,f3e,$Jr,kJr,poe,SJr,RJr,PJr,U3,m3e,BJr,IJr,_oe,NJr,qJr,jJr,J3,g3e,DJr,GJr,uoe,OJr,VJr,XJr,Y3,h3e,zJr,QJr,boe,WJr,HJr,UJr,K3,gXe,uf,Z3,p3e,$$,JJr,_3e,YJr,hXe,Er,k$,KJr,bf,ZJr,voe,eYr,oYr,Foe,rYr,tYr,aYr,S$,nYr,u3e,sYr,lYr,iYr,Zt,R$,dYr,b3e,cYr,fYr,vf,mYr,v3e,gYr,hYr,Toe,pYr,_Yr,uYr,e0,bYr,Yr,P$,vYr,F3e,FYr,TYr,xn,MYr,T3e,EYr,CYr,M3e,wYr,AYr,E3e,LYr,yYr,xYr,C3e,o0,w3e,$Yr,kYr,Moe,SYr,RYr,PYr,r0,pXe,Ff,t0,A3e,B$,BYr,L3e,IYr,_Xe,Cr,I$,NYr,Tf,qYr,Eoe,jYr,DYr,Coe,GYr,OYr,VYr,N$,XYr,y3e,zYr,QYr,WYr,ea,q$,HYr,x3e,UYr,JYr,Mf,YYr,$3e,KYr,ZYr,woe,eKr,oKr,rKr,a0,tKr,Kr,j$,aKr,k3e,nKr,sKr,$n,lKr,S3e,iKr,dKr,R3e,cKr,fKr,P3e,mKr,gKr,hKr,D$,n0,B3e,pKr,_Kr,Aoe,uKr,bKr,vKr,s0,I3e,FKr,TKr,Loe,MKr,EKr,CKr,l0,uXe,Ef,i0,N3e,G$,wKr,q3e,AKr,bXe,wr,O$,LKr,Cf,yKr,yoe,xKr,$Kr,xoe,kKr,SKr,RKr,V$,PKr,j3e,BKr,IKr,NKr,oa,X$,qKr,D3e,jKr,DKr,wf,GKr,G3e,OKr,VKr,$oe,XKr,zKr,QKr,d0,WKr,Zr,z$,HKr,O3e,UKr,JKr,kn,YKr,V3e,KKr,ZKr,X3e,eZr,oZr,z3e,rZr,tZr,aZr,Q3e,c0,W3e,nZr,sZr,koe,lZr,iZr,dZr,f0,vXe;return d=new re({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),IA=new re({}),NA=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Pf=new cZr({props:{warning:!0,$$slots:{default:[YGt]},$$scope:{ctx:$}}}),qA=new re({}),jA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L604"}}),OA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L627"}}),Xg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[KGt]},$$scope:{ctx:$}}}),VA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L750"}}),XA=new re({}),zA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L402"}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17826/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L416"}}),Lh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[ZGt]},$$scope:{ctx:$}}}),UA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L615"}}),JA=new re({}),YA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17826/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),ip=new cZr({props:{$$slots:{default:[eOt]},$$scope:{ctx:$}}}),dp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[oOt]},$$scope:{ctx:$}}}),oL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),rL=new re({}),tL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L88"}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L102"}}),xp=new cZr({props:{$$slots:{default:[rOt]},$$scope:{ctx:$}}}),$p=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[tOt]},$$scope:{ctx:$}}}),lL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L255"}}),iL=new re({}),dL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L771"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/jukebox#transformers.JukeboxConfig">JukeboxConfig</a> configuration class: <code>JukeboxModel</code> (Jukebox model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Rp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[aOt]},$$scope:{ctx:$}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Bu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[nOt]},$$scope:{ctx:$}}}),gL=new re({}),hL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L778"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Nu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[sOt]},$$scope:{ctx:$}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),x2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[lOt]},$$scope:{ctx:$}}}),bL=new re({}),vL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L793"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),k2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[iOt]},$$scope:{ctx:$}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),b1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dOt]},$$scope:{ctx:$}}}),EL=new re({}),CL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L800"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),F1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[cOt]},$$scope:{ctx:$}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),nb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[fOt]},$$scope:{ctx:$}}}),yL=new re({}),xL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L807"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),lb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[mOt]},$$scope:{ctx:$}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Ab=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gOt]},$$scope:{ctx:$}}}),RL=new re({}),PL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L816"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[hOt]},$$scope:{ctx:$}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[pOt]},$$scope:{ctx:$}}}),qL=new re({}),jL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L861"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[_Ot]},$$scope:{ctx:$}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[uOt]},$$scope:{ctx:$}}}),VL=new re({}),XL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L868"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[bOt]},$$scope:{ctx:$}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[vOt]},$$scope:{ctx:$}}}),HL=new re({}),UL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L854"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[FOt]},$$scope:{ctx:$}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),o6=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[TOt]},$$scope:{ctx:$}}}),ZL=new re({}),ey=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L825"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),t6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MOt]},$$scope:{ctx:$}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Q6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[EOt]},$$scope:{ctx:$}}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L832"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),H6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[COt]},$$scope:{ctx:$}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Y6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[wOt]},$$scope:{ctx:$}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L877"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Z6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[AOt]},$$scope:{ctx:$}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LOt]},$$scope:{ctx:$}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L916"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[yOt]},$$scope:{ctx:$}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xOt]},$$scope:{ctx:$}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L843"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[$Ot]},$$scope:{ctx:$}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[kOt]},$$scope:{ctx:$}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L923"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[SOt]},$$scope:{ctx:$}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[ROt]},$$scope:{ctx:$}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L946"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[POt]},$$scope:{ctx:$}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),zT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[BOt]},$$scope:{ctx:$}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L930"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[IOt]},$$scope:{ctx:$}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),n7=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[NOt]},$$scope:{ctx:$}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L937"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),l7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[qOt]},$$scope:{ctx:$}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),f7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[jOt]},$$scope:{ctx:$}}}),zy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L955"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),g7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[DOt]},$$scope:{ctx:$}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[GOt]},$$scope:{ctx:$}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L962"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[OOt]},$$scope:{ctx:$}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),L7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[VOt]},$$scope:{ctx:$}}}),o9=new re({}),r9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L909"}}),a9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),x7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[XOt]},$$scope:{ctx:$}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),R7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[zOt]},$$scope:{ctx:$}}}),l9=new re({}),i9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L884"}}),c9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),B7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[QOt]},$$scope:{ctx:$}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),q7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[WOt]},$$scope:{ctx:$}}}),m9=new re({}),g9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L891"}}),p9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),D7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[HOt]},$$scope:{ctx:$}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Q7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[UOt]},$$scope:{ctx:$}}}),u9=new re({}),b9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L900"}}),F9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),H7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[JOt]},$$scope:{ctx:$}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[YOt]},$$scope:{ctx:$}}}),M9=new re({}),E9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),w9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Z7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[KOt]},$$scope:{ctx:$}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Q8=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[ZOt]},$$scope:{ctx:$}}}),L9=new re({}),y9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),$9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),H8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[eVt]},$$scope:{ctx:$}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[oVt]},$$scope:{ctx:$}}}),S9=new re({}),R9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),B9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[rVt]},$$scope:{ctx:$}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[tVt]},$$scope:{ctx:$}}}),N9=new re({}),q9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),D9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[aVt]},$$scope:{ctx:$}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nVt]},$$scope:{ctx:$}}}),O9=new re({}),V9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[sVt]},$$scope:{ctx:$}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[lVt]},$$scope:{ctx:$}}}),W9=new re({}),H9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),J9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[iVt]},$$scope:{ctx:$}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[dVt]},$$scope:{ctx:$}}}),K9=new re({}),Z9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[cVt]},$$scope:{ctx:$}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[fVt]},$$scope:{ctx:$}}}),tx=new re({}),ax=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),e4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[mVt]},$$scope:{ctx:$}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[gVt]},$$scope:{ctx:$}}}),ix=new re({}),dx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[hVt]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),E4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[pVt]},$$scope:{ctx:$}}}),hx=new re({}),px=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),w4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[_Vt]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[uVt]},$$scope:{ctx:$}}}),vx=new re({}),Fx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[bVt]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),J4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vVt]},$$scope:{ctx:$}}}),Cx=new re({}),wx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[FVt]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[TVt]},$$scope:{ctx:$}}}),xx=new re({}),$x=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),TC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[MVt]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[EVt]},$$scope:{ctx:$}}}),Px=new re({}),Bx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[CVt]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[wVt]},$$scope:{ctx:$}}}),jx=new re({}),Dx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[AVt]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[LVt]},$$scope:{ctx:$}}}),Xx=new re({}),zx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[yVt]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xVt]},$$scope:{ctx:$}}}),Ux=new re({}),Jx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[$Vt]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),S5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[kVt]},$$scope:{ctx:$}}}),e$=new re({}),o$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),t$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[SVt]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[RVt]},$$scope:{ctx:$}}}),n$=new re({}),s$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),i$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[PVt]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[BVt]},$$scope:{ctx:$}}}),c$=new re({}),f$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),g$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[IVt]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[NVt]},$$scope:{ctx:$}}}),p$=new re({}),_$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),b$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qVt]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[jVt]},$$scope:{ctx:$}}}),F$=new re({}),T$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),E$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[DVt]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[GVt]},$$scope:{ctx:$}}}),w$=new re({}),A$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[OVt]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[VVt]},$$scope:{ctx:$}}}),$$=new re({}),k$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),R$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[XVt]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[zVt]},$$scope:{ctx:$}}}),B$=new re({}),I$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[QVt]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[WVt]},$$scope:{ctx:$}}}),G$=new re({}),O$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),X$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[HVt]},$$scope:{ctx:$}}}),z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),f0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[UVt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Mi=o("Auto Classes"),xf=l(),at=a("p"),Ei=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=a("code"),SA=o("from_pretrained()"),$f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),wi=o("Instantiating one of "),Rn=a("a"),RA=o("AutoConfig"),Pn=o(", "),Bn=a("a"),PA=o("AutoModel"),Ai=o(`, and
`),In=a("a"),BA=o("AutoTokenizer"),Li=o(" will directly create a class of the relevant architecture. For instance"),kf=l(),F(xa.$$.fragment),We=l(),Ae=a("p"),cS=o("will create a model that is an instance of "),yi=a("a"),fS=o("BertModel"),mS=o("."),Co=l(),$a=a("p"),gS=o("There is one class of "),Sf=a("code"),hS=o("AutoModel"),xQe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),hOe=l(),xi=a("h2"),Rf=a("a"),Ate=a("span"),F(IA.$$.fragment),$Qe=l(),Lte=a("span"),kQe=o("Extending the Auto Classes"),pOe=l(),Nn=a("p"),SQe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),yte=a("code"),RQe=o("NewModel"),PQe=o(", make sure you have a "),xte=a("code"),BQe=o("NewModelConfig"),IQe=o(` then you can add those to the auto
classes like this:`),_Oe=l(),F(NA.$$.fragment),uOe=l(),pS=a("p"),NQe=o("You will then be able to use the auto classes like you would usually do!"),bOe=l(),F(Pf.$$.fragment),vOe=l(),$i=a("h2"),Bf=a("a"),$te=a("span"),F(qA.$$.fragment),qQe=l(),kte=a("span"),jQe=o("AutoConfig"),FOe=l(),wo=a("div"),F(jA.$$.fragment),DQe=l(),DA=a("p"),GQe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_S=a("a"),OQe=o("from_pretrained()"),VQe=o(" class method."),XQe=l(),GA=a("p"),zQe=o("This class cannot be instantiated directly using "),Ste=a("code"),QQe=o("__init__()"),WQe=o(" (throws an error)."),HQe=l(),Ar=a("div"),F(OA.$$.fragment),UQe=l(),Rte=a("p"),JQe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),YQe=l(),ki=a("p"),KQe=o("The configuration class to instantiate is selected based on the "),Pte=a("code"),ZQe=o("model_type"),eWe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Bte=a("code"),oWe=o("pretrained_model_name_or_path"),rWe=o(":"),tWe=l(),A=a("ul"),If=a("li"),Ite=a("strong"),aWe=o("albert"),nWe=o(" \u2014 "),uS=a("a"),sWe=o("AlbertConfig"),lWe=o(" (ALBERT model)"),iWe=l(),Nf=a("li"),Nte=a("strong"),dWe=o("bart"),cWe=o(" \u2014 "),bS=a("a"),fWe=o("BartConfig"),mWe=o(" (BART model)"),gWe=l(),qf=a("li"),qte=a("strong"),hWe=o("beit"),pWe=o(" \u2014 "),vS=a("a"),_We=o("BeitConfig"),uWe=o(" (BEiT model)"),bWe=l(),jf=a("li"),jte=a("strong"),vWe=o("bert"),FWe=o(" \u2014 "),FS=a("a"),TWe=o("BertConfig"),MWe=o(" (BERT model)"),EWe=l(),Df=a("li"),Dte=a("strong"),CWe=o("bert-generation"),wWe=o(" \u2014 "),TS=a("a"),AWe=o("BertGenerationConfig"),LWe=o(" (Bert Generation model)"),yWe=l(),Gf=a("li"),Gte=a("strong"),xWe=o("big_bird"),$We=o(" \u2014 "),MS=a("a"),kWe=o("BigBirdConfig"),SWe=o(" (BigBird model)"),RWe=l(),Of=a("li"),Ote=a("strong"),PWe=o("bigbird_pegasus"),BWe=o(" \u2014 "),ES=a("a"),IWe=o("BigBirdPegasusConfig"),NWe=o(" (BigBird-Pegasus model)"),qWe=l(),Vf=a("li"),Vte=a("strong"),jWe=o("blenderbot"),DWe=o(" \u2014 "),CS=a("a"),GWe=o("BlenderbotConfig"),OWe=o(" (Blenderbot model)"),VWe=l(),Xf=a("li"),Xte=a("strong"),XWe=o("blenderbot-small"),zWe=o(" \u2014 "),wS=a("a"),QWe=o("BlenderbotSmallConfig"),WWe=o(" (BlenderbotSmall model)"),HWe=l(),zf=a("li"),zte=a("strong"),UWe=o("bloom"),JWe=o(" \u2014 "),AS=a("a"),YWe=o("BloomConfig"),KWe=o(" (BLOOM model)"),ZWe=l(),Qf=a("li"),Qte=a("strong"),eHe=o("camembert"),oHe=o(" \u2014 "),LS=a("a"),rHe=o("CamembertConfig"),tHe=o(" (CamemBERT model)"),aHe=l(),Wf=a("li"),Wte=a("strong"),nHe=o("canine"),sHe=o(" \u2014 "),yS=a("a"),lHe=o("CanineConfig"),iHe=o(" (CANINE model)"),dHe=l(),Hf=a("li"),Hte=a("strong"),cHe=o("clip"),fHe=o(" \u2014 "),xS=a("a"),mHe=o("CLIPConfig"),gHe=o(" (CLIP model)"),hHe=l(),Uf=a("li"),Ute=a("strong"),pHe=o("codegen"),_He=o(" \u2014 "),$S=a("a"),uHe=o("CodeGenConfig"),bHe=o(" (CodeGen model)"),vHe=l(),Jf=a("li"),Jte=a("strong"),FHe=o("convbert"),THe=o(" \u2014 "),kS=a("a"),MHe=o("ConvBertConfig"),EHe=o(" (ConvBERT model)"),CHe=l(),Yf=a("li"),Yte=a("strong"),wHe=o("convnext"),AHe=o(" \u2014 "),SS=a("a"),LHe=o("ConvNextConfig"),yHe=o(" (ConvNeXT model)"),xHe=l(),Kf=a("li"),Kte=a("strong"),$He=o("ctrl"),kHe=o(" \u2014 "),RS=a("a"),SHe=o("CTRLConfig"),RHe=o(" (CTRL model)"),PHe=l(),Zf=a("li"),Zte=a("strong"),BHe=o("cvt"),IHe=o(" \u2014 "),PS=a("a"),NHe=o("CvtConfig"),qHe=o(" (CvT model)"),jHe=l(),em=a("li"),eae=a("strong"),DHe=o("data2vec-audio"),GHe=o(" \u2014 "),BS=a("a"),OHe=o("Data2VecAudioConfig"),VHe=o(" (Data2VecAudio model)"),XHe=l(),om=a("li"),oae=a("strong"),zHe=o("data2vec-text"),QHe=o(" \u2014 "),IS=a("a"),WHe=o("Data2VecTextConfig"),HHe=o(" (Data2VecText model)"),UHe=l(),rm=a("li"),rae=a("strong"),JHe=o("data2vec-vision"),YHe=o(" \u2014 "),NS=a("a"),KHe=o("Data2VecVisionConfig"),ZHe=o(" (Data2VecVision model)"),eUe=l(),tm=a("li"),tae=a("strong"),oUe=o("deberta"),rUe=o(" \u2014 "),qS=a("a"),tUe=o("DebertaConfig"),aUe=o(" (DeBERTa model)"),nUe=l(),am=a("li"),aae=a("strong"),sUe=o("deberta-v2"),lUe=o(" \u2014 "),jS=a("a"),iUe=o("DebertaV2Config"),dUe=o(" (DeBERTa-v2 model)"),cUe=l(),nm=a("li"),nae=a("strong"),fUe=o("decision_transformer"),mUe=o(" \u2014 "),DS=a("a"),gUe=o("DecisionTransformerConfig"),hUe=o(" (Decision Transformer model)"),pUe=l(),sm=a("li"),sae=a("strong"),_Ue=o("deit"),uUe=o(" \u2014 "),GS=a("a"),bUe=o("DeiTConfig"),vUe=o(" (DeiT model)"),FUe=l(),lm=a("li"),lae=a("strong"),TUe=o("detr"),MUe=o(" \u2014 "),OS=a("a"),EUe=o("DetrConfig"),CUe=o(" (DETR model)"),wUe=l(),im=a("li"),iae=a("strong"),AUe=o("distilbert"),LUe=o(" \u2014 "),VS=a("a"),yUe=o("DistilBertConfig"),xUe=o(" (DistilBERT model)"),$Ue=l(),dm=a("li"),dae=a("strong"),kUe=o("dpr"),SUe=o(" \u2014 "),XS=a("a"),RUe=o("DPRConfig"),PUe=o(" (DPR model)"),BUe=l(),cm=a("li"),cae=a("strong"),IUe=o("dpt"),NUe=o(" \u2014 "),zS=a("a"),qUe=o("DPTConfig"),jUe=o(" (DPT model)"),DUe=l(),fm=a("li"),fae=a("strong"),GUe=o("electra"),OUe=o(" \u2014 "),QS=a("a"),VUe=o("ElectraConfig"),XUe=o(" (ELECTRA model)"),zUe=l(),mm=a("li"),mae=a("strong"),QUe=o("encoder-decoder"),WUe=o(" \u2014 "),WS=a("a"),HUe=o("EncoderDecoderConfig"),UUe=o(" (Encoder decoder model)"),JUe=l(),gm=a("li"),gae=a("strong"),YUe=o("flaubert"),KUe=o(" \u2014 "),HS=a("a"),ZUe=o("FlaubertConfig"),eJe=o(" (FlauBERT model)"),oJe=l(),hm=a("li"),hae=a("strong"),rJe=o("flava"),tJe=o(" \u2014 "),US=a("a"),aJe=o("FlavaConfig"),nJe=o(" (FLAVA model)"),sJe=l(),pm=a("li"),pae=a("strong"),lJe=o("fnet"),iJe=o(" \u2014 "),JS=a("a"),dJe=o("FNetConfig"),cJe=o(" (FNet model)"),fJe=l(),_m=a("li"),_ae=a("strong"),mJe=o("fsmt"),gJe=o(" \u2014 "),YS=a("a"),hJe=o("FSMTConfig"),pJe=o(" (FairSeq Machine-Translation model)"),_Je=l(),um=a("li"),uae=a("strong"),uJe=o("funnel"),bJe=o(" \u2014 "),KS=a("a"),vJe=o("FunnelConfig"),FJe=o(" (Funnel Transformer model)"),TJe=l(),bm=a("li"),bae=a("strong"),MJe=o("glpn"),EJe=o(" \u2014 "),ZS=a("a"),CJe=o("GLPNConfig"),wJe=o(" (GLPN model)"),AJe=l(),vm=a("li"),vae=a("strong"),LJe=o("gpt2"),yJe=o(" \u2014 "),eR=a("a"),xJe=o("GPT2Config"),$Je=o(" (OpenAI GPT-2 model)"),kJe=l(),Fm=a("li"),Fae=a("strong"),SJe=o("gpt_neo"),RJe=o(" \u2014 "),oR=a("a"),PJe=o("GPTNeoConfig"),BJe=o(" (GPT Neo model)"),IJe=l(),Tm=a("li"),Tae=a("strong"),NJe=o("gpt_neox"),qJe=o(" \u2014 "),rR=a("a"),jJe=o("GPTNeoXConfig"),DJe=o(" (GPT NeoX model)"),GJe=l(),Mm=a("li"),Mae=a("strong"),OJe=o("gptj"),VJe=o(" \u2014 "),tR=a("a"),XJe=o("GPTJConfig"),zJe=o(" (GPT-J model)"),QJe=l(),Em=a("li"),Eae=a("strong"),WJe=o("hubert"),HJe=o(" \u2014 "),aR=a("a"),UJe=o("HubertConfig"),JJe=o(" (Hubert model)"),YJe=l(),Cm=a("li"),Cae=a("strong"),KJe=o("ibert"),ZJe=o(" \u2014 "),nR=a("a"),eYe=o("IBertConfig"),oYe=o(" (I-BERT model)"),rYe=l(),wm=a("li"),wae=a("strong"),tYe=o("imagegpt"),aYe=o(" \u2014 "),sR=a("a"),nYe=o("ImageGPTConfig"),sYe=o(" (ImageGPT model)"),lYe=l(),Am=a("li"),Aae=a("strong"),iYe=o("jukebox"),dYe=o(" \u2014 "),lR=a("a"),cYe=o("JukeboxConfig"),fYe=o(" (Jukebox model)"),mYe=l(),Lm=a("li"),Lae=a("strong"),gYe=o("layoutlm"),hYe=o(" \u2014 "),iR=a("a"),pYe=o("LayoutLMConfig"),_Ye=o(" (LayoutLM model)"),uYe=l(),ym=a("li"),yae=a("strong"),bYe=o("layoutlmv2"),vYe=o(" \u2014 "),dR=a("a"),FYe=o("LayoutLMv2Config"),TYe=o(" (LayoutLMv2 model)"),MYe=l(),xm=a("li"),xae=a("strong"),EYe=o("layoutlmv3"),CYe=o(" \u2014 "),cR=a("a"),wYe=o("LayoutLMv3Config"),AYe=o(" (LayoutLMv3 model)"),LYe=l(),$m=a("li"),$ae=a("strong"),yYe=o("led"),xYe=o(" \u2014 "),fR=a("a"),$Ye=o("LEDConfig"),kYe=o(" (LED model)"),SYe=l(),km=a("li"),kae=a("strong"),RYe=o("levit"),PYe=o(" \u2014 "),mR=a("a"),BYe=o("LevitConfig"),IYe=o(" (LeViT model)"),NYe=l(),Sm=a("li"),Sae=a("strong"),qYe=o("longformer"),jYe=o(" \u2014 "),gR=a("a"),DYe=o("LongformerConfig"),GYe=o(" (Longformer model)"),OYe=l(),Rm=a("li"),Rae=a("strong"),VYe=o("longt5"),XYe=o(" \u2014 "),hR=a("a"),zYe=o("LongT5Config"),QYe=o(" (LongT5 model)"),WYe=l(),Pm=a("li"),Pae=a("strong"),HYe=o("luke"),UYe=o(" \u2014 "),pR=a("a"),JYe=o("LukeConfig"),YYe=o(" (LUKE model)"),KYe=l(),Bm=a("li"),Bae=a("strong"),ZYe=o("lxmert"),eKe=o(" \u2014 "),_R=a("a"),oKe=o("LxmertConfig"),rKe=o(" (LXMERT model)"),tKe=l(),Im=a("li"),Iae=a("strong"),aKe=o("m2m_100"),nKe=o(" \u2014 "),uR=a("a"),sKe=o("M2M100Config"),lKe=o(" (M2M100 model)"),iKe=l(),Nm=a("li"),Nae=a("strong"),dKe=o("marian"),cKe=o(" \u2014 "),bR=a("a"),fKe=o("MarianConfig"),mKe=o(" (Marian model)"),gKe=l(),qm=a("li"),qae=a("strong"),hKe=o("maskformer"),pKe=o(" \u2014 "),vR=a("a"),_Ke=o("MaskFormerConfig"),uKe=o(" (MaskFormer model)"),bKe=l(),jm=a("li"),jae=a("strong"),vKe=o("mbart"),FKe=o(" \u2014 "),FR=a("a"),TKe=o("MBartConfig"),MKe=o(" (mBART model)"),EKe=l(),Dm=a("li"),Dae=a("strong"),CKe=o("mctct"),wKe=o(" \u2014 "),TR=a("a"),AKe=o("MCTCTConfig"),LKe=o(" (M-CTC-T model)"),yKe=l(),Gm=a("li"),Gae=a("strong"),xKe=o("megatron-bert"),$Ke=o(" \u2014 "),MR=a("a"),kKe=o("MegatronBertConfig"),SKe=o(" (Megatron-BERT model)"),RKe=l(),Om=a("li"),Oae=a("strong"),PKe=o("mobilebert"),BKe=o(" \u2014 "),ER=a("a"),IKe=o("MobileBertConfig"),NKe=o(" (MobileBERT model)"),qKe=l(),Vm=a("li"),Vae=a("strong"),jKe=o("mpnet"),DKe=o(" \u2014 "),CR=a("a"),GKe=o("MPNetConfig"),OKe=o(" (MPNet model)"),VKe=l(),Xm=a("li"),Xae=a("strong"),XKe=o("mt5"),zKe=o(" \u2014 "),wR=a("a"),QKe=o("MT5Config"),WKe=o(" (MT5 model)"),HKe=l(),zm=a("li"),zae=a("strong"),UKe=o("nezha"),JKe=o(" \u2014 "),AR=a("a"),YKe=o("NezhaConfig"),KKe=o(" (Nezha model)"),ZKe=l(),Qm=a("li"),Qae=a("strong"),eZe=o("nystromformer"),oZe=o(" \u2014 "),LR=a("a"),rZe=o("NystromformerConfig"),tZe=o(" (Nystr\xF6mformer model)"),aZe=l(),Wm=a("li"),Wae=a("strong"),nZe=o("openai-gpt"),sZe=o(" \u2014 "),yR=a("a"),lZe=o("OpenAIGPTConfig"),iZe=o(" (OpenAI GPT model)"),dZe=l(),Hm=a("li"),Hae=a("strong"),cZe=o("opt"),fZe=o(" \u2014 "),xR=a("a"),mZe=o("OPTConfig"),gZe=o(" (OPT model)"),hZe=l(),Um=a("li"),Uae=a("strong"),pZe=o("pegasus"),_Ze=o(" \u2014 "),$R=a("a"),uZe=o("PegasusConfig"),bZe=o(" (Pegasus model)"),vZe=l(),Jm=a("li"),Jae=a("strong"),FZe=o("perceiver"),TZe=o(" \u2014 "),kR=a("a"),MZe=o("PerceiverConfig"),EZe=o(" (Perceiver model)"),CZe=l(),Ym=a("li"),Yae=a("strong"),wZe=o("plbart"),AZe=o(" \u2014 "),SR=a("a"),LZe=o("PLBartConfig"),yZe=o(" (PLBart model)"),xZe=l(),Km=a("li"),Kae=a("strong"),$Ze=o("poolformer"),kZe=o(" \u2014 "),RR=a("a"),SZe=o("PoolFormerConfig"),RZe=o(" (PoolFormer model)"),PZe=l(),Zm=a("li"),Zae=a("strong"),BZe=o("prophetnet"),IZe=o(" \u2014 "),PR=a("a"),NZe=o("ProphetNetConfig"),qZe=o(" (ProphetNet model)"),jZe=l(),eg=a("li"),ene=a("strong"),DZe=o("qdqbert"),GZe=o(" \u2014 "),BR=a("a"),OZe=o("QDQBertConfig"),VZe=o(" (QDQBert model)"),XZe=l(),og=a("li"),one=a("strong"),zZe=o("rag"),QZe=o(" \u2014 "),IR=a("a"),WZe=o("RagConfig"),HZe=o(" (RAG model)"),UZe=l(),rg=a("li"),rne=a("strong"),JZe=o("realm"),YZe=o(" \u2014 "),NR=a("a"),KZe=o("RealmConfig"),ZZe=o(" (REALM model)"),eeo=l(),tg=a("li"),tne=a("strong"),oeo=o("reformer"),reo=o(" \u2014 "),qR=a("a"),teo=o("ReformerConfig"),aeo=o(" (Reformer model)"),neo=l(),ag=a("li"),ane=a("strong"),seo=o("regnet"),leo=o(" \u2014 "),jR=a("a"),ieo=o("RegNetConfig"),deo=o(" (RegNet model)"),ceo=l(),ng=a("li"),nne=a("strong"),feo=o("rembert"),meo=o(" \u2014 "),DR=a("a"),geo=o("RemBertConfig"),heo=o(" (RemBERT model)"),peo=l(),sg=a("li"),sne=a("strong"),_eo=o("resnet"),ueo=o(" \u2014 "),GR=a("a"),beo=o("ResNetConfig"),veo=o(" (ResNet model)"),Feo=l(),lg=a("li"),lne=a("strong"),Teo=o("retribert"),Meo=o(" \u2014 "),OR=a("a"),Eeo=o("RetriBertConfig"),Ceo=o(" (RetriBERT model)"),weo=l(),ig=a("li"),ine=a("strong"),Aeo=o("roberta"),Leo=o(" \u2014 "),VR=a("a"),yeo=o("RobertaConfig"),xeo=o(" (RoBERTa model)"),$eo=l(),dg=a("li"),dne=a("strong"),keo=o("roformer"),Seo=o(" \u2014 "),XR=a("a"),Reo=o("RoFormerConfig"),Peo=o(" (RoFormer model)"),Beo=l(),cg=a("li"),cne=a("strong"),Ieo=o("segformer"),Neo=o(" \u2014 "),zR=a("a"),qeo=o("SegformerConfig"),jeo=o(" (SegFormer model)"),Deo=l(),fg=a("li"),fne=a("strong"),Geo=o("sew"),Oeo=o(" \u2014 "),QR=a("a"),Veo=o("SEWConfig"),Xeo=o(" (SEW model)"),zeo=l(),mg=a("li"),mne=a("strong"),Qeo=o("sew-d"),Weo=o(" \u2014 "),WR=a("a"),Heo=o("SEWDConfig"),Ueo=o(" (SEW-D model)"),Jeo=l(),gg=a("li"),gne=a("strong"),Yeo=o("speech-encoder-decoder"),Keo=o(" \u2014 "),HR=a("a"),Zeo=o("SpeechEncoderDecoderConfig"),eoo=o(" (Speech Encoder decoder model)"),ooo=l(),hg=a("li"),hne=a("strong"),roo=o("speech_to_text"),too=o(" \u2014 "),UR=a("a"),aoo=o("Speech2TextConfig"),noo=o(" (Speech2Text model)"),soo=l(),pg=a("li"),pne=a("strong"),loo=o("speech_to_text_2"),ioo=o(" \u2014 "),JR=a("a"),doo=o("Speech2Text2Config"),coo=o(" (Speech2Text2 model)"),foo=l(),_g=a("li"),_ne=a("strong"),moo=o("splinter"),goo=o(" \u2014 "),YR=a("a"),hoo=o("SplinterConfig"),poo=o(" (Splinter model)"),_oo=l(),ug=a("li"),une=a("strong"),uoo=o("squeezebert"),boo=o(" \u2014 "),KR=a("a"),voo=o("SqueezeBertConfig"),Foo=o(" (SqueezeBERT model)"),Too=l(),bg=a("li"),bne=a("strong"),Moo=o("swin"),Eoo=o(" \u2014 "),ZR=a("a"),Coo=o("SwinConfig"),woo=o(" (Swin Transformer model)"),Aoo=l(),vg=a("li"),vne=a("strong"),Loo=o("t5"),yoo=o(" \u2014 "),eP=a("a"),xoo=o("T5Config"),$oo=o(" (T5 model)"),koo=l(),Fg=a("li"),Fne=a("strong"),Soo=o("tapas"),Roo=o(" \u2014 "),oP=a("a"),Poo=o("TapasConfig"),Boo=o(" (TAPAS model)"),Ioo=l(),Tg=a("li"),Tne=a("strong"),Noo=o("trajectory_transformer"),qoo=o(" \u2014 "),rP=a("a"),joo=o("TrajectoryTransformerConfig"),Doo=o(" (Trajectory Transformer model)"),Goo=l(),Mg=a("li"),Mne=a("strong"),Ooo=o("transfo-xl"),Voo=o(" \u2014 "),tP=a("a"),Xoo=o("TransfoXLConfig"),zoo=o(" (Transformer-XL model)"),Qoo=l(),Eg=a("li"),Ene=a("strong"),Woo=o("trocr"),Hoo=o(" \u2014 "),aP=a("a"),Uoo=o("TrOCRConfig"),Joo=o(" (TrOCR model)"),Yoo=l(),Cg=a("li"),Cne=a("strong"),Koo=o("unispeech"),Zoo=o(" \u2014 "),nP=a("a"),ero=o("UniSpeechConfig"),oro=o(" (UniSpeech model)"),rro=l(),wg=a("li"),wne=a("strong"),tro=o("unispeech-sat"),aro=o(" \u2014 "),sP=a("a"),nro=o("UniSpeechSatConfig"),sro=o(" (UniSpeechSat model)"),lro=l(),Ag=a("li"),Ane=a("strong"),iro=o("van"),dro=o(" \u2014 "),lP=a("a"),cro=o("VanConfig"),fro=o(" (VAN model)"),mro=l(),Lg=a("li"),Lne=a("strong"),gro=o("vilt"),hro=o(" \u2014 "),iP=a("a"),pro=o("ViltConfig"),_ro=o(" (ViLT model)"),uro=l(),yg=a("li"),yne=a("strong"),bro=o("vision-encoder-decoder"),vro=o(" \u2014 "),dP=a("a"),Fro=o("VisionEncoderDecoderConfig"),Tro=o(" (Vision Encoder decoder model)"),Mro=l(),xg=a("li"),xne=a("strong"),Ero=o("vision-text-dual-encoder"),Cro=o(" \u2014 "),cP=a("a"),wro=o("VisionTextDualEncoderConfig"),Aro=o(" (VisionTextDualEncoder model)"),Lro=l(),$g=a("li"),$ne=a("strong"),yro=o("visual_bert"),xro=o(" \u2014 "),fP=a("a"),$ro=o("VisualBertConfig"),kro=o(" (VisualBERT model)"),Sro=l(),kg=a("li"),kne=a("strong"),Rro=o("vit"),Pro=o(" \u2014 "),mP=a("a"),Bro=o("ViTConfig"),Iro=o(" (ViT model)"),Nro=l(),Sg=a("li"),Sne=a("strong"),qro=o("vit_mae"),jro=o(" \u2014 "),gP=a("a"),Dro=o("ViTMAEConfig"),Gro=o(" (ViTMAE model)"),Oro=l(),Rg=a("li"),Rne=a("strong"),Vro=o("wav2vec2"),Xro=o(" \u2014 "),hP=a("a"),zro=o("Wav2Vec2Config"),Qro=o(" (Wav2Vec2 model)"),Wro=l(),Pg=a("li"),Pne=a("strong"),Hro=o("wav2vec2-conformer"),Uro=o(" \u2014 "),pP=a("a"),Jro=o("Wav2Vec2ConformerConfig"),Yro=o(" (Wav2Vec2-Conformer model)"),Kro=l(),Bg=a("li"),Bne=a("strong"),Zro=o("wavlm"),eto=o(" \u2014 "),_P=a("a"),oto=o("WavLMConfig"),rto=o(" (WavLM model)"),tto=l(),Ig=a("li"),Ine=a("strong"),ato=o("xglm"),nto=o(" \u2014 "),uP=a("a"),sto=o("XGLMConfig"),lto=o(" (XGLM model)"),ito=l(),Ng=a("li"),Nne=a("strong"),dto=o("xlm"),cto=o(" \u2014 "),bP=a("a"),fto=o("XLMConfig"),mto=o(" (XLM model)"),gto=l(),qg=a("li"),qne=a("strong"),hto=o("xlm-prophetnet"),pto=o(" \u2014 "),vP=a("a"),_to=o("XLMProphetNetConfig"),uto=o(" (XLM-ProphetNet model)"),bto=l(),jg=a("li"),jne=a("strong"),vto=o("xlm-roberta"),Fto=o(" \u2014 "),FP=a("a"),Tto=o("XLMRobertaConfig"),Mto=o(" (XLM-RoBERTa model)"),Eto=l(),Dg=a("li"),Dne=a("strong"),Cto=o("xlm-roberta-xl"),wto=o(" \u2014 "),TP=a("a"),Ato=o("XLMRobertaXLConfig"),Lto=o(" (XLM-RoBERTa-XL model)"),yto=l(),Gg=a("li"),Gne=a("strong"),xto=o("xlnet"),$to=o(" \u2014 "),MP=a("a"),kto=o("XLNetConfig"),Sto=o(" (XLNet model)"),Rto=l(),Og=a("li"),One=a("strong"),Pto=o("yolos"),Bto=o(" \u2014 "),EP=a("a"),Ito=o("YolosConfig"),Nto=o(" (YOLOS model)"),qto=l(),Vg=a("li"),Vne=a("strong"),jto=o("yoso"),Dto=o(" \u2014 "),CP=a("a"),Gto=o("YosoConfig"),Oto=o(" (YOSO model)"),Vto=l(),F(Xg.$$.fragment),Xto=l(),zg=a("div"),F(VA.$$.fragment),zto=l(),Xne=a("p"),Qto=o("Register a new configuration for this class."),TOe=l(),Si=a("h2"),Qg=a("a"),zne=a("span"),F(XA.$$.fragment),Wto=l(),Qne=a("span"),Hto=o("AutoTokenizer"),MOe=l(),Ao=a("div"),F(zA.$$.fragment),Uto=l(),QA=a("p"),Jto=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wP=a("a"),Yto=o("AutoTokenizer.from_pretrained()"),Kto=o(" class method."),Zto=l(),WA=a("p"),eao=o("This class cannot be instantiated directly using "),Wne=a("code"),oao=o("__init__()"),rao=o(" (throws an error)."),tao=l(),Lr=a("div"),F(HA.$$.fragment),aao=l(),Hne=a("p"),nao=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),sao=l(),ka=a("p"),lao=o("The tokenizer class to instantiate is selected based on the "),Une=a("code"),iao=o("model_type"),dao=o(` property of the config object (either
passed as an argument or loaded from `),Jne=a("code"),cao=o("pretrained_model_name_or_path"),fao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yne=a("code"),mao=o("pretrained_model_name_or_path"),gao=o(":"),hao=l(),k=a("ul"),qn=a("li"),Kne=a("strong"),pao=o("albert"),_ao=o(" \u2014 "),AP=a("a"),uao=o("AlbertTokenizer"),bao=o(" or "),LP=a("a"),vao=o("AlbertTokenizerFast"),Fao=o(" (ALBERT model)"),Tao=l(),jn=a("li"),Zne=a("strong"),Mao=o("bart"),Eao=o(" \u2014 "),yP=a("a"),Cao=o("BartTokenizer"),wao=o(" or "),xP=a("a"),Aao=o("BartTokenizerFast"),Lao=o(" (BART model)"),yao=l(),Dn=a("li"),ese=a("strong"),xao=o("barthez"),$ao=o(" \u2014 "),$P=a("a"),kao=o("BarthezTokenizer"),Sao=o(" or "),kP=a("a"),Rao=o("BarthezTokenizerFast"),Pao=o(" (BARThez model)"),Bao=l(),Wg=a("li"),ose=a("strong"),Iao=o("bartpho"),Nao=o(" \u2014 "),SP=a("a"),qao=o("BartphoTokenizer"),jao=o(" (BARTpho model)"),Dao=l(),Gn=a("li"),rse=a("strong"),Gao=o("bert"),Oao=o(" \u2014 "),RP=a("a"),Vao=o("BertTokenizer"),Xao=o(" or "),PP=a("a"),zao=o("BertTokenizerFast"),Qao=o(" (BERT model)"),Wao=l(),Hg=a("li"),tse=a("strong"),Hao=o("bert-generation"),Uao=o(" \u2014 "),BP=a("a"),Jao=o("BertGenerationTokenizer"),Yao=o(" (Bert Generation model)"),Kao=l(),Ug=a("li"),ase=a("strong"),Zao=o("bert-japanese"),eno=o(" \u2014 "),IP=a("a"),ono=o("BertJapaneseTokenizer"),rno=o(" (BertJapanese model)"),tno=l(),Jg=a("li"),nse=a("strong"),ano=o("bertweet"),nno=o(" \u2014 "),NP=a("a"),sno=o("BertweetTokenizer"),lno=o(" (BERTweet model)"),ino=l(),On=a("li"),sse=a("strong"),dno=o("big_bird"),cno=o(" \u2014 "),qP=a("a"),fno=o("BigBirdTokenizer"),mno=o(" or "),jP=a("a"),gno=o("BigBirdTokenizerFast"),hno=o(" (BigBird model)"),pno=l(),Vn=a("li"),lse=a("strong"),_no=o("bigbird_pegasus"),uno=o(" \u2014 "),DP=a("a"),bno=o("PegasusTokenizer"),vno=o(" or "),GP=a("a"),Fno=o("PegasusTokenizerFast"),Tno=o(" (BigBird-Pegasus model)"),Mno=l(),Xn=a("li"),ise=a("strong"),Eno=o("blenderbot"),Cno=o(" \u2014 "),OP=a("a"),wno=o("BlenderbotTokenizer"),Ano=o(" or "),VP=a("a"),Lno=o("BlenderbotTokenizerFast"),yno=o(" (Blenderbot model)"),xno=l(),Yg=a("li"),dse=a("strong"),$no=o("blenderbot-small"),kno=o(" \u2014 "),XP=a("a"),Sno=o("BlenderbotSmallTokenizer"),Rno=o(" (BlenderbotSmall model)"),Pno=l(),Kg=a("li"),cse=a("strong"),Bno=o("bloom"),Ino=o(" \u2014 "),zP=a("a"),Nno=o("BloomTokenizerFast"),qno=o(" (BLOOM model)"),jno=l(),Zg=a("li"),fse=a("strong"),Dno=o("byt5"),Gno=o(" \u2014 "),QP=a("a"),Ono=o("ByT5Tokenizer"),Vno=o(" (ByT5 model)"),Xno=l(),zn=a("li"),mse=a("strong"),zno=o("camembert"),Qno=o(" \u2014 "),WP=a("a"),Wno=o("CamembertTokenizer"),Hno=o(" or "),HP=a("a"),Uno=o("CamembertTokenizerFast"),Jno=o(" (CamemBERT model)"),Yno=l(),eh=a("li"),gse=a("strong"),Kno=o("canine"),Zno=o(" \u2014 "),UP=a("a"),eso=o("CanineTokenizer"),oso=o(" (CANINE model)"),rso=l(),Qn=a("li"),hse=a("strong"),tso=o("clip"),aso=o(" \u2014 "),JP=a("a"),nso=o("CLIPTokenizer"),sso=o(" or "),YP=a("a"),lso=o("CLIPTokenizerFast"),iso=o(" (CLIP model)"),dso=l(),Wn=a("li"),pse=a("strong"),cso=o("codegen"),fso=o(" \u2014 "),KP=a("a"),mso=o("CodeGenTokenizer"),gso=o(" or "),ZP=a("a"),hso=o("CodeGenTokenizerFast"),pso=o(" (CodeGen model)"),_so=l(),Hn=a("li"),_se=a("strong"),uso=o("convbert"),bso=o(" \u2014 "),eB=a("a"),vso=o("ConvBertTokenizer"),Fso=o(" or "),oB=a("a"),Tso=o("ConvBertTokenizerFast"),Mso=o(" (ConvBERT model)"),Eso=l(),Un=a("li"),use=a("strong"),Cso=o("cpm"),wso=o(" \u2014 "),rB=a("a"),Aso=o("CpmTokenizer"),Lso=o(" or "),tB=a("a"),yso=o("CpmTokenizerFast"),xso=o(" (CPM model)"),$so=l(),oh=a("li"),bse=a("strong"),kso=o("ctrl"),Sso=o(" \u2014 "),aB=a("a"),Rso=o("CTRLTokenizer"),Pso=o(" (CTRL model)"),Bso=l(),Jn=a("li"),vse=a("strong"),Iso=o("data2vec-text"),Nso=o(" \u2014 "),nB=a("a"),qso=o("RobertaTokenizer"),jso=o(" or "),sB=a("a"),Dso=o("RobertaTokenizerFast"),Gso=o(" (Data2VecText model)"),Oso=l(),Yn=a("li"),Fse=a("strong"),Vso=o("deberta"),Xso=o(" \u2014 "),lB=a("a"),zso=o("DebertaTokenizer"),Qso=o(" or "),iB=a("a"),Wso=o("DebertaTokenizerFast"),Hso=o(" (DeBERTa model)"),Uso=l(),Kn=a("li"),Tse=a("strong"),Jso=o("deberta-v2"),Yso=o(" \u2014 "),dB=a("a"),Kso=o("DebertaV2Tokenizer"),Zso=o(" or "),cB=a("a"),elo=o("DebertaV2TokenizerFast"),olo=o(" (DeBERTa-v2 model)"),rlo=l(),Zn=a("li"),Mse=a("strong"),tlo=o("distilbert"),alo=o(" \u2014 "),fB=a("a"),nlo=o("DistilBertTokenizer"),slo=o(" or "),mB=a("a"),llo=o("DistilBertTokenizerFast"),ilo=o(" (DistilBERT model)"),dlo=l(),es=a("li"),Ese=a("strong"),clo=o("dpr"),flo=o(" \u2014 "),gB=a("a"),mlo=o("DPRQuestionEncoderTokenizer"),glo=o(" or "),hB=a("a"),hlo=o("DPRQuestionEncoderTokenizerFast"),plo=o(" (DPR model)"),_lo=l(),os=a("li"),Cse=a("strong"),ulo=o("electra"),blo=o(" \u2014 "),pB=a("a"),vlo=o("ElectraTokenizer"),Flo=o(" or "),_B=a("a"),Tlo=o("ElectraTokenizerFast"),Mlo=o(" (ELECTRA model)"),Elo=l(),rh=a("li"),wse=a("strong"),Clo=o("flaubert"),wlo=o(" \u2014 "),uB=a("a"),Alo=o("FlaubertTokenizer"),Llo=o(" (FlauBERT model)"),ylo=l(),rs=a("li"),Ase=a("strong"),xlo=o("fnet"),$lo=o(" \u2014 "),bB=a("a"),klo=o("FNetTokenizer"),Slo=o(" or "),vB=a("a"),Rlo=o("FNetTokenizerFast"),Plo=o(" (FNet model)"),Blo=l(),th=a("li"),Lse=a("strong"),Ilo=o("fsmt"),Nlo=o(" \u2014 "),FB=a("a"),qlo=o("FSMTTokenizer"),jlo=o(" (FairSeq Machine-Translation model)"),Dlo=l(),ts=a("li"),yse=a("strong"),Glo=o("funnel"),Olo=o(" \u2014 "),TB=a("a"),Vlo=o("FunnelTokenizer"),Xlo=o(" or "),MB=a("a"),zlo=o("FunnelTokenizerFast"),Qlo=o(" (Funnel Transformer model)"),Wlo=l(),as=a("li"),xse=a("strong"),Hlo=o("gpt2"),Ulo=o(" \u2014 "),EB=a("a"),Jlo=o("GPT2Tokenizer"),Ylo=o(" or "),CB=a("a"),Klo=o("GPT2TokenizerFast"),Zlo=o(" (OpenAI GPT-2 model)"),eio=l(),ns=a("li"),$se=a("strong"),oio=o("gpt_neo"),rio=o(" \u2014 "),wB=a("a"),tio=o("GPT2Tokenizer"),aio=o(" or "),AB=a("a"),nio=o("GPT2TokenizerFast"),sio=o(" (GPT Neo model)"),lio=l(),ah=a("li"),kse=a("strong"),iio=o("gpt_neox"),dio=o(" \u2014 "),LB=a("a"),cio=o("GPTNeoXTokenizerFast"),fio=o(" (GPT NeoX model)"),mio=l(),ss=a("li"),Sse=a("strong"),gio=o("gptj"),hio=o(" \u2014 "),yB=a("a"),pio=o("GPT2Tokenizer"),_io=o(" or "),xB=a("a"),uio=o("GPT2TokenizerFast"),bio=o(" (GPT-J model)"),vio=l(),ls=a("li"),Rse=a("strong"),Fio=o("herbert"),Tio=o(" \u2014 "),$B=a("a"),Mio=o("HerbertTokenizer"),Eio=o(" or "),kB=a("a"),Cio=o("HerbertTokenizerFast"),wio=o(" (HerBERT model)"),Aio=l(),nh=a("li"),Pse=a("strong"),Lio=o("hubert"),yio=o(" \u2014 "),SB=a("a"),xio=o("Wav2Vec2CTCTokenizer"),$io=o(" (Hubert model)"),kio=l(),is=a("li"),Bse=a("strong"),Sio=o("ibert"),Rio=o(" \u2014 "),RB=a("a"),Pio=o("RobertaTokenizer"),Bio=o(" or "),PB=a("a"),Iio=o("RobertaTokenizerFast"),Nio=o(" (I-BERT model)"),qio=l(),sh=a("li"),Ise=a("strong"),jio=o("jukebox"),Dio=o(" \u2014 "),Nse=a("code"),Gio=o("JukeboxTokenizer"),Oio=o(" (Jukebox model)"),Vio=l(),ds=a("li"),qse=a("strong"),Xio=o("layoutlm"),zio=o(" \u2014 "),BB=a("a"),Qio=o("LayoutLMTokenizer"),Wio=o(" or "),IB=a("a"),Hio=o("LayoutLMTokenizerFast"),Uio=o(" (LayoutLM model)"),Jio=l(),cs=a("li"),jse=a("strong"),Yio=o("layoutlmv2"),Kio=o(" \u2014 "),NB=a("a"),Zio=o("LayoutLMv2Tokenizer"),edo=o(" or "),qB=a("a"),odo=o("LayoutLMv2TokenizerFast"),rdo=o(" (LayoutLMv2 model)"),tdo=l(),fs=a("li"),Dse=a("strong"),ado=o("layoutlmv3"),ndo=o(" \u2014 "),jB=a("a"),sdo=o("LayoutLMv3Tokenizer"),ldo=o(" or "),DB=a("a"),ido=o("LayoutLMv3TokenizerFast"),ddo=o(" (LayoutLMv3 model)"),cdo=l(),ms=a("li"),Gse=a("strong"),fdo=o("layoutxlm"),mdo=o(" \u2014 "),GB=a("a"),gdo=o("LayoutXLMTokenizer"),hdo=o(" or "),OB=a("a"),pdo=o("LayoutXLMTokenizerFast"),_do=o(" (LayoutXLM model)"),udo=l(),gs=a("li"),Ose=a("strong"),bdo=o("led"),vdo=o(" \u2014 "),VB=a("a"),Fdo=o("LEDTokenizer"),Tdo=o(" or "),XB=a("a"),Mdo=o("LEDTokenizerFast"),Edo=o(" (LED model)"),Cdo=l(),hs=a("li"),Vse=a("strong"),wdo=o("longformer"),Ado=o(" \u2014 "),zB=a("a"),Ldo=o("LongformerTokenizer"),ydo=o(" or "),QB=a("a"),xdo=o("LongformerTokenizerFast"),$do=o(" (Longformer model)"),kdo=l(),ps=a("li"),Xse=a("strong"),Sdo=o("longt5"),Rdo=o(" \u2014 "),WB=a("a"),Pdo=o("T5Tokenizer"),Bdo=o(" or "),HB=a("a"),Ido=o("T5TokenizerFast"),Ndo=o(" (LongT5 model)"),qdo=l(),lh=a("li"),zse=a("strong"),jdo=o("luke"),Ddo=o(" \u2014 "),UB=a("a"),Gdo=o("LukeTokenizer"),Odo=o(" (LUKE model)"),Vdo=l(),_s=a("li"),Qse=a("strong"),Xdo=o("lxmert"),zdo=o(" \u2014 "),JB=a("a"),Qdo=o("LxmertTokenizer"),Wdo=o(" or "),YB=a("a"),Hdo=o("LxmertTokenizerFast"),Udo=o(" (LXMERT model)"),Jdo=l(),ih=a("li"),Wse=a("strong"),Ydo=o("m2m_100"),Kdo=o(" \u2014 "),KB=a("a"),Zdo=o("M2M100Tokenizer"),eco=o(" (M2M100 model)"),oco=l(),dh=a("li"),Hse=a("strong"),rco=o("marian"),tco=o(" \u2014 "),ZB=a("a"),aco=o("MarianTokenizer"),nco=o(" (Marian model)"),sco=l(),us=a("li"),Use=a("strong"),lco=o("mbart"),ico=o(" \u2014 "),eI=a("a"),dco=o("MBartTokenizer"),cco=o(" or "),oI=a("a"),fco=o("MBartTokenizerFast"),mco=o(" (mBART model)"),gco=l(),bs=a("li"),Jse=a("strong"),hco=o("mbart50"),pco=o(" \u2014 "),rI=a("a"),_co=o("MBart50Tokenizer"),uco=o(" or "),tI=a("a"),bco=o("MBart50TokenizerFast"),vco=o(" (mBART-50 model)"),Fco=l(),vs=a("li"),Yse=a("strong"),Tco=o("megatron-bert"),Mco=o(" \u2014 "),aI=a("a"),Eco=o("BertTokenizer"),Cco=o(" or "),nI=a("a"),wco=o("BertTokenizerFast"),Aco=o(" (Megatron-BERT model)"),Lco=l(),ch=a("li"),Kse=a("strong"),yco=o("mluke"),xco=o(" \u2014 "),sI=a("a"),$co=o("MLukeTokenizer"),kco=o(" (mLUKE model)"),Sco=l(),Fs=a("li"),Zse=a("strong"),Rco=o("mobilebert"),Pco=o(" \u2014 "),lI=a("a"),Bco=o("MobileBertTokenizer"),Ico=o(" or "),iI=a("a"),Nco=o("MobileBertTokenizerFast"),qco=o(" (MobileBERT model)"),jco=l(),Ts=a("li"),ele=a("strong"),Dco=o("mpnet"),Gco=o(" \u2014 "),dI=a("a"),Oco=o("MPNetTokenizer"),Vco=o(" or "),cI=a("a"),Xco=o("MPNetTokenizerFast"),zco=o(" (MPNet model)"),Qco=l(),Ms=a("li"),ole=a("strong"),Wco=o("mt5"),Hco=o(" \u2014 "),fI=a("a"),Uco=o("MT5Tokenizer"),Jco=o(" or "),mI=a("a"),Yco=o("MT5TokenizerFast"),Kco=o(" (MT5 model)"),Zco=l(),Es=a("li"),rle=a("strong"),efo=o("nezha"),ofo=o(" \u2014 "),gI=a("a"),rfo=o("BertTokenizer"),tfo=o(" or "),hI=a("a"),afo=o("BertTokenizerFast"),nfo=o(" (Nezha model)"),sfo=l(),Cs=a("li"),tle=a("strong"),lfo=o("nystromformer"),ifo=o(" \u2014 "),pI=a("a"),dfo=o("AlbertTokenizer"),cfo=o(" or "),_I=a("a"),ffo=o("AlbertTokenizerFast"),mfo=o(" (Nystr\xF6mformer model)"),gfo=l(),ws=a("li"),ale=a("strong"),hfo=o("openai-gpt"),pfo=o(" \u2014 "),uI=a("a"),_fo=o("OpenAIGPTTokenizer"),ufo=o(" or "),bI=a("a"),bfo=o("OpenAIGPTTokenizerFast"),vfo=o(" (OpenAI GPT model)"),Ffo=l(),fh=a("li"),nle=a("strong"),Tfo=o("opt"),Mfo=o(" \u2014 "),vI=a("a"),Efo=o("GPT2Tokenizer"),Cfo=o(" (OPT model)"),wfo=l(),As=a("li"),sle=a("strong"),Afo=o("pegasus"),Lfo=o(" \u2014 "),FI=a("a"),yfo=o("PegasusTokenizer"),xfo=o(" or "),TI=a("a"),$fo=o("PegasusTokenizerFast"),kfo=o(" (Pegasus model)"),Sfo=l(),mh=a("li"),lle=a("strong"),Rfo=o("perceiver"),Pfo=o(" \u2014 "),MI=a("a"),Bfo=o("PerceiverTokenizer"),Ifo=o(" (Perceiver model)"),Nfo=l(),gh=a("li"),ile=a("strong"),qfo=o("phobert"),jfo=o(" \u2014 "),EI=a("a"),Dfo=o("PhobertTokenizer"),Gfo=o(" (PhoBERT model)"),Ofo=l(),hh=a("li"),dle=a("strong"),Vfo=o("plbart"),Xfo=o(" \u2014 "),CI=a("a"),zfo=o("PLBartTokenizer"),Qfo=o(" (PLBart model)"),Wfo=l(),ph=a("li"),cle=a("strong"),Hfo=o("prophetnet"),Ufo=o(" \u2014 "),wI=a("a"),Jfo=o("ProphetNetTokenizer"),Yfo=o(" (ProphetNet model)"),Kfo=l(),Ls=a("li"),fle=a("strong"),Zfo=o("qdqbert"),emo=o(" \u2014 "),AI=a("a"),omo=o("BertTokenizer"),rmo=o(" or "),LI=a("a"),tmo=o("BertTokenizerFast"),amo=o(" (QDQBert model)"),nmo=l(),_h=a("li"),mle=a("strong"),smo=o("rag"),lmo=o(" \u2014 "),yI=a("a"),imo=o("RagTokenizer"),dmo=o(" (RAG model)"),cmo=l(),ys=a("li"),gle=a("strong"),fmo=o("realm"),mmo=o(" \u2014 "),xI=a("a"),gmo=o("RealmTokenizer"),hmo=o(" or "),$I=a("a"),pmo=o("RealmTokenizerFast"),_mo=o(" (REALM model)"),umo=l(),xs=a("li"),hle=a("strong"),bmo=o("reformer"),vmo=o(" \u2014 "),kI=a("a"),Fmo=o("ReformerTokenizer"),Tmo=o(" or "),SI=a("a"),Mmo=o("ReformerTokenizerFast"),Emo=o(" (Reformer model)"),Cmo=l(),$s=a("li"),ple=a("strong"),wmo=o("rembert"),Amo=o(" \u2014 "),RI=a("a"),Lmo=o("RemBertTokenizer"),ymo=o(" or "),PI=a("a"),xmo=o("RemBertTokenizerFast"),$mo=o(" (RemBERT model)"),kmo=l(),ks=a("li"),_le=a("strong"),Smo=o("retribert"),Rmo=o(" \u2014 "),BI=a("a"),Pmo=o("RetriBertTokenizer"),Bmo=o(" or "),II=a("a"),Imo=o("RetriBertTokenizerFast"),Nmo=o(" (RetriBERT model)"),qmo=l(),Ss=a("li"),ule=a("strong"),jmo=o("roberta"),Dmo=o(" \u2014 "),NI=a("a"),Gmo=o("RobertaTokenizer"),Omo=o(" or "),qI=a("a"),Vmo=o("RobertaTokenizerFast"),Xmo=o(" (RoBERTa model)"),zmo=l(),Rs=a("li"),ble=a("strong"),Qmo=o("roformer"),Wmo=o(" \u2014 "),jI=a("a"),Hmo=o("RoFormerTokenizer"),Umo=o(" or "),DI=a("a"),Jmo=o("RoFormerTokenizerFast"),Ymo=o(" (RoFormer model)"),Kmo=l(),uh=a("li"),vle=a("strong"),Zmo=o("speech_to_text"),ego=o(" \u2014 "),GI=a("a"),ogo=o("Speech2TextTokenizer"),rgo=o(" (Speech2Text model)"),tgo=l(),bh=a("li"),Fle=a("strong"),ago=o("speech_to_text_2"),ngo=o(" \u2014 "),OI=a("a"),sgo=o("Speech2Text2Tokenizer"),lgo=o(" (Speech2Text2 model)"),igo=l(),Ps=a("li"),Tle=a("strong"),dgo=o("splinter"),cgo=o(" \u2014 "),VI=a("a"),fgo=o("SplinterTokenizer"),mgo=o(" or "),XI=a("a"),ggo=o("SplinterTokenizerFast"),hgo=o(" (Splinter model)"),pgo=l(),Bs=a("li"),Mle=a("strong"),_go=o("squeezebert"),ugo=o(" \u2014 "),zI=a("a"),bgo=o("SqueezeBertTokenizer"),vgo=o(" or "),QI=a("a"),Fgo=o("SqueezeBertTokenizerFast"),Tgo=o(" (SqueezeBERT model)"),Mgo=l(),Is=a("li"),Ele=a("strong"),Ego=o("t5"),Cgo=o(" \u2014 "),WI=a("a"),wgo=o("T5Tokenizer"),Ago=o(" or "),HI=a("a"),Lgo=o("T5TokenizerFast"),ygo=o(" (T5 model)"),xgo=l(),vh=a("li"),Cle=a("strong"),$go=o("tapas"),kgo=o(" \u2014 "),UI=a("a"),Sgo=o("TapasTokenizer"),Rgo=o(" (TAPAS model)"),Pgo=l(),Fh=a("li"),wle=a("strong"),Bgo=o("tapex"),Igo=o(" \u2014 "),JI=a("a"),Ngo=o("TapexTokenizer"),qgo=o(" (TAPEX model)"),jgo=l(),Th=a("li"),Ale=a("strong"),Dgo=o("transfo-xl"),Ggo=o(" \u2014 "),YI=a("a"),Ogo=o("TransfoXLTokenizer"),Vgo=o(" (Transformer-XL model)"),Xgo=l(),Ns=a("li"),Lle=a("strong"),zgo=o("vilt"),Qgo=o(" \u2014 "),KI=a("a"),Wgo=o("BertTokenizer"),Hgo=o(" or "),ZI=a("a"),Ugo=o("BertTokenizerFast"),Jgo=o(" (ViLT model)"),Ygo=l(),qs=a("li"),yle=a("strong"),Kgo=o("visual_bert"),Zgo=o(" \u2014 "),eN=a("a"),eho=o("BertTokenizer"),oho=o(" or "),oN=a("a"),rho=o("BertTokenizerFast"),tho=o(" (VisualBERT model)"),aho=l(),Mh=a("li"),xle=a("strong"),nho=o("wav2vec2"),sho=o(" \u2014 "),rN=a("a"),lho=o("Wav2Vec2CTCTokenizer"),iho=o(" (Wav2Vec2 model)"),dho=l(),Eh=a("li"),$le=a("strong"),cho=o("wav2vec2-conformer"),fho=o(" \u2014 "),tN=a("a"),mho=o("Wav2Vec2CTCTokenizer"),gho=o(" (Wav2Vec2-Conformer model)"),hho=l(),Ch=a("li"),kle=a("strong"),pho=o("wav2vec2_phoneme"),_ho=o(" \u2014 "),aN=a("a"),uho=o("Wav2Vec2PhonemeCTCTokenizer"),bho=o(" (Wav2Vec2Phoneme model)"),vho=l(),js=a("li"),Sle=a("strong"),Fho=o("xglm"),Tho=o(" \u2014 "),nN=a("a"),Mho=o("XGLMTokenizer"),Eho=o(" or "),sN=a("a"),Cho=o("XGLMTokenizerFast"),who=o(" (XGLM model)"),Aho=l(),wh=a("li"),Rle=a("strong"),Lho=o("xlm"),yho=o(" \u2014 "),lN=a("a"),xho=o("XLMTokenizer"),$ho=o(" (XLM model)"),kho=l(),Ah=a("li"),Ple=a("strong"),Sho=o("xlm-prophetnet"),Rho=o(" \u2014 "),iN=a("a"),Pho=o("XLMProphetNetTokenizer"),Bho=o(" (XLM-ProphetNet model)"),Iho=l(),Ds=a("li"),Ble=a("strong"),Nho=o("xlm-roberta"),qho=o(" \u2014 "),dN=a("a"),jho=o("XLMRobertaTokenizer"),Dho=o(" or "),cN=a("a"),Gho=o("XLMRobertaTokenizerFast"),Oho=o(" (XLM-RoBERTa model)"),Vho=l(),Gs=a("li"),Ile=a("strong"),Xho=o("xlm-roberta-xl"),zho=o(" \u2014 "),fN=a("a"),Qho=o("RobertaTokenizer"),Who=o(" or "),mN=a("a"),Hho=o("RobertaTokenizerFast"),Uho=o(" (XLM-RoBERTa-XL model)"),Jho=l(),Os=a("li"),Nle=a("strong"),Yho=o("xlnet"),Kho=o(" \u2014 "),gN=a("a"),Zho=o("XLNetTokenizer"),epo=o(" or "),hN=a("a"),opo=o("XLNetTokenizerFast"),rpo=o(" (XLNet model)"),tpo=l(),Vs=a("li"),qle=a("strong"),apo=o("yoso"),npo=o(" \u2014 "),pN=a("a"),spo=o("AlbertTokenizer"),lpo=o(" or "),_N=a("a"),ipo=o("AlbertTokenizerFast"),dpo=o(" (YOSO model)"),cpo=l(),F(Lh.$$.fragment),fpo=l(),yh=a("div"),F(UA.$$.fragment),mpo=l(),jle=a("p"),gpo=o("Register a new tokenizer in this mapping."),EOe=l(),Ri=a("h2"),xh=a("a"),Dle=a("span"),F(JA.$$.fragment),hpo=l(),Gle=a("span"),ppo=o("AutoFeatureExtractor"),COe=l(),Lo=a("div"),F(YA.$$.fragment),_po=l(),KA=a("p"),upo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),uN=a("a"),bpo=o("AutoFeatureExtractor.from_pretrained()"),vpo=o(" class method."),Fpo=l(),ZA=a("p"),Tpo=o("This class cannot be instantiated directly using "),Ole=a("code"),Mpo=o("__init__()"),Epo=o(" (throws an error)."),Cpo=l(),He=a("div"),F(eL.$$.fragment),wpo=l(),Vle=a("p"),Apo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Lpo=l(),Sa=a("p"),ypo=o("The feature extractor class to instantiate is selected based on the "),Xle=a("code"),xpo=o("model_type"),$po=o(` property of the config object
(either passed as an argument or loaded from `),zle=a("code"),kpo=o("pretrained_model_name_or_path"),Spo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qle=a("code"),Rpo=o("pretrained_model_name_or_path"),Ppo=o(":"),Bpo=l(),Y=a("ul"),$h=a("li"),Wle=a("strong"),Ipo=o("beit"),Npo=o(" \u2014 "),bN=a("a"),qpo=o("BeitFeatureExtractor"),jpo=o(" (BEiT model)"),Dpo=l(),kh=a("li"),Hle=a("strong"),Gpo=o("clip"),Opo=o(" \u2014 "),vN=a("a"),Vpo=o("CLIPFeatureExtractor"),Xpo=o(" (CLIP model)"),zpo=l(),Sh=a("li"),Ule=a("strong"),Qpo=o("convnext"),Wpo=o(" \u2014 "),FN=a("a"),Hpo=o("ConvNextFeatureExtractor"),Upo=o(" (ConvNeXT model)"),Jpo=l(),Rh=a("li"),Jle=a("strong"),Ypo=o("cvt"),Kpo=o(" \u2014 "),TN=a("a"),Zpo=o("ConvNextFeatureExtractor"),e_o=o(" (CvT model)"),o_o=l(),Ph=a("li"),Yle=a("strong"),r_o=o("data2vec-audio"),t_o=o(" \u2014 "),MN=a("a"),a_o=o("Wav2Vec2FeatureExtractor"),n_o=o(" (Data2VecAudio model)"),s_o=l(),Bh=a("li"),Kle=a("strong"),l_o=o("data2vec-vision"),i_o=o(" \u2014 "),EN=a("a"),d_o=o("BeitFeatureExtractor"),c_o=o(" (Data2VecVision model)"),f_o=l(),Ih=a("li"),Zle=a("strong"),m_o=o("deit"),g_o=o(" \u2014 "),CN=a("a"),h_o=o("DeiTFeatureExtractor"),p_o=o(" (DeiT model)"),__o=l(),Nh=a("li"),eie=a("strong"),u_o=o("detr"),b_o=o(" \u2014 "),wN=a("a"),v_o=o("DetrFeatureExtractor"),F_o=o(" (DETR model)"),T_o=l(),qh=a("li"),oie=a("strong"),M_o=o("dpt"),E_o=o(" \u2014 "),AN=a("a"),C_o=o("DPTFeatureExtractor"),w_o=o(" (DPT model)"),A_o=l(),jh=a("li"),rie=a("strong"),L_o=o("flava"),y_o=o(" \u2014 "),LN=a("a"),x_o=o("FlavaFeatureExtractor"),$_o=o(" (FLAVA model)"),k_o=l(),Dh=a("li"),tie=a("strong"),S_o=o("glpn"),R_o=o(" \u2014 "),yN=a("a"),P_o=o("GLPNFeatureExtractor"),B_o=o(" (GLPN model)"),I_o=l(),Gh=a("li"),aie=a("strong"),N_o=o("hubert"),q_o=o(" \u2014 "),xN=a("a"),j_o=o("Wav2Vec2FeatureExtractor"),D_o=o(" (Hubert model)"),G_o=l(),Oh=a("li"),nie=a("strong"),O_o=o("imagegpt"),V_o=o(" \u2014 "),$N=a("a"),X_o=o("ImageGPTFeatureExtractor"),z_o=o(" (ImageGPT model)"),Q_o=l(),Vh=a("li"),sie=a("strong"),W_o=o("layoutlmv2"),H_o=o(" \u2014 "),kN=a("a"),U_o=o("LayoutLMv2FeatureExtractor"),J_o=o(" (LayoutLMv2 model)"),Y_o=l(),Xh=a("li"),lie=a("strong"),K_o=o("layoutlmv3"),Z_o=o(" \u2014 "),SN=a("a"),euo=o("LayoutLMv3FeatureExtractor"),ouo=o(" (LayoutLMv3 model)"),ruo=l(),zh=a("li"),iie=a("strong"),tuo=o("levit"),auo=o(" \u2014 "),RN=a("a"),nuo=o("LevitFeatureExtractor"),suo=o(" (LeViT model)"),luo=l(),Qh=a("li"),die=a("strong"),iuo=o("maskformer"),duo=o(" \u2014 "),PN=a("a"),cuo=o("MaskFormerFeatureExtractor"),fuo=o(" (MaskFormer model)"),muo=l(),Wh=a("li"),cie=a("strong"),guo=o("mctct"),huo=o(" \u2014 "),BN=a("a"),puo=o("MCTCTFeatureExtractor"),_uo=o(" (M-CTC-T model)"),uuo=l(),Hh=a("li"),fie=a("strong"),buo=o("perceiver"),vuo=o(" \u2014 "),IN=a("a"),Fuo=o("PerceiverFeatureExtractor"),Tuo=o(" (Perceiver model)"),Muo=l(),Uh=a("li"),mie=a("strong"),Euo=o("poolformer"),Cuo=o(" \u2014 "),NN=a("a"),wuo=o("PoolFormerFeatureExtractor"),Auo=o(" (PoolFormer model)"),Luo=l(),Jh=a("li"),gie=a("strong"),yuo=o("regnet"),xuo=o(" \u2014 "),qN=a("a"),$uo=o("ConvNextFeatureExtractor"),kuo=o(" (RegNet model)"),Suo=l(),Yh=a("li"),hie=a("strong"),Ruo=o("resnet"),Puo=o(" \u2014 "),jN=a("a"),Buo=o("ConvNextFeatureExtractor"),Iuo=o(" (ResNet model)"),Nuo=l(),Kh=a("li"),pie=a("strong"),quo=o("segformer"),juo=o(" \u2014 "),DN=a("a"),Duo=o("SegformerFeatureExtractor"),Guo=o(" (SegFormer model)"),Ouo=l(),Zh=a("li"),_ie=a("strong"),Vuo=o("speech_to_text"),Xuo=o(" \u2014 "),GN=a("a"),zuo=o("Speech2TextFeatureExtractor"),Quo=o(" (Speech2Text model)"),Wuo=l(),ep=a("li"),uie=a("strong"),Huo=o("swin"),Uuo=o(" \u2014 "),ON=a("a"),Juo=o("ViTFeatureExtractor"),Yuo=o(" (Swin Transformer model)"),Kuo=l(),op=a("li"),bie=a("strong"),Zuo=o("van"),e2o=o(" \u2014 "),VN=a("a"),o2o=o("ConvNextFeatureExtractor"),r2o=o(" (VAN model)"),t2o=l(),rp=a("li"),vie=a("strong"),a2o=o("vilt"),n2o=o(" \u2014 "),XN=a("a"),s2o=o("ViltFeatureExtractor"),l2o=o(" (ViLT model)"),i2o=l(),tp=a("li"),Fie=a("strong"),d2o=o("vit"),c2o=o(" \u2014 "),zN=a("a"),f2o=o("ViTFeatureExtractor"),m2o=o(" (ViT model)"),g2o=l(),ap=a("li"),Tie=a("strong"),h2o=o("vit_mae"),p2o=o(" \u2014 "),QN=a("a"),_2o=o("ViTFeatureExtractor"),u2o=o(" (ViTMAE model)"),b2o=l(),np=a("li"),Mie=a("strong"),v2o=o("wav2vec2"),F2o=o(" \u2014 "),WN=a("a"),T2o=o("Wav2Vec2FeatureExtractor"),M2o=o(" (Wav2Vec2 model)"),E2o=l(),sp=a("li"),Eie=a("strong"),C2o=o("wav2vec2-conformer"),w2o=o(" \u2014 "),HN=a("a"),A2o=o("Wav2Vec2FeatureExtractor"),L2o=o(" (Wav2Vec2-Conformer model)"),y2o=l(),lp=a("li"),Cie=a("strong"),x2o=o("yolos"),$2o=o(" \u2014 "),UN=a("a"),k2o=o("YolosFeatureExtractor"),S2o=o(" (YOLOS model)"),R2o=l(),F(ip.$$.fragment),P2o=l(),F(dp.$$.fragment),B2o=l(),cp=a("div"),F(oL.$$.fragment),I2o=l(),wie=a("p"),N2o=o("Register a new feature extractor for this class."),wOe=l(),Pi=a("h2"),fp=a("a"),Aie=a("span"),F(rL.$$.fragment),q2o=l(),Lie=a("span"),j2o=o("AutoProcessor"),AOe=l(),yo=a("div"),F(tL.$$.fragment),D2o=l(),aL=a("p"),G2o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),JN=a("a"),O2o=o("AutoProcessor.from_pretrained()"),V2o=o(" class method."),X2o=l(),nL=a("p"),z2o=o("This class cannot be instantiated directly using "),yie=a("code"),Q2o=o("__init__()"),W2o=o(" (throws an error)."),H2o=l(),Ue=a("div"),F(sL.$$.fragment),U2o=l(),xie=a("p"),J2o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Y2o=l(),Bi=a("p"),K2o=o("The processor class to instantiate is selected based on the "),$ie=a("code"),Z2o=o("model_type"),e1o=o(` property of the config object (either
passed as an argument or loaded from `),kie=a("code"),o1o=o("pretrained_model_name_or_path"),r1o=o(" if possible):"),t1o=l(),he=a("ul"),mp=a("li"),Sie=a("strong"),a1o=o("clip"),n1o=o(" \u2014 "),YN=a("a"),s1o=o("CLIPProcessor"),l1o=o(" (CLIP model)"),i1o=l(),gp=a("li"),Rie=a("strong"),d1o=o("flava"),c1o=o(" \u2014 "),Pie=a("code"),f1o=o("FLAVAProcessor"),m1o=o(" (FLAVA model)"),g1o=l(),hp=a("li"),Bie=a("strong"),h1o=o("layoutlmv2"),p1o=o(" \u2014 "),KN=a("a"),_1o=o("LayoutLMv2Processor"),u1o=o(" (LayoutLMv2 model)"),b1o=l(),pp=a("li"),Iie=a("strong"),v1o=o("layoutlmv3"),F1o=o(" \u2014 "),ZN=a("a"),T1o=o("LayoutLMv3Processor"),M1o=o(" (LayoutLMv3 model)"),E1o=l(),_p=a("li"),Nie=a("strong"),C1o=o("layoutxlm"),w1o=o(" \u2014 "),eq=a("a"),A1o=o("LayoutXLMProcessor"),L1o=o(" (LayoutXLM model)"),y1o=l(),up=a("li"),qie=a("strong"),x1o=o("sew"),$1o=o(" \u2014 "),oq=a("a"),k1o=o("Wav2Vec2Processor"),S1o=o(" (SEW model)"),R1o=l(),bp=a("li"),jie=a("strong"),P1o=o("sew-d"),B1o=o(" \u2014 "),rq=a("a"),I1o=o("Wav2Vec2Processor"),N1o=o(" (SEW-D model)"),q1o=l(),vp=a("li"),Die=a("strong"),j1o=o("speech_to_text"),D1o=o(" \u2014 "),tq=a("a"),G1o=o("Speech2TextProcessor"),O1o=o(" (Speech2Text model)"),V1o=l(),Fp=a("li"),Gie=a("strong"),X1o=o("speech_to_text_2"),z1o=o(" \u2014 "),aq=a("a"),Q1o=o("Speech2Text2Processor"),W1o=o(" (Speech2Text2 model)"),H1o=l(),Tp=a("li"),Oie=a("strong"),U1o=o("trocr"),J1o=o(" \u2014 "),nq=a("a"),Y1o=o("TrOCRProcessor"),K1o=o(" (TrOCR model)"),Z1o=l(),Mp=a("li"),Vie=a("strong"),ebo=o("unispeech"),obo=o(" \u2014 "),sq=a("a"),rbo=o("Wav2Vec2Processor"),tbo=o(" (UniSpeech model)"),abo=l(),Ep=a("li"),Xie=a("strong"),nbo=o("unispeech-sat"),sbo=o(" \u2014 "),lq=a("a"),lbo=o("Wav2Vec2Processor"),ibo=o(" (UniSpeechSat model)"),dbo=l(),Cp=a("li"),zie=a("strong"),cbo=o("vilt"),fbo=o(" \u2014 "),iq=a("a"),mbo=o("ViltProcessor"),gbo=o(" (ViLT model)"),hbo=l(),wp=a("li"),Qie=a("strong"),pbo=o("vision-text-dual-encoder"),_bo=o(" \u2014 "),dq=a("a"),ubo=o("VisionTextDualEncoderProcessor"),bbo=o(" (VisionTextDualEncoder model)"),vbo=l(),Ap=a("li"),Wie=a("strong"),Fbo=o("wav2vec2"),Tbo=o(" \u2014 "),cq=a("a"),Mbo=o("Wav2Vec2Processor"),Ebo=o(" (Wav2Vec2 model)"),Cbo=l(),Lp=a("li"),Hie=a("strong"),wbo=o("wav2vec2-conformer"),Abo=o(" \u2014 "),fq=a("a"),Lbo=o("Wav2Vec2Processor"),ybo=o(" (Wav2Vec2-Conformer model)"),xbo=l(),yp=a("li"),Uie=a("strong"),$bo=o("wavlm"),kbo=o(" \u2014 "),mq=a("a"),Sbo=o("Wav2Vec2Processor"),Rbo=o(" (WavLM model)"),Pbo=l(),F(xp.$$.fragment),Bbo=l(),F($p.$$.fragment),Ibo=l(),kp=a("div"),F(lL.$$.fragment),Nbo=l(),Jie=a("p"),qbo=o("Register a new processor for this class."),LOe=l(),Ii=a("h2"),Sp=a("a"),Yie=a("span"),F(iL.$$.fragment),jbo=l(),Kie=a("span"),Dbo=o("AutoModel"),yOe=l(),xo=a("div"),F(dL.$$.fragment),Gbo=l(),Ni=a("p"),Obo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gq=a("a"),Vbo=o("from_pretrained()"),Xbo=o(" class method or the "),hq=a("a"),zbo=o("from_config()"),Qbo=o(` class
method.`),Wbo=l(),cL=a("p"),Hbo=o("This class cannot be instantiated directly using "),Zie=a("code"),Ubo=o("__init__()"),Jbo=o(" (throws an error)."),Ybo=l(),nt=a("div"),F(fL.$$.fragment),Kbo=l(),ede=a("p"),Zbo=o("Instantiates one of the base model classes of the library from a configuration."),evo=l(),qi=a("p"),ovo=o(`Note:
Loading a model from its configuration file does `),ode=a("strong"),rvo=o("not"),tvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pq=a("a"),avo=o("from_pretrained()"),nvo=o(" to load the model weights."),svo=l(),F(Rp.$$.fragment),lvo=l(),Je=a("div"),F(mL.$$.fragment),ivo=l(),rde=a("p"),dvo=o("Instantiate one of the base model classes of the library from a pretrained model."),cvo=l(),Ra=a("p"),fvo=o("The model class to instantiate is selected based on the "),tde=a("code"),mvo=o("model_type"),gvo=o(` property of the config object (either
passed as an argument or loaded from `),ade=a("code"),hvo=o("pretrained_model_name_or_path"),pvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nde=a("code"),_vo=o("pretrained_model_name_or_path"),uvo=o(":"),bvo=l(),y=a("ul"),Pp=a("li"),sde=a("strong"),vvo=o("albert"),Fvo=o(" \u2014 "),_q=a("a"),Tvo=o("AlbertModel"),Mvo=o(" (ALBERT model)"),Evo=l(),Bp=a("li"),lde=a("strong"),Cvo=o("bart"),wvo=o(" \u2014 "),uq=a("a"),Avo=o("BartModel"),Lvo=o(" (BART model)"),yvo=l(),Ip=a("li"),ide=a("strong"),xvo=o("beit"),$vo=o(" \u2014 "),bq=a("a"),kvo=o("BeitModel"),Svo=o(" (BEiT model)"),Rvo=l(),Np=a("li"),dde=a("strong"),Pvo=o("bert"),Bvo=o(" \u2014 "),vq=a("a"),Ivo=o("BertModel"),Nvo=o(" (BERT model)"),qvo=l(),qp=a("li"),cde=a("strong"),jvo=o("bert-generation"),Dvo=o(" \u2014 "),Fq=a("a"),Gvo=o("BertGenerationEncoder"),Ovo=o(" (Bert Generation model)"),Vvo=l(),jp=a("li"),fde=a("strong"),Xvo=o("big_bird"),zvo=o(" \u2014 "),Tq=a("a"),Qvo=o("BigBirdModel"),Wvo=o(" (BigBird model)"),Hvo=l(),Dp=a("li"),mde=a("strong"),Uvo=o("bigbird_pegasus"),Jvo=o(" \u2014 "),Mq=a("a"),Yvo=o("BigBirdPegasusModel"),Kvo=o(" (BigBird-Pegasus model)"),Zvo=l(),Gp=a("li"),gde=a("strong"),eFo=o("blenderbot"),oFo=o(" \u2014 "),Eq=a("a"),rFo=o("BlenderbotModel"),tFo=o(" (Blenderbot model)"),aFo=l(),Op=a("li"),hde=a("strong"),nFo=o("blenderbot-small"),sFo=o(" \u2014 "),Cq=a("a"),lFo=o("BlenderbotSmallModel"),iFo=o(" (BlenderbotSmall model)"),dFo=l(),Vp=a("li"),pde=a("strong"),cFo=o("bloom"),fFo=o(" \u2014 "),wq=a("a"),mFo=o("BloomModel"),gFo=o(" (BLOOM model)"),hFo=l(),Xp=a("li"),_de=a("strong"),pFo=o("camembert"),_Fo=o(" \u2014 "),Aq=a("a"),uFo=o("CamembertModel"),bFo=o(" (CamemBERT model)"),vFo=l(),zp=a("li"),ude=a("strong"),FFo=o("canine"),TFo=o(" \u2014 "),Lq=a("a"),MFo=o("CanineModel"),EFo=o(" (CANINE model)"),CFo=l(),Qp=a("li"),bde=a("strong"),wFo=o("clip"),AFo=o(" \u2014 "),yq=a("a"),LFo=o("CLIPModel"),yFo=o(" (CLIP model)"),xFo=l(),Wp=a("li"),vde=a("strong"),$Fo=o("codegen"),kFo=o(" \u2014 "),xq=a("a"),SFo=o("CodeGenModel"),RFo=o(" (CodeGen model)"),PFo=l(),Hp=a("li"),Fde=a("strong"),BFo=o("convbert"),IFo=o(" \u2014 "),$q=a("a"),NFo=o("ConvBertModel"),qFo=o(" (ConvBERT model)"),jFo=l(),Up=a("li"),Tde=a("strong"),DFo=o("convnext"),GFo=o(" \u2014 "),kq=a("a"),OFo=o("ConvNextModel"),VFo=o(" (ConvNeXT model)"),XFo=l(),Jp=a("li"),Mde=a("strong"),zFo=o("ctrl"),QFo=o(" \u2014 "),Sq=a("a"),WFo=o("CTRLModel"),HFo=o(" (CTRL model)"),UFo=l(),Yp=a("li"),Ede=a("strong"),JFo=o("cvt"),YFo=o(" \u2014 "),Rq=a("a"),KFo=o("CvtModel"),ZFo=o(" (CvT model)"),e6o=l(),Kp=a("li"),Cde=a("strong"),o6o=o("data2vec-audio"),r6o=o(" \u2014 "),Pq=a("a"),t6o=o("Data2VecAudioModel"),a6o=o(" (Data2VecAudio model)"),n6o=l(),Zp=a("li"),wde=a("strong"),s6o=o("data2vec-text"),l6o=o(" \u2014 "),Bq=a("a"),i6o=o("Data2VecTextModel"),d6o=o(" (Data2VecText model)"),c6o=l(),e_=a("li"),Ade=a("strong"),f6o=o("data2vec-vision"),m6o=o(" \u2014 "),Iq=a("a"),g6o=o("Data2VecVisionModel"),h6o=o(" (Data2VecVision model)"),p6o=l(),o_=a("li"),Lde=a("strong"),_6o=o("deberta"),u6o=o(" \u2014 "),Nq=a("a"),b6o=o("DebertaModel"),v6o=o(" (DeBERTa model)"),F6o=l(),r_=a("li"),yde=a("strong"),T6o=o("deberta-v2"),M6o=o(" \u2014 "),qq=a("a"),E6o=o("DebertaV2Model"),C6o=o(" (DeBERTa-v2 model)"),w6o=l(),t_=a("li"),xde=a("strong"),A6o=o("decision_transformer"),L6o=o(" \u2014 "),jq=a("a"),y6o=o("DecisionTransformerModel"),x6o=o(" (Decision Transformer model)"),$6o=l(),a_=a("li"),$de=a("strong"),k6o=o("deit"),S6o=o(" \u2014 "),Dq=a("a"),R6o=o("DeiTModel"),P6o=o(" (DeiT model)"),B6o=l(),n_=a("li"),kde=a("strong"),I6o=o("detr"),N6o=o(" \u2014 "),Gq=a("a"),q6o=o("DetrModel"),j6o=o(" (DETR model)"),D6o=l(),s_=a("li"),Sde=a("strong"),G6o=o("distilbert"),O6o=o(" \u2014 "),Oq=a("a"),V6o=o("DistilBertModel"),X6o=o(" (DistilBERT model)"),z6o=l(),l_=a("li"),Rde=a("strong"),Q6o=o("dpr"),W6o=o(" \u2014 "),Vq=a("a"),H6o=o("DPRQuestionEncoder"),U6o=o(" (DPR model)"),J6o=l(),i_=a("li"),Pde=a("strong"),Y6o=o("dpt"),K6o=o(" \u2014 "),Xq=a("a"),Z6o=o("DPTModel"),eTo=o(" (DPT model)"),oTo=l(),d_=a("li"),Bde=a("strong"),rTo=o("electra"),tTo=o(" \u2014 "),zq=a("a"),aTo=o("ElectraModel"),nTo=o(" (ELECTRA model)"),sTo=l(),c_=a("li"),Ide=a("strong"),lTo=o("flaubert"),iTo=o(" \u2014 "),Qq=a("a"),dTo=o("FlaubertModel"),cTo=o(" (FlauBERT model)"),fTo=l(),f_=a("li"),Nde=a("strong"),mTo=o("flava"),gTo=o(" \u2014 "),Wq=a("a"),hTo=o("FlavaModel"),pTo=o(" (FLAVA model)"),_To=l(),m_=a("li"),qde=a("strong"),uTo=o("fnet"),bTo=o(" \u2014 "),Hq=a("a"),vTo=o("FNetModel"),FTo=o(" (FNet model)"),TTo=l(),g_=a("li"),jde=a("strong"),MTo=o("fsmt"),ETo=o(" \u2014 "),Uq=a("a"),CTo=o("FSMTModel"),wTo=o(" (FairSeq Machine-Translation model)"),ATo=l(),Xs=a("li"),Dde=a("strong"),LTo=o("funnel"),yTo=o(" \u2014 "),Jq=a("a"),xTo=o("FunnelModel"),$To=o(" or "),Yq=a("a"),kTo=o("FunnelBaseModel"),STo=o(" (Funnel Transformer model)"),RTo=l(),h_=a("li"),Gde=a("strong"),PTo=o("glpn"),BTo=o(" \u2014 "),Kq=a("a"),ITo=o("GLPNModel"),NTo=o(" (GLPN model)"),qTo=l(),p_=a("li"),Ode=a("strong"),jTo=o("gpt2"),DTo=o(" \u2014 "),Zq=a("a"),GTo=o("GPT2Model"),OTo=o(" (OpenAI GPT-2 model)"),VTo=l(),__=a("li"),Vde=a("strong"),XTo=o("gpt_neo"),zTo=o(" \u2014 "),ej=a("a"),QTo=o("GPTNeoModel"),WTo=o(" (GPT Neo model)"),HTo=l(),u_=a("li"),Xde=a("strong"),UTo=o("gpt_neox"),JTo=o(" \u2014 "),oj=a("a"),YTo=o("GPTNeoXModel"),KTo=o(" (GPT NeoX model)"),ZTo=l(),b_=a("li"),zde=a("strong"),e7o=o("gptj"),o7o=o(" \u2014 "),rj=a("a"),r7o=o("GPTJModel"),t7o=o(" (GPT-J model)"),a7o=l(),v_=a("li"),Qde=a("strong"),n7o=o("hubert"),s7o=o(" \u2014 "),tj=a("a"),l7o=o("HubertModel"),i7o=o(" (Hubert model)"),d7o=l(),F_=a("li"),Wde=a("strong"),c7o=o("ibert"),f7o=o(" \u2014 "),aj=a("a"),m7o=o("IBertModel"),g7o=o(" (I-BERT model)"),h7o=l(),T_=a("li"),Hde=a("strong"),p7o=o("imagegpt"),_7o=o(" \u2014 "),nj=a("a"),u7o=o("ImageGPTModel"),b7o=o(" (ImageGPT model)"),v7o=l(),M_=a("li"),Ude=a("strong"),F7o=o("jukebox"),T7o=o(" \u2014 "),Jde=a("code"),M7o=o("JukeboxModel"),E7o=o(" (Jukebox model)"),C7o=l(),E_=a("li"),Yde=a("strong"),w7o=o("layoutlm"),A7o=o(" \u2014 "),sj=a("a"),L7o=o("LayoutLMModel"),y7o=o(" (LayoutLM model)"),x7o=l(),C_=a("li"),Kde=a("strong"),$7o=o("layoutlmv2"),k7o=o(" \u2014 "),lj=a("a"),S7o=o("LayoutLMv2Model"),R7o=o(" (LayoutLMv2 model)"),P7o=l(),w_=a("li"),Zde=a("strong"),B7o=o("layoutlmv3"),I7o=o(" \u2014 "),ij=a("a"),N7o=o("LayoutLMv3Model"),q7o=o(" (LayoutLMv3 model)"),j7o=l(),A_=a("li"),ece=a("strong"),D7o=o("led"),G7o=o(" \u2014 "),dj=a("a"),O7o=o("LEDModel"),V7o=o(" (LED model)"),X7o=l(),L_=a("li"),oce=a("strong"),z7o=o("levit"),Q7o=o(" \u2014 "),cj=a("a"),W7o=o("LevitModel"),H7o=o(" (LeViT model)"),U7o=l(),y_=a("li"),rce=a("strong"),J7o=o("longformer"),Y7o=o(" \u2014 "),fj=a("a"),K7o=o("LongformerModel"),Z7o=o(" (Longformer model)"),e8o=l(),x_=a("li"),tce=a("strong"),o8o=o("longt5"),r8o=o(" \u2014 "),mj=a("a"),t8o=o("LongT5Model"),a8o=o(" (LongT5 model)"),n8o=l(),$_=a("li"),ace=a("strong"),s8o=o("luke"),l8o=o(" \u2014 "),gj=a("a"),i8o=o("LukeModel"),d8o=o(" (LUKE model)"),c8o=l(),k_=a("li"),nce=a("strong"),f8o=o("lxmert"),m8o=o(" \u2014 "),hj=a("a"),g8o=o("LxmertModel"),h8o=o(" (LXMERT model)"),p8o=l(),S_=a("li"),sce=a("strong"),_8o=o("m2m_100"),u8o=o(" \u2014 "),pj=a("a"),b8o=o("M2M100Model"),v8o=o(" (M2M100 model)"),F8o=l(),R_=a("li"),lce=a("strong"),T8o=o("marian"),M8o=o(" \u2014 "),_j=a("a"),E8o=o("MarianModel"),C8o=o(" (Marian model)"),w8o=l(),P_=a("li"),ice=a("strong"),A8o=o("maskformer"),L8o=o(" \u2014 "),uj=a("a"),y8o=o("MaskFormerModel"),x8o=o(" (MaskFormer model)"),$8o=l(),B_=a("li"),dce=a("strong"),k8o=o("mbart"),S8o=o(" \u2014 "),bj=a("a"),R8o=o("MBartModel"),P8o=o(" (mBART model)"),B8o=l(),I_=a("li"),cce=a("strong"),I8o=o("mctct"),N8o=o(" \u2014 "),vj=a("a"),q8o=o("MCTCTModel"),j8o=o(" (M-CTC-T model)"),D8o=l(),N_=a("li"),fce=a("strong"),G8o=o("megatron-bert"),O8o=o(" \u2014 "),Fj=a("a"),V8o=o("MegatronBertModel"),X8o=o(" (Megatron-BERT model)"),z8o=l(),q_=a("li"),mce=a("strong"),Q8o=o("mobilebert"),W8o=o(" \u2014 "),Tj=a("a"),H8o=o("MobileBertModel"),U8o=o(" (MobileBERT model)"),J8o=l(),j_=a("li"),gce=a("strong"),Y8o=o("mpnet"),K8o=o(" \u2014 "),Mj=a("a"),Z8o=o("MPNetModel"),eMo=o(" (MPNet model)"),oMo=l(),D_=a("li"),hce=a("strong"),rMo=o("mt5"),tMo=o(" \u2014 "),Ej=a("a"),aMo=o("MT5Model"),nMo=o(" (MT5 model)"),sMo=l(),G_=a("li"),pce=a("strong"),lMo=o("nezha"),iMo=o(" \u2014 "),Cj=a("a"),dMo=o("NezhaModel"),cMo=o(" (Nezha model)"),fMo=l(),O_=a("li"),_ce=a("strong"),mMo=o("nystromformer"),gMo=o(" \u2014 "),wj=a("a"),hMo=o("NystromformerModel"),pMo=o(" (Nystr\xF6mformer model)"),_Mo=l(),V_=a("li"),uce=a("strong"),uMo=o("openai-gpt"),bMo=o(" \u2014 "),Aj=a("a"),vMo=o("OpenAIGPTModel"),FMo=o(" (OpenAI GPT model)"),TMo=l(),X_=a("li"),bce=a("strong"),MMo=o("opt"),EMo=o(" \u2014 "),Lj=a("a"),CMo=o("OPTModel"),wMo=o(" (OPT model)"),AMo=l(),z_=a("li"),vce=a("strong"),LMo=o("pegasus"),yMo=o(" \u2014 "),yj=a("a"),xMo=o("PegasusModel"),$Mo=o(" (Pegasus model)"),kMo=l(),Q_=a("li"),Fce=a("strong"),SMo=o("perceiver"),RMo=o(" \u2014 "),xj=a("a"),PMo=o("PerceiverModel"),BMo=o(" (Perceiver model)"),IMo=l(),W_=a("li"),Tce=a("strong"),NMo=o("plbart"),qMo=o(" \u2014 "),$j=a("a"),jMo=o("PLBartModel"),DMo=o(" (PLBart model)"),GMo=l(),H_=a("li"),Mce=a("strong"),OMo=o("poolformer"),VMo=o(" \u2014 "),kj=a("a"),XMo=o("PoolFormerModel"),zMo=o(" (PoolFormer model)"),QMo=l(),U_=a("li"),Ece=a("strong"),WMo=o("prophetnet"),HMo=o(" \u2014 "),Sj=a("a"),UMo=o("ProphetNetModel"),JMo=o(" (ProphetNet model)"),YMo=l(),J_=a("li"),Cce=a("strong"),KMo=o("qdqbert"),ZMo=o(" \u2014 "),Rj=a("a"),eEo=o("QDQBertModel"),oEo=o(" (QDQBert model)"),rEo=l(),Y_=a("li"),wce=a("strong"),tEo=o("reformer"),aEo=o(" \u2014 "),Pj=a("a"),nEo=o("ReformerModel"),sEo=o(" (Reformer model)"),lEo=l(),K_=a("li"),Ace=a("strong"),iEo=o("regnet"),dEo=o(" \u2014 "),Bj=a("a"),cEo=o("RegNetModel"),fEo=o(" (RegNet model)"),mEo=l(),Z_=a("li"),Lce=a("strong"),gEo=o("rembert"),hEo=o(" \u2014 "),Ij=a("a"),pEo=o("RemBertModel"),_Eo=o(" (RemBERT model)"),uEo=l(),eu=a("li"),yce=a("strong"),bEo=o("resnet"),vEo=o(" \u2014 "),Nj=a("a"),FEo=o("ResNetModel"),TEo=o(" (ResNet model)"),MEo=l(),ou=a("li"),xce=a("strong"),EEo=o("retribert"),CEo=o(" \u2014 "),qj=a("a"),wEo=o("RetriBertModel"),AEo=o(" (RetriBERT model)"),LEo=l(),ru=a("li"),$ce=a("strong"),yEo=o("roberta"),xEo=o(" \u2014 "),jj=a("a"),$Eo=o("RobertaModel"),kEo=o(" (RoBERTa model)"),SEo=l(),tu=a("li"),kce=a("strong"),REo=o("roformer"),PEo=o(" \u2014 "),Dj=a("a"),BEo=o("RoFormerModel"),IEo=o(" (RoFormer model)"),NEo=l(),au=a("li"),Sce=a("strong"),qEo=o("segformer"),jEo=o(" \u2014 "),Gj=a("a"),DEo=o("SegformerModel"),GEo=o(" (SegFormer model)"),OEo=l(),nu=a("li"),Rce=a("strong"),VEo=o("sew"),XEo=o(" \u2014 "),Oj=a("a"),zEo=o("SEWModel"),QEo=o(" (SEW model)"),WEo=l(),su=a("li"),Pce=a("strong"),HEo=o("sew-d"),UEo=o(" \u2014 "),Vj=a("a"),JEo=o("SEWDModel"),YEo=o(" (SEW-D model)"),KEo=l(),lu=a("li"),Bce=a("strong"),ZEo=o("speech_to_text"),e4o=o(" \u2014 "),Xj=a("a"),o4o=o("Speech2TextModel"),r4o=o(" (Speech2Text model)"),t4o=l(),iu=a("li"),Ice=a("strong"),a4o=o("splinter"),n4o=o(" \u2014 "),zj=a("a"),s4o=o("SplinterModel"),l4o=o(" (Splinter model)"),i4o=l(),du=a("li"),Nce=a("strong"),d4o=o("squeezebert"),c4o=o(" \u2014 "),Qj=a("a"),f4o=o("SqueezeBertModel"),m4o=o(" (SqueezeBERT model)"),g4o=l(),cu=a("li"),qce=a("strong"),h4o=o("swin"),p4o=o(" \u2014 "),Wj=a("a"),_4o=o("SwinModel"),u4o=o(" (Swin Transformer model)"),b4o=l(),fu=a("li"),jce=a("strong"),v4o=o("t5"),F4o=o(" \u2014 "),Hj=a("a"),T4o=o("T5Model"),M4o=o(" (T5 model)"),E4o=l(),mu=a("li"),Dce=a("strong"),C4o=o("tapas"),w4o=o(" \u2014 "),Uj=a("a"),A4o=o("TapasModel"),L4o=o(" (TAPAS model)"),y4o=l(),gu=a("li"),Gce=a("strong"),x4o=o("trajectory_transformer"),$4o=o(" \u2014 "),Jj=a("a"),k4o=o("TrajectoryTransformerModel"),S4o=o(" (Trajectory Transformer model)"),R4o=l(),hu=a("li"),Oce=a("strong"),P4o=o("transfo-xl"),B4o=o(" \u2014 "),Yj=a("a"),I4o=o("TransfoXLModel"),N4o=o(" (Transformer-XL model)"),q4o=l(),pu=a("li"),Vce=a("strong"),j4o=o("unispeech"),D4o=o(" \u2014 "),Kj=a("a"),G4o=o("UniSpeechModel"),O4o=o(" (UniSpeech model)"),V4o=l(),_u=a("li"),Xce=a("strong"),X4o=o("unispeech-sat"),z4o=o(" \u2014 "),Zj=a("a"),Q4o=o("UniSpeechSatModel"),W4o=o(" (UniSpeechSat model)"),H4o=l(),uu=a("li"),zce=a("strong"),U4o=o("van"),J4o=o(" \u2014 "),eD=a("a"),Y4o=o("VanModel"),K4o=o(" (VAN model)"),Z4o=l(),bu=a("li"),Qce=a("strong"),eCo=o("vilt"),oCo=o(" \u2014 "),oD=a("a"),rCo=o("ViltModel"),tCo=o(" (ViLT model)"),aCo=l(),vu=a("li"),Wce=a("strong"),nCo=o("vision-text-dual-encoder"),sCo=o(" \u2014 "),rD=a("a"),lCo=o("VisionTextDualEncoderModel"),iCo=o(" (VisionTextDualEncoder model)"),dCo=l(),Fu=a("li"),Hce=a("strong"),cCo=o("visual_bert"),fCo=o(" \u2014 "),tD=a("a"),mCo=o("VisualBertModel"),gCo=o(" (VisualBERT model)"),hCo=l(),Tu=a("li"),Uce=a("strong"),pCo=o("vit"),_Co=o(" \u2014 "),aD=a("a"),uCo=o("ViTModel"),bCo=o(" (ViT model)"),vCo=l(),Mu=a("li"),Jce=a("strong"),FCo=o("vit_mae"),TCo=o(" \u2014 "),nD=a("a"),MCo=o("ViTMAEModel"),ECo=o(" (ViTMAE model)"),CCo=l(),Eu=a("li"),Yce=a("strong"),wCo=o("wav2vec2"),ACo=o(" \u2014 "),sD=a("a"),LCo=o("Wav2Vec2Model"),yCo=o(" (Wav2Vec2 model)"),xCo=l(),Cu=a("li"),Kce=a("strong"),$Co=o("wav2vec2-conformer"),kCo=o(" \u2014 "),lD=a("a"),SCo=o("Wav2Vec2ConformerModel"),RCo=o(" (Wav2Vec2-Conformer model)"),PCo=l(),wu=a("li"),Zce=a("strong"),BCo=o("wavlm"),ICo=o(" \u2014 "),iD=a("a"),NCo=o("WavLMModel"),qCo=o(" (WavLM model)"),jCo=l(),Au=a("li"),efe=a("strong"),DCo=o("xglm"),GCo=o(" \u2014 "),dD=a("a"),OCo=o("XGLMModel"),VCo=o(" (XGLM model)"),XCo=l(),Lu=a("li"),ofe=a("strong"),zCo=o("xlm"),QCo=o(" \u2014 "),cD=a("a"),WCo=o("XLMModel"),HCo=o(" (XLM model)"),UCo=l(),yu=a("li"),rfe=a("strong"),JCo=o("xlm-prophetnet"),YCo=o(" \u2014 "),fD=a("a"),KCo=o("XLMProphetNetModel"),ZCo=o(" (XLM-ProphetNet model)"),e5o=l(),xu=a("li"),tfe=a("strong"),o5o=o("xlm-roberta"),r5o=o(" \u2014 "),mD=a("a"),t5o=o("XLMRobertaModel"),a5o=o(" (XLM-RoBERTa model)"),n5o=l(),$u=a("li"),afe=a("strong"),s5o=o("xlm-roberta-xl"),l5o=o(" \u2014 "),gD=a("a"),i5o=o("XLMRobertaXLModel"),d5o=o(" (XLM-RoBERTa-XL model)"),c5o=l(),ku=a("li"),nfe=a("strong"),f5o=o("xlnet"),m5o=o(" \u2014 "),hD=a("a"),g5o=o("XLNetModel"),h5o=o(" (XLNet model)"),p5o=l(),Su=a("li"),sfe=a("strong"),_5o=o("yolos"),u5o=o(" \u2014 "),pD=a("a"),b5o=o("YolosModel"),v5o=o(" (YOLOS model)"),F5o=l(),Ru=a("li"),lfe=a("strong"),T5o=o("yoso"),M5o=o(" \u2014 "),_D=a("a"),E5o=o("YosoModel"),C5o=o(" (YOSO model)"),w5o=l(),Pu=a("p"),A5o=o("The model is set in evaluation mode by default using "),ife=a("code"),L5o=o("model.eval()"),y5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=a("code"),x5o=o("model.train()"),$5o=l(),F(Bu.$$.fragment),xOe=l(),ji=a("h2"),Iu=a("a"),cfe=a("span"),F(gL.$$.fragment),k5o=l(),ffe=a("span"),S5o=o("AutoModelForPreTraining"),$Oe=l(),$o=a("div"),F(hL.$$.fragment),R5o=l(),Di=a("p"),P5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uD=a("a"),B5o=o("from_pretrained()"),I5o=o(" class method or the "),bD=a("a"),N5o=o("from_config()"),q5o=o(` class
method.`),j5o=l(),pL=a("p"),D5o=o("This class cannot be instantiated directly using "),mfe=a("code"),G5o=o("__init__()"),O5o=o(" (throws an error)."),V5o=l(),st=a("div"),F(_L.$$.fragment),X5o=l(),gfe=a("p"),z5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q5o=l(),Gi=a("p"),W5o=o(`Note:
Loading a model from its configuration file does `),hfe=a("strong"),H5o=o("not"),U5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=a("a"),J5o=o("from_pretrained()"),Y5o=o(" to load the model weights."),K5o=l(),F(Nu.$$.fragment),Z5o=l(),Ye=a("div"),F(uL.$$.fragment),e3o=l(),pfe=a("p"),o3o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),r3o=l(),Pa=a("p"),t3o=o("The model class to instantiate is selected based on the "),_fe=a("code"),a3o=o("model_type"),n3o=o(` property of the config object (either
passed as an argument or loaded from `),ufe=a("code"),s3o=o("pretrained_model_name_or_path"),l3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=a("code"),i3o=o("pretrained_model_name_or_path"),d3o=o(":"),c3o=l(),G=a("ul"),qu=a("li"),vfe=a("strong"),f3o=o("albert"),m3o=o(" \u2014 "),FD=a("a"),g3o=o("AlbertForPreTraining"),h3o=o(" (ALBERT model)"),p3o=l(),ju=a("li"),Ffe=a("strong"),_3o=o("bart"),u3o=o(" \u2014 "),TD=a("a"),b3o=o("BartForConditionalGeneration"),v3o=o(" (BART model)"),F3o=l(),Du=a("li"),Tfe=a("strong"),T3o=o("bert"),M3o=o(" \u2014 "),MD=a("a"),E3o=o("BertForPreTraining"),C3o=o(" (BERT model)"),w3o=l(),Gu=a("li"),Mfe=a("strong"),A3o=o("big_bird"),L3o=o(" \u2014 "),ED=a("a"),y3o=o("BigBirdForPreTraining"),x3o=o(" (BigBird model)"),$3o=l(),Ou=a("li"),Efe=a("strong"),k3o=o("bloom"),S3o=o(" \u2014 "),CD=a("a"),R3o=o("BloomForCausalLM"),P3o=o(" (BLOOM model)"),B3o=l(),Vu=a("li"),Cfe=a("strong"),I3o=o("camembert"),N3o=o(" \u2014 "),wD=a("a"),q3o=o("CamembertForMaskedLM"),j3o=o(" (CamemBERT model)"),D3o=l(),Xu=a("li"),wfe=a("strong"),G3o=o("ctrl"),O3o=o(" \u2014 "),AD=a("a"),V3o=o("CTRLLMHeadModel"),X3o=o(" (CTRL model)"),z3o=l(),zu=a("li"),Afe=a("strong"),Q3o=o("data2vec-text"),W3o=o(" \u2014 "),LD=a("a"),H3o=o("Data2VecTextForMaskedLM"),U3o=o(" (Data2VecText model)"),J3o=l(),Qu=a("li"),Lfe=a("strong"),Y3o=o("deberta"),K3o=o(" \u2014 "),yD=a("a"),Z3o=o("DebertaForMaskedLM"),e0o=o(" (DeBERTa model)"),o0o=l(),Wu=a("li"),yfe=a("strong"),r0o=o("deberta-v2"),t0o=o(" \u2014 "),xD=a("a"),a0o=o("DebertaV2ForMaskedLM"),n0o=o(" (DeBERTa-v2 model)"),s0o=l(),Hu=a("li"),xfe=a("strong"),l0o=o("distilbert"),i0o=o(" \u2014 "),$D=a("a"),d0o=o("DistilBertForMaskedLM"),c0o=o(" (DistilBERT model)"),f0o=l(),Uu=a("li"),$fe=a("strong"),m0o=o("electra"),g0o=o(" \u2014 "),kD=a("a"),h0o=o("ElectraForPreTraining"),p0o=o(" (ELECTRA model)"),_0o=l(),Ju=a("li"),kfe=a("strong"),u0o=o("flaubert"),b0o=o(" \u2014 "),SD=a("a"),v0o=o("FlaubertWithLMHeadModel"),F0o=o(" (FlauBERT model)"),T0o=l(),Yu=a("li"),Sfe=a("strong"),M0o=o("flava"),E0o=o(" \u2014 "),RD=a("a"),C0o=o("FlavaForPreTraining"),w0o=o(" (FLAVA model)"),A0o=l(),Ku=a("li"),Rfe=a("strong"),L0o=o("fnet"),y0o=o(" \u2014 "),PD=a("a"),x0o=o("FNetForPreTraining"),$0o=o(" (FNet model)"),k0o=l(),Zu=a("li"),Pfe=a("strong"),S0o=o("fsmt"),R0o=o(" \u2014 "),BD=a("a"),P0o=o("FSMTForConditionalGeneration"),B0o=o(" (FairSeq Machine-Translation model)"),I0o=l(),e2=a("li"),Bfe=a("strong"),N0o=o("funnel"),q0o=o(" \u2014 "),ID=a("a"),j0o=o("FunnelForPreTraining"),D0o=o(" (Funnel Transformer model)"),G0o=l(),o2=a("li"),Ife=a("strong"),O0o=o("gpt2"),V0o=o(" \u2014 "),ND=a("a"),X0o=o("GPT2LMHeadModel"),z0o=o(" (OpenAI GPT-2 model)"),Q0o=l(),r2=a("li"),Nfe=a("strong"),W0o=o("ibert"),H0o=o(" \u2014 "),qD=a("a"),U0o=o("IBertForMaskedLM"),J0o=o(" (I-BERT model)"),Y0o=l(),t2=a("li"),qfe=a("strong"),K0o=o("layoutlm"),Z0o=o(" \u2014 "),jD=a("a"),ewo=o("LayoutLMForMaskedLM"),owo=o(" (LayoutLM model)"),rwo=l(),a2=a("li"),jfe=a("strong"),two=o("longformer"),awo=o(" \u2014 "),DD=a("a"),nwo=o("LongformerForMaskedLM"),swo=o(" (Longformer model)"),lwo=l(),n2=a("li"),Dfe=a("strong"),iwo=o("lxmert"),dwo=o(" \u2014 "),GD=a("a"),cwo=o("LxmertForPreTraining"),fwo=o(" (LXMERT model)"),mwo=l(),s2=a("li"),Gfe=a("strong"),gwo=o("megatron-bert"),hwo=o(" \u2014 "),OD=a("a"),pwo=o("MegatronBertForPreTraining"),_wo=o(" (Megatron-BERT model)"),uwo=l(),l2=a("li"),Ofe=a("strong"),bwo=o("mobilebert"),vwo=o(" \u2014 "),VD=a("a"),Fwo=o("MobileBertForPreTraining"),Two=o(" (MobileBERT model)"),Mwo=l(),i2=a("li"),Vfe=a("strong"),Ewo=o("mpnet"),Cwo=o(" \u2014 "),XD=a("a"),wwo=o("MPNetForMaskedLM"),Awo=o(" (MPNet model)"),Lwo=l(),d2=a("li"),Xfe=a("strong"),ywo=o("nezha"),xwo=o(" \u2014 "),zD=a("a"),$wo=o("NezhaForPreTraining"),kwo=o(" (Nezha model)"),Swo=l(),c2=a("li"),zfe=a("strong"),Rwo=o("openai-gpt"),Pwo=o(" \u2014 "),QD=a("a"),Bwo=o("OpenAIGPTLMHeadModel"),Iwo=o(" (OpenAI GPT model)"),Nwo=l(),f2=a("li"),Qfe=a("strong"),qwo=o("retribert"),jwo=o(" \u2014 "),WD=a("a"),Dwo=o("RetriBertModel"),Gwo=o(" (RetriBERT model)"),Owo=l(),m2=a("li"),Wfe=a("strong"),Vwo=o("roberta"),Xwo=o(" \u2014 "),HD=a("a"),zwo=o("RobertaForMaskedLM"),Qwo=o(" (RoBERTa model)"),Wwo=l(),g2=a("li"),Hfe=a("strong"),Hwo=o("splinter"),Uwo=o(" \u2014 "),UD=a("a"),Jwo=o("SplinterForPreTraining"),Ywo=o(" (Splinter model)"),Kwo=l(),h2=a("li"),Ufe=a("strong"),Zwo=o("squeezebert"),eAo=o(" \u2014 "),JD=a("a"),oAo=o("SqueezeBertForMaskedLM"),rAo=o(" (SqueezeBERT model)"),tAo=l(),p2=a("li"),Jfe=a("strong"),aAo=o("t5"),nAo=o(" \u2014 "),YD=a("a"),sAo=o("T5ForConditionalGeneration"),lAo=o(" (T5 model)"),iAo=l(),_2=a("li"),Yfe=a("strong"),dAo=o("tapas"),cAo=o(" \u2014 "),KD=a("a"),fAo=o("TapasForMaskedLM"),mAo=o(" (TAPAS model)"),gAo=l(),u2=a("li"),Kfe=a("strong"),hAo=o("transfo-xl"),pAo=o(" \u2014 "),ZD=a("a"),_Ao=o("TransfoXLLMHeadModel"),uAo=o(" (Transformer-XL model)"),bAo=l(),b2=a("li"),Zfe=a("strong"),vAo=o("unispeech"),FAo=o(" \u2014 "),eG=a("a"),TAo=o("UniSpeechForPreTraining"),MAo=o(" (UniSpeech model)"),EAo=l(),v2=a("li"),eme=a("strong"),CAo=o("unispeech-sat"),wAo=o(" \u2014 "),oG=a("a"),AAo=o("UniSpeechSatForPreTraining"),LAo=o(" (UniSpeechSat model)"),yAo=l(),F2=a("li"),ome=a("strong"),xAo=o("visual_bert"),$Ao=o(" \u2014 "),rG=a("a"),kAo=o("VisualBertForPreTraining"),SAo=o(" (VisualBERT model)"),RAo=l(),T2=a("li"),rme=a("strong"),PAo=o("vit_mae"),BAo=o(" \u2014 "),tG=a("a"),IAo=o("ViTMAEForPreTraining"),NAo=o(" (ViTMAE model)"),qAo=l(),M2=a("li"),tme=a("strong"),jAo=o("wav2vec2"),DAo=o(" \u2014 "),aG=a("a"),GAo=o("Wav2Vec2ForPreTraining"),OAo=o(" (Wav2Vec2 model)"),VAo=l(),E2=a("li"),ame=a("strong"),XAo=o("wav2vec2-conformer"),zAo=o(" \u2014 "),nG=a("a"),QAo=o("Wav2Vec2ConformerForPreTraining"),WAo=o(" (Wav2Vec2-Conformer model)"),HAo=l(),C2=a("li"),nme=a("strong"),UAo=o("xlm"),JAo=o(" \u2014 "),sG=a("a"),YAo=o("XLMWithLMHeadModel"),KAo=o(" (XLM model)"),ZAo=l(),w2=a("li"),sme=a("strong"),eLo=o("xlm-roberta"),oLo=o(" \u2014 "),lG=a("a"),rLo=o("XLMRobertaForMaskedLM"),tLo=o(" (XLM-RoBERTa model)"),aLo=l(),A2=a("li"),lme=a("strong"),nLo=o("xlm-roberta-xl"),sLo=o(" \u2014 "),iG=a("a"),lLo=o("XLMRobertaXLForMaskedLM"),iLo=o(" (XLM-RoBERTa-XL model)"),dLo=l(),L2=a("li"),ime=a("strong"),cLo=o("xlnet"),fLo=o(" \u2014 "),dG=a("a"),mLo=o("XLNetLMHeadModel"),gLo=o(" (XLNet model)"),hLo=l(),y2=a("p"),pLo=o("The model is set in evaluation mode by default using "),dme=a("code"),_Lo=o("model.eval()"),uLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cme=a("code"),bLo=o("model.train()"),vLo=l(),F(x2.$$.fragment),kOe=l(),Oi=a("h2"),$2=a("a"),fme=a("span"),F(bL.$$.fragment),FLo=l(),mme=a("span"),TLo=o("AutoModelForCausalLM"),SOe=l(),ko=a("div"),F(vL.$$.fragment),MLo=l(),Vi=a("p"),ELo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),cG=a("a"),CLo=o("from_pretrained()"),wLo=o(" class method or the "),fG=a("a"),ALo=o("from_config()"),LLo=o(` class
method.`),yLo=l(),FL=a("p"),xLo=o("This class cannot be instantiated directly using "),gme=a("code"),$Lo=o("__init__()"),kLo=o(" (throws an error)."),SLo=l(),lt=a("div"),F(TL.$$.fragment),RLo=l(),hme=a("p"),PLo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),BLo=l(),Xi=a("p"),ILo=o(`Note:
Loading a model from its configuration file does `),pme=a("strong"),NLo=o("not"),qLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=a("a"),jLo=o("from_pretrained()"),DLo=o(" to load the model weights."),GLo=l(),F(k2.$$.fragment),OLo=l(),Ke=a("div"),F(ML.$$.fragment),VLo=l(),_me=a("p"),XLo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zLo=l(),Ba=a("p"),QLo=o("The model class to instantiate is selected based on the "),ume=a("code"),WLo=o("model_type"),HLo=o(` property of the config object (either
passed as an argument or loaded from `),bme=a("code"),ULo=o("pretrained_model_name_or_path"),JLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vme=a("code"),YLo=o("pretrained_model_name_or_path"),KLo=o(":"),ZLo=l(),z=a("ul"),S2=a("li"),Fme=a("strong"),eyo=o("bart"),oyo=o(" \u2014 "),gG=a("a"),ryo=o("BartForCausalLM"),tyo=o(" (BART model)"),ayo=l(),R2=a("li"),Tme=a("strong"),nyo=o("bert"),syo=o(" \u2014 "),hG=a("a"),lyo=o("BertLMHeadModel"),iyo=o(" (BERT model)"),dyo=l(),P2=a("li"),Mme=a("strong"),cyo=o("bert-generation"),fyo=o(" \u2014 "),pG=a("a"),myo=o("BertGenerationDecoder"),gyo=o(" (Bert Generation model)"),hyo=l(),B2=a("li"),Eme=a("strong"),pyo=o("big_bird"),_yo=o(" \u2014 "),_G=a("a"),uyo=o("BigBirdForCausalLM"),byo=o(" (BigBird model)"),vyo=l(),I2=a("li"),Cme=a("strong"),Fyo=o("bigbird_pegasus"),Tyo=o(" \u2014 "),uG=a("a"),Myo=o("BigBirdPegasusForCausalLM"),Eyo=o(" (BigBird-Pegasus model)"),Cyo=l(),N2=a("li"),wme=a("strong"),wyo=o("blenderbot"),Ayo=o(" \u2014 "),bG=a("a"),Lyo=o("BlenderbotForCausalLM"),yyo=o(" (Blenderbot model)"),xyo=l(),q2=a("li"),Ame=a("strong"),$yo=o("blenderbot-small"),kyo=o(" \u2014 "),vG=a("a"),Syo=o("BlenderbotSmallForCausalLM"),Ryo=o(" (BlenderbotSmall model)"),Pyo=l(),j2=a("li"),Lme=a("strong"),Byo=o("bloom"),Iyo=o(" \u2014 "),FG=a("a"),Nyo=o("BloomForCausalLM"),qyo=o(" (BLOOM model)"),jyo=l(),D2=a("li"),yme=a("strong"),Dyo=o("camembert"),Gyo=o(" \u2014 "),TG=a("a"),Oyo=o("CamembertForCausalLM"),Vyo=o(" (CamemBERT model)"),Xyo=l(),G2=a("li"),xme=a("strong"),zyo=o("codegen"),Qyo=o(" \u2014 "),MG=a("a"),Wyo=o("CodeGenForCausalLM"),Hyo=o(" (CodeGen model)"),Uyo=l(),O2=a("li"),$me=a("strong"),Jyo=o("ctrl"),Yyo=o(" \u2014 "),EG=a("a"),Kyo=o("CTRLLMHeadModel"),Zyo=o(" (CTRL model)"),e9o=l(),V2=a("li"),kme=a("strong"),o9o=o("data2vec-text"),r9o=o(" \u2014 "),CG=a("a"),t9o=o("Data2VecTextForCausalLM"),a9o=o(" (Data2VecText model)"),n9o=l(),X2=a("li"),Sme=a("strong"),s9o=o("electra"),l9o=o(" \u2014 "),wG=a("a"),i9o=o("ElectraForCausalLM"),d9o=o(" (ELECTRA model)"),c9o=l(),z2=a("li"),Rme=a("strong"),f9o=o("gpt2"),m9o=o(" \u2014 "),AG=a("a"),g9o=o("GPT2LMHeadModel"),h9o=o(" (OpenAI GPT-2 model)"),p9o=l(),Q2=a("li"),Pme=a("strong"),_9o=o("gpt_neo"),u9o=o(" \u2014 "),LG=a("a"),b9o=o("GPTNeoForCausalLM"),v9o=o(" (GPT Neo model)"),F9o=l(),W2=a("li"),Bme=a("strong"),T9o=o("gpt_neox"),M9o=o(" \u2014 "),yG=a("a"),E9o=o("GPTNeoXForCausalLM"),C9o=o(" (GPT NeoX model)"),w9o=l(),H2=a("li"),Ime=a("strong"),A9o=o("gptj"),L9o=o(" \u2014 "),xG=a("a"),y9o=o("GPTJForCausalLM"),x9o=o(" (GPT-J model)"),$9o=l(),U2=a("li"),Nme=a("strong"),k9o=o("marian"),S9o=o(" \u2014 "),$G=a("a"),R9o=o("MarianForCausalLM"),P9o=o(" (Marian model)"),B9o=l(),J2=a("li"),qme=a("strong"),I9o=o("mbart"),N9o=o(" \u2014 "),kG=a("a"),q9o=o("MBartForCausalLM"),j9o=o(" (mBART model)"),D9o=l(),Y2=a("li"),jme=a("strong"),G9o=o("megatron-bert"),O9o=o(" \u2014 "),SG=a("a"),V9o=o("MegatronBertForCausalLM"),X9o=o(" (Megatron-BERT model)"),z9o=l(),K2=a("li"),Dme=a("strong"),Q9o=o("openai-gpt"),W9o=o(" \u2014 "),RG=a("a"),H9o=o("OpenAIGPTLMHeadModel"),U9o=o(" (OpenAI GPT model)"),J9o=l(),Z2=a("li"),Gme=a("strong"),Y9o=o("opt"),K9o=o(" \u2014 "),PG=a("a"),Z9o=o("OPTForCausalLM"),exo=o(" (OPT model)"),oxo=l(),e1=a("li"),Ome=a("strong"),rxo=o("pegasus"),txo=o(" \u2014 "),BG=a("a"),axo=o("PegasusForCausalLM"),nxo=o(" (Pegasus model)"),sxo=l(),o1=a("li"),Vme=a("strong"),lxo=o("plbart"),ixo=o(" \u2014 "),IG=a("a"),dxo=o("PLBartForCausalLM"),cxo=o(" (PLBart model)"),fxo=l(),r1=a("li"),Xme=a("strong"),mxo=o("prophetnet"),gxo=o(" \u2014 "),NG=a("a"),hxo=o("ProphetNetForCausalLM"),pxo=o(" (ProphetNet model)"),_xo=l(),t1=a("li"),zme=a("strong"),uxo=o("qdqbert"),bxo=o(" \u2014 "),qG=a("a"),vxo=o("QDQBertLMHeadModel"),Fxo=o(" (QDQBert model)"),Txo=l(),a1=a("li"),Qme=a("strong"),Mxo=o("reformer"),Exo=o(" \u2014 "),jG=a("a"),Cxo=o("ReformerModelWithLMHead"),wxo=o(" (Reformer model)"),Axo=l(),n1=a("li"),Wme=a("strong"),Lxo=o("rembert"),yxo=o(" \u2014 "),DG=a("a"),xxo=o("RemBertForCausalLM"),$xo=o(" (RemBERT model)"),kxo=l(),s1=a("li"),Hme=a("strong"),Sxo=o("roberta"),Rxo=o(" \u2014 "),GG=a("a"),Pxo=o("RobertaForCausalLM"),Bxo=o(" (RoBERTa model)"),Ixo=l(),l1=a("li"),Ume=a("strong"),Nxo=o("roformer"),qxo=o(" \u2014 "),OG=a("a"),jxo=o("RoFormerForCausalLM"),Dxo=o(" (RoFormer model)"),Gxo=l(),i1=a("li"),Jme=a("strong"),Oxo=o("speech_to_text_2"),Vxo=o(" \u2014 "),VG=a("a"),Xxo=o("Speech2Text2ForCausalLM"),zxo=o(" (Speech2Text2 model)"),Qxo=l(),d1=a("li"),Yme=a("strong"),Wxo=o("transfo-xl"),Hxo=o(" \u2014 "),XG=a("a"),Uxo=o("TransfoXLLMHeadModel"),Jxo=o(" (Transformer-XL model)"),Yxo=l(),c1=a("li"),Kme=a("strong"),Kxo=o("trocr"),Zxo=o(" \u2014 "),zG=a("a"),e$o=o("TrOCRForCausalLM"),o$o=o(" (TrOCR model)"),r$o=l(),f1=a("li"),Zme=a("strong"),t$o=o("xglm"),a$o=o(" \u2014 "),QG=a("a"),n$o=o("XGLMForCausalLM"),s$o=o(" (XGLM model)"),l$o=l(),m1=a("li"),ege=a("strong"),i$o=o("xlm"),d$o=o(" \u2014 "),WG=a("a"),c$o=o("XLMWithLMHeadModel"),f$o=o(" (XLM model)"),m$o=l(),g1=a("li"),oge=a("strong"),g$o=o("xlm-prophetnet"),h$o=o(" \u2014 "),HG=a("a"),p$o=o("XLMProphetNetForCausalLM"),_$o=o(" (XLM-ProphetNet model)"),u$o=l(),h1=a("li"),rge=a("strong"),b$o=o("xlm-roberta"),v$o=o(" \u2014 "),UG=a("a"),F$o=o("XLMRobertaForCausalLM"),T$o=o(" (XLM-RoBERTa model)"),M$o=l(),p1=a("li"),tge=a("strong"),E$o=o("xlm-roberta-xl"),C$o=o(" \u2014 "),JG=a("a"),w$o=o("XLMRobertaXLForCausalLM"),A$o=o(" (XLM-RoBERTa-XL model)"),L$o=l(),_1=a("li"),age=a("strong"),y$o=o("xlnet"),x$o=o(" \u2014 "),YG=a("a"),$$o=o("XLNetLMHeadModel"),k$o=o(" (XLNet model)"),S$o=l(),u1=a("p"),R$o=o("The model is set in evaluation mode by default using "),nge=a("code"),P$o=o("model.eval()"),B$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=a("code"),I$o=o("model.train()"),N$o=l(),F(b1.$$.fragment),ROe=l(),zi=a("h2"),v1=a("a"),lge=a("span"),F(EL.$$.fragment),q$o=l(),ige=a("span"),j$o=o("AutoModelForMaskedLM"),POe=l(),So=a("div"),F(CL.$$.fragment),D$o=l(),Qi=a("p"),G$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KG=a("a"),O$o=o("from_pretrained()"),V$o=o(" class method or the "),ZG=a("a"),X$o=o("from_config()"),z$o=o(` class
method.`),Q$o=l(),wL=a("p"),W$o=o("This class cannot be instantiated directly using "),dge=a("code"),H$o=o("__init__()"),U$o=o(" (throws an error)."),J$o=l(),it=a("div"),F(AL.$$.fragment),Y$o=l(),cge=a("p"),K$o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z$o=l(),Wi=a("p"),eko=o(`Note:
Loading a model from its configuration file does `),fge=a("strong"),oko=o("not"),rko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),tko=o("from_pretrained()"),ako=o(" to load the model weights."),nko=l(),F(F1.$$.fragment),sko=l(),Ze=a("div"),F(LL.$$.fragment),lko=l(),mge=a("p"),iko=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dko=l(),Ia=a("p"),cko=o("The model class to instantiate is selected based on the "),gge=a("code"),fko=o("model_type"),mko=o(` property of the config object (either
passed as an argument or loaded from `),hge=a("code"),gko=o("pretrained_model_name_or_path"),hko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=a("code"),pko=o("pretrained_model_name_or_path"),_ko=o(":"),uko=l(),W=a("ul"),T1=a("li"),_ge=a("strong"),bko=o("albert"),vko=o(" \u2014 "),oO=a("a"),Fko=o("AlbertForMaskedLM"),Tko=o(" (ALBERT model)"),Mko=l(),M1=a("li"),uge=a("strong"),Eko=o("bart"),Cko=o(" \u2014 "),rO=a("a"),wko=o("BartForConditionalGeneration"),Ako=o(" (BART model)"),Lko=l(),E1=a("li"),bge=a("strong"),yko=o("bert"),xko=o(" \u2014 "),tO=a("a"),$ko=o("BertForMaskedLM"),kko=o(" (BERT model)"),Sko=l(),C1=a("li"),vge=a("strong"),Rko=o("big_bird"),Pko=o(" \u2014 "),aO=a("a"),Bko=o("BigBirdForMaskedLM"),Iko=o(" (BigBird model)"),Nko=l(),w1=a("li"),Fge=a("strong"),qko=o("camembert"),jko=o(" \u2014 "),nO=a("a"),Dko=o("CamembertForMaskedLM"),Gko=o(" (CamemBERT model)"),Oko=l(),A1=a("li"),Tge=a("strong"),Vko=o("convbert"),Xko=o(" \u2014 "),sO=a("a"),zko=o("ConvBertForMaskedLM"),Qko=o(" (ConvBERT model)"),Wko=l(),L1=a("li"),Mge=a("strong"),Hko=o("data2vec-text"),Uko=o(" \u2014 "),lO=a("a"),Jko=o("Data2VecTextForMaskedLM"),Yko=o(" (Data2VecText model)"),Kko=l(),y1=a("li"),Ege=a("strong"),Zko=o("deberta"),eSo=o(" \u2014 "),iO=a("a"),oSo=o("DebertaForMaskedLM"),rSo=o(" (DeBERTa model)"),tSo=l(),x1=a("li"),Cge=a("strong"),aSo=o("deberta-v2"),nSo=o(" \u2014 "),dO=a("a"),sSo=o("DebertaV2ForMaskedLM"),lSo=o(" (DeBERTa-v2 model)"),iSo=l(),$1=a("li"),wge=a("strong"),dSo=o("distilbert"),cSo=o(" \u2014 "),cO=a("a"),fSo=o("DistilBertForMaskedLM"),mSo=o(" (DistilBERT model)"),gSo=l(),k1=a("li"),Age=a("strong"),hSo=o("electra"),pSo=o(" \u2014 "),fO=a("a"),_So=o("ElectraForMaskedLM"),uSo=o(" (ELECTRA model)"),bSo=l(),S1=a("li"),Lge=a("strong"),vSo=o("flaubert"),FSo=o(" \u2014 "),mO=a("a"),TSo=o("FlaubertWithLMHeadModel"),MSo=o(" (FlauBERT model)"),ESo=l(),R1=a("li"),yge=a("strong"),CSo=o("fnet"),wSo=o(" \u2014 "),gO=a("a"),ASo=o("FNetForMaskedLM"),LSo=o(" (FNet model)"),ySo=l(),P1=a("li"),xge=a("strong"),xSo=o("funnel"),$So=o(" \u2014 "),hO=a("a"),kSo=o("FunnelForMaskedLM"),SSo=o(" (Funnel Transformer model)"),RSo=l(),B1=a("li"),$ge=a("strong"),PSo=o("ibert"),BSo=o(" \u2014 "),pO=a("a"),ISo=o("IBertForMaskedLM"),NSo=o(" (I-BERT model)"),qSo=l(),I1=a("li"),kge=a("strong"),jSo=o("layoutlm"),DSo=o(" \u2014 "),_O=a("a"),GSo=o("LayoutLMForMaskedLM"),OSo=o(" (LayoutLM model)"),VSo=l(),N1=a("li"),Sge=a("strong"),XSo=o("longformer"),zSo=o(" \u2014 "),uO=a("a"),QSo=o("LongformerForMaskedLM"),WSo=o(" (Longformer model)"),HSo=l(),q1=a("li"),Rge=a("strong"),USo=o("luke"),JSo=o(" \u2014 "),bO=a("a"),YSo=o("LukeForMaskedLM"),KSo=o(" (LUKE model)"),ZSo=l(),j1=a("li"),Pge=a("strong"),eRo=o("mbart"),oRo=o(" \u2014 "),vO=a("a"),rRo=o("MBartForConditionalGeneration"),tRo=o(" (mBART model)"),aRo=l(),D1=a("li"),Bge=a("strong"),nRo=o("megatron-bert"),sRo=o(" \u2014 "),FO=a("a"),lRo=o("MegatronBertForMaskedLM"),iRo=o(" (Megatron-BERT model)"),dRo=l(),G1=a("li"),Ige=a("strong"),cRo=o("mobilebert"),fRo=o(" \u2014 "),TO=a("a"),mRo=o("MobileBertForMaskedLM"),gRo=o(" (MobileBERT model)"),hRo=l(),O1=a("li"),Nge=a("strong"),pRo=o("mpnet"),_Ro=o(" \u2014 "),MO=a("a"),uRo=o("MPNetForMaskedLM"),bRo=o(" (MPNet model)"),vRo=l(),V1=a("li"),qge=a("strong"),FRo=o("nezha"),TRo=o(" \u2014 "),EO=a("a"),MRo=o("NezhaForMaskedLM"),ERo=o(" (Nezha model)"),CRo=l(),X1=a("li"),jge=a("strong"),wRo=o("nystromformer"),ARo=o(" \u2014 "),CO=a("a"),LRo=o("NystromformerForMaskedLM"),yRo=o(" (Nystr\xF6mformer model)"),xRo=l(),z1=a("li"),Dge=a("strong"),$Ro=o("perceiver"),kRo=o(" \u2014 "),wO=a("a"),SRo=o("PerceiverForMaskedLM"),RRo=o(" (Perceiver model)"),PRo=l(),Q1=a("li"),Gge=a("strong"),BRo=o("qdqbert"),IRo=o(" \u2014 "),AO=a("a"),NRo=o("QDQBertForMaskedLM"),qRo=o(" (QDQBert model)"),jRo=l(),W1=a("li"),Oge=a("strong"),DRo=o("reformer"),GRo=o(" \u2014 "),LO=a("a"),ORo=o("ReformerForMaskedLM"),VRo=o(" (Reformer model)"),XRo=l(),H1=a("li"),Vge=a("strong"),zRo=o("rembert"),QRo=o(" \u2014 "),yO=a("a"),WRo=o("RemBertForMaskedLM"),HRo=o(" (RemBERT model)"),URo=l(),U1=a("li"),Xge=a("strong"),JRo=o("roberta"),YRo=o(" \u2014 "),xO=a("a"),KRo=o("RobertaForMaskedLM"),ZRo=o(" (RoBERTa model)"),ePo=l(),J1=a("li"),zge=a("strong"),oPo=o("roformer"),rPo=o(" \u2014 "),$O=a("a"),tPo=o("RoFormerForMaskedLM"),aPo=o(" (RoFormer model)"),nPo=l(),Y1=a("li"),Qge=a("strong"),sPo=o("squeezebert"),lPo=o(" \u2014 "),kO=a("a"),iPo=o("SqueezeBertForMaskedLM"),dPo=o(" (SqueezeBERT model)"),cPo=l(),K1=a("li"),Wge=a("strong"),fPo=o("tapas"),mPo=o(" \u2014 "),SO=a("a"),gPo=o("TapasForMaskedLM"),hPo=o(" (TAPAS model)"),pPo=l(),Z1=a("li"),Hge=a("strong"),_Po=o("wav2vec2"),uPo=o(" \u2014 "),Uge=a("code"),bPo=o("Wav2Vec2ForMaskedLM"),vPo=o(" (Wav2Vec2 model)"),FPo=l(),eb=a("li"),Jge=a("strong"),TPo=o("xlm"),MPo=o(" \u2014 "),RO=a("a"),EPo=o("XLMWithLMHeadModel"),CPo=o(" (XLM model)"),wPo=l(),ob=a("li"),Yge=a("strong"),APo=o("xlm-roberta"),LPo=o(" \u2014 "),PO=a("a"),yPo=o("XLMRobertaForMaskedLM"),xPo=o(" (XLM-RoBERTa model)"),$Po=l(),rb=a("li"),Kge=a("strong"),kPo=o("xlm-roberta-xl"),SPo=o(" \u2014 "),BO=a("a"),RPo=o("XLMRobertaXLForMaskedLM"),PPo=o(" (XLM-RoBERTa-XL model)"),BPo=l(),tb=a("li"),Zge=a("strong"),IPo=o("yoso"),NPo=o(" \u2014 "),IO=a("a"),qPo=o("YosoForMaskedLM"),jPo=o(" (YOSO model)"),DPo=l(),ab=a("p"),GPo=o("The model is set in evaluation mode by default using "),ehe=a("code"),OPo=o("model.eval()"),VPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=a("code"),XPo=o("model.train()"),zPo=l(),F(nb.$$.fragment),BOe=l(),Hi=a("h2"),sb=a("a"),rhe=a("span"),F(yL.$$.fragment),QPo=l(),the=a("span"),WPo=o("AutoModelForSeq2SeqLM"),IOe=l(),Ro=a("div"),F(xL.$$.fragment),HPo=l(),Ui=a("p"),UPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NO=a("a"),JPo=o("from_pretrained()"),YPo=o(" class method or the "),qO=a("a"),KPo=o("from_config()"),ZPo=o(` class
method.`),eBo=l(),$L=a("p"),oBo=o("This class cannot be instantiated directly using "),ahe=a("code"),rBo=o("__init__()"),tBo=o(" (throws an error)."),aBo=l(),dt=a("div"),F(kL.$$.fragment),nBo=l(),nhe=a("p"),sBo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lBo=l(),Ji=a("p"),iBo=o(`Note:
Loading a model from its configuration file does `),she=a("strong"),dBo=o("not"),cBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jO=a("a"),fBo=o("from_pretrained()"),mBo=o(" to load the model weights."),gBo=l(),F(lb.$$.fragment),hBo=l(),eo=a("div"),F(SL.$$.fragment),pBo=l(),lhe=a("p"),_Bo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uBo=l(),Na=a("p"),bBo=o("The model class to instantiate is selected based on the "),ihe=a("code"),vBo=o("model_type"),FBo=o(` property of the config object (either
passed as an argument or loaded from `),dhe=a("code"),TBo=o("pretrained_model_name_or_path"),MBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),EBo=o("pretrained_model_name_or_path"),CBo=o(":"),wBo=l(),pe=a("ul"),ib=a("li"),fhe=a("strong"),ABo=o("bart"),LBo=o(" \u2014 "),DO=a("a"),yBo=o("BartForConditionalGeneration"),xBo=o(" (BART model)"),$Bo=l(),db=a("li"),mhe=a("strong"),kBo=o("bigbird_pegasus"),SBo=o(" \u2014 "),GO=a("a"),RBo=o("BigBirdPegasusForConditionalGeneration"),PBo=o(" (BigBird-Pegasus model)"),BBo=l(),cb=a("li"),ghe=a("strong"),IBo=o("blenderbot"),NBo=o(" \u2014 "),OO=a("a"),qBo=o("BlenderbotForConditionalGeneration"),jBo=o(" (Blenderbot model)"),DBo=l(),fb=a("li"),hhe=a("strong"),GBo=o("blenderbot-small"),OBo=o(" \u2014 "),VO=a("a"),VBo=o("BlenderbotSmallForConditionalGeneration"),XBo=o(" (BlenderbotSmall model)"),zBo=l(),mb=a("li"),phe=a("strong"),QBo=o("encoder-decoder"),WBo=o(" \u2014 "),XO=a("a"),HBo=o("EncoderDecoderModel"),UBo=o(" (Encoder decoder model)"),JBo=l(),gb=a("li"),_he=a("strong"),YBo=o("fsmt"),KBo=o(" \u2014 "),zO=a("a"),ZBo=o("FSMTForConditionalGeneration"),eIo=o(" (FairSeq Machine-Translation model)"),oIo=l(),hb=a("li"),uhe=a("strong"),rIo=o("led"),tIo=o(" \u2014 "),QO=a("a"),aIo=o("LEDForConditionalGeneration"),nIo=o(" (LED model)"),sIo=l(),pb=a("li"),bhe=a("strong"),lIo=o("longt5"),iIo=o(" \u2014 "),WO=a("a"),dIo=o("LongT5ForConditionalGeneration"),cIo=o(" (LongT5 model)"),fIo=l(),_b=a("li"),vhe=a("strong"),mIo=o("m2m_100"),gIo=o(" \u2014 "),HO=a("a"),hIo=o("M2M100ForConditionalGeneration"),pIo=o(" (M2M100 model)"),_Io=l(),ub=a("li"),Fhe=a("strong"),uIo=o("marian"),bIo=o(" \u2014 "),UO=a("a"),vIo=o("MarianMTModel"),FIo=o(" (Marian model)"),TIo=l(),bb=a("li"),The=a("strong"),MIo=o("mbart"),EIo=o(" \u2014 "),JO=a("a"),CIo=o("MBartForConditionalGeneration"),wIo=o(" (mBART model)"),AIo=l(),vb=a("li"),Mhe=a("strong"),LIo=o("mt5"),yIo=o(" \u2014 "),YO=a("a"),xIo=o("MT5ForConditionalGeneration"),$Io=o(" (MT5 model)"),kIo=l(),Fb=a("li"),Ehe=a("strong"),SIo=o("pegasus"),RIo=o(" \u2014 "),KO=a("a"),PIo=o("PegasusForConditionalGeneration"),BIo=o(" (Pegasus model)"),IIo=l(),Tb=a("li"),Che=a("strong"),NIo=o("plbart"),qIo=o(" \u2014 "),ZO=a("a"),jIo=o("PLBartForConditionalGeneration"),DIo=o(" (PLBart model)"),GIo=l(),Mb=a("li"),whe=a("strong"),OIo=o("prophetnet"),VIo=o(" \u2014 "),eV=a("a"),XIo=o("ProphetNetForConditionalGeneration"),zIo=o(" (ProphetNet model)"),QIo=l(),Eb=a("li"),Ahe=a("strong"),WIo=o("t5"),HIo=o(" \u2014 "),oV=a("a"),UIo=o("T5ForConditionalGeneration"),JIo=o(" (T5 model)"),YIo=l(),Cb=a("li"),Lhe=a("strong"),KIo=o("xlm-prophetnet"),ZIo=o(" \u2014 "),rV=a("a"),eNo=o("XLMProphetNetForConditionalGeneration"),oNo=o(" (XLM-ProphetNet model)"),rNo=l(),wb=a("p"),tNo=o("The model is set in evaluation mode by default using "),yhe=a("code"),aNo=o("model.eval()"),nNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=a("code"),sNo=o("model.train()"),lNo=l(),F(Ab.$$.fragment),NOe=l(),Yi=a("h2"),Lb=a("a"),$he=a("span"),F(RL.$$.fragment),iNo=l(),khe=a("span"),dNo=o("AutoModelForSequenceClassification"),qOe=l(),Po=a("div"),F(PL.$$.fragment),cNo=l(),Ki=a("p"),fNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tV=a("a"),mNo=o("from_pretrained()"),gNo=o(" class method or the "),aV=a("a"),hNo=o("from_config()"),pNo=o(` class
method.`),_No=l(),BL=a("p"),uNo=o("This class cannot be instantiated directly using "),She=a("code"),bNo=o("__init__()"),vNo=o(" (throws an error)."),FNo=l(),ct=a("div"),F(IL.$$.fragment),TNo=l(),Rhe=a("p"),MNo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ENo=l(),Zi=a("p"),CNo=o(`Note:
Loading a model from its configuration file does `),Phe=a("strong"),wNo=o("not"),ANo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nV=a("a"),LNo=o("from_pretrained()"),yNo=o(" to load the model weights."),xNo=l(),F(yb.$$.fragment),$No=l(),oo=a("div"),F(NL.$$.fragment),kNo=l(),Bhe=a("p"),SNo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),RNo=l(),qa=a("p"),PNo=o("The model class to instantiate is selected based on the "),Ihe=a("code"),BNo=o("model_type"),INo=o(` property of the config object (either
passed as an argument or loaded from `),Nhe=a("code"),NNo=o("pretrained_model_name_or_path"),qNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),jNo=o("pretrained_model_name_or_path"),DNo=o(":"),GNo=l(),N=a("ul"),xb=a("li"),jhe=a("strong"),ONo=o("albert"),VNo=o(" \u2014 "),sV=a("a"),XNo=o("AlbertForSequenceClassification"),zNo=o(" (ALBERT model)"),QNo=l(),$b=a("li"),Dhe=a("strong"),WNo=o("bart"),HNo=o(" \u2014 "),lV=a("a"),UNo=o("BartForSequenceClassification"),JNo=o(" (BART model)"),YNo=l(),kb=a("li"),Ghe=a("strong"),KNo=o("bert"),ZNo=o(" \u2014 "),iV=a("a"),eqo=o("BertForSequenceClassification"),oqo=o(" (BERT model)"),rqo=l(),Sb=a("li"),Ohe=a("strong"),tqo=o("big_bird"),aqo=o(" \u2014 "),dV=a("a"),nqo=o("BigBirdForSequenceClassification"),sqo=o(" (BigBird model)"),lqo=l(),Rb=a("li"),Vhe=a("strong"),iqo=o("bigbird_pegasus"),dqo=o(" \u2014 "),cV=a("a"),cqo=o("BigBirdPegasusForSequenceClassification"),fqo=o(" (BigBird-Pegasus model)"),mqo=l(),Pb=a("li"),Xhe=a("strong"),gqo=o("bloom"),hqo=o(" \u2014 "),fV=a("a"),pqo=o("BloomForSequenceClassification"),_qo=o(" (BLOOM model)"),uqo=l(),Bb=a("li"),zhe=a("strong"),bqo=o("camembert"),vqo=o(" \u2014 "),mV=a("a"),Fqo=o("CamembertForSequenceClassification"),Tqo=o(" (CamemBERT model)"),Mqo=l(),Ib=a("li"),Qhe=a("strong"),Eqo=o("canine"),Cqo=o(" \u2014 "),gV=a("a"),wqo=o("CanineForSequenceClassification"),Aqo=o(" (CANINE model)"),Lqo=l(),Nb=a("li"),Whe=a("strong"),yqo=o("convbert"),xqo=o(" \u2014 "),hV=a("a"),$qo=o("ConvBertForSequenceClassification"),kqo=o(" (ConvBERT model)"),Sqo=l(),qb=a("li"),Hhe=a("strong"),Rqo=o("ctrl"),Pqo=o(" \u2014 "),pV=a("a"),Bqo=o("CTRLForSequenceClassification"),Iqo=o(" (CTRL model)"),Nqo=l(),jb=a("li"),Uhe=a("strong"),qqo=o("data2vec-text"),jqo=o(" \u2014 "),_V=a("a"),Dqo=o("Data2VecTextForSequenceClassification"),Gqo=o(" (Data2VecText model)"),Oqo=l(),Db=a("li"),Jhe=a("strong"),Vqo=o("deberta"),Xqo=o(" \u2014 "),uV=a("a"),zqo=o("DebertaForSequenceClassification"),Qqo=o(" (DeBERTa model)"),Wqo=l(),Gb=a("li"),Yhe=a("strong"),Hqo=o("deberta-v2"),Uqo=o(" \u2014 "),bV=a("a"),Jqo=o("DebertaV2ForSequenceClassification"),Yqo=o(" (DeBERTa-v2 model)"),Kqo=l(),Ob=a("li"),Khe=a("strong"),Zqo=o("distilbert"),ejo=o(" \u2014 "),vV=a("a"),ojo=o("DistilBertForSequenceClassification"),rjo=o(" (DistilBERT model)"),tjo=l(),Vb=a("li"),Zhe=a("strong"),ajo=o("electra"),njo=o(" \u2014 "),FV=a("a"),sjo=o("ElectraForSequenceClassification"),ljo=o(" (ELECTRA model)"),ijo=l(),Xb=a("li"),epe=a("strong"),djo=o("flaubert"),cjo=o(" \u2014 "),TV=a("a"),fjo=o("FlaubertForSequenceClassification"),mjo=o(" (FlauBERT model)"),gjo=l(),zb=a("li"),ope=a("strong"),hjo=o("fnet"),pjo=o(" \u2014 "),MV=a("a"),_jo=o("FNetForSequenceClassification"),ujo=o(" (FNet model)"),bjo=l(),Qb=a("li"),rpe=a("strong"),vjo=o("funnel"),Fjo=o(" \u2014 "),EV=a("a"),Tjo=o("FunnelForSequenceClassification"),Mjo=o(" (Funnel Transformer model)"),Ejo=l(),Wb=a("li"),tpe=a("strong"),Cjo=o("gpt2"),wjo=o(" \u2014 "),CV=a("a"),Ajo=o("GPT2ForSequenceClassification"),Ljo=o(" (OpenAI GPT-2 model)"),yjo=l(),Hb=a("li"),ape=a("strong"),xjo=o("gpt_neo"),$jo=o(" \u2014 "),wV=a("a"),kjo=o("GPTNeoForSequenceClassification"),Sjo=o(" (GPT Neo model)"),Rjo=l(),Ub=a("li"),npe=a("strong"),Pjo=o("gptj"),Bjo=o(" \u2014 "),AV=a("a"),Ijo=o("GPTJForSequenceClassification"),Njo=o(" (GPT-J model)"),qjo=l(),Jb=a("li"),spe=a("strong"),jjo=o("ibert"),Djo=o(" \u2014 "),LV=a("a"),Gjo=o("IBertForSequenceClassification"),Ojo=o(" (I-BERT model)"),Vjo=l(),Yb=a("li"),lpe=a("strong"),Xjo=o("layoutlm"),zjo=o(" \u2014 "),yV=a("a"),Qjo=o("LayoutLMForSequenceClassification"),Wjo=o(" (LayoutLM model)"),Hjo=l(),Kb=a("li"),ipe=a("strong"),Ujo=o("layoutlmv2"),Jjo=o(" \u2014 "),xV=a("a"),Yjo=o("LayoutLMv2ForSequenceClassification"),Kjo=o(" (LayoutLMv2 model)"),Zjo=l(),Zb=a("li"),dpe=a("strong"),eDo=o("layoutlmv3"),oDo=o(" \u2014 "),$V=a("a"),rDo=o("LayoutLMv3ForSequenceClassification"),tDo=o(" (LayoutLMv3 model)"),aDo=l(),ev=a("li"),cpe=a("strong"),nDo=o("led"),sDo=o(" \u2014 "),kV=a("a"),lDo=o("LEDForSequenceClassification"),iDo=o(" (LED model)"),dDo=l(),ov=a("li"),fpe=a("strong"),cDo=o("longformer"),fDo=o(" \u2014 "),SV=a("a"),mDo=o("LongformerForSequenceClassification"),gDo=o(" (Longformer model)"),hDo=l(),rv=a("li"),mpe=a("strong"),pDo=o("mbart"),_Do=o(" \u2014 "),RV=a("a"),uDo=o("MBartForSequenceClassification"),bDo=o(" (mBART model)"),vDo=l(),tv=a("li"),gpe=a("strong"),FDo=o("megatron-bert"),TDo=o(" \u2014 "),PV=a("a"),MDo=o("MegatronBertForSequenceClassification"),EDo=o(" (Megatron-BERT model)"),CDo=l(),av=a("li"),hpe=a("strong"),wDo=o("mobilebert"),ADo=o(" \u2014 "),BV=a("a"),LDo=o("MobileBertForSequenceClassification"),yDo=o(" (MobileBERT model)"),xDo=l(),nv=a("li"),ppe=a("strong"),$Do=o("mpnet"),kDo=o(" \u2014 "),IV=a("a"),SDo=o("MPNetForSequenceClassification"),RDo=o(" (MPNet model)"),PDo=l(),sv=a("li"),_pe=a("strong"),BDo=o("nezha"),IDo=o(" \u2014 "),NV=a("a"),NDo=o("NezhaForSequenceClassification"),qDo=o(" (Nezha model)"),jDo=l(),lv=a("li"),upe=a("strong"),DDo=o("nystromformer"),GDo=o(" \u2014 "),qV=a("a"),ODo=o("NystromformerForSequenceClassification"),VDo=o(" (Nystr\xF6mformer model)"),XDo=l(),iv=a("li"),bpe=a("strong"),zDo=o("openai-gpt"),QDo=o(" \u2014 "),jV=a("a"),WDo=o("OpenAIGPTForSequenceClassification"),HDo=o(" (OpenAI GPT model)"),UDo=l(),dv=a("li"),vpe=a("strong"),JDo=o("perceiver"),YDo=o(" \u2014 "),DV=a("a"),KDo=o("PerceiverForSequenceClassification"),ZDo=o(" (Perceiver model)"),eGo=l(),cv=a("li"),Fpe=a("strong"),oGo=o("plbart"),rGo=o(" \u2014 "),GV=a("a"),tGo=o("PLBartForSequenceClassification"),aGo=o(" (PLBart model)"),nGo=l(),fv=a("li"),Tpe=a("strong"),sGo=o("qdqbert"),lGo=o(" \u2014 "),OV=a("a"),iGo=o("QDQBertForSequenceClassification"),dGo=o(" (QDQBert model)"),cGo=l(),mv=a("li"),Mpe=a("strong"),fGo=o("reformer"),mGo=o(" \u2014 "),VV=a("a"),gGo=o("ReformerForSequenceClassification"),hGo=o(" (Reformer model)"),pGo=l(),gv=a("li"),Epe=a("strong"),_Go=o("rembert"),uGo=o(" \u2014 "),XV=a("a"),bGo=o("RemBertForSequenceClassification"),vGo=o(" (RemBERT model)"),FGo=l(),hv=a("li"),Cpe=a("strong"),TGo=o("roberta"),MGo=o(" \u2014 "),zV=a("a"),EGo=o("RobertaForSequenceClassification"),CGo=o(" (RoBERTa model)"),wGo=l(),pv=a("li"),wpe=a("strong"),AGo=o("roformer"),LGo=o(" \u2014 "),QV=a("a"),yGo=o("RoFormerForSequenceClassification"),xGo=o(" (RoFormer model)"),$Go=l(),_v=a("li"),Ape=a("strong"),kGo=o("squeezebert"),SGo=o(" \u2014 "),WV=a("a"),RGo=o("SqueezeBertForSequenceClassification"),PGo=o(" (SqueezeBERT model)"),BGo=l(),uv=a("li"),Lpe=a("strong"),IGo=o("tapas"),NGo=o(" \u2014 "),HV=a("a"),qGo=o("TapasForSequenceClassification"),jGo=o(" (TAPAS model)"),DGo=l(),bv=a("li"),ype=a("strong"),GGo=o("transfo-xl"),OGo=o(" \u2014 "),UV=a("a"),VGo=o("TransfoXLForSequenceClassification"),XGo=o(" (Transformer-XL model)"),zGo=l(),vv=a("li"),xpe=a("strong"),QGo=o("xlm"),WGo=o(" \u2014 "),JV=a("a"),HGo=o("XLMForSequenceClassification"),UGo=o(" (XLM model)"),JGo=l(),Fv=a("li"),$pe=a("strong"),YGo=o("xlm-roberta"),KGo=o(" \u2014 "),YV=a("a"),ZGo=o("XLMRobertaForSequenceClassification"),eOo=o(" (XLM-RoBERTa model)"),oOo=l(),Tv=a("li"),kpe=a("strong"),rOo=o("xlm-roberta-xl"),tOo=o(" \u2014 "),KV=a("a"),aOo=o("XLMRobertaXLForSequenceClassification"),nOo=o(" (XLM-RoBERTa-XL model)"),sOo=l(),Mv=a("li"),Spe=a("strong"),lOo=o("xlnet"),iOo=o(" \u2014 "),ZV=a("a"),dOo=o("XLNetForSequenceClassification"),cOo=o(" (XLNet model)"),fOo=l(),Ev=a("li"),Rpe=a("strong"),mOo=o("yoso"),gOo=o(" \u2014 "),eX=a("a"),hOo=o("YosoForSequenceClassification"),pOo=o(" (YOSO model)"),_Oo=l(),Cv=a("p"),uOo=o("The model is set in evaluation mode by default using "),Ppe=a("code"),bOo=o("model.eval()"),vOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=a("code"),FOo=o("model.train()"),TOo=l(),F(wv.$$.fragment),jOe=l(),ed=a("h2"),Av=a("a"),Ipe=a("span"),F(qL.$$.fragment),MOo=l(),Npe=a("span"),EOo=o("AutoModelForMultipleChoice"),DOe=l(),Bo=a("div"),F(jL.$$.fragment),COo=l(),od=a("p"),wOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oX=a("a"),AOo=o("from_pretrained()"),LOo=o(" class method or the "),rX=a("a"),yOo=o("from_config()"),xOo=o(` class
method.`),$Oo=l(),DL=a("p"),kOo=o("This class cannot be instantiated directly using "),qpe=a("code"),SOo=o("__init__()"),ROo=o(" (throws an error)."),POo=l(),ft=a("div"),F(GL.$$.fragment),BOo=l(),jpe=a("p"),IOo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),NOo=l(),rd=a("p"),qOo=o(`Note:
Loading a model from its configuration file does `),Dpe=a("strong"),jOo=o("not"),DOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),GOo=o("from_pretrained()"),OOo=o(" to load the model weights."),VOo=l(),F(Lv.$$.fragment),XOo=l(),ro=a("div"),F(OL.$$.fragment),zOo=l(),Gpe=a("p"),QOo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WOo=l(),ja=a("p"),HOo=o("The model class to instantiate is selected based on the "),Ope=a("code"),UOo=o("model_type"),JOo=o(` property of the config object (either
passed as an argument or loaded from `),Vpe=a("code"),YOo=o("pretrained_model_name_or_path"),KOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=a("code"),ZOo=o("pretrained_model_name_or_path"),eVo=o(":"),oVo=l(),Z=a("ul"),yv=a("li"),zpe=a("strong"),rVo=o("albert"),tVo=o(" \u2014 "),aX=a("a"),aVo=o("AlbertForMultipleChoice"),nVo=o(" (ALBERT model)"),sVo=l(),xv=a("li"),Qpe=a("strong"),lVo=o("bert"),iVo=o(" \u2014 "),nX=a("a"),dVo=o("BertForMultipleChoice"),cVo=o(" (BERT model)"),fVo=l(),$v=a("li"),Wpe=a("strong"),mVo=o("big_bird"),gVo=o(" \u2014 "),sX=a("a"),hVo=o("BigBirdForMultipleChoice"),pVo=o(" (BigBird model)"),_Vo=l(),kv=a("li"),Hpe=a("strong"),uVo=o("camembert"),bVo=o(" \u2014 "),lX=a("a"),vVo=o("CamembertForMultipleChoice"),FVo=o(" (CamemBERT model)"),TVo=l(),Sv=a("li"),Upe=a("strong"),MVo=o("canine"),EVo=o(" \u2014 "),iX=a("a"),CVo=o("CanineForMultipleChoice"),wVo=o(" (CANINE model)"),AVo=l(),Rv=a("li"),Jpe=a("strong"),LVo=o("convbert"),yVo=o(" \u2014 "),dX=a("a"),xVo=o("ConvBertForMultipleChoice"),$Vo=o(" (ConvBERT model)"),kVo=l(),Pv=a("li"),Ype=a("strong"),SVo=o("data2vec-text"),RVo=o(" \u2014 "),cX=a("a"),PVo=o("Data2VecTextForMultipleChoice"),BVo=o(" (Data2VecText model)"),IVo=l(),Bv=a("li"),Kpe=a("strong"),NVo=o("deberta-v2"),qVo=o(" \u2014 "),fX=a("a"),jVo=o("DebertaV2ForMultipleChoice"),DVo=o(" (DeBERTa-v2 model)"),GVo=l(),Iv=a("li"),Zpe=a("strong"),OVo=o("distilbert"),VVo=o(" \u2014 "),mX=a("a"),XVo=o("DistilBertForMultipleChoice"),zVo=o(" (DistilBERT model)"),QVo=l(),Nv=a("li"),e_e=a("strong"),WVo=o("electra"),HVo=o(" \u2014 "),gX=a("a"),UVo=o("ElectraForMultipleChoice"),JVo=o(" (ELECTRA model)"),YVo=l(),qv=a("li"),o_e=a("strong"),KVo=o("flaubert"),ZVo=o(" \u2014 "),hX=a("a"),eXo=o("FlaubertForMultipleChoice"),oXo=o(" (FlauBERT model)"),rXo=l(),jv=a("li"),r_e=a("strong"),tXo=o("fnet"),aXo=o(" \u2014 "),pX=a("a"),nXo=o("FNetForMultipleChoice"),sXo=o(" (FNet model)"),lXo=l(),Dv=a("li"),t_e=a("strong"),iXo=o("funnel"),dXo=o(" \u2014 "),_X=a("a"),cXo=o("FunnelForMultipleChoice"),fXo=o(" (Funnel Transformer model)"),mXo=l(),Gv=a("li"),a_e=a("strong"),gXo=o("ibert"),hXo=o(" \u2014 "),uX=a("a"),pXo=o("IBertForMultipleChoice"),_Xo=o(" (I-BERT model)"),uXo=l(),Ov=a("li"),n_e=a("strong"),bXo=o("longformer"),vXo=o(" \u2014 "),bX=a("a"),FXo=o("LongformerForMultipleChoice"),TXo=o(" (Longformer model)"),MXo=l(),Vv=a("li"),s_e=a("strong"),EXo=o("megatron-bert"),CXo=o(" \u2014 "),vX=a("a"),wXo=o("MegatronBertForMultipleChoice"),AXo=o(" (Megatron-BERT model)"),LXo=l(),Xv=a("li"),l_e=a("strong"),yXo=o("mobilebert"),xXo=o(" \u2014 "),FX=a("a"),$Xo=o("MobileBertForMultipleChoice"),kXo=o(" (MobileBERT model)"),SXo=l(),zv=a("li"),i_e=a("strong"),RXo=o("mpnet"),PXo=o(" \u2014 "),TX=a("a"),BXo=o("MPNetForMultipleChoice"),IXo=o(" (MPNet model)"),NXo=l(),Qv=a("li"),d_e=a("strong"),qXo=o("nezha"),jXo=o(" \u2014 "),MX=a("a"),DXo=o("NezhaForMultipleChoice"),GXo=o(" (Nezha model)"),OXo=l(),Wv=a("li"),c_e=a("strong"),VXo=o("nystromformer"),XXo=o(" \u2014 "),EX=a("a"),zXo=o("NystromformerForMultipleChoice"),QXo=o(" (Nystr\xF6mformer model)"),WXo=l(),Hv=a("li"),f_e=a("strong"),HXo=o("qdqbert"),UXo=o(" \u2014 "),CX=a("a"),JXo=o("QDQBertForMultipleChoice"),YXo=o(" (QDQBert model)"),KXo=l(),Uv=a("li"),m_e=a("strong"),ZXo=o("rembert"),ezo=o(" \u2014 "),wX=a("a"),ozo=o("RemBertForMultipleChoice"),rzo=o(" (RemBERT model)"),tzo=l(),Jv=a("li"),g_e=a("strong"),azo=o("roberta"),nzo=o(" \u2014 "),AX=a("a"),szo=o("RobertaForMultipleChoice"),lzo=o(" (RoBERTa model)"),izo=l(),Yv=a("li"),h_e=a("strong"),dzo=o("roformer"),czo=o(" \u2014 "),LX=a("a"),fzo=o("RoFormerForMultipleChoice"),mzo=o(" (RoFormer model)"),gzo=l(),Kv=a("li"),p_e=a("strong"),hzo=o("squeezebert"),pzo=o(" \u2014 "),yX=a("a"),_zo=o("SqueezeBertForMultipleChoice"),uzo=o(" (SqueezeBERT model)"),bzo=l(),Zv=a("li"),__e=a("strong"),vzo=o("xlm"),Fzo=o(" \u2014 "),xX=a("a"),Tzo=o("XLMForMultipleChoice"),Mzo=o(" (XLM model)"),Ezo=l(),eF=a("li"),u_e=a("strong"),Czo=o("xlm-roberta"),wzo=o(" \u2014 "),$X=a("a"),Azo=o("XLMRobertaForMultipleChoice"),Lzo=o(" (XLM-RoBERTa model)"),yzo=l(),oF=a("li"),b_e=a("strong"),xzo=o("xlm-roberta-xl"),$zo=o(" \u2014 "),kX=a("a"),kzo=o("XLMRobertaXLForMultipleChoice"),Szo=o(" (XLM-RoBERTa-XL model)"),Rzo=l(),rF=a("li"),v_e=a("strong"),Pzo=o("xlnet"),Bzo=o(" \u2014 "),SX=a("a"),Izo=o("XLNetForMultipleChoice"),Nzo=o(" (XLNet model)"),qzo=l(),tF=a("li"),F_e=a("strong"),jzo=o("yoso"),Dzo=o(" \u2014 "),RX=a("a"),Gzo=o("YosoForMultipleChoice"),Ozo=o(" (YOSO model)"),Vzo=l(),aF=a("p"),Xzo=o("The model is set in evaluation mode by default using "),T_e=a("code"),zzo=o("model.eval()"),Qzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=a("code"),Wzo=o("model.train()"),Hzo=l(),F(nF.$$.fragment),GOe=l(),td=a("h2"),sF=a("a"),E_e=a("span"),F(VL.$$.fragment),Uzo=l(),C_e=a("span"),Jzo=o("AutoModelForNextSentencePrediction"),OOe=l(),Io=a("div"),F(XL.$$.fragment),Yzo=l(),ad=a("p"),Kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PX=a("a"),Zzo=o("from_pretrained()"),eQo=o(" class method or the "),BX=a("a"),oQo=o("from_config()"),rQo=o(` class
method.`),tQo=l(),zL=a("p"),aQo=o("This class cannot be instantiated directly using "),w_e=a("code"),nQo=o("__init__()"),sQo=o(" (throws an error)."),lQo=l(),mt=a("div"),F(QL.$$.fragment),iQo=l(),A_e=a("p"),dQo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cQo=l(),nd=a("p"),fQo=o(`Note:
Loading a model from its configuration file does `),L_e=a("strong"),mQo=o("not"),gQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),hQo=o("from_pretrained()"),pQo=o(" to load the model weights."),_Qo=l(),F(lF.$$.fragment),uQo=l(),to=a("div"),F(WL.$$.fragment),bQo=l(),y_e=a("p"),vQo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FQo=l(),Da=a("p"),TQo=o("The model class to instantiate is selected based on the "),x_e=a("code"),MQo=o("model_type"),EQo=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),CQo=o("pretrained_model_name_or_path"),wQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=a("code"),AQo=o("pretrained_model_name_or_path"),LQo=o(":"),yQo=l(),No=a("ul"),iF=a("li"),S_e=a("strong"),xQo=o("bert"),$Qo=o(" \u2014 "),NX=a("a"),kQo=o("BertForNextSentencePrediction"),SQo=o(" (BERT model)"),RQo=l(),dF=a("li"),R_e=a("strong"),PQo=o("fnet"),BQo=o(" \u2014 "),qX=a("a"),IQo=o("FNetForNextSentencePrediction"),NQo=o(" (FNet model)"),qQo=l(),cF=a("li"),P_e=a("strong"),jQo=o("megatron-bert"),DQo=o(" \u2014 "),jX=a("a"),GQo=o("MegatronBertForNextSentencePrediction"),OQo=o(" (Megatron-BERT model)"),VQo=l(),fF=a("li"),B_e=a("strong"),XQo=o("mobilebert"),zQo=o(" \u2014 "),DX=a("a"),QQo=o("MobileBertForNextSentencePrediction"),WQo=o(" (MobileBERT model)"),HQo=l(),mF=a("li"),I_e=a("strong"),UQo=o("nezha"),JQo=o(" \u2014 "),GX=a("a"),YQo=o("NezhaForNextSentencePrediction"),KQo=o(" (Nezha model)"),ZQo=l(),gF=a("li"),N_e=a("strong"),eWo=o("qdqbert"),oWo=o(" \u2014 "),OX=a("a"),rWo=o("QDQBertForNextSentencePrediction"),tWo=o(" (QDQBert model)"),aWo=l(),hF=a("p"),nWo=o("The model is set in evaluation mode by default using "),q_e=a("code"),sWo=o("model.eval()"),lWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j_e=a("code"),iWo=o("model.train()"),dWo=l(),F(pF.$$.fragment),VOe=l(),sd=a("h2"),_F=a("a"),D_e=a("span"),F(HL.$$.fragment),cWo=l(),G_e=a("span"),fWo=o("AutoModelForTokenClassification"),XOe=l(),qo=a("div"),F(UL.$$.fragment),mWo=l(),ld=a("p"),gWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VX=a("a"),hWo=o("from_pretrained()"),pWo=o(" class method or the "),XX=a("a"),_Wo=o("from_config()"),uWo=o(` class
method.`),bWo=l(),JL=a("p"),vWo=o("This class cannot be instantiated directly using "),O_e=a("code"),FWo=o("__init__()"),TWo=o(" (throws an error)."),MWo=l(),gt=a("div"),F(YL.$$.fragment),EWo=l(),V_e=a("p"),CWo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wWo=l(),id=a("p"),AWo=o(`Note:
Loading a model from its configuration file does `),X_e=a("strong"),LWo=o("not"),yWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),xWo=o("from_pretrained()"),$Wo=o(" to load the model weights."),kWo=l(),F(uF.$$.fragment),SWo=l(),ao=a("div"),F(KL.$$.fragment),RWo=l(),z_e=a("p"),PWo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BWo=l(),Ga=a("p"),IWo=o("The model class to instantiate is selected based on the "),Q_e=a("code"),NWo=o("model_type"),qWo=o(` property of the config object (either
passed as an argument or loaded from `),W_e=a("code"),jWo=o("pretrained_model_name_or_path"),DWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=a("code"),GWo=o("pretrained_model_name_or_path"),OWo=o(":"),VWo=l(),H=a("ul"),bF=a("li"),U_e=a("strong"),XWo=o("albert"),zWo=o(" \u2014 "),QX=a("a"),QWo=o("AlbertForTokenClassification"),WWo=o(" (ALBERT model)"),HWo=l(),vF=a("li"),J_e=a("strong"),UWo=o("bert"),JWo=o(" \u2014 "),WX=a("a"),YWo=o("BertForTokenClassification"),KWo=o(" (BERT model)"),ZWo=l(),FF=a("li"),Y_e=a("strong"),eHo=o("big_bird"),oHo=o(" \u2014 "),HX=a("a"),rHo=o("BigBirdForTokenClassification"),tHo=o(" (BigBird model)"),aHo=l(),TF=a("li"),K_e=a("strong"),nHo=o("bloom"),sHo=o(" \u2014 "),UX=a("a"),lHo=o("BloomForTokenClassification"),iHo=o(" (BLOOM model)"),dHo=l(),MF=a("li"),Z_e=a("strong"),cHo=o("camembert"),fHo=o(" \u2014 "),JX=a("a"),mHo=o("CamembertForTokenClassification"),gHo=o(" (CamemBERT model)"),hHo=l(),EF=a("li"),eue=a("strong"),pHo=o("canine"),_Ho=o(" \u2014 "),YX=a("a"),uHo=o("CanineForTokenClassification"),bHo=o(" (CANINE model)"),vHo=l(),CF=a("li"),oue=a("strong"),FHo=o("convbert"),THo=o(" \u2014 "),KX=a("a"),MHo=o("ConvBertForTokenClassification"),EHo=o(" (ConvBERT model)"),CHo=l(),wF=a("li"),rue=a("strong"),wHo=o("data2vec-text"),AHo=o(" \u2014 "),ZX=a("a"),LHo=o("Data2VecTextForTokenClassification"),yHo=o(" (Data2VecText model)"),xHo=l(),AF=a("li"),tue=a("strong"),$Ho=o("deberta"),kHo=o(" \u2014 "),ez=a("a"),SHo=o("DebertaForTokenClassification"),RHo=o(" (DeBERTa model)"),PHo=l(),LF=a("li"),aue=a("strong"),BHo=o("deberta-v2"),IHo=o(" \u2014 "),oz=a("a"),NHo=o("DebertaV2ForTokenClassification"),qHo=o(" (DeBERTa-v2 model)"),jHo=l(),yF=a("li"),nue=a("strong"),DHo=o("distilbert"),GHo=o(" \u2014 "),rz=a("a"),OHo=o("DistilBertForTokenClassification"),VHo=o(" (DistilBERT model)"),XHo=l(),xF=a("li"),sue=a("strong"),zHo=o("electra"),QHo=o(" \u2014 "),tz=a("a"),WHo=o("ElectraForTokenClassification"),HHo=o(" (ELECTRA model)"),UHo=l(),$F=a("li"),lue=a("strong"),JHo=o("flaubert"),YHo=o(" \u2014 "),az=a("a"),KHo=o("FlaubertForTokenClassification"),ZHo=o(" (FlauBERT model)"),eUo=l(),kF=a("li"),iue=a("strong"),oUo=o("fnet"),rUo=o(" \u2014 "),nz=a("a"),tUo=o("FNetForTokenClassification"),aUo=o(" (FNet model)"),nUo=l(),SF=a("li"),due=a("strong"),sUo=o("funnel"),lUo=o(" \u2014 "),sz=a("a"),iUo=o("FunnelForTokenClassification"),dUo=o(" (Funnel Transformer model)"),cUo=l(),RF=a("li"),cue=a("strong"),fUo=o("gpt2"),mUo=o(" \u2014 "),lz=a("a"),gUo=o("GPT2ForTokenClassification"),hUo=o(" (OpenAI GPT-2 model)"),pUo=l(),PF=a("li"),fue=a("strong"),_Uo=o("ibert"),uUo=o(" \u2014 "),iz=a("a"),bUo=o("IBertForTokenClassification"),vUo=o(" (I-BERT model)"),FUo=l(),BF=a("li"),mue=a("strong"),TUo=o("layoutlm"),MUo=o(" \u2014 "),dz=a("a"),EUo=o("LayoutLMForTokenClassification"),CUo=o(" (LayoutLM model)"),wUo=l(),IF=a("li"),gue=a("strong"),AUo=o("layoutlmv2"),LUo=o(" \u2014 "),cz=a("a"),yUo=o("LayoutLMv2ForTokenClassification"),xUo=o(" (LayoutLMv2 model)"),$Uo=l(),NF=a("li"),hue=a("strong"),kUo=o("layoutlmv3"),SUo=o(" \u2014 "),fz=a("a"),RUo=o("LayoutLMv3ForTokenClassification"),PUo=o(" (LayoutLMv3 model)"),BUo=l(),qF=a("li"),pue=a("strong"),IUo=o("longformer"),NUo=o(" \u2014 "),mz=a("a"),qUo=o("LongformerForTokenClassification"),jUo=o(" (Longformer model)"),DUo=l(),jF=a("li"),_ue=a("strong"),GUo=o("megatron-bert"),OUo=o(" \u2014 "),gz=a("a"),VUo=o("MegatronBertForTokenClassification"),XUo=o(" (Megatron-BERT model)"),zUo=l(),DF=a("li"),uue=a("strong"),QUo=o("mobilebert"),WUo=o(" \u2014 "),hz=a("a"),HUo=o("MobileBertForTokenClassification"),UUo=o(" (MobileBERT model)"),JUo=l(),GF=a("li"),bue=a("strong"),YUo=o("mpnet"),KUo=o(" \u2014 "),pz=a("a"),ZUo=o("MPNetForTokenClassification"),eJo=o(" (MPNet model)"),oJo=l(),OF=a("li"),vue=a("strong"),rJo=o("nezha"),tJo=o(" \u2014 "),_z=a("a"),aJo=o("NezhaForTokenClassification"),nJo=o(" (Nezha model)"),sJo=l(),VF=a("li"),Fue=a("strong"),lJo=o("nystromformer"),iJo=o(" \u2014 "),uz=a("a"),dJo=o("NystromformerForTokenClassification"),cJo=o(" (Nystr\xF6mformer model)"),fJo=l(),XF=a("li"),Tue=a("strong"),mJo=o("qdqbert"),gJo=o(" \u2014 "),bz=a("a"),hJo=o("QDQBertForTokenClassification"),pJo=o(" (QDQBert model)"),_Jo=l(),zF=a("li"),Mue=a("strong"),uJo=o("rembert"),bJo=o(" \u2014 "),vz=a("a"),vJo=o("RemBertForTokenClassification"),FJo=o(" (RemBERT model)"),TJo=l(),QF=a("li"),Eue=a("strong"),MJo=o("roberta"),EJo=o(" \u2014 "),Fz=a("a"),CJo=o("RobertaForTokenClassification"),wJo=o(" (RoBERTa model)"),AJo=l(),WF=a("li"),Cue=a("strong"),LJo=o("roformer"),yJo=o(" \u2014 "),Tz=a("a"),xJo=o("RoFormerForTokenClassification"),$Jo=o(" (RoFormer model)"),kJo=l(),HF=a("li"),wue=a("strong"),SJo=o("squeezebert"),RJo=o(" \u2014 "),Mz=a("a"),PJo=o("SqueezeBertForTokenClassification"),BJo=o(" (SqueezeBERT model)"),IJo=l(),UF=a("li"),Aue=a("strong"),NJo=o("xlm"),qJo=o(" \u2014 "),Ez=a("a"),jJo=o("XLMForTokenClassification"),DJo=o(" (XLM model)"),GJo=l(),JF=a("li"),Lue=a("strong"),OJo=o("xlm-roberta"),VJo=o(" \u2014 "),Cz=a("a"),XJo=o("XLMRobertaForTokenClassification"),zJo=o(" (XLM-RoBERTa model)"),QJo=l(),YF=a("li"),yue=a("strong"),WJo=o("xlm-roberta-xl"),HJo=o(" \u2014 "),wz=a("a"),UJo=o("XLMRobertaXLForTokenClassification"),JJo=o(" (XLM-RoBERTa-XL model)"),YJo=l(),KF=a("li"),xue=a("strong"),KJo=o("xlnet"),ZJo=o(" \u2014 "),Az=a("a"),eYo=o("XLNetForTokenClassification"),oYo=o(" (XLNet model)"),rYo=l(),ZF=a("li"),$ue=a("strong"),tYo=o("yoso"),aYo=o(" \u2014 "),Lz=a("a"),nYo=o("YosoForTokenClassification"),sYo=o(" (YOSO model)"),lYo=l(),e6=a("p"),iYo=o("The model is set in evaluation mode by default using "),kue=a("code"),dYo=o("model.eval()"),cYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=a("code"),fYo=o("model.train()"),mYo=l(),F(o6.$$.fragment),zOe=l(),dd=a("h2"),r6=a("a"),Rue=a("span"),F(ZL.$$.fragment),gYo=l(),Pue=a("span"),hYo=o("AutoModelForQuestionAnswering"),QOe=l(),jo=a("div"),F(ey.$$.fragment),pYo=l(),cd=a("p"),_Yo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yz=a("a"),uYo=o("from_pretrained()"),bYo=o(" class method or the "),xz=a("a"),vYo=o("from_config()"),FYo=o(` class
method.`),TYo=l(),oy=a("p"),MYo=o("This class cannot be instantiated directly using "),Bue=a("code"),EYo=o("__init__()"),CYo=o(" (throws an error)."),wYo=l(),ht=a("div"),F(ry.$$.fragment),AYo=l(),Iue=a("p"),LYo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yYo=l(),fd=a("p"),xYo=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),$Yo=o("not"),kYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),SYo=o("from_pretrained()"),RYo=o(" to load the model weights."),PYo=l(),F(t6.$$.fragment),BYo=l(),no=a("div"),F(ty.$$.fragment),IYo=l(),que=a("p"),NYo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qYo=l(),Oa=a("p"),jYo=o("The model class to instantiate is selected based on the "),jue=a("code"),DYo=o("model_type"),GYo=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),OYo=o("pretrained_model_name_or_path"),VYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),XYo=o("pretrained_model_name_or_path"),zYo=o(":"),QYo=l(),V=a("ul"),a6=a("li"),Oue=a("strong"),WYo=o("albert"),HYo=o(" \u2014 "),kz=a("a"),UYo=o("AlbertForQuestionAnswering"),JYo=o(" (ALBERT model)"),YYo=l(),n6=a("li"),Vue=a("strong"),KYo=o("bart"),ZYo=o(" \u2014 "),Sz=a("a"),eKo=o("BartForQuestionAnswering"),oKo=o(" (BART model)"),rKo=l(),s6=a("li"),Xue=a("strong"),tKo=o("bert"),aKo=o(" \u2014 "),Rz=a("a"),nKo=o("BertForQuestionAnswering"),sKo=o(" (BERT model)"),lKo=l(),l6=a("li"),zue=a("strong"),iKo=o("big_bird"),dKo=o(" \u2014 "),Pz=a("a"),cKo=o("BigBirdForQuestionAnswering"),fKo=o(" (BigBird model)"),mKo=l(),i6=a("li"),Que=a("strong"),gKo=o("bigbird_pegasus"),hKo=o(" \u2014 "),Bz=a("a"),pKo=o("BigBirdPegasusForQuestionAnswering"),_Ko=o(" (BigBird-Pegasus model)"),uKo=l(),d6=a("li"),Wue=a("strong"),bKo=o("camembert"),vKo=o(" \u2014 "),Iz=a("a"),FKo=o("CamembertForQuestionAnswering"),TKo=o(" (CamemBERT model)"),MKo=l(),c6=a("li"),Hue=a("strong"),EKo=o("canine"),CKo=o(" \u2014 "),Nz=a("a"),wKo=o("CanineForQuestionAnswering"),AKo=o(" (CANINE model)"),LKo=l(),f6=a("li"),Uue=a("strong"),yKo=o("convbert"),xKo=o(" \u2014 "),qz=a("a"),$Ko=o("ConvBertForQuestionAnswering"),kKo=o(" (ConvBERT model)"),SKo=l(),m6=a("li"),Jue=a("strong"),RKo=o("data2vec-text"),PKo=o(" \u2014 "),jz=a("a"),BKo=o("Data2VecTextForQuestionAnswering"),IKo=o(" (Data2VecText model)"),NKo=l(),g6=a("li"),Yue=a("strong"),qKo=o("deberta"),jKo=o(" \u2014 "),Dz=a("a"),DKo=o("DebertaForQuestionAnswering"),GKo=o(" (DeBERTa model)"),OKo=l(),h6=a("li"),Kue=a("strong"),VKo=o("deberta-v2"),XKo=o(" \u2014 "),Gz=a("a"),zKo=o("DebertaV2ForQuestionAnswering"),QKo=o(" (DeBERTa-v2 model)"),WKo=l(),p6=a("li"),Zue=a("strong"),HKo=o("distilbert"),UKo=o(" \u2014 "),Oz=a("a"),JKo=o("DistilBertForQuestionAnswering"),YKo=o(" (DistilBERT model)"),KKo=l(),_6=a("li"),e2e=a("strong"),ZKo=o("electra"),eZo=o(" \u2014 "),Vz=a("a"),oZo=o("ElectraForQuestionAnswering"),rZo=o(" (ELECTRA model)"),tZo=l(),u6=a("li"),o2e=a("strong"),aZo=o("flaubert"),nZo=o(" \u2014 "),Xz=a("a"),sZo=o("FlaubertForQuestionAnsweringSimple"),lZo=o(" (FlauBERT model)"),iZo=l(),b6=a("li"),r2e=a("strong"),dZo=o("fnet"),cZo=o(" \u2014 "),zz=a("a"),fZo=o("FNetForQuestionAnswering"),mZo=o(" (FNet model)"),gZo=l(),v6=a("li"),t2e=a("strong"),hZo=o("funnel"),pZo=o(" \u2014 "),Qz=a("a"),_Zo=o("FunnelForQuestionAnswering"),uZo=o(" (Funnel Transformer model)"),bZo=l(),F6=a("li"),a2e=a("strong"),vZo=o("gptj"),FZo=o(" \u2014 "),Wz=a("a"),TZo=o("GPTJForQuestionAnswering"),MZo=o(" (GPT-J model)"),EZo=l(),T6=a("li"),n2e=a("strong"),CZo=o("ibert"),wZo=o(" \u2014 "),Hz=a("a"),AZo=o("IBertForQuestionAnswering"),LZo=o(" (I-BERT model)"),yZo=l(),M6=a("li"),s2e=a("strong"),xZo=o("layoutlmv2"),$Zo=o(" \u2014 "),Uz=a("a"),kZo=o("LayoutLMv2ForQuestionAnswering"),SZo=o(" (LayoutLMv2 model)"),RZo=l(),E6=a("li"),l2e=a("strong"),PZo=o("layoutlmv3"),BZo=o(" \u2014 "),Jz=a("a"),IZo=o("LayoutLMv3ForQuestionAnswering"),NZo=o(" (LayoutLMv3 model)"),qZo=l(),C6=a("li"),i2e=a("strong"),jZo=o("led"),DZo=o(" \u2014 "),Yz=a("a"),GZo=o("LEDForQuestionAnswering"),OZo=o(" (LED model)"),VZo=l(),w6=a("li"),d2e=a("strong"),XZo=o("longformer"),zZo=o(" \u2014 "),Kz=a("a"),QZo=o("LongformerForQuestionAnswering"),WZo=o(" (Longformer model)"),HZo=l(),A6=a("li"),c2e=a("strong"),UZo=o("lxmert"),JZo=o(" \u2014 "),Zz=a("a"),YZo=o("LxmertForQuestionAnswering"),KZo=o(" (LXMERT model)"),ZZo=l(),L6=a("li"),f2e=a("strong"),eer=o("mbart"),oer=o(" \u2014 "),eQ=a("a"),rer=o("MBartForQuestionAnswering"),ter=o(" (mBART model)"),aer=l(),y6=a("li"),m2e=a("strong"),ner=o("megatron-bert"),ser=o(" \u2014 "),oQ=a("a"),ler=o("MegatronBertForQuestionAnswering"),ier=o(" (Megatron-BERT model)"),der=l(),x6=a("li"),g2e=a("strong"),cer=o("mobilebert"),fer=o(" \u2014 "),rQ=a("a"),mer=o("MobileBertForQuestionAnswering"),ger=o(" (MobileBERT model)"),her=l(),$6=a("li"),h2e=a("strong"),per=o("mpnet"),_er=o(" \u2014 "),tQ=a("a"),uer=o("MPNetForQuestionAnswering"),ber=o(" (MPNet model)"),ver=l(),k6=a("li"),p2e=a("strong"),Fer=o("nezha"),Ter=o(" \u2014 "),aQ=a("a"),Mer=o("NezhaForQuestionAnswering"),Eer=o(" (Nezha model)"),Cer=l(),S6=a("li"),_2e=a("strong"),wer=o("nystromformer"),Aer=o(" \u2014 "),nQ=a("a"),Ler=o("NystromformerForQuestionAnswering"),yer=o(" (Nystr\xF6mformer model)"),xer=l(),R6=a("li"),u2e=a("strong"),$er=o("qdqbert"),ker=o(" \u2014 "),sQ=a("a"),Ser=o("QDQBertForQuestionAnswering"),Rer=o(" (QDQBert model)"),Per=l(),P6=a("li"),b2e=a("strong"),Ber=o("reformer"),Ier=o(" \u2014 "),lQ=a("a"),Ner=o("ReformerForQuestionAnswering"),qer=o(" (Reformer model)"),jer=l(),B6=a("li"),v2e=a("strong"),Der=o("rembert"),Ger=o(" \u2014 "),iQ=a("a"),Oer=o("RemBertForQuestionAnswering"),Ver=o(" (RemBERT model)"),Xer=l(),I6=a("li"),F2e=a("strong"),zer=o("roberta"),Qer=o(" \u2014 "),dQ=a("a"),Wer=o("RobertaForQuestionAnswering"),Her=o(" (RoBERTa model)"),Uer=l(),N6=a("li"),T2e=a("strong"),Jer=o("roformer"),Yer=o(" \u2014 "),cQ=a("a"),Ker=o("RoFormerForQuestionAnswering"),Zer=o(" (RoFormer model)"),eor=l(),q6=a("li"),M2e=a("strong"),oor=o("splinter"),ror=o(" \u2014 "),fQ=a("a"),tor=o("SplinterForQuestionAnswering"),aor=o(" (Splinter model)"),nor=l(),j6=a("li"),E2e=a("strong"),sor=o("squeezebert"),lor=o(" \u2014 "),mQ=a("a"),ior=o("SqueezeBertForQuestionAnswering"),dor=o(" (SqueezeBERT model)"),cor=l(),D6=a("li"),C2e=a("strong"),mor=o("xlm"),gor=o(" \u2014 "),gQ=a("a"),hor=o("XLMForQuestionAnsweringSimple"),por=o(" (XLM model)"),_or=l(),G6=a("li"),w2e=a("strong"),uor=o("xlm-roberta"),bor=o(" \u2014 "),hQ=a("a"),vor=o("XLMRobertaForQuestionAnswering"),For=o(" (XLM-RoBERTa model)"),Tor=l(),O6=a("li"),A2e=a("strong"),Mor=o("xlm-roberta-xl"),Eor=o(" \u2014 "),pQ=a("a"),Cor=o("XLMRobertaXLForQuestionAnswering"),wor=o(" (XLM-RoBERTa-XL model)"),Aor=l(),V6=a("li"),L2e=a("strong"),Lor=o("xlnet"),yor=o(" \u2014 "),_Q=a("a"),xor=o("XLNetForQuestionAnsweringSimple"),$or=o(" (XLNet model)"),kor=l(),X6=a("li"),y2e=a("strong"),Sor=o("yoso"),Ror=o(" \u2014 "),uQ=a("a"),Por=o("YosoForQuestionAnswering"),Bor=o(" (YOSO model)"),Ior=l(),z6=a("p"),Nor=o("The model is set in evaluation mode by default using "),x2e=a("code"),qor=o("model.eval()"),jor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$2e=a("code"),Dor=o("model.train()"),Gor=l(),F(Q6.$$.fragment),WOe=l(),md=a("h2"),W6=a("a"),k2e=a("span"),F(ay.$$.fragment),Oor=l(),S2e=a("span"),Vor=o("AutoModelForTableQuestionAnswering"),HOe=l(),Do=a("div"),F(ny.$$.fragment),Xor=l(),gd=a("p"),zor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bQ=a("a"),Qor=o("from_pretrained()"),Wor=o(" class method or the "),vQ=a("a"),Hor=o("from_config()"),Uor=o(` class
method.`),Jor=l(),sy=a("p"),Yor=o("This class cannot be instantiated directly using "),R2e=a("code"),Kor=o("__init__()"),Zor=o(" (throws an error)."),err=l(),pt=a("div"),F(ly.$$.fragment),orr=l(),P2e=a("p"),rrr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),trr=l(),hd=a("p"),arr=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),nrr=o("not"),srr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),lrr=o("from_pretrained()"),irr=o(" to load the model weights."),drr=l(),F(H6.$$.fragment),crr=l(),so=a("div"),F(iy.$$.fragment),frr=l(),I2e=a("p"),mrr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),grr=l(),Va=a("p"),hrr=o("The model class to instantiate is selected based on the "),N2e=a("code"),prr=o("model_type"),_rr=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),urr=o("pretrained_model_name_or_path"),brr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=a("code"),vrr=o("pretrained_model_name_or_path"),Frr=o(":"),Trr=l(),D2e=a("ul"),U6=a("li"),G2e=a("strong"),Mrr=o("tapas"),Err=o(" \u2014 "),TQ=a("a"),Crr=o("TapasForQuestionAnswering"),wrr=o(" (TAPAS model)"),Arr=l(),J6=a("p"),Lrr=o("The model is set in evaluation mode by default using "),O2e=a("code"),yrr=o("model.eval()"),xrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V2e=a("code"),$rr=o("model.train()"),krr=l(),F(Y6.$$.fragment),UOe=l(),pd=a("h2"),K6=a("a"),X2e=a("span"),F(dy.$$.fragment),Srr=l(),z2e=a("span"),Rrr=o("AutoModelForImageClassification"),JOe=l(),Go=a("div"),F(cy.$$.fragment),Prr=l(),_d=a("p"),Brr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MQ=a("a"),Irr=o("from_pretrained()"),Nrr=o(" class method or the "),EQ=a("a"),qrr=o("from_config()"),jrr=o(` class
method.`),Drr=l(),fy=a("p"),Grr=o("This class cannot be instantiated directly using "),Q2e=a("code"),Orr=o("__init__()"),Vrr=o(" (throws an error)."),Xrr=l(),_t=a("div"),F(my.$$.fragment),zrr=l(),W2e=a("p"),Qrr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wrr=l(),ud=a("p"),Hrr=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),Urr=o("not"),Jrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=a("a"),Yrr=o("from_pretrained()"),Krr=o(" to load the model weights."),Zrr=l(),F(Z6.$$.fragment),etr=l(),lo=a("div"),F(gy.$$.fragment),otr=l(),U2e=a("p"),rtr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ttr=l(),Xa=a("p"),atr=o("The model class to instantiate is selected based on the "),J2e=a("code"),ntr=o("model_type"),str=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),ltr=o("pretrained_model_name_or_path"),itr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),dtr=o("pretrained_model_name_or_path"),ctr=o(":"),ftr=l(),Fe=a("ul"),eT=a("li"),Z2e=a("strong"),mtr=o("beit"),gtr=o(" \u2014 "),wQ=a("a"),htr=o("BeitForImageClassification"),ptr=o(" (BEiT model)"),_tr=l(),oT=a("li"),e1e=a("strong"),utr=o("convnext"),btr=o(" \u2014 "),AQ=a("a"),vtr=o("ConvNextForImageClassification"),Ftr=o(" (ConvNeXT model)"),Ttr=l(),rT=a("li"),o1e=a("strong"),Mtr=o("cvt"),Etr=o(" \u2014 "),LQ=a("a"),Ctr=o("CvtForImageClassification"),wtr=o(" (CvT model)"),Atr=l(),tT=a("li"),r1e=a("strong"),Ltr=o("data2vec-vision"),ytr=o(" \u2014 "),yQ=a("a"),xtr=o("Data2VecVisionForImageClassification"),$tr=o(" (Data2VecVision model)"),ktr=l(),zs=a("li"),t1e=a("strong"),Str=o("deit"),Rtr=o(" \u2014 "),xQ=a("a"),Ptr=o("DeiTForImageClassification"),Btr=o(" or "),$Q=a("a"),Itr=o("DeiTForImageClassificationWithTeacher"),Ntr=o(" (DeiT model)"),qtr=l(),aT=a("li"),a1e=a("strong"),jtr=o("imagegpt"),Dtr=o(" \u2014 "),kQ=a("a"),Gtr=o("ImageGPTForImageClassification"),Otr=o(" (ImageGPT model)"),Vtr=l(),Qs=a("li"),n1e=a("strong"),Xtr=o("levit"),ztr=o(" \u2014 "),SQ=a("a"),Qtr=o("LevitForImageClassification"),Wtr=o(" or "),RQ=a("a"),Htr=o("LevitForImageClassificationWithTeacher"),Utr=o(" (LeViT model)"),Jtr=l(),ut=a("li"),s1e=a("strong"),Ytr=o("perceiver"),Ktr=o(" \u2014 "),PQ=a("a"),Ztr=o("PerceiverForImageClassificationLearned"),ear=o(" or "),BQ=a("a"),oar=o("PerceiverForImageClassificationFourier"),rar=o(" or "),IQ=a("a"),tar=o("PerceiverForImageClassificationConvProcessing"),aar=o(" (Perceiver model)"),nar=l(),nT=a("li"),l1e=a("strong"),sar=o("poolformer"),lar=o(" \u2014 "),NQ=a("a"),iar=o("PoolFormerForImageClassification"),dar=o(" (PoolFormer model)"),car=l(),sT=a("li"),i1e=a("strong"),far=o("regnet"),mar=o(" \u2014 "),qQ=a("a"),gar=o("RegNetForImageClassification"),har=o(" (RegNet model)"),par=l(),lT=a("li"),d1e=a("strong"),_ar=o("resnet"),uar=o(" \u2014 "),jQ=a("a"),bar=o("ResNetForImageClassification"),Far=o(" (ResNet model)"),Tar=l(),iT=a("li"),c1e=a("strong"),Mar=o("segformer"),Ear=o(" \u2014 "),DQ=a("a"),Car=o("SegformerForImageClassification"),war=o(" (SegFormer model)"),Aar=l(),dT=a("li"),f1e=a("strong"),Lar=o("swin"),yar=o(" \u2014 "),GQ=a("a"),xar=o("SwinForImageClassification"),$ar=o(" (Swin Transformer model)"),kar=l(),cT=a("li"),m1e=a("strong"),Sar=o("van"),Rar=o(" \u2014 "),OQ=a("a"),Par=o("VanForImageClassification"),Bar=o(" (VAN model)"),Iar=l(),fT=a("li"),g1e=a("strong"),Nar=o("vit"),qar=o(" \u2014 "),VQ=a("a"),jar=o("ViTForImageClassification"),Dar=o(" (ViT model)"),Gar=l(),mT=a("p"),Oar=o("The model is set in evaluation mode by default using "),h1e=a("code"),Var=o("model.eval()"),Xar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=a("code"),zar=o("model.train()"),Qar=l(),F(gT.$$.fragment),YOe=l(),bd=a("h2"),hT=a("a"),_1e=a("span"),F(hy.$$.fragment),War=l(),u1e=a("span"),Har=o("AutoModelForVision2Seq"),KOe=l(),Oo=a("div"),F(py.$$.fragment),Uar=l(),vd=a("p"),Jar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XQ=a("a"),Yar=o("from_pretrained()"),Kar=o(" class method or the "),zQ=a("a"),Zar=o("from_config()"),enr=o(` class
method.`),onr=l(),_y=a("p"),rnr=o("This class cannot be instantiated directly using "),b1e=a("code"),tnr=o("__init__()"),anr=o(" (throws an error)."),nnr=l(),bt=a("div"),F(uy.$$.fragment),snr=l(),v1e=a("p"),lnr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),inr=l(),Fd=a("p"),dnr=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),cnr=o("not"),fnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),mnr=o("from_pretrained()"),gnr=o(" to load the model weights."),hnr=l(),F(pT.$$.fragment),pnr=l(),io=a("div"),F(by.$$.fragment),_nr=l(),T1e=a("p"),unr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bnr=l(),za=a("p"),vnr=o("The model class to instantiate is selected based on the "),M1e=a("code"),Fnr=o("model_type"),Tnr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),Mnr=o("pretrained_model_name_or_path"),Enr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),Cnr=o("pretrained_model_name_or_path"),wnr=o(":"),Anr=l(),w1e=a("ul"),_T=a("li"),A1e=a("strong"),Lnr=o("vision-encoder-decoder"),ynr=o(" \u2014 "),WQ=a("a"),xnr=o("VisionEncoderDecoderModel"),$nr=o(" (Vision Encoder decoder model)"),knr=l(),uT=a("p"),Snr=o("The model is set in evaluation mode by default using "),L1e=a("code"),Rnr=o("model.eval()"),Pnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y1e=a("code"),Bnr=o("model.train()"),Inr=l(),F(bT.$$.fragment),ZOe=l(),Td=a("h2"),vT=a("a"),x1e=a("span"),F(vy.$$.fragment),Nnr=l(),$1e=a("span"),qnr=o("AutoModelForVisualQuestionAnswering"),eVe=l(),Vo=a("div"),F(Fy.$$.fragment),jnr=l(),Md=a("p"),Dnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),HQ=a("a"),Gnr=o("from_pretrained()"),Onr=o(" class method or the "),UQ=a("a"),Vnr=o("from_config()"),Xnr=o(` class
method.`),znr=l(),Ty=a("p"),Qnr=o("This class cannot be instantiated directly using "),k1e=a("code"),Wnr=o("__init__()"),Hnr=o(" (throws an error)."),Unr=l(),vt=a("div"),F(My.$$.fragment),Jnr=l(),S1e=a("p"),Ynr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Knr=l(),Ed=a("p"),Znr=o(`Note:
Loading a model from its configuration file does `),R1e=a("strong"),esr=o("not"),osr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),rsr=o("from_pretrained()"),tsr=o(" to load the model weights."),asr=l(),F(FT.$$.fragment),nsr=l(),co=a("div"),F(Ey.$$.fragment),ssr=l(),P1e=a("p"),lsr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),isr=l(),Qa=a("p"),dsr=o("The model class to instantiate is selected based on the "),B1e=a("code"),csr=o("model_type"),fsr=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),msr=o("pretrained_model_name_or_path"),gsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),hsr=o("pretrained_model_name_or_path"),psr=o(":"),_sr=l(),q1e=a("ul"),TT=a("li"),j1e=a("strong"),usr=o("vilt"),bsr=o(" \u2014 "),YQ=a("a"),vsr=o("ViltForQuestionAnswering"),Fsr=o(" (ViLT model)"),Tsr=l(),MT=a("p"),Msr=o("The model is set in evaluation mode by default using "),D1e=a("code"),Esr=o("model.eval()"),Csr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=a("code"),wsr=o("model.train()"),Asr=l(),F(ET.$$.fragment),oVe=l(),Cd=a("h2"),CT=a("a"),O1e=a("span"),F(Cy.$$.fragment),Lsr=l(),V1e=a("span"),ysr=o("AutoModelForAudioClassification"),rVe=l(),Xo=a("div"),F(wy.$$.fragment),xsr=l(),wd=a("p"),$sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KQ=a("a"),ksr=o("from_pretrained()"),Ssr=o(" class method or the "),ZQ=a("a"),Rsr=o("from_config()"),Psr=o(` class
method.`),Bsr=l(),Ay=a("p"),Isr=o("This class cannot be instantiated directly using "),X1e=a("code"),Nsr=o("__init__()"),qsr=o(" (throws an error)."),jsr=l(),Ft=a("div"),F(Ly.$$.fragment),Dsr=l(),z1e=a("p"),Gsr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Osr=l(),Ad=a("p"),Vsr=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),Xsr=o("not"),zsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),Qsr=o("from_pretrained()"),Wsr=o(" to load the model weights."),Hsr=l(),F(wT.$$.fragment),Usr=l(),fo=a("div"),F(yy.$$.fragment),Jsr=l(),W1e=a("p"),Ysr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ksr=l(),Wa=a("p"),Zsr=o("The model class to instantiate is selected based on the "),H1e=a("code"),elr=o("model_type"),olr=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),rlr=o("pretrained_model_name_or_path"),tlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),alr=o("pretrained_model_name_or_path"),nlr=o(":"),slr=l(),Pe=a("ul"),AT=a("li"),Y1e=a("strong"),llr=o("data2vec-audio"),ilr=o(" \u2014 "),oW=a("a"),dlr=o("Data2VecAudioForSequenceClassification"),clr=o(" (Data2VecAudio model)"),flr=l(),LT=a("li"),K1e=a("strong"),mlr=o("hubert"),glr=o(" \u2014 "),rW=a("a"),hlr=o("HubertForSequenceClassification"),plr=o(" (Hubert model)"),_lr=l(),yT=a("li"),Z1e=a("strong"),ulr=o("sew"),blr=o(" \u2014 "),tW=a("a"),vlr=o("SEWForSequenceClassification"),Flr=o(" (SEW model)"),Tlr=l(),xT=a("li"),ebe=a("strong"),Mlr=o("sew-d"),Elr=o(" \u2014 "),aW=a("a"),Clr=o("SEWDForSequenceClassification"),wlr=o(" (SEW-D model)"),Alr=l(),$T=a("li"),obe=a("strong"),Llr=o("unispeech"),ylr=o(" \u2014 "),nW=a("a"),xlr=o("UniSpeechForSequenceClassification"),$lr=o(" (UniSpeech model)"),klr=l(),kT=a("li"),rbe=a("strong"),Slr=o("unispeech-sat"),Rlr=o(" \u2014 "),sW=a("a"),Plr=o("UniSpeechSatForSequenceClassification"),Blr=o(" (UniSpeechSat model)"),Ilr=l(),ST=a("li"),tbe=a("strong"),Nlr=o("wav2vec2"),qlr=o(" \u2014 "),lW=a("a"),jlr=o("Wav2Vec2ForSequenceClassification"),Dlr=o(" (Wav2Vec2 model)"),Glr=l(),RT=a("li"),abe=a("strong"),Olr=o("wav2vec2-conformer"),Vlr=o(" \u2014 "),iW=a("a"),Xlr=o("Wav2Vec2ConformerForSequenceClassification"),zlr=o(" (Wav2Vec2-Conformer model)"),Qlr=l(),PT=a("li"),nbe=a("strong"),Wlr=o("wavlm"),Hlr=o(" \u2014 "),dW=a("a"),Ulr=o("WavLMForSequenceClassification"),Jlr=o(" (WavLM model)"),Ylr=l(),BT=a("p"),Klr=o("The model is set in evaluation mode by default using "),sbe=a("code"),Zlr=o("model.eval()"),eir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lbe=a("code"),oir=o("model.train()"),rir=l(),F(IT.$$.fragment),tVe=l(),Ld=a("h2"),NT=a("a"),ibe=a("span"),F(xy.$$.fragment),tir=l(),dbe=a("span"),air=o("AutoModelForAudioFrameClassification"),aVe=l(),zo=a("div"),F($y.$$.fragment),nir=l(),yd=a("p"),sir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cW=a("a"),lir=o("from_pretrained()"),iir=o(" class method or the "),fW=a("a"),dir=o("from_config()"),cir=o(` class
method.`),fir=l(),ky=a("p"),mir=o("This class cannot be instantiated directly using "),cbe=a("code"),gir=o("__init__()"),hir=o(" (throws an error)."),pir=l(),Tt=a("div"),F(Sy.$$.fragment),_ir=l(),fbe=a("p"),uir=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),bir=l(),xd=a("p"),vir=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),Fir=o("not"),Tir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),Mir=o("from_pretrained()"),Eir=o(" to load the model weights."),Cir=l(),F(qT.$$.fragment),wir=l(),mo=a("div"),F(Ry.$$.fragment),Air=l(),gbe=a("p"),Lir=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),yir=l(),Ha=a("p"),xir=o("The model class to instantiate is selected based on the "),hbe=a("code"),$ir=o("model_type"),kir=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),Sir=o("pretrained_model_name_or_path"),Rir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),Pir=o("pretrained_model_name_or_path"),Bir=o(":"),Iir=l(),et=a("ul"),jT=a("li"),ube=a("strong"),Nir=o("data2vec-audio"),qir=o(" \u2014 "),gW=a("a"),jir=o("Data2VecAudioForAudioFrameClassification"),Dir=o(" (Data2VecAudio model)"),Gir=l(),DT=a("li"),bbe=a("strong"),Oir=o("unispeech-sat"),Vir=o(" \u2014 "),hW=a("a"),Xir=o("UniSpeechSatForAudioFrameClassification"),zir=o(" (UniSpeechSat model)"),Qir=l(),GT=a("li"),vbe=a("strong"),Wir=o("wav2vec2"),Hir=o(" \u2014 "),pW=a("a"),Uir=o("Wav2Vec2ForAudioFrameClassification"),Jir=o(" (Wav2Vec2 model)"),Yir=l(),OT=a("li"),Fbe=a("strong"),Kir=o("wav2vec2-conformer"),Zir=o(" \u2014 "),_W=a("a"),edr=o("Wav2Vec2ConformerForAudioFrameClassification"),odr=o(" (Wav2Vec2-Conformer model)"),rdr=l(),VT=a("li"),Tbe=a("strong"),tdr=o("wavlm"),adr=o(" \u2014 "),uW=a("a"),ndr=o("WavLMForAudioFrameClassification"),sdr=o(" (WavLM model)"),ldr=l(),XT=a("p"),idr=o("The model is set in evaluation mode by default using "),Mbe=a("code"),ddr=o("model.eval()"),cdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=a("code"),fdr=o("model.train()"),mdr=l(),F(zT.$$.fragment),nVe=l(),$d=a("h2"),QT=a("a"),Cbe=a("span"),F(Py.$$.fragment),gdr=l(),wbe=a("span"),hdr=o("AutoModelForCTC"),sVe=l(),Qo=a("div"),F(By.$$.fragment),pdr=l(),kd=a("p"),_dr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bW=a("a"),udr=o("from_pretrained()"),bdr=o(" class method or the "),vW=a("a"),vdr=o("from_config()"),Fdr=o(` class
method.`),Tdr=l(),Iy=a("p"),Mdr=o("This class cannot be instantiated directly using "),Abe=a("code"),Edr=o("__init__()"),Cdr=o(" (throws an error)."),wdr=l(),Mt=a("div"),F(Ny.$$.fragment),Adr=l(),Lbe=a("p"),Ldr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ydr=l(),Sd=a("p"),xdr=o(`Note:
Loading a model from its configuration file does `),ybe=a("strong"),$dr=o("not"),kdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),Sdr=o("from_pretrained()"),Rdr=o(" to load the model weights."),Pdr=l(),F(WT.$$.fragment),Bdr=l(),go=a("div"),F(qy.$$.fragment),Idr=l(),xbe=a("p"),Ndr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),qdr=l(),Ua=a("p"),jdr=o("The model class to instantiate is selected based on the "),$be=a("code"),Ddr=o("model_type"),Gdr=o(` property of the config object (either
passed as an argument or loaded from `),kbe=a("code"),Odr=o("pretrained_model_name_or_path"),Vdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=a("code"),Xdr=o("pretrained_model_name_or_path"),zdr=o(":"),Qdr=l(),Le=a("ul"),HT=a("li"),Rbe=a("strong"),Wdr=o("data2vec-audio"),Hdr=o(" \u2014 "),TW=a("a"),Udr=o("Data2VecAudioForCTC"),Jdr=o(" (Data2VecAudio model)"),Ydr=l(),UT=a("li"),Pbe=a("strong"),Kdr=o("hubert"),Zdr=o(" \u2014 "),MW=a("a"),ecr=o("HubertForCTC"),ocr=o(" (Hubert model)"),rcr=l(),JT=a("li"),Bbe=a("strong"),tcr=o("mctct"),acr=o(" \u2014 "),EW=a("a"),ncr=o("MCTCTForCTC"),scr=o(" (M-CTC-T model)"),lcr=l(),YT=a("li"),Ibe=a("strong"),icr=o("sew"),dcr=o(" \u2014 "),CW=a("a"),ccr=o("SEWForCTC"),fcr=o(" (SEW model)"),mcr=l(),KT=a("li"),Nbe=a("strong"),gcr=o("sew-d"),hcr=o(" \u2014 "),wW=a("a"),pcr=o("SEWDForCTC"),_cr=o(" (SEW-D model)"),ucr=l(),ZT=a("li"),qbe=a("strong"),bcr=o("unispeech"),vcr=o(" \u2014 "),AW=a("a"),Fcr=o("UniSpeechForCTC"),Tcr=o(" (UniSpeech model)"),Mcr=l(),e7=a("li"),jbe=a("strong"),Ecr=o("unispeech-sat"),Ccr=o(" \u2014 "),LW=a("a"),wcr=o("UniSpeechSatForCTC"),Acr=o(" (UniSpeechSat model)"),Lcr=l(),o7=a("li"),Dbe=a("strong"),ycr=o("wav2vec2"),xcr=o(" \u2014 "),yW=a("a"),$cr=o("Wav2Vec2ForCTC"),kcr=o(" (Wav2Vec2 model)"),Scr=l(),r7=a("li"),Gbe=a("strong"),Rcr=o("wav2vec2-conformer"),Pcr=o(" \u2014 "),xW=a("a"),Bcr=o("Wav2Vec2ConformerForCTC"),Icr=o(" (Wav2Vec2-Conformer model)"),Ncr=l(),t7=a("li"),Obe=a("strong"),qcr=o("wavlm"),jcr=o(" \u2014 "),$W=a("a"),Dcr=o("WavLMForCTC"),Gcr=o(" (WavLM model)"),Ocr=l(),a7=a("p"),Vcr=o("The model is set in evaluation mode by default using "),Vbe=a("code"),Xcr=o("model.eval()"),zcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xbe=a("code"),Qcr=o("model.train()"),Wcr=l(),F(n7.$$.fragment),lVe=l(),Rd=a("h2"),s7=a("a"),zbe=a("span"),F(jy.$$.fragment),Hcr=l(),Qbe=a("span"),Ucr=o("AutoModelForSpeechSeq2Seq"),iVe=l(),Wo=a("div"),F(Dy.$$.fragment),Jcr=l(),Pd=a("p"),Ycr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kW=a("a"),Kcr=o("from_pretrained()"),Zcr=o(" class method or the "),SW=a("a"),efr=o("from_config()"),ofr=o(` class
method.`),rfr=l(),Gy=a("p"),tfr=o("This class cannot be instantiated directly using "),Wbe=a("code"),afr=o("__init__()"),nfr=o(" (throws an error)."),sfr=l(),Et=a("div"),F(Oy.$$.fragment),lfr=l(),Hbe=a("p"),ifr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dfr=l(),Bd=a("p"),cfr=o(`Note:
Loading a model from its configuration file does `),Ube=a("strong"),ffr=o("not"),mfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),gfr=o("from_pretrained()"),hfr=o(" to load the model weights."),pfr=l(),F(l7.$$.fragment),_fr=l(),ho=a("div"),F(Vy.$$.fragment),ufr=l(),Jbe=a("p"),bfr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vfr=l(),Ja=a("p"),Ffr=o("The model class to instantiate is selected based on the "),Ybe=a("code"),Tfr=o("model_type"),Mfr=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),Efr=o("pretrained_model_name_or_path"),Cfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),wfr=o("pretrained_model_name_or_path"),Afr=o(":"),Lfr=l(),Xy=a("ul"),i7=a("li"),eve=a("strong"),yfr=o("speech-encoder-decoder"),xfr=o(" \u2014 "),PW=a("a"),$fr=o("SpeechEncoderDecoderModel"),kfr=o(" (Speech Encoder decoder model)"),Sfr=l(),d7=a("li"),ove=a("strong"),Rfr=o("speech_to_text"),Pfr=o(" \u2014 "),BW=a("a"),Bfr=o("Speech2TextForConditionalGeneration"),Ifr=o(" (Speech2Text model)"),Nfr=l(),c7=a("p"),qfr=o("The model is set in evaluation mode by default using "),rve=a("code"),jfr=o("model.eval()"),Dfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tve=a("code"),Gfr=o("model.train()"),Ofr=l(),F(f7.$$.fragment),dVe=l(),Id=a("h2"),m7=a("a"),ave=a("span"),F(zy.$$.fragment),Vfr=l(),nve=a("span"),Xfr=o("AutoModelForAudioXVector"),cVe=l(),Ho=a("div"),F(Qy.$$.fragment),zfr=l(),Nd=a("p"),Qfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),IW=a("a"),Wfr=o("from_pretrained()"),Hfr=o(" class method or the "),NW=a("a"),Ufr=o("from_config()"),Jfr=o(` class
method.`),Yfr=l(),Wy=a("p"),Kfr=o("This class cannot be instantiated directly using "),sve=a("code"),Zfr=o("__init__()"),emr=o(" (throws an error)."),omr=l(),Ct=a("div"),F(Hy.$$.fragment),rmr=l(),lve=a("p"),tmr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),amr=l(),qd=a("p"),nmr=o(`Note:
Loading a model from its configuration file does `),ive=a("strong"),smr=o("not"),lmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),imr=o("from_pretrained()"),dmr=o(" to load the model weights."),cmr=l(),F(g7.$$.fragment),fmr=l(),po=a("div"),F(Uy.$$.fragment),mmr=l(),dve=a("p"),gmr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),hmr=l(),Ya=a("p"),pmr=o("The model class to instantiate is selected based on the "),cve=a("code"),_mr=o("model_type"),umr=o(` property of the config object (either
passed as an argument or loaded from `),fve=a("code"),bmr=o("pretrained_model_name_or_path"),vmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),Fmr=o("pretrained_model_name_or_path"),Tmr=o(":"),Mmr=l(),ot=a("ul"),h7=a("li"),gve=a("strong"),Emr=o("data2vec-audio"),Cmr=o(" \u2014 "),jW=a("a"),wmr=o("Data2VecAudioForXVector"),Amr=o(" (Data2VecAudio model)"),Lmr=l(),p7=a("li"),hve=a("strong"),ymr=o("unispeech-sat"),xmr=o(" \u2014 "),DW=a("a"),$mr=o("UniSpeechSatForXVector"),kmr=o(" (UniSpeechSat model)"),Smr=l(),_7=a("li"),pve=a("strong"),Rmr=o("wav2vec2"),Pmr=o(" \u2014 "),GW=a("a"),Bmr=o("Wav2Vec2ForXVector"),Imr=o(" (Wav2Vec2 model)"),Nmr=l(),u7=a("li"),_ve=a("strong"),qmr=o("wav2vec2-conformer"),jmr=o(" \u2014 "),OW=a("a"),Dmr=o("Wav2Vec2ConformerForXVector"),Gmr=o(" (Wav2Vec2-Conformer model)"),Omr=l(),b7=a("li"),uve=a("strong"),Vmr=o("wavlm"),Xmr=o(" \u2014 "),VW=a("a"),zmr=o("WavLMForXVector"),Qmr=o(" (WavLM model)"),Wmr=l(),v7=a("p"),Hmr=o("The model is set in evaluation mode by default using "),bve=a("code"),Umr=o("model.eval()"),Jmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vve=a("code"),Ymr=o("model.train()"),Kmr=l(),F(F7.$$.fragment),fVe=l(),jd=a("h2"),T7=a("a"),Fve=a("span"),F(Jy.$$.fragment),Zmr=l(),Tve=a("span"),egr=o("AutoModelForMaskedImageModeling"),mVe=l(),Uo=a("div"),F(Yy.$$.fragment),ogr=l(),Dd=a("p"),rgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XW=a("a"),tgr=o("from_pretrained()"),agr=o(" class method or the "),zW=a("a"),ngr=o("from_config()"),sgr=o(` class
method.`),lgr=l(),Ky=a("p"),igr=o("This class cannot be instantiated directly using "),Mve=a("code"),dgr=o("__init__()"),cgr=o(" (throws an error)."),fgr=l(),wt=a("div"),F(Zy.$$.fragment),mgr=l(),Eve=a("p"),ggr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),hgr=l(),Gd=a("p"),pgr=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),_gr=o("not"),ugr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),bgr=o("from_pretrained()"),vgr=o(" to load the model weights."),Fgr=l(),F(M7.$$.fragment),Tgr=l(),_o=a("div"),F(e9.$$.fragment),Mgr=l(),wve=a("p"),Egr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Cgr=l(),Ka=a("p"),wgr=o("The model class to instantiate is selected based on the "),Ave=a("code"),Agr=o("model_type"),Lgr=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),ygr=o("pretrained_model_name_or_path"),xgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),$gr=o("pretrained_model_name_or_path"),kgr=o(":"),Sgr=l(),Od=a("ul"),E7=a("li"),xve=a("strong"),Rgr=o("deit"),Pgr=o(" \u2014 "),WW=a("a"),Bgr=o("DeiTForMaskedImageModeling"),Igr=o(" (DeiT model)"),Ngr=l(),C7=a("li"),$ve=a("strong"),qgr=o("swin"),jgr=o(" \u2014 "),HW=a("a"),Dgr=o("SwinForMaskedImageModeling"),Ggr=o(" (Swin Transformer model)"),Ogr=l(),w7=a("li"),kve=a("strong"),Vgr=o("vit"),Xgr=o(" \u2014 "),UW=a("a"),zgr=o("ViTForMaskedImageModeling"),Qgr=o(" (ViT model)"),Wgr=l(),A7=a("p"),Hgr=o("The model is set in evaluation mode by default using "),Sve=a("code"),Ugr=o("model.eval()"),Jgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rve=a("code"),Ygr=o("model.train()"),Kgr=l(),F(L7.$$.fragment),gVe=l(),Vd=a("h2"),y7=a("a"),Pve=a("span"),F(o9.$$.fragment),Zgr=l(),Bve=a("span"),ehr=o("AutoModelForObjectDetection"),hVe=l(),Jo=a("div"),F(r9.$$.fragment),ohr=l(),Xd=a("p"),rhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),JW=a("a"),thr=o("from_pretrained()"),ahr=o(" class method or the "),YW=a("a"),nhr=o("from_config()"),shr=o(` class
method.`),lhr=l(),t9=a("p"),ihr=o("This class cannot be instantiated directly using "),Ive=a("code"),dhr=o("__init__()"),chr=o(" (throws an error)."),fhr=l(),At=a("div"),F(a9.$$.fragment),mhr=l(),Nve=a("p"),ghr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),hhr=l(),zd=a("p"),phr=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),_hr=o("not"),uhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),bhr=o("from_pretrained()"),vhr=o(" to load the model weights."),Fhr=l(),F(x7.$$.fragment),Thr=l(),uo=a("div"),F(n9.$$.fragment),Mhr=l(),jve=a("p"),Ehr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Chr=l(),Za=a("p"),whr=o("The model class to instantiate is selected based on the "),Dve=a("code"),Ahr=o("model_type"),Lhr=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),yhr=o("pretrained_model_name_or_path"),xhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),$hr=o("pretrained_model_name_or_path"),khr=o(":"),Shr=l(),s9=a("ul"),$7=a("li"),Vve=a("strong"),Rhr=o("detr"),Phr=o(" \u2014 "),ZW=a("a"),Bhr=o("DetrForObjectDetection"),Ihr=o(" (DETR model)"),Nhr=l(),k7=a("li"),Xve=a("strong"),qhr=o("yolos"),jhr=o(" \u2014 "),eH=a("a"),Dhr=o("YolosForObjectDetection"),Ghr=o(" (YOLOS model)"),Ohr=l(),S7=a("p"),Vhr=o("The model is set in evaluation mode by default using "),zve=a("code"),Xhr=o("model.eval()"),zhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qve=a("code"),Qhr=o("model.train()"),Whr=l(),F(R7.$$.fragment),pVe=l(),Qd=a("h2"),P7=a("a"),Wve=a("span"),F(l9.$$.fragment),Hhr=l(),Hve=a("span"),Uhr=o("AutoModelForImageSegmentation"),_Ve=l(),Yo=a("div"),F(i9.$$.fragment),Jhr=l(),Wd=a("p"),Yhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),oH=a("a"),Khr=o("from_pretrained()"),Zhr=o(" class method or the "),rH=a("a"),epr=o("from_config()"),opr=o(` class
method.`),rpr=l(),d9=a("p"),tpr=o("This class cannot be instantiated directly using "),Uve=a("code"),apr=o("__init__()"),npr=o(" (throws an error)."),spr=l(),Lt=a("div"),F(c9.$$.fragment),lpr=l(),Jve=a("p"),ipr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),dpr=l(),Hd=a("p"),cpr=o(`Note:
Loading a model from its configuration file does `),Yve=a("strong"),fpr=o("not"),mpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),gpr=o("from_pretrained()"),hpr=o(" to load the model weights."),ppr=l(),F(B7.$$.fragment),_pr=l(),bo=a("div"),F(f9.$$.fragment),upr=l(),Kve=a("p"),bpr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),vpr=l(),en=a("p"),Fpr=o("The model class to instantiate is selected based on the "),Zve=a("code"),Tpr=o("model_type"),Mpr=o(` property of the config object (either
passed as an argument or loaded from `),eFe=a("code"),Epr=o("pretrained_model_name_or_path"),Cpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oFe=a("code"),wpr=o("pretrained_model_name_or_path"),Apr=o(":"),Lpr=l(),rFe=a("ul"),I7=a("li"),tFe=a("strong"),ypr=o("detr"),xpr=o(" \u2014 "),aH=a("a"),$pr=o("DetrForSegmentation"),kpr=o(" (DETR model)"),Spr=l(),N7=a("p"),Rpr=o("The model is set in evaluation mode by default using "),aFe=a("code"),Ppr=o("model.eval()"),Bpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nFe=a("code"),Ipr=o("model.train()"),Npr=l(),F(q7.$$.fragment),uVe=l(),Ud=a("h2"),j7=a("a"),sFe=a("span"),F(m9.$$.fragment),qpr=l(),lFe=a("span"),jpr=o("AutoModelForSemanticSegmentation"),bVe=l(),Ko=a("div"),F(g9.$$.fragment),Dpr=l(),Jd=a("p"),Gpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nH=a("a"),Opr=o("from_pretrained()"),Vpr=o(" class method or the "),sH=a("a"),Xpr=o("from_config()"),zpr=o(` class
method.`),Qpr=l(),h9=a("p"),Wpr=o("This class cannot be instantiated directly using "),iFe=a("code"),Hpr=o("__init__()"),Upr=o(" (throws an error)."),Jpr=l(),yt=a("div"),F(p9.$$.fragment),Ypr=l(),dFe=a("p"),Kpr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Zpr=l(),Yd=a("p"),e_r=o(`Note:
Loading a model from its configuration file does `),cFe=a("strong"),o_r=o("not"),r_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),t_r=o("from_pretrained()"),a_r=o(" to load the model weights."),n_r=l(),F(D7.$$.fragment),s_r=l(),vo=a("div"),F(_9.$$.fragment),l_r=l(),fFe=a("p"),i_r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),d_r=l(),on=a("p"),c_r=o("The model class to instantiate is selected based on the "),mFe=a("code"),f_r=o("model_type"),m_r=o(` property of the config object (either
passed as an argument or loaded from `),gFe=a("code"),g_r=o("pretrained_model_name_or_path"),h_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=a("code"),p_r=o("pretrained_model_name_or_path"),__r=o(":"),u_r=l(),rn=a("ul"),G7=a("li"),pFe=a("strong"),b_r=o("beit"),v_r=o(" \u2014 "),iH=a("a"),F_r=o("BeitForSemanticSegmentation"),T_r=o(" (BEiT model)"),M_r=l(),O7=a("li"),_Fe=a("strong"),E_r=o("data2vec-vision"),C_r=o(" \u2014 "),dH=a("a"),w_r=o("Data2VecVisionForSemanticSegmentation"),A_r=o(" (Data2VecVision model)"),L_r=l(),V7=a("li"),uFe=a("strong"),y_r=o("dpt"),x_r=o(" \u2014 "),cH=a("a"),$_r=o("DPTForSemanticSegmentation"),k_r=o(" (DPT model)"),S_r=l(),X7=a("li"),bFe=a("strong"),R_r=o("segformer"),P_r=o(" \u2014 "),fH=a("a"),B_r=o("SegformerForSemanticSegmentation"),I_r=o(" (SegFormer model)"),N_r=l(),z7=a("p"),q_r=o("The model is set in evaluation mode by default using "),vFe=a("code"),j_r=o("model.eval()"),D_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FFe=a("code"),G_r=o("model.train()"),O_r=l(),F(Q7.$$.fragment),vVe=l(),Kd=a("h2"),W7=a("a"),TFe=a("span"),F(u9.$$.fragment),V_r=l(),MFe=a("span"),X_r=o("AutoModelForInstanceSegmentation"),FVe=l(),Zo=a("div"),F(b9.$$.fragment),z_r=l(),Zd=a("p"),Q_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),mH=a("a"),W_r=o("from_pretrained()"),H_r=o(" class method or the "),gH=a("a"),U_r=o("from_config()"),J_r=o(` class
method.`),Y_r=l(),v9=a("p"),K_r=o("This class cannot be instantiated directly using "),EFe=a("code"),Z_r=o("__init__()"),eur=o(" (throws an error)."),our=l(),xt=a("div"),F(F9.$$.fragment),rur=l(),CFe=a("p"),tur=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),aur=l(),ec=a("p"),nur=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),sur=o("not"),lur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),iur=o("from_pretrained()"),dur=o(" to load the model weights."),cur=l(),F(H7.$$.fragment),fur=l(),Fo=a("div"),F(T9.$$.fragment),mur=l(),AFe=a("p"),gur=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),hur=l(),tn=a("p"),pur=o("The model class to instantiate is selected based on the "),LFe=a("code"),_ur=o("model_type"),uur=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),bur=o("pretrained_model_name_or_path"),vur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),Fur=o("pretrained_model_name_or_path"),Tur=o(":"),Mur=l(),$Fe=a("ul"),U7=a("li"),kFe=a("strong"),Eur=o("maskformer"),Cur=o(" \u2014 "),pH=a("a"),wur=o("MaskFormerForInstanceSegmentation"),Aur=o(" (MaskFormer model)"),Lur=l(),J7=a("p"),yur=o("The model is set in evaluation mode by default using "),SFe=a("code"),xur=o("model.eval()"),$ur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RFe=a("code"),kur=o("model.train()"),Sur=l(),F(Y7.$$.fragment),TVe=l(),oc=a("h2"),K7=a("a"),PFe=a("span"),F(M9.$$.fragment),Rur=l(),BFe=a("span"),Pur=o("TFAutoModel"),MVe=l(),er=a("div"),F(E9.$$.fragment),Bur=l(),rc=a("p"),Iur=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_H=a("a"),Nur=o("from_pretrained()"),qur=o(" class method or the "),uH=a("a"),jur=o("from_config()"),Dur=o(` class
method.`),Gur=l(),C9=a("p"),Our=o("This class cannot be instantiated directly using "),IFe=a("code"),Vur=o("__init__()"),Xur=o(" (throws an error)."),zur=l(),$t=a("div"),F(w9.$$.fragment),Qur=l(),NFe=a("p"),Wur=o("Instantiates one of the base model classes of the library from a configuration."),Hur=l(),tc=a("p"),Uur=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),Jur=o("not"),Yur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),Kur=o("from_pretrained()"),Zur=o(" to load the model weights."),e2r=l(),F(Z7.$$.fragment),o2r=l(),yr=a("div"),F(A9.$$.fragment),r2r=l(),jFe=a("p"),t2r=o("Instantiate one of the base model classes of the library from a pretrained model."),a2r=l(),an=a("p"),n2r=o("The model class to instantiate is selected based on the "),DFe=a("code"),s2r=o("model_type"),l2r=o(` property of the config object (either
passed as an argument or loaded from `),GFe=a("code"),i2r=o("pretrained_model_name_or_path"),d2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=a("code"),c2r=o("pretrained_model_name_or_path"),f2r=o(":"),m2r=l(),j=a("ul"),e8=a("li"),VFe=a("strong"),g2r=o("albert"),h2r=o(" \u2014 "),vH=a("a"),p2r=o("TFAlbertModel"),_2r=o(" (ALBERT model)"),u2r=l(),o8=a("li"),XFe=a("strong"),b2r=o("bart"),v2r=o(" \u2014 "),FH=a("a"),F2r=o("TFBartModel"),T2r=o(" (BART model)"),M2r=l(),r8=a("li"),zFe=a("strong"),E2r=o("bert"),C2r=o(" \u2014 "),TH=a("a"),w2r=o("TFBertModel"),A2r=o(" (BERT model)"),L2r=l(),t8=a("li"),QFe=a("strong"),y2r=o("blenderbot"),x2r=o(" \u2014 "),MH=a("a"),$2r=o("TFBlenderbotModel"),k2r=o(" (Blenderbot model)"),S2r=l(),a8=a("li"),WFe=a("strong"),R2r=o("blenderbot-small"),P2r=o(" \u2014 "),EH=a("a"),B2r=o("TFBlenderbotSmallModel"),I2r=o(" (BlenderbotSmall model)"),N2r=l(),n8=a("li"),HFe=a("strong"),q2r=o("camembert"),j2r=o(" \u2014 "),CH=a("a"),D2r=o("TFCamembertModel"),G2r=o(" (CamemBERT model)"),O2r=l(),s8=a("li"),UFe=a("strong"),V2r=o("clip"),X2r=o(" \u2014 "),wH=a("a"),z2r=o("TFCLIPModel"),Q2r=o(" (CLIP model)"),W2r=l(),l8=a("li"),JFe=a("strong"),H2r=o("convbert"),U2r=o(" \u2014 "),AH=a("a"),J2r=o("TFConvBertModel"),Y2r=o(" (ConvBERT model)"),K2r=l(),i8=a("li"),YFe=a("strong"),Z2r=o("convnext"),e1r=o(" \u2014 "),LH=a("a"),o1r=o("TFConvNextModel"),r1r=o(" (ConvNeXT model)"),t1r=l(),d8=a("li"),KFe=a("strong"),a1r=o("ctrl"),n1r=o(" \u2014 "),yH=a("a"),s1r=o("TFCTRLModel"),l1r=o(" (CTRL model)"),i1r=l(),c8=a("li"),ZFe=a("strong"),d1r=o("data2vec-vision"),c1r=o(" \u2014 "),xH=a("a"),f1r=o("TFData2VecVisionModel"),m1r=o(" (Data2VecVision model)"),g1r=l(),f8=a("li"),e6e=a("strong"),h1r=o("deberta"),p1r=o(" \u2014 "),$H=a("a"),_1r=o("TFDebertaModel"),u1r=o(" (DeBERTa model)"),b1r=l(),m8=a("li"),o6e=a("strong"),v1r=o("deberta-v2"),F1r=o(" \u2014 "),kH=a("a"),T1r=o("TFDebertaV2Model"),M1r=o(" (DeBERTa-v2 model)"),E1r=l(),g8=a("li"),r6e=a("strong"),C1r=o("distilbert"),w1r=o(" \u2014 "),SH=a("a"),A1r=o("TFDistilBertModel"),L1r=o(" (DistilBERT model)"),y1r=l(),h8=a("li"),t6e=a("strong"),x1r=o("dpr"),$1r=o(" \u2014 "),RH=a("a"),k1r=o("TFDPRQuestionEncoder"),S1r=o(" (DPR model)"),R1r=l(),p8=a("li"),a6e=a("strong"),P1r=o("electra"),B1r=o(" \u2014 "),PH=a("a"),I1r=o("TFElectraModel"),N1r=o(" (ELECTRA model)"),q1r=l(),_8=a("li"),n6e=a("strong"),j1r=o("flaubert"),D1r=o(" \u2014 "),BH=a("a"),G1r=o("TFFlaubertModel"),O1r=o(" (FlauBERT model)"),V1r=l(),Ws=a("li"),s6e=a("strong"),X1r=o("funnel"),z1r=o(" \u2014 "),IH=a("a"),Q1r=o("TFFunnelModel"),W1r=o(" or "),NH=a("a"),H1r=o("TFFunnelBaseModel"),U1r=o(" (Funnel Transformer model)"),J1r=l(),u8=a("li"),l6e=a("strong"),Y1r=o("gpt2"),K1r=o(" \u2014 "),qH=a("a"),Z1r=o("TFGPT2Model"),ebr=o(" (OpenAI GPT-2 model)"),obr=l(),b8=a("li"),i6e=a("strong"),rbr=o("gptj"),tbr=o(" \u2014 "),jH=a("a"),abr=o("TFGPTJModel"),nbr=o(" (GPT-J model)"),sbr=l(),v8=a("li"),d6e=a("strong"),lbr=o("hubert"),ibr=o(" \u2014 "),DH=a("a"),dbr=o("TFHubertModel"),cbr=o(" (Hubert model)"),fbr=l(),F8=a("li"),c6e=a("strong"),mbr=o("layoutlm"),gbr=o(" \u2014 "),GH=a("a"),hbr=o("TFLayoutLMModel"),pbr=o(" (LayoutLM model)"),_br=l(),T8=a("li"),f6e=a("strong"),ubr=o("led"),bbr=o(" \u2014 "),OH=a("a"),vbr=o("TFLEDModel"),Fbr=o(" (LED model)"),Tbr=l(),M8=a("li"),m6e=a("strong"),Mbr=o("longformer"),Ebr=o(" \u2014 "),VH=a("a"),Cbr=o("TFLongformerModel"),wbr=o(" (Longformer model)"),Abr=l(),E8=a("li"),g6e=a("strong"),Lbr=o("lxmert"),ybr=o(" \u2014 "),XH=a("a"),xbr=o("TFLxmertModel"),$br=o(" (LXMERT model)"),kbr=l(),C8=a("li"),h6e=a("strong"),Sbr=o("marian"),Rbr=o(" \u2014 "),zH=a("a"),Pbr=o("TFMarianModel"),Bbr=o(" (Marian model)"),Ibr=l(),w8=a("li"),p6e=a("strong"),Nbr=o("mbart"),qbr=o(" \u2014 "),QH=a("a"),jbr=o("TFMBartModel"),Dbr=o(" (mBART model)"),Gbr=l(),A8=a("li"),_6e=a("strong"),Obr=o("mobilebert"),Vbr=o(" \u2014 "),WH=a("a"),Xbr=o("TFMobileBertModel"),zbr=o(" (MobileBERT model)"),Qbr=l(),L8=a("li"),u6e=a("strong"),Wbr=o("mpnet"),Hbr=o(" \u2014 "),HH=a("a"),Ubr=o("TFMPNetModel"),Jbr=o(" (MPNet model)"),Ybr=l(),y8=a("li"),b6e=a("strong"),Kbr=o("mt5"),Zbr=o(" \u2014 "),UH=a("a"),evr=o("TFMT5Model"),ovr=o(" (MT5 model)"),rvr=l(),x8=a("li"),v6e=a("strong"),tvr=o("openai-gpt"),avr=o(" \u2014 "),JH=a("a"),nvr=o("TFOpenAIGPTModel"),svr=o(" (OpenAI GPT model)"),lvr=l(),$8=a("li"),F6e=a("strong"),ivr=o("opt"),dvr=o(" \u2014 "),YH=a("a"),cvr=o("TFOPTModel"),fvr=o(" (OPT model)"),mvr=l(),k8=a("li"),T6e=a("strong"),gvr=o("pegasus"),hvr=o(" \u2014 "),KH=a("a"),pvr=o("TFPegasusModel"),_vr=o(" (Pegasus model)"),uvr=l(),S8=a("li"),M6e=a("strong"),bvr=o("rembert"),vvr=o(" \u2014 "),ZH=a("a"),Fvr=o("TFRemBertModel"),Tvr=o(" (RemBERT model)"),Mvr=l(),R8=a("li"),E6e=a("strong"),Evr=o("roberta"),Cvr=o(" \u2014 "),eU=a("a"),wvr=o("TFRobertaModel"),Avr=o(" (RoBERTa model)"),Lvr=l(),P8=a("li"),C6e=a("strong"),yvr=o("roformer"),xvr=o(" \u2014 "),oU=a("a"),$vr=o("TFRoFormerModel"),kvr=o(" (RoFormer model)"),Svr=l(),B8=a("li"),w6e=a("strong"),Rvr=o("speech_to_text"),Pvr=o(" \u2014 "),rU=a("a"),Bvr=o("TFSpeech2TextModel"),Ivr=o(" (Speech2Text model)"),Nvr=l(),I8=a("li"),A6e=a("strong"),qvr=o("swin"),jvr=o(" \u2014 "),tU=a("a"),Dvr=o("TFSwinModel"),Gvr=o(" (Swin Transformer model)"),Ovr=l(),N8=a("li"),L6e=a("strong"),Vvr=o("t5"),Xvr=o(" \u2014 "),aU=a("a"),zvr=o("TFT5Model"),Qvr=o(" (T5 model)"),Wvr=l(),q8=a("li"),y6e=a("strong"),Hvr=o("tapas"),Uvr=o(" \u2014 "),nU=a("a"),Jvr=o("TFTapasModel"),Yvr=o(" (TAPAS model)"),Kvr=l(),j8=a("li"),x6e=a("strong"),Zvr=o("transfo-xl"),eFr=o(" \u2014 "),sU=a("a"),oFr=o("TFTransfoXLModel"),rFr=o(" (Transformer-XL model)"),tFr=l(),D8=a("li"),$6e=a("strong"),aFr=o("vit"),nFr=o(" \u2014 "),lU=a("a"),sFr=o("TFViTModel"),lFr=o(" (ViT model)"),iFr=l(),G8=a("li"),k6e=a("strong"),dFr=o("vit_mae"),cFr=o(" \u2014 "),iU=a("a"),fFr=o("TFViTMAEModel"),mFr=o(" (ViTMAE model)"),gFr=l(),O8=a("li"),S6e=a("strong"),hFr=o("wav2vec2"),pFr=o(" \u2014 "),dU=a("a"),_Fr=o("TFWav2Vec2Model"),uFr=o(" (Wav2Vec2 model)"),bFr=l(),V8=a("li"),R6e=a("strong"),vFr=o("xlm"),FFr=o(" \u2014 "),cU=a("a"),TFr=o("TFXLMModel"),MFr=o(" (XLM model)"),EFr=l(),X8=a("li"),P6e=a("strong"),CFr=o("xlm-roberta"),wFr=o(" \u2014 "),fU=a("a"),AFr=o("TFXLMRobertaModel"),LFr=o(" (XLM-RoBERTa model)"),yFr=l(),z8=a("li"),B6e=a("strong"),xFr=o("xlnet"),$Fr=o(" \u2014 "),mU=a("a"),kFr=o("TFXLNetModel"),SFr=o(" (XLNet model)"),RFr=l(),F(Q8.$$.fragment),EVe=l(),ac=a("h2"),W8=a("a"),I6e=a("span"),F(L9.$$.fragment),PFr=l(),N6e=a("span"),BFr=o("TFAutoModelForPreTraining"),CVe=l(),or=a("div"),F(y9.$$.fragment),IFr=l(),nc=a("p"),NFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gU=a("a"),qFr=o("from_pretrained()"),jFr=o(" class method or the "),hU=a("a"),DFr=o("from_config()"),GFr=o(` class
method.`),OFr=l(),x9=a("p"),VFr=o("This class cannot be instantiated directly using "),q6e=a("code"),XFr=o("__init__()"),zFr=o(" (throws an error)."),QFr=l(),kt=a("div"),F($9.$$.fragment),WFr=l(),j6e=a("p"),HFr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),UFr=l(),sc=a("p"),JFr=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),YFr=o("not"),KFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),ZFr=o("from_pretrained()"),e6r=o(" to load the model weights."),o6r=l(),F(H8.$$.fragment),r6r=l(),xr=a("div"),F(k9.$$.fragment),t6r=l(),G6e=a("p"),a6r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),n6r=l(),nn=a("p"),s6r=o("The model class to instantiate is selected based on the "),O6e=a("code"),l6r=o("model_type"),i6r=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),d6r=o("pretrained_model_name_or_path"),c6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),f6r=o("pretrained_model_name_or_path"),m6r=o(":"),g6r=l(),se=a("ul"),U8=a("li"),z6e=a("strong"),h6r=o("albert"),p6r=o(" \u2014 "),_U=a("a"),_6r=o("TFAlbertForPreTraining"),u6r=o(" (ALBERT model)"),b6r=l(),J8=a("li"),Q6e=a("strong"),v6r=o("bart"),F6r=o(" \u2014 "),uU=a("a"),T6r=o("TFBartForConditionalGeneration"),M6r=o(" (BART model)"),E6r=l(),Y8=a("li"),W6e=a("strong"),C6r=o("bert"),w6r=o(" \u2014 "),bU=a("a"),A6r=o("TFBertForPreTraining"),L6r=o(" (BERT model)"),y6r=l(),K8=a("li"),H6e=a("strong"),x6r=o("camembert"),$6r=o(" \u2014 "),vU=a("a"),k6r=o("TFCamembertForMaskedLM"),S6r=o(" (CamemBERT model)"),R6r=l(),Z8=a("li"),U6e=a("strong"),P6r=o("ctrl"),B6r=o(" \u2014 "),FU=a("a"),I6r=o("TFCTRLLMHeadModel"),N6r=o(" (CTRL model)"),q6r=l(),eM=a("li"),J6e=a("strong"),j6r=o("distilbert"),D6r=o(" \u2014 "),TU=a("a"),G6r=o("TFDistilBertForMaskedLM"),O6r=o(" (DistilBERT model)"),V6r=l(),oM=a("li"),Y6e=a("strong"),X6r=o("electra"),z6r=o(" \u2014 "),MU=a("a"),Q6r=o("TFElectraForPreTraining"),W6r=o(" (ELECTRA model)"),H6r=l(),rM=a("li"),K6e=a("strong"),U6r=o("flaubert"),J6r=o(" \u2014 "),EU=a("a"),Y6r=o("TFFlaubertWithLMHeadModel"),K6r=o(" (FlauBERT model)"),Z6r=l(),tM=a("li"),Z6e=a("strong"),eTr=o("funnel"),oTr=o(" \u2014 "),CU=a("a"),rTr=o("TFFunnelForPreTraining"),tTr=o(" (Funnel Transformer model)"),aTr=l(),aM=a("li"),eTe=a("strong"),nTr=o("gpt2"),sTr=o(" \u2014 "),wU=a("a"),lTr=o("TFGPT2LMHeadModel"),iTr=o(" (OpenAI GPT-2 model)"),dTr=l(),nM=a("li"),oTe=a("strong"),cTr=o("layoutlm"),fTr=o(" \u2014 "),AU=a("a"),mTr=o("TFLayoutLMForMaskedLM"),gTr=o(" (LayoutLM model)"),hTr=l(),sM=a("li"),rTe=a("strong"),pTr=o("lxmert"),_Tr=o(" \u2014 "),LU=a("a"),uTr=o("TFLxmertForPreTraining"),bTr=o(" (LXMERT model)"),vTr=l(),lM=a("li"),tTe=a("strong"),FTr=o("mobilebert"),TTr=o(" \u2014 "),yU=a("a"),MTr=o("TFMobileBertForPreTraining"),ETr=o(" (MobileBERT model)"),CTr=l(),iM=a("li"),aTe=a("strong"),wTr=o("mpnet"),ATr=o(" \u2014 "),xU=a("a"),LTr=o("TFMPNetForMaskedLM"),yTr=o(" (MPNet model)"),xTr=l(),dM=a("li"),nTe=a("strong"),$Tr=o("openai-gpt"),kTr=o(" \u2014 "),$U=a("a"),STr=o("TFOpenAIGPTLMHeadModel"),RTr=o(" (OpenAI GPT model)"),PTr=l(),cM=a("li"),sTe=a("strong"),BTr=o("roberta"),ITr=o(" \u2014 "),kU=a("a"),NTr=o("TFRobertaForMaskedLM"),qTr=o(" (RoBERTa model)"),jTr=l(),fM=a("li"),lTe=a("strong"),DTr=o("t5"),GTr=o(" \u2014 "),SU=a("a"),OTr=o("TFT5ForConditionalGeneration"),VTr=o(" (T5 model)"),XTr=l(),mM=a("li"),iTe=a("strong"),zTr=o("tapas"),QTr=o(" \u2014 "),RU=a("a"),WTr=o("TFTapasForMaskedLM"),HTr=o(" (TAPAS model)"),UTr=l(),gM=a("li"),dTe=a("strong"),JTr=o("transfo-xl"),YTr=o(" \u2014 "),PU=a("a"),KTr=o("TFTransfoXLLMHeadModel"),ZTr=o(" (Transformer-XL model)"),e7r=l(),hM=a("li"),cTe=a("strong"),o7r=o("vit_mae"),r7r=o(" \u2014 "),BU=a("a"),t7r=o("TFViTMAEForPreTraining"),a7r=o(" (ViTMAE model)"),n7r=l(),pM=a("li"),fTe=a("strong"),s7r=o("xlm"),l7r=o(" \u2014 "),IU=a("a"),i7r=o("TFXLMWithLMHeadModel"),d7r=o(" (XLM model)"),c7r=l(),_M=a("li"),mTe=a("strong"),f7r=o("xlm-roberta"),m7r=o(" \u2014 "),NU=a("a"),g7r=o("TFXLMRobertaForMaskedLM"),h7r=o(" (XLM-RoBERTa model)"),p7r=l(),uM=a("li"),gTe=a("strong"),_7r=o("xlnet"),u7r=o(" \u2014 "),qU=a("a"),b7r=o("TFXLNetLMHeadModel"),v7r=o(" (XLNet model)"),F7r=l(),F(bM.$$.fragment),wVe=l(),lc=a("h2"),vM=a("a"),hTe=a("span"),F(S9.$$.fragment),T7r=l(),pTe=a("span"),M7r=o("TFAutoModelForCausalLM"),AVe=l(),rr=a("div"),F(R9.$$.fragment),E7r=l(),ic=a("p"),C7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jU=a("a"),w7r=o("from_pretrained()"),A7r=o(" class method or the "),DU=a("a"),L7r=o("from_config()"),y7r=o(` class
method.`),x7r=l(),P9=a("p"),$7r=o("This class cannot be instantiated directly using "),_Te=a("code"),k7r=o("__init__()"),S7r=o(" (throws an error)."),R7r=l(),St=a("div"),F(B9.$$.fragment),P7r=l(),uTe=a("p"),B7r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),I7r=l(),dc=a("p"),N7r=o(`Note:
Loading a model from its configuration file does `),bTe=a("strong"),q7r=o("not"),j7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),D7r=o("from_pretrained()"),G7r=o(" to load the model weights."),O7r=l(),F(FM.$$.fragment),V7r=l(),$r=a("div"),F(I9.$$.fragment),X7r=l(),vTe=a("p"),z7r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Q7r=l(),sn=a("p"),W7r=o("The model class to instantiate is selected based on the "),FTe=a("code"),H7r=o("model_type"),U7r=o(` property of the config object (either
passed as an argument or loaded from `),TTe=a("code"),J7r=o("pretrained_model_name_or_path"),Y7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=a("code"),K7r=o("pretrained_model_name_or_path"),Z7r=o(":"),e8r=l(),Me=a("ul"),TM=a("li"),ETe=a("strong"),o8r=o("bert"),r8r=o(" \u2014 "),OU=a("a"),t8r=o("TFBertLMHeadModel"),a8r=o(" (BERT model)"),n8r=l(),MM=a("li"),CTe=a("strong"),s8r=o("camembert"),l8r=o(" \u2014 "),VU=a("a"),i8r=o("TFCamembertForCausalLM"),d8r=o(" (CamemBERT model)"),c8r=l(),EM=a("li"),wTe=a("strong"),f8r=o("ctrl"),m8r=o(" \u2014 "),XU=a("a"),g8r=o("TFCTRLLMHeadModel"),h8r=o(" (CTRL model)"),p8r=l(),CM=a("li"),ATe=a("strong"),_8r=o("gpt2"),u8r=o(" \u2014 "),zU=a("a"),b8r=o("TFGPT2LMHeadModel"),v8r=o(" (OpenAI GPT-2 model)"),F8r=l(),wM=a("li"),LTe=a("strong"),T8r=o("gptj"),M8r=o(" \u2014 "),QU=a("a"),E8r=o("TFGPTJForCausalLM"),C8r=o(" (GPT-J model)"),w8r=l(),AM=a("li"),yTe=a("strong"),A8r=o("openai-gpt"),L8r=o(" \u2014 "),WU=a("a"),y8r=o("TFOpenAIGPTLMHeadModel"),x8r=o(" (OpenAI GPT model)"),$8r=l(),LM=a("li"),xTe=a("strong"),k8r=o("opt"),S8r=o(" \u2014 "),HU=a("a"),R8r=o("TFOPTForCausalLM"),P8r=o(" (OPT model)"),B8r=l(),yM=a("li"),$Te=a("strong"),I8r=o("rembert"),N8r=o(" \u2014 "),UU=a("a"),q8r=o("TFRemBertForCausalLM"),j8r=o(" (RemBERT model)"),D8r=l(),xM=a("li"),kTe=a("strong"),G8r=o("roberta"),O8r=o(" \u2014 "),JU=a("a"),V8r=o("TFRobertaForCausalLM"),X8r=o(" (RoBERTa model)"),z8r=l(),$M=a("li"),STe=a("strong"),Q8r=o("roformer"),W8r=o(" \u2014 "),YU=a("a"),H8r=o("TFRoFormerForCausalLM"),U8r=o(" (RoFormer model)"),J8r=l(),kM=a("li"),RTe=a("strong"),Y8r=o("transfo-xl"),K8r=o(" \u2014 "),KU=a("a"),Z8r=o("TFTransfoXLLMHeadModel"),eMr=o(" (Transformer-XL model)"),oMr=l(),SM=a("li"),PTe=a("strong"),rMr=o("xlm"),tMr=o(" \u2014 "),ZU=a("a"),aMr=o("TFXLMWithLMHeadModel"),nMr=o(" (XLM model)"),sMr=l(),RM=a("li"),BTe=a("strong"),lMr=o("xlnet"),iMr=o(" \u2014 "),eJ=a("a"),dMr=o("TFXLNetLMHeadModel"),cMr=o(" (XLNet model)"),fMr=l(),F(PM.$$.fragment),LVe=l(),cc=a("h2"),BM=a("a"),ITe=a("span"),F(N9.$$.fragment),mMr=l(),NTe=a("span"),gMr=o("TFAutoModelForImageClassification"),yVe=l(),tr=a("div"),F(q9.$$.fragment),hMr=l(),fc=a("p"),pMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oJ=a("a"),_Mr=o("from_pretrained()"),uMr=o(" class method or the "),rJ=a("a"),bMr=o("from_config()"),vMr=o(` class
method.`),FMr=l(),j9=a("p"),TMr=o("This class cannot be instantiated directly using "),qTe=a("code"),MMr=o("__init__()"),EMr=o(" (throws an error)."),CMr=l(),Rt=a("div"),F(D9.$$.fragment),wMr=l(),jTe=a("p"),AMr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LMr=l(),mc=a("p"),yMr=o(`Note:
Loading a model from its configuration file does `),DTe=a("strong"),xMr=o("not"),$Mr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),kMr=o("from_pretrained()"),SMr=o(" to load the model weights."),RMr=l(),F(IM.$$.fragment),PMr=l(),kr=a("div"),F(G9.$$.fragment),BMr=l(),GTe=a("p"),IMr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),NMr=l(),ln=a("p"),qMr=o("The model class to instantiate is selected based on the "),OTe=a("code"),jMr=o("model_type"),DMr=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),GMr=o("pretrained_model_name_or_path"),OMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),VMr=o("pretrained_model_name_or_path"),XMr=o(":"),zMr=l(),dn=a("ul"),NM=a("li"),zTe=a("strong"),QMr=o("convnext"),WMr=o(" \u2014 "),aJ=a("a"),HMr=o("TFConvNextForImageClassification"),UMr=o(" (ConvNeXT model)"),JMr=l(),qM=a("li"),QTe=a("strong"),YMr=o("data2vec-vision"),KMr=o(" \u2014 "),nJ=a("a"),ZMr=o("TFData2VecVisionForImageClassification"),eEr=o(" (Data2VecVision model)"),oEr=l(),jM=a("li"),WTe=a("strong"),rEr=o("swin"),tEr=o(" \u2014 "),sJ=a("a"),aEr=o("TFSwinForImageClassification"),nEr=o(" (Swin Transformer model)"),sEr=l(),DM=a("li"),HTe=a("strong"),lEr=o("vit"),iEr=o(" \u2014 "),lJ=a("a"),dEr=o("TFViTForImageClassification"),cEr=o(" (ViT model)"),fEr=l(),F(GM.$$.fragment),xVe=l(),gc=a("h2"),OM=a("a"),UTe=a("span"),F(O9.$$.fragment),mEr=l(),JTe=a("span"),gEr=o("TFAutoModelForMaskedLM"),$Ve=l(),ar=a("div"),F(V9.$$.fragment),hEr=l(),hc=a("p"),pEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iJ=a("a"),_Er=o("from_pretrained()"),uEr=o(" class method or the "),dJ=a("a"),bEr=o("from_config()"),vEr=o(` class
method.`),FEr=l(),X9=a("p"),TEr=o("This class cannot be instantiated directly using "),YTe=a("code"),MEr=o("__init__()"),EEr=o(" (throws an error)."),CEr=l(),Pt=a("div"),F(z9.$$.fragment),wEr=l(),KTe=a("p"),AEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LEr=l(),pc=a("p"),yEr=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),xEr=o("not"),$Er=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),kEr=o("from_pretrained()"),SEr=o(" to load the model weights."),REr=l(),F(VM.$$.fragment),PEr=l(),Sr=a("div"),F(Q9.$$.fragment),BEr=l(),e7e=a("p"),IEr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),NEr=l(),cn=a("p"),qEr=o("The model class to instantiate is selected based on the "),o7e=a("code"),jEr=o("model_type"),DEr=o(` property of the config object (either
passed as an argument or loaded from `),r7e=a("code"),GEr=o("pretrained_model_name_or_path"),OEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t7e=a("code"),VEr=o("pretrained_model_name_or_path"),XEr=o(":"),zEr=l(),ie=a("ul"),XM=a("li"),a7e=a("strong"),QEr=o("albert"),WEr=o(" \u2014 "),fJ=a("a"),HEr=o("TFAlbertForMaskedLM"),UEr=o(" (ALBERT model)"),JEr=l(),zM=a("li"),n7e=a("strong"),YEr=o("bert"),KEr=o(" \u2014 "),mJ=a("a"),ZEr=o("TFBertForMaskedLM"),e4r=o(" (BERT model)"),o4r=l(),QM=a("li"),s7e=a("strong"),r4r=o("camembert"),t4r=o(" \u2014 "),gJ=a("a"),a4r=o("TFCamembertForMaskedLM"),n4r=o(" (CamemBERT model)"),s4r=l(),WM=a("li"),l7e=a("strong"),l4r=o("convbert"),i4r=o(" \u2014 "),hJ=a("a"),d4r=o("TFConvBertForMaskedLM"),c4r=o(" (ConvBERT model)"),f4r=l(),HM=a("li"),i7e=a("strong"),m4r=o("deberta"),g4r=o(" \u2014 "),pJ=a("a"),h4r=o("TFDebertaForMaskedLM"),p4r=o(" (DeBERTa model)"),_4r=l(),UM=a("li"),d7e=a("strong"),u4r=o("deberta-v2"),b4r=o(" \u2014 "),_J=a("a"),v4r=o("TFDebertaV2ForMaskedLM"),F4r=o(" (DeBERTa-v2 model)"),T4r=l(),JM=a("li"),c7e=a("strong"),M4r=o("distilbert"),E4r=o(" \u2014 "),uJ=a("a"),C4r=o("TFDistilBertForMaskedLM"),w4r=o(" (DistilBERT model)"),A4r=l(),YM=a("li"),f7e=a("strong"),L4r=o("electra"),y4r=o(" \u2014 "),bJ=a("a"),x4r=o("TFElectraForMaskedLM"),$4r=o(" (ELECTRA model)"),k4r=l(),KM=a("li"),m7e=a("strong"),S4r=o("flaubert"),R4r=o(" \u2014 "),vJ=a("a"),P4r=o("TFFlaubertWithLMHeadModel"),B4r=o(" (FlauBERT model)"),I4r=l(),ZM=a("li"),g7e=a("strong"),N4r=o("funnel"),q4r=o(" \u2014 "),FJ=a("a"),j4r=o("TFFunnelForMaskedLM"),D4r=o(" (Funnel Transformer model)"),G4r=l(),eE=a("li"),h7e=a("strong"),O4r=o("layoutlm"),V4r=o(" \u2014 "),TJ=a("a"),X4r=o("TFLayoutLMForMaskedLM"),z4r=o(" (LayoutLM model)"),Q4r=l(),oE=a("li"),p7e=a("strong"),W4r=o("longformer"),H4r=o(" \u2014 "),MJ=a("a"),U4r=o("TFLongformerForMaskedLM"),J4r=o(" (Longformer model)"),Y4r=l(),rE=a("li"),_7e=a("strong"),K4r=o("mobilebert"),Z4r=o(" \u2014 "),EJ=a("a"),eCr=o("TFMobileBertForMaskedLM"),oCr=o(" (MobileBERT model)"),rCr=l(),tE=a("li"),u7e=a("strong"),tCr=o("mpnet"),aCr=o(" \u2014 "),CJ=a("a"),nCr=o("TFMPNetForMaskedLM"),sCr=o(" (MPNet model)"),lCr=l(),aE=a("li"),b7e=a("strong"),iCr=o("rembert"),dCr=o(" \u2014 "),wJ=a("a"),cCr=o("TFRemBertForMaskedLM"),fCr=o(" (RemBERT model)"),mCr=l(),nE=a("li"),v7e=a("strong"),gCr=o("roberta"),hCr=o(" \u2014 "),AJ=a("a"),pCr=o("TFRobertaForMaskedLM"),_Cr=o(" (RoBERTa model)"),uCr=l(),sE=a("li"),F7e=a("strong"),bCr=o("roformer"),vCr=o(" \u2014 "),LJ=a("a"),FCr=o("TFRoFormerForMaskedLM"),TCr=o(" (RoFormer model)"),MCr=l(),lE=a("li"),T7e=a("strong"),ECr=o("tapas"),CCr=o(" \u2014 "),yJ=a("a"),wCr=o("TFTapasForMaskedLM"),ACr=o(" (TAPAS model)"),LCr=l(),iE=a("li"),M7e=a("strong"),yCr=o("xlm"),xCr=o(" \u2014 "),xJ=a("a"),$Cr=o("TFXLMWithLMHeadModel"),kCr=o(" (XLM model)"),SCr=l(),dE=a("li"),E7e=a("strong"),RCr=o("xlm-roberta"),PCr=o(" \u2014 "),$J=a("a"),BCr=o("TFXLMRobertaForMaskedLM"),ICr=o(" (XLM-RoBERTa model)"),NCr=l(),F(cE.$$.fragment),kVe=l(),_c=a("h2"),fE=a("a"),C7e=a("span"),F(W9.$$.fragment),qCr=l(),w7e=a("span"),jCr=o("TFAutoModelForSeq2SeqLM"),SVe=l(),nr=a("div"),F(H9.$$.fragment),DCr=l(),uc=a("p"),GCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kJ=a("a"),OCr=o("from_pretrained()"),VCr=o(" class method or the "),SJ=a("a"),XCr=o("from_config()"),zCr=o(` class
method.`),QCr=l(),U9=a("p"),WCr=o("This class cannot be instantiated directly using "),A7e=a("code"),HCr=o("__init__()"),UCr=o(" (throws an error)."),JCr=l(),Bt=a("div"),F(J9.$$.fragment),YCr=l(),L7e=a("p"),KCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ZCr=l(),bc=a("p"),e5r=o(`Note:
Loading a model from its configuration file does `),y7e=a("strong"),o5r=o("not"),r5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),t5r=o("from_pretrained()"),a5r=o(" to load the model weights."),n5r=l(),F(mE.$$.fragment),s5r=l(),Rr=a("div"),F(Y9.$$.fragment),l5r=l(),x7e=a("p"),i5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),d5r=l(),fn=a("p"),c5r=o("The model class to instantiate is selected based on the "),$7e=a("code"),f5r=o("model_type"),m5r=o(` property of the config object (either
passed as an argument or loaded from `),k7e=a("code"),g5r=o("pretrained_model_name_or_path"),h5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=a("code"),p5r=o("pretrained_model_name_or_path"),_5r=o(":"),u5r=l(),ye=a("ul"),gE=a("li"),R7e=a("strong"),b5r=o("bart"),v5r=o(" \u2014 "),PJ=a("a"),F5r=o("TFBartForConditionalGeneration"),T5r=o(" (BART model)"),M5r=l(),hE=a("li"),P7e=a("strong"),E5r=o("blenderbot"),C5r=o(" \u2014 "),BJ=a("a"),w5r=o("TFBlenderbotForConditionalGeneration"),A5r=o(" (Blenderbot model)"),L5r=l(),pE=a("li"),B7e=a("strong"),y5r=o("blenderbot-small"),x5r=o(" \u2014 "),IJ=a("a"),$5r=o("TFBlenderbotSmallForConditionalGeneration"),k5r=o(" (BlenderbotSmall model)"),S5r=l(),_E=a("li"),I7e=a("strong"),R5r=o("encoder-decoder"),P5r=o(" \u2014 "),NJ=a("a"),B5r=o("TFEncoderDecoderModel"),I5r=o(" (Encoder decoder model)"),N5r=l(),uE=a("li"),N7e=a("strong"),q5r=o("led"),j5r=o(" \u2014 "),qJ=a("a"),D5r=o("TFLEDForConditionalGeneration"),G5r=o(" (LED model)"),O5r=l(),bE=a("li"),q7e=a("strong"),V5r=o("marian"),X5r=o(" \u2014 "),jJ=a("a"),z5r=o("TFMarianMTModel"),Q5r=o(" (Marian model)"),W5r=l(),vE=a("li"),j7e=a("strong"),H5r=o("mbart"),U5r=o(" \u2014 "),DJ=a("a"),J5r=o("TFMBartForConditionalGeneration"),Y5r=o(" (mBART model)"),K5r=l(),FE=a("li"),D7e=a("strong"),Z5r=o("mt5"),e3r=o(" \u2014 "),GJ=a("a"),o3r=o("TFMT5ForConditionalGeneration"),r3r=o(" (MT5 model)"),t3r=l(),TE=a("li"),G7e=a("strong"),a3r=o("pegasus"),n3r=o(" \u2014 "),OJ=a("a"),s3r=o("TFPegasusForConditionalGeneration"),l3r=o(" (Pegasus model)"),i3r=l(),ME=a("li"),O7e=a("strong"),d3r=o("t5"),c3r=o(" \u2014 "),VJ=a("a"),f3r=o("TFT5ForConditionalGeneration"),m3r=o(" (T5 model)"),g3r=l(),F(EE.$$.fragment),RVe=l(),vc=a("h2"),CE=a("a"),V7e=a("span"),F(K9.$$.fragment),h3r=l(),X7e=a("span"),p3r=o("TFAutoModelForSequenceClassification"),PVe=l(),sr=a("div"),F(Z9.$$.fragment),_3r=l(),Fc=a("p"),u3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XJ=a("a"),b3r=o("from_pretrained()"),v3r=o(" class method or the "),zJ=a("a"),F3r=o("from_config()"),T3r=o(` class
method.`),M3r=l(),ex=a("p"),E3r=o("This class cannot be instantiated directly using "),z7e=a("code"),C3r=o("__init__()"),w3r=o(" (throws an error)."),A3r=l(),It=a("div"),F(ox.$$.fragment),L3r=l(),Q7e=a("p"),y3r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),x3r=l(),Tc=a("p"),$3r=o(`Note:
Loading a model from its configuration file does `),W7e=a("strong"),k3r=o("not"),S3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),R3r=o("from_pretrained()"),P3r=o(" to load the model weights."),B3r=l(),F(wE.$$.fragment),I3r=l(),Pr=a("div"),F(rx.$$.fragment),N3r=l(),H7e=a("p"),q3r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),j3r=l(),mn=a("p"),D3r=o("The model class to instantiate is selected based on the "),U7e=a("code"),G3r=o("model_type"),O3r=o(` property of the config object (either
passed as an argument or loaded from `),J7e=a("code"),V3r=o("pretrained_model_name_or_path"),X3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=a("code"),z3r=o("pretrained_model_name_or_path"),Q3r=o(":"),W3r=l(),te=a("ul"),AE=a("li"),K7e=a("strong"),H3r=o("albert"),U3r=o(" \u2014 "),WJ=a("a"),J3r=o("TFAlbertForSequenceClassification"),Y3r=o(" (ALBERT model)"),K3r=l(),LE=a("li"),Z7e=a("strong"),Z3r=o("bert"),e0r=o(" \u2014 "),HJ=a("a"),o0r=o("TFBertForSequenceClassification"),r0r=o(" (BERT model)"),t0r=l(),yE=a("li"),e8e=a("strong"),a0r=o("camembert"),n0r=o(" \u2014 "),UJ=a("a"),s0r=o("TFCamembertForSequenceClassification"),l0r=o(" (CamemBERT model)"),i0r=l(),xE=a("li"),o8e=a("strong"),d0r=o("convbert"),c0r=o(" \u2014 "),JJ=a("a"),f0r=o("TFConvBertForSequenceClassification"),m0r=o(" (ConvBERT model)"),g0r=l(),$E=a("li"),r8e=a("strong"),h0r=o("ctrl"),p0r=o(" \u2014 "),YJ=a("a"),_0r=o("TFCTRLForSequenceClassification"),u0r=o(" (CTRL model)"),b0r=l(),kE=a("li"),t8e=a("strong"),v0r=o("deberta"),F0r=o(" \u2014 "),KJ=a("a"),T0r=o("TFDebertaForSequenceClassification"),M0r=o(" (DeBERTa model)"),E0r=l(),SE=a("li"),a8e=a("strong"),C0r=o("deberta-v2"),w0r=o(" \u2014 "),ZJ=a("a"),A0r=o("TFDebertaV2ForSequenceClassification"),L0r=o(" (DeBERTa-v2 model)"),y0r=l(),RE=a("li"),n8e=a("strong"),x0r=o("distilbert"),$0r=o(" \u2014 "),eY=a("a"),k0r=o("TFDistilBertForSequenceClassification"),S0r=o(" (DistilBERT model)"),R0r=l(),PE=a("li"),s8e=a("strong"),P0r=o("electra"),B0r=o(" \u2014 "),oY=a("a"),I0r=o("TFElectraForSequenceClassification"),N0r=o(" (ELECTRA model)"),q0r=l(),BE=a("li"),l8e=a("strong"),j0r=o("flaubert"),D0r=o(" \u2014 "),rY=a("a"),G0r=o("TFFlaubertForSequenceClassification"),O0r=o(" (FlauBERT model)"),V0r=l(),IE=a("li"),i8e=a("strong"),X0r=o("funnel"),z0r=o(" \u2014 "),tY=a("a"),Q0r=o("TFFunnelForSequenceClassification"),W0r=o(" (Funnel Transformer model)"),H0r=l(),NE=a("li"),d8e=a("strong"),U0r=o("gpt2"),J0r=o(" \u2014 "),aY=a("a"),Y0r=o("TFGPT2ForSequenceClassification"),K0r=o(" (OpenAI GPT-2 model)"),Z0r=l(),qE=a("li"),c8e=a("strong"),ewr=o("gptj"),owr=o(" \u2014 "),nY=a("a"),rwr=o("TFGPTJForSequenceClassification"),twr=o(" (GPT-J model)"),awr=l(),jE=a("li"),f8e=a("strong"),nwr=o("layoutlm"),swr=o(" \u2014 "),sY=a("a"),lwr=o("TFLayoutLMForSequenceClassification"),iwr=o(" (LayoutLM model)"),dwr=l(),DE=a("li"),m8e=a("strong"),cwr=o("longformer"),fwr=o(" \u2014 "),lY=a("a"),mwr=o("TFLongformerForSequenceClassification"),gwr=o(" (Longformer model)"),hwr=l(),GE=a("li"),g8e=a("strong"),pwr=o("mobilebert"),_wr=o(" \u2014 "),iY=a("a"),uwr=o("TFMobileBertForSequenceClassification"),bwr=o(" (MobileBERT model)"),vwr=l(),OE=a("li"),h8e=a("strong"),Fwr=o("mpnet"),Twr=o(" \u2014 "),dY=a("a"),Mwr=o("TFMPNetForSequenceClassification"),Ewr=o(" (MPNet model)"),Cwr=l(),VE=a("li"),p8e=a("strong"),wwr=o("openai-gpt"),Awr=o(" \u2014 "),cY=a("a"),Lwr=o("TFOpenAIGPTForSequenceClassification"),ywr=o(" (OpenAI GPT model)"),xwr=l(),XE=a("li"),_8e=a("strong"),$wr=o("rembert"),kwr=o(" \u2014 "),fY=a("a"),Swr=o("TFRemBertForSequenceClassification"),Rwr=o(" (RemBERT model)"),Pwr=l(),zE=a("li"),u8e=a("strong"),Bwr=o("roberta"),Iwr=o(" \u2014 "),mY=a("a"),Nwr=o("TFRobertaForSequenceClassification"),qwr=o(" (RoBERTa model)"),jwr=l(),QE=a("li"),b8e=a("strong"),Dwr=o("roformer"),Gwr=o(" \u2014 "),gY=a("a"),Owr=o("TFRoFormerForSequenceClassification"),Vwr=o(" (RoFormer model)"),Xwr=l(),WE=a("li"),v8e=a("strong"),zwr=o("tapas"),Qwr=o(" \u2014 "),hY=a("a"),Wwr=o("TFTapasForSequenceClassification"),Hwr=o(" (TAPAS model)"),Uwr=l(),HE=a("li"),F8e=a("strong"),Jwr=o("transfo-xl"),Ywr=o(" \u2014 "),pY=a("a"),Kwr=o("TFTransfoXLForSequenceClassification"),Zwr=o(" (Transformer-XL model)"),eAr=l(),UE=a("li"),T8e=a("strong"),oAr=o("xlm"),rAr=o(" \u2014 "),_Y=a("a"),tAr=o("TFXLMForSequenceClassification"),aAr=o(" (XLM model)"),nAr=l(),JE=a("li"),M8e=a("strong"),sAr=o("xlm-roberta"),lAr=o(" \u2014 "),uY=a("a"),iAr=o("TFXLMRobertaForSequenceClassification"),dAr=o(" (XLM-RoBERTa model)"),cAr=l(),YE=a("li"),E8e=a("strong"),fAr=o("xlnet"),mAr=o(" \u2014 "),bY=a("a"),gAr=o("TFXLNetForSequenceClassification"),hAr=o(" (XLNet model)"),pAr=l(),F(KE.$$.fragment),BVe=l(),Mc=a("h2"),ZE=a("a"),C8e=a("span"),F(tx.$$.fragment),_Ar=l(),w8e=a("span"),uAr=o("TFAutoModelForMultipleChoice"),IVe=l(),lr=a("div"),F(ax.$$.fragment),bAr=l(),Ec=a("p"),vAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vY=a("a"),FAr=o("from_pretrained()"),TAr=o(" class method or the "),FY=a("a"),MAr=o("from_config()"),EAr=o(` class
method.`),CAr=l(),nx=a("p"),wAr=o("This class cannot be instantiated directly using "),A8e=a("code"),AAr=o("__init__()"),LAr=o(" (throws an error)."),yAr=l(),Nt=a("div"),F(sx.$$.fragment),xAr=l(),L8e=a("p"),$Ar=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kAr=l(),Cc=a("p"),SAr=o(`Note:
Loading a model from its configuration file does `),y8e=a("strong"),RAr=o("not"),PAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),BAr=o("from_pretrained()"),IAr=o(" to load the model weights."),NAr=l(),F(e4.$$.fragment),qAr=l(),Br=a("div"),F(lx.$$.fragment),jAr=l(),x8e=a("p"),DAr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),GAr=l(),gn=a("p"),OAr=o("The model class to instantiate is selected based on the "),$8e=a("code"),VAr=o("model_type"),XAr=o(` property of the config object (either
passed as an argument or loaded from `),k8e=a("code"),zAr=o("pretrained_model_name_or_path"),QAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S8e=a("code"),WAr=o("pretrained_model_name_or_path"),HAr=o(":"),UAr=l(),_e=a("ul"),o4=a("li"),R8e=a("strong"),JAr=o("albert"),YAr=o(" \u2014 "),MY=a("a"),KAr=o("TFAlbertForMultipleChoice"),ZAr=o(" (ALBERT model)"),eLr=l(),r4=a("li"),P8e=a("strong"),oLr=o("bert"),rLr=o(" \u2014 "),EY=a("a"),tLr=o("TFBertForMultipleChoice"),aLr=o(" (BERT model)"),nLr=l(),t4=a("li"),B8e=a("strong"),sLr=o("camembert"),lLr=o(" \u2014 "),CY=a("a"),iLr=o("TFCamembertForMultipleChoice"),dLr=o(" (CamemBERT model)"),cLr=l(),a4=a("li"),I8e=a("strong"),fLr=o("convbert"),mLr=o(" \u2014 "),wY=a("a"),gLr=o("TFConvBertForMultipleChoice"),hLr=o(" (ConvBERT model)"),pLr=l(),n4=a("li"),N8e=a("strong"),_Lr=o("distilbert"),uLr=o(" \u2014 "),AY=a("a"),bLr=o("TFDistilBertForMultipleChoice"),vLr=o(" (DistilBERT model)"),FLr=l(),s4=a("li"),q8e=a("strong"),TLr=o("electra"),MLr=o(" \u2014 "),LY=a("a"),ELr=o("TFElectraForMultipleChoice"),CLr=o(" (ELECTRA model)"),wLr=l(),l4=a("li"),j8e=a("strong"),ALr=o("flaubert"),LLr=o(" \u2014 "),yY=a("a"),yLr=o("TFFlaubertForMultipleChoice"),xLr=o(" (FlauBERT model)"),$Lr=l(),i4=a("li"),D8e=a("strong"),kLr=o("funnel"),SLr=o(" \u2014 "),xY=a("a"),RLr=o("TFFunnelForMultipleChoice"),PLr=o(" (Funnel Transformer model)"),BLr=l(),d4=a("li"),G8e=a("strong"),ILr=o("longformer"),NLr=o(" \u2014 "),$Y=a("a"),qLr=o("TFLongformerForMultipleChoice"),jLr=o(" (Longformer model)"),DLr=l(),c4=a("li"),O8e=a("strong"),GLr=o("mobilebert"),OLr=o(" \u2014 "),kY=a("a"),VLr=o("TFMobileBertForMultipleChoice"),XLr=o(" (MobileBERT model)"),zLr=l(),f4=a("li"),V8e=a("strong"),QLr=o("mpnet"),WLr=o(" \u2014 "),SY=a("a"),HLr=o("TFMPNetForMultipleChoice"),ULr=o(" (MPNet model)"),JLr=l(),m4=a("li"),X8e=a("strong"),YLr=o("rembert"),KLr=o(" \u2014 "),RY=a("a"),ZLr=o("TFRemBertForMultipleChoice"),eyr=o(" (RemBERT model)"),oyr=l(),g4=a("li"),z8e=a("strong"),ryr=o("roberta"),tyr=o(" \u2014 "),PY=a("a"),ayr=o("TFRobertaForMultipleChoice"),nyr=o(" (RoBERTa model)"),syr=l(),h4=a("li"),Q8e=a("strong"),lyr=o("roformer"),iyr=o(" \u2014 "),BY=a("a"),dyr=o("TFRoFormerForMultipleChoice"),cyr=o(" (RoFormer model)"),fyr=l(),p4=a("li"),W8e=a("strong"),myr=o("xlm"),gyr=o(" \u2014 "),IY=a("a"),hyr=o("TFXLMForMultipleChoice"),pyr=o(" (XLM model)"),_yr=l(),_4=a("li"),H8e=a("strong"),uyr=o("xlm-roberta"),byr=o(" \u2014 "),NY=a("a"),vyr=o("TFXLMRobertaForMultipleChoice"),Fyr=o(" (XLM-RoBERTa model)"),Tyr=l(),u4=a("li"),U8e=a("strong"),Myr=o("xlnet"),Eyr=o(" \u2014 "),qY=a("a"),Cyr=o("TFXLNetForMultipleChoice"),wyr=o(" (XLNet model)"),Ayr=l(),F(b4.$$.fragment),NVe=l(),wc=a("h2"),v4=a("a"),J8e=a("span"),F(ix.$$.fragment),Lyr=l(),Y8e=a("span"),yyr=o("TFAutoModelForNextSentencePrediction"),qVe=l(),ir=a("div"),F(dx.$$.fragment),xyr=l(),Ac=a("p"),$yr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jY=a("a"),kyr=o("from_pretrained()"),Syr=o(" class method or the "),DY=a("a"),Ryr=o("from_config()"),Pyr=o(` class
method.`),Byr=l(),cx=a("p"),Iyr=o("This class cannot be instantiated directly using "),K8e=a("code"),Nyr=o("__init__()"),qyr=o(" (throws an error)."),jyr=l(),qt=a("div"),F(fx.$$.fragment),Dyr=l(),Z8e=a("p"),Gyr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Oyr=l(),Lc=a("p"),Vyr=o(`Note:
Loading a model from its configuration file does `),eMe=a("strong"),Xyr=o("not"),zyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),Qyr=o("from_pretrained()"),Wyr=o(" to load the model weights."),Hyr=l(),F(F4.$$.fragment),Uyr=l(),Ir=a("div"),F(mx.$$.fragment),Jyr=l(),oMe=a("p"),Yyr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kyr=l(),hn=a("p"),Zyr=o("The model class to instantiate is selected based on the "),rMe=a("code"),e9r=o("model_type"),o9r=o(` property of the config object (either
passed as an argument or loaded from `),tMe=a("code"),r9r=o("pretrained_model_name_or_path"),t9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=a("code"),a9r=o("pretrained_model_name_or_path"),n9r=o(":"),s9r=l(),gx=a("ul"),T4=a("li"),nMe=a("strong"),l9r=o("bert"),i9r=o(" \u2014 "),OY=a("a"),d9r=o("TFBertForNextSentencePrediction"),c9r=o(" (BERT model)"),f9r=l(),M4=a("li"),sMe=a("strong"),m9r=o("mobilebert"),g9r=o(" \u2014 "),VY=a("a"),h9r=o("TFMobileBertForNextSentencePrediction"),p9r=o(" (MobileBERT model)"),_9r=l(),F(E4.$$.fragment),jVe=l(),yc=a("h2"),C4=a("a"),lMe=a("span"),F(hx.$$.fragment),u9r=l(),iMe=a("span"),b9r=o("TFAutoModelForTableQuestionAnswering"),DVe=l(),dr=a("div"),F(px.$$.fragment),v9r=l(),xc=a("p"),F9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XY=a("a"),T9r=o("from_pretrained()"),M9r=o(" class method or the "),zY=a("a"),E9r=o("from_config()"),C9r=o(` class
method.`),w9r=l(),_x=a("p"),A9r=o("This class cannot be instantiated directly using "),dMe=a("code"),L9r=o("__init__()"),y9r=o(" (throws an error)."),x9r=l(),jt=a("div"),F(ux.$$.fragment),$9r=l(),cMe=a("p"),k9r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),S9r=l(),$c=a("p"),R9r=o(`Note:
Loading a model from its configuration file does `),fMe=a("strong"),P9r=o("not"),B9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),I9r=o("from_pretrained()"),N9r=o(" to load the model weights."),q9r=l(),F(w4.$$.fragment),j9r=l(),Nr=a("div"),F(bx.$$.fragment),D9r=l(),mMe=a("p"),G9r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),O9r=l(),pn=a("p"),V9r=o("The model class to instantiate is selected based on the "),gMe=a("code"),X9r=o("model_type"),z9r=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),Q9r=o("pretrained_model_name_or_path"),W9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=a("code"),H9r=o("pretrained_model_name_or_path"),U9r=o(":"),J9r=l(),_Me=a("ul"),A4=a("li"),uMe=a("strong"),Y9r=o("tapas"),K9r=o(" \u2014 "),WY=a("a"),Z9r=o("TFTapasForQuestionAnswering"),exr=o(" (TAPAS model)"),oxr=l(),F(L4.$$.fragment),GVe=l(),kc=a("h2"),y4=a("a"),bMe=a("span"),F(vx.$$.fragment),rxr=l(),vMe=a("span"),txr=o("TFAutoModelForTokenClassification"),OVe=l(),cr=a("div"),F(Fx.$$.fragment),axr=l(),Sc=a("p"),nxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HY=a("a"),sxr=o("from_pretrained()"),lxr=o(" class method or the "),UY=a("a"),ixr=o("from_config()"),dxr=o(` class
method.`),cxr=l(),Tx=a("p"),fxr=o("This class cannot be instantiated directly using "),FMe=a("code"),mxr=o("__init__()"),gxr=o(" (throws an error)."),hxr=l(),Dt=a("div"),F(Mx.$$.fragment),pxr=l(),TMe=a("p"),_xr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uxr=l(),Rc=a("p"),bxr=o(`Note:
Loading a model from its configuration file does `),MMe=a("strong"),vxr=o("not"),Fxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),Txr=o("from_pretrained()"),Mxr=o(" to load the model weights."),Exr=l(),F(x4.$$.fragment),Cxr=l(),qr=a("div"),F(Ex.$$.fragment),wxr=l(),EMe=a("p"),Axr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Lxr=l(),_n=a("p"),yxr=o("The model class to instantiate is selected based on the "),CMe=a("code"),xxr=o("model_type"),$xr=o(` property of the config object (either
passed as an argument or loaded from `),wMe=a("code"),kxr=o("pretrained_model_name_or_path"),Sxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=a("code"),Rxr=o("pretrained_model_name_or_path"),Pxr=o(":"),Bxr=l(),de=a("ul"),$4=a("li"),LMe=a("strong"),Ixr=o("albert"),Nxr=o(" \u2014 "),YY=a("a"),qxr=o("TFAlbertForTokenClassification"),jxr=o(" (ALBERT model)"),Dxr=l(),k4=a("li"),yMe=a("strong"),Gxr=o("bert"),Oxr=o(" \u2014 "),KY=a("a"),Vxr=o("TFBertForTokenClassification"),Xxr=o(" (BERT model)"),zxr=l(),S4=a("li"),xMe=a("strong"),Qxr=o("camembert"),Wxr=o(" \u2014 "),ZY=a("a"),Hxr=o("TFCamembertForTokenClassification"),Uxr=o(" (CamemBERT model)"),Jxr=l(),R4=a("li"),$Me=a("strong"),Yxr=o("convbert"),Kxr=o(" \u2014 "),eK=a("a"),Zxr=o("TFConvBertForTokenClassification"),e$r=o(" (ConvBERT model)"),o$r=l(),P4=a("li"),kMe=a("strong"),r$r=o("deberta"),t$r=o(" \u2014 "),oK=a("a"),a$r=o("TFDebertaForTokenClassification"),n$r=o(" (DeBERTa model)"),s$r=l(),B4=a("li"),SMe=a("strong"),l$r=o("deberta-v2"),i$r=o(" \u2014 "),rK=a("a"),d$r=o("TFDebertaV2ForTokenClassification"),c$r=o(" (DeBERTa-v2 model)"),f$r=l(),I4=a("li"),RMe=a("strong"),m$r=o("distilbert"),g$r=o(" \u2014 "),tK=a("a"),h$r=o("TFDistilBertForTokenClassification"),p$r=o(" (DistilBERT model)"),_$r=l(),N4=a("li"),PMe=a("strong"),u$r=o("electra"),b$r=o(" \u2014 "),aK=a("a"),v$r=o("TFElectraForTokenClassification"),F$r=o(" (ELECTRA model)"),T$r=l(),q4=a("li"),BMe=a("strong"),M$r=o("flaubert"),E$r=o(" \u2014 "),nK=a("a"),C$r=o("TFFlaubertForTokenClassification"),w$r=o(" (FlauBERT model)"),A$r=l(),j4=a("li"),IMe=a("strong"),L$r=o("funnel"),y$r=o(" \u2014 "),sK=a("a"),x$r=o("TFFunnelForTokenClassification"),$$r=o(" (Funnel Transformer model)"),k$r=l(),D4=a("li"),NMe=a("strong"),S$r=o("layoutlm"),R$r=o(" \u2014 "),lK=a("a"),P$r=o("TFLayoutLMForTokenClassification"),B$r=o(" (LayoutLM model)"),I$r=l(),G4=a("li"),qMe=a("strong"),N$r=o("longformer"),q$r=o(" \u2014 "),iK=a("a"),j$r=o("TFLongformerForTokenClassification"),D$r=o(" (Longformer model)"),G$r=l(),O4=a("li"),jMe=a("strong"),O$r=o("mobilebert"),V$r=o(" \u2014 "),dK=a("a"),X$r=o("TFMobileBertForTokenClassification"),z$r=o(" (MobileBERT model)"),Q$r=l(),V4=a("li"),DMe=a("strong"),W$r=o("mpnet"),H$r=o(" \u2014 "),cK=a("a"),U$r=o("TFMPNetForTokenClassification"),J$r=o(" (MPNet model)"),Y$r=l(),X4=a("li"),GMe=a("strong"),K$r=o("rembert"),Z$r=o(" \u2014 "),fK=a("a"),ekr=o("TFRemBertForTokenClassification"),okr=o(" (RemBERT model)"),rkr=l(),z4=a("li"),OMe=a("strong"),tkr=o("roberta"),akr=o(" \u2014 "),mK=a("a"),nkr=o("TFRobertaForTokenClassification"),skr=o(" (RoBERTa model)"),lkr=l(),Q4=a("li"),VMe=a("strong"),ikr=o("roformer"),dkr=o(" \u2014 "),gK=a("a"),ckr=o("TFRoFormerForTokenClassification"),fkr=o(" (RoFormer model)"),mkr=l(),W4=a("li"),XMe=a("strong"),gkr=o("xlm"),hkr=o(" \u2014 "),hK=a("a"),pkr=o("TFXLMForTokenClassification"),_kr=o(" (XLM model)"),ukr=l(),H4=a("li"),zMe=a("strong"),bkr=o("xlm-roberta"),vkr=o(" \u2014 "),pK=a("a"),Fkr=o("TFXLMRobertaForTokenClassification"),Tkr=o(" (XLM-RoBERTa model)"),Mkr=l(),U4=a("li"),QMe=a("strong"),Ekr=o("xlnet"),Ckr=o(" \u2014 "),_K=a("a"),wkr=o("TFXLNetForTokenClassification"),Akr=o(" (XLNet model)"),Lkr=l(),F(J4.$$.fragment),VVe=l(),Pc=a("h2"),Y4=a("a"),WMe=a("span"),F(Cx.$$.fragment),ykr=l(),HMe=a("span"),xkr=o("TFAutoModelForQuestionAnswering"),XVe=l(),fr=a("div"),F(wx.$$.fragment),$kr=l(),Bc=a("p"),kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uK=a("a"),Skr=o("from_pretrained()"),Rkr=o(" class method or the "),bK=a("a"),Pkr=o("from_config()"),Bkr=o(` class
method.`),Ikr=l(),Ax=a("p"),Nkr=o("This class cannot be instantiated directly using "),UMe=a("code"),qkr=o("__init__()"),jkr=o(" (throws an error)."),Dkr=l(),Gt=a("div"),F(Lx.$$.fragment),Gkr=l(),JMe=a("p"),Okr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Vkr=l(),Ic=a("p"),Xkr=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),zkr=o("not"),Qkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),Wkr=o("from_pretrained()"),Hkr=o(" to load the model weights."),Ukr=l(),F(K4.$$.fragment),Jkr=l(),jr=a("div"),F(yx.$$.fragment),Ykr=l(),KMe=a("p"),Kkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zkr=l(),un=a("p"),eSr=o("The model class to instantiate is selected based on the "),ZMe=a("code"),oSr=o("model_type"),rSr=o(` property of the config object (either
passed as an argument or loaded from `),eEe=a("code"),tSr=o("pretrained_model_name_or_path"),aSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=a("code"),nSr=o("pretrained_model_name_or_path"),sSr=o(":"),lSr=l(),ce=a("ul"),Z4=a("li"),rEe=a("strong"),iSr=o("albert"),dSr=o(" \u2014 "),FK=a("a"),cSr=o("TFAlbertForQuestionAnswering"),fSr=o(" (ALBERT model)"),mSr=l(),eC=a("li"),tEe=a("strong"),gSr=o("bert"),hSr=o(" \u2014 "),TK=a("a"),pSr=o("TFBertForQuestionAnswering"),_Sr=o(" (BERT model)"),uSr=l(),oC=a("li"),aEe=a("strong"),bSr=o("camembert"),vSr=o(" \u2014 "),MK=a("a"),FSr=o("TFCamembertForQuestionAnswering"),TSr=o(" (CamemBERT model)"),MSr=l(),rC=a("li"),nEe=a("strong"),ESr=o("convbert"),CSr=o(" \u2014 "),EK=a("a"),wSr=o("TFConvBertForQuestionAnswering"),ASr=o(" (ConvBERT model)"),LSr=l(),tC=a("li"),sEe=a("strong"),ySr=o("deberta"),xSr=o(" \u2014 "),CK=a("a"),$Sr=o("TFDebertaForQuestionAnswering"),kSr=o(" (DeBERTa model)"),SSr=l(),aC=a("li"),lEe=a("strong"),RSr=o("deberta-v2"),PSr=o(" \u2014 "),wK=a("a"),BSr=o("TFDebertaV2ForQuestionAnswering"),ISr=o(" (DeBERTa-v2 model)"),NSr=l(),nC=a("li"),iEe=a("strong"),qSr=o("distilbert"),jSr=o(" \u2014 "),AK=a("a"),DSr=o("TFDistilBertForQuestionAnswering"),GSr=o(" (DistilBERT model)"),OSr=l(),sC=a("li"),dEe=a("strong"),VSr=o("electra"),XSr=o(" \u2014 "),LK=a("a"),zSr=o("TFElectraForQuestionAnswering"),QSr=o(" (ELECTRA model)"),WSr=l(),lC=a("li"),cEe=a("strong"),HSr=o("flaubert"),USr=o(" \u2014 "),yK=a("a"),JSr=o("TFFlaubertForQuestionAnsweringSimple"),YSr=o(" (FlauBERT model)"),KSr=l(),iC=a("li"),fEe=a("strong"),ZSr=o("funnel"),eRr=o(" \u2014 "),xK=a("a"),oRr=o("TFFunnelForQuestionAnswering"),rRr=o(" (Funnel Transformer model)"),tRr=l(),dC=a("li"),mEe=a("strong"),aRr=o("gptj"),nRr=o(" \u2014 "),$K=a("a"),sRr=o("TFGPTJForQuestionAnswering"),lRr=o(" (GPT-J model)"),iRr=l(),cC=a("li"),gEe=a("strong"),dRr=o("longformer"),cRr=o(" \u2014 "),kK=a("a"),fRr=o("TFLongformerForQuestionAnswering"),mRr=o(" (Longformer model)"),gRr=l(),fC=a("li"),hEe=a("strong"),hRr=o("mobilebert"),pRr=o(" \u2014 "),SK=a("a"),_Rr=o("TFMobileBertForQuestionAnswering"),uRr=o(" (MobileBERT model)"),bRr=l(),mC=a("li"),pEe=a("strong"),vRr=o("mpnet"),FRr=o(" \u2014 "),RK=a("a"),TRr=o("TFMPNetForQuestionAnswering"),MRr=o(" (MPNet model)"),ERr=l(),gC=a("li"),_Ee=a("strong"),CRr=o("rembert"),wRr=o(" \u2014 "),PK=a("a"),ARr=o("TFRemBertForQuestionAnswering"),LRr=o(" (RemBERT model)"),yRr=l(),hC=a("li"),uEe=a("strong"),xRr=o("roberta"),$Rr=o(" \u2014 "),BK=a("a"),kRr=o("TFRobertaForQuestionAnswering"),SRr=o(" (RoBERTa model)"),RRr=l(),pC=a("li"),bEe=a("strong"),PRr=o("roformer"),BRr=o(" \u2014 "),IK=a("a"),IRr=o("TFRoFormerForQuestionAnswering"),NRr=o(" (RoFormer model)"),qRr=l(),_C=a("li"),vEe=a("strong"),jRr=o("xlm"),DRr=o(" \u2014 "),NK=a("a"),GRr=o("TFXLMForQuestionAnsweringSimple"),ORr=o(" (XLM model)"),VRr=l(),uC=a("li"),FEe=a("strong"),XRr=o("xlm-roberta"),zRr=o(" \u2014 "),qK=a("a"),QRr=o("TFXLMRobertaForQuestionAnswering"),WRr=o(" (XLM-RoBERTa model)"),HRr=l(),bC=a("li"),TEe=a("strong"),URr=o("xlnet"),JRr=o(" \u2014 "),jK=a("a"),YRr=o("TFXLNetForQuestionAnsweringSimple"),KRr=o(" (XLNet model)"),ZRr=l(),F(vC.$$.fragment),zVe=l(),Nc=a("h2"),FC=a("a"),MEe=a("span"),F(xx.$$.fragment),ePr=l(),EEe=a("span"),oPr=o("TFAutoModelForVision2Seq"),QVe=l(),mr=a("div"),F($x.$$.fragment),rPr=l(),qc=a("p"),tPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DK=a("a"),aPr=o("from_pretrained()"),nPr=o(" class method or the "),GK=a("a"),sPr=o("from_config()"),lPr=o(` class
method.`),iPr=l(),kx=a("p"),dPr=o("This class cannot be instantiated directly using "),CEe=a("code"),cPr=o("__init__()"),fPr=o(" (throws an error)."),mPr=l(),Ot=a("div"),F(Sx.$$.fragment),gPr=l(),wEe=a("p"),hPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pPr=l(),jc=a("p"),_Pr=o(`Note:
Loading a model from its configuration file does `),AEe=a("strong"),uPr=o("not"),bPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),vPr=o("from_pretrained()"),FPr=o(" to load the model weights."),TPr=l(),F(TC.$$.fragment),MPr=l(),Dr=a("div"),F(Rx.$$.fragment),EPr=l(),LEe=a("p"),CPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wPr=l(),bn=a("p"),APr=o("The model class to instantiate is selected based on the "),yEe=a("code"),LPr=o("model_type"),yPr=o(` property of the config object (either
passed as an argument or loaded from `),xEe=a("code"),xPr=o("pretrained_model_name_or_path"),$Pr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ee=a("code"),kPr=o("pretrained_model_name_or_path"),SPr=o(":"),RPr=l(),kEe=a("ul"),MC=a("li"),SEe=a("strong"),PPr=o("vision-encoder-decoder"),BPr=o(" \u2014 "),VK=a("a"),IPr=o("TFVisionEncoderDecoderModel"),NPr=o(" (Vision Encoder decoder model)"),qPr=l(),F(EC.$$.fragment),WVe=l(),Dc=a("h2"),CC=a("a"),REe=a("span"),F(Px.$$.fragment),jPr=l(),PEe=a("span"),DPr=o("TFAutoModelForSpeechSeq2Seq"),HVe=l(),gr=a("div"),F(Bx.$$.fragment),GPr=l(),Gc=a("p"),OPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XK=a("a"),VPr=o("from_pretrained()"),XPr=o(" class method or the "),zK=a("a"),zPr=o("from_config()"),QPr=o(` class
method.`),WPr=l(),Ix=a("p"),HPr=o("This class cannot be instantiated directly using "),BEe=a("code"),UPr=o("__init__()"),JPr=o(" (throws an error)."),YPr=l(),Vt=a("div"),F(Nx.$$.fragment),KPr=l(),IEe=a("p"),ZPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eBr=l(),Oc=a("p"),oBr=o(`Note:
Loading a model from its configuration file does `),NEe=a("strong"),rBr=o("not"),tBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),aBr=o("from_pretrained()"),nBr=o(" to load the model weights."),sBr=l(),F(wC.$$.fragment),lBr=l(),Gr=a("div"),F(qx.$$.fragment),iBr=l(),qEe=a("p"),dBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cBr=l(),vn=a("p"),fBr=o("The model class to instantiate is selected based on the "),jEe=a("code"),mBr=o("model_type"),gBr=o(` property of the config object (either
passed as an argument or loaded from `),DEe=a("code"),hBr=o("pretrained_model_name_or_path"),pBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=a("code"),_Br=o("pretrained_model_name_or_path"),uBr=o(":"),bBr=l(),OEe=a("ul"),AC=a("li"),VEe=a("strong"),vBr=o("speech_to_text"),FBr=o(" \u2014 "),WK=a("a"),TBr=o("TFSpeech2TextForConditionalGeneration"),MBr=o(" (Speech2Text model)"),EBr=l(),F(LC.$$.fragment),UVe=l(),Vc=a("h2"),yC=a("a"),XEe=a("span"),F(jx.$$.fragment),CBr=l(),zEe=a("span"),wBr=o("FlaxAutoModel"),JVe=l(),hr=a("div"),F(Dx.$$.fragment),ABr=l(),Xc=a("p"),LBr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HK=a("a"),yBr=o("from_pretrained()"),xBr=o(" class method or the "),UK=a("a"),$Br=o("from_config()"),kBr=o(` class
method.`),SBr=l(),Gx=a("p"),RBr=o("This class cannot be instantiated directly using "),QEe=a("code"),PBr=o("__init__()"),BBr=o(" (throws an error)."),IBr=l(),Xt=a("div"),F(Ox.$$.fragment),NBr=l(),WEe=a("p"),qBr=o("Instantiates one of the base model classes of the library from a configuration."),jBr=l(),zc=a("p"),DBr=o(`Note:
Loading a model from its configuration file does `),HEe=a("strong"),GBr=o("not"),OBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),VBr=o("from_pretrained()"),XBr=o(" to load the model weights."),zBr=l(),F(xC.$$.fragment),QBr=l(),Or=a("div"),F(Vx.$$.fragment),WBr=l(),UEe=a("p"),HBr=o("Instantiate one of the base model classes of the library from a pretrained model."),UBr=l(),Fn=a("p"),JBr=o("The model class to instantiate is selected based on the "),JEe=a("code"),YBr=o("model_type"),KBr=o(` property of the config object (either
passed as an argument or loaded from `),YEe=a("code"),ZBr=o("pretrained_model_name_or_path"),eIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(":"),tIr=l(),oe=a("ul"),$C=a("li"),ZEe=a("strong"),aIr=o("albert"),nIr=o(" \u2014 "),YK=a("a"),sIr=o("FlaxAlbertModel"),lIr=o(" (ALBERT model)"),iIr=l(),kC=a("li"),e4e=a("strong"),dIr=o("bart"),cIr=o(" \u2014 "),KK=a("a"),fIr=o("FlaxBartModel"),mIr=o(" (BART model)"),gIr=l(),SC=a("li"),o4e=a("strong"),hIr=o("beit"),pIr=o(" \u2014 "),ZK=a("a"),_Ir=o("FlaxBeitModel"),uIr=o(" (BEiT model)"),bIr=l(),RC=a("li"),r4e=a("strong"),vIr=o("bert"),FIr=o(" \u2014 "),eZ=a("a"),TIr=o("FlaxBertModel"),MIr=o(" (BERT model)"),EIr=l(),PC=a("li"),t4e=a("strong"),CIr=o("big_bird"),wIr=o(" \u2014 "),oZ=a("a"),AIr=o("FlaxBigBirdModel"),LIr=o(" (BigBird model)"),yIr=l(),BC=a("li"),a4e=a("strong"),xIr=o("blenderbot"),$Ir=o(" \u2014 "),rZ=a("a"),kIr=o("FlaxBlenderbotModel"),SIr=o(" (Blenderbot model)"),RIr=l(),IC=a("li"),n4e=a("strong"),PIr=o("blenderbot-small"),BIr=o(" \u2014 "),tZ=a("a"),IIr=o("FlaxBlenderbotSmallModel"),NIr=o(" (BlenderbotSmall model)"),qIr=l(),NC=a("li"),s4e=a("strong"),jIr=o("clip"),DIr=o(" \u2014 "),aZ=a("a"),GIr=o("FlaxCLIPModel"),OIr=o(" (CLIP model)"),VIr=l(),qC=a("li"),l4e=a("strong"),XIr=o("distilbert"),zIr=o(" \u2014 "),nZ=a("a"),QIr=o("FlaxDistilBertModel"),WIr=o(" (DistilBERT model)"),HIr=l(),jC=a("li"),i4e=a("strong"),UIr=o("electra"),JIr=o(" \u2014 "),sZ=a("a"),YIr=o("FlaxElectraModel"),KIr=o(" (ELECTRA model)"),ZIr=l(),DC=a("li"),d4e=a("strong"),eNr=o("gpt2"),oNr=o(" \u2014 "),lZ=a("a"),rNr=o("FlaxGPT2Model"),tNr=o(" (OpenAI GPT-2 model)"),aNr=l(),GC=a("li"),c4e=a("strong"),nNr=o("gpt_neo"),sNr=o(" \u2014 "),iZ=a("a"),lNr=o("FlaxGPTNeoModel"),iNr=o(" (GPT Neo model)"),dNr=l(),OC=a("li"),f4e=a("strong"),cNr=o("gptj"),fNr=o(" \u2014 "),dZ=a("a"),mNr=o("FlaxGPTJModel"),gNr=o(" (GPT-J model)"),hNr=l(),VC=a("li"),m4e=a("strong"),pNr=o("longt5"),_Nr=o(" \u2014 "),cZ=a("a"),uNr=o("FlaxLongT5Model"),bNr=o(" (LongT5 model)"),vNr=l(),XC=a("li"),g4e=a("strong"),FNr=o("marian"),TNr=o(" \u2014 "),fZ=a("a"),MNr=o("FlaxMarianModel"),ENr=o(" (Marian model)"),CNr=l(),zC=a("li"),h4e=a("strong"),wNr=o("mbart"),ANr=o(" \u2014 "),mZ=a("a"),LNr=o("FlaxMBartModel"),yNr=o(" (mBART model)"),xNr=l(),QC=a("li"),p4e=a("strong"),$Nr=o("mt5"),kNr=o(" \u2014 "),gZ=a("a"),SNr=o("FlaxMT5Model"),RNr=o(" (MT5 model)"),PNr=l(),WC=a("li"),_4e=a("strong"),BNr=o("opt"),INr=o(" \u2014 "),hZ=a("a"),NNr=o("FlaxOPTModel"),qNr=o(" (OPT model)"),jNr=l(),HC=a("li"),u4e=a("strong"),DNr=o("pegasus"),GNr=o(" \u2014 "),pZ=a("a"),ONr=o("FlaxPegasusModel"),VNr=o(" (Pegasus model)"),XNr=l(),UC=a("li"),b4e=a("strong"),zNr=o("roberta"),QNr=o(" \u2014 "),_Z=a("a"),WNr=o("FlaxRobertaModel"),HNr=o(" (RoBERTa model)"),UNr=l(),JC=a("li"),v4e=a("strong"),JNr=o("roformer"),YNr=o(" \u2014 "),uZ=a("a"),KNr=o("FlaxRoFormerModel"),ZNr=o(" (RoFormer model)"),eqr=l(),YC=a("li"),F4e=a("strong"),oqr=o("t5"),rqr=o(" \u2014 "),bZ=a("a"),tqr=o("FlaxT5Model"),aqr=o(" (T5 model)"),nqr=l(),KC=a("li"),T4e=a("strong"),sqr=o("vision-text-dual-encoder"),lqr=o(" \u2014 "),vZ=a("a"),iqr=o("FlaxVisionTextDualEncoderModel"),dqr=o(" (VisionTextDualEncoder model)"),cqr=l(),ZC=a("li"),M4e=a("strong"),fqr=o("vit"),mqr=o(" \u2014 "),FZ=a("a"),gqr=o("FlaxViTModel"),hqr=o(" (ViT model)"),pqr=l(),e5=a("li"),E4e=a("strong"),_qr=o("wav2vec2"),uqr=o(" \u2014 "),TZ=a("a"),bqr=o("FlaxWav2Vec2Model"),vqr=o(" (Wav2Vec2 model)"),Fqr=l(),o5=a("li"),C4e=a("strong"),Tqr=o("xglm"),Mqr=o(" \u2014 "),MZ=a("a"),Eqr=o("FlaxXGLMModel"),Cqr=o(" (XGLM model)"),wqr=l(),r5=a("li"),w4e=a("strong"),Aqr=o("xlm-roberta"),Lqr=o(" \u2014 "),EZ=a("a"),yqr=o("FlaxXLMRobertaModel"),xqr=o(" (XLM-RoBERTa model)"),$qr=l(),F(t5.$$.fragment),YVe=l(),Qc=a("h2"),a5=a("a"),A4e=a("span"),F(Xx.$$.fragment),kqr=l(),L4e=a("span"),Sqr=o("FlaxAutoModelForCausalLM"),KVe=l(),pr=a("div"),F(zx.$$.fragment),Rqr=l(),Wc=a("p"),Pqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CZ=a("a"),Bqr=o("from_pretrained()"),Iqr=o(" class method or the "),wZ=a("a"),Nqr=o("from_config()"),qqr=o(` class
method.`),jqr=l(),Qx=a("p"),Dqr=o("This class cannot be instantiated directly using "),y4e=a("code"),Gqr=o("__init__()"),Oqr=o(" (throws an error)."),Vqr=l(),zt=a("div"),F(Wx.$$.fragment),Xqr=l(),x4e=a("p"),zqr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qqr=l(),Hc=a("p"),Wqr=o(`Note:
Loading a model from its configuration file does `),$4e=a("strong"),Hqr=o("not"),Uqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=a("a"),Jqr=o("from_pretrained()"),Yqr=o(" to load the model weights."),Kqr=l(),F(n5.$$.fragment),Zqr=l(),Vr=a("div"),F(Hx.$$.fragment),ejr=l(),k4e=a("p"),ojr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rjr=l(),Tn=a("p"),tjr=o("The model class to instantiate is selected based on the "),S4e=a("code"),ajr=o("model_type"),njr=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),sjr=o("pretrained_model_name_or_path"),ljr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=a("code"),ijr=o("pretrained_model_name_or_path"),djr=o(":"),cjr=l(),xe=a("ul"),s5=a("li"),B4e=a("strong"),fjr=o("bart"),mjr=o(" \u2014 "),LZ=a("a"),gjr=o("FlaxBartForCausalLM"),hjr=o(" (BART model)"),pjr=l(),l5=a("li"),I4e=a("strong"),_jr=o("bert"),ujr=o(" \u2014 "),yZ=a("a"),bjr=o("FlaxBertForCausalLM"),vjr=o(" (BERT model)"),Fjr=l(),i5=a("li"),N4e=a("strong"),Tjr=o("big_bird"),Mjr=o(" \u2014 "),xZ=a("a"),Ejr=o("FlaxBigBirdForCausalLM"),Cjr=o(" (BigBird model)"),wjr=l(),d5=a("li"),q4e=a("strong"),Ajr=o("electra"),Ljr=o(" \u2014 "),$Z=a("a"),yjr=o("FlaxElectraForCausalLM"),xjr=o(" (ELECTRA model)"),$jr=l(),c5=a("li"),j4e=a("strong"),kjr=o("gpt2"),Sjr=o(" \u2014 "),kZ=a("a"),Rjr=o("FlaxGPT2LMHeadModel"),Pjr=o(" (OpenAI GPT-2 model)"),Bjr=l(),f5=a("li"),D4e=a("strong"),Ijr=o("gpt_neo"),Njr=o(" \u2014 "),SZ=a("a"),qjr=o("FlaxGPTNeoForCausalLM"),jjr=o(" (GPT Neo model)"),Djr=l(),m5=a("li"),G4e=a("strong"),Gjr=o("gptj"),Ojr=o(" \u2014 "),RZ=a("a"),Vjr=o("FlaxGPTJForCausalLM"),Xjr=o(" (GPT-J model)"),zjr=l(),g5=a("li"),O4e=a("strong"),Qjr=o("opt"),Wjr=o(" \u2014 "),PZ=a("a"),Hjr=o("FlaxOPTForCausalLM"),Ujr=o(" (OPT model)"),Jjr=l(),h5=a("li"),V4e=a("strong"),Yjr=o("roberta"),Kjr=o(" \u2014 "),BZ=a("a"),Zjr=o("FlaxRobertaForCausalLM"),eDr=o(" (RoBERTa model)"),oDr=l(),p5=a("li"),X4e=a("strong"),rDr=o("xglm"),tDr=o(" \u2014 "),IZ=a("a"),aDr=o("FlaxXGLMForCausalLM"),nDr=o(" (XGLM model)"),sDr=l(),F(_5.$$.fragment),ZVe=l(),Uc=a("h2"),u5=a("a"),z4e=a("span"),F(Ux.$$.fragment),lDr=l(),Q4e=a("span"),iDr=o("FlaxAutoModelForPreTraining"),eXe=l(),_r=a("div"),F(Jx.$$.fragment),dDr=l(),Jc=a("p"),cDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NZ=a("a"),fDr=o("from_pretrained()"),mDr=o(" class method or the "),qZ=a("a"),gDr=o("from_config()"),hDr=o(` class
method.`),pDr=l(),Yx=a("p"),_Dr=o("This class cannot be instantiated directly using "),W4e=a("code"),uDr=o("__init__()"),bDr=o(" (throws an error)."),vDr=l(),Qt=a("div"),F(Kx.$$.fragment),FDr=l(),H4e=a("p"),TDr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MDr=l(),Yc=a("p"),EDr=o(`Note:
Loading a model from its configuration file does `),U4e=a("strong"),CDr=o("not"),wDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=a("a"),ADr=o("from_pretrained()"),LDr=o(" to load the model weights."),yDr=l(),F(b5.$$.fragment),xDr=l(),Xr=a("div"),F(Zx.$$.fragment),$Dr=l(),J4e=a("p"),kDr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),SDr=l(),Mn=a("p"),RDr=o("The model class to instantiate is selected based on the "),Y4e=a("code"),PDr=o("model_type"),BDr=o(` property of the config object (either
passed as an argument or loaded from `),K4e=a("code"),IDr=o("pretrained_model_name_or_path"),NDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=a("code"),qDr=o("pretrained_model_name_or_path"),jDr=o(":"),DDr=l(),Ee=a("ul"),v5=a("li"),eCe=a("strong"),GDr=o("albert"),ODr=o(" \u2014 "),DZ=a("a"),VDr=o("FlaxAlbertForPreTraining"),XDr=o(" (ALBERT model)"),zDr=l(),F5=a("li"),oCe=a("strong"),QDr=o("bart"),WDr=o(" \u2014 "),GZ=a("a"),HDr=o("FlaxBartForConditionalGeneration"),UDr=o(" (BART model)"),JDr=l(),T5=a("li"),rCe=a("strong"),YDr=o("bert"),KDr=o(" \u2014 "),OZ=a("a"),ZDr=o("FlaxBertForPreTraining"),eGr=o(" (BERT model)"),oGr=l(),M5=a("li"),tCe=a("strong"),rGr=o("big_bird"),tGr=o(" \u2014 "),VZ=a("a"),aGr=o("FlaxBigBirdForPreTraining"),nGr=o(" (BigBird model)"),sGr=l(),E5=a("li"),aCe=a("strong"),lGr=o("electra"),iGr=o(" \u2014 "),XZ=a("a"),dGr=o("FlaxElectraForPreTraining"),cGr=o(" (ELECTRA model)"),fGr=l(),C5=a("li"),nCe=a("strong"),mGr=o("longt5"),gGr=o(" \u2014 "),zZ=a("a"),hGr=o("FlaxLongT5ForConditionalGeneration"),pGr=o(" (LongT5 model)"),_Gr=l(),w5=a("li"),sCe=a("strong"),uGr=o("mbart"),bGr=o(" \u2014 "),QZ=a("a"),vGr=o("FlaxMBartForConditionalGeneration"),FGr=o(" (mBART model)"),TGr=l(),A5=a("li"),lCe=a("strong"),MGr=o("mt5"),EGr=o(" \u2014 "),WZ=a("a"),CGr=o("FlaxMT5ForConditionalGeneration"),wGr=o(" (MT5 model)"),AGr=l(),L5=a("li"),iCe=a("strong"),LGr=o("roberta"),yGr=o(" \u2014 "),HZ=a("a"),xGr=o("FlaxRobertaForMaskedLM"),$Gr=o(" (RoBERTa model)"),kGr=l(),y5=a("li"),dCe=a("strong"),SGr=o("roformer"),RGr=o(" \u2014 "),UZ=a("a"),PGr=o("FlaxRoFormerForMaskedLM"),BGr=o(" (RoFormer model)"),IGr=l(),x5=a("li"),cCe=a("strong"),NGr=o("t5"),qGr=o(" \u2014 "),JZ=a("a"),jGr=o("FlaxT5ForConditionalGeneration"),DGr=o(" (T5 model)"),GGr=l(),$5=a("li"),fCe=a("strong"),OGr=o("wav2vec2"),VGr=o(" \u2014 "),YZ=a("a"),XGr=o("FlaxWav2Vec2ForPreTraining"),zGr=o(" (Wav2Vec2 model)"),QGr=l(),k5=a("li"),mCe=a("strong"),WGr=o("xlm-roberta"),HGr=o(" \u2014 "),KZ=a("a"),UGr=o("FlaxXLMRobertaForMaskedLM"),JGr=o(" (XLM-RoBERTa model)"),YGr=l(),F(S5.$$.fragment),oXe=l(),Kc=a("h2"),R5=a("a"),gCe=a("span"),F(e$.$$.fragment),KGr=l(),hCe=a("span"),ZGr=o("FlaxAutoModelForMaskedLM"),rXe=l(),ur=a("div"),F(o$.$$.fragment),eOr=l(),Zc=a("p"),oOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZZ=a("a"),rOr=o("from_pretrained()"),tOr=o(" class method or the "),eee=a("a"),aOr=o("from_config()"),nOr=o(` class
method.`),sOr=l(),r$=a("p"),lOr=o("This class cannot be instantiated directly using "),pCe=a("code"),iOr=o("__init__()"),dOr=o(" (throws an error)."),cOr=l(),Wt=a("div"),F(t$.$$.fragment),fOr=l(),_Ce=a("p"),mOr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gOr=l(),ef=a("p"),hOr=o(`Note:
Loading a model from its configuration file does `),uCe=a("strong"),pOr=o("not"),_Or=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),uOr=o("from_pretrained()"),bOr=o(" to load the model weights."),vOr=l(),F(P5.$$.fragment),FOr=l(),zr=a("div"),F(a$.$$.fragment),TOr=l(),bCe=a("p"),MOr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),EOr=l(),En=a("p"),COr=o("The model class to instantiate is selected based on the "),vCe=a("code"),wOr=o("model_type"),AOr=o(` property of the config object (either
passed as an argument or loaded from `),FCe=a("code"),LOr=o("pretrained_model_name_or_path"),yOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TCe=a("code"),xOr=o("pretrained_model_name_or_path"),$Or=o(":"),kOr=l(),$e=a("ul"),B5=a("li"),MCe=a("strong"),SOr=o("albert"),ROr=o(" \u2014 "),ree=a("a"),POr=o("FlaxAlbertForMaskedLM"),BOr=o(" (ALBERT model)"),IOr=l(),I5=a("li"),ECe=a("strong"),NOr=o("bart"),qOr=o(" \u2014 "),tee=a("a"),jOr=o("FlaxBartForConditionalGeneration"),DOr=o(" (BART model)"),GOr=l(),N5=a("li"),CCe=a("strong"),OOr=o("bert"),VOr=o(" \u2014 "),aee=a("a"),XOr=o("FlaxBertForMaskedLM"),zOr=o(" (BERT model)"),QOr=l(),q5=a("li"),wCe=a("strong"),WOr=o("big_bird"),HOr=o(" \u2014 "),nee=a("a"),UOr=o("FlaxBigBirdForMaskedLM"),JOr=o(" (BigBird model)"),YOr=l(),j5=a("li"),ACe=a("strong"),KOr=o("distilbert"),ZOr=o(" \u2014 "),see=a("a"),eVr=o("FlaxDistilBertForMaskedLM"),oVr=o(" (DistilBERT model)"),rVr=l(),D5=a("li"),LCe=a("strong"),tVr=o("electra"),aVr=o(" \u2014 "),lee=a("a"),nVr=o("FlaxElectraForMaskedLM"),sVr=o(" (ELECTRA model)"),lVr=l(),G5=a("li"),yCe=a("strong"),iVr=o("mbart"),dVr=o(" \u2014 "),iee=a("a"),cVr=o("FlaxMBartForConditionalGeneration"),fVr=o(" (mBART model)"),mVr=l(),O5=a("li"),xCe=a("strong"),gVr=o("roberta"),hVr=o(" \u2014 "),dee=a("a"),pVr=o("FlaxRobertaForMaskedLM"),_Vr=o(" (RoBERTa model)"),uVr=l(),V5=a("li"),$Ce=a("strong"),bVr=o("roformer"),vVr=o(" \u2014 "),cee=a("a"),FVr=o("FlaxRoFormerForMaskedLM"),TVr=o(" (RoFormer model)"),MVr=l(),X5=a("li"),kCe=a("strong"),EVr=o("xlm-roberta"),CVr=o(" \u2014 "),fee=a("a"),wVr=o("FlaxXLMRobertaForMaskedLM"),AVr=o(" (XLM-RoBERTa model)"),LVr=l(),F(z5.$$.fragment),tXe=l(),of=a("h2"),Q5=a("a"),SCe=a("span"),F(n$.$$.fragment),yVr=l(),RCe=a("span"),xVr=o("FlaxAutoModelForSeq2SeqLM"),aXe=l(),br=a("div"),F(s$.$$.fragment),$Vr=l(),rf=a("p"),kVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mee=a("a"),SVr=o("from_pretrained()"),RVr=o(" class method or the "),gee=a("a"),PVr=o("from_config()"),BVr=o(` class
method.`),IVr=l(),l$=a("p"),NVr=o("This class cannot be instantiated directly using "),PCe=a("code"),qVr=o("__init__()"),jVr=o(" (throws an error)."),DVr=l(),Ht=a("div"),F(i$.$$.fragment),GVr=l(),BCe=a("p"),OVr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),VVr=l(),tf=a("p"),XVr=o(`Note:
Loading a model from its configuration file does `),ICe=a("strong"),zVr=o("not"),QVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hee=a("a"),WVr=o("from_pretrained()"),HVr=o(" to load the model weights."),UVr=l(),F(W5.$$.fragment),JVr=l(),Qr=a("div"),F(d$.$$.fragment),YVr=l(),NCe=a("p"),KVr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZVr=l(),Cn=a("p"),eXr=o("The model class to instantiate is selected based on the "),qCe=a("code"),oXr=o("model_type"),rXr=o(` property of the config object (either
passed as an argument or loaded from `),jCe=a("code"),tXr=o("pretrained_model_name_or_path"),aXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DCe=a("code"),nXr=o("pretrained_model_name_or_path"),sXr=o(":"),lXr=l(),ke=a("ul"),H5=a("li"),GCe=a("strong"),iXr=o("bart"),dXr=o(" \u2014 "),pee=a("a"),cXr=o("FlaxBartForConditionalGeneration"),fXr=o(" (BART model)"),mXr=l(),U5=a("li"),OCe=a("strong"),gXr=o("blenderbot"),hXr=o(" \u2014 "),_ee=a("a"),pXr=o("FlaxBlenderbotForConditionalGeneration"),_Xr=o(" (Blenderbot model)"),uXr=l(),J5=a("li"),VCe=a("strong"),bXr=o("blenderbot-small"),vXr=o(" \u2014 "),uee=a("a"),FXr=o("FlaxBlenderbotSmallForConditionalGeneration"),TXr=o(" (BlenderbotSmall model)"),MXr=l(),Y5=a("li"),XCe=a("strong"),EXr=o("encoder-decoder"),CXr=o(" \u2014 "),bee=a("a"),wXr=o("FlaxEncoderDecoderModel"),AXr=o(" (Encoder decoder model)"),LXr=l(),K5=a("li"),zCe=a("strong"),yXr=o("longt5"),xXr=o(" \u2014 "),vee=a("a"),$Xr=o("FlaxLongT5ForConditionalGeneration"),kXr=o(" (LongT5 model)"),SXr=l(),Z5=a("li"),QCe=a("strong"),RXr=o("marian"),PXr=o(" \u2014 "),Fee=a("a"),BXr=o("FlaxMarianMTModel"),IXr=o(" (Marian model)"),NXr=l(),e3=a("li"),WCe=a("strong"),qXr=o("mbart"),jXr=o(" \u2014 "),Tee=a("a"),DXr=o("FlaxMBartForConditionalGeneration"),GXr=o(" (mBART model)"),OXr=l(),o3=a("li"),HCe=a("strong"),VXr=o("mt5"),XXr=o(" \u2014 "),Mee=a("a"),zXr=o("FlaxMT5ForConditionalGeneration"),QXr=o(" (MT5 model)"),WXr=l(),r3=a("li"),UCe=a("strong"),HXr=o("pegasus"),UXr=o(" \u2014 "),Eee=a("a"),JXr=o("FlaxPegasusForConditionalGeneration"),YXr=o(" (Pegasus model)"),KXr=l(),t3=a("li"),JCe=a("strong"),ZXr=o("t5"),ezr=o(" \u2014 "),Cee=a("a"),ozr=o("FlaxT5ForConditionalGeneration"),rzr=o(" (T5 model)"),tzr=l(),F(a3.$$.fragment),nXe=l(),af=a("h2"),n3=a("a"),YCe=a("span"),F(c$.$$.fragment),azr=l(),KCe=a("span"),nzr=o("FlaxAutoModelForSequenceClassification"),sXe=l(),vr=a("div"),F(f$.$$.fragment),szr=l(),nf=a("p"),lzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wee=a("a"),izr=o("from_pretrained()"),dzr=o(" class method or the "),Aee=a("a"),czr=o("from_config()"),fzr=o(` class
method.`),mzr=l(),m$=a("p"),gzr=o("This class cannot be instantiated directly using "),ZCe=a("code"),hzr=o("__init__()"),pzr=o(" (throws an error)."),_zr=l(),Ut=a("div"),F(g$.$$.fragment),uzr=l(),e5e=a("p"),bzr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vzr=l(),sf=a("p"),Fzr=o(`Note:
Loading a model from its configuration file does `),o5e=a("strong"),Tzr=o("not"),Mzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=a("a"),Ezr=o("from_pretrained()"),Czr=o(" to load the model weights."),wzr=l(),F(s3.$$.fragment),Azr=l(),Wr=a("div"),F(h$.$$.fragment),Lzr=l(),r5e=a("p"),yzr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xzr=l(),wn=a("p"),$zr=o("The model class to instantiate is selected based on the "),t5e=a("code"),kzr=o("model_type"),Szr=o(` property of the config object (either
passed as an argument or loaded from `),a5e=a("code"),Rzr=o("pretrained_model_name_or_path"),Pzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=a("code"),Bzr=o("pretrained_model_name_or_path"),Izr=o(":"),Nzr=l(),Se=a("ul"),l3=a("li"),s5e=a("strong"),qzr=o("albert"),jzr=o(" \u2014 "),yee=a("a"),Dzr=o("FlaxAlbertForSequenceClassification"),Gzr=o(" (ALBERT model)"),Ozr=l(),i3=a("li"),l5e=a("strong"),Vzr=o("bart"),Xzr=o(" \u2014 "),xee=a("a"),zzr=o("FlaxBartForSequenceClassification"),Qzr=o(" (BART model)"),Wzr=l(),d3=a("li"),i5e=a("strong"),Hzr=o("bert"),Uzr=o(" \u2014 "),$ee=a("a"),Jzr=o("FlaxBertForSequenceClassification"),Yzr=o(" (BERT model)"),Kzr=l(),c3=a("li"),d5e=a("strong"),Zzr=o("big_bird"),eQr=o(" \u2014 "),kee=a("a"),oQr=o("FlaxBigBirdForSequenceClassification"),rQr=o(" (BigBird model)"),tQr=l(),f3=a("li"),c5e=a("strong"),aQr=o("distilbert"),nQr=o(" \u2014 "),See=a("a"),sQr=o("FlaxDistilBertForSequenceClassification"),lQr=o(" (DistilBERT model)"),iQr=l(),m3=a("li"),f5e=a("strong"),dQr=o("electra"),cQr=o(" \u2014 "),Ree=a("a"),fQr=o("FlaxElectraForSequenceClassification"),mQr=o(" (ELECTRA model)"),gQr=l(),g3=a("li"),m5e=a("strong"),hQr=o("mbart"),pQr=o(" \u2014 "),Pee=a("a"),_Qr=o("FlaxMBartForSequenceClassification"),uQr=o(" (mBART model)"),bQr=l(),h3=a("li"),g5e=a("strong"),vQr=o("roberta"),FQr=o(" \u2014 "),Bee=a("a"),TQr=o("FlaxRobertaForSequenceClassification"),MQr=o(" (RoBERTa model)"),EQr=l(),p3=a("li"),h5e=a("strong"),CQr=o("roformer"),wQr=o(" \u2014 "),Iee=a("a"),AQr=o("FlaxRoFormerForSequenceClassification"),LQr=o(" (RoFormer model)"),yQr=l(),_3=a("li"),p5e=a("strong"),xQr=o("xlm-roberta"),$Qr=o(" \u2014 "),Nee=a("a"),kQr=o("FlaxXLMRobertaForSequenceClassification"),SQr=o(" (XLM-RoBERTa model)"),RQr=l(),F(u3.$$.fragment),lXe=l(),lf=a("h2"),b3=a("a"),_5e=a("span"),F(p$.$$.fragment),PQr=l(),u5e=a("span"),BQr=o("FlaxAutoModelForQuestionAnswering"),iXe=l(),Fr=a("div"),F(_$.$$.fragment),IQr=l(),df=a("p"),NQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qee=a("a"),qQr=o("from_pretrained()"),jQr=o(" class method or the "),jee=a("a"),DQr=o("from_config()"),GQr=o(` class
method.`),OQr=l(),u$=a("p"),VQr=o("This class cannot be instantiated directly using "),b5e=a("code"),XQr=o("__init__()"),zQr=o(" (throws an error)."),QQr=l(),Jt=a("div"),F(b$.$$.fragment),WQr=l(),v5e=a("p"),HQr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UQr=l(),cf=a("p"),JQr=o(`Note:
Loading a model from its configuration file does `),F5e=a("strong"),YQr=o("not"),KQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dee=a("a"),ZQr=o("from_pretrained()"),eWr=o(" to load the model weights."),oWr=l(),F(v3.$$.fragment),rWr=l(),Hr=a("div"),F(v$.$$.fragment),tWr=l(),T5e=a("p"),aWr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nWr=l(),An=a("p"),sWr=o("The model class to instantiate is selected based on the "),M5e=a("code"),lWr=o("model_type"),iWr=o(` property of the config object (either
passed as an argument or loaded from `),E5e=a("code"),dWr=o("pretrained_model_name_or_path"),cWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=a("code"),fWr=o("pretrained_model_name_or_path"),mWr=o(":"),gWr=l(),Re=a("ul"),F3=a("li"),w5e=a("strong"),hWr=o("albert"),pWr=o(" \u2014 "),Gee=a("a"),_Wr=o("FlaxAlbertForQuestionAnswering"),uWr=o(" (ALBERT model)"),bWr=l(),T3=a("li"),A5e=a("strong"),vWr=o("bart"),FWr=o(" \u2014 "),Oee=a("a"),TWr=o("FlaxBartForQuestionAnswering"),MWr=o(" (BART model)"),EWr=l(),M3=a("li"),L5e=a("strong"),CWr=o("bert"),wWr=o(" \u2014 "),Vee=a("a"),AWr=o("FlaxBertForQuestionAnswering"),LWr=o(" (BERT model)"),yWr=l(),E3=a("li"),y5e=a("strong"),xWr=o("big_bird"),$Wr=o(" \u2014 "),Xee=a("a"),kWr=o("FlaxBigBirdForQuestionAnswering"),SWr=o(" (BigBird model)"),RWr=l(),C3=a("li"),x5e=a("strong"),PWr=o("distilbert"),BWr=o(" \u2014 "),zee=a("a"),IWr=o("FlaxDistilBertForQuestionAnswering"),NWr=o(" (DistilBERT model)"),qWr=l(),w3=a("li"),$5e=a("strong"),jWr=o("electra"),DWr=o(" \u2014 "),Qee=a("a"),GWr=o("FlaxElectraForQuestionAnswering"),OWr=o(" (ELECTRA model)"),VWr=l(),A3=a("li"),k5e=a("strong"),XWr=o("mbart"),zWr=o(" \u2014 "),Wee=a("a"),QWr=o("FlaxMBartForQuestionAnswering"),WWr=o(" (mBART model)"),HWr=l(),L3=a("li"),S5e=a("strong"),UWr=o("roberta"),JWr=o(" \u2014 "),Hee=a("a"),YWr=o("FlaxRobertaForQuestionAnswering"),KWr=o(" (RoBERTa model)"),ZWr=l(),y3=a("li"),R5e=a("strong"),eHr=o("roformer"),oHr=o(" \u2014 "),Uee=a("a"),rHr=o("FlaxRoFormerForQuestionAnswering"),tHr=o(" (RoFormer model)"),aHr=l(),x3=a("li"),P5e=a("strong"),nHr=o("xlm-roberta"),sHr=o(" \u2014 "),Jee=a("a"),lHr=o("FlaxXLMRobertaForQuestionAnswering"),iHr=o(" (XLM-RoBERTa model)"),dHr=l(),F($3.$$.fragment),dXe=l(),ff=a("h2"),k3=a("a"),B5e=a("span"),F(F$.$$.fragment),cHr=l(),I5e=a("span"),fHr=o("FlaxAutoModelForTokenClassification"),cXe=l(),Tr=a("div"),F(T$.$$.fragment),mHr=l(),mf=a("p"),gHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yee=a("a"),hHr=o("from_pretrained()"),pHr=o(" class method or the "),Kee=a("a"),_Hr=o("from_config()"),uHr=o(` class
method.`),bHr=l(),M$=a("p"),vHr=o("This class cannot be instantiated directly using "),N5e=a("code"),FHr=o("__init__()"),THr=o(" (throws an error)."),MHr=l(),Yt=a("div"),F(E$.$$.fragment),EHr=l(),q5e=a("p"),CHr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wHr=l(),gf=a("p"),AHr=o(`Note:
Loading a model from its configuration file does `),j5e=a("strong"),LHr=o("not"),yHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=a("a"),xHr=o("from_pretrained()"),$Hr=o(" to load the model weights."),kHr=l(),F(S3.$$.fragment),SHr=l(),Ur=a("div"),F(C$.$$.fragment),RHr=l(),D5e=a("p"),PHr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BHr=l(),Ln=a("p"),IHr=o("The model class to instantiate is selected based on the "),G5e=a("code"),NHr=o("model_type"),qHr=o(` property of the config object (either
passed as an argument or loaded from `),O5e=a("code"),jHr=o("pretrained_model_name_or_path"),DHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=a("code"),GHr=o("pretrained_model_name_or_path"),OHr=o(":"),VHr=l(),Ve=a("ul"),R3=a("li"),X5e=a("strong"),XHr=o("albert"),zHr=o(" \u2014 "),eoe=a("a"),QHr=o("FlaxAlbertForTokenClassification"),WHr=o(" (ALBERT model)"),HHr=l(),P3=a("li"),z5e=a("strong"),UHr=o("bert"),JHr=o(" \u2014 "),ooe=a("a"),YHr=o("FlaxBertForTokenClassification"),KHr=o(" (BERT model)"),ZHr=l(),B3=a("li"),Q5e=a("strong"),eUr=o("big_bird"),oUr=o(" \u2014 "),roe=a("a"),rUr=o("FlaxBigBirdForTokenClassification"),tUr=o(" (BigBird model)"),aUr=l(),I3=a("li"),W5e=a("strong"),nUr=o("distilbert"),sUr=o(" \u2014 "),toe=a("a"),lUr=o("FlaxDistilBertForTokenClassification"),iUr=o(" (DistilBERT model)"),dUr=l(),N3=a("li"),H5e=a("strong"),cUr=o("electra"),fUr=o(" \u2014 "),aoe=a("a"),mUr=o("FlaxElectraForTokenClassification"),gUr=o(" (ELECTRA model)"),hUr=l(),q3=a("li"),U5e=a("strong"),pUr=o("roberta"),_Ur=o(" \u2014 "),noe=a("a"),uUr=o("FlaxRobertaForTokenClassification"),bUr=o(" (RoBERTa model)"),vUr=l(),j3=a("li"),J5e=a("strong"),FUr=o("roformer"),TUr=o(" \u2014 "),soe=a("a"),MUr=o("FlaxRoFormerForTokenClassification"),EUr=o(" (RoFormer model)"),CUr=l(),D3=a("li"),Y5e=a("strong"),wUr=o("xlm-roberta"),AUr=o(" \u2014 "),loe=a("a"),LUr=o("FlaxXLMRobertaForTokenClassification"),yUr=o(" (XLM-RoBERTa model)"),xUr=l(),F(G3.$$.fragment),fXe=l(),hf=a("h2"),O3=a("a"),K5e=a("span"),F(w$.$$.fragment),$Ur=l(),Z5e=a("span"),kUr=o("FlaxAutoModelForMultipleChoice"),mXe=l(),Mr=a("div"),F(A$.$$.fragment),SUr=l(),pf=a("p"),RUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ioe=a("a"),PUr=o("from_pretrained()"),BUr=o(" class method or the "),doe=a("a"),IUr=o("from_config()"),NUr=o(` class
method.`),qUr=l(),L$=a("p"),jUr=o("This class cannot be instantiated directly using "),e3e=a("code"),DUr=o("__init__()"),GUr=o(" (throws an error)."),OUr=l(),Kt=a("div"),F(y$.$$.fragment),VUr=l(),o3e=a("p"),XUr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zUr=l(),_f=a("p"),QUr=o(`Note:
Loading a model from its configuration file does `),r3e=a("strong"),WUr=o("not"),HUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=a("a"),UUr=o("from_pretrained()"),JUr=o(" to load the model weights."),YUr=l(),F(V3.$$.fragment),KUr=l(),Jr=a("div"),F(x$.$$.fragment),ZUr=l(),t3e=a("p"),eJr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oJr=l(),yn=a("p"),rJr=o("The model class to instantiate is selected based on the "),a3e=a("code"),tJr=o("model_type"),aJr=o(` property of the config object (either
passed as an argument or loaded from `),n3e=a("code"),nJr=o("pretrained_model_name_or_path"),sJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=a("code"),lJr=o("pretrained_model_name_or_path"),iJr=o(":"),dJr=l(),Xe=a("ul"),X3=a("li"),l3e=a("strong"),cJr=o("albert"),fJr=o(" \u2014 "),foe=a("a"),mJr=o("FlaxAlbertForMultipleChoice"),gJr=o(" (ALBERT model)"),hJr=l(),z3=a("li"),i3e=a("strong"),pJr=o("bert"),_Jr=o(" \u2014 "),moe=a("a"),uJr=o("FlaxBertForMultipleChoice"),bJr=o(" (BERT model)"),vJr=l(),Q3=a("li"),d3e=a("strong"),FJr=o("big_bird"),TJr=o(" \u2014 "),goe=a("a"),MJr=o("FlaxBigBirdForMultipleChoice"),EJr=o(" (BigBird model)"),CJr=l(),W3=a("li"),c3e=a("strong"),wJr=o("distilbert"),AJr=o(" \u2014 "),hoe=a("a"),LJr=o("FlaxDistilBertForMultipleChoice"),yJr=o(" (DistilBERT model)"),xJr=l(),H3=a("li"),f3e=a("strong"),$Jr=o("electra"),kJr=o(" \u2014 "),poe=a("a"),SJr=o("FlaxElectraForMultipleChoice"),RJr=o(" (ELECTRA model)"),PJr=l(),U3=a("li"),m3e=a("strong"),BJr=o("roberta"),IJr=o(" \u2014 "),_oe=a("a"),NJr=o("FlaxRobertaForMultipleChoice"),qJr=o(" (RoBERTa model)"),jJr=l(),J3=a("li"),g3e=a("strong"),DJr=o("roformer"),GJr=o(" \u2014 "),uoe=a("a"),OJr=o("FlaxRoFormerForMultipleChoice"),VJr=o(" (RoFormer model)"),XJr=l(),Y3=a("li"),h3e=a("strong"),zJr=o("xlm-roberta"),QJr=o(" \u2014 "),boe=a("a"),WJr=o("FlaxXLMRobertaForMultipleChoice"),HJr=o(" (XLM-RoBERTa model)"),UJr=l(),F(K3.$$.fragment),gXe=l(),uf=a("h2"),Z3=a("a"),p3e=a("span"),F($$.$$.fragment),JJr=l(),_3e=a("span"),YJr=o("FlaxAutoModelForNextSentencePrediction"),hXe=l(),Er=a("div"),F(k$.$$.fragment),KJr=l(),bf=a("p"),ZJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),voe=a("a"),eYr=o("from_pretrained()"),oYr=o(" class method or the "),Foe=a("a"),rYr=o("from_config()"),tYr=o(` class
method.`),aYr=l(),S$=a("p"),nYr=o("This class cannot be instantiated directly using "),u3e=a("code"),sYr=o("__init__()"),lYr=o(" (throws an error)."),iYr=l(),Zt=a("div"),F(R$.$$.fragment),dYr=l(),b3e=a("p"),cYr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fYr=l(),vf=a("p"),mYr=o(`Note:
Loading a model from its configuration file does `),v3e=a("strong"),gYr=o("not"),hYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=a("a"),pYr=o("from_pretrained()"),_Yr=o(" to load the model weights."),uYr=l(),F(e0.$$.fragment),bYr=l(),Yr=a("div"),F(P$.$$.fragment),vYr=l(),F3e=a("p"),FYr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TYr=l(),xn=a("p"),MYr=o("The model class to instantiate is selected based on the "),T3e=a("code"),EYr=o("model_type"),CYr=o(` property of the config object (either
passed as an argument or loaded from `),M3e=a("code"),wYr=o("pretrained_model_name_or_path"),AYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=a("code"),LYr=o("pretrained_model_name_or_path"),yYr=o(":"),xYr=l(),C3e=a("ul"),o0=a("li"),w3e=a("strong"),$Yr=o("bert"),kYr=o(" \u2014 "),Moe=a("a"),SYr=o("FlaxBertForNextSentencePrediction"),RYr=o(" (BERT model)"),PYr=l(),F(r0.$$.fragment),pXe=l(),Ff=a("h2"),t0=a("a"),A3e=a("span"),F(B$.$$.fragment),BYr=l(),L3e=a("span"),IYr=o("FlaxAutoModelForImageClassification"),_Xe=l(),Cr=a("div"),F(I$.$$.fragment),NYr=l(),Tf=a("p"),qYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Eoe=a("a"),jYr=o("from_pretrained()"),DYr=o(" class method or the "),Coe=a("a"),GYr=o("from_config()"),OYr=o(` class
method.`),VYr=l(),N$=a("p"),XYr=o("This class cannot be instantiated directly using "),y3e=a("code"),zYr=o("__init__()"),QYr=o(" (throws an error)."),WYr=l(),ea=a("div"),F(q$.$$.fragment),HYr=l(),x3e=a("p"),UYr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),JYr=l(),Mf=a("p"),YYr=o(`Note:
Loading a model from its configuration file does `),$3e=a("strong"),KYr=o("not"),ZYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=a("a"),eKr=o("from_pretrained()"),oKr=o(" to load the model weights."),rKr=l(),F(a0.$$.fragment),tKr=l(),Kr=a("div"),F(j$.$$.fragment),aKr=l(),k3e=a("p"),nKr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sKr=l(),$n=a("p"),lKr=o("The model class to instantiate is selected based on the "),S3e=a("code"),iKr=o("model_type"),dKr=o(` property of the config object (either
passed as an argument or loaded from `),R3e=a("code"),cKr=o("pretrained_model_name_or_path"),fKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=a("code"),mKr=o("pretrained_model_name_or_path"),gKr=o(":"),hKr=l(),D$=a("ul"),n0=a("li"),B3e=a("strong"),pKr=o("beit"),_Kr=o(" \u2014 "),Aoe=a("a"),uKr=o("FlaxBeitForImageClassification"),bKr=o(" (BEiT model)"),vKr=l(),s0=a("li"),I3e=a("strong"),FKr=o("vit"),TKr=o(" \u2014 "),Loe=a("a"),MKr=o("FlaxViTForImageClassification"),EKr=o(" (ViT model)"),CKr=l(),F(l0.$$.fragment),uXe=l(),Ef=a("h2"),i0=a("a"),N3e=a("span"),F(G$.$$.fragment),wKr=l(),q3e=a("span"),AKr=o("FlaxAutoModelForVision2Seq"),bXe=l(),wr=a("div"),F(O$.$$.fragment),LKr=l(),Cf=a("p"),yKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yoe=a("a"),xKr=o("from_pretrained()"),$Kr=o(" class method or the "),xoe=a("a"),kKr=o("from_config()"),SKr=o(` class
method.`),RKr=l(),V$=a("p"),PKr=o("This class cannot be instantiated directly using "),j3e=a("code"),BKr=o("__init__()"),IKr=o(" (throws an error)."),NKr=l(),oa=a("div"),F(X$.$$.fragment),qKr=l(),D3e=a("p"),jKr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),DKr=l(),wf=a("p"),GKr=o(`Note:
Loading a model from its configuration file does `),G3e=a("strong"),OKr=o("not"),VKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=a("a"),XKr=o("from_pretrained()"),zKr=o(" to load the model weights."),QKr=l(),F(d0.$$.fragment),WKr=l(),Zr=a("div"),F(z$.$$.fragment),HKr=l(),O3e=a("p"),UKr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),JKr=l(),kn=a("p"),YKr=o("The model class to instantiate is selected based on the "),V3e=a("code"),KKr=o("model_type"),ZKr=o(` property of the config object (either
passed as an argument or loaded from `),X3e=a("code"),eZr=o("pretrained_model_name_or_path"),oZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=a("code"),rZr=o("pretrained_model_name_or_path"),tZr=o(":"),aZr=l(),Q3e=a("ul"),c0=a("li"),W3e=a("strong"),nZr=o("vision-encoder-decoder"),sZr=o(" \u2014 "),koe=a("a"),lZr=o("FlaxVisionEncoderDecoderModel"),iZr=o(" (Vision Encoder decoder model)"),dZr=l(),F(f0.$$.fragment),this.h()},l(f){const u=UGt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Q$=s(p);m=n(Q$,"A",{id:!0,class:!0,href:!0});var H3e=s(m);_=n(H3e,"SPAN",{});var U3e=s(_);T(d.$$.fragment,U3e),U3e.forEach(t),H3e.forEach(t),h=i(Q$),Eo=n(Q$,"SPAN",{});var J3e=s(Eo);Mi=r(J3e,"Auto Classes"),J3e.forEach(t),Q$.forEach(t),xf=i(f),at=n(f,"P",{});var W$=s(at);Ei=r(W$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=n(W$,"CODE",{});var Y3e=s(Ci);SA=r(Y3e,"from_pretrained()"),Y3e.forEach(t),$f=r(W$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),W$.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);wi=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var K3e=s(Rn);RA=r(K3e,"AutoConfig"),K3e.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var Z3e=s(Bn);PA=r(Z3e,"AutoModel"),Z3e.forEach(t),Ai=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var e0e=s(In);BA=r(e0e,"AutoTokenizer"),e0e.forEach(t),Li=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),kf=i(f),T(xa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var H$=s(Ae);cS=r(H$,"will create a model that is an instance of "),yi=n(H$,"A",{href:!0});var o0e=s(yi);fS=r(o0e,"BertModel"),o0e.forEach(t),mS=r(H$,"."),H$.forEach(t),Co=i(f),$a=n(f,"P",{});var U$=s($a);gS=r(U$,"There is one class of "),Sf=n(U$,"CODE",{});var r0e=s(Sf);hS=r(r0e,"AutoModel"),r0e.forEach(t),xQe=r(U$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),U$.forEach(t),hOe=i(f),xi=n(f,"H2",{class:!0});var J$=s(xi);Rf=n(J$,"A",{id:!0,class:!0,href:!0});var t0e=s(Rf);Ate=n(t0e,"SPAN",{});var a0e=s(Ate);T(IA.$$.fragment,a0e),a0e.forEach(t),t0e.forEach(t),$Qe=i(J$),Lte=n(J$,"SPAN",{});var n0e=s(Lte);kQe=r(n0e,"Extending the Auto Classes"),n0e.forEach(t),J$.forEach(t),pOe=i(f),Nn=n(f,"P",{});var Af=s(Nn);SQe=r(Af,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),yte=n(Af,"CODE",{});var s0e=s(yte);RQe=r(s0e,"NewModel"),s0e.forEach(t),PQe=r(Af,", make sure you have a "),xte=n(Af,"CODE",{});var l0e=s(xte);BQe=r(l0e,"NewModelConfig"),l0e.forEach(t),IQe=r(Af,` then you can add those to the auto
classes like this:`),Af.forEach(t),_Oe=i(f),T(NA.$$.fragment,f),uOe=i(f),pS=n(f,"P",{});var i0e=s(pS);NQe=r(i0e,"You will then be able to use the auto classes like you would usually do!"),i0e.forEach(t),bOe=i(f),T(Pf.$$.fragment,f),vOe=i(f),$i=n(f,"H2",{class:!0});var Y$=s($i);Bf=n(Y$,"A",{id:!0,class:!0,href:!0});var d0e=s(Bf);$te=n(d0e,"SPAN",{});var c0e=s($te);T(qA.$$.fragment,c0e),c0e.forEach(t),d0e.forEach(t),qQe=i(Y$),kte=n(Y$,"SPAN",{});var f0e=s(kte);jQe=r(f0e,"AutoConfig"),f0e.forEach(t),Y$.forEach(t),FOe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(jA.$$.fragment,rt),DQe=i(rt),DA=n(rt,"P",{});var K$=s(DA);GQe=r(K$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_S=n(K$,"A",{href:!0});var m0e=s(_S);OQe=r(m0e,"from_pretrained()"),m0e.forEach(t),VQe=r(K$," class method."),K$.forEach(t),XQe=i(rt),GA=n(rt,"P",{});var Z$=s(GA);zQe=r(Z$,"This class cannot be instantiated directly using "),Ste=n(Z$,"CODE",{});var g0e=s(Ste);QQe=r(g0e,"__init__()"),g0e.forEach(t),WQe=r(Z$," (throws an error)."),Z$.forEach(t),HQe=i(rt),Ar=n(rt,"DIV",{class:!0});var tt=s(Ar);T(OA.$$.fragment,tt),UQe=i(tt),Rte=n(tt,"P",{});var h0e=s(Rte);JQe=r(h0e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),h0e.forEach(t),YQe=i(tt),ki=n(tt,"P",{});var Lf=s(ki);KQe=r(Lf,"The configuration class to instantiate is selected based on the "),Pte=n(Lf,"CODE",{});var p0e=s(Pte);ZQe=r(p0e,"model_type"),p0e.forEach(t),eWe=r(Lf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Bte=n(Lf,"CODE",{});var _0e=s(Bte);oWe=r(_0e,"pretrained_model_name_or_path"),_0e.forEach(t),rWe=r(Lf,":"),Lf.forEach(t),tWe=i(tt),A=n(tt,"UL",{});var L=s(A);If=n(L,"LI",{});var m0=s(If);Ite=n(m0,"STRONG",{});var u0e=s(Ite);aWe=r(u0e,"albert"),u0e.forEach(t),nWe=r(m0," \u2014 "),uS=n(m0,"A",{href:!0});var b0e=s(uS);sWe=r(b0e,"AlbertConfig"),b0e.forEach(t),lWe=r(m0," (ALBERT model)"),m0.forEach(t),iWe=i(L),Nf=n(L,"LI",{});var g0=s(Nf);Nte=n(g0,"STRONG",{});var v0e=s(Nte);dWe=r(v0e,"bart"),v0e.forEach(t),cWe=r(g0," \u2014 "),bS=n(g0,"A",{href:!0});var F0e=s(bS);fWe=r(F0e,"BartConfig"),F0e.forEach(t),mWe=r(g0," (BART model)"),g0.forEach(t),gWe=i(L),qf=n(L,"LI",{});var h0=s(qf);qte=n(h0,"STRONG",{});var T0e=s(qte);hWe=r(T0e,"beit"),T0e.forEach(t),pWe=r(h0," \u2014 "),vS=n(h0,"A",{href:!0});var M0e=s(vS);_We=r(M0e,"BeitConfig"),M0e.forEach(t),uWe=r(h0," (BEiT model)"),h0.forEach(t),bWe=i(L),jf=n(L,"LI",{});var p0=s(jf);jte=n(p0,"STRONG",{});var E0e=s(jte);vWe=r(E0e,"bert"),E0e.forEach(t),FWe=r(p0," \u2014 "),FS=n(p0,"A",{href:!0});var C0e=s(FS);TWe=r(C0e,"BertConfig"),C0e.forEach(t),MWe=r(p0," (BERT model)"),p0.forEach(t),EWe=i(L),Df=n(L,"LI",{});var _0=s(Df);Dte=n(_0,"STRONG",{});var w0e=s(Dte);CWe=r(w0e,"bert-generation"),w0e.forEach(t),wWe=r(_0," \u2014 "),TS=n(_0,"A",{href:!0});var A0e=s(TS);AWe=r(A0e,"BertGenerationConfig"),A0e.forEach(t),LWe=r(_0," (Bert Generation model)"),_0.forEach(t),yWe=i(L),Gf=n(L,"LI",{});var u0=s(Gf);Gte=n(u0,"STRONG",{});var L0e=s(Gte);xWe=r(L0e,"big_bird"),L0e.forEach(t),$We=r(u0," \u2014 "),MS=n(u0,"A",{href:!0});var y0e=s(MS);kWe=r(y0e,"BigBirdConfig"),y0e.forEach(t),SWe=r(u0," (BigBird model)"),u0.forEach(t),RWe=i(L),Of=n(L,"LI",{});var b0=s(Of);Ote=n(b0,"STRONG",{});var x0e=s(Ote);PWe=r(x0e,"bigbird_pegasus"),x0e.forEach(t),BWe=r(b0," \u2014 "),ES=n(b0,"A",{href:!0});var $0e=s(ES);IWe=r($0e,"BigBirdPegasusConfig"),$0e.forEach(t),NWe=r(b0," (BigBird-Pegasus model)"),b0.forEach(t),qWe=i(L),Vf=n(L,"LI",{});var v0=s(Vf);Vte=n(v0,"STRONG",{});var k0e=s(Vte);jWe=r(k0e,"blenderbot"),k0e.forEach(t),DWe=r(v0," \u2014 "),CS=n(v0,"A",{href:!0});var S0e=s(CS);GWe=r(S0e,"BlenderbotConfig"),S0e.forEach(t),OWe=r(v0," (Blenderbot model)"),v0.forEach(t),VWe=i(L),Xf=n(L,"LI",{});var F0=s(Xf);Xte=n(F0,"STRONG",{});var R0e=s(Xte);XWe=r(R0e,"blenderbot-small"),R0e.forEach(t),zWe=r(F0," \u2014 "),wS=n(F0,"A",{href:!0});var P0e=s(wS);QWe=r(P0e,"BlenderbotSmallConfig"),P0e.forEach(t),WWe=r(F0," (BlenderbotSmall model)"),F0.forEach(t),HWe=i(L),zf=n(L,"LI",{});var T0=s(zf);zte=n(T0,"STRONG",{});var B0e=s(zte);UWe=r(B0e,"bloom"),B0e.forEach(t),JWe=r(T0," \u2014 "),AS=n(T0,"A",{href:!0});var I0e=s(AS);YWe=r(I0e,"BloomConfig"),I0e.forEach(t),KWe=r(T0," (BLOOM model)"),T0.forEach(t),ZWe=i(L),Qf=n(L,"LI",{});var M0=s(Qf);Qte=n(M0,"STRONG",{});var N0e=s(Qte);eHe=r(N0e,"camembert"),N0e.forEach(t),oHe=r(M0," \u2014 "),LS=n(M0,"A",{href:!0});var q0e=s(LS);rHe=r(q0e,"CamembertConfig"),q0e.forEach(t),tHe=r(M0," (CamemBERT model)"),M0.forEach(t),aHe=i(L),Wf=n(L,"LI",{});var E0=s(Wf);Wte=n(E0,"STRONG",{});var j0e=s(Wte);nHe=r(j0e,"canine"),j0e.forEach(t),sHe=r(E0," \u2014 "),yS=n(E0,"A",{href:!0});var D0e=s(yS);lHe=r(D0e,"CanineConfig"),D0e.forEach(t),iHe=r(E0," (CANINE model)"),E0.forEach(t),dHe=i(L),Hf=n(L,"LI",{});var C0=s(Hf);Hte=n(C0,"STRONG",{});var G0e=s(Hte);cHe=r(G0e,"clip"),G0e.forEach(t),fHe=r(C0," \u2014 "),xS=n(C0,"A",{href:!0});var O0e=s(xS);mHe=r(O0e,"CLIPConfig"),O0e.forEach(t),gHe=r(C0," (CLIP model)"),C0.forEach(t),hHe=i(L),Uf=n(L,"LI",{});var w0=s(Uf);Ute=n(w0,"STRONG",{});var V0e=s(Ute);pHe=r(V0e,"codegen"),V0e.forEach(t),_He=r(w0," \u2014 "),$S=n(w0,"A",{href:!0});var X0e=s($S);uHe=r(X0e,"CodeGenConfig"),X0e.forEach(t),bHe=r(w0," (CodeGen model)"),w0.forEach(t),vHe=i(L),Jf=n(L,"LI",{});var A0=s(Jf);Jte=n(A0,"STRONG",{});var z0e=s(Jte);FHe=r(z0e,"convbert"),z0e.forEach(t),THe=r(A0," \u2014 "),kS=n(A0,"A",{href:!0});var Q0e=s(kS);MHe=r(Q0e,"ConvBertConfig"),Q0e.forEach(t),EHe=r(A0," (ConvBERT model)"),A0.forEach(t),CHe=i(L),Yf=n(L,"LI",{});var L0=s(Yf);Yte=n(L0,"STRONG",{});var W0e=s(Yte);wHe=r(W0e,"convnext"),W0e.forEach(t),AHe=r(L0," \u2014 "),SS=n(L0,"A",{href:!0});var H0e=s(SS);LHe=r(H0e,"ConvNextConfig"),H0e.forEach(t),yHe=r(L0," (ConvNeXT model)"),L0.forEach(t),xHe=i(L),Kf=n(L,"LI",{});var y0=s(Kf);Kte=n(y0,"STRONG",{});var U0e=s(Kte);$He=r(U0e,"ctrl"),U0e.forEach(t),kHe=r(y0," \u2014 "),RS=n(y0,"A",{href:!0});var J0e=s(RS);SHe=r(J0e,"CTRLConfig"),J0e.forEach(t),RHe=r(y0," (CTRL model)"),y0.forEach(t),PHe=i(L),Zf=n(L,"LI",{});var x0=s(Zf);Zte=n(x0,"STRONG",{});var Y0e=s(Zte);BHe=r(Y0e,"cvt"),Y0e.forEach(t),IHe=r(x0," \u2014 "),PS=n(x0,"A",{href:!0});var K0e=s(PS);NHe=r(K0e,"CvtConfig"),K0e.forEach(t),qHe=r(x0," (CvT model)"),x0.forEach(t),jHe=i(L),em=n(L,"LI",{});var $0=s(em);eae=n($0,"STRONG",{});var Z0e=s(eae);DHe=r(Z0e,"data2vec-audio"),Z0e.forEach(t),GHe=r($0," \u2014 "),BS=n($0,"A",{href:!0});var ewe=s(BS);OHe=r(ewe,"Data2VecAudioConfig"),ewe.forEach(t),VHe=r($0," (Data2VecAudio model)"),$0.forEach(t),XHe=i(L),om=n(L,"LI",{});var k0=s(om);oae=n(k0,"STRONG",{});var owe=s(oae);zHe=r(owe,"data2vec-text"),owe.forEach(t),QHe=r(k0," \u2014 "),IS=n(k0,"A",{href:!0});var rwe=s(IS);WHe=r(rwe,"Data2VecTextConfig"),rwe.forEach(t),HHe=r(k0," (Data2VecText model)"),k0.forEach(t),UHe=i(L),rm=n(L,"LI",{});var S0=s(rm);rae=n(S0,"STRONG",{});var twe=s(rae);JHe=r(twe,"data2vec-vision"),twe.forEach(t),YHe=r(S0," \u2014 "),NS=n(S0,"A",{href:!0});var awe=s(NS);KHe=r(awe,"Data2VecVisionConfig"),awe.forEach(t),ZHe=r(S0," (Data2VecVision model)"),S0.forEach(t),eUe=i(L),tm=n(L,"LI",{});var R0=s(tm);tae=n(R0,"STRONG",{});var nwe=s(tae);oUe=r(nwe,"deberta"),nwe.forEach(t),rUe=r(R0," \u2014 "),qS=n(R0,"A",{href:!0});var swe=s(qS);tUe=r(swe,"DebertaConfig"),swe.forEach(t),aUe=r(R0," (DeBERTa model)"),R0.forEach(t),nUe=i(L),am=n(L,"LI",{});var P0=s(am);aae=n(P0,"STRONG",{});var lwe=s(aae);sUe=r(lwe,"deberta-v2"),lwe.forEach(t),lUe=r(P0," \u2014 "),jS=n(P0,"A",{href:!0});var iwe=s(jS);iUe=r(iwe,"DebertaV2Config"),iwe.forEach(t),dUe=r(P0," (DeBERTa-v2 model)"),P0.forEach(t),cUe=i(L),nm=n(L,"LI",{});var B0=s(nm);nae=n(B0,"STRONG",{});var fZr=s(nae);fUe=r(fZr,"decision_transformer"),fZr.forEach(t),mUe=r(B0," \u2014 "),DS=n(B0,"A",{href:!0});var mZr=s(DS);gUe=r(mZr,"DecisionTransformerConfig"),mZr.forEach(t),hUe=r(B0," (Decision Transformer model)"),B0.forEach(t),pUe=i(L),sm=n(L,"LI",{});var dwe=s(sm);sae=n(dwe,"STRONG",{});var gZr=s(sae);_Ue=r(gZr,"deit"),gZr.forEach(t),uUe=r(dwe," \u2014 "),GS=n(dwe,"A",{href:!0});var hZr=s(GS);bUe=r(hZr,"DeiTConfig"),hZr.forEach(t),vUe=r(dwe," (DeiT model)"),dwe.forEach(t),FUe=i(L),lm=n(L,"LI",{});var cwe=s(lm);lae=n(cwe,"STRONG",{});var pZr=s(lae);TUe=r(pZr,"detr"),pZr.forEach(t),MUe=r(cwe," \u2014 "),OS=n(cwe,"A",{href:!0});var _Zr=s(OS);EUe=r(_Zr,"DetrConfig"),_Zr.forEach(t),CUe=r(cwe," (DETR model)"),cwe.forEach(t),wUe=i(L),im=n(L,"LI",{});var fwe=s(im);iae=n(fwe,"STRONG",{});var uZr=s(iae);AUe=r(uZr,"distilbert"),uZr.forEach(t),LUe=r(fwe," \u2014 "),VS=n(fwe,"A",{href:!0});var bZr=s(VS);yUe=r(bZr,"DistilBertConfig"),bZr.forEach(t),xUe=r(fwe," (DistilBERT model)"),fwe.forEach(t),$Ue=i(L),dm=n(L,"LI",{});var mwe=s(dm);dae=n(mwe,"STRONG",{});var vZr=s(dae);kUe=r(vZr,"dpr"),vZr.forEach(t),SUe=r(mwe," \u2014 "),XS=n(mwe,"A",{href:!0});var FZr=s(XS);RUe=r(FZr,"DPRConfig"),FZr.forEach(t),PUe=r(mwe," (DPR model)"),mwe.forEach(t),BUe=i(L),cm=n(L,"LI",{});var gwe=s(cm);cae=n(gwe,"STRONG",{});var TZr=s(cae);IUe=r(TZr,"dpt"),TZr.forEach(t),NUe=r(gwe," \u2014 "),zS=n(gwe,"A",{href:!0});var MZr=s(zS);qUe=r(MZr,"DPTConfig"),MZr.forEach(t),jUe=r(gwe," (DPT model)"),gwe.forEach(t),DUe=i(L),fm=n(L,"LI",{});var hwe=s(fm);fae=n(hwe,"STRONG",{});var EZr=s(fae);GUe=r(EZr,"electra"),EZr.forEach(t),OUe=r(hwe," \u2014 "),QS=n(hwe,"A",{href:!0});var CZr=s(QS);VUe=r(CZr,"ElectraConfig"),CZr.forEach(t),XUe=r(hwe," (ELECTRA model)"),hwe.forEach(t),zUe=i(L),mm=n(L,"LI",{});var pwe=s(mm);mae=n(pwe,"STRONG",{});var wZr=s(mae);QUe=r(wZr,"encoder-decoder"),wZr.forEach(t),WUe=r(pwe," \u2014 "),WS=n(pwe,"A",{href:!0});var AZr=s(WS);HUe=r(AZr,"EncoderDecoderConfig"),AZr.forEach(t),UUe=r(pwe," (Encoder decoder model)"),pwe.forEach(t),JUe=i(L),gm=n(L,"LI",{});var _we=s(gm);gae=n(_we,"STRONG",{});var LZr=s(gae);YUe=r(LZr,"flaubert"),LZr.forEach(t),KUe=r(_we," \u2014 "),HS=n(_we,"A",{href:!0});var yZr=s(HS);ZUe=r(yZr,"FlaubertConfig"),yZr.forEach(t),eJe=r(_we," (FlauBERT model)"),_we.forEach(t),oJe=i(L),hm=n(L,"LI",{});var uwe=s(hm);hae=n(uwe,"STRONG",{});var xZr=s(hae);rJe=r(xZr,"flava"),xZr.forEach(t),tJe=r(uwe," \u2014 "),US=n(uwe,"A",{href:!0});var $Zr=s(US);aJe=r($Zr,"FlavaConfig"),$Zr.forEach(t),nJe=r(uwe," (FLAVA model)"),uwe.forEach(t),sJe=i(L),pm=n(L,"LI",{});var bwe=s(pm);pae=n(bwe,"STRONG",{});var kZr=s(pae);lJe=r(kZr,"fnet"),kZr.forEach(t),iJe=r(bwe," \u2014 "),JS=n(bwe,"A",{href:!0});var SZr=s(JS);dJe=r(SZr,"FNetConfig"),SZr.forEach(t),cJe=r(bwe," (FNet model)"),bwe.forEach(t),fJe=i(L),_m=n(L,"LI",{});var vwe=s(_m);_ae=n(vwe,"STRONG",{});var RZr=s(_ae);mJe=r(RZr,"fsmt"),RZr.forEach(t),gJe=r(vwe," \u2014 "),YS=n(vwe,"A",{href:!0});var PZr=s(YS);hJe=r(PZr,"FSMTConfig"),PZr.forEach(t),pJe=r(vwe," (FairSeq Machine-Translation model)"),vwe.forEach(t),_Je=i(L),um=n(L,"LI",{});var Fwe=s(um);uae=n(Fwe,"STRONG",{});var BZr=s(uae);uJe=r(BZr,"funnel"),BZr.forEach(t),bJe=r(Fwe," \u2014 "),KS=n(Fwe,"A",{href:!0});var IZr=s(KS);vJe=r(IZr,"FunnelConfig"),IZr.forEach(t),FJe=r(Fwe," (Funnel Transformer model)"),Fwe.forEach(t),TJe=i(L),bm=n(L,"LI",{});var Twe=s(bm);bae=n(Twe,"STRONG",{});var NZr=s(bae);MJe=r(NZr,"glpn"),NZr.forEach(t),EJe=r(Twe," \u2014 "),ZS=n(Twe,"A",{href:!0});var qZr=s(ZS);CJe=r(qZr,"GLPNConfig"),qZr.forEach(t),wJe=r(Twe," (GLPN model)"),Twe.forEach(t),AJe=i(L),vm=n(L,"LI",{});var Mwe=s(vm);vae=n(Mwe,"STRONG",{});var jZr=s(vae);LJe=r(jZr,"gpt2"),jZr.forEach(t),yJe=r(Mwe," \u2014 "),eR=n(Mwe,"A",{href:!0});var DZr=s(eR);xJe=r(DZr,"GPT2Config"),DZr.forEach(t),$Je=r(Mwe," (OpenAI GPT-2 model)"),Mwe.forEach(t),kJe=i(L),Fm=n(L,"LI",{});var Ewe=s(Fm);Fae=n(Ewe,"STRONG",{});var GZr=s(Fae);SJe=r(GZr,"gpt_neo"),GZr.forEach(t),RJe=r(Ewe," \u2014 "),oR=n(Ewe,"A",{href:!0});var OZr=s(oR);PJe=r(OZr,"GPTNeoConfig"),OZr.forEach(t),BJe=r(Ewe," (GPT Neo model)"),Ewe.forEach(t),IJe=i(L),Tm=n(L,"LI",{});var Cwe=s(Tm);Tae=n(Cwe,"STRONG",{});var VZr=s(Tae);NJe=r(VZr,"gpt_neox"),VZr.forEach(t),qJe=r(Cwe," \u2014 "),rR=n(Cwe,"A",{href:!0});var XZr=s(rR);jJe=r(XZr,"GPTNeoXConfig"),XZr.forEach(t),DJe=r(Cwe," (GPT NeoX model)"),Cwe.forEach(t),GJe=i(L),Mm=n(L,"LI",{});var wwe=s(Mm);Mae=n(wwe,"STRONG",{});var zZr=s(Mae);OJe=r(zZr,"gptj"),zZr.forEach(t),VJe=r(wwe," \u2014 "),tR=n(wwe,"A",{href:!0});var QZr=s(tR);XJe=r(QZr,"GPTJConfig"),QZr.forEach(t),zJe=r(wwe," (GPT-J model)"),wwe.forEach(t),QJe=i(L),Em=n(L,"LI",{});var Awe=s(Em);Eae=n(Awe,"STRONG",{});var WZr=s(Eae);WJe=r(WZr,"hubert"),WZr.forEach(t),HJe=r(Awe," \u2014 "),aR=n(Awe,"A",{href:!0});var HZr=s(aR);UJe=r(HZr,"HubertConfig"),HZr.forEach(t),JJe=r(Awe," (Hubert model)"),Awe.forEach(t),YJe=i(L),Cm=n(L,"LI",{});var Lwe=s(Cm);Cae=n(Lwe,"STRONG",{});var UZr=s(Cae);KJe=r(UZr,"ibert"),UZr.forEach(t),ZJe=r(Lwe," \u2014 "),nR=n(Lwe,"A",{href:!0});var JZr=s(nR);eYe=r(JZr,"IBertConfig"),JZr.forEach(t),oYe=r(Lwe," (I-BERT model)"),Lwe.forEach(t),rYe=i(L),wm=n(L,"LI",{});var ywe=s(wm);wae=n(ywe,"STRONG",{});var YZr=s(wae);tYe=r(YZr,"imagegpt"),YZr.forEach(t),aYe=r(ywe," \u2014 "),sR=n(ywe,"A",{href:!0});var KZr=s(sR);nYe=r(KZr,"ImageGPTConfig"),KZr.forEach(t),sYe=r(ywe," (ImageGPT model)"),ywe.forEach(t),lYe=i(L),Am=n(L,"LI",{});var xwe=s(Am);Aae=n(xwe,"STRONG",{});var ZZr=s(Aae);iYe=r(ZZr,"jukebox"),ZZr.forEach(t),dYe=r(xwe," \u2014 "),lR=n(xwe,"A",{href:!0});var eet=s(lR);cYe=r(eet,"JukeboxConfig"),eet.forEach(t),fYe=r(xwe," (Jukebox model)"),xwe.forEach(t),mYe=i(L),Lm=n(L,"LI",{});var $we=s(Lm);Lae=n($we,"STRONG",{});var oet=s(Lae);gYe=r(oet,"layoutlm"),oet.forEach(t),hYe=r($we," \u2014 "),iR=n($we,"A",{href:!0});var ret=s(iR);pYe=r(ret,"LayoutLMConfig"),ret.forEach(t),_Ye=r($we," (LayoutLM model)"),$we.forEach(t),uYe=i(L),ym=n(L,"LI",{});var kwe=s(ym);yae=n(kwe,"STRONG",{});var tet=s(yae);bYe=r(tet,"layoutlmv2"),tet.forEach(t),vYe=r(kwe," \u2014 "),dR=n(kwe,"A",{href:!0});var aet=s(dR);FYe=r(aet,"LayoutLMv2Config"),aet.forEach(t),TYe=r(kwe," (LayoutLMv2 model)"),kwe.forEach(t),MYe=i(L),xm=n(L,"LI",{});var Swe=s(xm);xae=n(Swe,"STRONG",{});var net=s(xae);EYe=r(net,"layoutlmv3"),net.forEach(t),CYe=r(Swe," \u2014 "),cR=n(Swe,"A",{href:!0});var set=s(cR);wYe=r(set,"LayoutLMv3Config"),set.forEach(t),AYe=r(Swe," (LayoutLMv3 model)"),Swe.forEach(t),LYe=i(L),$m=n(L,"LI",{});var Rwe=s($m);$ae=n(Rwe,"STRONG",{});var iet=s($ae);yYe=r(iet,"led"),iet.forEach(t),xYe=r(Rwe," \u2014 "),fR=n(Rwe,"A",{href:!0});var det=s(fR);$Ye=r(det,"LEDConfig"),det.forEach(t),kYe=r(Rwe," (LED model)"),Rwe.forEach(t),SYe=i(L),km=n(L,"LI",{});var Pwe=s(km);kae=n(Pwe,"STRONG",{});var cet=s(kae);RYe=r(cet,"levit"),cet.forEach(t),PYe=r(Pwe," \u2014 "),mR=n(Pwe,"A",{href:!0});var fet=s(mR);BYe=r(fet,"LevitConfig"),fet.forEach(t),IYe=r(Pwe," (LeViT model)"),Pwe.forEach(t),NYe=i(L),Sm=n(L,"LI",{});var Bwe=s(Sm);Sae=n(Bwe,"STRONG",{});var met=s(Sae);qYe=r(met,"longformer"),met.forEach(t),jYe=r(Bwe," \u2014 "),gR=n(Bwe,"A",{href:!0});var get=s(gR);DYe=r(get,"LongformerConfig"),get.forEach(t),GYe=r(Bwe," (Longformer model)"),Bwe.forEach(t),OYe=i(L),Rm=n(L,"LI",{});var Iwe=s(Rm);Rae=n(Iwe,"STRONG",{});var het=s(Rae);VYe=r(het,"longt5"),het.forEach(t),XYe=r(Iwe," \u2014 "),hR=n(Iwe,"A",{href:!0});var pet=s(hR);zYe=r(pet,"LongT5Config"),pet.forEach(t),QYe=r(Iwe," (LongT5 model)"),Iwe.forEach(t),WYe=i(L),Pm=n(L,"LI",{});var Nwe=s(Pm);Pae=n(Nwe,"STRONG",{});var _et=s(Pae);HYe=r(_et,"luke"),_et.forEach(t),UYe=r(Nwe," \u2014 "),pR=n(Nwe,"A",{href:!0});var uet=s(pR);JYe=r(uet,"LukeConfig"),uet.forEach(t),YYe=r(Nwe," (LUKE model)"),Nwe.forEach(t),KYe=i(L),Bm=n(L,"LI",{});var qwe=s(Bm);Bae=n(qwe,"STRONG",{});var bet=s(Bae);ZYe=r(bet,"lxmert"),bet.forEach(t),eKe=r(qwe," \u2014 "),_R=n(qwe,"A",{href:!0});var vet=s(_R);oKe=r(vet,"LxmertConfig"),vet.forEach(t),rKe=r(qwe," (LXMERT model)"),qwe.forEach(t),tKe=i(L),Im=n(L,"LI",{});var jwe=s(Im);Iae=n(jwe,"STRONG",{});var Fet=s(Iae);aKe=r(Fet,"m2m_100"),Fet.forEach(t),nKe=r(jwe," \u2014 "),uR=n(jwe,"A",{href:!0});var Tet=s(uR);sKe=r(Tet,"M2M100Config"),Tet.forEach(t),lKe=r(jwe," (M2M100 model)"),jwe.forEach(t),iKe=i(L),Nm=n(L,"LI",{});var Dwe=s(Nm);Nae=n(Dwe,"STRONG",{});var Met=s(Nae);dKe=r(Met,"marian"),Met.forEach(t),cKe=r(Dwe," \u2014 "),bR=n(Dwe,"A",{href:!0});var Eet=s(bR);fKe=r(Eet,"MarianConfig"),Eet.forEach(t),mKe=r(Dwe," (Marian model)"),Dwe.forEach(t),gKe=i(L),qm=n(L,"LI",{});var Gwe=s(qm);qae=n(Gwe,"STRONG",{});var Cet=s(qae);hKe=r(Cet,"maskformer"),Cet.forEach(t),pKe=r(Gwe," \u2014 "),vR=n(Gwe,"A",{href:!0});var wet=s(vR);_Ke=r(wet,"MaskFormerConfig"),wet.forEach(t),uKe=r(Gwe," (MaskFormer model)"),Gwe.forEach(t),bKe=i(L),jm=n(L,"LI",{});var Owe=s(jm);jae=n(Owe,"STRONG",{});var Aet=s(jae);vKe=r(Aet,"mbart"),Aet.forEach(t),FKe=r(Owe," \u2014 "),FR=n(Owe,"A",{href:!0});var Let=s(FR);TKe=r(Let,"MBartConfig"),Let.forEach(t),MKe=r(Owe," (mBART model)"),Owe.forEach(t),EKe=i(L),Dm=n(L,"LI",{});var Vwe=s(Dm);Dae=n(Vwe,"STRONG",{});var yet=s(Dae);CKe=r(yet,"mctct"),yet.forEach(t),wKe=r(Vwe," \u2014 "),TR=n(Vwe,"A",{href:!0});var xet=s(TR);AKe=r(xet,"MCTCTConfig"),xet.forEach(t),LKe=r(Vwe," (M-CTC-T model)"),Vwe.forEach(t),yKe=i(L),Gm=n(L,"LI",{});var Xwe=s(Gm);Gae=n(Xwe,"STRONG",{});var $et=s(Gae);xKe=r($et,"megatron-bert"),$et.forEach(t),$Ke=r(Xwe," \u2014 "),MR=n(Xwe,"A",{href:!0});var ket=s(MR);kKe=r(ket,"MegatronBertConfig"),ket.forEach(t),SKe=r(Xwe," (Megatron-BERT model)"),Xwe.forEach(t),RKe=i(L),Om=n(L,"LI",{});var zwe=s(Om);Oae=n(zwe,"STRONG",{});var Set=s(Oae);PKe=r(Set,"mobilebert"),Set.forEach(t),BKe=r(zwe," \u2014 "),ER=n(zwe,"A",{href:!0});var Ret=s(ER);IKe=r(Ret,"MobileBertConfig"),Ret.forEach(t),NKe=r(zwe," (MobileBERT model)"),zwe.forEach(t),qKe=i(L),Vm=n(L,"LI",{});var Qwe=s(Vm);Vae=n(Qwe,"STRONG",{});var Pet=s(Vae);jKe=r(Pet,"mpnet"),Pet.forEach(t),DKe=r(Qwe," \u2014 "),CR=n(Qwe,"A",{href:!0});var Bet=s(CR);GKe=r(Bet,"MPNetConfig"),Bet.forEach(t),OKe=r(Qwe," (MPNet model)"),Qwe.forEach(t),VKe=i(L),Xm=n(L,"LI",{});var Wwe=s(Xm);Xae=n(Wwe,"STRONG",{});var Iet=s(Xae);XKe=r(Iet,"mt5"),Iet.forEach(t),zKe=r(Wwe," \u2014 "),wR=n(Wwe,"A",{href:!0});var Net=s(wR);QKe=r(Net,"MT5Config"),Net.forEach(t),WKe=r(Wwe," (MT5 model)"),Wwe.forEach(t),HKe=i(L),zm=n(L,"LI",{});var Hwe=s(zm);zae=n(Hwe,"STRONG",{});var qet=s(zae);UKe=r(qet,"nezha"),qet.forEach(t),JKe=r(Hwe," \u2014 "),AR=n(Hwe,"A",{href:!0});var jet=s(AR);YKe=r(jet,"NezhaConfig"),jet.forEach(t),KKe=r(Hwe," (Nezha model)"),Hwe.forEach(t),ZKe=i(L),Qm=n(L,"LI",{});var Uwe=s(Qm);Qae=n(Uwe,"STRONG",{});var Det=s(Qae);eZe=r(Det,"nystromformer"),Det.forEach(t),oZe=r(Uwe," \u2014 "),LR=n(Uwe,"A",{href:!0});var Get=s(LR);rZe=r(Get,"NystromformerConfig"),Get.forEach(t),tZe=r(Uwe," (Nystr\xF6mformer model)"),Uwe.forEach(t),aZe=i(L),Wm=n(L,"LI",{});var Jwe=s(Wm);Wae=n(Jwe,"STRONG",{});var Oet=s(Wae);nZe=r(Oet,"openai-gpt"),Oet.forEach(t),sZe=r(Jwe," \u2014 "),yR=n(Jwe,"A",{href:!0});var Vet=s(yR);lZe=r(Vet,"OpenAIGPTConfig"),Vet.forEach(t),iZe=r(Jwe," (OpenAI GPT model)"),Jwe.forEach(t),dZe=i(L),Hm=n(L,"LI",{});var Ywe=s(Hm);Hae=n(Ywe,"STRONG",{});var Xet=s(Hae);cZe=r(Xet,"opt"),Xet.forEach(t),fZe=r(Ywe," \u2014 "),xR=n(Ywe,"A",{href:!0});var zet=s(xR);mZe=r(zet,"OPTConfig"),zet.forEach(t),gZe=r(Ywe," (OPT model)"),Ywe.forEach(t),hZe=i(L),Um=n(L,"LI",{});var Kwe=s(Um);Uae=n(Kwe,"STRONG",{});var Qet=s(Uae);pZe=r(Qet,"pegasus"),Qet.forEach(t),_Ze=r(Kwe," \u2014 "),$R=n(Kwe,"A",{href:!0});var Wet=s($R);uZe=r(Wet,"PegasusConfig"),Wet.forEach(t),bZe=r(Kwe," (Pegasus model)"),Kwe.forEach(t),vZe=i(L),Jm=n(L,"LI",{});var Zwe=s(Jm);Jae=n(Zwe,"STRONG",{});var Het=s(Jae);FZe=r(Het,"perceiver"),Het.forEach(t),TZe=r(Zwe," \u2014 "),kR=n(Zwe,"A",{href:!0});var Uet=s(kR);MZe=r(Uet,"PerceiverConfig"),Uet.forEach(t),EZe=r(Zwe," (Perceiver model)"),Zwe.forEach(t),CZe=i(L),Ym=n(L,"LI",{});var eAe=s(Ym);Yae=n(eAe,"STRONG",{});var Jet=s(Yae);wZe=r(Jet,"plbart"),Jet.forEach(t),AZe=r(eAe," \u2014 "),SR=n(eAe,"A",{href:!0});var Yet=s(SR);LZe=r(Yet,"PLBartConfig"),Yet.forEach(t),yZe=r(eAe," (PLBart model)"),eAe.forEach(t),xZe=i(L),Km=n(L,"LI",{});var oAe=s(Km);Kae=n(oAe,"STRONG",{});var Ket=s(Kae);$Ze=r(Ket,"poolformer"),Ket.forEach(t),kZe=r(oAe," \u2014 "),RR=n(oAe,"A",{href:!0});var Zet=s(RR);SZe=r(Zet,"PoolFormerConfig"),Zet.forEach(t),RZe=r(oAe," (PoolFormer model)"),oAe.forEach(t),PZe=i(L),Zm=n(L,"LI",{});var rAe=s(Zm);Zae=n(rAe,"STRONG",{});var eot=s(Zae);BZe=r(eot,"prophetnet"),eot.forEach(t),IZe=r(rAe," \u2014 "),PR=n(rAe,"A",{href:!0});var oot=s(PR);NZe=r(oot,"ProphetNetConfig"),oot.forEach(t),qZe=r(rAe," (ProphetNet model)"),rAe.forEach(t),jZe=i(L),eg=n(L,"LI",{});var tAe=s(eg);ene=n(tAe,"STRONG",{});var rot=s(ene);DZe=r(rot,"qdqbert"),rot.forEach(t),GZe=r(tAe," \u2014 "),BR=n(tAe,"A",{href:!0});var tot=s(BR);OZe=r(tot,"QDQBertConfig"),tot.forEach(t),VZe=r(tAe," (QDQBert model)"),tAe.forEach(t),XZe=i(L),og=n(L,"LI",{});var aAe=s(og);one=n(aAe,"STRONG",{});var aot=s(one);zZe=r(aot,"rag"),aot.forEach(t),QZe=r(aAe," \u2014 "),IR=n(aAe,"A",{href:!0});var not=s(IR);WZe=r(not,"RagConfig"),not.forEach(t),HZe=r(aAe," (RAG model)"),aAe.forEach(t),UZe=i(L),rg=n(L,"LI",{});var nAe=s(rg);rne=n(nAe,"STRONG",{});var sot=s(rne);JZe=r(sot,"realm"),sot.forEach(t),YZe=r(nAe," \u2014 "),NR=n(nAe,"A",{href:!0});var lot=s(NR);KZe=r(lot,"RealmConfig"),lot.forEach(t),ZZe=r(nAe," (REALM model)"),nAe.forEach(t),eeo=i(L),tg=n(L,"LI",{});var sAe=s(tg);tne=n(sAe,"STRONG",{});var iot=s(tne);oeo=r(iot,"reformer"),iot.forEach(t),reo=r(sAe," \u2014 "),qR=n(sAe,"A",{href:!0});var dot=s(qR);teo=r(dot,"ReformerConfig"),dot.forEach(t),aeo=r(sAe," (Reformer model)"),sAe.forEach(t),neo=i(L),ag=n(L,"LI",{});var lAe=s(ag);ane=n(lAe,"STRONG",{});var cot=s(ane);seo=r(cot,"regnet"),cot.forEach(t),leo=r(lAe," \u2014 "),jR=n(lAe,"A",{href:!0});var fot=s(jR);ieo=r(fot,"RegNetConfig"),fot.forEach(t),deo=r(lAe," (RegNet model)"),lAe.forEach(t),ceo=i(L),ng=n(L,"LI",{});var iAe=s(ng);nne=n(iAe,"STRONG",{});var mot=s(nne);feo=r(mot,"rembert"),mot.forEach(t),meo=r(iAe," \u2014 "),DR=n(iAe,"A",{href:!0});var got=s(DR);geo=r(got,"RemBertConfig"),got.forEach(t),heo=r(iAe," (RemBERT model)"),iAe.forEach(t),peo=i(L),sg=n(L,"LI",{});var dAe=s(sg);sne=n(dAe,"STRONG",{});var hot=s(sne);_eo=r(hot,"resnet"),hot.forEach(t),ueo=r(dAe," \u2014 "),GR=n(dAe,"A",{href:!0});var pot=s(GR);beo=r(pot,"ResNetConfig"),pot.forEach(t),veo=r(dAe," (ResNet model)"),dAe.forEach(t),Feo=i(L),lg=n(L,"LI",{});var cAe=s(lg);lne=n(cAe,"STRONG",{});var _ot=s(lne);Teo=r(_ot,"retribert"),_ot.forEach(t),Meo=r(cAe," \u2014 "),OR=n(cAe,"A",{href:!0});var uot=s(OR);Eeo=r(uot,"RetriBertConfig"),uot.forEach(t),Ceo=r(cAe," (RetriBERT model)"),cAe.forEach(t),weo=i(L),ig=n(L,"LI",{});var fAe=s(ig);ine=n(fAe,"STRONG",{});var bot=s(ine);Aeo=r(bot,"roberta"),bot.forEach(t),Leo=r(fAe," \u2014 "),VR=n(fAe,"A",{href:!0});var vot=s(VR);yeo=r(vot,"RobertaConfig"),vot.forEach(t),xeo=r(fAe," (RoBERTa model)"),fAe.forEach(t),$eo=i(L),dg=n(L,"LI",{});var mAe=s(dg);dne=n(mAe,"STRONG",{});var Fot=s(dne);keo=r(Fot,"roformer"),Fot.forEach(t),Seo=r(mAe," \u2014 "),XR=n(mAe,"A",{href:!0});var Tot=s(XR);Reo=r(Tot,"RoFormerConfig"),Tot.forEach(t),Peo=r(mAe," (RoFormer model)"),mAe.forEach(t),Beo=i(L),cg=n(L,"LI",{});var gAe=s(cg);cne=n(gAe,"STRONG",{});var Mot=s(cne);Ieo=r(Mot,"segformer"),Mot.forEach(t),Neo=r(gAe," \u2014 "),zR=n(gAe,"A",{href:!0});var Eot=s(zR);qeo=r(Eot,"SegformerConfig"),Eot.forEach(t),jeo=r(gAe," (SegFormer model)"),gAe.forEach(t),Deo=i(L),fg=n(L,"LI",{});var hAe=s(fg);fne=n(hAe,"STRONG",{});var Cot=s(fne);Geo=r(Cot,"sew"),Cot.forEach(t),Oeo=r(hAe," \u2014 "),QR=n(hAe,"A",{href:!0});var wot=s(QR);Veo=r(wot,"SEWConfig"),wot.forEach(t),Xeo=r(hAe," (SEW model)"),hAe.forEach(t),zeo=i(L),mg=n(L,"LI",{});var pAe=s(mg);mne=n(pAe,"STRONG",{});var Aot=s(mne);Qeo=r(Aot,"sew-d"),Aot.forEach(t),Weo=r(pAe," \u2014 "),WR=n(pAe,"A",{href:!0});var Lot=s(WR);Heo=r(Lot,"SEWDConfig"),Lot.forEach(t),Ueo=r(pAe," (SEW-D model)"),pAe.forEach(t),Jeo=i(L),gg=n(L,"LI",{});var _Ae=s(gg);gne=n(_Ae,"STRONG",{});var yot=s(gne);Yeo=r(yot,"speech-encoder-decoder"),yot.forEach(t),Keo=r(_Ae," \u2014 "),HR=n(_Ae,"A",{href:!0});var xot=s(HR);Zeo=r(xot,"SpeechEncoderDecoderConfig"),xot.forEach(t),eoo=r(_Ae," (Speech Encoder decoder model)"),_Ae.forEach(t),ooo=i(L),hg=n(L,"LI",{});var uAe=s(hg);hne=n(uAe,"STRONG",{});var $ot=s(hne);roo=r($ot,"speech_to_text"),$ot.forEach(t),too=r(uAe," \u2014 "),UR=n(uAe,"A",{href:!0});var kot=s(UR);aoo=r(kot,"Speech2TextConfig"),kot.forEach(t),noo=r(uAe," (Speech2Text model)"),uAe.forEach(t),soo=i(L),pg=n(L,"LI",{});var bAe=s(pg);pne=n(bAe,"STRONG",{});var Sot=s(pne);loo=r(Sot,"speech_to_text_2"),Sot.forEach(t),ioo=r(bAe," \u2014 "),JR=n(bAe,"A",{href:!0});var Rot=s(JR);doo=r(Rot,"Speech2Text2Config"),Rot.forEach(t),coo=r(bAe," (Speech2Text2 model)"),bAe.forEach(t),foo=i(L),_g=n(L,"LI",{});var vAe=s(_g);_ne=n(vAe,"STRONG",{});var Pot=s(_ne);moo=r(Pot,"splinter"),Pot.forEach(t),goo=r(vAe," \u2014 "),YR=n(vAe,"A",{href:!0});var Bot=s(YR);hoo=r(Bot,"SplinterConfig"),Bot.forEach(t),poo=r(vAe," (Splinter model)"),vAe.forEach(t),_oo=i(L),ug=n(L,"LI",{});var FAe=s(ug);une=n(FAe,"STRONG",{});var Iot=s(une);uoo=r(Iot,"squeezebert"),Iot.forEach(t),boo=r(FAe," \u2014 "),KR=n(FAe,"A",{href:!0});var Not=s(KR);voo=r(Not,"SqueezeBertConfig"),Not.forEach(t),Foo=r(FAe," (SqueezeBERT model)"),FAe.forEach(t),Too=i(L),bg=n(L,"LI",{});var TAe=s(bg);bne=n(TAe,"STRONG",{});var qot=s(bne);Moo=r(qot,"swin"),qot.forEach(t),Eoo=r(TAe," \u2014 "),ZR=n(TAe,"A",{href:!0});var jot=s(ZR);Coo=r(jot,"SwinConfig"),jot.forEach(t),woo=r(TAe," (Swin Transformer model)"),TAe.forEach(t),Aoo=i(L),vg=n(L,"LI",{});var MAe=s(vg);vne=n(MAe,"STRONG",{});var Dot=s(vne);Loo=r(Dot,"t5"),Dot.forEach(t),yoo=r(MAe," \u2014 "),eP=n(MAe,"A",{href:!0});var Got=s(eP);xoo=r(Got,"T5Config"),Got.forEach(t),$oo=r(MAe," (T5 model)"),MAe.forEach(t),koo=i(L),Fg=n(L,"LI",{});var EAe=s(Fg);Fne=n(EAe,"STRONG",{});var Oot=s(Fne);Soo=r(Oot,"tapas"),Oot.forEach(t),Roo=r(EAe," \u2014 "),oP=n(EAe,"A",{href:!0});var Vot=s(oP);Poo=r(Vot,"TapasConfig"),Vot.forEach(t),Boo=r(EAe," (TAPAS model)"),EAe.forEach(t),Ioo=i(L),Tg=n(L,"LI",{});var CAe=s(Tg);Tne=n(CAe,"STRONG",{});var Xot=s(Tne);Noo=r(Xot,"trajectory_transformer"),Xot.forEach(t),qoo=r(CAe," \u2014 "),rP=n(CAe,"A",{href:!0});var zot=s(rP);joo=r(zot,"TrajectoryTransformerConfig"),zot.forEach(t),Doo=r(CAe," (Trajectory Transformer model)"),CAe.forEach(t),Goo=i(L),Mg=n(L,"LI",{});var wAe=s(Mg);Mne=n(wAe,"STRONG",{});var Qot=s(Mne);Ooo=r(Qot,"transfo-xl"),Qot.forEach(t),Voo=r(wAe," \u2014 "),tP=n(wAe,"A",{href:!0});var Wot=s(tP);Xoo=r(Wot,"TransfoXLConfig"),Wot.forEach(t),zoo=r(wAe," (Transformer-XL model)"),wAe.forEach(t),Qoo=i(L),Eg=n(L,"LI",{});var AAe=s(Eg);Ene=n(AAe,"STRONG",{});var Hot=s(Ene);Woo=r(Hot,"trocr"),Hot.forEach(t),Hoo=r(AAe," \u2014 "),aP=n(AAe,"A",{href:!0});var Uot=s(aP);Uoo=r(Uot,"TrOCRConfig"),Uot.forEach(t),Joo=r(AAe," (TrOCR model)"),AAe.forEach(t),Yoo=i(L),Cg=n(L,"LI",{});var LAe=s(Cg);Cne=n(LAe,"STRONG",{});var Jot=s(Cne);Koo=r(Jot,"unispeech"),Jot.forEach(t),Zoo=r(LAe," \u2014 "),nP=n(LAe,"A",{href:!0});var Yot=s(nP);ero=r(Yot,"UniSpeechConfig"),Yot.forEach(t),oro=r(LAe," (UniSpeech model)"),LAe.forEach(t),rro=i(L),wg=n(L,"LI",{});var yAe=s(wg);wne=n(yAe,"STRONG",{});var Kot=s(wne);tro=r(Kot,"unispeech-sat"),Kot.forEach(t),aro=r(yAe," \u2014 "),sP=n(yAe,"A",{href:!0});var Zot=s(sP);nro=r(Zot,"UniSpeechSatConfig"),Zot.forEach(t),sro=r(yAe," (UniSpeechSat model)"),yAe.forEach(t),lro=i(L),Ag=n(L,"LI",{});var xAe=s(Ag);Ane=n(xAe,"STRONG",{});var ert=s(Ane);iro=r(ert,"van"),ert.forEach(t),dro=r(xAe," \u2014 "),lP=n(xAe,"A",{href:!0});var ort=s(lP);cro=r(ort,"VanConfig"),ort.forEach(t),fro=r(xAe," (VAN model)"),xAe.forEach(t),mro=i(L),Lg=n(L,"LI",{});var $Ae=s(Lg);Lne=n($Ae,"STRONG",{});var rrt=s(Lne);gro=r(rrt,"vilt"),rrt.forEach(t),hro=r($Ae," \u2014 "),iP=n($Ae,"A",{href:!0});var trt=s(iP);pro=r(trt,"ViltConfig"),trt.forEach(t),_ro=r($Ae," (ViLT model)"),$Ae.forEach(t),uro=i(L),yg=n(L,"LI",{});var kAe=s(yg);yne=n(kAe,"STRONG",{});var art=s(yne);bro=r(art,"vision-encoder-decoder"),art.forEach(t),vro=r(kAe," \u2014 "),dP=n(kAe,"A",{href:!0});var nrt=s(dP);Fro=r(nrt,"VisionEncoderDecoderConfig"),nrt.forEach(t),Tro=r(kAe," (Vision Encoder decoder model)"),kAe.forEach(t),Mro=i(L),xg=n(L,"LI",{});var SAe=s(xg);xne=n(SAe,"STRONG",{});var srt=s(xne);Ero=r(srt,"vision-text-dual-encoder"),srt.forEach(t),Cro=r(SAe," \u2014 "),cP=n(SAe,"A",{href:!0});var lrt=s(cP);wro=r(lrt,"VisionTextDualEncoderConfig"),lrt.forEach(t),Aro=r(SAe," (VisionTextDualEncoder model)"),SAe.forEach(t),Lro=i(L),$g=n(L,"LI",{});var RAe=s($g);$ne=n(RAe,"STRONG",{});var irt=s($ne);yro=r(irt,"visual_bert"),irt.forEach(t),xro=r(RAe," \u2014 "),fP=n(RAe,"A",{href:!0});var drt=s(fP);$ro=r(drt,"VisualBertConfig"),drt.forEach(t),kro=r(RAe," (VisualBERT model)"),RAe.forEach(t),Sro=i(L),kg=n(L,"LI",{});var PAe=s(kg);kne=n(PAe,"STRONG",{});var crt=s(kne);Rro=r(crt,"vit"),crt.forEach(t),Pro=r(PAe," \u2014 "),mP=n(PAe,"A",{href:!0});var frt=s(mP);Bro=r(frt,"ViTConfig"),frt.forEach(t),Iro=r(PAe," (ViT model)"),PAe.forEach(t),Nro=i(L),Sg=n(L,"LI",{});var BAe=s(Sg);Sne=n(BAe,"STRONG",{});var mrt=s(Sne);qro=r(mrt,"vit_mae"),mrt.forEach(t),jro=r(BAe," \u2014 "),gP=n(BAe,"A",{href:!0});var grt=s(gP);Dro=r(grt,"ViTMAEConfig"),grt.forEach(t),Gro=r(BAe," (ViTMAE model)"),BAe.forEach(t),Oro=i(L),Rg=n(L,"LI",{});var IAe=s(Rg);Rne=n(IAe,"STRONG",{});var hrt=s(Rne);Vro=r(hrt,"wav2vec2"),hrt.forEach(t),Xro=r(IAe," \u2014 "),hP=n(IAe,"A",{href:!0});var prt=s(hP);zro=r(prt,"Wav2Vec2Config"),prt.forEach(t),Qro=r(IAe," (Wav2Vec2 model)"),IAe.forEach(t),Wro=i(L),Pg=n(L,"LI",{});var NAe=s(Pg);Pne=n(NAe,"STRONG",{});var _rt=s(Pne);Hro=r(_rt,"wav2vec2-conformer"),_rt.forEach(t),Uro=r(NAe," \u2014 "),pP=n(NAe,"A",{href:!0});var urt=s(pP);Jro=r(urt,"Wav2Vec2ConformerConfig"),urt.forEach(t),Yro=r(NAe," (Wav2Vec2-Conformer model)"),NAe.forEach(t),Kro=i(L),Bg=n(L,"LI",{});var qAe=s(Bg);Bne=n(qAe,"STRONG",{});var brt=s(Bne);Zro=r(brt,"wavlm"),brt.forEach(t),eto=r(qAe," \u2014 "),_P=n(qAe,"A",{href:!0});var vrt=s(_P);oto=r(vrt,"WavLMConfig"),vrt.forEach(t),rto=r(qAe," (WavLM model)"),qAe.forEach(t),tto=i(L),Ig=n(L,"LI",{});var jAe=s(Ig);Ine=n(jAe,"STRONG",{});var Frt=s(Ine);ato=r(Frt,"xglm"),Frt.forEach(t),nto=r(jAe," \u2014 "),uP=n(jAe,"A",{href:!0});var Trt=s(uP);sto=r(Trt,"XGLMConfig"),Trt.forEach(t),lto=r(jAe," (XGLM model)"),jAe.forEach(t),ito=i(L),Ng=n(L,"LI",{});var DAe=s(Ng);Nne=n(DAe,"STRONG",{});var Mrt=s(Nne);dto=r(Mrt,"xlm"),Mrt.forEach(t),cto=r(DAe," \u2014 "),bP=n(DAe,"A",{href:!0});var Ert=s(bP);fto=r(Ert,"XLMConfig"),Ert.forEach(t),mto=r(DAe," (XLM model)"),DAe.forEach(t),gto=i(L),qg=n(L,"LI",{});var GAe=s(qg);qne=n(GAe,"STRONG",{});var Crt=s(qne);hto=r(Crt,"xlm-prophetnet"),Crt.forEach(t),pto=r(GAe," \u2014 "),vP=n(GAe,"A",{href:!0});var wrt=s(vP);_to=r(wrt,"XLMProphetNetConfig"),wrt.forEach(t),uto=r(GAe," (XLM-ProphetNet model)"),GAe.forEach(t),bto=i(L),jg=n(L,"LI",{});var OAe=s(jg);jne=n(OAe,"STRONG",{});var Art=s(jne);vto=r(Art,"xlm-roberta"),Art.forEach(t),Fto=r(OAe," \u2014 "),FP=n(OAe,"A",{href:!0});var Lrt=s(FP);Tto=r(Lrt,"XLMRobertaConfig"),Lrt.forEach(t),Mto=r(OAe," (XLM-RoBERTa model)"),OAe.forEach(t),Eto=i(L),Dg=n(L,"LI",{});var VAe=s(Dg);Dne=n(VAe,"STRONG",{});var yrt=s(Dne);Cto=r(yrt,"xlm-roberta-xl"),yrt.forEach(t),wto=r(VAe," \u2014 "),TP=n(VAe,"A",{href:!0});var xrt=s(TP);Ato=r(xrt,"XLMRobertaXLConfig"),xrt.forEach(t),Lto=r(VAe," (XLM-RoBERTa-XL model)"),VAe.forEach(t),yto=i(L),Gg=n(L,"LI",{});var XAe=s(Gg);Gne=n(XAe,"STRONG",{});var $rt=s(Gne);xto=r($rt,"xlnet"),$rt.forEach(t),$to=r(XAe," \u2014 "),MP=n(XAe,"A",{href:!0});var krt=s(MP);kto=r(krt,"XLNetConfig"),krt.forEach(t),Sto=r(XAe," (XLNet model)"),XAe.forEach(t),Rto=i(L),Og=n(L,"LI",{});var zAe=s(Og);One=n(zAe,"STRONG",{});var Srt=s(One);Pto=r(Srt,"yolos"),Srt.forEach(t),Bto=r(zAe," \u2014 "),EP=n(zAe,"A",{href:!0});var Rrt=s(EP);Ito=r(Rrt,"YolosConfig"),Rrt.forEach(t),Nto=r(zAe," (YOLOS model)"),zAe.forEach(t),qto=i(L),Vg=n(L,"LI",{});var QAe=s(Vg);Vne=n(QAe,"STRONG",{});var Prt=s(Vne);jto=r(Prt,"yoso"),Prt.forEach(t),Dto=r(QAe," \u2014 "),CP=n(QAe,"A",{href:!0});var Brt=s(CP);Gto=r(Brt,"YosoConfig"),Brt.forEach(t),Oto=r(QAe," (YOSO model)"),QAe.forEach(t),L.forEach(t),Vto=i(tt),T(Xg.$$.fragment,tt),tt.forEach(t),Xto=i(rt),zg=n(rt,"DIV",{class:!0});var FXe=s(zg);T(VA.$$.fragment,FXe),zto=i(FXe),Xne=n(FXe,"P",{});var Irt=s(Xne);Qto=r(Irt,"Register a new configuration for this class."),Irt.forEach(t),FXe.forEach(t),rt.forEach(t),TOe=i(f),Si=n(f,"H2",{class:!0});var TXe=s(Si);Qg=n(TXe,"A",{id:!0,class:!0,href:!0});var Nrt=s(Qg);zne=n(Nrt,"SPAN",{});var qrt=s(zne);T(XA.$$.fragment,qrt),qrt.forEach(t),Nrt.forEach(t),Wto=i(TXe),Qne=n(TXe,"SPAN",{});var jrt=s(Qne);Hto=r(jrt,"AutoTokenizer"),jrt.forEach(t),TXe.forEach(t),MOe=i(f),Ao=n(f,"DIV",{class:!0});var Hs=s(Ao);T(zA.$$.fragment,Hs),Uto=i(Hs),QA=n(Hs,"P",{});var MXe=s(QA);Jto=r(MXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wP=n(MXe,"A",{href:!0});var Drt=s(wP);Yto=r(Drt,"AutoTokenizer.from_pretrained()"),Drt.forEach(t),Kto=r(MXe," class method."),MXe.forEach(t),Zto=i(Hs),WA=n(Hs,"P",{});var EXe=s(WA);eao=r(EXe,"This class cannot be instantiated directly using "),Wne=n(EXe,"CODE",{});var Grt=s(Wne);oao=r(Grt,"__init__()"),Grt.forEach(t),rao=r(EXe," (throws an error)."),EXe.forEach(t),tao=i(Hs),Lr=n(Hs,"DIV",{class:!0});var Us=s(Lr);T(HA.$$.fragment,Us),aao=i(Us),Hne=n(Us,"P",{});var Ort=s(Hne);nao=r(Ort,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Ort.forEach(t),sao=i(Us),ka=n(Us,"P",{});var I0=s(ka);lao=r(I0,"The tokenizer class to instantiate is selected based on the "),Une=n(I0,"CODE",{});var Vrt=s(Une);iao=r(Vrt,"model_type"),Vrt.forEach(t),dao=r(I0,` property of the config object (either
passed as an argument or loaded from `),Jne=n(I0,"CODE",{});var Xrt=s(Jne);cao=r(Xrt,"pretrained_model_name_or_path"),Xrt.forEach(t),fao=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yne=n(I0,"CODE",{});var zrt=s(Yne);mao=r(zrt,"pretrained_model_name_or_path"),zrt.forEach(t),gao=r(I0,":"),I0.forEach(t),hao=i(Us),k=n(Us,"UL",{});var S=s(k);qn=n(S,"LI",{});var ek=s(qn);Kne=n(ek,"STRONG",{});var Qrt=s(Kne);pao=r(Qrt,"albert"),Qrt.forEach(t),_ao=r(ek," \u2014 "),AP=n(ek,"A",{href:!0});var Wrt=s(AP);uao=r(Wrt,"AlbertTokenizer"),Wrt.forEach(t),bao=r(ek," or "),LP=n(ek,"A",{href:!0});var Hrt=s(LP);vao=r(Hrt,"AlbertTokenizerFast"),Hrt.forEach(t),Fao=r(ek," (ALBERT model)"),ek.forEach(t),Tao=i(S),jn=n(S,"LI",{});var ok=s(jn);Zne=n(ok,"STRONG",{});var Urt=s(Zne);Mao=r(Urt,"bart"),Urt.forEach(t),Eao=r(ok," \u2014 "),yP=n(ok,"A",{href:!0});var Jrt=s(yP);Cao=r(Jrt,"BartTokenizer"),Jrt.forEach(t),wao=r(ok," or "),xP=n(ok,"A",{href:!0});var Yrt=s(xP);Aao=r(Yrt,"BartTokenizerFast"),Yrt.forEach(t),Lao=r(ok," (BART model)"),ok.forEach(t),yao=i(S),Dn=n(S,"LI",{});var rk=s(Dn);ese=n(rk,"STRONG",{});var Krt=s(ese);xao=r(Krt,"barthez"),Krt.forEach(t),$ao=r(rk," \u2014 "),$P=n(rk,"A",{href:!0});var Zrt=s($P);kao=r(Zrt,"BarthezTokenizer"),Zrt.forEach(t),Sao=r(rk," or "),kP=n(rk,"A",{href:!0});var ett=s(kP);Rao=r(ett,"BarthezTokenizerFast"),ett.forEach(t),Pao=r(rk," (BARThez model)"),rk.forEach(t),Bao=i(S),Wg=n(S,"LI",{});var WAe=s(Wg);ose=n(WAe,"STRONG",{});var ott=s(ose);Iao=r(ott,"bartpho"),ott.forEach(t),Nao=r(WAe," \u2014 "),SP=n(WAe,"A",{href:!0});var rtt=s(SP);qao=r(rtt,"BartphoTokenizer"),rtt.forEach(t),jao=r(WAe," (BARTpho model)"),WAe.forEach(t),Dao=i(S),Gn=n(S,"LI",{});var tk=s(Gn);rse=n(tk,"STRONG",{});var ttt=s(rse);Gao=r(ttt,"bert"),ttt.forEach(t),Oao=r(tk," \u2014 "),RP=n(tk,"A",{href:!0});var att=s(RP);Vao=r(att,"BertTokenizer"),att.forEach(t),Xao=r(tk," or "),PP=n(tk,"A",{href:!0});var ntt=s(PP);zao=r(ntt,"BertTokenizerFast"),ntt.forEach(t),Qao=r(tk," (BERT model)"),tk.forEach(t),Wao=i(S),Hg=n(S,"LI",{});var HAe=s(Hg);tse=n(HAe,"STRONG",{});var stt=s(tse);Hao=r(stt,"bert-generation"),stt.forEach(t),Uao=r(HAe," \u2014 "),BP=n(HAe,"A",{href:!0});var ltt=s(BP);Jao=r(ltt,"BertGenerationTokenizer"),ltt.forEach(t),Yao=r(HAe," (Bert Generation model)"),HAe.forEach(t),Kao=i(S),Ug=n(S,"LI",{});var UAe=s(Ug);ase=n(UAe,"STRONG",{});var itt=s(ase);Zao=r(itt,"bert-japanese"),itt.forEach(t),eno=r(UAe," \u2014 "),IP=n(UAe,"A",{href:!0});var dtt=s(IP);ono=r(dtt,"BertJapaneseTokenizer"),dtt.forEach(t),rno=r(UAe," (BertJapanese model)"),UAe.forEach(t),tno=i(S),Jg=n(S,"LI",{});var JAe=s(Jg);nse=n(JAe,"STRONG",{});var ctt=s(nse);ano=r(ctt,"bertweet"),ctt.forEach(t),nno=r(JAe," \u2014 "),NP=n(JAe,"A",{href:!0});var ftt=s(NP);sno=r(ftt,"BertweetTokenizer"),ftt.forEach(t),lno=r(JAe," (BERTweet model)"),JAe.forEach(t),ino=i(S),On=n(S,"LI",{});var ak=s(On);sse=n(ak,"STRONG",{});var mtt=s(sse);dno=r(mtt,"big_bird"),mtt.forEach(t),cno=r(ak," \u2014 "),qP=n(ak,"A",{href:!0});var gtt=s(qP);fno=r(gtt,"BigBirdTokenizer"),gtt.forEach(t),mno=r(ak," or "),jP=n(ak,"A",{href:!0});var htt=s(jP);gno=r(htt,"BigBirdTokenizerFast"),htt.forEach(t),hno=r(ak," (BigBird model)"),ak.forEach(t),pno=i(S),Vn=n(S,"LI",{});var nk=s(Vn);lse=n(nk,"STRONG",{});var ptt=s(lse);_no=r(ptt,"bigbird_pegasus"),ptt.forEach(t),uno=r(nk," \u2014 "),DP=n(nk,"A",{href:!0});var _tt=s(DP);bno=r(_tt,"PegasusTokenizer"),_tt.forEach(t),vno=r(nk," or "),GP=n(nk,"A",{href:!0});var utt=s(GP);Fno=r(utt,"PegasusTokenizerFast"),utt.forEach(t),Tno=r(nk," (BigBird-Pegasus model)"),nk.forEach(t),Mno=i(S),Xn=n(S,"LI",{});var sk=s(Xn);ise=n(sk,"STRONG",{});var btt=s(ise);Eno=r(btt,"blenderbot"),btt.forEach(t),Cno=r(sk," \u2014 "),OP=n(sk,"A",{href:!0});var vtt=s(OP);wno=r(vtt,"BlenderbotTokenizer"),vtt.forEach(t),Ano=r(sk," or "),VP=n(sk,"A",{href:!0});var Ftt=s(VP);Lno=r(Ftt,"BlenderbotTokenizerFast"),Ftt.forEach(t),yno=r(sk," (Blenderbot model)"),sk.forEach(t),xno=i(S),Yg=n(S,"LI",{});var YAe=s(Yg);dse=n(YAe,"STRONG",{});var Ttt=s(dse);$no=r(Ttt,"blenderbot-small"),Ttt.forEach(t),kno=r(YAe," \u2014 "),XP=n(YAe,"A",{href:!0});var Mtt=s(XP);Sno=r(Mtt,"BlenderbotSmallTokenizer"),Mtt.forEach(t),Rno=r(YAe," (BlenderbotSmall model)"),YAe.forEach(t),Pno=i(S),Kg=n(S,"LI",{});var KAe=s(Kg);cse=n(KAe,"STRONG",{});var Ett=s(cse);Bno=r(Ett,"bloom"),Ett.forEach(t),Ino=r(KAe," \u2014 "),zP=n(KAe,"A",{href:!0});var Ctt=s(zP);Nno=r(Ctt,"BloomTokenizerFast"),Ctt.forEach(t),qno=r(KAe," (BLOOM model)"),KAe.forEach(t),jno=i(S),Zg=n(S,"LI",{});var ZAe=s(Zg);fse=n(ZAe,"STRONG",{});var wtt=s(fse);Dno=r(wtt,"byt5"),wtt.forEach(t),Gno=r(ZAe," \u2014 "),QP=n(ZAe,"A",{href:!0});var Att=s(QP);Ono=r(Att,"ByT5Tokenizer"),Att.forEach(t),Vno=r(ZAe," (ByT5 model)"),ZAe.forEach(t),Xno=i(S),zn=n(S,"LI",{});var lk=s(zn);mse=n(lk,"STRONG",{});var Ltt=s(mse);zno=r(Ltt,"camembert"),Ltt.forEach(t),Qno=r(lk," \u2014 "),WP=n(lk,"A",{href:!0});var ytt=s(WP);Wno=r(ytt,"CamembertTokenizer"),ytt.forEach(t),Hno=r(lk," or "),HP=n(lk,"A",{href:!0});var xtt=s(HP);Uno=r(xtt,"CamembertTokenizerFast"),xtt.forEach(t),Jno=r(lk," (CamemBERT model)"),lk.forEach(t),Yno=i(S),eh=n(S,"LI",{});var eLe=s(eh);gse=n(eLe,"STRONG",{});var $tt=s(gse);Kno=r($tt,"canine"),$tt.forEach(t),Zno=r(eLe," \u2014 "),UP=n(eLe,"A",{href:!0});var ktt=s(UP);eso=r(ktt,"CanineTokenizer"),ktt.forEach(t),oso=r(eLe," (CANINE model)"),eLe.forEach(t),rso=i(S),Qn=n(S,"LI",{});var ik=s(Qn);hse=n(ik,"STRONG",{});var Stt=s(hse);tso=r(Stt,"clip"),Stt.forEach(t),aso=r(ik," \u2014 "),JP=n(ik,"A",{href:!0});var Rtt=s(JP);nso=r(Rtt,"CLIPTokenizer"),Rtt.forEach(t),sso=r(ik," or "),YP=n(ik,"A",{href:!0});var Ptt=s(YP);lso=r(Ptt,"CLIPTokenizerFast"),Ptt.forEach(t),iso=r(ik," (CLIP model)"),ik.forEach(t),dso=i(S),Wn=n(S,"LI",{});var dk=s(Wn);pse=n(dk,"STRONG",{});var Btt=s(pse);cso=r(Btt,"codegen"),Btt.forEach(t),fso=r(dk," \u2014 "),KP=n(dk,"A",{href:!0});var Itt=s(KP);mso=r(Itt,"CodeGenTokenizer"),Itt.forEach(t),gso=r(dk," or "),ZP=n(dk,"A",{href:!0});var Ntt=s(ZP);hso=r(Ntt,"CodeGenTokenizerFast"),Ntt.forEach(t),pso=r(dk," (CodeGen model)"),dk.forEach(t),_so=i(S),Hn=n(S,"LI",{});var ck=s(Hn);_se=n(ck,"STRONG",{});var qtt=s(_se);uso=r(qtt,"convbert"),qtt.forEach(t),bso=r(ck," \u2014 "),eB=n(ck,"A",{href:!0});var jtt=s(eB);vso=r(jtt,"ConvBertTokenizer"),jtt.forEach(t),Fso=r(ck," or "),oB=n(ck,"A",{href:!0});var Dtt=s(oB);Tso=r(Dtt,"ConvBertTokenizerFast"),Dtt.forEach(t),Mso=r(ck," (ConvBERT model)"),ck.forEach(t),Eso=i(S),Un=n(S,"LI",{});var fk=s(Un);use=n(fk,"STRONG",{});var Gtt=s(use);Cso=r(Gtt,"cpm"),Gtt.forEach(t),wso=r(fk," \u2014 "),rB=n(fk,"A",{href:!0});var Ott=s(rB);Aso=r(Ott,"CpmTokenizer"),Ott.forEach(t),Lso=r(fk," or "),tB=n(fk,"A",{href:!0});var Vtt=s(tB);yso=r(Vtt,"CpmTokenizerFast"),Vtt.forEach(t),xso=r(fk," (CPM model)"),fk.forEach(t),$so=i(S),oh=n(S,"LI",{});var oLe=s(oh);bse=n(oLe,"STRONG",{});var Xtt=s(bse);kso=r(Xtt,"ctrl"),Xtt.forEach(t),Sso=r(oLe," \u2014 "),aB=n(oLe,"A",{href:!0});var ztt=s(aB);Rso=r(ztt,"CTRLTokenizer"),ztt.forEach(t),Pso=r(oLe," (CTRL model)"),oLe.forEach(t),Bso=i(S),Jn=n(S,"LI",{});var mk=s(Jn);vse=n(mk,"STRONG",{});var Qtt=s(vse);Iso=r(Qtt,"data2vec-text"),Qtt.forEach(t),Nso=r(mk," \u2014 "),nB=n(mk,"A",{href:!0});var Wtt=s(nB);qso=r(Wtt,"RobertaTokenizer"),Wtt.forEach(t),jso=r(mk," or "),sB=n(mk,"A",{href:!0});var Htt=s(sB);Dso=r(Htt,"RobertaTokenizerFast"),Htt.forEach(t),Gso=r(mk," (Data2VecText model)"),mk.forEach(t),Oso=i(S),Yn=n(S,"LI",{});var gk=s(Yn);Fse=n(gk,"STRONG",{});var Utt=s(Fse);Vso=r(Utt,"deberta"),Utt.forEach(t),Xso=r(gk," \u2014 "),lB=n(gk,"A",{href:!0});var Jtt=s(lB);zso=r(Jtt,"DebertaTokenizer"),Jtt.forEach(t),Qso=r(gk," or "),iB=n(gk,"A",{href:!0});var Ytt=s(iB);Wso=r(Ytt,"DebertaTokenizerFast"),Ytt.forEach(t),Hso=r(gk," (DeBERTa model)"),gk.forEach(t),Uso=i(S),Kn=n(S,"LI",{});var hk=s(Kn);Tse=n(hk,"STRONG",{});var Ktt=s(Tse);Jso=r(Ktt,"deberta-v2"),Ktt.forEach(t),Yso=r(hk," \u2014 "),dB=n(hk,"A",{href:!0});var Ztt=s(dB);Kso=r(Ztt,"DebertaV2Tokenizer"),Ztt.forEach(t),Zso=r(hk," or "),cB=n(hk,"A",{href:!0});var eat=s(cB);elo=r(eat,"DebertaV2TokenizerFast"),eat.forEach(t),olo=r(hk," (DeBERTa-v2 model)"),hk.forEach(t),rlo=i(S),Zn=n(S,"LI",{});var pk=s(Zn);Mse=n(pk,"STRONG",{});var oat=s(Mse);tlo=r(oat,"distilbert"),oat.forEach(t),alo=r(pk," \u2014 "),fB=n(pk,"A",{href:!0});var rat=s(fB);nlo=r(rat,"DistilBertTokenizer"),rat.forEach(t),slo=r(pk," or "),mB=n(pk,"A",{href:!0});var tat=s(mB);llo=r(tat,"DistilBertTokenizerFast"),tat.forEach(t),ilo=r(pk," (DistilBERT model)"),pk.forEach(t),dlo=i(S),es=n(S,"LI",{});var _k=s(es);Ese=n(_k,"STRONG",{});var aat=s(Ese);clo=r(aat,"dpr"),aat.forEach(t),flo=r(_k," \u2014 "),gB=n(_k,"A",{href:!0});var nat=s(gB);mlo=r(nat,"DPRQuestionEncoderTokenizer"),nat.forEach(t),glo=r(_k," or "),hB=n(_k,"A",{href:!0});var sat=s(hB);hlo=r(sat,"DPRQuestionEncoderTokenizerFast"),sat.forEach(t),plo=r(_k," (DPR model)"),_k.forEach(t),_lo=i(S),os=n(S,"LI",{});var uk=s(os);Cse=n(uk,"STRONG",{});var lat=s(Cse);ulo=r(lat,"electra"),lat.forEach(t),blo=r(uk," \u2014 "),pB=n(uk,"A",{href:!0});var iat=s(pB);vlo=r(iat,"ElectraTokenizer"),iat.forEach(t),Flo=r(uk," or "),_B=n(uk,"A",{href:!0});var dat=s(_B);Tlo=r(dat,"ElectraTokenizerFast"),dat.forEach(t),Mlo=r(uk," (ELECTRA model)"),uk.forEach(t),Elo=i(S),rh=n(S,"LI",{});var rLe=s(rh);wse=n(rLe,"STRONG",{});var cat=s(wse);Clo=r(cat,"flaubert"),cat.forEach(t),wlo=r(rLe," \u2014 "),uB=n(rLe,"A",{href:!0});var fat=s(uB);Alo=r(fat,"FlaubertTokenizer"),fat.forEach(t),Llo=r(rLe," (FlauBERT model)"),rLe.forEach(t),ylo=i(S),rs=n(S,"LI",{});var bk=s(rs);Ase=n(bk,"STRONG",{});var mat=s(Ase);xlo=r(mat,"fnet"),mat.forEach(t),$lo=r(bk," \u2014 "),bB=n(bk,"A",{href:!0});var gat=s(bB);klo=r(gat,"FNetTokenizer"),gat.forEach(t),Slo=r(bk," or "),vB=n(bk,"A",{href:!0});var hat=s(vB);Rlo=r(hat,"FNetTokenizerFast"),hat.forEach(t),Plo=r(bk," (FNet model)"),bk.forEach(t),Blo=i(S),th=n(S,"LI",{});var tLe=s(th);Lse=n(tLe,"STRONG",{});var pat=s(Lse);Ilo=r(pat,"fsmt"),pat.forEach(t),Nlo=r(tLe," \u2014 "),FB=n(tLe,"A",{href:!0});var _at=s(FB);qlo=r(_at,"FSMTTokenizer"),_at.forEach(t),jlo=r(tLe," (FairSeq Machine-Translation model)"),tLe.forEach(t),Dlo=i(S),ts=n(S,"LI",{});var vk=s(ts);yse=n(vk,"STRONG",{});var uat=s(yse);Glo=r(uat,"funnel"),uat.forEach(t),Olo=r(vk," \u2014 "),TB=n(vk,"A",{href:!0});var bat=s(TB);Vlo=r(bat,"FunnelTokenizer"),bat.forEach(t),Xlo=r(vk," or "),MB=n(vk,"A",{href:!0});var vat=s(MB);zlo=r(vat,"FunnelTokenizerFast"),vat.forEach(t),Qlo=r(vk," (Funnel Transformer model)"),vk.forEach(t),Wlo=i(S),as=n(S,"LI",{});var Fk=s(as);xse=n(Fk,"STRONG",{});var Fat=s(xse);Hlo=r(Fat,"gpt2"),Fat.forEach(t),Ulo=r(Fk," \u2014 "),EB=n(Fk,"A",{href:!0});var Tat=s(EB);Jlo=r(Tat,"GPT2Tokenizer"),Tat.forEach(t),Ylo=r(Fk," or "),CB=n(Fk,"A",{href:!0});var Mat=s(CB);Klo=r(Mat,"GPT2TokenizerFast"),Mat.forEach(t),Zlo=r(Fk," (OpenAI GPT-2 model)"),Fk.forEach(t),eio=i(S),ns=n(S,"LI",{});var Tk=s(ns);$se=n(Tk,"STRONG",{});var Eat=s($se);oio=r(Eat,"gpt_neo"),Eat.forEach(t),rio=r(Tk," \u2014 "),wB=n(Tk,"A",{href:!0});var Cat=s(wB);tio=r(Cat,"GPT2Tokenizer"),Cat.forEach(t),aio=r(Tk," or "),AB=n(Tk,"A",{href:!0});var wat=s(AB);nio=r(wat,"GPT2TokenizerFast"),wat.forEach(t),sio=r(Tk," (GPT Neo model)"),Tk.forEach(t),lio=i(S),ah=n(S,"LI",{});var aLe=s(ah);kse=n(aLe,"STRONG",{});var Aat=s(kse);iio=r(Aat,"gpt_neox"),Aat.forEach(t),dio=r(aLe," \u2014 "),LB=n(aLe,"A",{href:!0});var Lat=s(LB);cio=r(Lat,"GPTNeoXTokenizerFast"),Lat.forEach(t),fio=r(aLe," (GPT NeoX model)"),aLe.forEach(t),mio=i(S),ss=n(S,"LI",{});var Mk=s(ss);Sse=n(Mk,"STRONG",{});var yat=s(Sse);gio=r(yat,"gptj"),yat.forEach(t),hio=r(Mk," \u2014 "),yB=n(Mk,"A",{href:!0});var xat=s(yB);pio=r(xat,"GPT2Tokenizer"),xat.forEach(t),_io=r(Mk," or "),xB=n(Mk,"A",{href:!0});var $at=s(xB);uio=r($at,"GPT2TokenizerFast"),$at.forEach(t),bio=r(Mk," (GPT-J model)"),Mk.forEach(t),vio=i(S),ls=n(S,"LI",{});var Ek=s(ls);Rse=n(Ek,"STRONG",{});var kat=s(Rse);Fio=r(kat,"herbert"),kat.forEach(t),Tio=r(Ek," \u2014 "),$B=n(Ek,"A",{href:!0});var Sat=s($B);Mio=r(Sat,"HerbertTokenizer"),Sat.forEach(t),Eio=r(Ek," or "),kB=n(Ek,"A",{href:!0});var Rat=s(kB);Cio=r(Rat,"HerbertTokenizerFast"),Rat.forEach(t),wio=r(Ek," (HerBERT model)"),Ek.forEach(t),Aio=i(S),nh=n(S,"LI",{});var nLe=s(nh);Pse=n(nLe,"STRONG",{});var Pat=s(Pse);Lio=r(Pat,"hubert"),Pat.forEach(t),yio=r(nLe," \u2014 "),SB=n(nLe,"A",{href:!0});var Bat=s(SB);xio=r(Bat,"Wav2Vec2CTCTokenizer"),Bat.forEach(t),$io=r(nLe," (Hubert model)"),nLe.forEach(t),kio=i(S),is=n(S,"LI",{});var Ck=s(is);Bse=n(Ck,"STRONG",{});var Iat=s(Bse);Sio=r(Iat,"ibert"),Iat.forEach(t),Rio=r(Ck," \u2014 "),RB=n(Ck,"A",{href:!0});var Nat=s(RB);Pio=r(Nat,"RobertaTokenizer"),Nat.forEach(t),Bio=r(Ck," or "),PB=n(Ck,"A",{href:!0});var qat=s(PB);Iio=r(qat,"RobertaTokenizerFast"),qat.forEach(t),Nio=r(Ck," (I-BERT model)"),Ck.forEach(t),qio=i(S),sh=n(S,"LI",{});var sLe=s(sh);Ise=n(sLe,"STRONG",{});var jat=s(Ise);jio=r(jat,"jukebox"),jat.forEach(t),Dio=r(sLe," \u2014 "),Nse=n(sLe,"CODE",{});var Dat=s(Nse);Gio=r(Dat,"JukeboxTokenizer"),Dat.forEach(t),Oio=r(sLe," (Jukebox model)"),sLe.forEach(t),Vio=i(S),ds=n(S,"LI",{});var wk=s(ds);qse=n(wk,"STRONG",{});var Gat=s(qse);Xio=r(Gat,"layoutlm"),Gat.forEach(t),zio=r(wk," \u2014 "),BB=n(wk,"A",{href:!0});var Oat=s(BB);Qio=r(Oat,"LayoutLMTokenizer"),Oat.forEach(t),Wio=r(wk," or "),IB=n(wk,"A",{href:!0});var Vat=s(IB);Hio=r(Vat,"LayoutLMTokenizerFast"),Vat.forEach(t),Uio=r(wk," (LayoutLM model)"),wk.forEach(t),Jio=i(S),cs=n(S,"LI",{});var Ak=s(cs);jse=n(Ak,"STRONG",{});var Xat=s(jse);Yio=r(Xat,"layoutlmv2"),Xat.forEach(t),Kio=r(Ak," \u2014 "),NB=n(Ak,"A",{href:!0});var zat=s(NB);Zio=r(zat,"LayoutLMv2Tokenizer"),zat.forEach(t),edo=r(Ak," or "),qB=n(Ak,"A",{href:!0});var Qat=s(qB);odo=r(Qat,"LayoutLMv2TokenizerFast"),Qat.forEach(t),rdo=r(Ak," (LayoutLMv2 model)"),Ak.forEach(t),tdo=i(S),fs=n(S,"LI",{});var Lk=s(fs);Dse=n(Lk,"STRONG",{});var Wat=s(Dse);ado=r(Wat,"layoutlmv3"),Wat.forEach(t),ndo=r(Lk," \u2014 "),jB=n(Lk,"A",{href:!0});var Hat=s(jB);sdo=r(Hat,"LayoutLMv3Tokenizer"),Hat.forEach(t),ldo=r(Lk," or "),DB=n(Lk,"A",{href:!0});var Uat=s(DB);ido=r(Uat,"LayoutLMv3TokenizerFast"),Uat.forEach(t),ddo=r(Lk," (LayoutLMv3 model)"),Lk.forEach(t),cdo=i(S),ms=n(S,"LI",{});var yk=s(ms);Gse=n(yk,"STRONG",{});var Jat=s(Gse);fdo=r(Jat,"layoutxlm"),Jat.forEach(t),mdo=r(yk," \u2014 "),GB=n(yk,"A",{href:!0});var Yat=s(GB);gdo=r(Yat,"LayoutXLMTokenizer"),Yat.forEach(t),hdo=r(yk," or "),OB=n(yk,"A",{href:!0});var Kat=s(OB);pdo=r(Kat,"LayoutXLMTokenizerFast"),Kat.forEach(t),_do=r(yk," (LayoutXLM model)"),yk.forEach(t),udo=i(S),gs=n(S,"LI",{});var xk=s(gs);Ose=n(xk,"STRONG",{});var Zat=s(Ose);bdo=r(Zat,"led"),Zat.forEach(t),vdo=r(xk," \u2014 "),VB=n(xk,"A",{href:!0});var ent=s(VB);Fdo=r(ent,"LEDTokenizer"),ent.forEach(t),Tdo=r(xk," or "),XB=n(xk,"A",{href:!0});var ont=s(XB);Mdo=r(ont,"LEDTokenizerFast"),ont.forEach(t),Edo=r(xk," (LED model)"),xk.forEach(t),Cdo=i(S),hs=n(S,"LI",{});var $k=s(hs);Vse=n($k,"STRONG",{});var rnt=s(Vse);wdo=r(rnt,"longformer"),rnt.forEach(t),Ado=r($k," \u2014 "),zB=n($k,"A",{href:!0});var tnt=s(zB);Ldo=r(tnt,"LongformerTokenizer"),tnt.forEach(t),ydo=r($k," or "),QB=n($k,"A",{href:!0});var ant=s(QB);xdo=r(ant,"LongformerTokenizerFast"),ant.forEach(t),$do=r($k," (Longformer model)"),$k.forEach(t),kdo=i(S),ps=n(S,"LI",{});var kk=s(ps);Xse=n(kk,"STRONG",{});var nnt=s(Xse);Sdo=r(nnt,"longt5"),nnt.forEach(t),Rdo=r(kk," \u2014 "),WB=n(kk,"A",{href:!0});var snt=s(WB);Pdo=r(snt,"T5Tokenizer"),snt.forEach(t),Bdo=r(kk," or "),HB=n(kk,"A",{href:!0});var lnt=s(HB);Ido=r(lnt,"T5TokenizerFast"),lnt.forEach(t),Ndo=r(kk," (LongT5 model)"),kk.forEach(t),qdo=i(S),lh=n(S,"LI",{});var lLe=s(lh);zse=n(lLe,"STRONG",{});var int=s(zse);jdo=r(int,"luke"),int.forEach(t),Ddo=r(lLe," \u2014 "),UB=n(lLe,"A",{href:!0});var dnt=s(UB);Gdo=r(dnt,"LukeTokenizer"),dnt.forEach(t),Odo=r(lLe," (LUKE model)"),lLe.forEach(t),Vdo=i(S),_s=n(S,"LI",{});var Sk=s(_s);Qse=n(Sk,"STRONG",{});var cnt=s(Qse);Xdo=r(cnt,"lxmert"),cnt.forEach(t),zdo=r(Sk," \u2014 "),JB=n(Sk,"A",{href:!0});var fnt=s(JB);Qdo=r(fnt,"LxmertTokenizer"),fnt.forEach(t),Wdo=r(Sk," or "),YB=n(Sk,"A",{href:!0});var mnt=s(YB);Hdo=r(mnt,"LxmertTokenizerFast"),mnt.forEach(t),Udo=r(Sk," (LXMERT model)"),Sk.forEach(t),Jdo=i(S),ih=n(S,"LI",{});var iLe=s(ih);Wse=n(iLe,"STRONG",{});var gnt=s(Wse);Ydo=r(gnt,"m2m_100"),gnt.forEach(t),Kdo=r(iLe," \u2014 "),KB=n(iLe,"A",{href:!0});var hnt=s(KB);Zdo=r(hnt,"M2M100Tokenizer"),hnt.forEach(t),eco=r(iLe," (M2M100 model)"),iLe.forEach(t),oco=i(S),dh=n(S,"LI",{});var dLe=s(dh);Hse=n(dLe,"STRONG",{});var pnt=s(Hse);rco=r(pnt,"marian"),pnt.forEach(t),tco=r(dLe," \u2014 "),ZB=n(dLe,"A",{href:!0});var _nt=s(ZB);aco=r(_nt,"MarianTokenizer"),_nt.forEach(t),nco=r(dLe," (Marian model)"),dLe.forEach(t),sco=i(S),us=n(S,"LI",{});var Rk=s(us);Use=n(Rk,"STRONG",{});var unt=s(Use);lco=r(unt,"mbart"),unt.forEach(t),ico=r(Rk," \u2014 "),eI=n(Rk,"A",{href:!0});var bnt=s(eI);dco=r(bnt,"MBartTokenizer"),bnt.forEach(t),cco=r(Rk," or "),oI=n(Rk,"A",{href:!0});var vnt=s(oI);fco=r(vnt,"MBartTokenizerFast"),vnt.forEach(t),mco=r(Rk," (mBART model)"),Rk.forEach(t),gco=i(S),bs=n(S,"LI",{});var Pk=s(bs);Jse=n(Pk,"STRONG",{});var Fnt=s(Jse);hco=r(Fnt,"mbart50"),Fnt.forEach(t),pco=r(Pk," \u2014 "),rI=n(Pk,"A",{href:!0});var Tnt=s(rI);_co=r(Tnt,"MBart50Tokenizer"),Tnt.forEach(t),uco=r(Pk," or "),tI=n(Pk,"A",{href:!0});var Mnt=s(tI);bco=r(Mnt,"MBart50TokenizerFast"),Mnt.forEach(t),vco=r(Pk," (mBART-50 model)"),Pk.forEach(t),Fco=i(S),vs=n(S,"LI",{});var Bk=s(vs);Yse=n(Bk,"STRONG",{});var Ent=s(Yse);Tco=r(Ent,"megatron-bert"),Ent.forEach(t),Mco=r(Bk," \u2014 "),aI=n(Bk,"A",{href:!0});var Cnt=s(aI);Eco=r(Cnt,"BertTokenizer"),Cnt.forEach(t),Cco=r(Bk," or "),nI=n(Bk,"A",{href:!0});var wnt=s(nI);wco=r(wnt,"BertTokenizerFast"),wnt.forEach(t),Aco=r(Bk," (Megatron-BERT model)"),Bk.forEach(t),Lco=i(S),ch=n(S,"LI",{});var cLe=s(ch);Kse=n(cLe,"STRONG",{});var Ant=s(Kse);yco=r(Ant,"mluke"),Ant.forEach(t),xco=r(cLe," \u2014 "),sI=n(cLe,"A",{href:!0});var Lnt=s(sI);$co=r(Lnt,"MLukeTokenizer"),Lnt.forEach(t),kco=r(cLe," (mLUKE model)"),cLe.forEach(t),Sco=i(S),Fs=n(S,"LI",{});var Ik=s(Fs);Zse=n(Ik,"STRONG",{});var ynt=s(Zse);Rco=r(ynt,"mobilebert"),ynt.forEach(t),Pco=r(Ik," \u2014 "),lI=n(Ik,"A",{href:!0});var xnt=s(lI);Bco=r(xnt,"MobileBertTokenizer"),xnt.forEach(t),Ico=r(Ik," or "),iI=n(Ik,"A",{href:!0});var $nt=s(iI);Nco=r($nt,"MobileBertTokenizerFast"),$nt.forEach(t),qco=r(Ik," (MobileBERT model)"),Ik.forEach(t),jco=i(S),Ts=n(S,"LI",{});var Nk=s(Ts);ele=n(Nk,"STRONG",{});var knt=s(ele);Dco=r(knt,"mpnet"),knt.forEach(t),Gco=r(Nk," \u2014 "),dI=n(Nk,"A",{href:!0});var Snt=s(dI);Oco=r(Snt,"MPNetTokenizer"),Snt.forEach(t),Vco=r(Nk," or "),cI=n(Nk,"A",{href:!0});var Rnt=s(cI);Xco=r(Rnt,"MPNetTokenizerFast"),Rnt.forEach(t),zco=r(Nk," (MPNet model)"),Nk.forEach(t),Qco=i(S),Ms=n(S,"LI",{});var qk=s(Ms);ole=n(qk,"STRONG",{});var Pnt=s(ole);Wco=r(Pnt,"mt5"),Pnt.forEach(t),Hco=r(qk," \u2014 "),fI=n(qk,"A",{href:!0});var Bnt=s(fI);Uco=r(Bnt,"MT5Tokenizer"),Bnt.forEach(t),Jco=r(qk," or "),mI=n(qk,"A",{href:!0});var Int=s(mI);Yco=r(Int,"MT5TokenizerFast"),Int.forEach(t),Kco=r(qk," (MT5 model)"),qk.forEach(t),Zco=i(S),Es=n(S,"LI",{});var jk=s(Es);rle=n(jk,"STRONG",{});var Nnt=s(rle);efo=r(Nnt,"nezha"),Nnt.forEach(t),ofo=r(jk," \u2014 "),gI=n(jk,"A",{href:!0});var qnt=s(gI);rfo=r(qnt,"BertTokenizer"),qnt.forEach(t),tfo=r(jk," or "),hI=n(jk,"A",{href:!0});var jnt=s(hI);afo=r(jnt,"BertTokenizerFast"),jnt.forEach(t),nfo=r(jk," (Nezha model)"),jk.forEach(t),sfo=i(S),Cs=n(S,"LI",{});var Dk=s(Cs);tle=n(Dk,"STRONG",{});var Dnt=s(tle);lfo=r(Dnt,"nystromformer"),Dnt.forEach(t),ifo=r(Dk," \u2014 "),pI=n(Dk,"A",{href:!0});var Gnt=s(pI);dfo=r(Gnt,"AlbertTokenizer"),Gnt.forEach(t),cfo=r(Dk," or "),_I=n(Dk,"A",{href:!0});var Ont=s(_I);ffo=r(Ont,"AlbertTokenizerFast"),Ont.forEach(t),mfo=r(Dk," (Nystr\xF6mformer model)"),Dk.forEach(t),gfo=i(S),ws=n(S,"LI",{});var Gk=s(ws);ale=n(Gk,"STRONG",{});var Vnt=s(ale);hfo=r(Vnt,"openai-gpt"),Vnt.forEach(t),pfo=r(Gk," \u2014 "),uI=n(Gk,"A",{href:!0});var Xnt=s(uI);_fo=r(Xnt,"OpenAIGPTTokenizer"),Xnt.forEach(t),ufo=r(Gk," or "),bI=n(Gk,"A",{href:!0});var znt=s(bI);bfo=r(znt,"OpenAIGPTTokenizerFast"),znt.forEach(t),vfo=r(Gk," (OpenAI GPT model)"),Gk.forEach(t),Ffo=i(S),fh=n(S,"LI",{});var fLe=s(fh);nle=n(fLe,"STRONG",{});var Qnt=s(nle);Tfo=r(Qnt,"opt"),Qnt.forEach(t),Mfo=r(fLe," \u2014 "),vI=n(fLe,"A",{href:!0});var Wnt=s(vI);Efo=r(Wnt,"GPT2Tokenizer"),Wnt.forEach(t),Cfo=r(fLe," (OPT model)"),fLe.forEach(t),wfo=i(S),As=n(S,"LI",{});var Ok=s(As);sle=n(Ok,"STRONG",{});var Hnt=s(sle);Afo=r(Hnt,"pegasus"),Hnt.forEach(t),Lfo=r(Ok," \u2014 "),FI=n(Ok,"A",{href:!0});var Unt=s(FI);yfo=r(Unt,"PegasusTokenizer"),Unt.forEach(t),xfo=r(Ok," or "),TI=n(Ok,"A",{href:!0});var Jnt=s(TI);$fo=r(Jnt,"PegasusTokenizerFast"),Jnt.forEach(t),kfo=r(Ok," (Pegasus model)"),Ok.forEach(t),Sfo=i(S),mh=n(S,"LI",{});var mLe=s(mh);lle=n(mLe,"STRONG",{});var Ynt=s(lle);Rfo=r(Ynt,"perceiver"),Ynt.forEach(t),Pfo=r(mLe," \u2014 "),MI=n(mLe,"A",{href:!0});var Knt=s(MI);Bfo=r(Knt,"PerceiverTokenizer"),Knt.forEach(t),Ifo=r(mLe," (Perceiver model)"),mLe.forEach(t),Nfo=i(S),gh=n(S,"LI",{});var gLe=s(gh);ile=n(gLe,"STRONG",{});var Znt=s(ile);qfo=r(Znt,"phobert"),Znt.forEach(t),jfo=r(gLe," \u2014 "),EI=n(gLe,"A",{href:!0});var est=s(EI);Dfo=r(est,"PhobertTokenizer"),est.forEach(t),Gfo=r(gLe," (PhoBERT model)"),gLe.forEach(t),Ofo=i(S),hh=n(S,"LI",{});var hLe=s(hh);dle=n(hLe,"STRONG",{});var ost=s(dle);Vfo=r(ost,"plbart"),ost.forEach(t),Xfo=r(hLe," \u2014 "),CI=n(hLe,"A",{href:!0});var rst=s(CI);zfo=r(rst,"PLBartTokenizer"),rst.forEach(t),Qfo=r(hLe," (PLBart model)"),hLe.forEach(t),Wfo=i(S),ph=n(S,"LI",{});var pLe=s(ph);cle=n(pLe,"STRONG",{});var tst=s(cle);Hfo=r(tst,"prophetnet"),tst.forEach(t),Ufo=r(pLe," \u2014 "),wI=n(pLe,"A",{href:!0});var ast=s(wI);Jfo=r(ast,"ProphetNetTokenizer"),ast.forEach(t),Yfo=r(pLe," (ProphetNet model)"),pLe.forEach(t),Kfo=i(S),Ls=n(S,"LI",{});var Vk=s(Ls);fle=n(Vk,"STRONG",{});var nst=s(fle);Zfo=r(nst,"qdqbert"),nst.forEach(t),emo=r(Vk," \u2014 "),AI=n(Vk,"A",{href:!0});var sst=s(AI);omo=r(sst,"BertTokenizer"),sst.forEach(t),rmo=r(Vk," or "),LI=n(Vk,"A",{href:!0});var lst=s(LI);tmo=r(lst,"BertTokenizerFast"),lst.forEach(t),amo=r(Vk," (QDQBert model)"),Vk.forEach(t),nmo=i(S),_h=n(S,"LI",{});var _Le=s(_h);mle=n(_Le,"STRONG",{});var ist=s(mle);smo=r(ist,"rag"),ist.forEach(t),lmo=r(_Le," \u2014 "),yI=n(_Le,"A",{href:!0});var dst=s(yI);imo=r(dst,"RagTokenizer"),dst.forEach(t),dmo=r(_Le," (RAG model)"),_Le.forEach(t),cmo=i(S),ys=n(S,"LI",{});var Xk=s(ys);gle=n(Xk,"STRONG",{});var cst=s(gle);fmo=r(cst,"realm"),cst.forEach(t),mmo=r(Xk," \u2014 "),xI=n(Xk,"A",{href:!0});var fst=s(xI);gmo=r(fst,"RealmTokenizer"),fst.forEach(t),hmo=r(Xk," or "),$I=n(Xk,"A",{href:!0});var mst=s($I);pmo=r(mst,"RealmTokenizerFast"),mst.forEach(t),_mo=r(Xk," (REALM model)"),Xk.forEach(t),umo=i(S),xs=n(S,"LI",{});var zk=s(xs);hle=n(zk,"STRONG",{});var gst=s(hle);bmo=r(gst,"reformer"),gst.forEach(t),vmo=r(zk," \u2014 "),kI=n(zk,"A",{href:!0});var hst=s(kI);Fmo=r(hst,"ReformerTokenizer"),hst.forEach(t),Tmo=r(zk," or "),SI=n(zk,"A",{href:!0});var pst=s(SI);Mmo=r(pst,"ReformerTokenizerFast"),pst.forEach(t),Emo=r(zk," (Reformer model)"),zk.forEach(t),Cmo=i(S),$s=n(S,"LI",{});var Qk=s($s);ple=n(Qk,"STRONG",{});var _st=s(ple);wmo=r(_st,"rembert"),_st.forEach(t),Amo=r(Qk," \u2014 "),RI=n(Qk,"A",{href:!0});var ust=s(RI);Lmo=r(ust,"RemBertTokenizer"),ust.forEach(t),ymo=r(Qk," or "),PI=n(Qk,"A",{href:!0});var bst=s(PI);xmo=r(bst,"RemBertTokenizerFast"),bst.forEach(t),$mo=r(Qk," (RemBERT model)"),Qk.forEach(t),kmo=i(S),ks=n(S,"LI",{});var Wk=s(ks);_le=n(Wk,"STRONG",{});var vst=s(_le);Smo=r(vst,"retribert"),vst.forEach(t),Rmo=r(Wk," \u2014 "),BI=n(Wk,"A",{href:!0});var Fst=s(BI);Pmo=r(Fst,"RetriBertTokenizer"),Fst.forEach(t),Bmo=r(Wk," or "),II=n(Wk,"A",{href:!0});var Tst=s(II);Imo=r(Tst,"RetriBertTokenizerFast"),Tst.forEach(t),Nmo=r(Wk," (RetriBERT model)"),Wk.forEach(t),qmo=i(S),Ss=n(S,"LI",{});var Hk=s(Ss);ule=n(Hk,"STRONG",{});var Mst=s(ule);jmo=r(Mst,"roberta"),Mst.forEach(t),Dmo=r(Hk," \u2014 "),NI=n(Hk,"A",{href:!0});var Est=s(NI);Gmo=r(Est,"RobertaTokenizer"),Est.forEach(t),Omo=r(Hk," or "),qI=n(Hk,"A",{href:!0});var Cst=s(qI);Vmo=r(Cst,"RobertaTokenizerFast"),Cst.forEach(t),Xmo=r(Hk," (RoBERTa model)"),Hk.forEach(t),zmo=i(S),Rs=n(S,"LI",{});var Uk=s(Rs);ble=n(Uk,"STRONG",{});var wst=s(ble);Qmo=r(wst,"roformer"),wst.forEach(t),Wmo=r(Uk," \u2014 "),jI=n(Uk,"A",{href:!0});var Ast=s(jI);Hmo=r(Ast,"RoFormerTokenizer"),Ast.forEach(t),Umo=r(Uk," or "),DI=n(Uk,"A",{href:!0});var Lst=s(DI);Jmo=r(Lst,"RoFormerTokenizerFast"),Lst.forEach(t),Ymo=r(Uk," (RoFormer model)"),Uk.forEach(t),Kmo=i(S),uh=n(S,"LI",{});var uLe=s(uh);vle=n(uLe,"STRONG",{});var yst=s(vle);Zmo=r(yst,"speech_to_text"),yst.forEach(t),ego=r(uLe," \u2014 "),GI=n(uLe,"A",{href:!0});var xst=s(GI);ogo=r(xst,"Speech2TextTokenizer"),xst.forEach(t),rgo=r(uLe," (Speech2Text model)"),uLe.forEach(t),tgo=i(S),bh=n(S,"LI",{});var bLe=s(bh);Fle=n(bLe,"STRONG",{});var $st=s(Fle);ago=r($st,"speech_to_text_2"),$st.forEach(t),ngo=r(bLe," \u2014 "),OI=n(bLe,"A",{href:!0});var kst=s(OI);sgo=r(kst,"Speech2Text2Tokenizer"),kst.forEach(t),lgo=r(bLe," (Speech2Text2 model)"),bLe.forEach(t),igo=i(S),Ps=n(S,"LI",{});var Jk=s(Ps);Tle=n(Jk,"STRONG",{});var Sst=s(Tle);dgo=r(Sst,"splinter"),Sst.forEach(t),cgo=r(Jk," \u2014 "),VI=n(Jk,"A",{href:!0});var Rst=s(VI);fgo=r(Rst,"SplinterTokenizer"),Rst.forEach(t),mgo=r(Jk," or "),XI=n(Jk,"A",{href:!0});var Pst=s(XI);ggo=r(Pst,"SplinterTokenizerFast"),Pst.forEach(t),hgo=r(Jk," (Splinter model)"),Jk.forEach(t),pgo=i(S),Bs=n(S,"LI",{});var Yk=s(Bs);Mle=n(Yk,"STRONG",{});var Bst=s(Mle);_go=r(Bst,"squeezebert"),Bst.forEach(t),ugo=r(Yk," \u2014 "),zI=n(Yk,"A",{href:!0});var Ist=s(zI);bgo=r(Ist,"SqueezeBertTokenizer"),Ist.forEach(t),vgo=r(Yk," or "),QI=n(Yk,"A",{href:!0});var Nst=s(QI);Fgo=r(Nst,"SqueezeBertTokenizerFast"),Nst.forEach(t),Tgo=r(Yk," (SqueezeBERT model)"),Yk.forEach(t),Mgo=i(S),Is=n(S,"LI",{});var Kk=s(Is);Ele=n(Kk,"STRONG",{});var qst=s(Ele);Ego=r(qst,"t5"),qst.forEach(t),Cgo=r(Kk," \u2014 "),WI=n(Kk,"A",{href:!0});var jst=s(WI);wgo=r(jst,"T5Tokenizer"),jst.forEach(t),Ago=r(Kk," or "),HI=n(Kk,"A",{href:!0});var Dst=s(HI);Lgo=r(Dst,"T5TokenizerFast"),Dst.forEach(t),ygo=r(Kk," (T5 model)"),Kk.forEach(t),xgo=i(S),vh=n(S,"LI",{});var vLe=s(vh);Cle=n(vLe,"STRONG",{});var Gst=s(Cle);$go=r(Gst,"tapas"),Gst.forEach(t),kgo=r(vLe," \u2014 "),UI=n(vLe,"A",{href:!0});var Ost=s(UI);Sgo=r(Ost,"TapasTokenizer"),Ost.forEach(t),Rgo=r(vLe," (TAPAS model)"),vLe.forEach(t),Pgo=i(S),Fh=n(S,"LI",{});var FLe=s(Fh);wle=n(FLe,"STRONG",{});var Vst=s(wle);Bgo=r(Vst,"tapex"),Vst.forEach(t),Igo=r(FLe," \u2014 "),JI=n(FLe,"A",{href:!0});var Xst=s(JI);Ngo=r(Xst,"TapexTokenizer"),Xst.forEach(t),qgo=r(FLe," (TAPEX model)"),FLe.forEach(t),jgo=i(S),Th=n(S,"LI",{});var TLe=s(Th);Ale=n(TLe,"STRONG",{});var zst=s(Ale);Dgo=r(zst,"transfo-xl"),zst.forEach(t),Ggo=r(TLe," \u2014 "),YI=n(TLe,"A",{href:!0});var Qst=s(YI);Ogo=r(Qst,"TransfoXLTokenizer"),Qst.forEach(t),Vgo=r(TLe," (Transformer-XL model)"),TLe.forEach(t),Xgo=i(S),Ns=n(S,"LI",{});var Zk=s(Ns);Lle=n(Zk,"STRONG",{});var Wst=s(Lle);zgo=r(Wst,"vilt"),Wst.forEach(t),Qgo=r(Zk," \u2014 "),KI=n(Zk,"A",{href:!0});var Hst=s(KI);Wgo=r(Hst,"BertTokenizer"),Hst.forEach(t),Hgo=r(Zk," or "),ZI=n(Zk,"A",{href:!0});var Ust=s(ZI);Ugo=r(Ust,"BertTokenizerFast"),Ust.forEach(t),Jgo=r(Zk," (ViLT model)"),Zk.forEach(t),Ygo=i(S),qs=n(S,"LI",{});var eS=s(qs);yle=n(eS,"STRONG",{});var Jst=s(yle);Kgo=r(Jst,"visual_bert"),Jst.forEach(t),Zgo=r(eS," \u2014 "),eN=n(eS,"A",{href:!0});var Yst=s(eN);eho=r(Yst,"BertTokenizer"),Yst.forEach(t),oho=r(eS," or "),oN=n(eS,"A",{href:!0});var Kst=s(oN);rho=r(Kst,"BertTokenizerFast"),Kst.forEach(t),tho=r(eS," (VisualBERT model)"),eS.forEach(t),aho=i(S),Mh=n(S,"LI",{});var MLe=s(Mh);xle=n(MLe,"STRONG",{});var Zst=s(xle);nho=r(Zst,"wav2vec2"),Zst.forEach(t),sho=r(MLe," \u2014 "),rN=n(MLe,"A",{href:!0});var elt=s(rN);lho=r(elt,"Wav2Vec2CTCTokenizer"),elt.forEach(t),iho=r(MLe," (Wav2Vec2 model)"),MLe.forEach(t),dho=i(S),Eh=n(S,"LI",{});var ELe=s(Eh);$le=n(ELe,"STRONG",{});var olt=s($le);cho=r(olt,"wav2vec2-conformer"),olt.forEach(t),fho=r(ELe," \u2014 "),tN=n(ELe,"A",{href:!0});var rlt=s(tN);mho=r(rlt,"Wav2Vec2CTCTokenizer"),rlt.forEach(t),gho=r(ELe," (Wav2Vec2-Conformer model)"),ELe.forEach(t),hho=i(S),Ch=n(S,"LI",{});var CLe=s(Ch);kle=n(CLe,"STRONG",{});var tlt=s(kle);pho=r(tlt,"wav2vec2_phoneme"),tlt.forEach(t),_ho=r(CLe," \u2014 "),aN=n(CLe,"A",{href:!0});var alt=s(aN);uho=r(alt,"Wav2Vec2PhonemeCTCTokenizer"),alt.forEach(t),bho=r(CLe," (Wav2Vec2Phoneme model)"),CLe.forEach(t),vho=i(S),js=n(S,"LI",{});var oS=s(js);Sle=n(oS,"STRONG",{});var nlt=s(Sle);Fho=r(nlt,"xglm"),nlt.forEach(t),Tho=r(oS," \u2014 "),nN=n(oS,"A",{href:!0});var slt=s(nN);Mho=r(slt,"XGLMTokenizer"),slt.forEach(t),Eho=r(oS," or "),sN=n(oS,"A",{href:!0});var llt=s(sN);Cho=r(llt,"XGLMTokenizerFast"),llt.forEach(t),who=r(oS," (XGLM model)"),oS.forEach(t),Aho=i(S),wh=n(S,"LI",{});var wLe=s(wh);Rle=n(wLe,"STRONG",{});var ilt=s(Rle);Lho=r(ilt,"xlm"),ilt.forEach(t),yho=r(wLe," \u2014 "),lN=n(wLe,"A",{href:!0});var dlt=s(lN);xho=r(dlt,"XLMTokenizer"),dlt.forEach(t),$ho=r(wLe," (XLM model)"),wLe.forEach(t),kho=i(S),Ah=n(S,"LI",{});var ALe=s(Ah);Ple=n(ALe,"STRONG",{});var clt=s(Ple);Sho=r(clt,"xlm-prophetnet"),clt.forEach(t),Rho=r(ALe," \u2014 "),iN=n(ALe,"A",{href:!0});var flt=s(iN);Pho=r(flt,"XLMProphetNetTokenizer"),flt.forEach(t),Bho=r(ALe," (XLM-ProphetNet model)"),ALe.forEach(t),Iho=i(S),Ds=n(S,"LI",{});var rS=s(Ds);Ble=n(rS,"STRONG",{});var mlt=s(Ble);Nho=r(mlt,"xlm-roberta"),mlt.forEach(t),qho=r(rS," \u2014 "),dN=n(rS,"A",{href:!0});var glt=s(dN);jho=r(glt,"XLMRobertaTokenizer"),glt.forEach(t),Dho=r(rS," or "),cN=n(rS,"A",{href:!0});var hlt=s(cN);Gho=r(hlt,"XLMRobertaTokenizerFast"),hlt.forEach(t),Oho=r(rS," (XLM-RoBERTa model)"),rS.forEach(t),Vho=i(S),Gs=n(S,"LI",{});var tS=s(Gs);Ile=n(tS,"STRONG",{});var plt=s(Ile);Xho=r(plt,"xlm-roberta-xl"),plt.forEach(t),zho=r(tS," \u2014 "),fN=n(tS,"A",{href:!0});var _lt=s(fN);Qho=r(_lt,"RobertaTokenizer"),_lt.forEach(t),Who=r(tS," or "),mN=n(tS,"A",{href:!0});var ult=s(mN);Hho=r(ult,"RobertaTokenizerFast"),ult.forEach(t),Uho=r(tS," (XLM-RoBERTa-XL model)"),tS.forEach(t),Jho=i(S),Os=n(S,"LI",{});var aS=s(Os);Nle=n(aS,"STRONG",{});var blt=s(Nle);Yho=r(blt,"xlnet"),blt.forEach(t),Kho=r(aS," \u2014 "),gN=n(aS,"A",{href:!0});var vlt=s(gN);Zho=r(vlt,"XLNetTokenizer"),vlt.forEach(t),epo=r(aS," or "),hN=n(aS,"A",{href:!0});var Flt=s(hN);opo=r(Flt,"XLNetTokenizerFast"),Flt.forEach(t),rpo=r(aS," (XLNet model)"),aS.forEach(t),tpo=i(S),Vs=n(S,"LI",{});var nS=s(Vs);qle=n(nS,"STRONG",{});var Tlt=s(qle);apo=r(Tlt,"yoso"),Tlt.forEach(t),npo=r(nS," \u2014 "),pN=n(nS,"A",{href:!0});var Mlt=s(pN);spo=r(Mlt,"AlbertTokenizer"),Mlt.forEach(t),lpo=r(nS," or "),_N=n(nS,"A",{href:!0});var Elt=s(_N);ipo=r(Elt,"AlbertTokenizerFast"),Elt.forEach(t),dpo=r(nS," (YOSO model)"),nS.forEach(t),S.forEach(t),cpo=i(Us),T(Lh.$$.fragment,Us),Us.forEach(t),fpo=i(Hs),yh=n(Hs,"DIV",{class:!0});var CXe=s(yh);T(UA.$$.fragment,CXe),mpo=i(CXe),jle=n(CXe,"P",{});var Clt=s(jle);gpo=r(Clt,"Register a new tokenizer in this mapping."),Clt.forEach(t),CXe.forEach(t),Hs.forEach(t),EOe=i(f),Ri=n(f,"H2",{class:!0});var wXe=s(Ri);xh=n(wXe,"A",{id:!0,class:!0,href:!0});var wlt=s(xh);Dle=n(wlt,"SPAN",{});var Alt=s(Dle);T(JA.$$.fragment,Alt),Alt.forEach(t),wlt.forEach(t),hpo=i(wXe),Gle=n(wXe,"SPAN",{});var Llt=s(Gle);ppo=r(Llt,"AutoFeatureExtractor"),Llt.forEach(t),wXe.forEach(t),COe=i(f),Lo=n(f,"DIV",{class:!0});var Js=s(Lo);T(YA.$$.fragment,Js),_po=i(Js),KA=n(Js,"P",{});var AXe=s(KA);upo=r(AXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),uN=n(AXe,"A",{href:!0});var ylt=s(uN);bpo=r(ylt,"AutoFeatureExtractor.from_pretrained()"),ylt.forEach(t),vpo=r(AXe," class method."),AXe.forEach(t),Fpo=i(Js),ZA=n(Js,"P",{});var LXe=s(ZA);Tpo=r(LXe,"This class cannot be instantiated directly using "),Ole=n(LXe,"CODE",{});var xlt=s(Ole);Mpo=r(xlt,"__init__()"),xlt.forEach(t),Epo=r(LXe," (throws an error)."),LXe.forEach(t),Cpo=i(Js),He=n(Js,"DIV",{class:!0});var ra=s(He);T(eL.$$.fragment,ra),wpo=i(ra),Vle=n(ra,"P",{});var $lt=s(Vle);Apo=r($lt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),$lt.forEach(t),Lpo=i(ra),Sa=n(ra,"P",{});var N0=s(Sa);ypo=r(N0,"The feature extractor class to instantiate is selected based on the "),Xle=n(N0,"CODE",{});var klt=s(Xle);xpo=r(klt,"model_type"),klt.forEach(t),$po=r(N0,` property of the config object
(either passed as an argument or loaded from `),zle=n(N0,"CODE",{});var Slt=s(zle);kpo=r(Slt,"pretrained_model_name_or_path"),Slt.forEach(t),Spo=r(N0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qle=n(N0,"CODE",{});var Rlt=s(Qle);Rpo=r(Rlt,"pretrained_model_name_or_path"),Rlt.forEach(t),Ppo=r(N0,":"),N0.forEach(t),Bpo=i(ra),Y=n(ra,"UL",{});var K=s(Y);$h=n(K,"LI",{});var LLe=s($h);Wle=n(LLe,"STRONG",{});var Plt=s(Wle);Ipo=r(Plt,"beit"),Plt.forEach(t),Npo=r(LLe," \u2014 "),bN=n(LLe,"A",{href:!0});var Blt=s(bN);qpo=r(Blt,"BeitFeatureExtractor"),Blt.forEach(t),jpo=r(LLe," (BEiT model)"),LLe.forEach(t),Dpo=i(K),kh=n(K,"LI",{});var yLe=s(kh);Hle=n(yLe,"STRONG",{});var Ilt=s(Hle);Gpo=r(Ilt,"clip"),Ilt.forEach(t),Opo=r(yLe," \u2014 "),vN=n(yLe,"A",{href:!0});var Nlt=s(vN);Vpo=r(Nlt,"CLIPFeatureExtractor"),Nlt.forEach(t),Xpo=r(yLe," (CLIP model)"),yLe.forEach(t),zpo=i(K),Sh=n(K,"LI",{});var xLe=s(Sh);Ule=n(xLe,"STRONG",{});var qlt=s(Ule);Qpo=r(qlt,"convnext"),qlt.forEach(t),Wpo=r(xLe," \u2014 "),FN=n(xLe,"A",{href:!0});var jlt=s(FN);Hpo=r(jlt,"ConvNextFeatureExtractor"),jlt.forEach(t),Upo=r(xLe," (ConvNeXT model)"),xLe.forEach(t),Jpo=i(K),Rh=n(K,"LI",{});var $Le=s(Rh);Jle=n($Le,"STRONG",{});var Dlt=s(Jle);Ypo=r(Dlt,"cvt"),Dlt.forEach(t),Kpo=r($Le," \u2014 "),TN=n($Le,"A",{href:!0});var Glt=s(TN);Zpo=r(Glt,"ConvNextFeatureExtractor"),Glt.forEach(t),e_o=r($Le," (CvT model)"),$Le.forEach(t),o_o=i(K),Ph=n(K,"LI",{});var kLe=s(Ph);Yle=n(kLe,"STRONG",{});var Olt=s(Yle);r_o=r(Olt,"data2vec-audio"),Olt.forEach(t),t_o=r(kLe," \u2014 "),MN=n(kLe,"A",{href:!0});var Vlt=s(MN);a_o=r(Vlt,"Wav2Vec2FeatureExtractor"),Vlt.forEach(t),n_o=r(kLe," (Data2VecAudio model)"),kLe.forEach(t),s_o=i(K),Bh=n(K,"LI",{});var SLe=s(Bh);Kle=n(SLe,"STRONG",{});var Xlt=s(Kle);l_o=r(Xlt,"data2vec-vision"),Xlt.forEach(t),i_o=r(SLe," \u2014 "),EN=n(SLe,"A",{href:!0});var zlt=s(EN);d_o=r(zlt,"BeitFeatureExtractor"),zlt.forEach(t),c_o=r(SLe," (Data2VecVision model)"),SLe.forEach(t),f_o=i(K),Ih=n(K,"LI",{});var RLe=s(Ih);Zle=n(RLe,"STRONG",{});var Qlt=s(Zle);m_o=r(Qlt,"deit"),Qlt.forEach(t),g_o=r(RLe," \u2014 "),CN=n(RLe,"A",{href:!0});var Wlt=s(CN);h_o=r(Wlt,"DeiTFeatureExtractor"),Wlt.forEach(t),p_o=r(RLe," (DeiT model)"),RLe.forEach(t),__o=i(K),Nh=n(K,"LI",{});var PLe=s(Nh);eie=n(PLe,"STRONG",{});var Hlt=s(eie);u_o=r(Hlt,"detr"),Hlt.forEach(t),b_o=r(PLe," \u2014 "),wN=n(PLe,"A",{href:!0});var Ult=s(wN);v_o=r(Ult,"DetrFeatureExtractor"),Ult.forEach(t),F_o=r(PLe," (DETR model)"),PLe.forEach(t),T_o=i(K),qh=n(K,"LI",{});var BLe=s(qh);oie=n(BLe,"STRONG",{});var Jlt=s(oie);M_o=r(Jlt,"dpt"),Jlt.forEach(t),E_o=r(BLe," \u2014 "),AN=n(BLe,"A",{href:!0});var Ylt=s(AN);C_o=r(Ylt,"DPTFeatureExtractor"),Ylt.forEach(t),w_o=r(BLe," (DPT model)"),BLe.forEach(t),A_o=i(K),jh=n(K,"LI",{});var ILe=s(jh);rie=n(ILe,"STRONG",{});var Klt=s(rie);L_o=r(Klt,"flava"),Klt.forEach(t),y_o=r(ILe," \u2014 "),LN=n(ILe,"A",{href:!0});var Zlt=s(LN);x_o=r(Zlt,"FlavaFeatureExtractor"),Zlt.forEach(t),$_o=r(ILe," (FLAVA model)"),ILe.forEach(t),k_o=i(K),Dh=n(K,"LI",{});var NLe=s(Dh);tie=n(NLe,"STRONG",{});var eit=s(tie);S_o=r(eit,"glpn"),eit.forEach(t),R_o=r(NLe," \u2014 "),yN=n(NLe,"A",{href:!0});var oit=s(yN);P_o=r(oit,"GLPNFeatureExtractor"),oit.forEach(t),B_o=r(NLe," (GLPN model)"),NLe.forEach(t),I_o=i(K),Gh=n(K,"LI",{});var qLe=s(Gh);aie=n(qLe,"STRONG",{});var rit=s(aie);N_o=r(rit,"hubert"),rit.forEach(t),q_o=r(qLe," \u2014 "),xN=n(qLe,"A",{href:!0});var tit=s(xN);j_o=r(tit,"Wav2Vec2FeatureExtractor"),tit.forEach(t),D_o=r(qLe," (Hubert model)"),qLe.forEach(t),G_o=i(K),Oh=n(K,"LI",{});var jLe=s(Oh);nie=n(jLe,"STRONG",{});var ait=s(nie);O_o=r(ait,"imagegpt"),ait.forEach(t),V_o=r(jLe," \u2014 "),$N=n(jLe,"A",{href:!0});var nit=s($N);X_o=r(nit,"ImageGPTFeatureExtractor"),nit.forEach(t),z_o=r(jLe," (ImageGPT model)"),jLe.forEach(t),Q_o=i(K),Vh=n(K,"LI",{});var DLe=s(Vh);sie=n(DLe,"STRONG",{});var sit=s(sie);W_o=r(sit,"layoutlmv2"),sit.forEach(t),H_o=r(DLe," \u2014 "),kN=n(DLe,"A",{href:!0});var lit=s(kN);U_o=r(lit,"LayoutLMv2FeatureExtractor"),lit.forEach(t),J_o=r(DLe," (LayoutLMv2 model)"),DLe.forEach(t),Y_o=i(K),Xh=n(K,"LI",{});var GLe=s(Xh);lie=n(GLe,"STRONG",{});var iit=s(lie);K_o=r(iit,"layoutlmv3"),iit.forEach(t),Z_o=r(GLe," \u2014 "),SN=n(GLe,"A",{href:!0});var dit=s(SN);euo=r(dit,"LayoutLMv3FeatureExtractor"),dit.forEach(t),ouo=r(GLe," (LayoutLMv3 model)"),GLe.forEach(t),ruo=i(K),zh=n(K,"LI",{});var OLe=s(zh);iie=n(OLe,"STRONG",{});var cit=s(iie);tuo=r(cit,"levit"),cit.forEach(t),auo=r(OLe," \u2014 "),RN=n(OLe,"A",{href:!0});var fit=s(RN);nuo=r(fit,"LevitFeatureExtractor"),fit.forEach(t),suo=r(OLe," (LeViT model)"),OLe.forEach(t),luo=i(K),Qh=n(K,"LI",{});var VLe=s(Qh);die=n(VLe,"STRONG",{});var mit=s(die);iuo=r(mit,"maskformer"),mit.forEach(t),duo=r(VLe," \u2014 "),PN=n(VLe,"A",{href:!0});var git=s(PN);cuo=r(git,"MaskFormerFeatureExtractor"),git.forEach(t),fuo=r(VLe," (MaskFormer model)"),VLe.forEach(t),muo=i(K),Wh=n(K,"LI",{});var XLe=s(Wh);cie=n(XLe,"STRONG",{});var hit=s(cie);guo=r(hit,"mctct"),hit.forEach(t),huo=r(XLe," \u2014 "),BN=n(XLe,"A",{href:!0});var pit=s(BN);puo=r(pit,"MCTCTFeatureExtractor"),pit.forEach(t),_uo=r(XLe," (M-CTC-T model)"),XLe.forEach(t),uuo=i(K),Hh=n(K,"LI",{});var zLe=s(Hh);fie=n(zLe,"STRONG",{});var _it=s(fie);buo=r(_it,"perceiver"),_it.forEach(t),vuo=r(zLe," \u2014 "),IN=n(zLe,"A",{href:!0});var uit=s(IN);Fuo=r(uit,"PerceiverFeatureExtractor"),uit.forEach(t),Tuo=r(zLe," (Perceiver model)"),zLe.forEach(t),Muo=i(K),Uh=n(K,"LI",{});var QLe=s(Uh);mie=n(QLe,"STRONG",{});var bit=s(mie);Euo=r(bit,"poolformer"),bit.forEach(t),Cuo=r(QLe," \u2014 "),NN=n(QLe,"A",{href:!0});var vit=s(NN);wuo=r(vit,"PoolFormerFeatureExtractor"),vit.forEach(t),Auo=r(QLe," (PoolFormer model)"),QLe.forEach(t),Luo=i(K),Jh=n(K,"LI",{});var WLe=s(Jh);gie=n(WLe,"STRONG",{});var Fit=s(gie);yuo=r(Fit,"regnet"),Fit.forEach(t),xuo=r(WLe," \u2014 "),qN=n(WLe,"A",{href:!0});var Tit=s(qN);$uo=r(Tit,"ConvNextFeatureExtractor"),Tit.forEach(t),kuo=r(WLe," (RegNet model)"),WLe.forEach(t),Suo=i(K),Yh=n(K,"LI",{});var HLe=s(Yh);hie=n(HLe,"STRONG",{});var Mit=s(hie);Ruo=r(Mit,"resnet"),Mit.forEach(t),Puo=r(HLe," \u2014 "),jN=n(HLe,"A",{href:!0});var Eit=s(jN);Buo=r(Eit,"ConvNextFeatureExtractor"),Eit.forEach(t),Iuo=r(HLe," (ResNet model)"),HLe.forEach(t),Nuo=i(K),Kh=n(K,"LI",{});var ULe=s(Kh);pie=n(ULe,"STRONG",{});var Cit=s(pie);quo=r(Cit,"segformer"),Cit.forEach(t),juo=r(ULe," \u2014 "),DN=n(ULe,"A",{href:!0});var wit=s(DN);Duo=r(wit,"SegformerFeatureExtractor"),wit.forEach(t),Guo=r(ULe," (SegFormer model)"),ULe.forEach(t),Ouo=i(K),Zh=n(K,"LI",{});var JLe=s(Zh);_ie=n(JLe,"STRONG",{});var Ait=s(_ie);Vuo=r(Ait,"speech_to_text"),Ait.forEach(t),Xuo=r(JLe," \u2014 "),GN=n(JLe,"A",{href:!0});var Lit=s(GN);zuo=r(Lit,"Speech2TextFeatureExtractor"),Lit.forEach(t),Quo=r(JLe," (Speech2Text model)"),JLe.forEach(t),Wuo=i(K),ep=n(K,"LI",{});var YLe=s(ep);uie=n(YLe,"STRONG",{});var yit=s(uie);Huo=r(yit,"swin"),yit.forEach(t),Uuo=r(YLe," \u2014 "),ON=n(YLe,"A",{href:!0});var xit=s(ON);Juo=r(xit,"ViTFeatureExtractor"),xit.forEach(t),Yuo=r(YLe," (Swin Transformer model)"),YLe.forEach(t),Kuo=i(K),op=n(K,"LI",{});var KLe=s(op);bie=n(KLe,"STRONG",{});var $it=s(bie);Zuo=r($it,"van"),$it.forEach(t),e2o=r(KLe," \u2014 "),VN=n(KLe,"A",{href:!0});var kit=s(VN);o2o=r(kit,"ConvNextFeatureExtractor"),kit.forEach(t),r2o=r(KLe," (VAN model)"),KLe.forEach(t),t2o=i(K),rp=n(K,"LI",{});var ZLe=s(rp);vie=n(ZLe,"STRONG",{});var Sit=s(vie);a2o=r(Sit,"vilt"),Sit.forEach(t),n2o=r(ZLe," \u2014 "),XN=n(ZLe,"A",{href:!0});var Rit=s(XN);s2o=r(Rit,"ViltFeatureExtractor"),Rit.forEach(t),l2o=r(ZLe," (ViLT model)"),ZLe.forEach(t),i2o=i(K),tp=n(K,"LI",{});var eye=s(tp);Fie=n(eye,"STRONG",{});var Pit=s(Fie);d2o=r(Pit,"vit"),Pit.forEach(t),c2o=r(eye," \u2014 "),zN=n(eye,"A",{href:!0});var Bit=s(zN);f2o=r(Bit,"ViTFeatureExtractor"),Bit.forEach(t),m2o=r(eye," (ViT model)"),eye.forEach(t),g2o=i(K),ap=n(K,"LI",{});var oye=s(ap);Tie=n(oye,"STRONG",{});var Iit=s(Tie);h2o=r(Iit,"vit_mae"),Iit.forEach(t),p2o=r(oye," \u2014 "),QN=n(oye,"A",{href:!0});var Nit=s(QN);_2o=r(Nit,"ViTFeatureExtractor"),Nit.forEach(t),u2o=r(oye," (ViTMAE model)"),oye.forEach(t),b2o=i(K),np=n(K,"LI",{});var rye=s(np);Mie=n(rye,"STRONG",{});var qit=s(Mie);v2o=r(qit,"wav2vec2"),qit.forEach(t),F2o=r(rye," \u2014 "),WN=n(rye,"A",{href:!0});var jit=s(WN);T2o=r(jit,"Wav2Vec2FeatureExtractor"),jit.forEach(t),M2o=r(rye," (Wav2Vec2 model)"),rye.forEach(t),E2o=i(K),sp=n(K,"LI",{});var tye=s(sp);Eie=n(tye,"STRONG",{});var Dit=s(Eie);C2o=r(Dit,"wav2vec2-conformer"),Dit.forEach(t),w2o=r(tye," \u2014 "),HN=n(tye,"A",{href:!0});var Git=s(HN);A2o=r(Git,"Wav2Vec2FeatureExtractor"),Git.forEach(t),L2o=r(tye," (Wav2Vec2-Conformer model)"),tye.forEach(t),y2o=i(K),lp=n(K,"LI",{});var aye=s(lp);Cie=n(aye,"STRONG",{});var Oit=s(Cie);x2o=r(Oit,"yolos"),Oit.forEach(t),$2o=r(aye," \u2014 "),UN=n(aye,"A",{href:!0});var Vit=s(UN);k2o=r(Vit,"YolosFeatureExtractor"),Vit.forEach(t),S2o=r(aye," (YOLOS model)"),aye.forEach(t),K.forEach(t),R2o=i(ra),T(ip.$$.fragment,ra),P2o=i(ra),T(dp.$$.fragment,ra),ra.forEach(t),B2o=i(Js),cp=n(Js,"DIV",{class:!0});var yXe=s(cp);T(oL.$$.fragment,yXe),I2o=i(yXe),wie=n(yXe,"P",{});var Xit=s(wie);N2o=r(Xit,"Register a new feature extractor for this class."),Xit.forEach(t),yXe.forEach(t),Js.forEach(t),wOe=i(f),Pi=n(f,"H2",{class:!0});var xXe=s(Pi);fp=n(xXe,"A",{id:!0,class:!0,href:!0});var zit=s(fp);Aie=n(zit,"SPAN",{});var Qit=s(Aie);T(rL.$$.fragment,Qit),Qit.forEach(t),zit.forEach(t),q2o=i(xXe),Lie=n(xXe,"SPAN",{});var Wit=s(Lie);j2o=r(Wit,"AutoProcessor"),Wit.forEach(t),xXe.forEach(t),AOe=i(f),yo=n(f,"DIV",{class:!0});var Ys=s(yo);T(tL.$$.fragment,Ys),D2o=i(Ys),aL=n(Ys,"P",{});var $Xe=s(aL);G2o=r($Xe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),JN=n($Xe,"A",{href:!0});var Hit=s(JN);O2o=r(Hit,"AutoProcessor.from_pretrained()"),Hit.forEach(t),V2o=r($Xe," class method."),$Xe.forEach(t),X2o=i(Ys),nL=n(Ys,"P",{});var kXe=s(nL);z2o=r(kXe,"This class cannot be instantiated directly using "),yie=n(kXe,"CODE",{});var Uit=s(yie);Q2o=r(Uit,"__init__()"),Uit.forEach(t),W2o=r(kXe," (throws an error)."),kXe.forEach(t),H2o=i(Ys),Ue=n(Ys,"DIV",{class:!0});var ta=s(Ue);T(sL.$$.fragment,ta),U2o=i(ta),xie=n(ta,"P",{});var Jit=s(xie);J2o=r(Jit,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Jit.forEach(t),Y2o=i(ta),Bi=n(ta,"P",{});var Soe=s(Bi);K2o=r(Soe,"The processor class to instantiate is selected based on the "),$ie=n(Soe,"CODE",{});var Yit=s($ie);Z2o=r(Yit,"model_type"),Yit.forEach(t),e1o=r(Soe,` property of the config object (either
passed as an argument or loaded from `),kie=n(Soe,"CODE",{});var Kit=s(kie);o1o=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),r1o=r(Soe," if possible):"),Soe.forEach(t),t1o=i(ta),he=n(ta,"UL",{});var ue=s(he);mp=n(ue,"LI",{});var nye=s(mp);Sie=n(nye,"STRONG",{});var Zit=s(Sie);a1o=r(Zit,"clip"),Zit.forEach(t),n1o=r(nye," \u2014 "),YN=n(nye,"A",{href:!0});var edt=s(YN);s1o=r(edt,"CLIPProcessor"),edt.forEach(t),l1o=r(nye," (CLIP model)"),nye.forEach(t),i1o=i(ue),gp=n(ue,"LI",{});var sye=s(gp);Rie=n(sye,"STRONG",{});var odt=s(Rie);d1o=r(odt,"flava"),odt.forEach(t),c1o=r(sye," \u2014 "),Pie=n(sye,"CODE",{});var rdt=s(Pie);f1o=r(rdt,"FLAVAProcessor"),rdt.forEach(t),m1o=r(sye," (FLAVA model)"),sye.forEach(t),g1o=i(ue),hp=n(ue,"LI",{});var lye=s(hp);Bie=n(lye,"STRONG",{});var tdt=s(Bie);h1o=r(tdt,"layoutlmv2"),tdt.forEach(t),p1o=r(lye," \u2014 "),KN=n(lye,"A",{href:!0});var adt=s(KN);_1o=r(adt,"LayoutLMv2Processor"),adt.forEach(t),u1o=r(lye," (LayoutLMv2 model)"),lye.forEach(t),b1o=i(ue),pp=n(ue,"LI",{});var iye=s(pp);Iie=n(iye,"STRONG",{});var ndt=s(Iie);v1o=r(ndt,"layoutlmv3"),ndt.forEach(t),F1o=r(iye," \u2014 "),ZN=n(iye,"A",{href:!0});var sdt=s(ZN);T1o=r(sdt,"LayoutLMv3Processor"),sdt.forEach(t),M1o=r(iye," (LayoutLMv3 model)"),iye.forEach(t),E1o=i(ue),_p=n(ue,"LI",{});var dye=s(_p);Nie=n(dye,"STRONG",{});var ldt=s(Nie);C1o=r(ldt,"layoutxlm"),ldt.forEach(t),w1o=r(dye," \u2014 "),eq=n(dye,"A",{href:!0});var idt=s(eq);A1o=r(idt,"LayoutXLMProcessor"),idt.forEach(t),L1o=r(dye," (LayoutXLM model)"),dye.forEach(t),y1o=i(ue),up=n(ue,"LI",{});var cye=s(up);qie=n(cye,"STRONG",{});var ddt=s(qie);x1o=r(ddt,"sew"),ddt.forEach(t),$1o=r(cye," \u2014 "),oq=n(cye,"A",{href:!0});var cdt=s(oq);k1o=r(cdt,"Wav2Vec2Processor"),cdt.forEach(t),S1o=r(cye," (SEW model)"),cye.forEach(t),R1o=i(ue),bp=n(ue,"LI",{});var fye=s(bp);jie=n(fye,"STRONG",{});var fdt=s(jie);P1o=r(fdt,"sew-d"),fdt.forEach(t),B1o=r(fye," \u2014 "),rq=n(fye,"A",{href:!0});var mdt=s(rq);I1o=r(mdt,"Wav2Vec2Processor"),mdt.forEach(t),N1o=r(fye," (SEW-D model)"),fye.forEach(t),q1o=i(ue),vp=n(ue,"LI",{});var mye=s(vp);Die=n(mye,"STRONG",{});var gdt=s(Die);j1o=r(gdt,"speech_to_text"),gdt.forEach(t),D1o=r(mye," \u2014 "),tq=n(mye,"A",{href:!0});var hdt=s(tq);G1o=r(hdt,"Speech2TextProcessor"),hdt.forEach(t),O1o=r(mye," (Speech2Text model)"),mye.forEach(t),V1o=i(ue),Fp=n(ue,"LI",{});var gye=s(Fp);Gie=n(gye,"STRONG",{});var pdt=s(Gie);X1o=r(pdt,"speech_to_text_2"),pdt.forEach(t),z1o=r(gye," \u2014 "),aq=n(gye,"A",{href:!0});var _dt=s(aq);Q1o=r(_dt,"Speech2Text2Processor"),_dt.forEach(t),W1o=r(gye," (Speech2Text2 model)"),gye.forEach(t),H1o=i(ue),Tp=n(ue,"LI",{});var hye=s(Tp);Oie=n(hye,"STRONG",{});var udt=s(Oie);U1o=r(udt,"trocr"),udt.forEach(t),J1o=r(hye," \u2014 "),nq=n(hye,"A",{href:!0});var bdt=s(nq);Y1o=r(bdt,"TrOCRProcessor"),bdt.forEach(t),K1o=r(hye," (TrOCR model)"),hye.forEach(t),Z1o=i(ue),Mp=n(ue,"LI",{});var pye=s(Mp);Vie=n(pye,"STRONG",{});var vdt=s(Vie);ebo=r(vdt,"unispeech"),vdt.forEach(t),obo=r(pye," \u2014 "),sq=n(pye,"A",{href:!0});var Fdt=s(sq);rbo=r(Fdt,"Wav2Vec2Processor"),Fdt.forEach(t),tbo=r(pye," (UniSpeech model)"),pye.forEach(t),abo=i(ue),Ep=n(ue,"LI",{});var _ye=s(Ep);Xie=n(_ye,"STRONG",{});var Tdt=s(Xie);nbo=r(Tdt,"unispeech-sat"),Tdt.forEach(t),sbo=r(_ye," \u2014 "),lq=n(_ye,"A",{href:!0});var Mdt=s(lq);lbo=r(Mdt,"Wav2Vec2Processor"),Mdt.forEach(t),ibo=r(_ye," (UniSpeechSat model)"),_ye.forEach(t),dbo=i(ue),Cp=n(ue,"LI",{});var uye=s(Cp);zie=n(uye,"STRONG",{});var Edt=s(zie);cbo=r(Edt,"vilt"),Edt.forEach(t),fbo=r(uye," \u2014 "),iq=n(uye,"A",{href:!0});var Cdt=s(iq);mbo=r(Cdt,"ViltProcessor"),Cdt.forEach(t),gbo=r(uye," (ViLT model)"),uye.forEach(t),hbo=i(ue),wp=n(ue,"LI",{});var bye=s(wp);Qie=n(bye,"STRONG",{});var wdt=s(Qie);pbo=r(wdt,"vision-text-dual-encoder"),wdt.forEach(t),_bo=r(bye," \u2014 "),dq=n(bye,"A",{href:!0});var Adt=s(dq);ubo=r(Adt,"VisionTextDualEncoderProcessor"),Adt.forEach(t),bbo=r(bye," (VisionTextDualEncoder model)"),bye.forEach(t),vbo=i(ue),Ap=n(ue,"LI",{});var vye=s(Ap);Wie=n(vye,"STRONG",{});var Ldt=s(Wie);Fbo=r(Ldt,"wav2vec2"),Ldt.forEach(t),Tbo=r(vye," \u2014 "),cq=n(vye,"A",{href:!0});var ydt=s(cq);Mbo=r(ydt,"Wav2Vec2Processor"),ydt.forEach(t),Ebo=r(vye," (Wav2Vec2 model)"),vye.forEach(t),Cbo=i(ue),Lp=n(ue,"LI",{});var Fye=s(Lp);Hie=n(Fye,"STRONG",{});var xdt=s(Hie);wbo=r(xdt,"wav2vec2-conformer"),xdt.forEach(t),Abo=r(Fye," \u2014 "),fq=n(Fye,"A",{href:!0});var $dt=s(fq);Lbo=r($dt,"Wav2Vec2Processor"),$dt.forEach(t),ybo=r(Fye," (Wav2Vec2-Conformer model)"),Fye.forEach(t),xbo=i(ue),yp=n(ue,"LI",{});var Tye=s(yp);Uie=n(Tye,"STRONG",{});var kdt=s(Uie);$bo=r(kdt,"wavlm"),kdt.forEach(t),kbo=r(Tye," \u2014 "),mq=n(Tye,"A",{href:!0});var Sdt=s(mq);Sbo=r(Sdt,"Wav2Vec2Processor"),Sdt.forEach(t),Rbo=r(Tye," (WavLM model)"),Tye.forEach(t),ue.forEach(t),Pbo=i(ta),T(xp.$$.fragment,ta),Bbo=i(ta),T($p.$$.fragment,ta),ta.forEach(t),Ibo=i(Ys),kp=n(Ys,"DIV",{class:!0});var SXe=s(kp);T(lL.$$.fragment,SXe),Nbo=i(SXe),Jie=n(SXe,"P",{});var Rdt=s(Jie);qbo=r(Rdt,"Register a new processor for this class."),Rdt.forEach(t),SXe.forEach(t),Ys.forEach(t),LOe=i(f),Ii=n(f,"H2",{class:!0});var RXe=s(Ii);Sp=n(RXe,"A",{id:!0,class:!0,href:!0});var Pdt=s(Sp);Yie=n(Pdt,"SPAN",{});var Bdt=s(Yie);T(iL.$$.fragment,Bdt),Bdt.forEach(t),Pdt.forEach(t),jbo=i(RXe),Kie=n(RXe,"SPAN",{});var Idt=s(Kie);Dbo=r(Idt,"AutoModel"),Idt.forEach(t),RXe.forEach(t),yOe=i(f),xo=n(f,"DIV",{class:!0});var Ks=s(xo);T(dL.$$.fragment,Ks),Gbo=i(Ks),Ni=n(Ks,"P",{});var Roe=s(Ni);Obo=r(Roe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gq=n(Roe,"A",{href:!0});var Ndt=s(gq);Vbo=r(Ndt,"from_pretrained()"),Ndt.forEach(t),Xbo=r(Roe," class method or the "),hq=n(Roe,"A",{href:!0});var qdt=s(hq);zbo=r(qdt,"from_config()"),qdt.forEach(t),Qbo=r(Roe,` class
method.`),Roe.forEach(t),Wbo=i(Ks),cL=n(Ks,"P",{});var PXe=s(cL);Hbo=r(PXe,"This class cannot be instantiated directly using "),Zie=n(PXe,"CODE",{});var jdt=s(Zie);Ubo=r(jdt,"__init__()"),jdt.forEach(t),Jbo=r(PXe," (throws an error)."),PXe.forEach(t),Ybo=i(Ks),nt=n(Ks,"DIV",{class:!0});var q0=s(nt);T(fL.$$.fragment,q0),Kbo=i(q0),ede=n(q0,"P",{});var Ddt=s(ede);Zbo=r(Ddt,"Instantiates one of the base model classes of the library from a configuration."),Ddt.forEach(t),evo=i(q0),qi=n(q0,"P",{});var Poe=s(qi);ovo=r(Poe,`Note:
Loading a model from its configuration file does `),ode=n(Poe,"STRONG",{});var Gdt=s(ode);rvo=r(Gdt,"not"),Gdt.forEach(t),tvo=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pq=n(Poe,"A",{href:!0});var Odt=s(pq);avo=r(Odt,"from_pretrained()"),Odt.forEach(t),nvo=r(Poe," to load the model weights."),Poe.forEach(t),svo=i(q0),T(Rp.$$.fragment,q0),q0.forEach(t),lvo=i(Ks),Je=n(Ks,"DIV",{class:!0});var aa=s(Je);T(mL.$$.fragment,aa),ivo=i(aa),rde=n(aa,"P",{});var Vdt=s(rde);dvo=r(Vdt,"Instantiate one of the base model classes of the library from a pretrained model."),Vdt.forEach(t),cvo=i(aa),Ra=n(aa,"P",{});var j0=s(Ra);fvo=r(j0,"The model class to instantiate is selected based on the "),tde=n(j0,"CODE",{});var Xdt=s(tde);mvo=r(Xdt,"model_type"),Xdt.forEach(t),gvo=r(j0,` property of the config object (either
passed as an argument or loaded from `),ade=n(j0,"CODE",{});var zdt=s(ade);hvo=r(zdt,"pretrained_model_name_or_path"),zdt.forEach(t),pvo=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nde=n(j0,"CODE",{});var Qdt=s(nde);_vo=r(Qdt,"pretrained_model_name_or_path"),Qdt.forEach(t),uvo=r(j0,":"),j0.forEach(t),bvo=i(aa),y=n(aa,"UL",{});var x=s(y);Pp=n(x,"LI",{});var Mye=s(Pp);sde=n(Mye,"STRONG",{});var Wdt=s(sde);vvo=r(Wdt,"albert"),Wdt.forEach(t),Fvo=r(Mye," \u2014 "),_q=n(Mye,"A",{href:!0});var Hdt=s(_q);Tvo=r(Hdt,"AlbertModel"),Hdt.forEach(t),Mvo=r(Mye," (ALBERT model)"),Mye.forEach(t),Evo=i(x),Bp=n(x,"LI",{});var Eye=s(Bp);lde=n(Eye,"STRONG",{});var Udt=s(lde);Cvo=r(Udt,"bart"),Udt.forEach(t),wvo=r(Eye," \u2014 "),uq=n(Eye,"A",{href:!0});var Jdt=s(uq);Avo=r(Jdt,"BartModel"),Jdt.forEach(t),Lvo=r(Eye," (BART model)"),Eye.forEach(t),yvo=i(x),Ip=n(x,"LI",{});var Cye=s(Ip);ide=n(Cye,"STRONG",{});var Ydt=s(ide);xvo=r(Ydt,"beit"),Ydt.forEach(t),$vo=r(Cye," \u2014 "),bq=n(Cye,"A",{href:!0});var Kdt=s(bq);kvo=r(Kdt,"BeitModel"),Kdt.forEach(t),Svo=r(Cye," (BEiT model)"),Cye.forEach(t),Rvo=i(x),Np=n(x,"LI",{});var wye=s(Np);dde=n(wye,"STRONG",{});var Zdt=s(dde);Pvo=r(Zdt,"bert"),Zdt.forEach(t),Bvo=r(wye," \u2014 "),vq=n(wye,"A",{href:!0});var ect=s(vq);Ivo=r(ect,"BertModel"),ect.forEach(t),Nvo=r(wye," (BERT model)"),wye.forEach(t),qvo=i(x),qp=n(x,"LI",{});var Aye=s(qp);cde=n(Aye,"STRONG",{});var oct=s(cde);jvo=r(oct,"bert-generation"),oct.forEach(t),Dvo=r(Aye," \u2014 "),Fq=n(Aye,"A",{href:!0});var rct=s(Fq);Gvo=r(rct,"BertGenerationEncoder"),rct.forEach(t),Ovo=r(Aye," (Bert Generation model)"),Aye.forEach(t),Vvo=i(x),jp=n(x,"LI",{});var Lye=s(jp);fde=n(Lye,"STRONG",{});var tct=s(fde);Xvo=r(tct,"big_bird"),tct.forEach(t),zvo=r(Lye," \u2014 "),Tq=n(Lye,"A",{href:!0});var act=s(Tq);Qvo=r(act,"BigBirdModel"),act.forEach(t),Wvo=r(Lye," (BigBird model)"),Lye.forEach(t),Hvo=i(x),Dp=n(x,"LI",{});var yye=s(Dp);mde=n(yye,"STRONG",{});var nct=s(mde);Uvo=r(nct,"bigbird_pegasus"),nct.forEach(t),Jvo=r(yye," \u2014 "),Mq=n(yye,"A",{href:!0});var sct=s(Mq);Yvo=r(sct,"BigBirdPegasusModel"),sct.forEach(t),Kvo=r(yye," (BigBird-Pegasus model)"),yye.forEach(t),Zvo=i(x),Gp=n(x,"LI",{});var xye=s(Gp);gde=n(xye,"STRONG",{});var lct=s(gde);eFo=r(lct,"blenderbot"),lct.forEach(t),oFo=r(xye," \u2014 "),Eq=n(xye,"A",{href:!0});var ict=s(Eq);rFo=r(ict,"BlenderbotModel"),ict.forEach(t),tFo=r(xye," (Blenderbot model)"),xye.forEach(t),aFo=i(x),Op=n(x,"LI",{});var $ye=s(Op);hde=n($ye,"STRONG",{});var dct=s(hde);nFo=r(dct,"blenderbot-small"),dct.forEach(t),sFo=r($ye," \u2014 "),Cq=n($ye,"A",{href:!0});var cct=s(Cq);lFo=r(cct,"BlenderbotSmallModel"),cct.forEach(t),iFo=r($ye," (BlenderbotSmall model)"),$ye.forEach(t),dFo=i(x),Vp=n(x,"LI",{});var kye=s(Vp);pde=n(kye,"STRONG",{});var fct=s(pde);cFo=r(fct,"bloom"),fct.forEach(t),fFo=r(kye," \u2014 "),wq=n(kye,"A",{href:!0});var mct=s(wq);mFo=r(mct,"BloomModel"),mct.forEach(t),gFo=r(kye," (BLOOM model)"),kye.forEach(t),hFo=i(x),Xp=n(x,"LI",{});var Sye=s(Xp);_de=n(Sye,"STRONG",{});var gct=s(_de);pFo=r(gct,"camembert"),gct.forEach(t),_Fo=r(Sye," \u2014 "),Aq=n(Sye,"A",{href:!0});var hct=s(Aq);uFo=r(hct,"CamembertModel"),hct.forEach(t),bFo=r(Sye," (CamemBERT model)"),Sye.forEach(t),vFo=i(x),zp=n(x,"LI",{});var Rye=s(zp);ude=n(Rye,"STRONG",{});var pct=s(ude);FFo=r(pct,"canine"),pct.forEach(t),TFo=r(Rye," \u2014 "),Lq=n(Rye,"A",{href:!0});var _ct=s(Lq);MFo=r(_ct,"CanineModel"),_ct.forEach(t),EFo=r(Rye," (CANINE model)"),Rye.forEach(t),CFo=i(x),Qp=n(x,"LI",{});var Pye=s(Qp);bde=n(Pye,"STRONG",{});var uct=s(bde);wFo=r(uct,"clip"),uct.forEach(t),AFo=r(Pye," \u2014 "),yq=n(Pye,"A",{href:!0});var bct=s(yq);LFo=r(bct,"CLIPModel"),bct.forEach(t),yFo=r(Pye," (CLIP model)"),Pye.forEach(t),xFo=i(x),Wp=n(x,"LI",{});var Bye=s(Wp);vde=n(Bye,"STRONG",{});var vct=s(vde);$Fo=r(vct,"codegen"),vct.forEach(t),kFo=r(Bye," \u2014 "),xq=n(Bye,"A",{href:!0});var Fct=s(xq);SFo=r(Fct,"CodeGenModel"),Fct.forEach(t),RFo=r(Bye," (CodeGen model)"),Bye.forEach(t),PFo=i(x),Hp=n(x,"LI",{});var Iye=s(Hp);Fde=n(Iye,"STRONG",{});var Tct=s(Fde);BFo=r(Tct,"convbert"),Tct.forEach(t),IFo=r(Iye," \u2014 "),$q=n(Iye,"A",{href:!0});var Mct=s($q);NFo=r(Mct,"ConvBertModel"),Mct.forEach(t),qFo=r(Iye," (ConvBERT model)"),Iye.forEach(t),jFo=i(x),Up=n(x,"LI",{});var Nye=s(Up);Tde=n(Nye,"STRONG",{});var Ect=s(Tde);DFo=r(Ect,"convnext"),Ect.forEach(t),GFo=r(Nye," \u2014 "),kq=n(Nye,"A",{href:!0});var Cct=s(kq);OFo=r(Cct,"ConvNextModel"),Cct.forEach(t),VFo=r(Nye," (ConvNeXT model)"),Nye.forEach(t),XFo=i(x),Jp=n(x,"LI",{});var qye=s(Jp);Mde=n(qye,"STRONG",{});var wct=s(Mde);zFo=r(wct,"ctrl"),wct.forEach(t),QFo=r(qye," \u2014 "),Sq=n(qye,"A",{href:!0});var Act=s(Sq);WFo=r(Act,"CTRLModel"),Act.forEach(t),HFo=r(qye," (CTRL model)"),qye.forEach(t),UFo=i(x),Yp=n(x,"LI",{});var jye=s(Yp);Ede=n(jye,"STRONG",{});var Lct=s(Ede);JFo=r(Lct,"cvt"),Lct.forEach(t),YFo=r(jye," \u2014 "),Rq=n(jye,"A",{href:!0});var yct=s(Rq);KFo=r(yct,"CvtModel"),yct.forEach(t),ZFo=r(jye," (CvT model)"),jye.forEach(t),e6o=i(x),Kp=n(x,"LI",{});var Dye=s(Kp);Cde=n(Dye,"STRONG",{});var xct=s(Cde);o6o=r(xct,"data2vec-audio"),xct.forEach(t),r6o=r(Dye," \u2014 "),Pq=n(Dye,"A",{href:!0});var $ct=s(Pq);t6o=r($ct,"Data2VecAudioModel"),$ct.forEach(t),a6o=r(Dye," (Data2VecAudio model)"),Dye.forEach(t),n6o=i(x),Zp=n(x,"LI",{});var Gye=s(Zp);wde=n(Gye,"STRONG",{});var kct=s(wde);s6o=r(kct,"data2vec-text"),kct.forEach(t),l6o=r(Gye," \u2014 "),Bq=n(Gye,"A",{href:!0});var Sct=s(Bq);i6o=r(Sct,"Data2VecTextModel"),Sct.forEach(t),d6o=r(Gye," (Data2VecText model)"),Gye.forEach(t),c6o=i(x),e_=n(x,"LI",{});var Oye=s(e_);Ade=n(Oye,"STRONG",{});var Rct=s(Ade);f6o=r(Rct,"data2vec-vision"),Rct.forEach(t),m6o=r(Oye," \u2014 "),Iq=n(Oye,"A",{href:!0});var Pct=s(Iq);g6o=r(Pct,"Data2VecVisionModel"),Pct.forEach(t),h6o=r(Oye," (Data2VecVision model)"),Oye.forEach(t),p6o=i(x),o_=n(x,"LI",{});var Vye=s(o_);Lde=n(Vye,"STRONG",{});var Bct=s(Lde);_6o=r(Bct,"deberta"),Bct.forEach(t),u6o=r(Vye," \u2014 "),Nq=n(Vye,"A",{href:!0});var Ict=s(Nq);b6o=r(Ict,"DebertaModel"),Ict.forEach(t),v6o=r(Vye," (DeBERTa model)"),Vye.forEach(t),F6o=i(x),r_=n(x,"LI",{});var Xye=s(r_);yde=n(Xye,"STRONG",{});var Nct=s(yde);T6o=r(Nct,"deberta-v2"),Nct.forEach(t),M6o=r(Xye," \u2014 "),qq=n(Xye,"A",{href:!0});var qct=s(qq);E6o=r(qct,"DebertaV2Model"),qct.forEach(t),C6o=r(Xye," (DeBERTa-v2 model)"),Xye.forEach(t),w6o=i(x),t_=n(x,"LI",{});var zye=s(t_);xde=n(zye,"STRONG",{});var jct=s(xde);A6o=r(jct,"decision_transformer"),jct.forEach(t),L6o=r(zye," \u2014 "),jq=n(zye,"A",{href:!0});var Dct=s(jq);y6o=r(Dct,"DecisionTransformerModel"),Dct.forEach(t),x6o=r(zye," (Decision Transformer model)"),zye.forEach(t),$6o=i(x),a_=n(x,"LI",{});var Qye=s(a_);$de=n(Qye,"STRONG",{});var Gct=s($de);k6o=r(Gct,"deit"),Gct.forEach(t),S6o=r(Qye," \u2014 "),Dq=n(Qye,"A",{href:!0});var Oct=s(Dq);R6o=r(Oct,"DeiTModel"),Oct.forEach(t),P6o=r(Qye," (DeiT model)"),Qye.forEach(t),B6o=i(x),n_=n(x,"LI",{});var Wye=s(n_);kde=n(Wye,"STRONG",{});var Vct=s(kde);I6o=r(Vct,"detr"),Vct.forEach(t),N6o=r(Wye," \u2014 "),Gq=n(Wye,"A",{href:!0});var Xct=s(Gq);q6o=r(Xct,"DetrModel"),Xct.forEach(t),j6o=r(Wye," (DETR model)"),Wye.forEach(t),D6o=i(x),s_=n(x,"LI",{});var Hye=s(s_);Sde=n(Hye,"STRONG",{});var zct=s(Sde);G6o=r(zct,"distilbert"),zct.forEach(t),O6o=r(Hye," \u2014 "),Oq=n(Hye,"A",{href:!0});var Qct=s(Oq);V6o=r(Qct,"DistilBertModel"),Qct.forEach(t),X6o=r(Hye," (DistilBERT model)"),Hye.forEach(t),z6o=i(x),l_=n(x,"LI",{});var Uye=s(l_);Rde=n(Uye,"STRONG",{});var Wct=s(Rde);Q6o=r(Wct,"dpr"),Wct.forEach(t),W6o=r(Uye," \u2014 "),Vq=n(Uye,"A",{href:!0});var Hct=s(Vq);H6o=r(Hct,"DPRQuestionEncoder"),Hct.forEach(t),U6o=r(Uye," (DPR model)"),Uye.forEach(t),J6o=i(x),i_=n(x,"LI",{});var Jye=s(i_);Pde=n(Jye,"STRONG",{});var Uct=s(Pde);Y6o=r(Uct,"dpt"),Uct.forEach(t),K6o=r(Jye," \u2014 "),Xq=n(Jye,"A",{href:!0});var Jct=s(Xq);Z6o=r(Jct,"DPTModel"),Jct.forEach(t),eTo=r(Jye," (DPT model)"),Jye.forEach(t),oTo=i(x),d_=n(x,"LI",{});var Yye=s(d_);Bde=n(Yye,"STRONG",{});var Yct=s(Bde);rTo=r(Yct,"electra"),Yct.forEach(t),tTo=r(Yye," \u2014 "),zq=n(Yye,"A",{href:!0});var Kct=s(zq);aTo=r(Kct,"ElectraModel"),Kct.forEach(t),nTo=r(Yye," (ELECTRA model)"),Yye.forEach(t),sTo=i(x),c_=n(x,"LI",{});var Kye=s(c_);Ide=n(Kye,"STRONG",{});var Zct=s(Ide);lTo=r(Zct,"flaubert"),Zct.forEach(t),iTo=r(Kye," \u2014 "),Qq=n(Kye,"A",{href:!0});var eft=s(Qq);dTo=r(eft,"FlaubertModel"),eft.forEach(t),cTo=r(Kye," (FlauBERT model)"),Kye.forEach(t),fTo=i(x),f_=n(x,"LI",{});var Zye=s(f_);Nde=n(Zye,"STRONG",{});var oft=s(Nde);mTo=r(oft,"flava"),oft.forEach(t),gTo=r(Zye," \u2014 "),Wq=n(Zye,"A",{href:!0});var rft=s(Wq);hTo=r(rft,"FlavaModel"),rft.forEach(t),pTo=r(Zye," (FLAVA model)"),Zye.forEach(t),_To=i(x),m_=n(x,"LI",{});var e9e=s(m_);qde=n(e9e,"STRONG",{});var tft=s(qde);uTo=r(tft,"fnet"),tft.forEach(t),bTo=r(e9e," \u2014 "),Hq=n(e9e,"A",{href:!0});var aft=s(Hq);vTo=r(aft,"FNetModel"),aft.forEach(t),FTo=r(e9e," (FNet model)"),e9e.forEach(t),TTo=i(x),g_=n(x,"LI",{});var o9e=s(g_);jde=n(o9e,"STRONG",{});var nft=s(jde);MTo=r(nft,"fsmt"),nft.forEach(t),ETo=r(o9e," \u2014 "),Uq=n(o9e,"A",{href:!0});var sft=s(Uq);CTo=r(sft,"FSMTModel"),sft.forEach(t),wTo=r(o9e," (FairSeq Machine-Translation model)"),o9e.forEach(t),ATo=i(x),Xs=n(x,"LI",{});var sS=s(Xs);Dde=n(sS,"STRONG",{});var lft=s(Dde);LTo=r(lft,"funnel"),lft.forEach(t),yTo=r(sS," \u2014 "),Jq=n(sS,"A",{href:!0});var ift=s(Jq);xTo=r(ift,"FunnelModel"),ift.forEach(t),$To=r(sS," or "),Yq=n(sS,"A",{href:!0});var dft=s(Yq);kTo=r(dft,"FunnelBaseModel"),dft.forEach(t),STo=r(sS," (Funnel Transformer model)"),sS.forEach(t),RTo=i(x),h_=n(x,"LI",{});var r9e=s(h_);Gde=n(r9e,"STRONG",{});var cft=s(Gde);PTo=r(cft,"glpn"),cft.forEach(t),BTo=r(r9e," \u2014 "),Kq=n(r9e,"A",{href:!0});var fft=s(Kq);ITo=r(fft,"GLPNModel"),fft.forEach(t),NTo=r(r9e," (GLPN model)"),r9e.forEach(t),qTo=i(x),p_=n(x,"LI",{});var t9e=s(p_);Ode=n(t9e,"STRONG",{});var mft=s(Ode);jTo=r(mft,"gpt2"),mft.forEach(t),DTo=r(t9e," \u2014 "),Zq=n(t9e,"A",{href:!0});var gft=s(Zq);GTo=r(gft,"GPT2Model"),gft.forEach(t),OTo=r(t9e," (OpenAI GPT-2 model)"),t9e.forEach(t),VTo=i(x),__=n(x,"LI",{});var a9e=s(__);Vde=n(a9e,"STRONG",{});var hft=s(Vde);XTo=r(hft,"gpt_neo"),hft.forEach(t),zTo=r(a9e," \u2014 "),ej=n(a9e,"A",{href:!0});var pft=s(ej);QTo=r(pft,"GPTNeoModel"),pft.forEach(t),WTo=r(a9e," (GPT Neo model)"),a9e.forEach(t),HTo=i(x),u_=n(x,"LI",{});var n9e=s(u_);Xde=n(n9e,"STRONG",{});var _ft=s(Xde);UTo=r(_ft,"gpt_neox"),_ft.forEach(t),JTo=r(n9e," \u2014 "),oj=n(n9e,"A",{href:!0});var uft=s(oj);YTo=r(uft,"GPTNeoXModel"),uft.forEach(t),KTo=r(n9e," (GPT NeoX model)"),n9e.forEach(t),ZTo=i(x),b_=n(x,"LI",{});var s9e=s(b_);zde=n(s9e,"STRONG",{});var bft=s(zde);e7o=r(bft,"gptj"),bft.forEach(t),o7o=r(s9e," \u2014 "),rj=n(s9e,"A",{href:!0});var vft=s(rj);r7o=r(vft,"GPTJModel"),vft.forEach(t),t7o=r(s9e," (GPT-J model)"),s9e.forEach(t),a7o=i(x),v_=n(x,"LI",{});var l9e=s(v_);Qde=n(l9e,"STRONG",{});var Fft=s(Qde);n7o=r(Fft,"hubert"),Fft.forEach(t),s7o=r(l9e," \u2014 "),tj=n(l9e,"A",{href:!0});var Tft=s(tj);l7o=r(Tft,"HubertModel"),Tft.forEach(t),i7o=r(l9e," (Hubert model)"),l9e.forEach(t),d7o=i(x),F_=n(x,"LI",{});var i9e=s(F_);Wde=n(i9e,"STRONG",{});var Mft=s(Wde);c7o=r(Mft,"ibert"),Mft.forEach(t),f7o=r(i9e," \u2014 "),aj=n(i9e,"A",{href:!0});var Eft=s(aj);m7o=r(Eft,"IBertModel"),Eft.forEach(t),g7o=r(i9e," (I-BERT model)"),i9e.forEach(t),h7o=i(x),T_=n(x,"LI",{});var d9e=s(T_);Hde=n(d9e,"STRONG",{});var Cft=s(Hde);p7o=r(Cft,"imagegpt"),Cft.forEach(t),_7o=r(d9e," \u2014 "),nj=n(d9e,"A",{href:!0});var wft=s(nj);u7o=r(wft,"ImageGPTModel"),wft.forEach(t),b7o=r(d9e," (ImageGPT model)"),d9e.forEach(t),v7o=i(x),M_=n(x,"LI",{});var c9e=s(M_);Ude=n(c9e,"STRONG",{});var Aft=s(Ude);F7o=r(Aft,"jukebox"),Aft.forEach(t),T7o=r(c9e," \u2014 "),Jde=n(c9e,"CODE",{});var Lft=s(Jde);M7o=r(Lft,"JukeboxModel"),Lft.forEach(t),E7o=r(c9e," (Jukebox model)"),c9e.forEach(t),C7o=i(x),E_=n(x,"LI",{});var f9e=s(E_);Yde=n(f9e,"STRONG",{});var yft=s(Yde);w7o=r(yft,"layoutlm"),yft.forEach(t),A7o=r(f9e," \u2014 "),sj=n(f9e,"A",{href:!0});var xft=s(sj);L7o=r(xft,"LayoutLMModel"),xft.forEach(t),y7o=r(f9e," (LayoutLM model)"),f9e.forEach(t),x7o=i(x),C_=n(x,"LI",{});var m9e=s(C_);Kde=n(m9e,"STRONG",{});var $ft=s(Kde);$7o=r($ft,"layoutlmv2"),$ft.forEach(t),k7o=r(m9e," \u2014 "),lj=n(m9e,"A",{href:!0});var kft=s(lj);S7o=r(kft,"LayoutLMv2Model"),kft.forEach(t),R7o=r(m9e," (LayoutLMv2 model)"),m9e.forEach(t),P7o=i(x),w_=n(x,"LI",{});var g9e=s(w_);Zde=n(g9e,"STRONG",{});var Sft=s(Zde);B7o=r(Sft,"layoutlmv3"),Sft.forEach(t),I7o=r(g9e," \u2014 "),ij=n(g9e,"A",{href:!0});var Rft=s(ij);N7o=r(Rft,"LayoutLMv3Model"),Rft.forEach(t),q7o=r(g9e," (LayoutLMv3 model)"),g9e.forEach(t),j7o=i(x),A_=n(x,"LI",{});var h9e=s(A_);ece=n(h9e,"STRONG",{});var Pft=s(ece);D7o=r(Pft,"led"),Pft.forEach(t),G7o=r(h9e," \u2014 "),dj=n(h9e,"A",{href:!0});var Bft=s(dj);O7o=r(Bft,"LEDModel"),Bft.forEach(t),V7o=r(h9e," (LED model)"),h9e.forEach(t),X7o=i(x),L_=n(x,"LI",{});var p9e=s(L_);oce=n(p9e,"STRONG",{});var Ift=s(oce);z7o=r(Ift,"levit"),Ift.forEach(t),Q7o=r(p9e," \u2014 "),cj=n(p9e,"A",{href:!0});var Nft=s(cj);W7o=r(Nft,"LevitModel"),Nft.forEach(t),H7o=r(p9e," (LeViT model)"),p9e.forEach(t),U7o=i(x),y_=n(x,"LI",{});var _9e=s(y_);rce=n(_9e,"STRONG",{});var qft=s(rce);J7o=r(qft,"longformer"),qft.forEach(t),Y7o=r(_9e," \u2014 "),fj=n(_9e,"A",{href:!0});var jft=s(fj);K7o=r(jft,"LongformerModel"),jft.forEach(t),Z7o=r(_9e," (Longformer model)"),_9e.forEach(t),e8o=i(x),x_=n(x,"LI",{});var u9e=s(x_);tce=n(u9e,"STRONG",{});var Dft=s(tce);o8o=r(Dft,"longt5"),Dft.forEach(t),r8o=r(u9e," \u2014 "),mj=n(u9e,"A",{href:!0});var Gft=s(mj);t8o=r(Gft,"LongT5Model"),Gft.forEach(t),a8o=r(u9e," (LongT5 model)"),u9e.forEach(t),n8o=i(x),$_=n(x,"LI",{});var b9e=s($_);ace=n(b9e,"STRONG",{});var Oft=s(ace);s8o=r(Oft,"luke"),Oft.forEach(t),l8o=r(b9e," \u2014 "),gj=n(b9e,"A",{href:!0});var Vft=s(gj);i8o=r(Vft,"LukeModel"),Vft.forEach(t),d8o=r(b9e," (LUKE model)"),b9e.forEach(t),c8o=i(x),k_=n(x,"LI",{});var v9e=s(k_);nce=n(v9e,"STRONG",{});var Xft=s(nce);f8o=r(Xft,"lxmert"),Xft.forEach(t),m8o=r(v9e," \u2014 "),hj=n(v9e,"A",{href:!0});var zft=s(hj);g8o=r(zft,"LxmertModel"),zft.forEach(t),h8o=r(v9e," (LXMERT model)"),v9e.forEach(t),p8o=i(x),S_=n(x,"LI",{});var F9e=s(S_);sce=n(F9e,"STRONG",{});var Qft=s(sce);_8o=r(Qft,"m2m_100"),Qft.forEach(t),u8o=r(F9e," \u2014 "),pj=n(F9e,"A",{href:!0});var Wft=s(pj);b8o=r(Wft,"M2M100Model"),Wft.forEach(t),v8o=r(F9e," (M2M100 model)"),F9e.forEach(t),F8o=i(x),R_=n(x,"LI",{});var T9e=s(R_);lce=n(T9e,"STRONG",{});var Hft=s(lce);T8o=r(Hft,"marian"),Hft.forEach(t),M8o=r(T9e," \u2014 "),_j=n(T9e,"A",{href:!0});var Uft=s(_j);E8o=r(Uft,"MarianModel"),Uft.forEach(t),C8o=r(T9e," (Marian model)"),T9e.forEach(t),w8o=i(x),P_=n(x,"LI",{});var M9e=s(P_);ice=n(M9e,"STRONG",{});var Jft=s(ice);A8o=r(Jft,"maskformer"),Jft.forEach(t),L8o=r(M9e," \u2014 "),uj=n(M9e,"A",{href:!0});var Yft=s(uj);y8o=r(Yft,"MaskFormerModel"),Yft.forEach(t),x8o=r(M9e," (MaskFormer model)"),M9e.forEach(t),$8o=i(x),B_=n(x,"LI",{});var E9e=s(B_);dce=n(E9e,"STRONG",{});var Kft=s(dce);k8o=r(Kft,"mbart"),Kft.forEach(t),S8o=r(E9e," \u2014 "),bj=n(E9e,"A",{href:!0});var Zft=s(bj);R8o=r(Zft,"MBartModel"),Zft.forEach(t),P8o=r(E9e," (mBART model)"),E9e.forEach(t),B8o=i(x),I_=n(x,"LI",{});var C9e=s(I_);cce=n(C9e,"STRONG",{});var emt=s(cce);I8o=r(emt,"mctct"),emt.forEach(t),N8o=r(C9e," \u2014 "),vj=n(C9e,"A",{href:!0});var omt=s(vj);q8o=r(omt,"MCTCTModel"),omt.forEach(t),j8o=r(C9e," (M-CTC-T model)"),C9e.forEach(t),D8o=i(x),N_=n(x,"LI",{});var w9e=s(N_);fce=n(w9e,"STRONG",{});var rmt=s(fce);G8o=r(rmt,"megatron-bert"),rmt.forEach(t),O8o=r(w9e," \u2014 "),Fj=n(w9e,"A",{href:!0});var tmt=s(Fj);V8o=r(tmt,"MegatronBertModel"),tmt.forEach(t),X8o=r(w9e," (Megatron-BERT model)"),w9e.forEach(t),z8o=i(x),q_=n(x,"LI",{});var A9e=s(q_);mce=n(A9e,"STRONG",{});var amt=s(mce);Q8o=r(amt,"mobilebert"),amt.forEach(t),W8o=r(A9e," \u2014 "),Tj=n(A9e,"A",{href:!0});var nmt=s(Tj);H8o=r(nmt,"MobileBertModel"),nmt.forEach(t),U8o=r(A9e," (MobileBERT model)"),A9e.forEach(t),J8o=i(x),j_=n(x,"LI",{});var L9e=s(j_);gce=n(L9e,"STRONG",{});var smt=s(gce);Y8o=r(smt,"mpnet"),smt.forEach(t),K8o=r(L9e," \u2014 "),Mj=n(L9e,"A",{href:!0});var lmt=s(Mj);Z8o=r(lmt,"MPNetModel"),lmt.forEach(t),eMo=r(L9e," (MPNet model)"),L9e.forEach(t),oMo=i(x),D_=n(x,"LI",{});var y9e=s(D_);hce=n(y9e,"STRONG",{});var imt=s(hce);rMo=r(imt,"mt5"),imt.forEach(t),tMo=r(y9e," \u2014 "),Ej=n(y9e,"A",{href:!0});var dmt=s(Ej);aMo=r(dmt,"MT5Model"),dmt.forEach(t),nMo=r(y9e," (MT5 model)"),y9e.forEach(t),sMo=i(x),G_=n(x,"LI",{});var x9e=s(G_);pce=n(x9e,"STRONG",{});var cmt=s(pce);lMo=r(cmt,"nezha"),cmt.forEach(t),iMo=r(x9e," \u2014 "),Cj=n(x9e,"A",{href:!0});var fmt=s(Cj);dMo=r(fmt,"NezhaModel"),fmt.forEach(t),cMo=r(x9e," (Nezha model)"),x9e.forEach(t),fMo=i(x),O_=n(x,"LI",{});var $9e=s(O_);_ce=n($9e,"STRONG",{});var mmt=s(_ce);mMo=r(mmt,"nystromformer"),mmt.forEach(t),gMo=r($9e," \u2014 "),wj=n($9e,"A",{href:!0});var gmt=s(wj);hMo=r(gmt,"NystromformerModel"),gmt.forEach(t),pMo=r($9e," (Nystr\xF6mformer model)"),$9e.forEach(t),_Mo=i(x),V_=n(x,"LI",{});var k9e=s(V_);uce=n(k9e,"STRONG",{});var hmt=s(uce);uMo=r(hmt,"openai-gpt"),hmt.forEach(t),bMo=r(k9e," \u2014 "),Aj=n(k9e,"A",{href:!0});var pmt=s(Aj);vMo=r(pmt,"OpenAIGPTModel"),pmt.forEach(t),FMo=r(k9e," (OpenAI GPT model)"),k9e.forEach(t),TMo=i(x),X_=n(x,"LI",{});var S9e=s(X_);bce=n(S9e,"STRONG",{});var _mt=s(bce);MMo=r(_mt,"opt"),_mt.forEach(t),EMo=r(S9e," \u2014 "),Lj=n(S9e,"A",{href:!0});var umt=s(Lj);CMo=r(umt,"OPTModel"),umt.forEach(t),wMo=r(S9e," (OPT model)"),S9e.forEach(t),AMo=i(x),z_=n(x,"LI",{});var R9e=s(z_);vce=n(R9e,"STRONG",{});var bmt=s(vce);LMo=r(bmt,"pegasus"),bmt.forEach(t),yMo=r(R9e," \u2014 "),yj=n(R9e,"A",{href:!0});var vmt=s(yj);xMo=r(vmt,"PegasusModel"),vmt.forEach(t),$Mo=r(R9e," (Pegasus model)"),R9e.forEach(t),kMo=i(x),Q_=n(x,"LI",{});var P9e=s(Q_);Fce=n(P9e,"STRONG",{});var Fmt=s(Fce);SMo=r(Fmt,"perceiver"),Fmt.forEach(t),RMo=r(P9e," \u2014 "),xj=n(P9e,"A",{href:!0});var Tmt=s(xj);PMo=r(Tmt,"PerceiverModel"),Tmt.forEach(t),BMo=r(P9e," (Perceiver model)"),P9e.forEach(t),IMo=i(x),W_=n(x,"LI",{});var B9e=s(W_);Tce=n(B9e,"STRONG",{});var Mmt=s(Tce);NMo=r(Mmt,"plbart"),Mmt.forEach(t),qMo=r(B9e," \u2014 "),$j=n(B9e,"A",{href:!0});var Emt=s($j);jMo=r(Emt,"PLBartModel"),Emt.forEach(t),DMo=r(B9e," (PLBart model)"),B9e.forEach(t),GMo=i(x),H_=n(x,"LI",{});var I9e=s(H_);Mce=n(I9e,"STRONG",{});var Cmt=s(Mce);OMo=r(Cmt,"poolformer"),Cmt.forEach(t),VMo=r(I9e," \u2014 "),kj=n(I9e,"A",{href:!0});var wmt=s(kj);XMo=r(wmt,"PoolFormerModel"),wmt.forEach(t),zMo=r(I9e," (PoolFormer model)"),I9e.forEach(t),QMo=i(x),U_=n(x,"LI",{});var N9e=s(U_);Ece=n(N9e,"STRONG",{});var Amt=s(Ece);WMo=r(Amt,"prophetnet"),Amt.forEach(t),HMo=r(N9e," \u2014 "),Sj=n(N9e,"A",{href:!0});var Lmt=s(Sj);UMo=r(Lmt,"ProphetNetModel"),Lmt.forEach(t),JMo=r(N9e," (ProphetNet model)"),N9e.forEach(t),YMo=i(x),J_=n(x,"LI",{});var q9e=s(J_);Cce=n(q9e,"STRONG",{});var ymt=s(Cce);KMo=r(ymt,"qdqbert"),ymt.forEach(t),ZMo=r(q9e," \u2014 "),Rj=n(q9e,"A",{href:!0});var xmt=s(Rj);eEo=r(xmt,"QDQBertModel"),xmt.forEach(t),oEo=r(q9e," (QDQBert model)"),q9e.forEach(t),rEo=i(x),Y_=n(x,"LI",{});var j9e=s(Y_);wce=n(j9e,"STRONG",{});var $mt=s(wce);tEo=r($mt,"reformer"),$mt.forEach(t),aEo=r(j9e," \u2014 "),Pj=n(j9e,"A",{href:!0});var kmt=s(Pj);nEo=r(kmt,"ReformerModel"),kmt.forEach(t),sEo=r(j9e," (Reformer model)"),j9e.forEach(t),lEo=i(x),K_=n(x,"LI",{});var D9e=s(K_);Ace=n(D9e,"STRONG",{});var Smt=s(Ace);iEo=r(Smt,"regnet"),Smt.forEach(t),dEo=r(D9e," \u2014 "),Bj=n(D9e,"A",{href:!0});var Rmt=s(Bj);cEo=r(Rmt,"RegNetModel"),Rmt.forEach(t),fEo=r(D9e," (RegNet model)"),D9e.forEach(t),mEo=i(x),Z_=n(x,"LI",{});var G9e=s(Z_);Lce=n(G9e,"STRONG",{});var Pmt=s(Lce);gEo=r(Pmt,"rembert"),Pmt.forEach(t),hEo=r(G9e," \u2014 "),Ij=n(G9e,"A",{href:!0});var Bmt=s(Ij);pEo=r(Bmt,"RemBertModel"),Bmt.forEach(t),_Eo=r(G9e," (RemBERT model)"),G9e.forEach(t),uEo=i(x),eu=n(x,"LI",{});var O9e=s(eu);yce=n(O9e,"STRONG",{});var Imt=s(yce);bEo=r(Imt,"resnet"),Imt.forEach(t),vEo=r(O9e," \u2014 "),Nj=n(O9e,"A",{href:!0});var Nmt=s(Nj);FEo=r(Nmt,"ResNetModel"),Nmt.forEach(t),TEo=r(O9e," (ResNet model)"),O9e.forEach(t),MEo=i(x),ou=n(x,"LI",{});var V9e=s(ou);xce=n(V9e,"STRONG",{});var qmt=s(xce);EEo=r(qmt,"retribert"),qmt.forEach(t),CEo=r(V9e," \u2014 "),qj=n(V9e,"A",{href:!0});var jmt=s(qj);wEo=r(jmt,"RetriBertModel"),jmt.forEach(t),AEo=r(V9e," (RetriBERT model)"),V9e.forEach(t),LEo=i(x),ru=n(x,"LI",{});var X9e=s(ru);$ce=n(X9e,"STRONG",{});var Dmt=s($ce);yEo=r(Dmt,"roberta"),Dmt.forEach(t),xEo=r(X9e," \u2014 "),jj=n(X9e,"A",{href:!0});var Gmt=s(jj);$Eo=r(Gmt,"RobertaModel"),Gmt.forEach(t),kEo=r(X9e," (RoBERTa model)"),X9e.forEach(t),SEo=i(x),tu=n(x,"LI",{});var z9e=s(tu);kce=n(z9e,"STRONG",{});var Omt=s(kce);REo=r(Omt,"roformer"),Omt.forEach(t),PEo=r(z9e," \u2014 "),Dj=n(z9e,"A",{href:!0});var Vmt=s(Dj);BEo=r(Vmt,"RoFormerModel"),Vmt.forEach(t),IEo=r(z9e," (RoFormer model)"),z9e.forEach(t),NEo=i(x),au=n(x,"LI",{});var Q9e=s(au);Sce=n(Q9e,"STRONG",{});var Xmt=s(Sce);qEo=r(Xmt,"segformer"),Xmt.forEach(t),jEo=r(Q9e," \u2014 "),Gj=n(Q9e,"A",{href:!0});var zmt=s(Gj);DEo=r(zmt,"SegformerModel"),zmt.forEach(t),GEo=r(Q9e," (SegFormer model)"),Q9e.forEach(t),OEo=i(x),nu=n(x,"LI",{});var W9e=s(nu);Rce=n(W9e,"STRONG",{});var Qmt=s(Rce);VEo=r(Qmt,"sew"),Qmt.forEach(t),XEo=r(W9e," \u2014 "),Oj=n(W9e,"A",{href:!0});var Wmt=s(Oj);zEo=r(Wmt,"SEWModel"),Wmt.forEach(t),QEo=r(W9e," (SEW model)"),W9e.forEach(t),WEo=i(x),su=n(x,"LI",{});var H9e=s(su);Pce=n(H9e,"STRONG",{});var Hmt=s(Pce);HEo=r(Hmt,"sew-d"),Hmt.forEach(t),UEo=r(H9e," \u2014 "),Vj=n(H9e,"A",{href:!0});var Umt=s(Vj);JEo=r(Umt,"SEWDModel"),Umt.forEach(t),YEo=r(H9e," (SEW-D model)"),H9e.forEach(t),KEo=i(x),lu=n(x,"LI",{});var U9e=s(lu);Bce=n(U9e,"STRONG",{});var Jmt=s(Bce);ZEo=r(Jmt,"speech_to_text"),Jmt.forEach(t),e4o=r(U9e," \u2014 "),Xj=n(U9e,"A",{href:!0});var Ymt=s(Xj);o4o=r(Ymt,"Speech2TextModel"),Ymt.forEach(t),r4o=r(U9e," (Speech2Text model)"),U9e.forEach(t),t4o=i(x),iu=n(x,"LI",{});var J9e=s(iu);Ice=n(J9e,"STRONG",{});var Kmt=s(Ice);a4o=r(Kmt,"splinter"),Kmt.forEach(t),n4o=r(J9e," \u2014 "),zj=n(J9e,"A",{href:!0});var Zmt=s(zj);s4o=r(Zmt,"SplinterModel"),Zmt.forEach(t),l4o=r(J9e," (Splinter model)"),J9e.forEach(t),i4o=i(x),du=n(x,"LI",{});var Y9e=s(du);Nce=n(Y9e,"STRONG",{});var egt=s(Nce);d4o=r(egt,"squeezebert"),egt.forEach(t),c4o=r(Y9e," \u2014 "),Qj=n(Y9e,"A",{href:!0});var ogt=s(Qj);f4o=r(ogt,"SqueezeBertModel"),ogt.forEach(t),m4o=r(Y9e," (SqueezeBERT model)"),Y9e.forEach(t),g4o=i(x),cu=n(x,"LI",{});var K9e=s(cu);qce=n(K9e,"STRONG",{});var rgt=s(qce);h4o=r(rgt,"swin"),rgt.forEach(t),p4o=r(K9e," \u2014 "),Wj=n(K9e,"A",{href:!0});var tgt=s(Wj);_4o=r(tgt,"SwinModel"),tgt.forEach(t),u4o=r(K9e," (Swin Transformer model)"),K9e.forEach(t),b4o=i(x),fu=n(x,"LI",{});var Z9e=s(fu);jce=n(Z9e,"STRONG",{});var agt=s(jce);v4o=r(agt,"t5"),agt.forEach(t),F4o=r(Z9e," \u2014 "),Hj=n(Z9e,"A",{href:!0});var ngt=s(Hj);T4o=r(ngt,"T5Model"),ngt.forEach(t),M4o=r(Z9e," (T5 model)"),Z9e.forEach(t),E4o=i(x),mu=n(x,"LI",{});var exe=s(mu);Dce=n(exe,"STRONG",{});var sgt=s(Dce);C4o=r(sgt,"tapas"),sgt.forEach(t),w4o=r(exe," \u2014 "),Uj=n(exe,"A",{href:!0});var lgt=s(Uj);A4o=r(lgt,"TapasModel"),lgt.forEach(t),L4o=r(exe," (TAPAS model)"),exe.forEach(t),y4o=i(x),gu=n(x,"LI",{});var oxe=s(gu);Gce=n(oxe,"STRONG",{});var igt=s(Gce);x4o=r(igt,"trajectory_transformer"),igt.forEach(t),$4o=r(oxe," \u2014 "),Jj=n(oxe,"A",{href:!0});var dgt=s(Jj);k4o=r(dgt,"TrajectoryTransformerModel"),dgt.forEach(t),S4o=r(oxe," (Trajectory Transformer model)"),oxe.forEach(t),R4o=i(x),hu=n(x,"LI",{});var rxe=s(hu);Oce=n(rxe,"STRONG",{});var cgt=s(Oce);P4o=r(cgt,"transfo-xl"),cgt.forEach(t),B4o=r(rxe," \u2014 "),Yj=n(rxe,"A",{href:!0});var fgt=s(Yj);I4o=r(fgt,"TransfoXLModel"),fgt.forEach(t),N4o=r(rxe," (Transformer-XL model)"),rxe.forEach(t),q4o=i(x),pu=n(x,"LI",{});var txe=s(pu);Vce=n(txe,"STRONG",{});var mgt=s(Vce);j4o=r(mgt,"unispeech"),mgt.forEach(t),D4o=r(txe," \u2014 "),Kj=n(txe,"A",{href:!0});var ggt=s(Kj);G4o=r(ggt,"UniSpeechModel"),ggt.forEach(t),O4o=r(txe," (UniSpeech model)"),txe.forEach(t),V4o=i(x),_u=n(x,"LI",{});var axe=s(_u);Xce=n(axe,"STRONG",{});var hgt=s(Xce);X4o=r(hgt,"unispeech-sat"),hgt.forEach(t),z4o=r(axe," \u2014 "),Zj=n(axe,"A",{href:!0});var pgt=s(Zj);Q4o=r(pgt,"UniSpeechSatModel"),pgt.forEach(t),W4o=r(axe," (UniSpeechSat model)"),axe.forEach(t),H4o=i(x),uu=n(x,"LI",{});var nxe=s(uu);zce=n(nxe,"STRONG",{});var _gt=s(zce);U4o=r(_gt,"van"),_gt.forEach(t),J4o=r(nxe," \u2014 "),eD=n(nxe,"A",{href:!0});var ugt=s(eD);Y4o=r(ugt,"VanModel"),ugt.forEach(t),K4o=r(nxe," (VAN model)"),nxe.forEach(t),Z4o=i(x),bu=n(x,"LI",{});var sxe=s(bu);Qce=n(sxe,"STRONG",{});var bgt=s(Qce);eCo=r(bgt,"vilt"),bgt.forEach(t),oCo=r(sxe," \u2014 "),oD=n(sxe,"A",{href:!0});var vgt=s(oD);rCo=r(vgt,"ViltModel"),vgt.forEach(t),tCo=r(sxe," (ViLT model)"),sxe.forEach(t),aCo=i(x),vu=n(x,"LI",{});var lxe=s(vu);Wce=n(lxe,"STRONG",{});var Fgt=s(Wce);nCo=r(Fgt,"vision-text-dual-encoder"),Fgt.forEach(t),sCo=r(lxe," \u2014 "),rD=n(lxe,"A",{href:!0});var Tgt=s(rD);lCo=r(Tgt,"VisionTextDualEncoderModel"),Tgt.forEach(t),iCo=r(lxe," (VisionTextDualEncoder model)"),lxe.forEach(t),dCo=i(x),Fu=n(x,"LI",{});var ixe=s(Fu);Hce=n(ixe,"STRONG",{});var Mgt=s(Hce);cCo=r(Mgt,"visual_bert"),Mgt.forEach(t),fCo=r(ixe," \u2014 "),tD=n(ixe,"A",{href:!0});var Egt=s(tD);mCo=r(Egt,"VisualBertModel"),Egt.forEach(t),gCo=r(ixe," (VisualBERT model)"),ixe.forEach(t),hCo=i(x),Tu=n(x,"LI",{});var dxe=s(Tu);Uce=n(dxe,"STRONG",{});var Cgt=s(Uce);pCo=r(Cgt,"vit"),Cgt.forEach(t),_Co=r(dxe," \u2014 "),aD=n(dxe,"A",{href:!0});var wgt=s(aD);uCo=r(wgt,"ViTModel"),wgt.forEach(t),bCo=r(dxe," (ViT model)"),dxe.forEach(t),vCo=i(x),Mu=n(x,"LI",{});var cxe=s(Mu);Jce=n(cxe,"STRONG",{});var Agt=s(Jce);FCo=r(Agt,"vit_mae"),Agt.forEach(t),TCo=r(cxe," \u2014 "),nD=n(cxe,"A",{href:!0});var Lgt=s(nD);MCo=r(Lgt,"ViTMAEModel"),Lgt.forEach(t),ECo=r(cxe," (ViTMAE model)"),cxe.forEach(t),CCo=i(x),Eu=n(x,"LI",{});var fxe=s(Eu);Yce=n(fxe,"STRONG",{});var ygt=s(Yce);wCo=r(ygt,"wav2vec2"),ygt.forEach(t),ACo=r(fxe," \u2014 "),sD=n(fxe,"A",{href:!0});var xgt=s(sD);LCo=r(xgt,"Wav2Vec2Model"),xgt.forEach(t),yCo=r(fxe," (Wav2Vec2 model)"),fxe.forEach(t),xCo=i(x),Cu=n(x,"LI",{});var mxe=s(Cu);Kce=n(mxe,"STRONG",{});var $gt=s(Kce);$Co=r($gt,"wav2vec2-conformer"),$gt.forEach(t),kCo=r(mxe," \u2014 "),lD=n(mxe,"A",{href:!0});var kgt=s(lD);SCo=r(kgt,"Wav2Vec2ConformerModel"),kgt.forEach(t),RCo=r(mxe," (Wav2Vec2-Conformer model)"),mxe.forEach(t),PCo=i(x),wu=n(x,"LI",{});var gxe=s(wu);Zce=n(gxe,"STRONG",{});var Sgt=s(Zce);BCo=r(Sgt,"wavlm"),Sgt.forEach(t),ICo=r(gxe," \u2014 "),iD=n(gxe,"A",{href:!0});var Rgt=s(iD);NCo=r(Rgt,"WavLMModel"),Rgt.forEach(t),qCo=r(gxe," (WavLM model)"),gxe.forEach(t),jCo=i(x),Au=n(x,"LI",{});var hxe=s(Au);efe=n(hxe,"STRONG",{});var Pgt=s(efe);DCo=r(Pgt,"xglm"),Pgt.forEach(t),GCo=r(hxe," \u2014 "),dD=n(hxe,"A",{href:!0});var Bgt=s(dD);OCo=r(Bgt,"XGLMModel"),Bgt.forEach(t),VCo=r(hxe," (XGLM model)"),hxe.forEach(t),XCo=i(x),Lu=n(x,"LI",{});var pxe=s(Lu);ofe=n(pxe,"STRONG",{});var Igt=s(ofe);zCo=r(Igt,"xlm"),Igt.forEach(t),QCo=r(pxe," \u2014 "),cD=n(pxe,"A",{href:!0});var Ngt=s(cD);WCo=r(Ngt,"XLMModel"),Ngt.forEach(t),HCo=r(pxe," (XLM model)"),pxe.forEach(t),UCo=i(x),yu=n(x,"LI",{});var _xe=s(yu);rfe=n(_xe,"STRONG",{});var qgt=s(rfe);JCo=r(qgt,"xlm-prophetnet"),qgt.forEach(t),YCo=r(_xe," \u2014 "),fD=n(_xe,"A",{href:!0});var jgt=s(fD);KCo=r(jgt,"XLMProphetNetModel"),jgt.forEach(t),ZCo=r(_xe," (XLM-ProphetNet model)"),_xe.forEach(t),e5o=i(x),xu=n(x,"LI",{});var uxe=s(xu);tfe=n(uxe,"STRONG",{});var Dgt=s(tfe);o5o=r(Dgt,"xlm-roberta"),Dgt.forEach(t),r5o=r(uxe," \u2014 "),mD=n(uxe,"A",{href:!0});var Ggt=s(mD);t5o=r(Ggt,"XLMRobertaModel"),Ggt.forEach(t),a5o=r(uxe," (XLM-RoBERTa model)"),uxe.forEach(t),n5o=i(x),$u=n(x,"LI",{});var bxe=s($u);afe=n(bxe,"STRONG",{});var Ogt=s(afe);s5o=r(Ogt,"xlm-roberta-xl"),Ogt.forEach(t),l5o=r(bxe," \u2014 "),gD=n(bxe,"A",{href:!0});var Vgt=s(gD);i5o=r(Vgt,"XLMRobertaXLModel"),Vgt.forEach(t),d5o=r(bxe," (XLM-RoBERTa-XL model)"),bxe.forEach(t),c5o=i(x),ku=n(x,"LI",{});var vxe=s(ku);nfe=n(vxe,"STRONG",{});var Xgt=s(nfe);f5o=r(Xgt,"xlnet"),Xgt.forEach(t),m5o=r(vxe," \u2014 "),hD=n(vxe,"A",{href:!0});var zgt=s(hD);g5o=r(zgt,"XLNetModel"),zgt.forEach(t),h5o=r(vxe," (XLNet model)"),vxe.forEach(t),p5o=i(x),Su=n(x,"LI",{});var Fxe=s(Su);sfe=n(Fxe,"STRONG",{});var Qgt=s(sfe);_5o=r(Qgt,"yolos"),Qgt.forEach(t),u5o=r(Fxe," \u2014 "),pD=n(Fxe,"A",{href:!0});var Wgt=s(pD);b5o=r(Wgt,"YolosModel"),Wgt.forEach(t),v5o=r(Fxe," (YOLOS model)"),Fxe.forEach(t),F5o=i(x),Ru=n(x,"LI",{});var Txe=s(Ru);lfe=n(Txe,"STRONG",{});var Hgt=s(lfe);T5o=r(Hgt,"yoso"),Hgt.forEach(t),M5o=r(Txe," \u2014 "),_D=n(Txe,"A",{href:!0});var Ugt=s(_D);E5o=r(Ugt,"YosoModel"),Ugt.forEach(t),C5o=r(Txe," (YOSO model)"),Txe.forEach(t),x.forEach(t),w5o=i(aa),Pu=n(aa,"P",{});var Mxe=s(Pu);A5o=r(Mxe,"The model is set in evaluation mode by default using "),ife=n(Mxe,"CODE",{});var Jgt=s(ife);L5o=r(Jgt,"model.eval()"),Jgt.forEach(t),y5o=r(Mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=n(Mxe,"CODE",{});var Ygt=s(dfe);x5o=r(Ygt,"model.train()"),Ygt.forEach(t),Mxe.forEach(t),$5o=i(aa),T(Bu.$$.fragment,aa),aa.forEach(t),Ks.forEach(t),xOe=i(f),ji=n(f,"H2",{class:!0});var BXe=s(ji);Iu=n(BXe,"A",{id:!0,class:!0,href:!0});var Kgt=s(Iu);cfe=n(Kgt,"SPAN",{});var Zgt=s(cfe);T(gL.$$.fragment,Zgt),Zgt.forEach(t),Kgt.forEach(t),k5o=i(BXe),ffe=n(BXe,"SPAN",{});var eht=s(ffe);S5o=r(eht,"AutoModelForPreTraining"),eht.forEach(t),BXe.forEach(t),$Oe=i(f),$o=n(f,"DIV",{class:!0});var Zs=s($o);T(hL.$$.fragment,Zs),R5o=i(Zs),Di=n(Zs,"P",{});var Boe=s(Di);P5o=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uD=n(Boe,"A",{href:!0});var oht=s(uD);B5o=r(oht,"from_pretrained()"),oht.forEach(t),I5o=r(Boe," class method or the "),bD=n(Boe,"A",{href:!0});var rht=s(bD);N5o=r(rht,"from_config()"),rht.forEach(t),q5o=r(Boe,` class
method.`),Boe.forEach(t),j5o=i(Zs),pL=n(Zs,"P",{});var IXe=s(pL);D5o=r(IXe,"This class cannot be instantiated directly using "),mfe=n(IXe,"CODE",{});var tht=s(mfe);G5o=r(tht,"__init__()"),tht.forEach(t),O5o=r(IXe," (throws an error)."),IXe.forEach(t),V5o=i(Zs),st=n(Zs,"DIV",{class:!0});var D0=s(st);T(_L.$$.fragment,D0),X5o=i(D0),gfe=n(D0,"P",{});var aht=s(gfe);z5o=r(aht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aht.forEach(t),Q5o=i(D0),Gi=n(D0,"P",{});var Ioe=s(Gi);W5o=r(Ioe,`Note:
Loading a model from its configuration file does `),hfe=n(Ioe,"STRONG",{});var nht=s(hfe);H5o=r(nht,"not"),nht.forEach(t),U5o=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=n(Ioe,"A",{href:!0});var sht=s(vD);J5o=r(sht,"from_pretrained()"),sht.forEach(t),Y5o=r(Ioe," to load the model weights."),Ioe.forEach(t),K5o=i(D0),T(Nu.$$.fragment,D0),D0.forEach(t),Z5o=i(Zs),Ye=n(Zs,"DIV",{class:!0});var na=s(Ye);T(uL.$$.fragment,na),e3o=i(na),pfe=n(na,"P",{});var lht=s(pfe);o3o=r(lht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lht.forEach(t),r3o=i(na),Pa=n(na,"P",{});var G0=s(Pa);t3o=r(G0,"The model class to instantiate is selected based on the "),_fe=n(G0,"CODE",{});var iht=s(_fe);a3o=r(iht,"model_type"),iht.forEach(t),n3o=r(G0,` property of the config object (either
passed as an argument or loaded from `),ufe=n(G0,"CODE",{});var dht=s(ufe);s3o=r(dht,"pretrained_model_name_or_path"),dht.forEach(t),l3o=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=n(G0,"CODE",{});var cht=s(bfe);i3o=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),d3o=r(G0,":"),G0.forEach(t),c3o=i(na),G=n(na,"UL",{});var O=s(G);qu=n(O,"LI",{});var Exe=s(qu);vfe=n(Exe,"STRONG",{});var fht=s(vfe);f3o=r(fht,"albert"),fht.forEach(t),m3o=r(Exe," \u2014 "),FD=n(Exe,"A",{href:!0});var mht=s(FD);g3o=r(mht,"AlbertForPreTraining"),mht.forEach(t),h3o=r(Exe," (ALBERT model)"),Exe.forEach(t),p3o=i(O),ju=n(O,"LI",{});var Cxe=s(ju);Ffe=n(Cxe,"STRONG",{});var ght=s(Ffe);_3o=r(ght,"bart"),ght.forEach(t),u3o=r(Cxe," \u2014 "),TD=n(Cxe,"A",{href:!0});var hht=s(TD);b3o=r(hht,"BartForConditionalGeneration"),hht.forEach(t),v3o=r(Cxe," (BART model)"),Cxe.forEach(t),F3o=i(O),Du=n(O,"LI",{});var wxe=s(Du);Tfe=n(wxe,"STRONG",{});var pht=s(Tfe);T3o=r(pht,"bert"),pht.forEach(t),M3o=r(wxe," \u2014 "),MD=n(wxe,"A",{href:!0});var _ht=s(MD);E3o=r(_ht,"BertForPreTraining"),_ht.forEach(t),C3o=r(wxe," (BERT model)"),wxe.forEach(t),w3o=i(O),Gu=n(O,"LI",{});var Axe=s(Gu);Mfe=n(Axe,"STRONG",{});var uht=s(Mfe);A3o=r(uht,"big_bird"),uht.forEach(t),L3o=r(Axe," \u2014 "),ED=n(Axe,"A",{href:!0});var bht=s(ED);y3o=r(bht,"BigBirdForPreTraining"),bht.forEach(t),x3o=r(Axe," (BigBird model)"),Axe.forEach(t),$3o=i(O),Ou=n(O,"LI",{});var Lxe=s(Ou);Efe=n(Lxe,"STRONG",{});var vht=s(Efe);k3o=r(vht,"bloom"),vht.forEach(t),S3o=r(Lxe," \u2014 "),CD=n(Lxe,"A",{href:!0});var Fht=s(CD);R3o=r(Fht,"BloomForCausalLM"),Fht.forEach(t),P3o=r(Lxe," (BLOOM model)"),Lxe.forEach(t),B3o=i(O),Vu=n(O,"LI",{});var yxe=s(Vu);Cfe=n(yxe,"STRONG",{});var Tht=s(Cfe);I3o=r(Tht,"camembert"),Tht.forEach(t),N3o=r(yxe," \u2014 "),wD=n(yxe,"A",{href:!0});var Mht=s(wD);q3o=r(Mht,"CamembertForMaskedLM"),Mht.forEach(t),j3o=r(yxe," (CamemBERT model)"),yxe.forEach(t),D3o=i(O),Xu=n(O,"LI",{});var xxe=s(Xu);wfe=n(xxe,"STRONG",{});var Eht=s(wfe);G3o=r(Eht,"ctrl"),Eht.forEach(t),O3o=r(xxe," \u2014 "),AD=n(xxe,"A",{href:!0});var Cht=s(AD);V3o=r(Cht,"CTRLLMHeadModel"),Cht.forEach(t),X3o=r(xxe," (CTRL model)"),xxe.forEach(t),z3o=i(O),zu=n(O,"LI",{});var $xe=s(zu);Afe=n($xe,"STRONG",{});var wht=s(Afe);Q3o=r(wht,"data2vec-text"),wht.forEach(t),W3o=r($xe," \u2014 "),LD=n($xe,"A",{href:!0});var Aht=s(LD);H3o=r(Aht,"Data2VecTextForMaskedLM"),Aht.forEach(t),U3o=r($xe," (Data2VecText model)"),$xe.forEach(t),J3o=i(O),Qu=n(O,"LI",{});var kxe=s(Qu);Lfe=n(kxe,"STRONG",{});var Lht=s(Lfe);Y3o=r(Lht,"deberta"),Lht.forEach(t),K3o=r(kxe," \u2014 "),yD=n(kxe,"A",{href:!0});var yht=s(yD);Z3o=r(yht,"DebertaForMaskedLM"),yht.forEach(t),e0o=r(kxe," (DeBERTa model)"),kxe.forEach(t),o0o=i(O),Wu=n(O,"LI",{});var Sxe=s(Wu);yfe=n(Sxe,"STRONG",{});var xht=s(yfe);r0o=r(xht,"deberta-v2"),xht.forEach(t),t0o=r(Sxe," \u2014 "),xD=n(Sxe,"A",{href:!0});var $ht=s(xD);a0o=r($ht,"DebertaV2ForMaskedLM"),$ht.forEach(t),n0o=r(Sxe," (DeBERTa-v2 model)"),Sxe.forEach(t),s0o=i(O),Hu=n(O,"LI",{});var Rxe=s(Hu);xfe=n(Rxe,"STRONG",{});var kht=s(xfe);l0o=r(kht,"distilbert"),kht.forEach(t),i0o=r(Rxe," \u2014 "),$D=n(Rxe,"A",{href:!0});var Sht=s($D);d0o=r(Sht,"DistilBertForMaskedLM"),Sht.forEach(t),c0o=r(Rxe," (DistilBERT model)"),Rxe.forEach(t),f0o=i(O),Uu=n(O,"LI",{});var Pxe=s(Uu);$fe=n(Pxe,"STRONG",{});var Rht=s($fe);m0o=r(Rht,"electra"),Rht.forEach(t),g0o=r(Pxe," \u2014 "),kD=n(Pxe,"A",{href:!0});var Pht=s(kD);h0o=r(Pht,"ElectraForPreTraining"),Pht.forEach(t),p0o=r(Pxe," (ELECTRA model)"),Pxe.forEach(t),_0o=i(O),Ju=n(O,"LI",{});var Bxe=s(Ju);kfe=n(Bxe,"STRONG",{});var Bht=s(kfe);u0o=r(Bht,"flaubert"),Bht.forEach(t),b0o=r(Bxe," \u2014 "),SD=n(Bxe,"A",{href:!0});var Iht=s(SD);v0o=r(Iht,"FlaubertWithLMHeadModel"),Iht.forEach(t),F0o=r(Bxe," (FlauBERT model)"),Bxe.forEach(t),T0o=i(O),Yu=n(O,"LI",{});var Ixe=s(Yu);Sfe=n(Ixe,"STRONG",{});var Nht=s(Sfe);M0o=r(Nht,"flava"),Nht.forEach(t),E0o=r(Ixe," \u2014 "),RD=n(Ixe,"A",{href:!0});var qht=s(RD);C0o=r(qht,"FlavaForPreTraining"),qht.forEach(t),w0o=r(Ixe," (FLAVA model)"),Ixe.forEach(t),A0o=i(O),Ku=n(O,"LI",{});var Nxe=s(Ku);Rfe=n(Nxe,"STRONG",{});var jht=s(Rfe);L0o=r(jht,"fnet"),jht.forEach(t),y0o=r(Nxe," \u2014 "),PD=n(Nxe,"A",{href:!0});var Dht=s(PD);x0o=r(Dht,"FNetForPreTraining"),Dht.forEach(t),$0o=r(Nxe," (FNet model)"),Nxe.forEach(t),k0o=i(O),Zu=n(O,"LI",{});var qxe=s(Zu);Pfe=n(qxe,"STRONG",{});var Ght=s(Pfe);S0o=r(Ght,"fsmt"),Ght.forEach(t),R0o=r(qxe," \u2014 "),BD=n(qxe,"A",{href:!0});var Oht=s(BD);P0o=r(Oht,"FSMTForConditionalGeneration"),Oht.forEach(t),B0o=r(qxe," (FairSeq Machine-Translation model)"),qxe.forEach(t),I0o=i(O),e2=n(O,"LI",{});var jxe=s(e2);Bfe=n(jxe,"STRONG",{});var Vht=s(Bfe);N0o=r(Vht,"funnel"),Vht.forEach(t),q0o=r(jxe," \u2014 "),ID=n(jxe,"A",{href:!0});var Xht=s(ID);j0o=r(Xht,"FunnelForPreTraining"),Xht.forEach(t),D0o=r(jxe," (Funnel Transformer model)"),jxe.forEach(t),G0o=i(O),o2=n(O,"LI",{});var Dxe=s(o2);Ife=n(Dxe,"STRONG",{});var zht=s(Ife);O0o=r(zht,"gpt2"),zht.forEach(t),V0o=r(Dxe," \u2014 "),ND=n(Dxe,"A",{href:!0});var Qht=s(ND);X0o=r(Qht,"GPT2LMHeadModel"),Qht.forEach(t),z0o=r(Dxe," (OpenAI GPT-2 model)"),Dxe.forEach(t),Q0o=i(O),r2=n(O,"LI",{});var Gxe=s(r2);Nfe=n(Gxe,"STRONG",{});var Wht=s(Nfe);W0o=r(Wht,"ibert"),Wht.forEach(t),H0o=r(Gxe," \u2014 "),qD=n(Gxe,"A",{href:!0});var Hht=s(qD);U0o=r(Hht,"IBertForMaskedLM"),Hht.forEach(t),J0o=r(Gxe," (I-BERT model)"),Gxe.forEach(t),Y0o=i(O),t2=n(O,"LI",{});var Oxe=s(t2);qfe=n(Oxe,"STRONG",{});var Uht=s(qfe);K0o=r(Uht,"layoutlm"),Uht.forEach(t),Z0o=r(Oxe," \u2014 "),jD=n(Oxe,"A",{href:!0});var Jht=s(jD);ewo=r(Jht,"LayoutLMForMaskedLM"),Jht.forEach(t),owo=r(Oxe," (LayoutLM model)"),Oxe.forEach(t),rwo=i(O),a2=n(O,"LI",{});var Vxe=s(a2);jfe=n(Vxe,"STRONG",{});var Yht=s(jfe);two=r(Yht,"longformer"),Yht.forEach(t),awo=r(Vxe," \u2014 "),DD=n(Vxe,"A",{href:!0});var Kht=s(DD);nwo=r(Kht,"LongformerForMaskedLM"),Kht.forEach(t),swo=r(Vxe," (Longformer model)"),Vxe.forEach(t),lwo=i(O),n2=n(O,"LI",{});var Xxe=s(n2);Dfe=n(Xxe,"STRONG",{});var Zht=s(Dfe);iwo=r(Zht,"lxmert"),Zht.forEach(t),dwo=r(Xxe," \u2014 "),GD=n(Xxe,"A",{href:!0});var ept=s(GD);cwo=r(ept,"LxmertForPreTraining"),ept.forEach(t),fwo=r(Xxe," (LXMERT model)"),Xxe.forEach(t),mwo=i(O),s2=n(O,"LI",{});var zxe=s(s2);Gfe=n(zxe,"STRONG",{});var opt=s(Gfe);gwo=r(opt,"megatron-bert"),opt.forEach(t),hwo=r(zxe," \u2014 "),OD=n(zxe,"A",{href:!0});var rpt=s(OD);pwo=r(rpt,"MegatronBertForPreTraining"),rpt.forEach(t),_wo=r(zxe," (Megatron-BERT model)"),zxe.forEach(t),uwo=i(O),l2=n(O,"LI",{});var Qxe=s(l2);Ofe=n(Qxe,"STRONG",{});var tpt=s(Ofe);bwo=r(tpt,"mobilebert"),tpt.forEach(t),vwo=r(Qxe," \u2014 "),VD=n(Qxe,"A",{href:!0});var apt=s(VD);Fwo=r(apt,"MobileBertForPreTraining"),apt.forEach(t),Two=r(Qxe," (MobileBERT model)"),Qxe.forEach(t),Mwo=i(O),i2=n(O,"LI",{});var Wxe=s(i2);Vfe=n(Wxe,"STRONG",{});var npt=s(Vfe);Ewo=r(npt,"mpnet"),npt.forEach(t),Cwo=r(Wxe," \u2014 "),XD=n(Wxe,"A",{href:!0});var spt=s(XD);wwo=r(spt,"MPNetForMaskedLM"),spt.forEach(t),Awo=r(Wxe," (MPNet model)"),Wxe.forEach(t),Lwo=i(O),d2=n(O,"LI",{});var Hxe=s(d2);Xfe=n(Hxe,"STRONG",{});var lpt=s(Xfe);ywo=r(lpt,"nezha"),lpt.forEach(t),xwo=r(Hxe," \u2014 "),zD=n(Hxe,"A",{href:!0});var ipt=s(zD);$wo=r(ipt,"NezhaForPreTraining"),ipt.forEach(t),kwo=r(Hxe," (Nezha model)"),Hxe.forEach(t),Swo=i(O),c2=n(O,"LI",{});var Uxe=s(c2);zfe=n(Uxe,"STRONG",{});var dpt=s(zfe);Rwo=r(dpt,"openai-gpt"),dpt.forEach(t),Pwo=r(Uxe," \u2014 "),QD=n(Uxe,"A",{href:!0});var cpt=s(QD);Bwo=r(cpt,"OpenAIGPTLMHeadModel"),cpt.forEach(t),Iwo=r(Uxe," (OpenAI GPT model)"),Uxe.forEach(t),Nwo=i(O),f2=n(O,"LI",{});var Jxe=s(f2);Qfe=n(Jxe,"STRONG",{});var fpt=s(Qfe);qwo=r(fpt,"retribert"),fpt.forEach(t),jwo=r(Jxe," \u2014 "),WD=n(Jxe,"A",{href:!0});var mpt=s(WD);Dwo=r(mpt,"RetriBertModel"),mpt.forEach(t),Gwo=r(Jxe," (RetriBERT model)"),Jxe.forEach(t),Owo=i(O),m2=n(O,"LI",{});var Yxe=s(m2);Wfe=n(Yxe,"STRONG",{});var gpt=s(Wfe);Vwo=r(gpt,"roberta"),gpt.forEach(t),Xwo=r(Yxe," \u2014 "),HD=n(Yxe,"A",{href:!0});var hpt=s(HD);zwo=r(hpt,"RobertaForMaskedLM"),hpt.forEach(t),Qwo=r(Yxe," (RoBERTa model)"),Yxe.forEach(t),Wwo=i(O),g2=n(O,"LI",{});var Kxe=s(g2);Hfe=n(Kxe,"STRONG",{});var ppt=s(Hfe);Hwo=r(ppt,"splinter"),ppt.forEach(t),Uwo=r(Kxe," \u2014 "),UD=n(Kxe,"A",{href:!0});var _pt=s(UD);Jwo=r(_pt,"SplinterForPreTraining"),_pt.forEach(t),Ywo=r(Kxe," (Splinter model)"),Kxe.forEach(t),Kwo=i(O),h2=n(O,"LI",{});var Zxe=s(h2);Ufe=n(Zxe,"STRONG",{});var upt=s(Ufe);Zwo=r(upt,"squeezebert"),upt.forEach(t),eAo=r(Zxe," \u2014 "),JD=n(Zxe,"A",{href:!0});var bpt=s(JD);oAo=r(bpt,"SqueezeBertForMaskedLM"),bpt.forEach(t),rAo=r(Zxe," (SqueezeBERT model)"),Zxe.forEach(t),tAo=i(O),p2=n(O,"LI",{});var e$e=s(p2);Jfe=n(e$e,"STRONG",{});var vpt=s(Jfe);aAo=r(vpt,"t5"),vpt.forEach(t),nAo=r(e$e," \u2014 "),YD=n(e$e,"A",{href:!0});var Fpt=s(YD);sAo=r(Fpt,"T5ForConditionalGeneration"),Fpt.forEach(t),lAo=r(e$e," (T5 model)"),e$e.forEach(t),iAo=i(O),_2=n(O,"LI",{});var o$e=s(_2);Yfe=n(o$e,"STRONG",{});var Tpt=s(Yfe);dAo=r(Tpt,"tapas"),Tpt.forEach(t),cAo=r(o$e," \u2014 "),KD=n(o$e,"A",{href:!0});var Mpt=s(KD);fAo=r(Mpt,"TapasForMaskedLM"),Mpt.forEach(t),mAo=r(o$e," (TAPAS model)"),o$e.forEach(t),gAo=i(O),u2=n(O,"LI",{});var r$e=s(u2);Kfe=n(r$e,"STRONG",{});var Ept=s(Kfe);hAo=r(Ept,"transfo-xl"),Ept.forEach(t),pAo=r(r$e," \u2014 "),ZD=n(r$e,"A",{href:!0});var Cpt=s(ZD);_Ao=r(Cpt,"TransfoXLLMHeadModel"),Cpt.forEach(t),uAo=r(r$e," (Transformer-XL model)"),r$e.forEach(t),bAo=i(O),b2=n(O,"LI",{});var t$e=s(b2);Zfe=n(t$e,"STRONG",{});var wpt=s(Zfe);vAo=r(wpt,"unispeech"),wpt.forEach(t),FAo=r(t$e," \u2014 "),eG=n(t$e,"A",{href:!0});var Apt=s(eG);TAo=r(Apt,"UniSpeechForPreTraining"),Apt.forEach(t),MAo=r(t$e," (UniSpeech model)"),t$e.forEach(t),EAo=i(O),v2=n(O,"LI",{});var a$e=s(v2);eme=n(a$e,"STRONG",{});var Lpt=s(eme);CAo=r(Lpt,"unispeech-sat"),Lpt.forEach(t),wAo=r(a$e," \u2014 "),oG=n(a$e,"A",{href:!0});var ypt=s(oG);AAo=r(ypt,"UniSpeechSatForPreTraining"),ypt.forEach(t),LAo=r(a$e," (UniSpeechSat model)"),a$e.forEach(t),yAo=i(O),F2=n(O,"LI",{});var n$e=s(F2);ome=n(n$e,"STRONG",{});var xpt=s(ome);xAo=r(xpt,"visual_bert"),xpt.forEach(t),$Ao=r(n$e," \u2014 "),rG=n(n$e,"A",{href:!0});var $pt=s(rG);kAo=r($pt,"VisualBertForPreTraining"),$pt.forEach(t),SAo=r(n$e," (VisualBERT model)"),n$e.forEach(t),RAo=i(O),T2=n(O,"LI",{});var s$e=s(T2);rme=n(s$e,"STRONG",{});var kpt=s(rme);PAo=r(kpt,"vit_mae"),kpt.forEach(t),BAo=r(s$e," \u2014 "),tG=n(s$e,"A",{href:!0});var Spt=s(tG);IAo=r(Spt,"ViTMAEForPreTraining"),Spt.forEach(t),NAo=r(s$e," (ViTMAE model)"),s$e.forEach(t),qAo=i(O),M2=n(O,"LI",{});var l$e=s(M2);tme=n(l$e,"STRONG",{});var Rpt=s(tme);jAo=r(Rpt,"wav2vec2"),Rpt.forEach(t),DAo=r(l$e," \u2014 "),aG=n(l$e,"A",{href:!0});var Ppt=s(aG);GAo=r(Ppt,"Wav2Vec2ForPreTraining"),Ppt.forEach(t),OAo=r(l$e," (Wav2Vec2 model)"),l$e.forEach(t),VAo=i(O),E2=n(O,"LI",{});var i$e=s(E2);ame=n(i$e,"STRONG",{});var Bpt=s(ame);XAo=r(Bpt,"wav2vec2-conformer"),Bpt.forEach(t),zAo=r(i$e," \u2014 "),nG=n(i$e,"A",{href:!0});var Ipt=s(nG);QAo=r(Ipt,"Wav2Vec2ConformerForPreTraining"),Ipt.forEach(t),WAo=r(i$e," (Wav2Vec2-Conformer model)"),i$e.forEach(t),HAo=i(O),C2=n(O,"LI",{});var d$e=s(C2);nme=n(d$e,"STRONG",{});var Npt=s(nme);UAo=r(Npt,"xlm"),Npt.forEach(t),JAo=r(d$e," \u2014 "),sG=n(d$e,"A",{href:!0});var qpt=s(sG);YAo=r(qpt,"XLMWithLMHeadModel"),qpt.forEach(t),KAo=r(d$e," (XLM model)"),d$e.forEach(t),ZAo=i(O),w2=n(O,"LI",{});var c$e=s(w2);sme=n(c$e,"STRONG",{});var jpt=s(sme);eLo=r(jpt,"xlm-roberta"),jpt.forEach(t),oLo=r(c$e," \u2014 "),lG=n(c$e,"A",{href:!0});var Dpt=s(lG);rLo=r(Dpt,"XLMRobertaForMaskedLM"),Dpt.forEach(t),tLo=r(c$e," (XLM-RoBERTa model)"),c$e.forEach(t),aLo=i(O),A2=n(O,"LI",{});var f$e=s(A2);lme=n(f$e,"STRONG",{});var Gpt=s(lme);nLo=r(Gpt,"xlm-roberta-xl"),Gpt.forEach(t),sLo=r(f$e," \u2014 "),iG=n(f$e,"A",{href:!0});var Opt=s(iG);lLo=r(Opt,"XLMRobertaXLForMaskedLM"),Opt.forEach(t),iLo=r(f$e," (XLM-RoBERTa-XL model)"),f$e.forEach(t),dLo=i(O),L2=n(O,"LI",{});var m$e=s(L2);ime=n(m$e,"STRONG",{});var Vpt=s(ime);cLo=r(Vpt,"xlnet"),Vpt.forEach(t),fLo=r(m$e," \u2014 "),dG=n(m$e,"A",{href:!0});var Xpt=s(dG);mLo=r(Xpt,"XLNetLMHeadModel"),Xpt.forEach(t),gLo=r(m$e," (XLNet model)"),m$e.forEach(t),O.forEach(t),hLo=i(na),y2=n(na,"P",{});var g$e=s(y2);pLo=r(g$e,"The model is set in evaluation mode by default using "),dme=n(g$e,"CODE",{});var zpt=s(dme);_Lo=r(zpt,"model.eval()"),zpt.forEach(t),uLo=r(g$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cme=n(g$e,"CODE",{});var Qpt=s(cme);bLo=r(Qpt,"model.train()"),Qpt.forEach(t),g$e.forEach(t),vLo=i(na),T(x2.$$.fragment,na),na.forEach(t),Zs.forEach(t),kOe=i(f),Oi=n(f,"H2",{class:!0});var NXe=s(Oi);$2=n(NXe,"A",{id:!0,class:!0,href:!0});var Wpt=s($2);fme=n(Wpt,"SPAN",{});var Hpt=s(fme);T(bL.$$.fragment,Hpt),Hpt.forEach(t),Wpt.forEach(t),FLo=i(NXe),mme=n(NXe,"SPAN",{});var Upt=s(mme);TLo=r(Upt,"AutoModelForCausalLM"),Upt.forEach(t),NXe.forEach(t),SOe=i(f),ko=n(f,"DIV",{class:!0});var el=s(ko);T(vL.$$.fragment,el),MLo=i(el),Vi=n(el,"P",{});var Noe=s(Vi);ELo=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),cG=n(Noe,"A",{href:!0});var Jpt=s(cG);CLo=r(Jpt,"from_pretrained()"),Jpt.forEach(t),wLo=r(Noe," class method or the "),fG=n(Noe,"A",{href:!0});var Ypt=s(fG);ALo=r(Ypt,"from_config()"),Ypt.forEach(t),LLo=r(Noe,` class
method.`),Noe.forEach(t),yLo=i(el),FL=n(el,"P",{});var qXe=s(FL);xLo=r(qXe,"This class cannot be instantiated directly using "),gme=n(qXe,"CODE",{});var Kpt=s(gme);$Lo=r(Kpt,"__init__()"),Kpt.forEach(t),kLo=r(qXe," (throws an error)."),qXe.forEach(t),SLo=i(el),lt=n(el,"DIV",{class:!0});var O0=s(lt);T(TL.$$.fragment,O0),RLo=i(O0),hme=n(O0,"P",{});var Zpt=s(hme);PLo=r(Zpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zpt.forEach(t),BLo=i(O0),Xi=n(O0,"P",{});var qoe=s(Xi);ILo=r(qoe,`Note:
Loading a model from its configuration file does `),pme=n(qoe,"STRONG",{});var e_t=s(pme);NLo=r(e_t,"not"),e_t.forEach(t),qLo=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=n(qoe,"A",{href:!0});var o_t=s(mG);jLo=r(o_t,"from_pretrained()"),o_t.forEach(t),DLo=r(qoe," to load the model weights."),qoe.forEach(t),GLo=i(O0),T(k2.$$.fragment,O0),O0.forEach(t),OLo=i(el),Ke=n(el,"DIV",{class:!0});var sa=s(Ke);T(ML.$$.fragment,sa),VLo=i(sa),_me=n(sa,"P",{});var r_t=s(_me);XLo=r(r_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),r_t.forEach(t),zLo=i(sa),Ba=n(sa,"P",{});var V0=s(Ba);QLo=r(V0,"The model class to instantiate is selected based on the "),ume=n(V0,"CODE",{});var t_t=s(ume);WLo=r(t_t,"model_type"),t_t.forEach(t),HLo=r(V0,` property of the config object (either
passed as an argument or loaded from `),bme=n(V0,"CODE",{});var a_t=s(bme);ULo=r(a_t,"pretrained_model_name_or_path"),a_t.forEach(t),JLo=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vme=n(V0,"CODE",{});var n_t=s(vme);YLo=r(n_t,"pretrained_model_name_or_path"),n_t.forEach(t),KLo=r(V0,":"),V0.forEach(t),ZLo=i(sa),z=n(sa,"UL",{});var Q=s(z);S2=n(Q,"LI",{});var h$e=s(S2);Fme=n(h$e,"STRONG",{});var s_t=s(Fme);eyo=r(s_t,"bart"),s_t.forEach(t),oyo=r(h$e," \u2014 "),gG=n(h$e,"A",{href:!0});var l_t=s(gG);ryo=r(l_t,"BartForCausalLM"),l_t.forEach(t),tyo=r(h$e," (BART model)"),h$e.forEach(t),ayo=i(Q),R2=n(Q,"LI",{});var p$e=s(R2);Tme=n(p$e,"STRONG",{});var i_t=s(Tme);nyo=r(i_t,"bert"),i_t.forEach(t),syo=r(p$e," \u2014 "),hG=n(p$e,"A",{href:!0});var d_t=s(hG);lyo=r(d_t,"BertLMHeadModel"),d_t.forEach(t),iyo=r(p$e," (BERT model)"),p$e.forEach(t),dyo=i(Q),P2=n(Q,"LI",{});var _$e=s(P2);Mme=n(_$e,"STRONG",{});var c_t=s(Mme);cyo=r(c_t,"bert-generation"),c_t.forEach(t),fyo=r(_$e," \u2014 "),pG=n(_$e,"A",{href:!0});var f_t=s(pG);myo=r(f_t,"BertGenerationDecoder"),f_t.forEach(t),gyo=r(_$e," (Bert Generation model)"),_$e.forEach(t),hyo=i(Q),B2=n(Q,"LI",{});var u$e=s(B2);Eme=n(u$e,"STRONG",{});var m_t=s(Eme);pyo=r(m_t,"big_bird"),m_t.forEach(t),_yo=r(u$e," \u2014 "),_G=n(u$e,"A",{href:!0});var g_t=s(_G);uyo=r(g_t,"BigBirdForCausalLM"),g_t.forEach(t),byo=r(u$e," (BigBird model)"),u$e.forEach(t),vyo=i(Q),I2=n(Q,"LI",{});var b$e=s(I2);Cme=n(b$e,"STRONG",{});var h_t=s(Cme);Fyo=r(h_t,"bigbird_pegasus"),h_t.forEach(t),Tyo=r(b$e," \u2014 "),uG=n(b$e,"A",{href:!0});var p_t=s(uG);Myo=r(p_t,"BigBirdPegasusForCausalLM"),p_t.forEach(t),Eyo=r(b$e," (BigBird-Pegasus model)"),b$e.forEach(t),Cyo=i(Q),N2=n(Q,"LI",{});var v$e=s(N2);wme=n(v$e,"STRONG",{});var __t=s(wme);wyo=r(__t,"blenderbot"),__t.forEach(t),Ayo=r(v$e," \u2014 "),bG=n(v$e,"A",{href:!0});var u_t=s(bG);Lyo=r(u_t,"BlenderbotForCausalLM"),u_t.forEach(t),yyo=r(v$e," (Blenderbot model)"),v$e.forEach(t),xyo=i(Q),q2=n(Q,"LI",{});var F$e=s(q2);Ame=n(F$e,"STRONG",{});var b_t=s(Ame);$yo=r(b_t,"blenderbot-small"),b_t.forEach(t),kyo=r(F$e," \u2014 "),vG=n(F$e,"A",{href:!0});var v_t=s(vG);Syo=r(v_t,"BlenderbotSmallForCausalLM"),v_t.forEach(t),Ryo=r(F$e," (BlenderbotSmall model)"),F$e.forEach(t),Pyo=i(Q),j2=n(Q,"LI",{});var T$e=s(j2);Lme=n(T$e,"STRONG",{});var F_t=s(Lme);Byo=r(F_t,"bloom"),F_t.forEach(t),Iyo=r(T$e," \u2014 "),FG=n(T$e,"A",{href:!0});var T_t=s(FG);Nyo=r(T_t,"BloomForCausalLM"),T_t.forEach(t),qyo=r(T$e," (BLOOM model)"),T$e.forEach(t),jyo=i(Q),D2=n(Q,"LI",{});var M$e=s(D2);yme=n(M$e,"STRONG",{});var M_t=s(yme);Dyo=r(M_t,"camembert"),M_t.forEach(t),Gyo=r(M$e," \u2014 "),TG=n(M$e,"A",{href:!0});var E_t=s(TG);Oyo=r(E_t,"CamembertForCausalLM"),E_t.forEach(t),Vyo=r(M$e," (CamemBERT model)"),M$e.forEach(t),Xyo=i(Q),G2=n(Q,"LI",{});var E$e=s(G2);xme=n(E$e,"STRONG",{});var C_t=s(xme);zyo=r(C_t,"codegen"),C_t.forEach(t),Qyo=r(E$e," \u2014 "),MG=n(E$e,"A",{href:!0});var w_t=s(MG);Wyo=r(w_t,"CodeGenForCausalLM"),w_t.forEach(t),Hyo=r(E$e," (CodeGen model)"),E$e.forEach(t),Uyo=i(Q),O2=n(Q,"LI",{});var C$e=s(O2);$me=n(C$e,"STRONG",{});var A_t=s($me);Jyo=r(A_t,"ctrl"),A_t.forEach(t),Yyo=r(C$e," \u2014 "),EG=n(C$e,"A",{href:!0});var L_t=s(EG);Kyo=r(L_t,"CTRLLMHeadModel"),L_t.forEach(t),Zyo=r(C$e," (CTRL model)"),C$e.forEach(t),e9o=i(Q),V2=n(Q,"LI",{});var w$e=s(V2);kme=n(w$e,"STRONG",{});var y_t=s(kme);o9o=r(y_t,"data2vec-text"),y_t.forEach(t),r9o=r(w$e," \u2014 "),CG=n(w$e,"A",{href:!0});var x_t=s(CG);t9o=r(x_t,"Data2VecTextForCausalLM"),x_t.forEach(t),a9o=r(w$e," (Data2VecText model)"),w$e.forEach(t),n9o=i(Q),X2=n(Q,"LI",{});var A$e=s(X2);Sme=n(A$e,"STRONG",{});var $_t=s(Sme);s9o=r($_t,"electra"),$_t.forEach(t),l9o=r(A$e," \u2014 "),wG=n(A$e,"A",{href:!0});var k_t=s(wG);i9o=r(k_t,"ElectraForCausalLM"),k_t.forEach(t),d9o=r(A$e," (ELECTRA model)"),A$e.forEach(t),c9o=i(Q),z2=n(Q,"LI",{});var L$e=s(z2);Rme=n(L$e,"STRONG",{});var S_t=s(Rme);f9o=r(S_t,"gpt2"),S_t.forEach(t),m9o=r(L$e," \u2014 "),AG=n(L$e,"A",{href:!0});var R_t=s(AG);g9o=r(R_t,"GPT2LMHeadModel"),R_t.forEach(t),h9o=r(L$e," (OpenAI GPT-2 model)"),L$e.forEach(t),p9o=i(Q),Q2=n(Q,"LI",{});var y$e=s(Q2);Pme=n(y$e,"STRONG",{});var P_t=s(Pme);_9o=r(P_t,"gpt_neo"),P_t.forEach(t),u9o=r(y$e," \u2014 "),LG=n(y$e,"A",{href:!0});var B_t=s(LG);b9o=r(B_t,"GPTNeoForCausalLM"),B_t.forEach(t),v9o=r(y$e," (GPT Neo model)"),y$e.forEach(t),F9o=i(Q),W2=n(Q,"LI",{});var x$e=s(W2);Bme=n(x$e,"STRONG",{});var I_t=s(Bme);T9o=r(I_t,"gpt_neox"),I_t.forEach(t),M9o=r(x$e," \u2014 "),yG=n(x$e,"A",{href:!0});var N_t=s(yG);E9o=r(N_t,"GPTNeoXForCausalLM"),N_t.forEach(t),C9o=r(x$e," (GPT NeoX model)"),x$e.forEach(t),w9o=i(Q),H2=n(Q,"LI",{});var $$e=s(H2);Ime=n($$e,"STRONG",{});var q_t=s(Ime);A9o=r(q_t,"gptj"),q_t.forEach(t),L9o=r($$e," \u2014 "),xG=n($$e,"A",{href:!0});var j_t=s(xG);y9o=r(j_t,"GPTJForCausalLM"),j_t.forEach(t),x9o=r($$e," (GPT-J model)"),$$e.forEach(t),$9o=i(Q),U2=n(Q,"LI",{});var k$e=s(U2);Nme=n(k$e,"STRONG",{});var D_t=s(Nme);k9o=r(D_t,"marian"),D_t.forEach(t),S9o=r(k$e," \u2014 "),$G=n(k$e,"A",{href:!0});var G_t=s($G);R9o=r(G_t,"MarianForCausalLM"),G_t.forEach(t),P9o=r(k$e," (Marian model)"),k$e.forEach(t),B9o=i(Q),J2=n(Q,"LI",{});var S$e=s(J2);qme=n(S$e,"STRONG",{});var O_t=s(qme);I9o=r(O_t,"mbart"),O_t.forEach(t),N9o=r(S$e," \u2014 "),kG=n(S$e,"A",{href:!0});var V_t=s(kG);q9o=r(V_t,"MBartForCausalLM"),V_t.forEach(t),j9o=r(S$e," (mBART model)"),S$e.forEach(t),D9o=i(Q),Y2=n(Q,"LI",{});var R$e=s(Y2);jme=n(R$e,"STRONG",{});var X_t=s(jme);G9o=r(X_t,"megatron-bert"),X_t.forEach(t),O9o=r(R$e," \u2014 "),SG=n(R$e,"A",{href:!0});var z_t=s(SG);V9o=r(z_t,"MegatronBertForCausalLM"),z_t.forEach(t),X9o=r(R$e," (Megatron-BERT model)"),R$e.forEach(t),z9o=i(Q),K2=n(Q,"LI",{});var P$e=s(K2);Dme=n(P$e,"STRONG",{});var Q_t=s(Dme);Q9o=r(Q_t,"openai-gpt"),Q_t.forEach(t),W9o=r(P$e," \u2014 "),RG=n(P$e,"A",{href:!0});var W_t=s(RG);H9o=r(W_t,"OpenAIGPTLMHeadModel"),W_t.forEach(t),U9o=r(P$e," (OpenAI GPT model)"),P$e.forEach(t),J9o=i(Q),Z2=n(Q,"LI",{});var B$e=s(Z2);Gme=n(B$e,"STRONG",{});var H_t=s(Gme);Y9o=r(H_t,"opt"),H_t.forEach(t),K9o=r(B$e," \u2014 "),PG=n(B$e,"A",{href:!0});var U_t=s(PG);Z9o=r(U_t,"OPTForCausalLM"),U_t.forEach(t),exo=r(B$e," (OPT model)"),B$e.forEach(t),oxo=i(Q),e1=n(Q,"LI",{});var I$e=s(e1);Ome=n(I$e,"STRONG",{});var J_t=s(Ome);rxo=r(J_t,"pegasus"),J_t.forEach(t),txo=r(I$e," \u2014 "),BG=n(I$e,"A",{href:!0});var Y_t=s(BG);axo=r(Y_t,"PegasusForCausalLM"),Y_t.forEach(t),nxo=r(I$e," (Pegasus model)"),I$e.forEach(t),sxo=i(Q),o1=n(Q,"LI",{});var N$e=s(o1);Vme=n(N$e,"STRONG",{});var K_t=s(Vme);lxo=r(K_t,"plbart"),K_t.forEach(t),ixo=r(N$e," \u2014 "),IG=n(N$e,"A",{href:!0});var Z_t=s(IG);dxo=r(Z_t,"PLBartForCausalLM"),Z_t.forEach(t),cxo=r(N$e," (PLBart model)"),N$e.forEach(t),fxo=i(Q),r1=n(Q,"LI",{});var q$e=s(r1);Xme=n(q$e,"STRONG",{});var eut=s(Xme);mxo=r(eut,"prophetnet"),eut.forEach(t),gxo=r(q$e," \u2014 "),NG=n(q$e,"A",{href:!0});var out=s(NG);hxo=r(out,"ProphetNetForCausalLM"),out.forEach(t),pxo=r(q$e," (ProphetNet model)"),q$e.forEach(t),_xo=i(Q),t1=n(Q,"LI",{});var j$e=s(t1);zme=n(j$e,"STRONG",{});var rut=s(zme);uxo=r(rut,"qdqbert"),rut.forEach(t),bxo=r(j$e," \u2014 "),qG=n(j$e,"A",{href:!0});var tut=s(qG);vxo=r(tut,"QDQBertLMHeadModel"),tut.forEach(t),Fxo=r(j$e," (QDQBert model)"),j$e.forEach(t),Txo=i(Q),a1=n(Q,"LI",{});var D$e=s(a1);Qme=n(D$e,"STRONG",{});var aut=s(Qme);Mxo=r(aut,"reformer"),aut.forEach(t),Exo=r(D$e," \u2014 "),jG=n(D$e,"A",{href:!0});var nut=s(jG);Cxo=r(nut,"ReformerModelWithLMHead"),nut.forEach(t),wxo=r(D$e," (Reformer model)"),D$e.forEach(t),Axo=i(Q),n1=n(Q,"LI",{});var G$e=s(n1);Wme=n(G$e,"STRONG",{});var sut=s(Wme);Lxo=r(sut,"rembert"),sut.forEach(t),yxo=r(G$e," \u2014 "),DG=n(G$e,"A",{href:!0});var lut=s(DG);xxo=r(lut,"RemBertForCausalLM"),lut.forEach(t),$xo=r(G$e," (RemBERT model)"),G$e.forEach(t),kxo=i(Q),s1=n(Q,"LI",{});var O$e=s(s1);Hme=n(O$e,"STRONG",{});var iut=s(Hme);Sxo=r(iut,"roberta"),iut.forEach(t),Rxo=r(O$e," \u2014 "),GG=n(O$e,"A",{href:!0});var dut=s(GG);Pxo=r(dut,"RobertaForCausalLM"),dut.forEach(t),Bxo=r(O$e," (RoBERTa model)"),O$e.forEach(t),Ixo=i(Q),l1=n(Q,"LI",{});var V$e=s(l1);Ume=n(V$e,"STRONG",{});var cut=s(Ume);Nxo=r(cut,"roformer"),cut.forEach(t),qxo=r(V$e," \u2014 "),OG=n(V$e,"A",{href:!0});var fut=s(OG);jxo=r(fut,"RoFormerForCausalLM"),fut.forEach(t),Dxo=r(V$e," (RoFormer model)"),V$e.forEach(t),Gxo=i(Q),i1=n(Q,"LI",{});var X$e=s(i1);Jme=n(X$e,"STRONG",{});var mut=s(Jme);Oxo=r(mut,"speech_to_text_2"),mut.forEach(t),Vxo=r(X$e," \u2014 "),VG=n(X$e,"A",{href:!0});var gut=s(VG);Xxo=r(gut,"Speech2Text2ForCausalLM"),gut.forEach(t),zxo=r(X$e," (Speech2Text2 model)"),X$e.forEach(t),Qxo=i(Q),d1=n(Q,"LI",{});var z$e=s(d1);Yme=n(z$e,"STRONG",{});var hut=s(Yme);Wxo=r(hut,"transfo-xl"),hut.forEach(t),Hxo=r(z$e," \u2014 "),XG=n(z$e,"A",{href:!0});var put=s(XG);Uxo=r(put,"TransfoXLLMHeadModel"),put.forEach(t),Jxo=r(z$e," (Transformer-XL model)"),z$e.forEach(t),Yxo=i(Q),c1=n(Q,"LI",{});var Q$e=s(c1);Kme=n(Q$e,"STRONG",{});var _ut=s(Kme);Kxo=r(_ut,"trocr"),_ut.forEach(t),Zxo=r(Q$e," \u2014 "),zG=n(Q$e,"A",{href:!0});var uut=s(zG);e$o=r(uut,"TrOCRForCausalLM"),uut.forEach(t),o$o=r(Q$e," (TrOCR model)"),Q$e.forEach(t),r$o=i(Q),f1=n(Q,"LI",{});var W$e=s(f1);Zme=n(W$e,"STRONG",{});var but=s(Zme);t$o=r(but,"xglm"),but.forEach(t),a$o=r(W$e," \u2014 "),QG=n(W$e,"A",{href:!0});var vut=s(QG);n$o=r(vut,"XGLMForCausalLM"),vut.forEach(t),s$o=r(W$e," (XGLM model)"),W$e.forEach(t),l$o=i(Q),m1=n(Q,"LI",{});var H$e=s(m1);ege=n(H$e,"STRONG",{});var Fut=s(ege);i$o=r(Fut,"xlm"),Fut.forEach(t),d$o=r(H$e," \u2014 "),WG=n(H$e,"A",{href:!0});var Tut=s(WG);c$o=r(Tut,"XLMWithLMHeadModel"),Tut.forEach(t),f$o=r(H$e," (XLM model)"),H$e.forEach(t),m$o=i(Q),g1=n(Q,"LI",{});var U$e=s(g1);oge=n(U$e,"STRONG",{});var Mut=s(oge);g$o=r(Mut,"xlm-prophetnet"),Mut.forEach(t),h$o=r(U$e," \u2014 "),HG=n(U$e,"A",{href:!0});var Eut=s(HG);p$o=r(Eut,"XLMProphetNetForCausalLM"),Eut.forEach(t),_$o=r(U$e," (XLM-ProphetNet model)"),U$e.forEach(t),u$o=i(Q),h1=n(Q,"LI",{});var J$e=s(h1);rge=n(J$e,"STRONG",{});var Cut=s(rge);b$o=r(Cut,"xlm-roberta"),Cut.forEach(t),v$o=r(J$e," \u2014 "),UG=n(J$e,"A",{href:!0});var wut=s(UG);F$o=r(wut,"XLMRobertaForCausalLM"),wut.forEach(t),T$o=r(J$e," (XLM-RoBERTa model)"),J$e.forEach(t),M$o=i(Q),p1=n(Q,"LI",{});var Y$e=s(p1);tge=n(Y$e,"STRONG",{});var Aut=s(tge);E$o=r(Aut,"xlm-roberta-xl"),Aut.forEach(t),C$o=r(Y$e," \u2014 "),JG=n(Y$e,"A",{href:!0});var Lut=s(JG);w$o=r(Lut,"XLMRobertaXLForCausalLM"),Lut.forEach(t),A$o=r(Y$e," (XLM-RoBERTa-XL model)"),Y$e.forEach(t),L$o=i(Q),_1=n(Q,"LI",{});var K$e=s(_1);age=n(K$e,"STRONG",{});var yut=s(age);y$o=r(yut,"xlnet"),yut.forEach(t),x$o=r(K$e," \u2014 "),YG=n(K$e,"A",{href:!0});var xut=s(YG);$$o=r(xut,"XLNetLMHeadModel"),xut.forEach(t),k$o=r(K$e," (XLNet model)"),K$e.forEach(t),Q.forEach(t),S$o=i(sa),u1=n(sa,"P",{});var Z$e=s(u1);R$o=r(Z$e,"The model is set in evaluation mode by default using "),nge=n(Z$e,"CODE",{});var $ut=s(nge);P$o=r($ut,"model.eval()"),$ut.forEach(t),B$o=r(Z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=n(Z$e,"CODE",{});var kut=s(sge);I$o=r(kut,"model.train()"),kut.forEach(t),Z$e.forEach(t),N$o=i(sa),T(b1.$$.fragment,sa),sa.forEach(t),el.forEach(t),ROe=i(f),zi=n(f,"H2",{class:!0});var jXe=s(zi);v1=n(jXe,"A",{id:!0,class:!0,href:!0});var Sut=s(v1);lge=n(Sut,"SPAN",{});var Rut=s(lge);T(EL.$$.fragment,Rut),Rut.forEach(t),Sut.forEach(t),q$o=i(jXe),ige=n(jXe,"SPAN",{});var Put=s(ige);j$o=r(Put,"AutoModelForMaskedLM"),Put.forEach(t),jXe.forEach(t),POe=i(f),So=n(f,"DIV",{class:!0});var ol=s(So);T(CL.$$.fragment,ol),D$o=i(ol),Qi=n(ol,"P",{});var joe=s(Qi);G$o=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KG=n(joe,"A",{href:!0});var But=s(KG);O$o=r(But,"from_pretrained()"),But.forEach(t),V$o=r(joe," class method or the "),ZG=n(joe,"A",{href:!0});var Iut=s(ZG);X$o=r(Iut,"from_config()"),Iut.forEach(t),z$o=r(joe,` class
method.`),joe.forEach(t),Q$o=i(ol),wL=n(ol,"P",{});var DXe=s(wL);W$o=r(DXe,"This class cannot be instantiated directly using "),dge=n(DXe,"CODE",{});var Nut=s(dge);H$o=r(Nut,"__init__()"),Nut.forEach(t),U$o=r(DXe," (throws an error)."),DXe.forEach(t),J$o=i(ol),it=n(ol,"DIV",{class:!0});var X0=s(it);T(AL.$$.fragment,X0),Y$o=i(X0),cge=n(X0,"P",{});var qut=s(cge);K$o=r(qut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qut.forEach(t),Z$o=i(X0),Wi=n(X0,"P",{});var Doe=s(Wi);eko=r(Doe,`Note:
Loading a model from its configuration file does `),fge=n(Doe,"STRONG",{});var jut=s(fge);oko=r(jut,"not"),jut.forEach(t),rko=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(Doe,"A",{href:!0});var Dut=s(eO);tko=r(Dut,"from_pretrained()"),Dut.forEach(t),ako=r(Doe," to load the model weights."),Doe.forEach(t),nko=i(X0),T(F1.$$.fragment,X0),X0.forEach(t),sko=i(ol),Ze=n(ol,"DIV",{class:!0});var la=s(Ze);T(LL.$$.fragment,la),lko=i(la),mge=n(la,"P",{});var Gut=s(mge);iko=r(Gut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Gut.forEach(t),dko=i(la),Ia=n(la,"P",{});var z0=s(Ia);cko=r(z0,"The model class to instantiate is selected based on the "),gge=n(z0,"CODE",{});var Out=s(gge);fko=r(Out,"model_type"),Out.forEach(t),mko=r(z0,` property of the config object (either
passed as an argument or loaded from `),hge=n(z0,"CODE",{});var Vut=s(hge);gko=r(Vut,"pretrained_model_name_or_path"),Vut.forEach(t),hko=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=n(z0,"CODE",{});var Xut=s(pge);pko=r(Xut,"pretrained_model_name_or_path"),Xut.forEach(t),_ko=r(z0,":"),z0.forEach(t),uko=i(la),W=n(la,"UL",{});var U=s(W);T1=n(U,"LI",{});var eke=s(T1);_ge=n(eke,"STRONG",{});var zut=s(_ge);bko=r(zut,"albert"),zut.forEach(t),vko=r(eke," \u2014 "),oO=n(eke,"A",{href:!0});var Qut=s(oO);Fko=r(Qut,"AlbertForMaskedLM"),Qut.forEach(t),Tko=r(eke," (ALBERT model)"),eke.forEach(t),Mko=i(U),M1=n(U,"LI",{});var oke=s(M1);uge=n(oke,"STRONG",{});var Wut=s(uge);Eko=r(Wut,"bart"),Wut.forEach(t),Cko=r(oke," \u2014 "),rO=n(oke,"A",{href:!0});var Hut=s(rO);wko=r(Hut,"BartForConditionalGeneration"),Hut.forEach(t),Ako=r(oke," (BART model)"),oke.forEach(t),Lko=i(U),E1=n(U,"LI",{});var rke=s(E1);bge=n(rke,"STRONG",{});var Uut=s(bge);yko=r(Uut,"bert"),Uut.forEach(t),xko=r(rke," \u2014 "),tO=n(rke,"A",{href:!0});var Jut=s(tO);$ko=r(Jut,"BertForMaskedLM"),Jut.forEach(t),kko=r(rke," (BERT model)"),rke.forEach(t),Sko=i(U),C1=n(U,"LI",{});var tke=s(C1);vge=n(tke,"STRONG",{});var Yut=s(vge);Rko=r(Yut,"big_bird"),Yut.forEach(t),Pko=r(tke," \u2014 "),aO=n(tke,"A",{href:!0});var Kut=s(aO);Bko=r(Kut,"BigBirdForMaskedLM"),Kut.forEach(t),Iko=r(tke," (BigBird model)"),tke.forEach(t),Nko=i(U),w1=n(U,"LI",{});var ake=s(w1);Fge=n(ake,"STRONG",{});var Zut=s(Fge);qko=r(Zut,"camembert"),Zut.forEach(t),jko=r(ake," \u2014 "),nO=n(ake,"A",{href:!0});var e2t=s(nO);Dko=r(e2t,"CamembertForMaskedLM"),e2t.forEach(t),Gko=r(ake," (CamemBERT model)"),ake.forEach(t),Oko=i(U),A1=n(U,"LI",{});var nke=s(A1);Tge=n(nke,"STRONG",{});var o2t=s(Tge);Vko=r(o2t,"convbert"),o2t.forEach(t),Xko=r(nke," \u2014 "),sO=n(nke,"A",{href:!0});var r2t=s(sO);zko=r(r2t,"ConvBertForMaskedLM"),r2t.forEach(t),Qko=r(nke," (ConvBERT model)"),nke.forEach(t),Wko=i(U),L1=n(U,"LI",{});var ske=s(L1);Mge=n(ske,"STRONG",{});var t2t=s(Mge);Hko=r(t2t,"data2vec-text"),t2t.forEach(t),Uko=r(ske," \u2014 "),lO=n(ske,"A",{href:!0});var a2t=s(lO);Jko=r(a2t,"Data2VecTextForMaskedLM"),a2t.forEach(t),Yko=r(ske," (Data2VecText model)"),ske.forEach(t),Kko=i(U),y1=n(U,"LI",{});var lke=s(y1);Ege=n(lke,"STRONG",{});var n2t=s(Ege);Zko=r(n2t,"deberta"),n2t.forEach(t),eSo=r(lke," \u2014 "),iO=n(lke,"A",{href:!0});var s2t=s(iO);oSo=r(s2t,"DebertaForMaskedLM"),s2t.forEach(t),rSo=r(lke," (DeBERTa model)"),lke.forEach(t),tSo=i(U),x1=n(U,"LI",{});var ike=s(x1);Cge=n(ike,"STRONG",{});var l2t=s(Cge);aSo=r(l2t,"deberta-v2"),l2t.forEach(t),nSo=r(ike," \u2014 "),dO=n(ike,"A",{href:!0});var i2t=s(dO);sSo=r(i2t,"DebertaV2ForMaskedLM"),i2t.forEach(t),lSo=r(ike," (DeBERTa-v2 model)"),ike.forEach(t),iSo=i(U),$1=n(U,"LI",{});var dke=s($1);wge=n(dke,"STRONG",{});var d2t=s(wge);dSo=r(d2t,"distilbert"),d2t.forEach(t),cSo=r(dke," \u2014 "),cO=n(dke,"A",{href:!0});var c2t=s(cO);fSo=r(c2t,"DistilBertForMaskedLM"),c2t.forEach(t),mSo=r(dke," (DistilBERT model)"),dke.forEach(t),gSo=i(U),k1=n(U,"LI",{});var cke=s(k1);Age=n(cke,"STRONG",{});var f2t=s(Age);hSo=r(f2t,"electra"),f2t.forEach(t),pSo=r(cke," \u2014 "),fO=n(cke,"A",{href:!0});var m2t=s(fO);_So=r(m2t,"ElectraForMaskedLM"),m2t.forEach(t),uSo=r(cke," (ELECTRA model)"),cke.forEach(t),bSo=i(U),S1=n(U,"LI",{});var fke=s(S1);Lge=n(fke,"STRONG",{});var g2t=s(Lge);vSo=r(g2t,"flaubert"),g2t.forEach(t),FSo=r(fke," \u2014 "),mO=n(fke,"A",{href:!0});var h2t=s(mO);TSo=r(h2t,"FlaubertWithLMHeadModel"),h2t.forEach(t),MSo=r(fke," (FlauBERT model)"),fke.forEach(t),ESo=i(U),R1=n(U,"LI",{});var mke=s(R1);yge=n(mke,"STRONG",{});var p2t=s(yge);CSo=r(p2t,"fnet"),p2t.forEach(t),wSo=r(mke," \u2014 "),gO=n(mke,"A",{href:!0});var _2t=s(gO);ASo=r(_2t,"FNetForMaskedLM"),_2t.forEach(t),LSo=r(mke," (FNet model)"),mke.forEach(t),ySo=i(U),P1=n(U,"LI",{});var gke=s(P1);xge=n(gke,"STRONG",{});var u2t=s(xge);xSo=r(u2t,"funnel"),u2t.forEach(t),$So=r(gke," \u2014 "),hO=n(gke,"A",{href:!0});var b2t=s(hO);kSo=r(b2t,"FunnelForMaskedLM"),b2t.forEach(t),SSo=r(gke," (Funnel Transformer model)"),gke.forEach(t),RSo=i(U),B1=n(U,"LI",{});var hke=s(B1);$ge=n(hke,"STRONG",{});var v2t=s($ge);PSo=r(v2t,"ibert"),v2t.forEach(t),BSo=r(hke," \u2014 "),pO=n(hke,"A",{href:!0});var F2t=s(pO);ISo=r(F2t,"IBertForMaskedLM"),F2t.forEach(t),NSo=r(hke," (I-BERT model)"),hke.forEach(t),qSo=i(U),I1=n(U,"LI",{});var pke=s(I1);kge=n(pke,"STRONG",{});var T2t=s(kge);jSo=r(T2t,"layoutlm"),T2t.forEach(t),DSo=r(pke," \u2014 "),_O=n(pke,"A",{href:!0});var M2t=s(_O);GSo=r(M2t,"LayoutLMForMaskedLM"),M2t.forEach(t),OSo=r(pke," (LayoutLM model)"),pke.forEach(t),VSo=i(U),N1=n(U,"LI",{});var _ke=s(N1);Sge=n(_ke,"STRONG",{});var E2t=s(Sge);XSo=r(E2t,"longformer"),E2t.forEach(t),zSo=r(_ke," \u2014 "),uO=n(_ke,"A",{href:!0});var C2t=s(uO);QSo=r(C2t,"LongformerForMaskedLM"),C2t.forEach(t),WSo=r(_ke," (Longformer model)"),_ke.forEach(t),HSo=i(U),q1=n(U,"LI",{});var uke=s(q1);Rge=n(uke,"STRONG",{});var w2t=s(Rge);USo=r(w2t,"luke"),w2t.forEach(t),JSo=r(uke," \u2014 "),bO=n(uke,"A",{href:!0});var A2t=s(bO);YSo=r(A2t,"LukeForMaskedLM"),A2t.forEach(t),KSo=r(uke," (LUKE model)"),uke.forEach(t),ZSo=i(U),j1=n(U,"LI",{});var bke=s(j1);Pge=n(bke,"STRONG",{});var L2t=s(Pge);eRo=r(L2t,"mbart"),L2t.forEach(t),oRo=r(bke," \u2014 "),vO=n(bke,"A",{href:!0});var y2t=s(vO);rRo=r(y2t,"MBartForConditionalGeneration"),y2t.forEach(t),tRo=r(bke," (mBART model)"),bke.forEach(t),aRo=i(U),D1=n(U,"LI",{});var vke=s(D1);Bge=n(vke,"STRONG",{});var x2t=s(Bge);nRo=r(x2t,"megatron-bert"),x2t.forEach(t),sRo=r(vke," \u2014 "),FO=n(vke,"A",{href:!0});var $2t=s(FO);lRo=r($2t,"MegatronBertForMaskedLM"),$2t.forEach(t),iRo=r(vke," (Megatron-BERT model)"),vke.forEach(t),dRo=i(U),G1=n(U,"LI",{});var Fke=s(G1);Ige=n(Fke,"STRONG",{});var k2t=s(Ige);cRo=r(k2t,"mobilebert"),k2t.forEach(t),fRo=r(Fke," \u2014 "),TO=n(Fke,"A",{href:!0});var S2t=s(TO);mRo=r(S2t,"MobileBertForMaskedLM"),S2t.forEach(t),gRo=r(Fke," (MobileBERT model)"),Fke.forEach(t),hRo=i(U),O1=n(U,"LI",{});var Tke=s(O1);Nge=n(Tke,"STRONG",{});var R2t=s(Nge);pRo=r(R2t,"mpnet"),R2t.forEach(t),_Ro=r(Tke," \u2014 "),MO=n(Tke,"A",{href:!0});var P2t=s(MO);uRo=r(P2t,"MPNetForMaskedLM"),P2t.forEach(t),bRo=r(Tke," (MPNet model)"),Tke.forEach(t),vRo=i(U),V1=n(U,"LI",{});var Mke=s(V1);qge=n(Mke,"STRONG",{});var B2t=s(qge);FRo=r(B2t,"nezha"),B2t.forEach(t),TRo=r(Mke," \u2014 "),EO=n(Mke,"A",{href:!0});var I2t=s(EO);MRo=r(I2t,"NezhaForMaskedLM"),I2t.forEach(t),ERo=r(Mke," (Nezha model)"),Mke.forEach(t),CRo=i(U),X1=n(U,"LI",{});var Eke=s(X1);jge=n(Eke,"STRONG",{});var N2t=s(jge);wRo=r(N2t,"nystromformer"),N2t.forEach(t),ARo=r(Eke," \u2014 "),CO=n(Eke,"A",{href:!0});var q2t=s(CO);LRo=r(q2t,"NystromformerForMaskedLM"),q2t.forEach(t),yRo=r(Eke," (Nystr\xF6mformer model)"),Eke.forEach(t),xRo=i(U),z1=n(U,"LI",{});var Cke=s(z1);Dge=n(Cke,"STRONG",{});var j2t=s(Dge);$Ro=r(j2t,"perceiver"),j2t.forEach(t),kRo=r(Cke," \u2014 "),wO=n(Cke,"A",{href:!0});var D2t=s(wO);SRo=r(D2t,"PerceiverForMaskedLM"),D2t.forEach(t),RRo=r(Cke," (Perceiver model)"),Cke.forEach(t),PRo=i(U),Q1=n(U,"LI",{});var wke=s(Q1);Gge=n(wke,"STRONG",{});var G2t=s(Gge);BRo=r(G2t,"qdqbert"),G2t.forEach(t),IRo=r(wke," \u2014 "),AO=n(wke,"A",{href:!0});var O2t=s(AO);NRo=r(O2t,"QDQBertForMaskedLM"),O2t.forEach(t),qRo=r(wke," (QDQBert model)"),wke.forEach(t),jRo=i(U),W1=n(U,"LI",{});var Ake=s(W1);Oge=n(Ake,"STRONG",{});var V2t=s(Oge);DRo=r(V2t,"reformer"),V2t.forEach(t),GRo=r(Ake," \u2014 "),LO=n(Ake,"A",{href:!0});var X2t=s(LO);ORo=r(X2t,"ReformerForMaskedLM"),X2t.forEach(t),VRo=r(Ake," (Reformer model)"),Ake.forEach(t),XRo=i(U),H1=n(U,"LI",{});var Lke=s(H1);Vge=n(Lke,"STRONG",{});var z2t=s(Vge);zRo=r(z2t,"rembert"),z2t.forEach(t),QRo=r(Lke," \u2014 "),yO=n(Lke,"A",{href:!0});var Q2t=s(yO);WRo=r(Q2t,"RemBertForMaskedLM"),Q2t.forEach(t),HRo=r(Lke," (RemBERT model)"),Lke.forEach(t),URo=i(U),U1=n(U,"LI",{});var yke=s(U1);Xge=n(yke,"STRONG",{});var W2t=s(Xge);JRo=r(W2t,"roberta"),W2t.forEach(t),YRo=r(yke," \u2014 "),xO=n(yke,"A",{href:!0});var H2t=s(xO);KRo=r(H2t,"RobertaForMaskedLM"),H2t.forEach(t),ZRo=r(yke," (RoBERTa model)"),yke.forEach(t),ePo=i(U),J1=n(U,"LI",{});var xke=s(J1);zge=n(xke,"STRONG",{});var U2t=s(zge);oPo=r(U2t,"roformer"),U2t.forEach(t),rPo=r(xke," \u2014 "),$O=n(xke,"A",{href:!0});var J2t=s($O);tPo=r(J2t,"RoFormerForMaskedLM"),J2t.forEach(t),aPo=r(xke," (RoFormer model)"),xke.forEach(t),nPo=i(U),Y1=n(U,"LI",{});var $ke=s(Y1);Qge=n($ke,"STRONG",{});var Y2t=s(Qge);sPo=r(Y2t,"squeezebert"),Y2t.forEach(t),lPo=r($ke," \u2014 "),kO=n($ke,"A",{href:!0});var K2t=s(kO);iPo=r(K2t,"SqueezeBertForMaskedLM"),K2t.forEach(t),dPo=r($ke," (SqueezeBERT model)"),$ke.forEach(t),cPo=i(U),K1=n(U,"LI",{});var kke=s(K1);Wge=n(kke,"STRONG",{});var Z2t=s(Wge);fPo=r(Z2t,"tapas"),Z2t.forEach(t),mPo=r(kke," \u2014 "),SO=n(kke,"A",{href:!0});var e1t=s(SO);gPo=r(e1t,"TapasForMaskedLM"),e1t.forEach(t),hPo=r(kke," (TAPAS model)"),kke.forEach(t),pPo=i(U),Z1=n(U,"LI",{});var Ske=s(Z1);Hge=n(Ske,"STRONG",{});var o1t=s(Hge);_Po=r(o1t,"wav2vec2"),o1t.forEach(t),uPo=r(Ske," \u2014 "),Uge=n(Ske,"CODE",{});var r1t=s(Uge);bPo=r(r1t,"Wav2Vec2ForMaskedLM"),r1t.forEach(t),vPo=r(Ske," (Wav2Vec2 model)"),Ske.forEach(t),FPo=i(U),eb=n(U,"LI",{});var Rke=s(eb);Jge=n(Rke,"STRONG",{});var t1t=s(Jge);TPo=r(t1t,"xlm"),t1t.forEach(t),MPo=r(Rke," \u2014 "),RO=n(Rke,"A",{href:!0});var a1t=s(RO);EPo=r(a1t,"XLMWithLMHeadModel"),a1t.forEach(t),CPo=r(Rke," (XLM model)"),Rke.forEach(t),wPo=i(U),ob=n(U,"LI",{});var Pke=s(ob);Yge=n(Pke,"STRONG",{});var n1t=s(Yge);APo=r(n1t,"xlm-roberta"),n1t.forEach(t),LPo=r(Pke," \u2014 "),PO=n(Pke,"A",{href:!0});var s1t=s(PO);yPo=r(s1t,"XLMRobertaForMaskedLM"),s1t.forEach(t),xPo=r(Pke," (XLM-RoBERTa model)"),Pke.forEach(t),$Po=i(U),rb=n(U,"LI",{});var Bke=s(rb);Kge=n(Bke,"STRONG",{});var l1t=s(Kge);kPo=r(l1t,"xlm-roberta-xl"),l1t.forEach(t),SPo=r(Bke," \u2014 "),BO=n(Bke,"A",{href:!0});var i1t=s(BO);RPo=r(i1t,"XLMRobertaXLForMaskedLM"),i1t.forEach(t),PPo=r(Bke," (XLM-RoBERTa-XL model)"),Bke.forEach(t),BPo=i(U),tb=n(U,"LI",{});var Ike=s(tb);Zge=n(Ike,"STRONG",{});var d1t=s(Zge);IPo=r(d1t,"yoso"),d1t.forEach(t),NPo=r(Ike," \u2014 "),IO=n(Ike,"A",{href:!0});var c1t=s(IO);qPo=r(c1t,"YosoForMaskedLM"),c1t.forEach(t),jPo=r(Ike," (YOSO model)"),Ike.forEach(t),U.forEach(t),DPo=i(la),ab=n(la,"P",{});var Nke=s(ab);GPo=r(Nke,"The model is set in evaluation mode by default using "),ehe=n(Nke,"CODE",{});var f1t=s(ehe);OPo=r(f1t,"model.eval()"),f1t.forEach(t),VPo=r(Nke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=n(Nke,"CODE",{});var m1t=s(ohe);XPo=r(m1t,"model.train()"),m1t.forEach(t),Nke.forEach(t),zPo=i(la),T(nb.$$.fragment,la),la.forEach(t),ol.forEach(t),BOe=i(f),Hi=n(f,"H2",{class:!0});var GXe=s(Hi);sb=n(GXe,"A",{id:!0,class:!0,href:!0});var g1t=s(sb);rhe=n(g1t,"SPAN",{});var h1t=s(rhe);T(yL.$$.fragment,h1t),h1t.forEach(t),g1t.forEach(t),QPo=i(GXe),the=n(GXe,"SPAN",{});var p1t=s(the);WPo=r(p1t,"AutoModelForSeq2SeqLM"),p1t.forEach(t),GXe.forEach(t),IOe=i(f),Ro=n(f,"DIV",{class:!0});var rl=s(Ro);T(xL.$$.fragment,rl),HPo=i(rl),Ui=n(rl,"P",{});var Goe=s(Ui);UPo=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NO=n(Goe,"A",{href:!0});var _1t=s(NO);JPo=r(_1t,"from_pretrained()"),_1t.forEach(t),YPo=r(Goe," class method or the "),qO=n(Goe,"A",{href:!0});var u1t=s(qO);KPo=r(u1t,"from_config()"),u1t.forEach(t),ZPo=r(Goe,` class
method.`),Goe.forEach(t),eBo=i(rl),$L=n(rl,"P",{});var OXe=s($L);oBo=r(OXe,"This class cannot be instantiated directly using "),ahe=n(OXe,"CODE",{});var b1t=s(ahe);rBo=r(b1t,"__init__()"),b1t.forEach(t),tBo=r(OXe," (throws an error)."),OXe.forEach(t),aBo=i(rl),dt=n(rl,"DIV",{class:!0});var Q0=s(dt);T(kL.$$.fragment,Q0),nBo=i(Q0),nhe=n(Q0,"P",{});var v1t=s(nhe);sBo=r(v1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),v1t.forEach(t),lBo=i(Q0),Ji=n(Q0,"P",{});var Ooe=s(Ji);iBo=r(Ooe,`Note:
Loading a model from its configuration file does `),she=n(Ooe,"STRONG",{});var F1t=s(she);dBo=r(F1t,"not"),F1t.forEach(t),cBo=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jO=n(Ooe,"A",{href:!0});var T1t=s(jO);fBo=r(T1t,"from_pretrained()"),T1t.forEach(t),mBo=r(Ooe," to load the model weights."),Ooe.forEach(t),gBo=i(Q0),T(lb.$$.fragment,Q0),Q0.forEach(t),hBo=i(rl),eo=n(rl,"DIV",{class:!0});var ia=s(eo);T(SL.$$.fragment,ia),pBo=i(ia),lhe=n(ia,"P",{});var M1t=s(lhe);_Bo=r(M1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),M1t.forEach(t),uBo=i(ia),Na=n(ia,"P",{});var W0=s(Na);bBo=r(W0,"The model class to instantiate is selected based on the "),ihe=n(W0,"CODE",{});var E1t=s(ihe);vBo=r(E1t,"model_type"),E1t.forEach(t),FBo=r(W0,` property of the config object (either
passed as an argument or loaded from `),dhe=n(W0,"CODE",{});var C1t=s(dhe);TBo=r(C1t,"pretrained_model_name_or_path"),C1t.forEach(t),MBo=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=n(W0,"CODE",{});var w1t=s(che);EBo=r(w1t,"pretrained_model_name_or_path"),w1t.forEach(t),CBo=r(W0,":"),W0.forEach(t),wBo=i(ia),pe=n(ia,"UL",{});var be=s(pe);ib=n(be,"LI",{});var qke=s(ib);fhe=n(qke,"STRONG",{});var A1t=s(fhe);ABo=r(A1t,"bart"),A1t.forEach(t),LBo=r(qke," \u2014 "),DO=n(qke,"A",{href:!0});var L1t=s(DO);yBo=r(L1t,"BartForConditionalGeneration"),L1t.forEach(t),xBo=r(qke," (BART model)"),qke.forEach(t),$Bo=i(be),db=n(be,"LI",{});var jke=s(db);mhe=n(jke,"STRONG",{});var y1t=s(mhe);kBo=r(y1t,"bigbird_pegasus"),y1t.forEach(t),SBo=r(jke," \u2014 "),GO=n(jke,"A",{href:!0});var x1t=s(GO);RBo=r(x1t,"BigBirdPegasusForConditionalGeneration"),x1t.forEach(t),PBo=r(jke," (BigBird-Pegasus model)"),jke.forEach(t),BBo=i(be),cb=n(be,"LI",{});var Dke=s(cb);ghe=n(Dke,"STRONG",{});var $1t=s(ghe);IBo=r($1t,"blenderbot"),$1t.forEach(t),NBo=r(Dke," \u2014 "),OO=n(Dke,"A",{href:!0});var k1t=s(OO);qBo=r(k1t,"BlenderbotForConditionalGeneration"),k1t.forEach(t),jBo=r(Dke," (Blenderbot model)"),Dke.forEach(t),DBo=i(be),fb=n(be,"LI",{});var Gke=s(fb);hhe=n(Gke,"STRONG",{});var S1t=s(hhe);GBo=r(S1t,"blenderbot-small"),S1t.forEach(t),OBo=r(Gke," \u2014 "),VO=n(Gke,"A",{href:!0});var R1t=s(VO);VBo=r(R1t,"BlenderbotSmallForConditionalGeneration"),R1t.forEach(t),XBo=r(Gke," (BlenderbotSmall model)"),Gke.forEach(t),zBo=i(be),mb=n(be,"LI",{});var Oke=s(mb);phe=n(Oke,"STRONG",{});var P1t=s(phe);QBo=r(P1t,"encoder-decoder"),P1t.forEach(t),WBo=r(Oke," \u2014 "),XO=n(Oke,"A",{href:!0});var B1t=s(XO);HBo=r(B1t,"EncoderDecoderModel"),B1t.forEach(t),UBo=r(Oke," (Encoder decoder model)"),Oke.forEach(t),JBo=i(be),gb=n(be,"LI",{});var Vke=s(gb);_he=n(Vke,"STRONG",{});var I1t=s(_he);YBo=r(I1t,"fsmt"),I1t.forEach(t),KBo=r(Vke," \u2014 "),zO=n(Vke,"A",{href:!0});var N1t=s(zO);ZBo=r(N1t,"FSMTForConditionalGeneration"),N1t.forEach(t),eIo=r(Vke," (FairSeq Machine-Translation model)"),Vke.forEach(t),oIo=i(be),hb=n(be,"LI",{});var Xke=s(hb);uhe=n(Xke,"STRONG",{});var q1t=s(uhe);rIo=r(q1t,"led"),q1t.forEach(t),tIo=r(Xke," \u2014 "),QO=n(Xke,"A",{href:!0});var j1t=s(QO);aIo=r(j1t,"LEDForConditionalGeneration"),j1t.forEach(t),nIo=r(Xke," (LED model)"),Xke.forEach(t),sIo=i(be),pb=n(be,"LI",{});var zke=s(pb);bhe=n(zke,"STRONG",{});var D1t=s(bhe);lIo=r(D1t,"longt5"),D1t.forEach(t),iIo=r(zke," \u2014 "),WO=n(zke,"A",{href:!0});var G1t=s(WO);dIo=r(G1t,"LongT5ForConditionalGeneration"),G1t.forEach(t),cIo=r(zke," (LongT5 model)"),zke.forEach(t),fIo=i(be),_b=n(be,"LI",{});var Qke=s(_b);vhe=n(Qke,"STRONG",{});var O1t=s(vhe);mIo=r(O1t,"m2m_100"),O1t.forEach(t),gIo=r(Qke," \u2014 "),HO=n(Qke,"A",{href:!0});var V1t=s(HO);hIo=r(V1t,"M2M100ForConditionalGeneration"),V1t.forEach(t),pIo=r(Qke," (M2M100 model)"),Qke.forEach(t),_Io=i(be),ub=n(be,"LI",{});var Wke=s(ub);Fhe=n(Wke,"STRONG",{});var X1t=s(Fhe);uIo=r(X1t,"marian"),X1t.forEach(t),bIo=r(Wke," \u2014 "),UO=n(Wke,"A",{href:!0});var z1t=s(UO);vIo=r(z1t,"MarianMTModel"),z1t.forEach(t),FIo=r(Wke," (Marian model)"),Wke.forEach(t),TIo=i(be),bb=n(be,"LI",{});var Hke=s(bb);The=n(Hke,"STRONG",{});var Q1t=s(The);MIo=r(Q1t,"mbart"),Q1t.forEach(t),EIo=r(Hke," \u2014 "),JO=n(Hke,"A",{href:!0});var W1t=s(JO);CIo=r(W1t,"MBartForConditionalGeneration"),W1t.forEach(t),wIo=r(Hke," (mBART model)"),Hke.forEach(t),AIo=i(be),vb=n(be,"LI",{});var Uke=s(vb);Mhe=n(Uke,"STRONG",{});var H1t=s(Mhe);LIo=r(H1t,"mt5"),H1t.forEach(t),yIo=r(Uke," \u2014 "),YO=n(Uke,"A",{href:!0});var U1t=s(YO);xIo=r(U1t,"MT5ForConditionalGeneration"),U1t.forEach(t),$Io=r(Uke," (MT5 model)"),Uke.forEach(t),kIo=i(be),Fb=n(be,"LI",{});var Jke=s(Fb);Ehe=n(Jke,"STRONG",{});var J1t=s(Ehe);SIo=r(J1t,"pegasus"),J1t.forEach(t),RIo=r(Jke," \u2014 "),KO=n(Jke,"A",{href:!0});var Y1t=s(KO);PIo=r(Y1t,"PegasusForConditionalGeneration"),Y1t.forEach(t),BIo=r(Jke," (Pegasus model)"),Jke.forEach(t),IIo=i(be),Tb=n(be,"LI",{});var Yke=s(Tb);Che=n(Yke,"STRONG",{});var K1t=s(Che);NIo=r(K1t,"plbart"),K1t.forEach(t),qIo=r(Yke," \u2014 "),ZO=n(Yke,"A",{href:!0});var Z1t=s(ZO);jIo=r(Z1t,"PLBartForConditionalGeneration"),Z1t.forEach(t),DIo=r(Yke," (PLBart model)"),Yke.forEach(t),GIo=i(be),Mb=n(be,"LI",{});var Kke=s(Mb);whe=n(Kke,"STRONG",{});var ebt=s(whe);OIo=r(ebt,"prophetnet"),ebt.forEach(t),VIo=r(Kke," \u2014 "),eV=n(Kke,"A",{href:!0});var obt=s(eV);XIo=r(obt,"ProphetNetForConditionalGeneration"),obt.forEach(t),zIo=r(Kke," (ProphetNet model)"),Kke.forEach(t),QIo=i(be),Eb=n(be,"LI",{});var Zke=s(Eb);Ahe=n(Zke,"STRONG",{});var rbt=s(Ahe);WIo=r(rbt,"t5"),rbt.forEach(t),HIo=r(Zke," \u2014 "),oV=n(Zke,"A",{href:!0});var tbt=s(oV);UIo=r(tbt,"T5ForConditionalGeneration"),tbt.forEach(t),JIo=r(Zke," (T5 model)"),Zke.forEach(t),YIo=i(be),Cb=n(be,"LI",{});var eSe=s(Cb);Lhe=n(eSe,"STRONG",{});var abt=s(Lhe);KIo=r(abt,"xlm-prophetnet"),abt.forEach(t),ZIo=r(eSe," \u2014 "),rV=n(eSe,"A",{href:!0});var nbt=s(rV);eNo=r(nbt,"XLMProphetNetForConditionalGeneration"),nbt.forEach(t),oNo=r(eSe," (XLM-ProphetNet model)"),eSe.forEach(t),be.forEach(t),rNo=i(ia),wb=n(ia,"P",{});var oSe=s(wb);tNo=r(oSe,"The model is set in evaluation mode by default using "),yhe=n(oSe,"CODE",{});var sbt=s(yhe);aNo=r(sbt,"model.eval()"),sbt.forEach(t),nNo=r(oSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=n(oSe,"CODE",{});var lbt=s(xhe);sNo=r(lbt,"model.train()"),lbt.forEach(t),oSe.forEach(t),lNo=i(ia),T(Ab.$$.fragment,ia),ia.forEach(t),rl.forEach(t),NOe=i(f),Yi=n(f,"H2",{class:!0});var VXe=s(Yi);Lb=n(VXe,"A",{id:!0,class:!0,href:!0});var ibt=s(Lb);$he=n(ibt,"SPAN",{});var dbt=s($he);T(RL.$$.fragment,dbt),dbt.forEach(t),ibt.forEach(t),iNo=i(VXe),khe=n(VXe,"SPAN",{});var cbt=s(khe);dNo=r(cbt,"AutoModelForSequenceClassification"),cbt.forEach(t),VXe.forEach(t),qOe=i(f),Po=n(f,"DIV",{class:!0});var tl=s(Po);T(PL.$$.fragment,tl),cNo=i(tl),Ki=n(tl,"P",{});var Voe=s(Ki);fNo=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tV=n(Voe,"A",{href:!0});var fbt=s(tV);mNo=r(fbt,"from_pretrained()"),fbt.forEach(t),gNo=r(Voe," class method or the "),aV=n(Voe,"A",{href:!0});var mbt=s(aV);hNo=r(mbt,"from_config()"),mbt.forEach(t),pNo=r(Voe,` class
method.`),Voe.forEach(t),_No=i(tl),BL=n(tl,"P",{});var XXe=s(BL);uNo=r(XXe,"This class cannot be instantiated directly using "),She=n(XXe,"CODE",{});var gbt=s(She);bNo=r(gbt,"__init__()"),gbt.forEach(t),vNo=r(XXe," (throws an error)."),XXe.forEach(t),FNo=i(tl),ct=n(tl,"DIV",{class:!0});var H0=s(ct);T(IL.$$.fragment,H0),TNo=i(H0),Rhe=n(H0,"P",{});var hbt=s(Rhe);MNo=r(hbt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hbt.forEach(t),ENo=i(H0),Zi=n(H0,"P",{});var Xoe=s(Zi);CNo=r(Xoe,`Note:
Loading a model from its configuration file does `),Phe=n(Xoe,"STRONG",{});var pbt=s(Phe);wNo=r(pbt,"not"),pbt.forEach(t),ANo=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nV=n(Xoe,"A",{href:!0});var _bt=s(nV);LNo=r(_bt,"from_pretrained()"),_bt.forEach(t),yNo=r(Xoe," to load the model weights."),Xoe.forEach(t),xNo=i(H0),T(yb.$$.fragment,H0),H0.forEach(t),$No=i(tl),oo=n(tl,"DIV",{class:!0});var da=s(oo);T(NL.$$.fragment,da),kNo=i(da),Bhe=n(da,"P",{});var ubt=s(Bhe);SNo=r(ubt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ubt.forEach(t),RNo=i(da),qa=n(da,"P",{});var U0=s(qa);PNo=r(U0,"The model class to instantiate is selected based on the "),Ihe=n(U0,"CODE",{});var bbt=s(Ihe);BNo=r(bbt,"model_type"),bbt.forEach(t),INo=r(U0,` property of the config object (either
passed as an argument or loaded from `),Nhe=n(U0,"CODE",{});var vbt=s(Nhe);NNo=r(vbt,"pretrained_model_name_or_path"),vbt.forEach(t),qNo=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n(U0,"CODE",{});var Fbt=s(qhe);jNo=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),DNo=r(U0,":"),U0.forEach(t),GNo=i(da),N=n(da,"UL",{});var q=s(N);xb=n(q,"LI",{});var rSe=s(xb);jhe=n(rSe,"STRONG",{});var Tbt=s(jhe);ONo=r(Tbt,"albert"),Tbt.forEach(t),VNo=r(rSe," \u2014 "),sV=n(rSe,"A",{href:!0});var Mbt=s(sV);XNo=r(Mbt,"AlbertForSequenceClassification"),Mbt.forEach(t),zNo=r(rSe," (ALBERT model)"),rSe.forEach(t),QNo=i(q),$b=n(q,"LI",{});var tSe=s($b);Dhe=n(tSe,"STRONG",{});var Ebt=s(Dhe);WNo=r(Ebt,"bart"),Ebt.forEach(t),HNo=r(tSe," \u2014 "),lV=n(tSe,"A",{href:!0});var Cbt=s(lV);UNo=r(Cbt,"BartForSequenceClassification"),Cbt.forEach(t),JNo=r(tSe," (BART model)"),tSe.forEach(t),YNo=i(q),kb=n(q,"LI",{});var aSe=s(kb);Ghe=n(aSe,"STRONG",{});var wbt=s(Ghe);KNo=r(wbt,"bert"),wbt.forEach(t),ZNo=r(aSe," \u2014 "),iV=n(aSe,"A",{href:!0});var Abt=s(iV);eqo=r(Abt,"BertForSequenceClassification"),Abt.forEach(t),oqo=r(aSe," (BERT model)"),aSe.forEach(t),rqo=i(q),Sb=n(q,"LI",{});var nSe=s(Sb);Ohe=n(nSe,"STRONG",{});var Lbt=s(Ohe);tqo=r(Lbt,"big_bird"),Lbt.forEach(t),aqo=r(nSe," \u2014 "),dV=n(nSe,"A",{href:!0});var ybt=s(dV);nqo=r(ybt,"BigBirdForSequenceClassification"),ybt.forEach(t),sqo=r(nSe," (BigBird model)"),nSe.forEach(t),lqo=i(q),Rb=n(q,"LI",{});var sSe=s(Rb);Vhe=n(sSe,"STRONG",{});var xbt=s(Vhe);iqo=r(xbt,"bigbird_pegasus"),xbt.forEach(t),dqo=r(sSe," \u2014 "),cV=n(sSe,"A",{href:!0});var $bt=s(cV);cqo=r($bt,"BigBirdPegasusForSequenceClassification"),$bt.forEach(t),fqo=r(sSe," (BigBird-Pegasus model)"),sSe.forEach(t),mqo=i(q),Pb=n(q,"LI",{});var lSe=s(Pb);Xhe=n(lSe,"STRONG",{});var kbt=s(Xhe);gqo=r(kbt,"bloom"),kbt.forEach(t),hqo=r(lSe," \u2014 "),fV=n(lSe,"A",{href:!0});var Sbt=s(fV);pqo=r(Sbt,"BloomForSequenceClassification"),Sbt.forEach(t),_qo=r(lSe," (BLOOM model)"),lSe.forEach(t),uqo=i(q),Bb=n(q,"LI",{});var iSe=s(Bb);zhe=n(iSe,"STRONG",{});var Rbt=s(zhe);bqo=r(Rbt,"camembert"),Rbt.forEach(t),vqo=r(iSe," \u2014 "),mV=n(iSe,"A",{href:!0});var Pbt=s(mV);Fqo=r(Pbt,"CamembertForSequenceClassification"),Pbt.forEach(t),Tqo=r(iSe," (CamemBERT model)"),iSe.forEach(t),Mqo=i(q),Ib=n(q,"LI",{});var dSe=s(Ib);Qhe=n(dSe,"STRONG",{});var Bbt=s(Qhe);Eqo=r(Bbt,"canine"),Bbt.forEach(t),Cqo=r(dSe," \u2014 "),gV=n(dSe,"A",{href:!0});var Ibt=s(gV);wqo=r(Ibt,"CanineForSequenceClassification"),Ibt.forEach(t),Aqo=r(dSe," (CANINE model)"),dSe.forEach(t),Lqo=i(q),Nb=n(q,"LI",{});var cSe=s(Nb);Whe=n(cSe,"STRONG",{});var Nbt=s(Whe);yqo=r(Nbt,"convbert"),Nbt.forEach(t),xqo=r(cSe," \u2014 "),hV=n(cSe,"A",{href:!0});var qbt=s(hV);$qo=r(qbt,"ConvBertForSequenceClassification"),qbt.forEach(t),kqo=r(cSe," (ConvBERT model)"),cSe.forEach(t),Sqo=i(q),qb=n(q,"LI",{});var fSe=s(qb);Hhe=n(fSe,"STRONG",{});var jbt=s(Hhe);Rqo=r(jbt,"ctrl"),jbt.forEach(t),Pqo=r(fSe," \u2014 "),pV=n(fSe,"A",{href:!0});var Dbt=s(pV);Bqo=r(Dbt,"CTRLForSequenceClassification"),Dbt.forEach(t),Iqo=r(fSe," (CTRL model)"),fSe.forEach(t),Nqo=i(q),jb=n(q,"LI",{});var mSe=s(jb);Uhe=n(mSe,"STRONG",{});var Gbt=s(Uhe);qqo=r(Gbt,"data2vec-text"),Gbt.forEach(t),jqo=r(mSe," \u2014 "),_V=n(mSe,"A",{href:!0});var Obt=s(_V);Dqo=r(Obt,"Data2VecTextForSequenceClassification"),Obt.forEach(t),Gqo=r(mSe," (Data2VecText model)"),mSe.forEach(t),Oqo=i(q),Db=n(q,"LI",{});var gSe=s(Db);Jhe=n(gSe,"STRONG",{});var Vbt=s(Jhe);Vqo=r(Vbt,"deberta"),Vbt.forEach(t),Xqo=r(gSe," \u2014 "),uV=n(gSe,"A",{href:!0});var Xbt=s(uV);zqo=r(Xbt,"DebertaForSequenceClassification"),Xbt.forEach(t),Qqo=r(gSe," (DeBERTa model)"),gSe.forEach(t),Wqo=i(q),Gb=n(q,"LI",{});var hSe=s(Gb);Yhe=n(hSe,"STRONG",{});var zbt=s(Yhe);Hqo=r(zbt,"deberta-v2"),zbt.forEach(t),Uqo=r(hSe," \u2014 "),bV=n(hSe,"A",{href:!0});var Qbt=s(bV);Jqo=r(Qbt,"DebertaV2ForSequenceClassification"),Qbt.forEach(t),Yqo=r(hSe," (DeBERTa-v2 model)"),hSe.forEach(t),Kqo=i(q),Ob=n(q,"LI",{});var pSe=s(Ob);Khe=n(pSe,"STRONG",{});var Wbt=s(Khe);Zqo=r(Wbt,"distilbert"),Wbt.forEach(t),ejo=r(pSe," \u2014 "),vV=n(pSe,"A",{href:!0});var Hbt=s(vV);ojo=r(Hbt,"DistilBertForSequenceClassification"),Hbt.forEach(t),rjo=r(pSe," (DistilBERT model)"),pSe.forEach(t),tjo=i(q),Vb=n(q,"LI",{});var _Se=s(Vb);Zhe=n(_Se,"STRONG",{});var Ubt=s(Zhe);ajo=r(Ubt,"electra"),Ubt.forEach(t),njo=r(_Se," \u2014 "),FV=n(_Se,"A",{href:!0});var Jbt=s(FV);sjo=r(Jbt,"ElectraForSequenceClassification"),Jbt.forEach(t),ljo=r(_Se," (ELECTRA model)"),_Se.forEach(t),ijo=i(q),Xb=n(q,"LI",{});var uSe=s(Xb);epe=n(uSe,"STRONG",{});var Ybt=s(epe);djo=r(Ybt,"flaubert"),Ybt.forEach(t),cjo=r(uSe," \u2014 "),TV=n(uSe,"A",{href:!0});var Kbt=s(TV);fjo=r(Kbt,"FlaubertForSequenceClassification"),Kbt.forEach(t),mjo=r(uSe," (FlauBERT model)"),uSe.forEach(t),gjo=i(q),zb=n(q,"LI",{});var bSe=s(zb);ope=n(bSe,"STRONG",{});var Zbt=s(ope);hjo=r(Zbt,"fnet"),Zbt.forEach(t),pjo=r(bSe," \u2014 "),MV=n(bSe,"A",{href:!0});var evt=s(MV);_jo=r(evt,"FNetForSequenceClassification"),evt.forEach(t),ujo=r(bSe," (FNet model)"),bSe.forEach(t),bjo=i(q),Qb=n(q,"LI",{});var vSe=s(Qb);rpe=n(vSe,"STRONG",{});var ovt=s(rpe);vjo=r(ovt,"funnel"),ovt.forEach(t),Fjo=r(vSe," \u2014 "),EV=n(vSe,"A",{href:!0});var rvt=s(EV);Tjo=r(rvt,"FunnelForSequenceClassification"),rvt.forEach(t),Mjo=r(vSe," (Funnel Transformer model)"),vSe.forEach(t),Ejo=i(q),Wb=n(q,"LI",{});var FSe=s(Wb);tpe=n(FSe,"STRONG",{});var tvt=s(tpe);Cjo=r(tvt,"gpt2"),tvt.forEach(t),wjo=r(FSe," \u2014 "),CV=n(FSe,"A",{href:!0});var avt=s(CV);Ajo=r(avt,"GPT2ForSequenceClassification"),avt.forEach(t),Ljo=r(FSe," (OpenAI GPT-2 model)"),FSe.forEach(t),yjo=i(q),Hb=n(q,"LI",{});var TSe=s(Hb);ape=n(TSe,"STRONG",{});var nvt=s(ape);xjo=r(nvt,"gpt_neo"),nvt.forEach(t),$jo=r(TSe," \u2014 "),wV=n(TSe,"A",{href:!0});var svt=s(wV);kjo=r(svt,"GPTNeoForSequenceClassification"),svt.forEach(t),Sjo=r(TSe," (GPT Neo model)"),TSe.forEach(t),Rjo=i(q),Ub=n(q,"LI",{});var MSe=s(Ub);npe=n(MSe,"STRONG",{});var lvt=s(npe);Pjo=r(lvt,"gptj"),lvt.forEach(t),Bjo=r(MSe," \u2014 "),AV=n(MSe,"A",{href:!0});var ivt=s(AV);Ijo=r(ivt,"GPTJForSequenceClassification"),ivt.forEach(t),Njo=r(MSe," (GPT-J model)"),MSe.forEach(t),qjo=i(q),Jb=n(q,"LI",{});var ESe=s(Jb);spe=n(ESe,"STRONG",{});var dvt=s(spe);jjo=r(dvt,"ibert"),dvt.forEach(t),Djo=r(ESe," \u2014 "),LV=n(ESe,"A",{href:!0});var cvt=s(LV);Gjo=r(cvt,"IBertForSequenceClassification"),cvt.forEach(t),Ojo=r(ESe," (I-BERT model)"),ESe.forEach(t),Vjo=i(q),Yb=n(q,"LI",{});var CSe=s(Yb);lpe=n(CSe,"STRONG",{});var fvt=s(lpe);Xjo=r(fvt,"layoutlm"),fvt.forEach(t),zjo=r(CSe," \u2014 "),yV=n(CSe,"A",{href:!0});var mvt=s(yV);Qjo=r(mvt,"LayoutLMForSequenceClassification"),mvt.forEach(t),Wjo=r(CSe," (LayoutLM model)"),CSe.forEach(t),Hjo=i(q),Kb=n(q,"LI",{});var wSe=s(Kb);ipe=n(wSe,"STRONG",{});var gvt=s(ipe);Ujo=r(gvt,"layoutlmv2"),gvt.forEach(t),Jjo=r(wSe," \u2014 "),xV=n(wSe,"A",{href:!0});var hvt=s(xV);Yjo=r(hvt,"LayoutLMv2ForSequenceClassification"),hvt.forEach(t),Kjo=r(wSe," (LayoutLMv2 model)"),wSe.forEach(t),Zjo=i(q),Zb=n(q,"LI",{});var ASe=s(Zb);dpe=n(ASe,"STRONG",{});var pvt=s(dpe);eDo=r(pvt,"layoutlmv3"),pvt.forEach(t),oDo=r(ASe," \u2014 "),$V=n(ASe,"A",{href:!0});var _vt=s($V);rDo=r(_vt,"LayoutLMv3ForSequenceClassification"),_vt.forEach(t),tDo=r(ASe," (LayoutLMv3 model)"),ASe.forEach(t),aDo=i(q),ev=n(q,"LI",{});var LSe=s(ev);cpe=n(LSe,"STRONG",{});var uvt=s(cpe);nDo=r(uvt,"led"),uvt.forEach(t),sDo=r(LSe," \u2014 "),kV=n(LSe,"A",{href:!0});var bvt=s(kV);lDo=r(bvt,"LEDForSequenceClassification"),bvt.forEach(t),iDo=r(LSe," (LED model)"),LSe.forEach(t),dDo=i(q),ov=n(q,"LI",{});var ySe=s(ov);fpe=n(ySe,"STRONG",{});var vvt=s(fpe);cDo=r(vvt,"longformer"),vvt.forEach(t),fDo=r(ySe," \u2014 "),SV=n(ySe,"A",{href:!0});var Fvt=s(SV);mDo=r(Fvt,"LongformerForSequenceClassification"),Fvt.forEach(t),gDo=r(ySe," (Longformer model)"),ySe.forEach(t),hDo=i(q),rv=n(q,"LI",{});var xSe=s(rv);mpe=n(xSe,"STRONG",{});var Tvt=s(mpe);pDo=r(Tvt,"mbart"),Tvt.forEach(t),_Do=r(xSe," \u2014 "),RV=n(xSe,"A",{href:!0});var Mvt=s(RV);uDo=r(Mvt,"MBartForSequenceClassification"),Mvt.forEach(t),bDo=r(xSe," (mBART model)"),xSe.forEach(t),vDo=i(q),tv=n(q,"LI",{});var $Se=s(tv);gpe=n($Se,"STRONG",{});var Evt=s(gpe);FDo=r(Evt,"megatron-bert"),Evt.forEach(t),TDo=r($Se," \u2014 "),PV=n($Se,"A",{href:!0});var Cvt=s(PV);MDo=r(Cvt,"MegatronBertForSequenceClassification"),Cvt.forEach(t),EDo=r($Se," (Megatron-BERT model)"),$Se.forEach(t),CDo=i(q),av=n(q,"LI",{});var kSe=s(av);hpe=n(kSe,"STRONG",{});var wvt=s(hpe);wDo=r(wvt,"mobilebert"),wvt.forEach(t),ADo=r(kSe," \u2014 "),BV=n(kSe,"A",{href:!0});var Avt=s(BV);LDo=r(Avt,"MobileBertForSequenceClassification"),Avt.forEach(t),yDo=r(kSe," (MobileBERT model)"),kSe.forEach(t),xDo=i(q),nv=n(q,"LI",{});var SSe=s(nv);ppe=n(SSe,"STRONG",{});var Lvt=s(ppe);$Do=r(Lvt,"mpnet"),Lvt.forEach(t),kDo=r(SSe," \u2014 "),IV=n(SSe,"A",{href:!0});var yvt=s(IV);SDo=r(yvt,"MPNetForSequenceClassification"),yvt.forEach(t),RDo=r(SSe," (MPNet model)"),SSe.forEach(t),PDo=i(q),sv=n(q,"LI",{});var RSe=s(sv);_pe=n(RSe,"STRONG",{});var xvt=s(_pe);BDo=r(xvt,"nezha"),xvt.forEach(t),IDo=r(RSe," \u2014 "),NV=n(RSe,"A",{href:!0});var $vt=s(NV);NDo=r($vt,"NezhaForSequenceClassification"),$vt.forEach(t),qDo=r(RSe," (Nezha model)"),RSe.forEach(t),jDo=i(q),lv=n(q,"LI",{});var PSe=s(lv);upe=n(PSe,"STRONG",{});var kvt=s(upe);DDo=r(kvt,"nystromformer"),kvt.forEach(t),GDo=r(PSe," \u2014 "),qV=n(PSe,"A",{href:!0});var Svt=s(qV);ODo=r(Svt,"NystromformerForSequenceClassification"),Svt.forEach(t),VDo=r(PSe," (Nystr\xF6mformer model)"),PSe.forEach(t),XDo=i(q),iv=n(q,"LI",{});var BSe=s(iv);bpe=n(BSe,"STRONG",{});var Rvt=s(bpe);zDo=r(Rvt,"openai-gpt"),Rvt.forEach(t),QDo=r(BSe," \u2014 "),jV=n(BSe,"A",{href:!0});var Pvt=s(jV);WDo=r(Pvt,"OpenAIGPTForSequenceClassification"),Pvt.forEach(t),HDo=r(BSe," (OpenAI GPT model)"),BSe.forEach(t),UDo=i(q),dv=n(q,"LI",{});var ISe=s(dv);vpe=n(ISe,"STRONG",{});var Bvt=s(vpe);JDo=r(Bvt,"perceiver"),Bvt.forEach(t),YDo=r(ISe," \u2014 "),DV=n(ISe,"A",{href:!0});var Ivt=s(DV);KDo=r(Ivt,"PerceiverForSequenceClassification"),Ivt.forEach(t),ZDo=r(ISe," (Perceiver model)"),ISe.forEach(t),eGo=i(q),cv=n(q,"LI",{});var NSe=s(cv);Fpe=n(NSe,"STRONG",{});var Nvt=s(Fpe);oGo=r(Nvt,"plbart"),Nvt.forEach(t),rGo=r(NSe," \u2014 "),GV=n(NSe,"A",{href:!0});var qvt=s(GV);tGo=r(qvt,"PLBartForSequenceClassification"),qvt.forEach(t),aGo=r(NSe," (PLBart model)"),NSe.forEach(t),nGo=i(q),fv=n(q,"LI",{});var qSe=s(fv);Tpe=n(qSe,"STRONG",{});var jvt=s(Tpe);sGo=r(jvt,"qdqbert"),jvt.forEach(t),lGo=r(qSe," \u2014 "),OV=n(qSe,"A",{href:!0});var Dvt=s(OV);iGo=r(Dvt,"QDQBertForSequenceClassification"),Dvt.forEach(t),dGo=r(qSe," (QDQBert model)"),qSe.forEach(t),cGo=i(q),mv=n(q,"LI",{});var jSe=s(mv);Mpe=n(jSe,"STRONG",{});var Gvt=s(Mpe);fGo=r(Gvt,"reformer"),Gvt.forEach(t),mGo=r(jSe," \u2014 "),VV=n(jSe,"A",{href:!0});var Ovt=s(VV);gGo=r(Ovt,"ReformerForSequenceClassification"),Ovt.forEach(t),hGo=r(jSe," (Reformer model)"),jSe.forEach(t),pGo=i(q),gv=n(q,"LI",{});var DSe=s(gv);Epe=n(DSe,"STRONG",{});var Vvt=s(Epe);_Go=r(Vvt,"rembert"),Vvt.forEach(t),uGo=r(DSe," \u2014 "),XV=n(DSe,"A",{href:!0});var Xvt=s(XV);bGo=r(Xvt,"RemBertForSequenceClassification"),Xvt.forEach(t),vGo=r(DSe," (RemBERT model)"),DSe.forEach(t),FGo=i(q),hv=n(q,"LI",{});var GSe=s(hv);Cpe=n(GSe,"STRONG",{});var zvt=s(Cpe);TGo=r(zvt,"roberta"),zvt.forEach(t),MGo=r(GSe," \u2014 "),zV=n(GSe,"A",{href:!0});var Qvt=s(zV);EGo=r(Qvt,"RobertaForSequenceClassification"),Qvt.forEach(t),CGo=r(GSe," (RoBERTa model)"),GSe.forEach(t),wGo=i(q),pv=n(q,"LI",{});var OSe=s(pv);wpe=n(OSe,"STRONG",{});var Wvt=s(wpe);AGo=r(Wvt,"roformer"),Wvt.forEach(t),LGo=r(OSe," \u2014 "),QV=n(OSe,"A",{href:!0});var Hvt=s(QV);yGo=r(Hvt,"RoFormerForSequenceClassification"),Hvt.forEach(t),xGo=r(OSe," (RoFormer model)"),OSe.forEach(t),$Go=i(q),_v=n(q,"LI",{});var VSe=s(_v);Ape=n(VSe,"STRONG",{});var Uvt=s(Ape);kGo=r(Uvt,"squeezebert"),Uvt.forEach(t),SGo=r(VSe," \u2014 "),WV=n(VSe,"A",{href:!0});var Jvt=s(WV);RGo=r(Jvt,"SqueezeBertForSequenceClassification"),Jvt.forEach(t),PGo=r(VSe," (SqueezeBERT model)"),VSe.forEach(t),BGo=i(q),uv=n(q,"LI",{});var XSe=s(uv);Lpe=n(XSe,"STRONG",{});var Yvt=s(Lpe);IGo=r(Yvt,"tapas"),Yvt.forEach(t),NGo=r(XSe," \u2014 "),HV=n(XSe,"A",{href:!0});var Kvt=s(HV);qGo=r(Kvt,"TapasForSequenceClassification"),Kvt.forEach(t),jGo=r(XSe," (TAPAS model)"),XSe.forEach(t),DGo=i(q),bv=n(q,"LI",{});var zSe=s(bv);ype=n(zSe,"STRONG",{});var Zvt=s(ype);GGo=r(Zvt,"transfo-xl"),Zvt.forEach(t),OGo=r(zSe," \u2014 "),UV=n(zSe,"A",{href:!0});var eFt=s(UV);VGo=r(eFt,"TransfoXLForSequenceClassification"),eFt.forEach(t),XGo=r(zSe," (Transformer-XL model)"),zSe.forEach(t),zGo=i(q),vv=n(q,"LI",{});var QSe=s(vv);xpe=n(QSe,"STRONG",{});var oFt=s(xpe);QGo=r(oFt,"xlm"),oFt.forEach(t),WGo=r(QSe," \u2014 "),JV=n(QSe,"A",{href:!0});var rFt=s(JV);HGo=r(rFt,"XLMForSequenceClassification"),rFt.forEach(t),UGo=r(QSe," (XLM model)"),QSe.forEach(t),JGo=i(q),Fv=n(q,"LI",{});var WSe=s(Fv);$pe=n(WSe,"STRONG",{});var tFt=s($pe);YGo=r(tFt,"xlm-roberta"),tFt.forEach(t),KGo=r(WSe," \u2014 "),YV=n(WSe,"A",{href:!0});var aFt=s(YV);ZGo=r(aFt,"XLMRobertaForSequenceClassification"),aFt.forEach(t),eOo=r(WSe," (XLM-RoBERTa model)"),WSe.forEach(t),oOo=i(q),Tv=n(q,"LI",{});var HSe=s(Tv);kpe=n(HSe,"STRONG",{});var nFt=s(kpe);rOo=r(nFt,"xlm-roberta-xl"),nFt.forEach(t),tOo=r(HSe," \u2014 "),KV=n(HSe,"A",{href:!0});var sFt=s(KV);aOo=r(sFt,"XLMRobertaXLForSequenceClassification"),sFt.forEach(t),nOo=r(HSe," (XLM-RoBERTa-XL model)"),HSe.forEach(t),sOo=i(q),Mv=n(q,"LI",{});var USe=s(Mv);Spe=n(USe,"STRONG",{});var lFt=s(Spe);lOo=r(lFt,"xlnet"),lFt.forEach(t),iOo=r(USe," \u2014 "),ZV=n(USe,"A",{href:!0});var iFt=s(ZV);dOo=r(iFt,"XLNetForSequenceClassification"),iFt.forEach(t),cOo=r(USe," (XLNet model)"),USe.forEach(t),fOo=i(q),Ev=n(q,"LI",{});var JSe=s(Ev);Rpe=n(JSe,"STRONG",{});var dFt=s(Rpe);mOo=r(dFt,"yoso"),dFt.forEach(t),gOo=r(JSe," \u2014 "),eX=n(JSe,"A",{href:!0});var cFt=s(eX);hOo=r(cFt,"YosoForSequenceClassification"),cFt.forEach(t),pOo=r(JSe," (YOSO model)"),JSe.forEach(t),q.forEach(t),_Oo=i(da),Cv=n(da,"P",{});var YSe=s(Cv);uOo=r(YSe,"The model is set in evaluation mode by default using "),Ppe=n(YSe,"CODE",{});var fFt=s(Ppe);bOo=r(fFt,"model.eval()"),fFt.forEach(t),vOo=r(YSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=n(YSe,"CODE",{});var mFt=s(Bpe);FOo=r(mFt,"model.train()"),mFt.forEach(t),YSe.forEach(t),TOo=i(da),T(wv.$$.fragment,da),da.forEach(t),tl.forEach(t),jOe=i(f),ed=n(f,"H2",{class:!0});var zXe=s(ed);Av=n(zXe,"A",{id:!0,class:!0,href:!0});var gFt=s(Av);Ipe=n(gFt,"SPAN",{});var hFt=s(Ipe);T(qL.$$.fragment,hFt),hFt.forEach(t),gFt.forEach(t),MOo=i(zXe),Npe=n(zXe,"SPAN",{});var pFt=s(Npe);EOo=r(pFt,"AutoModelForMultipleChoice"),pFt.forEach(t),zXe.forEach(t),DOe=i(f),Bo=n(f,"DIV",{class:!0});var al=s(Bo);T(jL.$$.fragment,al),COo=i(al),od=n(al,"P",{});var zoe=s(od);wOo=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oX=n(zoe,"A",{href:!0});var _Ft=s(oX);AOo=r(_Ft,"from_pretrained()"),_Ft.forEach(t),LOo=r(zoe," class method or the "),rX=n(zoe,"A",{href:!0});var uFt=s(rX);yOo=r(uFt,"from_config()"),uFt.forEach(t),xOo=r(zoe,` class
method.`),zoe.forEach(t),$Oo=i(al),DL=n(al,"P",{});var QXe=s(DL);kOo=r(QXe,"This class cannot be instantiated directly using "),qpe=n(QXe,"CODE",{});var bFt=s(qpe);SOo=r(bFt,"__init__()"),bFt.forEach(t),ROo=r(QXe," (throws an error)."),QXe.forEach(t),POo=i(al),ft=n(al,"DIV",{class:!0});var J0=s(ft);T(GL.$$.fragment,J0),BOo=i(J0),jpe=n(J0,"P",{});var vFt=s(jpe);IOo=r(vFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vFt.forEach(t),NOo=i(J0),rd=n(J0,"P",{});var Qoe=s(rd);qOo=r(Qoe,`Note:
Loading a model from its configuration file does `),Dpe=n(Qoe,"STRONG",{});var FFt=s(Dpe);jOo=r(FFt,"not"),FFt.forEach(t),DOo=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(Qoe,"A",{href:!0});var TFt=s(tX);GOo=r(TFt,"from_pretrained()"),TFt.forEach(t),OOo=r(Qoe," to load the model weights."),Qoe.forEach(t),VOo=i(J0),T(Lv.$$.fragment,J0),J0.forEach(t),XOo=i(al),ro=n(al,"DIV",{class:!0});var ca=s(ro);T(OL.$$.fragment,ca),zOo=i(ca),Gpe=n(ca,"P",{});var MFt=s(Gpe);QOo=r(MFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MFt.forEach(t),WOo=i(ca),ja=n(ca,"P",{});var Y0=s(ja);HOo=r(Y0,"The model class to instantiate is selected based on the "),Ope=n(Y0,"CODE",{});var EFt=s(Ope);UOo=r(EFt,"model_type"),EFt.forEach(t),JOo=r(Y0,` property of the config object (either
passed as an argument or loaded from `),Vpe=n(Y0,"CODE",{});var CFt=s(Vpe);YOo=r(CFt,"pretrained_model_name_or_path"),CFt.forEach(t),KOo=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=n(Y0,"CODE",{});var wFt=s(Xpe);ZOo=r(wFt,"pretrained_model_name_or_path"),wFt.forEach(t),eVo=r(Y0,":"),Y0.forEach(t),oVo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);yv=n(ee,"LI",{});var KSe=s(yv);zpe=n(KSe,"STRONG",{});var AFt=s(zpe);rVo=r(AFt,"albert"),AFt.forEach(t),tVo=r(KSe," \u2014 "),aX=n(KSe,"A",{href:!0});var LFt=s(aX);aVo=r(LFt,"AlbertForMultipleChoice"),LFt.forEach(t),nVo=r(KSe," (ALBERT model)"),KSe.forEach(t),sVo=i(ee),xv=n(ee,"LI",{});var ZSe=s(xv);Qpe=n(ZSe,"STRONG",{});var yFt=s(Qpe);lVo=r(yFt,"bert"),yFt.forEach(t),iVo=r(ZSe," \u2014 "),nX=n(ZSe,"A",{href:!0});var xFt=s(nX);dVo=r(xFt,"BertForMultipleChoice"),xFt.forEach(t),cVo=r(ZSe," (BERT model)"),ZSe.forEach(t),fVo=i(ee),$v=n(ee,"LI",{});var eRe=s($v);Wpe=n(eRe,"STRONG",{});var $Ft=s(Wpe);mVo=r($Ft,"big_bird"),$Ft.forEach(t),gVo=r(eRe," \u2014 "),sX=n(eRe,"A",{href:!0});var kFt=s(sX);hVo=r(kFt,"BigBirdForMultipleChoice"),kFt.forEach(t),pVo=r(eRe," (BigBird model)"),eRe.forEach(t),_Vo=i(ee),kv=n(ee,"LI",{});var oRe=s(kv);Hpe=n(oRe,"STRONG",{});var SFt=s(Hpe);uVo=r(SFt,"camembert"),SFt.forEach(t),bVo=r(oRe," \u2014 "),lX=n(oRe,"A",{href:!0});var RFt=s(lX);vVo=r(RFt,"CamembertForMultipleChoice"),RFt.forEach(t),FVo=r(oRe," (CamemBERT model)"),oRe.forEach(t),TVo=i(ee),Sv=n(ee,"LI",{});var rRe=s(Sv);Upe=n(rRe,"STRONG",{});var PFt=s(Upe);MVo=r(PFt,"canine"),PFt.forEach(t),EVo=r(rRe," \u2014 "),iX=n(rRe,"A",{href:!0});var BFt=s(iX);CVo=r(BFt,"CanineForMultipleChoice"),BFt.forEach(t),wVo=r(rRe," (CANINE model)"),rRe.forEach(t),AVo=i(ee),Rv=n(ee,"LI",{});var tRe=s(Rv);Jpe=n(tRe,"STRONG",{});var IFt=s(Jpe);LVo=r(IFt,"convbert"),IFt.forEach(t),yVo=r(tRe," \u2014 "),dX=n(tRe,"A",{href:!0});var NFt=s(dX);xVo=r(NFt,"ConvBertForMultipleChoice"),NFt.forEach(t),$Vo=r(tRe," (ConvBERT model)"),tRe.forEach(t),kVo=i(ee),Pv=n(ee,"LI",{});var aRe=s(Pv);Ype=n(aRe,"STRONG",{});var qFt=s(Ype);SVo=r(qFt,"data2vec-text"),qFt.forEach(t),RVo=r(aRe," \u2014 "),cX=n(aRe,"A",{href:!0});var jFt=s(cX);PVo=r(jFt,"Data2VecTextForMultipleChoice"),jFt.forEach(t),BVo=r(aRe," (Data2VecText model)"),aRe.forEach(t),IVo=i(ee),Bv=n(ee,"LI",{});var nRe=s(Bv);Kpe=n(nRe,"STRONG",{});var DFt=s(Kpe);NVo=r(DFt,"deberta-v2"),DFt.forEach(t),qVo=r(nRe," \u2014 "),fX=n(nRe,"A",{href:!0});var GFt=s(fX);jVo=r(GFt,"DebertaV2ForMultipleChoice"),GFt.forEach(t),DVo=r(nRe," (DeBERTa-v2 model)"),nRe.forEach(t),GVo=i(ee),Iv=n(ee,"LI",{});var sRe=s(Iv);Zpe=n(sRe,"STRONG",{});var OFt=s(Zpe);OVo=r(OFt,"distilbert"),OFt.forEach(t),VVo=r(sRe," \u2014 "),mX=n(sRe,"A",{href:!0});var VFt=s(mX);XVo=r(VFt,"DistilBertForMultipleChoice"),VFt.forEach(t),zVo=r(sRe," (DistilBERT model)"),sRe.forEach(t),QVo=i(ee),Nv=n(ee,"LI",{});var lRe=s(Nv);e_e=n(lRe,"STRONG",{});var XFt=s(e_e);WVo=r(XFt,"electra"),XFt.forEach(t),HVo=r(lRe," \u2014 "),gX=n(lRe,"A",{href:!0});var zFt=s(gX);UVo=r(zFt,"ElectraForMultipleChoice"),zFt.forEach(t),JVo=r(lRe," (ELECTRA model)"),lRe.forEach(t),YVo=i(ee),qv=n(ee,"LI",{});var iRe=s(qv);o_e=n(iRe,"STRONG",{});var QFt=s(o_e);KVo=r(QFt,"flaubert"),QFt.forEach(t),ZVo=r(iRe," \u2014 "),hX=n(iRe,"A",{href:!0});var WFt=s(hX);eXo=r(WFt,"FlaubertForMultipleChoice"),WFt.forEach(t),oXo=r(iRe," (FlauBERT model)"),iRe.forEach(t),rXo=i(ee),jv=n(ee,"LI",{});var dRe=s(jv);r_e=n(dRe,"STRONG",{});var HFt=s(r_e);tXo=r(HFt,"fnet"),HFt.forEach(t),aXo=r(dRe," \u2014 "),pX=n(dRe,"A",{href:!0});var UFt=s(pX);nXo=r(UFt,"FNetForMultipleChoice"),UFt.forEach(t),sXo=r(dRe," (FNet model)"),dRe.forEach(t),lXo=i(ee),Dv=n(ee,"LI",{});var cRe=s(Dv);t_e=n(cRe,"STRONG",{});var JFt=s(t_e);iXo=r(JFt,"funnel"),JFt.forEach(t),dXo=r(cRe," \u2014 "),_X=n(cRe,"A",{href:!0});var YFt=s(_X);cXo=r(YFt,"FunnelForMultipleChoice"),YFt.forEach(t),fXo=r(cRe," (Funnel Transformer model)"),cRe.forEach(t),mXo=i(ee),Gv=n(ee,"LI",{});var fRe=s(Gv);a_e=n(fRe,"STRONG",{});var KFt=s(a_e);gXo=r(KFt,"ibert"),KFt.forEach(t),hXo=r(fRe," \u2014 "),uX=n(fRe,"A",{href:!0});var ZFt=s(uX);pXo=r(ZFt,"IBertForMultipleChoice"),ZFt.forEach(t),_Xo=r(fRe," (I-BERT model)"),fRe.forEach(t),uXo=i(ee),Ov=n(ee,"LI",{});var mRe=s(Ov);n_e=n(mRe,"STRONG",{});var e6t=s(n_e);bXo=r(e6t,"longformer"),e6t.forEach(t),vXo=r(mRe," \u2014 "),bX=n(mRe,"A",{href:!0});var o6t=s(bX);FXo=r(o6t,"LongformerForMultipleChoice"),o6t.forEach(t),TXo=r(mRe," (Longformer model)"),mRe.forEach(t),MXo=i(ee),Vv=n(ee,"LI",{});var gRe=s(Vv);s_e=n(gRe,"STRONG",{});var r6t=s(s_e);EXo=r(r6t,"megatron-bert"),r6t.forEach(t),CXo=r(gRe," \u2014 "),vX=n(gRe,"A",{href:!0});var t6t=s(vX);wXo=r(t6t,"MegatronBertForMultipleChoice"),t6t.forEach(t),AXo=r(gRe," (Megatron-BERT model)"),gRe.forEach(t),LXo=i(ee),Xv=n(ee,"LI",{});var hRe=s(Xv);l_e=n(hRe,"STRONG",{});var a6t=s(l_e);yXo=r(a6t,"mobilebert"),a6t.forEach(t),xXo=r(hRe," \u2014 "),FX=n(hRe,"A",{href:!0});var n6t=s(FX);$Xo=r(n6t,"MobileBertForMultipleChoice"),n6t.forEach(t),kXo=r(hRe," (MobileBERT model)"),hRe.forEach(t),SXo=i(ee),zv=n(ee,"LI",{});var pRe=s(zv);i_e=n(pRe,"STRONG",{});var s6t=s(i_e);RXo=r(s6t,"mpnet"),s6t.forEach(t),PXo=r(pRe," \u2014 "),TX=n(pRe,"A",{href:!0});var l6t=s(TX);BXo=r(l6t,"MPNetForMultipleChoice"),l6t.forEach(t),IXo=r(pRe," (MPNet model)"),pRe.forEach(t),NXo=i(ee),Qv=n(ee,"LI",{});var _Re=s(Qv);d_e=n(_Re,"STRONG",{});var i6t=s(d_e);qXo=r(i6t,"nezha"),i6t.forEach(t),jXo=r(_Re," \u2014 "),MX=n(_Re,"A",{href:!0});var d6t=s(MX);DXo=r(d6t,"NezhaForMultipleChoice"),d6t.forEach(t),GXo=r(_Re," (Nezha model)"),_Re.forEach(t),OXo=i(ee),Wv=n(ee,"LI",{});var uRe=s(Wv);c_e=n(uRe,"STRONG",{});var c6t=s(c_e);VXo=r(c6t,"nystromformer"),c6t.forEach(t),XXo=r(uRe," \u2014 "),EX=n(uRe,"A",{href:!0});var f6t=s(EX);zXo=r(f6t,"NystromformerForMultipleChoice"),f6t.forEach(t),QXo=r(uRe," (Nystr\xF6mformer model)"),uRe.forEach(t),WXo=i(ee),Hv=n(ee,"LI",{});var bRe=s(Hv);f_e=n(bRe,"STRONG",{});var m6t=s(f_e);HXo=r(m6t,"qdqbert"),m6t.forEach(t),UXo=r(bRe," \u2014 "),CX=n(bRe,"A",{href:!0});var g6t=s(CX);JXo=r(g6t,"QDQBertForMultipleChoice"),g6t.forEach(t),YXo=r(bRe," (QDQBert model)"),bRe.forEach(t),KXo=i(ee),Uv=n(ee,"LI",{});var vRe=s(Uv);m_e=n(vRe,"STRONG",{});var h6t=s(m_e);ZXo=r(h6t,"rembert"),h6t.forEach(t),ezo=r(vRe," \u2014 "),wX=n(vRe,"A",{href:!0});var p6t=s(wX);ozo=r(p6t,"RemBertForMultipleChoice"),p6t.forEach(t),rzo=r(vRe," (RemBERT model)"),vRe.forEach(t),tzo=i(ee),Jv=n(ee,"LI",{});var FRe=s(Jv);g_e=n(FRe,"STRONG",{});var _6t=s(g_e);azo=r(_6t,"roberta"),_6t.forEach(t),nzo=r(FRe," \u2014 "),AX=n(FRe,"A",{href:!0});var u6t=s(AX);szo=r(u6t,"RobertaForMultipleChoice"),u6t.forEach(t),lzo=r(FRe," (RoBERTa model)"),FRe.forEach(t),izo=i(ee),Yv=n(ee,"LI",{});var TRe=s(Yv);h_e=n(TRe,"STRONG",{});var b6t=s(h_e);dzo=r(b6t,"roformer"),b6t.forEach(t),czo=r(TRe," \u2014 "),LX=n(TRe,"A",{href:!0});var v6t=s(LX);fzo=r(v6t,"RoFormerForMultipleChoice"),v6t.forEach(t),mzo=r(TRe," (RoFormer model)"),TRe.forEach(t),gzo=i(ee),Kv=n(ee,"LI",{});var MRe=s(Kv);p_e=n(MRe,"STRONG",{});var F6t=s(p_e);hzo=r(F6t,"squeezebert"),F6t.forEach(t),pzo=r(MRe," \u2014 "),yX=n(MRe,"A",{href:!0});var T6t=s(yX);_zo=r(T6t,"SqueezeBertForMultipleChoice"),T6t.forEach(t),uzo=r(MRe," (SqueezeBERT model)"),MRe.forEach(t),bzo=i(ee),Zv=n(ee,"LI",{});var ERe=s(Zv);__e=n(ERe,"STRONG",{});var M6t=s(__e);vzo=r(M6t,"xlm"),M6t.forEach(t),Fzo=r(ERe," \u2014 "),xX=n(ERe,"A",{href:!0});var E6t=s(xX);Tzo=r(E6t,"XLMForMultipleChoice"),E6t.forEach(t),Mzo=r(ERe," (XLM model)"),ERe.forEach(t),Ezo=i(ee),eF=n(ee,"LI",{});var CRe=s(eF);u_e=n(CRe,"STRONG",{});var C6t=s(u_e);Czo=r(C6t,"xlm-roberta"),C6t.forEach(t),wzo=r(CRe," \u2014 "),$X=n(CRe,"A",{href:!0});var w6t=s($X);Azo=r(w6t,"XLMRobertaForMultipleChoice"),w6t.forEach(t),Lzo=r(CRe," (XLM-RoBERTa model)"),CRe.forEach(t),yzo=i(ee),oF=n(ee,"LI",{});var wRe=s(oF);b_e=n(wRe,"STRONG",{});var A6t=s(b_e);xzo=r(A6t,"xlm-roberta-xl"),A6t.forEach(t),$zo=r(wRe," \u2014 "),kX=n(wRe,"A",{href:!0});var L6t=s(kX);kzo=r(L6t,"XLMRobertaXLForMultipleChoice"),L6t.forEach(t),Szo=r(wRe," (XLM-RoBERTa-XL model)"),wRe.forEach(t),Rzo=i(ee),rF=n(ee,"LI",{});var ARe=s(rF);v_e=n(ARe,"STRONG",{});var y6t=s(v_e);Pzo=r(y6t,"xlnet"),y6t.forEach(t),Bzo=r(ARe," \u2014 "),SX=n(ARe,"A",{href:!0});var x6t=s(SX);Izo=r(x6t,"XLNetForMultipleChoice"),x6t.forEach(t),Nzo=r(ARe," (XLNet model)"),ARe.forEach(t),qzo=i(ee),tF=n(ee,"LI",{});var LRe=s(tF);F_e=n(LRe,"STRONG",{});var $6t=s(F_e);jzo=r($6t,"yoso"),$6t.forEach(t),Dzo=r(LRe," \u2014 "),RX=n(LRe,"A",{href:!0});var k6t=s(RX);Gzo=r(k6t,"YosoForMultipleChoice"),k6t.forEach(t),Ozo=r(LRe," (YOSO model)"),LRe.forEach(t),ee.forEach(t),Vzo=i(ca),aF=n(ca,"P",{});var yRe=s(aF);Xzo=r(yRe,"The model is set in evaluation mode by default using "),T_e=n(yRe,"CODE",{});var S6t=s(T_e);zzo=r(S6t,"model.eval()"),S6t.forEach(t),Qzo=r(yRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=n(yRe,"CODE",{});var R6t=s(M_e);Wzo=r(R6t,"model.train()"),R6t.forEach(t),yRe.forEach(t),Hzo=i(ca),T(nF.$$.fragment,ca),ca.forEach(t),al.forEach(t),GOe=i(f),td=n(f,"H2",{class:!0});var WXe=s(td);sF=n(WXe,"A",{id:!0,class:!0,href:!0});var P6t=s(sF);E_e=n(P6t,"SPAN",{});var B6t=s(E_e);T(VL.$$.fragment,B6t),B6t.forEach(t),P6t.forEach(t),Uzo=i(WXe),C_e=n(WXe,"SPAN",{});var I6t=s(C_e);Jzo=r(I6t,"AutoModelForNextSentencePrediction"),I6t.forEach(t),WXe.forEach(t),OOe=i(f),Io=n(f,"DIV",{class:!0});var nl=s(Io);T(XL.$$.fragment,nl),Yzo=i(nl),ad=n(nl,"P",{});var Woe=s(ad);Kzo=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PX=n(Woe,"A",{href:!0});var N6t=s(PX);Zzo=r(N6t,"from_pretrained()"),N6t.forEach(t),eQo=r(Woe," class method or the "),BX=n(Woe,"A",{href:!0});var q6t=s(BX);oQo=r(q6t,"from_config()"),q6t.forEach(t),rQo=r(Woe,` class
method.`),Woe.forEach(t),tQo=i(nl),zL=n(nl,"P",{});var HXe=s(zL);aQo=r(HXe,"This class cannot be instantiated directly using "),w_e=n(HXe,"CODE",{});var j6t=s(w_e);nQo=r(j6t,"__init__()"),j6t.forEach(t),sQo=r(HXe," (throws an error)."),HXe.forEach(t),lQo=i(nl),mt=n(nl,"DIV",{class:!0});var K0=s(mt);T(QL.$$.fragment,K0),iQo=i(K0),A_e=n(K0,"P",{});var D6t=s(A_e);dQo=r(D6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),D6t.forEach(t),cQo=i(K0),nd=n(K0,"P",{});var Hoe=s(nd);fQo=r(Hoe,`Note:
Loading a model from its configuration file does `),L_e=n(Hoe,"STRONG",{});var G6t=s(L_e);mQo=r(G6t,"not"),G6t.forEach(t),gQo=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(Hoe,"A",{href:!0});var O6t=s(IX);hQo=r(O6t,"from_pretrained()"),O6t.forEach(t),pQo=r(Hoe," to load the model weights."),Hoe.forEach(t),_Qo=i(K0),T(lF.$$.fragment,K0),K0.forEach(t),uQo=i(nl),to=n(nl,"DIV",{class:!0});var fa=s(to);T(WL.$$.fragment,fa),bQo=i(fa),y_e=n(fa,"P",{});var V6t=s(y_e);vQo=r(V6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),V6t.forEach(t),FQo=i(fa),Da=n(fa,"P",{});var Z0=s(Da);TQo=r(Z0,"The model class to instantiate is selected based on the "),x_e=n(Z0,"CODE",{});var X6t=s(x_e);MQo=r(X6t,"model_type"),X6t.forEach(t),EQo=r(Z0,` property of the config object (either
passed as an argument or loaded from `),$_e=n(Z0,"CODE",{});var z6t=s($_e);CQo=r(z6t,"pretrained_model_name_or_path"),z6t.forEach(t),wQo=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=n(Z0,"CODE",{});var Q6t=s(k_e);AQo=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),LQo=r(Z0,":"),Z0.forEach(t),yQo=i(fa),No=n(fa,"UL",{});var ma=s(No);iF=n(ma,"LI",{});var xRe=s(iF);S_e=n(xRe,"STRONG",{});var W6t=s(S_e);xQo=r(W6t,"bert"),W6t.forEach(t),$Qo=r(xRe," \u2014 "),NX=n(xRe,"A",{href:!0});var H6t=s(NX);kQo=r(H6t,"BertForNextSentencePrediction"),H6t.forEach(t),SQo=r(xRe," (BERT model)"),xRe.forEach(t),RQo=i(ma),dF=n(ma,"LI",{});var $Re=s(dF);R_e=n($Re,"STRONG",{});var U6t=s(R_e);PQo=r(U6t,"fnet"),U6t.forEach(t),BQo=r($Re," \u2014 "),qX=n($Re,"A",{href:!0});var J6t=s(qX);IQo=r(J6t,"FNetForNextSentencePrediction"),J6t.forEach(t),NQo=r($Re," (FNet model)"),$Re.forEach(t),qQo=i(ma),cF=n(ma,"LI",{});var kRe=s(cF);P_e=n(kRe,"STRONG",{});var Y6t=s(P_e);jQo=r(Y6t,"megatron-bert"),Y6t.forEach(t),DQo=r(kRe," \u2014 "),jX=n(kRe,"A",{href:!0});var K6t=s(jX);GQo=r(K6t,"MegatronBertForNextSentencePrediction"),K6t.forEach(t),OQo=r(kRe," (Megatron-BERT model)"),kRe.forEach(t),VQo=i(ma),fF=n(ma,"LI",{});var SRe=s(fF);B_e=n(SRe,"STRONG",{});var Z6t=s(B_e);XQo=r(Z6t,"mobilebert"),Z6t.forEach(t),zQo=r(SRe," \u2014 "),DX=n(SRe,"A",{href:!0});var eTt=s(DX);QQo=r(eTt,"MobileBertForNextSentencePrediction"),eTt.forEach(t),WQo=r(SRe," (MobileBERT model)"),SRe.forEach(t),HQo=i(ma),mF=n(ma,"LI",{});var RRe=s(mF);I_e=n(RRe,"STRONG",{});var oTt=s(I_e);UQo=r(oTt,"nezha"),oTt.forEach(t),JQo=r(RRe," \u2014 "),GX=n(RRe,"A",{href:!0});var rTt=s(GX);YQo=r(rTt,"NezhaForNextSentencePrediction"),rTt.forEach(t),KQo=r(RRe," (Nezha model)"),RRe.forEach(t),ZQo=i(ma),gF=n(ma,"LI",{});var PRe=s(gF);N_e=n(PRe,"STRONG",{});var tTt=s(N_e);eWo=r(tTt,"qdqbert"),tTt.forEach(t),oWo=r(PRe," \u2014 "),OX=n(PRe,"A",{href:!0});var aTt=s(OX);rWo=r(aTt,"QDQBertForNextSentencePrediction"),aTt.forEach(t),tWo=r(PRe," (QDQBert model)"),PRe.forEach(t),ma.forEach(t),aWo=i(fa),hF=n(fa,"P",{});var BRe=s(hF);nWo=r(BRe,"The model is set in evaluation mode by default using "),q_e=n(BRe,"CODE",{});var nTt=s(q_e);sWo=r(nTt,"model.eval()"),nTt.forEach(t),lWo=r(BRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j_e=n(BRe,"CODE",{});var sTt=s(j_e);iWo=r(sTt,"model.train()"),sTt.forEach(t),BRe.forEach(t),dWo=i(fa),T(pF.$$.fragment,fa),fa.forEach(t),nl.forEach(t),VOe=i(f),sd=n(f,"H2",{class:!0});var UXe=s(sd);_F=n(UXe,"A",{id:!0,class:!0,href:!0});var lTt=s(_F);D_e=n(lTt,"SPAN",{});var iTt=s(D_e);T(HL.$$.fragment,iTt),iTt.forEach(t),lTt.forEach(t),cWo=i(UXe),G_e=n(UXe,"SPAN",{});var dTt=s(G_e);fWo=r(dTt,"AutoModelForTokenClassification"),dTt.forEach(t),UXe.forEach(t),XOe=i(f),qo=n(f,"DIV",{class:!0});var sl=s(qo);T(UL.$$.fragment,sl),mWo=i(sl),ld=n(sl,"P",{});var Uoe=s(ld);gWo=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VX=n(Uoe,"A",{href:!0});var cTt=s(VX);hWo=r(cTt,"from_pretrained()"),cTt.forEach(t),pWo=r(Uoe," class method or the "),XX=n(Uoe,"A",{href:!0});var fTt=s(XX);_Wo=r(fTt,"from_config()"),fTt.forEach(t),uWo=r(Uoe,` class
method.`),Uoe.forEach(t),bWo=i(sl),JL=n(sl,"P",{});var JXe=s(JL);vWo=r(JXe,"This class cannot be instantiated directly using "),O_e=n(JXe,"CODE",{});var mTt=s(O_e);FWo=r(mTt,"__init__()"),mTt.forEach(t),TWo=r(JXe," (throws an error)."),JXe.forEach(t),MWo=i(sl),gt=n(sl,"DIV",{class:!0});var ew=s(gt);T(YL.$$.fragment,ew),EWo=i(ew),V_e=n(ew,"P",{});var gTt=s(V_e);CWo=r(gTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gTt.forEach(t),wWo=i(ew),id=n(ew,"P",{});var Joe=s(id);AWo=r(Joe,`Note:
Loading a model from its configuration file does `),X_e=n(Joe,"STRONG",{});var hTt=s(X_e);LWo=r(hTt,"not"),hTt.forEach(t),yWo=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(Joe,"A",{href:!0});var pTt=s(zX);xWo=r(pTt,"from_pretrained()"),pTt.forEach(t),$Wo=r(Joe," to load the model weights."),Joe.forEach(t),kWo=i(ew),T(uF.$$.fragment,ew),ew.forEach(t),SWo=i(sl),ao=n(sl,"DIV",{class:!0});var ga=s(ao);T(KL.$$.fragment,ga),RWo=i(ga),z_e=n(ga,"P",{});var _Tt=s(z_e);PWo=r(_Tt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Tt.forEach(t),BWo=i(ga),Ga=n(ga,"P",{});var ow=s(Ga);IWo=r(ow,"The model class to instantiate is selected based on the "),Q_e=n(ow,"CODE",{});var uTt=s(Q_e);NWo=r(uTt,"model_type"),uTt.forEach(t),qWo=r(ow,` property of the config object (either
passed as an argument or loaded from `),W_e=n(ow,"CODE",{});var bTt=s(W_e);jWo=r(bTt,"pretrained_model_name_or_path"),bTt.forEach(t),DWo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=n(ow,"CODE",{});var vTt=s(H_e);GWo=r(vTt,"pretrained_model_name_or_path"),vTt.forEach(t),OWo=r(ow,":"),ow.forEach(t),VWo=i(ga),H=n(ga,"UL",{});var J=s(H);bF=n(J,"LI",{});var IRe=s(bF);U_e=n(IRe,"STRONG",{});var FTt=s(U_e);XWo=r(FTt,"albert"),FTt.forEach(t),zWo=r(IRe," \u2014 "),QX=n(IRe,"A",{href:!0});var TTt=s(QX);QWo=r(TTt,"AlbertForTokenClassification"),TTt.forEach(t),WWo=r(IRe," (ALBERT model)"),IRe.forEach(t),HWo=i(J),vF=n(J,"LI",{});var NRe=s(vF);J_e=n(NRe,"STRONG",{});var MTt=s(J_e);UWo=r(MTt,"bert"),MTt.forEach(t),JWo=r(NRe," \u2014 "),WX=n(NRe,"A",{href:!0});var ETt=s(WX);YWo=r(ETt,"BertForTokenClassification"),ETt.forEach(t),KWo=r(NRe," (BERT model)"),NRe.forEach(t),ZWo=i(J),FF=n(J,"LI",{});var qRe=s(FF);Y_e=n(qRe,"STRONG",{});var CTt=s(Y_e);eHo=r(CTt,"big_bird"),CTt.forEach(t),oHo=r(qRe," \u2014 "),HX=n(qRe,"A",{href:!0});var wTt=s(HX);rHo=r(wTt,"BigBirdForTokenClassification"),wTt.forEach(t),tHo=r(qRe," (BigBird model)"),qRe.forEach(t),aHo=i(J),TF=n(J,"LI",{});var jRe=s(TF);K_e=n(jRe,"STRONG",{});var ATt=s(K_e);nHo=r(ATt,"bloom"),ATt.forEach(t),sHo=r(jRe," \u2014 "),UX=n(jRe,"A",{href:!0});var LTt=s(UX);lHo=r(LTt,"BloomForTokenClassification"),LTt.forEach(t),iHo=r(jRe," (BLOOM model)"),jRe.forEach(t),dHo=i(J),MF=n(J,"LI",{});var DRe=s(MF);Z_e=n(DRe,"STRONG",{});var yTt=s(Z_e);cHo=r(yTt,"camembert"),yTt.forEach(t),fHo=r(DRe," \u2014 "),JX=n(DRe,"A",{href:!0});var xTt=s(JX);mHo=r(xTt,"CamembertForTokenClassification"),xTt.forEach(t),gHo=r(DRe," (CamemBERT model)"),DRe.forEach(t),hHo=i(J),EF=n(J,"LI",{});var GRe=s(EF);eue=n(GRe,"STRONG",{});var $Tt=s(eue);pHo=r($Tt,"canine"),$Tt.forEach(t),_Ho=r(GRe," \u2014 "),YX=n(GRe,"A",{href:!0});var kTt=s(YX);uHo=r(kTt,"CanineForTokenClassification"),kTt.forEach(t),bHo=r(GRe," (CANINE model)"),GRe.forEach(t),vHo=i(J),CF=n(J,"LI",{});var ORe=s(CF);oue=n(ORe,"STRONG",{});var STt=s(oue);FHo=r(STt,"convbert"),STt.forEach(t),THo=r(ORe," \u2014 "),KX=n(ORe,"A",{href:!0});var RTt=s(KX);MHo=r(RTt,"ConvBertForTokenClassification"),RTt.forEach(t),EHo=r(ORe," (ConvBERT model)"),ORe.forEach(t),CHo=i(J),wF=n(J,"LI",{});var VRe=s(wF);rue=n(VRe,"STRONG",{});var PTt=s(rue);wHo=r(PTt,"data2vec-text"),PTt.forEach(t),AHo=r(VRe," \u2014 "),ZX=n(VRe,"A",{href:!0});var BTt=s(ZX);LHo=r(BTt,"Data2VecTextForTokenClassification"),BTt.forEach(t),yHo=r(VRe," (Data2VecText model)"),VRe.forEach(t),xHo=i(J),AF=n(J,"LI",{});var XRe=s(AF);tue=n(XRe,"STRONG",{});var ITt=s(tue);$Ho=r(ITt,"deberta"),ITt.forEach(t),kHo=r(XRe," \u2014 "),ez=n(XRe,"A",{href:!0});var NTt=s(ez);SHo=r(NTt,"DebertaForTokenClassification"),NTt.forEach(t),RHo=r(XRe," (DeBERTa model)"),XRe.forEach(t),PHo=i(J),LF=n(J,"LI",{});var zRe=s(LF);aue=n(zRe,"STRONG",{});var qTt=s(aue);BHo=r(qTt,"deberta-v2"),qTt.forEach(t),IHo=r(zRe," \u2014 "),oz=n(zRe,"A",{href:!0});var jTt=s(oz);NHo=r(jTt,"DebertaV2ForTokenClassification"),jTt.forEach(t),qHo=r(zRe," (DeBERTa-v2 model)"),zRe.forEach(t),jHo=i(J),yF=n(J,"LI",{});var QRe=s(yF);nue=n(QRe,"STRONG",{});var DTt=s(nue);DHo=r(DTt,"distilbert"),DTt.forEach(t),GHo=r(QRe," \u2014 "),rz=n(QRe,"A",{href:!0});var GTt=s(rz);OHo=r(GTt,"DistilBertForTokenClassification"),GTt.forEach(t),VHo=r(QRe," (DistilBERT model)"),QRe.forEach(t),XHo=i(J),xF=n(J,"LI",{});var WRe=s(xF);sue=n(WRe,"STRONG",{});var OTt=s(sue);zHo=r(OTt,"electra"),OTt.forEach(t),QHo=r(WRe," \u2014 "),tz=n(WRe,"A",{href:!0});var VTt=s(tz);WHo=r(VTt,"ElectraForTokenClassification"),VTt.forEach(t),HHo=r(WRe," (ELECTRA model)"),WRe.forEach(t),UHo=i(J),$F=n(J,"LI",{});var HRe=s($F);lue=n(HRe,"STRONG",{});var XTt=s(lue);JHo=r(XTt,"flaubert"),XTt.forEach(t),YHo=r(HRe," \u2014 "),az=n(HRe,"A",{href:!0});var zTt=s(az);KHo=r(zTt,"FlaubertForTokenClassification"),zTt.forEach(t),ZHo=r(HRe," (FlauBERT model)"),HRe.forEach(t),eUo=i(J),kF=n(J,"LI",{});var URe=s(kF);iue=n(URe,"STRONG",{});var QTt=s(iue);oUo=r(QTt,"fnet"),QTt.forEach(t),rUo=r(URe," \u2014 "),nz=n(URe,"A",{href:!0});var WTt=s(nz);tUo=r(WTt,"FNetForTokenClassification"),WTt.forEach(t),aUo=r(URe," (FNet model)"),URe.forEach(t),nUo=i(J),SF=n(J,"LI",{});var JRe=s(SF);due=n(JRe,"STRONG",{});var HTt=s(due);sUo=r(HTt,"funnel"),HTt.forEach(t),lUo=r(JRe," \u2014 "),sz=n(JRe,"A",{href:!0});var UTt=s(sz);iUo=r(UTt,"FunnelForTokenClassification"),UTt.forEach(t),dUo=r(JRe," (Funnel Transformer model)"),JRe.forEach(t),cUo=i(J),RF=n(J,"LI",{});var YRe=s(RF);cue=n(YRe,"STRONG",{});var JTt=s(cue);fUo=r(JTt,"gpt2"),JTt.forEach(t),mUo=r(YRe," \u2014 "),lz=n(YRe,"A",{href:!0});var YTt=s(lz);gUo=r(YTt,"GPT2ForTokenClassification"),YTt.forEach(t),hUo=r(YRe," (OpenAI GPT-2 model)"),YRe.forEach(t),pUo=i(J),PF=n(J,"LI",{});var KRe=s(PF);fue=n(KRe,"STRONG",{});var KTt=s(fue);_Uo=r(KTt,"ibert"),KTt.forEach(t),uUo=r(KRe," \u2014 "),iz=n(KRe,"A",{href:!0});var ZTt=s(iz);bUo=r(ZTt,"IBertForTokenClassification"),ZTt.forEach(t),vUo=r(KRe," (I-BERT model)"),KRe.forEach(t),FUo=i(J),BF=n(J,"LI",{});var ZRe=s(BF);mue=n(ZRe,"STRONG",{});var e7t=s(mue);TUo=r(e7t,"layoutlm"),e7t.forEach(t),MUo=r(ZRe," \u2014 "),dz=n(ZRe,"A",{href:!0});var o7t=s(dz);EUo=r(o7t,"LayoutLMForTokenClassification"),o7t.forEach(t),CUo=r(ZRe," (LayoutLM model)"),ZRe.forEach(t),wUo=i(J),IF=n(J,"LI",{});var ePe=s(IF);gue=n(ePe,"STRONG",{});var r7t=s(gue);AUo=r(r7t,"layoutlmv2"),r7t.forEach(t),LUo=r(ePe," \u2014 "),cz=n(ePe,"A",{href:!0});var t7t=s(cz);yUo=r(t7t,"LayoutLMv2ForTokenClassification"),t7t.forEach(t),xUo=r(ePe," (LayoutLMv2 model)"),ePe.forEach(t),$Uo=i(J),NF=n(J,"LI",{});var oPe=s(NF);hue=n(oPe,"STRONG",{});var a7t=s(hue);kUo=r(a7t,"layoutlmv3"),a7t.forEach(t),SUo=r(oPe," \u2014 "),fz=n(oPe,"A",{href:!0});var n7t=s(fz);RUo=r(n7t,"LayoutLMv3ForTokenClassification"),n7t.forEach(t),PUo=r(oPe," (LayoutLMv3 model)"),oPe.forEach(t),BUo=i(J),qF=n(J,"LI",{});var rPe=s(qF);pue=n(rPe,"STRONG",{});var s7t=s(pue);IUo=r(s7t,"longformer"),s7t.forEach(t),NUo=r(rPe," \u2014 "),mz=n(rPe,"A",{href:!0});var l7t=s(mz);qUo=r(l7t,"LongformerForTokenClassification"),l7t.forEach(t),jUo=r(rPe," (Longformer model)"),rPe.forEach(t),DUo=i(J),jF=n(J,"LI",{});var tPe=s(jF);_ue=n(tPe,"STRONG",{});var i7t=s(_ue);GUo=r(i7t,"megatron-bert"),i7t.forEach(t),OUo=r(tPe," \u2014 "),gz=n(tPe,"A",{href:!0});var d7t=s(gz);VUo=r(d7t,"MegatronBertForTokenClassification"),d7t.forEach(t),XUo=r(tPe," (Megatron-BERT model)"),tPe.forEach(t),zUo=i(J),DF=n(J,"LI",{});var aPe=s(DF);uue=n(aPe,"STRONG",{});var c7t=s(uue);QUo=r(c7t,"mobilebert"),c7t.forEach(t),WUo=r(aPe," \u2014 "),hz=n(aPe,"A",{href:!0});var f7t=s(hz);HUo=r(f7t,"MobileBertForTokenClassification"),f7t.forEach(t),UUo=r(aPe," (MobileBERT model)"),aPe.forEach(t),JUo=i(J),GF=n(J,"LI",{});var nPe=s(GF);bue=n(nPe,"STRONG",{});var m7t=s(bue);YUo=r(m7t,"mpnet"),m7t.forEach(t),KUo=r(nPe," \u2014 "),pz=n(nPe,"A",{href:!0});var g7t=s(pz);ZUo=r(g7t,"MPNetForTokenClassification"),g7t.forEach(t),eJo=r(nPe," (MPNet model)"),nPe.forEach(t),oJo=i(J),OF=n(J,"LI",{});var sPe=s(OF);vue=n(sPe,"STRONG",{});var h7t=s(vue);rJo=r(h7t,"nezha"),h7t.forEach(t),tJo=r(sPe," \u2014 "),_z=n(sPe,"A",{href:!0});var p7t=s(_z);aJo=r(p7t,"NezhaForTokenClassification"),p7t.forEach(t),nJo=r(sPe," (Nezha model)"),sPe.forEach(t),sJo=i(J),VF=n(J,"LI",{});var lPe=s(VF);Fue=n(lPe,"STRONG",{});var _7t=s(Fue);lJo=r(_7t,"nystromformer"),_7t.forEach(t),iJo=r(lPe," \u2014 "),uz=n(lPe,"A",{href:!0});var u7t=s(uz);dJo=r(u7t,"NystromformerForTokenClassification"),u7t.forEach(t),cJo=r(lPe," (Nystr\xF6mformer model)"),lPe.forEach(t),fJo=i(J),XF=n(J,"LI",{});var iPe=s(XF);Tue=n(iPe,"STRONG",{});var b7t=s(Tue);mJo=r(b7t,"qdqbert"),b7t.forEach(t),gJo=r(iPe," \u2014 "),bz=n(iPe,"A",{href:!0});var v7t=s(bz);hJo=r(v7t,"QDQBertForTokenClassification"),v7t.forEach(t),pJo=r(iPe," (QDQBert model)"),iPe.forEach(t),_Jo=i(J),zF=n(J,"LI",{});var dPe=s(zF);Mue=n(dPe,"STRONG",{});var F7t=s(Mue);uJo=r(F7t,"rembert"),F7t.forEach(t),bJo=r(dPe," \u2014 "),vz=n(dPe,"A",{href:!0});var T7t=s(vz);vJo=r(T7t,"RemBertForTokenClassification"),T7t.forEach(t),FJo=r(dPe," (RemBERT model)"),dPe.forEach(t),TJo=i(J),QF=n(J,"LI",{});var cPe=s(QF);Eue=n(cPe,"STRONG",{});var M7t=s(Eue);MJo=r(M7t,"roberta"),M7t.forEach(t),EJo=r(cPe," \u2014 "),Fz=n(cPe,"A",{href:!0});var E7t=s(Fz);CJo=r(E7t,"RobertaForTokenClassification"),E7t.forEach(t),wJo=r(cPe," (RoBERTa model)"),cPe.forEach(t),AJo=i(J),WF=n(J,"LI",{});var fPe=s(WF);Cue=n(fPe,"STRONG",{});var C7t=s(Cue);LJo=r(C7t,"roformer"),C7t.forEach(t),yJo=r(fPe," \u2014 "),Tz=n(fPe,"A",{href:!0});var w7t=s(Tz);xJo=r(w7t,"RoFormerForTokenClassification"),w7t.forEach(t),$Jo=r(fPe," (RoFormer model)"),fPe.forEach(t),kJo=i(J),HF=n(J,"LI",{});var mPe=s(HF);wue=n(mPe,"STRONG",{});var A7t=s(wue);SJo=r(A7t,"squeezebert"),A7t.forEach(t),RJo=r(mPe," \u2014 "),Mz=n(mPe,"A",{href:!0});var L7t=s(Mz);PJo=r(L7t,"SqueezeBertForTokenClassification"),L7t.forEach(t),BJo=r(mPe," (SqueezeBERT model)"),mPe.forEach(t),IJo=i(J),UF=n(J,"LI",{});var gPe=s(UF);Aue=n(gPe,"STRONG",{});var y7t=s(Aue);NJo=r(y7t,"xlm"),y7t.forEach(t),qJo=r(gPe," \u2014 "),Ez=n(gPe,"A",{href:!0});var x7t=s(Ez);jJo=r(x7t,"XLMForTokenClassification"),x7t.forEach(t),DJo=r(gPe," (XLM model)"),gPe.forEach(t),GJo=i(J),JF=n(J,"LI",{});var hPe=s(JF);Lue=n(hPe,"STRONG",{});var $7t=s(Lue);OJo=r($7t,"xlm-roberta"),$7t.forEach(t),VJo=r(hPe," \u2014 "),Cz=n(hPe,"A",{href:!0});var k7t=s(Cz);XJo=r(k7t,"XLMRobertaForTokenClassification"),k7t.forEach(t),zJo=r(hPe," (XLM-RoBERTa model)"),hPe.forEach(t),QJo=i(J),YF=n(J,"LI",{});var pPe=s(YF);yue=n(pPe,"STRONG",{});var S7t=s(yue);WJo=r(S7t,"xlm-roberta-xl"),S7t.forEach(t),HJo=r(pPe," \u2014 "),wz=n(pPe,"A",{href:!0});var R7t=s(wz);UJo=r(R7t,"XLMRobertaXLForTokenClassification"),R7t.forEach(t),JJo=r(pPe," (XLM-RoBERTa-XL model)"),pPe.forEach(t),YJo=i(J),KF=n(J,"LI",{});var _Pe=s(KF);xue=n(_Pe,"STRONG",{});var P7t=s(xue);KJo=r(P7t,"xlnet"),P7t.forEach(t),ZJo=r(_Pe," \u2014 "),Az=n(_Pe,"A",{href:!0});var B7t=s(Az);eYo=r(B7t,"XLNetForTokenClassification"),B7t.forEach(t),oYo=r(_Pe," (XLNet model)"),_Pe.forEach(t),rYo=i(J),ZF=n(J,"LI",{});var uPe=s(ZF);$ue=n(uPe,"STRONG",{});var I7t=s($ue);tYo=r(I7t,"yoso"),I7t.forEach(t),aYo=r(uPe," \u2014 "),Lz=n(uPe,"A",{href:!0});var N7t=s(Lz);nYo=r(N7t,"YosoForTokenClassification"),N7t.forEach(t),sYo=r(uPe," (YOSO model)"),uPe.forEach(t),J.forEach(t),lYo=i(ga),e6=n(ga,"P",{});var bPe=s(e6);iYo=r(bPe,"The model is set in evaluation mode by default using "),kue=n(bPe,"CODE",{});var q7t=s(kue);dYo=r(q7t,"model.eval()"),q7t.forEach(t),cYo=r(bPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=n(bPe,"CODE",{});var j7t=s(Sue);fYo=r(j7t,"model.train()"),j7t.forEach(t),bPe.forEach(t),mYo=i(ga),T(o6.$$.fragment,ga),ga.forEach(t),sl.forEach(t),zOe=i(f),dd=n(f,"H2",{class:!0});var YXe=s(dd);r6=n(YXe,"A",{id:!0,class:!0,href:!0});var D7t=s(r6);Rue=n(D7t,"SPAN",{});var G7t=s(Rue);T(ZL.$$.fragment,G7t),G7t.forEach(t),D7t.forEach(t),gYo=i(YXe),Pue=n(YXe,"SPAN",{});var O7t=s(Pue);hYo=r(O7t,"AutoModelForQuestionAnswering"),O7t.forEach(t),YXe.forEach(t),QOe=i(f),jo=n(f,"DIV",{class:!0});var ll=s(jo);T(ey.$$.fragment,ll),pYo=i(ll),cd=n(ll,"P",{});var Yoe=s(cd);_Yo=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yz=n(Yoe,"A",{href:!0});var V7t=s(yz);uYo=r(V7t,"from_pretrained()"),V7t.forEach(t),bYo=r(Yoe," class method or the "),xz=n(Yoe,"A",{href:!0});var X7t=s(xz);vYo=r(X7t,"from_config()"),X7t.forEach(t),FYo=r(Yoe,` class
method.`),Yoe.forEach(t),TYo=i(ll),oy=n(ll,"P",{});var KXe=s(oy);MYo=r(KXe,"This class cannot be instantiated directly using "),Bue=n(KXe,"CODE",{});var z7t=s(Bue);EYo=r(z7t,"__init__()"),z7t.forEach(t),CYo=r(KXe," (throws an error)."),KXe.forEach(t),wYo=i(ll),ht=n(ll,"DIV",{class:!0});var rw=s(ht);T(ry.$$.fragment,rw),AYo=i(rw),Iue=n(rw,"P",{});var Q7t=s(Iue);LYo=r(Q7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Q7t.forEach(t),yYo=i(rw),fd=n(rw,"P",{});var Koe=s(fd);xYo=r(Koe,`Note:
Loading a model from its configuration file does `),Nue=n(Koe,"STRONG",{});var W7t=s(Nue);$Yo=r(W7t,"not"),W7t.forEach(t),kYo=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(Koe,"A",{href:!0});var H7t=s($z);SYo=r(H7t,"from_pretrained()"),H7t.forEach(t),RYo=r(Koe," to load the model weights."),Koe.forEach(t),PYo=i(rw),T(t6.$$.fragment,rw),rw.forEach(t),BYo=i(ll),no=n(ll,"DIV",{class:!0});var ha=s(no);T(ty.$$.fragment,ha),IYo=i(ha),que=n(ha,"P",{});var U7t=s(que);NYo=r(U7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),U7t.forEach(t),qYo=i(ha),Oa=n(ha,"P",{});var tw=s(Oa);jYo=r(tw,"The model class to instantiate is selected based on the "),jue=n(tw,"CODE",{});var J7t=s(jue);DYo=r(J7t,"model_type"),J7t.forEach(t),GYo=r(tw,` property of the config object (either
passed as an argument or loaded from `),Due=n(tw,"CODE",{});var Y7t=s(Due);OYo=r(Y7t,"pretrained_model_name_or_path"),Y7t.forEach(t),VYo=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(tw,"CODE",{});var K7t=s(Gue);XYo=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),zYo=r(tw,":"),tw.forEach(t),QYo=i(ha),V=n(ha,"UL",{});var X=s(V);a6=n(X,"LI",{});var vPe=s(a6);Oue=n(vPe,"STRONG",{});var Z7t=s(Oue);WYo=r(Z7t,"albert"),Z7t.forEach(t),HYo=r(vPe," \u2014 "),kz=n(vPe,"A",{href:!0});var e8t=s(kz);UYo=r(e8t,"AlbertForQuestionAnswering"),e8t.forEach(t),JYo=r(vPe," (ALBERT model)"),vPe.forEach(t),YYo=i(X),n6=n(X,"LI",{});var FPe=s(n6);Vue=n(FPe,"STRONG",{});var o8t=s(Vue);KYo=r(o8t,"bart"),o8t.forEach(t),ZYo=r(FPe," \u2014 "),Sz=n(FPe,"A",{href:!0});var r8t=s(Sz);eKo=r(r8t,"BartForQuestionAnswering"),r8t.forEach(t),oKo=r(FPe," (BART model)"),FPe.forEach(t),rKo=i(X),s6=n(X,"LI",{});var TPe=s(s6);Xue=n(TPe,"STRONG",{});var t8t=s(Xue);tKo=r(t8t,"bert"),t8t.forEach(t),aKo=r(TPe," \u2014 "),Rz=n(TPe,"A",{href:!0});var a8t=s(Rz);nKo=r(a8t,"BertForQuestionAnswering"),a8t.forEach(t),sKo=r(TPe," (BERT model)"),TPe.forEach(t),lKo=i(X),l6=n(X,"LI",{});var MPe=s(l6);zue=n(MPe,"STRONG",{});var n8t=s(zue);iKo=r(n8t,"big_bird"),n8t.forEach(t),dKo=r(MPe," \u2014 "),Pz=n(MPe,"A",{href:!0});var s8t=s(Pz);cKo=r(s8t,"BigBirdForQuestionAnswering"),s8t.forEach(t),fKo=r(MPe," (BigBird model)"),MPe.forEach(t),mKo=i(X),i6=n(X,"LI",{});var EPe=s(i6);Que=n(EPe,"STRONG",{});var l8t=s(Que);gKo=r(l8t,"bigbird_pegasus"),l8t.forEach(t),hKo=r(EPe," \u2014 "),Bz=n(EPe,"A",{href:!0});var i8t=s(Bz);pKo=r(i8t,"BigBirdPegasusForQuestionAnswering"),i8t.forEach(t),_Ko=r(EPe," (BigBird-Pegasus model)"),EPe.forEach(t),uKo=i(X),d6=n(X,"LI",{});var CPe=s(d6);Wue=n(CPe,"STRONG",{});var d8t=s(Wue);bKo=r(d8t,"camembert"),d8t.forEach(t),vKo=r(CPe," \u2014 "),Iz=n(CPe,"A",{href:!0});var c8t=s(Iz);FKo=r(c8t,"CamembertForQuestionAnswering"),c8t.forEach(t),TKo=r(CPe," (CamemBERT model)"),CPe.forEach(t),MKo=i(X),c6=n(X,"LI",{});var wPe=s(c6);Hue=n(wPe,"STRONG",{});var f8t=s(Hue);EKo=r(f8t,"canine"),f8t.forEach(t),CKo=r(wPe," \u2014 "),Nz=n(wPe,"A",{href:!0});var m8t=s(Nz);wKo=r(m8t,"CanineForQuestionAnswering"),m8t.forEach(t),AKo=r(wPe," (CANINE model)"),wPe.forEach(t),LKo=i(X),f6=n(X,"LI",{});var APe=s(f6);Uue=n(APe,"STRONG",{});var g8t=s(Uue);yKo=r(g8t,"convbert"),g8t.forEach(t),xKo=r(APe," \u2014 "),qz=n(APe,"A",{href:!0});var h8t=s(qz);$Ko=r(h8t,"ConvBertForQuestionAnswering"),h8t.forEach(t),kKo=r(APe," (ConvBERT model)"),APe.forEach(t),SKo=i(X),m6=n(X,"LI",{});var LPe=s(m6);Jue=n(LPe,"STRONG",{});var p8t=s(Jue);RKo=r(p8t,"data2vec-text"),p8t.forEach(t),PKo=r(LPe," \u2014 "),jz=n(LPe,"A",{href:!0});var _8t=s(jz);BKo=r(_8t,"Data2VecTextForQuestionAnswering"),_8t.forEach(t),IKo=r(LPe," (Data2VecText model)"),LPe.forEach(t),NKo=i(X),g6=n(X,"LI",{});var yPe=s(g6);Yue=n(yPe,"STRONG",{});var u8t=s(Yue);qKo=r(u8t,"deberta"),u8t.forEach(t),jKo=r(yPe," \u2014 "),Dz=n(yPe,"A",{href:!0});var b8t=s(Dz);DKo=r(b8t,"DebertaForQuestionAnswering"),b8t.forEach(t),GKo=r(yPe," (DeBERTa model)"),yPe.forEach(t),OKo=i(X),h6=n(X,"LI",{});var xPe=s(h6);Kue=n(xPe,"STRONG",{});var v8t=s(Kue);VKo=r(v8t,"deberta-v2"),v8t.forEach(t),XKo=r(xPe," \u2014 "),Gz=n(xPe,"A",{href:!0});var F8t=s(Gz);zKo=r(F8t,"DebertaV2ForQuestionAnswering"),F8t.forEach(t),QKo=r(xPe," (DeBERTa-v2 model)"),xPe.forEach(t),WKo=i(X),p6=n(X,"LI",{});var $Pe=s(p6);Zue=n($Pe,"STRONG",{});var T8t=s(Zue);HKo=r(T8t,"distilbert"),T8t.forEach(t),UKo=r($Pe," \u2014 "),Oz=n($Pe,"A",{href:!0});var M8t=s(Oz);JKo=r(M8t,"DistilBertForQuestionAnswering"),M8t.forEach(t),YKo=r($Pe," (DistilBERT model)"),$Pe.forEach(t),KKo=i(X),_6=n(X,"LI",{});var kPe=s(_6);e2e=n(kPe,"STRONG",{});var E8t=s(e2e);ZKo=r(E8t,"electra"),E8t.forEach(t),eZo=r(kPe," \u2014 "),Vz=n(kPe,"A",{href:!0});var C8t=s(Vz);oZo=r(C8t,"ElectraForQuestionAnswering"),C8t.forEach(t),rZo=r(kPe," (ELECTRA model)"),kPe.forEach(t),tZo=i(X),u6=n(X,"LI",{});var SPe=s(u6);o2e=n(SPe,"STRONG",{});var w8t=s(o2e);aZo=r(w8t,"flaubert"),w8t.forEach(t),nZo=r(SPe," \u2014 "),Xz=n(SPe,"A",{href:!0});var A8t=s(Xz);sZo=r(A8t,"FlaubertForQuestionAnsweringSimple"),A8t.forEach(t),lZo=r(SPe," (FlauBERT model)"),SPe.forEach(t),iZo=i(X),b6=n(X,"LI",{});var RPe=s(b6);r2e=n(RPe,"STRONG",{});var L8t=s(r2e);dZo=r(L8t,"fnet"),L8t.forEach(t),cZo=r(RPe," \u2014 "),zz=n(RPe,"A",{href:!0});var y8t=s(zz);fZo=r(y8t,"FNetForQuestionAnswering"),y8t.forEach(t),mZo=r(RPe," (FNet model)"),RPe.forEach(t),gZo=i(X),v6=n(X,"LI",{});var PPe=s(v6);t2e=n(PPe,"STRONG",{});var x8t=s(t2e);hZo=r(x8t,"funnel"),x8t.forEach(t),pZo=r(PPe," \u2014 "),Qz=n(PPe,"A",{href:!0});var $8t=s(Qz);_Zo=r($8t,"FunnelForQuestionAnswering"),$8t.forEach(t),uZo=r(PPe," (Funnel Transformer model)"),PPe.forEach(t),bZo=i(X),F6=n(X,"LI",{});var BPe=s(F6);a2e=n(BPe,"STRONG",{});var k8t=s(a2e);vZo=r(k8t,"gptj"),k8t.forEach(t),FZo=r(BPe," \u2014 "),Wz=n(BPe,"A",{href:!0});var S8t=s(Wz);TZo=r(S8t,"GPTJForQuestionAnswering"),S8t.forEach(t),MZo=r(BPe," (GPT-J model)"),BPe.forEach(t),EZo=i(X),T6=n(X,"LI",{});var IPe=s(T6);n2e=n(IPe,"STRONG",{});var R8t=s(n2e);CZo=r(R8t,"ibert"),R8t.forEach(t),wZo=r(IPe," \u2014 "),Hz=n(IPe,"A",{href:!0});var P8t=s(Hz);AZo=r(P8t,"IBertForQuestionAnswering"),P8t.forEach(t),LZo=r(IPe," (I-BERT model)"),IPe.forEach(t),yZo=i(X),M6=n(X,"LI",{});var NPe=s(M6);s2e=n(NPe,"STRONG",{});var B8t=s(s2e);xZo=r(B8t,"layoutlmv2"),B8t.forEach(t),$Zo=r(NPe," \u2014 "),Uz=n(NPe,"A",{href:!0});var I8t=s(Uz);kZo=r(I8t,"LayoutLMv2ForQuestionAnswering"),I8t.forEach(t),SZo=r(NPe," (LayoutLMv2 model)"),NPe.forEach(t),RZo=i(X),E6=n(X,"LI",{});var qPe=s(E6);l2e=n(qPe,"STRONG",{});var N8t=s(l2e);PZo=r(N8t,"layoutlmv3"),N8t.forEach(t),BZo=r(qPe," \u2014 "),Jz=n(qPe,"A",{href:!0});var q8t=s(Jz);IZo=r(q8t,"LayoutLMv3ForQuestionAnswering"),q8t.forEach(t),NZo=r(qPe," (LayoutLMv3 model)"),qPe.forEach(t),qZo=i(X),C6=n(X,"LI",{});var jPe=s(C6);i2e=n(jPe,"STRONG",{});var j8t=s(i2e);jZo=r(j8t,"led"),j8t.forEach(t),DZo=r(jPe," \u2014 "),Yz=n(jPe,"A",{href:!0});var D8t=s(Yz);GZo=r(D8t,"LEDForQuestionAnswering"),D8t.forEach(t),OZo=r(jPe," (LED model)"),jPe.forEach(t),VZo=i(X),w6=n(X,"LI",{});var DPe=s(w6);d2e=n(DPe,"STRONG",{});var G8t=s(d2e);XZo=r(G8t,"longformer"),G8t.forEach(t),zZo=r(DPe," \u2014 "),Kz=n(DPe,"A",{href:!0});var O8t=s(Kz);QZo=r(O8t,"LongformerForQuestionAnswering"),O8t.forEach(t),WZo=r(DPe," (Longformer model)"),DPe.forEach(t),HZo=i(X),A6=n(X,"LI",{});var GPe=s(A6);c2e=n(GPe,"STRONG",{});var V8t=s(c2e);UZo=r(V8t,"lxmert"),V8t.forEach(t),JZo=r(GPe," \u2014 "),Zz=n(GPe,"A",{href:!0});var X8t=s(Zz);YZo=r(X8t,"LxmertForQuestionAnswering"),X8t.forEach(t),KZo=r(GPe," (LXMERT model)"),GPe.forEach(t),ZZo=i(X),L6=n(X,"LI",{});var OPe=s(L6);f2e=n(OPe,"STRONG",{});var z8t=s(f2e);eer=r(z8t,"mbart"),z8t.forEach(t),oer=r(OPe," \u2014 "),eQ=n(OPe,"A",{href:!0});var Q8t=s(eQ);rer=r(Q8t,"MBartForQuestionAnswering"),Q8t.forEach(t),ter=r(OPe," (mBART model)"),OPe.forEach(t),aer=i(X),y6=n(X,"LI",{});var VPe=s(y6);m2e=n(VPe,"STRONG",{});var W8t=s(m2e);ner=r(W8t,"megatron-bert"),W8t.forEach(t),ser=r(VPe," \u2014 "),oQ=n(VPe,"A",{href:!0});var H8t=s(oQ);ler=r(H8t,"MegatronBertForQuestionAnswering"),H8t.forEach(t),ier=r(VPe," (Megatron-BERT model)"),VPe.forEach(t),der=i(X),x6=n(X,"LI",{});var XPe=s(x6);g2e=n(XPe,"STRONG",{});var U8t=s(g2e);cer=r(U8t,"mobilebert"),U8t.forEach(t),fer=r(XPe," \u2014 "),rQ=n(XPe,"A",{href:!0});var J8t=s(rQ);mer=r(J8t,"MobileBertForQuestionAnswering"),J8t.forEach(t),ger=r(XPe," (MobileBERT model)"),XPe.forEach(t),her=i(X),$6=n(X,"LI",{});var zPe=s($6);h2e=n(zPe,"STRONG",{});var Y8t=s(h2e);per=r(Y8t,"mpnet"),Y8t.forEach(t),_er=r(zPe," \u2014 "),tQ=n(zPe,"A",{href:!0});var K8t=s(tQ);uer=r(K8t,"MPNetForQuestionAnswering"),K8t.forEach(t),ber=r(zPe," (MPNet model)"),zPe.forEach(t),ver=i(X),k6=n(X,"LI",{});var QPe=s(k6);p2e=n(QPe,"STRONG",{});var Z8t=s(p2e);Fer=r(Z8t,"nezha"),Z8t.forEach(t),Ter=r(QPe," \u2014 "),aQ=n(QPe,"A",{href:!0});var eMt=s(aQ);Mer=r(eMt,"NezhaForQuestionAnswering"),eMt.forEach(t),Eer=r(QPe," (Nezha model)"),QPe.forEach(t),Cer=i(X),S6=n(X,"LI",{});var WPe=s(S6);_2e=n(WPe,"STRONG",{});var oMt=s(_2e);wer=r(oMt,"nystromformer"),oMt.forEach(t),Aer=r(WPe," \u2014 "),nQ=n(WPe,"A",{href:!0});var rMt=s(nQ);Ler=r(rMt,"NystromformerForQuestionAnswering"),rMt.forEach(t),yer=r(WPe," (Nystr\xF6mformer model)"),WPe.forEach(t),xer=i(X),R6=n(X,"LI",{});var HPe=s(R6);u2e=n(HPe,"STRONG",{});var tMt=s(u2e);$er=r(tMt,"qdqbert"),tMt.forEach(t),ker=r(HPe," \u2014 "),sQ=n(HPe,"A",{href:!0});var aMt=s(sQ);Ser=r(aMt,"QDQBertForQuestionAnswering"),aMt.forEach(t),Rer=r(HPe," (QDQBert model)"),HPe.forEach(t),Per=i(X),P6=n(X,"LI",{});var UPe=s(P6);b2e=n(UPe,"STRONG",{});var nMt=s(b2e);Ber=r(nMt,"reformer"),nMt.forEach(t),Ier=r(UPe," \u2014 "),lQ=n(UPe,"A",{href:!0});var sMt=s(lQ);Ner=r(sMt,"ReformerForQuestionAnswering"),sMt.forEach(t),qer=r(UPe," (Reformer model)"),UPe.forEach(t),jer=i(X),B6=n(X,"LI",{});var JPe=s(B6);v2e=n(JPe,"STRONG",{});var lMt=s(v2e);Der=r(lMt,"rembert"),lMt.forEach(t),Ger=r(JPe," \u2014 "),iQ=n(JPe,"A",{href:!0});var iMt=s(iQ);Oer=r(iMt,"RemBertForQuestionAnswering"),iMt.forEach(t),Ver=r(JPe," (RemBERT model)"),JPe.forEach(t),Xer=i(X),I6=n(X,"LI",{});var YPe=s(I6);F2e=n(YPe,"STRONG",{});var dMt=s(F2e);zer=r(dMt,"roberta"),dMt.forEach(t),Qer=r(YPe," \u2014 "),dQ=n(YPe,"A",{href:!0});var cMt=s(dQ);Wer=r(cMt,"RobertaForQuestionAnswering"),cMt.forEach(t),Her=r(YPe," (RoBERTa model)"),YPe.forEach(t),Uer=i(X),N6=n(X,"LI",{});var KPe=s(N6);T2e=n(KPe,"STRONG",{});var fMt=s(T2e);Jer=r(fMt,"roformer"),fMt.forEach(t),Yer=r(KPe," \u2014 "),cQ=n(KPe,"A",{href:!0});var mMt=s(cQ);Ker=r(mMt,"RoFormerForQuestionAnswering"),mMt.forEach(t),Zer=r(KPe," (RoFormer model)"),KPe.forEach(t),eor=i(X),q6=n(X,"LI",{});var ZPe=s(q6);M2e=n(ZPe,"STRONG",{});var gMt=s(M2e);oor=r(gMt,"splinter"),gMt.forEach(t),ror=r(ZPe," \u2014 "),fQ=n(ZPe,"A",{href:!0});var hMt=s(fQ);tor=r(hMt,"SplinterForQuestionAnswering"),hMt.forEach(t),aor=r(ZPe," (Splinter model)"),ZPe.forEach(t),nor=i(X),j6=n(X,"LI",{});var eBe=s(j6);E2e=n(eBe,"STRONG",{});var pMt=s(E2e);sor=r(pMt,"squeezebert"),pMt.forEach(t),lor=r(eBe," \u2014 "),mQ=n(eBe,"A",{href:!0});var _Mt=s(mQ);ior=r(_Mt,"SqueezeBertForQuestionAnswering"),_Mt.forEach(t),dor=r(eBe," (SqueezeBERT model)"),eBe.forEach(t),cor=i(X),D6=n(X,"LI",{});var oBe=s(D6);C2e=n(oBe,"STRONG",{});var uMt=s(C2e);mor=r(uMt,"xlm"),uMt.forEach(t),gor=r(oBe," \u2014 "),gQ=n(oBe,"A",{href:!0});var bMt=s(gQ);hor=r(bMt,"XLMForQuestionAnsweringSimple"),bMt.forEach(t),por=r(oBe," (XLM model)"),oBe.forEach(t),_or=i(X),G6=n(X,"LI",{});var rBe=s(G6);w2e=n(rBe,"STRONG",{});var vMt=s(w2e);uor=r(vMt,"xlm-roberta"),vMt.forEach(t),bor=r(rBe," \u2014 "),hQ=n(rBe,"A",{href:!0});var FMt=s(hQ);vor=r(FMt,"XLMRobertaForQuestionAnswering"),FMt.forEach(t),For=r(rBe," (XLM-RoBERTa model)"),rBe.forEach(t),Tor=i(X),O6=n(X,"LI",{});var tBe=s(O6);A2e=n(tBe,"STRONG",{});var TMt=s(A2e);Mor=r(TMt,"xlm-roberta-xl"),TMt.forEach(t),Eor=r(tBe," \u2014 "),pQ=n(tBe,"A",{href:!0});var MMt=s(pQ);Cor=r(MMt,"XLMRobertaXLForQuestionAnswering"),MMt.forEach(t),wor=r(tBe," (XLM-RoBERTa-XL model)"),tBe.forEach(t),Aor=i(X),V6=n(X,"LI",{});var aBe=s(V6);L2e=n(aBe,"STRONG",{});var EMt=s(L2e);Lor=r(EMt,"xlnet"),EMt.forEach(t),yor=r(aBe," \u2014 "),_Q=n(aBe,"A",{href:!0});var CMt=s(_Q);xor=r(CMt,"XLNetForQuestionAnsweringSimple"),CMt.forEach(t),$or=r(aBe," (XLNet model)"),aBe.forEach(t),kor=i(X),X6=n(X,"LI",{});var nBe=s(X6);y2e=n(nBe,"STRONG",{});var wMt=s(y2e);Sor=r(wMt,"yoso"),wMt.forEach(t),Ror=r(nBe," \u2014 "),uQ=n(nBe,"A",{href:!0});var AMt=s(uQ);Por=r(AMt,"YosoForQuestionAnswering"),AMt.forEach(t),Bor=r(nBe," (YOSO model)"),nBe.forEach(t),X.forEach(t),Ior=i(ha),z6=n(ha,"P",{});var sBe=s(z6);Nor=r(sBe,"The model is set in evaluation mode by default using "),x2e=n(sBe,"CODE",{});var LMt=s(x2e);qor=r(LMt,"model.eval()"),LMt.forEach(t),jor=r(sBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$2e=n(sBe,"CODE",{});var yMt=s($2e);Dor=r(yMt,"model.train()"),yMt.forEach(t),sBe.forEach(t),Gor=i(ha),T(Q6.$$.fragment,ha),ha.forEach(t),ll.forEach(t),WOe=i(f),md=n(f,"H2",{class:!0});var ZXe=s(md);W6=n(ZXe,"A",{id:!0,class:!0,href:!0});var xMt=s(W6);k2e=n(xMt,"SPAN",{});var $Mt=s(k2e);T(ay.$$.fragment,$Mt),$Mt.forEach(t),xMt.forEach(t),Oor=i(ZXe),S2e=n(ZXe,"SPAN",{});var kMt=s(S2e);Vor=r(kMt,"AutoModelForTableQuestionAnswering"),kMt.forEach(t),ZXe.forEach(t),HOe=i(f),Do=n(f,"DIV",{class:!0});var il=s(Do);T(ny.$$.fragment,il),Xor=i(il),gd=n(il,"P",{});var Zoe=s(gd);zor=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bQ=n(Zoe,"A",{href:!0});var SMt=s(bQ);Qor=r(SMt,"from_pretrained()"),SMt.forEach(t),Wor=r(Zoe," class method or the "),vQ=n(Zoe,"A",{href:!0});var RMt=s(vQ);Hor=r(RMt,"from_config()"),RMt.forEach(t),Uor=r(Zoe,` class
method.`),Zoe.forEach(t),Jor=i(il),sy=n(il,"P",{});var eze=s(sy);Yor=r(eze,"This class cannot be instantiated directly using "),R2e=n(eze,"CODE",{});var PMt=s(R2e);Kor=r(PMt,"__init__()"),PMt.forEach(t),Zor=r(eze," (throws an error)."),eze.forEach(t),err=i(il),pt=n(il,"DIV",{class:!0});var aw=s(pt);T(ly.$$.fragment,aw),orr=i(aw),P2e=n(aw,"P",{});var BMt=s(P2e);rrr=r(BMt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BMt.forEach(t),trr=i(aw),hd=n(aw,"P",{});var ere=s(hd);arr=r(ere,`Note:
Loading a model from its configuration file does `),B2e=n(ere,"STRONG",{});var IMt=s(B2e);nrr=r(IMt,"not"),IMt.forEach(t),srr=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(ere,"A",{href:!0});var NMt=s(FQ);lrr=r(NMt,"from_pretrained()"),NMt.forEach(t),irr=r(ere," to load the model weights."),ere.forEach(t),drr=i(aw),T(H6.$$.fragment,aw),aw.forEach(t),crr=i(il),so=n(il,"DIV",{class:!0});var pa=s(so);T(iy.$$.fragment,pa),frr=i(pa),I2e=n(pa,"P",{});var qMt=s(I2e);mrr=r(qMt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qMt.forEach(t),grr=i(pa),Va=n(pa,"P",{});var nw=s(Va);hrr=r(nw,"The model class to instantiate is selected based on the "),N2e=n(nw,"CODE",{});var jMt=s(N2e);prr=r(jMt,"model_type"),jMt.forEach(t),_rr=r(nw,` property of the config object (either
passed as an argument or loaded from `),q2e=n(nw,"CODE",{});var DMt=s(q2e);urr=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),brr=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=n(nw,"CODE",{});var GMt=s(j2e);vrr=r(GMt,"pretrained_model_name_or_path"),GMt.forEach(t),Frr=r(nw,":"),nw.forEach(t),Trr=i(pa),D2e=n(pa,"UL",{});var OMt=s(D2e);U6=n(OMt,"LI",{});var lBe=s(U6);G2e=n(lBe,"STRONG",{});var VMt=s(G2e);Mrr=r(VMt,"tapas"),VMt.forEach(t),Err=r(lBe," \u2014 "),TQ=n(lBe,"A",{href:!0});var XMt=s(TQ);Crr=r(XMt,"TapasForQuestionAnswering"),XMt.forEach(t),wrr=r(lBe," (TAPAS model)"),lBe.forEach(t),OMt.forEach(t),Arr=i(pa),J6=n(pa,"P",{});var iBe=s(J6);Lrr=r(iBe,"The model is set in evaluation mode by default using "),O2e=n(iBe,"CODE",{});var zMt=s(O2e);yrr=r(zMt,"model.eval()"),zMt.forEach(t),xrr=r(iBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V2e=n(iBe,"CODE",{});var QMt=s(V2e);$rr=r(QMt,"model.train()"),QMt.forEach(t),iBe.forEach(t),krr=i(pa),T(Y6.$$.fragment,pa),pa.forEach(t),il.forEach(t),UOe=i(f),pd=n(f,"H2",{class:!0});var oze=s(pd);K6=n(oze,"A",{id:!0,class:!0,href:!0});var WMt=s(K6);X2e=n(WMt,"SPAN",{});var HMt=s(X2e);T(dy.$$.fragment,HMt),HMt.forEach(t),WMt.forEach(t),Srr=i(oze),z2e=n(oze,"SPAN",{});var UMt=s(z2e);Rrr=r(UMt,"AutoModelForImageClassification"),UMt.forEach(t),oze.forEach(t),JOe=i(f),Go=n(f,"DIV",{class:!0});var dl=s(Go);T(cy.$$.fragment,dl),Prr=i(dl),_d=n(dl,"P",{});var ore=s(_d);Brr=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MQ=n(ore,"A",{href:!0});var JMt=s(MQ);Irr=r(JMt,"from_pretrained()"),JMt.forEach(t),Nrr=r(ore," class method or the "),EQ=n(ore,"A",{href:!0});var YMt=s(EQ);qrr=r(YMt,"from_config()"),YMt.forEach(t),jrr=r(ore,` class
method.`),ore.forEach(t),Drr=i(dl),fy=n(dl,"P",{});var rze=s(fy);Grr=r(rze,"This class cannot be instantiated directly using "),Q2e=n(rze,"CODE",{});var KMt=s(Q2e);Orr=r(KMt,"__init__()"),KMt.forEach(t),Vrr=r(rze," (throws an error)."),rze.forEach(t),Xrr=i(dl),_t=n(dl,"DIV",{class:!0});var sw=s(_t);T(my.$$.fragment,sw),zrr=i(sw),W2e=n(sw,"P",{});var ZMt=s(W2e);Qrr=r(ZMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZMt.forEach(t),Wrr=i(sw),ud=n(sw,"P",{});var rre=s(ud);Hrr=r(rre,`Note:
Loading a model from its configuration file does `),H2e=n(rre,"STRONG",{});var eEt=s(H2e);Urr=r(eEt,"not"),eEt.forEach(t),Jrr=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=n(rre,"A",{href:!0});var oEt=s(CQ);Yrr=r(oEt,"from_pretrained()"),oEt.forEach(t),Krr=r(rre," to load the model weights."),rre.forEach(t),Zrr=i(sw),T(Z6.$$.fragment,sw),sw.forEach(t),etr=i(dl),lo=n(dl,"DIV",{class:!0});var _a=s(lo);T(gy.$$.fragment,_a),otr=i(_a),U2e=n(_a,"P",{});var rEt=s(U2e);rtr=r(rEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rEt.forEach(t),ttr=i(_a),Xa=n(_a,"P",{});var lw=s(Xa);atr=r(lw,"The model class to instantiate is selected based on the "),J2e=n(lw,"CODE",{});var tEt=s(J2e);ntr=r(tEt,"model_type"),tEt.forEach(t),str=r(lw,` property of the config object (either
passed as an argument or loaded from `),Y2e=n(lw,"CODE",{});var aEt=s(Y2e);ltr=r(aEt,"pretrained_model_name_or_path"),aEt.forEach(t),itr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n(lw,"CODE",{});var nEt=s(K2e);dtr=r(nEt,"pretrained_model_name_or_path"),nEt.forEach(t),ctr=r(lw,":"),lw.forEach(t),ftr=i(_a),Fe=n(_a,"UL",{});var Te=s(Fe);eT=n(Te,"LI",{});var dBe=s(eT);Z2e=n(dBe,"STRONG",{});var sEt=s(Z2e);mtr=r(sEt,"beit"),sEt.forEach(t),gtr=r(dBe," \u2014 "),wQ=n(dBe,"A",{href:!0});var lEt=s(wQ);htr=r(lEt,"BeitForImageClassification"),lEt.forEach(t),ptr=r(dBe," (BEiT model)"),dBe.forEach(t),_tr=i(Te),oT=n(Te,"LI",{});var cBe=s(oT);e1e=n(cBe,"STRONG",{});var iEt=s(e1e);utr=r(iEt,"convnext"),iEt.forEach(t),btr=r(cBe," \u2014 "),AQ=n(cBe,"A",{href:!0});var dEt=s(AQ);vtr=r(dEt,"ConvNextForImageClassification"),dEt.forEach(t),Ftr=r(cBe," (ConvNeXT model)"),cBe.forEach(t),Ttr=i(Te),rT=n(Te,"LI",{});var fBe=s(rT);o1e=n(fBe,"STRONG",{});var cEt=s(o1e);Mtr=r(cEt,"cvt"),cEt.forEach(t),Etr=r(fBe," \u2014 "),LQ=n(fBe,"A",{href:!0});var fEt=s(LQ);Ctr=r(fEt,"CvtForImageClassification"),fEt.forEach(t),wtr=r(fBe," (CvT model)"),fBe.forEach(t),Atr=i(Te),tT=n(Te,"LI",{});var mBe=s(tT);r1e=n(mBe,"STRONG",{});var mEt=s(r1e);Ltr=r(mEt,"data2vec-vision"),mEt.forEach(t),ytr=r(mBe," \u2014 "),yQ=n(mBe,"A",{href:!0});var gEt=s(yQ);xtr=r(gEt,"Data2VecVisionForImageClassification"),gEt.forEach(t),$tr=r(mBe," (Data2VecVision model)"),mBe.forEach(t),ktr=i(Te),zs=n(Te,"LI",{});var lS=s(zs);t1e=n(lS,"STRONG",{});var hEt=s(t1e);Str=r(hEt,"deit"),hEt.forEach(t),Rtr=r(lS," \u2014 "),xQ=n(lS,"A",{href:!0});var pEt=s(xQ);Ptr=r(pEt,"DeiTForImageClassification"),pEt.forEach(t),Btr=r(lS," or "),$Q=n(lS,"A",{href:!0});var _Et=s($Q);Itr=r(_Et,"DeiTForImageClassificationWithTeacher"),_Et.forEach(t),Ntr=r(lS," (DeiT model)"),lS.forEach(t),qtr=i(Te),aT=n(Te,"LI",{});var gBe=s(aT);a1e=n(gBe,"STRONG",{});var uEt=s(a1e);jtr=r(uEt,"imagegpt"),uEt.forEach(t),Dtr=r(gBe," \u2014 "),kQ=n(gBe,"A",{href:!0});var bEt=s(kQ);Gtr=r(bEt,"ImageGPTForImageClassification"),bEt.forEach(t),Otr=r(gBe," (ImageGPT model)"),gBe.forEach(t),Vtr=i(Te),Qs=n(Te,"LI",{});var iS=s(Qs);n1e=n(iS,"STRONG",{});var vEt=s(n1e);Xtr=r(vEt,"levit"),vEt.forEach(t),ztr=r(iS," \u2014 "),SQ=n(iS,"A",{href:!0});var FEt=s(SQ);Qtr=r(FEt,"LevitForImageClassification"),FEt.forEach(t),Wtr=r(iS," or "),RQ=n(iS,"A",{href:!0});var TEt=s(RQ);Htr=r(TEt,"LevitForImageClassificationWithTeacher"),TEt.forEach(t),Utr=r(iS," (LeViT model)"),iS.forEach(t),Jtr=i(Te),ut=n(Te,"LI",{});var yf=s(ut);s1e=n(yf,"STRONG",{});var MEt=s(s1e);Ytr=r(MEt,"perceiver"),MEt.forEach(t),Ktr=r(yf," \u2014 "),PQ=n(yf,"A",{href:!0});var EEt=s(PQ);Ztr=r(EEt,"PerceiverForImageClassificationLearned"),EEt.forEach(t),ear=r(yf," or "),BQ=n(yf,"A",{href:!0});var CEt=s(BQ);oar=r(CEt,"PerceiverForImageClassificationFourier"),CEt.forEach(t),rar=r(yf," or "),IQ=n(yf,"A",{href:!0});var wEt=s(IQ);tar=r(wEt,"PerceiverForImageClassificationConvProcessing"),wEt.forEach(t),aar=r(yf," (Perceiver model)"),yf.forEach(t),nar=i(Te),nT=n(Te,"LI",{});var hBe=s(nT);l1e=n(hBe,"STRONG",{});var AEt=s(l1e);sar=r(AEt,"poolformer"),AEt.forEach(t),lar=r(hBe," \u2014 "),NQ=n(hBe,"A",{href:!0});var LEt=s(NQ);iar=r(LEt,"PoolFormerForImageClassification"),LEt.forEach(t),dar=r(hBe," (PoolFormer model)"),hBe.forEach(t),car=i(Te),sT=n(Te,"LI",{});var pBe=s(sT);i1e=n(pBe,"STRONG",{});var yEt=s(i1e);far=r(yEt,"regnet"),yEt.forEach(t),mar=r(pBe," \u2014 "),qQ=n(pBe,"A",{href:!0});var xEt=s(qQ);gar=r(xEt,"RegNetForImageClassification"),xEt.forEach(t),har=r(pBe," (RegNet model)"),pBe.forEach(t),par=i(Te),lT=n(Te,"LI",{});var _Be=s(lT);d1e=n(_Be,"STRONG",{});var $Et=s(d1e);_ar=r($Et,"resnet"),$Et.forEach(t),uar=r(_Be," \u2014 "),jQ=n(_Be,"A",{href:!0});var kEt=s(jQ);bar=r(kEt,"ResNetForImageClassification"),kEt.forEach(t),Far=r(_Be," (ResNet model)"),_Be.forEach(t),Tar=i(Te),iT=n(Te,"LI",{});var uBe=s(iT);c1e=n(uBe,"STRONG",{});var SEt=s(c1e);Mar=r(SEt,"segformer"),SEt.forEach(t),Ear=r(uBe," \u2014 "),DQ=n(uBe,"A",{href:!0});var REt=s(DQ);Car=r(REt,"SegformerForImageClassification"),REt.forEach(t),war=r(uBe," (SegFormer model)"),uBe.forEach(t),Aar=i(Te),dT=n(Te,"LI",{});var bBe=s(dT);f1e=n(bBe,"STRONG",{});var PEt=s(f1e);Lar=r(PEt,"swin"),PEt.forEach(t),yar=r(bBe," \u2014 "),GQ=n(bBe,"A",{href:!0});var BEt=s(GQ);xar=r(BEt,"SwinForImageClassification"),BEt.forEach(t),$ar=r(bBe," (Swin Transformer model)"),bBe.forEach(t),kar=i(Te),cT=n(Te,"LI",{});var vBe=s(cT);m1e=n(vBe,"STRONG",{});var IEt=s(m1e);Sar=r(IEt,"van"),IEt.forEach(t),Rar=r(vBe," \u2014 "),OQ=n(vBe,"A",{href:!0});var NEt=s(OQ);Par=r(NEt,"VanForImageClassification"),NEt.forEach(t),Bar=r(vBe," (VAN model)"),vBe.forEach(t),Iar=i(Te),fT=n(Te,"LI",{});var FBe=s(fT);g1e=n(FBe,"STRONG",{});var qEt=s(g1e);Nar=r(qEt,"vit"),qEt.forEach(t),qar=r(FBe," \u2014 "),VQ=n(FBe,"A",{href:!0});var jEt=s(VQ);jar=r(jEt,"ViTForImageClassification"),jEt.forEach(t),Dar=r(FBe," (ViT model)"),FBe.forEach(t),Te.forEach(t),Gar=i(_a),mT=n(_a,"P",{});var TBe=s(mT);Oar=r(TBe,"The model is set in evaluation mode by default using "),h1e=n(TBe,"CODE",{});var DEt=s(h1e);Var=r(DEt,"model.eval()"),DEt.forEach(t),Xar=r(TBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=n(TBe,"CODE",{});var GEt=s(p1e);zar=r(GEt,"model.train()"),GEt.forEach(t),TBe.forEach(t),Qar=i(_a),T(gT.$$.fragment,_a),_a.forEach(t),dl.forEach(t),YOe=i(f),bd=n(f,"H2",{class:!0});var tze=s(bd);hT=n(tze,"A",{id:!0,class:!0,href:!0});var OEt=s(hT);_1e=n(OEt,"SPAN",{});var VEt=s(_1e);T(hy.$$.fragment,VEt),VEt.forEach(t),OEt.forEach(t),War=i(tze),u1e=n(tze,"SPAN",{});var XEt=s(u1e);Har=r(XEt,"AutoModelForVision2Seq"),XEt.forEach(t),tze.forEach(t),KOe=i(f),Oo=n(f,"DIV",{class:!0});var cl=s(Oo);T(py.$$.fragment,cl),Uar=i(cl),vd=n(cl,"P",{});var tre=s(vd);Jar=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XQ=n(tre,"A",{href:!0});var zEt=s(XQ);Yar=r(zEt,"from_pretrained()"),zEt.forEach(t),Kar=r(tre," class method or the "),zQ=n(tre,"A",{href:!0});var QEt=s(zQ);Zar=r(QEt,"from_config()"),QEt.forEach(t),enr=r(tre,` class
method.`),tre.forEach(t),onr=i(cl),_y=n(cl,"P",{});var aze=s(_y);rnr=r(aze,"This class cannot be instantiated directly using "),b1e=n(aze,"CODE",{});var WEt=s(b1e);tnr=r(WEt,"__init__()"),WEt.forEach(t),anr=r(aze," (throws an error)."),aze.forEach(t),nnr=i(cl),bt=n(cl,"DIV",{class:!0});var iw=s(bt);T(uy.$$.fragment,iw),snr=i(iw),v1e=n(iw,"P",{});var HEt=s(v1e);lnr=r(HEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HEt.forEach(t),inr=i(iw),Fd=n(iw,"P",{});var are=s(Fd);dnr=r(are,`Note:
Loading a model from its configuration file does `),F1e=n(are,"STRONG",{});var UEt=s(F1e);cnr=r(UEt,"not"),UEt.forEach(t),fnr=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(are,"A",{href:!0});var JEt=s(QQ);mnr=r(JEt,"from_pretrained()"),JEt.forEach(t),gnr=r(are," to load the model weights."),are.forEach(t),hnr=i(iw),T(pT.$$.fragment,iw),iw.forEach(t),pnr=i(cl),io=n(cl,"DIV",{class:!0});var ua=s(io);T(by.$$.fragment,ua),_nr=i(ua),T1e=n(ua,"P",{});var YEt=s(T1e);unr=r(YEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YEt.forEach(t),bnr=i(ua),za=n(ua,"P",{});var dw=s(za);vnr=r(dw,"The model class to instantiate is selected based on the "),M1e=n(dw,"CODE",{});var KEt=s(M1e);Fnr=r(KEt,"model_type"),KEt.forEach(t),Tnr=r(dw,` property of the config object (either
passed as an argument or loaded from `),E1e=n(dw,"CODE",{});var ZEt=s(E1e);Mnr=r(ZEt,"pretrained_model_name_or_path"),ZEt.forEach(t),Enr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(dw,"CODE",{});var e4t=s(C1e);Cnr=r(e4t,"pretrained_model_name_or_path"),e4t.forEach(t),wnr=r(dw,":"),dw.forEach(t),Anr=i(ua),w1e=n(ua,"UL",{});var o4t=s(w1e);_T=n(o4t,"LI",{});var MBe=s(_T);A1e=n(MBe,"STRONG",{});var r4t=s(A1e);Lnr=r(r4t,"vision-encoder-decoder"),r4t.forEach(t),ynr=r(MBe," \u2014 "),WQ=n(MBe,"A",{href:!0});var t4t=s(WQ);xnr=r(t4t,"VisionEncoderDecoderModel"),t4t.forEach(t),$nr=r(MBe," (Vision Encoder decoder model)"),MBe.forEach(t),o4t.forEach(t),knr=i(ua),uT=n(ua,"P",{});var EBe=s(uT);Snr=r(EBe,"The model is set in evaluation mode by default using "),L1e=n(EBe,"CODE",{});var a4t=s(L1e);Rnr=r(a4t,"model.eval()"),a4t.forEach(t),Pnr=r(EBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y1e=n(EBe,"CODE",{});var n4t=s(y1e);Bnr=r(n4t,"model.train()"),n4t.forEach(t),EBe.forEach(t),Inr=i(ua),T(bT.$$.fragment,ua),ua.forEach(t),cl.forEach(t),ZOe=i(f),Td=n(f,"H2",{class:!0});var nze=s(Td);vT=n(nze,"A",{id:!0,class:!0,href:!0});var s4t=s(vT);x1e=n(s4t,"SPAN",{});var l4t=s(x1e);T(vy.$$.fragment,l4t),l4t.forEach(t),s4t.forEach(t),Nnr=i(nze),$1e=n(nze,"SPAN",{});var i4t=s($1e);qnr=r(i4t,"AutoModelForVisualQuestionAnswering"),i4t.forEach(t),nze.forEach(t),eVe=i(f),Vo=n(f,"DIV",{class:!0});var fl=s(Vo);T(Fy.$$.fragment,fl),jnr=i(fl),Md=n(fl,"P",{});var nre=s(Md);Dnr=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),HQ=n(nre,"A",{href:!0});var d4t=s(HQ);Gnr=r(d4t,"from_pretrained()"),d4t.forEach(t),Onr=r(nre," class method or the "),UQ=n(nre,"A",{href:!0});var c4t=s(UQ);Vnr=r(c4t,"from_config()"),c4t.forEach(t),Xnr=r(nre,` class
method.`),nre.forEach(t),znr=i(fl),Ty=n(fl,"P",{});var sze=s(Ty);Qnr=r(sze,"This class cannot be instantiated directly using "),k1e=n(sze,"CODE",{});var f4t=s(k1e);Wnr=r(f4t,"__init__()"),f4t.forEach(t),Hnr=r(sze," (throws an error)."),sze.forEach(t),Unr=i(fl),vt=n(fl,"DIV",{class:!0});var cw=s(vt);T(My.$$.fragment,cw),Jnr=i(cw),S1e=n(cw,"P",{});var m4t=s(S1e);Ynr=r(m4t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),m4t.forEach(t),Knr=i(cw),Ed=n(cw,"P",{});var sre=s(Ed);Znr=r(sre,`Note:
Loading a model from its configuration file does `),R1e=n(sre,"STRONG",{});var g4t=s(R1e);esr=r(g4t,"not"),g4t.forEach(t),osr=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(sre,"A",{href:!0});var h4t=s(JQ);rsr=r(h4t,"from_pretrained()"),h4t.forEach(t),tsr=r(sre," to load the model weights."),sre.forEach(t),asr=i(cw),T(FT.$$.fragment,cw),cw.forEach(t),nsr=i(fl),co=n(fl,"DIV",{class:!0});var ba=s(co);T(Ey.$$.fragment,ba),ssr=i(ba),P1e=n(ba,"P",{});var p4t=s(P1e);lsr=r(p4t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),p4t.forEach(t),isr=i(ba),Qa=n(ba,"P",{});var fw=s(Qa);dsr=r(fw,"The model class to instantiate is selected based on the "),B1e=n(fw,"CODE",{});var _4t=s(B1e);csr=r(_4t,"model_type"),_4t.forEach(t),fsr=r(fw,` property of the config object (either
passed as an argument or loaded from `),I1e=n(fw,"CODE",{});var u4t=s(I1e);msr=r(u4t,"pretrained_model_name_or_path"),u4t.forEach(t),gsr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(fw,"CODE",{});var b4t=s(N1e);hsr=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),psr=r(fw,":"),fw.forEach(t),_sr=i(ba),q1e=n(ba,"UL",{});var v4t=s(q1e);TT=n(v4t,"LI",{});var CBe=s(TT);j1e=n(CBe,"STRONG",{});var F4t=s(j1e);usr=r(F4t,"vilt"),F4t.forEach(t),bsr=r(CBe," \u2014 "),YQ=n(CBe,"A",{href:!0});var T4t=s(YQ);vsr=r(T4t,"ViltForQuestionAnswering"),T4t.forEach(t),Fsr=r(CBe," (ViLT model)"),CBe.forEach(t),v4t.forEach(t),Tsr=i(ba),MT=n(ba,"P",{});var wBe=s(MT);Msr=r(wBe,"The model is set in evaluation mode by default using "),D1e=n(wBe,"CODE",{});var M4t=s(D1e);Esr=r(M4t,"model.eval()"),M4t.forEach(t),Csr=r(wBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=n(wBe,"CODE",{});var E4t=s(G1e);wsr=r(E4t,"model.train()"),E4t.forEach(t),wBe.forEach(t),Asr=i(ba),T(ET.$$.fragment,ba),ba.forEach(t),fl.forEach(t),oVe=i(f),Cd=n(f,"H2",{class:!0});var lze=s(Cd);CT=n(lze,"A",{id:!0,class:!0,href:!0});var C4t=s(CT);O1e=n(C4t,"SPAN",{});var w4t=s(O1e);T(Cy.$$.fragment,w4t),w4t.forEach(t),C4t.forEach(t),Lsr=i(lze),V1e=n(lze,"SPAN",{});var A4t=s(V1e);ysr=r(A4t,"AutoModelForAudioClassification"),A4t.forEach(t),lze.forEach(t),rVe=i(f),Xo=n(f,"DIV",{class:!0});var ml=s(Xo);T(wy.$$.fragment,ml),xsr=i(ml),wd=n(ml,"P",{});var lre=s(wd);$sr=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KQ=n(lre,"A",{href:!0});var L4t=s(KQ);ksr=r(L4t,"from_pretrained()"),L4t.forEach(t),Ssr=r(lre," class method or the "),ZQ=n(lre,"A",{href:!0});var y4t=s(ZQ);Rsr=r(y4t,"from_config()"),y4t.forEach(t),Psr=r(lre,` class
method.`),lre.forEach(t),Bsr=i(ml),Ay=n(ml,"P",{});var ize=s(Ay);Isr=r(ize,"This class cannot be instantiated directly using "),X1e=n(ize,"CODE",{});var x4t=s(X1e);Nsr=r(x4t,"__init__()"),x4t.forEach(t),qsr=r(ize," (throws an error)."),ize.forEach(t),jsr=i(ml),Ft=n(ml,"DIV",{class:!0});var mw=s(Ft);T(Ly.$$.fragment,mw),Dsr=i(mw),z1e=n(mw,"P",{});var $4t=s(z1e);Gsr=r($4t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),$4t.forEach(t),Osr=i(mw),Ad=n(mw,"P",{});var ire=s(Ad);Vsr=r(ire,`Note:
Loading a model from its configuration file does `),Q1e=n(ire,"STRONG",{});var k4t=s(Q1e);Xsr=r(k4t,"not"),k4t.forEach(t),zsr=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(ire,"A",{href:!0});var S4t=s(eW);Qsr=r(S4t,"from_pretrained()"),S4t.forEach(t),Wsr=r(ire," to load the model weights."),ire.forEach(t),Hsr=i(mw),T(wT.$$.fragment,mw),mw.forEach(t),Usr=i(ml),fo=n(ml,"DIV",{class:!0});var va=s(fo);T(yy.$$.fragment,va),Jsr=i(va),W1e=n(va,"P",{});var R4t=s(W1e);Ysr=r(R4t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),R4t.forEach(t),Ksr=i(va),Wa=n(va,"P",{});var gw=s(Wa);Zsr=r(gw,"The model class to instantiate is selected based on the "),H1e=n(gw,"CODE",{});var P4t=s(H1e);elr=r(P4t,"model_type"),P4t.forEach(t),olr=r(gw,` property of the config object (either
passed as an argument or loaded from `),U1e=n(gw,"CODE",{});var B4t=s(U1e);rlr=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),tlr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(gw,"CODE",{});var I4t=s(J1e);alr=r(I4t,"pretrained_model_name_or_path"),I4t.forEach(t),nlr=r(gw,":"),gw.forEach(t),slr=i(va),Pe=n(va,"UL",{});var ze=s(Pe);AT=n(ze,"LI",{});var ABe=s(AT);Y1e=n(ABe,"STRONG",{});var N4t=s(Y1e);llr=r(N4t,"data2vec-audio"),N4t.forEach(t),ilr=r(ABe," \u2014 "),oW=n(ABe,"A",{href:!0});var q4t=s(oW);dlr=r(q4t,"Data2VecAudioForSequenceClassification"),q4t.forEach(t),clr=r(ABe," (Data2VecAudio model)"),ABe.forEach(t),flr=i(ze),LT=n(ze,"LI",{});var LBe=s(LT);K1e=n(LBe,"STRONG",{});var j4t=s(K1e);mlr=r(j4t,"hubert"),j4t.forEach(t),glr=r(LBe," \u2014 "),rW=n(LBe,"A",{href:!0});var D4t=s(rW);hlr=r(D4t,"HubertForSequenceClassification"),D4t.forEach(t),plr=r(LBe," (Hubert model)"),LBe.forEach(t),_lr=i(ze),yT=n(ze,"LI",{});var yBe=s(yT);Z1e=n(yBe,"STRONG",{});var G4t=s(Z1e);ulr=r(G4t,"sew"),G4t.forEach(t),blr=r(yBe," \u2014 "),tW=n(yBe,"A",{href:!0});var O4t=s(tW);vlr=r(O4t,"SEWForSequenceClassification"),O4t.forEach(t),Flr=r(yBe," (SEW model)"),yBe.forEach(t),Tlr=i(ze),xT=n(ze,"LI",{});var xBe=s(xT);ebe=n(xBe,"STRONG",{});var V4t=s(ebe);Mlr=r(V4t,"sew-d"),V4t.forEach(t),Elr=r(xBe," \u2014 "),aW=n(xBe,"A",{href:!0});var X4t=s(aW);Clr=r(X4t,"SEWDForSequenceClassification"),X4t.forEach(t),wlr=r(xBe," (SEW-D model)"),xBe.forEach(t),Alr=i(ze),$T=n(ze,"LI",{});var $Be=s($T);obe=n($Be,"STRONG",{});var z4t=s(obe);Llr=r(z4t,"unispeech"),z4t.forEach(t),ylr=r($Be," \u2014 "),nW=n($Be,"A",{href:!0});var Q4t=s(nW);xlr=r(Q4t,"UniSpeechForSequenceClassification"),Q4t.forEach(t),$lr=r($Be," (UniSpeech model)"),$Be.forEach(t),klr=i(ze),kT=n(ze,"LI",{});var kBe=s(kT);rbe=n(kBe,"STRONG",{});var W4t=s(rbe);Slr=r(W4t,"unispeech-sat"),W4t.forEach(t),Rlr=r(kBe," \u2014 "),sW=n(kBe,"A",{href:!0});var H4t=s(sW);Plr=r(H4t,"UniSpeechSatForSequenceClassification"),H4t.forEach(t),Blr=r(kBe," (UniSpeechSat model)"),kBe.forEach(t),Ilr=i(ze),ST=n(ze,"LI",{});var SBe=s(ST);tbe=n(SBe,"STRONG",{});var U4t=s(tbe);Nlr=r(U4t,"wav2vec2"),U4t.forEach(t),qlr=r(SBe," \u2014 "),lW=n(SBe,"A",{href:!0});var J4t=s(lW);jlr=r(J4t,"Wav2Vec2ForSequenceClassification"),J4t.forEach(t),Dlr=r(SBe," (Wav2Vec2 model)"),SBe.forEach(t),Glr=i(ze),RT=n(ze,"LI",{});var RBe=s(RT);abe=n(RBe,"STRONG",{});var Y4t=s(abe);Olr=r(Y4t,"wav2vec2-conformer"),Y4t.forEach(t),Vlr=r(RBe," \u2014 "),iW=n(RBe,"A",{href:!0});var K4t=s(iW);Xlr=r(K4t,"Wav2Vec2ConformerForSequenceClassification"),K4t.forEach(t),zlr=r(RBe," (Wav2Vec2-Conformer model)"),RBe.forEach(t),Qlr=i(ze),PT=n(ze,"LI",{});var PBe=s(PT);nbe=n(PBe,"STRONG",{});var Z4t=s(nbe);Wlr=r(Z4t,"wavlm"),Z4t.forEach(t),Hlr=r(PBe," \u2014 "),dW=n(PBe,"A",{href:!0});var eCt=s(dW);Ulr=r(eCt,"WavLMForSequenceClassification"),eCt.forEach(t),Jlr=r(PBe," (WavLM model)"),PBe.forEach(t),ze.forEach(t),Ylr=i(va),BT=n(va,"P",{});var BBe=s(BT);Klr=r(BBe,"The model is set in evaluation mode by default using "),sbe=n(BBe,"CODE",{});var oCt=s(sbe);Zlr=r(oCt,"model.eval()"),oCt.forEach(t),eir=r(BBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lbe=n(BBe,"CODE",{});var rCt=s(lbe);oir=r(rCt,"model.train()"),rCt.forEach(t),BBe.forEach(t),rir=i(va),T(IT.$$.fragment,va),va.forEach(t),ml.forEach(t),tVe=i(f),Ld=n(f,"H2",{class:!0});var dze=s(Ld);NT=n(dze,"A",{id:!0,class:!0,href:!0});var tCt=s(NT);ibe=n(tCt,"SPAN",{});var aCt=s(ibe);T(xy.$$.fragment,aCt),aCt.forEach(t),tCt.forEach(t),tir=i(dze),dbe=n(dze,"SPAN",{});var nCt=s(dbe);air=r(nCt,"AutoModelForAudioFrameClassification"),nCt.forEach(t),dze.forEach(t),aVe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T($y.$$.fragment,gl),nir=i(gl),yd=n(gl,"P",{});var dre=s(yd);sir=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cW=n(dre,"A",{href:!0});var sCt=s(cW);lir=r(sCt,"from_pretrained()"),sCt.forEach(t),iir=r(dre," class method or the "),fW=n(dre,"A",{href:!0});var lCt=s(fW);dir=r(lCt,"from_config()"),lCt.forEach(t),cir=r(dre,` class
method.`),dre.forEach(t),fir=i(gl),ky=n(gl,"P",{});var cze=s(ky);mir=r(cze,"This class cannot be instantiated directly using "),cbe=n(cze,"CODE",{});var iCt=s(cbe);gir=r(iCt,"__init__()"),iCt.forEach(t),hir=r(cze," (throws an error)."),cze.forEach(t),pir=i(gl),Tt=n(gl,"DIV",{class:!0});var hw=s(Tt);T(Sy.$$.fragment,hw),_ir=i(hw),fbe=n(hw,"P",{});var dCt=s(fbe);uir=r(dCt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),dCt.forEach(t),bir=i(hw),xd=n(hw,"P",{});var cre=s(xd);vir=r(cre,`Note:
Loading a model from its configuration file does `),mbe=n(cre,"STRONG",{});var cCt=s(mbe);Fir=r(cCt,"not"),cCt.forEach(t),Tir=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(cre,"A",{href:!0});var fCt=s(mW);Mir=r(fCt,"from_pretrained()"),fCt.forEach(t),Eir=r(cre," to load the model weights."),cre.forEach(t),Cir=i(hw),T(qT.$$.fragment,hw),hw.forEach(t),wir=i(gl),mo=n(gl,"DIV",{class:!0});var Fa=s(mo);T(Ry.$$.fragment,Fa),Air=i(Fa),gbe=n(Fa,"P",{});var mCt=s(gbe);Lir=r(mCt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),mCt.forEach(t),yir=i(Fa),Ha=n(Fa,"P",{});var pw=s(Ha);xir=r(pw,"The model class to instantiate is selected based on the "),hbe=n(pw,"CODE",{});var gCt=s(hbe);$ir=r(gCt,"model_type"),gCt.forEach(t),kir=r(pw,` property of the config object (either
passed as an argument or loaded from `),pbe=n(pw,"CODE",{});var hCt=s(pbe);Sir=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),Rir=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n(pw,"CODE",{});var pCt=s(_be);Pir=r(pCt,"pretrained_model_name_or_path"),pCt.forEach(t),Bir=r(pw,":"),pw.forEach(t),Iir=i(Fa),et=n(Fa,"UL",{});var hl=s(et);jT=n(hl,"LI",{});var IBe=s(jT);ube=n(IBe,"STRONG",{});var _Ct=s(ube);Nir=r(_Ct,"data2vec-audio"),_Ct.forEach(t),qir=r(IBe," \u2014 "),gW=n(IBe,"A",{href:!0});var uCt=s(gW);jir=r(uCt,"Data2VecAudioForAudioFrameClassification"),uCt.forEach(t),Dir=r(IBe," (Data2VecAudio model)"),IBe.forEach(t),Gir=i(hl),DT=n(hl,"LI",{});var NBe=s(DT);bbe=n(NBe,"STRONG",{});var bCt=s(bbe);Oir=r(bCt,"unispeech-sat"),bCt.forEach(t),Vir=r(NBe," \u2014 "),hW=n(NBe,"A",{href:!0});var vCt=s(hW);Xir=r(vCt,"UniSpeechSatForAudioFrameClassification"),vCt.forEach(t),zir=r(NBe," (UniSpeechSat model)"),NBe.forEach(t),Qir=i(hl),GT=n(hl,"LI",{});var qBe=s(GT);vbe=n(qBe,"STRONG",{});var FCt=s(vbe);Wir=r(FCt,"wav2vec2"),FCt.forEach(t),Hir=r(qBe," \u2014 "),pW=n(qBe,"A",{href:!0});var TCt=s(pW);Uir=r(TCt,"Wav2Vec2ForAudioFrameClassification"),TCt.forEach(t),Jir=r(qBe," (Wav2Vec2 model)"),qBe.forEach(t),Yir=i(hl),OT=n(hl,"LI",{});var jBe=s(OT);Fbe=n(jBe,"STRONG",{});var MCt=s(Fbe);Kir=r(MCt,"wav2vec2-conformer"),MCt.forEach(t),Zir=r(jBe," \u2014 "),_W=n(jBe,"A",{href:!0});var ECt=s(_W);edr=r(ECt,"Wav2Vec2ConformerForAudioFrameClassification"),ECt.forEach(t),odr=r(jBe," (Wav2Vec2-Conformer model)"),jBe.forEach(t),rdr=i(hl),VT=n(hl,"LI",{});var DBe=s(VT);Tbe=n(DBe,"STRONG",{});var CCt=s(Tbe);tdr=r(CCt,"wavlm"),CCt.forEach(t),adr=r(DBe," \u2014 "),uW=n(DBe,"A",{href:!0});var wCt=s(uW);ndr=r(wCt,"WavLMForAudioFrameClassification"),wCt.forEach(t),sdr=r(DBe," (WavLM model)"),DBe.forEach(t),hl.forEach(t),ldr=i(Fa),XT=n(Fa,"P",{});var GBe=s(XT);idr=r(GBe,"The model is set in evaluation mode by default using "),Mbe=n(GBe,"CODE",{});var ACt=s(Mbe);ddr=r(ACt,"model.eval()"),ACt.forEach(t),cdr=r(GBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=n(GBe,"CODE",{});var LCt=s(Ebe);fdr=r(LCt,"model.train()"),LCt.forEach(t),GBe.forEach(t),mdr=i(Fa),T(zT.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),nVe=i(f),$d=n(f,"H2",{class:!0});var fze=s($d);QT=n(fze,"A",{id:!0,class:!0,href:!0});var yCt=s(QT);Cbe=n(yCt,"SPAN",{});var xCt=s(Cbe);T(Py.$$.fragment,xCt),xCt.forEach(t),yCt.forEach(t),gdr=i(fze),wbe=n(fze,"SPAN",{});var $Ct=s(wbe);hdr=r($Ct,"AutoModelForCTC"),$Ct.forEach(t),fze.forEach(t),sVe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(By.$$.fragment,pl),pdr=i(pl),kd=n(pl,"P",{});var fre=s(kd);_dr=r(fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bW=n(fre,"A",{href:!0});var kCt=s(bW);udr=r(kCt,"from_pretrained()"),kCt.forEach(t),bdr=r(fre," class method or the "),vW=n(fre,"A",{href:!0});var SCt=s(vW);vdr=r(SCt,"from_config()"),SCt.forEach(t),Fdr=r(fre,` class
method.`),fre.forEach(t),Tdr=i(pl),Iy=n(pl,"P",{});var mze=s(Iy);Mdr=r(mze,"This class cannot be instantiated directly using "),Abe=n(mze,"CODE",{});var RCt=s(Abe);Edr=r(RCt,"__init__()"),RCt.forEach(t),Cdr=r(mze," (throws an error)."),mze.forEach(t),wdr=i(pl),Mt=n(pl,"DIV",{class:!0});var _w=s(Mt);T(Ny.$$.fragment,_w),Adr=i(_w),Lbe=n(_w,"P",{});var PCt=s(Lbe);Ldr=r(PCt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),PCt.forEach(t),ydr=i(_w),Sd=n(_w,"P",{});var mre=s(Sd);xdr=r(mre,`Note:
Loading a model from its configuration file does `),ybe=n(mre,"STRONG",{});var BCt=s(ybe);$dr=r(BCt,"not"),BCt.forEach(t),kdr=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(mre,"A",{href:!0});var ICt=s(FW);Sdr=r(ICt,"from_pretrained()"),ICt.forEach(t),Rdr=r(mre," to load the model weights."),mre.forEach(t),Pdr=i(_w),T(WT.$$.fragment,_w),_w.forEach(t),Bdr=i(pl),go=n(pl,"DIV",{class:!0});var Ta=s(go);T(qy.$$.fragment,Ta),Idr=i(Ta),xbe=n(Ta,"P",{});var NCt=s(xbe);Ndr=r(NCt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),NCt.forEach(t),qdr=i(Ta),Ua=n(Ta,"P",{});var uw=s(Ua);jdr=r(uw,"The model class to instantiate is selected based on the "),$be=n(uw,"CODE",{});var qCt=s($be);Ddr=r(qCt,"model_type"),qCt.forEach(t),Gdr=r(uw,` property of the config object (either
passed as an argument or loaded from `),kbe=n(uw,"CODE",{});var jCt=s(kbe);Odr=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),Vdr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=n(uw,"CODE",{});var DCt=s(Sbe);Xdr=r(DCt,"pretrained_model_name_or_path"),DCt.forEach(t),zdr=r(uw,":"),uw.forEach(t),Qdr=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);HT=n(Be,"LI",{});var OBe=s(HT);Rbe=n(OBe,"STRONG",{});var GCt=s(Rbe);Wdr=r(GCt,"data2vec-audio"),GCt.forEach(t),Hdr=r(OBe," \u2014 "),TW=n(OBe,"A",{href:!0});var OCt=s(TW);Udr=r(OCt,"Data2VecAudioForCTC"),OCt.forEach(t),Jdr=r(OBe," (Data2VecAudio model)"),OBe.forEach(t),Ydr=i(Be),UT=n(Be,"LI",{});var VBe=s(UT);Pbe=n(VBe,"STRONG",{});var VCt=s(Pbe);Kdr=r(VCt,"hubert"),VCt.forEach(t),Zdr=r(VBe," \u2014 "),MW=n(VBe,"A",{href:!0});var XCt=s(MW);ecr=r(XCt,"HubertForCTC"),XCt.forEach(t),ocr=r(VBe," (Hubert model)"),VBe.forEach(t),rcr=i(Be),JT=n(Be,"LI",{});var XBe=s(JT);Bbe=n(XBe,"STRONG",{});var zCt=s(Bbe);tcr=r(zCt,"mctct"),zCt.forEach(t),acr=r(XBe," \u2014 "),EW=n(XBe,"A",{href:!0});var QCt=s(EW);ncr=r(QCt,"MCTCTForCTC"),QCt.forEach(t),scr=r(XBe," (M-CTC-T model)"),XBe.forEach(t),lcr=i(Be),YT=n(Be,"LI",{});var zBe=s(YT);Ibe=n(zBe,"STRONG",{});var WCt=s(Ibe);icr=r(WCt,"sew"),WCt.forEach(t),dcr=r(zBe," \u2014 "),CW=n(zBe,"A",{href:!0});var HCt=s(CW);ccr=r(HCt,"SEWForCTC"),HCt.forEach(t),fcr=r(zBe," (SEW model)"),zBe.forEach(t),mcr=i(Be),KT=n(Be,"LI",{});var QBe=s(KT);Nbe=n(QBe,"STRONG",{});var UCt=s(Nbe);gcr=r(UCt,"sew-d"),UCt.forEach(t),hcr=r(QBe," \u2014 "),wW=n(QBe,"A",{href:!0});var JCt=s(wW);pcr=r(JCt,"SEWDForCTC"),JCt.forEach(t),_cr=r(QBe," (SEW-D model)"),QBe.forEach(t),ucr=i(Be),ZT=n(Be,"LI",{});var WBe=s(ZT);qbe=n(WBe,"STRONG",{});var YCt=s(qbe);bcr=r(YCt,"unispeech"),YCt.forEach(t),vcr=r(WBe," \u2014 "),AW=n(WBe,"A",{href:!0});var KCt=s(AW);Fcr=r(KCt,"UniSpeechForCTC"),KCt.forEach(t),Tcr=r(WBe," (UniSpeech model)"),WBe.forEach(t),Mcr=i(Be),e7=n(Be,"LI",{});var HBe=s(e7);jbe=n(HBe,"STRONG",{});var ZCt=s(jbe);Ecr=r(ZCt,"unispeech-sat"),ZCt.forEach(t),Ccr=r(HBe," \u2014 "),LW=n(HBe,"A",{href:!0});var e5t=s(LW);wcr=r(e5t,"UniSpeechSatForCTC"),e5t.forEach(t),Acr=r(HBe," (UniSpeechSat model)"),HBe.forEach(t),Lcr=i(Be),o7=n(Be,"LI",{});var UBe=s(o7);Dbe=n(UBe,"STRONG",{});var o5t=s(Dbe);ycr=r(o5t,"wav2vec2"),o5t.forEach(t),xcr=r(UBe," \u2014 "),yW=n(UBe,"A",{href:!0});var r5t=s(yW);$cr=r(r5t,"Wav2Vec2ForCTC"),r5t.forEach(t),kcr=r(UBe," (Wav2Vec2 model)"),UBe.forEach(t),Scr=i(Be),r7=n(Be,"LI",{});var JBe=s(r7);Gbe=n(JBe,"STRONG",{});var t5t=s(Gbe);Rcr=r(t5t,"wav2vec2-conformer"),t5t.forEach(t),Pcr=r(JBe," \u2014 "),xW=n(JBe,"A",{href:!0});var a5t=s(xW);Bcr=r(a5t,"Wav2Vec2ConformerForCTC"),a5t.forEach(t),Icr=r(JBe," (Wav2Vec2-Conformer model)"),JBe.forEach(t),Ncr=i(Be),t7=n(Be,"LI",{});var YBe=s(t7);Obe=n(YBe,"STRONG",{});var n5t=s(Obe);qcr=r(n5t,"wavlm"),n5t.forEach(t),jcr=r(YBe," \u2014 "),$W=n(YBe,"A",{href:!0});var s5t=s($W);Dcr=r(s5t,"WavLMForCTC"),s5t.forEach(t),Gcr=r(YBe," (WavLM model)"),YBe.forEach(t),Be.forEach(t),Ocr=i(Ta),a7=n(Ta,"P",{});var KBe=s(a7);Vcr=r(KBe,"The model is set in evaluation mode by default using "),Vbe=n(KBe,"CODE",{});var l5t=s(Vbe);Xcr=r(l5t,"model.eval()"),l5t.forEach(t),zcr=r(KBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xbe=n(KBe,"CODE",{});var i5t=s(Xbe);Qcr=r(i5t,"model.train()"),i5t.forEach(t),KBe.forEach(t),Wcr=i(Ta),T(n7.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),lVe=i(f),Rd=n(f,"H2",{class:!0});var gze=s(Rd);s7=n(gze,"A",{id:!0,class:!0,href:!0});var d5t=s(s7);zbe=n(d5t,"SPAN",{});var c5t=s(zbe);T(jy.$$.fragment,c5t),c5t.forEach(t),d5t.forEach(t),Hcr=i(gze),Qbe=n(gze,"SPAN",{});var f5t=s(Qbe);Ucr=r(f5t,"AutoModelForSpeechSeq2Seq"),f5t.forEach(t),gze.forEach(t),iVe=i(f),Wo=n(f,"DIV",{class:!0});var _l=s(Wo);T(Dy.$$.fragment,_l),Jcr=i(_l),Pd=n(_l,"P",{});var gre=s(Pd);Ycr=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kW=n(gre,"A",{href:!0});var m5t=s(kW);Kcr=r(m5t,"from_pretrained()"),m5t.forEach(t),Zcr=r(gre," class method or the "),SW=n(gre,"A",{href:!0});var g5t=s(SW);efr=r(g5t,"from_config()"),g5t.forEach(t),ofr=r(gre,` class
method.`),gre.forEach(t),rfr=i(_l),Gy=n(_l,"P",{});var hze=s(Gy);tfr=r(hze,"This class cannot be instantiated directly using "),Wbe=n(hze,"CODE",{});var h5t=s(Wbe);afr=r(h5t,"__init__()"),h5t.forEach(t),nfr=r(hze," (throws an error)."),hze.forEach(t),sfr=i(_l),Et=n(_l,"DIV",{class:!0});var bw=s(Et);T(Oy.$$.fragment,bw),lfr=i(bw),Hbe=n(bw,"P",{});var p5t=s(Hbe);ifr=r(p5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),p5t.forEach(t),dfr=i(bw),Bd=n(bw,"P",{});var hre=s(Bd);cfr=r(hre,`Note:
Loading a model from its configuration file does `),Ube=n(hre,"STRONG",{});var _5t=s(Ube);ffr=r(_5t,"not"),_5t.forEach(t),mfr=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(hre,"A",{href:!0});var u5t=s(RW);gfr=r(u5t,"from_pretrained()"),u5t.forEach(t),hfr=r(hre," to load the model weights."),hre.forEach(t),pfr=i(bw),T(l7.$$.fragment,bw),bw.forEach(t),_fr=i(_l),ho=n(_l,"DIV",{class:!0});var Ma=s(ho);T(Vy.$$.fragment,Ma),ufr=i(Ma),Jbe=n(Ma,"P",{});var b5t=s(Jbe);bfr=r(b5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),b5t.forEach(t),vfr=i(Ma),Ja=n(Ma,"P",{});var vw=s(Ja);Ffr=r(vw,"The model class to instantiate is selected based on the "),Ybe=n(vw,"CODE",{});var v5t=s(Ybe);Tfr=r(v5t,"model_type"),v5t.forEach(t),Mfr=r(vw,` property of the config object (either
passed as an argument or loaded from `),Kbe=n(vw,"CODE",{});var F5t=s(Kbe);Efr=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),Cfr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n(vw,"CODE",{});var T5t=s(Zbe);wfr=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),Afr=r(vw,":"),vw.forEach(t),Lfr=i(Ma),Xy=n(Ma,"UL",{});var pze=s(Xy);i7=n(pze,"LI",{});var ZBe=s(i7);eve=n(ZBe,"STRONG",{});var M5t=s(eve);yfr=r(M5t,"speech-encoder-decoder"),M5t.forEach(t),xfr=r(ZBe," \u2014 "),PW=n(ZBe,"A",{href:!0});var E5t=s(PW);$fr=r(E5t,"SpeechEncoderDecoderModel"),E5t.forEach(t),kfr=r(ZBe," (Speech Encoder decoder model)"),ZBe.forEach(t),Sfr=i(pze),d7=n(pze,"LI",{});var eIe=s(d7);ove=n(eIe,"STRONG",{});var C5t=s(ove);Rfr=r(C5t,"speech_to_text"),C5t.forEach(t),Pfr=r(eIe," \u2014 "),BW=n(eIe,"A",{href:!0});var w5t=s(BW);Bfr=r(w5t,"Speech2TextForConditionalGeneration"),w5t.forEach(t),Ifr=r(eIe," (Speech2Text model)"),eIe.forEach(t),pze.forEach(t),Nfr=i(Ma),c7=n(Ma,"P",{});var oIe=s(c7);qfr=r(oIe,"The model is set in evaluation mode by default using "),rve=n(oIe,"CODE",{});var A5t=s(rve);jfr=r(A5t,"model.eval()"),A5t.forEach(t),Dfr=r(oIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tve=n(oIe,"CODE",{});var L5t=s(tve);Gfr=r(L5t,"model.train()"),L5t.forEach(t),oIe.forEach(t),Ofr=i(Ma),T(f7.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),dVe=i(f),Id=n(f,"H2",{class:!0});var _ze=s(Id);m7=n(_ze,"A",{id:!0,class:!0,href:!0});var y5t=s(m7);ave=n(y5t,"SPAN",{});var x5t=s(ave);T(zy.$$.fragment,x5t),x5t.forEach(t),y5t.forEach(t),Vfr=i(_ze),nve=n(_ze,"SPAN",{});var $5t=s(nve);Xfr=r($5t,"AutoModelForAudioXVector"),$5t.forEach(t),_ze.forEach(t),cVe=i(f),Ho=n(f,"DIV",{class:!0});var ul=s(Ho);T(Qy.$$.fragment,ul),zfr=i(ul),Nd=n(ul,"P",{});var pre=s(Nd);Qfr=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),IW=n(pre,"A",{href:!0});var k5t=s(IW);Wfr=r(k5t,"from_pretrained()"),k5t.forEach(t),Hfr=r(pre," class method or the "),NW=n(pre,"A",{href:!0});var S5t=s(NW);Ufr=r(S5t,"from_config()"),S5t.forEach(t),Jfr=r(pre,` class
method.`),pre.forEach(t),Yfr=i(ul),Wy=n(ul,"P",{});var uze=s(Wy);Kfr=r(uze,"This class cannot be instantiated directly using "),sve=n(uze,"CODE",{});var R5t=s(sve);Zfr=r(R5t,"__init__()"),R5t.forEach(t),emr=r(uze," (throws an error)."),uze.forEach(t),omr=i(ul),Ct=n(ul,"DIV",{class:!0});var Fw=s(Ct);T(Hy.$$.fragment,Fw),rmr=i(Fw),lve=n(Fw,"P",{});var P5t=s(lve);tmr=r(P5t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),P5t.forEach(t),amr=i(Fw),qd=n(Fw,"P",{});var _re=s(qd);nmr=r(_re,`Note:
Loading a model from its configuration file does `),ive=n(_re,"STRONG",{});var B5t=s(ive);smr=r(B5t,"not"),B5t.forEach(t),lmr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(_re,"A",{href:!0});var I5t=s(qW);imr=r(I5t,"from_pretrained()"),I5t.forEach(t),dmr=r(_re," to load the model weights."),_re.forEach(t),cmr=i(Fw),T(g7.$$.fragment,Fw),Fw.forEach(t),fmr=i(ul),po=n(ul,"DIV",{class:!0});var Ea=s(po);T(Uy.$$.fragment,Ea),mmr=i(Ea),dve=n(Ea,"P",{});var N5t=s(dve);gmr=r(N5t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),N5t.forEach(t),hmr=i(Ea),Ya=n(Ea,"P",{});var Tw=s(Ya);pmr=r(Tw,"The model class to instantiate is selected based on the "),cve=n(Tw,"CODE",{});var q5t=s(cve);_mr=r(q5t,"model_type"),q5t.forEach(t),umr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),fve=n(Tw,"CODE",{});var j5t=s(fve);bmr=r(j5t,"pretrained_model_name_or_path"),j5t.forEach(t),vmr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=n(Tw,"CODE",{});var D5t=s(mve);Fmr=r(D5t,"pretrained_model_name_or_path"),D5t.forEach(t),Tmr=r(Tw,":"),Tw.forEach(t),Mmr=i(Ea),ot=n(Ea,"UL",{});var bl=s(ot);h7=n(bl,"LI",{});var rIe=s(h7);gve=n(rIe,"STRONG",{});var G5t=s(gve);Emr=r(G5t,"data2vec-audio"),G5t.forEach(t),Cmr=r(rIe," \u2014 "),jW=n(rIe,"A",{href:!0});var O5t=s(jW);wmr=r(O5t,"Data2VecAudioForXVector"),O5t.forEach(t),Amr=r(rIe," (Data2VecAudio model)"),rIe.forEach(t),Lmr=i(bl),p7=n(bl,"LI",{});var tIe=s(p7);hve=n(tIe,"STRONG",{});var V5t=s(hve);ymr=r(V5t,"unispeech-sat"),V5t.forEach(t),xmr=r(tIe," \u2014 "),DW=n(tIe,"A",{href:!0});var X5t=s(DW);$mr=r(X5t,"UniSpeechSatForXVector"),X5t.forEach(t),kmr=r(tIe," (UniSpeechSat model)"),tIe.forEach(t),Smr=i(bl),_7=n(bl,"LI",{});var aIe=s(_7);pve=n(aIe,"STRONG",{});var z5t=s(pve);Rmr=r(z5t,"wav2vec2"),z5t.forEach(t),Pmr=r(aIe," \u2014 "),GW=n(aIe,"A",{href:!0});var Q5t=s(GW);Bmr=r(Q5t,"Wav2Vec2ForXVector"),Q5t.forEach(t),Imr=r(aIe," (Wav2Vec2 model)"),aIe.forEach(t),Nmr=i(bl),u7=n(bl,"LI",{});var nIe=s(u7);_ve=n(nIe,"STRONG",{});var W5t=s(_ve);qmr=r(W5t,"wav2vec2-conformer"),W5t.forEach(t),jmr=r(nIe," \u2014 "),OW=n(nIe,"A",{href:!0});var H5t=s(OW);Dmr=r(H5t,"Wav2Vec2ConformerForXVector"),H5t.forEach(t),Gmr=r(nIe," (Wav2Vec2-Conformer model)"),nIe.forEach(t),Omr=i(bl),b7=n(bl,"LI",{});var sIe=s(b7);uve=n(sIe,"STRONG",{});var U5t=s(uve);Vmr=r(U5t,"wavlm"),U5t.forEach(t),Xmr=r(sIe," \u2014 "),VW=n(sIe,"A",{href:!0});var J5t=s(VW);zmr=r(J5t,"WavLMForXVector"),J5t.forEach(t),Qmr=r(sIe," (WavLM model)"),sIe.forEach(t),bl.forEach(t),Wmr=i(Ea),v7=n(Ea,"P",{});var lIe=s(v7);Hmr=r(lIe,"The model is set in evaluation mode by default using "),bve=n(lIe,"CODE",{});var Y5t=s(bve);Umr=r(Y5t,"model.eval()"),Y5t.forEach(t),Jmr=r(lIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vve=n(lIe,"CODE",{});var K5t=s(vve);Ymr=r(K5t,"model.train()"),K5t.forEach(t),lIe.forEach(t),Kmr=i(Ea),T(F7.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),fVe=i(f),jd=n(f,"H2",{class:!0});var bze=s(jd);T7=n(bze,"A",{id:!0,class:!0,href:!0});var Z5t=s(T7);Fve=n(Z5t,"SPAN",{});var e3t=s(Fve);T(Jy.$$.fragment,e3t),e3t.forEach(t),Z5t.forEach(t),Zmr=i(bze),Tve=n(bze,"SPAN",{});var o3t=s(Tve);egr=r(o3t,"AutoModelForMaskedImageModeling"),o3t.forEach(t),bze.forEach(t),mVe=i(f),Uo=n(f,"DIV",{class:!0});var vl=s(Uo);T(Yy.$$.fragment,vl),ogr=i(vl),Dd=n(vl,"P",{});var ure=s(Dd);rgr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XW=n(ure,"A",{href:!0});var r3t=s(XW);tgr=r(r3t,"from_pretrained()"),r3t.forEach(t),agr=r(ure," class method or the "),zW=n(ure,"A",{href:!0});var t3t=s(zW);ngr=r(t3t,"from_config()"),t3t.forEach(t),sgr=r(ure,` class
method.`),ure.forEach(t),lgr=i(vl),Ky=n(vl,"P",{});var vze=s(Ky);igr=r(vze,"This class cannot be instantiated directly using "),Mve=n(vze,"CODE",{});var a3t=s(Mve);dgr=r(a3t,"__init__()"),a3t.forEach(t),cgr=r(vze," (throws an error)."),vze.forEach(t),fgr=i(vl),wt=n(vl,"DIV",{class:!0});var Mw=s(wt);T(Zy.$$.fragment,Mw),mgr=i(Mw),Eve=n(Mw,"P",{});var n3t=s(Eve);ggr=r(n3t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),n3t.forEach(t),hgr=i(Mw),Gd=n(Mw,"P",{});var bre=s(Gd);pgr=r(bre,`Note:
Loading a model from its configuration file does `),Cve=n(bre,"STRONG",{});var s3t=s(Cve);_gr=r(s3t,"not"),s3t.forEach(t),ugr=r(bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(bre,"A",{href:!0});var l3t=s(QW);bgr=r(l3t,"from_pretrained()"),l3t.forEach(t),vgr=r(bre," to load the model weights."),bre.forEach(t),Fgr=i(Mw),T(M7.$$.fragment,Mw),Mw.forEach(t),Tgr=i(vl),_o=n(vl,"DIV",{class:!0});var Ca=s(_o);T(e9.$$.fragment,Ca),Mgr=i(Ca),wve=n(Ca,"P",{});var i3t=s(wve);Egr=r(i3t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),i3t.forEach(t),Cgr=i(Ca),Ka=n(Ca,"P",{});var Ew=s(Ka);wgr=r(Ew,"The model class to instantiate is selected based on the "),Ave=n(Ew,"CODE",{});var d3t=s(Ave);Agr=r(d3t,"model_type"),d3t.forEach(t),Lgr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),Lve=n(Ew,"CODE",{});var c3t=s(Lve);ygr=r(c3t,"pretrained_model_name_or_path"),c3t.forEach(t),xgr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(Ew,"CODE",{});var f3t=s(yve);$gr=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),kgr=r(Ew,":"),Ew.forEach(t),Sgr=i(Ca),Od=n(Ca,"UL",{});var vre=s(Od);E7=n(vre,"LI",{});var iIe=s(E7);xve=n(iIe,"STRONG",{});var m3t=s(xve);Rgr=r(m3t,"deit"),m3t.forEach(t),Pgr=r(iIe," \u2014 "),WW=n(iIe,"A",{href:!0});var g3t=s(WW);Bgr=r(g3t,"DeiTForMaskedImageModeling"),g3t.forEach(t),Igr=r(iIe," (DeiT model)"),iIe.forEach(t),Ngr=i(vre),C7=n(vre,"LI",{});var dIe=s(C7);$ve=n(dIe,"STRONG",{});var h3t=s($ve);qgr=r(h3t,"swin"),h3t.forEach(t),jgr=r(dIe," \u2014 "),HW=n(dIe,"A",{href:!0});var p3t=s(HW);Dgr=r(p3t,"SwinForMaskedImageModeling"),p3t.forEach(t),Ggr=r(dIe," (Swin Transformer model)"),dIe.forEach(t),Ogr=i(vre),w7=n(vre,"LI",{});var cIe=s(w7);kve=n(cIe,"STRONG",{});var _3t=s(kve);Vgr=r(_3t,"vit"),_3t.forEach(t),Xgr=r(cIe," \u2014 "),UW=n(cIe,"A",{href:!0});var u3t=s(UW);zgr=r(u3t,"ViTForMaskedImageModeling"),u3t.forEach(t),Qgr=r(cIe," (ViT model)"),cIe.forEach(t),vre.forEach(t),Wgr=i(Ca),A7=n(Ca,"P",{});var fIe=s(A7);Hgr=r(fIe,"The model is set in evaluation mode by default using "),Sve=n(fIe,"CODE",{});var b3t=s(Sve);Ugr=r(b3t,"model.eval()"),b3t.forEach(t),Jgr=r(fIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rve=n(fIe,"CODE",{});var v3t=s(Rve);Ygr=r(v3t,"model.train()"),v3t.forEach(t),fIe.forEach(t),Kgr=i(Ca),T(L7.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),gVe=i(f),Vd=n(f,"H2",{class:!0});var Fze=s(Vd);y7=n(Fze,"A",{id:!0,class:!0,href:!0});var F3t=s(y7);Pve=n(F3t,"SPAN",{});var T3t=s(Pve);T(o9.$$.fragment,T3t),T3t.forEach(t),F3t.forEach(t),Zgr=i(Fze),Bve=n(Fze,"SPAN",{});var M3t=s(Bve);ehr=r(M3t,"AutoModelForObjectDetection"),M3t.forEach(t),Fze.forEach(t),hVe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(r9.$$.fragment,Fl),ohr=i(Fl),Xd=n(Fl,"P",{});var Fre=s(Xd);rhr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),JW=n(Fre,"A",{href:!0});var E3t=s(JW);thr=r(E3t,"from_pretrained()"),E3t.forEach(t),ahr=r(Fre," class method or the "),YW=n(Fre,"A",{href:!0});var C3t=s(YW);nhr=r(C3t,"from_config()"),C3t.forEach(t),shr=r(Fre,` class
method.`),Fre.forEach(t),lhr=i(Fl),t9=n(Fl,"P",{});var Tze=s(t9);ihr=r(Tze,"This class cannot be instantiated directly using "),Ive=n(Tze,"CODE",{});var w3t=s(Ive);dhr=r(w3t,"__init__()"),w3t.forEach(t),chr=r(Tze," (throws an error)."),Tze.forEach(t),fhr=i(Fl),At=n(Fl,"DIV",{class:!0});var Cw=s(At);T(a9.$$.fragment,Cw),mhr=i(Cw),Nve=n(Cw,"P",{});var A3t=s(Nve);ghr=r(A3t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),A3t.forEach(t),hhr=i(Cw),zd=n(Cw,"P",{});var Tre=s(zd);phr=r(Tre,`Note:
Loading a model from its configuration file does `),qve=n(Tre,"STRONG",{});var L3t=s(qve);_hr=r(L3t,"not"),L3t.forEach(t),uhr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(Tre,"A",{href:!0});var y3t=s(KW);bhr=r(y3t,"from_pretrained()"),y3t.forEach(t),vhr=r(Tre," to load the model weights."),Tre.forEach(t),Fhr=i(Cw),T(x7.$$.fragment,Cw),Cw.forEach(t),Thr=i(Fl),uo=n(Fl,"DIV",{class:!0});var wa=s(uo);T(n9.$$.fragment,wa),Mhr=i(wa),jve=n(wa,"P",{});var x3t=s(jve);Ehr=r(x3t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),x3t.forEach(t),Chr=i(wa),Za=n(wa,"P",{});var ww=s(Za);whr=r(ww,"The model class to instantiate is selected based on the "),Dve=n(ww,"CODE",{});var $3t=s(Dve);Ahr=r($3t,"model_type"),$3t.forEach(t),Lhr=r(ww,` property of the config object (either
passed as an argument or loaded from `),Gve=n(ww,"CODE",{});var k3t=s(Gve);yhr=r(k3t,"pretrained_model_name_or_path"),k3t.forEach(t),xhr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(ww,"CODE",{});var S3t=s(Ove);$hr=r(S3t,"pretrained_model_name_or_path"),S3t.forEach(t),khr=r(ww,":"),ww.forEach(t),Shr=i(wa),s9=n(wa,"UL",{});var Mze=s(s9);$7=n(Mze,"LI",{});var mIe=s($7);Vve=n(mIe,"STRONG",{});var R3t=s(Vve);Rhr=r(R3t,"detr"),R3t.forEach(t),Phr=r(mIe," \u2014 "),ZW=n(mIe,"A",{href:!0});var P3t=s(ZW);Bhr=r(P3t,"DetrForObjectDetection"),P3t.forEach(t),Ihr=r(mIe," (DETR model)"),mIe.forEach(t),Nhr=i(Mze),k7=n(Mze,"LI",{});var gIe=s(k7);Xve=n(gIe,"STRONG",{});var B3t=s(Xve);qhr=r(B3t,"yolos"),B3t.forEach(t),jhr=r(gIe," \u2014 "),eH=n(gIe,"A",{href:!0});var I3t=s(eH);Dhr=r(I3t,"YolosForObjectDetection"),I3t.forEach(t),Ghr=r(gIe," (YOLOS model)"),gIe.forEach(t),Mze.forEach(t),Ohr=i(wa),S7=n(wa,"P",{});var hIe=s(S7);Vhr=r(hIe,"The model is set in evaluation mode by default using "),zve=n(hIe,"CODE",{});var N3t=s(zve);Xhr=r(N3t,"model.eval()"),N3t.forEach(t),zhr=r(hIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qve=n(hIe,"CODE",{});var q3t=s(Qve);Qhr=r(q3t,"model.train()"),q3t.forEach(t),hIe.forEach(t),Whr=i(wa),T(R7.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),pVe=i(f),Qd=n(f,"H2",{class:!0});var Eze=s(Qd);P7=n(Eze,"A",{id:!0,class:!0,href:!0});var j3t=s(P7);Wve=n(j3t,"SPAN",{});var D3t=s(Wve);T(l9.$$.fragment,D3t),D3t.forEach(t),j3t.forEach(t),Hhr=i(Eze),Hve=n(Eze,"SPAN",{});var G3t=s(Hve);Uhr=r(G3t,"AutoModelForImageSegmentation"),G3t.forEach(t),Eze.forEach(t),_Ve=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(i9.$$.fragment,Tl),Jhr=i(Tl),Wd=n(Tl,"P",{});var Mre=s(Wd);Yhr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),oH=n(Mre,"A",{href:!0});var O3t=s(oH);Khr=r(O3t,"from_pretrained()"),O3t.forEach(t),Zhr=r(Mre," class method or the "),rH=n(Mre,"A",{href:!0});var V3t=s(rH);epr=r(V3t,"from_config()"),V3t.forEach(t),opr=r(Mre,` class
method.`),Mre.forEach(t),rpr=i(Tl),d9=n(Tl,"P",{});var Cze=s(d9);tpr=r(Cze,"This class cannot be instantiated directly using "),Uve=n(Cze,"CODE",{});var X3t=s(Uve);apr=r(X3t,"__init__()"),X3t.forEach(t),npr=r(Cze," (throws an error)."),Cze.forEach(t),spr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var Aw=s(Lt);T(c9.$$.fragment,Aw),lpr=i(Aw),Jve=n(Aw,"P",{});var z3t=s(Jve);ipr=r(z3t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),z3t.forEach(t),dpr=i(Aw),Hd=n(Aw,"P",{});var Ere=s(Hd);cpr=r(Ere,`Note:
Loading a model from its configuration file does `),Yve=n(Ere,"STRONG",{});var Q3t=s(Yve);fpr=r(Q3t,"not"),Q3t.forEach(t),mpr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(Ere,"A",{href:!0});var W3t=s(tH);gpr=r(W3t,"from_pretrained()"),W3t.forEach(t),hpr=r(Ere," to load the model weights."),Ere.forEach(t),ppr=i(Aw),T(B7.$$.fragment,Aw),Aw.forEach(t),_pr=i(Tl),bo=n(Tl,"DIV",{class:!0});var Aa=s(bo);T(f9.$$.fragment,Aa),upr=i(Aa),Kve=n(Aa,"P",{});var H3t=s(Kve);bpr=r(H3t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),H3t.forEach(t),vpr=i(Aa),en=n(Aa,"P",{});var Lw=s(en);Fpr=r(Lw,"The model class to instantiate is selected based on the "),Zve=n(Lw,"CODE",{});var U3t=s(Zve);Tpr=r(U3t,"model_type"),U3t.forEach(t),Mpr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),eFe=n(Lw,"CODE",{});var J3t=s(eFe);Epr=r(J3t,"pretrained_model_name_or_path"),J3t.forEach(t),Cpr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oFe=n(Lw,"CODE",{});var Y3t=s(oFe);wpr=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),Apr=r(Lw,":"),Lw.forEach(t),Lpr=i(Aa),rFe=n(Aa,"UL",{});var K3t=s(rFe);I7=n(K3t,"LI",{});var pIe=s(I7);tFe=n(pIe,"STRONG",{});var Z3t=s(tFe);ypr=r(Z3t,"detr"),Z3t.forEach(t),xpr=r(pIe," \u2014 "),aH=n(pIe,"A",{href:!0});var e0t=s(aH);$pr=r(e0t,"DetrForSegmentation"),e0t.forEach(t),kpr=r(pIe," (DETR model)"),pIe.forEach(t),K3t.forEach(t),Spr=i(Aa),N7=n(Aa,"P",{});var _Ie=s(N7);Rpr=r(_Ie,"The model is set in evaluation mode by default using "),aFe=n(_Ie,"CODE",{});var o0t=s(aFe);Ppr=r(o0t,"model.eval()"),o0t.forEach(t),Bpr=r(_Ie,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nFe=n(_Ie,"CODE",{});var r0t=s(nFe);Ipr=r(r0t,"model.train()"),r0t.forEach(t),_Ie.forEach(t),Npr=i(Aa),T(q7.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),uVe=i(f),Ud=n(f,"H2",{class:!0});var wze=s(Ud);j7=n(wze,"A",{id:!0,class:!0,href:!0});var t0t=s(j7);sFe=n(t0t,"SPAN",{});var a0t=s(sFe);T(m9.$$.fragment,a0t),a0t.forEach(t),t0t.forEach(t),qpr=i(wze),lFe=n(wze,"SPAN",{});var n0t=s(lFe);jpr=r(n0t,"AutoModelForSemanticSegmentation"),n0t.forEach(t),wze.forEach(t),bVe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(g9.$$.fragment,Ml),Dpr=i(Ml),Jd=n(Ml,"P",{});var Cre=s(Jd);Gpr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nH=n(Cre,"A",{href:!0});var s0t=s(nH);Opr=r(s0t,"from_pretrained()"),s0t.forEach(t),Vpr=r(Cre," class method or the "),sH=n(Cre,"A",{href:!0});var l0t=s(sH);Xpr=r(l0t,"from_config()"),l0t.forEach(t),zpr=r(Cre,` class
method.`),Cre.forEach(t),Qpr=i(Ml),h9=n(Ml,"P",{});var Aze=s(h9);Wpr=r(Aze,"This class cannot be instantiated directly using "),iFe=n(Aze,"CODE",{});var i0t=s(iFe);Hpr=r(i0t,"__init__()"),i0t.forEach(t),Upr=r(Aze," (throws an error)."),Aze.forEach(t),Jpr=i(Ml),yt=n(Ml,"DIV",{class:!0});var yw=s(yt);T(p9.$$.fragment,yw),Ypr=i(yw),dFe=n(yw,"P",{});var d0t=s(dFe);Kpr=r(d0t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),d0t.forEach(t),Zpr=i(yw),Yd=n(yw,"P",{});var wre=s(Yd);e_r=r(wre,`Note:
Loading a model from its configuration file does `),cFe=n(wre,"STRONG",{});var c0t=s(cFe);o_r=r(c0t,"not"),c0t.forEach(t),r_r=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(wre,"A",{href:!0});var f0t=s(lH);t_r=r(f0t,"from_pretrained()"),f0t.forEach(t),a_r=r(wre," to load the model weights."),wre.forEach(t),n_r=i(yw),T(D7.$$.fragment,yw),yw.forEach(t),s_r=i(Ml),vo=n(Ml,"DIV",{class:!0});var La=s(vo);T(_9.$$.fragment,La),l_r=i(La),fFe=n(La,"P",{});var m0t=s(fFe);i_r=r(m0t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),m0t.forEach(t),d_r=i(La),on=n(La,"P",{});var xw=s(on);c_r=r(xw,"The model class to instantiate is selected based on the "),mFe=n(xw,"CODE",{});var g0t=s(mFe);f_r=r(g0t,"model_type"),g0t.forEach(t),m_r=r(xw,` property of the config object (either
passed as an argument or loaded from `),gFe=n(xw,"CODE",{});var h0t=s(gFe);g_r=r(h0t,"pretrained_model_name_or_path"),h0t.forEach(t),h_r=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=n(xw,"CODE",{});var p0t=s(hFe);p_r=r(p0t,"pretrained_model_name_or_path"),p0t.forEach(t),__r=r(xw,":"),xw.forEach(t),u_r=i(La),rn=n(La,"UL",{});var $w=s(rn);G7=n($w,"LI",{});var uIe=s(G7);pFe=n(uIe,"STRONG",{});var _0t=s(pFe);b_r=r(_0t,"beit"),_0t.forEach(t),v_r=r(uIe," \u2014 "),iH=n(uIe,"A",{href:!0});var u0t=s(iH);F_r=r(u0t,"BeitForSemanticSegmentation"),u0t.forEach(t),T_r=r(uIe," (BEiT model)"),uIe.forEach(t),M_r=i($w),O7=n($w,"LI",{});var bIe=s(O7);_Fe=n(bIe,"STRONG",{});var b0t=s(_Fe);E_r=r(b0t,"data2vec-vision"),b0t.forEach(t),C_r=r(bIe," \u2014 "),dH=n(bIe,"A",{href:!0});var v0t=s(dH);w_r=r(v0t,"Data2VecVisionForSemanticSegmentation"),v0t.forEach(t),A_r=r(bIe," (Data2VecVision model)"),bIe.forEach(t),L_r=i($w),V7=n($w,"LI",{});var vIe=s(V7);uFe=n(vIe,"STRONG",{});var F0t=s(uFe);y_r=r(F0t,"dpt"),F0t.forEach(t),x_r=r(vIe," \u2014 "),cH=n(vIe,"A",{href:!0});var T0t=s(cH);$_r=r(T0t,"DPTForSemanticSegmentation"),T0t.forEach(t),k_r=r(vIe," (DPT model)"),vIe.forEach(t),S_r=i($w),X7=n($w,"LI",{});var FIe=s(X7);bFe=n(FIe,"STRONG",{});var M0t=s(bFe);R_r=r(M0t,"segformer"),M0t.forEach(t),P_r=r(FIe," \u2014 "),fH=n(FIe,"A",{href:!0});var E0t=s(fH);B_r=r(E0t,"SegformerForSemanticSegmentation"),E0t.forEach(t),I_r=r(FIe," (SegFormer model)"),FIe.forEach(t),$w.forEach(t),N_r=i(La),z7=n(La,"P",{});var TIe=s(z7);q_r=r(TIe,"The model is set in evaluation mode by default using "),vFe=n(TIe,"CODE",{});var C0t=s(vFe);j_r=r(C0t,"model.eval()"),C0t.forEach(t),D_r=r(TIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FFe=n(TIe,"CODE",{});var w0t=s(FFe);G_r=r(w0t,"model.train()"),w0t.forEach(t),TIe.forEach(t),O_r=i(La),T(Q7.$$.fragment,La),La.forEach(t),Ml.forEach(t),vVe=i(f),Kd=n(f,"H2",{class:!0});var Lze=s(Kd);W7=n(Lze,"A",{id:!0,class:!0,href:!0});var A0t=s(W7);TFe=n(A0t,"SPAN",{});var L0t=s(TFe);T(u9.$$.fragment,L0t),L0t.forEach(t),A0t.forEach(t),V_r=i(Lze),MFe=n(Lze,"SPAN",{});var y0t=s(MFe);X_r=r(y0t,"AutoModelForInstanceSegmentation"),y0t.forEach(t),Lze.forEach(t),FVe=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(b9.$$.fragment,El),z_r=i(El),Zd=n(El,"P",{});var Are=s(Zd);Q_r=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),mH=n(Are,"A",{href:!0});var x0t=s(mH);W_r=r(x0t,"from_pretrained()"),x0t.forEach(t),H_r=r(Are," class method or the "),gH=n(Are,"A",{href:!0});var $0t=s(gH);U_r=r($0t,"from_config()"),$0t.forEach(t),J_r=r(Are,` class
method.`),Are.forEach(t),Y_r=i(El),v9=n(El,"P",{});var yze=s(v9);K_r=r(yze,"This class cannot be instantiated directly using "),EFe=n(yze,"CODE",{});var k0t=s(EFe);Z_r=r(k0t,"__init__()"),k0t.forEach(t),eur=r(yze," (throws an error)."),yze.forEach(t),our=i(El),xt=n(El,"DIV",{class:!0});var kw=s(xt);T(F9.$$.fragment,kw),rur=i(kw),CFe=n(kw,"P",{});var S0t=s(CFe);tur=r(S0t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),S0t.forEach(t),aur=i(kw),ec=n(kw,"P",{});var Lre=s(ec);nur=r(Lre,`Note:
Loading a model from its configuration file does `),wFe=n(Lre,"STRONG",{});var R0t=s(wFe);sur=r(R0t,"not"),R0t.forEach(t),lur=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(Lre,"A",{href:!0});var P0t=s(hH);iur=r(P0t,"from_pretrained()"),P0t.forEach(t),dur=r(Lre," to load the model weights."),Lre.forEach(t),cur=i(kw),T(H7.$$.fragment,kw),kw.forEach(t),fur=i(El),Fo=n(El,"DIV",{class:!0});var ya=s(Fo);T(T9.$$.fragment,ya),mur=i(ya),AFe=n(ya,"P",{});var B0t=s(AFe);gur=r(B0t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),B0t.forEach(t),hur=i(ya),tn=n(ya,"P",{});var Sw=s(tn);pur=r(Sw,"The model class to instantiate is selected based on the "),LFe=n(Sw,"CODE",{});var I0t=s(LFe);_ur=r(I0t,"model_type"),I0t.forEach(t),uur=r(Sw,` property of the config object (either
passed as an argument or loaded from `),yFe=n(Sw,"CODE",{});var N0t=s(yFe);bur=r(N0t,"pretrained_model_name_or_path"),N0t.forEach(t),vur=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(Sw,"CODE",{});var q0t=s(xFe);Fur=r(q0t,"pretrained_model_name_or_path"),q0t.forEach(t),Tur=r(Sw,":"),Sw.forEach(t),Mur=i(ya),$Fe=n(ya,"UL",{});var j0t=s($Fe);U7=n(j0t,"LI",{});var MIe=s(U7);kFe=n(MIe,"STRONG",{});var D0t=s(kFe);Eur=r(D0t,"maskformer"),D0t.forEach(t),Cur=r(MIe," \u2014 "),pH=n(MIe,"A",{href:!0});var G0t=s(pH);wur=r(G0t,"MaskFormerForInstanceSegmentation"),G0t.forEach(t),Aur=r(MIe," (MaskFormer model)"),MIe.forEach(t),j0t.forEach(t),Lur=i(ya),J7=n(ya,"P",{});var EIe=s(J7);yur=r(EIe,"The model is set in evaluation mode by default using "),SFe=n(EIe,"CODE",{});var O0t=s(SFe);xur=r(O0t,"model.eval()"),O0t.forEach(t),$ur=r(EIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RFe=n(EIe,"CODE",{});var V0t=s(RFe);kur=r(V0t,"model.train()"),V0t.forEach(t),EIe.forEach(t),Sur=i(ya),T(Y7.$$.fragment,ya),ya.forEach(t),El.forEach(t),TVe=i(f),oc=n(f,"H2",{class:!0});var xze=s(oc);K7=n(xze,"A",{id:!0,class:!0,href:!0});var X0t=s(K7);PFe=n(X0t,"SPAN",{});var z0t=s(PFe);T(M9.$$.fragment,z0t),z0t.forEach(t),X0t.forEach(t),Rur=i(xze),BFe=n(xze,"SPAN",{});var Q0t=s(BFe);Pur=r(Q0t,"TFAutoModel"),Q0t.forEach(t),xze.forEach(t),MVe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(E9.$$.fragment,Cl),Bur=i(Cl),rc=n(Cl,"P",{});var yre=s(rc);Iur=r(yre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_H=n(yre,"A",{href:!0});var W0t=s(_H);Nur=r(W0t,"from_pretrained()"),W0t.forEach(t),qur=r(yre," class method or the "),uH=n(yre,"A",{href:!0});var H0t=s(uH);jur=r(H0t,"from_config()"),H0t.forEach(t),Dur=r(yre,` class
method.`),yre.forEach(t),Gur=i(Cl),C9=n(Cl,"P",{});var $ze=s(C9);Our=r($ze,"This class cannot be instantiated directly using "),IFe=n($ze,"CODE",{});var U0t=s(IFe);Vur=r(U0t,"__init__()"),U0t.forEach(t),Xur=r($ze," (throws an error)."),$ze.forEach(t),zur=i(Cl),$t=n(Cl,"DIV",{class:!0});var Rw=s($t);T(w9.$$.fragment,Rw),Qur=i(Rw),NFe=n(Rw,"P",{});var J0t=s(NFe);Wur=r(J0t,"Instantiates one of the base model classes of the library from a configuration."),J0t.forEach(t),Hur=i(Rw),tc=n(Rw,"P",{});var xre=s(tc);Uur=r(xre,`Note:
Loading a model from its configuration file does `),qFe=n(xre,"STRONG",{});var Y0t=s(qFe);Jur=r(Y0t,"not"),Y0t.forEach(t),Yur=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(xre,"A",{href:!0});var K0t=s(bH);Kur=r(K0t,"from_pretrained()"),K0t.forEach(t),Zur=r(xre," to load the model weights."),xre.forEach(t),e2r=i(Rw),T(Z7.$$.fragment,Rw),Rw.forEach(t),o2r=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(A9.$$.fragment,wl),r2r=i(wl),jFe=n(wl,"P",{});var Z0t=s(jFe);t2r=r(Z0t,"Instantiate one of the base model classes of the library from a pretrained model."),Z0t.forEach(t),a2r=i(wl),an=n(wl,"P",{});var Pw=s(an);n2r=r(Pw,"The model class to instantiate is selected based on the "),DFe=n(Pw,"CODE",{});var ewt=s(DFe);s2r=r(ewt,"model_type"),ewt.forEach(t),l2r=r(Pw,` property of the config object (either
passed as an argument or loaded from `),GFe=n(Pw,"CODE",{});var owt=s(GFe);i2r=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),d2r=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=n(Pw,"CODE",{});var rwt=s(OFe);c2r=r(rwt,"pretrained_model_name_or_path"),rwt.forEach(t),f2r=r(Pw,":"),Pw.forEach(t),m2r=i(wl),j=n(wl,"UL",{});var D=s(j);e8=n(D,"LI",{});var CIe=s(e8);VFe=n(CIe,"STRONG",{});var twt=s(VFe);g2r=r(twt,"albert"),twt.forEach(t),h2r=r(CIe," \u2014 "),vH=n(CIe,"A",{href:!0});var awt=s(vH);p2r=r(awt,"TFAlbertModel"),awt.forEach(t),_2r=r(CIe," (ALBERT model)"),CIe.forEach(t),u2r=i(D),o8=n(D,"LI",{});var wIe=s(o8);XFe=n(wIe,"STRONG",{});var nwt=s(XFe);b2r=r(nwt,"bart"),nwt.forEach(t),v2r=r(wIe," \u2014 "),FH=n(wIe,"A",{href:!0});var swt=s(FH);F2r=r(swt,"TFBartModel"),swt.forEach(t),T2r=r(wIe," (BART model)"),wIe.forEach(t),M2r=i(D),r8=n(D,"LI",{});var AIe=s(r8);zFe=n(AIe,"STRONG",{});var lwt=s(zFe);E2r=r(lwt,"bert"),lwt.forEach(t),C2r=r(AIe," \u2014 "),TH=n(AIe,"A",{href:!0});var iwt=s(TH);w2r=r(iwt,"TFBertModel"),iwt.forEach(t),A2r=r(AIe," (BERT model)"),AIe.forEach(t),L2r=i(D),t8=n(D,"LI",{});var LIe=s(t8);QFe=n(LIe,"STRONG",{});var dwt=s(QFe);y2r=r(dwt,"blenderbot"),dwt.forEach(t),x2r=r(LIe," \u2014 "),MH=n(LIe,"A",{href:!0});var cwt=s(MH);$2r=r(cwt,"TFBlenderbotModel"),cwt.forEach(t),k2r=r(LIe," (Blenderbot model)"),LIe.forEach(t),S2r=i(D),a8=n(D,"LI",{});var yIe=s(a8);WFe=n(yIe,"STRONG",{});var fwt=s(WFe);R2r=r(fwt,"blenderbot-small"),fwt.forEach(t),P2r=r(yIe," \u2014 "),EH=n(yIe,"A",{href:!0});var mwt=s(EH);B2r=r(mwt,"TFBlenderbotSmallModel"),mwt.forEach(t),I2r=r(yIe," (BlenderbotSmall model)"),yIe.forEach(t),N2r=i(D),n8=n(D,"LI",{});var xIe=s(n8);HFe=n(xIe,"STRONG",{});var gwt=s(HFe);q2r=r(gwt,"camembert"),gwt.forEach(t),j2r=r(xIe," \u2014 "),CH=n(xIe,"A",{href:!0});var hwt=s(CH);D2r=r(hwt,"TFCamembertModel"),hwt.forEach(t),G2r=r(xIe," (CamemBERT model)"),xIe.forEach(t),O2r=i(D),s8=n(D,"LI",{});var $Ie=s(s8);UFe=n($Ie,"STRONG",{});var pwt=s(UFe);V2r=r(pwt,"clip"),pwt.forEach(t),X2r=r($Ie," \u2014 "),wH=n($Ie,"A",{href:!0});var _wt=s(wH);z2r=r(_wt,"TFCLIPModel"),_wt.forEach(t),Q2r=r($Ie," (CLIP model)"),$Ie.forEach(t),W2r=i(D),l8=n(D,"LI",{});var kIe=s(l8);JFe=n(kIe,"STRONG",{});var uwt=s(JFe);H2r=r(uwt,"convbert"),uwt.forEach(t),U2r=r(kIe," \u2014 "),AH=n(kIe,"A",{href:!0});var bwt=s(AH);J2r=r(bwt,"TFConvBertModel"),bwt.forEach(t),Y2r=r(kIe," (ConvBERT model)"),kIe.forEach(t),K2r=i(D),i8=n(D,"LI",{});var SIe=s(i8);YFe=n(SIe,"STRONG",{});var vwt=s(YFe);Z2r=r(vwt,"convnext"),vwt.forEach(t),e1r=r(SIe," \u2014 "),LH=n(SIe,"A",{href:!0});var Fwt=s(LH);o1r=r(Fwt,"TFConvNextModel"),Fwt.forEach(t),r1r=r(SIe," (ConvNeXT model)"),SIe.forEach(t),t1r=i(D),d8=n(D,"LI",{});var RIe=s(d8);KFe=n(RIe,"STRONG",{});var Twt=s(KFe);a1r=r(Twt,"ctrl"),Twt.forEach(t),n1r=r(RIe," \u2014 "),yH=n(RIe,"A",{href:!0});var Mwt=s(yH);s1r=r(Mwt,"TFCTRLModel"),Mwt.forEach(t),l1r=r(RIe," (CTRL model)"),RIe.forEach(t),i1r=i(D),c8=n(D,"LI",{});var PIe=s(c8);ZFe=n(PIe,"STRONG",{});var Ewt=s(ZFe);d1r=r(Ewt,"data2vec-vision"),Ewt.forEach(t),c1r=r(PIe," \u2014 "),xH=n(PIe,"A",{href:!0});var Cwt=s(xH);f1r=r(Cwt,"TFData2VecVisionModel"),Cwt.forEach(t),m1r=r(PIe," (Data2VecVision model)"),PIe.forEach(t),g1r=i(D),f8=n(D,"LI",{});var BIe=s(f8);e6e=n(BIe,"STRONG",{});var wwt=s(e6e);h1r=r(wwt,"deberta"),wwt.forEach(t),p1r=r(BIe," \u2014 "),$H=n(BIe,"A",{href:!0});var Awt=s($H);_1r=r(Awt,"TFDebertaModel"),Awt.forEach(t),u1r=r(BIe," (DeBERTa model)"),BIe.forEach(t),b1r=i(D),m8=n(D,"LI",{});var IIe=s(m8);o6e=n(IIe,"STRONG",{});var Lwt=s(o6e);v1r=r(Lwt,"deberta-v2"),Lwt.forEach(t),F1r=r(IIe," \u2014 "),kH=n(IIe,"A",{href:!0});var ywt=s(kH);T1r=r(ywt,"TFDebertaV2Model"),ywt.forEach(t),M1r=r(IIe," (DeBERTa-v2 model)"),IIe.forEach(t),E1r=i(D),g8=n(D,"LI",{});var NIe=s(g8);r6e=n(NIe,"STRONG",{});var xwt=s(r6e);C1r=r(xwt,"distilbert"),xwt.forEach(t),w1r=r(NIe," \u2014 "),SH=n(NIe,"A",{href:!0});var $wt=s(SH);A1r=r($wt,"TFDistilBertModel"),$wt.forEach(t),L1r=r(NIe," (DistilBERT model)"),NIe.forEach(t),y1r=i(D),h8=n(D,"LI",{});var qIe=s(h8);t6e=n(qIe,"STRONG",{});var kwt=s(t6e);x1r=r(kwt,"dpr"),kwt.forEach(t),$1r=r(qIe," \u2014 "),RH=n(qIe,"A",{href:!0});var Swt=s(RH);k1r=r(Swt,"TFDPRQuestionEncoder"),Swt.forEach(t),S1r=r(qIe," (DPR model)"),qIe.forEach(t),R1r=i(D),p8=n(D,"LI",{});var jIe=s(p8);a6e=n(jIe,"STRONG",{});var Rwt=s(a6e);P1r=r(Rwt,"electra"),Rwt.forEach(t),B1r=r(jIe," \u2014 "),PH=n(jIe,"A",{href:!0});var Pwt=s(PH);I1r=r(Pwt,"TFElectraModel"),Pwt.forEach(t),N1r=r(jIe," (ELECTRA model)"),jIe.forEach(t),q1r=i(D),_8=n(D,"LI",{});var DIe=s(_8);n6e=n(DIe,"STRONG",{});var Bwt=s(n6e);j1r=r(Bwt,"flaubert"),Bwt.forEach(t),D1r=r(DIe," \u2014 "),BH=n(DIe,"A",{href:!0});var Iwt=s(BH);G1r=r(Iwt,"TFFlaubertModel"),Iwt.forEach(t),O1r=r(DIe," (FlauBERT model)"),DIe.forEach(t),V1r=i(D),Ws=n(D,"LI",{});var dS=s(Ws);s6e=n(dS,"STRONG",{});var Nwt=s(s6e);X1r=r(Nwt,"funnel"),Nwt.forEach(t),z1r=r(dS," \u2014 "),IH=n(dS,"A",{href:!0});var qwt=s(IH);Q1r=r(qwt,"TFFunnelModel"),qwt.forEach(t),W1r=r(dS," or "),NH=n(dS,"A",{href:!0});var jwt=s(NH);H1r=r(jwt,"TFFunnelBaseModel"),jwt.forEach(t),U1r=r(dS," (Funnel Transformer model)"),dS.forEach(t),J1r=i(D),u8=n(D,"LI",{});var GIe=s(u8);l6e=n(GIe,"STRONG",{});var Dwt=s(l6e);Y1r=r(Dwt,"gpt2"),Dwt.forEach(t),K1r=r(GIe," \u2014 "),qH=n(GIe,"A",{href:!0});var Gwt=s(qH);Z1r=r(Gwt,"TFGPT2Model"),Gwt.forEach(t),ebr=r(GIe," (OpenAI GPT-2 model)"),GIe.forEach(t),obr=i(D),b8=n(D,"LI",{});var OIe=s(b8);i6e=n(OIe,"STRONG",{});var Owt=s(i6e);rbr=r(Owt,"gptj"),Owt.forEach(t),tbr=r(OIe," \u2014 "),jH=n(OIe,"A",{href:!0});var Vwt=s(jH);abr=r(Vwt,"TFGPTJModel"),Vwt.forEach(t),nbr=r(OIe," (GPT-J model)"),OIe.forEach(t),sbr=i(D),v8=n(D,"LI",{});var VIe=s(v8);d6e=n(VIe,"STRONG",{});var Xwt=s(d6e);lbr=r(Xwt,"hubert"),Xwt.forEach(t),ibr=r(VIe," \u2014 "),DH=n(VIe,"A",{href:!0});var zwt=s(DH);dbr=r(zwt,"TFHubertModel"),zwt.forEach(t),cbr=r(VIe," (Hubert model)"),VIe.forEach(t),fbr=i(D),F8=n(D,"LI",{});var XIe=s(F8);c6e=n(XIe,"STRONG",{});var Qwt=s(c6e);mbr=r(Qwt,"layoutlm"),Qwt.forEach(t),gbr=r(XIe," \u2014 "),GH=n(XIe,"A",{href:!0});var Wwt=s(GH);hbr=r(Wwt,"TFLayoutLMModel"),Wwt.forEach(t),pbr=r(XIe," (LayoutLM model)"),XIe.forEach(t),_br=i(D),T8=n(D,"LI",{});var zIe=s(T8);f6e=n(zIe,"STRONG",{});var Hwt=s(f6e);ubr=r(Hwt,"led"),Hwt.forEach(t),bbr=r(zIe," \u2014 "),OH=n(zIe,"A",{href:!0});var Uwt=s(OH);vbr=r(Uwt,"TFLEDModel"),Uwt.forEach(t),Fbr=r(zIe," (LED model)"),zIe.forEach(t),Tbr=i(D),M8=n(D,"LI",{});var QIe=s(M8);m6e=n(QIe,"STRONG",{});var Jwt=s(m6e);Mbr=r(Jwt,"longformer"),Jwt.forEach(t),Ebr=r(QIe," \u2014 "),VH=n(QIe,"A",{href:!0});var Ywt=s(VH);Cbr=r(Ywt,"TFLongformerModel"),Ywt.forEach(t),wbr=r(QIe," (Longformer model)"),QIe.forEach(t),Abr=i(D),E8=n(D,"LI",{});var WIe=s(E8);g6e=n(WIe,"STRONG",{});var Kwt=s(g6e);Lbr=r(Kwt,"lxmert"),Kwt.forEach(t),ybr=r(WIe," \u2014 "),XH=n(WIe,"A",{href:!0});var Zwt=s(XH);xbr=r(Zwt,"TFLxmertModel"),Zwt.forEach(t),$br=r(WIe," (LXMERT model)"),WIe.forEach(t),kbr=i(D),C8=n(D,"LI",{});var HIe=s(C8);h6e=n(HIe,"STRONG",{});var eAt=s(h6e);Sbr=r(eAt,"marian"),eAt.forEach(t),Rbr=r(HIe," \u2014 "),zH=n(HIe,"A",{href:!0});var oAt=s(zH);Pbr=r(oAt,"TFMarianModel"),oAt.forEach(t),Bbr=r(HIe," (Marian model)"),HIe.forEach(t),Ibr=i(D),w8=n(D,"LI",{});var UIe=s(w8);p6e=n(UIe,"STRONG",{});var rAt=s(p6e);Nbr=r(rAt,"mbart"),rAt.forEach(t),qbr=r(UIe," \u2014 "),QH=n(UIe,"A",{href:!0});var tAt=s(QH);jbr=r(tAt,"TFMBartModel"),tAt.forEach(t),Dbr=r(UIe," (mBART model)"),UIe.forEach(t),Gbr=i(D),A8=n(D,"LI",{});var JIe=s(A8);_6e=n(JIe,"STRONG",{});var aAt=s(_6e);Obr=r(aAt,"mobilebert"),aAt.forEach(t),Vbr=r(JIe," \u2014 "),WH=n(JIe,"A",{href:!0});var nAt=s(WH);Xbr=r(nAt,"TFMobileBertModel"),nAt.forEach(t),zbr=r(JIe," (MobileBERT model)"),JIe.forEach(t),Qbr=i(D),L8=n(D,"LI",{});var YIe=s(L8);u6e=n(YIe,"STRONG",{});var sAt=s(u6e);Wbr=r(sAt,"mpnet"),sAt.forEach(t),Hbr=r(YIe," \u2014 "),HH=n(YIe,"A",{href:!0});var lAt=s(HH);Ubr=r(lAt,"TFMPNetModel"),lAt.forEach(t),Jbr=r(YIe," (MPNet model)"),YIe.forEach(t),Ybr=i(D),y8=n(D,"LI",{});var KIe=s(y8);b6e=n(KIe,"STRONG",{});var iAt=s(b6e);Kbr=r(iAt,"mt5"),iAt.forEach(t),Zbr=r(KIe," \u2014 "),UH=n(KIe,"A",{href:!0});var dAt=s(UH);evr=r(dAt,"TFMT5Model"),dAt.forEach(t),ovr=r(KIe," (MT5 model)"),KIe.forEach(t),rvr=i(D),x8=n(D,"LI",{});var ZIe=s(x8);v6e=n(ZIe,"STRONG",{});var cAt=s(v6e);tvr=r(cAt,"openai-gpt"),cAt.forEach(t),avr=r(ZIe," \u2014 "),JH=n(ZIe,"A",{href:!0});var fAt=s(JH);nvr=r(fAt,"TFOpenAIGPTModel"),fAt.forEach(t),svr=r(ZIe," (OpenAI GPT model)"),ZIe.forEach(t),lvr=i(D),$8=n(D,"LI",{});var eNe=s($8);F6e=n(eNe,"STRONG",{});var mAt=s(F6e);ivr=r(mAt,"opt"),mAt.forEach(t),dvr=r(eNe," \u2014 "),YH=n(eNe,"A",{href:!0});var gAt=s(YH);cvr=r(gAt,"TFOPTModel"),gAt.forEach(t),fvr=r(eNe," (OPT model)"),eNe.forEach(t),mvr=i(D),k8=n(D,"LI",{});var oNe=s(k8);T6e=n(oNe,"STRONG",{});var hAt=s(T6e);gvr=r(hAt,"pegasus"),hAt.forEach(t),hvr=r(oNe," \u2014 "),KH=n(oNe,"A",{href:!0});var pAt=s(KH);pvr=r(pAt,"TFPegasusModel"),pAt.forEach(t),_vr=r(oNe," (Pegasus model)"),oNe.forEach(t),uvr=i(D),S8=n(D,"LI",{});var rNe=s(S8);M6e=n(rNe,"STRONG",{});var _At=s(M6e);bvr=r(_At,"rembert"),_At.forEach(t),vvr=r(rNe," \u2014 "),ZH=n(rNe,"A",{href:!0});var uAt=s(ZH);Fvr=r(uAt,"TFRemBertModel"),uAt.forEach(t),Tvr=r(rNe," (RemBERT model)"),rNe.forEach(t),Mvr=i(D),R8=n(D,"LI",{});var tNe=s(R8);E6e=n(tNe,"STRONG",{});var bAt=s(E6e);Evr=r(bAt,"roberta"),bAt.forEach(t),Cvr=r(tNe," \u2014 "),eU=n(tNe,"A",{href:!0});var vAt=s(eU);wvr=r(vAt,"TFRobertaModel"),vAt.forEach(t),Avr=r(tNe," (RoBERTa model)"),tNe.forEach(t),Lvr=i(D),P8=n(D,"LI",{});var aNe=s(P8);C6e=n(aNe,"STRONG",{});var FAt=s(C6e);yvr=r(FAt,"roformer"),FAt.forEach(t),xvr=r(aNe," \u2014 "),oU=n(aNe,"A",{href:!0});var TAt=s(oU);$vr=r(TAt,"TFRoFormerModel"),TAt.forEach(t),kvr=r(aNe," (RoFormer model)"),aNe.forEach(t),Svr=i(D),B8=n(D,"LI",{});var nNe=s(B8);w6e=n(nNe,"STRONG",{});var MAt=s(w6e);Rvr=r(MAt,"speech_to_text"),MAt.forEach(t),Pvr=r(nNe," \u2014 "),rU=n(nNe,"A",{href:!0});var EAt=s(rU);Bvr=r(EAt,"TFSpeech2TextModel"),EAt.forEach(t),Ivr=r(nNe," (Speech2Text model)"),nNe.forEach(t),Nvr=i(D),I8=n(D,"LI",{});var sNe=s(I8);A6e=n(sNe,"STRONG",{});var CAt=s(A6e);qvr=r(CAt,"swin"),CAt.forEach(t),jvr=r(sNe," \u2014 "),tU=n(sNe,"A",{href:!0});var wAt=s(tU);Dvr=r(wAt,"TFSwinModel"),wAt.forEach(t),Gvr=r(sNe," (Swin Transformer model)"),sNe.forEach(t),Ovr=i(D),N8=n(D,"LI",{});var lNe=s(N8);L6e=n(lNe,"STRONG",{});var AAt=s(L6e);Vvr=r(AAt,"t5"),AAt.forEach(t),Xvr=r(lNe," \u2014 "),aU=n(lNe,"A",{href:!0});var LAt=s(aU);zvr=r(LAt,"TFT5Model"),LAt.forEach(t),Qvr=r(lNe," (T5 model)"),lNe.forEach(t),Wvr=i(D),q8=n(D,"LI",{});var iNe=s(q8);y6e=n(iNe,"STRONG",{});var yAt=s(y6e);Hvr=r(yAt,"tapas"),yAt.forEach(t),Uvr=r(iNe," \u2014 "),nU=n(iNe,"A",{href:!0});var xAt=s(nU);Jvr=r(xAt,"TFTapasModel"),xAt.forEach(t),Yvr=r(iNe," (TAPAS model)"),iNe.forEach(t),Kvr=i(D),j8=n(D,"LI",{});var dNe=s(j8);x6e=n(dNe,"STRONG",{});var $At=s(x6e);Zvr=r($At,"transfo-xl"),$At.forEach(t),eFr=r(dNe," \u2014 "),sU=n(dNe,"A",{href:!0});var kAt=s(sU);oFr=r(kAt,"TFTransfoXLModel"),kAt.forEach(t),rFr=r(dNe," (Transformer-XL model)"),dNe.forEach(t),tFr=i(D),D8=n(D,"LI",{});var cNe=s(D8);$6e=n(cNe,"STRONG",{});var SAt=s($6e);aFr=r(SAt,"vit"),SAt.forEach(t),nFr=r(cNe," \u2014 "),lU=n(cNe,"A",{href:!0});var RAt=s(lU);sFr=r(RAt,"TFViTModel"),RAt.forEach(t),lFr=r(cNe," (ViT model)"),cNe.forEach(t),iFr=i(D),G8=n(D,"LI",{});var fNe=s(G8);k6e=n(fNe,"STRONG",{});var PAt=s(k6e);dFr=r(PAt,"vit_mae"),PAt.forEach(t),cFr=r(fNe," \u2014 "),iU=n(fNe,"A",{href:!0});var BAt=s(iU);fFr=r(BAt,"TFViTMAEModel"),BAt.forEach(t),mFr=r(fNe," (ViTMAE model)"),fNe.forEach(t),gFr=i(D),O8=n(D,"LI",{});var mNe=s(O8);S6e=n(mNe,"STRONG",{});var IAt=s(S6e);hFr=r(IAt,"wav2vec2"),IAt.forEach(t),pFr=r(mNe," \u2014 "),dU=n(mNe,"A",{href:!0});var NAt=s(dU);_Fr=r(NAt,"TFWav2Vec2Model"),NAt.forEach(t),uFr=r(mNe," (Wav2Vec2 model)"),mNe.forEach(t),bFr=i(D),V8=n(D,"LI",{});var gNe=s(V8);R6e=n(gNe,"STRONG",{});var qAt=s(R6e);vFr=r(qAt,"xlm"),qAt.forEach(t),FFr=r(gNe," \u2014 "),cU=n(gNe,"A",{href:!0});var jAt=s(cU);TFr=r(jAt,"TFXLMModel"),jAt.forEach(t),MFr=r(gNe," (XLM model)"),gNe.forEach(t),EFr=i(D),X8=n(D,"LI",{});var hNe=s(X8);P6e=n(hNe,"STRONG",{});var DAt=s(P6e);CFr=r(DAt,"xlm-roberta"),DAt.forEach(t),wFr=r(hNe," \u2014 "),fU=n(hNe,"A",{href:!0});var GAt=s(fU);AFr=r(GAt,"TFXLMRobertaModel"),GAt.forEach(t),LFr=r(hNe," (XLM-RoBERTa model)"),hNe.forEach(t),yFr=i(D),z8=n(D,"LI",{});var pNe=s(z8);B6e=n(pNe,"STRONG",{});var OAt=s(B6e);xFr=r(OAt,"xlnet"),OAt.forEach(t),$Fr=r(pNe," \u2014 "),mU=n(pNe,"A",{href:!0});var VAt=s(mU);kFr=r(VAt,"TFXLNetModel"),VAt.forEach(t),SFr=r(pNe," (XLNet model)"),pNe.forEach(t),D.forEach(t),RFr=i(wl),T(Q8.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),EVe=i(f),ac=n(f,"H2",{class:!0});var kze=s(ac);W8=n(kze,"A",{id:!0,class:!0,href:!0});var XAt=s(W8);I6e=n(XAt,"SPAN",{});var zAt=s(I6e);T(L9.$$.fragment,zAt),zAt.forEach(t),XAt.forEach(t),PFr=i(kze),N6e=n(kze,"SPAN",{});var QAt=s(N6e);BFr=r(QAt,"TFAutoModelForPreTraining"),QAt.forEach(t),kze.forEach(t),CVe=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(y9.$$.fragment,Al),IFr=i(Al),nc=n(Al,"P",{});var $re=s(nc);NFr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gU=n($re,"A",{href:!0});var WAt=s(gU);qFr=r(WAt,"from_pretrained()"),WAt.forEach(t),jFr=r($re," class method or the "),hU=n($re,"A",{href:!0});var HAt=s(hU);DFr=r(HAt,"from_config()"),HAt.forEach(t),GFr=r($re,` class
method.`),$re.forEach(t),OFr=i(Al),x9=n(Al,"P",{});var Sze=s(x9);VFr=r(Sze,"This class cannot be instantiated directly using "),q6e=n(Sze,"CODE",{});var UAt=s(q6e);XFr=r(UAt,"__init__()"),UAt.forEach(t),zFr=r(Sze," (throws an error)."),Sze.forEach(t),QFr=i(Al),kt=n(Al,"DIV",{class:!0});var Bw=s(kt);T($9.$$.fragment,Bw),WFr=i(Bw),j6e=n(Bw,"P",{});var JAt=s(j6e);HFr=r(JAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JAt.forEach(t),UFr=i(Bw),sc=n(Bw,"P",{});var kre=s(sc);JFr=r(kre,`Note:
Loading a model from its configuration file does `),D6e=n(kre,"STRONG",{});var YAt=s(D6e);YFr=r(YAt,"not"),YAt.forEach(t),KFr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(kre,"A",{href:!0});var KAt=s(pU);ZFr=r(KAt,"from_pretrained()"),KAt.forEach(t),e6r=r(kre," to load the model weights."),kre.forEach(t),o6r=i(Bw),T(H8.$$.fragment,Bw),Bw.forEach(t),r6r=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(k9.$$.fragment,Ll),t6r=i(Ll),G6e=n(Ll,"P",{});var ZAt=s(G6e);a6r=r(ZAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZAt.forEach(t),n6r=i(Ll),nn=n(Ll,"P",{});var Iw=s(nn);s6r=r(Iw,"The model class to instantiate is selected based on the "),O6e=n(Iw,"CODE",{});var eLt=s(O6e);l6r=r(eLt,"model_type"),eLt.forEach(t),i6r=r(Iw,` property of the config object (either
passed as an argument or loaded from `),V6e=n(Iw,"CODE",{});var oLt=s(V6e);d6r=r(oLt,"pretrained_model_name_or_path"),oLt.forEach(t),c6r=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(Iw,"CODE",{});var rLt=s(X6e);f6r=r(rLt,"pretrained_model_name_or_path"),rLt.forEach(t),m6r=r(Iw,":"),Iw.forEach(t),g6r=i(Ll),se=n(Ll,"UL",{});var le=s(se);U8=n(le,"LI",{});var _Ne=s(U8);z6e=n(_Ne,"STRONG",{});var tLt=s(z6e);h6r=r(tLt,"albert"),tLt.forEach(t),p6r=r(_Ne," \u2014 "),_U=n(_Ne,"A",{href:!0});var aLt=s(_U);_6r=r(aLt,"TFAlbertForPreTraining"),aLt.forEach(t),u6r=r(_Ne," (ALBERT model)"),_Ne.forEach(t),b6r=i(le),J8=n(le,"LI",{});var uNe=s(J8);Q6e=n(uNe,"STRONG",{});var nLt=s(Q6e);v6r=r(nLt,"bart"),nLt.forEach(t),F6r=r(uNe," \u2014 "),uU=n(uNe,"A",{href:!0});var sLt=s(uU);T6r=r(sLt,"TFBartForConditionalGeneration"),sLt.forEach(t),M6r=r(uNe," (BART model)"),uNe.forEach(t),E6r=i(le),Y8=n(le,"LI",{});var bNe=s(Y8);W6e=n(bNe,"STRONG",{});var lLt=s(W6e);C6r=r(lLt,"bert"),lLt.forEach(t),w6r=r(bNe," \u2014 "),bU=n(bNe,"A",{href:!0});var iLt=s(bU);A6r=r(iLt,"TFBertForPreTraining"),iLt.forEach(t),L6r=r(bNe," (BERT model)"),bNe.forEach(t),y6r=i(le),K8=n(le,"LI",{});var vNe=s(K8);H6e=n(vNe,"STRONG",{});var dLt=s(H6e);x6r=r(dLt,"camembert"),dLt.forEach(t),$6r=r(vNe," \u2014 "),vU=n(vNe,"A",{href:!0});var cLt=s(vU);k6r=r(cLt,"TFCamembertForMaskedLM"),cLt.forEach(t),S6r=r(vNe," (CamemBERT model)"),vNe.forEach(t),R6r=i(le),Z8=n(le,"LI",{});var FNe=s(Z8);U6e=n(FNe,"STRONG",{});var fLt=s(U6e);P6r=r(fLt,"ctrl"),fLt.forEach(t),B6r=r(FNe," \u2014 "),FU=n(FNe,"A",{href:!0});var mLt=s(FU);I6r=r(mLt,"TFCTRLLMHeadModel"),mLt.forEach(t),N6r=r(FNe," (CTRL model)"),FNe.forEach(t),q6r=i(le),eM=n(le,"LI",{});var TNe=s(eM);J6e=n(TNe,"STRONG",{});var gLt=s(J6e);j6r=r(gLt,"distilbert"),gLt.forEach(t),D6r=r(TNe," \u2014 "),TU=n(TNe,"A",{href:!0});var hLt=s(TU);G6r=r(hLt,"TFDistilBertForMaskedLM"),hLt.forEach(t),O6r=r(TNe," (DistilBERT model)"),TNe.forEach(t),V6r=i(le),oM=n(le,"LI",{});var MNe=s(oM);Y6e=n(MNe,"STRONG",{});var pLt=s(Y6e);X6r=r(pLt,"electra"),pLt.forEach(t),z6r=r(MNe," \u2014 "),MU=n(MNe,"A",{href:!0});var _Lt=s(MU);Q6r=r(_Lt,"TFElectraForPreTraining"),_Lt.forEach(t),W6r=r(MNe," (ELECTRA model)"),MNe.forEach(t),H6r=i(le),rM=n(le,"LI",{});var ENe=s(rM);K6e=n(ENe,"STRONG",{});var uLt=s(K6e);U6r=r(uLt,"flaubert"),uLt.forEach(t),J6r=r(ENe," \u2014 "),EU=n(ENe,"A",{href:!0});var bLt=s(EU);Y6r=r(bLt,"TFFlaubertWithLMHeadModel"),bLt.forEach(t),K6r=r(ENe," (FlauBERT model)"),ENe.forEach(t),Z6r=i(le),tM=n(le,"LI",{});var CNe=s(tM);Z6e=n(CNe,"STRONG",{});var vLt=s(Z6e);eTr=r(vLt,"funnel"),vLt.forEach(t),oTr=r(CNe," \u2014 "),CU=n(CNe,"A",{href:!0});var FLt=s(CU);rTr=r(FLt,"TFFunnelForPreTraining"),FLt.forEach(t),tTr=r(CNe," (Funnel Transformer model)"),CNe.forEach(t),aTr=i(le),aM=n(le,"LI",{});var wNe=s(aM);eTe=n(wNe,"STRONG",{});var TLt=s(eTe);nTr=r(TLt,"gpt2"),TLt.forEach(t),sTr=r(wNe," \u2014 "),wU=n(wNe,"A",{href:!0});var MLt=s(wU);lTr=r(MLt,"TFGPT2LMHeadModel"),MLt.forEach(t),iTr=r(wNe," (OpenAI GPT-2 model)"),wNe.forEach(t),dTr=i(le),nM=n(le,"LI",{});var ANe=s(nM);oTe=n(ANe,"STRONG",{});var ELt=s(oTe);cTr=r(ELt,"layoutlm"),ELt.forEach(t),fTr=r(ANe," \u2014 "),AU=n(ANe,"A",{href:!0});var CLt=s(AU);mTr=r(CLt,"TFLayoutLMForMaskedLM"),CLt.forEach(t),gTr=r(ANe," (LayoutLM model)"),ANe.forEach(t),hTr=i(le),sM=n(le,"LI",{});var LNe=s(sM);rTe=n(LNe,"STRONG",{});var wLt=s(rTe);pTr=r(wLt,"lxmert"),wLt.forEach(t),_Tr=r(LNe," \u2014 "),LU=n(LNe,"A",{href:!0});var ALt=s(LU);uTr=r(ALt,"TFLxmertForPreTraining"),ALt.forEach(t),bTr=r(LNe," (LXMERT model)"),LNe.forEach(t),vTr=i(le),lM=n(le,"LI",{});var yNe=s(lM);tTe=n(yNe,"STRONG",{});var LLt=s(tTe);FTr=r(LLt,"mobilebert"),LLt.forEach(t),TTr=r(yNe," \u2014 "),yU=n(yNe,"A",{href:!0});var yLt=s(yU);MTr=r(yLt,"TFMobileBertForPreTraining"),yLt.forEach(t),ETr=r(yNe," (MobileBERT model)"),yNe.forEach(t),CTr=i(le),iM=n(le,"LI",{});var xNe=s(iM);aTe=n(xNe,"STRONG",{});var xLt=s(aTe);wTr=r(xLt,"mpnet"),xLt.forEach(t),ATr=r(xNe," \u2014 "),xU=n(xNe,"A",{href:!0});var $Lt=s(xU);LTr=r($Lt,"TFMPNetForMaskedLM"),$Lt.forEach(t),yTr=r(xNe," (MPNet model)"),xNe.forEach(t),xTr=i(le),dM=n(le,"LI",{});var $Ne=s(dM);nTe=n($Ne,"STRONG",{});var kLt=s(nTe);$Tr=r(kLt,"openai-gpt"),kLt.forEach(t),kTr=r($Ne," \u2014 "),$U=n($Ne,"A",{href:!0});var SLt=s($U);STr=r(SLt,"TFOpenAIGPTLMHeadModel"),SLt.forEach(t),RTr=r($Ne," (OpenAI GPT model)"),$Ne.forEach(t),PTr=i(le),cM=n(le,"LI",{});var kNe=s(cM);sTe=n(kNe,"STRONG",{});var RLt=s(sTe);BTr=r(RLt,"roberta"),RLt.forEach(t),ITr=r(kNe," \u2014 "),kU=n(kNe,"A",{href:!0});var PLt=s(kU);NTr=r(PLt,"TFRobertaForMaskedLM"),PLt.forEach(t),qTr=r(kNe," (RoBERTa model)"),kNe.forEach(t),jTr=i(le),fM=n(le,"LI",{});var SNe=s(fM);lTe=n(SNe,"STRONG",{});var BLt=s(lTe);DTr=r(BLt,"t5"),BLt.forEach(t),GTr=r(SNe," \u2014 "),SU=n(SNe,"A",{href:!0});var ILt=s(SU);OTr=r(ILt,"TFT5ForConditionalGeneration"),ILt.forEach(t),VTr=r(SNe," (T5 model)"),SNe.forEach(t),XTr=i(le),mM=n(le,"LI",{});var RNe=s(mM);iTe=n(RNe,"STRONG",{});var NLt=s(iTe);zTr=r(NLt,"tapas"),NLt.forEach(t),QTr=r(RNe," \u2014 "),RU=n(RNe,"A",{href:!0});var qLt=s(RU);WTr=r(qLt,"TFTapasForMaskedLM"),qLt.forEach(t),HTr=r(RNe," (TAPAS model)"),RNe.forEach(t),UTr=i(le),gM=n(le,"LI",{});var PNe=s(gM);dTe=n(PNe,"STRONG",{});var jLt=s(dTe);JTr=r(jLt,"transfo-xl"),jLt.forEach(t),YTr=r(PNe," \u2014 "),PU=n(PNe,"A",{href:!0});var DLt=s(PU);KTr=r(DLt,"TFTransfoXLLMHeadModel"),DLt.forEach(t),ZTr=r(PNe," (Transformer-XL model)"),PNe.forEach(t),e7r=i(le),hM=n(le,"LI",{});var BNe=s(hM);cTe=n(BNe,"STRONG",{});var GLt=s(cTe);o7r=r(GLt,"vit_mae"),GLt.forEach(t),r7r=r(BNe," \u2014 "),BU=n(BNe,"A",{href:!0});var OLt=s(BU);t7r=r(OLt,"TFViTMAEForPreTraining"),OLt.forEach(t),a7r=r(BNe," (ViTMAE model)"),BNe.forEach(t),n7r=i(le),pM=n(le,"LI",{});var INe=s(pM);fTe=n(INe,"STRONG",{});var VLt=s(fTe);s7r=r(VLt,"xlm"),VLt.forEach(t),l7r=r(INe," \u2014 "),IU=n(INe,"A",{href:!0});var XLt=s(IU);i7r=r(XLt,"TFXLMWithLMHeadModel"),XLt.forEach(t),d7r=r(INe," (XLM model)"),INe.forEach(t),c7r=i(le),_M=n(le,"LI",{});var NNe=s(_M);mTe=n(NNe,"STRONG",{});var zLt=s(mTe);f7r=r(zLt,"xlm-roberta"),zLt.forEach(t),m7r=r(NNe," \u2014 "),NU=n(NNe,"A",{href:!0});var QLt=s(NU);g7r=r(QLt,"TFXLMRobertaForMaskedLM"),QLt.forEach(t),h7r=r(NNe," (XLM-RoBERTa model)"),NNe.forEach(t),p7r=i(le),uM=n(le,"LI",{});var qNe=s(uM);gTe=n(qNe,"STRONG",{});var WLt=s(gTe);_7r=r(WLt,"xlnet"),WLt.forEach(t),u7r=r(qNe," \u2014 "),qU=n(qNe,"A",{href:!0});var HLt=s(qU);b7r=r(HLt,"TFXLNetLMHeadModel"),HLt.forEach(t),v7r=r(qNe," (XLNet model)"),qNe.forEach(t),le.forEach(t),F7r=i(Ll),T(bM.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),wVe=i(f),lc=n(f,"H2",{class:!0});var Rze=s(lc);vM=n(Rze,"A",{id:!0,class:!0,href:!0});var ULt=s(vM);hTe=n(ULt,"SPAN",{});var JLt=s(hTe);T(S9.$$.fragment,JLt),JLt.forEach(t),ULt.forEach(t),T7r=i(Rze),pTe=n(Rze,"SPAN",{});var YLt=s(pTe);M7r=r(YLt,"TFAutoModelForCausalLM"),YLt.forEach(t),Rze.forEach(t),AVe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(R9.$$.fragment,yl),E7r=i(yl),ic=n(yl,"P",{});var Sre=s(ic);C7r=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jU=n(Sre,"A",{href:!0});var KLt=s(jU);w7r=r(KLt,"from_pretrained()"),KLt.forEach(t),A7r=r(Sre," class method or the "),DU=n(Sre,"A",{href:!0});var ZLt=s(DU);L7r=r(ZLt,"from_config()"),ZLt.forEach(t),y7r=r(Sre,` class
method.`),Sre.forEach(t),x7r=i(yl),P9=n(yl,"P",{});var Pze=s(P9);$7r=r(Pze,"This class cannot be instantiated directly using "),_Te=n(Pze,"CODE",{});var eyt=s(_Te);k7r=r(eyt,"__init__()"),eyt.forEach(t),S7r=r(Pze," (throws an error)."),Pze.forEach(t),R7r=i(yl),St=n(yl,"DIV",{class:!0});var Nw=s(St);T(B9.$$.fragment,Nw),P7r=i(Nw),uTe=n(Nw,"P",{});var oyt=s(uTe);B7r=r(oyt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),oyt.forEach(t),I7r=i(Nw),dc=n(Nw,"P",{});var Rre=s(dc);N7r=r(Rre,`Note:
Loading a model from its configuration file does `),bTe=n(Rre,"STRONG",{});var ryt=s(bTe);q7r=r(ryt,"not"),ryt.forEach(t),j7r=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(Rre,"A",{href:!0});var tyt=s(GU);D7r=r(tyt,"from_pretrained()"),tyt.forEach(t),G7r=r(Rre," to load the model weights."),Rre.forEach(t),O7r=i(Nw),T(FM.$$.fragment,Nw),Nw.forEach(t),V7r=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(I9.$$.fragment,xl),X7r=i(xl),vTe=n(xl,"P",{});var ayt=s(vTe);z7r=r(ayt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ayt.forEach(t),Q7r=i(xl),sn=n(xl,"P",{});var qw=s(sn);W7r=r(qw,"The model class to instantiate is selected based on the "),FTe=n(qw,"CODE",{});var nyt=s(FTe);H7r=r(nyt,"model_type"),nyt.forEach(t),U7r=r(qw,` property of the config object (either
passed as an argument or loaded from `),TTe=n(qw,"CODE",{});var syt=s(TTe);J7r=r(syt,"pretrained_model_name_or_path"),syt.forEach(t),Y7r=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=n(qw,"CODE",{});var lyt=s(MTe);K7r=r(lyt,"pretrained_model_name_or_path"),lyt.forEach(t),Z7r=r(qw,":"),qw.forEach(t),e8r=i(xl),Me=n(xl,"UL",{});var Ce=s(Me);TM=n(Ce,"LI",{});var jNe=s(TM);ETe=n(jNe,"STRONG",{});var iyt=s(ETe);o8r=r(iyt,"bert"),iyt.forEach(t),r8r=r(jNe," \u2014 "),OU=n(jNe,"A",{href:!0});var dyt=s(OU);t8r=r(dyt,"TFBertLMHeadModel"),dyt.forEach(t),a8r=r(jNe," (BERT model)"),jNe.forEach(t),n8r=i(Ce),MM=n(Ce,"LI",{});var DNe=s(MM);CTe=n(DNe,"STRONG",{});var cyt=s(CTe);s8r=r(cyt,"camembert"),cyt.forEach(t),l8r=r(DNe," \u2014 "),VU=n(DNe,"A",{href:!0});var fyt=s(VU);i8r=r(fyt,"TFCamembertForCausalLM"),fyt.forEach(t),d8r=r(DNe," (CamemBERT model)"),DNe.forEach(t),c8r=i(Ce),EM=n(Ce,"LI",{});var GNe=s(EM);wTe=n(GNe,"STRONG",{});var myt=s(wTe);f8r=r(myt,"ctrl"),myt.forEach(t),m8r=r(GNe," \u2014 "),XU=n(GNe,"A",{href:!0});var gyt=s(XU);g8r=r(gyt,"TFCTRLLMHeadModel"),gyt.forEach(t),h8r=r(GNe," (CTRL model)"),GNe.forEach(t),p8r=i(Ce),CM=n(Ce,"LI",{});var ONe=s(CM);ATe=n(ONe,"STRONG",{});var hyt=s(ATe);_8r=r(hyt,"gpt2"),hyt.forEach(t),u8r=r(ONe," \u2014 "),zU=n(ONe,"A",{href:!0});var pyt=s(zU);b8r=r(pyt,"TFGPT2LMHeadModel"),pyt.forEach(t),v8r=r(ONe," (OpenAI GPT-2 model)"),ONe.forEach(t),F8r=i(Ce),wM=n(Ce,"LI",{});var VNe=s(wM);LTe=n(VNe,"STRONG",{});var _yt=s(LTe);T8r=r(_yt,"gptj"),_yt.forEach(t),M8r=r(VNe," \u2014 "),QU=n(VNe,"A",{href:!0});var uyt=s(QU);E8r=r(uyt,"TFGPTJForCausalLM"),uyt.forEach(t),C8r=r(VNe," (GPT-J model)"),VNe.forEach(t),w8r=i(Ce),AM=n(Ce,"LI",{});var XNe=s(AM);yTe=n(XNe,"STRONG",{});var byt=s(yTe);A8r=r(byt,"openai-gpt"),byt.forEach(t),L8r=r(XNe," \u2014 "),WU=n(XNe,"A",{href:!0});var vyt=s(WU);y8r=r(vyt,"TFOpenAIGPTLMHeadModel"),vyt.forEach(t),x8r=r(XNe," (OpenAI GPT model)"),XNe.forEach(t),$8r=i(Ce),LM=n(Ce,"LI",{});var zNe=s(LM);xTe=n(zNe,"STRONG",{});var Fyt=s(xTe);k8r=r(Fyt,"opt"),Fyt.forEach(t),S8r=r(zNe," \u2014 "),HU=n(zNe,"A",{href:!0});var Tyt=s(HU);R8r=r(Tyt,"TFOPTForCausalLM"),Tyt.forEach(t),P8r=r(zNe," (OPT model)"),zNe.forEach(t),B8r=i(Ce),yM=n(Ce,"LI",{});var QNe=s(yM);$Te=n(QNe,"STRONG",{});var Myt=s($Te);I8r=r(Myt,"rembert"),Myt.forEach(t),N8r=r(QNe," \u2014 "),UU=n(QNe,"A",{href:!0});var Eyt=s(UU);q8r=r(Eyt,"TFRemBertForCausalLM"),Eyt.forEach(t),j8r=r(QNe," (RemBERT model)"),QNe.forEach(t),D8r=i(Ce),xM=n(Ce,"LI",{});var WNe=s(xM);kTe=n(WNe,"STRONG",{});var Cyt=s(kTe);G8r=r(Cyt,"roberta"),Cyt.forEach(t),O8r=r(WNe," \u2014 "),JU=n(WNe,"A",{href:!0});var wyt=s(JU);V8r=r(wyt,"TFRobertaForCausalLM"),wyt.forEach(t),X8r=r(WNe," (RoBERTa model)"),WNe.forEach(t),z8r=i(Ce),$M=n(Ce,"LI",{});var HNe=s($M);STe=n(HNe,"STRONG",{});var Ayt=s(STe);Q8r=r(Ayt,"roformer"),Ayt.forEach(t),W8r=r(HNe," \u2014 "),YU=n(HNe,"A",{href:!0});var Lyt=s(YU);H8r=r(Lyt,"TFRoFormerForCausalLM"),Lyt.forEach(t),U8r=r(HNe," (RoFormer model)"),HNe.forEach(t),J8r=i(Ce),kM=n(Ce,"LI",{});var UNe=s(kM);RTe=n(UNe,"STRONG",{});var yyt=s(RTe);Y8r=r(yyt,"transfo-xl"),yyt.forEach(t),K8r=r(UNe," \u2014 "),KU=n(UNe,"A",{href:!0});var xyt=s(KU);Z8r=r(xyt,"TFTransfoXLLMHeadModel"),xyt.forEach(t),eMr=r(UNe," (Transformer-XL model)"),UNe.forEach(t),oMr=i(Ce),SM=n(Ce,"LI",{});var JNe=s(SM);PTe=n(JNe,"STRONG",{});var $yt=s(PTe);rMr=r($yt,"xlm"),$yt.forEach(t),tMr=r(JNe," \u2014 "),ZU=n(JNe,"A",{href:!0});var kyt=s(ZU);aMr=r(kyt,"TFXLMWithLMHeadModel"),kyt.forEach(t),nMr=r(JNe," (XLM model)"),JNe.forEach(t),sMr=i(Ce),RM=n(Ce,"LI",{});var YNe=s(RM);BTe=n(YNe,"STRONG",{});var Syt=s(BTe);lMr=r(Syt,"xlnet"),Syt.forEach(t),iMr=r(YNe," \u2014 "),eJ=n(YNe,"A",{href:!0});var Ryt=s(eJ);dMr=r(Ryt,"TFXLNetLMHeadModel"),Ryt.forEach(t),cMr=r(YNe," (XLNet model)"),YNe.forEach(t),Ce.forEach(t),fMr=i(xl),T(PM.$$.fragment,xl),xl.forEach(t),yl.forEach(t),LVe=i(f),cc=n(f,"H2",{class:!0});var Bze=s(cc);BM=n(Bze,"A",{id:!0,class:!0,href:!0});var Pyt=s(BM);ITe=n(Pyt,"SPAN",{});var Byt=s(ITe);T(N9.$$.fragment,Byt),Byt.forEach(t),Pyt.forEach(t),mMr=i(Bze),NTe=n(Bze,"SPAN",{});var Iyt=s(NTe);gMr=r(Iyt,"TFAutoModelForImageClassification"),Iyt.forEach(t),Bze.forEach(t),yVe=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T(q9.$$.fragment,$l),hMr=i($l),fc=n($l,"P",{});var Pre=s(fc);pMr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oJ=n(Pre,"A",{href:!0});var Nyt=s(oJ);_Mr=r(Nyt,"from_pretrained()"),Nyt.forEach(t),uMr=r(Pre," class method or the "),rJ=n(Pre,"A",{href:!0});var qyt=s(rJ);bMr=r(qyt,"from_config()"),qyt.forEach(t),vMr=r(Pre,` class
method.`),Pre.forEach(t),FMr=i($l),j9=n($l,"P",{});var Ize=s(j9);TMr=r(Ize,"This class cannot be instantiated directly using "),qTe=n(Ize,"CODE",{});var jyt=s(qTe);MMr=r(jyt,"__init__()"),jyt.forEach(t),EMr=r(Ize," (throws an error)."),Ize.forEach(t),CMr=i($l),Rt=n($l,"DIV",{class:!0});var jw=s(Rt);T(D9.$$.fragment,jw),wMr=i(jw),jTe=n(jw,"P",{});var Dyt=s(jTe);AMr=r(Dyt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Dyt.forEach(t),LMr=i(jw),mc=n(jw,"P",{});var Bre=s(mc);yMr=r(Bre,`Note:
Loading a model from its configuration file does `),DTe=n(Bre,"STRONG",{});var Gyt=s(DTe);xMr=r(Gyt,"not"),Gyt.forEach(t),$Mr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(Bre,"A",{href:!0});var Oyt=s(tJ);kMr=r(Oyt,"from_pretrained()"),Oyt.forEach(t),SMr=r(Bre," to load the model weights."),Bre.forEach(t),RMr=i(jw),T(IM.$$.fragment,jw),jw.forEach(t),PMr=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(G9.$$.fragment,kl),BMr=i(kl),GTe=n(kl,"P",{});var Vyt=s(GTe);IMr=r(Vyt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Vyt.forEach(t),NMr=i(kl),ln=n(kl,"P",{});var Dw=s(ln);qMr=r(Dw,"The model class to instantiate is selected based on the "),OTe=n(Dw,"CODE",{});var Xyt=s(OTe);jMr=r(Xyt,"model_type"),Xyt.forEach(t),DMr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),VTe=n(Dw,"CODE",{});var zyt=s(VTe);GMr=r(zyt,"pretrained_model_name_or_path"),zyt.forEach(t),OMr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(Dw,"CODE",{});var Qyt=s(XTe);VMr=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),XMr=r(Dw,":"),Dw.forEach(t),zMr=i(kl),dn=n(kl,"UL",{});var Gw=s(dn);NM=n(Gw,"LI",{});var KNe=s(NM);zTe=n(KNe,"STRONG",{});var Wyt=s(zTe);QMr=r(Wyt,"convnext"),Wyt.forEach(t),WMr=r(KNe," \u2014 "),aJ=n(KNe,"A",{href:!0});var Hyt=s(aJ);HMr=r(Hyt,"TFConvNextForImageClassification"),Hyt.forEach(t),UMr=r(KNe," (ConvNeXT model)"),KNe.forEach(t),JMr=i(Gw),qM=n(Gw,"LI",{});var ZNe=s(qM);QTe=n(ZNe,"STRONG",{});var Uyt=s(QTe);YMr=r(Uyt,"data2vec-vision"),Uyt.forEach(t),KMr=r(ZNe," \u2014 "),nJ=n(ZNe,"A",{href:!0});var Jyt=s(nJ);ZMr=r(Jyt,"TFData2VecVisionForImageClassification"),Jyt.forEach(t),eEr=r(ZNe," (Data2VecVision model)"),ZNe.forEach(t),oEr=i(Gw),jM=n(Gw,"LI",{});var eqe=s(jM);WTe=n(eqe,"STRONG",{});var Yyt=s(WTe);rEr=r(Yyt,"swin"),Yyt.forEach(t),tEr=r(eqe," \u2014 "),sJ=n(eqe,"A",{href:!0});var Kyt=s(sJ);aEr=r(Kyt,"TFSwinForImageClassification"),Kyt.forEach(t),nEr=r(eqe," (Swin Transformer model)"),eqe.forEach(t),sEr=i(Gw),DM=n(Gw,"LI",{});var oqe=s(DM);HTe=n(oqe,"STRONG",{});var Zyt=s(HTe);lEr=r(Zyt,"vit"),Zyt.forEach(t),iEr=r(oqe," \u2014 "),lJ=n(oqe,"A",{href:!0});var e9t=s(lJ);dEr=r(e9t,"TFViTForImageClassification"),e9t.forEach(t),cEr=r(oqe," (ViT model)"),oqe.forEach(t),Gw.forEach(t),fEr=i(kl),T(GM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),xVe=i(f),gc=n(f,"H2",{class:!0});var Nze=s(gc);OM=n(Nze,"A",{id:!0,class:!0,href:!0});var o9t=s(OM);UTe=n(o9t,"SPAN",{});var r9t=s(UTe);T(O9.$$.fragment,r9t),r9t.forEach(t),o9t.forEach(t),mEr=i(Nze),JTe=n(Nze,"SPAN",{});var t9t=s(JTe);gEr=r(t9t,"TFAutoModelForMaskedLM"),t9t.forEach(t),Nze.forEach(t),$Ve=i(f),ar=n(f,"DIV",{class:!0});var Sl=s(ar);T(V9.$$.fragment,Sl),hEr=i(Sl),hc=n(Sl,"P",{});var Ire=s(hc);pEr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iJ=n(Ire,"A",{href:!0});var a9t=s(iJ);_Er=r(a9t,"from_pretrained()"),a9t.forEach(t),uEr=r(Ire," class method or the "),dJ=n(Ire,"A",{href:!0});var n9t=s(dJ);bEr=r(n9t,"from_config()"),n9t.forEach(t),vEr=r(Ire,` class
method.`),Ire.forEach(t),FEr=i(Sl),X9=n(Sl,"P",{});var qze=s(X9);TEr=r(qze,"This class cannot be instantiated directly using "),YTe=n(qze,"CODE",{});var s9t=s(YTe);MEr=r(s9t,"__init__()"),s9t.forEach(t),EEr=r(qze," (throws an error)."),qze.forEach(t),CEr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var Ow=s(Pt);T(z9.$$.fragment,Ow),wEr=i(Ow),KTe=n(Ow,"P",{});var l9t=s(KTe);AEr=r(l9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),l9t.forEach(t),LEr=i(Ow),pc=n(Ow,"P",{});var Nre=s(pc);yEr=r(Nre,`Note:
Loading a model from its configuration file does `),ZTe=n(Nre,"STRONG",{});var i9t=s(ZTe);xEr=r(i9t,"not"),i9t.forEach(t),$Er=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(Nre,"A",{href:!0});var d9t=s(cJ);kEr=r(d9t,"from_pretrained()"),d9t.forEach(t),SEr=r(Nre," to load the model weights."),Nre.forEach(t),REr=i(Ow),T(VM.$$.fragment,Ow),Ow.forEach(t),PEr=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(Q9.$$.fragment,Rl),BEr=i(Rl),e7e=n(Rl,"P",{});var c9t=s(e7e);IEr=r(c9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c9t.forEach(t),NEr=i(Rl),cn=n(Rl,"P",{});var Vw=s(cn);qEr=r(Vw,"The model class to instantiate is selected based on the "),o7e=n(Vw,"CODE",{});var f9t=s(o7e);jEr=r(f9t,"model_type"),f9t.forEach(t),DEr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),r7e=n(Vw,"CODE",{});var m9t=s(r7e);GEr=r(m9t,"pretrained_model_name_or_path"),m9t.forEach(t),OEr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t7e=n(Vw,"CODE",{});var g9t=s(t7e);VEr=r(g9t,"pretrained_model_name_or_path"),g9t.forEach(t),XEr=r(Vw,":"),Vw.forEach(t),zEr=i(Rl),ie=n(Rl,"UL",{});var fe=s(ie);XM=n(fe,"LI",{});var rqe=s(XM);a7e=n(rqe,"STRONG",{});var h9t=s(a7e);QEr=r(h9t,"albert"),h9t.forEach(t),WEr=r(rqe," \u2014 "),fJ=n(rqe,"A",{href:!0});var p9t=s(fJ);HEr=r(p9t,"TFAlbertForMaskedLM"),p9t.forEach(t),UEr=r(rqe," (ALBERT model)"),rqe.forEach(t),JEr=i(fe),zM=n(fe,"LI",{});var tqe=s(zM);n7e=n(tqe,"STRONG",{});var _9t=s(n7e);YEr=r(_9t,"bert"),_9t.forEach(t),KEr=r(tqe," \u2014 "),mJ=n(tqe,"A",{href:!0});var u9t=s(mJ);ZEr=r(u9t,"TFBertForMaskedLM"),u9t.forEach(t),e4r=r(tqe," (BERT model)"),tqe.forEach(t),o4r=i(fe),QM=n(fe,"LI",{});var aqe=s(QM);s7e=n(aqe,"STRONG",{});var b9t=s(s7e);r4r=r(b9t,"camembert"),b9t.forEach(t),t4r=r(aqe," \u2014 "),gJ=n(aqe,"A",{href:!0});var v9t=s(gJ);a4r=r(v9t,"TFCamembertForMaskedLM"),v9t.forEach(t),n4r=r(aqe," (CamemBERT model)"),aqe.forEach(t),s4r=i(fe),WM=n(fe,"LI",{});var nqe=s(WM);l7e=n(nqe,"STRONG",{});var F9t=s(l7e);l4r=r(F9t,"convbert"),F9t.forEach(t),i4r=r(nqe," \u2014 "),hJ=n(nqe,"A",{href:!0});var T9t=s(hJ);d4r=r(T9t,"TFConvBertForMaskedLM"),T9t.forEach(t),c4r=r(nqe," (ConvBERT model)"),nqe.forEach(t),f4r=i(fe),HM=n(fe,"LI",{});var sqe=s(HM);i7e=n(sqe,"STRONG",{});var M9t=s(i7e);m4r=r(M9t,"deberta"),M9t.forEach(t),g4r=r(sqe," \u2014 "),pJ=n(sqe,"A",{href:!0});var E9t=s(pJ);h4r=r(E9t,"TFDebertaForMaskedLM"),E9t.forEach(t),p4r=r(sqe," (DeBERTa model)"),sqe.forEach(t),_4r=i(fe),UM=n(fe,"LI",{});var lqe=s(UM);d7e=n(lqe,"STRONG",{});var C9t=s(d7e);u4r=r(C9t,"deberta-v2"),C9t.forEach(t),b4r=r(lqe," \u2014 "),_J=n(lqe,"A",{href:!0});var w9t=s(_J);v4r=r(w9t,"TFDebertaV2ForMaskedLM"),w9t.forEach(t),F4r=r(lqe," (DeBERTa-v2 model)"),lqe.forEach(t),T4r=i(fe),JM=n(fe,"LI",{});var iqe=s(JM);c7e=n(iqe,"STRONG",{});var A9t=s(c7e);M4r=r(A9t,"distilbert"),A9t.forEach(t),E4r=r(iqe," \u2014 "),uJ=n(iqe,"A",{href:!0});var L9t=s(uJ);C4r=r(L9t,"TFDistilBertForMaskedLM"),L9t.forEach(t),w4r=r(iqe," (DistilBERT model)"),iqe.forEach(t),A4r=i(fe),YM=n(fe,"LI",{});var dqe=s(YM);f7e=n(dqe,"STRONG",{});var y9t=s(f7e);L4r=r(y9t,"electra"),y9t.forEach(t),y4r=r(dqe," \u2014 "),bJ=n(dqe,"A",{href:!0});var x9t=s(bJ);x4r=r(x9t,"TFElectraForMaskedLM"),x9t.forEach(t),$4r=r(dqe," (ELECTRA model)"),dqe.forEach(t),k4r=i(fe),KM=n(fe,"LI",{});var cqe=s(KM);m7e=n(cqe,"STRONG",{});var $9t=s(m7e);S4r=r($9t,"flaubert"),$9t.forEach(t),R4r=r(cqe," \u2014 "),vJ=n(cqe,"A",{href:!0});var k9t=s(vJ);P4r=r(k9t,"TFFlaubertWithLMHeadModel"),k9t.forEach(t),B4r=r(cqe," (FlauBERT model)"),cqe.forEach(t),I4r=i(fe),ZM=n(fe,"LI",{});var fqe=s(ZM);g7e=n(fqe,"STRONG",{});var S9t=s(g7e);N4r=r(S9t,"funnel"),S9t.forEach(t),q4r=r(fqe," \u2014 "),FJ=n(fqe,"A",{href:!0});var R9t=s(FJ);j4r=r(R9t,"TFFunnelForMaskedLM"),R9t.forEach(t),D4r=r(fqe," (Funnel Transformer model)"),fqe.forEach(t),G4r=i(fe),eE=n(fe,"LI",{});var mqe=s(eE);h7e=n(mqe,"STRONG",{});var P9t=s(h7e);O4r=r(P9t,"layoutlm"),P9t.forEach(t),V4r=r(mqe," \u2014 "),TJ=n(mqe,"A",{href:!0});var B9t=s(TJ);X4r=r(B9t,"TFLayoutLMForMaskedLM"),B9t.forEach(t),z4r=r(mqe," (LayoutLM model)"),mqe.forEach(t),Q4r=i(fe),oE=n(fe,"LI",{});var gqe=s(oE);p7e=n(gqe,"STRONG",{});var I9t=s(p7e);W4r=r(I9t,"longformer"),I9t.forEach(t),H4r=r(gqe," \u2014 "),MJ=n(gqe,"A",{href:!0});var N9t=s(MJ);U4r=r(N9t,"TFLongformerForMaskedLM"),N9t.forEach(t),J4r=r(gqe," (Longformer model)"),gqe.forEach(t),Y4r=i(fe),rE=n(fe,"LI",{});var hqe=s(rE);_7e=n(hqe,"STRONG",{});var q9t=s(_7e);K4r=r(q9t,"mobilebert"),q9t.forEach(t),Z4r=r(hqe," \u2014 "),EJ=n(hqe,"A",{href:!0});var j9t=s(EJ);eCr=r(j9t,"TFMobileBertForMaskedLM"),j9t.forEach(t),oCr=r(hqe," (MobileBERT model)"),hqe.forEach(t),rCr=i(fe),tE=n(fe,"LI",{});var pqe=s(tE);u7e=n(pqe,"STRONG",{});var D9t=s(u7e);tCr=r(D9t,"mpnet"),D9t.forEach(t),aCr=r(pqe," \u2014 "),CJ=n(pqe,"A",{href:!0});var G9t=s(CJ);nCr=r(G9t,"TFMPNetForMaskedLM"),G9t.forEach(t),sCr=r(pqe," (MPNet model)"),pqe.forEach(t),lCr=i(fe),aE=n(fe,"LI",{});var _qe=s(aE);b7e=n(_qe,"STRONG",{});var O9t=s(b7e);iCr=r(O9t,"rembert"),O9t.forEach(t),dCr=r(_qe," \u2014 "),wJ=n(_qe,"A",{href:!0});var V9t=s(wJ);cCr=r(V9t,"TFRemBertForMaskedLM"),V9t.forEach(t),fCr=r(_qe," (RemBERT model)"),_qe.forEach(t),mCr=i(fe),nE=n(fe,"LI",{});var uqe=s(nE);v7e=n(uqe,"STRONG",{});var X9t=s(v7e);gCr=r(X9t,"roberta"),X9t.forEach(t),hCr=r(uqe," \u2014 "),AJ=n(uqe,"A",{href:!0});var z9t=s(AJ);pCr=r(z9t,"TFRobertaForMaskedLM"),z9t.forEach(t),_Cr=r(uqe," (RoBERTa model)"),uqe.forEach(t),uCr=i(fe),sE=n(fe,"LI",{});var bqe=s(sE);F7e=n(bqe,"STRONG",{});var Q9t=s(F7e);bCr=r(Q9t,"roformer"),Q9t.forEach(t),vCr=r(bqe," \u2014 "),LJ=n(bqe,"A",{href:!0});var W9t=s(LJ);FCr=r(W9t,"TFRoFormerForMaskedLM"),W9t.forEach(t),TCr=r(bqe," (RoFormer model)"),bqe.forEach(t),MCr=i(fe),lE=n(fe,"LI",{});var vqe=s(lE);T7e=n(vqe,"STRONG",{});var H9t=s(T7e);ECr=r(H9t,"tapas"),H9t.forEach(t),CCr=r(vqe," \u2014 "),yJ=n(vqe,"A",{href:!0});var U9t=s(yJ);wCr=r(U9t,"TFTapasForMaskedLM"),U9t.forEach(t),ACr=r(vqe," (TAPAS model)"),vqe.forEach(t),LCr=i(fe),iE=n(fe,"LI",{});var Fqe=s(iE);M7e=n(Fqe,"STRONG",{});var J9t=s(M7e);yCr=r(J9t,"xlm"),J9t.forEach(t),xCr=r(Fqe," \u2014 "),xJ=n(Fqe,"A",{href:!0});var Y9t=s(xJ);$Cr=r(Y9t,"TFXLMWithLMHeadModel"),Y9t.forEach(t),kCr=r(Fqe," (XLM model)"),Fqe.forEach(t),SCr=i(fe),dE=n(fe,"LI",{});var Tqe=s(dE);E7e=n(Tqe,"STRONG",{});var K9t=s(E7e);RCr=r(K9t,"xlm-roberta"),K9t.forEach(t),PCr=r(Tqe," \u2014 "),$J=n(Tqe,"A",{href:!0});var Z9t=s($J);BCr=r(Z9t,"TFXLMRobertaForMaskedLM"),Z9t.forEach(t),ICr=r(Tqe," (XLM-RoBERTa model)"),Tqe.forEach(t),fe.forEach(t),NCr=i(Rl),T(cE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),kVe=i(f),_c=n(f,"H2",{class:!0});var jze=s(_c);fE=n(jze,"A",{id:!0,class:!0,href:!0});var ext=s(fE);C7e=n(ext,"SPAN",{});var oxt=s(C7e);T(W9.$$.fragment,oxt),oxt.forEach(t),ext.forEach(t),qCr=i(jze),w7e=n(jze,"SPAN",{});var rxt=s(w7e);jCr=r(rxt,"TFAutoModelForSeq2SeqLM"),rxt.forEach(t),jze.forEach(t),SVe=i(f),nr=n(f,"DIV",{class:!0});var Pl=s(nr);T(H9.$$.fragment,Pl),DCr=i(Pl),uc=n(Pl,"P",{});var qre=s(uc);GCr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kJ=n(qre,"A",{href:!0});var txt=s(kJ);OCr=r(txt,"from_pretrained()"),txt.forEach(t),VCr=r(qre," class method or the "),SJ=n(qre,"A",{href:!0});var axt=s(SJ);XCr=r(axt,"from_config()"),axt.forEach(t),zCr=r(qre,` class
method.`),qre.forEach(t),QCr=i(Pl),U9=n(Pl,"P",{});var Dze=s(U9);WCr=r(Dze,"This class cannot be instantiated directly using "),A7e=n(Dze,"CODE",{});var nxt=s(A7e);HCr=r(nxt,"__init__()"),nxt.forEach(t),UCr=r(Dze," (throws an error)."),Dze.forEach(t),JCr=i(Pl),Bt=n(Pl,"DIV",{class:!0});var Xw=s(Bt);T(J9.$$.fragment,Xw),YCr=i(Xw),L7e=n(Xw,"P",{});var sxt=s(L7e);KCr=r(sxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sxt.forEach(t),ZCr=i(Xw),bc=n(Xw,"P",{});var jre=s(bc);e5r=r(jre,`Note:
Loading a model from its configuration file does `),y7e=n(jre,"STRONG",{});var lxt=s(y7e);o5r=r(lxt,"not"),lxt.forEach(t),r5r=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(jre,"A",{href:!0});var ixt=s(RJ);t5r=r(ixt,"from_pretrained()"),ixt.forEach(t),a5r=r(jre," to load the model weights."),jre.forEach(t),n5r=i(Xw),T(mE.$$.fragment,Xw),Xw.forEach(t),s5r=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(Y9.$$.fragment,Bl),l5r=i(Bl),x7e=n(Bl,"P",{});var dxt=s(x7e);i5r=r(dxt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dxt.forEach(t),d5r=i(Bl),fn=n(Bl,"P",{});var zw=s(fn);c5r=r(zw,"The model class to instantiate is selected based on the "),$7e=n(zw,"CODE",{});var cxt=s($7e);f5r=r(cxt,"model_type"),cxt.forEach(t),m5r=r(zw,` property of the config object (either
passed as an argument or loaded from `),k7e=n(zw,"CODE",{});var fxt=s(k7e);g5r=r(fxt,"pretrained_model_name_or_path"),fxt.forEach(t),h5r=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=n(zw,"CODE",{});var mxt=s(S7e);p5r=r(mxt,"pretrained_model_name_or_path"),mxt.forEach(t),_5r=r(zw,":"),zw.forEach(t),u5r=i(Bl),ye=n(Bl,"UL",{});var Ie=s(ye);gE=n(Ie,"LI",{});var Mqe=s(gE);R7e=n(Mqe,"STRONG",{});var gxt=s(R7e);b5r=r(gxt,"bart"),gxt.forEach(t),v5r=r(Mqe," \u2014 "),PJ=n(Mqe,"A",{href:!0});var hxt=s(PJ);F5r=r(hxt,"TFBartForConditionalGeneration"),hxt.forEach(t),T5r=r(Mqe," (BART model)"),Mqe.forEach(t),M5r=i(Ie),hE=n(Ie,"LI",{});var Eqe=s(hE);P7e=n(Eqe,"STRONG",{});var pxt=s(P7e);E5r=r(pxt,"blenderbot"),pxt.forEach(t),C5r=r(Eqe," \u2014 "),BJ=n(Eqe,"A",{href:!0});var _xt=s(BJ);w5r=r(_xt,"TFBlenderbotForConditionalGeneration"),_xt.forEach(t),A5r=r(Eqe," (Blenderbot model)"),Eqe.forEach(t),L5r=i(Ie),pE=n(Ie,"LI",{});var Cqe=s(pE);B7e=n(Cqe,"STRONG",{});var uxt=s(B7e);y5r=r(uxt,"blenderbot-small"),uxt.forEach(t),x5r=r(Cqe," \u2014 "),IJ=n(Cqe,"A",{href:!0});var bxt=s(IJ);$5r=r(bxt,"TFBlenderbotSmallForConditionalGeneration"),bxt.forEach(t),k5r=r(Cqe," (BlenderbotSmall model)"),Cqe.forEach(t),S5r=i(Ie),_E=n(Ie,"LI",{});var wqe=s(_E);I7e=n(wqe,"STRONG",{});var vxt=s(I7e);R5r=r(vxt,"encoder-decoder"),vxt.forEach(t),P5r=r(wqe," \u2014 "),NJ=n(wqe,"A",{href:!0});var Fxt=s(NJ);B5r=r(Fxt,"TFEncoderDecoderModel"),Fxt.forEach(t),I5r=r(wqe," (Encoder decoder model)"),wqe.forEach(t),N5r=i(Ie),uE=n(Ie,"LI",{});var Aqe=s(uE);N7e=n(Aqe,"STRONG",{});var Txt=s(N7e);q5r=r(Txt,"led"),Txt.forEach(t),j5r=r(Aqe," \u2014 "),qJ=n(Aqe,"A",{href:!0});var Mxt=s(qJ);D5r=r(Mxt,"TFLEDForConditionalGeneration"),Mxt.forEach(t),G5r=r(Aqe," (LED model)"),Aqe.forEach(t),O5r=i(Ie),bE=n(Ie,"LI",{});var Lqe=s(bE);q7e=n(Lqe,"STRONG",{});var Ext=s(q7e);V5r=r(Ext,"marian"),Ext.forEach(t),X5r=r(Lqe," \u2014 "),jJ=n(Lqe,"A",{href:!0});var Cxt=s(jJ);z5r=r(Cxt,"TFMarianMTModel"),Cxt.forEach(t),Q5r=r(Lqe," (Marian model)"),Lqe.forEach(t),W5r=i(Ie),vE=n(Ie,"LI",{});var yqe=s(vE);j7e=n(yqe,"STRONG",{});var wxt=s(j7e);H5r=r(wxt,"mbart"),wxt.forEach(t),U5r=r(yqe," \u2014 "),DJ=n(yqe,"A",{href:!0});var Axt=s(DJ);J5r=r(Axt,"TFMBartForConditionalGeneration"),Axt.forEach(t),Y5r=r(yqe," (mBART model)"),yqe.forEach(t),K5r=i(Ie),FE=n(Ie,"LI",{});var xqe=s(FE);D7e=n(xqe,"STRONG",{});var Lxt=s(D7e);Z5r=r(Lxt,"mt5"),Lxt.forEach(t),e3r=r(xqe," \u2014 "),GJ=n(xqe,"A",{href:!0});var yxt=s(GJ);o3r=r(yxt,"TFMT5ForConditionalGeneration"),yxt.forEach(t),r3r=r(xqe," (MT5 model)"),xqe.forEach(t),t3r=i(Ie),TE=n(Ie,"LI",{});var $qe=s(TE);G7e=n($qe,"STRONG",{});var xxt=s(G7e);a3r=r(xxt,"pegasus"),xxt.forEach(t),n3r=r($qe," \u2014 "),OJ=n($qe,"A",{href:!0});var $xt=s(OJ);s3r=r($xt,"TFPegasusForConditionalGeneration"),$xt.forEach(t),l3r=r($qe," (Pegasus model)"),$qe.forEach(t),i3r=i(Ie),ME=n(Ie,"LI",{});var kqe=s(ME);O7e=n(kqe,"STRONG",{});var kxt=s(O7e);d3r=r(kxt,"t5"),kxt.forEach(t),c3r=r(kqe," \u2014 "),VJ=n(kqe,"A",{href:!0});var Sxt=s(VJ);f3r=r(Sxt,"TFT5ForConditionalGeneration"),Sxt.forEach(t),m3r=r(kqe," (T5 model)"),kqe.forEach(t),Ie.forEach(t),g3r=i(Bl),T(EE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),RVe=i(f),vc=n(f,"H2",{class:!0});var Gze=s(vc);CE=n(Gze,"A",{id:!0,class:!0,href:!0});var Rxt=s(CE);V7e=n(Rxt,"SPAN",{});var Pxt=s(V7e);T(K9.$$.fragment,Pxt),Pxt.forEach(t),Rxt.forEach(t),h3r=i(Gze),X7e=n(Gze,"SPAN",{});var Bxt=s(X7e);p3r=r(Bxt,"TFAutoModelForSequenceClassification"),Bxt.forEach(t),Gze.forEach(t),PVe=i(f),sr=n(f,"DIV",{class:!0});var Il=s(sr);T(Z9.$$.fragment,Il),_3r=i(Il),Fc=n(Il,"P",{});var Dre=s(Fc);u3r=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XJ=n(Dre,"A",{href:!0});var Ixt=s(XJ);b3r=r(Ixt,"from_pretrained()"),Ixt.forEach(t),v3r=r(Dre," class method or the "),zJ=n(Dre,"A",{href:!0});var Nxt=s(zJ);F3r=r(Nxt,"from_config()"),Nxt.forEach(t),T3r=r(Dre,` class
method.`),Dre.forEach(t),M3r=i(Il),ex=n(Il,"P",{});var Oze=s(ex);E3r=r(Oze,"This class cannot be instantiated directly using "),z7e=n(Oze,"CODE",{});var qxt=s(z7e);C3r=r(qxt,"__init__()"),qxt.forEach(t),w3r=r(Oze," (throws an error)."),Oze.forEach(t),A3r=i(Il),It=n(Il,"DIV",{class:!0});var Qw=s(It);T(ox.$$.fragment,Qw),L3r=i(Qw),Q7e=n(Qw,"P",{});var jxt=s(Q7e);y3r=r(jxt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jxt.forEach(t),x3r=i(Qw),Tc=n(Qw,"P",{});var Gre=s(Tc);$3r=r(Gre,`Note:
Loading a model from its configuration file does `),W7e=n(Gre,"STRONG",{});var Dxt=s(W7e);k3r=r(Dxt,"not"),Dxt.forEach(t),S3r=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Gre,"A",{href:!0});var Gxt=s(QJ);R3r=r(Gxt,"from_pretrained()"),Gxt.forEach(t),P3r=r(Gre," to load the model weights."),Gre.forEach(t),B3r=i(Qw),T(wE.$$.fragment,Qw),Qw.forEach(t),I3r=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(rx.$$.fragment,Nl),N3r=i(Nl),H7e=n(Nl,"P",{});var Oxt=s(H7e);q3r=r(Oxt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Oxt.forEach(t),j3r=i(Nl),mn=n(Nl,"P",{});var Ww=s(mn);D3r=r(Ww,"The model class to instantiate is selected based on the "),U7e=n(Ww,"CODE",{});var Vxt=s(U7e);G3r=r(Vxt,"model_type"),Vxt.forEach(t),O3r=r(Ww,` property of the config object (either
passed as an argument or loaded from `),J7e=n(Ww,"CODE",{});var Xxt=s(J7e);V3r=r(Xxt,"pretrained_model_name_or_path"),Xxt.forEach(t),X3r=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=n(Ww,"CODE",{});var zxt=s(Y7e);z3r=r(zxt,"pretrained_model_name_or_path"),zxt.forEach(t),Q3r=r(Ww,":"),Ww.forEach(t),W3r=i(Nl),te=n(Nl,"UL",{});var ne=s(te);AE=n(ne,"LI",{});var Sqe=s(AE);K7e=n(Sqe,"STRONG",{});var Qxt=s(K7e);H3r=r(Qxt,"albert"),Qxt.forEach(t),U3r=r(Sqe," \u2014 "),WJ=n(Sqe,"A",{href:!0});var Wxt=s(WJ);J3r=r(Wxt,"TFAlbertForSequenceClassification"),Wxt.forEach(t),Y3r=r(Sqe," (ALBERT model)"),Sqe.forEach(t),K3r=i(ne),LE=n(ne,"LI",{});var Rqe=s(LE);Z7e=n(Rqe,"STRONG",{});var Hxt=s(Z7e);Z3r=r(Hxt,"bert"),Hxt.forEach(t),e0r=r(Rqe," \u2014 "),HJ=n(Rqe,"A",{href:!0});var Uxt=s(HJ);o0r=r(Uxt,"TFBertForSequenceClassification"),Uxt.forEach(t),r0r=r(Rqe," (BERT model)"),Rqe.forEach(t),t0r=i(ne),yE=n(ne,"LI",{});var Pqe=s(yE);e8e=n(Pqe,"STRONG",{});var Jxt=s(e8e);a0r=r(Jxt,"camembert"),Jxt.forEach(t),n0r=r(Pqe," \u2014 "),UJ=n(Pqe,"A",{href:!0});var Yxt=s(UJ);s0r=r(Yxt,"TFCamembertForSequenceClassification"),Yxt.forEach(t),l0r=r(Pqe," (CamemBERT model)"),Pqe.forEach(t),i0r=i(ne),xE=n(ne,"LI",{});var Bqe=s(xE);o8e=n(Bqe,"STRONG",{});var Kxt=s(o8e);d0r=r(Kxt,"convbert"),Kxt.forEach(t),c0r=r(Bqe," \u2014 "),JJ=n(Bqe,"A",{href:!0});var Zxt=s(JJ);f0r=r(Zxt,"TFConvBertForSequenceClassification"),Zxt.forEach(t),m0r=r(Bqe," (ConvBERT model)"),Bqe.forEach(t),g0r=i(ne),$E=n(ne,"LI",{});var Iqe=s($E);r8e=n(Iqe,"STRONG",{});var e$t=s(r8e);h0r=r(e$t,"ctrl"),e$t.forEach(t),p0r=r(Iqe," \u2014 "),YJ=n(Iqe,"A",{href:!0});var o$t=s(YJ);_0r=r(o$t,"TFCTRLForSequenceClassification"),o$t.forEach(t),u0r=r(Iqe," (CTRL model)"),Iqe.forEach(t),b0r=i(ne),kE=n(ne,"LI",{});var Nqe=s(kE);t8e=n(Nqe,"STRONG",{});var r$t=s(t8e);v0r=r(r$t,"deberta"),r$t.forEach(t),F0r=r(Nqe," \u2014 "),KJ=n(Nqe,"A",{href:!0});var t$t=s(KJ);T0r=r(t$t,"TFDebertaForSequenceClassification"),t$t.forEach(t),M0r=r(Nqe," (DeBERTa model)"),Nqe.forEach(t),E0r=i(ne),SE=n(ne,"LI",{});var qqe=s(SE);a8e=n(qqe,"STRONG",{});var a$t=s(a8e);C0r=r(a$t,"deberta-v2"),a$t.forEach(t),w0r=r(qqe," \u2014 "),ZJ=n(qqe,"A",{href:!0});var n$t=s(ZJ);A0r=r(n$t,"TFDebertaV2ForSequenceClassification"),n$t.forEach(t),L0r=r(qqe," (DeBERTa-v2 model)"),qqe.forEach(t),y0r=i(ne),RE=n(ne,"LI",{});var jqe=s(RE);n8e=n(jqe,"STRONG",{});var s$t=s(n8e);x0r=r(s$t,"distilbert"),s$t.forEach(t),$0r=r(jqe," \u2014 "),eY=n(jqe,"A",{href:!0});var l$t=s(eY);k0r=r(l$t,"TFDistilBertForSequenceClassification"),l$t.forEach(t),S0r=r(jqe," (DistilBERT model)"),jqe.forEach(t),R0r=i(ne),PE=n(ne,"LI",{});var Dqe=s(PE);s8e=n(Dqe,"STRONG",{});var i$t=s(s8e);P0r=r(i$t,"electra"),i$t.forEach(t),B0r=r(Dqe," \u2014 "),oY=n(Dqe,"A",{href:!0});var d$t=s(oY);I0r=r(d$t,"TFElectraForSequenceClassification"),d$t.forEach(t),N0r=r(Dqe," (ELECTRA model)"),Dqe.forEach(t),q0r=i(ne),BE=n(ne,"LI",{});var Gqe=s(BE);l8e=n(Gqe,"STRONG",{});var c$t=s(l8e);j0r=r(c$t,"flaubert"),c$t.forEach(t),D0r=r(Gqe," \u2014 "),rY=n(Gqe,"A",{href:!0});var f$t=s(rY);G0r=r(f$t,"TFFlaubertForSequenceClassification"),f$t.forEach(t),O0r=r(Gqe," (FlauBERT model)"),Gqe.forEach(t),V0r=i(ne),IE=n(ne,"LI",{});var Oqe=s(IE);i8e=n(Oqe,"STRONG",{});var m$t=s(i8e);X0r=r(m$t,"funnel"),m$t.forEach(t),z0r=r(Oqe," \u2014 "),tY=n(Oqe,"A",{href:!0});var g$t=s(tY);Q0r=r(g$t,"TFFunnelForSequenceClassification"),g$t.forEach(t),W0r=r(Oqe," (Funnel Transformer model)"),Oqe.forEach(t),H0r=i(ne),NE=n(ne,"LI",{});var Vqe=s(NE);d8e=n(Vqe,"STRONG",{});var h$t=s(d8e);U0r=r(h$t,"gpt2"),h$t.forEach(t),J0r=r(Vqe," \u2014 "),aY=n(Vqe,"A",{href:!0});var p$t=s(aY);Y0r=r(p$t,"TFGPT2ForSequenceClassification"),p$t.forEach(t),K0r=r(Vqe," (OpenAI GPT-2 model)"),Vqe.forEach(t),Z0r=i(ne),qE=n(ne,"LI",{});var Xqe=s(qE);c8e=n(Xqe,"STRONG",{});var _$t=s(c8e);ewr=r(_$t,"gptj"),_$t.forEach(t),owr=r(Xqe," \u2014 "),nY=n(Xqe,"A",{href:!0});var u$t=s(nY);rwr=r(u$t,"TFGPTJForSequenceClassification"),u$t.forEach(t),twr=r(Xqe," (GPT-J model)"),Xqe.forEach(t),awr=i(ne),jE=n(ne,"LI",{});var zqe=s(jE);f8e=n(zqe,"STRONG",{});var b$t=s(f8e);nwr=r(b$t,"layoutlm"),b$t.forEach(t),swr=r(zqe," \u2014 "),sY=n(zqe,"A",{href:!0});var v$t=s(sY);lwr=r(v$t,"TFLayoutLMForSequenceClassification"),v$t.forEach(t),iwr=r(zqe," (LayoutLM model)"),zqe.forEach(t),dwr=i(ne),DE=n(ne,"LI",{});var Qqe=s(DE);m8e=n(Qqe,"STRONG",{});var F$t=s(m8e);cwr=r(F$t,"longformer"),F$t.forEach(t),fwr=r(Qqe," \u2014 "),lY=n(Qqe,"A",{href:!0});var T$t=s(lY);mwr=r(T$t,"TFLongformerForSequenceClassification"),T$t.forEach(t),gwr=r(Qqe," (Longformer model)"),Qqe.forEach(t),hwr=i(ne),GE=n(ne,"LI",{});var Wqe=s(GE);g8e=n(Wqe,"STRONG",{});var M$t=s(g8e);pwr=r(M$t,"mobilebert"),M$t.forEach(t),_wr=r(Wqe," \u2014 "),iY=n(Wqe,"A",{href:!0});var E$t=s(iY);uwr=r(E$t,"TFMobileBertForSequenceClassification"),E$t.forEach(t),bwr=r(Wqe," (MobileBERT model)"),Wqe.forEach(t),vwr=i(ne),OE=n(ne,"LI",{});var Hqe=s(OE);h8e=n(Hqe,"STRONG",{});var C$t=s(h8e);Fwr=r(C$t,"mpnet"),C$t.forEach(t),Twr=r(Hqe," \u2014 "),dY=n(Hqe,"A",{href:!0});var w$t=s(dY);Mwr=r(w$t,"TFMPNetForSequenceClassification"),w$t.forEach(t),Ewr=r(Hqe," (MPNet model)"),Hqe.forEach(t),Cwr=i(ne),VE=n(ne,"LI",{});var Uqe=s(VE);p8e=n(Uqe,"STRONG",{});var A$t=s(p8e);wwr=r(A$t,"openai-gpt"),A$t.forEach(t),Awr=r(Uqe," \u2014 "),cY=n(Uqe,"A",{href:!0});var L$t=s(cY);Lwr=r(L$t,"TFOpenAIGPTForSequenceClassification"),L$t.forEach(t),ywr=r(Uqe," (OpenAI GPT model)"),Uqe.forEach(t),xwr=i(ne),XE=n(ne,"LI",{});var Jqe=s(XE);_8e=n(Jqe,"STRONG",{});var y$t=s(_8e);$wr=r(y$t,"rembert"),y$t.forEach(t),kwr=r(Jqe," \u2014 "),fY=n(Jqe,"A",{href:!0});var x$t=s(fY);Swr=r(x$t,"TFRemBertForSequenceClassification"),x$t.forEach(t),Rwr=r(Jqe," (RemBERT model)"),Jqe.forEach(t),Pwr=i(ne),zE=n(ne,"LI",{});var Yqe=s(zE);u8e=n(Yqe,"STRONG",{});var $$t=s(u8e);Bwr=r($$t,"roberta"),$$t.forEach(t),Iwr=r(Yqe," \u2014 "),mY=n(Yqe,"A",{href:!0});var k$t=s(mY);Nwr=r(k$t,"TFRobertaForSequenceClassification"),k$t.forEach(t),qwr=r(Yqe," (RoBERTa model)"),Yqe.forEach(t),jwr=i(ne),QE=n(ne,"LI",{});var Kqe=s(QE);b8e=n(Kqe,"STRONG",{});var S$t=s(b8e);Dwr=r(S$t,"roformer"),S$t.forEach(t),Gwr=r(Kqe," \u2014 "),gY=n(Kqe,"A",{href:!0});var R$t=s(gY);Owr=r(R$t,"TFRoFormerForSequenceClassification"),R$t.forEach(t),Vwr=r(Kqe," (RoFormer model)"),Kqe.forEach(t),Xwr=i(ne),WE=n(ne,"LI",{});var Zqe=s(WE);v8e=n(Zqe,"STRONG",{});var P$t=s(v8e);zwr=r(P$t,"tapas"),P$t.forEach(t),Qwr=r(Zqe," \u2014 "),hY=n(Zqe,"A",{href:!0});var B$t=s(hY);Wwr=r(B$t,"TFTapasForSequenceClassification"),B$t.forEach(t),Hwr=r(Zqe," (TAPAS model)"),Zqe.forEach(t),Uwr=i(ne),HE=n(ne,"LI",{});var eje=s(HE);F8e=n(eje,"STRONG",{});var I$t=s(F8e);Jwr=r(I$t,"transfo-xl"),I$t.forEach(t),Ywr=r(eje," \u2014 "),pY=n(eje,"A",{href:!0});var N$t=s(pY);Kwr=r(N$t,"TFTransfoXLForSequenceClassification"),N$t.forEach(t),Zwr=r(eje," (Transformer-XL model)"),eje.forEach(t),eAr=i(ne),UE=n(ne,"LI",{});var oje=s(UE);T8e=n(oje,"STRONG",{});var q$t=s(T8e);oAr=r(q$t,"xlm"),q$t.forEach(t),rAr=r(oje," \u2014 "),_Y=n(oje,"A",{href:!0});var j$t=s(_Y);tAr=r(j$t,"TFXLMForSequenceClassification"),j$t.forEach(t),aAr=r(oje," (XLM model)"),oje.forEach(t),nAr=i(ne),JE=n(ne,"LI",{});var rje=s(JE);M8e=n(rje,"STRONG",{});var D$t=s(M8e);sAr=r(D$t,"xlm-roberta"),D$t.forEach(t),lAr=r(rje," \u2014 "),uY=n(rje,"A",{href:!0});var G$t=s(uY);iAr=r(G$t,"TFXLMRobertaForSequenceClassification"),G$t.forEach(t),dAr=r(rje," (XLM-RoBERTa model)"),rje.forEach(t),cAr=i(ne),YE=n(ne,"LI",{});var tje=s(YE);E8e=n(tje,"STRONG",{});var O$t=s(E8e);fAr=r(O$t,"xlnet"),O$t.forEach(t),mAr=r(tje," \u2014 "),bY=n(tje,"A",{href:!0});var V$t=s(bY);gAr=r(V$t,"TFXLNetForSequenceClassification"),V$t.forEach(t),hAr=r(tje," (XLNet model)"),tje.forEach(t),ne.forEach(t),pAr=i(Nl),T(KE.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),BVe=i(f),Mc=n(f,"H2",{class:!0});var Vze=s(Mc);ZE=n(Vze,"A",{id:!0,class:!0,href:!0});var X$t=s(ZE);C8e=n(X$t,"SPAN",{});var z$t=s(C8e);T(tx.$$.fragment,z$t),z$t.forEach(t),X$t.forEach(t),_Ar=i(Vze),w8e=n(Vze,"SPAN",{});var Q$t=s(w8e);uAr=r(Q$t,"TFAutoModelForMultipleChoice"),Q$t.forEach(t),Vze.forEach(t),IVe=i(f),lr=n(f,"DIV",{class:!0});var ql=s(lr);T(ax.$$.fragment,ql),bAr=i(ql),Ec=n(ql,"P",{});var Ore=s(Ec);vAr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vY=n(Ore,"A",{href:!0});var W$t=s(vY);FAr=r(W$t,"from_pretrained()"),W$t.forEach(t),TAr=r(Ore," class method or the "),FY=n(Ore,"A",{href:!0});var H$t=s(FY);MAr=r(H$t,"from_config()"),H$t.forEach(t),EAr=r(Ore,` class
method.`),Ore.forEach(t),CAr=i(ql),nx=n(ql,"P",{});var Xze=s(nx);wAr=r(Xze,"This class cannot be instantiated directly using "),A8e=n(Xze,"CODE",{});var U$t=s(A8e);AAr=r(U$t,"__init__()"),U$t.forEach(t),LAr=r(Xze," (throws an error)."),Xze.forEach(t),yAr=i(ql),Nt=n(ql,"DIV",{class:!0});var Hw=s(Nt);T(sx.$$.fragment,Hw),xAr=i(Hw),L8e=n(Hw,"P",{});var J$t=s(L8e);$Ar=r(J$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),J$t.forEach(t),kAr=i(Hw),Cc=n(Hw,"P",{});var Vre=s(Cc);SAr=r(Vre,`Note:
Loading a model from its configuration file does `),y8e=n(Vre,"STRONG",{});var Y$t=s(y8e);RAr=r(Y$t,"not"),Y$t.forEach(t),PAr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(Vre,"A",{href:!0});var K$t=s(TY);BAr=r(K$t,"from_pretrained()"),K$t.forEach(t),IAr=r(Vre," to load the model weights."),Vre.forEach(t),NAr=i(Hw),T(e4.$$.fragment,Hw),Hw.forEach(t),qAr=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(lx.$$.fragment,jl),jAr=i(jl),x8e=n(jl,"P",{});var Z$t=s(x8e);DAr=r(Z$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z$t.forEach(t),GAr=i(jl),gn=n(jl,"P",{});var Uw=s(gn);OAr=r(Uw,"The model class to instantiate is selected based on the "),$8e=n(Uw,"CODE",{});var ekt=s($8e);VAr=r(ekt,"model_type"),ekt.forEach(t),XAr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),k8e=n(Uw,"CODE",{});var okt=s(k8e);zAr=r(okt,"pretrained_model_name_or_path"),okt.forEach(t),QAr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S8e=n(Uw,"CODE",{});var rkt=s(S8e);WAr=r(rkt,"pretrained_model_name_or_path"),rkt.forEach(t),HAr=r(Uw,":"),Uw.forEach(t),UAr=i(jl),_e=n(jl,"UL",{});var ve=s(_e);o4=n(ve,"LI",{});var aje=s(o4);R8e=n(aje,"STRONG",{});var tkt=s(R8e);JAr=r(tkt,"albert"),tkt.forEach(t),YAr=r(aje," \u2014 "),MY=n(aje,"A",{href:!0});var akt=s(MY);KAr=r(akt,"TFAlbertForMultipleChoice"),akt.forEach(t),ZAr=r(aje," (ALBERT model)"),aje.forEach(t),eLr=i(ve),r4=n(ve,"LI",{});var nje=s(r4);P8e=n(nje,"STRONG",{});var nkt=s(P8e);oLr=r(nkt,"bert"),nkt.forEach(t),rLr=r(nje," \u2014 "),EY=n(nje,"A",{href:!0});var skt=s(EY);tLr=r(skt,"TFBertForMultipleChoice"),skt.forEach(t),aLr=r(nje," (BERT model)"),nje.forEach(t),nLr=i(ve),t4=n(ve,"LI",{});var sje=s(t4);B8e=n(sje,"STRONG",{});var lkt=s(B8e);sLr=r(lkt,"camembert"),lkt.forEach(t),lLr=r(sje," \u2014 "),CY=n(sje,"A",{href:!0});var ikt=s(CY);iLr=r(ikt,"TFCamembertForMultipleChoice"),ikt.forEach(t),dLr=r(sje," (CamemBERT model)"),sje.forEach(t),cLr=i(ve),a4=n(ve,"LI",{});var lje=s(a4);I8e=n(lje,"STRONG",{});var dkt=s(I8e);fLr=r(dkt,"convbert"),dkt.forEach(t),mLr=r(lje," \u2014 "),wY=n(lje,"A",{href:!0});var ckt=s(wY);gLr=r(ckt,"TFConvBertForMultipleChoice"),ckt.forEach(t),hLr=r(lje," (ConvBERT model)"),lje.forEach(t),pLr=i(ve),n4=n(ve,"LI",{});var ije=s(n4);N8e=n(ije,"STRONG",{});var fkt=s(N8e);_Lr=r(fkt,"distilbert"),fkt.forEach(t),uLr=r(ije," \u2014 "),AY=n(ije,"A",{href:!0});var mkt=s(AY);bLr=r(mkt,"TFDistilBertForMultipleChoice"),mkt.forEach(t),vLr=r(ije," (DistilBERT model)"),ije.forEach(t),FLr=i(ve),s4=n(ve,"LI",{});var dje=s(s4);q8e=n(dje,"STRONG",{});var gkt=s(q8e);TLr=r(gkt,"electra"),gkt.forEach(t),MLr=r(dje," \u2014 "),LY=n(dje,"A",{href:!0});var hkt=s(LY);ELr=r(hkt,"TFElectraForMultipleChoice"),hkt.forEach(t),CLr=r(dje," (ELECTRA model)"),dje.forEach(t),wLr=i(ve),l4=n(ve,"LI",{});var cje=s(l4);j8e=n(cje,"STRONG",{});var pkt=s(j8e);ALr=r(pkt,"flaubert"),pkt.forEach(t),LLr=r(cje," \u2014 "),yY=n(cje,"A",{href:!0});var _kt=s(yY);yLr=r(_kt,"TFFlaubertForMultipleChoice"),_kt.forEach(t),xLr=r(cje," (FlauBERT model)"),cje.forEach(t),$Lr=i(ve),i4=n(ve,"LI",{});var fje=s(i4);D8e=n(fje,"STRONG",{});var ukt=s(D8e);kLr=r(ukt,"funnel"),ukt.forEach(t),SLr=r(fje," \u2014 "),xY=n(fje,"A",{href:!0});var bkt=s(xY);RLr=r(bkt,"TFFunnelForMultipleChoice"),bkt.forEach(t),PLr=r(fje," (Funnel Transformer model)"),fje.forEach(t),BLr=i(ve),d4=n(ve,"LI",{});var mje=s(d4);G8e=n(mje,"STRONG",{});var vkt=s(G8e);ILr=r(vkt,"longformer"),vkt.forEach(t),NLr=r(mje," \u2014 "),$Y=n(mje,"A",{href:!0});var Fkt=s($Y);qLr=r(Fkt,"TFLongformerForMultipleChoice"),Fkt.forEach(t),jLr=r(mje," (Longformer model)"),mje.forEach(t),DLr=i(ve),c4=n(ve,"LI",{});var gje=s(c4);O8e=n(gje,"STRONG",{});var Tkt=s(O8e);GLr=r(Tkt,"mobilebert"),Tkt.forEach(t),OLr=r(gje," \u2014 "),kY=n(gje,"A",{href:!0});var Mkt=s(kY);VLr=r(Mkt,"TFMobileBertForMultipleChoice"),Mkt.forEach(t),XLr=r(gje," (MobileBERT model)"),gje.forEach(t),zLr=i(ve),f4=n(ve,"LI",{});var hje=s(f4);V8e=n(hje,"STRONG",{});var Ekt=s(V8e);QLr=r(Ekt,"mpnet"),Ekt.forEach(t),WLr=r(hje," \u2014 "),SY=n(hje,"A",{href:!0});var Ckt=s(SY);HLr=r(Ckt,"TFMPNetForMultipleChoice"),Ckt.forEach(t),ULr=r(hje," (MPNet model)"),hje.forEach(t),JLr=i(ve),m4=n(ve,"LI",{});var pje=s(m4);X8e=n(pje,"STRONG",{});var wkt=s(X8e);YLr=r(wkt,"rembert"),wkt.forEach(t),KLr=r(pje," \u2014 "),RY=n(pje,"A",{href:!0});var Akt=s(RY);ZLr=r(Akt,"TFRemBertForMultipleChoice"),Akt.forEach(t),eyr=r(pje," (RemBERT model)"),pje.forEach(t),oyr=i(ve),g4=n(ve,"LI",{});var _je=s(g4);z8e=n(_je,"STRONG",{});var Lkt=s(z8e);ryr=r(Lkt,"roberta"),Lkt.forEach(t),tyr=r(_je," \u2014 "),PY=n(_je,"A",{href:!0});var ykt=s(PY);ayr=r(ykt,"TFRobertaForMultipleChoice"),ykt.forEach(t),nyr=r(_je," (RoBERTa model)"),_je.forEach(t),syr=i(ve),h4=n(ve,"LI",{});var uje=s(h4);Q8e=n(uje,"STRONG",{});var xkt=s(Q8e);lyr=r(xkt,"roformer"),xkt.forEach(t),iyr=r(uje," \u2014 "),BY=n(uje,"A",{href:!0});var $kt=s(BY);dyr=r($kt,"TFRoFormerForMultipleChoice"),$kt.forEach(t),cyr=r(uje," (RoFormer model)"),uje.forEach(t),fyr=i(ve),p4=n(ve,"LI",{});var bje=s(p4);W8e=n(bje,"STRONG",{});var kkt=s(W8e);myr=r(kkt,"xlm"),kkt.forEach(t),gyr=r(bje," \u2014 "),IY=n(bje,"A",{href:!0});var Skt=s(IY);hyr=r(Skt,"TFXLMForMultipleChoice"),Skt.forEach(t),pyr=r(bje," (XLM model)"),bje.forEach(t),_yr=i(ve),_4=n(ve,"LI",{});var vje=s(_4);H8e=n(vje,"STRONG",{});var Rkt=s(H8e);uyr=r(Rkt,"xlm-roberta"),Rkt.forEach(t),byr=r(vje," \u2014 "),NY=n(vje,"A",{href:!0});var Pkt=s(NY);vyr=r(Pkt,"TFXLMRobertaForMultipleChoice"),Pkt.forEach(t),Fyr=r(vje," (XLM-RoBERTa model)"),vje.forEach(t),Tyr=i(ve),u4=n(ve,"LI",{});var Fje=s(u4);U8e=n(Fje,"STRONG",{});var Bkt=s(U8e);Myr=r(Bkt,"xlnet"),Bkt.forEach(t),Eyr=r(Fje," \u2014 "),qY=n(Fje,"A",{href:!0});var Ikt=s(qY);Cyr=r(Ikt,"TFXLNetForMultipleChoice"),Ikt.forEach(t),wyr=r(Fje," (XLNet model)"),Fje.forEach(t),ve.forEach(t),Ayr=i(jl),T(b4.$$.fragment,jl),jl.forEach(t),ql.forEach(t),NVe=i(f),wc=n(f,"H2",{class:!0});var zze=s(wc);v4=n(zze,"A",{id:!0,class:!0,href:!0});var Nkt=s(v4);J8e=n(Nkt,"SPAN",{});var qkt=s(J8e);T(ix.$$.fragment,qkt),qkt.forEach(t),Nkt.forEach(t),Lyr=i(zze),Y8e=n(zze,"SPAN",{});var jkt=s(Y8e);yyr=r(jkt,"TFAutoModelForNextSentencePrediction"),jkt.forEach(t),zze.forEach(t),qVe=i(f),ir=n(f,"DIV",{class:!0});var Dl=s(ir);T(dx.$$.fragment,Dl),xyr=i(Dl),Ac=n(Dl,"P",{});var Xre=s(Ac);$yr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jY=n(Xre,"A",{href:!0});var Dkt=s(jY);kyr=r(Dkt,"from_pretrained()"),Dkt.forEach(t),Syr=r(Xre," class method or the "),DY=n(Xre,"A",{href:!0});var Gkt=s(DY);Ryr=r(Gkt,"from_config()"),Gkt.forEach(t),Pyr=r(Xre,` class
method.`),Xre.forEach(t),Byr=i(Dl),cx=n(Dl,"P",{});var Qze=s(cx);Iyr=r(Qze,"This class cannot be instantiated directly using "),K8e=n(Qze,"CODE",{});var Okt=s(K8e);Nyr=r(Okt,"__init__()"),Okt.forEach(t),qyr=r(Qze," (throws an error)."),Qze.forEach(t),jyr=i(Dl),qt=n(Dl,"DIV",{class:!0});var Jw=s(qt);T(fx.$$.fragment,Jw),Dyr=i(Jw),Z8e=n(Jw,"P",{});var Vkt=s(Z8e);Gyr=r(Vkt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Vkt.forEach(t),Oyr=i(Jw),Lc=n(Jw,"P",{});var zre=s(Lc);Vyr=r(zre,`Note:
Loading a model from its configuration file does `),eMe=n(zre,"STRONG",{});var Xkt=s(eMe);Xyr=r(Xkt,"not"),Xkt.forEach(t),zyr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(zre,"A",{href:!0});var zkt=s(GY);Qyr=r(zkt,"from_pretrained()"),zkt.forEach(t),Wyr=r(zre," to load the model weights."),zre.forEach(t),Hyr=i(Jw),T(F4.$$.fragment,Jw),Jw.forEach(t),Uyr=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(mx.$$.fragment,Gl),Jyr=i(Gl),oMe=n(Gl,"P",{});var Qkt=s(oMe);Yyr=r(Qkt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Qkt.forEach(t),Kyr=i(Gl),hn=n(Gl,"P",{});var Yw=s(hn);Zyr=r(Yw,"The model class to instantiate is selected based on the "),rMe=n(Yw,"CODE",{});var Wkt=s(rMe);e9r=r(Wkt,"model_type"),Wkt.forEach(t),o9r=r(Yw,` property of the config object (either
passed as an argument or loaded from `),tMe=n(Yw,"CODE",{});var Hkt=s(tMe);r9r=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),t9r=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=n(Yw,"CODE",{});var Ukt=s(aMe);a9r=r(Ukt,"pretrained_model_name_or_path"),Ukt.forEach(t),n9r=r(Yw,":"),Yw.forEach(t),s9r=i(Gl),gx=n(Gl,"UL",{});var Wze=s(gx);T4=n(Wze,"LI",{});var Tje=s(T4);nMe=n(Tje,"STRONG",{});var Jkt=s(nMe);l9r=r(Jkt,"bert"),Jkt.forEach(t),i9r=r(Tje," \u2014 "),OY=n(Tje,"A",{href:!0});var Ykt=s(OY);d9r=r(Ykt,"TFBertForNextSentencePrediction"),Ykt.forEach(t),c9r=r(Tje," (BERT model)"),Tje.forEach(t),f9r=i(Wze),M4=n(Wze,"LI",{});var Mje=s(M4);sMe=n(Mje,"STRONG",{});var Kkt=s(sMe);m9r=r(Kkt,"mobilebert"),Kkt.forEach(t),g9r=r(Mje," \u2014 "),VY=n(Mje,"A",{href:!0});var Zkt=s(VY);h9r=r(Zkt,"TFMobileBertForNextSentencePrediction"),Zkt.forEach(t),p9r=r(Mje," (MobileBERT model)"),Mje.forEach(t),Wze.forEach(t),_9r=i(Gl),T(E4.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),jVe=i(f),yc=n(f,"H2",{class:!0});var Hze=s(yc);C4=n(Hze,"A",{id:!0,class:!0,href:!0});var eSt=s(C4);lMe=n(eSt,"SPAN",{});var oSt=s(lMe);T(hx.$$.fragment,oSt),oSt.forEach(t),eSt.forEach(t),u9r=i(Hze),iMe=n(Hze,"SPAN",{});var rSt=s(iMe);b9r=r(rSt,"TFAutoModelForTableQuestionAnswering"),rSt.forEach(t),Hze.forEach(t),DVe=i(f),dr=n(f,"DIV",{class:!0});var Ol=s(dr);T(px.$$.fragment,Ol),v9r=i(Ol),xc=n(Ol,"P",{});var Qre=s(xc);F9r=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XY=n(Qre,"A",{href:!0});var tSt=s(XY);T9r=r(tSt,"from_pretrained()"),tSt.forEach(t),M9r=r(Qre," class method or the "),zY=n(Qre,"A",{href:!0});var aSt=s(zY);E9r=r(aSt,"from_config()"),aSt.forEach(t),C9r=r(Qre,` class
method.`),Qre.forEach(t),w9r=i(Ol),_x=n(Ol,"P",{});var Uze=s(_x);A9r=r(Uze,"This class cannot be instantiated directly using "),dMe=n(Uze,"CODE",{});var nSt=s(dMe);L9r=r(nSt,"__init__()"),nSt.forEach(t),y9r=r(Uze," (throws an error)."),Uze.forEach(t),x9r=i(Ol),jt=n(Ol,"DIV",{class:!0});var Kw=s(jt);T(ux.$$.fragment,Kw),$9r=i(Kw),cMe=n(Kw,"P",{});var sSt=s(cMe);k9r=r(sSt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sSt.forEach(t),S9r=i(Kw),$c=n(Kw,"P",{});var Wre=s($c);R9r=r(Wre,`Note:
Loading a model from its configuration file does `),fMe=n(Wre,"STRONG",{});var lSt=s(fMe);P9r=r(lSt,"not"),lSt.forEach(t),B9r=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(Wre,"A",{href:!0});var iSt=s(QY);I9r=r(iSt,"from_pretrained()"),iSt.forEach(t),N9r=r(Wre," to load the model weights."),Wre.forEach(t),q9r=i(Kw),T(w4.$$.fragment,Kw),Kw.forEach(t),j9r=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(bx.$$.fragment,Vl),D9r=i(Vl),mMe=n(Vl,"P",{});var dSt=s(mMe);G9r=r(dSt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dSt.forEach(t),O9r=i(Vl),pn=n(Vl,"P",{});var Zw=s(pn);V9r=r(Zw,"The model class to instantiate is selected based on the "),gMe=n(Zw,"CODE",{});var cSt=s(gMe);X9r=r(cSt,"model_type"),cSt.forEach(t),z9r=r(Zw,` property of the config object (either
passed as an argument or loaded from `),hMe=n(Zw,"CODE",{});var fSt=s(hMe);Q9r=r(fSt,"pretrained_model_name_or_path"),fSt.forEach(t),W9r=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=n(Zw,"CODE",{});var mSt=s(pMe);H9r=r(mSt,"pretrained_model_name_or_path"),mSt.forEach(t),U9r=r(Zw,":"),Zw.forEach(t),J9r=i(Vl),_Me=n(Vl,"UL",{});var gSt=s(_Me);A4=n(gSt,"LI",{});var Eje=s(A4);uMe=n(Eje,"STRONG",{});var hSt=s(uMe);Y9r=r(hSt,"tapas"),hSt.forEach(t),K9r=r(Eje," \u2014 "),WY=n(Eje,"A",{href:!0});var pSt=s(WY);Z9r=r(pSt,"TFTapasForQuestionAnswering"),pSt.forEach(t),exr=r(Eje," (TAPAS model)"),Eje.forEach(t),gSt.forEach(t),oxr=i(Vl),T(L4.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),GVe=i(f),kc=n(f,"H2",{class:!0});var Jze=s(kc);y4=n(Jze,"A",{id:!0,class:!0,href:!0});var _St=s(y4);bMe=n(_St,"SPAN",{});var uSt=s(bMe);T(vx.$$.fragment,uSt),uSt.forEach(t),_St.forEach(t),rxr=i(Jze),vMe=n(Jze,"SPAN",{});var bSt=s(vMe);txr=r(bSt,"TFAutoModelForTokenClassification"),bSt.forEach(t),Jze.forEach(t),OVe=i(f),cr=n(f,"DIV",{class:!0});var Xl=s(cr);T(Fx.$$.fragment,Xl),axr=i(Xl),Sc=n(Xl,"P",{});var Hre=s(Sc);nxr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HY=n(Hre,"A",{href:!0});var vSt=s(HY);sxr=r(vSt,"from_pretrained()"),vSt.forEach(t),lxr=r(Hre," class method or the "),UY=n(Hre,"A",{href:!0});var FSt=s(UY);ixr=r(FSt,"from_config()"),FSt.forEach(t),dxr=r(Hre,` class
method.`),Hre.forEach(t),cxr=i(Xl),Tx=n(Xl,"P",{});var Yze=s(Tx);fxr=r(Yze,"This class cannot be instantiated directly using "),FMe=n(Yze,"CODE",{});var TSt=s(FMe);mxr=r(TSt,"__init__()"),TSt.forEach(t),gxr=r(Yze," (throws an error)."),Yze.forEach(t),hxr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var eA=s(Dt);T(Mx.$$.fragment,eA),pxr=i(eA),TMe=n(eA,"P",{});var MSt=s(TMe);_xr=r(MSt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MSt.forEach(t),uxr=i(eA),Rc=n(eA,"P",{});var Ure=s(Rc);bxr=r(Ure,`Note:
Loading a model from its configuration file does `),MMe=n(Ure,"STRONG",{});var ESt=s(MMe);vxr=r(ESt,"not"),ESt.forEach(t),Fxr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(Ure,"A",{href:!0});var CSt=s(JY);Txr=r(CSt,"from_pretrained()"),CSt.forEach(t),Mxr=r(Ure," to load the model weights."),Ure.forEach(t),Exr=i(eA),T(x4.$$.fragment,eA),eA.forEach(t),Cxr=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(Ex.$$.fragment,zl),wxr=i(zl),EMe=n(zl,"P",{});var wSt=s(EMe);Axr=r(wSt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wSt.forEach(t),Lxr=i(zl),_n=n(zl,"P",{});var oA=s(_n);yxr=r(oA,"The model class to instantiate is selected based on the "),CMe=n(oA,"CODE",{});var ASt=s(CMe);xxr=r(ASt,"model_type"),ASt.forEach(t),$xr=r(oA,` property of the config object (either
passed as an argument or loaded from `),wMe=n(oA,"CODE",{});var LSt=s(wMe);kxr=r(LSt,"pretrained_model_name_or_path"),LSt.forEach(t),Sxr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=n(oA,"CODE",{});var ySt=s(AMe);Rxr=r(ySt,"pretrained_model_name_or_path"),ySt.forEach(t),Pxr=r(oA,":"),oA.forEach(t),Bxr=i(zl),de=n(zl,"UL",{});var me=s(de);$4=n(me,"LI",{});var Cje=s($4);LMe=n(Cje,"STRONG",{});var xSt=s(LMe);Ixr=r(xSt,"albert"),xSt.forEach(t),Nxr=r(Cje," \u2014 "),YY=n(Cje,"A",{href:!0});var $St=s(YY);qxr=r($St,"TFAlbertForTokenClassification"),$St.forEach(t),jxr=r(Cje," (ALBERT model)"),Cje.forEach(t),Dxr=i(me),k4=n(me,"LI",{});var wje=s(k4);yMe=n(wje,"STRONG",{});var kSt=s(yMe);Gxr=r(kSt,"bert"),kSt.forEach(t),Oxr=r(wje," \u2014 "),KY=n(wje,"A",{href:!0});var SSt=s(KY);Vxr=r(SSt,"TFBertForTokenClassification"),SSt.forEach(t),Xxr=r(wje," (BERT model)"),wje.forEach(t),zxr=i(me),S4=n(me,"LI",{});var Aje=s(S4);xMe=n(Aje,"STRONG",{});var RSt=s(xMe);Qxr=r(RSt,"camembert"),RSt.forEach(t),Wxr=r(Aje," \u2014 "),ZY=n(Aje,"A",{href:!0});var PSt=s(ZY);Hxr=r(PSt,"TFCamembertForTokenClassification"),PSt.forEach(t),Uxr=r(Aje," (CamemBERT model)"),Aje.forEach(t),Jxr=i(me),R4=n(me,"LI",{});var Lje=s(R4);$Me=n(Lje,"STRONG",{});var BSt=s($Me);Yxr=r(BSt,"convbert"),BSt.forEach(t),Kxr=r(Lje," \u2014 "),eK=n(Lje,"A",{href:!0});var ISt=s(eK);Zxr=r(ISt,"TFConvBertForTokenClassification"),ISt.forEach(t),e$r=r(Lje," (ConvBERT model)"),Lje.forEach(t),o$r=i(me),P4=n(me,"LI",{});var yje=s(P4);kMe=n(yje,"STRONG",{});var NSt=s(kMe);r$r=r(NSt,"deberta"),NSt.forEach(t),t$r=r(yje," \u2014 "),oK=n(yje,"A",{href:!0});var qSt=s(oK);a$r=r(qSt,"TFDebertaForTokenClassification"),qSt.forEach(t),n$r=r(yje," (DeBERTa model)"),yje.forEach(t),s$r=i(me),B4=n(me,"LI",{});var xje=s(B4);SMe=n(xje,"STRONG",{});var jSt=s(SMe);l$r=r(jSt,"deberta-v2"),jSt.forEach(t),i$r=r(xje," \u2014 "),rK=n(xje,"A",{href:!0});var DSt=s(rK);d$r=r(DSt,"TFDebertaV2ForTokenClassification"),DSt.forEach(t),c$r=r(xje," (DeBERTa-v2 model)"),xje.forEach(t),f$r=i(me),I4=n(me,"LI",{});var $je=s(I4);RMe=n($je,"STRONG",{});var GSt=s(RMe);m$r=r(GSt,"distilbert"),GSt.forEach(t),g$r=r($je," \u2014 "),tK=n($je,"A",{href:!0});var OSt=s(tK);h$r=r(OSt,"TFDistilBertForTokenClassification"),OSt.forEach(t),p$r=r($je," (DistilBERT model)"),$je.forEach(t),_$r=i(me),N4=n(me,"LI",{});var kje=s(N4);PMe=n(kje,"STRONG",{});var VSt=s(PMe);u$r=r(VSt,"electra"),VSt.forEach(t),b$r=r(kje," \u2014 "),aK=n(kje,"A",{href:!0});var XSt=s(aK);v$r=r(XSt,"TFElectraForTokenClassification"),XSt.forEach(t),F$r=r(kje," (ELECTRA model)"),kje.forEach(t),T$r=i(me),q4=n(me,"LI",{});var Sje=s(q4);BMe=n(Sje,"STRONG",{});var zSt=s(BMe);M$r=r(zSt,"flaubert"),zSt.forEach(t),E$r=r(Sje," \u2014 "),nK=n(Sje,"A",{href:!0});var QSt=s(nK);C$r=r(QSt,"TFFlaubertForTokenClassification"),QSt.forEach(t),w$r=r(Sje," (FlauBERT model)"),Sje.forEach(t),A$r=i(me),j4=n(me,"LI",{});var Rje=s(j4);IMe=n(Rje,"STRONG",{});var WSt=s(IMe);L$r=r(WSt,"funnel"),WSt.forEach(t),y$r=r(Rje," \u2014 "),sK=n(Rje,"A",{href:!0});var HSt=s(sK);x$r=r(HSt,"TFFunnelForTokenClassification"),HSt.forEach(t),$$r=r(Rje," (Funnel Transformer model)"),Rje.forEach(t),k$r=i(me),D4=n(me,"LI",{});var Pje=s(D4);NMe=n(Pje,"STRONG",{});var USt=s(NMe);S$r=r(USt,"layoutlm"),USt.forEach(t),R$r=r(Pje," \u2014 "),lK=n(Pje,"A",{href:!0});var JSt=s(lK);P$r=r(JSt,"TFLayoutLMForTokenClassification"),JSt.forEach(t),B$r=r(Pje," (LayoutLM model)"),Pje.forEach(t),I$r=i(me),G4=n(me,"LI",{});var Bje=s(G4);qMe=n(Bje,"STRONG",{});var YSt=s(qMe);N$r=r(YSt,"longformer"),YSt.forEach(t),q$r=r(Bje," \u2014 "),iK=n(Bje,"A",{href:!0});var KSt=s(iK);j$r=r(KSt,"TFLongformerForTokenClassification"),KSt.forEach(t),D$r=r(Bje," (Longformer model)"),Bje.forEach(t),G$r=i(me),O4=n(me,"LI",{});var Ije=s(O4);jMe=n(Ije,"STRONG",{});var ZSt=s(jMe);O$r=r(ZSt,"mobilebert"),ZSt.forEach(t),V$r=r(Ije," \u2014 "),dK=n(Ije,"A",{href:!0});var eRt=s(dK);X$r=r(eRt,"TFMobileBertForTokenClassification"),eRt.forEach(t),z$r=r(Ije," (MobileBERT model)"),Ije.forEach(t),Q$r=i(me),V4=n(me,"LI",{});var Nje=s(V4);DMe=n(Nje,"STRONG",{});var oRt=s(DMe);W$r=r(oRt,"mpnet"),oRt.forEach(t),H$r=r(Nje," \u2014 "),cK=n(Nje,"A",{href:!0});var rRt=s(cK);U$r=r(rRt,"TFMPNetForTokenClassification"),rRt.forEach(t),J$r=r(Nje," (MPNet model)"),Nje.forEach(t),Y$r=i(me),X4=n(me,"LI",{});var qje=s(X4);GMe=n(qje,"STRONG",{});var tRt=s(GMe);K$r=r(tRt,"rembert"),tRt.forEach(t),Z$r=r(qje," \u2014 "),fK=n(qje,"A",{href:!0});var aRt=s(fK);ekr=r(aRt,"TFRemBertForTokenClassification"),aRt.forEach(t),okr=r(qje," (RemBERT model)"),qje.forEach(t),rkr=i(me),z4=n(me,"LI",{});var jje=s(z4);OMe=n(jje,"STRONG",{});var nRt=s(OMe);tkr=r(nRt,"roberta"),nRt.forEach(t),akr=r(jje," \u2014 "),mK=n(jje,"A",{href:!0});var sRt=s(mK);nkr=r(sRt,"TFRobertaForTokenClassification"),sRt.forEach(t),skr=r(jje," (RoBERTa model)"),jje.forEach(t),lkr=i(me),Q4=n(me,"LI",{});var Dje=s(Q4);VMe=n(Dje,"STRONG",{});var lRt=s(VMe);ikr=r(lRt,"roformer"),lRt.forEach(t),dkr=r(Dje," \u2014 "),gK=n(Dje,"A",{href:!0});var iRt=s(gK);ckr=r(iRt,"TFRoFormerForTokenClassification"),iRt.forEach(t),fkr=r(Dje," (RoFormer model)"),Dje.forEach(t),mkr=i(me),W4=n(me,"LI",{});var Gje=s(W4);XMe=n(Gje,"STRONG",{});var dRt=s(XMe);gkr=r(dRt,"xlm"),dRt.forEach(t),hkr=r(Gje," \u2014 "),hK=n(Gje,"A",{href:!0});var cRt=s(hK);pkr=r(cRt,"TFXLMForTokenClassification"),cRt.forEach(t),_kr=r(Gje," (XLM model)"),Gje.forEach(t),ukr=i(me),H4=n(me,"LI",{});var Oje=s(H4);zMe=n(Oje,"STRONG",{});var fRt=s(zMe);bkr=r(fRt,"xlm-roberta"),fRt.forEach(t),vkr=r(Oje," \u2014 "),pK=n(Oje,"A",{href:!0});var mRt=s(pK);Fkr=r(mRt,"TFXLMRobertaForTokenClassification"),mRt.forEach(t),Tkr=r(Oje," (XLM-RoBERTa model)"),Oje.forEach(t),Mkr=i(me),U4=n(me,"LI",{});var Vje=s(U4);QMe=n(Vje,"STRONG",{});var gRt=s(QMe);Ekr=r(gRt,"xlnet"),gRt.forEach(t),Ckr=r(Vje," \u2014 "),_K=n(Vje,"A",{href:!0});var hRt=s(_K);wkr=r(hRt,"TFXLNetForTokenClassification"),hRt.forEach(t),Akr=r(Vje," (XLNet model)"),Vje.forEach(t),me.forEach(t),Lkr=i(zl),T(J4.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),VVe=i(f),Pc=n(f,"H2",{class:!0});var Kze=s(Pc);Y4=n(Kze,"A",{id:!0,class:!0,href:!0});var pRt=s(Y4);WMe=n(pRt,"SPAN",{});var _Rt=s(WMe);T(Cx.$$.fragment,_Rt),_Rt.forEach(t),pRt.forEach(t),ykr=i(Kze),HMe=n(Kze,"SPAN",{});var uRt=s(HMe);xkr=r(uRt,"TFAutoModelForQuestionAnswering"),uRt.forEach(t),Kze.forEach(t),XVe=i(f),fr=n(f,"DIV",{class:!0});var Ql=s(fr);T(wx.$$.fragment,Ql),$kr=i(Ql),Bc=n(Ql,"P",{});var Jre=s(Bc);kkr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uK=n(Jre,"A",{href:!0});var bRt=s(uK);Skr=r(bRt,"from_pretrained()"),bRt.forEach(t),Rkr=r(Jre," class method or the "),bK=n(Jre,"A",{href:!0});var vRt=s(bK);Pkr=r(vRt,"from_config()"),vRt.forEach(t),Bkr=r(Jre,` class
method.`),Jre.forEach(t),Ikr=i(Ql),Ax=n(Ql,"P",{});var Zze=s(Ax);Nkr=r(Zze,"This class cannot be instantiated directly using "),UMe=n(Zze,"CODE",{});var FRt=s(UMe);qkr=r(FRt,"__init__()"),FRt.forEach(t),jkr=r(Zze," (throws an error)."),Zze.forEach(t),Dkr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var rA=s(Gt);T(Lx.$$.fragment,rA),Gkr=i(rA),JMe=n(rA,"P",{});var TRt=s(JMe);Okr=r(TRt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TRt.forEach(t),Vkr=i(rA),Ic=n(rA,"P",{});var Yre=s(Ic);Xkr=r(Yre,`Note:
Loading a model from its configuration file does `),YMe=n(Yre,"STRONG",{});var MRt=s(YMe);zkr=r(MRt,"not"),MRt.forEach(t),Qkr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(Yre,"A",{href:!0});var ERt=s(vK);Wkr=r(ERt,"from_pretrained()"),ERt.forEach(t),Hkr=r(Yre," to load the model weights."),Yre.forEach(t),Ukr=i(rA),T(K4.$$.fragment,rA),rA.forEach(t),Jkr=i(Ql),jr=n(Ql,"DIV",{class:!0});var Wl=s(jr);T(yx.$$.fragment,Wl),Ykr=i(Wl),KMe=n(Wl,"P",{});var CRt=s(KMe);Kkr=r(CRt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),CRt.forEach(t),Zkr=i(Wl),un=n(Wl,"P",{});var tA=s(un);eSr=r(tA,"The model class to instantiate is selected based on the "),ZMe=n(tA,"CODE",{});var wRt=s(ZMe);oSr=r(wRt,"model_type"),wRt.forEach(t),rSr=r(tA,` property of the config object (either
passed as an argument or loaded from `),eEe=n(tA,"CODE",{});var ARt=s(eEe);tSr=r(ARt,"pretrained_model_name_or_path"),ARt.forEach(t),aSr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=n(tA,"CODE",{});var LRt=s(oEe);nSr=r(LRt,"pretrained_model_name_or_path"),LRt.forEach(t),sSr=r(tA,":"),tA.forEach(t),lSr=i(Wl),ce=n(Wl,"UL",{});var ge=s(ce);Z4=n(ge,"LI",{});var Xje=s(Z4);rEe=n(Xje,"STRONG",{});var yRt=s(rEe);iSr=r(yRt,"albert"),yRt.forEach(t),dSr=r(Xje," \u2014 "),FK=n(Xje,"A",{href:!0});var xRt=s(FK);cSr=r(xRt,"TFAlbertForQuestionAnswering"),xRt.forEach(t),fSr=r(Xje," (ALBERT model)"),Xje.forEach(t),mSr=i(ge),eC=n(ge,"LI",{});var zje=s(eC);tEe=n(zje,"STRONG",{});var $Rt=s(tEe);gSr=r($Rt,"bert"),$Rt.forEach(t),hSr=r(zje," \u2014 "),TK=n(zje,"A",{href:!0});var kRt=s(TK);pSr=r(kRt,"TFBertForQuestionAnswering"),kRt.forEach(t),_Sr=r(zje," (BERT model)"),zje.forEach(t),uSr=i(ge),oC=n(ge,"LI",{});var Qje=s(oC);aEe=n(Qje,"STRONG",{});var SRt=s(aEe);bSr=r(SRt,"camembert"),SRt.forEach(t),vSr=r(Qje," \u2014 "),MK=n(Qje,"A",{href:!0});var RRt=s(MK);FSr=r(RRt,"TFCamembertForQuestionAnswering"),RRt.forEach(t),TSr=r(Qje," (CamemBERT model)"),Qje.forEach(t),MSr=i(ge),rC=n(ge,"LI",{});var Wje=s(rC);nEe=n(Wje,"STRONG",{});var PRt=s(nEe);ESr=r(PRt,"convbert"),PRt.forEach(t),CSr=r(Wje," \u2014 "),EK=n(Wje,"A",{href:!0});var BRt=s(EK);wSr=r(BRt,"TFConvBertForQuestionAnswering"),BRt.forEach(t),ASr=r(Wje," (ConvBERT model)"),Wje.forEach(t),LSr=i(ge),tC=n(ge,"LI",{});var Hje=s(tC);sEe=n(Hje,"STRONG",{});var IRt=s(sEe);ySr=r(IRt,"deberta"),IRt.forEach(t),xSr=r(Hje," \u2014 "),CK=n(Hje,"A",{href:!0});var NRt=s(CK);$Sr=r(NRt,"TFDebertaForQuestionAnswering"),NRt.forEach(t),kSr=r(Hje," (DeBERTa model)"),Hje.forEach(t),SSr=i(ge),aC=n(ge,"LI",{});var Uje=s(aC);lEe=n(Uje,"STRONG",{});var qRt=s(lEe);RSr=r(qRt,"deberta-v2"),qRt.forEach(t),PSr=r(Uje," \u2014 "),wK=n(Uje,"A",{href:!0});var jRt=s(wK);BSr=r(jRt,"TFDebertaV2ForQuestionAnswering"),jRt.forEach(t),ISr=r(Uje," (DeBERTa-v2 model)"),Uje.forEach(t),NSr=i(ge),nC=n(ge,"LI",{});var Jje=s(nC);iEe=n(Jje,"STRONG",{});var DRt=s(iEe);qSr=r(DRt,"distilbert"),DRt.forEach(t),jSr=r(Jje," \u2014 "),AK=n(Jje,"A",{href:!0});var GRt=s(AK);DSr=r(GRt,"TFDistilBertForQuestionAnswering"),GRt.forEach(t),GSr=r(Jje," (DistilBERT model)"),Jje.forEach(t),OSr=i(ge),sC=n(ge,"LI",{});var Yje=s(sC);dEe=n(Yje,"STRONG",{});var ORt=s(dEe);VSr=r(ORt,"electra"),ORt.forEach(t),XSr=r(Yje," \u2014 "),LK=n(Yje,"A",{href:!0});var VRt=s(LK);zSr=r(VRt,"TFElectraForQuestionAnswering"),VRt.forEach(t),QSr=r(Yje," (ELECTRA model)"),Yje.forEach(t),WSr=i(ge),lC=n(ge,"LI",{});var Kje=s(lC);cEe=n(Kje,"STRONG",{});var XRt=s(cEe);HSr=r(XRt,"flaubert"),XRt.forEach(t),USr=r(Kje," \u2014 "),yK=n(Kje,"A",{href:!0});var zRt=s(yK);JSr=r(zRt,"TFFlaubertForQuestionAnsweringSimple"),zRt.forEach(t),YSr=r(Kje," (FlauBERT model)"),Kje.forEach(t),KSr=i(ge),iC=n(ge,"LI",{});var Zje=s(iC);fEe=n(Zje,"STRONG",{});var QRt=s(fEe);ZSr=r(QRt,"funnel"),QRt.forEach(t),eRr=r(Zje," \u2014 "),xK=n(Zje,"A",{href:!0});var WRt=s(xK);oRr=r(WRt,"TFFunnelForQuestionAnswering"),WRt.forEach(t),rRr=r(Zje," (Funnel Transformer model)"),Zje.forEach(t),tRr=i(ge),dC=n(ge,"LI",{});var eDe=s(dC);mEe=n(eDe,"STRONG",{});var HRt=s(mEe);aRr=r(HRt,"gptj"),HRt.forEach(t),nRr=r(eDe," \u2014 "),$K=n(eDe,"A",{href:!0});var URt=s($K);sRr=r(URt,"TFGPTJForQuestionAnswering"),URt.forEach(t),lRr=r(eDe," (GPT-J model)"),eDe.forEach(t),iRr=i(ge),cC=n(ge,"LI",{});var oDe=s(cC);gEe=n(oDe,"STRONG",{});var JRt=s(gEe);dRr=r(JRt,"longformer"),JRt.forEach(t),cRr=r(oDe," \u2014 "),kK=n(oDe,"A",{href:!0});var YRt=s(kK);fRr=r(YRt,"TFLongformerForQuestionAnswering"),YRt.forEach(t),mRr=r(oDe," (Longformer model)"),oDe.forEach(t),gRr=i(ge),fC=n(ge,"LI",{});var rDe=s(fC);hEe=n(rDe,"STRONG",{});var KRt=s(hEe);hRr=r(KRt,"mobilebert"),KRt.forEach(t),pRr=r(rDe," \u2014 "),SK=n(rDe,"A",{href:!0});var ZRt=s(SK);_Rr=r(ZRt,"TFMobileBertForQuestionAnswering"),ZRt.forEach(t),uRr=r(rDe," (MobileBERT model)"),rDe.forEach(t),bRr=i(ge),mC=n(ge,"LI",{});var tDe=s(mC);pEe=n(tDe,"STRONG",{});var ePt=s(pEe);vRr=r(ePt,"mpnet"),ePt.forEach(t),FRr=r(tDe," \u2014 "),RK=n(tDe,"A",{href:!0});var oPt=s(RK);TRr=r(oPt,"TFMPNetForQuestionAnswering"),oPt.forEach(t),MRr=r(tDe," (MPNet model)"),tDe.forEach(t),ERr=i(ge),gC=n(ge,"LI",{});var aDe=s(gC);_Ee=n(aDe,"STRONG",{});var rPt=s(_Ee);CRr=r(rPt,"rembert"),rPt.forEach(t),wRr=r(aDe," \u2014 "),PK=n(aDe,"A",{href:!0});var tPt=s(PK);ARr=r(tPt,"TFRemBertForQuestionAnswering"),tPt.forEach(t),LRr=r(aDe," (RemBERT model)"),aDe.forEach(t),yRr=i(ge),hC=n(ge,"LI",{});var nDe=s(hC);uEe=n(nDe,"STRONG",{});var aPt=s(uEe);xRr=r(aPt,"roberta"),aPt.forEach(t),$Rr=r(nDe," \u2014 "),BK=n(nDe,"A",{href:!0});var nPt=s(BK);kRr=r(nPt,"TFRobertaForQuestionAnswering"),nPt.forEach(t),SRr=r(nDe," (RoBERTa model)"),nDe.forEach(t),RRr=i(ge),pC=n(ge,"LI",{});var sDe=s(pC);bEe=n(sDe,"STRONG",{});var sPt=s(bEe);PRr=r(sPt,"roformer"),sPt.forEach(t),BRr=r(sDe," \u2014 "),IK=n(sDe,"A",{href:!0});var lPt=s(IK);IRr=r(lPt,"TFRoFormerForQuestionAnswering"),lPt.forEach(t),NRr=r(sDe," (RoFormer model)"),sDe.forEach(t),qRr=i(ge),_C=n(ge,"LI",{});var lDe=s(_C);vEe=n(lDe,"STRONG",{});var iPt=s(vEe);jRr=r(iPt,"xlm"),iPt.forEach(t),DRr=r(lDe," \u2014 "),NK=n(lDe,"A",{href:!0});var dPt=s(NK);GRr=r(dPt,"TFXLMForQuestionAnsweringSimple"),dPt.forEach(t),ORr=r(lDe," (XLM model)"),lDe.forEach(t),VRr=i(ge),uC=n(ge,"LI",{});var iDe=s(uC);FEe=n(iDe,"STRONG",{});var cPt=s(FEe);XRr=r(cPt,"xlm-roberta"),cPt.forEach(t),zRr=r(iDe," \u2014 "),qK=n(iDe,"A",{href:!0});var fPt=s(qK);QRr=r(fPt,"TFXLMRobertaForQuestionAnswering"),fPt.forEach(t),WRr=r(iDe," (XLM-RoBERTa model)"),iDe.forEach(t),HRr=i(ge),bC=n(ge,"LI",{});var dDe=s(bC);TEe=n(dDe,"STRONG",{});var mPt=s(TEe);URr=r(mPt,"xlnet"),mPt.forEach(t),JRr=r(dDe," \u2014 "),jK=n(dDe,"A",{href:!0});var gPt=s(jK);YRr=r(gPt,"TFXLNetForQuestionAnsweringSimple"),gPt.forEach(t),KRr=r(dDe," (XLNet model)"),dDe.forEach(t),ge.forEach(t),ZRr=i(Wl),T(vC.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),zVe=i(f),Nc=n(f,"H2",{class:!0});var eQe=s(Nc);FC=n(eQe,"A",{id:!0,class:!0,href:!0});var hPt=s(FC);MEe=n(hPt,"SPAN",{});var pPt=s(MEe);T(xx.$$.fragment,pPt),pPt.forEach(t),hPt.forEach(t),ePr=i(eQe),EEe=n(eQe,"SPAN",{});var _Pt=s(EEe);oPr=r(_Pt,"TFAutoModelForVision2Seq"),_Pt.forEach(t),eQe.forEach(t),QVe=i(f),mr=n(f,"DIV",{class:!0});var Hl=s(mr);T($x.$$.fragment,Hl),rPr=i(Hl),qc=n(Hl,"P",{});var Kre=s(qc);tPr=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DK=n(Kre,"A",{href:!0});var uPt=s(DK);aPr=r(uPt,"from_pretrained()"),uPt.forEach(t),nPr=r(Kre," class method or the "),GK=n(Kre,"A",{href:!0});var bPt=s(GK);sPr=r(bPt,"from_config()"),bPt.forEach(t),lPr=r(Kre,` class
method.`),Kre.forEach(t),iPr=i(Hl),kx=n(Hl,"P",{});var oQe=s(kx);dPr=r(oQe,"This class cannot be instantiated directly using "),CEe=n(oQe,"CODE",{});var vPt=s(CEe);cPr=r(vPt,"__init__()"),vPt.forEach(t),fPr=r(oQe," (throws an error)."),oQe.forEach(t),mPr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var aA=s(Ot);T(Sx.$$.fragment,aA),gPr=i(aA),wEe=n(aA,"P",{});var FPt=s(wEe);hPr=r(FPt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FPt.forEach(t),pPr=i(aA),jc=n(aA,"P",{});var Zre=s(jc);_Pr=r(Zre,`Note:
Loading a model from its configuration file does `),AEe=n(Zre,"STRONG",{});var TPt=s(AEe);uPr=r(TPt,"not"),TPt.forEach(t),bPr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Zre,"A",{href:!0});var MPt=s(OK);vPr=r(MPt,"from_pretrained()"),MPt.forEach(t),FPr=r(Zre," to load the model weights."),Zre.forEach(t),TPr=i(aA),T(TC.$$.fragment,aA),aA.forEach(t),MPr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T(Rx.$$.fragment,Ul),EPr=i(Ul),LEe=n(Ul,"P",{});var EPt=s(LEe);CPr=r(EPt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EPt.forEach(t),wPr=i(Ul),bn=n(Ul,"P",{});var nA=s(bn);APr=r(nA,"The model class to instantiate is selected based on the "),yEe=n(nA,"CODE",{});var CPt=s(yEe);LPr=r(CPt,"model_type"),CPt.forEach(t),yPr=r(nA,` property of the config object (either
passed as an argument or loaded from `),xEe=n(nA,"CODE",{});var wPt=s(xEe);xPr=r(wPt,"pretrained_model_name_or_path"),wPt.forEach(t),$Pr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ee=n(nA,"CODE",{});var APt=s($Ee);kPr=r(APt,"pretrained_model_name_or_path"),APt.forEach(t),SPr=r(nA,":"),nA.forEach(t),RPr=i(Ul),kEe=n(Ul,"UL",{});var LPt=s(kEe);MC=n(LPt,"LI",{});var cDe=s(MC);SEe=n(cDe,"STRONG",{});var yPt=s(SEe);PPr=r(yPt,"vision-encoder-decoder"),yPt.forEach(t),BPr=r(cDe," \u2014 "),VK=n(cDe,"A",{href:!0});var xPt=s(VK);IPr=r(xPt,"TFVisionEncoderDecoderModel"),xPt.forEach(t),NPr=r(cDe," (Vision Encoder decoder model)"),cDe.forEach(t),LPt.forEach(t),qPr=i(Ul),T(EC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),WVe=i(f),Dc=n(f,"H2",{class:!0});var rQe=s(Dc);CC=n(rQe,"A",{id:!0,class:!0,href:!0});var $Pt=s(CC);REe=n($Pt,"SPAN",{});var kPt=s(REe);T(Px.$$.fragment,kPt),kPt.forEach(t),$Pt.forEach(t),jPr=i(rQe),PEe=n(rQe,"SPAN",{});var SPt=s(PEe);DPr=r(SPt,"TFAutoModelForSpeechSeq2Seq"),SPt.forEach(t),rQe.forEach(t),HVe=i(f),gr=n(f,"DIV",{class:!0});var Jl=s(gr);T(Bx.$$.fragment,Jl),GPr=i(Jl),Gc=n(Jl,"P",{});var ete=s(Gc);OPr=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XK=n(ete,"A",{href:!0});var RPt=s(XK);VPr=r(RPt,"from_pretrained()"),RPt.forEach(t),XPr=r(ete," class method or the "),zK=n(ete,"A",{href:!0});var PPt=s(zK);zPr=r(PPt,"from_config()"),PPt.forEach(t),QPr=r(ete,` class
method.`),ete.forEach(t),WPr=i(Jl),Ix=n(Jl,"P",{});var tQe=s(Ix);HPr=r(tQe,"This class cannot be instantiated directly using "),BEe=n(tQe,"CODE",{});var BPt=s(BEe);UPr=r(BPt,"__init__()"),BPt.forEach(t),JPr=r(tQe," (throws an error)."),tQe.forEach(t),YPr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var sA=s(Vt);T(Nx.$$.fragment,sA),KPr=i(sA),IEe=n(sA,"P",{});var IPt=s(IEe);ZPr=r(IPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),IPt.forEach(t),eBr=i(sA),Oc=n(sA,"P",{});var ote=s(Oc);oBr=r(ote,`Note:
Loading a model from its configuration file does `),NEe=n(ote,"STRONG",{});var NPt=s(NEe);rBr=r(NPt,"not"),NPt.forEach(t),tBr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(ote,"A",{href:!0});var qPt=s(QK);aBr=r(qPt,"from_pretrained()"),qPt.forEach(t),nBr=r(ote," to load the model weights."),ote.forEach(t),sBr=i(sA),T(wC.$$.fragment,sA),sA.forEach(t),lBr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(qx.$$.fragment,Yl),iBr=i(Yl),qEe=n(Yl,"P",{});var jPt=s(qEe);dBr=r(jPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jPt.forEach(t),cBr=i(Yl),vn=n(Yl,"P",{});var lA=s(vn);fBr=r(lA,"The model class to instantiate is selected based on the "),jEe=n(lA,"CODE",{});var DPt=s(jEe);mBr=r(DPt,"model_type"),DPt.forEach(t),gBr=r(lA,` property of the config object (either
passed as an argument or loaded from `),DEe=n(lA,"CODE",{});var GPt=s(DEe);hBr=r(GPt,"pretrained_model_name_or_path"),GPt.forEach(t),pBr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=n(lA,"CODE",{});var OPt=s(GEe);_Br=r(OPt,"pretrained_model_name_or_path"),OPt.forEach(t),uBr=r(lA,":"),lA.forEach(t),bBr=i(Yl),OEe=n(Yl,"UL",{});var VPt=s(OEe);AC=n(VPt,"LI",{});var fDe=s(AC);VEe=n(fDe,"STRONG",{});var XPt=s(VEe);vBr=r(XPt,"speech_to_text"),XPt.forEach(t),FBr=r(fDe," \u2014 "),WK=n(fDe,"A",{href:!0});var zPt=s(WK);TBr=r(zPt,"TFSpeech2TextForConditionalGeneration"),zPt.forEach(t),MBr=r(fDe," (Speech2Text model)"),fDe.forEach(t),VPt.forEach(t),EBr=i(Yl),T(LC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),UVe=i(f),Vc=n(f,"H2",{class:!0});var aQe=s(Vc);yC=n(aQe,"A",{id:!0,class:!0,href:!0});var QPt=s(yC);XEe=n(QPt,"SPAN",{});var WPt=s(XEe);T(jx.$$.fragment,WPt),WPt.forEach(t),QPt.forEach(t),CBr=i(aQe),zEe=n(aQe,"SPAN",{});var HPt=s(zEe);wBr=r(HPt,"FlaxAutoModel"),HPt.forEach(t),aQe.forEach(t),JVe=i(f),hr=n(f,"DIV",{class:!0});var Kl=s(hr);T(Dx.$$.fragment,Kl),ABr=i(Kl),Xc=n(Kl,"P",{});var rte=s(Xc);LBr=r(rte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HK=n(rte,"A",{href:!0});var UPt=s(HK);yBr=r(UPt,"from_pretrained()"),UPt.forEach(t),xBr=r(rte," class method or the "),UK=n(rte,"A",{href:!0});var JPt=s(UK);$Br=r(JPt,"from_config()"),JPt.forEach(t),kBr=r(rte,` class
method.`),rte.forEach(t),SBr=i(Kl),Gx=n(Kl,"P",{});var nQe=s(Gx);RBr=r(nQe,"This class cannot be instantiated directly using "),QEe=n(nQe,"CODE",{});var YPt=s(QEe);PBr=r(YPt,"__init__()"),YPt.forEach(t),BBr=r(nQe," (throws an error)."),nQe.forEach(t),IBr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var iA=s(Xt);T(Ox.$$.fragment,iA),NBr=i(iA),WEe=n(iA,"P",{});var KPt=s(WEe);qBr=r(KPt,"Instantiates one of the base model classes of the library from a configuration."),KPt.forEach(t),jBr=i(iA),zc=n(iA,"P",{});var tte=s(zc);DBr=r(tte,`Note:
Loading a model from its configuration file does `),HEe=n(tte,"STRONG",{});var ZPt=s(HEe);GBr=r(ZPt,"not"),ZPt.forEach(t),OBr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(tte,"A",{href:!0});var eBt=s(JK);VBr=r(eBt,"from_pretrained()"),eBt.forEach(t),XBr=r(tte," to load the model weights."),tte.forEach(t),zBr=i(iA),T(xC.$$.fragment,iA),iA.forEach(t),QBr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(Vx.$$.fragment,Zl),WBr=i(Zl),UEe=n(Zl,"P",{});var oBt=s(UEe);HBr=r(oBt,"Instantiate one of the base model classes of the library from a pretrained model."),oBt.forEach(t),UBr=i(Zl),Fn=n(Zl,"P",{});var dA=s(Fn);JBr=r(dA,"The model class to instantiate is selected based on the "),JEe=n(dA,"CODE",{});var rBt=s(JEe);YBr=r(rBt,"model_type"),rBt.forEach(t),KBr=r(dA,` property of the config object (either
passed as an argument or loaded from `),YEe=n(dA,"CODE",{});var tBt=s(YEe);ZBr=r(tBt,"pretrained_model_name_or_path"),tBt.forEach(t),eIr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=n(dA,"CODE",{});var aBt=s(KEe);oIr=r(aBt,"pretrained_model_name_or_path"),aBt.forEach(t),rIr=r(dA,":"),dA.forEach(t),tIr=i(Zl),oe=n(Zl,"UL",{});var ae=s(oe);$C=n(ae,"LI",{});var mDe=s($C);ZEe=n(mDe,"STRONG",{});var nBt=s(ZEe);aIr=r(nBt,"albert"),nBt.forEach(t),nIr=r(mDe," \u2014 "),YK=n(mDe,"A",{href:!0});var sBt=s(YK);sIr=r(sBt,"FlaxAlbertModel"),sBt.forEach(t),lIr=r(mDe," (ALBERT model)"),mDe.forEach(t),iIr=i(ae),kC=n(ae,"LI",{});var gDe=s(kC);e4e=n(gDe,"STRONG",{});var lBt=s(e4e);dIr=r(lBt,"bart"),lBt.forEach(t),cIr=r(gDe," \u2014 "),KK=n(gDe,"A",{href:!0});var iBt=s(KK);fIr=r(iBt,"FlaxBartModel"),iBt.forEach(t),mIr=r(gDe," (BART model)"),gDe.forEach(t),gIr=i(ae),SC=n(ae,"LI",{});var hDe=s(SC);o4e=n(hDe,"STRONG",{});var dBt=s(o4e);hIr=r(dBt,"beit"),dBt.forEach(t),pIr=r(hDe," \u2014 "),ZK=n(hDe,"A",{href:!0});var cBt=s(ZK);_Ir=r(cBt,"FlaxBeitModel"),cBt.forEach(t),uIr=r(hDe," (BEiT model)"),hDe.forEach(t),bIr=i(ae),RC=n(ae,"LI",{});var pDe=s(RC);r4e=n(pDe,"STRONG",{});var fBt=s(r4e);vIr=r(fBt,"bert"),fBt.forEach(t),FIr=r(pDe," \u2014 "),eZ=n(pDe,"A",{href:!0});var mBt=s(eZ);TIr=r(mBt,"FlaxBertModel"),mBt.forEach(t),MIr=r(pDe," (BERT model)"),pDe.forEach(t),EIr=i(ae),PC=n(ae,"LI",{});var _De=s(PC);t4e=n(_De,"STRONG",{});var gBt=s(t4e);CIr=r(gBt,"big_bird"),gBt.forEach(t),wIr=r(_De," \u2014 "),oZ=n(_De,"A",{href:!0});var hBt=s(oZ);AIr=r(hBt,"FlaxBigBirdModel"),hBt.forEach(t),LIr=r(_De," (BigBird model)"),_De.forEach(t),yIr=i(ae),BC=n(ae,"LI",{});var uDe=s(BC);a4e=n(uDe,"STRONG",{});var pBt=s(a4e);xIr=r(pBt,"blenderbot"),pBt.forEach(t),$Ir=r(uDe," \u2014 "),rZ=n(uDe,"A",{href:!0});var _Bt=s(rZ);kIr=r(_Bt,"FlaxBlenderbotModel"),_Bt.forEach(t),SIr=r(uDe," (Blenderbot model)"),uDe.forEach(t),RIr=i(ae),IC=n(ae,"LI",{});var bDe=s(IC);n4e=n(bDe,"STRONG",{});var uBt=s(n4e);PIr=r(uBt,"blenderbot-small"),uBt.forEach(t),BIr=r(bDe," \u2014 "),tZ=n(bDe,"A",{href:!0});var bBt=s(tZ);IIr=r(bBt,"FlaxBlenderbotSmallModel"),bBt.forEach(t),NIr=r(bDe," (BlenderbotSmall model)"),bDe.forEach(t),qIr=i(ae),NC=n(ae,"LI",{});var vDe=s(NC);s4e=n(vDe,"STRONG",{});var vBt=s(s4e);jIr=r(vBt,"clip"),vBt.forEach(t),DIr=r(vDe," \u2014 "),aZ=n(vDe,"A",{href:!0});var FBt=s(aZ);GIr=r(FBt,"FlaxCLIPModel"),FBt.forEach(t),OIr=r(vDe," (CLIP model)"),vDe.forEach(t),VIr=i(ae),qC=n(ae,"LI",{});var FDe=s(qC);l4e=n(FDe,"STRONG",{});var TBt=s(l4e);XIr=r(TBt,"distilbert"),TBt.forEach(t),zIr=r(FDe," \u2014 "),nZ=n(FDe,"A",{href:!0});var MBt=s(nZ);QIr=r(MBt,"FlaxDistilBertModel"),MBt.forEach(t),WIr=r(FDe," (DistilBERT model)"),FDe.forEach(t),HIr=i(ae),jC=n(ae,"LI",{});var TDe=s(jC);i4e=n(TDe,"STRONG",{});var EBt=s(i4e);UIr=r(EBt,"electra"),EBt.forEach(t),JIr=r(TDe," \u2014 "),sZ=n(TDe,"A",{href:!0});var CBt=s(sZ);YIr=r(CBt,"FlaxElectraModel"),CBt.forEach(t),KIr=r(TDe," (ELECTRA model)"),TDe.forEach(t),ZIr=i(ae),DC=n(ae,"LI",{});var MDe=s(DC);d4e=n(MDe,"STRONG",{});var wBt=s(d4e);eNr=r(wBt,"gpt2"),wBt.forEach(t),oNr=r(MDe," \u2014 "),lZ=n(MDe,"A",{href:!0});var ABt=s(lZ);rNr=r(ABt,"FlaxGPT2Model"),ABt.forEach(t),tNr=r(MDe," (OpenAI GPT-2 model)"),MDe.forEach(t),aNr=i(ae),GC=n(ae,"LI",{});var EDe=s(GC);c4e=n(EDe,"STRONG",{});var LBt=s(c4e);nNr=r(LBt,"gpt_neo"),LBt.forEach(t),sNr=r(EDe," \u2014 "),iZ=n(EDe,"A",{href:!0});var yBt=s(iZ);lNr=r(yBt,"FlaxGPTNeoModel"),yBt.forEach(t),iNr=r(EDe," (GPT Neo model)"),EDe.forEach(t),dNr=i(ae),OC=n(ae,"LI",{});var CDe=s(OC);f4e=n(CDe,"STRONG",{});var xBt=s(f4e);cNr=r(xBt,"gptj"),xBt.forEach(t),fNr=r(CDe," \u2014 "),dZ=n(CDe,"A",{href:!0});var $Bt=s(dZ);mNr=r($Bt,"FlaxGPTJModel"),$Bt.forEach(t),gNr=r(CDe," (GPT-J model)"),CDe.forEach(t),hNr=i(ae),VC=n(ae,"LI",{});var wDe=s(VC);m4e=n(wDe,"STRONG",{});var kBt=s(m4e);pNr=r(kBt,"longt5"),kBt.forEach(t),_Nr=r(wDe," \u2014 "),cZ=n(wDe,"A",{href:!0});var SBt=s(cZ);uNr=r(SBt,"FlaxLongT5Model"),SBt.forEach(t),bNr=r(wDe," (LongT5 model)"),wDe.forEach(t),vNr=i(ae),XC=n(ae,"LI",{});var ADe=s(XC);g4e=n(ADe,"STRONG",{});var RBt=s(g4e);FNr=r(RBt,"marian"),RBt.forEach(t),TNr=r(ADe," \u2014 "),fZ=n(ADe,"A",{href:!0});var PBt=s(fZ);MNr=r(PBt,"FlaxMarianModel"),PBt.forEach(t),ENr=r(ADe," (Marian model)"),ADe.forEach(t),CNr=i(ae),zC=n(ae,"LI",{});var LDe=s(zC);h4e=n(LDe,"STRONG",{});var BBt=s(h4e);wNr=r(BBt,"mbart"),BBt.forEach(t),ANr=r(LDe," \u2014 "),mZ=n(LDe,"A",{href:!0});var IBt=s(mZ);LNr=r(IBt,"FlaxMBartModel"),IBt.forEach(t),yNr=r(LDe," (mBART model)"),LDe.forEach(t),xNr=i(ae),QC=n(ae,"LI",{});var yDe=s(QC);p4e=n(yDe,"STRONG",{});var NBt=s(p4e);$Nr=r(NBt,"mt5"),NBt.forEach(t),kNr=r(yDe," \u2014 "),gZ=n(yDe,"A",{href:!0});var qBt=s(gZ);SNr=r(qBt,"FlaxMT5Model"),qBt.forEach(t),RNr=r(yDe," (MT5 model)"),yDe.forEach(t),PNr=i(ae),WC=n(ae,"LI",{});var xDe=s(WC);_4e=n(xDe,"STRONG",{});var jBt=s(_4e);BNr=r(jBt,"opt"),jBt.forEach(t),INr=r(xDe," \u2014 "),hZ=n(xDe,"A",{href:!0});var DBt=s(hZ);NNr=r(DBt,"FlaxOPTModel"),DBt.forEach(t),qNr=r(xDe," (OPT model)"),xDe.forEach(t),jNr=i(ae),HC=n(ae,"LI",{});var $De=s(HC);u4e=n($De,"STRONG",{});var GBt=s(u4e);DNr=r(GBt,"pegasus"),GBt.forEach(t),GNr=r($De," \u2014 "),pZ=n($De,"A",{href:!0});var OBt=s(pZ);ONr=r(OBt,"FlaxPegasusModel"),OBt.forEach(t),VNr=r($De," (Pegasus model)"),$De.forEach(t),XNr=i(ae),UC=n(ae,"LI",{});var kDe=s(UC);b4e=n(kDe,"STRONG",{});var VBt=s(b4e);zNr=r(VBt,"roberta"),VBt.forEach(t),QNr=r(kDe," \u2014 "),_Z=n(kDe,"A",{href:!0});var XBt=s(_Z);WNr=r(XBt,"FlaxRobertaModel"),XBt.forEach(t),HNr=r(kDe," (RoBERTa model)"),kDe.forEach(t),UNr=i(ae),JC=n(ae,"LI",{});var SDe=s(JC);v4e=n(SDe,"STRONG",{});var zBt=s(v4e);JNr=r(zBt,"roformer"),zBt.forEach(t),YNr=r(SDe," \u2014 "),uZ=n(SDe,"A",{href:!0});var QBt=s(uZ);KNr=r(QBt,"FlaxRoFormerModel"),QBt.forEach(t),ZNr=r(SDe," (RoFormer model)"),SDe.forEach(t),eqr=i(ae),YC=n(ae,"LI",{});var RDe=s(YC);F4e=n(RDe,"STRONG",{});var WBt=s(F4e);oqr=r(WBt,"t5"),WBt.forEach(t),rqr=r(RDe," \u2014 "),bZ=n(RDe,"A",{href:!0});var HBt=s(bZ);tqr=r(HBt,"FlaxT5Model"),HBt.forEach(t),aqr=r(RDe," (T5 model)"),RDe.forEach(t),nqr=i(ae),KC=n(ae,"LI",{});var PDe=s(KC);T4e=n(PDe,"STRONG",{});var UBt=s(T4e);sqr=r(UBt,"vision-text-dual-encoder"),UBt.forEach(t),lqr=r(PDe," \u2014 "),vZ=n(PDe,"A",{href:!0});var JBt=s(vZ);iqr=r(JBt,"FlaxVisionTextDualEncoderModel"),JBt.forEach(t),dqr=r(PDe," (VisionTextDualEncoder model)"),PDe.forEach(t),cqr=i(ae),ZC=n(ae,"LI",{});var BDe=s(ZC);M4e=n(BDe,"STRONG",{});var YBt=s(M4e);fqr=r(YBt,"vit"),YBt.forEach(t),mqr=r(BDe," \u2014 "),FZ=n(BDe,"A",{href:!0});var KBt=s(FZ);gqr=r(KBt,"FlaxViTModel"),KBt.forEach(t),hqr=r(BDe," (ViT model)"),BDe.forEach(t),pqr=i(ae),e5=n(ae,"LI",{});var IDe=s(e5);E4e=n(IDe,"STRONG",{});var ZBt=s(E4e);_qr=r(ZBt,"wav2vec2"),ZBt.forEach(t),uqr=r(IDe," \u2014 "),TZ=n(IDe,"A",{href:!0});var eIt=s(TZ);bqr=r(eIt,"FlaxWav2Vec2Model"),eIt.forEach(t),vqr=r(IDe," (Wav2Vec2 model)"),IDe.forEach(t),Fqr=i(ae),o5=n(ae,"LI",{});var NDe=s(o5);C4e=n(NDe,"STRONG",{});var oIt=s(C4e);Tqr=r(oIt,"xglm"),oIt.forEach(t),Mqr=r(NDe," \u2014 "),MZ=n(NDe,"A",{href:!0});var rIt=s(MZ);Eqr=r(rIt,"FlaxXGLMModel"),rIt.forEach(t),Cqr=r(NDe," (XGLM model)"),NDe.forEach(t),wqr=i(ae),r5=n(ae,"LI",{});var qDe=s(r5);w4e=n(qDe,"STRONG",{});var tIt=s(w4e);Aqr=r(tIt,"xlm-roberta"),tIt.forEach(t),Lqr=r(qDe," \u2014 "),EZ=n(qDe,"A",{href:!0});var aIt=s(EZ);yqr=r(aIt,"FlaxXLMRobertaModel"),aIt.forEach(t),xqr=r(qDe," (XLM-RoBERTa model)"),qDe.forEach(t),ae.forEach(t),$qr=i(Zl),T(t5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),YVe=i(f),Qc=n(f,"H2",{class:!0});var sQe=s(Qc);a5=n(sQe,"A",{id:!0,class:!0,href:!0});var nIt=s(a5);A4e=n(nIt,"SPAN",{});var sIt=s(A4e);T(Xx.$$.fragment,sIt),sIt.forEach(t),nIt.forEach(t),kqr=i(sQe),L4e=n(sQe,"SPAN",{});var lIt=s(L4e);Sqr=r(lIt,"FlaxAutoModelForCausalLM"),lIt.forEach(t),sQe.forEach(t),KVe=i(f),pr=n(f,"DIV",{class:!0});var ei=s(pr);T(zx.$$.fragment,ei),Rqr=i(ei),Wc=n(ei,"P",{});var ate=s(Wc);Pqr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CZ=n(ate,"A",{href:!0});var iIt=s(CZ);Bqr=r(iIt,"from_pretrained()"),iIt.forEach(t),Iqr=r(ate," class method or the "),wZ=n(ate,"A",{href:!0});var dIt=s(wZ);Nqr=r(dIt,"from_config()"),dIt.forEach(t),qqr=r(ate,` class
method.`),ate.forEach(t),jqr=i(ei),Qx=n(ei,"P",{});var lQe=s(Qx);Dqr=r(lQe,"This class cannot be instantiated directly using "),y4e=n(lQe,"CODE",{});var cIt=s(y4e);Gqr=r(cIt,"__init__()"),cIt.forEach(t),Oqr=r(lQe," (throws an error)."),lQe.forEach(t),Vqr=i(ei),zt=n(ei,"DIV",{class:!0});var cA=s(zt);T(Wx.$$.fragment,cA),Xqr=i(cA),x4e=n(cA,"P",{});var fIt=s(x4e);zqr=r(fIt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fIt.forEach(t),Qqr=i(cA),Hc=n(cA,"P",{});var nte=s(Hc);Wqr=r(nte,`Note:
Loading a model from its configuration file does `),$4e=n(nte,"STRONG",{});var mIt=s($4e);Hqr=r(mIt,"not"),mIt.forEach(t),Uqr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=n(nte,"A",{href:!0});var gIt=s(AZ);Jqr=r(gIt,"from_pretrained()"),gIt.forEach(t),Yqr=r(nte," to load the model weights."),nte.forEach(t),Kqr=i(cA),T(n5.$$.fragment,cA),cA.forEach(t),Zqr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(Hx.$$.fragment,oi),ejr=i(oi),k4e=n(oi,"P",{});var hIt=s(k4e);ojr=r(hIt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hIt.forEach(t),rjr=i(oi),Tn=n(oi,"P",{});var fA=s(Tn);tjr=r(fA,"The model class to instantiate is selected based on the "),S4e=n(fA,"CODE",{});var pIt=s(S4e);ajr=r(pIt,"model_type"),pIt.forEach(t),njr=r(fA,` property of the config object (either
passed as an argument or loaded from `),R4e=n(fA,"CODE",{});var _It=s(R4e);sjr=r(_It,"pretrained_model_name_or_path"),_It.forEach(t),ljr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=n(fA,"CODE",{});var uIt=s(P4e);ijr=r(uIt,"pretrained_model_name_or_path"),uIt.forEach(t),djr=r(fA,":"),fA.forEach(t),cjr=i(oi),xe=n(oi,"UL",{});var Ne=s(xe);s5=n(Ne,"LI",{});var jDe=s(s5);B4e=n(jDe,"STRONG",{});var bIt=s(B4e);fjr=r(bIt,"bart"),bIt.forEach(t),mjr=r(jDe," \u2014 "),LZ=n(jDe,"A",{href:!0});var vIt=s(LZ);gjr=r(vIt,"FlaxBartForCausalLM"),vIt.forEach(t),hjr=r(jDe," (BART model)"),jDe.forEach(t),pjr=i(Ne),l5=n(Ne,"LI",{});var DDe=s(l5);I4e=n(DDe,"STRONG",{});var FIt=s(I4e);_jr=r(FIt,"bert"),FIt.forEach(t),ujr=r(DDe," \u2014 "),yZ=n(DDe,"A",{href:!0});var TIt=s(yZ);bjr=r(TIt,"FlaxBertForCausalLM"),TIt.forEach(t),vjr=r(DDe," (BERT model)"),DDe.forEach(t),Fjr=i(Ne),i5=n(Ne,"LI",{});var GDe=s(i5);N4e=n(GDe,"STRONG",{});var MIt=s(N4e);Tjr=r(MIt,"big_bird"),MIt.forEach(t),Mjr=r(GDe," \u2014 "),xZ=n(GDe,"A",{href:!0});var EIt=s(xZ);Ejr=r(EIt,"FlaxBigBirdForCausalLM"),EIt.forEach(t),Cjr=r(GDe," (BigBird model)"),GDe.forEach(t),wjr=i(Ne),d5=n(Ne,"LI",{});var ODe=s(d5);q4e=n(ODe,"STRONG",{});var CIt=s(q4e);Ajr=r(CIt,"electra"),CIt.forEach(t),Ljr=r(ODe," \u2014 "),$Z=n(ODe,"A",{href:!0});var wIt=s($Z);yjr=r(wIt,"FlaxElectraForCausalLM"),wIt.forEach(t),xjr=r(ODe," (ELECTRA model)"),ODe.forEach(t),$jr=i(Ne),c5=n(Ne,"LI",{});var VDe=s(c5);j4e=n(VDe,"STRONG",{});var AIt=s(j4e);kjr=r(AIt,"gpt2"),AIt.forEach(t),Sjr=r(VDe," \u2014 "),kZ=n(VDe,"A",{href:!0});var LIt=s(kZ);Rjr=r(LIt,"FlaxGPT2LMHeadModel"),LIt.forEach(t),Pjr=r(VDe," (OpenAI GPT-2 model)"),VDe.forEach(t),Bjr=i(Ne),f5=n(Ne,"LI",{});var XDe=s(f5);D4e=n(XDe,"STRONG",{});var yIt=s(D4e);Ijr=r(yIt,"gpt_neo"),yIt.forEach(t),Njr=r(XDe," \u2014 "),SZ=n(XDe,"A",{href:!0});var xIt=s(SZ);qjr=r(xIt,"FlaxGPTNeoForCausalLM"),xIt.forEach(t),jjr=r(XDe," (GPT Neo model)"),XDe.forEach(t),Djr=i(Ne),m5=n(Ne,"LI",{});var zDe=s(m5);G4e=n(zDe,"STRONG",{});var $It=s(G4e);Gjr=r($It,"gptj"),$It.forEach(t),Ojr=r(zDe," \u2014 "),RZ=n(zDe,"A",{href:!0});var kIt=s(RZ);Vjr=r(kIt,"FlaxGPTJForCausalLM"),kIt.forEach(t),Xjr=r(zDe," (GPT-J model)"),zDe.forEach(t),zjr=i(Ne),g5=n(Ne,"LI",{});var QDe=s(g5);O4e=n(QDe,"STRONG",{});var SIt=s(O4e);Qjr=r(SIt,"opt"),SIt.forEach(t),Wjr=r(QDe," \u2014 "),PZ=n(QDe,"A",{href:!0});var RIt=s(PZ);Hjr=r(RIt,"FlaxOPTForCausalLM"),RIt.forEach(t),Ujr=r(QDe," (OPT model)"),QDe.forEach(t),Jjr=i(Ne),h5=n(Ne,"LI",{});var WDe=s(h5);V4e=n(WDe,"STRONG",{});var PIt=s(V4e);Yjr=r(PIt,"roberta"),PIt.forEach(t),Kjr=r(WDe," \u2014 "),BZ=n(WDe,"A",{href:!0});var BIt=s(BZ);Zjr=r(BIt,"FlaxRobertaForCausalLM"),BIt.forEach(t),eDr=r(WDe," (RoBERTa model)"),WDe.forEach(t),oDr=i(Ne),p5=n(Ne,"LI",{});var HDe=s(p5);X4e=n(HDe,"STRONG",{});var IIt=s(X4e);rDr=r(IIt,"xglm"),IIt.forEach(t),tDr=r(HDe," \u2014 "),IZ=n(HDe,"A",{href:!0});var NIt=s(IZ);aDr=r(NIt,"FlaxXGLMForCausalLM"),NIt.forEach(t),nDr=r(HDe," (XGLM model)"),HDe.forEach(t),Ne.forEach(t),sDr=i(oi),T(_5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),ZVe=i(f),Uc=n(f,"H2",{class:!0});var iQe=s(Uc);u5=n(iQe,"A",{id:!0,class:!0,href:!0});var qIt=s(u5);z4e=n(qIt,"SPAN",{});var jIt=s(z4e);T(Ux.$$.fragment,jIt),jIt.forEach(t),qIt.forEach(t),lDr=i(iQe),Q4e=n(iQe,"SPAN",{});var DIt=s(Q4e);iDr=r(DIt,"FlaxAutoModelForPreTraining"),DIt.forEach(t),iQe.forEach(t),eXe=i(f),_r=n(f,"DIV",{class:!0});var ri=s(_r);T(Jx.$$.fragment,ri),dDr=i(ri),Jc=n(ri,"P",{});var ste=s(Jc);cDr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NZ=n(ste,"A",{href:!0});var GIt=s(NZ);fDr=r(GIt,"from_pretrained()"),GIt.forEach(t),mDr=r(ste," class method or the "),qZ=n(ste,"A",{href:!0});var OIt=s(qZ);gDr=r(OIt,"from_config()"),OIt.forEach(t),hDr=r(ste,` class
method.`),ste.forEach(t),pDr=i(ri),Yx=n(ri,"P",{});var dQe=s(Yx);_Dr=r(dQe,"This class cannot be instantiated directly using "),W4e=n(dQe,"CODE",{});var VIt=s(W4e);uDr=r(VIt,"__init__()"),VIt.forEach(t),bDr=r(dQe," (throws an error)."),dQe.forEach(t),vDr=i(ri),Qt=n(ri,"DIV",{class:!0});var mA=s(Qt);T(Kx.$$.fragment,mA),FDr=i(mA),H4e=n(mA,"P",{});var XIt=s(H4e);TDr=r(XIt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),XIt.forEach(t),MDr=i(mA),Yc=n(mA,"P",{});var lte=s(Yc);EDr=r(lte,`Note:
Loading a model from its configuration file does `),U4e=n(lte,"STRONG",{});var zIt=s(U4e);CDr=r(zIt,"not"),zIt.forEach(t),wDr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=n(lte,"A",{href:!0});var QIt=s(jZ);ADr=r(QIt,"from_pretrained()"),QIt.forEach(t),LDr=r(lte," to load the model weights."),lte.forEach(t),yDr=i(mA),T(b5.$$.fragment,mA),mA.forEach(t),xDr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(Zx.$$.fragment,ti),$Dr=i(ti),J4e=n(ti,"P",{});var WIt=s(J4e);kDr=r(WIt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WIt.forEach(t),SDr=i(ti),Mn=n(ti,"P",{});var gA=s(Mn);RDr=r(gA,"The model class to instantiate is selected based on the "),Y4e=n(gA,"CODE",{});var HIt=s(Y4e);PDr=r(HIt,"model_type"),HIt.forEach(t),BDr=r(gA,` property of the config object (either
passed as an argument or loaded from `),K4e=n(gA,"CODE",{});var UIt=s(K4e);IDr=r(UIt,"pretrained_model_name_or_path"),UIt.forEach(t),NDr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=n(gA,"CODE",{});var JIt=s(Z4e);qDr=r(JIt,"pretrained_model_name_or_path"),JIt.forEach(t),jDr=r(gA,":"),gA.forEach(t),DDr=i(ti),Ee=n(ti,"UL",{});var we=s(Ee);v5=n(we,"LI",{});var UDe=s(v5);eCe=n(UDe,"STRONG",{});var YIt=s(eCe);GDr=r(YIt,"albert"),YIt.forEach(t),ODr=r(UDe," \u2014 "),DZ=n(UDe,"A",{href:!0});var KIt=s(DZ);VDr=r(KIt,"FlaxAlbertForPreTraining"),KIt.forEach(t),XDr=r(UDe," (ALBERT model)"),UDe.forEach(t),zDr=i(we),F5=n(we,"LI",{});var JDe=s(F5);oCe=n(JDe,"STRONG",{});var ZIt=s(oCe);QDr=r(ZIt,"bart"),ZIt.forEach(t),WDr=r(JDe," \u2014 "),GZ=n(JDe,"A",{href:!0});var eNt=s(GZ);HDr=r(eNt,"FlaxBartForConditionalGeneration"),eNt.forEach(t),UDr=r(JDe," (BART model)"),JDe.forEach(t),JDr=i(we),T5=n(we,"LI",{});var YDe=s(T5);rCe=n(YDe,"STRONG",{});var oNt=s(rCe);YDr=r(oNt,"bert"),oNt.forEach(t),KDr=r(YDe," \u2014 "),OZ=n(YDe,"A",{href:!0});var rNt=s(OZ);ZDr=r(rNt,"FlaxBertForPreTraining"),rNt.forEach(t),eGr=r(YDe," (BERT model)"),YDe.forEach(t),oGr=i(we),M5=n(we,"LI",{});var KDe=s(M5);tCe=n(KDe,"STRONG",{});var tNt=s(tCe);rGr=r(tNt,"big_bird"),tNt.forEach(t),tGr=r(KDe," \u2014 "),VZ=n(KDe,"A",{href:!0});var aNt=s(VZ);aGr=r(aNt,"FlaxBigBirdForPreTraining"),aNt.forEach(t),nGr=r(KDe," (BigBird model)"),KDe.forEach(t),sGr=i(we),E5=n(we,"LI",{});var ZDe=s(E5);aCe=n(ZDe,"STRONG",{});var nNt=s(aCe);lGr=r(nNt,"electra"),nNt.forEach(t),iGr=r(ZDe," \u2014 "),XZ=n(ZDe,"A",{href:!0});var sNt=s(XZ);dGr=r(sNt,"FlaxElectraForPreTraining"),sNt.forEach(t),cGr=r(ZDe," (ELECTRA model)"),ZDe.forEach(t),fGr=i(we),C5=n(we,"LI",{});var eGe=s(C5);nCe=n(eGe,"STRONG",{});var lNt=s(nCe);mGr=r(lNt,"longt5"),lNt.forEach(t),gGr=r(eGe," \u2014 "),zZ=n(eGe,"A",{href:!0});var iNt=s(zZ);hGr=r(iNt,"FlaxLongT5ForConditionalGeneration"),iNt.forEach(t),pGr=r(eGe," (LongT5 model)"),eGe.forEach(t),_Gr=i(we),w5=n(we,"LI",{});var oGe=s(w5);sCe=n(oGe,"STRONG",{});var dNt=s(sCe);uGr=r(dNt,"mbart"),dNt.forEach(t),bGr=r(oGe," \u2014 "),QZ=n(oGe,"A",{href:!0});var cNt=s(QZ);vGr=r(cNt,"FlaxMBartForConditionalGeneration"),cNt.forEach(t),FGr=r(oGe," (mBART model)"),oGe.forEach(t),TGr=i(we),A5=n(we,"LI",{});var rGe=s(A5);lCe=n(rGe,"STRONG",{});var fNt=s(lCe);MGr=r(fNt,"mt5"),fNt.forEach(t),EGr=r(rGe," \u2014 "),WZ=n(rGe,"A",{href:!0});var mNt=s(WZ);CGr=r(mNt,"FlaxMT5ForConditionalGeneration"),mNt.forEach(t),wGr=r(rGe," (MT5 model)"),rGe.forEach(t),AGr=i(we),L5=n(we,"LI",{});var tGe=s(L5);iCe=n(tGe,"STRONG",{});var gNt=s(iCe);LGr=r(gNt,"roberta"),gNt.forEach(t),yGr=r(tGe," \u2014 "),HZ=n(tGe,"A",{href:!0});var hNt=s(HZ);xGr=r(hNt,"FlaxRobertaForMaskedLM"),hNt.forEach(t),$Gr=r(tGe," (RoBERTa model)"),tGe.forEach(t),kGr=i(we),y5=n(we,"LI",{});var aGe=s(y5);dCe=n(aGe,"STRONG",{});var pNt=s(dCe);SGr=r(pNt,"roformer"),pNt.forEach(t),RGr=r(aGe," \u2014 "),UZ=n(aGe,"A",{href:!0});var _Nt=s(UZ);PGr=r(_Nt,"FlaxRoFormerForMaskedLM"),_Nt.forEach(t),BGr=r(aGe," (RoFormer model)"),aGe.forEach(t),IGr=i(we),x5=n(we,"LI",{});var nGe=s(x5);cCe=n(nGe,"STRONG",{});var uNt=s(cCe);NGr=r(uNt,"t5"),uNt.forEach(t),qGr=r(nGe," \u2014 "),JZ=n(nGe,"A",{href:!0});var bNt=s(JZ);jGr=r(bNt,"FlaxT5ForConditionalGeneration"),bNt.forEach(t),DGr=r(nGe," (T5 model)"),nGe.forEach(t),GGr=i(we),$5=n(we,"LI",{});var sGe=s($5);fCe=n(sGe,"STRONG",{});var vNt=s(fCe);OGr=r(vNt,"wav2vec2"),vNt.forEach(t),VGr=r(sGe," \u2014 "),YZ=n(sGe,"A",{href:!0});var FNt=s(YZ);XGr=r(FNt,"FlaxWav2Vec2ForPreTraining"),FNt.forEach(t),zGr=r(sGe," (Wav2Vec2 model)"),sGe.forEach(t),QGr=i(we),k5=n(we,"LI",{});var lGe=s(k5);mCe=n(lGe,"STRONG",{});var TNt=s(mCe);WGr=r(TNt,"xlm-roberta"),TNt.forEach(t),HGr=r(lGe," \u2014 "),KZ=n(lGe,"A",{href:!0});var MNt=s(KZ);UGr=r(MNt,"FlaxXLMRobertaForMaskedLM"),MNt.forEach(t),JGr=r(lGe," (XLM-RoBERTa model)"),lGe.forEach(t),we.forEach(t),YGr=i(ti),T(S5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),oXe=i(f),Kc=n(f,"H2",{class:!0});var cQe=s(Kc);R5=n(cQe,"A",{id:!0,class:!0,href:!0});var ENt=s(R5);gCe=n(ENt,"SPAN",{});var CNt=s(gCe);T(e$.$$.fragment,CNt),CNt.forEach(t),ENt.forEach(t),KGr=i(cQe),hCe=n(cQe,"SPAN",{});var wNt=s(hCe);ZGr=r(wNt,"FlaxAutoModelForMaskedLM"),wNt.forEach(t),cQe.forEach(t),rXe=i(f),ur=n(f,"DIV",{class:!0});var ai=s(ur);T(o$.$$.fragment,ai),eOr=i(ai),Zc=n(ai,"P",{});var ite=s(Zc);oOr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZZ=n(ite,"A",{href:!0});var ANt=s(ZZ);rOr=r(ANt,"from_pretrained()"),ANt.forEach(t),tOr=r(ite," class method or the "),eee=n(ite,"A",{href:!0});var LNt=s(eee);aOr=r(LNt,"from_config()"),LNt.forEach(t),nOr=r(ite,` class
method.`),ite.forEach(t),sOr=i(ai),r$=n(ai,"P",{});var fQe=s(r$);lOr=r(fQe,"This class cannot be instantiated directly using "),pCe=n(fQe,"CODE",{});var yNt=s(pCe);iOr=r(yNt,"__init__()"),yNt.forEach(t),dOr=r(fQe," (throws an error)."),fQe.forEach(t),cOr=i(ai),Wt=n(ai,"DIV",{class:!0});var hA=s(Wt);T(t$.$$.fragment,hA),fOr=i(hA),_Ce=n(hA,"P",{});var xNt=s(_Ce);mOr=r(xNt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xNt.forEach(t),gOr=i(hA),ef=n(hA,"P",{});var dte=s(ef);hOr=r(dte,`Note:
Loading a model from its configuration file does `),uCe=n(dte,"STRONG",{});var $Nt=s(uCe);pOr=r($Nt,"not"),$Nt.forEach(t),_Or=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(dte,"A",{href:!0});var kNt=s(oee);uOr=r(kNt,"from_pretrained()"),kNt.forEach(t),bOr=r(dte," to load the model weights."),dte.forEach(t),vOr=i(hA),T(P5.$$.fragment,hA),hA.forEach(t),FOr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(a$.$$.fragment,ni),TOr=i(ni),bCe=n(ni,"P",{});var SNt=s(bCe);MOr=r(SNt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),SNt.forEach(t),EOr=i(ni),En=n(ni,"P",{});var pA=s(En);COr=r(pA,"The model class to instantiate is selected based on the "),vCe=n(pA,"CODE",{});var RNt=s(vCe);wOr=r(RNt,"model_type"),RNt.forEach(t),AOr=r(pA,` property of the config object (either
passed as an argument or loaded from `),FCe=n(pA,"CODE",{});var PNt=s(FCe);LOr=r(PNt,"pretrained_model_name_or_path"),PNt.forEach(t),yOr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TCe=n(pA,"CODE",{});var BNt=s(TCe);xOr=r(BNt,"pretrained_model_name_or_path"),BNt.forEach(t),$Or=r(pA,":"),pA.forEach(t),kOr=i(ni),$e=n(ni,"UL",{});var qe=s($e);B5=n(qe,"LI",{});var iGe=s(B5);MCe=n(iGe,"STRONG",{});var INt=s(MCe);SOr=r(INt,"albert"),INt.forEach(t),ROr=r(iGe," \u2014 "),ree=n(iGe,"A",{href:!0});var NNt=s(ree);POr=r(NNt,"FlaxAlbertForMaskedLM"),NNt.forEach(t),BOr=r(iGe," (ALBERT model)"),iGe.forEach(t),IOr=i(qe),I5=n(qe,"LI",{});var dGe=s(I5);ECe=n(dGe,"STRONG",{});var qNt=s(ECe);NOr=r(qNt,"bart"),qNt.forEach(t),qOr=r(dGe," \u2014 "),tee=n(dGe,"A",{href:!0});var jNt=s(tee);jOr=r(jNt,"FlaxBartForConditionalGeneration"),jNt.forEach(t),DOr=r(dGe," (BART model)"),dGe.forEach(t),GOr=i(qe),N5=n(qe,"LI",{});var cGe=s(N5);CCe=n(cGe,"STRONG",{});var DNt=s(CCe);OOr=r(DNt,"bert"),DNt.forEach(t),VOr=r(cGe," \u2014 "),aee=n(cGe,"A",{href:!0});var GNt=s(aee);XOr=r(GNt,"FlaxBertForMaskedLM"),GNt.forEach(t),zOr=r(cGe," (BERT model)"),cGe.forEach(t),QOr=i(qe),q5=n(qe,"LI",{});var fGe=s(q5);wCe=n(fGe,"STRONG",{});var ONt=s(wCe);WOr=r(ONt,"big_bird"),ONt.forEach(t),HOr=r(fGe," \u2014 "),nee=n(fGe,"A",{href:!0});var VNt=s(nee);UOr=r(VNt,"FlaxBigBirdForMaskedLM"),VNt.forEach(t),JOr=r(fGe," (BigBird model)"),fGe.forEach(t),YOr=i(qe),j5=n(qe,"LI",{});var mGe=s(j5);ACe=n(mGe,"STRONG",{});var XNt=s(ACe);KOr=r(XNt,"distilbert"),XNt.forEach(t),ZOr=r(mGe," \u2014 "),see=n(mGe,"A",{href:!0});var zNt=s(see);eVr=r(zNt,"FlaxDistilBertForMaskedLM"),zNt.forEach(t),oVr=r(mGe," (DistilBERT model)"),mGe.forEach(t),rVr=i(qe),D5=n(qe,"LI",{});var gGe=s(D5);LCe=n(gGe,"STRONG",{});var QNt=s(LCe);tVr=r(QNt,"electra"),QNt.forEach(t),aVr=r(gGe," \u2014 "),lee=n(gGe,"A",{href:!0});var WNt=s(lee);nVr=r(WNt,"FlaxElectraForMaskedLM"),WNt.forEach(t),sVr=r(gGe," (ELECTRA model)"),gGe.forEach(t),lVr=i(qe),G5=n(qe,"LI",{});var hGe=s(G5);yCe=n(hGe,"STRONG",{});var HNt=s(yCe);iVr=r(HNt,"mbart"),HNt.forEach(t),dVr=r(hGe," \u2014 "),iee=n(hGe,"A",{href:!0});var UNt=s(iee);cVr=r(UNt,"FlaxMBartForConditionalGeneration"),UNt.forEach(t),fVr=r(hGe," (mBART model)"),hGe.forEach(t),mVr=i(qe),O5=n(qe,"LI",{});var pGe=s(O5);xCe=n(pGe,"STRONG",{});var JNt=s(xCe);gVr=r(JNt,"roberta"),JNt.forEach(t),hVr=r(pGe," \u2014 "),dee=n(pGe,"A",{href:!0});var YNt=s(dee);pVr=r(YNt,"FlaxRobertaForMaskedLM"),YNt.forEach(t),_Vr=r(pGe," (RoBERTa model)"),pGe.forEach(t),uVr=i(qe),V5=n(qe,"LI",{});var _Ge=s(V5);$Ce=n(_Ge,"STRONG",{});var KNt=s($Ce);bVr=r(KNt,"roformer"),KNt.forEach(t),vVr=r(_Ge," \u2014 "),cee=n(_Ge,"A",{href:!0});var ZNt=s(cee);FVr=r(ZNt,"FlaxRoFormerForMaskedLM"),ZNt.forEach(t),TVr=r(_Ge," (RoFormer model)"),_Ge.forEach(t),MVr=i(qe),X5=n(qe,"LI",{});var uGe=s(X5);kCe=n(uGe,"STRONG",{});var eqt=s(kCe);EVr=r(eqt,"xlm-roberta"),eqt.forEach(t),CVr=r(uGe," \u2014 "),fee=n(uGe,"A",{href:!0});var oqt=s(fee);wVr=r(oqt,"FlaxXLMRobertaForMaskedLM"),oqt.forEach(t),AVr=r(uGe," (XLM-RoBERTa model)"),uGe.forEach(t),qe.forEach(t),LVr=i(ni),T(z5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),tXe=i(f),of=n(f,"H2",{class:!0});var mQe=s(of);Q5=n(mQe,"A",{id:!0,class:!0,href:!0});var rqt=s(Q5);SCe=n(rqt,"SPAN",{});var tqt=s(SCe);T(n$.$$.fragment,tqt),tqt.forEach(t),rqt.forEach(t),yVr=i(mQe),RCe=n(mQe,"SPAN",{});var aqt=s(RCe);xVr=r(aqt,"FlaxAutoModelForSeq2SeqLM"),aqt.forEach(t),mQe.forEach(t),aXe=i(f),br=n(f,"DIV",{class:!0});var si=s(br);T(s$.$$.fragment,si),$Vr=i(si),rf=n(si,"P",{});var cte=s(rf);kVr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mee=n(cte,"A",{href:!0});var nqt=s(mee);SVr=r(nqt,"from_pretrained()"),nqt.forEach(t),RVr=r(cte," class method or the "),gee=n(cte,"A",{href:!0});var sqt=s(gee);PVr=r(sqt,"from_config()"),sqt.forEach(t),BVr=r(cte,` class
method.`),cte.forEach(t),IVr=i(si),l$=n(si,"P",{});var gQe=s(l$);NVr=r(gQe,"This class cannot be instantiated directly using "),PCe=n(gQe,"CODE",{});var lqt=s(PCe);qVr=r(lqt,"__init__()"),lqt.forEach(t),jVr=r(gQe," (throws an error)."),gQe.forEach(t),DVr=i(si),Ht=n(si,"DIV",{class:!0});var _A=s(Ht);T(i$.$$.fragment,_A),GVr=i(_A),BCe=n(_A,"P",{});var iqt=s(BCe);OVr=r(iqt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iqt.forEach(t),VVr=i(_A),tf=n(_A,"P",{});var fte=s(tf);XVr=r(fte,`Note:
Loading a model from its configuration file does `),ICe=n(fte,"STRONG",{});var dqt=s(ICe);zVr=r(dqt,"not"),dqt.forEach(t),QVr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hee=n(fte,"A",{href:!0});var cqt=s(hee);WVr=r(cqt,"from_pretrained()"),cqt.forEach(t),HVr=r(fte," to load the model weights."),fte.forEach(t),UVr=i(_A),T(W5.$$.fragment,_A),_A.forEach(t),JVr=i(si),Qr=n(si,"DIV",{class:!0});var li=s(Qr);T(d$.$$.fragment,li),YVr=i(li),NCe=n(li,"P",{});var fqt=s(NCe);KVr=r(fqt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fqt.forEach(t),ZVr=i(li),Cn=n(li,"P",{});var uA=s(Cn);eXr=r(uA,"The model class to instantiate is selected based on the "),qCe=n(uA,"CODE",{});var mqt=s(qCe);oXr=r(mqt,"model_type"),mqt.forEach(t),rXr=r(uA,` property of the config object (either
passed as an argument or loaded from `),jCe=n(uA,"CODE",{});var gqt=s(jCe);tXr=r(gqt,"pretrained_model_name_or_path"),gqt.forEach(t),aXr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DCe=n(uA,"CODE",{});var hqt=s(DCe);nXr=r(hqt,"pretrained_model_name_or_path"),hqt.forEach(t),sXr=r(uA,":"),uA.forEach(t),lXr=i(li),ke=n(li,"UL",{});var je=s(ke);H5=n(je,"LI",{});var bGe=s(H5);GCe=n(bGe,"STRONG",{});var pqt=s(GCe);iXr=r(pqt,"bart"),pqt.forEach(t),dXr=r(bGe," \u2014 "),pee=n(bGe,"A",{href:!0});var _qt=s(pee);cXr=r(_qt,"FlaxBartForConditionalGeneration"),_qt.forEach(t),fXr=r(bGe," (BART model)"),bGe.forEach(t),mXr=i(je),U5=n(je,"LI",{});var vGe=s(U5);OCe=n(vGe,"STRONG",{});var uqt=s(OCe);gXr=r(uqt,"blenderbot"),uqt.forEach(t),hXr=r(vGe," \u2014 "),_ee=n(vGe,"A",{href:!0});var bqt=s(_ee);pXr=r(bqt,"FlaxBlenderbotForConditionalGeneration"),bqt.forEach(t),_Xr=r(vGe," (Blenderbot model)"),vGe.forEach(t),uXr=i(je),J5=n(je,"LI",{});var FGe=s(J5);VCe=n(FGe,"STRONG",{});var vqt=s(VCe);bXr=r(vqt,"blenderbot-small"),vqt.forEach(t),vXr=r(FGe," \u2014 "),uee=n(FGe,"A",{href:!0});var Fqt=s(uee);FXr=r(Fqt,"FlaxBlenderbotSmallForConditionalGeneration"),Fqt.forEach(t),TXr=r(FGe," (BlenderbotSmall model)"),FGe.forEach(t),MXr=i(je),Y5=n(je,"LI",{});var TGe=s(Y5);XCe=n(TGe,"STRONG",{});var Tqt=s(XCe);EXr=r(Tqt,"encoder-decoder"),Tqt.forEach(t),CXr=r(TGe," \u2014 "),bee=n(TGe,"A",{href:!0});var Mqt=s(bee);wXr=r(Mqt,"FlaxEncoderDecoderModel"),Mqt.forEach(t),AXr=r(TGe," (Encoder decoder model)"),TGe.forEach(t),LXr=i(je),K5=n(je,"LI",{});var MGe=s(K5);zCe=n(MGe,"STRONG",{});var Eqt=s(zCe);yXr=r(Eqt,"longt5"),Eqt.forEach(t),xXr=r(MGe," \u2014 "),vee=n(MGe,"A",{href:!0});var Cqt=s(vee);$Xr=r(Cqt,"FlaxLongT5ForConditionalGeneration"),Cqt.forEach(t),kXr=r(MGe," (LongT5 model)"),MGe.forEach(t),SXr=i(je),Z5=n(je,"LI",{});var EGe=s(Z5);QCe=n(EGe,"STRONG",{});var wqt=s(QCe);RXr=r(wqt,"marian"),wqt.forEach(t),PXr=r(EGe," \u2014 "),Fee=n(EGe,"A",{href:!0});var Aqt=s(Fee);BXr=r(Aqt,"FlaxMarianMTModel"),Aqt.forEach(t),IXr=r(EGe," (Marian model)"),EGe.forEach(t),NXr=i(je),e3=n(je,"LI",{});var CGe=s(e3);WCe=n(CGe,"STRONG",{});var Lqt=s(WCe);qXr=r(Lqt,"mbart"),Lqt.forEach(t),jXr=r(CGe," \u2014 "),Tee=n(CGe,"A",{href:!0});var yqt=s(Tee);DXr=r(yqt,"FlaxMBartForConditionalGeneration"),yqt.forEach(t),GXr=r(CGe," (mBART model)"),CGe.forEach(t),OXr=i(je),o3=n(je,"LI",{});var wGe=s(o3);HCe=n(wGe,"STRONG",{});var xqt=s(HCe);VXr=r(xqt,"mt5"),xqt.forEach(t),XXr=r(wGe," \u2014 "),Mee=n(wGe,"A",{href:!0});var $qt=s(Mee);zXr=r($qt,"FlaxMT5ForConditionalGeneration"),$qt.forEach(t),QXr=r(wGe," (MT5 model)"),wGe.forEach(t),WXr=i(je),r3=n(je,"LI",{});var AGe=s(r3);UCe=n(AGe,"STRONG",{});var kqt=s(UCe);HXr=r(kqt,"pegasus"),kqt.forEach(t),UXr=r(AGe," \u2014 "),Eee=n(AGe,"A",{href:!0});var Sqt=s(Eee);JXr=r(Sqt,"FlaxPegasusForConditionalGeneration"),Sqt.forEach(t),YXr=r(AGe," (Pegasus model)"),AGe.forEach(t),KXr=i(je),t3=n(je,"LI",{});var LGe=s(t3);JCe=n(LGe,"STRONG",{});var Rqt=s(JCe);ZXr=r(Rqt,"t5"),Rqt.forEach(t),ezr=r(LGe," \u2014 "),Cee=n(LGe,"A",{href:!0});var Pqt=s(Cee);ozr=r(Pqt,"FlaxT5ForConditionalGeneration"),Pqt.forEach(t),rzr=r(LGe," (T5 model)"),LGe.forEach(t),je.forEach(t),tzr=i(li),T(a3.$$.fragment,li),li.forEach(t),si.forEach(t),nXe=i(f),af=n(f,"H2",{class:!0});var hQe=s(af);n3=n(hQe,"A",{id:!0,class:!0,href:!0});var Bqt=s(n3);YCe=n(Bqt,"SPAN",{});var Iqt=s(YCe);T(c$.$$.fragment,Iqt),Iqt.forEach(t),Bqt.forEach(t),azr=i(hQe),KCe=n(hQe,"SPAN",{});var Nqt=s(KCe);nzr=r(Nqt,"FlaxAutoModelForSequenceClassification"),Nqt.forEach(t),hQe.forEach(t),sXe=i(f),vr=n(f,"DIV",{class:!0});var ii=s(vr);T(f$.$$.fragment,ii),szr=i(ii),nf=n(ii,"P",{});var mte=s(nf);lzr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wee=n(mte,"A",{href:!0});var qqt=s(wee);izr=r(qqt,"from_pretrained()"),qqt.forEach(t),dzr=r(mte," class method or the "),Aee=n(mte,"A",{href:!0});var jqt=s(Aee);czr=r(jqt,"from_config()"),jqt.forEach(t),fzr=r(mte,` class
method.`),mte.forEach(t),mzr=i(ii),m$=n(ii,"P",{});var pQe=s(m$);gzr=r(pQe,"This class cannot be instantiated directly using "),ZCe=n(pQe,"CODE",{});var Dqt=s(ZCe);hzr=r(Dqt,"__init__()"),Dqt.forEach(t),pzr=r(pQe," (throws an error)."),pQe.forEach(t),_zr=i(ii),Ut=n(ii,"DIV",{class:!0});var bA=s(Ut);T(g$.$$.fragment,bA),uzr=i(bA),e5e=n(bA,"P",{});var Gqt=s(e5e);bzr=r(Gqt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Gqt.forEach(t),vzr=i(bA),sf=n(bA,"P",{});var gte=s(sf);Fzr=r(gte,`Note:
Loading a model from its configuration file does `),o5e=n(gte,"STRONG",{});var Oqt=s(o5e);Tzr=r(Oqt,"not"),Oqt.forEach(t),Mzr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=n(gte,"A",{href:!0});var Vqt=s(Lee);Ezr=r(Vqt,"from_pretrained()"),Vqt.forEach(t),Czr=r(gte," to load the model weights."),gte.forEach(t),wzr=i(bA),T(s3.$$.fragment,bA),bA.forEach(t),Azr=i(ii),Wr=n(ii,"DIV",{class:!0});var di=s(Wr);T(h$.$$.fragment,di),Lzr=i(di),r5e=n(di,"P",{});var Xqt=s(r5e);yzr=r(Xqt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Xqt.forEach(t),xzr=i(di),wn=n(di,"P",{});var vA=s(wn);$zr=r(vA,"The model class to instantiate is selected based on the "),t5e=n(vA,"CODE",{});var zqt=s(t5e);kzr=r(zqt,"model_type"),zqt.forEach(t),Szr=r(vA,` property of the config object (either
passed as an argument or loaded from `),a5e=n(vA,"CODE",{});var Qqt=s(a5e);Rzr=r(Qqt,"pretrained_model_name_or_path"),Qqt.forEach(t),Pzr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=n(vA,"CODE",{});var Wqt=s(n5e);Bzr=r(Wqt,"pretrained_model_name_or_path"),Wqt.forEach(t),Izr=r(vA,":"),vA.forEach(t),Nzr=i(di),Se=n(di,"UL",{});var De=s(Se);l3=n(De,"LI",{});var yGe=s(l3);s5e=n(yGe,"STRONG",{});var Hqt=s(s5e);qzr=r(Hqt,"albert"),Hqt.forEach(t),jzr=r(yGe," \u2014 "),yee=n(yGe,"A",{href:!0});var Uqt=s(yee);Dzr=r(Uqt,"FlaxAlbertForSequenceClassification"),Uqt.forEach(t),Gzr=r(yGe," (ALBERT model)"),yGe.forEach(t),Ozr=i(De),i3=n(De,"LI",{});var xGe=s(i3);l5e=n(xGe,"STRONG",{});var Jqt=s(l5e);Vzr=r(Jqt,"bart"),Jqt.forEach(t),Xzr=r(xGe," \u2014 "),xee=n(xGe,"A",{href:!0});var Yqt=s(xee);zzr=r(Yqt,"FlaxBartForSequenceClassification"),Yqt.forEach(t),Qzr=r(xGe," (BART model)"),xGe.forEach(t),Wzr=i(De),d3=n(De,"LI",{});var $Ge=s(d3);i5e=n($Ge,"STRONG",{});var Kqt=s(i5e);Hzr=r(Kqt,"bert"),Kqt.forEach(t),Uzr=r($Ge," \u2014 "),$ee=n($Ge,"A",{href:!0});var Zqt=s($ee);Jzr=r(Zqt,"FlaxBertForSequenceClassification"),Zqt.forEach(t),Yzr=r($Ge," (BERT model)"),$Ge.forEach(t),Kzr=i(De),c3=n(De,"LI",{});var kGe=s(c3);d5e=n(kGe,"STRONG",{});var ejt=s(d5e);Zzr=r(ejt,"big_bird"),ejt.forEach(t),eQr=r(kGe," \u2014 "),kee=n(kGe,"A",{href:!0});var ojt=s(kee);oQr=r(ojt,"FlaxBigBirdForSequenceClassification"),ojt.forEach(t),rQr=r(kGe," (BigBird model)"),kGe.forEach(t),tQr=i(De),f3=n(De,"LI",{});var SGe=s(f3);c5e=n(SGe,"STRONG",{});var rjt=s(c5e);aQr=r(rjt,"distilbert"),rjt.forEach(t),nQr=r(SGe," \u2014 "),See=n(SGe,"A",{href:!0});var tjt=s(See);sQr=r(tjt,"FlaxDistilBertForSequenceClassification"),tjt.forEach(t),lQr=r(SGe," (DistilBERT model)"),SGe.forEach(t),iQr=i(De),m3=n(De,"LI",{});var RGe=s(m3);f5e=n(RGe,"STRONG",{});var ajt=s(f5e);dQr=r(ajt,"electra"),ajt.forEach(t),cQr=r(RGe," \u2014 "),Ree=n(RGe,"A",{href:!0});var njt=s(Ree);fQr=r(njt,"FlaxElectraForSequenceClassification"),njt.forEach(t),mQr=r(RGe," (ELECTRA model)"),RGe.forEach(t),gQr=i(De),g3=n(De,"LI",{});var PGe=s(g3);m5e=n(PGe,"STRONG",{});var sjt=s(m5e);hQr=r(sjt,"mbart"),sjt.forEach(t),pQr=r(PGe," \u2014 "),Pee=n(PGe,"A",{href:!0});var ljt=s(Pee);_Qr=r(ljt,"FlaxMBartForSequenceClassification"),ljt.forEach(t),uQr=r(PGe," (mBART model)"),PGe.forEach(t),bQr=i(De),h3=n(De,"LI",{});var BGe=s(h3);g5e=n(BGe,"STRONG",{});var ijt=s(g5e);vQr=r(ijt,"roberta"),ijt.forEach(t),FQr=r(BGe," \u2014 "),Bee=n(BGe,"A",{href:!0});var djt=s(Bee);TQr=r(djt,"FlaxRobertaForSequenceClassification"),djt.forEach(t),MQr=r(BGe," (RoBERTa model)"),BGe.forEach(t),EQr=i(De),p3=n(De,"LI",{});var IGe=s(p3);h5e=n(IGe,"STRONG",{});var cjt=s(h5e);CQr=r(cjt,"roformer"),cjt.forEach(t),wQr=r(IGe," \u2014 "),Iee=n(IGe,"A",{href:!0});var fjt=s(Iee);AQr=r(fjt,"FlaxRoFormerForSequenceClassification"),fjt.forEach(t),LQr=r(IGe," (RoFormer model)"),IGe.forEach(t),yQr=i(De),_3=n(De,"LI",{});var NGe=s(_3);p5e=n(NGe,"STRONG",{});var mjt=s(p5e);xQr=r(mjt,"xlm-roberta"),mjt.forEach(t),$Qr=r(NGe," \u2014 "),Nee=n(NGe,"A",{href:!0});var gjt=s(Nee);kQr=r(gjt,"FlaxXLMRobertaForSequenceClassification"),gjt.forEach(t),SQr=r(NGe," (XLM-RoBERTa model)"),NGe.forEach(t),De.forEach(t),RQr=i(di),T(u3.$$.fragment,di),di.forEach(t),ii.forEach(t),lXe=i(f),lf=n(f,"H2",{class:!0});var _Qe=s(lf);b3=n(_Qe,"A",{id:!0,class:!0,href:!0});var hjt=s(b3);_5e=n(hjt,"SPAN",{});var pjt=s(_5e);T(p$.$$.fragment,pjt),pjt.forEach(t),hjt.forEach(t),PQr=i(_Qe),u5e=n(_Qe,"SPAN",{});var _jt=s(u5e);BQr=r(_jt,"FlaxAutoModelForQuestionAnswering"),_jt.forEach(t),_Qe.forEach(t),iXe=i(f),Fr=n(f,"DIV",{class:!0});var ci=s(Fr);T(_$.$$.fragment,ci),IQr=i(ci),df=n(ci,"P",{});var hte=s(df);NQr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qee=n(hte,"A",{href:!0});var ujt=s(qee);qQr=r(ujt,"from_pretrained()"),ujt.forEach(t),jQr=r(hte," class method or the "),jee=n(hte,"A",{href:!0});var bjt=s(jee);DQr=r(bjt,"from_config()"),bjt.forEach(t),GQr=r(hte,` class
method.`),hte.forEach(t),OQr=i(ci),u$=n(ci,"P",{});var uQe=s(u$);VQr=r(uQe,"This class cannot be instantiated directly using "),b5e=n(uQe,"CODE",{});var vjt=s(b5e);XQr=r(vjt,"__init__()"),vjt.forEach(t),zQr=r(uQe," (throws an error)."),uQe.forEach(t),QQr=i(ci),Jt=n(ci,"DIV",{class:!0});var FA=s(Jt);T(b$.$$.fragment,FA),WQr=i(FA),v5e=n(FA,"P",{});var Fjt=s(v5e);HQr=r(Fjt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fjt.forEach(t),UQr=i(FA),cf=n(FA,"P",{});var pte=s(cf);JQr=r(pte,`Note:
Loading a model from its configuration file does `),F5e=n(pte,"STRONG",{});var Tjt=s(F5e);YQr=r(Tjt,"not"),Tjt.forEach(t),KQr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dee=n(pte,"A",{href:!0});var Mjt=s(Dee);ZQr=r(Mjt,"from_pretrained()"),Mjt.forEach(t),eWr=r(pte," to load the model weights."),pte.forEach(t),oWr=i(FA),T(v3.$$.fragment,FA),FA.forEach(t),rWr=i(ci),Hr=n(ci,"DIV",{class:!0});var fi=s(Hr);T(v$.$$.fragment,fi),tWr=i(fi),T5e=n(fi,"P",{});var Ejt=s(T5e);aWr=r(Ejt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ejt.forEach(t),nWr=i(fi),An=n(fi,"P",{});var TA=s(An);sWr=r(TA,"The model class to instantiate is selected based on the "),M5e=n(TA,"CODE",{});var Cjt=s(M5e);lWr=r(Cjt,"model_type"),Cjt.forEach(t),iWr=r(TA,` property of the config object (either
passed as an argument or loaded from `),E5e=n(TA,"CODE",{});var wjt=s(E5e);dWr=r(wjt,"pretrained_model_name_or_path"),wjt.forEach(t),cWr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=n(TA,"CODE",{});var Ajt=s(C5e);fWr=r(Ajt,"pretrained_model_name_or_path"),Ajt.forEach(t),mWr=r(TA,":"),TA.forEach(t),gWr=i(fi),Re=n(fi,"UL",{});var Ge=s(Re);F3=n(Ge,"LI",{});var qGe=s(F3);w5e=n(qGe,"STRONG",{});var Ljt=s(w5e);hWr=r(Ljt,"albert"),Ljt.forEach(t),pWr=r(qGe," \u2014 "),Gee=n(qGe,"A",{href:!0});var yjt=s(Gee);_Wr=r(yjt,"FlaxAlbertForQuestionAnswering"),yjt.forEach(t),uWr=r(qGe," (ALBERT model)"),qGe.forEach(t),bWr=i(Ge),T3=n(Ge,"LI",{});var jGe=s(T3);A5e=n(jGe,"STRONG",{});var xjt=s(A5e);vWr=r(xjt,"bart"),xjt.forEach(t),FWr=r(jGe," \u2014 "),Oee=n(jGe,"A",{href:!0});var $jt=s(Oee);TWr=r($jt,"FlaxBartForQuestionAnswering"),$jt.forEach(t),MWr=r(jGe," (BART model)"),jGe.forEach(t),EWr=i(Ge),M3=n(Ge,"LI",{});var DGe=s(M3);L5e=n(DGe,"STRONG",{});var kjt=s(L5e);CWr=r(kjt,"bert"),kjt.forEach(t),wWr=r(DGe," \u2014 "),Vee=n(DGe,"A",{href:!0});var Sjt=s(Vee);AWr=r(Sjt,"FlaxBertForQuestionAnswering"),Sjt.forEach(t),LWr=r(DGe," (BERT model)"),DGe.forEach(t),yWr=i(Ge),E3=n(Ge,"LI",{});var GGe=s(E3);y5e=n(GGe,"STRONG",{});var Rjt=s(y5e);xWr=r(Rjt,"big_bird"),Rjt.forEach(t),$Wr=r(GGe," \u2014 "),Xee=n(GGe,"A",{href:!0});var Pjt=s(Xee);kWr=r(Pjt,"FlaxBigBirdForQuestionAnswering"),Pjt.forEach(t),SWr=r(GGe," (BigBird model)"),GGe.forEach(t),RWr=i(Ge),C3=n(Ge,"LI",{});var OGe=s(C3);x5e=n(OGe,"STRONG",{});var Bjt=s(x5e);PWr=r(Bjt,"distilbert"),Bjt.forEach(t),BWr=r(OGe," \u2014 "),zee=n(OGe,"A",{href:!0});var Ijt=s(zee);IWr=r(Ijt,"FlaxDistilBertForQuestionAnswering"),Ijt.forEach(t),NWr=r(OGe," (DistilBERT model)"),OGe.forEach(t),qWr=i(Ge),w3=n(Ge,"LI",{});var VGe=s(w3);$5e=n(VGe,"STRONG",{});var Njt=s($5e);jWr=r(Njt,"electra"),Njt.forEach(t),DWr=r(VGe," \u2014 "),Qee=n(VGe,"A",{href:!0});var qjt=s(Qee);GWr=r(qjt,"FlaxElectraForQuestionAnswering"),qjt.forEach(t),OWr=r(VGe," (ELECTRA model)"),VGe.forEach(t),VWr=i(Ge),A3=n(Ge,"LI",{});var XGe=s(A3);k5e=n(XGe,"STRONG",{});var jjt=s(k5e);XWr=r(jjt,"mbart"),jjt.forEach(t),zWr=r(XGe," \u2014 "),Wee=n(XGe,"A",{href:!0});var Djt=s(Wee);QWr=r(Djt,"FlaxMBartForQuestionAnswering"),Djt.forEach(t),WWr=r(XGe," (mBART model)"),XGe.forEach(t),HWr=i(Ge),L3=n(Ge,"LI",{});var zGe=s(L3);S5e=n(zGe,"STRONG",{});var Gjt=s(S5e);UWr=r(Gjt,"roberta"),Gjt.forEach(t),JWr=r(zGe," \u2014 "),Hee=n(zGe,"A",{href:!0});var Ojt=s(Hee);YWr=r(Ojt,"FlaxRobertaForQuestionAnswering"),Ojt.forEach(t),KWr=r(zGe," (RoBERTa model)"),zGe.forEach(t),ZWr=i(Ge),y3=n(Ge,"LI",{});var QGe=s(y3);R5e=n(QGe,"STRONG",{});var Vjt=s(R5e);eHr=r(Vjt,"roformer"),Vjt.forEach(t),oHr=r(QGe," \u2014 "),Uee=n(QGe,"A",{href:!0});var Xjt=s(Uee);rHr=r(Xjt,"FlaxRoFormerForQuestionAnswering"),Xjt.forEach(t),tHr=r(QGe," (RoFormer model)"),QGe.forEach(t),aHr=i(Ge),x3=n(Ge,"LI",{});var WGe=s(x3);P5e=n(WGe,"STRONG",{});var zjt=s(P5e);nHr=r(zjt,"xlm-roberta"),zjt.forEach(t),sHr=r(WGe," \u2014 "),Jee=n(WGe,"A",{href:!0});var Qjt=s(Jee);lHr=r(Qjt,"FlaxXLMRobertaForQuestionAnswering"),Qjt.forEach(t),iHr=r(WGe," (XLM-RoBERTa model)"),WGe.forEach(t),Ge.forEach(t),dHr=i(fi),T($3.$$.fragment,fi),fi.forEach(t),ci.forEach(t),dXe=i(f),ff=n(f,"H2",{class:!0});var bQe=s(ff);k3=n(bQe,"A",{id:!0,class:!0,href:!0});var Wjt=s(k3);B5e=n(Wjt,"SPAN",{});var Hjt=s(B5e);T(F$.$$.fragment,Hjt),Hjt.forEach(t),Wjt.forEach(t),cHr=i(bQe),I5e=n(bQe,"SPAN",{});var Ujt=s(I5e);fHr=r(Ujt,"FlaxAutoModelForTokenClassification"),Ujt.forEach(t),bQe.forEach(t),cXe=i(f),Tr=n(f,"DIV",{class:!0});var mi=s(Tr);T(T$.$$.fragment,mi),mHr=i(mi),mf=n(mi,"P",{});var _te=s(mf);gHr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yee=n(_te,"A",{href:!0});var Jjt=s(Yee);hHr=r(Jjt,"from_pretrained()"),Jjt.forEach(t),pHr=r(_te," class method or the "),Kee=n(_te,"A",{href:!0});var Yjt=s(Kee);_Hr=r(Yjt,"from_config()"),Yjt.forEach(t),uHr=r(_te,` class
method.`),_te.forEach(t),bHr=i(mi),M$=n(mi,"P",{});var vQe=s(M$);vHr=r(vQe,"This class cannot be instantiated directly using "),N5e=n(vQe,"CODE",{});var Kjt=s(N5e);FHr=r(Kjt,"__init__()"),Kjt.forEach(t),THr=r(vQe," (throws an error)."),vQe.forEach(t),MHr=i(mi),Yt=n(mi,"DIV",{class:!0});var MA=s(Yt);T(E$.$$.fragment,MA),EHr=i(MA),q5e=n(MA,"P",{});var Zjt=s(q5e);CHr=r(Zjt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zjt.forEach(t),wHr=i(MA),gf=n(MA,"P",{});var ute=s(gf);AHr=r(ute,`Note:
Loading a model from its configuration file does `),j5e=n(ute,"STRONG",{});var eDt=s(j5e);LHr=r(eDt,"not"),eDt.forEach(t),yHr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=n(ute,"A",{href:!0});var oDt=s(Zee);xHr=r(oDt,"from_pretrained()"),oDt.forEach(t),$Hr=r(ute," to load the model weights."),ute.forEach(t),kHr=i(MA),T(S3.$$.fragment,MA),MA.forEach(t),SHr=i(mi),Ur=n(mi,"DIV",{class:!0});var gi=s(Ur);T(C$.$$.fragment,gi),RHr=i(gi),D5e=n(gi,"P",{});var rDt=s(D5e);PHr=r(rDt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rDt.forEach(t),BHr=i(gi),Ln=n(gi,"P",{});var EA=s(Ln);IHr=r(EA,"The model class to instantiate is selected based on the "),G5e=n(EA,"CODE",{});var tDt=s(G5e);NHr=r(tDt,"model_type"),tDt.forEach(t),qHr=r(EA,` property of the config object (either
passed as an argument or loaded from `),O5e=n(EA,"CODE",{});var aDt=s(O5e);jHr=r(aDt,"pretrained_model_name_or_path"),aDt.forEach(t),DHr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=n(EA,"CODE",{});var nDt=s(V5e);GHr=r(nDt,"pretrained_model_name_or_path"),nDt.forEach(t),OHr=r(EA,":"),EA.forEach(t),VHr=i(gi),Ve=n(gi,"UL",{});var To=s(Ve);R3=n(To,"LI",{});var HGe=s(R3);X5e=n(HGe,"STRONG",{});var sDt=s(X5e);XHr=r(sDt,"albert"),sDt.forEach(t),zHr=r(HGe," \u2014 "),eoe=n(HGe,"A",{href:!0});var lDt=s(eoe);QHr=r(lDt,"FlaxAlbertForTokenClassification"),lDt.forEach(t),WHr=r(HGe," (ALBERT model)"),HGe.forEach(t),HHr=i(To),P3=n(To,"LI",{});var UGe=s(P3);z5e=n(UGe,"STRONG",{});var iDt=s(z5e);UHr=r(iDt,"bert"),iDt.forEach(t),JHr=r(UGe," \u2014 "),ooe=n(UGe,"A",{href:!0});var dDt=s(ooe);YHr=r(dDt,"FlaxBertForTokenClassification"),dDt.forEach(t),KHr=r(UGe," (BERT model)"),UGe.forEach(t),ZHr=i(To),B3=n(To,"LI",{});var JGe=s(B3);Q5e=n(JGe,"STRONG",{});var cDt=s(Q5e);eUr=r(cDt,"big_bird"),cDt.forEach(t),oUr=r(JGe," \u2014 "),roe=n(JGe,"A",{href:!0});var fDt=s(roe);rUr=r(fDt,"FlaxBigBirdForTokenClassification"),fDt.forEach(t),tUr=r(JGe," (BigBird model)"),JGe.forEach(t),aUr=i(To),I3=n(To,"LI",{});var YGe=s(I3);W5e=n(YGe,"STRONG",{});var mDt=s(W5e);nUr=r(mDt,"distilbert"),mDt.forEach(t),sUr=r(YGe," \u2014 "),toe=n(YGe,"A",{href:!0});var gDt=s(toe);lUr=r(gDt,"FlaxDistilBertForTokenClassification"),gDt.forEach(t),iUr=r(YGe," (DistilBERT model)"),YGe.forEach(t),dUr=i(To),N3=n(To,"LI",{});var KGe=s(N3);H5e=n(KGe,"STRONG",{});var hDt=s(H5e);cUr=r(hDt,"electra"),hDt.forEach(t),fUr=r(KGe," \u2014 "),aoe=n(KGe,"A",{href:!0});var pDt=s(aoe);mUr=r(pDt,"FlaxElectraForTokenClassification"),pDt.forEach(t),gUr=r(KGe," (ELECTRA model)"),KGe.forEach(t),hUr=i(To),q3=n(To,"LI",{});var ZGe=s(q3);U5e=n(ZGe,"STRONG",{});var _Dt=s(U5e);pUr=r(_Dt,"roberta"),_Dt.forEach(t),_Ur=r(ZGe," \u2014 "),noe=n(ZGe,"A",{href:!0});var uDt=s(noe);uUr=r(uDt,"FlaxRobertaForTokenClassification"),uDt.forEach(t),bUr=r(ZGe," (RoBERTa model)"),ZGe.forEach(t),vUr=i(To),j3=n(To,"LI",{});var eOe=s(j3);J5e=n(eOe,"STRONG",{});var bDt=s(J5e);FUr=r(bDt,"roformer"),bDt.forEach(t),TUr=r(eOe," \u2014 "),soe=n(eOe,"A",{href:!0});var vDt=s(soe);MUr=r(vDt,"FlaxRoFormerForTokenClassification"),vDt.forEach(t),EUr=r(eOe," (RoFormer model)"),eOe.forEach(t),CUr=i(To),D3=n(To,"LI",{});var oOe=s(D3);Y5e=n(oOe,"STRONG",{});var FDt=s(Y5e);wUr=r(FDt,"xlm-roberta"),FDt.forEach(t),AUr=r(oOe," \u2014 "),loe=n(oOe,"A",{href:!0});var TDt=s(loe);LUr=r(TDt,"FlaxXLMRobertaForTokenClassification"),TDt.forEach(t),yUr=r(oOe," (XLM-RoBERTa model)"),oOe.forEach(t),To.forEach(t),xUr=i(gi),T(G3.$$.fragment,gi),gi.forEach(t),mi.forEach(t),fXe=i(f),hf=n(f,"H2",{class:!0});var FQe=s(hf);O3=n(FQe,"A",{id:!0,class:!0,href:!0});var MDt=s(O3);K5e=n(MDt,"SPAN",{});var EDt=s(K5e);T(w$.$$.fragment,EDt),EDt.forEach(t),MDt.forEach(t),$Ur=i(FQe),Z5e=n(FQe,"SPAN",{});var CDt=s(Z5e);kUr=r(CDt,"FlaxAutoModelForMultipleChoice"),CDt.forEach(t),FQe.forEach(t),mXe=i(f),Mr=n(f,"DIV",{class:!0});var hi=s(Mr);T(A$.$$.fragment,hi),SUr=i(hi),pf=n(hi,"P",{});var bte=s(pf);RUr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ioe=n(bte,"A",{href:!0});var wDt=s(ioe);PUr=r(wDt,"from_pretrained()"),wDt.forEach(t),BUr=r(bte," class method or the "),doe=n(bte,"A",{href:!0});var ADt=s(doe);IUr=r(ADt,"from_config()"),ADt.forEach(t),NUr=r(bte,` class
method.`),bte.forEach(t),qUr=i(hi),L$=n(hi,"P",{});var TQe=s(L$);jUr=r(TQe,"This class cannot be instantiated directly using "),e3e=n(TQe,"CODE",{});var LDt=s(e3e);DUr=r(LDt,"__init__()"),LDt.forEach(t),GUr=r(TQe," (throws an error)."),TQe.forEach(t),OUr=i(hi),Kt=n(hi,"DIV",{class:!0});var CA=s(Kt);T(y$.$$.fragment,CA),VUr=i(CA),o3e=n(CA,"P",{});var yDt=s(o3e);XUr=r(yDt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yDt.forEach(t),zUr=i(CA),_f=n(CA,"P",{});var vte=s(_f);QUr=r(vte,`Note:
Loading a model from its configuration file does `),r3e=n(vte,"STRONG",{});var xDt=s(r3e);WUr=r(xDt,"not"),xDt.forEach(t),HUr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=n(vte,"A",{href:!0});var $Dt=s(coe);UUr=r($Dt,"from_pretrained()"),$Dt.forEach(t),JUr=r(vte," to load the model weights."),vte.forEach(t),YUr=i(CA),T(V3.$$.fragment,CA),CA.forEach(t),KUr=i(hi),Jr=n(hi,"DIV",{class:!0});var pi=s(Jr);T(x$.$$.fragment,pi),ZUr=i(pi),t3e=n(pi,"P",{});var kDt=s(t3e);eJr=r(kDt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kDt.forEach(t),oJr=i(pi),yn=n(pi,"P",{});var wA=s(yn);rJr=r(wA,"The model class to instantiate is selected based on the "),a3e=n(wA,"CODE",{});var SDt=s(a3e);tJr=r(SDt,"model_type"),SDt.forEach(t),aJr=r(wA,` property of the config object (either
passed as an argument or loaded from `),n3e=n(wA,"CODE",{});var RDt=s(n3e);nJr=r(RDt,"pretrained_model_name_or_path"),RDt.forEach(t),sJr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=n(wA,"CODE",{});var PDt=s(s3e);lJr=r(PDt,"pretrained_model_name_or_path"),PDt.forEach(t),iJr=r(wA,":"),wA.forEach(t),dJr=i(pi),Xe=n(pi,"UL",{});var Mo=s(Xe);X3=n(Mo,"LI",{});var rOe=s(X3);l3e=n(rOe,"STRONG",{});var BDt=s(l3e);cJr=r(BDt,"albert"),BDt.forEach(t),fJr=r(rOe," \u2014 "),foe=n(rOe,"A",{href:!0});var IDt=s(foe);mJr=r(IDt,"FlaxAlbertForMultipleChoice"),IDt.forEach(t),gJr=r(rOe," (ALBERT model)"),rOe.forEach(t),hJr=i(Mo),z3=n(Mo,"LI",{});var tOe=s(z3);i3e=n(tOe,"STRONG",{});var NDt=s(i3e);pJr=r(NDt,"bert"),NDt.forEach(t),_Jr=r(tOe," \u2014 "),moe=n(tOe,"A",{href:!0});var qDt=s(moe);uJr=r(qDt,"FlaxBertForMultipleChoice"),qDt.forEach(t),bJr=r(tOe," (BERT model)"),tOe.forEach(t),vJr=i(Mo),Q3=n(Mo,"LI",{});var aOe=s(Q3);d3e=n(aOe,"STRONG",{});var jDt=s(d3e);FJr=r(jDt,"big_bird"),jDt.forEach(t),TJr=r(aOe," \u2014 "),goe=n(aOe,"A",{href:!0});var DDt=s(goe);MJr=r(DDt,"FlaxBigBirdForMultipleChoice"),DDt.forEach(t),EJr=r(aOe," (BigBird model)"),aOe.forEach(t),CJr=i(Mo),W3=n(Mo,"LI",{});var nOe=s(W3);c3e=n(nOe,"STRONG",{});var GDt=s(c3e);wJr=r(GDt,"distilbert"),GDt.forEach(t),AJr=r(nOe," \u2014 "),hoe=n(nOe,"A",{href:!0});var ODt=s(hoe);LJr=r(ODt,"FlaxDistilBertForMultipleChoice"),ODt.forEach(t),yJr=r(nOe," (DistilBERT model)"),nOe.forEach(t),xJr=i(Mo),H3=n(Mo,"LI",{});var sOe=s(H3);f3e=n(sOe,"STRONG",{});var VDt=s(f3e);$Jr=r(VDt,"electra"),VDt.forEach(t),kJr=r(sOe," \u2014 "),poe=n(sOe,"A",{href:!0});var XDt=s(poe);SJr=r(XDt,"FlaxElectraForMultipleChoice"),XDt.forEach(t),RJr=r(sOe," (ELECTRA model)"),sOe.forEach(t),PJr=i(Mo),U3=n(Mo,"LI",{});var lOe=s(U3);m3e=n(lOe,"STRONG",{});var zDt=s(m3e);BJr=r(zDt,"roberta"),zDt.forEach(t),IJr=r(lOe," \u2014 "),_oe=n(lOe,"A",{href:!0});var QDt=s(_oe);NJr=r(QDt,"FlaxRobertaForMultipleChoice"),QDt.forEach(t),qJr=r(lOe," (RoBERTa model)"),lOe.forEach(t),jJr=i(Mo),J3=n(Mo,"LI",{});var iOe=s(J3);g3e=n(iOe,"STRONG",{});var WDt=s(g3e);DJr=r(WDt,"roformer"),WDt.forEach(t),GJr=r(iOe," \u2014 "),uoe=n(iOe,"A",{href:!0});var HDt=s(uoe);OJr=r(HDt,"FlaxRoFormerForMultipleChoice"),HDt.forEach(t),VJr=r(iOe," (RoFormer model)"),iOe.forEach(t),XJr=i(Mo),Y3=n(Mo,"LI",{});var dOe=s(Y3);h3e=n(dOe,"STRONG",{});var UDt=s(h3e);zJr=r(UDt,"xlm-roberta"),UDt.forEach(t),QJr=r(dOe," \u2014 "),boe=n(dOe,"A",{href:!0});var JDt=s(boe);WJr=r(JDt,"FlaxXLMRobertaForMultipleChoice"),JDt.forEach(t),HJr=r(dOe," (XLM-RoBERTa model)"),dOe.forEach(t),Mo.forEach(t),UJr=i(pi),T(K3.$$.fragment,pi),pi.forEach(t),hi.forEach(t),gXe=i(f),uf=n(f,"H2",{class:!0});var MQe=s(uf);Z3=n(MQe,"A",{id:!0,class:!0,href:!0});var YDt=s(Z3);p3e=n(YDt,"SPAN",{});var KDt=s(p3e);T($$.$$.fragment,KDt),KDt.forEach(t),YDt.forEach(t),JJr=i(MQe),_3e=n(MQe,"SPAN",{});var ZDt=s(_3e);YJr=r(ZDt,"FlaxAutoModelForNextSentencePrediction"),ZDt.forEach(t),MQe.forEach(t),hXe=i(f),Er=n(f,"DIV",{class:!0});var _i=s(Er);T(k$.$$.fragment,_i),KJr=i(_i),bf=n(_i,"P",{});var Fte=s(bf);ZJr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),voe=n(Fte,"A",{href:!0});var eGt=s(voe);eYr=r(eGt,"from_pretrained()"),eGt.forEach(t),oYr=r(Fte," class method or the "),Foe=n(Fte,"A",{href:!0});var oGt=s(Foe);rYr=r(oGt,"from_config()"),oGt.forEach(t),tYr=r(Fte,` class
method.`),Fte.forEach(t),aYr=i(_i),S$=n(_i,"P",{});var EQe=s(S$);nYr=r(EQe,"This class cannot be instantiated directly using "),u3e=n(EQe,"CODE",{});var rGt=s(u3e);sYr=r(rGt,"__init__()"),rGt.forEach(t),lYr=r(EQe," (throws an error)."),EQe.forEach(t),iYr=i(_i),Zt=n(_i,"DIV",{class:!0});var AA=s(Zt);T(R$.$$.fragment,AA),dYr=i(AA),b3e=n(AA,"P",{});var tGt=s(b3e);cYr=r(tGt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tGt.forEach(t),fYr=i(AA),vf=n(AA,"P",{});var Tte=s(vf);mYr=r(Tte,`Note:
Loading a model from its configuration file does `),v3e=n(Tte,"STRONG",{});var aGt=s(v3e);gYr=r(aGt,"not"),aGt.forEach(t),hYr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=n(Tte,"A",{href:!0});var nGt=s(Toe);pYr=r(nGt,"from_pretrained()"),nGt.forEach(t),_Yr=r(Tte," to load the model weights."),Tte.forEach(t),uYr=i(AA),T(e0.$$.fragment,AA),AA.forEach(t),bYr=i(_i),Yr=n(_i,"DIV",{class:!0});var ui=s(Yr);T(P$.$$.fragment,ui),vYr=i(ui),F3e=n(ui,"P",{});var sGt=s(F3e);FYr=r(sGt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sGt.forEach(t),TYr=i(ui),xn=n(ui,"P",{});var LA=s(xn);MYr=r(LA,"The model class to instantiate is selected based on the "),T3e=n(LA,"CODE",{});var lGt=s(T3e);EYr=r(lGt,"model_type"),lGt.forEach(t),CYr=r(LA,` property of the config object (either
passed as an argument or loaded from `),M3e=n(LA,"CODE",{});var iGt=s(M3e);wYr=r(iGt,"pretrained_model_name_or_path"),iGt.forEach(t),AYr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=n(LA,"CODE",{});var dGt=s(E3e);LYr=r(dGt,"pretrained_model_name_or_path"),dGt.forEach(t),yYr=r(LA,":"),LA.forEach(t),xYr=i(ui),C3e=n(ui,"UL",{});var cGt=s(C3e);o0=n(cGt,"LI",{});var cOe=s(o0);w3e=n(cOe,"STRONG",{});var fGt=s(w3e);$Yr=r(fGt,"bert"),fGt.forEach(t),kYr=r(cOe," \u2014 "),Moe=n(cOe,"A",{href:!0});var mGt=s(Moe);SYr=r(mGt,"FlaxBertForNextSentencePrediction"),mGt.forEach(t),RYr=r(cOe," (BERT model)"),cOe.forEach(t),cGt.forEach(t),PYr=i(ui),T(r0.$$.fragment,ui),ui.forEach(t),_i.forEach(t),pXe=i(f),Ff=n(f,"H2",{class:!0});var CQe=s(Ff);t0=n(CQe,"A",{id:!0,class:!0,href:!0});var gGt=s(t0);A3e=n(gGt,"SPAN",{});var hGt=s(A3e);T(B$.$$.fragment,hGt),hGt.forEach(t),gGt.forEach(t),BYr=i(CQe),L3e=n(CQe,"SPAN",{});var pGt=s(L3e);IYr=r(pGt,"FlaxAutoModelForImageClassification"),pGt.forEach(t),CQe.forEach(t),_Xe=i(f),Cr=n(f,"DIV",{class:!0});var bi=s(Cr);T(I$.$$.fragment,bi),NYr=i(bi),Tf=n(bi,"P",{});var Mte=s(Tf);qYr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Eoe=n(Mte,"A",{href:!0});var _Gt=s(Eoe);jYr=r(_Gt,"from_pretrained()"),_Gt.forEach(t),DYr=r(Mte," class method or the "),Coe=n(Mte,"A",{href:!0});var uGt=s(Coe);GYr=r(uGt,"from_config()"),uGt.forEach(t),OYr=r(Mte,` class
method.`),Mte.forEach(t),VYr=i(bi),N$=n(bi,"P",{});var wQe=s(N$);XYr=r(wQe,"This class cannot be instantiated directly using "),y3e=n(wQe,"CODE",{});var bGt=s(y3e);zYr=r(bGt,"__init__()"),bGt.forEach(t),QYr=r(wQe," (throws an error)."),wQe.forEach(t),WYr=i(bi),ea=n(bi,"DIV",{class:!0});var yA=s(ea);T(q$.$$.fragment,yA),HYr=i(yA),x3e=n(yA,"P",{});var vGt=s(x3e);UYr=r(vGt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vGt.forEach(t),JYr=i(yA),Mf=n(yA,"P",{});var Ete=s(Mf);YYr=r(Ete,`Note:
Loading a model from its configuration file does `),$3e=n(Ete,"STRONG",{});var FGt=s($3e);KYr=r(FGt,"not"),FGt.forEach(t),ZYr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=n(Ete,"A",{href:!0});var TGt=s(woe);eKr=r(TGt,"from_pretrained()"),TGt.forEach(t),oKr=r(Ete," to load the model weights."),Ete.forEach(t),rKr=i(yA),T(a0.$$.fragment,yA),yA.forEach(t),tKr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(j$.$$.fragment,vi),aKr=i(vi),k3e=n(vi,"P",{});var MGt=s(k3e);nKr=r(MGt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MGt.forEach(t),sKr=i(vi),$n=n(vi,"P",{});var xA=s($n);lKr=r(xA,"The model class to instantiate is selected based on the "),S3e=n(xA,"CODE",{});var EGt=s(S3e);iKr=r(EGt,"model_type"),EGt.forEach(t),dKr=r(xA,` property of the config object (either
passed as an argument or loaded from `),R3e=n(xA,"CODE",{});var CGt=s(R3e);cKr=r(CGt,"pretrained_model_name_or_path"),CGt.forEach(t),fKr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=n(xA,"CODE",{});var wGt=s(P3e);mKr=r(wGt,"pretrained_model_name_or_path"),wGt.forEach(t),gKr=r(xA,":"),xA.forEach(t),hKr=i(vi),D$=n(vi,"UL",{});var AQe=s(D$);n0=n(AQe,"LI",{});var fOe=s(n0);B3e=n(fOe,"STRONG",{});var AGt=s(B3e);pKr=r(AGt,"beit"),AGt.forEach(t),_Kr=r(fOe," \u2014 "),Aoe=n(fOe,"A",{href:!0});var LGt=s(Aoe);uKr=r(LGt,"FlaxBeitForImageClassification"),LGt.forEach(t),bKr=r(fOe," (BEiT model)"),fOe.forEach(t),vKr=i(AQe),s0=n(AQe,"LI",{});var mOe=s(s0);I3e=n(mOe,"STRONG",{});var yGt=s(I3e);FKr=r(yGt,"vit"),yGt.forEach(t),TKr=r(mOe," \u2014 "),Loe=n(mOe,"A",{href:!0});var xGt=s(Loe);MKr=r(xGt,"FlaxViTForImageClassification"),xGt.forEach(t),EKr=r(mOe," (ViT model)"),mOe.forEach(t),AQe.forEach(t),CKr=i(vi),T(l0.$$.fragment,vi),vi.forEach(t),bi.forEach(t),uXe=i(f),Ef=n(f,"H2",{class:!0});var LQe=s(Ef);i0=n(LQe,"A",{id:!0,class:!0,href:!0});var $Gt=s(i0);N3e=n($Gt,"SPAN",{});var kGt=s(N3e);T(G$.$$.fragment,kGt),kGt.forEach(t),$Gt.forEach(t),wKr=i(LQe),q3e=n(LQe,"SPAN",{});var SGt=s(q3e);AKr=r(SGt,"FlaxAutoModelForVision2Seq"),SGt.forEach(t),LQe.forEach(t),bXe=i(f),wr=n(f,"DIV",{class:!0});var Fi=s(wr);T(O$.$$.fragment,Fi),LKr=i(Fi),Cf=n(Fi,"P",{});var Cte=s(Cf);yKr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yoe=n(Cte,"A",{href:!0});var RGt=s(yoe);xKr=r(RGt,"from_pretrained()"),RGt.forEach(t),$Kr=r(Cte," class method or the "),xoe=n(Cte,"A",{href:!0});var PGt=s(xoe);kKr=r(PGt,"from_config()"),PGt.forEach(t),SKr=r(Cte,` class
method.`),Cte.forEach(t),RKr=i(Fi),V$=n(Fi,"P",{});var yQe=s(V$);PKr=r(yQe,"This class cannot be instantiated directly using "),j3e=n(yQe,"CODE",{});var BGt=s(j3e);BKr=r(BGt,"__init__()"),BGt.forEach(t),IKr=r(yQe," (throws an error)."),yQe.forEach(t),NKr=i(Fi),oa=n(Fi,"DIV",{class:!0});var $A=s(oa);T(X$.$$.fragment,$A),qKr=i($A),D3e=n($A,"P",{});var IGt=s(D3e);jKr=r(IGt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),IGt.forEach(t),DKr=i($A),wf=n($A,"P",{});var wte=s(wf);GKr=r(wte,`Note:
Loading a model from its configuration file does `),G3e=n(wte,"STRONG",{});var NGt=s(G3e);OKr=r(NGt,"not"),NGt.forEach(t),VKr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=n(wte,"A",{href:!0});var qGt=s($oe);XKr=r(qGt,"from_pretrained()"),qGt.forEach(t),zKr=r(wte," to load the model weights."),wte.forEach(t),QKr=i($A),T(d0.$$.fragment,$A),$A.forEach(t),WKr=i(Fi),Zr=n(Fi,"DIV",{class:!0});var Ti=s(Zr);T(z$.$$.fragment,Ti),HKr=i(Ti),O3e=n(Ti,"P",{});var jGt=s(O3e);UKr=r(jGt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jGt.forEach(t),JKr=i(Ti),kn=n(Ti,"P",{});var kA=s(kn);YKr=r(kA,"The model class to instantiate is selected based on the "),V3e=n(kA,"CODE",{});var DGt=s(V3e);KKr=r(DGt,"model_type"),DGt.forEach(t),ZKr=r(kA,` property of the config object (either
passed as an argument or loaded from `),X3e=n(kA,"CODE",{});var GGt=s(X3e);eZr=r(GGt,"pretrained_model_name_or_path"),GGt.forEach(t),oZr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=n(kA,"CODE",{});var OGt=s(z3e);rZr=r(OGt,"pretrained_model_name_or_path"),OGt.forEach(t),tZr=r(kA,":"),kA.forEach(t),aZr=i(Ti),Q3e=n(Ti,"UL",{});var VGt=s(Q3e);c0=n(VGt,"LI",{});var gOe=s(c0);W3e=n(gOe,"STRONG",{});var XGt=s(W3e);nZr=r(XGt,"vision-encoder-decoder"),XGt.forEach(t),sZr=r(gOe," \u2014 "),koe=n(gOe,"A",{href:!0});var zGt=s(koe);lZr=r(zGt,"FlaxVisionEncoderDecoderModel"),zGt.forEach(t),iZr=r(gOe," (Vision Encoder decoder model)"),gOe.forEach(t),VGt.forEach(t),dZr=i(Ti),T(f0.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(YVt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoTokenizer"),c(yi,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel"),c(Rf,"id","extending-the-auto-classes"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#extending-the-auto-classes"),c(xi,"class","relative group"),c(Bf,"id","transformers.AutoConfig"),c(Bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bf,"href","#transformers.AutoConfig"),c($i,"class","relative group"),c(_S,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(uS,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig"),c(bS,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig"),c(vS,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig"),c(FS,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig"),c(TS,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(MS,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ES,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(CS,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(wS,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(AS,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig"),c(LS,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig"),c(yS,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig"),c(xS,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig"),c($S,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig"),c(kS,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig"),c(SS,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig"),c(RS,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig"),c(PS,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig"),c(BS,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(IS,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(NS,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(qS,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig"),c(jS,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(DS,"href","/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(GS,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig"),c(OS,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig"),c(VS,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig"),c(XS,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig"),c(zS,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig"),c(QS,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig"),c(WS,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(HS,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig"),c(US,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig"),c(JS,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig"),c(YS,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig"),c(KS,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig"),c(ZS,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNConfig"),c(eR,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config"),c(oR,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(rR,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(tR,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig"),c(aR,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig"),c(nR,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig"),c(sR,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(lR,"href","/docs/transformers/pr_17826/en/model_doc/jukebox#transformers.JukeboxConfig"),c(iR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(dR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(cR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(fR,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig"),c(mR,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig"),c(gR,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig"),c(hR,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config"),c(pR,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig"),c(_R,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig"),c(uR,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config"),c(bR,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig"),c(vR,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(FR,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig"),c(TR,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig"),c(MR,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(ER,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(CR,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig"),c(wR,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config"),c(AR,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig"),c(LR,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(yR,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(xR,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig"),c($R,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig"),c(kR,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig"),c(SR,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig"),c(RR,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(PR,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(BR,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(IR,"href","/docs/transformers/pr_17826/en/model_doc/rag#transformers.RagConfig"),c(NR,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmConfig"),c(qR,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig"),c(jR,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig"),c(DR,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig"),c(GR,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig"),c(OR,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig"),c(VR,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig"),c(XR,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig"),c(zR,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig"),c(QR,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig"),c(WR,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig"),c(HR,"href","/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(UR,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(JR,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(YR,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig"),c(KR,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(ZR,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig"),c(eP,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config"),c(oP,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig"),c(rP,"href","/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(tP,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(aP,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRConfig"),c(nP,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(sP,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(lP,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig"),c(iP,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig"),c(dP,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(cP,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(fP,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(mP,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig"),c(gP,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(hP,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(pP,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(_P,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig"),c(uP,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig"),c(bP,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig"),c(vP,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(FP,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(TP,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(MP,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig"),c(EP,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig"),c(CP,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qg,"id","transformers.AutoTokenizer"),c(Qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qg,"href","#transformers.AutoTokenizer"),c(Si,"class","relative group"),c(wP,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(AP,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(LP,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yP,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartTokenizer"),c(xP,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartTokenizerFast"),c($P,"href","/docs/transformers/pr_17826/en/model_doc/barthez#transformers.BarthezTokenizer"),c(kP,"href","/docs/transformers/pr_17826/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(SP,"href","/docs/transformers/pr_17826/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(RP,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(PP,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(BP,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(IP,"href","/docs/transformers/pr_17826/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(NP,"href","/docs/transformers/pr_17826/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(qP,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(jP,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(DP,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(GP,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(OP,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(VP,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(XP,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(zP,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(QP,"href","/docs/transformers/pr_17826/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(WP,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertTokenizer"),c(HP,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(UP,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineTokenizer"),c(JP,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizer"),c(YP,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(KP,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(ZP,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(eB,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(oB,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(rB,"href","/docs/transformers/pr_17826/en/model_doc/cpm#transformers.CpmTokenizer"),c(tB,"href","/docs/transformers/pr_17826/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(aB,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(nB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lB,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaTokenizer"),c(iB,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(dB,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(cB,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(fB,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(mB,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(gB,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(hB,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(pB,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraTokenizer"),c(_B,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(uB,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(bB,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetTokenizer"),c(vB,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(FB,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(TB,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelTokenizer"),c(MB,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(EB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LB,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(yB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($B,"href","/docs/transformers/pr_17826/en/model_doc/herbert#transformers.HerbertTokenizer"),c(kB,"href","/docs/transformers/pr_17826/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(SB,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BB,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(IB,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(NB,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(qB,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(jB,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(DB,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(GB,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(OB,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(VB,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDTokenizer"),c(XB,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDTokenizerFast"),c(zB,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerTokenizer"),c(QB,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(WB,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Tokenizer"),c(HB,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5TokenizerFast"),c(UB,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeTokenizer"),c(JB,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(YB,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(KB,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(ZB,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianTokenizer"),c(eI,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartTokenizer"),c(oI,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(rI,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(tI,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(aI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(nI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(sI,"href","/docs/transformers/pr_17826/en/model_doc/mluke#transformers.MLukeTokenizer"),c(lI,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(iI,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(dI,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(cI,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(fI,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Tokenizer"),c(mI,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5TokenizerFast"),c(gI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(hI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(pI,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(_I,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(uI,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(bI,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(vI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FI,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(TI,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(MI,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(EI,"href","/docs/transformers/pr_17826/en/model_doc/phobert#transformers.PhobertTokenizer"),c(CI,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartTokenizer"),c(wI,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(AI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(LI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(yI,"href","/docs/transformers/pr_17826/en/model_doc/rag#transformers.RagTokenizer"),c(xI,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmTokenizer"),c($I,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmTokenizerFast"),c(kI,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerTokenizer"),c(SI,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(RI,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertTokenizer"),c(PI,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(BI,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(II,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(NI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jI,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(DI,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(GI,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(OI,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(VI,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterTokenizer"),c(XI,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(zI,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(QI,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(WI,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Tokenizer"),c(HI,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5TokenizerFast"),c(UI,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasTokenizer"),c(JI,"href","/docs/transformers/pr_17826/en/model_doc/tapex#transformers.TapexTokenizer"),c(YI,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(KI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(ZI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(eN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(oN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(rN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(tN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(aN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(nN,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMTokenizer"),c(sN,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(lN,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMTokenizer"),c(iN,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(dN,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(cN,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(fN,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mN,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gN,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(hN,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(pN,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(_N,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"id","transformers.AutoFeatureExtractor"),c(xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xh,"href","#transformers.AutoFeatureExtractor"),c(Ri,"class","relative group"),c(uN,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(bN,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(EN,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(yN,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(xN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($N,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(kN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(SN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(RN,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(PN,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(BN,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(IN,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(NN,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(qN,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(jN,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(DN,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(GN,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(ON,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(VN,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(XN,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(zN,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(QN,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(WN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(HN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UN,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fp,"id","transformers.AutoProcessor"),c(fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fp,"href","#transformers.AutoProcessor"),c(Pi,"class","relative group"),c(JN,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(YN,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPProcessor"),c(KN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(ZN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(eq,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(oq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tq,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(aq,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(nq,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRProcessor"),c(sq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iq,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltProcessor"),c(dq,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(cq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sp,"id","transformers.AutoModel"),c(Sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sp,"href","#transformers.AutoModel"),c(Ii,"class","relative group"),c(gq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_q,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertModel"),c(uq,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartModel"),c(bq,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitModel"),c(vq,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel"),c(Fq,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Tq,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdModel"),c(Mq,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Eq,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Cq,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(wq,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomModel"),c(Aq,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertModel"),c(Lq,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineModel"),c(yq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPModel"),c(xq,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenModel"),c($q,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertModel"),c(kq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextModel"),c(Sq,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLModel"),c(Rq,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtModel"),c(Pq,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Bq,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Iq,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Nq,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaModel"),c(qq,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(jq,"href","/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Dq,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTModel"),c(Gq,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrModel"),c(Oq,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertModel"),c(Vq,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Xq,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTModel"),c(zq,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraModel"),c(Qq,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertModel"),c(Wq,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaModel"),c(Hq,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetModel"),c(Uq,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTModel"),c(Jq,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelModel"),c(Yq,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Kq,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNModel"),c(Zq,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Model"),c(ej,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(oj,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(rj,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJModel"),c(tj,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertModel"),c(aj,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertModel"),c(nj,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(sj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(lj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(ij,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(dj,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDModel"),c(cj,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitModel"),c(fj,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerModel"),c(mj,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Model"),c(gj,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeModel"),c(hj,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertModel"),c(pj,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model"),c(_j,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianModel"),c(uj,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerModel"),c(bj,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartModel"),c(vj,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTModel"),c(Fj,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Tj,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Mj,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetModel"),c(Ej,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Model"),c(Cj,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaModel"),c(wj,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Aj,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Lj,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTModel"),c(yj,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusModel"),c(xj,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverModel"),c($j,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartModel"),c(kj,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Sj,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Rj,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Pj,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModel"),c(Bj,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetModel"),c(Ij,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertModel"),c(Nj,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetModel"),c(qj,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel"),c(jj,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaModel"),c(Dj,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerModel"),c(Gj,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerModel"),c(Oj,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWModel"),c(Vj,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDModel"),c(Xj,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(zj,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterModel"),c(Qj,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Wj,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinModel"),c(Hj,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Model"),c(Uj,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasModel"),c(Jj,"href","/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Yj,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Kj,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Zj,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(eD,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanModel"),c(oD,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltModel"),c(rD,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(tD,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertModel"),c(aD,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTModel"),c(nD,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(sD,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(lD,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(iD,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMModel"),c(dD,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMModel"),c(cD,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMModel"),c(fD,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(mD,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(gD,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(hD,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetModel"),c(pD,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosModel"),c(_D,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iu,"id","transformers.AutoModelForPreTraining"),c(Iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iu,"href","#transformers.AutoModelForPreTraining"),c(ji,"class","relative group"),c(uD,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bD,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vD,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FD,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForPreTraining"),c(TD,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForPreTraining"),c(ED,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(CD,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM"),c(wD,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(AD,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(LD,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(yD,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(xD,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c($D,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(kD,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForPreTraining"),c(SD,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(RD,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaForPreTraining"),c(PD,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForPreTraining"),c(BD,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(ID,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(ND,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(qD,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(jD,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(DD,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(GD,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(OD,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(VD,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(XD,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(zD,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(QD,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(WD,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel"),c(HD,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(UD,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(JD,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(YD,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(eG,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(oG,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(rG,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(tG,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(aG,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(nG,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(sG,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(lG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(iG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(dG,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($2,"id","transformers.AutoModelForCausalLM"),c($2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($2,"href","#transformers.AutoModelForCausalLM"),c(Oi,"class","relative group"),c(cG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gG,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForCausalLM"),c(hG,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertLMHeadModel"),c(pG,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(_G,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(uG,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(bG,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(vG,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(FG,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM"),c(TG,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(MG,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(EG,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(CG,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(wG,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForCausalLM"),c(AG,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(LG,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(yG,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(xG,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForCausalLM"),c($G,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianForCausalLM"),c(kG,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForCausalLM"),c(SG,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(RG,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(PG,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForCausalLM"),c(BG,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(IG,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(NG,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(qG,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(jG,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(DG,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(GG,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(OG,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(VG,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(XG,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(zG,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(QG,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(WG,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(HG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(UG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(JG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(YG,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v1,"id","transformers.AutoModelForMaskedLM"),c(v1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v1,"href","#transformers.AutoModelForMaskedLM"),c(zi,"class","relative group"),c(KG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oO,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(rO,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tO,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMaskedLM"),c(aO,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(nO,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sO,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(lO,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(iO,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dO,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cO,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fO,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(mO,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gO,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(hO,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(pO,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(_O,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(uO,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(bO,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeForMaskedLM"),c(vO,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(FO,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(TO,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(MO,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(EO,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(CO,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(wO,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(AO,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(LO,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(yO,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(xO,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c($O,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(kO,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(SO,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(RO,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(PO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(BO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(IO,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sb,"id","transformers.AutoModelForSeq2SeqLM"),c(sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Hi,"class","relative group"),c(NO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DO,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(VO,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(zO,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(WO,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(HO,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(UO,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianMTModel"),c(JO,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(KO,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(ZO,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(eV,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(oV,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(rV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lb,"id","transformers.AutoModelForSequenceClassification"),c(Lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lb,"href","#transformers.AutoModelForSequenceClassification"),c(Yi,"class","relative group"),c(tV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sV,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c($V,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(PV,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForMultipleChoice"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForMultipleChoice"),c(ed,"class","relative group"),c(oX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aX,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(nX,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMultipleChoice"),c(sX,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(lX,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(iX,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(dX,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(cX,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(fX,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(mX,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(gX,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(hX,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(pX,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(_X,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(uX,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(bX,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(vX,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(FX,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(TX,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(MX,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(EX,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(CX,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(wX,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(AX,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(LX,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(yX,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(xX,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c($X,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(kX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(SX,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(RX,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForNextSentencePrediction"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForNextSentencePrediction"),c(td,"class","relative group"),c(PX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NX,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(qX,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(jX,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(DX,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(GX,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(OX,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForTokenClassification"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForTokenClassification"),c(sd,"class","relative group"),c(VX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(WX,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForTokenClassification"),c(HX,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(UX,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(JX,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(YX,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForTokenClassification"),c(KX,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(ez,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(oz,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(rz,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(tz,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(az,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(nz,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(sz,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(lz,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(iz,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(dz,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(cz,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(fz,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(mz,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(gz,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(hz,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(pz,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(_z,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(uz,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(bz,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(vz,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(Fz,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(Tz,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(Mz,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(Ez,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Cz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(wz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(Az,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(Lz,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r6,"id","transformers.AutoModelForQuestionAnswering"),c(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r6,"href","#transformers.AutoModelForQuestionAnswering"),c(dd,"class","relative group"),c(yz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($z,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kz,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Vz,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(zz,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(mQ,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(hQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(pQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(_Q,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(uQ,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W6,"id","transformers.AutoModelForTableQuestionAnswering"),c(W6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(md,"class","relative group"),c(bQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K6,"id","transformers.AutoModelForImageClassification"),c(K6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K6,"href","#transformers.AutoModelForImageClassification"),c(pd,"class","relative group"),c(MQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wQ,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForImageClassification"),c(AQ,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(LQ,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtForImageClassification"),c(yQ,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(xQ,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassification"),c($Q,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(kQ,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(SQ,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassification"),c(RQ,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(PQ,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(BQ,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(IQ,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(NQ,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(qQ,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(jQ,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(DQ,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(GQ,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForImageClassification"),c(OQ,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanForImageClassification"),c(VQ,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForVision2Seq"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForVision2Seq"),c(bd,"class","relative group"),c(XQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Td,"class","relative group"),c(HQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CT,"id","transformers.AutoModelForAudioClassification"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.AutoModelForAudioClassification"),c(Cd,"class","relative group"),c(KQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(rW,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(tW,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(aW,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(nW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(sW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(lW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(iW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(dW,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForAudioFrameClassification"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ld,"class","relative group"),c(cW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(hW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(pW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(_W,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(uW,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.AutoModelForCTC"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.AutoModelForCTC"),c($d,"class","relative group"),c(bW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TW,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(MW,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForCTC"),c(EW,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTForCTC"),c(CW,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForCTC"),c(wW,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForCTC"),c(AW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(LW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(yW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(xW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c($W,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s7,"id","transformers.AutoModelForSpeechSeq2Seq"),c(s7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s7,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Rd,"class","relative group"),c(kW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PW,"href","/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(BW,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m7,"id","transformers.AutoModelForAudioXVector"),c(m7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m7,"href","#transformers.AutoModelForAudioXVector"),c(Id,"class","relative group"),c(IW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(DW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(GW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(OW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(VW,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.AutoModelForMaskedImageModeling"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.AutoModelForMaskedImageModeling"),c(jd,"class","relative group"),c(XW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WW,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(HW,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(UW,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y7,"id","transformers.AutoModelForObjectDetection"),c(y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y7,"href","#transformers.AutoModelForObjectDetection"),c(Vd,"class","relative group"),c(JW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForObjectDetection"),c(eH,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P7,"id","transformers.AutoModelForImageSegmentation"),c(P7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P7,"href","#transformers.AutoModelForImageSegmentation"),c(Qd,"class","relative group"),c(oH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aH,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j7,"id","transformers.AutoModelForSemanticSegmentation"),c(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ud,"class","relative group"),c(nH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(dH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(cH,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(fH,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W7,"id","transformers.AutoModelForInstanceSegmentation"),c(W7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W7,"href","#transformers.AutoModelForInstanceSegmentation"),c(Kd,"class","relative group"),c(mH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K7,"id","transformers.TFAutoModel"),c(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K7,"href","#transformers.TFAutoModel"),c(oc,"class","relative group"),c(_H,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertModel"),c(FH,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartModel"),c(TH,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertModel"),c(MH,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(EH,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(CH,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertModel"),c(wH,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.TFCLIPModel"),c(AH,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertModel"),c(LH,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextModel"),c(yH,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLModel"),c(xH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c($H,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaModel"),c(kH,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(SH,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(RH,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(PH,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraModel"),c(BH,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(IH,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelModel"),c(NH,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(qH,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2Model"),c(jH,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJModel"),c(DH,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.TFHubertModel"),c(GH,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(OH,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDModel"),c(VH,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerModel"),c(XH,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertModel"),c(zH,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianModel"),c(QH,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartModel"),c(WH,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(HH,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetModel"),c(UH,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5Model"),c(JH,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(YH,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTModel"),c(KH,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusModel"),c(ZH,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertModel"),c(eU,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaModel"),c(oU,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerModel"),c(rU,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(tU,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinModel"),c(aU,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5Model"),c(nU,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasModel"),c(sU,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(lU,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTModel"),c(iU,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(dU,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(cU,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMModel"),c(fU,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(mU,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W8,"id","transformers.TFAutoModelForPreTraining"),c(W8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W8,"href","#transformers.TFAutoModelForPreTraining"),c(ac,"class","relative group"),c(gU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(uU,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(bU,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForPreTraining"),c(vU,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(FU,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(TU,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(MU,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(EU,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(CU,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(wU,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AU,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(LU,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(yU,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(xU,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($U,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(kU,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(SU,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(RU,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PU,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(BU,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(IU,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NU,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qU,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForCausalLM"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForCausalLM"),c(lc,"class","relative group"),c(jU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(VU,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(XU,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zU,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(QU,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(WU,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(HU,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(UU,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(JU,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(YU,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(KU,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(ZU,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(eJ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BM,"id","transformers.TFAutoModelForImageClassification"),c(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BM,"href","#transformers.TFAutoModelForImageClassification"),c(cc,"class","relative group"),c(oJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(nJ,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(sJ,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(lJ,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.TFAutoModelForMaskedLM"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.TFAutoModelForMaskedLM"),c(gc,"class","relative group"),c(iJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(mJ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(gJ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(hJ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(pJ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(_J,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(uJ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bJ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(vJ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FJ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(MJ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(EJ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($J,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(_c,"class","relative group"),c(kJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(IJ,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(qJ,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianMTModel"),c(DJ,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(GJ,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(OJ,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForSequenceClassification"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForSequenceClassification"),c(vc,"class","relative group"),c(XJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(HJ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(uY,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(bY,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.TFAutoModelForMultipleChoice"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Mc,"class","relative group"),c(vY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(EY,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(CY,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(wY,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(AY,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(LY,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(yY,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(xY,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c($Y,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(kY,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(SY,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(RY,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(PY,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(BY,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(IY,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(NY,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(qY,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(wc,"class","relative group"),c(jY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(VY,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(yc,"class","relative group"),c(XY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.TFAutoModelForTokenClassification"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.TFAutoModelForTokenClassification"),c(kc,"class","relative group"),c(HY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(KY,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(ZY,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(eK,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(oK,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(rK,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(tK,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(aK,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(nK,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(sK,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(lK,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(iK,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(dK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(cK,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(fK,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(mK,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(gK,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(hK,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(pK,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(_K,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y4,"id","transformers.TFAutoModelForQuestionAnswering"),c(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Pc,"class","relative group"),c(uK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(TK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(MK,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(EK,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(CK,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(wK,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(AK,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(xK,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(qK,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.TFAutoModelForVision2Seq"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.TFAutoModelForVision2Seq"),c(Nc,"class","relative group"),c(DK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Dc,"class","relative group"),c(XK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.FlaxAutoModel"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.FlaxAutoModel"),c(Vc,"class","relative group"),c(HK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertModel"),c(KK,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartModel"),c(ZK,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitModel"),c(eZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertModel"),c(oZ,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(rZ,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(tZ,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(aZ,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.FlaxCLIPModel"),c(nZ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(sZ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraModel"),c(lZ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(iZ,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(dZ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(cZ,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(fZ,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianModel"),c(mZ,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartModel"),c(gZ,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5Model"),c(hZ,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTModel"),c(pZ,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(_Z,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(uZ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(bZ,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5Model"),c(vZ,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(FZ,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTModel"),c(TZ,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(MZ,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(EZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.FlaxAutoModelForCausalLM"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Qc,"class","relative group"),c(CZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LZ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(yZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(xZ,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c($Z,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(kZ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(SZ,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(RZ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(PZ,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(BZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(IZ,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.FlaxAutoModelForPreTraining"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Uc,"class","relative group"),c(NZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DZ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(GZ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(VZ,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(XZ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(zZ,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(QZ,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(UZ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(JZ,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(YZ,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(KZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R5,"id","transformers.FlaxAutoModelForMaskedLM"),c(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Kc,"class","relative group"),c(ZZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(tee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(nee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(see,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(lee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(iee,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(cee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(fee,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(of,"class","relative group"),c(mee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_ee,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(uee,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(bee,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(vee,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Fee,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Tee,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Mee,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Eee,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Cee,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(af,"class","relative group"),c(wee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yee,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(xee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c($ee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(kee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(See,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Ree,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Pee,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Bee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Iee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Nee,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(lf,"class","relative group"),c(qee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gee,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Oee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Vee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Xee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(zee,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Qee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Wee,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Hee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Uee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Jee,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.FlaxAutoModelForTokenClassification"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(ff,"class","relative group"),c(Yee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eoe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(ooe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(roe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(toe,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(aoe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(noe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(soe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(loe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(hf,"class","relative group"),c(ioe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(doe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(coe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(foe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(moe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(goe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(hoe,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(poe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(_oe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(uoe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(boe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(uf,"class","relative group"),c(voe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Foe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Toe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Moe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t0,"id","transformers.FlaxAutoModelForImageClassification"),c(t0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t0,"href","#transformers.FlaxAutoModelForImageClassification"),c(Ff,"class","relative group"),c(Eoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Coe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(woe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aoe,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Loe,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.FlaxAutoModelForVision2Seq"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Ef,"class","relative group"),c(yoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($oe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(koe,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Mi),b(f,xf,u),b(f,at,u),e(at,Ei),e(at,Ci),e(Ci,SA),e(at,$f),b(f,Oe,u),b(f,Qe,u),e(Qe,wi),e(Qe,Rn),e(Rn,RA),e(Qe,Pn),e(Qe,Bn),e(Bn,PA),e(Qe,Ai),e(Qe,In),e(In,BA),e(Qe,Li),b(f,kf,u),M(xa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,cS),e(Ae,yi),e(yi,fS),e(Ae,mS),b(f,Co,u),b(f,$a,u),e($a,gS),e($a,Sf),e(Sf,hS),e($a,xQe),b(f,hOe,u),b(f,xi,u),e(xi,Rf),e(Rf,Ate),M(IA,Ate,null),e(xi,$Qe),e(xi,Lte),e(Lte,kQe),b(f,pOe,u),b(f,Nn,u),e(Nn,SQe),e(Nn,yte),e(yte,RQe),e(Nn,PQe),e(Nn,xte),e(xte,BQe),e(Nn,IQe),b(f,_Oe,u),M(NA,f,u),b(f,uOe,u),b(f,pS,u),e(pS,NQe),b(f,bOe,u),M(Pf,f,u),b(f,vOe,u),b(f,$i,u),e($i,Bf),e(Bf,$te),M(qA,$te,null),e($i,qQe),e($i,kte),e(kte,jQe),b(f,FOe,u),b(f,wo,u),M(jA,wo,null),e(wo,DQe),e(wo,DA),e(DA,GQe),e(DA,_S),e(_S,OQe),e(DA,VQe),e(wo,XQe),e(wo,GA),e(GA,zQe),e(GA,Ste),e(Ste,QQe),e(GA,WQe),e(wo,HQe),e(wo,Ar),M(OA,Ar,null),e(Ar,UQe),e(Ar,Rte),e(Rte,JQe),e(Ar,YQe),e(Ar,ki),e(ki,KQe),e(ki,Pte),e(Pte,ZQe),e(ki,eWe),e(ki,Bte),e(Bte,oWe),e(ki,rWe),e(Ar,tWe),e(Ar,A),e(A,If),e(If,Ite),e(Ite,aWe),e(If,nWe),e(If,uS),e(uS,sWe),e(If,lWe),e(A,iWe),e(A,Nf),e(Nf,Nte),e(Nte,dWe),e(Nf,cWe),e(Nf,bS),e(bS,fWe),e(Nf,mWe),e(A,gWe),e(A,qf),e(qf,qte),e(qte,hWe),e(qf,pWe),e(qf,vS),e(vS,_We),e(qf,uWe),e(A,bWe),e(A,jf),e(jf,jte),e(jte,vWe),e(jf,FWe),e(jf,FS),e(FS,TWe),e(jf,MWe),e(A,EWe),e(A,Df),e(Df,Dte),e(Dte,CWe),e(Df,wWe),e(Df,TS),e(TS,AWe),e(Df,LWe),e(A,yWe),e(A,Gf),e(Gf,Gte),e(Gte,xWe),e(Gf,$We),e(Gf,MS),e(MS,kWe),e(Gf,SWe),e(A,RWe),e(A,Of),e(Of,Ote),e(Ote,PWe),e(Of,BWe),e(Of,ES),e(ES,IWe),e(Of,NWe),e(A,qWe),e(A,Vf),e(Vf,Vte),e(Vte,jWe),e(Vf,DWe),e(Vf,CS),e(CS,GWe),e(Vf,OWe),e(A,VWe),e(A,Xf),e(Xf,Xte),e(Xte,XWe),e(Xf,zWe),e(Xf,wS),e(wS,QWe),e(Xf,WWe),e(A,HWe),e(A,zf),e(zf,zte),e(zte,UWe),e(zf,JWe),e(zf,AS),e(AS,YWe),e(zf,KWe),e(A,ZWe),e(A,Qf),e(Qf,Qte),e(Qte,eHe),e(Qf,oHe),e(Qf,LS),e(LS,rHe),e(Qf,tHe),e(A,aHe),e(A,Wf),e(Wf,Wte),e(Wte,nHe),e(Wf,sHe),e(Wf,yS),e(yS,lHe),e(Wf,iHe),e(A,dHe),e(A,Hf),e(Hf,Hte),e(Hte,cHe),e(Hf,fHe),e(Hf,xS),e(xS,mHe),e(Hf,gHe),e(A,hHe),e(A,Uf),e(Uf,Ute),e(Ute,pHe),e(Uf,_He),e(Uf,$S),e($S,uHe),e(Uf,bHe),e(A,vHe),e(A,Jf),e(Jf,Jte),e(Jte,FHe),e(Jf,THe),e(Jf,kS),e(kS,MHe),e(Jf,EHe),e(A,CHe),e(A,Yf),e(Yf,Yte),e(Yte,wHe),e(Yf,AHe),e(Yf,SS),e(SS,LHe),e(Yf,yHe),e(A,xHe),e(A,Kf),e(Kf,Kte),e(Kte,$He),e(Kf,kHe),e(Kf,RS),e(RS,SHe),e(Kf,RHe),e(A,PHe),e(A,Zf),e(Zf,Zte),e(Zte,BHe),e(Zf,IHe),e(Zf,PS),e(PS,NHe),e(Zf,qHe),e(A,jHe),e(A,em),e(em,eae),e(eae,DHe),e(em,GHe),e(em,BS),e(BS,OHe),e(em,VHe),e(A,XHe),e(A,om),e(om,oae),e(oae,zHe),e(om,QHe),e(om,IS),e(IS,WHe),e(om,HHe),e(A,UHe),e(A,rm),e(rm,rae),e(rae,JHe),e(rm,YHe),e(rm,NS),e(NS,KHe),e(rm,ZHe),e(A,eUe),e(A,tm),e(tm,tae),e(tae,oUe),e(tm,rUe),e(tm,qS),e(qS,tUe),e(tm,aUe),e(A,nUe),e(A,am),e(am,aae),e(aae,sUe),e(am,lUe),e(am,jS),e(jS,iUe),e(am,dUe),e(A,cUe),e(A,nm),e(nm,nae),e(nae,fUe),e(nm,mUe),e(nm,DS),e(DS,gUe),e(nm,hUe),e(A,pUe),e(A,sm),e(sm,sae),e(sae,_Ue),e(sm,uUe),e(sm,GS),e(GS,bUe),e(sm,vUe),e(A,FUe),e(A,lm),e(lm,lae),e(lae,TUe),e(lm,MUe),e(lm,OS),e(OS,EUe),e(lm,CUe),e(A,wUe),e(A,im),e(im,iae),e(iae,AUe),e(im,LUe),e(im,VS),e(VS,yUe),e(im,xUe),e(A,$Ue),e(A,dm),e(dm,dae),e(dae,kUe),e(dm,SUe),e(dm,XS),e(XS,RUe),e(dm,PUe),e(A,BUe),e(A,cm),e(cm,cae),e(cae,IUe),e(cm,NUe),e(cm,zS),e(zS,qUe),e(cm,jUe),e(A,DUe),e(A,fm),e(fm,fae),e(fae,GUe),e(fm,OUe),e(fm,QS),e(QS,VUe),e(fm,XUe),e(A,zUe),e(A,mm),e(mm,mae),e(mae,QUe),e(mm,WUe),e(mm,WS),e(WS,HUe),e(mm,UUe),e(A,JUe),e(A,gm),e(gm,gae),e(gae,YUe),e(gm,KUe),e(gm,HS),e(HS,ZUe),e(gm,eJe),e(A,oJe),e(A,hm),e(hm,hae),e(hae,rJe),e(hm,tJe),e(hm,US),e(US,aJe),e(hm,nJe),e(A,sJe),e(A,pm),e(pm,pae),e(pae,lJe),e(pm,iJe),e(pm,JS),e(JS,dJe),e(pm,cJe),e(A,fJe),e(A,_m),e(_m,_ae),e(_ae,mJe),e(_m,gJe),e(_m,YS),e(YS,hJe),e(_m,pJe),e(A,_Je),e(A,um),e(um,uae),e(uae,uJe),e(um,bJe),e(um,KS),e(KS,vJe),e(um,FJe),e(A,TJe),e(A,bm),e(bm,bae),e(bae,MJe),e(bm,EJe),e(bm,ZS),e(ZS,CJe),e(bm,wJe),e(A,AJe),e(A,vm),e(vm,vae),e(vae,LJe),e(vm,yJe),e(vm,eR),e(eR,xJe),e(vm,$Je),e(A,kJe),e(A,Fm),e(Fm,Fae),e(Fae,SJe),e(Fm,RJe),e(Fm,oR),e(oR,PJe),e(Fm,BJe),e(A,IJe),e(A,Tm),e(Tm,Tae),e(Tae,NJe),e(Tm,qJe),e(Tm,rR),e(rR,jJe),e(Tm,DJe),e(A,GJe),e(A,Mm),e(Mm,Mae),e(Mae,OJe),e(Mm,VJe),e(Mm,tR),e(tR,XJe),e(Mm,zJe),e(A,QJe),e(A,Em),e(Em,Eae),e(Eae,WJe),e(Em,HJe),e(Em,aR),e(aR,UJe),e(Em,JJe),e(A,YJe),e(A,Cm),e(Cm,Cae),e(Cae,KJe),e(Cm,ZJe),e(Cm,nR),e(nR,eYe),e(Cm,oYe),e(A,rYe),e(A,wm),e(wm,wae),e(wae,tYe),e(wm,aYe),e(wm,sR),e(sR,nYe),e(wm,sYe),e(A,lYe),e(A,Am),e(Am,Aae),e(Aae,iYe),e(Am,dYe),e(Am,lR),e(lR,cYe),e(Am,fYe),e(A,mYe),e(A,Lm),e(Lm,Lae),e(Lae,gYe),e(Lm,hYe),e(Lm,iR),e(iR,pYe),e(Lm,_Ye),e(A,uYe),e(A,ym),e(ym,yae),e(yae,bYe),e(ym,vYe),e(ym,dR),e(dR,FYe),e(ym,TYe),e(A,MYe),e(A,xm),e(xm,xae),e(xae,EYe),e(xm,CYe),e(xm,cR),e(cR,wYe),e(xm,AYe),e(A,LYe),e(A,$m),e($m,$ae),e($ae,yYe),e($m,xYe),e($m,fR),e(fR,$Ye),e($m,kYe),e(A,SYe),e(A,km),e(km,kae),e(kae,RYe),e(km,PYe),e(km,mR),e(mR,BYe),e(km,IYe),e(A,NYe),e(A,Sm),e(Sm,Sae),e(Sae,qYe),e(Sm,jYe),e(Sm,gR),e(gR,DYe),e(Sm,GYe),e(A,OYe),e(A,Rm),e(Rm,Rae),e(Rae,VYe),e(Rm,XYe),e(Rm,hR),e(hR,zYe),e(Rm,QYe),e(A,WYe),e(A,Pm),e(Pm,Pae),e(Pae,HYe),e(Pm,UYe),e(Pm,pR),e(pR,JYe),e(Pm,YYe),e(A,KYe),e(A,Bm),e(Bm,Bae),e(Bae,ZYe),e(Bm,eKe),e(Bm,_R),e(_R,oKe),e(Bm,rKe),e(A,tKe),e(A,Im),e(Im,Iae),e(Iae,aKe),e(Im,nKe),e(Im,uR),e(uR,sKe),e(Im,lKe),e(A,iKe),e(A,Nm),e(Nm,Nae),e(Nae,dKe),e(Nm,cKe),e(Nm,bR),e(bR,fKe),e(Nm,mKe),e(A,gKe),e(A,qm),e(qm,qae),e(qae,hKe),e(qm,pKe),e(qm,vR),e(vR,_Ke),e(qm,uKe),e(A,bKe),e(A,jm),e(jm,jae),e(jae,vKe),e(jm,FKe),e(jm,FR),e(FR,TKe),e(jm,MKe),e(A,EKe),e(A,Dm),e(Dm,Dae),e(Dae,CKe),e(Dm,wKe),e(Dm,TR),e(TR,AKe),e(Dm,LKe),e(A,yKe),e(A,Gm),e(Gm,Gae),e(Gae,xKe),e(Gm,$Ke),e(Gm,MR),e(MR,kKe),e(Gm,SKe),e(A,RKe),e(A,Om),e(Om,Oae),e(Oae,PKe),e(Om,BKe),e(Om,ER),e(ER,IKe),e(Om,NKe),e(A,qKe),e(A,Vm),e(Vm,Vae),e(Vae,jKe),e(Vm,DKe),e(Vm,CR),e(CR,GKe),e(Vm,OKe),e(A,VKe),e(A,Xm),e(Xm,Xae),e(Xae,XKe),e(Xm,zKe),e(Xm,wR),e(wR,QKe),e(Xm,WKe),e(A,HKe),e(A,zm),e(zm,zae),e(zae,UKe),e(zm,JKe),e(zm,AR),e(AR,YKe),e(zm,KKe),e(A,ZKe),e(A,Qm),e(Qm,Qae),e(Qae,eZe),e(Qm,oZe),e(Qm,LR),e(LR,rZe),e(Qm,tZe),e(A,aZe),e(A,Wm),e(Wm,Wae),e(Wae,nZe),e(Wm,sZe),e(Wm,yR),e(yR,lZe),e(Wm,iZe),e(A,dZe),e(A,Hm),e(Hm,Hae),e(Hae,cZe),e(Hm,fZe),e(Hm,xR),e(xR,mZe),e(Hm,gZe),e(A,hZe),e(A,Um),e(Um,Uae),e(Uae,pZe),e(Um,_Ze),e(Um,$R),e($R,uZe),e(Um,bZe),e(A,vZe),e(A,Jm),e(Jm,Jae),e(Jae,FZe),e(Jm,TZe),e(Jm,kR),e(kR,MZe),e(Jm,EZe),e(A,CZe),e(A,Ym),e(Ym,Yae),e(Yae,wZe),e(Ym,AZe),e(Ym,SR),e(SR,LZe),e(Ym,yZe),e(A,xZe),e(A,Km),e(Km,Kae),e(Kae,$Ze),e(Km,kZe),e(Km,RR),e(RR,SZe),e(Km,RZe),e(A,PZe),e(A,Zm),e(Zm,Zae),e(Zae,BZe),e(Zm,IZe),e(Zm,PR),e(PR,NZe),e(Zm,qZe),e(A,jZe),e(A,eg),e(eg,ene),e(ene,DZe),e(eg,GZe),e(eg,BR),e(BR,OZe),e(eg,VZe),e(A,XZe),e(A,og),e(og,one),e(one,zZe),e(og,QZe),e(og,IR),e(IR,WZe),e(og,HZe),e(A,UZe),e(A,rg),e(rg,rne),e(rne,JZe),e(rg,YZe),e(rg,NR),e(NR,KZe),e(rg,ZZe),e(A,eeo),e(A,tg),e(tg,tne),e(tne,oeo),e(tg,reo),e(tg,qR),e(qR,teo),e(tg,aeo),e(A,neo),e(A,ag),e(ag,ane),e(ane,seo),e(ag,leo),e(ag,jR),e(jR,ieo),e(ag,deo),e(A,ceo),e(A,ng),e(ng,nne),e(nne,feo),e(ng,meo),e(ng,DR),e(DR,geo),e(ng,heo),e(A,peo),e(A,sg),e(sg,sne),e(sne,_eo),e(sg,ueo),e(sg,GR),e(GR,beo),e(sg,veo),e(A,Feo),e(A,lg),e(lg,lne),e(lne,Teo),e(lg,Meo),e(lg,OR),e(OR,Eeo),e(lg,Ceo),e(A,weo),e(A,ig),e(ig,ine),e(ine,Aeo),e(ig,Leo),e(ig,VR),e(VR,yeo),e(ig,xeo),e(A,$eo),e(A,dg),e(dg,dne),e(dne,keo),e(dg,Seo),e(dg,XR),e(XR,Reo),e(dg,Peo),e(A,Beo),e(A,cg),e(cg,cne),e(cne,Ieo),e(cg,Neo),e(cg,zR),e(zR,qeo),e(cg,jeo),e(A,Deo),e(A,fg),e(fg,fne),e(fne,Geo),e(fg,Oeo),e(fg,QR),e(QR,Veo),e(fg,Xeo),e(A,zeo),e(A,mg),e(mg,mne),e(mne,Qeo),e(mg,Weo),e(mg,WR),e(WR,Heo),e(mg,Ueo),e(A,Jeo),e(A,gg),e(gg,gne),e(gne,Yeo),e(gg,Keo),e(gg,HR),e(HR,Zeo),e(gg,eoo),e(A,ooo),e(A,hg),e(hg,hne),e(hne,roo),e(hg,too),e(hg,UR),e(UR,aoo),e(hg,noo),e(A,soo),e(A,pg),e(pg,pne),e(pne,loo),e(pg,ioo),e(pg,JR),e(JR,doo),e(pg,coo),e(A,foo),e(A,_g),e(_g,_ne),e(_ne,moo),e(_g,goo),e(_g,YR),e(YR,hoo),e(_g,poo),e(A,_oo),e(A,ug),e(ug,une),e(une,uoo),e(ug,boo),e(ug,KR),e(KR,voo),e(ug,Foo),e(A,Too),e(A,bg),e(bg,bne),e(bne,Moo),e(bg,Eoo),e(bg,ZR),e(ZR,Coo),e(bg,woo),e(A,Aoo),e(A,vg),e(vg,vne),e(vne,Loo),e(vg,yoo),e(vg,eP),e(eP,xoo),e(vg,$oo),e(A,koo),e(A,Fg),e(Fg,Fne),e(Fne,Soo),e(Fg,Roo),e(Fg,oP),e(oP,Poo),e(Fg,Boo),e(A,Ioo),e(A,Tg),e(Tg,Tne),e(Tne,Noo),e(Tg,qoo),e(Tg,rP),e(rP,joo),e(Tg,Doo),e(A,Goo),e(A,Mg),e(Mg,Mne),e(Mne,Ooo),e(Mg,Voo),e(Mg,tP),e(tP,Xoo),e(Mg,zoo),e(A,Qoo),e(A,Eg),e(Eg,Ene),e(Ene,Woo),e(Eg,Hoo),e(Eg,aP),e(aP,Uoo),e(Eg,Joo),e(A,Yoo),e(A,Cg),e(Cg,Cne),e(Cne,Koo),e(Cg,Zoo),e(Cg,nP),e(nP,ero),e(Cg,oro),e(A,rro),e(A,wg),e(wg,wne),e(wne,tro),e(wg,aro),e(wg,sP),e(sP,nro),e(wg,sro),e(A,lro),e(A,Ag),e(Ag,Ane),e(Ane,iro),e(Ag,dro),e(Ag,lP),e(lP,cro),e(Ag,fro),e(A,mro),e(A,Lg),e(Lg,Lne),e(Lne,gro),e(Lg,hro),e(Lg,iP),e(iP,pro),e(Lg,_ro),e(A,uro),e(A,yg),e(yg,yne),e(yne,bro),e(yg,vro),e(yg,dP),e(dP,Fro),e(yg,Tro),e(A,Mro),e(A,xg),e(xg,xne),e(xne,Ero),e(xg,Cro),e(xg,cP),e(cP,wro),e(xg,Aro),e(A,Lro),e(A,$g),e($g,$ne),e($ne,yro),e($g,xro),e($g,fP),e(fP,$ro),e($g,kro),e(A,Sro),e(A,kg),e(kg,kne),e(kne,Rro),e(kg,Pro),e(kg,mP),e(mP,Bro),e(kg,Iro),e(A,Nro),e(A,Sg),e(Sg,Sne),e(Sne,qro),e(Sg,jro),e(Sg,gP),e(gP,Dro),e(Sg,Gro),e(A,Oro),e(A,Rg),e(Rg,Rne),e(Rne,Vro),e(Rg,Xro),e(Rg,hP),e(hP,zro),e(Rg,Qro),e(A,Wro),e(A,Pg),e(Pg,Pne),e(Pne,Hro),e(Pg,Uro),e(Pg,pP),e(pP,Jro),e(Pg,Yro),e(A,Kro),e(A,Bg),e(Bg,Bne),e(Bne,Zro),e(Bg,eto),e(Bg,_P),e(_P,oto),e(Bg,rto),e(A,tto),e(A,Ig),e(Ig,Ine),e(Ine,ato),e(Ig,nto),e(Ig,uP),e(uP,sto),e(Ig,lto),e(A,ito),e(A,Ng),e(Ng,Nne),e(Nne,dto),e(Ng,cto),e(Ng,bP),e(bP,fto),e(Ng,mto),e(A,gto),e(A,qg),e(qg,qne),e(qne,hto),e(qg,pto),e(qg,vP),e(vP,_to),e(qg,uto),e(A,bto),e(A,jg),e(jg,jne),e(jne,vto),e(jg,Fto),e(jg,FP),e(FP,Tto),e(jg,Mto),e(A,Eto),e(A,Dg),e(Dg,Dne),e(Dne,Cto),e(Dg,wto),e(Dg,TP),e(TP,Ato),e(Dg,Lto),e(A,yto),e(A,Gg),e(Gg,Gne),e(Gne,xto),e(Gg,$to),e(Gg,MP),e(MP,kto),e(Gg,Sto),e(A,Rto),e(A,Og),e(Og,One),e(One,Pto),e(Og,Bto),e(Og,EP),e(EP,Ito),e(Og,Nto),e(A,qto),e(A,Vg),e(Vg,Vne),e(Vne,jto),e(Vg,Dto),e(Vg,CP),e(CP,Gto),e(Vg,Oto),e(Ar,Vto),M(Xg,Ar,null),e(wo,Xto),e(wo,zg),M(VA,zg,null),e(zg,zto),e(zg,Xne),e(Xne,Qto),b(f,TOe,u),b(f,Si,u),e(Si,Qg),e(Qg,zne),M(XA,zne,null),e(Si,Wto),e(Si,Qne),e(Qne,Hto),b(f,MOe,u),b(f,Ao,u),M(zA,Ao,null),e(Ao,Uto),e(Ao,QA),e(QA,Jto),e(QA,wP),e(wP,Yto),e(QA,Kto),e(Ao,Zto),e(Ao,WA),e(WA,eao),e(WA,Wne),e(Wne,oao),e(WA,rao),e(Ao,tao),e(Ao,Lr),M(HA,Lr,null),e(Lr,aao),e(Lr,Hne),e(Hne,nao),e(Lr,sao),e(Lr,ka),e(ka,lao),e(ka,Une),e(Une,iao),e(ka,dao),e(ka,Jne),e(Jne,cao),e(ka,fao),e(ka,Yne),e(Yne,mao),e(ka,gao),e(Lr,hao),e(Lr,k),e(k,qn),e(qn,Kne),e(Kne,pao),e(qn,_ao),e(qn,AP),e(AP,uao),e(qn,bao),e(qn,LP),e(LP,vao),e(qn,Fao),e(k,Tao),e(k,jn),e(jn,Zne),e(Zne,Mao),e(jn,Eao),e(jn,yP),e(yP,Cao),e(jn,wao),e(jn,xP),e(xP,Aao),e(jn,Lao),e(k,yao),e(k,Dn),e(Dn,ese),e(ese,xao),e(Dn,$ao),e(Dn,$P),e($P,kao),e(Dn,Sao),e(Dn,kP),e(kP,Rao),e(Dn,Pao),e(k,Bao),e(k,Wg),e(Wg,ose),e(ose,Iao),e(Wg,Nao),e(Wg,SP),e(SP,qao),e(Wg,jao),e(k,Dao),e(k,Gn),e(Gn,rse),e(rse,Gao),e(Gn,Oao),e(Gn,RP),e(RP,Vao),e(Gn,Xao),e(Gn,PP),e(PP,zao),e(Gn,Qao),e(k,Wao),e(k,Hg),e(Hg,tse),e(tse,Hao),e(Hg,Uao),e(Hg,BP),e(BP,Jao),e(Hg,Yao),e(k,Kao),e(k,Ug),e(Ug,ase),e(ase,Zao),e(Ug,eno),e(Ug,IP),e(IP,ono),e(Ug,rno),e(k,tno),e(k,Jg),e(Jg,nse),e(nse,ano),e(Jg,nno),e(Jg,NP),e(NP,sno),e(Jg,lno),e(k,ino),e(k,On),e(On,sse),e(sse,dno),e(On,cno),e(On,qP),e(qP,fno),e(On,mno),e(On,jP),e(jP,gno),e(On,hno),e(k,pno),e(k,Vn),e(Vn,lse),e(lse,_no),e(Vn,uno),e(Vn,DP),e(DP,bno),e(Vn,vno),e(Vn,GP),e(GP,Fno),e(Vn,Tno),e(k,Mno),e(k,Xn),e(Xn,ise),e(ise,Eno),e(Xn,Cno),e(Xn,OP),e(OP,wno),e(Xn,Ano),e(Xn,VP),e(VP,Lno),e(Xn,yno),e(k,xno),e(k,Yg),e(Yg,dse),e(dse,$no),e(Yg,kno),e(Yg,XP),e(XP,Sno),e(Yg,Rno),e(k,Pno),e(k,Kg),e(Kg,cse),e(cse,Bno),e(Kg,Ino),e(Kg,zP),e(zP,Nno),e(Kg,qno),e(k,jno),e(k,Zg),e(Zg,fse),e(fse,Dno),e(Zg,Gno),e(Zg,QP),e(QP,Ono),e(Zg,Vno),e(k,Xno),e(k,zn),e(zn,mse),e(mse,zno),e(zn,Qno),e(zn,WP),e(WP,Wno),e(zn,Hno),e(zn,HP),e(HP,Uno),e(zn,Jno),e(k,Yno),e(k,eh),e(eh,gse),e(gse,Kno),e(eh,Zno),e(eh,UP),e(UP,eso),e(eh,oso),e(k,rso),e(k,Qn),e(Qn,hse),e(hse,tso),e(Qn,aso),e(Qn,JP),e(JP,nso),e(Qn,sso),e(Qn,YP),e(YP,lso),e(Qn,iso),e(k,dso),e(k,Wn),e(Wn,pse),e(pse,cso),e(Wn,fso),e(Wn,KP),e(KP,mso),e(Wn,gso),e(Wn,ZP),e(ZP,hso),e(Wn,pso),e(k,_so),e(k,Hn),e(Hn,_se),e(_se,uso),e(Hn,bso),e(Hn,eB),e(eB,vso),e(Hn,Fso),e(Hn,oB),e(oB,Tso),e(Hn,Mso),e(k,Eso),e(k,Un),e(Un,use),e(use,Cso),e(Un,wso),e(Un,rB),e(rB,Aso),e(Un,Lso),e(Un,tB),e(tB,yso),e(Un,xso),e(k,$so),e(k,oh),e(oh,bse),e(bse,kso),e(oh,Sso),e(oh,aB),e(aB,Rso),e(oh,Pso),e(k,Bso),e(k,Jn),e(Jn,vse),e(vse,Iso),e(Jn,Nso),e(Jn,nB),e(nB,qso),e(Jn,jso),e(Jn,sB),e(sB,Dso),e(Jn,Gso),e(k,Oso),e(k,Yn),e(Yn,Fse),e(Fse,Vso),e(Yn,Xso),e(Yn,lB),e(lB,zso),e(Yn,Qso),e(Yn,iB),e(iB,Wso),e(Yn,Hso),e(k,Uso),e(k,Kn),e(Kn,Tse),e(Tse,Jso),e(Kn,Yso),e(Kn,dB),e(dB,Kso),e(Kn,Zso),e(Kn,cB),e(cB,elo),e(Kn,olo),e(k,rlo),e(k,Zn),e(Zn,Mse),e(Mse,tlo),e(Zn,alo),e(Zn,fB),e(fB,nlo),e(Zn,slo),e(Zn,mB),e(mB,llo),e(Zn,ilo),e(k,dlo),e(k,es),e(es,Ese),e(Ese,clo),e(es,flo),e(es,gB),e(gB,mlo),e(es,glo),e(es,hB),e(hB,hlo),e(es,plo),e(k,_lo),e(k,os),e(os,Cse),e(Cse,ulo),e(os,blo),e(os,pB),e(pB,vlo),e(os,Flo),e(os,_B),e(_B,Tlo),e(os,Mlo),e(k,Elo),e(k,rh),e(rh,wse),e(wse,Clo),e(rh,wlo),e(rh,uB),e(uB,Alo),e(rh,Llo),e(k,ylo),e(k,rs),e(rs,Ase),e(Ase,xlo),e(rs,$lo),e(rs,bB),e(bB,klo),e(rs,Slo),e(rs,vB),e(vB,Rlo),e(rs,Plo),e(k,Blo),e(k,th),e(th,Lse),e(Lse,Ilo),e(th,Nlo),e(th,FB),e(FB,qlo),e(th,jlo),e(k,Dlo),e(k,ts),e(ts,yse),e(yse,Glo),e(ts,Olo),e(ts,TB),e(TB,Vlo),e(ts,Xlo),e(ts,MB),e(MB,zlo),e(ts,Qlo),e(k,Wlo),e(k,as),e(as,xse),e(xse,Hlo),e(as,Ulo),e(as,EB),e(EB,Jlo),e(as,Ylo),e(as,CB),e(CB,Klo),e(as,Zlo),e(k,eio),e(k,ns),e(ns,$se),e($se,oio),e(ns,rio),e(ns,wB),e(wB,tio),e(ns,aio),e(ns,AB),e(AB,nio),e(ns,sio),e(k,lio),e(k,ah),e(ah,kse),e(kse,iio),e(ah,dio),e(ah,LB),e(LB,cio),e(ah,fio),e(k,mio),e(k,ss),e(ss,Sse),e(Sse,gio),e(ss,hio),e(ss,yB),e(yB,pio),e(ss,_io),e(ss,xB),e(xB,uio),e(ss,bio),e(k,vio),e(k,ls),e(ls,Rse),e(Rse,Fio),e(ls,Tio),e(ls,$B),e($B,Mio),e(ls,Eio),e(ls,kB),e(kB,Cio),e(ls,wio),e(k,Aio),e(k,nh),e(nh,Pse),e(Pse,Lio),e(nh,yio),e(nh,SB),e(SB,xio),e(nh,$io),e(k,kio),e(k,is),e(is,Bse),e(Bse,Sio),e(is,Rio),e(is,RB),e(RB,Pio),e(is,Bio),e(is,PB),e(PB,Iio),e(is,Nio),e(k,qio),e(k,sh),e(sh,Ise),e(Ise,jio),e(sh,Dio),e(sh,Nse),e(Nse,Gio),e(sh,Oio),e(k,Vio),e(k,ds),e(ds,qse),e(qse,Xio),e(ds,zio),e(ds,BB),e(BB,Qio),e(ds,Wio),e(ds,IB),e(IB,Hio),e(ds,Uio),e(k,Jio),e(k,cs),e(cs,jse),e(jse,Yio),e(cs,Kio),e(cs,NB),e(NB,Zio),e(cs,edo),e(cs,qB),e(qB,odo),e(cs,rdo),e(k,tdo),e(k,fs),e(fs,Dse),e(Dse,ado),e(fs,ndo),e(fs,jB),e(jB,sdo),e(fs,ldo),e(fs,DB),e(DB,ido),e(fs,ddo),e(k,cdo),e(k,ms),e(ms,Gse),e(Gse,fdo),e(ms,mdo),e(ms,GB),e(GB,gdo),e(ms,hdo),e(ms,OB),e(OB,pdo),e(ms,_do),e(k,udo),e(k,gs),e(gs,Ose),e(Ose,bdo),e(gs,vdo),e(gs,VB),e(VB,Fdo),e(gs,Tdo),e(gs,XB),e(XB,Mdo),e(gs,Edo),e(k,Cdo),e(k,hs),e(hs,Vse),e(Vse,wdo),e(hs,Ado),e(hs,zB),e(zB,Ldo),e(hs,ydo),e(hs,QB),e(QB,xdo),e(hs,$do),e(k,kdo),e(k,ps),e(ps,Xse),e(Xse,Sdo),e(ps,Rdo),e(ps,WB),e(WB,Pdo),e(ps,Bdo),e(ps,HB),e(HB,Ido),e(ps,Ndo),e(k,qdo),e(k,lh),e(lh,zse),e(zse,jdo),e(lh,Ddo),e(lh,UB),e(UB,Gdo),e(lh,Odo),e(k,Vdo),e(k,_s),e(_s,Qse),e(Qse,Xdo),e(_s,zdo),e(_s,JB),e(JB,Qdo),e(_s,Wdo),e(_s,YB),e(YB,Hdo),e(_s,Udo),e(k,Jdo),e(k,ih),e(ih,Wse),e(Wse,Ydo),e(ih,Kdo),e(ih,KB),e(KB,Zdo),e(ih,eco),e(k,oco),e(k,dh),e(dh,Hse),e(Hse,rco),e(dh,tco),e(dh,ZB),e(ZB,aco),e(dh,nco),e(k,sco),e(k,us),e(us,Use),e(Use,lco),e(us,ico),e(us,eI),e(eI,dco),e(us,cco),e(us,oI),e(oI,fco),e(us,mco),e(k,gco),e(k,bs),e(bs,Jse),e(Jse,hco),e(bs,pco),e(bs,rI),e(rI,_co),e(bs,uco),e(bs,tI),e(tI,bco),e(bs,vco),e(k,Fco),e(k,vs),e(vs,Yse),e(Yse,Tco),e(vs,Mco),e(vs,aI),e(aI,Eco),e(vs,Cco),e(vs,nI),e(nI,wco),e(vs,Aco),e(k,Lco),e(k,ch),e(ch,Kse),e(Kse,yco),e(ch,xco),e(ch,sI),e(sI,$co),e(ch,kco),e(k,Sco),e(k,Fs),e(Fs,Zse),e(Zse,Rco),e(Fs,Pco),e(Fs,lI),e(lI,Bco),e(Fs,Ico),e(Fs,iI),e(iI,Nco),e(Fs,qco),e(k,jco),e(k,Ts),e(Ts,ele),e(ele,Dco),e(Ts,Gco),e(Ts,dI),e(dI,Oco),e(Ts,Vco),e(Ts,cI),e(cI,Xco),e(Ts,zco),e(k,Qco),e(k,Ms),e(Ms,ole),e(ole,Wco),e(Ms,Hco),e(Ms,fI),e(fI,Uco),e(Ms,Jco),e(Ms,mI),e(mI,Yco),e(Ms,Kco),e(k,Zco),e(k,Es),e(Es,rle),e(rle,efo),e(Es,ofo),e(Es,gI),e(gI,rfo),e(Es,tfo),e(Es,hI),e(hI,afo),e(Es,nfo),e(k,sfo),e(k,Cs),e(Cs,tle),e(tle,lfo),e(Cs,ifo),e(Cs,pI),e(pI,dfo),e(Cs,cfo),e(Cs,_I),e(_I,ffo),e(Cs,mfo),e(k,gfo),e(k,ws),e(ws,ale),e(ale,hfo),e(ws,pfo),e(ws,uI),e(uI,_fo),e(ws,ufo),e(ws,bI),e(bI,bfo),e(ws,vfo),e(k,Ffo),e(k,fh),e(fh,nle),e(nle,Tfo),e(fh,Mfo),e(fh,vI),e(vI,Efo),e(fh,Cfo),e(k,wfo),e(k,As),e(As,sle),e(sle,Afo),e(As,Lfo),e(As,FI),e(FI,yfo),e(As,xfo),e(As,TI),e(TI,$fo),e(As,kfo),e(k,Sfo),e(k,mh),e(mh,lle),e(lle,Rfo),e(mh,Pfo),e(mh,MI),e(MI,Bfo),e(mh,Ifo),e(k,Nfo),e(k,gh),e(gh,ile),e(ile,qfo),e(gh,jfo),e(gh,EI),e(EI,Dfo),e(gh,Gfo),e(k,Ofo),e(k,hh),e(hh,dle),e(dle,Vfo),e(hh,Xfo),e(hh,CI),e(CI,zfo),e(hh,Qfo),e(k,Wfo),e(k,ph),e(ph,cle),e(cle,Hfo),e(ph,Ufo),e(ph,wI),e(wI,Jfo),e(ph,Yfo),e(k,Kfo),e(k,Ls),e(Ls,fle),e(fle,Zfo),e(Ls,emo),e(Ls,AI),e(AI,omo),e(Ls,rmo),e(Ls,LI),e(LI,tmo),e(Ls,amo),e(k,nmo),e(k,_h),e(_h,mle),e(mle,smo),e(_h,lmo),e(_h,yI),e(yI,imo),e(_h,dmo),e(k,cmo),e(k,ys),e(ys,gle),e(gle,fmo),e(ys,mmo),e(ys,xI),e(xI,gmo),e(ys,hmo),e(ys,$I),e($I,pmo),e(ys,_mo),e(k,umo),e(k,xs),e(xs,hle),e(hle,bmo),e(xs,vmo),e(xs,kI),e(kI,Fmo),e(xs,Tmo),e(xs,SI),e(SI,Mmo),e(xs,Emo),e(k,Cmo),e(k,$s),e($s,ple),e(ple,wmo),e($s,Amo),e($s,RI),e(RI,Lmo),e($s,ymo),e($s,PI),e(PI,xmo),e($s,$mo),e(k,kmo),e(k,ks),e(ks,_le),e(_le,Smo),e(ks,Rmo),e(ks,BI),e(BI,Pmo),e(ks,Bmo),e(ks,II),e(II,Imo),e(ks,Nmo),e(k,qmo),e(k,Ss),e(Ss,ule),e(ule,jmo),e(Ss,Dmo),e(Ss,NI),e(NI,Gmo),e(Ss,Omo),e(Ss,qI),e(qI,Vmo),e(Ss,Xmo),e(k,zmo),e(k,Rs),e(Rs,ble),e(ble,Qmo),e(Rs,Wmo),e(Rs,jI),e(jI,Hmo),e(Rs,Umo),e(Rs,DI),e(DI,Jmo),e(Rs,Ymo),e(k,Kmo),e(k,uh),e(uh,vle),e(vle,Zmo),e(uh,ego),e(uh,GI),e(GI,ogo),e(uh,rgo),e(k,tgo),e(k,bh),e(bh,Fle),e(Fle,ago),e(bh,ngo),e(bh,OI),e(OI,sgo),e(bh,lgo),e(k,igo),e(k,Ps),e(Ps,Tle),e(Tle,dgo),e(Ps,cgo),e(Ps,VI),e(VI,fgo),e(Ps,mgo),e(Ps,XI),e(XI,ggo),e(Ps,hgo),e(k,pgo),e(k,Bs),e(Bs,Mle),e(Mle,_go),e(Bs,ugo),e(Bs,zI),e(zI,bgo),e(Bs,vgo),e(Bs,QI),e(QI,Fgo),e(Bs,Tgo),e(k,Mgo),e(k,Is),e(Is,Ele),e(Ele,Ego),e(Is,Cgo),e(Is,WI),e(WI,wgo),e(Is,Ago),e(Is,HI),e(HI,Lgo),e(Is,ygo),e(k,xgo),e(k,vh),e(vh,Cle),e(Cle,$go),e(vh,kgo),e(vh,UI),e(UI,Sgo),e(vh,Rgo),e(k,Pgo),e(k,Fh),e(Fh,wle),e(wle,Bgo),e(Fh,Igo),e(Fh,JI),e(JI,Ngo),e(Fh,qgo),e(k,jgo),e(k,Th),e(Th,Ale),e(Ale,Dgo),e(Th,Ggo),e(Th,YI),e(YI,Ogo),e(Th,Vgo),e(k,Xgo),e(k,Ns),e(Ns,Lle),e(Lle,zgo),e(Ns,Qgo),e(Ns,KI),e(KI,Wgo),e(Ns,Hgo),e(Ns,ZI),e(ZI,Ugo),e(Ns,Jgo),e(k,Ygo),e(k,qs),e(qs,yle),e(yle,Kgo),e(qs,Zgo),e(qs,eN),e(eN,eho),e(qs,oho),e(qs,oN),e(oN,rho),e(qs,tho),e(k,aho),e(k,Mh),e(Mh,xle),e(xle,nho),e(Mh,sho),e(Mh,rN),e(rN,lho),e(Mh,iho),e(k,dho),e(k,Eh),e(Eh,$le),e($le,cho),e(Eh,fho),e(Eh,tN),e(tN,mho),e(Eh,gho),e(k,hho),e(k,Ch),e(Ch,kle),e(kle,pho),e(Ch,_ho),e(Ch,aN),e(aN,uho),e(Ch,bho),e(k,vho),e(k,js),e(js,Sle),e(Sle,Fho),e(js,Tho),e(js,nN),e(nN,Mho),e(js,Eho),e(js,sN),e(sN,Cho),e(js,who),e(k,Aho),e(k,wh),e(wh,Rle),e(Rle,Lho),e(wh,yho),e(wh,lN),e(lN,xho),e(wh,$ho),e(k,kho),e(k,Ah),e(Ah,Ple),e(Ple,Sho),e(Ah,Rho),e(Ah,iN),e(iN,Pho),e(Ah,Bho),e(k,Iho),e(k,Ds),e(Ds,Ble),e(Ble,Nho),e(Ds,qho),e(Ds,dN),e(dN,jho),e(Ds,Dho),e(Ds,cN),e(cN,Gho),e(Ds,Oho),e(k,Vho),e(k,Gs),e(Gs,Ile),e(Ile,Xho),e(Gs,zho),e(Gs,fN),e(fN,Qho),e(Gs,Who),e(Gs,mN),e(mN,Hho),e(Gs,Uho),e(k,Jho),e(k,Os),e(Os,Nle),e(Nle,Yho),e(Os,Kho),e(Os,gN),e(gN,Zho),e(Os,epo),e(Os,hN),e(hN,opo),e(Os,rpo),e(k,tpo),e(k,Vs),e(Vs,qle),e(qle,apo),e(Vs,npo),e(Vs,pN),e(pN,spo),e(Vs,lpo),e(Vs,_N),e(_N,ipo),e(Vs,dpo),e(Lr,cpo),M(Lh,Lr,null),e(Ao,fpo),e(Ao,yh),M(UA,yh,null),e(yh,mpo),e(yh,jle),e(jle,gpo),b(f,EOe,u),b(f,Ri,u),e(Ri,xh),e(xh,Dle),M(JA,Dle,null),e(Ri,hpo),e(Ri,Gle),e(Gle,ppo),b(f,COe,u),b(f,Lo,u),M(YA,Lo,null),e(Lo,_po),e(Lo,KA),e(KA,upo),e(KA,uN),e(uN,bpo),e(KA,vpo),e(Lo,Fpo),e(Lo,ZA),e(ZA,Tpo),e(ZA,Ole),e(Ole,Mpo),e(ZA,Epo),e(Lo,Cpo),e(Lo,He),M(eL,He,null),e(He,wpo),e(He,Vle),e(Vle,Apo),e(He,Lpo),e(He,Sa),e(Sa,ypo),e(Sa,Xle),e(Xle,xpo),e(Sa,$po),e(Sa,zle),e(zle,kpo),e(Sa,Spo),e(Sa,Qle),e(Qle,Rpo),e(Sa,Ppo),e(He,Bpo),e(He,Y),e(Y,$h),e($h,Wle),e(Wle,Ipo),e($h,Npo),e($h,bN),e(bN,qpo),e($h,jpo),e(Y,Dpo),e(Y,kh),e(kh,Hle),e(Hle,Gpo),e(kh,Opo),e(kh,vN),e(vN,Vpo),e(kh,Xpo),e(Y,zpo),e(Y,Sh),e(Sh,Ule),e(Ule,Qpo),e(Sh,Wpo),e(Sh,FN),e(FN,Hpo),e(Sh,Upo),e(Y,Jpo),e(Y,Rh),e(Rh,Jle),e(Jle,Ypo),e(Rh,Kpo),e(Rh,TN),e(TN,Zpo),e(Rh,e_o),e(Y,o_o),e(Y,Ph),e(Ph,Yle),e(Yle,r_o),e(Ph,t_o),e(Ph,MN),e(MN,a_o),e(Ph,n_o),e(Y,s_o),e(Y,Bh),e(Bh,Kle),e(Kle,l_o),e(Bh,i_o),e(Bh,EN),e(EN,d_o),e(Bh,c_o),e(Y,f_o),e(Y,Ih),e(Ih,Zle),e(Zle,m_o),e(Ih,g_o),e(Ih,CN),e(CN,h_o),e(Ih,p_o),e(Y,__o),e(Y,Nh),e(Nh,eie),e(eie,u_o),e(Nh,b_o),e(Nh,wN),e(wN,v_o),e(Nh,F_o),e(Y,T_o),e(Y,qh),e(qh,oie),e(oie,M_o),e(qh,E_o),e(qh,AN),e(AN,C_o),e(qh,w_o),e(Y,A_o),e(Y,jh),e(jh,rie),e(rie,L_o),e(jh,y_o),e(jh,LN),e(LN,x_o),e(jh,$_o),e(Y,k_o),e(Y,Dh),e(Dh,tie),e(tie,S_o),e(Dh,R_o),e(Dh,yN),e(yN,P_o),e(Dh,B_o),e(Y,I_o),e(Y,Gh),e(Gh,aie),e(aie,N_o),e(Gh,q_o),e(Gh,xN),e(xN,j_o),e(Gh,D_o),e(Y,G_o),e(Y,Oh),e(Oh,nie),e(nie,O_o),e(Oh,V_o),e(Oh,$N),e($N,X_o),e(Oh,z_o),e(Y,Q_o),e(Y,Vh),e(Vh,sie),e(sie,W_o),e(Vh,H_o),e(Vh,kN),e(kN,U_o),e(Vh,J_o),e(Y,Y_o),e(Y,Xh),e(Xh,lie),e(lie,K_o),e(Xh,Z_o),e(Xh,SN),e(SN,euo),e(Xh,ouo),e(Y,ruo),e(Y,zh),e(zh,iie),e(iie,tuo),e(zh,auo),e(zh,RN),e(RN,nuo),e(zh,suo),e(Y,luo),e(Y,Qh),e(Qh,die),e(die,iuo),e(Qh,duo),e(Qh,PN),e(PN,cuo),e(Qh,fuo),e(Y,muo),e(Y,Wh),e(Wh,cie),e(cie,guo),e(Wh,huo),e(Wh,BN),e(BN,puo),e(Wh,_uo),e(Y,uuo),e(Y,Hh),e(Hh,fie),e(fie,buo),e(Hh,vuo),e(Hh,IN),e(IN,Fuo),e(Hh,Tuo),e(Y,Muo),e(Y,Uh),e(Uh,mie),e(mie,Euo),e(Uh,Cuo),e(Uh,NN),e(NN,wuo),e(Uh,Auo),e(Y,Luo),e(Y,Jh),e(Jh,gie),e(gie,yuo),e(Jh,xuo),e(Jh,qN),e(qN,$uo),e(Jh,kuo),e(Y,Suo),e(Y,Yh),e(Yh,hie),e(hie,Ruo),e(Yh,Puo),e(Yh,jN),e(jN,Buo),e(Yh,Iuo),e(Y,Nuo),e(Y,Kh),e(Kh,pie),e(pie,quo),e(Kh,juo),e(Kh,DN),e(DN,Duo),e(Kh,Guo),e(Y,Ouo),e(Y,Zh),e(Zh,_ie),e(_ie,Vuo),e(Zh,Xuo),e(Zh,GN),e(GN,zuo),e(Zh,Quo),e(Y,Wuo),e(Y,ep),e(ep,uie),e(uie,Huo),e(ep,Uuo),e(ep,ON),e(ON,Juo),e(ep,Yuo),e(Y,Kuo),e(Y,op),e(op,bie),e(bie,Zuo),e(op,e2o),e(op,VN),e(VN,o2o),e(op,r2o),e(Y,t2o),e(Y,rp),e(rp,vie),e(vie,a2o),e(rp,n2o),e(rp,XN),e(XN,s2o),e(rp,l2o),e(Y,i2o),e(Y,tp),e(tp,Fie),e(Fie,d2o),e(tp,c2o),e(tp,zN),e(zN,f2o),e(tp,m2o),e(Y,g2o),e(Y,ap),e(ap,Tie),e(Tie,h2o),e(ap,p2o),e(ap,QN),e(QN,_2o),e(ap,u2o),e(Y,b2o),e(Y,np),e(np,Mie),e(Mie,v2o),e(np,F2o),e(np,WN),e(WN,T2o),e(np,M2o),e(Y,E2o),e(Y,sp),e(sp,Eie),e(Eie,C2o),e(sp,w2o),e(sp,HN),e(HN,A2o),e(sp,L2o),e(Y,y2o),e(Y,lp),e(lp,Cie),e(Cie,x2o),e(lp,$2o),e(lp,UN),e(UN,k2o),e(lp,S2o),e(He,R2o),M(ip,He,null),e(He,P2o),M(dp,He,null),e(Lo,B2o),e(Lo,cp),M(oL,cp,null),e(cp,I2o),e(cp,wie),e(wie,N2o),b(f,wOe,u),b(f,Pi,u),e(Pi,fp),e(fp,Aie),M(rL,Aie,null),e(Pi,q2o),e(Pi,Lie),e(Lie,j2o),b(f,AOe,u),b(f,yo,u),M(tL,yo,null),e(yo,D2o),e(yo,aL),e(aL,G2o),e(aL,JN),e(JN,O2o),e(aL,V2o),e(yo,X2o),e(yo,nL),e(nL,z2o),e(nL,yie),e(yie,Q2o),e(nL,W2o),e(yo,H2o),e(yo,Ue),M(sL,Ue,null),e(Ue,U2o),e(Ue,xie),e(xie,J2o),e(Ue,Y2o),e(Ue,Bi),e(Bi,K2o),e(Bi,$ie),e($ie,Z2o),e(Bi,e1o),e(Bi,kie),e(kie,o1o),e(Bi,r1o),e(Ue,t1o),e(Ue,he),e(he,mp),e(mp,Sie),e(Sie,a1o),e(mp,n1o),e(mp,YN),e(YN,s1o),e(mp,l1o),e(he,i1o),e(he,gp),e(gp,Rie),e(Rie,d1o),e(gp,c1o),e(gp,Pie),e(Pie,f1o),e(gp,m1o),e(he,g1o),e(he,hp),e(hp,Bie),e(Bie,h1o),e(hp,p1o),e(hp,KN),e(KN,_1o),e(hp,u1o),e(he,b1o),e(he,pp),e(pp,Iie),e(Iie,v1o),e(pp,F1o),e(pp,ZN),e(ZN,T1o),e(pp,M1o),e(he,E1o),e(he,_p),e(_p,Nie),e(Nie,C1o),e(_p,w1o),e(_p,eq),e(eq,A1o),e(_p,L1o),e(he,y1o),e(he,up),e(up,qie),e(qie,x1o),e(up,$1o),e(up,oq),e(oq,k1o),e(up,S1o),e(he,R1o),e(he,bp),e(bp,jie),e(jie,P1o),e(bp,B1o),e(bp,rq),e(rq,I1o),e(bp,N1o),e(he,q1o),e(he,vp),e(vp,Die),e(Die,j1o),e(vp,D1o),e(vp,tq),e(tq,G1o),e(vp,O1o),e(he,V1o),e(he,Fp),e(Fp,Gie),e(Gie,X1o),e(Fp,z1o),e(Fp,aq),e(aq,Q1o),e(Fp,W1o),e(he,H1o),e(he,Tp),e(Tp,Oie),e(Oie,U1o),e(Tp,J1o),e(Tp,nq),e(nq,Y1o),e(Tp,K1o),e(he,Z1o),e(he,Mp),e(Mp,Vie),e(Vie,ebo),e(Mp,obo),e(Mp,sq),e(sq,rbo),e(Mp,tbo),e(he,abo),e(he,Ep),e(Ep,Xie),e(Xie,nbo),e(Ep,sbo),e(Ep,lq),e(lq,lbo),e(Ep,ibo),e(he,dbo),e(he,Cp),e(Cp,zie),e(zie,cbo),e(Cp,fbo),e(Cp,iq),e(iq,mbo),e(Cp,gbo),e(he,hbo),e(he,wp),e(wp,Qie),e(Qie,pbo),e(wp,_bo),e(wp,dq),e(dq,ubo),e(wp,bbo),e(he,vbo),e(he,Ap),e(Ap,Wie),e(Wie,Fbo),e(Ap,Tbo),e(Ap,cq),e(cq,Mbo),e(Ap,Ebo),e(he,Cbo),e(he,Lp),e(Lp,Hie),e(Hie,wbo),e(Lp,Abo),e(Lp,fq),e(fq,Lbo),e(Lp,ybo),e(he,xbo),e(he,yp),e(yp,Uie),e(Uie,$bo),e(yp,kbo),e(yp,mq),e(mq,Sbo),e(yp,Rbo),e(Ue,Pbo),M(xp,Ue,null),e(Ue,Bbo),M($p,Ue,null),e(yo,Ibo),e(yo,kp),M(lL,kp,null),e(kp,Nbo),e(kp,Jie),e(Jie,qbo),b(f,LOe,u),b(f,Ii,u),e(Ii,Sp),e(Sp,Yie),M(iL,Yie,null),e(Ii,jbo),e(Ii,Kie),e(Kie,Dbo),b(f,yOe,u),b(f,xo,u),M(dL,xo,null),e(xo,Gbo),e(xo,Ni),e(Ni,Obo),e(Ni,gq),e(gq,Vbo),e(Ni,Xbo),e(Ni,hq),e(hq,zbo),e(Ni,Qbo),e(xo,Wbo),e(xo,cL),e(cL,Hbo),e(cL,Zie),e(Zie,Ubo),e(cL,Jbo),e(xo,Ybo),e(xo,nt),M(fL,nt,null),e(nt,Kbo),e(nt,ede),e(ede,Zbo),e(nt,evo),e(nt,qi),e(qi,ovo),e(qi,ode),e(ode,rvo),e(qi,tvo),e(qi,pq),e(pq,avo),e(qi,nvo),e(nt,svo),M(Rp,nt,null),e(xo,lvo),e(xo,Je),M(mL,Je,null),e(Je,ivo),e(Je,rde),e(rde,dvo),e(Je,cvo),e(Je,Ra),e(Ra,fvo),e(Ra,tde),e(tde,mvo),e(Ra,gvo),e(Ra,ade),e(ade,hvo),e(Ra,pvo),e(Ra,nde),e(nde,_vo),e(Ra,uvo),e(Je,bvo),e(Je,y),e(y,Pp),e(Pp,sde),e(sde,vvo),e(Pp,Fvo),e(Pp,_q),e(_q,Tvo),e(Pp,Mvo),e(y,Evo),e(y,Bp),e(Bp,lde),e(lde,Cvo),e(Bp,wvo),e(Bp,uq),e(uq,Avo),e(Bp,Lvo),e(y,yvo),e(y,Ip),e(Ip,ide),e(ide,xvo),e(Ip,$vo),e(Ip,bq),e(bq,kvo),e(Ip,Svo),e(y,Rvo),e(y,Np),e(Np,dde),e(dde,Pvo),e(Np,Bvo),e(Np,vq),e(vq,Ivo),e(Np,Nvo),e(y,qvo),e(y,qp),e(qp,cde),e(cde,jvo),e(qp,Dvo),e(qp,Fq),e(Fq,Gvo),e(qp,Ovo),e(y,Vvo),e(y,jp),e(jp,fde),e(fde,Xvo),e(jp,zvo),e(jp,Tq),e(Tq,Qvo),e(jp,Wvo),e(y,Hvo),e(y,Dp),e(Dp,mde),e(mde,Uvo),e(Dp,Jvo),e(Dp,Mq),e(Mq,Yvo),e(Dp,Kvo),e(y,Zvo),e(y,Gp),e(Gp,gde),e(gde,eFo),e(Gp,oFo),e(Gp,Eq),e(Eq,rFo),e(Gp,tFo),e(y,aFo),e(y,Op),e(Op,hde),e(hde,nFo),e(Op,sFo),e(Op,Cq),e(Cq,lFo),e(Op,iFo),e(y,dFo),e(y,Vp),e(Vp,pde),e(pde,cFo),e(Vp,fFo),e(Vp,wq),e(wq,mFo),e(Vp,gFo),e(y,hFo),e(y,Xp),e(Xp,_de),e(_de,pFo),e(Xp,_Fo),e(Xp,Aq),e(Aq,uFo),e(Xp,bFo),e(y,vFo),e(y,zp),e(zp,ude),e(ude,FFo),e(zp,TFo),e(zp,Lq),e(Lq,MFo),e(zp,EFo),e(y,CFo),e(y,Qp),e(Qp,bde),e(bde,wFo),e(Qp,AFo),e(Qp,yq),e(yq,LFo),e(Qp,yFo),e(y,xFo),e(y,Wp),e(Wp,vde),e(vde,$Fo),e(Wp,kFo),e(Wp,xq),e(xq,SFo),e(Wp,RFo),e(y,PFo),e(y,Hp),e(Hp,Fde),e(Fde,BFo),e(Hp,IFo),e(Hp,$q),e($q,NFo),e(Hp,qFo),e(y,jFo),e(y,Up),e(Up,Tde),e(Tde,DFo),e(Up,GFo),e(Up,kq),e(kq,OFo),e(Up,VFo),e(y,XFo),e(y,Jp),e(Jp,Mde),e(Mde,zFo),e(Jp,QFo),e(Jp,Sq),e(Sq,WFo),e(Jp,HFo),e(y,UFo),e(y,Yp),e(Yp,Ede),e(Ede,JFo),e(Yp,YFo),e(Yp,Rq),e(Rq,KFo),e(Yp,ZFo),e(y,e6o),e(y,Kp),e(Kp,Cde),e(Cde,o6o),e(Kp,r6o),e(Kp,Pq),e(Pq,t6o),e(Kp,a6o),e(y,n6o),e(y,Zp),e(Zp,wde),e(wde,s6o),e(Zp,l6o),e(Zp,Bq),e(Bq,i6o),e(Zp,d6o),e(y,c6o),e(y,e_),e(e_,Ade),e(Ade,f6o),e(e_,m6o),e(e_,Iq),e(Iq,g6o),e(e_,h6o),e(y,p6o),e(y,o_),e(o_,Lde),e(Lde,_6o),e(o_,u6o),e(o_,Nq),e(Nq,b6o),e(o_,v6o),e(y,F6o),e(y,r_),e(r_,yde),e(yde,T6o),e(r_,M6o),e(r_,qq),e(qq,E6o),e(r_,C6o),e(y,w6o),e(y,t_),e(t_,xde),e(xde,A6o),e(t_,L6o),e(t_,jq),e(jq,y6o),e(t_,x6o),e(y,$6o),e(y,a_),e(a_,$de),e($de,k6o),e(a_,S6o),e(a_,Dq),e(Dq,R6o),e(a_,P6o),e(y,B6o),e(y,n_),e(n_,kde),e(kde,I6o),e(n_,N6o),e(n_,Gq),e(Gq,q6o),e(n_,j6o),e(y,D6o),e(y,s_),e(s_,Sde),e(Sde,G6o),e(s_,O6o),e(s_,Oq),e(Oq,V6o),e(s_,X6o),e(y,z6o),e(y,l_),e(l_,Rde),e(Rde,Q6o),e(l_,W6o),e(l_,Vq),e(Vq,H6o),e(l_,U6o),e(y,J6o),e(y,i_),e(i_,Pde),e(Pde,Y6o),e(i_,K6o),e(i_,Xq),e(Xq,Z6o),e(i_,eTo),e(y,oTo),e(y,d_),e(d_,Bde),e(Bde,rTo),e(d_,tTo),e(d_,zq),e(zq,aTo),e(d_,nTo),e(y,sTo),e(y,c_),e(c_,Ide),e(Ide,lTo),e(c_,iTo),e(c_,Qq),e(Qq,dTo),e(c_,cTo),e(y,fTo),e(y,f_),e(f_,Nde),e(Nde,mTo),e(f_,gTo),e(f_,Wq),e(Wq,hTo),e(f_,pTo),e(y,_To),e(y,m_),e(m_,qde),e(qde,uTo),e(m_,bTo),e(m_,Hq),e(Hq,vTo),e(m_,FTo),e(y,TTo),e(y,g_),e(g_,jde),e(jde,MTo),e(g_,ETo),e(g_,Uq),e(Uq,CTo),e(g_,wTo),e(y,ATo),e(y,Xs),e(Xs,Dde),e(Dde,LTo),e(Xs,yTo),e(Xs,Jq),e(Jq,xTo),e(Xs,$To),e(Xs,Yq),e(Yq,kTo),e(Xs,STo),e(y,RTo),e(y,h_),e(h_,Gde),e(Gde,PTo),e(h_,BTo),e(h_,Kq),e(Kq,ITo),e(h_,NTo),e(y,qTo),e(y,p_),e(p_,Ode),e(Ode,jTo),e(p_,DTo),e(p_,Zq),e(Zq,GTo),e(p_,OTo),e(y,VTo),e(y,__),e(__,Vde),e(Vde,XTo),e(__,zTo),e(__,ej),e(ej,QTo),e(__,WTo),e(y,HTo),e(y,u_),e(u_,Xde),e(Xde,UTo),e(u_,JTo),e(u_,oj),e(oj,YTo),e(u_,KTo),e(y,ZTo),e(y,b_),e(b_,zde),e(zde,e7o),e(b_,o7o),e(b_,rj),e(rj,r7o),e(b_,t7o),e(y,a7o),e(y,v_),e(v_,Qde),e(Qde,n7o),e(v_,s7o),e(v_,tj),e(tj,l7o),e(v_,i7o),e(y,d7o),e(y,F_),e(F_,Wde),e(Wde,c7o),e(F_,f7o),e(F_,aj),e(aj,m7o),e(F_,g7o),e(y,h7o),e(y,T_),e(T_,Hde),e(Hde,p7o),e(T_,_7o),e(T_,nj),e(nj,u7o),e(T_,b7o),e(y,v7o),e(y,M_),e(M_,Ude),e(Ude,F7o),e(M_,T7o),e(M_,Jde),e(Jde,M7o),e(M_,E7o),e(y,C7o),e(y,E_),e(E_,Yde),e(Yde,w7o),e(E_,A7o),e(E_,sj),e(sj,L7o),e(E_,y7o),e(y,x7o),e(y,C_),e(C_,Kde),e(Kde,$7o),e(C_,k7o),e(C_,lj),e(lj,S7o),e(C_,R7o),e(y,P7o),e(y,w_),e(w_,Zde),e(Zde,B7o),e(w_,I7o),e(w_,ij),e(ij,N7o),e(w_,q7o),e(y,j7o),e(y,A_),e(A_,ece),e(ece,D7o),e(A_,G7o),e(A_,dj),e(dj,O7o),e(A_,V7o),e(y,X7o),e(y,L_),e(L_,oce),e(oce,z7o),e(L_,Q7o),e(L_,cj),e(cj,W7o),e(L_,H7o),e(y,U7o),e(y,y_),e(y_,rce),e(rce,J7o),e(y_,Y7o),e(y_,fj),e(fj,K7o),e(y_,Z7o),e(y,e8o),e(y,x_),e(x_,tce),e(tce,o8o),e(x_,r8o),e(x_,mj),e(mj,t8o),e(x_,a8o),e(y,n8o),e(y,$_),e($_,ace),e(ace,s8o),e($_,l8o),e($_,gj),e(gj,i8o),e($_,d8o),e(y,c8o),e(y,k_),e(k_,nce),e(nce,f8o),e(k_,m8o),e(k_,hj),e(hj,g8o),e(k_,h8o),e(y,p8o),e(y,S_),e(S_,sce),e(sce,_8o),e(S_,u8o),e(S_,pj),e(pj,b8o),e(S_,v8o),e(y,F8o),e(y,R_),e(R_,lce),e(lce,T8o),e(R_,M8o),e(R_,_j),e(_j,E8o),e(R_,C8o),e(y,w8o),e(y,P_),e(P_,ice),e(ice,A8o),e(P_,L8o),e(P_,uj),e(uj,y8o),e(P_,x8o),e(y,$8o),e(y,B_),e(B_,dce),e(dce,k8o),e(B_,S8o),e(B_,bj),e(bj,R8o),e(B_,P8o),e(y,B8o),e(y,I_),e(I_,cce),e(cce,I8o),e(I_,N8o),e(I_,vj),e(vj,q8o),e(I_,j8o),e(y,D8o),e(y,N_),e(N_,fce),e(fce,G8o),e(N_,O8o),e(N_,Fj),e(Fj,V8o),e(N_,X8o),e(y,z8o),e(y,q_),e(q_,mce),e(mce,Q8o),e(q_,W8o),e(q_,Tj),e(Tj,H8o),e(q_,U8o),e(y,J8o),e(y,j_),e(j_,gce),e(gce,Y8o),e(j_,K8o),e(j_,Mj),e(Mj,Z8o),e(j_,eMo),e(y,oMo),e(y,D_),e(D_,hce),e(hce,rMo),e(D_,tMo),e(D_,Ej),e(Ej,aMo),e(D_,nMo),e(y,sMo),e(y,G_),e(G_,pce),e(pce,lMo),e(G_,iMo),e(G_,Cj),e(Cj,dMo),e(G_,cMo),e(y,fMo),e(y,O_),e(O_,_ce),e(_ce,mMo),e(O_,gMo),e(O_,wj),e(wj,hMo),e(O_,pMo),e(y,_Mo),e(y,V_),e(V_,uce),e(uce,uMo),e(V_,bMo),e(V_,Aj),e(Aj,vMo),e(V_,FMo),e(y,TMo),e(y,X_),e(X_,bce),e(bce,MMo),e(X_,EMo),e(X_,Lj),e(Lj,CMo),e(X_,wMo),e(y,AMo),e(y,z_),e(z_,vce),e(vce,LMo),e(z_,yMo),e(z_,yj),e(yj,xMo),e(z_,$Mo),e(y,kMo),e(y,Q_),e(Q_,Fce),e(Fce,SMo),e(Q_,RMo),e(Q_,xj),e(xj,PMo),e(Q_,BMo),e(y,IMo),e(y,W_),e(W_,Tce),e(Tce,NMo),e(W_,qMo),e(W_,$j),e($j,jMo),e(W_,DMo),e(y,GMo),e(y,H_),e(H_,Mce),e(Mce,OMo),e(H_,VMo),e(H_,kj),e(kj,XMo),e(H_,zMo),e(y,QMo),e(y,U_),e(U_,Ece),e(Ece,WMo),e(U_,HMo),e(U_,Sj),e(Sj,UMo),e(U_,JMo),e(y,YMo),e(y,J_),e(J_,Cce),e(Cce,KMo),e(J_,ZMo),e(J_,Rj),e(Rj,eEo),e(J_,oEo),e(y,rEo),e(y,Y_),e(Y_,wce),e(wce,tEo),e(Y_,aEo),e(Y_,Pj),e(Pj,nEo),e(Y_,sEo),e(y,lEo),e(y,K_),e(K_,Ace),e(Ace,iEo),e(K_,dEo),e(K_,Bj),e(Bj,cEo),e(K_,fEo),e(y,mEo),e(y,Z_),e(Z_,Lce),e(Lce,gEo),e(Z_,hEo),e(Z_,Ij),e(Ij,pEo),e(Z_,_Eo),e(y,uEo),e(y,eu),e(eu,yce),e(yce,bEo),e(eu,vEo),e(eu,Nj),e(Nj,FEo),e(eu,TEo),e(y,MEo),e(y,ou),e(ou,xce),e(xce,EEo),e(ou,CEo),e(ou,qj),e(qj,wEo),e(ou,AEo),e(y,LEo),e(y,ru),e(ru,$ce),e($ce,yEo),e(ru,xEo),e(ru,jj),e(jj,$Eo),e(ru,kEo),e(y,SEo),e(y,tu),e(tu,kce),e(kce,REo),e(tu,PEo),e(tu,Dj),e(Dj,BEo),e(tu,IEo),e(y,NEo),e(y,au),e(au,Sce),e(Sce,qEo),e(au,jEo),e(au,Gj),e(Gj,DEo),e(au,GEo),e(y,OEo),e(y,nu),e(nu,Rce),e(Rce,VEo),e(nu,XEo),e(nu,Oj),e(Oj,zEo),e(nu,QEo),e(y,WEo),e(y,su),e(su,Pce),e(Pce,HEo),e(su,UEo),e(su,Vj),e(Vj,JEo),e(su,YEo),e(y,KEo),e(y,lu),e(lu,Bce),e(Bce,ZEo),e(lu,e4o),e(lu,Xj),e(Xj,o4o),e(lu,r4o),e(y,t4o),e(y,iu),e(iu,Ice),e(Ice,a4o),e(iu,n4o),e(iu,zj),e(zj,s4o),e(iu,l4o),e(y,i4o),e(y,du),e(du,Nce),e(Nce,d4o),e(du,c4o),e(du,Qj),e(Qj,f4o),e(du,m4o),e(y,g4o),e(y,cu),e(cu,qce),e(qce,h4o),e(cu,p4o),e(cu,Wj),e(Wj,_4o),e(cu,u4o),e(y,b4o),e(y,fu),e(fu,jce),e(jce,v4o),e(fu,F4o),e(fu,Hj),e(Hj,T4o),e(fu,M4o),e(y,E4o),e(y,mu),e(mu,Dce),e(Dce,C4o),e(mu,w4o),e(mu,Uj),e(Uj,A4o),e(mu,L4o),e(y,y4o),e(y,gu),e(gu,Gce),e(Gce,x4o),e(gu,$4o),e(gu,Jj),e(Jj,k4o),e(gu,S4o),e(y,R4o),e(y,hu),e(hu,Oce),e(Oce,P4o),e(hu,B4o),e(hu,Yj),e(Yj,I4o),e(hu,N4o),e(y,q4o),e(y,pu),e(pu,Vce),e(Vce,j4o),e(pu,D4o),e(pu,Kj),e(Kj,G4o),e(pu,O4o),e(y,V4o),e(y,_u),e(_u,Xce),e(Xce,X4o),e(_u,z4o),e(_u,Zj),e(Zj,Q4o),e(_u,W4o),e(y,H4o),e(y,uu),e(uu,zce),e(zce,U4o),e(uu,J4o),e(uu,eD),e(eD,Y4o),e(uu,K4o),e(y,Z4o),e(y,bu),e(bu,Qce),e(Qce,eCo),e(bu,oCo),e(bu,oD),e(oD,rCo),e(bu,tCo),e(y,aCo),e(y,vu),e(vu,Wce),e(Wce,nCo),e(vu,sCo),e(vu,rD),e(rD,lCo),e(vu,iCo),e(y,dCo),e(y,Fu),e(Fu,Hce),e(Hce,cCo),e(Fu,fCo),e(Fu,tD),e(tD,mCo),e(Fu,gCo),e(y,hCo),e(y,Tu),e(Tu,Uce),e(Uce,pCo),e(Tu,_Co),e(Tu,aD),e(aD,uCo),e(Tu,bCo),e(y,vCo),e(y,Mu),e(Mu,Jce),e(Jce,FCo),e(Mu,TCo),e(Mu,nD),e(nD,MCo),e(Mu,ECo),e(y,CCo),e(y,Eu),e(Eu,Yce),e(Yce,wCo),e(Eu,ACo),e(Eu,sD),e(sD,LCo),e(Eu,yCo),e(y,xCo),e(y,Cu),e(Cu,Kce),e(Kce,$Co),e(Cu,kCo),e(Cu,lD),e(lD,SCo),e(Cu,RCo),e(y,PCo),e(y,wu),e(wu,Zce),e(Zce,BCo),e(wu,ICo),e(wu,iD),e(iD,NCo),e(wu,qCo),e(y,jCo),e(y,Au),e(Au,efe),e(efe,DCo),e(Au,GCo),e(Au,dD),e(dD,OCo),e(Au,VCo),e(y,XCo),e(y,Lu),e(Lu,ofe),e(ofe,zCo),e(Lu,QCo),e(Lu,cD),e(cD,WCo),e(Lu,HCo),e(y,UCo),e(y,yu),e(yu,rfe),e(rfe,JCo),e(yu,YCo),e(yu,fD),e(fD,KCo),e(yu,ZCo),e(y,e5o),e(y,xu),e(xu,tfe),e(tfe,o5o),e(xu,r5o),e(xu,mD),e(mD,t5o),e(xu,a5o),e(y,n5o),e(y,$u),e($u,afe),e(afe,s5o),e($u,l5o),e($u,gD),e(gD,i5o),e($u,d5o),e(y,c5o),e(y,ku),e(ku,nfe),e(nfe,f5o),e(ku,m5o),e(ku,hD),e(hD,g5o),e(ku,h5o),e(y,p5o),e(y,Su),e(Su,sfe),e(sfe,_5o),e(Su,u5o),e(Su,pD),e(pD,b5o),e(Su,v5o),e(y,F5o),e(y,Ru),e(Ru,lfe),e(lfe,T5o),e(Ru,M5o),e(Ru,_D),e(_D,E5o),e(Ru,C5o),e(Je,w5o),e(Je,Pu),e(Pu,A5o),e(Pu,ife),e(ife,L5o),e(Pu,y5o),e(Pu,dfe),e(dfe,x5o),e(Je,$5o),M(Bu,Je,null),b(f,xOe,u),b(f,ji,u),e(ji,Iu),e(Iu,cfe),M(gL,cfe,null),e(ji,k5o),e(ji,ffe),e(ffe,S5o),b(f,$Oe,u),b(f,$o,u),M(hL,$o,null),e($o,R5o),e($o,Di),e(Di,P5o),e(Di,uD),e(uD,B5o),e(Di,I5o),e(Di,bD),e(bD,N5o),e(Di,q5o),e($o,j5o),e($o,pL),e(pL,D5o),e(pL,mfe),e(mfe,G5o),e(pL,O5o),e($o,V5o),e($o,st),M(_L,st,null),e(st,X5o),e(st,gfe),e(gfe,z5o),e(st,Q5o),e(st,Gi),e(Gi,W5o),e(Gi,hfe),e(hfe,H5o),e(Gi,U5o),e(Gi,vD),e(vD,J5o),e(Gi,Y5o),e(st,K5o),M(Nu,st,null),e($o,Z5o),e($o,Ye),M(uL,Ye,null),e(Ye,e3o),e(Ye,pfe),e(pfe,o3o),e(Ye,r3o),e(Ye,Pa),e(Pa,t3o),e(Pa,_fe),e(_fe,a3o),e(Pa,n3o),e(Pa,ufe),e(ufe,s3o),e(Pa,l3o),e(Pa,bfe),e(bfe,i3o),e(Pa,d3o),e(Ye,c3o),e(Ye,G),e(G,qu),e(qu,vfe),e(vfe,f3o),e(qu,m3o),e(qu,FD),e(FD,g3o),e(qu,h3o),e(G,p3o),e(G,ju),e(ju,Ffe),e(Ffe,_3o),e(ju,u3o),e(ju,TD),e(TD,b3o),e(ju,v3o),e(G,F3o),e(G,Du),e(Du,Tfe),e(Tfe,T3o),e(Du,M3o),e(Du,MD),e(MD,E3o),e(Du,C3o),e(G,w3o),e(G,Gu),e(Gu,Mfe),e(Mfe,A3o),e(Gu,L3o),e(Gu,ED),e(ED,y3o),e(Gu,x3o),e(G,$3o),e(G,Ou),e(Ou,Efe),e(Efe,k3o),e(Ou,S3o),e(Ou,CD),e(CD,R3o),e(Ou,P3o),e(G,B3o),e(G,Vu),e(Vu,Cfe),e(Cfe,I3o),e(Vu,N3o),e(Vu,wD),e(wD,q3o),e(Vu,j3o),e(G,D3o),e(G,Xu),e(Xu,wfe),e(wfe,G3o),e(Xu,O3o),e(Xu,AD),e(AD,V3o),e(Xu,X3o),e(G,z3o),e(G,zu),e(zu,Afe),e(Afe,Q3o),e(zu,W3o),e(zu,LD),e(LD,H3o),e(zu,U3o),e(G,J3o),e(G,Qu),e(Qu,Lfe),e(Lfe,Y3o),e(Qu,K3o),e(Qu,yD),e(yD,Z3o),e(Qu,e0o),e(G,o0o),e(G,Wu),e(Wu,yfe),e(yfe,r0o),e(Wu,t0o),e(Wu,xD),e(xD,a0o),e(Wu,n0o),e(G,s0o),e(G,Hu),e(Hu,xfe),e(xfe,l0o),e(Hu,i0o),e(Hu,$D),e($D,d0o),e(Hu,c0o),e(G,f0o),e(G,Uu),e(Uu,$fe),e($fe,m0o),e(Uu,g0o),e(Uu,kD),e(kD,h0o),e(Uu,p0o),e(G,_0o),e(G,Ju),e(Ju,kfe),e(kfe,u0o),e(Ju,b0o),e(Ju,SD),e(SD,v0o),e(Ju,F0o),e(G,T0o),e(G,Yu),e(Yu,Sfe),e(Sfe,M0o),e(Yu,E0o),e(Yu,RD),e(RD,C0o),e(Yu,w0o),e(G,A0o),e(G,Ku),e(Ku,Rfe),e(Rfe,L0o),e(Ku,y0o),e(Ku,PD),e(PD,x0o),e(Ku,$0o),e(G,k0o),e(G,Zu),e(Zu,Pfe),e(Pfe,S0o),e(Zu,R0o),e(Zu,BD),e(BD,P0o),e(Zu,B0o),e(G,I0o),e(G,e2),e(e2,Bfe),e(Bfe,N0o),e(e2,q0o),e(e2,ID),e(ID,j0o),e(e2,D0o),e(G,G0o),e(G,o2),e(o2,Ife),e(Ife,O0o),e(o2,V0o),e(o2,ND),e(ND,X0o),e(o2,z0o),e(G,Q0o),e(G,r2),e(r2,Nfe),e(Nfe,W0o),e(r2,H0o),e(r2,qD),e(qD,U0o),e(r2,J0o),e(G,Y0o),e(G,t2),e(t2,qfe),e(qfe,K0o),e(t2,Z0o),e(t2,jD),e(jD,ewo),e(t2,owo),e(G,rwo),e(G,a2),e(a2,jfe),e(jfe,two),e(a2,awo),e(a2,DD),e(DD,nwo),e(a2,swo),e(G,lwo),e(G,n2),e(n2,Dfe),e(Dfe,iwo),e(n2,dwo),e(n2,GD),e(GD,cwo),e(n2,fwo),e(G,mwo),e(G,s2),e(s2,Gfe),e(Gfe,gwo),e(s2,hwo),e(s2,OD),e(OD,pwo),e(s2,_wo),e(G,uwo),e(G,l2),e(l2,Ofe),e(Ofe,bwo),e(l2,vwo),e(l2,VD),e(VD,Fwo),e(l2,Two),e(G,Mwo),e(G,i2),e(i2,Vfe),e(Vfe,Ewo),e(i2,Cwo),e(i2,XD),e(XD,wwo),e(i2,Awo),e(G,Lwo),e(G,d2),e(d2,Xfe),e(Xfe,ywo),e(d2,xwo),e(d2,zD),e(zD,$wo),e(d2,kwo),e(G,Swo),e(G,c2),e(c2,zfe),e(zfe,Rwo),e(c2,Pwo),e(c2,QD),e(QD,Bwo),e(c2,Iwo),e(G,Nwo),e(G,f2),e(f2,Qfe),e(Qfe,qwo),e(f2,jwo),e(f2,WD),e(WD,Dwo),e(f2,Gwo),e(G,Owo),e(G,m2),e(m2,Wfe),e(Wfe,Vwo),e(m2,Xwo),e(m2,HD),e(HD,zwo),e(m2,Qwo),e(G,Wwo),e(G,g2),e(g2,Hfe),e(Hfe,Hwo),e(g2,Uwo),e(g2,UD),e(UD,Jwo),e(g2,Ywo),e(G,Kwo),e(G,h2),e(h2,Ufe),e(Ufe,Zwo),e(h2,eAo),e(h2,JD),e(JD,oAo),e(h2,rAo),e(G,tAo),e(G,p2),e(p2,Jfe),e(Jfe,aAo),e(p2,nAo),e(p2,YD),e(YD,sAo),e(p2,lAo),e(G,iAo),e(G,_2),e(_2,Yfe),e(Yfe,dAo),e(_2,cAo),e(_2,KD),e(KD,fAo),e(_2,mAo),e(G,gAo),e(G,u2),e(u2,Kfe),e(Kfe,hAo),e(u2,pAo),e(u2,ZD),e(ZD,_Ao),e(u2,uAo),e(G,bAo),e(G,b2),e(b2,Zfe),e(Zfe,vAo),e(b2,FAo),e(b2,eG),e(eG,TAo),e(b2,MAo),e(G,EAo),e(G,v2),e(v2,eme),e(eme,CAo),e(v2,wAo),e(v2,oG),e(oG,AAo),e(v2,LAo),e(G,yAo),e(G,F2),e(F2,ome),e(ome,xAo),e(F2,$Ao),e(F2,rG),e(rG,kAo),e(F2,SAo),e(G,RAo),e(G,T2),e(T2,rme),e(rme,PAo),e(T2,BAo),e(T2,tG),e(tG,IAo),e(T2,NAo),e(G,qAo),e(G,M2),e(M2,tme),e(tme,jAo),e(M2,DAo),e(M2,aG),e(aG,GAo),e(M2,OAo),e(G,VAo),e(G,E2),e(E2,ame),e(ame,XAo),e(E2,zAo),e(E2,nG),e(nG,QAo),e(E2,WAo),e(G,HAo),e(G,C2),e(C2,nme),e(nme,UAo),e(C2,JAo),e(C2,sG),e(sG,YAo),e(C2,KAo),e(G,ZAo),e(G,w2),e(w2,sme),e(sme,eLo),e(w2,oLo),e(w2,lG),e(lG,rLo),e(w2,tLo),e(G,aLo),e(G,A2),e(A2,lme),e(lme,nLo),e(A2,sLo),e(A2,iG),e(iG,lLo),e(A2,iLo),e(G,dLo),e(G,L2),e(L2,ime),e(ime,cLo),e(L2,fLo),e(L2,dG),e(dG,mLo),e(L2,gLo),e(Ye,hLo),e(Ye,y2),e(y2,pLo),e(y2,dme),e(dme,_Lo),e(y2,uLo),e(y2,cme),e(cme,bLo),e(Ye,vLo),M(x2,Ye,null),b(f,kOe,u),b(f,Oi,u),e(Oi,$2),e($2,fme),M(bL,fme,null),e(Oi,FLo),e(Oi,mme),e(mme,TLo),b(f,SOe,u),b(f,ko,u),M(vL,ko,null),e(ko,MLo),e(ko,Vi),e(Vi,ELo),e(Vi,cG),e(cG,CLo),e(Vi,wLo),e(Vi,fG),e(fG,ALo),e(Vi,LLo),e(ko,yLo),e(ko,FL),e(FL,xLo),e(FL,gme),e(gme,$Lo),e(FL,kLo),e(ko,SLo),e(ko,lt),M(TL,lt,null),e(lt,RLo),e(lt,hme),e(hme,PLo),e(lt,BLo),e(lt,Xi),e(Xi,ILo),e(Xi,pme),e(pme,NLo),e(Xi,qLo),e(Xi,mG),e(mG,jLo),e(Xi,DLo),e(lt,GLo),M(k2,lt,null),e(ko,OLo),e(ko,Ke),M(ML,Ke,null),e(Ke,VLo),e(Ke,_me),e(_me,XLo),e(Ke,zLo),e(Ke,Ba),e(Ba,QLo),e(Ba,ume),e(ume,WLo),e(Ba,HLo),e(Ba,bme),e(bme,ULo),e(Ba,JLo),e(Ba,vme),e(vme,YLo),e(Ba,KLo),e(Ke,ZLo),e(Ke,z),e(z,S2),e(S2,Fme),e(Fme,eyo),e(S2,oyo),e(S2,gG),e(gG,ryo),e(S2,tyo),e(z,ayo),e(z,R2),e(R2,Tme),e(Tme,nyo),e(R2,syo),e(R2,hG),e(hG,lyo),e(R2,iyo),e(z,dyo),e(z,P2),e(P2,Mme),e(Mme,cyo),e(P2,fyo),e(P2,pG),e(pG,myo),e(P2,gyo),e(z,hyo),e(z,B2),e(B2,Eme),e(Eme,pyo),e(B2,_yo),e(B2,_G),e(_G,uyo),e(B2,byo),e(z,vyo),e(z,I2),e(I2,Cme),e(Cme,Fyo),e(I2,Tyo),e(I2,uG),e(uG,Myo),e(I2,Eyo),e(z,Cyo),e(z,N2),e(N2,wme),e(wme,wyo),e(N2,Ayo),e(N2,bG),e(bG,Lyo),e(N2,yyo),e(z,xyo),e(z,q2),e(q2,Ame),e(Ame,$yo),e(q2,kyo),e(q2,vG),e(vG,Syo),e(q2,Ryo),e(z,Pyo),e(z,j2),e(j2,Lme),e(Lme,Byo),e(j2,Iyo),e(j2,FG),e(FG,Nyo),e(j2,qyo),e(z,jyo),e(z,D2),e(D2,yme),e(yme,Dyo),e(D2,Gyo),e(D2,TG),e(TG,Oyo),e(D2,Vyo),e(z,Xyo),e(z,G2),e(G2,xme),e(xme,zyo),e(G2,Qyo),e(G2,MG),e(MG,Wyo),e(G2,Hyo),e(z,Uyo),e(z,O2),e(O2,$me),e($me,Jyo),e(O2,Yyo),e(O2,EG),e(EG,Kyo),e(O2,Zyo),e(z,e9o),e(z,V2),e(V2,kme),e(kme,o9o),e(V2,r9o),e(V2,CG),e(CG,t9o),e(V2,a9o),e(z,n9o),e(z,X2),e(X2,Sme),e(Sme,s9o),e(X2,l9o),e(X2,wG),e(wG,i9o),e(X2,d9o),e(z,c9o),e(z,z2),e(z2,Rme),e(Rme,f9o),e(z2,m9o),e(z2,AG),e(AG,g9o),e(z2,h9o),e(z,p9o),e(z,Q2),e(Q2,Pme),e(Pme,_9o),e(Q2,u9o),e(Q2,LG),e(LG,b9o),e(Q2,v9o),e(z,F9o),e(z,W2),e(W2,Bme),e(Bme,T9o),e(W2,M9o),e(W2,yG),e(yG,E9o),e(W2,C9o),e(z,w9o),e(z,H2),e(H2,Ime),e(Ime,A9o),e(H2,L9o),e(H2,xG),e(xG,y9o),e(H2,x9o),e(z,$9o),e(z,U2),e(U2,Nme),e(Nme,k9o),e(U2,S9o),e(U2,$G),e($G,R9o),e(U2,P9o),e(z,B9o),e(z,J2),e(J2,qme),e(qme,I9o),e(J2,N9o),e(J2,kG),e(kG,q9o),e(J2,j9o),e(z,D9o),e(z,Y2),e(Y2,jme),e(jme,G9o),e(Y2,O9o),e(Y2,SG),e(SG,V9o),e(Y2,X9o),e(z,z9o),e(z,K2),e(K2,Dme),e(Dme,Q9o),e(K2,W9o),e(K2,RG),e(RG,H9o),e(K2,U9o),e(z,J9o),e(z,Z2),e(Z2,Gme),e(Gme,Y9o),e(Z2,K9o),e(Z2,PG),e(PG,Z9o),e(Z2,exo),e(z,oxo),e(z,e1),e(e1,Ome),e(Ome,rxo),e(e1,txo),e(e1,BG),e(BG,axo),e(e1,nxo),e(z,sxo),e(z,o1),e(o1,Vme),e(Vme,lxo),e(o1,ixo),e(o1,IG),e(IG,dxo),e(o1,cxo),e(z,fxo),e(z,r1),e(r1,Xme),e(Xme,mxo),e(r1,gxo),e(r1,NG),e(NG,hxo),e(r1,pxo),e(z,_xo),e(z,t1),e(t1,zme),e(zme,uxo),e(t1,bxo),e(t1,qG),e(qG,vxo),e(t1,Fxo),e(z,Txo),e(z,a1),e(a1,Qme),e(Qme,Mxo),e(a1,Exo),e(a1,jG),e(jG,Cxo),e(a1,wxo),e(z,Axo),e(z,n1),e(n1,Wme),e(Wme,Lxo),e(n1,yxo),e(n1,DG),e(DG,xxo),e(n1,$xo),e(z,kxo),e(z,s1),e(s1,Hme),e(Hme,Sxo),e(s1,Rxo),e(s1,GG),e(GG,Pxo),e(s1,Bxo),e(z,Ixo),e(z,l1),e(l1,Ume),e(Ume,Nxo),e(l1,qxo),e(l1,OG),e(OG,jxo),e(l1,Dxo),e(z,Gxo),e(z,i1),e(i1,Jme),e(Jme,Oxo),e(i1,Vxo),e(i1,VG),e(VG,Xxo),e(i1,zxo),e(z,Qxo),e(z,d1),e(d1,Yme),e(Yme,Wxo),e(d1,Hxo),e(d1,XG),e(XG,Uxo),e(d1,Jxo),e(z,Yxo),e(z,c1),e(c1,Kme),e(Kme,Kxo),e(c1,Zxo),e(c1,zG),e(zG,e$o),e(c1,o$o),e(z,r$o),e(z,f1),e(f1,Zme),e(Zme,t$o),e(f1,a$o),e(f1,QG),e(QG,n$o),e(f1,s$o),e(z,l$o),e(z,m1),e(m1,ege),e(ege,i$o),e(m1,d$o),e(m1,WG),e(WG,c$o),e(m1,f$o),e(z,m$o),e(z,g1),e(g1,oge),e(oge,g$o),e(g1,h$o),e(g1,HG),e(HG,p$o),e(g1,_$o),e(z,u$o),e(z,h1),e(h1,rge),e(rge,b$o),e(h1,v$o),e(h1,UG),e(UG,F$o),e(h1,T$o),e(z,M$o),e(z,p1),e(p1,tge),e(tge,E$o),e(p1,C$o),e(p1,JG),e(JG,w$o),e(p1,A$o),e(z,L$o),e(z,_1),e(_1,age),e(age,y$o),e(_1,x$o),e(_1,YG),e(YG,$$o),e(_1,k$o),e(Ke,S$o),e(Ke,u1),e(u1,R$o),e(u1,nge),e(nge,P$o),e(u1,B$o),e(u1,sge),e(sge,I$o),e(Ke,N$o),M(b1,Ke,null),b(f,ROe,u),b(f,zi,u),e(zi,v1),e(v1,lge),M(EL,lge,null),e(zi,q$o),e(zi,ige),e(ige,j$o),b(f,POe,u),b(f,So,u),M(CL,So,null),e(So,D$o),e(So,Qi),e(Qi,G$o),e(Qi,KG),e(KG,O$o),e(Qi,V$o),e(Qi,ZG),e(ZG,X$o),e(Qi,z$o),e(So,Q$o),e(So,wL),e(wL,W$o),e(wL,dge),e(dge,H$o),e(wL,U$o),e(So,J$o),e(So,it),M(AL,it,null),e(it,Y$o),e(it,cge),e(cge,K$o),e(it,Z$o),e(it,Wi),e(Wi,eko),e(Wi,fge),e(fge,oko),e(Wi,rko),e(Wi,eO),e(eO,tko),e(Wi,ako),e(it,nko),M(F1,it,null),e(So,sko),e(So,Ze),M(LL,Ze,null),e(Ze,lko),e(Ze,mge),e(mge,iko),e(Ze,dko),e(Ze,Ia),e(Ia,cko),e(Ia,gge),e(gge,fko),e(Ia,mko),e(Ia,hge),e(hge,gko),e(Ia,hko),e(Ia,pge),e(pge,pko),e(Ia,_ko),e(Ze,uko),e(Ze,W),e(W,T1),e(T1,_ge),e(_ge,bko),e(T1,vko),e(T1,oO),e(oO,Fko),e(T1,Tko),e(W,Mko),e(W,M1),e(M1,uge),e(uge,Eko),e(M1,Cko),e(M1,rO),e(rO,wko),e(M1,Ako),e(W,Lko),e(W,E1),e(E1,bge),e(bge,yko),e(E1,xko),e(E1,tO),e(tO,$ko),e(E1,kko),e(W,Sko),e(W,C1),e(C1,vge),e(vge,Rko),e(C1,Pko),e(C1,aO),e(aO,Bko),e(C1,Iko),e(W,Nko),e(W,w1),e(w1,Fge),e(Fge,qko),e(w1,jko),e(w1,nO),e(nO,Dko),e(w1,Gko),e(W,Oko),e(W,A1),e(A1,Tge),e(Tge,Vko),e(A1,Xko),e(A1,sO),e(sO,zko),e(A1,Qko),e(W,Wko),e(W,L1),e(L1,Mge),e(Mge,Hko),e(L1,Uko),e(L1,lO),e(lO,Jko),e(L1,Yko),e(W,Kko),e(W,y1),e(y1,Ege),e(Ege,Zko),e(y1,eSo),e(y1,iO),e(iO,oSo),e(y1,rSo),e(W,tSo),e(W,x1),e(x1,Cge),e(Cge,aSo),e(x1,nSo),e(x1,dO),e(dO,sSo),e(x1,lSo),e(W,iSo),e(W,$1),e($1,wge),e(wge,dSo),e($1,cSo),e($1,cO),e(cO,fSo),e($1,mSo),e(W,gSo),e(W,k1),e(k1,Age),e(Age,hSo),e(k1,pSo),e(k1,fO),e(fO,_So),e(k1,uSo),e(W,bSo),e(W,S1),e(S1,Lge),e(Lge,vSo),e(S1,FSo),e(S1,mO),e(mO,TSo),e(S1,MSo),e(W,ESo),e(W,R1),e(R1,yge),e(yge,CSo),e(R1,wSo),e(R1,gO),e(gO,ASo),e(R1,LSo),e(W,ySo),e(W,P1),e(P1,xge),e(xge,xSo),e(P1,$So),e(P1,hO),e(hO,kSo),e(P1,SSo),e(W,RSo),e(W,B1),e(B1,$ge),e($ge,PSo),e(B1,BSo),e(B1,pO),e(pO,ISo),e(B1,NSo),e(W,qSo),e(W,I1),e(I1,kge),e(kge,jSo),e(I1,DSo),e(I1,_O),e(_O,GSo),e(I1,OSo),e(W,VSo),e(W,N1),e(N1,Sge),e(Sge,XSo),e(N1,zSo),e(N1,uO),e(uO,QSo),e(N1,WSo),e(W,HSo),e(W,q1),e(q1,Rge),e(Rge,USo),e(q1,JSo),e(q1,bO),e(bO,YSo),e(q1,KSo),e(W,ZSo),e(W,j1),e(j1,Pge),e(Pge,eRo),e(j1,oRo),e(j1,vO),e(vO,rRo),e(j1,tRo),e(W,aRo),e(W,D1),e(D1,Bge),e(Bge,nRo),e(D1,sRo),e(D1,FO),e(FO,lRo),e(D1,iRo),e(W,dRo),e(W,G1),e(G1,Ige),e(Ige,cRo),e(G1,fRo),e(G1,TO),e(TO,mRo),e(G1,gRo),e(W,hRo),e(W,O1),e(O1,Nge),e(Nge,pRo),e(O1,_Ro),e(O1,MO),e(MO,uRo),e(O1,bRo),e(W,vRo),e(W,V1),e(V1,qge),e(qge,FRo),e(V1,TRo),e(V1,EO),e(EO,MRo),e(V1,ERo),e(W,CRo),e(W,X1),e(X1,jge),e(jge,wRo),e(X1,ARo),e(X1,CO),e(CO,LRo),e(X1,yRo),e(W,xRo),e(W,z1),e(z1,Dge),e(Dge,$Ro),e(z1,kRo),e(z1,wO),e(wO,SRo),e(z1,RRo),e(W,PRo),e(W,Q1),e(Q1,Gge),e(Gge,BRo),e(Q1,IRo),e(Q1,AO),e(AO,NRo),e(Q1,qRo),e(W,jRo),e(W,W1),e(W1,Oge),e(Oge,DRo),e(W1,GRo),e(W1,LO),e(LO,ORo),e(W1,VRo),e(W,XRo),e(W,H1),e(H1,Vge),e(Vge,zRo),e(H1,QRo),e(H1,yO),e(yO,WRo),e(H1,HRo),e(W,URo),e(W,U1),e(U1,Xge),e(Xge,JRo),e(U1,YRo),e(U1,xO),e(xO,KRo),e(U1,ZRo),e(W,ePo),e(W,J1),e(J1,zge),e(zge,oPo),e(J1,rPo),e(J1,$O),e($O,tPo),e(J1,aPo),e(W,nPo),e(W,Y1),e(Y1,Qge),e(Qge,sPo),e(Y1,lPo),e(Y1,kO),e(kO,iPo),e(Y1,dPo),e(W,cPo),e(W,K1),e(K1,Wge),e(Wge,fPo),e(K1,mPo),e(K1,SO),e(SO,gPo),e(K1,hPo),e(W,pPo),e(W,Z1),e(Z1,Hge),e(Hge,_Po),e(Z1,uPo),e(Z1,Uge),e(Uge,bPo),e(Z1,vPo),e(W,FPo),e(W,eb),e(eb,Jge),e(Jge,TPo),e(eb,MPo),e(eb,RO),e(RO,EPo),e(eb,CPo),e(W,wPo),e(W,ob),e(ob,Yge),e(Yge,APo),e(ob,LPo),e(ob,PO),e(PO,yPo),e(ob,xPo),e(W,$Po),e(W,rb),e(rb,Kge),e(Kge,kPo),e(rb,SPo),e(rb,BO),e(BO,RPo),e(rb,PPo),e(W,BPo),e(W,tb),e(tb,Zge),e(Zge,IPo),e(tb,NPo),e(tb,IO),e(IO,qPo),e(tb,jPo),e(Ze,DPo),e(Ze,ab),e(ab,GPo),e(ab,ehe),e(ehe,OPo),e(ab,VPo),e(ab,ohe),e(ohe,XPo),e(Ze,zPo),M(nb,Ze,null),b(f,BOe,u),b(f,Hi,u),e(Hi,sb),e(sb,rhe),M(yL,rhe,null),e(Hi,QPo),e(Hi,the),e(the,WPo),b(f,IOe,u),b(f,Ro,u),M(xL,Ro,null),e(Ro,HPo),e(Ro,Ui),e(Ui,UPo),e(Ui,NO),e(NO,JPo),e(Ui,YPo),e(Ui,qO),e(qO,KPo),e(Ui,ZPo),e(Ro,eBo),e(Ro,$L),e($L,oBo),e($L,ahe),e(ahe,rBo),e($L,tBo),e(Ro,aBo),e(Ro,dt),M(kL,dt,null),e(dt,nBo),e(dt,nhe),e(nhe,sBo),e(dt,lBo),e(dt,Ji),e(Ji,iBo),e(Ji,she),e(she,dBo),e(Ji,cBo),e(Ji,jO),e(jO,fBo),e(Ji,mBo),e(dt,gBo),M(lb,dt,null),e(Ro,hBo),e(Ro,eo),M(SL,eo,null),e(eo,pBo),e(eo,lhe),e(lhe,_Bo),e(eo,uBo),e(eo,Na),e(Na,bBo),e(Na,ihe),e(ihe,vBo),e(Na,FBo),e(Na,dhe),e(dhe,TBo),e(Na,MBo),e(Na,che),e(che,EBo),e(Na,CBo),e(eo,wBo),e(eo,pe),e(pe,ib),e(ib,fhe),e(fhe,ABo),e(ib,LBo),e(ib,DO),e(DO,yBo),e(ib,xBo),e(pe,$Bo),e(pe,db),e(db,mhe),e(mhe,kBo),e(db,SBo),e(db,GO),e(GO,RBo),e(db,PBo),e(pe,BBo),e(pe,cb),e(cb,ghe),e(ghe,IBo),e(cb,NBo),e(cb,OO),e(OO,qBo),e(cb,jBo),e(pe,DBo),e(pe,fb),e(fb,hhe),e(hhe,GBo),e(fb,OBo),e(fb,VO),e(VO,VBo),e(fb,XBo),e(pe,zBo),e(pe,mb),e(mb,phe),e(phe,QBo),e(mb,WBo),e(mb,XO),e(XO,HBo),e(mb,UBo),e(pe,JBo),e(pe,gb),e(gb,_he),e(_he,YBo),e(gb,KBo),e(gb,zO),e(zO,ZBo),e(gb,eIo),e(pe,oIo),e(pe,hb),e(hb,uhe),e(uhe,rIo),e(hb,tIo),e(hb,QO),e(QO,aIo),e(hb,nIo),e(pe,sIo),e(pe,pb),e(pb,bhe),e(bhe,lIo),e(pb,iIo),e(pb,WO),e(WO,dIo),e(pb,cIo),e(pe,fIo),e(pe,_b),e(_b,vhe),e(vhe,mIo),e(_b,gIo),e(_b,HO),e(HO,hIo),e(_b,pIo),e(pe,_Io),e(pe,ub),e(ub,Fhe),e(Fhe,uIo),e(ub,bIo),e(ub,UO),e(UO,vIo),e(ub,FIo),e(pe,TIo),e(pe,bb),e(bb,The),e(The,MIo),e(bb,EIo),e(bb,JO),e(JO,CIo),e(bb,wIo),e(pe,AIo),e(pe,vb),e(vb,Mhe),e(Mhe,LIo),e(vb,yIo),e(vb,YO),e(YO,xIo),e(vb,$Io),e(pe,kIo),e(pe,Fb),e(Fb,Ehe),e(Ehe,SIo),e(Fb,RIo),e(Fb,KO),e(KO,PIo),e(Fb,BIo),e(pe,IIo),e(pe,Tb),e(Tb,Che),e(Che,NIo),e(Tb,qIo),e(Tb,ZO),e(ZO,jIo),e(Tb,DIo),e(pe,GIo),e(pe,Mb),e(Mb,whe),e(whe,OIo),e(Mb,VIo),e(Mb,eV),e(eV,XIo),e(Mb,zIo),e(pe,QIo),e(pe,Eb),e(Eb,Ahe),e(Ahe,WIo),e(Eb,HIo),e(Eb,oV),e(oV,UIo),e(Eb,JIo),e(pe,YIo),e(pe,Cb),e(Cb,Lhe),e(Lhe,KIo),e(Cb,ZIo),e(Cb,rV),e(rV,eNo),e(Cb,oNo),e(eo,rNo),e(eo,wb),e(wb,tNo),e(wb,yhe),e(yhe,aNo),e(wb,nNo),e(wb,xhe),e(xhe,sNo),e(eo,lNo),M(Ab,eo,null),b(f,NOe,u),b(f,Yi,u),e(Yi,Lb),e(Lb,$he),M(RL,$he,null),e(Yi,iNo),e(Yi,khe),e(khe,dNo),b(f,qOe,u),b(f,Po,u),M(PL,Po,null),e(Po,cNo),e(Po,Ki),e(Ki,fNo),e(Ki,tV),e(tV,mNo),e(Ki,gNo),e(Ki,aV),e(aV,hNo),e(Ki,pNo),e(Po,_No),e(Po,BL),e(BL,uNo),e(BL,She),e(She,bNo),e(BL,vNo),e(Po,FNo),e(Po,ct),M(IL,ct,null),e(ct,TNo),e(ct,Rhe),e(Rhe,MNo),e(ct,ENo),e(ct,Zi),e(Zi,CNo),e(Zi,Phe),e(Phe,wNo),e(Zi,ANo),e(Zi,nV),e(nV,LNo),e(Zi,yNo),e(ct,xNo),M(yb,ct,null),e(Po,$No),e(Po,oo),M(NL,oo,null),e(oo,kNo),e(oo,Bhe),e(Bhe,SNo),e(oo,RNo),e(oo,qa),e(qa,PNo),e(qa,Ihe),e(Ihe,BNo),e(qa,INo),e(qa,Nhe),e(Nhe,NNo),e(qa,qNo),e(qa,qhe),e(qhe,jNo),e(qa,DNo),e(oo,GNo),e(oo,N),e(N,xb),e(xb,jhe),e(jhe,ONo),e(xb,VNo),e(xb,sV),e(sV,XNo),e(xb,zNo),e(N,QNo),e(N,$b),e($b,Dhe),e(Dhe,WNo),e($b,HNo),e($b,lV),e(lV,UNo),e($b,JNo),e(N,YNo),e(N,kb),e(kb,Ghe),e(Ghe,KNo),e(kb,ZNo),e(kb,iV),e(iV,eqo),e(kb,oqo),e(N,rqo),e(N,Sb),e(Sb,Ohe),e(Ohe,tqo),e(Sb,aqo),e(Sb,dV),e(dV,nqo),e(Sb,sqo),e(N,lqo),e(N,Rb),e(Rb,Vhe),e(Vhe,iqo),e(Rb,dqo),e(Rb,cV),e(cV,cqo),e(Rb,fqo),e(N,mqo),e(N,Pb),e(Pb,Xhe),e(Xhe,gqo),e(Pb,hqo),e(Pb,fV),e(fV,pqo),e(Pb,_qo),e(N,uqo),e(N,Bb),e(Bb,zhe),e(zhe,bqo),e(Bb,vqo),e(Bb,mV),e(mV,Fqo),e(Bb,Tqo),e(N,Mqo),e(N,Ib),e(Ib,Qhe),e(Qhe,Eqo),e(Ib,Cqo),e(Ib,gV),e(gV,wqo),e(Ib,Aqo),e(N,Lqo),e(N,Nb),e(Nb,Whe),e(Whe,yqo),e(Nb,xqo),e(Nb,hV),e(hV,$qo),e(Nb,kqo),e(N,Sqo),e(N,qb),e(qb,Hhe),e(Hhe,Rqo),e(qb,Pqo),e(qb,pV),e(pV,Bqo),e(qb,Iqo),e(N,Nqo),e(N,jb),e(jb,Uhe),e(Uhe,qqo),e(jb,jqo),e(jb,_V),e(_V,Dqo),e(jb,Gqo),e(N,Oqo),e(N,Db),e(Db,Jhe),e(Jhe,Vqo),e(Db,Xqo),e(Db,uV),e(uV,zqo),e(Db,Qqo),e(N,Wqo),e(N,Gb),e(Gb,Yhe),e(Yhe,Hqo),e(Gb,Uqo),e(Gb,bV),e(bV,Jqo),e(Gb,Yqo),e(N,Kqo),e(N,Ob),e(Ob,Khe),e(Khe,Zqo),e(Ob,ejo),e(Ob,vV),e(vV,ojo),e(Ob,rjo),e(N,tjo),e(N,Vb),e(Vb,Zhe),e(Zhe,ajo),e(Vb,njo),e(Vb,FV),e(FV,sjo),e(Vb,ljo),e(N,ijo),e(N,Xb),e(Xb,epe),e(epe,djo),e(Xb,cjo),e(Xb,TV),e(TV,fjo),e(Xb,mjo),e(N,gjo),e(N,zb),e(zb,ope),e(ope,hjo),e(zb,pjo),e(zb,MV),e(MV,_jo),e(zb,ujo),e(N,bjo),e(N,Qb),e(Qb,rpe),e(rpe,vjo),e(Qb,Fjo),e(Qb,EV),e(EV,Tjo),e(Qb,Mjo),e(N,Ejo),e(N,Wb),e(Wb,tpe),e(tpe,Cjo),e(Wb,wjo),e(Wb,CV),e(CV,Ajo),e(Wb,Ljo),e(N,yjo),e(N,Hb),e(Hb,ape),e(ape,xjo),e(Hb,$jo),e(Hb,wV),e(wV,kjo),e(Hb,Sjo),e(N,Rjo),e(N,Ub),e(Ub,npe),e(npe,Pjo),e(Ub,Bjo),e(Ub,AV),e(AV,Ijo),e(Ub,Njo),e(N,qjo),e(N,Jb),e(Jb,spe),e(spe,jjo),e(Jb,Djo),e(Jb,LV),e(LV,Gjo),e(Jb,Ojo),e(N,Vjo),e(N,Yb),e(Yb,lpe),e(lpe,Xjo),e(Yb,zjo),e(Yb,yV),e(yV,Qjo),e(Yb,Wjo),e(N,Hjo),e(N,Kb),e(Kb,ipe),e(ipe,Ujo),e(Kb,Jjo),e(Kb,xV),e(xV,Yjo),e(Kb,Kjo),e(N,Zjo),e(N,Zb),e(Zb,dpe),e(dpe,eDo),e(Zb,oDo),e(Zb,$V),e($V,rDo),e(Zb,tDo),e(N,aDo),e(N,ev),e(ev,cpe),e(cpe,nDo),e(ev,sDo),e(ev,kV),e(kV,lDo),e(ev,iDo),e(N,dDo),e(N,ov),e(ov,fpe),e(fpe,cDo),e(ov,fDo),e(ov,SV),e(SV,mDo),e(ov,gDo),e(N,hDo),e(N,rv),e(rv,mpe),e(mpe,pDo),e(rv,_Do),e(rv,RV),e(RV,uDo),e(rv,bDo),e(N,vDo),e(N,tv),e(tv,gpe),e(gpe,FDo),e(tv,TDo),e(tv,PV),e(PV,MDo),e(tv,EDo),e(N,CDo),e(N,av),e(av,hpe),e(hpe,wDo),e(av,ADo),e(av,BV),e(BV,LDo),e(av,yDo),e(N,xDo),e(N,nv),e(nv,ppe),e(ppe,$Do),e(nv,kDo),e(nv,IV),e(IV,SDo),e(nv,RDo),e(N,PDo),e(N,sv),e(sv,_pe),e(_pe,BDo),e(sv,IDo),e(sv,NV),e(NV,NDo),e(sv,qDo),e(N,jDo),e(N,lv),e(lv,upe),e(upe,DDo),e(lv,GDo),e(lv,qV),e(qV,ODo),e(lv,VDo),e(N,XDo),e(N,iv),e(iv,bpe),e(bpe,zDo),e(iv,QDo),e(iv,jV),e(jV,WDo),e(iv,HDo),e(N,UDo),e(N,dv),e(dv,vpe),e(vpe,JDo),e(dv,YDo),e(dv,DV),e(DV,KDo),e(dv,ZDo),e(N,eGo),e(N,cv),e(cv,Fpe),e(Fpe,oGo),e(cv,rGo),e(cv,GV),e(GV,tGo),e(cv,aGo),e(N,nGo),e(N,fv),e(fv,Tpe),e(Tpe,sGo),e(fv,lGo),e(fv,OV),e(OV,iGo),e(fv,dGo),e(N,cGo),e(N,mv),e(mv,Mpe),e(Mpe,fGo),e(mv,mGo),e(mv,VV),e(VV,gGo),e(mv,hGo),e(N,pGo),e(N,gv),e(gv,Epe),e(Epe,_Go),e(gv,uGo),e(gv,XV),e(XV,bGo),e(gv,vGo),e(N,FGo),e(N,hv),e(hv,Cpe),e(Cpe,TGo),e(hv,MGo),e(hv,zV),e(zV,EGo),e(hv,CGo),e(N,wGo),e(N,pv),e(pv,wpe),e(wpe,AGo),e(pv,LGo),e(pv,QV),e(QV,yGo),e(pv,xGo),e(N,$Go),e(N,_v),e(_v,Ape),e(Ape,kGo),e(_v,SGo),e(_v,WV),e(WV,RGo),e(_v,PGo),e(N,BGo),e(N,uv),e(uv,Lpe),e(Lpe,IGo),e(uv,NGo),e(uv,HV),e(HV,qGo),e(uv,jGo),e(N,DGo),e(N,bv),e(bv,ype),e(ype,GGo),e(bv,OGo),e(bv,UV),e(UV,VGo),e(bv,XGo),e(N,zGo),e(N,vv),e(vv,xpe),e(xpe,QGo),e(vv,WGo),e(vv,JV),e(JV,HGo),e(vv,UGo),e(N,JGo),e(N,Fv),e(Fv,$pe),e($pe,YGo),e(Fv,KGo),e(Fv,YV),e(YV,ZGo),e(Fv,eOo),e(N,oOo),e(N,Tv),e(Tv,kpe),e(kpe,rOo),e(Tv,tOo),e(Tv,KV),e(KV,aOo),e(Tv,nOo),e(N,sOo),e(N,Mv),e(Mv,Spe),e(Spe,lOo),e(Mv,iOo),e(Mv,ZV),e(ZV,dOo),e(Mv,cOo),e(N,fOo),e(N,Ev),e(Ev,Rpe),e(Rpe,mOo),e(Ev,gOo),e(Ev,eX),e(eX,hOo),e(Ev,pOo),e(oo,_Oo),e(oo,Cv),e(Cv,uOo),e(Cv,Ppe),e(Ppe,bOo),e(Cv,vOo),e(Cv,Bpe),e(Bpe,FOo),e(oo,TOo),M(wv,oo,null),b(f,jOe,u),b(f,ed,u),e(ed,Av),e(Av,Ipe),M(qL,Ipe,null),e(ed,MOo),e(ed,Npe),e(Npe,EOo),b(f,DOe,u),b(f,Bo,u),M(jL,Bo,null),e(Bo,COo),e(Bo,od),e(od,wOo),e(od,oX),e(oX,AOo),e(od,LOo),e(od,rX),e(rX,yOo),e(od,xOo),e(Bo,$Oo),e(Bo,DL),e(DL,kOo),e(DL,qpe),e(qpe,SOo),e(DL,ROo),e(Bo,POo),e(Bo,ft),M(GL,ft,null),e(ft,BOo),e(ft,jpe),e(jpe,IOo),e(ft,NOo),e(ft,rd),e(rd,qOo),e(rd,Dpe),e(Dpe,jOo),e(rd,DOo),e(rd,tX),e(tX,GOo),e(rd,OOo),e(ft,VOo),M(Lv,ft,null),e(Bo,XOo),e(Bo,ro),M(OL,ro,null),e(ro,zOo),e(ro,Gpe),e(Gpe,QOo),e(ro,WOo),e(ro,ja),e(ja,HOo),e(ja,Ope),e(Ope,UOo),e(ja,JOo),e(ja,Vpe),e(Vpe,YOo),e(ja,KOo),e(ja,Xpe),e(Xpe,ZOo),e(ja,eVo),e(ro,oVo),e(ro,Z),e(Z,yv),e(yv,zpe),e(zpe,rVo),e(yv,tVo),e(yv,aX),e(aX,aVo),e(yv,nVo),e(Z,sVo),e(Z,xv),e(xv,Qpe),e(Qpe,lVo),e(xv,iVo),e(xv,nX),e(nX,dVo),e(xv,cVo),e(Z,fVo),e(Z,$v),e($v,Wpe),e(Wpe,mVo),e($v,gVo),e($v,sX),e(sX,hVo),e($v,pVo),e(Z,_Vo),e(Z,kv),e(kv,Hpe),e(Hpe,uVo),e(kv,bVo),e(kv,lX),e(lX,vVo),e(kv,FVo),e(Z,TVo),e(Z,Sv),e(Sv,Upe),e(Upe,MVo),e(Sv,EVo),e(Sv,iX),e(iX,CVo),e(Sv,wVo),e(Z,AVo),e(Z,Rv),e(Rv,Jpe),e(Jpe,LVo),e(Rv,yVo),e(Rv,dX),e(dX,xVo),e(Rv,$Vo),e(Z,kVo),e(Z,Pv),e(Pv,Ype),e(Ype,SVo),e(Pv,RVo),e(Pv,cX),e(cX,PVo),e(Pv,BVo),e(Z,IVo),e(Z,Bv),e(Bv,Kpe),e(Kpe,NVo),e(Bv,qVo),e(Bv,fX),e(fX,jVo),e(Bv,DVo),e(Z,GVo),e(Z,Iv),e(Iv,Zpe),e(Zpe,OVo),e(Iv,VVo),e(Iv,mX),e(mX,XVo),e(Iv,zVo),e(Z,QVo),e(Z,Nv),e(Nv,e_e),e(e_e,WVo),e(Nv,HVo),e(Nv,gX),e(gX,UVo),e(Nv,JVo),e(Z,YVo),e(Z,qv),e(qv,o_e),e(o_e,KVo),e(qv,ZVo),e(qv,hX),e(hX,eXo),e(qv,oXo),e(Z,rXo),e(Z,jv),e(jv,r_e),e(r_e,tXo),e(jv,aXo),e(jv,pX),e(pX,nXo),e(jv,sXo),e(Z,lXo),e(Z,Dv),e(Dv,t_e),e(t_e,iXo),e(Dv,dXo),e(Dv,_X),e(_X,cXo),e(Dv,fXo),e(Z,mXo),e(Z,Gv),e(Gv,a_e),e(a_e,gXo),e(Gv,hXo),e(Gv,uX),e(uX,pXo),e(Gv,_Xo),e(Z,uXo),e(Z,Ov),e(Ov,n_e),e(n_e,bXo),e(Ov,vXo),e(Ov,bX),e(bX,FXo),e(Ov,TXo),e(Z,MXo),e(Z,Vv),e(Vv,s_e),e(s_e,EXo),e(Vv,CXo),e(Vv,vX),e(vX,wXo),e(Vv,AXo),e(Z,LXo),e(Z,Xv),e(Xv,l_e),e(l_e,yXo),e(Xv,xXo),e(Xv,FX),e(FX,$Xo),e(Xv,kXo),e(Z,SXo),e(Z,zv),e(zv,i_e),e(i_e,RXo),e(zv,PXo),e(zv,TX),e(TX,BXo),e(zv,IXo),e(Z,NXo),e(Z,Qv),e(Qv,d_e),e(d_e,qXo),e(Qv,jXo),e(Qv,MX),e(MX,DXo),e(Qv,GXo),e(Z,OXo),e(Z,Wv),e(Wv,c_e),e(c_e,VXo),e(Wv,XXo),e(Wv,EX),e(EX,zXo),e(Wv,QXo),e(Z,WXo),e(Z,Hv),e(Hv,f_e),e(f_e,HXo),e(Hv,UXo),e(Hv,CX),e(CX,JXo),e(Hv,YXo),e(Z,KXo),e(Z,Uv),e(Uv,m_e),e(m_e,ZXo),e(Uv,ezo),e(Uv,wX),e(wX,ozo),e(Uv,rzo),e(Z,tzo),e(Z,Jv),e(Jv,g_e),e(g_e,azo),e(Jv,nzo),e(Jv,AX),e(AX,szo),e(Jv,lzo),e(Z,izo),e(Z,Yv),e(Yv,h_e),e(h_e,dzo),e(Yv,czo),e(Yv,LX),e(LX,fzo),e(Yv,mzo),e(Z,gzo),e(Z,Kv),e(Kv,p_e),e(p_e,hzo),e(Kv,pzo),e(Kv,yX),e(yX,_zo),e(Kv,uzo),e(Z,bzo),e(Z,Zv),e(Zv,__e),e(__e,vzo),e(Zv,Fzo),e(Zv,xX),e(xX,Tzo),e(Zv,Mzo),e(Z,Ezo),e(Z,eF),e(eF,u_e),e(u_e,Czo),e(eF,wzo),e(eF,$X),e($X,Azo),e(eF,Lzo),e(Z,yzo),e(Z,oF),e(oF,b_e),e(b_e,xzo),e(oF,$zo),e(oF,kX),e(kX,kzo),e(oF,Szo),e(Z,Rzo),e(Z,rF),e(rF,v_e),e(v_e,Pzo),e(rF,Bzo),e(rF,SX),e(SX,Izo),e(rF,Nzo),e(Z,qzo),e(Z,tF),e(tF,F_e),e(F_e,jzo),e(tF,Dzo),e(tF,RX),e(RX,Gzo),e(tF,Ozo),e(ro,Vzo),e(ro,aF),e(aF,Xzo),e(aF,T_e),e(T_e,zzo),e(aF,Qzo),e(aF,M_e),e(M_e,Wzo),e(ro,Hzo),M(nF,ro,null),b(f,GOe,u),b(f,td,u),e(td,sF),e(sF,E_e),M(VL,E_e,null),e(td,Uzo),e(td,C_e),e(C_e,Jzo),b(f,OOe,u),b(f,Io,u),M(XL,Io,null),e(Io,Yzo),e(Io,ad),e(ad,Kzo),e(ad,PX),e(PX,Zzo),e(ad,eQo),e(ad,BX),e(BX,oQo),e(ad,rQo),e(Io,tQo),e(Io,zL),e(zL,aQo),e(zL,w_e),e(w_e,nQo),e(zL,sQo),e(Io,lQo),e(Io,mt),M(QL,mt,null),e(mt,iQo),e(mt,A_e),e(A_e,dQo),e(mt,cQo),e(mt,nd),e(nd,fQo),e(nd,L_e),e(L_e,mQo),e(nd,gQo),e(nd,IX),e(IX,hQo),e(nd,pQo),e(mt,_Qo),M(lF,mt,null),e(Io,uQo),e(Io,to),M(WL,to,null),e(to,bQo),e(to,y_e),e(y_e,vQo),e(to,FQo),e(to,Da),e(Da,TQo),e(Da,x_e),e(x_e,MQo),e(Da,EQo),e(Da,$_e),e($_e,CQo),e(Da,wQo),e(Da,k_e),e(k_e,AQo),e(Da,LQo),e(to,yQo),e(to,No),e(No,iF),e(iF,S_e),e(S_e,xQo),e(iF,$Qo),e(iF,NX),e(NX,kQo),e(iF,SQo),e(No,RQo),e(No,dF),e(dF,R_e),e(R_e,PQo),e(dF,BQo),e(dF,qX),e(qX,IQo),e(dF,NQo),e(No,qQo),e(No,cF),e(cF,P_e),e(P_e,jQo),e(cF,DQo),e(cF,jX),e(jX,GQo),e(cF,OQo),e(No,VQo),e(No,fF),e(fF,B_e),e(B_e,XQo),e(fF,zQo),e(fF,DX),e(DX,QQo),e(fF,WQo),e(No,HQo),e(No,mF),e(mF,I_e),e(I_e,UQo),e(mF,JQo),e(mF,GX),e(GX,YQo),e(mF,KQo),e(No,ZQo),e(No,gF),e(gF,N_e),e(N_e,eWo),e(gF,oWo),e(gF,OX),e(OX,rWo),e(gF,tWo),e(to,aWo),e(to,hF),e(hF,nWo),e(hF,q_e),e(q_e,sWo),e(hF,lWo),e(hF,j_e),e(j_e,iWo),e(to,dWo),M(pF,to,null),b(f,VOe,u),b(f,sd,u),e(sd,_F),e(_F,D_e),M(HL,D_e,null),e(sd,cWo),e(sd,G_e),e(G_e,fWo),b(f,XOe,u),b(f,qo,u),M(UL,qo,null),e(qo,mWo),e(qo,ld),e(ld,gWo),e(ld,VX),e(VX,hWo),e(ld,pWo),e(ld,XX),e(XX,_Wo),e(ld,uWo),e(qo,bWo),e(qo,JL),e(JL,vWo),e(JL,O_e),e(O_e,FWo),e(JL,TWo),e(qo,MWo),e(qo,gt),M(YL,gt,null),e(gt,EWo),e(gt,V_e),e(V_e,CWo),e(gt,wWo),e(gt,id),e(id,AWo),e(id,X_e),e(X_e,LWo),e(id,yWo),e(id,zX),e(zX,xWo),e(id,$Wo),e(gt,kWo),M(uF,gt,null),e(qo,SWo),e(qo,ao),M(KL,ao,null),e(ao,RWo),e(ao,z_e),e(z_e,PWo),e(ao,BWo),e(ao,Ga),e(Ga,IWo),e(Ga,Q_e),e(Q_e,NWo),e(Ga,qWo),e(Ga,W_e),e(W_e,jWo),e(Ga,DWo),e(Ga,H_e),e(H_e,GWo),e(Ga,OWo),e(ao,VWo),e(ao,H),e(H,bF),e(bF,U_e),e(U_e,XWo),e(bF,zWo),e(bF,QX),e(QX,QWo),e(bF,WWo),e(H,HWo),e(H,vF),e(vF,J_e),e(J_e,UWo),e(vF,JWo),e(vF,WX),e(WX,YWo),e(vF,KWo),e(H,ZWo),e(H,FF),e(FF,Y_e),e(Y_e,eHo),e(FF,oHo),e(FF,HX),e(HX,rHo),e(FF,tHo),e(H,aHo),e(H,TF),e(TF,K_e),e(K_e,nHo),e(TF,sHo),e(TF,UX),e(UX,lHo),e(TF,iHo),e(H,dHo),e(H,MF),e(MF,Z_e),e(Z_e,cHo),e(MF,fHo),e(MF,JX),e(JX,mHo),e(MF,gHo),e(H,hHo),e(H,EF),e(EF,eue),e(eue,pHo),e(EF,_Ho),e(EF,YX),e(YX,uHo),e(EF,bHo),e(H,vHo),e(H,CF),e(CF,oue),e(oue,FHo),e(CF,THo),e(CF,KX),e(KX,MHo),e(CF,EHo),e(H,CHo),e(H,wF),e(wF,rue),e(rue,wHo),e(wF,AHo),e(wF,ZX),e(ZX,LHo),e(wF,yHo),e(H,xHo),e(H,AF),e(AF,tue),e(tue,$Ho),e(AF,kHo),e(AF,ez),e(ez,SHo),e(AF,RHo),e(H,PHo),e(H,LF),e(LF,aue),e(aue,BHo),e(LF,IHo),e(LF,oz),e(oz,NHo),e(LF,qHo),e(H,jHo),e(H,yF),e(yF,nue),e(nue,DHo),e(yF,GHo),e(yF,rz),e(rz,OHo),e(yF,VHo),e(H,XHo),e(H,xF),e(xF,sue),e(sue,zHo),e(xF,QHo),e(xF,tz),e(tz,WHo),e(xF,HHo),e(H,UHo),e(H,$F),e($F,lue),e(lue,JHo),e($F,YHo),e($F,az),e(az,KHo),e($F,ZHo),e(H,eUo),e(H,kF),e(kF,iue),e(iue,oUo),e(kF,rUo),e(kF,nz),e(nz,tUo),e(kF,aUo),e(H,nUo),e(H,SF),e(SF,due),e(due,sUo),e(SF,lUo),e(SF,sz),e(sz,iUo),e(SF,dUo),e(H,cUo),e(H,RF),e(RF,cue),e(cue,fUo),e(RF,mUo),e(RF,lz),e(lz,gUo),e(RF,hUo),e(H,pUo),e(H,PF),e(PF,fue),e(fue,_Uo),e(PF,uUo),e(PF,iz),e(iz,bUo),e(PF,vUo),e(H,FUo),e(H,BF),e(BF,mue),e(mue,TUo),e(BF,MUo),e(BF,dz),e(dz,EUo),e(BF,CUo),e(H,wUo),e(H,IF),e(IF,gue),e(gue,AUo),e(IF,LUo),e(IF,cz),e(cz,yUo),e(IF,xUo),e(H,$Uo),e(H,NF),e(NF,hue),e(hue,kUo),e(NF,SUo),e(NF,fz),e(fz,RUo),e(NF,PUo),e(H,BUo),e(H,qF),e(qF,pue),e(pue,IUo),e(qF,NUo),e(qF,mz),e(mz,qUo),e(qF,jUo),e(H,DUo),e(H,jF),e(jF,_ue),e(_ue,GUo),e(jF,OUo),e(jF,gz),e(gz,VUo),e(jF,XUo),e(H,zUo),e(H,DF),e(DF,uue),e(uue,QUo),e(DF,WUo),e(DF,hz),e(hz,HUo),e(DF,UUo),e(H,JUo),e(H,GF),e(GF,bue),e(bue,YUo),e(GF,KUo),e(GF,pz),e(pz,ZUo),e(GF,eJo),e(H,oJo),e(H,OF),e(OF,vue),e(vue,rJo),e(OF,tJo),e(OF,_z),e(_z,aJo),e(OF,nJo),e(H,sJo),e(H,VF),e(VF,Fue),e(Fue,lJo),e(VF,iJo),e(VF,uz),e(uz,dJo),e(VF,cJo),e(H,fJo),e(H,XF),e(XF,Tue),e(Tue,mJo),e(XF,gJo),e(XF,bz),e(bz,hJo),e(XF,pJo),e(H,_Jo),e(H,zF),e(zF,Mue),e(Mue,uJo),e(zF,bJo),e(zF,vz),e(vz,vJo),e(zF,FJo),e(H,TJo),e(H,QF),e(QF,Eue),e(Eue,MJo),e(QF,EJo),e(QF,Fz),e(Fz,CJo),e(QF,wJo),e(H,AJo),e(H,WF),e(WF,Cue),e(Cue,LJo),e(WF,yJo),e(WF,Tz),e(Tz,xJo),e(WF,$Jo),e(H,kJo),e(H,HF),e(HF,wue),e(wue,SJo),e(HF,RJo),e(HF,Mz),e(Mz,PJo),e(HF,BJo),e(H,IJo),e(H,UF),e(UF,Aue),e(Aue,NJo),e(UF,qJo),e(UF,Ez),e(Ez,jJo),e(UF,DJo),e(H,GJo),e(H,JF),e(JF,Lue),e(Lue,OJo),e(JF,VJo),e(JF,Cz),e(Cz,XJo),e(JF,zJo),e(H,QJo),e(H,YF),e(YF,yue),e(yue,WJo),e(YF,HJo),e(YF,wz),e(wz,UJo),e(YF,JJo),e(H,YJo),e(H,KF),e(KF,xue),e(xue,KJo),e(KF,ZJo),e(KF,Az),e(Az,eYo),e(KF,oYo),e(H,rYo),e(H,ZF),e(ZF,$ue),e($ue,tYo),e(ZF,aYo),e(ZF,Lz),e(Lz,nYo),e(ZF,sYo),e(ao,lYo),e(ao,e6),e(e6,iYo),e(e6,kue),e(kue,dYo),e(e6,cYo),e(e6,Sue),e(Sue,fYo),e(ao,mYo),M(o6,ao,null),b(f,zOe,u),b(f,dd,u),e(dd,r6),e(r6,Rue),M(ZL,Rue,null),e(dd,gYo),e(dd,Pue),e(Pue,hYo),b(f,QOe,u),b(f,jo,u),M(ey,jo,null),e(jo,pYo),e(jo,cd),e(cd,_Yo),e(cd,yz),e(yz,uYo),e(cd,bYo),e(cd,xz),e(xz,vYo),e(cd,FYo),e(jo,TYo),e(jo,oy),e(oy,MYo),e(oy,Bue),e(Bue,EYo),e(oy,CYo),e(jo,wYo),e(jo,ht),M(ry,ht,null),e(ht,AYo),e(ht,Iue),e(Iue,LYo),e(ht,yYo),e(ht,fd),e(fd,xYo),e(fd,Nue),e(Nue,$Yo),e(fd,kYo),e(fd,$z),e($z,SYo),e(fd,RYo),e(ht,PYo),M(t6,ht,null),e(jo,BYo),e(jo,no),M(ty,no,null),e(no,IYo),e(no,que),e(que,NYo),e(no,qYo),e(no,Oa),e(Oa,jYo),e(Oa,jue),e(jue,DYo),e(Oa,GYo),e(Oa,Due),e(Due,OYo),e(Oa,VYo),e(Oa,Gue),e(Gue,XYo),e(Oa,zYo),e(no,QYo),e(no,V),e(V,a6),e(a6,Oue),e(Oue,WYo),e(a6,HYo),e(a6,kz),e(kz,UYo),e(a6,JYo),e(V,YYo),e(V,n6),e(n6,Vue),e(Vue,KYo),e(n6,ZYo),e(n6,Sz),e(Sz,eKo),e(n6,oKo),e(V,rKo),e(V,s6),e(s6,Xue),e(Xue,tKo),e(s6,aKo),e(s6,Rz),e(Rz,nKo),e(s6,sKo),e(V,lKo),e(V,l6),e(l6,zue),e(zue,iKo),e(l6,dKo),e(l6,Pz),e(Pz,cKo),e(l6,fKo),e(V,mKo),e(V,i6),e(i6,Que),e(Que,gKo),e(i6,hKo),e(i6,Bz),e(Bz,pKo),e(i6,_Ko),e(V,uKo),e(V,d6),e(d6,Wue),e(Wue,bKo),e(d6,vKo),e(d6,Iz),e(Iz,FKo),e(d6,TKo),e(V,MKo),e(V,c6),e(c6,Hue),e(Hue,EKo),e(c6,CKo),e(c6,Nz),e(Nz,wKo),e(c6,AKo),e(V,LKo),e(V,f6),e(f6,Uue),e(Uue,yKo),e(f6,xKo),e(f6,qz),e(qz,$Ko),e(f6,kKo),e(V,SKo),e(V,m6),e(m6,Jue),e(Jue,RKo),e(m6,PKo),e(m6,jz),e(jz,BKo),e(m6,IKo),e(V,NKo),e(V,g6),e(g6,Yue),e(Yue,qKo),e(g6,jKo),e(g6,Dz),e(Dz,DKo),e(g6,GKo),e(V,OKo),e(V,h6),e(h6,Kue),e(Kue,VKo),e(h6,XKo),e(h6,Gz),e(Gz,zKo),e(h6,QKo),e(V,WKo),e(V,p6),e(p6,Zue),e(Zue,HKo),e(p6,UKo),e(p6,Oz),e(Oz,JKo),e(p6,YKo),e(V,KKo),e(V,_6),e(_6,e2e),e(e2e,ZKo),e(_6,eZo),e(_6,Vz),e(Vz,oZo),e(_6,rZo),e(V,tZo),e(V,u6),e(u6,o2e),e(o2e,aZo),e(u6,nZo),e(u6,Xz),e(Xz,sZo),e(u6,lZo),e(V,iZo),e(V,b6),e(b6,r2e),e(r2e,dZo),e(b6,cZo),e(b6,zz),e(zz,fZo),e(b6,mZo),e(V,gZo),e(V,v6),e(v6,t2e),e(t2e,hZo),e(v6,pZo),e(v6,Qz),e(Qz,_Zo),e(v6,uZo),e(V,bZo),e(V,F6),e(F6,a2e),e(a2e,vZo),e(F6,FZo),e(F6,Wz),e(Wz,TZo),e(F6,MZo),e(V,EZo),e(V,T6),e(T6,n2e),e(n2e,CZo),e(T6,wZo),e(T6,Hz),e(Hz,AZo),e(T6,LZo),e(V,yZo),e(V,M6),e(M6,s2e),e(s2e,xZo),e(M6,$Zo),e(M6,Uz),e(Uz,kZo),e(M6,SZo),e(V,RZo),e(V,E6),e(E6,l2e),e(l2e,PZo),e(E6,BZo),e(E6,Jz),e(Jz,IZo),e(E6,NZo),e(V,qZo),e(V,C6),e(C6,i2e),e(i2e,jZo),e(C6,DZo),e(C6,Yz),e(Yz,GZo),e(C6,OZo),e(V,VZo),e(V,w6),e(w6,d2e),e(d2e,XZo),e(w6,zZo),e(w6,Kz),e(Kz,QZo),e(w6,WZo),e(V,HZo),e(V,A6),e(A6,c2e),e(c2e,UZo),e(A6,JZo),e(A6,Zz),e(Zz,YZo),e(A6,KZo),e(V,ZZo),e(V,L6),e(L6,f2e),e(f2e,eer),e(L6,oer),e(L6,eQ),e(eQ,rer),e(L6,ter),e(V,aer),e(V,y6),e(y6,m2e),e(m2e,ner),e(y6,ser),e(y6,oQ),e(oQ,ler),e(y6,ier),e(V,der),e(V,x6),e(x6,g2e),e(g2e,cer),e(x6,fer),e(x6,rQ),e(rQ,mer),e(x6,ger),e(V,her),e(V,$6),e($6,h2e),e(h2e,per),e($6,_er),e($6,tQ),e(tQ,uer),e($6,ber),e(V,ver),e(V,k6),e(k6,p2e),e(p2e,Fer),e(k6,Ter),e(k6,aQ),e(aQ,Mer),e(k6,Eer),e(V,Cer),e(V,S6),e(S6,_2e),e(_2e,wer),e(S6,Aer),e(S6,nQ),e(nQ,Ler),e(S6,yer),e(V,xer),e(V,R6),e(R6,u2e),e(u2e,$er),e(R6,ker),e(R6,sQ),e(sQ,Ser),e(R6,Rer),e(V,Per),e(V,P6),e(P6,b2e),e(b2e,Ber),e(P6,Ier),e(P6,lQ),e(lQ,Ner),e(P6,qer),e(V,jer),e(V,B6),e(B6,v2e),e(v2e,Der),e(B6,Ger),e(B6,iQ),e(iQ,Oer),e(B6,Ver),e(V,Xer),e(V,I6),e(I6,F2e),e(F2e,zer),e(I6,Qer),e(I6,dQ),e(dQ,Wer),e(I6,Her),e(V,Uer),e(V,N6),e(N6,T2e),e(T2e,Jer),e(N6,Yer),e(N6,cQ),e(cQ,Ker),e(N6,Zer),e(V,eor),e(V,q6),e(q6,M2e),e(M2e,oor),e(q6,ror),e(q6,fQ),e(fQ,tor),e(q6,aor),e(V,nor),e(V,j6),e(j6,E2e),e(E2e,sor),e(j6,lor),e(j6,mQ),e(mQ,ior),e(j6,dor),e(V,cor),e(V,D6),e(D6,C2e),e(C2e,mor),e(D6,gor),e(D6,gQ),e(gQ,hor),e(D6,por),e(V,_or),e(V,G6),e(G6,w2e),e(w2e,uor),e(G6,bor),e(G6,hQ),e(hQ,vor),e(G6,For),e(V,Tor),e(V,O6),e(O6,A2e),e(A2e,Mor),e(O6,Eor),e(O6,pQ),e(pQ,Cor),e(O6,wor),e(V,Aor),e(V,V6),e(V6,L2e),e(L2e,Lor),e(V6,yor),e(V6,_Q),e(_Q,xor),e(V6,$or),e(V,kor),e(V,X6),e(X6,y2e),e(y2e,Sor),e(X6,Ror),e(X6,uQ),e(uQ,Por),e(X6,Bor),e(no,Ior),e(no,z6),e(z6,Nor),e(z6,x2e),e(x2e,qor),e(z6,jor),e(z6,$2e),e($2e,Dor),e(no,Gor),M(Q6,no,null),b(f,WOe,u),b(f,md,u),e(md,W6),e(W6,k2e),M(ay,k2e,null),e(md,Oor),e(md,S2e),e(S2e,Vor),b(f,HOe,u),b(f,Do,u),M(ny,Do,null),e(Do,Xor),e(Do,gd),e(gd,zor),e(gd,bQ),e(bQ,Qor),e(gd,Wor),e(gd,vQ),e(vQ,Hor),e(gd,Uor),e(Do,Jor),e(Do,sy),e(sy,Yor),e(sy,R2e),e(R2e,Kor),e(sy,Zor),e(Do,err),e(Do,pt),M(ly,pt,null),e(pt,orr),e(pt,P2e),e(P2e,rrr),e(pt,trr),e(pt,hd),e(hd,arr),e(hd,B2e),e(B2e,nrr),e(hd,srr),e(hd,FQ),e(FQ,lrr),e(hd,irr),e(pt,drr),M(H6,pt,null),e(Do,crr),e(Do,so),M(iy,so,null),e(so,frr),e(so,I2e),e(I2e,mrr),e(so,grr),e(so,Va),e(Va,hrr),e(Va,N2e),e(N2e,prr),e(Va,_rr),e(Va,q2e),e(q2e,urr),e(Va,brr),e(Va,j2e),e(j2e,vrr),e(Va,Frr),e(so,Trr),e(so,D2e),e(D2e,U6),e(U6,G2e),e(G2e,Mrr),e(U6,Err),e(U6,TQ),e(TQ,Crr),e(U6,wrr),e(so,Arr),e(so,J6),e(J6,Lrr),e(J6,O2e),e(O2e,yrr),e(J6,xrr),e(J6,V2e),e(V2e,$rr),e(so,krr),M(Y6,so,null),b(f,UOe,u),b(f,pd,u),e(pd,K6),e(K6,X2e),M(dy,X2e,null),e(pd,Srr),e(pd,z2e),e(z2e,Rrr),b(f,JOe,u),b(f,Go,u),M(cy,Go,null),e(Go,Prr),e(Go,_d),e(_d,Brr),e(_d,MQ),e(MQ,Irr),e(_d,Nrr),e(_d,EQ),e(EQ,qrr),e(_d,jrr),e(Go,Drr),e(Go,fy),e(fy,Grr),e(fy,Q2e),e(Q2e,Orr),e(fy,Vrr),e(Go,Xrr),e(Go,_t),M(my,_t,null),e(_t,zrr),e(_t,W2e),e(W2e,Qrr),e(_t,Wrr),e(_t,ud),e(ud,Hrr),e(ud,H2e),e(H2e,Urr),e(ud,Jrr),e(ud,CQ),e(CQ,Yrr),e(ud,Krr),e(_t,Zrr),M(Z6,_t,null),e(Go,etr),e(Go,lo),M(gy,lo,null),e(lo,otr),e(lo,U2e),e(U2e,rtr),e(lo,ttr),e(lo,Xa),e(Xa,atr),e(Xa,J2e),e(J2e,ntr),e(Xa,str),e(Xa,Y2e),e(Y2e,ltr),e(Xa,itr),e(Xa,K2e),e(K2e,dtr),e(Xa,ctr),e(lo,ftr),e(lo,Fe),e(Fe,eT),e(eT,Z2e),e(Z2e,mtr),e(eT,gtr),e(eT,wQ),e(wQ,htr),e(eT,ptr),e(Fe,_tr),e(Fe,oT),e(oT,e1e),e(e1e,utr),e(oT,btr),e(oT,AQ),e(AQ,vtr),e(oT,Ftr),e(Fe,Ttr),e(Fe,rT),e(rT,o1e),e(o1e,Mtr),e(rT,Etr),e(rT,LQ),e(LQ,Ctr),e(rT,wtr),e(Fe,Atr),e(Fe,tT),e(tT,r1e),e(r1e,Ltr),e(tT,ytr),e(tT,yQ),e(yQ,xtr),e(tT,$tr),e(Fe,ktr),e(Fe,zs),e(zs,t1e),e(t1e,Str),e(zs,Rtr),e(zs,xQ),e(xQ,Ptr),e(zs,Btr),e(zs,$Q),e($Q,Itr),e(zs,Ntr),e(Fe,qtr),e(Fe,aT),e(aT,a1e),e(a1e,jtr),e(aT,Dtr),e(aT,kQ),e(kQ,Gtr),e(aT,Otr),e(Fe,Vtr),e(Fe,Qs),e(Qs,n1e),e(n1e,Xtr),e(Qs,ztr),e(Qs,SQ),e(SQ,Qtr),e(Qs,Wtr),e(Qs,RQ),e(RQ,Htr),e(Qs,Utr),e(Fe,Jtr),e(Fe,ut),e(ut,s1e),e(s1e,Ytr),e(ut,Ktr),e(ut,PQ),e(PQ,Ztr),e(ut,ear),e(ut,BQ),e(BQ,oar),e(ut,rar),e(ut,IQ),e(IQ,tar),e(ut,aar),e(Fe,nar),e(Fe,nT),e(nT,l1e),e(l1e,sar),e(nT,lar),e(nT,NQ),e(NQ,iar),e(nT,dar),e(Fe,car),e(Fe,sT),e(sT,i1e),e(i1e,far),e(sT,mar),e(sT,qQ),e(qQ,gar),e(sT,har),e(Fe,par),e(Fe,lT),e(lT,d1e),e(d1e,_ar),e(lT,uar),e(lT,jQ),e(jQ,bar),e(lT,Far),e(Fe,Tar),e(Fe,iT),e(iT,c1e),e(c1e,Mar),e(iT,Ear),e(iT,DQ),e(DQ,Car),e(iT,war),e(Fe,Aar),e(Fe,dT),e(dT,f1e),e(f1e,Lar),e(dT,yar),e(dT,GQ),e(GQ,xar),e(dT,$ar),e(Fe,kar),e(Fe,cT),e(cT,m1e),e(m1e,Sar),e(cT,Rar),e(cT,OQ),e(OQ,Par),e(cT,Bar),e(Fe,Iar),e(Fe,fT),e(fT,g1e),e(g1e,Nar),e(fT,qar),e(fT,VQ),e(VQ,jar),e(fT,Dar),e(lo,Gar),e(lo,mT),e(mT,Oar),e(mT,h1e),e(h1e,Var),e(mT,Xar),e(mT,p1e),e(p1e,zar),e(lo,Qar),M(gT,lo,null),b(f,YOe,u),b(f,bd,u),e(bd,hT),e(hT,_1e),M(hy,_1e,null),e(bd,War),e(bd,u1e),e(u1e,Har),b(f,KOe,u),b(f,Oo,u),M(py,Oo,null),e(Oo,Uar),e(Oo,vd),e(vd,Jar),e(vd,XQ),e(XQ,Yar),e(vd,Kar),e(vd,zQ),e(zQ,Zar),e(vd,enr),e(Oo,onr),e(Oo,_y),e(_y,rnr),e(_y,b1e),e(b1e,tnr),e(_y,anr),e(Oo,nnr),e(Oo,bt),M(uy,bt,null),e(bt,snr),e(bt,v1e),e(v1e,lnr),e(bt,inr),e(bt,Fd),e(Fd,dnr),e(Fd,F1e),e(F1e,cnr),e(Fd,fnr),e(Fd,QQ),e(QQ,mnr),e(Fd,gnr),e(bt,hnr),M(pT,bt,null),e(Oo,pnr),e(Oo,io),M(by,io,null),e(io,_nr),e(io,T1e),e(T1e,unr),e(io,bnr),e(io,za),e(za,vnr),e(za,M1e),e(M1e,Fnr),e(za,Tnr),e(za,E1e),e(E1e,Mnr),e(za,Enr),e(za,C1e),e(C1e,Cnr),e(za,wnr),e(io,Anr),e(io,w1e),e(w1e,_T),e(_T,A1e),e(A1e,Lnr),e(_T,ynr),e(_T,WQ),e(WQ,xnr),e(_T,$nr),e(io,knr),e(io,uT),e(uT,Snr),e(uT,L1e),e(L1e,Rnr),e(uT,Pnr),e(uT,y1e),e(y1e,Bnr),e(io,Inr),M(bT,io,null),b(f,ZOe,u),b(f,Td,u),e(Td,vT),e(vT,x1e),M(vy,x1e,null),e(Td,Nnr),e(Td,$1e),e($1e,qnr),b(f,eVe,u),b(f,Vo,u),M(Fy,Vo,null),e(Vo,jnr),e(Vo,Md),e(Md,Dnr),e(Md,HQ),e(HQ,Gnr),e(Md,Onr),e(Md,UQ),e(UQ,Vnr),e(Md,Xnr),e(Vo,znr),e(Vo,Ty),e(Ty,Qnr),e(Ty,k1e),e(k1e,Wnr),e(Ty,Hnr),e(Vo,Unr),e(Vo,vt),M(My,vt,null),e(vt,Jnr),e(vt,S1e),e(S1e,Ynr),e(vt,Knr),e(vt,Ed),e(Ed,Znr),e(Ed,R1e),e(R1e,esr),e(Ed,osr),e(Ed,JQ),e(JQ,rsr),e(Ed,tsr),e(vt,asr),M(FT,vt,null),e(Vo,nsr),e(Vo,co),M(Ey,co,null),e(co,ssr),e(co,P1e),e(P1e,lsr),e(co,isr),e(co,Qa),e(Qa,dsr),e(Qa,B1e),e(B1e,csr),e(Qa,fsr),e(Qa,I1e),e(I1e,msr),e(Qa,gsr),e(Qa,N1e),e(N1e,hsr),e(Qa,psr),e(co,_sr),e(co,q1e),e(q1e,TT),e(TT,j1e),e(j1e,usr),e(TT,bsr),e(TT,YQ),e(YQ,vsr),e(TT,Fsr),e(co,Tsr),e(co,MT),e(MT,Msr),e(MT,D1e),e(D1e,Esr),e(MT,Csr),e(MT,G1e),e(G1e,wsr),e(co,Asr),M(ET,co,null),b(f,oVe,u),b(f,Cd,u),e(Cd,CT),e(CT,O1e),M(Cy,O1e,null),e(Cd,Lsr),e(Cd,V1e),e(V1e,ysr),b(f,rVe,u),b(f,Xo,u),M(wy,Xo,null),e(Xo,xsr),e(Xo,wd),e(wd,$sr),e(wd,KQ),e(KQ,ksr),e(wd,Ssr),e(wd,ZQ),e(ZQ,Rsr),e(wd,Psr),e(Xo,Bsr),e(Xo,Ay),e(Ay,Isr),e(Ay,X1e),e(X1e,Nsr),e(Ay,qsr),e(Xo,jsr),e(Xo,Ft),M(Ly,Ft,null),e(Ft,Dsr),e(Ft,z1e),e(z1e,Gsr),e(Ft,Osr),e(Ft,Ad),e(Ad,Vsr),e(Ad,Q1e),e(Q1e,Xsr),e(Ad,zsr),e(Ad,eW),e(eW,Qsr),e(Ad,Wsr),e(Ft,Hsr),M(wT,Ft,null),e(Xo,Usr),e(Xo,fo),M(yy,fo,null),e(fo,Jsr),e(fo,W1e),e(W1e,Ysr),e(fo,Ksr),e(fo,Wa),e(Wa,Zsr),e(Wa,H1e),e(H1e,elr),e(Wa,olr),e(Wa,U1e),e(U1e,rlr),e(Wa,tlr),e(Wa,J1e),e(J1e,alr),e(Wa,nlr),e(fo,slr),e(fo,Pe),e(Pe,AT),e(AT,Y1e),e(Y1e,llr),e(AT,ilr),e(AT,oW),e(oW,dlr),e(AT,clr),e(Pe,flr),e(Pe,LT),e(LT,K1e),e(K1e,mlr),e(LT,glr),e(LT,rW),e(rW,hlr),e(LT,plr),e(Pe,_lr),e(Pe,yT),e(yT,Z1e),e(Z1e,ulr),e(yT,blr),e(yT,tW),e(tW,vlr),e(yT,Flr),e(Pe,Tlr),e(Pe,xT),e(xT,ebe),e(ebe,Mlr),e(xT,Elr),e(xT,aW),e(aW,Clr),e(xT,wlr),e(Pe,Alr),e(Pe,$T),e($T,obe),e(obe,Llr),e($T,ylr),e($T,nW),e(nW,xlr),e($T,$lr),e(Pe,klr),e(Pe,kT),e(kT,rbe),e(rbe,Slr),e(kT,Rlr),e(kT,sW),e(sW,Plr),e(kT,Blr),e(Pe,Ilr),e(Pe,ST),e(ST,tbe),e(tbe,Nlr),e(ST,qlr),e(ST,lW),e(lW,jlr),e(ST,Dlr),e(Pe,Glr),e(Pe,RT),e(RT,abe),e(abe,Olr),e(RT,Vlr),e(RT,iW),e(iW,Xlr),e(RT,zlr),e(Pe,Qlr),e(Pe,PT),e(PT,nbe),e(nbe,Wlr),e(PT,Hlr),e(PT,dW),e(dW,Ulr),e(PT,Jlr),e(fo,Ylr),e(fo,BT),e(BT,Klr),e(BT,sbe),e(sbe,Zlr),e(BT,eir),e(BT,lbe),e(lbe,oir),e(fo,rir),M(IT,fo,null),b(f,tVe,u),b(f,Ld,u),e(Ld,NT),e(NT,ibe),M(xy,ibe,null),e(Ld,tir),e(Ld,dbe),e(dbe,air),b(f,aVe,u),b(f,zo,u),M($y,zo,null),e(zo,nir),e(zo,yd),e(yd,sir),e(yd,cW),e(cW,lir),e(yd,iir),e(yd,fW),e(fW,dir),e(yd,cir),e(zo,fir),e(zo,ky),e(ky,mir),e(ky,cbe),e(cbe,gir),e(ky,hir),e(zo,pir),e(zo,Tt),M(Sy,Tt,null),e(Tt,_ir),e(Tt,fbe),e(fbe,uir),e(Tt,bir),e(Tt,xd),e(xd,vir),e(xd,mbe),e(mbe,Fir),e(xd,Tir),e(xd,mW),e(mW,Mir),e(xd,Eir),e(Tt,Cir),M(qT,Tt,null),e(zo,wir),e(zo,mo),M(Ry,mo,null),e(mo,Air),e(mo,gbe),e(gbe,Lir),e(mo,yir),e(mo,Ha),e(Ha,xir),e(Ha,hbe),e(hbe,$ir),e(Ha,kir),e(Ha,pbe),e(pbe,Sir),e(Ha,Rir),e(Ha,_be),e(_be,Pir),e(Ha,Bir),e(mo,Iir),e(mo,et),e(et,jT),e(jT,ube),e(ube,Nir),e(jT,qir),e(jT,gW),e(gW,jir),e(jT,Dir),e(et,Gir),e(et,DT),e(DT,bbe),e(bbe,Oir),e(DT,Vir),e(DT,hW),e(hW,Xir),e(DT,zir),e(et,Qir),e(et,GT),e(GT,vbe),e(vbe,Wir),e(GT,Hir),e(GT,pW),e(pW,Uir),e(GT,Jir),e(et,Yir),e(et,OT),e(OT,Fbe),e(Fbe,Kir),e(OT,Zir),e(OT,_W),e(_W,edr),e(OT,odr),e(et,rdr),e(et,VT),e(VT,Tbe),e(Tbe,tdr),e(VT,adr),e(VT,uW),e(uW,ndr),e(VT,sdr),e(mo,ldr),e(mo,XT),e(XT,idr),e(XT,Mbe),e(Mbe,ddr),e(XT,cdr),e(XT,Ebe),e(Ebe,fdr),e(mo,mdr),M(zT,mo,null),b(f,nVe,u),b(f,$d,u),e($d,QT),e(QT,Cbe),M(Py,Cbe,null),e($d,gdr),e($d,wbe),e(wbe,hdr),b(f,sVe,u),b(f,Qo,u),M(By,Qo,null),e(Qo,pdr),e(Qo,kd),e(kd,_dr),e(kd,bW),e(bW,udr),e(kd,bdr),e(kd,vW),e(vW,vdr),e(kd,Fdr),e(Qo,Tdr),e(Qo,Iy),e(Iy,Mdr),e(Iy,Abe),e(Abe,Edr),e(Iy,Cdr),e(Qo,wdr),e(Qo,Mt),M(Ny,Mt,null),e(Mt,Adr),e(Mt,Lbe),e(Lbe,Ldr),e(Mt,ydr),e(Mt,Sd),e(Sd,xdr),e(Sd,ybe),e(ybe,$dr),e(Sd,kdr),e(Sd,FW),e(FW,Sdr),e(Sd,Rdr),e(Mt,Pdr),M(WT,Mt,null),e(Qo,Bdr),e(Qo,go),M(qy,go,null),e(go,Idr),e(go,xbe),e(xbe,Ndr),e(go,qdr),e(go,Ua),e(Ua,jdr),e(Ua,$be),e($be,Ddr),e(Ua,Gdr),e(Ua,kbe),e(kbe,Odr),e(Ua,Vdr),e(Ua,Sbe),e(Sbe,Xdr),e(Ua,zdr),e(go,Qdr),e(go,Le),e(Le,HT),e(HT,Rbe),e(Rbe,Wdr),e(HT,Hdr),e(HT,TW),e(TW,Udr),e(HT,Jdr),e(Le,Ydr),e(Le,UT),e(UT,Pbe),e(Pbe,Kdr),e(UT,Zdr),e(UT,MW),e(MW,ecr),e(UT,ocr),e(Le,rcr),e(Le,JT),e(JT,Bbe),e(Bbe,tcr),e(JT,acr),e(JT,EW),e(EW,ncr),e(JT,scr),e(Le,lcr),e(Le,YT),e(YT,Ibe),e(Ibe,icr),e(YT,dcr),e(YT,CW),e(CW,ccr),e(YT,fcr),e(Le,mcr),e(Le,KT),e(KT,Nbe),e(Nbe,gcr),e(KT,hcr),e(KT,wW),e(wW,pcr),e(KT,_cr),e(Le,ucr),e(Le,ZT),e(ZT,qbe),e(qbe,bcr),e(ZT,vcr),e(ZT,AW),e(AW,Fcr),e(ZT,Tcr),e(Le,Mcr),e(Le,e7),e(e7,jbe),e(jbe,Ecr),e(e7,Ccr),e(e7,LW),e(LW,wcr),e(e7,Acr),e(Le,Lcr),e(Le,o7),e(o7,Dbe),e(Dbe,ycr),e(o7,xcr),e(o7,yW),e(yW,$cr),e(o7,kcr),e(Le,Scr),e(Le,r7),e(r7,Gbe),e(Gbe,Rcr),e(r7,Pcr),e(r7,xW),e(xW,Bcr),e(r7,Icr),e(Le,Ncr),e(Le,t7),e(t7,Obe),e(Obe,qcr),e(t7,jcr),e(t7,$W),e($W,Dcr),e(t7,Gcr),e(go,Ocr),e(go,a7),e(a7,Vcr),e(a7,Vbe),e(Vbe,Xcr),e(a7,zcr),e(a7,Xbe),e(Xbe,Qcr),e(go,Wcr),M(n7,go,null),b(f,lVe,u),b(f,Rd,u),e(Rd,s7),e(s7,zbe),M(jy,zbe,null),e(Rd,Hcr),e(Rd,Qbe),e(Qbe,Ucr),b(f,iVe,u),b(f,Wo,u),M(Dy,Wo,null),e(Wo,Jcr),e(Wo,Pd),e(Pd,Ycr),e(Pd,kW),e(kW,Kcr),e(Pd,Zcr),e(Pd,SW),e(SW,efr),e(Pd,ofr),e(Wo,rfr),e(Wo,Gy),e(Gy,tfr),e(Gy,Wbe),e(Wbe,afr),e(Gy,nfr),e(Wo,sfr),e(Wo,Et),M(Oy,Et,null),e(Et,lfr),e(Et,Hbe),e(Hbe,ifr),e(Et,dfr),e(Et,Bd),e(Bd,cfr),e(Bd,Ube),e(Ube,ffr),e(Bd,mfr),e(Bd,RW),e(RW,gfr),e(Bd,hfr),e(Et,pfr),M(l7,Et,null),e(Wo,_fr),e(Wo,ho),M(Vy,ho,null),e(ho,ufr),e(ho,Jbe),e(Jbe,bfr),e(ho,vfr),e(ho,Ja),e(Ja,Ffr),e(Ja,Ybe),e(Ybe,Tfr),e(Ja,Mfr),e(Ja,Kbe),e(Kbe,Efr),e(Ja,Cfr),e(Ja,Zbe),e(Zbe,wfr),e(Ja,Afr),e(ho,Lfr),e(ho,Xy),e(Xy,i7),e(i7,eve),e(eve,yfr),e(i7,xfr),e(i7,PW),e(PW,$fr),e(i7,kfr),e(Xy,Sfr),e(Xy,d7),e(d7,ove),e(ove,Rfr),e(d7,Pfr),e(d7,BW),e(BW,Bfr),e(d7,Ifr),e(ho,Nfr),e(ho,c7),e(c7,qfr),e(c7,rve),e(rve,jfr),e(c7,Dfr),e(c7,tve),e(tve,Gfr),e(ho,Ofr),M(f7,ho,null),b(f,dVe,u),b(f,Id,u),e(Id,m7),e(m7,ave),M(zy,ave,null),e(Id,Vfr),e(Id,nve),e(nve,Xfr),b(f,cVe,u),b(f,Ho,u),M(Qy,Ho,null),e(Ho,zfr),e(Ho,Nd),e(Nd,Qfr),e(Nd,IW),e(IW,Wfr),e(Nd,Hfr),e(Nd,NW),e(NW,Ufr),e(Nd,Jfr),e(Ho,Yfr),e(Ho,Wy),e(Wy,Kfr),e(Wy,sve),e(sve,Zfr),e(Wy,emr),e(Ho,omr),e(Ho,Ct),M(Hy,Ct,null),e(Ct,rmr),e(Ct,lve),e(lve,tmr),e(Ct,amr),e(Ct,qd),e(qd,nmr),e(qd,ive),e(ive,smr),e(qd,lmr),e(qd,qW),e(qW,imr),e(qd,dmr),e(Ct,cmr),M(g7,Ct,null),e(Ho,fmr),e(Ho,po),M(Uy,po,null),e(po,mmr),e(po,dve),e(dve,gmr),e(po,hmr),e(po,Ya),e(Ya,pmr),e(Ya,cve),e(cve,_mr),e(Ya,umr),e(Ya,fve),e(fve,bmr),e(Ya,vmr),e(Ya,mve),e(mve,Fmr),e(Ya,Tmr),e(po,Mmr),e(po,ot),e(ot,h7),e(h7,gve),e(gve,Emr),e(h7,Cmr),e(h7,jW),e(jW,wmr),e(h7,Amr),e(ot,Lmr),e(ot,p7),e(p7,hve),e(hve,ymr),e(p7,xmr),e(p7,DW),e(DW,$mr),e(p7,kmr),e(ot,Smr),e(ot,_7),e(_7,pve),e(pve,Rmr),e(_7,Pmr),e(_7,GW),e(GW,Bmr),e(_7,Imr),e(ot,Nmr),e(ot,u7),e(u7,_ve),e(_ve,qmr),e(u7,jmr),e(u7,OW),e(OW,Dmr),e(u7,Gmr),e(ot,Omr),e(ot,b7),e(b7,uve),e(uve,Vmr),e(b7,Xmr),e(b7,VW),e(VW,zmr),e(b7,Qmr),e(po,Wmr),e(po,v7),e(v7,Hmr),e(v7,bve),e(bve,Umr),e(v7,Jmr),e(v7,vve),e(vve,Ymr),e(po,Kmr),M(F7,po,null),b(f,fVe,u),b(f,jd,u),e(jd,T7),e(T7,Fve),M(Jy,Fve,null),e(jd,Zmr),e(jd,Tve),e(Tve,egr),b(f,mVe,u),b(f,Uo,u),M(Yy,Uo,null),e(Uo,ogr),e(Uo,Dd),e(Dd,rgr),e(Dd,XW),e(XW,tgr),e(Dd,agr),e(Dd,zW),e(zW,ngr),e(Dd,sgr),e(Uo,lgr),e(Uo,Ky),e(Ky,igr),e(Ky,Mve),e(Mve,dgr),e(Ky,cgr),e(Uo,fgr),e(Uo,wt),M(Zy,wt,null),e(wt,mgr),e(wt,Eve),e(Eve,ggr),e(wt,hgr),e(wt,Gd),e(Gd,pgr),e(Gd,Cve),e(Cve,_gr),e(Gd,ugr),e(Gd,QW),e(QW,bgr),e(Gd,vgr),e(wt,Fgr),M(M7,wt,null),e(Uo,Tgr),e(Uo,_o),M(e9,_o,null),e(_o,Mgr),e(_o,wve),e(wve,Egr),e(_o,Cgr),e(_o,Ka),e(Ka,wgr),e(Ka,Ave),e(Ave,Agr),e(Ka,Lgr),e(Ka,Lve),e(Lve,ygr),e(Ka,xgr),e(Ka,yve),e(yve,$gr),e(Ka,kgr),e(_o,Sgr),e(_o,Od),e(Od,E7),e(E7,xve),e(xve,Rgr),e(E7,Pgr),e(E7,WW),e(WW,Bgr),e(E7,Igr),e(Od,Ngr),e(Od,C7),e(C7,$ve),e($ve,qgr),e(C7,jgr),e(C7,HW),e(HW,Dgr),e(C7,Ggr),e(Od,Ogr),e(Od,w7),e(w7,kve),e(kve,Vgr),e(w7,Xgr),e(w7,UW),e(UW,zgr),e(w7,Qgr),e(_o,Wgr),e(_o,A7),e(A7,Hgr),e(A7,Sve),e(Sve,Ugr),e(A7,Jgr),e(A7,Rve),e(Rve,Ygr),e(_o,Kgr),M(L7,_o,null),b(f,gVe,u),b(f,Vd,u),e(Vd,y7),e(y7,Pve),M(o9,Pve,null),e(Vd,Zgr),e(Vd,Bve),e(Bve,ehr),b(f,hVe,u),b(f,Jo,u),M(r9,Jo,null),e(Jo,ohr),e(Jo,Xd),e(Xd,rhr),e(Xd,JW),e(JW,thr),e(Xd,ahr),e(Xd,YW),e(YW,nhr),e(Xd,shr),e(Jo,lhr),e(Jo,t9),e(t9,ihr),e(t9,Ive),e(Ive,dhr),e(t9,chr),e(Jo,fhr),e(Jo,At),M(a9,At,null),e(At,mhr),e(At,Nve),e(Nve,ghr),e(At,hhr),e(At,zd),e(zd,phr),e(zd,qve),e(qve,_hr),e(zd,uhr),e(zd,KW),e(KW,bhr),e(zd,vhr),e(At,Fhr),M(x7,At,null),e(Jo,Thr),e(Jo,uo),M(n9,uo,null),e(uo,Mhr),e(uo,jve),e(jve,Ehr),e(uo,Chr),e(uo,Za),e(Za,whr),e(Za,Dve),e(Dve,Ahr),e(Za,Lhr),e(Za,Gve),e(Gve,yhr),e(Za,xhr),e(Za,Ove),e(Ove,$hr),e(Za,khr),e(uo,Shr),e(uo,s9),e(s9,$7),e($7,Vve),e(Vve,Rhr),e($7,Phr),e($7,ZW),e(ZW,Bhr),e($7,Ihr),e(s9,Nhr),e(s9,k7),e(k7,Xve),e(Xve,qhr),e(k7,jhr),e(k7,eH),e(eH,Dhr),e(k7,Ghr),e(uo,Ohr),e(uo,S7),e(S7,Vhr),e(S7,zve),e(zve,Xhr),e(S7,zhr),e(S7,Qve),e(Qve,Qhr),e(uo,Whr),M(R7,uo,null),b(f,pVe,u),b(f,Qd,u),e(Qd,P7),e(P7,Wve),M(l9,Wve,null),e(Qd,Hhr),e(Qd,Hve),e(Hve,Uhr),b(f,_Ve,u),b(f,Yo,u),M(i9,Yo,null),e(Yo,Jhr),e(Yo,Wd),e(Wd,Yhr),e(Wd,oH),e(oH,Khr),e(Wd,Zhr),e(Wd,rH),e(rH,epr),e(Wd,opr),e(Yo,rpr),e(Yo,d9),e(d9,tpr),e(d9,Uve),e(Uve,apr),e(d9,npr),e(Yo,spr),e(Yo,Lt),M(c9,Lt,null),e(Lt,lpr),e(Lt,Jve),e(Jve,ipr),e(Lt,dpr),e(Lt,Hd),e(Hd,cpr),e(Hd,Yve),e(Yve,fpr),e(Hd,mpr),e(Hd,tH),e(tH,gpr),e(Hd,hpr),e(Lt,ppr),M(B7,Lt,null),e(Yo,_pr),e(Yo,bo),M(f9,bo,null),e(bo,upr),e(bo,Kve),e(Kve,bpr),e(bo,vpr),e(bo,en),e(en,Fpr),e(en,Zve),e(Zve,Tpr),e(en,Mpr),e(en,eFe),e(eFe,Epr),e(en,Cpr),e(en,oFe),e(oFe,wpr),e(en,Apr),e(bo,Lpr),e(bo,rFe),e(rFe,I7),e(I7,tFe),e(tFe,ypr),e(I7,xpr),e(I7,aH),e(aH,$pr),e(I7,kpr),e(bo,Spr),e(bo,N7),e(N7,Rpr),e(N7,aFe),e(aFe,Ppr),e(N7,Bpr),e(N7,nFe),e(nFe,Ipr),e(bo,Npr),M(q7,bo,null),b(f,uVe,u),b(f,Ud,u),e(Ud,j7),e(j7,sFe),M(m9,sFe,null),e(Ud,qpr),e(Ud,lFe),e(lFe,jpr),b(f,bVe,u),b(f,Ko,u),M(g9,Ko,null),e(Ko,Dpr),e(Ko,Jd),e(Jd,Gpr),e(Jd,nH),e(nH,Opr),e(Jd,Vpr),e(Jd,sH),e(sH,Xpr),e(Jd,zpr),e(Ko,Qpr),e(Ko,h9),e(h9,Wpr),e(h9,iFe),e(iFe,Hpr),e(h9,Upr),e(Ko,Jpr),e(Ko,yt),M(p9,yt,null),e(yt,Ypr),e(yt,dFe),e(dFe,Kpr),e(yt,Zpr),e(yt,Yd),e(Yd,e_r),e(Yd,cFe),e(cFe,o_r),e(Yd,r_r),e(Yd,lH),e(lH,t_r),e(Yd,a_r),e(yt,n_r),M(D7,yt,null),e(Ko,s_r),e(Ko,vo),M(_9,vo,null),e(vo,l_r),e(vo,fFe),e(fFe,i_r),e(vo,d_r),e(vo,on),e(on,c_r),e(on,mFe),e(mFe,f_r),e(on,m_r),e(on,gFe),e(gFe,g_r),e(on,h_r),e(on,hFe),e(hFe,p_r),e(on,__r),e(vo,u_r),e(vo,rn),e(rn,G7),e(G7,pFe),e(pFe,b_r),e(G7,v_r),e(G7,iH),e(iH,F_r),e(G7,T_r),e(rn,M_r),e(rn,O7),e(O7,_Fe),e(_Fe,E_r),e(O7,C_r),e(O7,dH),e(dH,w_r),e(O7,A_r),e(rn,L_r),e(rn,V7),e(V7,uFe),e(uFe,y_r),e(V7,x_r),e(V7,cH),e(cH,$_r),e(V7,k_r),e(rn,S_r),e(rn,X7),e(X7,bFe),e(bFe,R_r),e(X7,P_r),e(X7,fH),e(fH,B_r),e(X7,I_r),e(vo,N_r),e(vo,z7),e(z7,q_r),e(z7,vFe),e(vFe,j_r),e(z7,D_r),e(z7,FFe),e(FFe,G_r),e(vo,O_r),M(Q7,vo,null),b(f,vVe,u),b(f,Kd,u),e(Kd,W7),e(W7,TFe),M(u9,TFe,null),e(Kd,V_r),e(Kd,MFe),e(MFe,X_r),b(f,FVe,u),b(f,Zo,u),M(b9,Zo,null),e(Zo,z_r),e(Zo,Zd),e(Zd,Q_r),e(Zd,mH),e(mH,W_r),e(Zd,H_r),e(Zd,gH),e(gH,U_r),e(Zd,J_r),e(Zo,Y_r),e(Zo,v9),e(v9,K_r),e(v9,EFe),e(EFe,Z_r),e(v9,eur),e(Zo,our),e(Zo,xt),M(F9,xt,null),e(xt,rur),e(xt,CFe),e(CFe,tur),e(xt,aur),e(xt,ec),e(ec,nur),e(ec,wFe),e(wFe,sur),e(ec,lur),e(ec,hH),e(hH,iur),e(ec,dur),e(xt,cur),M(H7,xt,null),e(Zo,fur),e(Zo,Fo),M(T9,Fo,null),e(Fo,mur),e(Fo,AFe),e(AFe,gur),e(Fo,hur),e(Fo,tn),e(tn,pur),e(tn,LFe),e(LFe,_ur),e(tn,uur),e(tn,yFe),e(yFe,bur),e(tn,vur),e(tn,xFe),e(xFe,Fur),e(tn,Tur),e(Fo,Mur),e(Fo,$Fe),e($Fe,U7),e(U7,kFe),e(kFe,Eur),e(U7,Cur),e(U7,pH),e(pH,wur),e(U7,Aur),e(Fo,Lur),e(Fo,J7),e(J7,yur),e(J7,SFe),e(SFe,xur),e(J7,$ur),e(J7,RFe),e(RFe,kur),e(Fo,Sur),M(Y7,Fo,null),b(f,TVe,u),b(f,oc,u),e(oc,K7),e(K7,PFe),M(M9,PFe,null),e(oc,Rur),e(oc,BFe),e(BFe,Pur),b(f,MVe,u),b(f,er,u),M(E9,er,null),e(er,Bur),e(er,rc),e(rc,Iur),e(rc,_H),e(_H,Nur),e(rc,qur),e(rc,uH),e(uH,jur),e(rc,Dur),e(er,Gur),e(er,C9),e(C9,Our),e(C9,IFe),e(IFe,Vur),e(C9,Xur),e(er,zur),e(er,$t),M(w9,$t,null),e($t,Qur),e($t,NFe),e(NFe,Wur),e($t,Hur),e($t,tc),e(tc,Uur),e(tc,qFe),e(qFe,Jur),e(tc,Yur),e(tc,bH),e(bH,Kur),e(tc,Zur),e($t,e2r),M(Z7,$t,null),e(er,o2r),e(er,yr),M(A9,yr,null),e(yr,r2r),e(yr,jFe),e(jFe,t2r),e(yr,a2r),e(yr,an),e(an,n2r),e(an,DFe),e(DFe,s2r),e(an,l2r),e(an,GFe),e(GFe,i2r),e(an,d2r),e(an,OFe),e(OFe,c2r),e(an,f2r),e(yr,m2r),e(yr,j),e(j,e8),e(e8,VFe),e(VFe,g2r),e(e8,h2r),e(e8,vH),e(vH,p2r),e(e8,_2r),e(j,u2r),e(j,o8),e(o8,XFe),e(XFe,b2r),e(o8,v2r),e(o8,FH),e(FH,F2r),e(o8,T2r),e(j,M2r),e(j,r8),e(r8,zFe),e(zFe,E2r),e(r8,C2r),e(r8,TH),e(TH,w2r),e(r8,A2r),e(j,L2r),e(j,t8),e(t8,QFe),e(QFe,y2r),e(t8,x2r),e(t8,MH),e(MH,$2r),e(t8,k2r),e(j,S2r),e(j,a8),e(a8,WFe),e(WFe,R2r),e(a8,P2r),e(a8,EH),e(EH,B2r),e(a8,I2r),e(j,N2r),e(j,n8),e(n8,HFe),e(HFe,q2r),e(n8,j2r),e(n8,CH),e(CH,D2r),e(n8,G2r),e(j,O2r),e(j,s8),e(s8,UFe),e(UFe,V2r),e(s8,X2r),e(s8,wH),e(wH,z2r),e(s8,Q2r),e(j,W2r),e(j,l8),e(l8,JFe),e(JFe,H2r),e(l8,U2r),e(l8,AH),e(AH,J2r),e(l8,Y2r),e(j,K2r),e(j,i8),e(i8,YFe),e(YFe,Z2r),e(i8,e1r),e(i8,LH),e(LH,o1r),e(i8,r1r),e(j,t1r),e(j,d8),e(d8,KFe),e(KFe,a1r),e(d8,n1r),e(d8,yH),e(yH,s1r),e(d8,l1r),e(j,i1r),e(j,c8),e(c8,ZFe),e(ZFe,d1r),e(c8,c1r),e(c8,xH),e(xH,f1r),e(c8,m1r),e(j,g1r),e(j,f8),e(f8,e6e),e(e6e,h1r),e(f8,p1r),e(f8,$H),e($H,_1r),e(f8,u1r),e(j,b1r),e(j,m8),e(m8,o6e),e(o6e,v1r),e(m8,F1r),e(m8,kH),e(kH,T1r),e(m8,M1r),e(j,E1r),e(j,g8),e(g8,r6e),e(r6e,C1r),e(g8,w1r),e(g8,SH),e(SH,A1r),e(g8,L1r),e(j,y1r),e(j,h8),e(h8,t6e),e(t6e,x1r),e(h8,$1r),e(h8,RH),e(RH,k1r),e(h8,S1r),e(j,R1r),e(j,p8),e(p8,a6e),e(a6e,P1r),e(p8,B1r),e(p8,PH),e(PH,I1r),e(p8,N1r),e(j,q1r),e(j,_8),e(_8,n6e),e(n6e,j1r),e(_8,D1r),e(_8,BH),e(BH,G1r),e(_8,O1r),e(j,V1r),e(j,Ws),e(Ws,s6e),e(s6e,X1r),e(Ws,z1r),e(Ws,IH),e(IH,Q1r),e(Ws,W1r),e(Ws,NH),e(NH,H1r),e(Ws,U1r),e(j,J1r),e(j,u8),e(u8,l6e),e(l6e,Y1r),e(u8,K1r),e(u8,qH),e(qH,Z1r),e(u8,ebr),e(j,obr),e(j,b8),e(b8,i6e),e(i6e,rbr),e(b8,tbr),e(b8,jH),e(jH,abr),e(b8,nbr),e(j,sbr),e(j,v8),e(v8,d6e),e(d6e,lbr),e(v8,ibr),e(v8,DH),e(DH,dbr),e(v8,cbr),e(j,fbr),e(j,F8),e(F8,c6e),e(c6e,mbr),e(F8,gbr),e(F8,GH),e(GH,hbr),e(F8,pbr),e(j,_br),e(j,T8),e(T8,f6e),e(f6e,ubr),e(T8,bbr),e(T8,OH),e(OH,vbr),e(T8,Fbr),e(j,Tbr),e(j,M8),e(M8,m6e),e(m6e,Mbr),e(M8,Ebr),e(M8,VH),e(VH,Cbr),e(M8,wbr),e(j,Abr),e(j,E8),e(E8,g6e),e(g6e,Lbr),e(E8,ybr),e(E8,XH),e(XH,xbr),e(E8,$br),e(j,kbr),e(j,C8),e(C8,h6e),e(h6e,Sbr),e(C8,Rbr),e(C8,zH),e(zH,Pbr),e(C8,Bbr),e(j,Ibr),e(j,w8),e(w8,p6e),e(p6e,Nbr),e(w8,qbr),e(w8,QH),e(QH,jbr),e(w8,Dbr),e(j,Gbr),e(j,A8),e(A8,_6e),e(_6e,Obr),e(A8,Vbr),e(A8,WH),e(WH,Xbr),e(A8,zbr),e(j,Qbr),e(j,L8),e(L8,u6e),e(u6e,Wbr),e(L8,Hbr),e(L8,HH),e(HH,Ubr),e(L8,Jbr),e(j,Ybr),e(j,y8),e(y8,b6e),e(b6e,Kbr),e(y8,Zbr),e(y8,UH),e(UH,evr),e(y8,ovr),e(j,rvr),e(j,x8),e(x8,v6e),e(v6e,tvr),e(x8,avr),e(x8,JH),e(JH,nvr),e(x8,svr),e(j,lvr),e(j,$8),e($8,F6e),e(F6e,ivr),e($8,dvr),e($8,YH),e(YH,cvr),e($8,fvr),e(j,mvr),e(j,k8),e(k8,T6e),e(T6e,gvr),e(k8,hvr),e(k8,KH),e(KH,pvr),e(k8,_vr),e(j,uvr),e(j,S8),e(S8,M6e),e(M6e,bvr),e(S8,vvr),e(S8,ZH),e(ZH,Fvr),e(S8,Tvr),e(j,Mvr),e(j,R8),e(R8,E6e),e(E6e,Evr),e(R8,Cvr),e(R8,eU),e(eU,wvr),e(R8,Avr),e(j,Lvr),e(j,P8),e(P8,C6e),e(C6e,yvr),e(P8,xvr),e(P8,oU),e(oU,$vr),e(P8,kvr),e(j,Svr),e(j,B8),e(B8,w6e),e(w6e,Rvr),e(B8,Pvr),e(B8,rU),e(rU,Bvr),e(B8,Ivr),e(j,Nvr),e(j,I8),e(I8,A6e),e(A6e,qvr),e(I8,jvr),e(I8,tU),e(tU,Dvr),e(I8,Gvr),e(j,Ovr),e(j,N8),e(N8,L6e),e(L6e,Vvr),e(N8,Xvr),e(N8,aU),e(aU,zvr),e(N8,Qvr),e(j,Wvr),e(j,q8),e(q8,y6e),e(y6e,Hvr),e(q8,Uvr),e(q8,nU),e(nU,Jvr),e(q8,Yvr),e(j,Kvr),e(j,j8),e(j8,x6e),e(x6e,Zvr),e(j8,eFr),e(j8,sU),e(sU,oFr),e(j8,rFr),e(j,tFr),e(j,D8),e(D8,$6e),e($6e,aFr),e(D8,nFr),e(D8,lU),e(lU,sFr),e(D8,lFr),e(j,iFr),e(j,G8),e(G8,k6e),e(k6e,dFr),e(G8,cFr),e(G8,iU),e(iU,fFr),e(G8,mFr),e(j,gFr),e(j,O8),e(O8,S6e),e(S6e,hFr),e(O8,pFr),e(O8,dU),e(dU,_Fr),e(O8,uFr),e(j,bFr),e(j,V8),e(V8,R6e),e(R6e,vFr),e(V8,FFr),e(V8,cU),e(cU,TFr),e(V8,MFr),e(j,EFr),e(j,X8),e(X8,P6e),e(P6e,CFr),e(X8,wFr),e(X8,fU),e(fU,AFr),e(X8,LFr),e(j,yFr),e(j,z8),e(z8,B6e),e(B6e,xFr),e(z8,$Fr),e(z8,mU),e(mU,kFr),e(z8,SFr),e(yr,RFr),M(Q8,yr,null),b(f,EVe,u),b(f,ac,u),e(ac,W8),e(W8,I6e),M(L9,I6e,null),e(ac,PFr),e(ac,N6e),e(N6e,BFr),b(f,CVe,u),b(f,or,u),M(y9,or,null),e(or,IFr),e(or,nc),e(nc,NFr),e(nc,gU),e(gU,qFr),e(nc,jFr),e(nc,hU),e(hU,DFr),e(nc,GFr),e(or,OFr),e(or,x9),e(x9,VFr),e(x9,q6e),e(q6e,XFr),e(x9,zFr),e(or,QFr),e(or,kt),M($9,kt,null),e(kt,WFr),e(kt,j6e),e(j6e,HFr),e(kt,UFr),e(kt,sc),e(sc,JFr),e(sc,D6e),e(D6e,YFr),e(sc,KFr),e(sc,pU),e(pU,ZFr),e(sc,e6r),e(kt,o6r),M(H8,kt,null),e(or,r6r),e(or,xr),M(k9,xr,null),e(xr,t6r),e(xr,G6e),e(G6e,a6r),e(xr,n6r),e(xr,nn),e(nn,s6r),e(nn,O6e),e(O6e,l6r),e(nn,i6r),e(nn,V6e),e(V6e,d6r),e(nn,c6r),e(nn,X6e),e(X6e,f6r),e(nn,m6r),e(xr,g6r),e(xr,se),e(se,U8),e(U8,z6e),e(z6e,h6r),e(U8,p6r),e(U8,_U),e(_U,_6r),e(U8,u6r),e(se,b6r),e(se,J8),e(J8,Q6e),e(Q6e,v6r),e(J8,F6r),e(J8,uU),e(uU,T6r),e(J8,M6r),e(se,E6r),e(se,Y8),e(Y8,W6e),e(W6e,C6r),e(Y8,w6r),e(Y8,bU),e(bU,A6r),e(Y8,L6r),e(se,y6r),e(se,K8),e(K8,H6e),e(H6e,x6r),e(K8,$6r),e(K8,vU),e(vU,k6r),e(K8,S6r),e(se,R6r),e(se,Z8),e(Z8,U6e),e(U6e,P6r),e(Z8,B6r),e(Z8,FU),e(FU,I6r),e(Z8,N6r),e(se,q6r),e(se,eM),e(eM,J6e),e(J6e,j6r),e(eM,D6r),e(eM,TU),e(TU,G6r),e(eM,O6r),e(se,V6r),e(se,oM),e(oM,Y6e),e(Y6e,X6r),e(oM,z6r),e(oM,MU),e(MU,Q6r),e(oM,W6r),e(se,H6r),e(se,rM),e(rM,K6e),e(K6e,U6r),e(rM,J6r),e(rM,EU),e(EU,Y6r),e(rM,K6r),e(se,Z6r),e(se,tM),e(tM,Z6e),e(Z6e,eTr),e(tM,oTr),e(tM,CU),e(CU,rTr),e(tM,tTr),e(se,aTr),e(se,aM),e(aM,eTe),e(eTe,nTr),e(aM,sTr),e(aM,wU),e(wU,lTr),e(aM,iTr),e(se,dTr),e(se,nM),e(nM,oTe),e(oTe,cTr),e(nM,fTr),e(nM,AU),e(AU,mTr),e(nM,gTr),e(se,hTr),e(se,sM),e(sM,rTe),e(rTe,pTr),e(sM,_Tr),e(sM,LU),e(LU,uTr),e(sM,bTr),e(se,vTr),e(se,lM),e(lM,tTe),e(tTe,FTr),e(lM,TTr),e(lM,yU),e(yU,MTr),e(lM,ETr),e(se,CTr),e(se,iM),e(iM,aTe),e(aTe,wTr),e(iM,ATr),e(iM,xU),e(xU,LTr),e(iM,yTr),e(se,xTr),e(se,dM),e(dM,nTe),e(nTe,$Tr),e(dM,kTr),e(dM,$U),e($U,STr),e(dM,RTr),e(se,PTr),e(se,cM),e(cM,sTe),e(sTe,BTr),e(cM,ITr),e(cM,kU),e(kU,NTr),e(cM,qTr),e(se,jTr),e(se,fM),e(fM,lTe),e(lTe,DTr),e(fM,GTr),e(fM,SU),e(SU,OTr),e(fM,VTr),e(se,XTr),e(se,mM),e(mM,iTe),e(iTe,zTr),e(mM,QTr),e(mM,RU),e(RU,WTr),e(mM,HTr),e(se,UTr),e(se,gM),e(gM,dTe),e(dTe,JTr),e(gM,YTr),e(gM,PU),e(PU,KTr),e(gM,ZTr),e(se,e7r),e(se,hM),e(hM,cTe),e(cTe,o7r),e(hM,r7r),e(hM,BU),e(BU,t7r),e(hM,a7r),e(se,n7r),e(se,pM),e(pM,fTe),e(fTe,s7r),e(pM,l7r),e(pM,IU),e(IU,i7r),e(pM,d7r),e(se,c7r),e(se,_M),e(_M,mTe),e(mTe,f7r),e(_M,m7r),e(_M,NU),e(NU,g7r),e(_M,h7r),e(se,p7r),e(se,uM),e(uM,gTe),e(gTe,_7r),e(uM,u7r),e(uM,qU),e(qU,b7r),e(uM,v7r),e(xr,F7r),M(bM,xr,null),b(f,wVe,u),b(f,lc,u),e(lc,vM),e(vM,hTe),M(S9,hTe,null),e(lc,T7r),e(lc,pTe),e(pTe,M7r),b(f,AVe,u),b(f,rr,u),M(R9,rr,null),e(rr,E7r),e(rr,ic),e(ic,C7r),e(ic,jU),e(jU,w7r),e(ic,A7r),e(ic,DU),e(DU,L7r),e(ic,y7r),e(rr,x7r),e(rr,P9),e(P9,$7r),e(P9,_Te),e(_Te,k7r),e(P9,S7r),e(rr,R7r),e(rr,St),M(B9,St,null),e(St,P7r),e(St,uTe),e(uTe,B7r),e(St,I7r),e(St,dc),e(dc,N7r),e(dc,bTe),e(bTe,q7r),e(dc,j7r),e(dc,GU),e(GU,D7r),e(dc,G7r),e(St,O7r),M(FM,St,null),e(rr,V7r),e(rr,$r),M(I9,$r,null),e($r,X7r),e($r,vTe),e(vTe,z7r),e($r,Q7r),e($r,sn),e(sn,W7r),e(sn,FTe),e(FTe,H7r),e(sn,U7r),e(sn,TTe),e(TTe,J7r),e(sn,Y7r),e(sn,MTe),e(MTe,K7r),e(sn,Z7r),e($r,e8r),e($r,Me),e(Me,TM),e(TM,ETe),e(ETe,o8r),e(TM,r8r),e(TM,OU),e(OU,t8r),e(TM,a8r),e(Me,n8r),e(Me,MM),e(MM,CTe),e(CTe,s8r),e(MM,l8r),e(MM,VU),e(VU,i8r),e(MM,d8r),e(Me,c8r),e(Me,EM),e(EM,wTe),e(wTe,f8r),e(EM,m8r),e(EM,XU),e(XU,g8r),e(EM,h8r),e(Me,p8r),e(Me,CM),e(CM,ATe),e(ATe,_8r),e(CM,u8r),e(CM,zU),e(zU,b8r),e(CM,v8r),e(Me,F8r),e(Me,wM),e(wM,LTe),e(LTe,T8r),e(wM,M8r),e(wM,QU),e(QU,E8r),e(wM,C8r),e(Me,w8r),e(Me,AM),e(AM,yTe),e(yTe,A8r),e(AM,L8r),e(AM,WU),e(WU,y8r),e(AM,x8r),e(Me,$8r),e(Me,LM),e(LM,xTe),e(xTe,k8r),e(LM,S8r),e(LM,HU),e(HU,R8r),e(LM,P8r),e(Me,B8r),e(Me,yM),e(yM,$Te),e($Te,I8r),e(yM,N8r),e(yM,UU),e(UU,q8r),e(yM,j8r),e(Me,D8r),e(Me,xM),e(xM,kTe),e(kTe,G8r),e(xM,O8r),e(xM,JU),e(JU,V8r),e(xM,X8r),e(Me,z8r),e(Me,$M),e($M,STe),e(STe,Q8r),e($M,W8r),e($M,YU),e(YU,H8r),e($M,U8r),e(Me,J8r),e(Me,kM),e(kM,RTe),e(RTe,Y8r),e(kM,K8r),e(kM,KU),e(KU,Z8r),e(kM,eMr),e(Me,oMr),e(Me,SM),e(SM,PTe),e(PTe,rMr),e(SM,tMr),e(SM,ZU),e(ZU,aMr),e(SM,nMr),e(Me,sMr),e(Me,RM),e(RM,BTe),e(BTe,lMr),e(RM,iMr),e(RM,eJ),e(eJ,dMr),e(RM,cMr),e($r,fMr),M(PM,$r,null),b(f,LVe,u),b(f,cc,u),e(cc,BM),e(BM,ITe),M(N9,ITe,null),e(cc,mMr),e(cc,NTe),e(NTe,gMr),b(f,yVe,u),b(f,tr,u),M(q9,tr,null),e(tr,hMr),e(tr,fc),e(fc,pMr),e(fc,oJ),e(oJ,_Mr),e(fc,uMr),e(fc,rJ),e(rJ,bMr),e(fc,vMr),e(tr,FMr),e(tr,j9),e(j9,TMr),e(j9,qTe),e(qTe,MMr),e(j9,EMr),e(tr,CMr),e(tr,Rt),M(D9,Rt,null),e(Rt,wMr),e(Rt,jTe),e(jTe,AMr),e(Rt,LMr),e(Rt,mc),e(mc,yMr),e(mc,DTe),e(DTe,xMr),e(mc,$Mr),e(mc,tJ),e(tJ,kMr),e(mc,SMr),e(Rt,RMr),M(IM,Rt,null),e(tr,PMr),e(tr,kr),M(G9,kr,null),e(kr,BMr),e(kr,GTe),e(GTe,IMr),e(kr,NMr),e(kr,ln),e(ln,qMr),e(ln,OTe),e(OTe,jMr),e(ln,DMr),e(ln,VTe),e(VTe,GMr),e(ln,OMr),e(ln,XTe),e(XTe,VMr),e(ln,XMr),e(kr,zMr),e(kr,dn),e(dn,NM),e(NM,zTe),e(zTe,QMr),e(NM,WMr),e(NM,aJ),e(aJ,HMr),e(NM,UMr),e(dn,JMr),e(dn,qM),e(qM,QTe),e(QTe,YMr),e(qM,KMr),e(qM,nJ),e(nJ,ZMr),e(qM,eEr),e(dn,oEr),e(dn,jM),e(jM,WTe),e(WTe,rEr),e(jM,tEr),e(jM,sJ),e(sJ,aEr),e(jM,nEr),e(dn,sEr),e(dn,DM),e(DM,HTe),e(HTe,lEr),e(DM,iEr),e(DM,lJ),e(lJ,dEr),e(DM,cEr),e(kr,fEr),M(GM,kr,null),b(f,xVe,u),b(f,gc,u),e(gc,OM),e(OM,UTe),M(O9,UTe,null),e(gc,mEr),e(gc,JTe),e(JTe,gEr),b(f,$Ve,u),b(f,ar,u),M(V9,ar,null),e(ar,hEr),e(ar,hc),e(hc,pEr),e(hc,iJ),e(iJ,_Er),e(hc,uEr),e(hc,dJ),e(dJ,bEr),e(hc,vEr),e(ar,FEr),e(ar,X9),e(X9,TEr),e(X9,YTe),e(YTe,MEr),e(X9,EEr),e(ar,CEr),e(ar,Pt),M(z9,Pt,null),e(Pt,wEr),e(Pt,KTe),e(KTe,AEr),e(Pt,LEr),e(Pt,pc),e(pc,yEr),e(pc,ZTe),e(ZTe,xEr),e(pc,$Er),e(pc,cJ),e(cJ,kEr),e(pc,SEr),e(Pt,REr),M(VM,Pt,null),e(ar,PEr),e(ar,Sr),M(Q9,Sr,null),e(Sr,BEr),e(Sr,e7e),e(e7e,IEr),e(Sr,NEr),e(Sr,cn),e(cn,qEr),e(cn,o7e),e(o7e,jEr),e(cn,DEr),e(cn,r7e),e(r7e,GEr),e(cn,OEr),e(cn,t7e),e(t7e,VEr),e(cn,XEr),e(Sr,zEr),e(Sr,ie),e(ie,XM),e(XM,a7e),e(a7e,QEr),e(XM,WEr),e(XM,fJ),e(fJ,HEr),e(XM,UEr),e(ie,JEr),e(ie,zM),e(zM,n7e),e(n7e,YEr),e(zM,KEr),e(zM,mJ),e(mJ,ZEr),e(zM,e4r),e(ie,o4r),e(ie,QM),e(QM,s7e),e(s7e,r4r),e(QM,t4r),e(QM,gJ),e(gJ,a4r),e(QM,n4r),e(ie,s4r),e(ie,WM),e(WM,l7e),e(l7e,l4r),e(WM,i4r),e(WM,hJ),e(hJ,d4r),e(WM,c4r),e(ie,f4r),e(ie,HM),e(HM,i7e),e(i7e,m4r),e(HM,g4r),e(HM,pJ),e(pJ,h4r),e(HM,p4r),e(ie,_4r),e(ie,UM),e(UM,d7e),e(d7e,u4r),e(UM,b4r),e(UM,_J),e(_J,v4r),e(UM,F4r),e(ie,T4r),e(ie,JM),e(JM,c7e),e(c7e,M4r),e(JM,E4r),e(JM,uJ),e(uJ,C4r),e(JM,w4r),e(ie,A4r),e(ie,YM),e(YM,f7e),e(f7e,L4r),e(YM,y4r),e(YM,bJ),e(bJ,x4r),e(YM,$4r),e(ie,k4r),e(ie,KM),e(KM,m7e),e(m7e,S4r),e(KM,R4r),e(KM,vJ),e(vJ,P4r),e(KM,B4r),e(ie,I4r),e(ie,ZM),e(ZM,g7e),e(g7e,N4r),e(ZM,q4r),e(ZM,FJ),e(FJ,j4r),e(ZM,D4r),e(ie,G4r),e(ie,eE),e(eE,h7e),e(h7e,O4r),e(eE,V4r),e(eE,TJ),e(TJ,X4r),e(eE,z4r),e(ie,Q4r),e(ie,oE),e(oE,p7e),e(p7e,W4r),e(oE,H4r),e(oE,MJ),e(MJ,U4r),e(oE,J4r),e(ie,Y4r),e(ie,rE),e(rE,_7e),e(_7e,K4r),e(rE,Z4r),e(rE,EJ),e(EJ,eCr),e(rE,oCr),e(ie,rCr),e(ie,tE),e(tE,u7e),e(u7e,tCr),e(tE,aCr),e(tE,CJ),e(CJ,nCr),e(tE,sCr),e(ie,lCr),e(ie,aE),e(aE,b7e),e(b7e,iCr),e(aE,dCr),e(aE,wJ),e(wJ,cCr),e(aE,fCr),e(ie,mCr),e(ie,nE),e(nE,v7e),e(v7e,gCr),e(nE,hCr),e(nE,AJ),e(AJ,pCr),e(nE,_Cr),e(ie,uCr),e(ie,sE),e(sE,F7e),e(F7e,bCr),e(sE,vCr),e(sE,LJ),e(LJ,FCr),e(sE,TCr),e(ie,MCr),e(ie,lE),e(lE,T7e),e(T7e,ECr),e(lE,CCr),e(lE,yJ),e(yJ,wCr),e(lE,ACr),e(ie,LCr),e(ie,iE),e(iE,M7e),e(M7e,yCr),e(iE,xCr),e(iE,xJ),e(xJ,$Cr),e(iE,kCr),e(ie,SCr),e(ie,dE),e(dE,E7e),e(E7e,RCr),e(dE,PCr),e(dE,$J),e($J,BCr),e(dE,ICr),e(Sr,NCr),M(cE,Sr,null),b(f,kVe,u),b(f,_c,u),e(_c,fE),e(fE,C7e),M(W9,C7e,null),e(_c,qCr),e(_c,w7e),e(w7e,jCr),b(f,SVe,u),b(f,nr,u),M(H9,nr,null),e(nr,DCr),e(nr,uc),e(uc,GCr),e(uc,kJ),e(kJ,OCr),e(uc,VCr),e(uc,SJ),e(SJ,XCr),e(uc,zCr),e(nr,QCr),e(nr,U9),e(U9,WCr),e(U9,A7e),e(A7e,HCr),e(U9,UCr),e(nr,JCr),e(nr,Bt),M(J9,Bt,null),e(Bt,YCr),e(Bt,L7e),e(L7e,KCr),e(Bt,ZCr),e(Bt,bc),e(bc,e5r),e(bc,y7e),e(y7e,o5r),e(bc,r5r),e(bc,RJ),e(RJ,t5r),e(bc,a5r),e(Bt,n5r),M(mE,Bt,null),e(nr,s5r),e(nr,Rr),M(Y9,Rr,null),e(Rr,l5r),e(Rr,x7e),e(x7e,i5r),e(Rr,d5r),e(Rr,fn),e(fn,c5r),e(fn,$7e),e($7e,f5r),e(fn,m5r),e(fn,k7e),e(k7e,g5r),e(fn,h5r),e(fn,S7e),e(S7e,p5r),e(fn,_5r),e(Rr,u5r),e(Rr,ye),e(ye,gE),e(gE,R7e),e(R7e,b5r),e(gE,v5r),e(gE,PJ),e(PJ,F5r),e(gE,T5r),e(ye,M5r),e(ye,hE),e(hE,P7e),e(P7e,E5r),e(hE,C5r),e(hE,BJ),e(BJ,w5r),e(hE,A5r),e(ye,L5r),e(ye,pE),e(pE,B7e),e(B7e,y5r),e(pE,x5r),e(pE,IJ),e(IJ,$5r),e(pE,k5r),e(ye,S5r),e(ye,_E),e(_E,I7e),e(I7e,R5r),e(_E,P5r),e(_E,NJ),e(NJ,B5r),e(_E,I5r),e(ye,N5r),e(ye,uE),e(uE,N7e),e(N7e,q5r),e(uE,j5r),e(uE,qJ),e(qJ,D5r),e(uE,G5r),e(ye,O5r),e(ye,bE),e(bE,q7e),e(q7e,V5r),e(bE,X5r),e(bE,jJ),e(jJ,z5r),e(bE,Q5r),e(ye,W5r),e(ye,vE),e(vE,j7e),e(j7e,H5r),e(vE,U5r),e(vE,DJ),e(DJ,J5r),e(vE,Y5r),e(ye,K5r),e(ye,FE),e(FE,D7e),e(D7e,Z5r),e(FE,e3r),e(FE,GJ),e(GJ,o3r),e(FE,r3r),e(ye,t3r),e(ye,TE),e(TE,G7e),e(G7e,a3r),e(TE,n3r),e(TE,OJ),e(OJ,s3r),e(TE,l3r),e(ye,i3r),e(ye,ME),e(ME,O7e),e(O7e,d3r),e(ME,c3r),e(ME,VJ),e(VJ,f3r),e(ME,m3r),e(Rr,g3r),M(EE,Rr,null),b(f,RVe,u),b(f,vc,u),e(vc,CE),e(CE,V7e),M(K9,V7e,null),e(vc,h3r),e(vc,X7e),e(X7e,p3r),b(f,PVe,u),b(f,sr,u),M(Z9,sr,null),e(sr,_3r),e(sr,Fc),e(Fc,u3r),e(Fc,XJ),e(XJ,b3r),e(Fc,v3r),e(Fc,zJ),e(zJ,F3r),e(Fc,T3r),e(sr,M3r),e(sr,ex),e(ex,E3r),e(ex,z7e),e(z7e,C3r),e(ex,w3r),e(sr,A3r),e(sr,It),M(ox,It,null),e(It,L3r),e(It,Q7e),e(Q7e,y3r),e(It,x3r),e(It,Tc),e(Tc,$3r),e(Tc,W7e),e(W7e,k3r),e(Tc,S3r),e(Tc,QJ),e(QJ,R3r),e(Tc,P3r),e(It,B3r),M(wE,It,null),e(sr,I3r),e(sr,Pr),M(rx,Pr,null),e(Pr,N3r),e(Pr,H7e),e(H7e,q3r),e(Pr,j3r),e(Pr,mn),e(mn,D3r),e(mn,U7e),e(U7e,G3r),e(mn,O3r),e(mn,J7e),e(J7e,V3r),e(mn,X3r),e(mn,Y7e),e(Y7e,z3r),e(mn,Q3r),e(Pr,W3r),e(Pr,te),e(te,AE),e(AE,K7e),e(K7e,H3r),e(AE,U3r),e(AE,WJ),e(WJ,J3r),e(AE,Y3r),e(te,K3r),e(te,LE),e(LE,Z7e),e(Z7e,Z3r),e(LE,e0r),e(LE,HJ),e(HJ,o0r),e(LE,r0r),e(te,t0r),e(te,yE),e(yE,e8e),e(e8e,a0r),e(yE,n0r),e(yE,UJ),e(UJ,s0r),e(yE,l0r),e(te,i0r),e(te,xE),e(xE,o8e),e(o8e,d0r),e(xE,c0r),e(xE,JJ),e(JJ,f0r),e(xE,m0r),e(te,g0r),e(te,$E),e($E,r8e),e(r8e,h0r),e($E,p0r),e($E,YJ),e(YJ,_0r),e($E,u0r),e(te,b0r),e(te,kE),e(kE,t8e),e(t8e,v0r),e(kE,F0r),e(kE,KJ),e(KJ,T0r),e(kE,M0r),e(te,E0r),e(te,SE),e(SE,a8e),e(a8e,C0r),e(SE,w0r),e(SE,ZJ),e(ZJ,A0r),e(SE,L0r),e(te,y0r),e(te,RE),e(RE,n8e),e(n8e,x0r),e(RE,$0r),e(RE,eY),e(eY,k0r),e(RE,S0r),e(te,R0r),e(te,PE),e(PE,s8e),e(s8e,P0r),e(PE,B0r),e(PE,oY),e(oY,I0r),e(PE,N0r),e(te,q0r),e(te,BE),e(BE,l8e),e(l8e,j0r),e(BE,D0r),e(BE,rY),e(rY,G0r),e(BE,O0r),e(te,V0r),e(te,IE),e(IE,i8e),e(i8e,X0r),e(IE,z0r),e(IE,tY),e(tY,Q0r),e(IE,W0r),e(te,H0r),e(te,NE),e(NE,d8e),e(d8e,U0r),e(NE,J0r),e(NE,aY),e(aY,Y0r),e(NE,K0r),e(te,Z0r),e(te,qE),e(qE,c8e),e(c8e,ewr),e(qE,owr),e(qE,nY),e(nY,rwr),e(qE,twr),e(te,awr),e(te,jE),e(jE,f8e),e(f8e,nwr),e(jE,swr),e(jE,sY),e(sY,lwr),e(jE,iwr),e(te,dwr),e(te,DE),e(DE,m8e),e(m8e,cwr),e(DE,fwr),e(DE,lY),e(lY,mwr),e(DE,gwr),e(te,hwr),e(te,GE),e(GE,g8e),e(g8e,pwr),e(GE,_wr),e(GE,iY),e(iY,uwr),e(GE,bwr),e(te,vwr),e(te,OE),e(OE,h8e),e(h8e,Fwr),e(OE,Twr),e(OE,dY),e(dY,Mwr),e(OE,Ewr),e(te,Cwr),e(te,VE),e(VE,p8e),e(p8e,wwr),e(VE,Awr),e(VE,cY),e(cY,Lwr),e(VE,ywr),e(te,xwr),e(te,XE),e(XE,_8e),e(_8e,$wr),e(XE,kwr),e(XE,fY),e(fY,Swr),e(XE,Rwr),e(te,Pwr),e(te,zE),e(zE,u8e),e(u8e,Bwr),e(zE,Iwr),e(zE,mY),e(mY,Nwr),e(zE,qwr),e(te,jwr),e(te,QE),e(QE,b8e),e(b8e,Dwr),e(QE,Gwr),e(QE,gY),e(gY,Owr),e(QE,Vwr),e(te,Xwr),e(te,WE),e(WE,v8e),e(v8e,zwr),e(WE,Qwr),e(WE,hY),e(hY,Wwr),e(WE,Hwr),e(te,Uwr),e(te,HE),e(HE,F8e),e(F8e,Jwr),e(HE,Ywr),e(HE,pY),e(pY,Kwr),e(HE,Zwr),e(te,eAr),e(te,UE),e(UE,T8e),e(T8e,oAr),e(UE,rAr),e(UE,_Y),e(_Y,tAr),e(UE,aAr),e(te,nAr),e(te,JE),e(JE,M8e),e(M8e,sAr),e(JE,lAr),e(JE,uY),e(uY,iAr),e(JE,dAr),e(te,cAr),e(te,YE),e(YE,E8e),e(E8e,fAr),e(YE,mAr),e(YE,bY),e(bY,gAr),e(YE,hAr),e(Pr,pAr),M(KE,Pr,null),b(f,BVe,u),b(f,Mc,u),e(Mc,ZE),e(ZE,C8e),M(tx,C8e,null),e(Mc,_Ar),e(Mc,w8e),e(w8e,uAr),b(f,IVe,u),b(f,lr,u),M(ax,lr,null),e(lr,bAr),e(lr,Ec),e(Ec,vAr),e(Ec,vY),e(vY,FAr),e(Ec,TAr),e(Ec,FY),e(FY,MAr),e(Ec,EAr),e(lr,CAr),e(lr,nx),e(nx,wAr),e(nx,A8e),e(A8e,AAr),e(nx,LAr),e(lr,yAr),e(lr,Nt),M(sx,Nt,null),e(Nt,xAr),e(Nt,L8e),e(L8e,$Ar),e(Nt,kAr),e(Nt,Cc),e(Cc,SAr),e(Cc,y8e),e(y8e,RAr),e(Cc,PAr),e(Cc,TY),e(TY,BAr),e(Cc,IAr),e(Nt,NAr),M(e4,Nt,null),e(lr,qAr),e(lr,Br),M(lx,Br,null),e(Br,jAr),e(Br,x8e),e(x8e,DAr),e(Br,GAr),e(Br,gn),e(gn,OAr),e(gn,$8e),e($8e,VAr),e(gn,XAr),e(gn,k8e),e(k8e,zAr),e(gn,QAr),e(gn,S8e),e(S8e,WAr),e(gn,HAr),e(Br,UAr),e(Br,_e),e(_e,o4),e(o4,R8e),e(R8e,JAr),e(o4,YAr),e(o4,MY),e(MY,KAr),e(o4,ZAr),e(_e,eLr),e(_e,r4),e(r4,P8e),e(P8e,oLr),e(r4,rLr),e(r4,EY),e(EY,tLr),e(r4,aLr),e(_e,nLr),e(_e,t4),e(t4,B8e),e(B8e,sLr),e(t4,lLr),e(t4,CY),e(CY,iLr),e(t4,dLr),e(_e,cLr),e(_e,a4),e(a4,I8e),e(I8e,fLr),e(a4,mLr),e(a4,wY),e(wY,gLr),e(a4,hLr),e(_e,pLr),e(_e,n4),e(n4,N8e),e(N8e,_Lr),e(n4,uLr),e(n4,AY),e(AY,bLr),e(n4,vLr),e(_e,FLr),e(_e,s4),e(s4,q8e),e(q8e,TLr),e(s4,MLr),e(s4,LY),e(LY,ELr),e(s4,CLr),e(_e,wLr),e(_e,l4),e(l4,j8e),e(j8e,ALr),e(l4,LLr),e(l4,yY),e(yY,yLr),e(l4,xLr),e(_e,$Lr),e(_e,i4),e(i4,D8e),e(D8e,kLr),e(i4,SLr),e(i4,xY),e(xY,RLr),e(i4,PLr),e(_e,BLr),e(_e,d4),e(d4,G8e),e(G8e,ILr),e(d4,NLr),e(d4,$Y),e($Y,qLr),e(d4,jLr),e(_e,DLr),e(_e,c4),e(c4,O8e),e(O8e,GLr),e(c4,OLr),e(c4,kY),e(kY,VLr),e(c4,XLr),e(_e,zLr),e(_e,f4),e(f4,V8e),e(V8e,QLr),e(f4,WLr),e(f4,SY),e(SY,HLr),e(f4,ULr),e(_e,JLr),e(_e,m4),e(m4,X8e),e(X8e,YLr),e(m4,KLr),e(m4,RY),e(RY,ZLr),e(m4,eyr),e(_e,oyr),e(_e,g4),e(g4,z8e),e(z8e,ryr),e(g4,tyr),e(g4,PY),e(PY,ayr),e(g4,nyr),e(_e,syr),e(_e,h4),e(h4,Q8e),e(Q8e,lyr),e(h4,iyr),e(h4,BY),e(BY,dyr),e(h4,cyr),e(_e,fyr),e(_e,p4),e(p4,W8e),e(W8e,myr),e(p4,gyr),e(p4,IY),e(IY,hyr),e(p4,pyr),e(_e,_yr),e(_e,_4),e(_4,H8e),e(H8e,uyr),e(_4,byr),e(_4,NY),e(NY,vyr),e(_4,Fyr),e(_e,Tyr),e(_e,u4),e(u4,U8e),e(U8e,Myr),e(u4,Eyr),e(u4,qY),e(qY,Cyr),e(u4,wyr),e(Br,Ayr),M(b4,Br,null),b(f,NVe,u),b(f,wc,u),e(wc,v4),e(v4,J8e),M(ix,J8e,null),e(wc,Lyr),e(wc,Y8e),e(Y8e,yyr),b(f,qVe,u),b(f,ir,u),M(dx,ir,null),e(ir,xyr),e(ir,Ac),e(Ac,$yr),e(Ac,jY),e(jY,kyr),e(Ac,Syr),e(Ac,DY),e(DY,Ryr),e(Ac,Pyr),e(ir,Byr),e(ir,cx),e(cx,Iyr),e(cx,K8e),e(K8e,Nyr),e(cx,qyr),e(ir,jyr),e(ir,qt),M(fx,qt,null),e(qt,Dyr),e(qt,Z8e),e(Z8e,Gyr),e(qt,Oyr),e(qt,Lc),e(Lc,Vyr),e(Lc,eMe),e(eMe,Xyr),e(Lc,zyr),e(Lc,GY),e(GY,Qyr),e(Lc,Wyr),e(qt,Hyr),M(F4,qt,null),e(ir,Uyr),e(ir,Ir),M(mx,Ir,null),e(Ir,Jyr),e(Ir,oMe),e(oMe,Yyr),e(Ir,Kyr),e(Ir,hn),e(hn,Zyr),e(hn,rMe),e(rMe,e9r),e(hn,o9r),e(hn,tMe),e(tMe,r9r),e(hn,t9r),e(hn,aMe),e(aMe,a9r),e(hn,n9r),e(Ir,s9r),e(Ir,gx),e(gx,T4),e(T4,nMe),e(nMe,l9r),e(T4,i9r),e(T4,OY),e(OY,d9r),e(T4,c9r),e(gx,f9r),e(gx,M4),e(M4,sMe),e(sMe,m9r),e(M4,g9r),e(M4,VY),e(VY,h9r),e(M4,p9r),e(Ir,_9r),M(E4,Ir,null),b(f,jVe,u),b(f,yc,u),e(yc,C4),e(C4,lMe),M(hx,lMe,null),e(yc,u9r),e(yc,iMe),e(iMe,b9r),b(f,DVe,u),b(f,dr,u),M(px,dr,null),e(dr,v9r),e(dr,xc),e(xc,F9r),e(xc,XY),e(XY,T9r),e(xc,M9r),e(xc,zY),e(zY,E9r),e(xc,C9r),e(dr,w9r),e(dr,_x),e(_x,A9r),e(_x,dMe),e(dMe,L9r),e(_x,y9r),e(dr,x9r),e(dr,jt),M(ux,jt,null),e(jt,$9r),e(jt,cMe),e(cMe,k9r),e(jt,S9r),e(jt,$c),e($c,R9r),e($c,fMe),e(fMe,P9r),e($c,B9r),e($c,QY),e(QY,I9r),e($c,N9r),e(jt,q9r),M(w4,jt,null),e(dr,j9r),e(dr,Nr),M(bx,Nr,null),e(Nr,D9r),e(Nr,mMe),e(mMe,G9r),e(Nr,O9r),e(Nr,pn),e(pn,V9r),e(pn,gMe),e(gMe,X9r),e(pn,z9r),e(pn,hMe),e(hMe,Q9r),e(pn,W9r),e(pn,pMe),e(pMe,H9r),e(pn,U9r),e(Nr,J9r),e(Nr,_Me),e(_Me,A4),e(A4,uMe),e(uMe,Y9r),e(A4,K9r),e(A4,WY),e(WY,Z9r),e(A4,exr),e(Nr,oxr),M(L4,Nr,null),b(f,GVe,u),b(f,kc,u),e(kc,y4),e(y4,bMe),M(vx,bMe,null),e(kc,rxr),e(kc,vMe),e(vMe,txr),b(f,OVe,u),b(f,cr,u),M(Fx,cr,null),e(cr,axr),e(cr,Sc),e(Sc,nxr),e(Sc,HY),e(HY,sxr),e(Sc,lxr),e(Sc,UY),e(UY,ixr),e(Sc,dxr),e(cr,cxr),e(cr,Tx),e(Tx,fxr),e(Tx,FMe),e(FMe,mxr),e(Tx,gxr),e(cr,hxr),e(cr,Dt),M(Mx,Dt,null),e(Dt,pxr),e(Dt,TMe),e(TMe,_xr),e(Dt,uxr),e(Dt,Rc),e(Rc,bxr),e(Rc,MMe),e(MMe,vxr),e(Rc,Fxr),e(Rc,JY),e(JY,Txr),e(Rc,Mxr),e(Dt,Exr),M(x4,Dt,null),e(cr,Cxr),e(cr,qr),M(Ex,qr,null),e(qr,wxr),e(qr,EMe),e(EMe,Axr),e(qr,Lxr),e(qr,_n),e(_n,yxr),e(_n,CMe),e(CMe,xxr),e(_n,$xr),e(_n,wMe),e(wMe,kxr),e(_n,Sxr),e(_n,AMe),e(AMe,Rxr),e(_n,Pxr),e(qr,Bxr),e(qr,de),e(de,$4),e($4,LMe),e(LMe,Ixr),e($4,Nxr),e($4,YY),e(YY,qxr),e($4,jxr),e(de,Dxr),e(de,k4),e(k4,yMe),e(yMe,Gxr),e(k4,Oxr),e(k4,KY),e(KY,Vxr),e(k4,Xxr),e(de,zxr),e(de,S4),e(S4,xMe),e(xMe,Qxr),e(S4,Wxr),e(S4,ZY),e(ZY,Hxr),e(S4,Uxr),e(de,Jxr),e(de,R4),e(R4,$Me),e($Me,Yxr),e(R4,Kxr),e(R4,eK),e(eK,Zxr),e(R4,e$r),e(de,o$r),e(de,P4),e(P4,kMe),e(kMe,r$r),e(P4,t$r),e(P4,oK),e(oK,a$r),e(P4,n$r),e(de,s$r),e(de,B4),e(B4,SMe),e(SMe,l$r),e(B4,i$r),e(B4,rK),e(rK,d$r),e(B4,c$r),e(de,f$r),e(de,I4),e(I4,RMe),e(RMe,m$r),e(I4,g$r),e(I4,tK),e(tK,h$r),e(I4,p$r),e(de,_$r),e(de,N4),e(N4,PMe),e(PMe,u$r),e(N4,b$r),e(N4,aK),e(aK,v$r),e(N4,F$r),e(de,T$r),e(de,q4),e(q4,BMe),e(BMe,M$r),e(q4,E$r),e(q4,nK),e(nK,C$r),e(q4,w$r),e(de,A$r),e(de,j4),e(j4,IMe),e(IMe,L$r),e(j4,y$r),e(j4,sK),e(sK,x$r),e(j4,$$r),e(de,k$r),e(de,D4),e(D4,NMe),e(NMe,S$r),e(D4,R$r),e(D4,lK),e(lK,P$r),e(D4,B$r),e(de,I$r),e(de,G4),e(G4,qMe),e(qMe,N$r),e(G4,q$r),e(G4,iK),e(iK,j$r),e(G4,D$r),e(de,G$r),e(de,O4),e(O4,jMe),e(jMe,O$r),e(O4,V$r),e(O4,dK),e(dK,X$r),e(O4,z$r),e(de,Q$r),e(de,V4),e(V4,DMe),e(DMe,W$r),e(V4,H$r),e(V4,cK),e(cK,U$r),e(V4,J$r),e(de,Y$r),e(de,X4),e(X4,GMe),e(GMe,K$r),e(X4,Z$r),e(X4,fK),e(fK,ekr),e(X4,okr),e(de,rkr),e(de,z4),e(z4,OMe),e(OMe,tkr),e(z4,akr),e(z4,mK),e(mK,nkr),e(z4,skr),e(de,lkr),e(de,Q4),e(Q4,VMe),e(VMe,ikr),e(Q4,dkr),e(Q4,gK),e(gK,ckr),e(Q4,fkr),e(de,mkr),e(de,W4),e(W4,XMe),e(XMe,gkr),e(W4,hkr),e(W4,hK),e(hK,pkr),e(W4,_kr),e(de,ukr),e(de,H4),e(H4,zMe),e(zMe,bkr),e(H4,vkr),e(H4,pK),e(pK,Fkr),e(H4,Tkr),e(de,Mkr),e(de,U4),e(U4,QMe),e(QMe,Ekr),e(U4,Ckr),e(U4,_K),e(_K,wkr),e(U4,Akr),e(qr,Lkr),M(J4,qr,null),b(f,VVe,u),b(f,Pc,u),e(Pc,Y4),e(Y4,WMe),M(Cx,WMe,null),e(Pc,ykr),e(Pc,HMe),e(HMe,xkr),b(f,XVe,u),b(f,fr,u),M(wx,fr,null),e(fr,$kr),e(fr,Bc),e(Bc,kkr),e(Bc,uK),e(uK,Skr),e(Bc,Rkr),e(Bc,bK),e(bK,Pkr),e(Bc,Bkr),e(fr,Ikr),e(fr,Ax),e(Ax,Nkr),e(Ax,UMe),e(UMe,qkr),e(Ax,jkr),e(fr,Dkr),e(fr,Gt),M(Lx,Gt,null),e(Gt,Gkr),e(Gt,JMe),e(JMe,Okr),e(Gt,Vkr),e(Gt,Ic),e(Ic,Xkr),e(Ic,YMe),e(YMe,zkr),e(Ic,Qkr),e(Ic,vK),e(vK,Wkr),e(Ic,Hkr),e(Gt,Ukr),M(K4,Gt,null),e(fr,Jkr),e(fr,jr),M(yx,jr,null),e(jr,Ykr),e(jr,KMe),e(KMe,Kkr),e(jr,Zkr),e(jr,un),e(un,eSr),e(un,ZMe),e(ZMe,oSr),e(un,rSr),e(un,eEe),e(eEe,tSr),e(un,aSr),e(un,oEe),e(oEe,nSr),e(un,sSr),e(jr,lSr),e(jr,ce),e(ce,Z4),e(Z4,rEe),e(rEe,iSr),e(Z4,dSr),e(Z4,FK),e(FK,cSr),e(Z4,fSr),e(ce,mSr),e(ce,eC),e(eC,tEe),e(tEe,gSr),e(eC,hSr),e(eC,TK),e(TK,pSr),e(eC,_Sr),e(ce,uSr),e(ce,oC),e(oC,aEe),e(aEe,bSr),e(oC,vSr),e(oC,MK),e(MK,FSr),e(oC,TSr),e(ce,MSr),e(ce,rC),e(rC,nEe),e(nEe,ESr),e(rC,CSr),e(rC,EK),e(EK,wSr),e(rC,ASr),e(ce,LSr),e(ce,tC),e(tC,sEe),e(sEe,ySr),e(tC,xSr),e(tC,CK),e(CK,$Sr),e(tC,kSr),e(ce,SSr),e(ce,aC),e(aC,lEe),e(lEe,RSr),e(aC,PSr),e(aC,wK),e(wK,BSr),e(aC,ISr),e(ce,NSr),e(ce,nC),e(nC,iEe),e(iEe,qSr),e(nC,jSr),e(nC,AK),e(AK,DSr),e(nC,GSr),e(ce,OSr),e(ce,sC),e(sC,dEe),e(dEe,VSr),e(sC,XSr),e(sC,LK),e(LK,zSr),e(sC,QSr),e(ce,WSr),e(ce,lC),e(lC,cEe),e(cEe,HSr),e(lC,USr),e(lC,yK),e(yK,JSr),e(lC,YSr),e(ce,KSr),e(ce,iC),e(iC,fEe),e(fEe,ZSr),e(iC,eRr),e(iC,xK),e(xK,oRr),e(iC,rRr),e(ce,tRr),e(ce,dC),e(dC,mEe),e(mEe,aRr),e(dC,nRr),e(dC,$K),e($K,sRr),e(dC,lRr),e(ce,iRr),e(ce,cC),e(cC,gEe),e(gEe,dRr),e(cC,cRr),e(cC,kK),e(kK,fRr),e(cC,mRr),e(ce,gRr),e(ce,fC),e(fC,hEe),e(hEe,hRr),e(fC,pRr),e(fC,SK),e(SK,_Rr),e(fC,uRr),e(ce,bRr),e(ce,mC),e(mC,pEe),e(pEe,vRr),e(mC,FRr),e(mC,RK),e(RK,TRr),e(mC,MRr),e(ce,ERr),e(ce,gC),e(gC,_Ee),e(_Ee,CRr),e(gC,wRr),e(gC,PK),e(PK,ARr),e(gC,LRr),e(ce,yRr),e(ce,hC),e(hC,uEe),e(uEe,xRr),e(hC,$Rr),e(hC,BK),e(BK,kRr),e(hC,SRr),e(ce,RRr),e(ce,pC),e(pC,bEe),e(bEe,PRr),e(pC,BRr),e(pC,IK),e(IK,IRr),e(pC,NRr),e(ce,qRr),e(ce,_C),e(_C,vEe),e(vEe,jRr),e(_C,DRr),e(_C,NK),e(NK,GRr),e(_C,ORr),e(ce,VRr),e(ce,uC),e(uC,FEe),e(FEe,XRr),e(uC,zRr),e(uC,qK),e(qK,QRr),e(uC,WRr),e(ce,HRr),e(ce,bC),e(bC,TEe),e(TEe,URr),e(bC,JRr),e(bC,jK),e(jK,YRr),e(bC,KRr),e(jr,ZRr),M(vC,jr,null),b(f,zVe,u),b(f,Nc,u),e(Nc,FC),e(FC,MEe),M(xx,MEe,null),e(Nc,ePr),e(Nc,EEe),e(EEe,oPr),b(f,QVe,u),b(f,mr,u),M($x,mr,null),e(mr,rPr),e(mr,qc),e(qc,tPr),e(qc,DK),e(DK,aPr),e(qc,nPr),e(qc,GK),e(GK,sPr),e(qc,lPr),e(mr,iPr),e(mr,kx),e(kx,dPr),e(kx,CEe),e(CEe,cPr),e(kx,fPr),e(mr,mPr),e(mr,Ot),M(Sx,Ot,null),e(Ot,gPr),e(Ot,wEe),e(wEe,hPr),e(Ot,pPr),e(Ot,jc),e(jc,_Pr),e(jc,AEe),e(AEe,uPr),e(jc,bPr),e(jc,OK),e(OK,vPr),e(jc,FPr),e(Ot,TPr),M(TC,Ot,null),e(mr,MPr),e(mr,Dr),M(Rx,Dr,null),e(Dr,EPr),e(Dr,LEe),e(LEe,CPr),e(Dr,wPr),e(Dr,bn),e(bn,APr),e(bn,yEe),e(yEe,LPr),e(bn,yPr),e(bn,xEe),e(xEe,xPr),e(bn,$Pr),e(bn,$Ee),e($Ee,kPr),e(bn,SPr),e(Dr,RPr),e(Dr,kEe),e(kEe,MC),e(MC,SEe),e(SEe,PPr),e(MC,BPr),e(MC,VK),e(VK,IPr),e(MC,NPr),e(Dr,qPr),M(EC,Dr,null),b(f,WVe,u),b(f,Dc,u),e(Dc,CC),e(CC,REe),M(Px,REe,null),e(Dc,jPr),e(Dc,PEe),e(PEe,DPr),b(f,HVe,u),b(f,gr,u),M(Bx,gr,null),e(gr,GPr),e(gr,Gc),e(Gc,OPr),e(Gc,XK),e(XK,VPr),e(Gc,XPr),e(Gc,zK),e(zK,zPr),e(Gc,QPr),e(gr,WPr),e(gr,Ix),e(Ix,HPr),e(Ix,BEe),e(BEe,UPr),e(Ix,JPr),e(gr,YPr),e(gr,Vt),M(Nx,Vt,null),e(Vt,KPr),e(Vt,IEe),e(IEe,ZPr),e(Vt,eBr),e(Vt,Oc),e(Oc,oBr),e(Oc,NEe),e(NEe,rBr),e(Oc,tBr),e(Oc,QK),e(QK,aBr),e(Oc,nBr),e(Vt,sBr),M(wC,Vt,null),e(gr,lBr),e(gr,Gr),M(qx,Gr,null),e(Gr,iBr),e(Gr,qEe),e(qEe,dBr),e(Gr,cBr),e(Gr,vn),e(vn,fBr),e(vn,jEe),e(jEe,mBr),e(vn,gBr),e(vn,DEe),e(DEe,hBr),e(vn,pBr),e(vn,GEe),e(GEe,_Br),e(vn,uBr),e(Gr,bBr),e(Gr,OEe),e(OEe,AC),e(AC,VEe),e(VEe,vBr),e(AC,FBr),e(AC,WK),e(WK,TBr),e(AC,MBr),e(Gr,EBr),M(LC,Gr,null),b(f,UVe,u),b(f,Vc,u),e(Vc,yC),e(yC,XEe),M(jx,XEe,null),e(Vc,CBr),e(Vc,zEe),e(zEe,wBr),b(f,JVe,u),b(f,hr,u),M(Dx,hr,null),e(hr,ABr),e(hr,Xc),e(Xc,LBr),e(Xc,HK),e(HK,yBr),e(Xc,xBr),e(Xc,UK),e(UK,$Br),e(Xc,kBr),e(hr,SBr),e(hr,Gx),e(Gx,RBr),e(Gx,QEe),e(QEe,PBr),e(Gx,BBr),e(hr,IBr),e(hr,Xt),M(Ox,Xt,null),e(Xt,NBr),e(Xt,WEe),e(WEe,qBr),e(Xt,jBr),e(Xt,zc),e(zc,DBr),e(zc,HEe),e(HEe,GBr),e(zc,OBr),e(zc,JK),e(JK,VBr),e(zc,XBr),e(Xt,zBr),M(xC,Xt,null),e(hr,QBr),e(hr,Or),M(Vx,Or,null),e(Or,WBr),e(Or,UEe),e(UEe,HBr),e(Or,UBr),e(Or,Fn),e(Fn,JBr),e(Fn,JEe),e(JEe,YBr),e(Fn,KBr),e(Fn,YEe),e(YEe,ZBr),e(Fn,eIr),e(Fn,KEe),e(KEe,oIr),e(Fn,rIr),e(Or,tIr),e(Or,oe),e(oe,$C),e($C,ZEe),e(ZEe,aIr),e($C,nIr),e($C,YK),e(YK,sIr),e($C,lIr),e(oe,iIr),e(oe,kC),e(kC,e4e),e(e4e,dIr),e(kC,cIr),e(kC,KK),e(KK,fIr),e(kC,mIr),e(oe,gIr),e(oe,SC),e(SC,o4e),e(o4e,hIr),e(SC,pIr),e(SC,ZK),e(ZK,_Ir),e(SC,uIr),e(oe,bIr),e(oe,RC),e(RC,r4e),e(r4e,vIr),e(RC,FIr),e(RC,eZ),e(eZ,TIr),e(RC,MIr),e(oe,EIr),e(oe,PC),e(PC,t4e),e(t4e,CIr),e(PC,wIr),e(PC,oZ),e(oZ,AIr),e(PC,LIr),e(oe,yIr),e(oe,BC),e(BC,a4e),e(a4e,xIr),e(BC,$Ir),e(BC,rZ),e(rZ,kIr),e(BC,SIr),e(oe,RIr),e(oe,IC),e(IC,n4e),e(n4e,PIr),e(IC,BIr),e(IC,tZ),e(tZ,IIr),e(IC,NIr),e(oe,qIr),e(oe,NC),e(NC,s4e),e(s4e,jIr),e(NC,DIr),e(NC,aZ),e(aZ,GIr),e(NC,OIr),e(oe,VIr),e(oe,qC),e(qC,l4e),e(l4e,XIr),e(qC,zIr),e(qC,nZ),e(nZ,QIr),e(qC,WIr),e(oe,HIr),e(oe,jC),e(jC,i4e),e(i4e,UIr),e(jC,JIr),e(jC,sZ),e(sZ,YIr),e(jC,KIr),e(oe,ZIr),e(oe,DC),e(DC,d4e),e(d4e,eNr),e(DC,oNr),e(DC,lZ),e(lZ,rNr),e(DC,tNr),e(oe,aNr),e(oe,GC),e(GC,c4e),e(c4e,nNr),e(GC,sNr),e(GC,iZ),e(iZ,lNr),e(GC,iNr),e(oe,dNr),e(oe,OC),e(OC,f4e),e(f4e,cNr),e(OC,fNr),e(OC,dZ),e(dZ,mNr),e(OC,gNr),e(oe,hNr),e(oe,VC),e(VC,m4e),e(m4e,pNr),e(VC,_Nr),e(VC,cZ),e(cZ,uNr),e(VC,bNr),e(oe,vNr),e(oe,XC),e(XC,g4e),e(g4e,FNr),e(XC,TNr),e(XC,fZ),e(fZ,MNr),e(XC,ENr),e(oe,CNr),e(oe,zC),e(zC,h4e),e(h4e,wNr),e(zC,ANr),e(zC,mZ),e(mZ,LNr),e(zC,yNr),e(oe,xNr),e(oe,QC),e(QC,p4e),e(p4e,$Nr),e(QC,kNr),e(QC,gZ),e(gZ,SNr),e(QC,RNr),e(oe,PNr),e(oe,WC),e(WC,_4e),e(_4e,BNr),e(WC,INr),e(WC,hZ),e(hZ,NNr),e(WC,qNr),e(oe,jNr),e(oe,HC),e(HC,u4e),e(u4e,DNr),e(HC,GNr),e(HC,pZ),e(pZ,ONr),e(HC,VNr),e(oe,XNr),e(oe,UC),e(UC,b4e),e(b4e,zNr),e(UC,QNr),e(UC,_Z),e(_Z,WNr),e(UC,HNr),e(oe,UNr),e(oe,JC),e(JC,v4e),e(v4e,JNr),e(JC,YNr),e(JC,uZ),e(uZ,KNr),e(JC,ZNr),e(oe,eqr),e(oe,YC),e(YC,F4e),e(F4e,oqr),e(YC,rqr),e(YC,bZ),e(bZ,tqr),e(YC,aqr),e(oe,nqr),e(oe,KC),e(KC,T4e),e(T4e,sqr),e(KC,lqr),e(KC,vZ),e(vZ,iqr),e(KC,dqr),e(oe,cqr),e(oe,ZC),e(ZC,M4e),e(M4e,fqr),e(ZC,mqr),e(ZC,FZ),e(FZ,gqr),e(ZC,hqr),e(oe,pqr),e(oe,e5),e(e5,E4e),e(E4e,_qr),e(e5,uqr),e(e5,TZ),e(TZ,bqr),e(e5,vqr),e(oe,Fqr),e(oe,o5),e(o5,C4e),e(C4e,Tqr),e(o5,Mqr),e(o5,MZ),e(MZ,Eqr),e(o5,Cqr),e(oe,wqr),e(oe,r5),e(r5,w4e),e(w4e,Aqr),e(r5,Lqr),e(r5,EZ),e(EZ,yqr),e(r5,xqr),e(Or,$qr),M(t5,Or,null),b(f,YVe,u),b(f,Qc,u),e(Qc,a5),e(a5,A4e),M(Xx,A4e,null),e(Qc,kqr),e(Qc,L4e),e(L4e,Sqr),b(f,KVe,u),b(f,pr,u),M(zx,pr,null),e(pr,Rqr),e(pr,Wc),e(Wc,Pqr),e(Wc,CZ),e(CZ,Bqr),e(Wc,Iqr),e(Wc,wZ),e(wZ,Nqr),e(Wc,qqr),e(pr,jqr),e(pr,Qx),e(Qx,Dqr),e(Qx,y4e),e(y4e,Gqr),e(Qx,Oqr),e(pr,Vqr),e(pr,zt),M(Wx,zt,null),e(zt,Xqr),e(zt,x4e),e(x4e,zqr),e(zt,Qqr),e(zt,Hc),e(Hc,Wqr),e(Hc,$4e),e($4e,Hqr),e(Hc,Uqr),e(Hc,AZ),e(AZ,Jqr),e(Hc,Yqr),e(zt,Kqr),M(n5,zt,null),e(pr,Zqr),e(pr,Vr),M(Hx,Vr,null),e(Vr,ejr),e(Vr,k4e),e(k4e,ojr),e(Vr,rjr),e(Vr,Tn),e(Tn,tjr),e(Tn,S4e),e(S4e,ajr),e(Tn,njr),e(Tn,R4e),e(R4e,sjr),e(Tn,ljr),e(Tn,P4e),e(P4e,ijr),e(Tn,djr),e(Vr,cjr),e(Vr,xe),e(xe,s5),e(s5,B4e),e(B4e,fjr),e(s5,mjr),e(s5,LZ),e(LZ,gjr),e(s5,hjr),e(xe,pjr),e(xe,l5),e(l5,I4e),e(I4e,_jr),e(l5,ujr),e(l5,yZ),e(yZ,bjr),e(l5,vjr),e(xe,Fjr),e(xe,i5),e(i5,N4e),e(N4e,Tjr),e(i5,Mjr),e(i5,xZ),e(xZ,Ejr),e(i5,Cjr),e(xe,wjr),e(xe,d5),e(d5,q4e),e(q4e,Ajr),e(d5,Ljr),e(d5,$Z),e($Z,yjr),e(d5,xjr),e(xe,$jr),e(xe,c5),e(c5,j4e),e(j4e,kjr),e(c5,Sjr),e(c5,kZ),e(kZ,Rjr),e(c5,Pjr),e(xe,Bjr),e(xe,f5),e(f5,D4e),e(D4e,Ijr),e(f5,Njr),e(f5,SZ),e(SZ,qjr),e(f5,jjr),e(xe,Djr),e(xe,m5),e(m5,G4e),e(G4e,Gjr),e(m5,Ojr),e(m5,RZ),e(RZ,Vjr),e(m5,Xjr),e(xe,zjr),e(xe,g5),e(g5,O4e),e(O4e,Qjr),e(g5,Wjr),e(g5,PZ),e(PZ,Hjr),e(g5,Ujr),e(xe,Jjr),e(xe,h5),e(h5,V4e),e(V4e,Yjr),e(h5,Kjr),e(h5,BZ),e(BZ,Zjr),e(h5,eDr),e(xe,oDr),e(xe,p5),e(p5,X4e),e(X4e,rDr),e(p5,tDr),e(p5,IZ),e(IZ,aDr),e(p5,nDr),e(Vr,sDr),M(_5,Vr,null),b(f,ZVe,u),b(f,Uc,u),e(Uc,u5),e(u5,z4e),M(Ux,z4e,null),e(Uc,lDr),e(Uc,Q4e),e(Q4e,iDr),b(f,eXe,u),b(f,_r,u),M(Jx,_r,null),e(_r,dDr),e(_r,Jc),e(Jc,cDr),e(Jc,NZ),e(NZ,fDr),e(Jc,mDr),e(Jc,qZ),e(qZ,gDr),e(Jc,hDr),e(_r,pDr),e(_r,Yx),e(Yx,_Dr),e(Yx,W4e),e(W4e,uDr),e(Yx,bDr),e(_r,vDr),e(_r,Qt),M(Kx,Qt,null),e(Qt,FDr),e(Qt,H4e),e(H4e,TDr),e(Qt,MDr),e(Qt,Yc),e(Yc,EDr),e(Yc,U4e),e(U4e,CDr),e(Yc,wDr),e(Yc,jZ),e(jZ,ADr),e(Yc,LDr),e(Qt,yDr),M(b5,Qt,null),e(_r,xDr),e(_r,Xr),M(Zx,Xr,null),e(Xr,$Dr),e(Xr,J4e),e(J4e,kDr),e(Xr,SDr),e(Xr,Mn),e(Mn,RDr),e(Mn,Y4e),e(Y4e,PDr),e(Mn,BDr),e(Mn,K4e),e(K4e,IDr),e(Mn,NDr),e(Mn,Z4e),e(Z4e,qDr),e(Mn,jDr),e(Xr,DDr),e(Xr,Ee),e(Ee,v5),e(v5,eCe),e(eCe,GDr),e(v5,ODr),e(v5,DZ),e(DZ,VDr),e(v5,XDr),e(Ee,zDr),e(Ee,F5),e(F5,oCe),e(oCe,QDr),e(F5,WDr),e(F5,GZ),e(GZ,HDr),e(F5,UDr),e(Ee,JDr),e(Ee,T5),e(T5,rCe),e(rCe,YDr),e(T5,KDr),e(T5,OZ),e(OZ,ZDr),e(T5,eGr),e(Ee,oGr),e(Ee,M5),e(M5,tCe),e(tCe,rGr),e(M5,tGr),e(M5,VZ),e(VZ,aGr),e(M5,nGr),e(Ee,sGr),e(Ee,E5),e(E5,aCe),e(aCe,lGr),e(E5,iGr),e(E5,XZ),e(XZ,dGr),e(E5,cGr),e(Ee,fGr),e(Ee,C5),e(C5,nCe),e(nCe,mGr),e(C5,gGr),e(C5,zZ),e(zZ,hGr),e(C5,pGr),e(Ee,_Gr),e(Ee,w5),e(w5,sCe),e(sCe,uGr),e(w5,bGr),e(w5,QZ),e(QZ,vGr),e(w5,FGr),e(Ee,TGr),e(Ee,A5),e(A5,lCe),e(lCe,MGr),e(A5,EGr),e(A5,WZ),e(WZ,CGr),e(A5,wGr),e(Ee,AGr),e(Ee,L5),e(L5,iCe),e(iCe,LGr),e(L5,yGr),e(L5,HZ),e(HZ,xGr),e(L5,$Gr),e(Ee,kGr),e(Ee,y5),e(y5,dCe),e(dCe,SGr),e(y5,RGr),e(y5,UZ),e(UZ,PGr),e(y5,BGr),e(Ee,IGr),e(Ee,x5),e(x5,cCe),e(cCe,NGr),e(x5,qGr),e(x5,JZ),e(JZ,jGr),e(x5,DGr),e(Ee,GGr),e(Ee,$5),e($5,fCe),e(fCe,OGr),e($5,VGr),e($5,YZ),e(YZ,XGr),e($5,zGr),e(Ee,QGr),e(Ee,k5),e(k5,mCe),e(mCe,WGr),e(k5,HGr),e(k5,KZ),e(KZ,UGr),e(k5,JGr),e(Xr,YGr),M(S5,Xr,null),b(f,oXe,u),b(f,Kc,u),e(Kc,R5),e(R5,gCe),M(e$,gCe,null),e(Kc,KGr),e(Kc,hCe),e(hCe,ZGr),b(f,rXe,u),b(f,ur,u),M(o$,ur,null),e(ur,eOr),e(ur,Zc),e(Zc,oOr),e(Zc,ZZ),e(ZZ,rOr),e(Zc,tOr),e(Zc,eee),e(eee,aOr),e(Zc,nOr),e(ur,sOr),e(ur,r$),e(r$,lOr),e(r$,pCe),e(pCe,iOr),e(r$,dOr),e(ur,cOr),e(ur,Wt),M(t$,Wt,null),e(Wt,fOr),e(Wt,_Ce),e(_Ce,mOr),e(Wt,gOr),e(Wt,ef),e(ef,hOr),e(ef,uCe),e(uCe,pOr),e(ef,_Or),e(ef,oee),e(oee,uOr),e(ef,bOr),e(Wt,vOr),M(P5,Wt,null),e(ur,FOr),e(ur,zr),M(a$,zr,null),e(zr,TOr),e(zr,bCe),e(bCe,MOr),e(zr,EOr),e(zr,En),e(En,COr),e(En,vCe),e(vCe,wOr),e(En,AOr),e(En,FCe),e(FCe,LOr),e(En,yOr),e(En,TCe),e(TCe,xOr),e(En,$Or),e(zr,kOr),e(zr,$e),e($e,B5),e(B5,MCe),e(MCe,SOr),e(B5,ROr),e(B5,ree),e(ree,POr),e(B5,BOr),e($e,IOr),e($e,I5),e(I5,ECe),e(ECe,NOr),e(I5,qOr),e(I5,tee),e(tee,jOr),e(I5,DOr),e($e,GOr),e($e,N5),e(N5,CCe),e(CCe,OOr),e(N5,VOr),e(N5,aee),e(aee,XOr),e(N5,zOr),e($e,QOr),e($e,q5),e(q5,wCe),e(wCe,WOr),e(q5,HOr),e(q5,nee),e(nee,UOr),e(q5,JOr),e($e,YOr),e($e,j5),e(j5,ACe),e(ACe,KOr),e(j5,ZOr),e(j5,see),e(see,eVr),e(j5,oVr),e($e,rVr),e($e,D5),e(D5,LCe),e(LCe,tVr),e(D5,aVr),e(D5,lee),e(lee,nVr),e(D5,sVr),e($e,lVr),e($e,G5),e(G5,yCe),e(yCe,iVr),e(G5,dVr),e(G5,iee),e(iee,cVr),e(G5,fVr),e($e,mVr),e($e,O5),e(O5,xCe),e(xCe,gVr),e(O5,hVr),e(O5,dee),e(dee,pVr),e(O5,_Vr),e($e,uVr),e($e,V5),e(V5,$Ce),e($Ce,bVr),e(V5,vVr),e(V5,cee),e(cee,FVr),e(V5,TVr),e($e,MVr),e($e,X5),e(X5,kCe),e(kCe,EVr),e(X5,CVr),e(X5,fee),e(fee,wVr),e(X5,AVr),e(zr,LVr),M(z5,zr,null),b(f,tXe,u),b(f,of,u),e(of,Q5),e(Q5,SCe),M(n$,SCe,null),e(of,yVr),e(of,RCe),e(RCe,xVr),b(f,aXe,u),b(f,br,u),M(s$,br,null),e(br,$Vr),e(br,rf),e(rf,kVr),e(rf,mee),e(mee,SVr),e(rf,RVr),e(rf,gee),e(gee,PVr),e(rf,BVr),e(br,IVr),e(br,l$),e(l$,NVr),e(l$,PCe),e(PCe,qVr),e(l$,jVr),e(br,DVr),e(br,Ht),M(i$,Ht,null),e(Ht,GVr),e(Ht,BCe),e(BCe,OVr),e(Ht,VVr),e(Ht,tf),e(tf,XVr),e(tf,ICe),e(ICe,zVr),e(tf,QVr),e(tf,hee),e(hee,WVr),e(tf,HVr),e(Ht,UVr),M(W5,Ht,null),e(br,JVr),e(br,Qr),M(d$,Qr,null),e(Qr,YVr),e(Qr,NCe),e(NCe,KVr),e(Qr,ZVr),e(Qr,Cn),e(Cn,eXr),e(Cn,qCe),e(qCe,oXr),e(Cn,rXr),e(Cn,jCe),e(jCe,tXr),e(Cn,aXr),e(Cn,DCe),e(DCe,nXr),e(Cn,sXr),e(Qr,lXr),e(Qr,ke),e(ke,H5),e(H5,GCe),e(GCe,iXr),e(H5,dXr),e(H5,pee),e(pee,cXr),e(H5,fXr),e(ke,mXr),e(ke,U5),e(U5,OCe),e(OCe,gXr),e(U5,hXr),e(U5,_ee),e(_ee,pXr),e(U5,_Xr),e(ke,uXr),e(ke,J5),e(J5,VCe),e(VCe,bXr),e(J5,vXr),e(J5,uee),e(uee,FXr),e(J5,TXr),e(ke,MXr),e(ke,Y5),e(Y5,XCe),e(XCe,EXr),e(Y5,CXr),e(Y5,bee),e(bee,wXr),e(Y5,AXr),e(ke,LXr),e(ke,K5),e(K5,zCe),e(zCe,yXr),e(K5,xXr),e(K5,vee),e(vee,$Xr),e(K5,kXr),e(ke,SXr),e(ke,Z5),e(Z5,QCe),e(QCe,RXr),e(Z5,PXr),e(Z5,Fee),e(Fee,BXr),e(Z5,IXr),e(ke,NXr),e(ke,e3),e(e3,WCe),e(WCe,qXr),e(e3,jXr),e(e3,Tee),e(Tee,DXr),e(e3,GXr),e(ke,OXr),e(ke,o3),e(o3,HCe),e(HCe,VXr),e(o3,XXr),e(o3,Mee),e(Mee,zXr),e(o3,QXr),e(ke,WXr),e(ke,r3),e(r3,UCe),e(UCe,HXr),e(r3,UXr),e(r3,Eee),e(Eee,JXr),e(r3,YXr),e(ke,KXr),e(ke,t3),e(t3,JCe),e(JCe,ZXr),e(t3,ezr),e(t3,Cee),e(Cee,ozr),e(t3,rzr),e(Qr,tzr),M(a3,Qr,null),b(f,nXe,u),b(f,af,u),e(af,n3),e(n3,YCe),M(c$,YCe,null),e(af,azr),e(af,KCe),e(KCe,nzr),b(f,sXe,u),b(f,vr,u),M(f$,vr,null),e(vr,szr),e(vr,nf),e(nf,lzr),e(nf,wee),e(wee,izr),e(nf,dzr),e(nf,Aee),e(Aee,czr),e(nf,fzr),e(vr,mzr),e(vr,m$),e(m$,gzr),e(m$,ZCe),e(ZCe,hzr),e(m$,pzr),e(vr,_zr),e(vr,Ut),M(g$,Ut,null),e(Ut,uzr),e(Ut,e5e),e(e5e,bzr),e(Ut,vzr),e(Ut,sf),e(sf,Fzr),e(sf,o5e),e(o5e,Tzr),e(sf,Mzr),e(sf,Lee),e(Lee,Ezr),e(sf,Czr),e(Ut,wzr),M(s3,Ut,null),e(vr,Azr),e(vr,Wr),M(h$,Wr,null),e(Wr,Lzr),e(Wr,r5e),e(r5e,yzr),e(Wr,xzr),e(Wr,wn),e(wn,$zr),e(wn,t5e),e(t5e,kzr),e(wn,Szr),e(wn,a5e),e(a5e,Rzr),e(wn,Pzr),e(wn,n5e),e(n5e,Bzr),e(wn,Izr),e(Wr,Nzr),e(Wr,Se),e(Se,l3),e(l3,s5e),e(s5e,qzr),e(l3,jzr),e(l3,yee),e(yee,Dzr),e(l3,Gzr),e(Se,Ozr),e(Se,i3),e(i3,l5e),e(l5e,Vzr),e(i3,Xzr),e(i3,xee),e(xee,zzr),e(i3,Qzr),e(Se,Wzr),e(Se,d3),e(d3,i5e),e(i5e,Hzr),e(d3,Uzr),e(d3,$ee),e($ee,Jzr),e(d3,Yzr),e(Se,Kzr),e(Se,c3),e(c3,d5e),e(d5e,Zzr),e(c3,eQr),e(c3,kee),e(kee,oQr),e(c3,rQr),e(Se,tQr),e(Se,f3),e(f3,c5e),e(c5e,aQr),e(f3,nQr),e(f3,See),e(See,sQr),e(f3,lQr),e(Se,iQr),e(Se,m3),e(m3,f5e),e(f5e,dQr),e(m3,cQr),e(m3,Ree),e(Ree,fQr),e(m3,mQr),e(Se,gQr),e(Se,g3),e(g3,m5e),e(m5e,hQr),e(g3,pQr),e(g3,Pee),e(Pee,_Qr),e(g3,uQr),e(Se,bQr),e(Se,h3),e(h3,g5e),e(g5e,vQr),e(h3,FQr),e(h3,Bee),e(Bee,TQr),e(h3,MQr),e(Se,EQr),e(Se,p3),e(p3,h5e),e(h5e,CQr),e(p3,wQr),e(p3,Iee),e(Iee,AQr),e(p3,LQr),e(Se,yQr),e(Se,_3),e(_3,p5e),e(p5e,xQr),e(_3,$Qr),e(_3,Nee),e(Nee,kQr),e(_3,SQr),e(Wr,RQr),M(u3,Wr,null),b(f,lXe,u),b(f,lf,u),e(lf,b3),e(b3,_5e),M(p$,_5e,null),e(lf,PQr),e(lf,u5e),e(u5e,BQr),b(f,iXe,u),b(f,Fr,u),M(_$,Fr,null),e(Fr,IQr),e(Fr,df),e(df,NQr),e(df,qee),e(qee,qQr),e(df,jQr),e(df,jee),e(jee,DQr),e(df,GQr),e(Fr,OQr),e(Fr,u$),e(u$,VQr),e(u$,b5e),e(b5e,XQr),e(u$,zQr),e(Fr,QQr),e(Fr,Jt),M(b$,Jt,null),e(Jt,WQr),e(Jt,v5e),e(v5e,HQr),e(Jt,UQr),e(Jt,cf),e(cf,JQr),e(cf,F5e),e(F5e,YQr),e(cf,KQr),e(cf,Dee),e(Dee,ZQr),e(cf,eWr),e(Jt,oWr),M(v3,Jt,null),e(Fr,rWr),e(Fr,Hr),M(v$,Hr,null),e(Hr,tWr),e(Hr,T5e),e(T5e,aWr),e(Hr,nWr),e(Hr,An),e(An,sWr),e(An,M5e),e(M5e,lWr),e(An,iWr),e(An,E5e),e(E5e,dWr),e(An,cWr),e(An,C5e),e(C5e,fWr),e(An,mWr),e(Hr,gWr),e(Hr,Re),e(Re,F3),e(F3,w5e),e(w5e,hWr),e(F3,pWr),e(F3,Gee),e(Gee,_Wr),e(F3,uWr),e(Re,bWr),e(Re,T3),e(T3,A5e),e(A5e,vWr),e(T3,FWr),e(T3,Oee),e(Oee,TWr),e(T3,MWr),e(Re,EWr),e(Re,M3),e(M3,L5e),e(L5e,CWr),e(M3,wWr),e(M3,Vee),e(Vee,AWr),e(M3,LWr),e(Re,yWr),e(Re,E3),e(E3,y5e),e(y5e,xWr),e(E3,$Wr),e(E3,Xee),e(Xee,kWr),e(E3,SWr),e(Re,RWr),e(Re,C3),e(C3,x5e),e(x5e,PWr),e(C3,BWr),e(C3,zee),e(zee,IWr),e(C3,NWr),e(Re,qWr),e(Re,w3),e(w3,$5e),e($5e,jWr),e(w3,DWr),e(w3,Qee),e(Qee,GWr),e(w3,OWr),e(Re,VWr),e(Re,A3),e(A3,k5e),e(k5e,XWr),e(A3,zWr),e(A3,Wee),e(Wee,QWr),e(A3,WWr),e(Re,HWr),e(Re,L3),e(L3,S5e),e(S5e,UWr),e(L3,JWr),e(L3,Hee),e(Hee,YWr),e(L3,KWr),e(Re,ZWr),e(Re,y3),e(y3,R5e),e(R5e,eHr),e(y3,oHr),e(y3,Uee),e(Uee,rHr),e(y3,tHr),e(Re,aHr),e(Re,x3),e(x3,P5e),e(P5e,nHr),e(x3,sHr),e(x3,Jee),e(Jee,lHr),e(x3,iHr),e(Hr,dHr),M($3,Hr,null),b(f,dXe,u),b(f,ff,u),e(ff,k3),e(k3,B5e),M(F$,B5e,null),e(ff,cHr),e(ff,I5e),e(I5e,fHr),b(f,cXe,u),b(f,Tr,u),M(T$,Tr,null),e(Tr,mHr),e(Tr,mf),e(mf,gHr),e(mf,Yee),e(Yee,hHr),e(mf,pHr),e(mf,Kee),e(Kee,_Hr),e(mf,uHr),e(Tr,bHr),e(Tr,M$),e(M$,vHr),e(M$,N5e),e(N5e,FHr),e(M$,THr),e(Tr,MHr),e(Tr,Yt),M(E$,Yt,null),e(Yt,EHr),e(Yt,q5e),e(q5e,CHr),e(Yt,wHr),e(Yt,gf),e(gf,AHr),e(gf,j5e),e(j5e,LHr),e(gf,yHr),e(gf,Zee),e(Zee,xHr),e(gf,$Hr),e(Yt,kHr),M(S3,Yt,null),e(Tr,SHr),e(Tr,Ur),M(C$,Ur,null),e(Ur,RHr),e(Ur,D5e),e(D5e,PHr),e(Ur,BHr),e(Ur,Ln),e(Ln,IHr),e(Ln,G5e),e(G5e,NHr),e(Ln,qHr),e(Ln,O5e),e(O5e,jHr),e(Ln,DHr),e(Ln,V5e),e(V5e,GHr),e(Ln,OHr),e(Ur,VHr),e(Ur,Ve),e(Ve,R3),e(R3,X5e),e(X5e,XHr),e(R3,zHr),e(R3,eoe),e(eoe,QHr),e(R3,WHr),e(Ve,HHr),e(Ve,P3),e(P3,z5e),e(z5e,UHr),e(P3,JHr),e(P3,ooe),e(ooe,YHr),e(P3,KHr),e(Ve,ZHr),e(Ve,B3),e(B3,Q5e),e(Q5e,eUr),e(B3,oUr),e(B3,roe),e(roe,rUr),e(B3,tUr),e(Ve,aUr),e(Ve,I3),e(I3,W5e),e(W5e,nUr),e(I3,sUr),e(I3,toe),e(toe,lUr),e(I3,iUr),e(Ve,dUr),e(Ve,N3),e(N3,H5e),e(H5e,cUr),e(N3,fUr),e(N3,aoe),e(aoe,mUr),e(N3,gUr),e(Ve,hUr),e(Ve,q3),e(q3,U5e),e(U5e,pUr),e(q3,_Ur),e(q3,noe),e(noe,uUr),e(q3,bUr),e(Ve,vUr),e(Ve,j3),e(j3,J5e),e(J5e,FUr),e(j3,TUr),e(j3,soe),e(soe,MUr),e(j3,EUr),e(Ve,CUr),e(Ve,D3),e(D3,Y5e),e(Y5e,wUr),e(D3,AUr),e(D3,loe),e(loe,LUr),e(D3,yUr),e(Ur,xUr),M(G3,Ur,null),b(f,fXe,u),b(f,hf,u),e(hf,O3),e(O3,K5e),M(w$,K5e,null),e(hf,$Ur),e(hf,Z5e),e(Z5e,kUr),b(f,mXe,u),b(f,Mr,u),M(A$,Mr,null),e(Mr,SUr),e(Mr,pf),e(pf,RUr),e(pf,ioe),e(ioe,PUr),e(pf,BUr),e(pf,doe),e(doe,IUr),e(pf,NUr),e(Mr,qUr),e(Mr,L$),e(L$,jUr),e(L$,e3e),e(e3e,DUr),e(L$,GUr),e(Mr,OUr),e(Mr,Kt),M(y$,Kt,null),e(Kt,VUr),e(Kt,o3e),e(o3e,XUr),e(Kt,zUr),e(Kt,_f),e(_f,QUr),e(_f,r3e),e(r3e,WUr),e(_f,HUr),e(_f,coe),e(coe,UUr),e(_f,JUr),e(Kt,YUr),M(V3,Kt,null),e(Mr,KUr),e(Mr,Jr),M(x$,Jr,null),e(Jr,ZUr),e(Jr,t3e),e(t3e,eJr),e(Jr,oJr),e(Jr,yn),e(yn,rJr),e(yn,a3e),e(a3e,tJr),e(yn,aJr),e(yn,n3e),e(n3e,nJr),e(yn,sJr),e(yn,s3e),e(s3e,lJr),e(yn,iJr),e(Jr,dJr),e(Jr,Xe),e(Xe,X3),e(X3,l3e),e(l3e,cJr),e(X3,fJr),e(X3,foe),e(foe,mJr),e(X3,gJr),e(Xe,hJr),e(Xe,z3),e(z3,i3e),e(i3e,pJr),e(z3,_Jr),e(z3,moe),e(moe,uJr),e(z3,bJr),e(Xe,vJr),e(Xe,Q3),e(Q3,d3e),e(d3e,FJr),e(Q3,TJr),e(Q3,goe),e(goe,MJr),e(Q3,EJr),e(Xe,CJr),e(Xe,W3),e(W3,c3e),e(c3e,wJr),e(W3,AJr),e(W3,hoe),e(hoe,LJr),e(W3,yJr),e(Xe,xJr),e(Xe,H3),e(H3,f3e),e(f3e,$Jr),e(H3,kJr),e(H3,poe),e(poe,SJr),e(H3,RJr),e(Xe,PJr),e(Xe,U3),e(U3,m3e),e(m3e,BJr),e(U3,IJr),e(U3,_oe),e(_oe,NJr),e(U3,qJr),e(Xe,jJr),e(Xe,J3),e(J3,g3e),e(g3e,DJr),e(J3,GJr),e(J3,uoe),e(uoe,OJr),e(J3,VJr),e(Xe,XJr),e(Xe,Y3),e(Y3,h3e),e(h3e,zJr),e(Y3,QJr),e(Y3,boe),e(boe,WJr),e(Y3,HJr),e(Jr,UJr),M(K3,Jr,null),b(f,gXe,u),b(f,uf,u),e(uf,Z3),e(Z3,p3e),M($$,p3e,null),e(uf,JJr),e(uf,_3e),e(_3e,YJr),b(f,hXe,u),b(f,Er,u),M(k$,Er,null),e(Er,KJr),e(Er,bf),e(bf,ZJr),e(bf,voe),e(voe,eYr),e(bf,oYr),e(bf,Foe),e(Foe,rYr),e(bf,tYr),e(Er,aYr),e(Er,S$),e(S$,nYr),e(S$,u3e),e(u3e,sYr),e(S$,lYr),e(Er,iYr),e(Er,Zt),M(R$,Zt,null),e(Zt,dYr),e(Zt,b3e),e(b3e,cYr),e(Zt,fYr),e(Zt,vf),e(vf,mYr),e(vf,v3e),e(v3e,gYr),e(vf,hYr),e(vf,Toe),e(Toe,pYr),e(vf,_Yr),e(Zt,uYr),M(e0,Zt,null),e(Er,bYr),e(Er,Yr),M(P$,Yr,null),e(Yr,vYr),e(Yr,F3e),e(F3e,FYr),e(Yr,TYr),e(Yr,xn),e(xn,MYr),e(xn,T3e),e(T3e,EYr),e(xn,CYr),e(xn,M3e),e(M3e,wYr),e(xn,AYr),e(xn,E3e),e(E3e,LYr),e(xn,yYr),e(Yr,xYr),e(Yr,C3e),e(C3e,o0),e(o0,w3e),e(w3e,$Yr),e(o0,kYr),e(o0,Moe),e(Moe,SYr),e(o0,RYr),e(Yr,PYr),M(r0,Yr,null),b(f,pXe,u),b(f,Ff,u),e(Ff,t0),e(t0,A3e),M(B$,A3e,null),e(Ff,BYr),e(Ff,L3e),e(L3e,IYr),b(f,_Xe,u),b(f,Cr,u),M(I$,Cr,null),e(Cr,NYr),e(Cr,Tf),e(Tf,qYr),e(Tf,Eoe),e(Eoe,jYr),e(Tf,DYr),e(Tf,Coe),e(Coe,GYr),e(Tf,OYr),e(Cr,VYr),e(Cr,N$),e(N$,XYr),e(N$,y3e),e(y3e,zYr),e(N$,QYr),e(Cr,WYr),e(Cr,ea),M(q$,ea,null),e(ea,HYr),e(ea,x3e),e(x3e,UYr),e(ea,JYr),e(ea,Mf),e(Mf,YYr),e(Mf,$3e),e($3e,KYr),e(Mf,ZYr),e(Mf,woe),e(woe,eKr),e(Mf,oKr),e(ea,rKr),M(a0,ea,null),e(Cr,tKr),e(Cr,Kr),M(j$,Kr,null),e(Kr,aKr),e(Kr,k3e),e(k3e,nKr),e(Kr,sKr),e(Kr,$n),e($n,lKr),e($n,S3e),e(S3e,iKr),e($n,dKr),e($n,R3e),e(R3e,cKr),e($n,fKr),e($n,P3e),e(P3e,mKr),e($n,gKr),e(Kr,hKr),e(Kr,D$),e(D$,n0),e(n0,B3e),e(B3e,pKr),e(n0,_Kr),e(n0,Aoe),e(Aoe,uKr),e(n0,bKr),e(D$,vKr),e(D$,s0),e(s0,I3e),e(I3e,FKr),e(s0,TKr),e(s0,Loe),e(Loe,MKr),e(s0,EKr),e(Kr,CKr),M(l0,Kr,null),b(f,uXe,u),b(f,Ef,u),e(Ef,i0),e(i0,N3e),M(G$,N3e,null),e(Ef,wKr),e(Ef,q3e),e(q3e,AKr),b(f,bXe,u),b(f,wr,u),M(O$,wr,null),e(wr,LKr),e(wr,Cf),e(Cf,yKr),e(Cf,yoe),e(yoe,xKr),e(Cf,$Kr),e(Cf,xoe),e(xoe,kKr),e(Cf,SKr),e(wr,RKr),e(wr,V$),e(V$,PKr),e(V$,j3e),e(j3e,BKr),e(V$,IKr),e(wr,NKr),e(wr,oa),M(X$,oa,null),e(oa,qKr),e(oa,D3e),e(D3e,jKr),e(oa,DKr),e(oa,wf),e(wf,GKr),e(wf,G3e),e(G3e,OKr),e(wf,VKr),e(wf,$oe),e($oe,XKr),e(wf,zKr),e(oa,QKr),M(d0,oa,null),e(wr,WKr),e(wr,Zr),M(z$,Zr,null),e(Zr,HKr),e(Zr,O3e),e(O3e,UKr),e(Zr,JKr),e(Zr,kn),e(kn,YKr),e(kn,V3e),e(V3e,KKr),e(kn,ZKr),e(kn,X3e),e(X3e,eZr),e(kn,oZr),e(kn,z3e),e(z3e,rZr),e(kn,tZr),e(Zr,aZr),e(Zr,Q3e),e(Q3e,c0),e(c0,W3e),e(W3e,nZr),e(c0,sZr),e(c0,koe),e(koe,lZr),e(c0,iZr),e(Zr,dZr),M(f0,Zr,null),vXe=!0},p(f,[u]){const Q$={};u&2&&(Q$.$$scope={dirty:u,ctx:f}),Pf.$set(Q$);const H3e={};u&2&&(H3e.$$scope={dirty:u,ctx:f}),Xg.$set(H3e);const U3e={};u&2&&(U3e.$$scope={dirty:u,ctx:f}),Lh.$set(U3e);const J3e={};u&2&&(J3e.$$scope={dirty:u,ctx:f}),ip.$set(J3e);const W$={};u&2&&(W$.$$scope={dirty:u,ctx:f}),dp.$set(W$);const Y3e={};u&2&&(Y3e.$$scope={dirty:u,ctx:f}),xp.$set(Y3e);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),$p.$set(Sn);const K3e={};u&2&&(K3e.$$scope={dirty:u,ctx:f}),Rp.$set(K3e);const Z3e={};u&2&&(Z3e.$$scope={dirty:u,ctx:f}),Bu.$set(Z3e);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),Nu.$set(e0e);const H$={};u&2&&(H$.$$scope={dirty:u,ctx:f}),x2.$set(H$);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),k2.$set(o0e);const U$={};u&2&&(U$.$$scope={dirty:u,ctx:f}),b1.$set(U$);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),F1.$set(r0e);const J$={};u&2&&(J$.$$scope={dirty:u,ctx:f}),nb.$set(J$);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),lb.$set(t0e);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),Ab.$set(a0e);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),yb.$set(n0e);const Af={};u&2&&(Af.$$scope={dirty:u,ctx:f}),wv.$set(Af);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),Lv.$set(s0e);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),nF.$set(l0e);const i0e={};u&2&&(i0e.$$scope={dirty:u,ctx:f}),lF.$set(i0e);const Y$={};u&2&&(Y$.$$scope={dirty:u,ctx:f}),pF.$set(Y$);const d0e={};u&2&&(d0e.$$scope={dirty:u,ctx:f}),uF.$set(d0e);const c0e={};u&2&&(c0e.$$scope={dirty:u,ctx:f}),o6.$set(c0e);const f0e={};u&2&&(f0e.$$scope={dirty:u,ctx:f}),t6.$set(f0e);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),Q6.$set(rt);const K$={};u&2&&(K$.$$scope={dirty:u,ctx:f}),H6.$set(K$);const m0e={};u&2&&(m0e.$$scope={dirty:u,ctx:f}),Y6.$set(m0e);const Z$={};u&2&&(Z$.$$scope={dirty:u,ctx:f}),Z6.$set(Z$);const g0e={};u&2&&(g0e.$$scope={dirty:u,ctx:f}),gT.$set(g0e);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),pT.$set(tt);const h0e={};u&2&&(h0e.$$scope={dirty:u,ctx:f}),bT.$set(h0e);const Lf={};u&2&&(Lf.$$scope={dirty:u,ctx:f}),FT.$set(Lf);const p0e={};u&2&&(p0e.$$scope={dirty:u,ctx:f}),ET.$set(p0e);const _0e={};u&2&&(_0e.$$scope={dirty:u,ctx:f}),wT.$set(_0e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),IT.$set(L);const m0={};u&2&&(m0.$$scope={dirty:u,ctx:f}),qT.$set(m0);const u0e={};u&2&&(u0e.$$scope={dirty:u,ctx:f}),zT.$set(u0e);const b0e={};u&2&&(b0e.$$scope={dirty:u,ctx:f}),WT.$set(b0e);const g0={};u&2&&(g0.$$scope={dirty:u,ctx:f}),n7.$set(g0);const v0e={};u&2&&(v0e.$$scope={dirty:u,ctx:f}),l7.$set(v0e);const F0e={};u&2&&(F0e.$$scope={dirty:u,ctx:f}),f7.$set(F0e);const h0={};u&2&&(h0.$$scope={dirty:u,ctx:f}),g7.$set(h0);const T0e={};u&2&&(T0e.$$scope={dirty:u,ctx:f}),F7.$set(T0e);const M0e={};u&2&&(M0e.$$scope={dirty:u,ctx:f}),M7.$set(M0e);const p0={};u&2&&(p0.$$scope={dirty:u,ctx:f}),L7.$set(p0);const E0e={};u&2&&(E0e.$$scope={dirty:u,ctx:f}),x7.$set(E0e);const C0e={};u&2&&(C0e.$$scope={dirty:u,ctx:f}),R7.$set(C0e);const _0={};u&2&&(_0.$$scope={dirty:u,ctx:f}),B7.$set(_0);const w0e={};u&2&&(w0e.$$scope={dirty:u,ctx:f}),q7.$set(w0e);const A0e={};u&2&&(A0e.$$scope={dirty:u,ctx:f}),D7.$set(A0e);const u0={};u&2&&(u0.$$scope={dirty:u,ctx:f}),Q7.$set(u0);const L0e={};u&2&&(L0e.$$scope={dirty:u,ctx:f}),H7.$set(L0e);const y0e={};u&2&&(y0e.$$scope={dirty:u,ctx:f}),Y7.$set(y0e);const b0={};u&2&&(b0.$$scope={dirty:u,ctx:f}),Z7.$set(b0);const x0e={};u&2&&(x0e.$$scope={dirty:u,ctx:f}),Q8.$set(x0e);const $0e={};u&2&&($0e.$$scope={dirty:u,ctx:f}),H8.$set($0e);const v0={};u&2&&(v0.$$scope={dirty:u,ctx:f}),bM.$set(v0);const k0e={};u&2&&(k0e.$$scope={dirty:u,ctx:f}),FM.$set(k0e);const S0e={};u&2&&(S0e.$$scope={dirty:u,ctx:f}),PM.$set(S0e);const F0={};u&2&&(F0.$$scope={dirty:u,ctx:f}),IM.$set(F0);const R0e={};u&2&&(R0e.$$scope={dirty:u,ctx:f}),GM.$set(R0e);const P0e={};u&2&&(P0e.$$scope={dirty:u,ctx:f}),VM.$set(P0e);const T0={};u&2&&(T0.$$scope={dirty:u,ctx:f}),cE.$set(T0);const B0e={};u&2&&(B0e.$$scope={dirty:u,ctx:f}),mE.$set(B0e);const I0e={};u&2&&(I0e.$$scope={dirty:u,ctx:f}),EE.$set(I0e);const M0={};u&2&&(M0.$$scope={dirty:u,ctx:f}),wE.$set(M0);const N0e={};u&2&&(N0e.$$scope={dirty:u,ctx:f}),KE.$set(N0e);const q0e={};u&2&&(q0e.$$scope={dirty:u,ctx:f}),e4.$set(q0e);const E0={};u&2&&(E0.$$scope={dirty:u,ctx:f}),b4.$set(E0);const j0e={};u&2&&(j0e.$$scope={dirty:u,ctx:f}),F4.$set(j0e);const D0e={};u&2&&(D0e.$$scope={dirty:u,ctx:f}),E4.$set(D0e);const C0={};u&2&&(C0.$$scope={dirty:u,ctx:f}),w4.$set(C0);const G0e={};u&2&&(G0e.$$scope={dirty:u,ctx:f}),L4.$set(G0e);const O0e={};u&2&&(O0e.$$scope={dirty:u,ctx:f}),x4.$set(O0e);const w0={};u&2&&(w0.$$scope={dirty:u,ctx:f}),J4.$set(w0);const V0e={};u&2&&(V0e.$$scope={dirty:u,ctx:f}),K4.$set(V0e);const X0e={};u&2&&(X0e.$$scope={dirty:u,ctx:f}),vC.$set(X0e);const A0={};u&2&&(A0.$$scope={dirty:u,ctx:f}),TC.$set(A0);const z0e={};u&2&&(z0e.$$scope={dirty:u,ctx:f}),EC.$set(z0e);const Q0e={};u&2&&(Q0e.$$scope={dirty:u,ctx:f}),wC.$set(Q0e);const L0={};u&2&&(L0.$$scope={dirty:u,ctx:f}),LC.$set(L0);const W0e={};u&2&&(W0e.$$scope={dirty:u,ctx:f}),xC.$set(W0e);const H0e={};u&2&&(H0e.$$scope={dirty:u,ctx:f}),t5.$set(H0e);const y0={};u&2&&(y0.$$scope={dirty:u,ctx:f}),n5.$set(y0);const U0e={};u&2&&(U0e.$$scope={dirty:u,ctx:f}),_5.$set(U0e);const J0e={};u&2&&(J0e.$$scope={dirty:u,ctx:f}),b5.$set(J0e);const x0={};u&2&&(x0.$$scope={dirty:u,ctx:f}),S5.$set(x0);const Y0e={};u&2&&(Y0e.$$scope={dirty:u,ctx:f}),P5.$set(Y0e);const K0e={};u&2&&(K0e.$$scope={dirty:u,ctx:f}),z5.$set(K0e);const $0={};u&2&&($0.$$scope={dirty:u,ctx:f}),W5.$set($0);const Z0e={};u&2&&(Z0e.$$scope={dirty:u,ctx:f}),a3.$set(Z0e);const ewe={};u&2&&(ewe.$$scope={dirty:u,ctx:f}),s3.$set(ewe);const k0={};u&2&&(k0.$$scope={dirty:u,ctx:f}),u3.$set(k0);const owe={};u&2&&(owe.$$scope={dirty:u,ctx:f}),v3.$set(owe);const rwe={};u&2&&(rwe.$$scope={dirty:u,ctx:f}),$3.$set(rwe);const S0={};u&2&&(S0.$$scope={dirty:u,ctx:f}),S3.$set(S0);const twe={};u&2&&(twe.$$scope={dirty:u,ctx:f}),G3.$set(twe);const awe={};u&2&&(awe.$$scope={dirty:u,ctx:f}),V3.$set(awe);const R0={};u&2&&(R0.$$scope={dirty:u,ctx:f}),K3.$set(R0);const nwe={};u&2&&(nwe.$$scope={dirty:u,ctx:f}),e0.$set(nwe);const swe={};u&2&&(swe.$$scope={dirty:u,ctx:f}),r0.$set(swe);const P0={};u&2&&(P0.$$scope={dirty:u,ctx:f}),a0.$set(P0);const lwe={};u&2&&(lwe.$$scope={dirty:u,ctx:f}),l0.$set(lwe);const iwe={};u&2&&(iwe.$$scope={dirty:u,ctx:f}),d0.$set(iwe);const B0={};u&2&&(B0.$$scope={dirty:u,ctx:f}),f0.$set(B0)},i(f){vXe||(E(d.$$.fragment,f),E(xa.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(Pf.$$.fragment,f),E(qA.$$.fragment,f),E(jA.$$.fragment,f),E(OA.$$.fragment,f),E(Xg.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(HA.$$.fragment,f),E(Lh.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(eL.$$.fragment,f),E(ip.$$.fragment,f),E(dp.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(sL.$$.fragment,f),E(xp.$$.fragment,f),E($p.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(Rp.$$.fragment,f),E(mL.$$.fragment,f),E(Bu.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(_L.$$.fragment,f),E(Nu.$$.fragment,f),E(uL.$$.fragment,f),E(x2.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(k2.$$.fragment,f),E(ML.$$.fragment,f),E(b1.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(F1.$$.fragment,f),E(LL.$$.fragment,f),E(nb.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(lb.$$.fragment,f),E(SL.$$.fragment,f),E(Ab.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(yb.$$.fragment,f),E(NL.$$.fragment,f),E(wv.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(Lv.$$.fragment,f),E(OL.$$.fragment,f),E(nF.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(QL.$$.fragment,f),E(lF.$$.fragment,f),E(WL.$$.fragment,f),E(pF.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(uF.$$.fragment,f),E(KL.$$.fragment,f),E(o6.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(t6.$$.fragment,f),E(ty.$$.fragment,f),E(Q6.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(H6.$$.fragment,f),E(iy.$$.fragment,f),E(Y6.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(Z6.$$.fragment,f),E(gy.$$.fragment,f),E(gT.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(pT.$$.fragment,f),E(by.$$.fragment,f),E(bT.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(FT.$$.fragment,f),E(Ey.$$.fragment,f),E(ET.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ly.$$.fragment,f),E(wT.$$.fragment,f),E(yy.$$.fragment,f),E(IT.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(qT.$$.fragment,f),E(Ry.$$.fragment,f),E(zT.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(WT.$$.fragment,f),E(qy.$$.fragment,f),E(n7.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(l7.$$.fragment,f),E(Vy.$$.fragment,f),E(f7.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(g7.$$.fragment,f),E(Uy.$$.fragment,f),E(F7.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(M7.$$.fragment,f),E(e9.$$.fragment,f),E(L7.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(x7.$$.fragment,f),E(n9.$$.fragment,f),E(R7.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(B7.$$.fragment,f),E(f9.$$.fragment,f),E(q7.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(D7.$$.fragment,f),E(_9.$$.fragment,f),E(Q7.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(H7.$$.fragment,f),E(T9.$$.fragment,f),E(Y7.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(Z7.$$.fragment,f),E(A9.$$.fragment,f),E(Q8.$$.fragment,f),E(L9.$$.fragment,f),E(y9.$$.fragment,f),E($9.$$.fragment,f),E(H8.$$.fragment,f),E(k9.$$.fragment,f),E(bM.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(FM.$$.fragment,f),E(I9.$$.fragment,f),E(PM.$$.fragment,f),E(N9.$$.fragment,f),E(q9.$$.fragment,f),E(D9.$$.fragment,f),E(IM.$$.fragment,f),E(G9.$$.fragment,f),E(GM.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(VM.$$.fragment,f),E(Q9.$$.fragment,f),E(cE.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(mE.$$.fragment,f),E(Y9.$$.fragment,f),E(EE.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(wE.$$.fragment,f),E(rx.$$.fragment,f),E(KE.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(e4.$$.fragment,f),E(lx.$$.fragment,f),E(b4.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(F4.$$.fragment,f),E(mx.$$.fragment,f),E(E4.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(w4.$$.fragment,f),E(bx.$$.fragment,f),E(L4.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(x4.$$.fragment,f),E(Ex.$$.fragment,f),E(J4.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(K4.$$.fragment,f),E(yx.$$.fragment,f),E(vC.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(TC.$$.fragment,f),E(Rx.$$.fragment,f),E(EC.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(wC.$$.fragment,f),E(qx.$$.fragment,f),E(LC.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(xC.$$.fragment,f),E(Vx.$$.fragment,f),E(t5.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(n5.$$.fragment,f),E(Hx.$$.fragment,f),E(_5.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(b5.$$.fragment,f),E(Zx.$$.fragment,f),E(S5.$$.fragment,f),E(e$.$$.fragment,f),E(o$.$$.fragment,f),E(t$.$$.fragment,f),E(P5.$$.fragment,f),E(a$.$$.fragment,f),E(z5.$$.fragment,f),E(n$.$$.fragment,f),E(s$.$$.fragment,f),E(i$.$$.fragment,f),E(W5.$$.fragment,f),E(d$.$$.fragment,f),E(a3.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(s3.$$.fragment,f),E(h$.$$.fragment,f),E(u3.$$.fragment,f),E(p$.$$.fragment,f),E(_$.$$.fragment,f),E(b$.$$.fragment,f),E(v3.$$.fragment,f),E(v$.$$.fragment,f),E($3.$$.fragment,f),E(F$.$$.fragment,f),E(T$.$$.fragment,f),E(E$.$$.fragment,f),E(S3.$$.fragment,f),E(C$.$$.fragment,f),E(G3.$$.fragment,f),E(w$.$$.fragment,f),E(A$.$$.fragment,f),E(y$.$$.fragment,f),E(V3.$$.fragment,f),E(x$.$$.fragment,f),E(K3.$$.fragment,f),E($$.$$.fragment,f),E(k$.$$.fragment,f),E(R$.$$.fragment,f),E(e0.$$.fragment,f),E(P$.$$.fragment,f),E(r0.$$.fragment,f),E(B$.$$.fragment,f),E(I$.$$.fragment,f),E(q$.$$.fragment,f),E(a0.$$.fragment,f),E(j$.$$.fragment,f),E(l0.$$.fragment,f),E(G$.$$.fragment,f),E(O$.$$.fragment,f),E(X$.$$.fragment,f),E(d0.$$.fragment,f),E(z$.$$.fragment,f),E(f0.$$.fragment,f),vXe=!0)},o(f){C(d.$$.fragment,f),C(xa.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(Pf.$$.fragment,f),C(qA.$$.fragment,f),C(jA.$$.fragment,f),C(OA.$$.fragment,f),C(Xg.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(HA.$$.fragment,f),C(Lh.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(eL.$$.fragment,f),C(ip.$$.fragment,f),C(dp.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(sL.$$.fragment,f),C(xp.$$.fragment,f),C($p.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(Rp.$$.fragment,f),C(mL.$$.fragment,f),C(Bu.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(_L.$$.fragment,f),C(Nu.$$.fragment,f),C(uL.$$.fragment,f),C(x2.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(k2.$$.fragment,f),C(ML.$$.fragment,f),C(b1.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(F1.$$.fragment,f),C(LL.$$.fragment,f),C(nb.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(lb.$$.fragment,f),C(SL.$$.fragment,f),C(Ab.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(yb.$$.fragment,f),C(NL.$$.fragment,f),C(wv.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(Lv.$$.fragment,f),C(OL.$$.fragment,f),C(nF.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(QL.$$.fragment,f),C(lF.$$.fragment,f),C(WL.$$.fragment,f),C(pF.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(uF.$$.fragment,f),C(KL.$$.fragment,f),C(o6.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(t6.$$.fragment,f),C(ty.$$.fragment,f),C(Q6.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(H6.$$.fragment,f),C(iy.$$.fragment,f),C(Y6.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(Z6.$$.fragment,f),C(gy.$$.fragment,f),C(gT.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(pT.$$.fragment,f),C(by.$$.fragment,f),C(bT.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(FT.$$.fragment,f),C(Ey.$$.fragment,f),C(ET.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ly.$$.fragment,f),C(wT.$$.fragment,f),C(yy.$$.fragment,f),C(IT.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(qT.$$.fragment,f),C(Ry.$$.fragment,f),C(zT.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(WT.$$.fragment,f),C(qy.$$.fragment,f),C(n7.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(l7.$$.fragment,f),C(Vy.$$.fragment,f),C(f7.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(g7.$$.fragment,f),C(Uy.$$.fragment,f),C(F7.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(M7.$$.fragment,f),C(e9.$$.fragment,f),C(L7.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(x7.$$.fragment,f),C(n9.$$.fragment,f),C(R7.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(B7.$$.fragment,f),C(f9.$$.fragment,f),C(q7.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(D7.$$.fragment,f),C(_9.$$.fragment,f),C(Q7.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(H7.$$.fragment,f),C(T9.$$.fragment,f),C(Y7.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(Z7.$$.fragment,f),C(A9.$$.fragment,f),C(Q8.$$.fragment,f),C(L9.$$.fragment,f),C(y9.$$.fragment,f),C($9.$$.fragment,f),C(H8.$$.fragment,f),C(k9.$$.fragment,f),C(bM.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(FM.$$.fragment,f),C(I9.$$.fragment,f),C(PM.$$.fragment,f),C(N9.$$.fragment,f),C(q9.$$.fragment,f),C(D9.$$.fragment,f),C(IM.$$.fragment,f),C(G9.$$.fragment,f),C(GM.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(VM.$$.fragment,f),C(Q9.$$.fragment,f),C(cE.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(mE.$$.fragment,f),C(Y9.$$.fragment,f),C(EE.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(wE.$$.fragment,f),C(rx.$$.fragment,f),C(KE.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(e4.$$.fragment,f),C(lx.$$.fragment,f),C(b4.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(F4.$$.fragment,f),C(mx.$$.fragment,f),C(E4.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(w4.$$.fragment,f),C(bx.$$.fragment,f),C(L4.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(x4.$$.fragment,f),C(Ex.$$.fragment,f),C(J4.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(K4.$$.fragment,f),C(yx.$$.fragment,f),C(vC.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(TC.$$.fragment,f),C(Rx.$$.fragment,f),C(EC.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(wC.$$.fragment,f),C(qx.$$.fragment,f),C(LC.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(xC.$$.fragment,f),C(Vx.$$.fragment,f),C(t5.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(n5.$$.fragment,f),C(Hx.$$.fragment,f),C(_5.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(b5.$$.fragment,f),C(Zx.$$.fragment,f),C(S5.$$.fragment,f),C(e$.$$.fragment,f),C(o$.$$.fragment,f),C(t$.$$.fragment,f),C(P5.$$.fragment,f),C(a$.$$.fragment,f),C(z5.$$.fragment,f),C(n$.$$.fragment,f),C(s$.$$.fragment,f),C(i$.$$.fragment,f),C(W5.$$.fragment,f),C(d$.$$.fragment,f),C(a3.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(s3.$$.fragment,f),C(h$.$$.fragment,f),C(u3.$$.fragment,f),C(p$.$$.fragment,f),C(_$.$$.fragment,f),C(b$.$$.fragment,f),C(v3.$$.fragment,f),C(v$.$$.fragment,f),C($3.$$.fragment,f),C(F$.$$.fragment,f),C(T$.$$.fragment,f),C(E$.$$.fragment,f),C(S3.$$.fragment,f),C(C$.$$.fragment,f),C(G3.$$.fragment,f),C(w$.$$.fragment,f),C(A$.$$.fragment,f),C(y$.$$.fragment,f),C(V3.$$.fragment,f),C(x$.$$.fragment,f),C(K3.$$.fragment,f),C($$.$$.fragment,f),C(k$.$$.fragment,f),C(R$.$$.fragment,f),C(e0.$$.fragment,f),C(P$.$$.fragment,f),C(r0.$$.fragment,f),C(B$.$$.fragment,f),C(I$.$$.fragment,f),C(q$.$$.fragment,f),C(a0.$$.fragment,f),C(j$.$$.fragment,f),C(l0.$$.fragment,f),C(G$.$$.fragment,f),C(O$.$$.fragment,f),C(X$.$$.fragment,f),C(d0.$$.fragment,f),C(z$.$$.fragment,f),C(f0.$$.fragment,f),vXe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(xf),f&&t(at),f&&t(Oe),f&&t(Qe),f&&t(kf),w(xa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t($a),f&&t(hOe),f&&t(xi),w(IA),f&&t(pOe),f&&t(Nn),f&&t(_Oe),w(NA,f),f&&t(uOe),f&&t(pS),f&&t(bOe),w(Pf,f),f&&t(vOe),f&&t($i),w(qA),f&&t(FOe),f&&t(wo),w(jA),w(OA),w(Xg),w(VA),f&&t(TOe),f&&t(Si),w(XA),f&&t(MOe),f&&t(Ao),w(zA),w(HA),w(Lh),w(UA),f&&t(EOe),f&&t(Ri),w(JA),f&&t(COe),f&&t(Lo),w(YA),w(eL),w(ip),w(dp),w(oL),f&&t(wOe),f&&t(Pi),w(rL),f&&t(AOe),f&&t(yo),w(tL),w(sL),w(xp),w($p),w(lL),f&&t(LOe),f&&t(Ii),w(iL),f&&t(yOe),f&&t(xo),w(dL),w(fL),w(Rp),w(mL),w(Bu),f&&t(xOe),f&&t(ji),w(gL),f&&t($Oe),f&&t($o),w(hL),w(_L),w(Nu),w(uL),w(x2),f&&t(kOe),f&&t(Oi),w(bL),f&&t(SOe),f&&t(ko),w(vL),w(TL),w(k2),w(ML),w(b1),f&&t(ROe),f&&t(zi),w(EL),f&&t(POe),f&&t(So),w(CL),w(AL),w(F1),w(LL),w(nb),f&&t(BOe),f&&t(Hi),w(yL),f&&t(IOe),f&&t(Ro),w(xL),w(kL),w(lb),w(SL),w(Ab),f&&t(NOe),f&&t(Yi),w(RL),f&&t(qOe),f&&t(Po),w(PL),w(IL),w(yb),w(NL),w(wv),f&&t(jOe),f&&t(ed),w(qL),f&&t(DOe),f&&t(Bo),w(jL),w(GL),w(Lv),w(OL),w(nF),f&&t(GOe),f&&t(td),w(VL),f&&t(OOe),f&&t(Io),w(XL),w(QL),w(lF),w(WL),w(pF),f&&t(VOe),f&&t(sd),w(HL),f&&t(XOe),f&&t(qo),w(UL),w(YL),w(uF),w(KL),w(o6),f&&t(zOe),f&&t(dd),w(ZL),f&&t(QOe),f&&t(jo),w(ey),w(ry),w(t6),w(ty),w(Q6),f&&t(WOe),f&&t(md),w(ay),f&&t(HOe),f&&t(Do),w(ny),w(ly),w(H6),w(iy),w(Y6),f&&t(UOe),f&&t(pd),w(dy),f&&t(JOe),f&&t(Go),w(cy),w(my),w(Z6),w(gy),w(gT),f&&t(YOe),f&&t(bd),w(hy),f&&t(KOe),f&&t(Oo),w(py),w(uy),w(pT),w(by),w(bT),f&&t(ZOe),f&&t(Td),w(vy),f&&t(eVe),f&&t(Vo),w(Fy),w(My),w(FT),w(Ey),w(ET),f&&t(oVe),f&&t(Cd),w(Cy),f&&t(rVe),f&&t(Xo),w(wy),w(Ly),w(wT),w(yy),w(IT),f&&t(tVe),f&&t(Ld),w(xy),f&&t(aVe),f&&t(zo),w($y),w(Sy),w(qT),w(Ry),w(zT),f&&t(nVe),f&&t($d),w(Py),f&&t(sVe),f&&t(Qo),w(By),w(Ny),w(WT),w(qy),w(n7),f&&t(lVe),f&&t(Rd),w(jy),f&&t(iVe),f&&t(Wo),w(Dy),w(Oy),w(l7),w(Vy),w(f7),f&&t(dVe),f&&t(Id),w(zy),f&&t(cVe),f&&t(Ho),w(Qy),w(Hy),w(g7),w(Uy),w(F7),f&&t(fVe),f&&t(jd),w(Jy),f&&t(mVe),f&&t(Uo),w(Yy),w(Zy),w(M7),w(e9),w(L7),f&&t(gVe),f&&t(Vd),w(o9),f&&t(hVe),f&&t(Jo),w(r9),w(a9),w(x7),w(n9),w(R7),f&&t(pVe),f&&t(Qd),w(l9),f&&t(_Ve),f&&t(Yo),w(i9),w(c9),w(B7),w(f9),w(q7),f&&t(uVe),f&&t(Ud),w(m9),f&&t(bVe),f&&t(Ko),w(g9),w(p9),w(D7),w(_9),w(Q7),f&&t(vVe),f&&t(Kd),w(u9),f&&t(FVe),f&&t(Zo),w(b9),w(F9),w(H7),w(T9),w(Y7),f&&t(TVe),f&&t(oc),w(M9),f&&t(MVe),f&&t(er),w(E9),w(w9),w(Z7),w(A9),w(Q8),f&&t(EVe),f&&t(ac),w(L9),f&&t(CVe),f&&t(or),w(y9),w($9),w(H8),w(k9),w(bM),f&&t(wVe),f&&t(lc),w(S9),f&&t(AVe),f&&t(rr),w(R9),w(B9),w(FM),w(I9),w(PM),f&&t(LVe),f&&t(cc),w(N9),f&&t(yVe),f&&t(tr),w(q9),w(D9),w(IM),w(G9),w(GM),f&&t(xVe),f&&t(gc),w(O9),f&&t($Ve),f&&t(ar),w(V9),w(z9),w(VM),w(Q9),w(cE),f&&t(kVe),f&&t(_c),w(W9),f&&t(SVe),f&&t(nr),w(H9),w(J9),w(mE),w(Y9),w(EE),f&&t(RVe),f&&t(vc),w(K9),f&&t(PVe),f&&t(sr),w(Z9),w(ox),w(wE),w(rx),w(KE),f&&t(BVe),f&&t(Mc),w(tx),f&&t(IVe),f&&t(lr),w(ax),w(sx),w(e4),w(lx),w(b4),f&&t(NVe),f&&t(wc),w(ix),f&&t(qVe),f&&t(ir),w(dx),w(fx),w(F4),w(mx),w(E4),f&&t(jVe),f&&t(yc),w(hx),f&&t(DVe),f&&t(dr),w(px),w(ux),w(w4),w(bx),w(L4),f&&t(GVe),f&&t(kc),w(vx),f&&t(OVe),f&&t(cr),w(Fx),w(Mx),w(x4),w(Ex),w(J4),f&&t(VVe),f&&t(Pc),w(Cx),f&&t(XVe),f&&t(fr),w(wx),w(Lx),w(K4),w(yx),w(vC),f&&t(zVe),f&&t(Nc),w(xx),f&&t(QVe),f&&t(mr),w($x),w(Sx),w(TC),w(Rx),w(EC),f&&t(WVe),f&&t(Dc),w(Px),f&&t(HVe),f&&t(gr),w(Bx),w(Nx),w(wC),w(qx),w(LC),f&&t(UVe),f&&t(Vc),w(jx),f&&t(JVe),f&&t(hr),w(Dx),w(Ox),w(xC),w(Vx),w(t5),f&&t(YVe),f&&t(Qc),w(Xx),f&&t(KVe),f&&t(pr),w(zx),w(Wx),w(n5),w(Hx),w(_5),f&&t(ZVe),f&&t(Uc),w(Ux),f&&t(eXe),f&&t(_r),w(Jx),w(Kx),w(b5),w(Zx),w(S5),f&&t(oXe),f&&t(Kc),w(e$),f&&t(rXe),f&&t(ur),w(o$),w(t$),w(P5),w(a$),w(z5),f&&t(tXe),f&&t(of),w(n$),f&&t(aXe),f&&t(br),w(s$),w(i$),w(W5),w(d$),w(a3),f&&t(nXe),f&&t(af),w(c$),f&&t(sXe),f&&t(vr),w(f$),w(g$),w(s3),w(h$),w(u3),f&&t(lXe),f&&t(lf),w(p$),f&&t(iXe),f&&t(Fr),w(_$),w(b$),w(v3),w(v$),w($3),f&&t(dXe),f&&t(ff),w(F$),f&&t(cXe),f&&t(Tr),w(T$),w(E$),w(S3),w(C$),w(G3),f&&t(fXe),f&&t(hf),w(w$),f&&t(mXe),f&&t(Mr),w(A$),w(y$),w(V3),w(x$),w(K3),f&&t(gXe),f&&t(uf),w($$),f&&t(hXe),f&&t(Er),w(k$),w(R$),w(e0),w(P$),w(r0),f&&t(pXe),f&&t(Ff),w(B$),f&&t(_Xe),f&&t(Cr),w(I$),w(q$),w(a0),w(j$),w(l0),f&&t(uXe),f&&t(Ef),w(G$),f&&t(bXe),f&&t(wr),w(O$),w(X$),w(d0),w(z$),w(f0)}}}const YVt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function KVt($){return JGt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class nXt extends QGt{constructor(g){super();WGt(this,g,KVt,JVt,HGt,{})}}export{nXt as default,YVt as metadata};
