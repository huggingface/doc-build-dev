import{S as Wqt,i as Qqt,s as Hqt,e as a,k as l,w as F,t as o,M as Uqt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Jqt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as DJr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Yqt(x){let g,v,p,m,u,d,h,Eo,Fi,Lf,at,Ti,Mi,bA,yf,Oe,We,Ei,Sn,vA,Rn,Pn,FA,Ci,Bn,TA,wi,xf,ya;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Fi=a("code"),Lf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ti=a("code"),Mi=o('"new-model"'),bA=o(")."),yf=l(),Oe=a("p"),We=o("Likewise, if your "),Ei=a("code"),Sn=o("NewModel"),vA=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),FA=o(`, make sure its
`),Ci=a("code"),Bn=o("config_class"),TA=o(` attribute is set to the same class you use when registering the model (here
`),wi=a("code"),xf=o("NewModelConfig"),ya=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Hk=s(p);m=r(Hk,"NewModelConfig"),Hk.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ai=s(d);h=r(Ai,"PretrainedConfig"),Ai.forEach(t),Eo=r(Ae,`, make sure its
`),Fi=n(Ae,"CODE",{});var Uk=s(Fi);Lf=r(Uk,"model_type"),Uk.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ti=n(Ae,"CODE",{});var Jk=s(Ti);Mi=r(Jk,'"new-model"'),Jk.forEach(t),bA=r(Ae,")."),Ae.forEach(t),yf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Ei=n(Co,"CODE",{});var xa=s(Ei);Sn=r(xa,"NewModel"),xa.forEach(t),vA=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Yk=s(Rn);Pn=r(Yk,"PreTrainedModel"),Yk.forEach(t),FA=r(Co,`, make sure its
`),Ci=n(Co,"CODE",{});var $f=s(Ci);Bn=r($f,"config_class"),$f.forEach(t),TA=r(Co,` attribute is set to the same class you use when registering the model (here
`),wi=n(Co,"CODE",{});var Kk=s(wi);xf=r(Kk,"NewModelConfig"),Kk.forEach(t),ya=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,Fi),e(Fi,Lf),e(g,at),e(g,Ti),e(Ti,Mi),e(g,bA),b(Qe,yf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Ei),e(Ei,Sn),e(Oe,vA),e(Oe,Rn),e(Rn,Pn),e(Oe,FA),e(Oe,Ci),e(Ci,Bn),e(Oe,TA),e(Oe,wi),e(wi,xf),e(Oe,ya)},d(Qe){Qe&&t(g),Qe&&t(yf),Qe&&t(Oe)}}}function Kqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zqt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ejt(x){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function ojt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rjt(x){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function tjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ajt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function njt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ljt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ijt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function djt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ujt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _jt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ejt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ajt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ljt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $jt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ijt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Njt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Djt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ojt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ujt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ADt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Dt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ODt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JDt(x){let g,v,p,m,u,d,h,Eo,Fi,Lf,at,Ti,Mi,bA,yf,Oe,We,Ei,Sn,vA,Rn,Pn,FA,Ci,Bn,TA,wi,xf,ya,Qe,Ae,Hk,Ai,Uk,Jk,Co,xa,Yk,$f,Kk,wze,cGe,Li,kf,Hre,MA,Aze,Ure,Lze,fGe,In,yze,Jre,xze,$ze,Yre,kze,Sze,mGe,EA,gGe,Zk,Rze,hGe,Sf,pGe,yi,Rf,Kre,CA,Pze,Zre,Bze,uGe,wo,wA,Ize,AA,Nze,eS,qze,jze,Dze,LA,Gze,ete,Oze,Vze,Xze,wr,yA,zze,ote,Wze,Qze,xi,Hze,rte,Uze,Jze,tte,Yze,Kze,Zze,A,Pf,ate,eWe,oWe,oS,rWe,tWe,aWe,Bf,nte,nWe,sWe,rS,lWe,iWe,dWe,If,ste,cWe,fWe,tS,mWe,gWe,hWe,Nf,lte,pWe,uWe,aS,_We,bWe,vWe,qf,ite,FWe,TWe,nS,MWe,EWe,CWe,jf,dte,wWe,AWe,sS,LWe,yWe,xWe,Df,cte,$We,kWe,lS,SWe,RWe,PWe,Gf,fte,BWe,IWe,iS,NWe,qWe,jWe,Of,mte,DWe,GWe,dS,OWe,VWe,XWe,Vf,gte,zWe,WWe,cS,QWe,HWe,UWe,Xf,hte,JWe,YWe,fS,KWe,ZWe,eQe,zf,pte,oQe,rQe,mS,tQe,aQe,nQe,Wf,ute,sQe,lQe,gS,iQe,dQe,cQe,Qf,_te,fQe,mQe,hS,gQe,hQe,pQe,Hf,bte,uQe,_Qe,pS,bQe,vQe,FQe,Uf,vte,TQe,MQe,uS,EQe,CQe,wQe,Jf,Fte,AQe,LQe,_S,yQe,xQe,$Qe,Yf,Tte,kQe,SQe,bS,RQe,PQe,BQe,Kf,Mte,IQe,NQe,vS,qQe,jQe,DQe,Zf,Ete,GQe,OQe,FS,VQe,XQe,zQe,em,Cte,WQe,QQe,TS,HQe,UQe,JQe,om,wte,YQe,KQe,MS,ZQe,eHe,oHe,rm,Ate,rHe,tHe,ES,aHe,nHe,sHe,tm,Lte,lHe,iHe,CS,dHe,cHe,fHe,am,yte,mHe,gHe,wS,hHe,pHe,uHe,nm,xte,_He,bHe,AS,vHe,FHe,THe,sm,$te,MHe,EHe,LS,CHe,wHe,AHe,lm,kte,LHe,yHe,yS,xHe,$He,kHe,im,Ste,SHe,RHe,xS,PHe,BHe,IHe,dm,Rte,NHe,qHe,$S,jHe,DHe,GHe,cm,Pte,OHe,VHe,kS,XHe,zHe,WHe,fm,Bte,QHe,HHe,SS,UHe,JHe,YHe,mm,Ite,KHe,ZHe,RS,eUe,oUe,rUe,gm,Nte,tUe,aUe,PS,nUe,sUe,lUe,hm,qte,iUe,dUe,BS,cUe,fUe,mUe,pm,jte,gUe,hUe,IS,pUe,uUe,_Ue,um,Dte,bUe,vUe,NS,FUe,TUe,MUe,_m,Gte,EUe,CUe,qS,wUe,AUe,LUe,bm,Ote,yUe,xUe,jS,$Ue,kUe,SUe,vm,Vte,RUe,PUe,DS,BUe,IUe,NUe,Fm,Xte,qUe,jUe,GS,DUe,GUe,OUe,Tm,zte,VUe,XUe,OS,zUe,WUe,QUe,Mm,Wte,HUe,UUe,VS,JUe,YUe,KUe,Em,Qte,ZUe,eJe,XS,oJe,rJe,tJe,Cm,Hte,aJe,nJe,zS,sJe,lJe,iJe,wm,Ute,dJe,cJe,WS,fJe,mJe,gJe,Am,Jte,hJe,pJe,QS,uJe,_Je,bJe,Lm,Yte,vJe,FJe,HS,TJe,MJe,EJe,ym,Kte,CJe,wJe,US,AJe,LJe,yJe,xm,Zte,xJe,$Je,JS,kJe,SJe,RJe,$m,eae,PJe,BJe,YS,IJe,NJe,qJe,km,oae,jJe,DJe,KS,GJe,OJe,VJe,Sm,rae,XJe,zJe,ZS,WJe,QJe,HJe,Rm,tae,UJe,JJe,eR,YJe,KJe,ZJe,Pm,aae,eYe,oYe,oR,rYe,tYe,aYe,Bm,nae,nYe,sYe,rR,lYe,iYe,dYe,Im,sae,cYe,fYe,tR,mYe,gYe,hYe,Nm,lae,pYe,uYe,aR,_Ye,bYe,vYe,qm,iae,FYe,TYe,nR,MYe,EYe,CYe,jm,dae,wYe,AYe,sR,LYe,yYe,xYe,Dm,cae,$Ye,kYe,lR,SYe,RYe,PYe,Gm,fae,BYe,IYe,iR,NYe,qYe,jYe,Om,mae,DYe,GYe,dR,OYe,VYe,XYe,Vm,gae,zYe,WYe,cR,QYe,HYe,UYe,Xm,hae,JYe,YYe,fR,KYe,ZYe,eKe,zm,pae,oKe,rKe,mR,tKe,aKe,nKe,Wm,uae,sKe,lKe,gR,iKe,dKe,cKe,Qm,_ae,fKe,mKe,hR,gKe,hKe,pKe,Hm,bae,uKe,_Ke,pR,bKe,vKe,FKe,Um,vae,TKe,MKe,uR,EKe,CKe,wKe,Jm,Fae,AKe,LKe,_R,yKe,xKe,$Ke,Ym,Tae,kKe,SKe,bR,RKe,PKe,BKe,Km,Mae,IKe,NKe,vR,qKe,jKe,DKe,Zm,Eae,GKe,OKe,FR,VKe,XKe,zKe,eg,Cae,WKe,QKe,TR,HKe,UKe,JKe,og,wae,YKe,KKe,MR,ZKe,eZe,oZe,rg,Aae,rZe,tZe,ER,aZe,nZe,sZe,tg,Lae,lZe,iZe,CR,dZe,cZe,fZe,ag,yae,mZe,gZe,wR,hZe,pZe,uZe,ng,xae,_Ze,bZe,AR,vZe,FZe,TZe,sg,$ae,MZe,EZe,LR,CZe,wZe,AZe,lg,kae,LZe,yZe,yR,xZe,$Ze,kZe,ig,Sae,SZe,RZe,xR,PZe,BZe,IZe,dg,Rae,NZe,qZe,$R,jZe,DZe,GZe,cg,Pae,OZe,VZe,kR,XZe,zZe,WZe,fg,Bae,QZe,HZe,SR,UZe,JZe,YZe,mg,Iae,KZe,ZZe,RR,eeo,oeo,reo,gg,Nae,teo,aeo,PR,neo,seo,leo,hg,qae,ieo,deo,BR,ceo,feo,meo,pg,jae,geo,heo,IR,peo,ueo,_eo,ug,Dae,beo,veo,NR,Feo,Teo,Meo,_g,Gae,Eeo,Ceo,qR,weo,Aeo,Leo,bg,Oae,yeo,xeo,jR,$eo,keo,Seo,vg,Vae,Reo,Peo,DR,Beo,Ieo,Neo,Fg,Xae,qeo,jeo,GR,Deo,Geo,Oeo,Tg,zae,Veo,Xeo,OR,zeo,Weo,Qeo,Mg,Wae,Heo,Ueo,VR,Jeo,Yeo,Keo,Eg,Qae,Zeo,eoo,XR,ooo,roo,too,Cg,Hae,aoo,noo,zR,soo,loo,ioo,wg,Uae,doo,coo,WR,foo,moo,goo,Ag,Jae,hoo,poo,QR,uoo,_oo,boo,Lg,Yae,voo,Foo,HR,Too,Moo,Eoo,yg,Kae,Coo,woo,UR,Aoo,Loo,yoo,xg,Zae,xoo,$oo,JR,koo,Soo,Roo,$g,ene,Poo,Boo,YR,Ioo,Noo,qoo,kg,one,joo,Doo,KR,Goo,Ooo,Voo,Sg,rne,Xoo,zoo,ZR,Woo,Qoo,Hoo,Rg,tne,Uoo,Joo,eP,Yoo,Koo,Zoo,Pg,ane,ero,oro,oP,rro,tro,aro,Bg,nne,nro,sro,rP,lro,iro,dro,Ig,sne,cro,fro,tP,mro,gro,hro,Ng,lne,pro,uro,aP,_ro,bro,vro,qg,ine,Fro,Tro,nP,Mro,Ero,Cro,jg,dne,wro,Aro,sP,Lro,yro,xro,Dg,$ro,Gg,xA,kro,cne,Sro,_Ge,$i,Og,fne,$A,Rro,mne,Pro,bGe,Ao,kA,Bro,SA,Iro,lP,Nro,qro,jro,RA,Dro,gne,Gro,Oro,Vro,Ar,PA,Xro,hne,zro,Wro,$a,Qro,pne,Hro,Uro,une,Jro,Yro,_ne,Kro,Zro,eto,k,Nn,bne,oto,rto,iP,tto,ato,dP,nto,sto,lto,qn,vne,ito,dto,cP,cto,fto,fP,mto,gto,hto,jn,Fne,pto,uto,mP,_to,bto,gP,vto,Fto,Tto,Vg,Tne,Mto,Eto,hP,Cto,wto,Ato,Dn,Mne,Lto,yto,pP,xto,$to,uP,kto,Sto,Rto,Xg,Ene,Pto,Bto,_P,Ito,Nto,qto,zg,Cne,jto,Dto,bP,Gto,Oto,Vto,Wg,wne,Xto,zto,vP,Wto,Qto,Hto,Gn,Ane,Uto,Jto,FP,Yto,Kto,TP,Zto,eao,oao,On,Lne,rao,tao,MP,aao,nao,EP,sao,lao,iao,Vn,yne,dao,cao,CP,fao,mao,wP,gao,hao,pao,Qg,xne,uao,_ao,AP,bao,vao,Fao,Hg,$ne,Tao,Mao,LP,Eao,Cao,wao,Ug,kne,Aao,Lao,yP,yao,xao,$ao,Xn,Sne,kao,Sao,xP,Rao,Pao,$P,Bao,Iao,Nao,Jg,Rne,qao,jao,kP,Dao,Gao,Oao,zn,Pne,Vao,Xao,SP,zao,Wao,RP,Qao,Hao,Uao,Wn,Bne,Jao,Yao,PP,Kao,Zao,BP,eno,ono,rno,Qn,Ine,tno,ano,IP,nno,sno,NP,lno,ino,dno,Yg,Nne,cno,fno,qP,mno,gno,hno,Hn,qne,pno,uno,jP,_no,bno,DP,vno,Fno,Tno,Un,jne,Mno,Eno,GP,Cno,wno,OP,Ano,Lno,yno,Jn,Dne,xno,$no,VP,kno,Sno,XP,Rno,Pno,Bno,Yn,Gne,Ino,Nno,zP,qno,jno,WP,Dno,Gno,Ono,Kn,One,Vno,Xno,QP,zno,Wno,HP,Qno,Hno,Uno,Zn,Vne,Jno,Yno,UP,Kno,Zno,JP,eso,oso,rso,Kg,Xne,tso,aso,YP,nso,sso,lso,es,zne,iso,dso,KP,cso,fso,ZP,mso,gso,hso,Zg,Wne,pso,uso,eB,_so,bso,vso,os,Qne,Fso,Tso,oB,Mso,Eso,rB,Cso,wso,Aso,rs,Hne,Lso,yso,tB,xso,$so,aB,kso,Sso,Rso,ts,Une,Pso,Bso,nB,Iso,Nso,sB,qso,jso,Dso,eh,Jne,Gso,Oso,lB,Vso,Xso,zso,as,Yne,Wso,Qso,iB,Hso,Uso,dB,Jso,Yso,Kso,ns,Kne,Zso,elo,cB,olo,rlo,fB,tlo,alo,nlo,oh,Zne,slo,llo,mB,ilo,dlo,clo,ss,ese,flo,mlo,gB,glo,hlo,hB,plo,ulo,_lo,rh,ose,blo,vlo,rse,Flo,Tlo,Mlo,ls,tse,Elo,Clo,pB,wlo,Alo,uB,Llo,ylo,xlo,is,ase,$lo,klo,_B,Slo,Rlo,bB,Plo,Blo,Ilo,ds,nse,Nlo,qlo,vB,jlo,Dlo,FB,Glo,Olo,Vlo,cs,sse,Xlo,zlo,TB,Wlo,Qlo,MB,Hlo,Ulo,Jlo,fs,lse,Ylo,Klo,EB,Zlo,eio,CB,oio,rio,tio,ms,ise,aio,nio,wB,sio,lio,AB,iio,dio,cio,gs,dse,fio,mio,LB,gio,hio,yB,pio,uio,_io,th,cse,bio,vio,xB,Fio,Tio,Mio,hs,fse,Eio,Cio,$B,wio,Aio,kB,Lio,yio,xio,ah,mse,$io,kio,SB,Sio,Rio,Pio,nh,gse,Bio,Iio,RB,Nio,qio,jio,ps,hse,Dio,Gio,PB,Oio,Vio,BB,Xio,zio,Wio,us,pse,Qio,Hio,IB,Uio,Jio,NB,Yio,Kio,Zio,_s,use,edo,odo,qB,rdo,tdo,jB,ado,ndo,sdo,sh,_se,ldo,ido,DB,ddo,cdo,fdo,bs,bse,mdo,gdo,GB,hdo,pdo,OB,udo,_do,bdo,vs,vse,vdo,Fdo,VB,Tdo,Mdo,XB,Edo,Cdo,wdo,Fs,Fse,Ado,Ldo,zB,ydo,xdo,WB,$do,kdo,Sdo,Ts,Tse,Rdo,Pdo,QB,Bdo,Ido,HB,Ndo,qdo,jdo,Ms,Mse,Ddo,Gdo,UB,Odo,Vdo,JB,Xdo,zdo,Wdo,lh,Ese,Qdo,Hdo,YB,Udo,Jdo,Ydo,Es,Cse,Kdo,Zdo,KB,eco,oco,ZB,rco,tco,aco,ih,wse,nco,sco,eI,lco,ico,dco,dh,Ase,cco,fco,oI,mco,gco,hco,ch,Lse,pco,uco,rI,_co,bco,vco,fh,yse,Fco,Tco,tI,Mco,Eco,Cco,Cs,xse,wco,Aco,aI,Lco,yco,nI,xco,$co,kco,mh,$se,Sco,Rco,sI,Pco,Bco,Ico,ws,kse,Nco,qco,lI,jco,Dco,iI,Gco,Oco,Vco,As,Sse,Xco,zco,dI,Wco,Qco,cI,Hco,Uco,Jco,Ls,Rse,Yco,Kco,fI,Zco,efo,mI,ofo,rfo,tfo,ys,Pse,afo,nfo,gI,sfo,lfo,hI,ifo,dfo,cfo,xs,Bse,ffo,mfo,pI,gfo,hfo,uI,pfo,ufo,_fo,$s,Ise,bfo,vfo,_I,Ffo,Tfo,bI,Mfo,Efo,Cfo,gh,Nse,wfo,Afo,vI,Lfo,yfo,xfo,hh,qse,$fo,kfo,FI,Sfo,Rfo,Pfo,ks,jse,Bfo,Ifo,TI,Nfo,qfo,MI,jfo,Dfo,Gfo,Ss,Dse,Ofo,Vfo,EI,Xfo,zfo,CI,Wfo,Qfo,Hfo,Rs,Gse,Ufo,Jfo,wI,Yfo,Kfo,AI,Zfo,emo,omo,ph,Ose,rmo,tmo,LI,amo,nmo,smo,uh,Vse,lmo,imo,yI,dmo,cmo,fmo,_h,Xse,mmo,gmo,xI,hmo,pmo,umo,Ps,zse,_mo,bmo,$I,vmo,Fmo,kI,Tmo,Mmo,Emo,Bs,Wse,Cmo,wmo,SI,Amo,Lmo,RI,ymo,xmo,$mo,bh,Qse,kmo,Smo,PI,Rmo,Pmo,Bmo,vh,Hse,Imo,Nmo,BI,qmo,jmo,Dmo,Fh,Use,Gmo,Omo,II,Vmo,Xmo,zmo,Is,Jse,Wmo,Qmo,NI,Hmo,Umo,qI,Jmo,Ymo,Kmo,Th,Yse,Zmo,ego,jI,ogo,rgo,tgo,Mh,Kse,ago,ngo,DI,sgo,lgo,igo,Ns,Zse,dgo,cgo,GI,fgo,mgo,OI,ggo,hgo,pgo,qs,ele,ugo,_go,VI,bgo,vgo,XI,Fgo,Tgo,Mgo,js,ole,Ego,Cgo,zI,wgo,Ago,WI,Lgo,ygo,xgo,Ds,rle,$go,kgo,QI,Sgo,Rgo,HI,Pgo,Bgo,Igo,Eh,Ngo,Ch,BA,qgo,tle,jgo,vGe,ki,wh,ale,IA,Dgo,nle,Ggo,FGe,Lo,NA,Ogo,qA,Vgo,UI,Xgo,zgo,Wgo,jA,Qgo,sle,Hgo,Ugo,Jgo,He,DA,Ygo,lle,Kgo,Zgo,ka,eho,ile,oho,rho,dle,tho,aho,cle,nho,sho,lho,Y,Ah,fle,iho,dho,JI,cho,fho,mho,Lh,mle,gho,hho,YI,pho,uho,_ho,yh,gle,bho,vho,KI,Fho,Tho,Mho,xh,hle,Eho,Cho,ZI,who,Aho,Lho,$h,ple,yho,xho,eN,$ho,kho,Sho,kh,ule,Rho,Pho,oN,Bho,Iho,Nho,Sh,_le,qho,jho,rN,Dho,Gho,Oho,Rh,ble,Vho,Xho,tN,zho,Who,Qho,Ph,vle,Hho,Uho,aN,Jho,Yho,Kho,Bh,Fle,Zho,epo,nN,opo,rpo,tpo,Ih,Tle,apo,npo,sN,spo,lpo,ipo,Nh,Mle,dpo,cpo,lN,fpo,mpo,gpo,qh,Ele,hpo,ppo,iN,upo,_po,bpo,jh,Cle,vpo,Fpo,dN,Tpo,Mpo,Epo,Dh,wle,Cpo,wpo,cN,Apo,Lpo,ypo,Gh,Ale,xpo,$po,fN,kpo,Spo,Rpo,Oh,Lle,Ppo,Bpo,mN,Ipo,Npo,qpo,Vh,yle,jpo,Dpo,gN,Gpo,Opo,Vpo,Xh,xle,Xpo,zpo,hN,Wpo,Qpo,Hpo,zh,$le,Upo,Jpo,pN,Ypo,Kpo,Zpo,Wh,kle,euo,ouo,uN,ruo,tuo,auo,Qh,Sle,nuo,suo,_N,luo,iuo,duo,Hh,Rle,cuo,fuo,bN,muo,guo,huo,Uh,Ple,puo,uuo,vN,_uo,buo,vuo,Jh,Ble,Fuo,Tuo,FN,Muo,Euo,Cuo,Yh,Ile,wuo,Auo,TN,Luo,yuo,xuo,Kh,Nle,$uo,kuo,MN,Suo,Ruo,Puo,Zh,qle,Buo,Iuo,EN,Nuo,quo,juo,ep,jle,Duo,Guo,CN,Ouo,Vuo,Xuo,op,Dle,zuo,Wuo,wN,Quo,Huo,Uuo,rp,Gle,Juo,Yuo,AN,Kuo,Zuo,e_o,tp,Ole,o_o,r_o,LN,t_o,a_o,n_o,ap,s_o,np,l_o,sp,GA,i_o,Vle,d_o,TGe,Si,lp,Xle,OA,c_o,zle,f_o,MGe,yo,VA,m_o,XA,g_o,yN,h_o,p_o,u_o,zA,__o,Wle,b_o,v_o,F_o,Ue,WA,T_o,Qle,M_o,E_o,Ri,C_o,Hle,w_o,A_o,Ule,L_o,y_o,x_o,he,ip,Jle,$_o,k_o,xN,S_o,R_o,P_o,dp,Yle,B_o,I_o,Kle,N_o,q_o,j_o,cp,Zle,D_o,G_o,$N,O_o,V_o,X_o,fp,eie,z_o,W_o,kN,Q_o,H_o,U_o,mp,oie,J_o,Y_o,SN,K_o,Z_o,e2o,gp,rie,o2o,r2o,RN,t2o,a2o,n2o,hp,tie,s2o,l2o,PN,i2o,d2o,c2o,pp,aie,f2o,m2o,BN,g2o,h2o,p2o,up,nie,u2o,_2o,IN,b2o,v2o,F2o,_p,sie,T2o,M2o,NN,E2o,C2o,w2o,bp,lie,A2o,L2o,qN,y2o,x2o,$2o,vp,iie,k2o,S2o,jN,R2o,P2o,B2o,Fp,die,I2o,N2o,DN,q2o,j2o,D2o,Tp,cie,G2o,O2o,GN,V2o,X2o,z2o,Mp,fie,W2o,Q2o,ON,H2o,U2o,J2o,Ep,mie,Y2o,K2o,VN,Z2o,e1o,o1o,Cp,gie,r1o,t1o,XN,a1o,n1o,s1o,wp,l1o,Ap,i1o,Lp,QA,d1o,hie,c1o,EGe,Pi,yp,pie,HA,f1o,uie,m1o,CGe,xo,UA,g1o,Bi,h1o,zN,p1o,u1o,WN,_1o,b1o,v1o,JA,F1o,_ie,T1o,M1o,E1o,nt,YA,C1o,bie,w1o,A1o,Ii,L1o,vie,y1o,x1o,QN,$1o,k1o,S1o,xp,R1o,Je,KA,P1o,Fie,B1o,I1o,Sa,N1o,Tie,q1o,j1o,Mie,D1o,G1o,Eie,O1o,V1o,X1o,y,$p,Cie,z1o,W1o,HN,Q1o,H1o,U1o,kp,wie,J1o,Y1o,UN,K1o,Z1o,ebo,Sp,Aie,obo,rbo,JN,tbo,abo,nbo,Rp,Lie,sbo,lbo,YN,ibo,dbo,cbo,Pp,yie,fbo,mbo,KN,gbo,hbo,pbo,Bp,xie,ubo,_bo,ZN,bbo,vbo,Fbo,Ip,$ie,Tbo,Mbo,eq,Ebo,Cbo,wbo,Np,kie,Abo,Lbo,oq,ybo,xbo,$bo,qp,Sie,kbo,Sbo,rq,Rbo,Pbo,Bbo,jp,Rie,Ibo,Nbo,tq,qbo,jbo,Dbo,Dp,Pie,Gbo,Obo,aq,Vbo,Xbo,zbo,Gp,Bie,Wbo,Qbo,nq,Hbo,Ubo,Jbo,Op,Iie,Ybo,Kbo,sq,Zbo,evo,ovo,Vp,Nie,rvo,tvo,lq,avo,nvo,svo,Xp,qie,lvo,ivo,iq,dvo,cvo,fvo,zp,jie,mvo,gvo,dq,hvo,pvo,uvo,Wp,Die,_vo,bvo,cq,vvo,Fvo,Tvo,Qp,Gie,Mvo,Evo,fq,Cvo,wvo,Avo,Hp,Oie,Lvo,yvo,mq,xvo,$vo,kvo,Up,Vie,Svo,Rvo,gq,Pvo,Bvo,Ivo,Jp,Xie,Nvo,qvo,hq,jvo,Dvo,Gvo,Yp,zie,Ovo,Vvo,pq,Xvo,zvo,Wvo,Kp,Wie,Qvo,Hvo,uq,Uvo,Jvo,Yvo,Zp,Qie,Kvo,Zvo,_q,eFo,oFo,rFo,eu,Hie,tFo,aFo,bq,nFo,sFo,lFo,ou,Uie,iFo,dFo,vq,cFo,fFo,mFo,ru,Jie,gFo,hFo,Fq,pFo,uFo,_Fo,tu,Yie,bFo,vFo,Tq,FFo,TFo,MFo,au,Kie,EFo,CFo,Mq,wFo,AFo,LFo,nu,Zie,yFo,xFo,Eq,$Fo,kFo,SFo,su,ede,RFo,PFo,Cq,BFo,IFo,NFo,lu,ode,qFo,jFo,wq,DFo,GFo,OFo,iu,rde,VFo,XFo,Aq,zFo,WFo,QFo,Gs,tde,HFo,UFo,Lq,JFo,YFo,yq,KFo,ZFo,e6o,du,ade,o6o,r6o,xq,t6o,a6o,n6o,cu,nde,s6o,l6o,$q,i6o,d6o,c6o,fu,sde,f6o,m6o,kq,g6o,h6o,p6o,mu,lde,u6o,_6o,Sq,b6o,v6o,F6o,gu,ide,T6o,M6o,Rq,E6o,C6o,w6o,hu,dde,A6o,L6o,Pq,y6o,x6o,$6o,pu,cde,k6o,S6o,Bq,R6o,P6o,B6o,uu,fde,I6o,N6o,Iq,q6o,j6o,D6o,_u,mde,G6o,O6o,gde,V6o,X6o,z6o,bu,hde,W6o,Q6o,Nq,H6o,U6o,J6o,vu,pde,Y6o,K6o,qq,Z6o,eTo,oTo,Fu,ude,rTo,tTo,jq,aTo,nTo,sTo,Tu,_de,lTo,iTo,Dq,dTo,cTo,fTo,Mu,bde,mTo,gTo,Gq,hTo,pTo,uTo,Eu,vde,_To,bTo,Oq,vTo,FTo,TTo,Cu,Fde,MTo,ETo,Vq,CTo,wTo,ATo,wu,Tde,LTo,yTo,Xq,xTo,$To,kTo,Au,Mde,STo,RTo,zq,PTo,BTo,ITo,Lu,Ede,NTo,qTo,Wq,jTo,DTo,GTo,yu,Cde,OTo,VTo,Qq,XTo,zTo,WTo,xu,wde,QTo,HTo,Hq,UTo,JTo,YTo,$u,Ade,KTo,ZTo,Uq,e7o,o7o,r7o,ku,Lde,t7o,a7o,Jq,n7o,s7o,l7o,Su,yde,i7o,d7o,Yq,c7o,f7o,m7o,Ru,xde,g7o,h7o,Kq,p7o,u7o,_7o,Pu,$de,b7o,v7o,Zq,F7o,T7o,M7o,Bu,kde,E7o,C7o,ej,w7o,A7o,L7o,Iu,Sde,y7o,x7o,oj,$7o,k7o,S7o,Nu,Rde,R7o,P7o,rj,B7o,I7o,N7o,qu,Pde,q7o,j7o,tj,D7o,G7o,O7o,ju,Bde,V7o,X7o,aj,z7o,W7o,Q7o,Du,Ide,H7o,U7o,nj,J7o,Y7o,K7o,Gu,Nde,Z7o,e8o,sj,o8o,r8o,t8o,Ou,qde,a8o,n8o,lj,s8o,l8o,i8o,Vu,jde,d8o,c8o,ij,f8o,m8o,g8o,Xu,Dde,h8o,p8o,dj,u8o,_8o,b8o,zu,Gde,v8o,F8o,cj,T8o,M8o,E8o,Wu,Ode,C8o,w8o,fj,A8o,L8o,y8o,Qu,Vde,x8o,$8o,mj,k8o,S8o,R8o,Hu,Xde,P8o,B8o,gj,I8o,N8o,q8o,Uu,zde,j8o,D8o,hj,G8o,O8o,V8o,Ju,Wde,X8o,z8o,pj,W8o,Q8o,H8o,Yu,Qde,U8o,J8o,uj,Y8o,K8o,Z8o,Ku,Hde,eMo,oMo,_j,rMo,tMo,aMo,Zu,Ude,nMo,sMo,bj,lMo,iMo,dMo,e_,Jde,cMo,fMo,vj,mMo,gMo,hMo,o_,Yde,pMo,uMo,Fj,_Mo,bMo,vMo,r_,Kde,FMo,TMo,Tj,MMo,EMo,CMo,t_,Zde,wMo,AMo,Mj,LMo,yMo,xMo,a_,ece,$Mo,kMo,Ej,SMo,RMo,PMo,n_,oce,BMo,IMo,Cj,NMo,qMo,jMo,s_,rce,DMo,GMo,wj,OMo,VMo,XMo,l_,tce,zMo,WMo,Aj,QMo,HMo,UMo,i_,ace,JMo,YMo,Lj,KMo,ZMo,eEo,d_,nce,oEo,rEo,yj,tEo,aEo,nEo,c_,sce,sEo,lEo,xj,iEo,dEo,cEo,f_,lce,fEo,mEo,$j,gEo,hEo,pEo,m_,ice,uEo,_Eo,kj,bEo,vEo,FEo,g_,dce,TEo,MEo,Sj,EEo,CEo,wEo,h_,cce,AEo,LEo,Rj,yEo,xEo,$Eo,p_,fce,kEo,SEo,Pj,REo,PEo,BEo,u_,mce,IEo,NEo,Bj,qEo,jEo,DEo,__,gce,GEo,OEo,Ij,VEo,XEo,zEo,b_,hce,WEo,QEo,Nj,HEo,UEo,JEo,v_,pce,YEo,KEo,qj,ZEo,e4o,o4o,F_,uce,r4o,t4o,jj,a4o,n4o,s4o,T_,_ce,l4o,i4o,Dj,d4o,c4o,f4o,M_,bce,m4o,g4o,Gj,h4o,p4o,u4o,E_,vce,_4o,b4o,Oj,v4o,F4o,T4o,C_,Fce,M4o,E4o,Vj,C4o,w4o,A4o,w_,Tce,L4o,y4o,Xj,x4o,$4o,k4o,A_,Mce,S4o,R4o,zj,P4o,B4o,I4o,L_,Ece,N4o,q4o,Wj,j4o,D4o,G4o,y_,O4o,Cce,V4o,X4o,wce,z4o,W4o,x_,wGe,Ni,$_,Ace,ZA,Q4o,Lce,H4o,AGe,$o,eL,U4o,qi,J4o,Qj,Y4o,K4o,Hj,Z4o,eCo,oCo,oL,rCo,yce,tCo,aCo,nCo,st,rL,sCo,xce,lCo,iCo,ji,dCo,$ce,cCo,fCo,Uj,mCo,gCo,hCo,k_,pCo,Ye,tL,uCo,kce,_Co,bCo,Ra,vCo,Sce,FCo,TCo,Rce,MCo,ECo,Pce,CCo,wCo,ACo,G,S_,Bce,LCo,yCo,Jj,xCo,$Co,kCo,R_,Ice,SCo,RCo,Yj,PCo,BCo,ICo,P_,Nce,NCo,qCo,Kj,jCo,DCo,GCo,B_,qce,OCo,VCo,Zj,XCo,zCo,WCo,I_,jce,QCo,HCo,eD,UCo,JCo,YCo,N_,Dce,KCo,ZCo,oD,e5o,o5o,r5o,q_,Gce,t5o,a5o,rD,n5o,s5o,l5o,j_,Oce,i5o,d5o,tD,c5o,f5o,m5o,D_,Vce,g5o,h5o,aD,p5o,u5o,_5o,G_,Xce,b5o,v5o,nD,F5o,T5o,M5o,O_,zce,E5o,C5o,sD,w5o,A5o,L5o,V_,Wce,y5o,x5o,lD,$5o,k5o,S5o,X_,Qce,R5o,P5o,iD,B5o,I5o,N5o,z_,Hce,q5o,j5o,dD,D5o,G5o,O5o,W_,Uce,V5o,X5o,cD,z5o,W5o,Q5o,Q_,Jce,H5o,U5o,fD,J5o,Y5o,K5o,H_,Yce,Z5o,e3o,mD,o3o,r3o,t3o,U_,Kce,a3o,n3o,gD,s3o,l3o,i3o,J_,Zce,d3o,c3o,hD,f3o,m3o,g3o,Y_,efe,h3o,p3o,pD,u3o,_3o,b3o,K_,ofe,v3o,F3o,uD,T3o,M3o,E3o,Z_,rfe,C3o,w3o,_D,A3o,L3o,y3o,e2,tfe,x3o,$3o,bD,k3o,S3o,R3o,o2,afe,P3o,B3o,vD,I3o,N3o,q3o,r2,nfe,j3o,D3o,FD,G3o,O3o,V3o,t2,sfe,X3o,z3o,TD,W3o,Q3o,H3o,a2,lfe,U3o,J3o,MD,Y3o,K3o,Z3o,n2,ife,e0o,o0o,ED,r0o,t0o,a0o,s2,dfe,n0o,s0o,CD,l0o,i0o,d0o,l2,cfe,c0o,f0o,wD,m0o,g0o,h0o,i2,ffe,p0o,u0o,AD,_0o,b0o,v0o,d2,mfe,F0o,T0o,LD,M0o,E0o,C0o,c2,gfe,w0o,A0o,yD,L0o,y0o,x0o,f2,hfe,$0o,k0o,xD,S0o,R0o,P0o,m2,pfe,B0o,I0o,$D,N0o,q0o,j0o,g2,ufe,D0o,G0o,kD,O0o,V0o,X0o,h2,_fe,z0o,W0o,SD,Q0o,H0o,U0o,p2,bfe,J0o,Y0o,RD,K0o,Z0o,ewo,u2,vfe,owo,rwo,PD,two,awo,nwo,_2,Ffe,swo,lwo,BD,iwo,dwo,cwo,b2,Tfe,fwo,mwo,ID,gwo,hwo,pwo,v2,Mfe,uwo,_wo,ND,bwo,vwo,Fwo,F2,Efe,Two,Mwo,qD,Ewo,Cwo,wwo,T2,Awo,Cfe,Lwo,ywo,wfe,xwo,$wo,M2,LGe,Di,E2,Afe,aL,kwo,Lfe,Swo,yGe,ko,nL,Rwo,Gi,Pwo,jD,Bwo,Iwo,DD,Nwo,qwo,jwo,sL,Dwo,yfe,Gwo,Owo,Vwo,lt,lL,Xwo,xfe,zwo,Wwo,Oi,Qwo,$fe,Hwo,Uwo,GD,Jwo,Ywo,Kwo,C2,Zwo,Ke,iL,eAo,kfe,oAo,rAo,Pa,tAo,Sfe,aAo,nAo,Rfe,sAo,lAo,Pfe,iAo,dAo,cAo,z,w2,Bfe,fAo,mAo,OD,gAo,hAo,pAo,A2,Ife,uAo,_Ao,VD,bAo,vAo,FAo,L2,Nfe,TAo,MAo,XD,EAo,CAo,wAo,y2,qfe,AAo,LAo,zD,yAo,xAo,$Ao,x2,jfe,kAo,SAo,WD,RAo,PAo,BAo,$2,Dfe,IAo,NAo,QD,qAo,jAo,DAo,k2,Gfe,GAo,OAo,HD,VAo,XAo,zAo,S2,Ofe,WAo,QAo,UD,HAo,UAo,JAo,R2,Vfe,YAo,KAo,JD,ZAo,eLo,oLo,P2,Xfe,rLo,tLo,YD,aLo,nLo,sLo,B2,zfe,lLo,iLo,KD,dLo,cLo,fLo,I2,Wfe,mLo,gLo,ZD,hLo,pLo,uLo,N2,Qfe,_Lo,bLo,eG,vLo,FLo,TLo,q2,Hfe,MLo,ELo,oG,CLo,wLo,ALo,j2,Ufe,LLo,yLo,rG,xLo,$Lo,kLo,D2,Jfe,SLo,RLo,tG,PLo,BLo,ILo,G2,Yfe,NLo,qLo,aG,jLo,DLo,GLo,O2,Kfe,OLo,VLo,nG,XLo,zLo,WLo,V2,Zfe,QLo,HLo,sG,ULo,JLo,YLo,X2,eme,KLo,ZLo,lG,eyo,oyo,ryo,z2,ome,tyo,ayo,iG,nyo,syo,lyo,W2,rme,iyo,dyo,dG,cyo,fyo,myo,Q2,tme,gyo,hyo,cG,pyo,uyo,_yo,H2,ame,byo,vyo,fG,Fyo,Tyo,Myo,U2,nme,Eyo,Cyo,mG,wyo,Ayo,Lyo,J2,sme,yyo,xyo,gG,$yo,kyo,Syo,Y2,lme,Ryo,Pyo,hG,Byo,Iyo,Nyo,K2,ime,qyo,jyo,pG,Dyo,Gyo,Oyo,Z2,dme,Vyo,Xyo,uG,zyo,Wyo,Qyo,e1,cme,Hyo,Uyo,_G,Jyo,Yyo,Kyo,o1,fme,Zyo,e9o,bG,o9o,r9o,t9o,r1,mme,a9o,n9o,vG,s9o,l9o,i9o,t1,gme,d9o,c9o,FG,f9o,m9o,g9o,a1,hme,h9o,p9o,TG,u9o,_9o,b9o,n1,pme,v9o,F9o,MG,T9o,M9o,E9o,s1,ume,C9o,w9o,EG,A9o,L9o,y9o,l1,_me,x9o,$9o,CG,k9o,S9o,R9o,i1,bme,P9o,B9o,wG,I9o,N9o,q9o,d1,j9o,vme,D9o,G9o,Fme,O9o,V9o,c1,xGe,Vi,f1,Tme,dL,X9o,Mme,z9o,$Ge,So,cL,W9o,Xi,Q9o,AG,H9o,U9o,LG,J9o,Y9o,K9o,fL,Z9o,Eme,exo,oxo,rxo,it,mL,txo,Cme,axo,nxo,zi,sxo,wme,lxo,ixo,yG,dxo,cxo,fxo,m1,mxo,Ze,gL,gxo,Ame,hxo,pxo,Ba,uxo,Lme,_xo,bxo,yme,vxo,Fxo,xme,Txo,Mxo,Exo,Q,g1,$me,Cxo,wxo,xG,Axo,Lxo,yxo,h1,kme,xxo,$xo,$G,kxo,Sxo,Rxo,p1,Sme,Pxo,Bxo,kG,Ixo,Nxo,qxo,u1,Rme,jxo,Dxo,SG,Gxo,Oxo,Vxo,_1,Pme,Xxo,zxo,RG,Wxo,Qxo,Hxo,b1,Bme,Uxo,Jxo,PG,Yxo,Kxo,Zxo,v1,Ime,e$o,o$o,BG,r$o,t$o,a$o,F1,Nme,n$o,s$o,IG,l$o,i$o,d$o,T1,qme,c$o,f$o,NG,m$o,g$o,h$o,M1,jme,p$o,u$o,qG,_$o,b$o,v$o,E1,Dme,F$o,T$o,jG,M$o,E$o,C$o,C1,Gme,w$o,A$o,DG,L$o,y$o,x$o,w1,Ome,$$o,k$o,GG,S$o,R$o,P$o,A1,Vme,B$o,I$o,OG,N$o,q$o,j$o,L1,Xme,D$o,G$o,VG,O$o,V$o,X$o,y1,zme,z$o,W$o,XG,Q$o,H$o,U$o,x1,Wme,J$o,Y$o,zG,K$o,Z$o,eko,$1,Qme,oko,rko,WG,tko,ako,nko,k1,Hme,sko,lko,QG,iko,dko,cko,S1,Ume,fko,mko,HG,gko,hko,pko,R1,Jme,uko,_ko,UG,bko,vko,Fko,P1,Yme,Tko,Mko,JG,Eko,Cko,wko,B1,Kme,Ako,Lko,YG,yko,xko,$ko,I1,Zme,kko,Sko,KG,Rko,Pko,Bko,N1,ege,Iko,Nko,ZG,qko,jko,Dko,q1,oge,Gko,Oko,eO,Vko,Xko,zko,j1,rge,Wko,Qko,oO,Hko,Uko,Jko,D1,tge,Yko,Kko,rO,Zko,eSo,oSo,G1,age,rSo,tSo,tO,aSo,nSo,sSo,O1,nge,lSo,iSo,aO,dSo,cSo,fSo,V1,sge,mSo,gSo,nO,hSo,pSo,uSo,X1,lge,_So,bSo,ige,vSo,FSo,TSo,z1,dge,MSo,ESo,sO,CSo,wSo,ASo,W1,cge,LSo,ySo,lO,xSo,$So,kSo,Q1,fge,SSo,RSo,iO,PSo,BSo,ISo,H1,mge,NSo,qSo,dO,jSo,DSo,GSo,U1,OSo,gge,VSo,XSo,hge,zSo,WSo,J1,kGe,Wi,Y1,pge,hL,QSo,uge,HSo,SGe,Ro,pL,USo,Qi,JSo,cO,YSo,KSo,fO,ZSo,eRo,oRo,uL,rRo,_ge,tRo,aRo,nRo,dt,_L,sRo,bge,lRo,iRo,Hi,dRo,vge,cRo,fRo,mO,mRo,gRo,hRo,K1,pRo,eo,bL,uRo,Fge,_Ro,bRo,Ia,vRo,Tge,FRo,TRo,Mge,MRo,ERo,Ege,CRo,wRo,ARo,pe,Z1,Cge,LRo,yRo,gO,xRo,$Ro,kRo,eb,wge,SRo,RRo,hO,PRo,BRo,IRo,ob,Age,NRo,qRo,pO,jRo,DRo,GRo,rb,Lge,ORo,VRo,uO,XRo,zRo,WRo,tb,yge,QRo,HRo,_O,URo,JRo,YRo,ab,xge,KRo,ZRo,bO,ePo,oPo,rPo,nb,$ge,tPo,aPo,vO,nPo,sPo,lPo,sb,kge,iPo,dPo,FO,cPo,fPo,mPo,lb,Sge,gPo,hPo,TO,pPo,uPo,_Po,ib,Rge,bPo,vPo,MO,FPo,TPo,MPo,db,Pge,EPo,CPo,EO,wPo,APo,LPo,cb,Bge,yPo,xPo,CO,$Po,kPo,SPo,fb,Ige,RPo,PPo,wO,BPo,IPo,NPo,mb,Nge,qPo,jPo,AO,DPo,GPo,OPo,gb,qge,VPo,XPo,LO,zPo,WPo,QPo,hb,jge,HPo,UPo,yO,JPo,YPo,KPo,pb,Dge,ZPo,eBo,xO,oBo,rBo,tBo,ub,aBo,Gge,nBo,sBo,Oge,lBo,iBo,_b,RGe,Ui,bb,Vge,vL,dBo,Xge,cBo,PGe,Po,FL,fBo,Ji,mBo,$O,gBo,hBo,kO,pBo,uBo,_Bo,TL,bBo,zge,vBo,FBo,TBo,ct,ML,MBo,Wge,EBo,CBo,Yi,wBo,Qge,ABo,LBo,SO,yBo,xBo,$Bo,vb,kBo,oo,EL,SBo,Hge,RBo,PBo,Na,BBo,Uge,IBo,NBo,Jge,qBo,jBo,Yge,DBo,GBo,OBo,N,Fb,Kge,VBo,XBo,RO,zBo,WBo,QBo,Tb,Zge,HBo,UBo,PO,JBo,YBo,KBo,Mb,ehe,ZBo,eIo,BO,oIo,rIo,tIo,Eb,ohe,aIo,nIo,IO,sIo,lIo,iIo,Cb,rhe,dIo,cIo,NO,fIo,mIo,gIo,wb,the,hIo,pIo,qO,uIo,_Io,bIo,Ab,ahe,vIo,FIo,jO,TIo,MIo,EIo,Lb,nhe,CIo,wIo,DO,AIo,LIo,yIo,yb,she,xIo,$Io,GO,kIo,SIo,RIo,xb,lhe,PIo,BIo,OO,IIo,NIo,qIo,$b,ihe,jIo,DIo,VO,GIo,OIo,VIo,kb,dhe,XIo,zIo,XO,WIo,QIo,HIo,Sb,che,UIo,JIo,zO,YIo,KIo,ZIo,Rb,fhe,eNo,oNo,WO,rNo,tNo,aNo,Pb,mhe,nNo,sNo,QO,lNo,iNo,dNo,Bb,ghe,cNo,fNo,HO,mNo,gNo,hNo,Ib,hhe,pNo,uNo,UO,_No,bNo,vNo,Nb,phe,FNo,TNo,JO,MNo,ENo,CNo,qb,uhe,wNo,ANo,YO,LNo,yNo,xNo,jb,_he,$No,kNo,KO,SNo,RNo,PNo,Db,bhe,BNo,INo,ZO,NNo,qNo,jNo,Gb,vhe,DNo,GNo,eV,ONo,VNo,XNo,Ob,Fhe,zNo,WNo,oV,QNo,HNo,UNo,Vb,The,JNo,YNo,rV,KNo,ZNo,eqo,Xb,Mhe,oqo,rqo,tV,tqo,aqo,nqo,zb,Ehe,sqo,lqo,aV,iqo,dqo,cqo,Wb,Che,fqo,mqo,nV,gqo,hqo,pqo,Qb,whe,uqo,_qo,sV,bqo,vqo,Fqo,Hb,Ahe,Tqo,Mqo,lV,Eqo,Cqo,wqo,Ub,Lhe,Aqo,Lqo,iV,yqo,xqo,$qo,Jb,yhe,kqo,Sqo,dV,Rqo,Pqo,Bqo,Yb,xhe,Iqo,Nqo,cV,qqo,jqo,Dqo,Kb,$he,Gqo,Oqo,fV,Vqo,Xqo,zqo,Zb,khe,Wqo,Qqo,mV,Hqo,Uqo,Jqo,ev,She,Yqo,Kqo,gV,Zqo,ejo,ojo,ov,Rhe,rjo,tjo,hV,ajo,njo,sjo,rv,Phe,ljo,ijo,pV,djo,cjo,fjo,tv,Bhe,mjo,gjo,uV,hjo,pjo,ujo,av,Ihe,_jo,bjo,_V,vjo,Fjo,Tjo,nv,Nhe,Mjo,Ejo,bV,Cjo,wjo,Ajo,sv,qhe,Ljo,yjo,vV,xjo,$jo,kjo,lv,jhe,Sjo,Rjo,FV,Pjo,Bjo,Ijo,iv,Dhe,Njo,qjo,TV,jjo,Djo,Gjo,dv,Ghe,Ojo,Vjo,MV,Xjo,zjo,Wjo,cv,Ohe,Qjo,Hjo,EV,Ujo,Jjo,Yjo,fv,Vhe,Kjo,Zjo,CV,eDo,oDo,rDo,mv,Xhe,tDo,aDo,wV,nDo,sDo,lDo,gv,zhe,iDo,dDo,AV,cDo,fDo,mDo,hv,gDo,Whe,hDo,pDo,Qhe,uDo,_Do,pv,BGe,Ki,uv,Hhe,CL,bDo,Uhe,vDo,IGe,Bo,wL,FDo,Zi,TDo,LV,MDo,EDo,yV,CDo,wDo,ADo,AL,LDo,Jhe,yDo,xDo,$Do,ft,LL,kDo,Yhe,SDo,RDo,ed,PDo,Khe,BDo,IDo,xV,NDo,qDo,jDo,_v,DDo,ro,yL,GDo,Zhe,ODo,VDo,qa,XDo,epe,zDo,WDo,ope,QDo,HDo,rpe,UDo,JDo,YDo,Z,bv,tpe,KDo,ZDo,$V,eGo,oGo,rGo,vv,ape,tGo,aGo,kV,nGo,sGo,lGo,Fv,npe,iGo,dGo,SV,cGo,fGo,mGo,Tv,spe,gGo,hGo,RV,pGo,uGo,_Go,Mv,lpe,bGo,vGo,PV,FGo,TGo,MGo,Ev,ipe,EGo,CGo,BV,wGo,AGo,LGo,Cv,dpe,yGo,xGo,IV,$Go,kGo,SGo,wv,cpe,RGo,PGo,NV,BGo,IGo,NGo,Av,fpe,qGo,jGo,qV,DGo,GGo,OGo,Lv,mpe,VGo,XGo,jV,zGo,WGo,QGo,yv,gpe,HGo,UGo,DV,JGo,YGo,KGo,xv,hpe,ZGo,eOo,GV,oOo,rOo,tOo,$v,ppe,aOo,nOo,OV,sOo,lOo,iOo,kv,upe,dOo,cOo,VV,fOo,mOo,gOo,Sv,_pe,hOo,pOo,XV,uOo,_Oo,bOo,Rv,bpe,vOo,FOo,zV,TOo,MOo,EOo,Pv,vpe,COo,wOo,WV,AOo,LOo,yOo,Bv,Fpe,xOo,$Oo,QV,kOo,SOo,ROo,Iv,Tpe,POo,BOo,HV,IOo,NOo,qOo,Nv,Mpe,jOo,DOo,UV,GOo,OOo,VOo,qv,Epe,XOo,zOo,JV,WOo,QOo,HOo,jv,Cpe,UOo,JOo,YV,YOo,KOo,ZOo,Dv,wpe,eVo,oVo,KV,rVo,tVo,aVo,Gv,Ape,nVo,sVo,ZV,lVo,iVo,dVo,Ov,Lpe,cVo,fVo,eX,mVo,gVo,hVo,Vv,ype,pVo,uVo,oX,_Vo,bVo,vVo,Xv,xpe,FVo,TVo,rX,MVo,EVo,CVo,zv,$pe,wVo,AVo,tX,LVo,yVo,xVo,Wv,kpe,$Vo,kVo,aX,SVo,RVo,PVo,Qv,BVo,Spe,IVo,NVo,Rpe,qVo,jVo,Hv,NGe,od,Uv,Ppe,xL,DVo,Bpe,GVo,qGe,Io,$L,OVo,rd,VVo,nX,XVo,zVo,sX,WVo,QVo,HVo,kL,UVo,Ipe,JVo,YVo,KVo,mt,SL,ZVo,Npe,eXo,oXo,td,rXo,qpe,tXo,aXo,lX,nXo,sXo,lXo,Jv,iXo,to,RL,dXo,jpe,cXo,fXo,ja,mXo,Dpe,gXo,hXo,Gpe,pXo,uXo,Ope,_Xo,bXo,vXo,Zr,Yv,Vpe,FXo,TXo,iX,MXo,EXo,CXo,Kv,Xpe,wXo,AXo,dX,LXo,yXo,xXo,Zv,zpe,$Xo,kXo,cX,SXo,RXo,PXo,eF,Wpe,BXo,IXo,fX,NXo,qXo,jXo,oF,Qpe,DXo,GXo,mX,OXo,VXo,XXo,rF,zXo,Hpe,WXo,QXo,Upe,HXo,UXo,tF,jGe,ad,aF,Jpe,PL,JXo,Ype,YXo,DGe,No,BL,KXo,nd,ZXo,gX,ezo,ozo,hX,rzo,tzo,azo,IL,nzo,Kpe,szo,lzo,izo,gt,NL,dzo,Zpe,czo,fzo,sd,mzo,eue,gzo,hzo,pX,pzo,uzo,_zo,nF,bzo,ao,qL,vzo,oue,Fzo,Tzo,Da,Mzo,rue,Ezo,Czo,tue,wzo,Azo,aue,Lzo,yzo,xzo,H,sF,nue,$zo,kzo,uX,Szo,Rzo,Pzo,lF,sue,Bzo,Izo,_X,Nzo,qzo,jzo,iF,lue,Dzo,Gzo,bX,Ozo,Vzo,Xzo,dF,iue,zzo,Wzo,vX,Qzo,Hzo,Uzo,cF,due,Jzo,Yzo,FX,Kzo,Zzo,eWo,fF,cue,oWo,rWo,TX,tWo,aWo,nWo,mF,fue,sWo,lWo,MX,iWo,dWo,cWo,gF,mue,fWo,mWo,EX,gWo,hWo,pWo,hF,gue,uWo,_Wo,CX,bWo,vWo,FWo,pF,hue,TWo,MWo,wX,EWo,CWo,wWo,uF,pue,AWo,LWo,AX,yWo,xWo,$Wo,_F,uue,kWo,SWo,LX,RWo,PWo,BWo,bF,_ue,IWo,NWo,yX,qWo,jWo,DWo,vF,bue,GWo,OWo,xX,VWo,XWo,zWo,FF,vue,WWo,QWo,$X,HWo,UWo,JWo,TF,Fue,YWo,KWo,kX,ZWo,eQo,oQo,MF,Tue,rQo,tQo,SX,aQo,nQo,sQo,EF,Mue,lQo,iQo,RX,dQo,cQo,fQo,CF,Eue,mQo,gQo,PX,hQo,pQo,uQo,wF,Cue,_Qo,bQo,BX,vQo,FQo,TQo,AF,wue,MQo,EQo,IX,CQo,wQo,AQo,LF,Aue,LQo,yQo,NX,xQo,$Qo,kQo,yF,Lue,SQo,RQo,qX,PQo,BQo,IQo,xF,yue,NQo,qQo,jX,jQo,DQo,GQo,$F,xue,OQo,VQo,DX,XQo,zQo,WQo,kF,$ue,QQo,HQo,GX,UQo,JQo,YQo,SF,kue,KQo,ZQo,OX,eHo,oHo,rHo,RF,Sue,tHo,aHo,VX,nHo,sHo,lHo,PF,Rue,iHo,dHo,XX,cHo,fHo,mHo,BF,Pue,gHo,hHo,zX,pHo,uHo,_Ho,IF,Bue,bHo,vHo,WX,FHo,THo,MHo,NF,Iue,EHo,CHo,QX,wHo,AHo,LHo,qF,Nue,yHo,xHo,HX,$Ho,kHo,SHo,jF,que,RHo,PHo,UX,BHo,IHo,NHo,DF,jue,qHo,jHo,JX,DHo,GHo,OHo,GF,VHo,Due,XHo,zHo,Gue,WHo,QHo,OF,GGe,ld,VF,Oue,jL,HHo,Vue,UHo,OGe,qo,DL,JHo,id,YHo,YX,KHo,ZHo,KX,eUo,oUo,rUo,GL,tUo,Xue,aUo,nUo,sUo,ht,OL,lUo,zue,iUo,dUo,dd,cUo,Wue,fUo,mUo,ZX,gUo,hUo,pUo,XF,uUo,no,VL,_Uo,Que,bUo,vUo,Ga,FUo,Hue,TUo,MUo,Uue,EUo,CUo,Jue,wUo,AUo,LUo,V,zF,Yue,yUo,xUo,ez,$Uo,kUo,SUo,WF,Kue,RUo,PUo,oz,BUo,IUo,NUo,QF,Zue,qUo,jUo,rz,DUo,GUo,OUo,HF,e_e,VUo,XUo,tz,zUo,WUo,QUo,UF,o_e,HUo,UUo,az,JUo,YUo,KUo,JF,r_e,ZUo,eJo,nz,oJo,rJo,tJo,YF,t_e,aJo,nJo,sz,sJo,lJo,iJo,KF,a_e,dJo,cJo,lz,fJo,mJo,gJo,ZF,n_e,hJo,pJo,iz,uJo,_Jo,bJo,e6,s_e,vJo,FJo,dz,TJo,MJo,EJo,o6,l_e,CJo,wJo,cz,AJo,LJo,yJo,r6,i_e,xJo,$Jo,fz,kJo,SJo,RJo,t6,d_e,PJo,BJo,mz,IJo,NJo,qJo,a6,c_e,jJo,DJo,gz,GJo,OJo,VJo,n6,f_e,XJo,zJo,hz,WJo,QJo,HJo,s6,m_e,UJo,JJo,pz,YJo,KJo,ZJo,l6,g_e,eYo,oYo,uz,rYo,tYo,aYo,i6,h_e,nYo,sYo,_z,lYo,iYo,dYo,d6,p_e,cYo,fYo,bz,mYo,gYo,hYo,c6,u_e,pYo,uYo,vz,_Yo,bYo,vYo,f6,__e,FYo,TYo,Fz,MYo,EYo,CYo,m6,b_e,wYo,AYo,Tz,LYo,yYo,xYo,g6,v_e,$Yo,kYo,Mz,SYo,RYo,PYo,h6,F_e,BYo,IYo,Ez,NYo,qYo,jYo,p6,T_e,DYo,GYo,Cz,OYo,VYo,XYo,u6,M_e,zYo,WYo,wz,QYo,HYo,UYo,_6,E_e,JYo,YYo,Az,KYo,ZYo,eKo,b6,C_e,oKo,rKo,Lz,tKo,aKo,nKo,v6,w_e,sKo,lKo,yz,iKo,dKo,cKo,F6,A_e,fKo,mKo,xz,gKo,hKo,pKo,T6,L_e,uKo,_Ko,$z,bKo,vKo,FKo,M6,y_e,TKo,MKo,kz,EKo,CKo,wKo,E6,x_e,AKo,LKo,Sz,yKo,xKo,$Ko,C6,$_e,kKo,SKo,Rz,RKo,PKo,BKo,w6,k_e,IKo,NKo,Pz,qKo,jKo,DKo,A6,S_e,GKo,OKo,Bz,VKo,XKo,zKo,L6,R_e,WKo,QKo,Iz,HKo,UKo,JKo,y6,P_e,YKo,KKo,Nz,ZKo,eZo,oZo,x6,B_e,rZo,tZo,qz,aZo,nZo,sZo,$6,I_e,lZo,iZo,jz,dZo,cZo,fZo,k6,mZo,N_e,gZo,hZo,q_e,pZo,uZo,S6,VGe,cd,R6,j_e,XL,_Zo,D_e,bZo,XGe,jo,zL,vZo,fd,FZo,Dz,TZo,MZo,Gz,EZo,CZo,wZo,WL,AZo,G_e,LZo,yZo,xZo,pt,QL,$Zo,O_e,kZo,SZo,md,RZo,V_e,PZo,BZo,Oz,IZo,NZo,qZo,P6,jZo,so,HL,DZo,X_e,GZo,OZo,Oa,VZo,z_e,XZo,zZo,W_e,WZo,QZo,Q_e,HZo,UZo,JZo,H_e,B6,U_e,YZo,KZo,Vz,ZZo,eer,oer,I6,rer,J_e,ter,aer,Y_e,ner,ser,N6,zGe,gd,q6,K_e,UL,ler,Z_e,ier,WGe,Do,JL,der,hd,cer,Xz,fer,mer,zz,ger,her,per,YL,uer,e2e,_er,ber,ver,ut,KL,Fer,o2e,Ter,Mer,pd,Eer,r2e,Cer,wer,Wz,Aer,Ler,yer,j6,xer,lo,ZL,$er,t2e,ker,Ser,Va,Rer,a2e,Per,Ber,n2e,Ier,Ner,s2e,qer,jer,Der,Fe,D6,l2e,Ger,Oer,Qz,Ver,Xer,zer,G6,i2e,Wer,Qer,Hz,Her,Uer,Jer,O6,d2e,Yer,Ker,Uz,Zer,eor,oor,V6,c2e,ror,tor,Jz,aor,nor,sor,Os,f2e,lor,ior,Yz,dor,cor,Kz,mor,gor,hor,X6,m2e,por,uor,Zz,_or,bor,vor,Vs,g2e,For,Tor,eW,Mor,Eor,oW,Cor,wor,Aor,_t,h2e,Lor,yor,rW,xor,$or,tW,kor,Sor,aW,Ror,Por,Bor,z6,p2e,Ior,Nor,nW,qor,jor,Dor,W6,u2e,Gor,Oor,sW,Vor,Xor,zor,Q6,_2e,Wor,Qor,lW,Hor,Uor,Jor,H6,b2e,Yor,Kor,iW,Zor,err,orr,U6,v2e,rrr,trr,dW,arr,nrr,srr,J6,F2e,lrr,irr,cW,drr,crr,frr,Y6,T2e,mrr,grr,fW,hrr,prr,urr,K6,_rr,M2e,brr,vrr,E2e,Frr,Trr,Z6,QGe,ud,eT,C2e,ey,Mrr,w2e,Err,HGe,Go,oy,Crr,_d,wrr,mW,Arr,Lrr,gW,yrr,xrr,$rr,ry,krr,A2e,Srr,Rrr,Prr,bt,ty,Brr,L2e,Irr,Nrr,bd,qrr,y2e,jrr,Drr,hW,Grr,Orr,Vrr,oT,Xrr,io,ay,zrr,x2e,Wrr,Qrr,Xa,Hrr,$2e,Urr,Jrr,k2e,Yrr,Krr,S2e,Zrr,etr,otr,R2e,rT,P2e,rtr,ttr,pW,atr,ntr,str,tT,ltr,B2e,itr,dtr,I2e,ctr,ftr,aT,UGe,vd,nT,N2e,ny,mtr,q2e,gtr,JGe,Oo,sy,htr,Fd,ptr,uW,utr,_tr,_W,btr,vtr,Ftr,ly,Ttr,j2e,Mtr,Etr,Ctr,vt,iy,wtr,D2e,Atr,Ltr,Td,ytr,G2e,xtr,$tr,bW,ktr,Str,Rtr,sT,Ptr,co,dy,Btr,O2e,Itr,Ntr,za,qtr,V2e,jtr,Dtr,X2e,Gtr,Otr,z2e,Vtr,Xtr,ztr,W2e,lT,Q2e,Wtr,Qtr,vW,Htr,Utr,Jtr,iT,Ytr,H2e,Ktr,Ztr,U2e,ear,oar,dT,YGe,Md,cT,J2e,cy,rar,Y2e,tar,KGe,Vo,fy,aar,Ed,nar,FW,sar,lar,TW,iar,dar,car,my,far,K2e,mar,gar,har,Ft,gy,par,Z2e,uar,_ar,Cd,bar,e1e,Far,Tar,MW,Mar,Ear,Car,fT,war,fo,hy,Aar,o1e,Lar,yar,Wa,xar,r1e,$ar,kar,t1e,Sar,Rar,a1e,Par,Bar,Iar,Pe,mT,n1e,Nar,qar,EW,jar,Dar,Gar,gT,s1e,Oar,Var,CW,Xar,zar,War,hT,l1e,Qar,Har,wW,Uar,Jar,Yar,pT,i1e,Kar,Zar,AW,enr,onr,rnr,uT,d1e,tnr,anr,LW,nnr,snr,lnr,_T,c1e,inr,dnr,yW,cnr,fnr,mnr,bT,f1e,gnr,hnr,xW,pnr,unr,_nr,vT,m1e,bnr,vnr,$W,Fnr,Tnr,Mnr,FT,g1e,Enr,Cnr,kW,wnr,Anr,Lnr,TT,ynr,h1e,xnr,$nr,p1e,knr,Snr,MT,ZGe,wd,ET,u1e,py,Rnr,_1e,Pnr,eOe,Xo,uy,Bnr,Ad,Inr,SW,Nnr,qnr,RW,jnr,Dnr,Gnr,_y,Onr,b1e,Vnr,Xnr,znr,Tt,by,Wnr,v1e,Qnr,Hnr,Ld,Unr,F1e,Jnr,Ynr,PW,Knr,Znr,esr,CT,osr,mo,vy,rsr,T1e,tsr,asr,Qa,nsr,M1e,ssr,lsr,E1e,isr,dsr,C1e,csr,fsr,msr,et,wT,w1e,gsr,hsr,BW,psr,usr,_sr,AT,A1e,bsr,vsr,IW,Fsr,Tsr,Msr,LT,L1e,Esr,Csr,NW,wsr,Asr,Lsr,yT,y1e,ysr,xsr,qW,$sr,ksr,Ssr,xT,x1e,Rsr,Psr,jW,Bsr,Isr,Nsr,$T,qsr,$1e,jsr,Dsr,k1e,Gsr,Osr,kT,oOe,yd,ST,S1e,Fy,Vsr,R1e,Xsr,rOe,zo,Ty,zsr,xd,Wsr,DW,Qsr,Hsr,GW,Usr,Jsr,Ysr,My,Ksr,P1e,Zsr,elr,olr,Mt,Ey,rlr,B1e,tlr,alr,$d,nlr,I1e,slr,llr,OW,ilr,dlr,clr,RT,flr,go,Cy,mlr,N1e,glr,hlr,Ha,plr,q1e,ulr,_lr,j1e,blr,vlr,D1e,Flr,Tlr,Mlr,Le,PT,G1e,Elr,Clr,VW,wlr,Alr,Llr,BT,O1e,ylr,xlr,XW,$lr,klr,Slr,IT,V1e,Rlr,Plr,zW,Blr,Ilr,Nlr,NT,X1e,qlr,jlr,WW,Dlr,Glr,Olr,qT,z1e,Vlr,Xlr,QW,zlr,Wlr,Qlr,jT,W1e,Hlr,Ulr,HW,Jlr,Ylr,Klr,DT,Q1e,Zlr,eir,UW,oir,rir,tir,GT,H1e,air,nir,JW,sir,lir,iir,OT,U1e,dir,cir,YW,fir,mir,gir,VT,J1e,hir,pir,KW,uir,_ir,bir,XT,vir,Y1e,Fir,Tir,K1e,Mir,Eir,zT,tOe,kd,WT,Z1e,wy,Cir,ebe,wir,aOe,Wo,Ay,Air,Sd,Lir,ZW,yir,xir,eQ,$ir,kir,Sir,Ly,Rir,obe,Pir,Bir,Iir,Et,yy,Nir,rbe,qir,jir,Rd,Dir,tbe,Gir,Oir,oQ,Vir,Xir,zir,QT,Wir,ho,xy,Qir,abe,Hir,Uir,Ua,Jir,nbe,Yir,Kir,sbe,Zir,edr,lbe,odr,rdr,tdr,$y,HT,ibe,adr,ndr,rQ,sdr,ldr,idr,UT,dbe,ddr,cdr,tQ,fdr,mdr,gdr,JT,hdr,cbe,pdr,udr,fbe,_dr,bdr,YT,nOe,Pd,KT,mbe,ky,vdr,gbe,Fdr,sOe,Qo,Sy,Tdr,Bd,Mdr,aQ,Edr,Cdr,nQ,wdr,Adr,Ldr,Ry,ydr,hbe,xdr,$dr,kdr,Ct,Py,Sdr,pbe,Rdr,Pdr,Id,Bdr,ube,Idr,Ndr,sQ,qdr,jdr,Ddr,ZT,Gdr,po,By,Odr,_be,Vdr,Xdr,Ja,zdr,bbe,Wdr,Qdr,vbe,Hdr,Udr,Fbe,Jdr,Ydr,Kdr,ot,e7,Tbe,Zdr,ecr,lQ,ocr,rcr,tcr,o7,Mbe,acr,ncr,iQ,scr,lcr,icr,r7,Ebe,dcr,ccr,dQ,fcr,mcr,gcr,t7,Cbe,hcr,pcr,cQ,ucr,_cr,bcr,a7,wbe,vcr,Fcr,fQ,Tcr,Mcr,Ecr,n7,Ccr,Abe,wcr,Acr,Lbe,Lcr,ycr,s7,lOe,Nd,l7,ybe,Iy,xcr,xbe,$cr,iOe,Ho,Ny,kcr,qd,Scr,mQ,Rcr,Pcr,gQ,Bcr,Icr,Ncr,qy,qcr,$be,jcr,Dcr,Gcr,wt,jy,Ocr,kbe,Vcr,Xcr,jd,zcr,Sbe,Wcr,Qcr,hQ,Hcr,Ucr,Jcr,i7,Ycr,uo,Dy,Kcr,Rbe,Zcr,efr,Ya,ofr,Pbe,rfr,tfr,Bbe,afr,nfr,Ibe,sfr,lfr,ifr,Dd,d7,Nbe,dfr,cfr,pQ,ffr,mfr,gfr,c7,qbe,hfr,pfr,uQ,ufr,_fr,bfr,f7,jbe,vfr,Ffr,_Q,Tfr,Mfr,Efr,m7,Cfr,Dbe,wfr,Afr,Gbe,Lfr,yfr,g7,dOe,Gd,h7,Obe,Gy,xfr,Vbe,$fr,cOe,Uo,Oy,kfr,Od,Sfr,bQ,Rfr,Pfr,vQ,Bfr,Ifr,Nfr,Vy,qfr,Xbe,jfr,Dfr,Gfr,At,Xy,Ofr,zbe,Vfr,Xfr,Vd,zfr,Wbe,Wfr,Qfr,FQ,Hfr,Ufr,Jfr,p7,Yfr,_o,zy,Kfr,Qbe,Zfr,emr,Ka,omr,Hbe,rmr,tmr,Ube,amr,nmr,Jbe,smr,lmr,imr,Wy,u7,Ybe,dmr,cmr,TQ,fmr,mmr,gmr,_7,Kbe,hmr,pmr,MQ,umr,_mr,bmr,b7,vmr,Zbe,Fmr,Tmr,eve,Mmr,Emr,v7,fOe,Xd,F7,ove,Qy,Cmr,rve,wmr,mOe,Jo,Hy,Amr,zd,Lmr,EQ,ymr,xmr,CQ,$mr,kmr,Smr,Uy,Rmr,tve,Pmr,Bmr,Imr,Lt,Jy,Nmr,ave,qmr,jmr,Wd,Dmr,nve,Gmr,Omr,wQ,Vmr,Xmr,zmr,T7,Wmr,bo,Yy,Qmr,sve,Hmr,Umr,Za,Jmr,lve,Ymr,Kmr,ive,Zmr,egr,dve,ogr,rgr,tgr,cve,M7,fve,agr,ngr,AQ,sgr,lgr,igr,E7,dgr,mve,cgr,fgr,gve,mgr,ggr,C7,gOe,Qd,w7,hve,Ky,hgr,pve,pgr,hOe,Yo,Zy,ugr,Hd,_gr,LQ,bgr,vgr,yQ,Fgr,Tgr,Mgr,e9,Egr,uve,Cgr,wgr,Agr,yt,o9,Lgr,_ve,ygr,xgr,Ud,$gr,bve,kgr,Sgr,xQ,Rgr,Pgr,Bgr,A7,Igr,vo,r9,Ngr,vve,qgr,jgr,en,Dgr,Fve,Ggr,Ogr,Tve,Vgr,Xgr,Mve,zgr,Wgr,Qgr,on,L7,Eve,Hgr,Ugr,$Q,Jgr,Ygr,Kgr,y7,Cve,Zgr,ehr,kQ,ohr,rhr,thr,x7,wve,ahr,nhr,SQ,shr,lhr,ihr,$7,Ave,dhr,chr,RQ,fhr,mhr,ghr,k7,hhr,Lve,phr,uhr,yve,_hr,bhr,S7,pOe,Jd,R7,xve,t9,vhr,$ve,Fhr,uOe,Ko,a9,Thr,Yd,Mhr,PQ,Ehr,Chr,BQ,whr,Ahr,Lhr,n9,yhr,kve,xhr,$hr,khr,xt,s9,Shr,Sve,Rhr,Phr,Kd,Bhr,Rve,Ihr,Nhr,IQ,qhr,jhr,Dhr,P7,Ghr,Fo,l9,Ohr,Pve,Vhr,Xhr,rn,zhr,Bve,Whr,Qhr,Ive,Hhr,Uhr,Nve,Jhr,Yhr,Khr,qve,B7,jve,Zhr,epr,NQ,opr,rpr,tpr,I7,apr,Dve,npr,spr,Gve,lpr,ipr,N7,_Oe,Zd,q7,Ove,i9,dpr,Vve,cpr,bOe,Zo,d9,fpr,ec,mpr,qQ,gpr,hpr,jQ,ppr,upr,_pr,c9,bpr,Xve,vpr,Fpr,Tpr,$t,f9,Mpr,zve,Epr,Cpr,oc,wpr,Wve,Apr,Lpr,DQ,ypr,xpr,$pr,j7,kpr,Lr,m9,Spr,Qve,Rpr,Ppr,tn,Bpr,Hve,Ipr,Npr,Uve,qpr,jpr,Jve,Dpr,Gpr,Opr,q,D7,Yve,Vpr,Xpr,GQ,zpr,Wpr,Qpr,G7,Kve,Hpr,Upr,OQ,Jpr,Ypr,Kpr,O7,Zve,Zpr,eur,VQ,our,rur,tur,V7,eFe,aur,nur,XQ,sur,lur,iur,X7,oFe,dur,cur,zQ,fur,mur,gur,z7,rFe,hur,pur,WQ,uur,_ur,bur,W7,tFe,vur,Fur,QQ,Tur,Mur,Eur,Q7,aFe,Cur,wur,HQ,Aur,Lur,yur,H7,nFe,xur,$ur,UQ,kur,Sur,Rur,U7,sFe,Pur,Bur,JQ,Iur,Nur,qur,J7,lFe,jur,Dur,YQ,Gur,Our,Vur,Y7,iFe,Xur,zur,KQ,Wur,Qur,Hur,K7,dFe,Uur,Jur,ZQ,Yur,Kur,Zur,Z7,cFe,e_r,o_r,eH,r_r,t_r,a_r,e8,fFe,n_r,s_r,oH,l_r,i_r,d_r,o8,mFe,c_r,f_r,rH,m_r,g_r,h_r,r8,gFe,p_r,u_r,tH,__r,b_r,v_r,Xs,hFe,F_r,T_r,aH,M_r,E_r,nH,C_r,w_r,A_r,t8,pFe,L_r,y_r,sH,x_r,$_r,k_r,a8,uFe,S_r,R_r,lH,P_r,B_r,I_r,n8,_Fe,N_r,q_r,iH,j_r,D_r,G_r,s8,bFe,O_r,V_r,dH,X_r,z_r,W_r,l8,vFe,Q_r,H_r,cH,U_r,J_r,Y_r,i8,FFe,K_r,Z_r,fH,e2r,o2r,r2r,d8,TFe,t2r,a2r,mH,n2r,s2r,l2r,c8,MFe,i2r,d2r,gH,c2r,f2r,m2r,f8,EFe,g2r,h2r,hH,p2r,u2r,_2r,m8,CFe,b2r,v2r,pH,F2r,T2r,M2r,g8,wFe,E2r,C2r,uH,w2r,A2r,L2r,h8,AFe,y2r,x2r,_H,$2r,k2r,S2r,p8,LFe,R2r,P2r,bH,B2r,I2r,N2r,u8,yFe,q2r,j2r,vH,D2r,G2r,O2r,_8,xFe,V2r,X2r,FH,z2r,W2r,Q2r,b8,$Fe,H2r,U2r,TH,J2r,Y2r,K2r,v8,kFe,Z2r,e1r,MH,o1r,r1r,t1r,F8,SFe,a1r,n1r,EH,s1r,l1r,i1r,T8,RFe,d1r,c1r,CH,f1r,m1r,g1r,M8,PFe,h1r,p1r,wH,u1r,_1r,b1r,E8,BFe,v1r,F1r,AH,T1r,M1r,E1r,C8,IFe,C1r,w1r,LH,A1r,L1r,y1r,w8,NFe,x1r,$1r,yH,k1r,S1r,R1r,A8,qFe,P1r,B1r,xH,I1r,N1r,q1r,L8,jFe,j1r,D1r,$H,G1r,O1r,V1r,y8,DFe,X1r,z1r,kH,W1r,Q1r,H1r,x8,GFe,U1r,J1r,SH,Y1r,K1r,Z1r,$8,OFe,ebr,obr,RH,rbr,tbr,abr,k8,VFe,nbr,sbr,PH,lbr,ibr,dbr,S8,vOe,rc,R8,XFe,g9,cbr,zFe,fbr,FOe,er,h9,mbr,tc,gbr,BH,hbr,pbr,IH,ubr,_br,bbr,p9,vbr,WFe,Fbr,Tbr,Mbr,kt,u9,Ebr,QFe,Cbr,wbr,ac,Abr,HFe,Lbr,ybr,NH,xbr,$br,kbr,P8,Sbr,yr,_9,Rbr,UFe,Pbr,Bbr,an,Ibr,JFe,Nbr,qbr,YFe,jbr,Dbr,KFe,Gbr,Obr,Vbr,se,B8,ZFe,Xbr,zbr,qH,Wbr,Qbr,Hbr,I8,e6e,Ubr,Jbr,jH,Ybr,Kbr,Zbr,N8,o6e,evr,ovr,DH,rvr,tvr,avr,q8,r6e,nvr,svr,GH,lvr,ivr,dvr,j8,t6e,cvr,fvr,OH,mvr,gvr,hvr,D8,a6e,pvr,uvr,VH,_vr,bvr,vvr,G8,n6e,Fvr,Tvr,XH,Mvr,Evr,Cvr,O8,s6e,wvr,Avr,zH,Lvr,yvr,xvr,V8,l6e,$vr,kvr,WH,Svr,Rvr,Pvr,X8,i6e,Bvr,Ivr,QH,Nvr,qvr,jvr,z8,d6e,Dvr,Gvr,HH,Ovr,Vvr,Xvr,W8,c6e,zvr,Wvr,UH,Qvr,Hvr,Uvr,Q8,f6e,Jvr,Yvr,JH,Kvr,Zvr,eFr,H8,m6e,oFr,rFr,YH,tFr,aFr,nFr,U8,g6e,sFr,lFr,KH,iFr,dFr,cFr,J8,h6e,fFr,mFr,ZH,gFr,hFr,pFr,Y8,p6e,uFr,_Fr,eU,bFr,vFr,FFr,K8,u6e,TFr,MFr,oU,EFr,CFr,wFr,Z8,_6e,AFr,LFr,rU,yFr,xFr,$Fr,eM,b6e,kFr,SFr,tU,RFr,PFr,BFr,oM,v6e,IFr,NFr,aU,qFr,jFr,DFr,rM,F6e,GFr,OFr,nU,VFr,XFr,zFr,tM,T6e,WFr,QFr,sU,HFr,UFr,JFr,aM,TOe,nc,nM,M6e,b9,YFr,E6e,KFr,MOe,or,v9,ZFr,sc,e6r,lU,o6r,r6r,iU,t6r,a6r,n6r,F9,s6r,C6e,l6r,i6r,d6r,St,T9,c6r,w6e,f6r,m6r,lc,g6r,A6e,h6r,p6r,dU,u6r,_6r,b6r,sM,v6r,xr,M9,F6r,L6e,T6r,M6r,nn,E6r,y6e,C6r,w6r,x6e,A6r,L6r,$6e,y6r,x6r,$6r,Me,lM,k6e,k6r,S6r,cU,R6r,P6r,B6r,iM,S6e,I6r,N6r,fU,q6r,j6r,D6r,dM,R6e,G6r,O6r,mU,V6r,X6r,z6r,cM,P6e,W6r,Q6r,gU,H6r,U6r,J6r,fM,B6e,Y6r,K6r,hU,Z6r,eTr,oTr,mM,I6e,rTr,tTr,pU,aTr,nTr,sTr,gM,N6e,lTr,iTr,uU,dTr,cTr,fTr,hM,q6e,mTr,gTr,_U,hTr,pTr,uTr,pM,j6e,_Tr,bTr,bU,vTr,FTr,TTr,uM,D6e,MTr,ETr,vU,CTr,wTr,ATr,_M,G6e,LTr,yTr,FU,xTr,$Tr,kTr,bM,O6e,STr,RTr,TU,PTr,BTr,ITr,vM,V6e,NTr,qTr,MU,jTr,DTr,GTr,FM,EOe,ic,TM,X6e,E9,OTr,z6e,VTr,COe,rr,C9,XTr,dc,zTr,EU,WTr,QTr,CU,HTr,UTr,JTr,w9,YTr,W6e,KTr,ZTr,e7r,Rt,A9,o7r,Q6e,r7r,t7r,cc,a7r,H6e,n7r,s7r,wU,l7r,i7r,d7r,MM,c7r,$r,L9,f7r,U6e,m7r,g7r,sn,h7r,J6e,p7r,u7r,Y6e,_7r,b7r,K6e,v7r,F7r,T7r,ln,EM,Z6e,M7r,E7r,AU,C7r,w7r,A7r,CM,eTe,L7r,y7r,LU,x7r,$7r,k7r,wM,oTe,S7r,R7r,yU,P7r,B7r,I7r,AM,rTe,N7r,q7r,xU,j7r,D7r,G7r,LM,wOe,fc,yM,tTe,y9,O7r,aTe,V7r,AOe,tr,x9,X7r,mc,z7r,$U,W7r,Q7r,kU,H7r,U7r,J7r,$9,Y7r,nTe,K7r,Z7r,e8r,Pt,k9,o8r,sTe,r8r,t8r,gc,a8r,lTe,n8r,s8r,SU,l8r,i8r,d8r,xM,c8r,kr,S9,f8r,iTe,m8r,g8r,dn,h8r,dTe,p8r,u8r,cTe,_8r,b8r,fTe,v8r,F8r,T8r,ie,$M,mTe,M8r,E8r,RU,C8r,w8r,A8r,kM,gTe,L8r,y8r,PU,x8r,$8r,k8r,SM,hTe,S8r,R8r,BU,P8r,B8r,I8r,RM,pTe,N8r,q8r,IU,j8r,D8r,G8r,PM,uTe,O8r,V8r,NU,X8r,z8r,W8r,BM,_Te,Q8r,H8r,qU,U8r,J8r,Y8r,IM,bTe,K8r,Z8r,jU,eMr,oMr,rMr,NM,vTe,tMr,aMr,DU,nMr,sMr,lMr,qM,FTe,iMr,dMr,GU,cMr,fMr,mMr,jM,TTe,gMr,hMr,OU,pMr,uMr,_Mr,DM,MTe,bMr,vMr,VU,FMr,TMr,MMr,GM,ETe,EMr,CMr,XU,wMr,AMr,LMr,OM,CTe,yMr,xMr,zU,$Mr,kMr,SMr,VM,wTe,RMr,PMr,WU,BMr,IMr,NMr,XM,ATe,qMr,jMr,QU,DMr,GMr,OMr,zM,LTe,VMr,XMr,HU,zMr,WMr,QMr,WM,yTe,HMr,UMr,UU,JMr,YMr,KMr,QM,xTe,ZMr,eEr,JU,oEr,rEr,tEr,HM,$Te,aEr,nEr,YU,sEr,lEr,iEr,UM,kTe,dEr,cEr,KU,fEr,mEr,gEr,JM,LOe,hc,YM,STe,R9,hEr,RTe,pEr,yOe,ar,P9,uEr,pc,_Er,ZU,bEr,vEr,eJ,FEr,TEr,MEr,B9,EEr,PTe,CEr,wEr,AEr,Bt,I9,LEr,BTe,yEr,xEr,uc,$Er,ITe,kEr,SEr,oJ,REr,PEr,BEr,KM,IEr,Sr,N9,NEr,NTe,qEr,jEr,cn,DEr,qTe,GEr,OEr,jTe,VEr,XEr,DTe,zEr,WEr,QEr,ye,ZM,GTe,HEr,UEr,rJ,JEr,YEr,KEr,eE,OTe,ZEr,e4r,tJ,o4r,r4r,t4r,oE,VTe,a4r,n4r,aJ,s4r,l4r,i4r,rE,XTe,d4r,c4r,nJ,f4r,m4r,g4r,tE,zTe,h4r,p4r,sJ,u4r,_4r,b4r,aE,WTe,v4r,F4r,lJ,T4r,M4r,E4r,nE,QTe,C4r,w4r,iJ,A4r,L4r,y4r,sE,HTe,x4r,$4r,dJ,k4r,S4r,R4r,lE,UTe,P4r,B4r,cJ,I4r,N4r,q4r,iE,JTe,j4r,D4r,fJ,G4r,O4r,V4r,dE,xOe,_c,cE,YTe,q9,X4r,KTe,z4r,$Oe,nr,j9,W4r,bc,Q4r,mJ,H4r,U4r,gJ,J4r,Y4r,K4r,D9,Z4r,ZTe,eCr,oCr,rCr,It,G9,tCr,e7e,aCr,nCr,vc,sCr,o7e,lCr,iCr,hJ,dCr,cCr,fCr,fE,mCr,Rr,O9,gCr,r7e,hCr,pCr,fn,uCr,t7e,_Cr,bCr,a7e,vCr,FCr,n7e,TCr,MCr,ECr,te,mE,s7e,CCr,wCr,pJ,ACr,LCr,yCr,gE,l7e,xCr,$Cr,uJ,kCr,SCr,RCr,hE,i7e,PCr,BCr,_J,ICr,NCr,qCr,pE,d7e,jCr,DCr,bJ,GCr,OCr,VCr,uE,c7e,XCr,zCr,vJ,WCr,QCr,HCr,_E,f7e,UCr,JCr,FJ,YCr,KCr,ZCr,bE,m7e,e5r,o5r,TJ,r5r,t5r,a5r,vE,g7e,n5r,s5r,MJ,l5r,i5r,d5r,FE,h7e,c5r,f5r,EJ,m5r,g5r,h5r,TE,p7e,p5r,u5r,CJ,_5r,b5r,v5r,ME,u7e,F5r,T5r,wJ,M5r,E5r,C5r,EE,_7e,w5r,A5r,AJ,L5r,y5r,x5r,CE,b7e,$5r,k5r,LJ,S5r,R5r,P5r,wE,v7e,B5r,I5r,yJ,N5r,q5r,j5r,AE,F7e,D5r,G5r,xJ,O5r,V5r,X5r,LE,T7e,z5r,W5r,$J,Q5r,H5r,U5r,yE,M7e,J5r,Y5r,kJ,K5r,Z5r,e3r,xE,E7e,o3r,r3r,SJ,t3r,a3r,n3r,$E,C7e,s3r,l3r,RJ,i3r,d3r,c3r,kE,w7e,f3r,m3r,PJ,g3r,h3r,p3r,SE,A7e,u3r,_3r,BJ,b3r,v3r,F3r,RE,L7e,T3r,M3r,IJ,E3r,C3r,w3r,PE,y7e,A3r,L3r,NJ,y3r,x3r,$3r,BE,x7e,k3r,S3r,qJ,R3r,P3r,B3r,IE,$7e,I3r,N3r,jJ,q3r,j3r,D3r,NE,k7e,G3r,O3r,DJ,V3r,X3r,z3r,qE,kOe,Fc,jE,S7e,V9,W3r,R7e,Q3r,SOe,sr,X9,H3r,Tc,U3r,GJ,J3r,Y3r,OJ,K3r,Z3r,e0r,z9,o0r,P7e,r0r,t0r,a0r,Nt,W9,n0r,B7e,s0r,l0r,Mc,i0r,I7e,d0r,c0r,VJ,f0r,m0r,g0r,DE,h0r,Pr,Q9,p0r,N7e,u0r,_0r,mn,b0r,q7e,v0r,F0r,j7e,T0r,M0r,D7e,E0r,C0r,w0r,ue,GE,G7e,A0r,L0r,XJ,y0r,x0r,$0r,OE,O7e,k0r,S0r,zJ,R0r,P0r,B0r,VE,V7e,I0r,N0r,WJ,q0r,j0r,D0r,XE,X7e,G0r,O0r,QJ,V0r,X0r,z0r,zE,z7e,W0r,Q0r,HJ,H0r,U0r,J0r,WE,W7e,Y0r,K0r,UJ,Z0r,ewr,owr,QE,Q7e,rwr,twr,JJ,awr,nwr,swr,HE,H7e,lwr,iwr,YJ,dwr,cwr,fwr,UE,U7e,mwr,gwr,KJ,hwr,pwr,uwr,JE,J7e,_wr,bwr,ZJ,vwr,Fwr,Twr,YE,Y7e,Mwr,Ewr,eY,Cwr,wwr,Awr,KE,K7e,Lwr,ywr,oY,xwr,$wr,kwr,ZE,Z7e,Swr,Rwr,rY,Pwr,Bwr,Iwr,e4,e8e,Nwr,qwr,tY,jwr,Dwr,Gwr,o4,o8e,Owr,Vwr,aY,Xwr,zwr,Wwr,r4,r8e,Qwr,Hwr,nY,Uwr,Jwr,Ywr,t4,t8e,Kwr,Zwr,sY,eAr,oAr,rAr,a4,ROe,Ec,n4,a8e,H9,tAr,n8e,aAr,POe,lr,U9,nAr,Cc,sAr,lY,lAr,iAr,iY,dAr,cAr,fAr,J9,mAr,s8e,gAr,hAr,pAr,qt,Y9,uAr,l8e,_Ar,bAr,wc,vAr,i8e,FAr,TAr,dY,MAr,EAr,CAr,s4,wAr,Br,K9,AAr,d8e,LAr,yAr,gn,xAr,c8e,$Ar,kAr,f8e,SAr,RAr,m8e,PAr,BAr,IAr,Z9,l4,g8e,NAr,qAr,cY,jAr,DAr,GAr,i4,h8e,OAr,VAr,fY,XAr,zAr,WAr,d4,BOe,Ac,c4,p8e,ex,QAr,u8e,HAr,IOe,ir,ox,UAr,Lc,JAr,mY,YAr,KAr,gY,ZAr,eLr,oLr,rx,rLr,_8e,tLr,aLr,nLr,jt,tx,sLr,b8e,lLr,iLr,yc,dLr,v8e,cLr,fLr,hY,mLr,gLr,hLr,f4,pLr,Ir,ax,uLr,F8e,_Lr,bLr,hn,vLr,T8e,FLr,TLr,M8e,MLr,ELr,E8e,CLr,wLr,ALr,C8e,m4,w8e,LLr,yLr,pY,xLr,$Lr,kLr,g4,NOe,xc,h4,A8e,nx,SLr,L8e,RLr,qOe,dr,sx,PLr,$c,BLr,uY,ILr,NLr,_Y,qLr,jLr,DLr,lx,GLr,y8e,OLr,VLr,XLr,Dt,ix,zLr,x8e,WLr,QLr,kc,HLr,$8e,ULr,JLr,bY,YLr,KLr,ZLr,p4,eyr,Nr,dx,oyr,k8e,ryr,tyr,pn,ayr,S8e,nyr,syr,R8e,lyr,iyr,P8e,dyr,cyr,fyr,de,u4,B8e,myr,gyr,vY,hyr,pyr,uyr,_4,I8e,_yr,byr,FY,vyr,Fyr,Tyr,b4,N8e,Myr,Eyr,TY,Cyr,wyr,Ayr,v4,q8e,Lyr,yyr,MY,xyr,$yr,kyr,F4,j8e,Syr,Ryr,EY,Pyr,Byr,Iyr,T4,D8e,Nyr,qyr,CY,jyr,Dyr,Gyr,M4,G8e,Oyr,Vyr,wY,Xyr,zyr,Wyr,E4,O8e,Qyr,Hyr,AY,Uyr,Jyr,Yyr,C4,V8e,Kyr,Zyr,LY,e9r,o9r,r9r,w4,X8e,t9r,a9r,yY,n9r,s9r,l9r,A4,z8e,i9r,d9r,xY,c9r,f9r,m9r,L4,W8e,g9r,h9r,$Y,p9r,u9r,_9r,y4,Q8e,b9r,v9r,kY,F9r,T9r,M9r,x4,H8e,E9r,C9r,SY,w9r,A9r,L9r,$4,U8e,y9r,x9r,RY,$9r,k9r,S9r,k4,J8e,R9r,P9r,PY,B9r,I9r,N9r,S4,Y8e,q9r,j9r,BY,D9r,G9r,O9r,R4,K8e,V9r,X9r,IY,z9r,W9r,Q9r,P4,Z8e,H9r,U9r,NY,J9r,Y9r,K9r,B4,eMe,Z9r,exr,qY,oxr,rxr,txr,I4,jOe,Sc,N4,oMe,cx,axr,rMe,nxr,DOe,cr,fx,sxr,Rc,lxr,jY,ixr,dxr,DY,cxr,fxr,mxr,mx,gxr,tMe,hxr,pxr,uxr,Gt,gx,_xr,aMe,bxr,vxr,Pc,Fxr,nMe,Txr,Mxr,GY,Exr,Cxr,wxr,q4,Axr,qr,hx,Lxr,sMe,yxr,xxr,un,$xr,lMe,kxr,Sxr,iMe,Rxr,Pxr,dMe,Bxr,Ixr,Nxr,ce,j4,cMe,qxr,jxr,OY,Dxr,Gxr,Oxr,D4,fMe,Vxr,Xxr,VY,zxr,Wxr,Qxr,G4,mMe,Hxr,Uxr,XY,Jxr,Yxr,Kxr,O4,gMe,Zxr,e$r,zY,o$r,r$r,t$r,V4,hMe,a$r,n$r,WY,s$r,l$r,i$r,X4,pMe,d$r,c$r,QY,f$r,m$r,g$r,z4,uMe,h$r,p$r,HY,u$r,_$r,b$r,W4,_Me,v$r,F$r,UY,T$r,M$r,E$r,Q4,bMe,C$r,w$r,JY,A$r,L$r,y$r,H4,vMe,x$r,$$r,YY,k$r,S$r,R$r,U4,FMe,P$r,B$r,KY,I$r,N$r,q$r,J4,TMe,j$r,D$r,ZY,G$r,O$r,V$r,Y4,MMe,X$r,z$r,eK,W$r,Q$r,H$r,K4,EMe,U$r,J$r,oK,Y$r,K$r,Z$r,Z4,CMe,ekr,okr,rK,rkr,tkr,akr,eC,wMe,nkr,skr,tK,lkr,ikr,dkr,oC,AMe,ckr,fkr,aK,mkr,gkr,hkr,rC,LMe,pkr,ukr,nK,_kr,bkr,vkr,tC,yMe,Fkr,Tkr,sK,Mkr,Ekr,Ckr,aC,xMe,wkr,Akr,lK,Lkr,ykr,xkr,nC,GOe,Bc,sC,$Me,px,$kr,kMe,kkr,OOe,fr,ux,Skr,Ic,Rkr,iK,Pkr,Bkr,dK,Ikr,Nkr,qkr,_x,jkr,SMe,Dkr,Gkr,Okr,Ot,bx,Vkr,RMe,Xkr,zkr,Nc,Wkr,PMe,Qkr,Hkr,cK,Ukr,Jkr,Ykr,lC,Kkr,jr,vx,Zkr,BMe,eSr,oSr,_n,rSr,IMe,tSr,aSr,NMe,nSr,sSr,qMe,lSr,iSr,dSr,jMe,iC,DMe,cSr,fSr,fK,mSr,gSr,hSr,dC,VOe,qc,cC,GMe,Fx,pSr,OMe,uSr,XOe,mr,Tx,_Sr,jc,bSr,mK,vSr,FSr,gK,TSr,MSr,ESr,Mx,CSr,VMe,wSr,ASr,LSr,Vt,Ex,ySr,XMe,xSr,$Sr,Dc,kSr,zMe,SSr,RSr,hK,PSr,BSr,ISr,fC,NSr,Dr,Cx,qSr,WMe,jSr,DSr,bn,GSr,QMe,OSr,VSr,HMe,XSr,zSr,UMe,WSr,QSr,HSr,JMe,mC,YMe,USr,JSr,pK,YSr,KSr,ZSr,gC,zOe,Gc,hC,KMe,wx,eRr,ZMe,oRr,WOe,gr,Ax,rRr,Oc,tRr,uK,aRr,nRr,_K,sRr,lRr,iRr,Lx,dRr,eEe,cRr,fRr,mRr,Xt,yx,gRr,oEe,hRr,pRr,Vc,uRr,rEe,_Rr,bRr,bK,vRr,FRr,TRr,pC,MRr,Gr,xx,ERr,tEe,CRr,wRr,vn,ARr,aEe,LRr,yRr,nEe,xRr,$Rr,sEe,kRr,SRr,RRr,oe,uC,lEe,PRr,BRr,vK,IRr,NRr,qRr,_C,iEe,jRr,DRr,FK,GRr,ORr,VRr,bC,dEe,XRr,zRr,TK,WRr,QRr,HRr,vC,cEe,URr,JRr,MK,YRr,KRr,ZRr,FC,fEe,ePr,oPr,EK,rPr,tPr,aPr,TC,mEe,nPr,sPr,CK,lPr,iPr,dPr,MC,gEe,cPr,fPr,wK,mPr,gPr,hPr,EC,hEe,pPr,uPr,AK,_Pr,bPr,vPr,CC,pEe,FPr,TPr,LK,MPr,EPr,CPr,wC,uEe,wPr,APr,yK,LPr,yPr,xPr,AC,_Ee,$Pr,kPr,xK,SPr,RPr,PPr,LC,bEe,BPr,IPr,$K,NPr,qPr,jPr,yC,vEe,DPr,GPr,kK,OPr,VPr,XPr,xC,FEe,zPr,WPr,SK,QPr,HPr,UPr,$C,TEe,JPr,YPr,RK,KPr,ZPr,eBr,kC,MEe,oBr,rBr,PK,tBr,aBr,nBr,SC,EEe,sBr,lBr,BK,iBr,dBr,cBr,RC,CEe,fBr,mBr,IK,gBr,hBr,pBr,PC,wEe,uBr,_Br,NK,bBr,vBr,FBr,BC,AEe,TBr,MBr,qK,EBr,CBr,wBr,IC,LEe,ABr,LBr,jK,yBr,xBr,$Br,NC,yEe,kBr,SBr,DK,RBr,PBr,BBr,qC,xEe,IBr,NBr,GK,qBr,jBr,DBr,jC,$Ee,GBr,OBr,OK,VBr,XBr,zBr,DC,kEe,WBr,QBr,VK,HBr,UBr,JBr,GC,SEe,YBr,KBr,XK,ZBr,eIr,oIr,OC,REe,rIr,tIr,zK,aIr,nIr,sIr,VC,QOe,Xc,XC,PEe,$x,lIr,BEe,iIr,HOe,hr,kx,dIr,zc,cIr,WK,fIr,mIr,QK,gIr,hIr,pIr,Sx,uIr,IEe,_Ir,bIr,vIr,zt,Rx,FIr,NEe,TIr,MIr,Wc,EIr,qEe,CIr,wIr,HK,AIr,LIr,yIr,zC,xIr,Or,Px,$Ir,jEe,kIr,SIr,Fn,RIr,DEe,PIr,BIr,GEe,IIr,NIr,OEe,qIr,jIr,DIr,xe,WC,VEe,GIr,OIr,UK,VIr,XIr,zIr,QC,XEe,WIr,QIr,JK,HIr,UIr,JIr,HC,zEe,YIr,KIr,YK,ZIr,eNr,oNr,UC,WEe,rNr,tNr,KK,aNr,nNr,sNr,JC,QEe,lNr,iNr,ZK,dNr,cNr,fNr,YC,HEe,mNr,gNr,eZ,hNr,pNr,uNr,KC,UEe,_Nr,bNr,oZ,vNr,FNr,TNr,ZC,JEe,MNr,ENr,rZ,CNr,wNr,ANr,e5,YEe,LNr,yNr,tZ,xNr,$Nr,kNr,o5,KEe,SNr,RNr,aZ,PNr,BNr,INr,r5,UOe,Qc,t5,ZEe,Bx,NNr,e4e,qNr,JOe,pr,Ix,jNr,Hc,DNr,nZ,GNr,ONr,sZ,VNr,XNr,zNr,Nx,WNr,o4e,QNr,HNr,UNr,Wt,qx,JNr,r4e,YNr,KNr,Uc,ZNr,t4e,eqr,oqr,lZ,rqr,tqr,aqr,a5,nqr,Vr,jx,sqr,a4e,lqr,iqr,Tn,dqr,n4e,cqr,fqr,s4e,mqr,gqr,l4e,hqr,pqr,uqr,Ee,n5,i4e,_qr,bqr,iZ,vqr,Fqr,Tqr,s5,d4e,Mqr,Eqr,dZ,Cqr,wqr,Aqr,l5,c4e,Lqr,yqr,cZ,xqr,$qr,kqr,i5,f4e,Sqr,Rqr,fZ,Pqr,Bqr,Iqr,d5,m4e,Nqr,qqr,mZ,jqr,Dqr,Gqr,c5,g4e,Oqr,Vqr,gZ,Xqr,zqr,Wqr,f5,h4e,Qqr,Hqr,hZ,Uqr,Jqr,Yqr,m5,p4e,Kqr,Zqr,pZ,ejr,ojr,rjr,g5,u4e,tjr,ajr,uZ,njr,sjr,ljr,h5,_4e,ijr,djr,_Z,cjr,fjr,mjr,p5,b4e,gjr,hjr,bZ,pjr,ujr,_jr,u5,v4e,bjr,vjr,vZ,Fjr,Tjr,Mjr,_5,F4e,Ejr,Cjr,FZ,wjr,Ajr,Ljr,b5,YOe,Jc,v5,T4e,Dx,yjr,M4e,xjr,KOe,ur,Gx,$jr,Yc,kjr,TZ,Sjr,Rjr,MZ,Pjr,Bjr,Ijr,Ox,Njr,E4e,qjr,jjr,Djr,Qt,Vx,Gjr,C4e,Ojr,Vjr,Kc,Xjr,w4e,zjr,Wjr,EZ,Qjr,Hjr,Ujr,F5,Jjr,Xr,Xx,Yjr,A4e,Kjr,Zjr,Mn,eDr,L4e,oDr,rDr,y4e,tDr,aDr,x4e,nDr,sDr,lDr,$e,T5,$4e,iDr,dDr,CZ,cDr,fDr,mDr,M5,k4e,gDr,hDr,wZ,pDr,uDr,_Dr,E5,S4e,bDr,vDr,AZ,FDr,TDr,MDr,C5,R4e,EDr,CDr,LZ,wDr,ADr,LDr,w5,P4e,yDr,xDr,yZ,$Dr,kDr,SDr,A5,B4e,RDr,PDr,xZ,BDr,IDr,NDr,L5,I4e,qDr,jDr,$Z,DDr,GDr,ODr,y5,N4e,VDr,XDr,kZ,zDr,WDr,QDr,x5,q4e,HDr,UDr,SZ,JDr,YDr,KDr,$5,j4e,ZDr,eGr,RZ,oGr,rGr,tGr,k5,ZOe,Zc,S5,D4e,zx,aGr,G4e,nGr,eVe,_r,Wx,sGr,ef,lGr,PZ,iGr,dGr,BZ,cGr,fGr,mGr,Qx,gGr,O4e,hGr,pGr,uGr,Ht,Hx,_Gr,V4e,bGr,vGr,of,FGr,X4e,TGr,MGr,IZ,EGr,CGr,wGr,R5,AGr,zr,Ux,LGr,z4e,yGr,xGr,En,$Gr,W4e,kGr,SGr,Q4e,RGr,PGr,H4e,BGr,IGr,NGr,ke,P5,U4e,qGr,jGr,NZ,DGr,GGr,OGr,B5,J4e,VGr,XGr,qZ,zGr,WGr,QGr,I5,Y4e,HGr,UGr,jZ,JGr,YGr,KGr,N5,K4e,ZGr,eOr,DZ,oOr,rOr,tOr,q5,Z4e,aOr,nOr,GZ,sOr,lOr,iOr,j5,eCe,dOr,cOr,OZ,fOr,mOr,gOr,D5,oCe,hOr,pOr,VZ,uOr,_Or,bOr,G5,rCe,vOr,FOr,XZ,TOr,MOr,EOr,O5,tCe,COr,wOr,zZ,AOr,LOr,yOr,V5,aCe,xOr,$Or,WZ,kOr,SOr,ROr,X5,oVe,rf,z5,nCe,Jx,POr,sCe,BOr,rVe,br,Yx,IOr,tf,NOr,QZ,qOr,jOr,HZ,DOr,GOr,OOr,Kx,VOr,lCe,XOr,zOr,WOr,Ut,Zx,QOr,iCe,HOr,UOr,af,JOr,dCe,YOr,KOr,UZ,ZOr,eVr,oVr,W5,rVr,Wr,e$,tVr,cCe,aVr,nVr,Cn,sVr,fCe,lVr,iVr,mCe,dVr,cVr,gCe,fVr,mVr,gVr,Se,Q5,hCe,hVr,pVr,JZ,uVr,_Vr,bVr,H5,pCe,vVr,FVr,YZ,TVr,MVr,EVr,U5,uCe,CVr,wVr,KZ,AVr,LVr,yVr,J5,_Ce,xVr,$Vr,ZZ,kVr,SVr,RVr,Y5,bCe,PVr,BVr,eee,IVr,NVr,qVr,K5,vCe,jVr,DVr,oee,GVr,OVr,VVr,Z5,FCe,XVr,zVr,ree,WVr,QVr,HVr,e3,TCe,UVr,JVr,tee,YVr,KVr,ZVr,o3,MCe,eXr,oXr,aee,rXr,tXr,aXr,r3,ECe,nXr,sXr,nee,lXr,iXr,dXr,t3,tVe,nf,a3,CCe,o$,cXr,wCe,fXr,aVe,vr,r$,mXr,sf,gXr,see,hXr,pXr,lee,uXr,_Xr,bXr,t$,vXr,ACe,FXr,TXr,MXr,Jt,a$,EXr,LCe,CXr,wXr,lf,AXr,yCe,LXr,yXr,iee,xXr,$Xr,kXr,n3,SXr,Qr,n$,RXr,xCe,PXr,BXr,wn,IXr,$Ce,NXr,qXr,kCe,jXr,DXr,SCe,GXr,OXr,VXr,Re,s3,RCe,XXr,zXr,dee,WXr,QXr,HXr,l3,PCe,UXr,JXr,cee,YXr,KXr,ZXr,i3,BCe,ezr,ozr,fee,rzr,tzr,azr,d3,ICe,nzr,szr,mee,lzr,izr,dzr,c3,NCe,czr,fzr,gee,mzr,gzr,hzr,f3,qCe,pzr,uzr,hee,_zr,bzr,vzr,m3,jCe,Fzr,Tzr,pee,Mzr,Ezr,Czr,g3,DCe,wzr,Azr,uee,Lzr,yzr,xzr,h3,GCe,$zr,kzr,_ee,Szr,Rzr,Pzr,p3,OCe,Bzr,Izr,bee,Nzr,qzr,jzr,u3,nVe,df,_3,VCe,s$,Dzr,XCe,Gzr,sVe,Fr,l$,Ozr,cf,Vzr,vee,Xzr,zzr,Fee,Wzr,Qzr,Hzr,i$,Uzr,zCe,Jzr,Yzr,Kzr,Yt,d$,Zzr,WCe,eWr,oWr,ff,rWr,QCe,tWr,aWr,Tee,nWr,sWr,lWr,b3,iWr,Hr,c$,dWr,HCe,cWr,fWr,An,mWr,UCe,gWr,hWr,JCe,pWr,uWr,YCe,_Wr,bWr,vWr,Ve,v3,KCe,FWr,TWr,Mee,MWr,EWr,CWr,F3,ZCe,wWr,AWr,Eee,LWr,yWr,xWr,T3,e5e,$Wr,kWr,Cee,SWr,RWr,PWr,M3,o5e,BWr,IWr,wee,NWr,qWr,jWr,E3,r5e,DWr,GWr,Aee,OWr,VWr,XWr,C3,t5e,zWr,WWr,Lee,QWr,HWr,UWr,w3,a5e,JWr,YWr,yee,KWr,ZWr,eQr,A3,n5e,oQr,rQr,xee,tQr,aQr,nQr,L3,lVe,mf,y3,s5e,f$,sQr,l5e,lQr,iVe,Tr,m$,iQr,gf,dQr,$ee,cQr,fQr,kee,mQr,gQr,hQr,g$,pQr,i5e,uQr,_Qr,bQr,Kt,h$,vQr,d5e,FQr,TQr,hf,MQr,c5e,EQr,CQr,See,wQr,AQr,LQr,x3,yQr,Ur,p$,xQr,f5e,$Qr,kQr,Ln,SQr,m5e,RQr,PQr,g5e,BQr,IQr,h5e,NQr,qQr,jQr,Xe,$3,p5e,DQr,GQr,Ree,OQr,VQr,XQr,k3,u5e,zQr,WQr,Pee,QQr,HQr,UQr,S3,_5e,JQr,YQr,Bee,KQr,ZQr,eHr,R3,b5e,oHr,rHr,Iee,tHr,aHr,nHr,P3,v5e,sHr,lHr,Nee,iHr,dHr,cHr,B3,F5e,fHr,mHr,qee,gHr,hHr,pHr,I3,T5e,uHr,_Hr,jee,bHr,vHr,FHr,N3,M5e,THr,MHr,Dee,EHr,CHr,wHr,q3,dVe,pf,j3,E5e,u$,AHr,C5e,LHr,cVe,Mr,_$,yHr,uf,xHr,Gee,$Hr,kHr,Oee,SHr,RHr,PHr,b$,BHr,w5e,IHr,NHr,qHr,Zt,v$,jHr,A5e,DHr,GHr,_f,OHr,L5e,VHr,XHr,Vee,zHr,WHr,QHr,D3,HHr,Jr,F$,UHr,y5e,JHr,YHr,yn,KHr,x5e,ZHr,eUr,$5e,oUr,rUr,k5e,tUr,aUr,nUr,S5e,G3,R5e,sUr,lUr,Xee,iUr,dUr,cUr,O3,fVe,bf,V3,P5e,T$,fUr,B5e,mUr,mVe,Er,M$,gUr,vf,hUr,zee,pUr,uUr,Wee,_Ur,bUr,vUr,E$,FUr,I5e,TUr,MUr,EUr,ea,C$,CUr,N5e,wUr,AUr,Ff,LUr,q5e,yUr,xUr,Qee,$Ur,kUr,SUr,X3,RUr,Yr,w$,PUr,j5e,BUr,IUr,xn,NUr,D5e,qUr,jUr,G5e,DUr,GUr,O5e,OUr,VUr,XUr,A$,z3,V5e,zUr,WUr,Hee,QUr,HUr,UUr,W3,X5e,JUr,YUr,Uee,KUr,ZUr,eJr,Q3,gVe,Tf,H3,z5e,L$,oJr,W5e,rJr,hVe,Cr,y$,tJr,Mf,aJr,Jee,nJr,sJr,Yee,lJr,iJr,dJr,x$,cJr,Q5e,fJr,mJr,gJr,oa,$$,hJr,H5e,pJr,uJr,Ef,_Jr,U5e,bJr,vJr,Kee,FJr,TJr,MJr,U3,EJr,Kr,k$,CJr,J5e,wJr,AJr,$n,LJr,Y5e,yJr,xJr,K5e,$Jr,kJr,Z5e,SJr,RJr,PJr,e3e,J3,o3e,BJr,IJr,Zee,NJr,qJr,jJr,Y3,pVe;return d=new re({}),ya=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),MA=new re({}),EA=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Sf=new DJr({props:{warning:!0,$$slots:{default:[Yqt]},$$scope:{ctx:x}}}),CA=new re({}),wA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L598"}}),yA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L621"}}),Dg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Kqt]},$$scope:{ctx:x}}}),xA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L744"}}),$A=new re({}),kA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L400"}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17826/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L414"}}),Eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Zqt]},$$scope:{ctx:x}}}),BA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L613"}}),IA=new re({}),NA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),DA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17826/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),ap=new DJr({props:{$$slots:{default:[ejt]},$$scope:{ctx:x}}}),np=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[ojt]},$$scope:{ctx:x}}}),GA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),OA=new re({}),VA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L88"}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L102"}}),wp=new DJr({props:{$$slots:{default:[rjt]},$$scope:{ctx:x}}}),Ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[tjt]},$$scope:{ctx:x}}}),QA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L255"}}),HA=new re({}),UA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L759"}}),YA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/jukebox#transformers.JukeboxConfig">JukeboxConfig</a> configuration class: <code>JukeboxModel</code> (Jukebox model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),xp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[ajt]},$$scope:{ctx:x}}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),x_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[njt]},$$scope:{ctx:x}}}),ZA=new re({}),eL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L766"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),k_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[sjt]},$$scope:{ctx:x}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),M2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ljt]},$$scope:{ctx:x}}}),aL=new re({}),nL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L781"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),C2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[ijt]},$$scope:{ctx:x}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),c1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[djt]},$$scope:{ctx:x}}}),dL=new re({}),cL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L788"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),m1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[cjt]},$$scope:{ctx:x}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),J1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[fjt]},$$scope:{ctx:x}}}),hL=new re({}),pL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L795"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),K1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[mjt]},$$scope:{ctx:x}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),_b=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gjt]},$$scope:{ctx:x}}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L804"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),vb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[hjt]},$$scope:{ctx:x}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),pv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[pjt]},$$scope:{ctx:x}}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L849"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),_v=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[ujt]},$$scope:{ctx:x}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_jt]},$$scope:{ctx:x}}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L856"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[bjt]},$$scope:{ctx:x}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),tF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[vjt]},$$scope:{ctx:x}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L842"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),nF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Fjt]},$$scope:{ctx:x}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),OF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Tjt]},$$scope:{ctx:x}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L813"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),XF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Mjt]},$$scope:{ctx:x}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ejt]},$$scope:{ctx:x}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L820"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),P6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Cjt]},$$scope:{ctx:x}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),N6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[wjt]},$$scope:{ctx:x}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L865"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),j6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Ajt]},$$scope:{ctx:x}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Z6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ljt]},$$scope:{ctx:x}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L904"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[yjt]},$$scope:{ctx:x}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xjt]},$$scope:{ctx:x}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L831"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[$jt]},$$scope:{ctx:x}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[kjt]},$$scope:{ctx:x}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L911"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Sjt]},$$scope:{ctx:x}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Rjt]},$$scope:{ctx:x}}}),py=new re({}),uy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L934"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Pjt]},$$scope:{ctx:x}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Bjt]},$$scope:{ctx:x}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L918"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Ijt]},$$scope:{ctx:x}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),zT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Njt]},$$scope:{ctx:x}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L925"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[qjt]},$$scope:{ctx:x}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),YT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[jjt]},$$scope:{ctx:x}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L943"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Djt]},$$scope:{ctx:x}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Gjt]},$$scope:{ctx:x}}}),Iy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L950"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Ojt]},$$scope:{ctx:x}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),g7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Vjt]},$$scope:{ctx:x}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L897"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),p7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Xjt]},$$scope:{ctx:x}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),v7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[zjt]},$$scope:{ctx:x}}}),Qy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L872"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),T7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Wjt]},$$scope:{ctx:x}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),C7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Qjt]},$$scope:{ctx:x}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L879"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),A7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Hjt]},$$scope:{ctx:x}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),S7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Ujt]},$$scope:{ctx:x}}}),t9=new re({}),a9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L888"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),P7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Jjt]},$$scope:{ctx:x}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),N7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Yjt]},$$scope:{ctx:x}}}),i9=new re({}),d9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),f9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),j7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Kjt]},$$scope:{ctx:x}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),S8=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Zjt]},$$scope:{ctx:x}}}),g9=new re({}),h9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),u9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),P8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[eDt]},$$scope:{ctx:x}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),aM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[oDt]},$$scope:{ctx:x}}}),b9=new re({}),v9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),T9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),sM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[rDt]},$$scope:{ctx:x}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[tDt]},$$scope:{ctx:x}}}),E9=new re({}),C9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),A9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[aDt]},$$scope:{ctx:x}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nDt]},$$scope:{ctx:x}}}),y9=new re({}),x9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),k9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),xM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[sDt]},$$scope:{ctx:x}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),JM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[lDt]},$$scope:{ctx:x}}}),R9=new re({}),P9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),I9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),KM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[iDt]},$$scope:{ctx:x}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[dDt]},$$scope:{ctx:x}}}),q9=new re({}),j9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),G9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[cDt]},$$scope:{ctx:x}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[fDt]},$$scope:{ctx:x}}}),V9=new re({}),X9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),W9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[mDt]},$$scope:{ctx:x}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[gDt]},$$scope:{ctx:x}}}),H9=new re({}),U9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),s4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[hDt]},$$scope:{ctx:x}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),d4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[pDt]},$$scope:{ctx:x}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),f4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[uDt]},$$scope:{ctx:x}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[_Dt]},$$scope:{ctx:x}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[bDt]},$$scope:{ctx:x}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vDt]},$$scope:{ctx:x}}}),cx=new re({}),fx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[FDt]},$$scope:{ctx:x}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[TDt]},$$scope:{ctx:x}}}),px=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[MDt]},$$scope:{ctx:x}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[EDt]},$$scope:{ctx:x}}}),Fx=new re({}),Tx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),fC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[CDt]},$$scope:{ctx:x}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[wDt]},$$scope:{ctx:x}}}),wx=new re({}),Ax=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[ADt]},$$scope:{ctx:x}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[LDt]},$$scope:{ctx:x}}}),$x=new re({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[yDt]},$$scope:{ctx:x}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xDt]},$$scope:{ctx:x}}}),Bx=new re({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[$Dt]},$$scope:{ctx:x}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[kDt]},$$scope:{ctx:x}}}),Dx=new re({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[SDt]},$$scope:{ctx:x}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[RDt]},$$scope:{ctx:x}}}),zx=new re({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[PDt]},$$scope:{ctx:x}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[BDt]},$$scope:{ctx:x}}}),Jx=new re({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[IDt]},$$scope:{ctx:x}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[NDt]},$$scope:{ctx:x}}}),o$=new re({}),r$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),a$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qDt]},$$scope:{ctx:x}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[jDt]},$$scope:{ctx:x}}}),s$=new re({}),l$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),d$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[DDt]},$$scope:{ctx:x}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),L3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[GDt]},$$scope:{ctx:x}}}),f$=new re({}),m$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),h$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),x3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ODt]},$$scope:{ctx:x}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[VDt]},$$scope:{ctx:x}}}),u$=new re({}),_$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),v$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),D3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[XDt]},$$scope:{ctx:x}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[zDt]},$$scope:{ctx:x}}}),T$=new re({}),M$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),C$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[WDt]},$$scope:{ctx:x}}}),w$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[QDt]},$$scope:{ctx:x}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[HDt]},$$scope:{ctx:x}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Y3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[UDt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Fi=o("Auto Classes"),Lf=l(),at=a("p"),Ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=a("code"),bA=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Ei=o("Instantiating one of "),Sn=a("a"),vA=o("AutoConfig"),Rn=o(", "),Pn=a("a"),FA=o("AutoModel"),Ci=o(`, and
`),Bn=a("a"),TA=o("AutoTokenizer"),wi=o(" will directly create a class of the relevant architecture. For instance"),xf=l(),F(ya.$$.fragment),Qe=l(),Ae=a("p"),Hk=o("will create a model that is an instance of "),Ai=a("a"),Uk=o("BertModel"),Jk=o("."),Co=l(),xa=a("p"),Yk=o("There is one class of "),$f=a("code"),Kk=o("AutoModel"),wze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),cGe=l(),Li=a("h2"),kf=a("a"),Hre=a("span"),F(MA.$$.fragment),Aze=l(),Ure=a("span"),Lze=o("Extending the Auto Classes"),fGe=l(),In=a("p"),yze=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Jre=a("code"),xze=o("NewModel"),$ze=o(", make sure you have a "),Yre=a("code"),kze=o("NewModelConfig"),Sze=o(` then you can add those to the auto
classes like this:`),mGe=l(),F(EA.$$.fragment),gGe=l(),Zk=a("p"),Rze=o("You will then be able to use the auto classes like you would usually do!"),hGe=l(),F(Sf.$$.fragment),pGe=l(),yi=a("h2"),Rf=a("a"),Kre=a("span"),F(CA.$$.fragment),Pze=l(),Zre=a("span"),Bze=o("AutoConfig"),uGe=l(),wo=a("div"),F(wA.$$.fragment),Ize=l(),AA=a("p"),Nze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),eS=a("a"),qze=o("from_pretrained()"),jze=o(" class method."),Dze=l(),LA=a("p"),Gze=o("This class cannot be instantiated directly using "),ete=a("code"),Oze=o("__init__()"),Vze=o(" (throws an error)."),Xze=l(),wr=a("div"),F(yA.$$.fragment),zze=l(),ote=a("p"),Wze=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Qze=l(),xi=a("p"),Hze=o("The configuration class to instantiate is selected based on the "),rte=a("code"),Uze=o("model_type"),Jze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tte=a("code"),Yze=o("pretrained_model_name_or_path"),Kze=o(":"),Zze=l(),A=a("ul"),Pf=a("li"),ate=a("strong"),eWe=o("albert"),oWe=o(" \u2014 "),oS=a("a"),rWe=o("AlbertConfig"),tWe=o(" (ALBERT model)"),aWe=l(),Bf=a("li"),nte=a("strong"),nWe=o("bart"),sWe=o(" \u2014 "),rS=a("a"),lWe=o("BartConfig"),iWe=o(" (BART model)"),dWe=l(),If=a("li"),ste=a("strong"),cWe=o("beit"),fWe=o(" \u2014 "),tS=a("a"),mWe=o("BeitConfig"),gWe=o(" (BEiT model)"),hWe=l(),Nf=a("li"),lte=a("strong"),pWe=o("bert"),uWe=o(" \u2014 "),aS=a("a"),_We=o("BertConfig"),bWe=o(" (BERT model)"),vWe=l(),qf=a("li"),ite=a("strong"),FWe=o("bert-generation"),TWe=o(" \u2014 "),nS=a("a"),MWe=o("BertGenerationConfig"),EWe=o(" (Bert Generation model)"),CWe=l(),jf=a("li"),dte=a("strong"),wWe=o("big_bird"),AWe=o(" \u2014 "),sS=a("a"),LWe=o("BigBirdConfig"),yWe=o(" (BigBird model)"),xWe=l(),Df=a("li"),cte=a("strong"),$We=o("bigbird_pegasus"),kWe=o(" \u2014 "),lS=a("a"),SWe=o("BigBirdPegasusConfig"),RWe=o(" (BigBird-Pegasus model)"),PWe=l(),Gf=a("li"),fte=a("strong"),BWe=o("blenderbot"),IWe=o(" \u2014 "),iS=a("a"),NWe=o("BlenderbotConfig"),qWe=o(" (Blenderbot model)"),jWe=l(),Of=a("li"),mte=a("strong"),DWe=o("blenderbot-small"),GWe=o(" \u2014 "),dS=a("a"),OWe=o("BlenderbotSmallConfig"),VWe=o(" (BlenderbotSmall model)"),XWe=l(),Vf=a("li"),gte=a("strong"),zWe=o("bloom"),WWe=o(" \u2014 "),cS=a("a"),QWe=o("BloomConfig"),HWe=o(" (BLOOM model)"),UWe=l(),Xf=a("li"),hte=a("strong"),JWe=o("camembert"),YWe=o(" \u2014 "),fS=a("a"),KWe=o("CamembertConfig"),ZWe=o(" (CamemBERT model)"),eQe=l(),zf=a("li"),pte=a("strong"),oQe=o("canine"),rQe=o(" \u2014 "),mS=a("a"),tQe=o("CanineConfig"),aQe=o(" (CANINE model)"),nQe=l(),Wf=a("li"),ute=a("strong"),sQe=o("clip"),lQe=o(" \u2014 "),gS=a("a"),iQe=o("CLIPConfig"),dQe=o(" (CLIP model)"),cQe=l(),Qf=a("li"),_te=a("strong"),fQe=o("convbert"),mQe=o(" \u2014 "),hS=a("a"),gQe=o("ConvBertConfig"),hQe=o(" (ConvBERT model)"),pQe=l(),Hf=a("li"),bte=a("strong"),uQe=o("convnext"),_Qe=o(" \u2014 "),pS=a("a"),bQe=o("ConvNextConfig"),vQe=o(" (ConvNeXT model)"),FQe=l(),Uf=a("li"),vte=a("strong"),TQe=o("ctrl"),MQe=o(" \u2014 "),uS=a("a"),EQe=o("CTRLConfig"),CQe=o(" (CTRL model)"),wQe=l(),Jf=a("li"),Fte=a("strong"),AQe=o("cvt"),LQe=o(" \u2014 "),_S=a("a"),yQe=o("CvtConfig"),xQe=o(" (CvT model)"),$Qe=l(),Yf=a("li"),Tte=a("strong"),kQe=o("data2vec-audio"),SQe=o(" \u2014 "),bS=a("a"),RQe=o("Data2VecAudioConfig"),PQe=o(" (Data2VecAudio model)"),BQe=l(),Kf=a("li"),Mte=a("strong"),IQe=o("data2vec-text"),NQe=o(" \u2014 "),vS=a("a"),qQe=o("Data2VecTextConfig"),jQe=o(" (Data2VecText model)"),DQe=l(),Zf=a("li"),Ete=a("strong"),GQe=o("data2vec-vision"),OQe=o(" \u2014 "),FS=a("a"),VQe=o("Data2VecVisionConfig"),XQe=o(" (Data2VecVision model)"),zQe=l(),em=a("li"),Cte=a("strong"),WQe=o("deberta"),QQe=o(" \u2014 "),TS=a("a"),HQe=o("DebertaConfig"),UQe=o(" (DeBERTa model)"),JQe=l(),om=a("li"),wte=a("strong"),YQe=o("deberta-v2"),KQe=o(" \u2014 "),MS=a("a"),ZQe=o("DebertaV2Config"),eHe=o(" (DeBERTa-v2 model)"),oHe=l(),rm=a("li"),Ate=a("strong"),rHe=o("decision_transformer"),tHe=o(" \u2014 "),ES=a("a"),aHe=o("DecisionTransformerConfig"),nHe=o(" (Decision Transformer model)"),sHe=l(),tm=a("li"),Lte=a("strong"),lHe=o("deit"),iHe=o(" \u2014 "),CS=a("a"),dHe=o("DeiTConfig"),cHe=o(" (DeiT model)"),fHe=l(),am=a("li"),yte=a("strong"),mHe=o("detr"),gHe=o(" \u2014 "),wS=a("a"),hHe=o("DetrConfig"),pHe=o(" (DETR model)"),uHe=l(),nm=a("li"),xte=a("strong"),_He=o("distilbert"),bHe=o(" \u2014 "),AS=a("a"),vHe=o("DistilBertConfig"),FHe=o(" (DistilBERT model)"),THe=l(),sm=a("li"),$te=a("strong"),MHe=o("dpr"),EHe=o(" \u2014 "),LS=a("a"),CHe=o("DPRConfig"),wHe=o(" (DPR model)"),AHe=l(),lm=a("li"),kte=a("strong"),LHe=o("dpt"),yHe=o(" \u2014 "),yS=a("a"),xHe=o("DPTConfig"),$He=o(" (DPT model)"),kHe=l(),im=a("li"),Ste=a("strong"),SHe=o("electra"),RHe=o(" \u2014 "),xS=a("a"),PHe=o("ElectraConfig"),BHe=o(" (ELECTRA model)"),IHe=l(),dm=a("li"),Rte=a("strong"),NHe=o("encoder-decoder"),qHe=o(" \u2014 "),$S=a("a"),jHe=o("EncoderDecoderConfig"),DHe=o(" (Encoder decoder model)"),GHe=l(),cm=a("li"),Pte=a("strong"),OHe=o("flaubert"),VHe=o(" \u2014 "),kS=a("a"),XHe=o("FlaubertConfig"),zHe=o(" (FlauBERT model)"),WHe=l(),fm=a("li"),Bte=a("strong"),QHe=o("flava"),HHe=o(" \u2014 "),SS=a("a"),UHe=o("FlavaConfig"),JHe=o(" (FLAVA model)"),YHe=l(),mm=a("li"),Ite=a("strong"),KHe=o("fnet"),ZHe=o(" \u2014 "),RS=a("a"),eUe=o("FNetConfig"),oUe=o(" (FNet model)"),rUe=l(),gm=a("li"),Nte=a("strong"),tUe=o("fsmt"),aUe=o(" \u2014 "),PS=a("a"),nUe=o("FSMTConfig"),sUe=o(" (FairSeq Machine-Translation model)"),lUe=l(),hm=a("li"),qte=a("strong"),iUe=o("funnel"),dUe=o(" \u2014 "),BS=a("a"),cUe=o("FunnelConfig"),fUe=o(" (Funnel Transformer model)"),mUe=l(),pm=a("li"),jte=a("strong"),gUe=o("glpn"),hUe=o(" \u2014 "),IS=a("a"),pUe=o("GLPNConfig"),uUe=o(" (GLPN model)"),_Ue=l(),um=a("li"),Dte=a("strong"),bUe=o("gpt2"),vUe=o(" \u2014 "),NS=a("a"),FUe=o("GPT2Config"),TUe=o(" (OpenAI GPT-2 model)"),MUe=l(),_m=a("li"),Gte=a("strong"),EUe=o("gpt_neo"),CUe=o(" \u2014 "),qS=a("a"),wUe=o("GPTNeoConfig"),AUe=o(" (GPT Neo model)"),LUe=l(),bm=a("li"),Ote=a("strong"),yUe=o("gpt_neox"),xUe=o(" \u2014 "),jS=a("a"),$Ue=o("GPTNeoXConfig"),kUe=o(" (GPT NeoX model)"),SUe=l(),vm=a("li"),Vte=a("strong"),RUe=o("gptj"),PUe=o(" \u2014 "),DS=a("a"),BUe=o("GPTJConfig"),IUe=o(" (GPT-J model)"),NUe=l(),Fm=a("li"),Xte=a("strong"),qUe=o("hubert"),jUe=o(" \u2014 "),GS=a("a"),DUe=o("HubertConfig"),GUe=o(" (Hubert model)"),OUe=l(),Tm=a("li"),zte=a("strong"),VUe=o("ibert"),XUe=o(" \u2014 "),OS=a("a"),zUe=o("IBertConfig"),WUe=o(" (I-BERT model)"),QUe=l(),Mm=a("li"),Wte=a("strong"),HUe=o("imagegpt"),UUe=o(" \u2014 "),VS=a("a"),JUe=o("ImageGPTConfig"),YUe=o(" (ImageGPT model)"),KUe=l(),Em=a("li"),Qte=a("strong"),ZUe=o("jukebox"),eJe=o(" \u2014 "),XS=a("a"),oJe=o("JukeboxConfig"),rJe=o(" (Jukebox model)"),tJe=l(),Cm=a("li"),Hte=a("strong"),aJe=o("layoutlm"),nJe=o(" \u2014 "),zS=a("a"),sJe=o("LayoutLMConfig"),lJe=o(" (LayoutLM model)"),iJe=l(),wm=a("li"),Ute=a("strong"),dJe=o("layoutlmv2"),cJe=o(" \u2014 "),WS=a("a"),fJe=o("LayoutLMv2Config"),mJe=o(" (LayoutLMv2 model)"),gJe=l(),Am=a("li"),Jte=a("strong"),hJe=o("layoutlmv3"),pJe=o(" \u2014 "),QS=a("a"),uJe=o("LayoutLMv3Config"),_Je=o(" (LayoutLMv3 model)"),bJe=l(),Lm=a("li"),Yte=a("strong"),vJe=o("led"),FJe=o(" \u2014 "),HS=a("a"),TJe=o("LEDConfig"),MJe=o(" (LED model)"),EJe=l(),ym=a("li"),Kte=a("strong"),CJe=o("levit"),wJe=o(" \u2014 "),US=a("a"),AJe=o("LevitConfig"),LJe=o(" (LeViT model)"),yJe=l(),xm=a("li"),Zte=a("strong"),xJe=o("longformer"),$Je=o(" \u2014 "),JS=a("a"),kJe=o("LongformerConfig"),SJe=o(" (Longformer model)"),RJe=l(),$m=a("li"),eae=a("strong"),PJe=o("longt5"),BJe=o(" \u2014 "),YS=a("a"),IJe=o("LongT5Config"),NJe=o(" (LongT5 model)"),qJe=l(),km=a("li"),oae=a("strong"),jJe=o("luke"),DJe=o(" \u2014 "),KS=a("a"),GJe=o("LukeConfig"),OJe=o(" (LUKE model)"),VJe=l(),Sm=a("li"),rae=a("strong"),XJe=o("lxmert"),zJe=o(" \u2014 "),ZS=a("a"),WJe=o("LxmertConfig"),QJe=o(" (LXMERT model)"),HJe=l(),Rm=a("li"),tae=a("strong"),UJe=o("m2m_100"),JJe=o(" \u2014 "),eR=a("a"),YJe=o("M2M100Config"),KJe=o(" (M2M100 model)"),ZJe=l(),Pm=a("li"),aae=a("strong"),eYe=o("marian"),oYe=o(" \u2014 "),oR=a("a"),rYe=o("MarianConfig"),tYe=o(" (Marian model)"),aYe=l(),Bm=a("li"),nae=a("strong"),nYe=o("maskformer"),sYe=o(" \u2014 "),rR=a("a"),lYe=o("MaskFormerConfig"),iYe=o(" (MaskFormer model)"),dYe=l(),Im=a("li"),sae=a("strong"),cYe=o("mbart"),fYe=o(" \u2014 "),tR=a("a"),mYe=o("MBartConfig"),gYe=o(" (mBART model)"),hYe=l(),Nm=a("li"),lae=a("strong"),pYe=o("mctct"),uYe=o(" \u2014 "),aR=a("a"),_Ye=o("MCTCTConfig"),bYe=o(" (M-CTC-T model)"),vYe=l(),qm=a("li"),iae=a("strong"),FYe=o("megatron-bert"),TYe=o(" \u2014 "),nR=a("a"),MYe=o("MegatronBertConfig"),EYe=o(" (Megatron-BERT model)"),CYe=l(),jm=a("li"),dae=a("strong"),wYe=o("mobilebert"),AYe=o(" \u2014 "),sR=a("a"),LYe=o("MobileBertConfig"),yYe=o(" (MobileBERT model)"),xYe=l(),Dm=a("li"),cae=a("strong"),$Ye=o("mpnet"),kYe=o(" \u2014 "),lR=a("a"),SYe=o("MPNetConfig"),RYe=o(" (MPNet model)"),PYe=l(),Gm=a("li"),fae=a("strong"),BYe=o("mt5"),IYe=o(" \u2014 "),iR=a("a"),NYe=o("MT5Config"),qYe=o(" (MT5 model)"),jYe=l(),Om=a("li"),mae=a("strong"),DYe=o("nystromformer"),GYe=o(" \u2014 "),dR=a("a"),OYe=o("NystromformerConfig"),VYe=o(" (Nystr\xF6mformer model)"),XYe=l(),Vm=a("li"),gae=a("strong"),zYe=o("openai-gpt"),WYe=o(" \u2014 "),cR=a("a"),QYe=o("OpenAIGPTConfig"),HYe=o(" (OpenAI GPT model)"),UYe=l(),Xm=a("li"),hae=a("strong"),JYe=o("opt"),YYe=o(" \u2014 "),fR=a("a"),KYe=o("OPTConfig"),ZYe=o(" (OPT model)"),eKe=l(),zm=a("li"),pae=a("strong"),oKe=o("pegasus"),rKe=o(" \u2014 "),mR=a("a"),tKe=o("PegasusConfig"),aKe=o(" (Pegasus model)"),nKe=l(),Wm=a("li"),uae=a("strong"),sKe=o("perceiver"),lKe=o(" \u2014 "),gR=a("a"),iKe=o("PerceiverConfig"),dKe=o(" (Perceiver model)"),cKe=l(),Qm=a("li"),_ae=a("strong"),fKe=o("plbart"),mKe=o(" \u2014 "),hR=a("a"),gKe=o("PLBartConfig"),hKe=o(" (PLBart model)"),pKe=l(),Hm=a("li"),bae=a("strong"),uKe=o("poolformer"),_Ke=o(" \u2014 "),pR=a("a"),bKe=o("PoolFormerConfig"),vKe=o(" (PoolFormer model)"),FKe=l(),Um=a("li"),vae=a("strong"),TKe=o("prophetnet"),MKe=o(" \u2014 "),uR=a("a"),EKe=o("ProphetNetConfig"),CKe=o(" (ProphetNet model)"),wKe=l(),Jm=a("li"),Fae=a("strong"),AKe=o("qdqbert"),LKe=o(" \u2014 "),_R=a("a"),yKe=o("QDQBertConfig"),xKe=o(" (QDQBert model)"),$Ke=l(),Ym=a("li"),Tae=a("strong"),kKe=o("rag"),SKe=o(" \u2014 "),bR=a("a"),RKe=o("RagConfig"),PKe=o(" (RAG model)"),BKe=l(),Km=a("li"),Mae=a("strong"),IKe=o("realm"),NKe=o(" \u2014 "),vR=a("a"),qKe=o("RealmConfig"),jKe=o(" (REALM model)"),DKe=l(),Zm=a("li"),Eae=a("strong"),GKe=o("reformer"),OKe=o(" \u2014 "),FR=a("a"),VKe=o("ReformerConfig"),XKe=o(" (Reformer model)"),zKe=l(),eg=a("li"),Cae=a("strong"),WKe=o("regnet"),QKe=o(" \u2014 "),TR=a("a"),HKe=o("RegNetConfig"),UKe=o(" (RegNet model)"),JKe=l(),og=a("li"),wae=a("strong"),YKe=o("rembert"),KKe=o(" \u2014 "),MR=a("a"),ZKe=o("RemBertConfig"),eZe=o(" (RemBERT model)"),oZe=l(),rg=a("li"),Aae=a("strong"),rZe=o("resnet"),tZe=o(" \u2014 "),ER=a("a"),aZe=o("ResNetConfig"),nZe=o(" (ResNet model)"),sZe=l(),tg=a("li"),Lae=a("strong"),lZe=o("retribert"),iZe=o(" \u2014 "),CR=a("a"),dZe=o("RetriBertConfig"),cZe=o(" (RetriBERT model)"),fZe=l(),ag=a("li"),yae=a("strong"),mZe=o("roberta"),gZe=o(" \u2014 "),wR=a("a"),hZe=o("RobertaConfig"),pZe=o(" (RoBERTa model)"),uZe=l(),ng=a("li"),xae=a("strong"),_Ze=o("roformer"),bZe=o(" \u2014 "),AR=a("a"),vZe=o("RoFormerConfig"),FZe=o(" (RoFormer model)"),TZe=l(),sg=a("li"),$ae=a("strong"),MZe=o("segformer"),EZe=o(" \u2014 "),LR=a("a"),CZe=o("SegformerConfig"),wZe=o(" (SegFormer model)"),AZe=l(),lg=a("li"),kae=a("strong"),LZe=o("sew"),yZe=o(" \u2014 "),yR=a("a"),xZe=o("SEWConfig"),$Ze=o(" (SEW model)"),kZe=l(),ig=a("li"),Sae=a("strong"),SZe=o("sew-d"),RZe=o(" \u2014 "),xR=a("a"),PZe=o("SEWDConfig"),BZe=o(" (SEW-D model)"),IZe=l(),dg=a("li"),Rae=a("strong"),NZe=o("speech-encoder-decoder"),qZe=o(" \u2014 "),$R=a("a"),jZe=o("SpeechEncoderDecoderConfig"),DZe=o(" (Speech Encoder decoder model)"),GZe=l(),cg=a("li"),Pae=a("strong"),OZe=o("speech_to_text"),VZe=o(" \u2014 "),kR=a("a"),XZe=o("Speech2TextConfig"),zZe=o(" (Speech2Text model)"),WZe=l(),fg=a("li"),Bae=a("strong"),QZe=o("speech_to_text_2"),HZe=o(" \u2014 "),SR=a("a"),UZe=o("Speech2Text2Config"),JZe=o(" (Speech2Text2 model)"),YZe=l(),mg=a("li"),Iae=a("strong"),KZe=o("splinter"),ZZe=o(" \u2014 "),RR=a("a"),eeo=o("SplinterConfig"),oeo=o(" (Splinter model)"),reo=l(),gg=a("li"),Nae=a("strong"),teo=o("squeezebert"),aeo=o(" \u2014 "),PR=a("a"),neo=o("SqueezeBertConfig"),seo=o(" (SqueezeBERT model)"),leo=l(),hg=a("li"),qae=a("strong"),ieo=o("swin"),deo=o(" \u2014 "),BR=a("a"),ceo=o("SwinConfig"),feo=o(" (Swin Transformer model)"),meo=l(),pg=a("li"),jae=a("strong"),geo=o("t5"),heo=o(" \u2014 "),IR=a("a"),peo=o("T5Config"),ueo=o(" (T5 model)"),_eo=l(),ug=a("li"),Dae=a("strong"),beo=o("tapas"),veo=o(" \u2014 "),NR=a("a"),Feo=o("TapasConfig"),Teo=o(" (TAPAS model)"),Meo=l(),_g=a("li"),Gae=a("strong"),Eeo=o("trajectory_transformer"),Ceo=o(" \u2014 "),qR=a("a"),weo=o("TrajectoryTransformerConfig"),Aeo=o(" (Trajectory Transformer model)"),Leo=l(),bg=a("li"),Oae=a("strong"),yeo=o("transfo-xl"),xeo=o(" \u2014 "),jR=a("a"),$eo=o("TransfoXLConfig"),keo=o(" (Transformer-XL model)"),Seo=l(),vg=a("li"),Vae=a("strong"),Reo=o("trocr"),Peo=o(" \u2014 "),DR=a("a"),Beo=o("TrOCRConfig"),Ieo=o(" (TrOCR model)"),Neo=l(),Fg=a("li"),Xae=a("strong"),qeo=o("unispeech"),jeo=o(" \u2014 "),GR=a("a"),Deo=o("UniSpeechConfig"),Geo=o(" (UniSpeech model)"),Oeo=l(),Tg=a("li"),zae=a("strong"),Veo=o("unispeech-sat"),Xeo=o(" \u2014 "),OR=a("a"),zeo=o("UniSpeechSatConfig"),Weo=o(" (UniSpeechSat model)"),Qeo=l(),Mg=a("li"),Wae=a("strong"),Heo=o("van"),Ueo=o(" \u2014 "),VR=a("a"),Jeo=o("VanConfig"),Yeo=o(" (VAN model)"),Keo=l(),Eg=a("li"),Qae=a("strong"),Zeo=o("vilt"),eoo=o(" \u2014 "),XR=a("a"),ooo=o("ViltConfig"),roo=o(" (ViLT model)"),too=l(),Cg=a("li"),Hae=a("strong"),aoo=o("vision-encoder-decoder"),noo=o(" \u2014 "),zR=a("a"),soo=o("VisionEncoderDecoderConfig"),loo=o(" (Vision Encoder decoder model)"),ioo=l(),wg=a("li"),Uae=a("strong"),doo=o("vision-text-dual-encoder"),coo=o(" \u2014 "),WR=a("a"),foo=o("VisionTextDualEncoderConfig"),moo=o(" (VisionTextDualEncoder model)"),goo=l(),Ag=a("li"),Jae=a("strong"),hoo=o("visual_bert"),poo=o(" \u2014 "),QR=a("a"),uoo=o("VisualBertConfig"),_oo=o(" (VisualBERT model)"),boo=l(),Lg=a("li"),Yae=a("strong"),voo=o("vit"),Foo=o(" \u2014 "),HR=a("a"),Too=o("ViTConfig"),Moo=o(" (ViT model)"),Eoo=l(),yg=a("li"),Kae=a("strong"),Coo=o("vit_mae"),woo=o(" \u2014 "),UR=a("a"),Aoo=o("ViTMAEConfig"),Loo=o(" (ViTMAE model)"),yoo=l(),xg=a("li"),Zae=a("strong"),xoo=o("wav2vec2"),$oo=o(" \u2014 "),JR=a("a"),koo=o("Wav2Vec2Config"),Soo=o(" (Wav2Vec2 model)"),Roo=l(),$g=a("li"),ene=a("strong"),Poo=o("wav2vec2-conformer"),Boo=o(" \u2014 "),YR=a("a"),Ioo=o("Wav2Vec2ConformerConfig"),Noo=o(" (Wav2Vec2-Conformer model)"),qoo=l(),kg=a("li"),one=a("strong"),joo=o("wavlm"),Doo=o(" \u2014 "),KR=a("a"),Goo=o("WavLMConfig"),Ooo=o(" (WavLM model)"),Voo=l(),Sg=a("li"),rne=a("strong"),Xoo=o("xglm"),zoo=o(" \u2014 "),ZR=a("a"),Woo=o("XGLMConfig"),Qoo=o(" (XGLM model)"),Hoo=l(),Rg=a("li"),tne=a("strong"),Uoo=o("xlm"),Joo=o(" \u2014 "),eP=a("a"),Yoo=o("XLMConfig"),Koo=o(" (XLM model)"),Zoo=l(),Pg=a("li"),ane=a("strong"),ero=o("xlm-prophetnet"),oro=o(" \u2014 "),oP=a("a"),rro=o("XLMProphetNetConfig"),tro=o(" (XLM-ProphetNet model)"),aro=l(),Bg=a("li"),nne=a("strong"),nro=o("xlm-roberta"),sro=o(" \u2014 "),rP=a("a"),lro=o("XLMRobertaConfig"),iro=o(" (XLM-RoBERTa model)"),dro=l(),Ig=a("li"),sne=a("strong"),cro=o("xlm-roberta-xl"),fro=o(" \u2014 "),tP=a("a"),mro=o("XLMRobertaXLConfig"),gro=o(" (XLM-RoBERTa-XL model)"),hro=l(),Ng=a("li"),lne=a("strong"),pro=o("xlnet"),uro=o(" \u2014 "),aP=a("a"),_ro=o("XLNetConfig"),bro=o(" (XLNet model)"),vro=l(),qg=a("li"),ine=a("strong"),Fro=o("yolos"),Tro=o(" \u2014 "),nP=a("a"),Mro=o("YolosConfig"),Ero=o(" (YOLOS model)"),Cro=l(),jg=a("li"),dne=a("strong"),wro=o("yoso"),Aro=o(" \u2014 "),sP=a("a"),Lro=o("YosoConfig"),yro=o(" (YOSO model)"),xro=l(),F(Dg.$$.fragment),$ro=l(),Gg=a("div"),F(xA.$$.fragment),kro=l(),cne=a("p"),Sro=o("Register a new configuration for this class."),_Ge=l(),$i=a("h2"),Og=a("a"),fne=a("span"),F($A.$$.fragment),Rro=l(),mne=a("span"),Pro=o("AutoTokenizer"),bGe=l(),Ao=a("div"),F(kA.$$.fragment),Bro=l(),SA=a("p"),Iro=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lP=a("a"),Nro=o("AutoTokenizer.from_pretrained()"),qro=o(" class method."),jro=l(),RA=a("p"),Dro=o("This class cannot be instantiated directly using "),gne=a("code"),Gro=o("__init__()"),Oro=o(" (throws an error)."),Vro=l(),Ar=a("div"),F(PA.$$.fragment),Xro=l(),hne=a("p"),zro=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Wro=l(),$a=a("p"),Qro=o("The tokenizer class to instantiate is selected based on the "),pne=a("code"),Hro=o("model_type"),Uro=o(` property of the config object (either
passed as an argument or loaded from `),une=a("code"),Jro=o("pretrained_model_name_or_path"),Yro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ne=a("code"),Kro=o("pretrained_model_name_or_path"),Zro=o(":"),eto=l(),k=a("ul"),Nn=a("li"),bne=a("strong"),oto=o("albert"),rto=o(" \u2014 "),iP=a("a"),tto=o("AlbertTokenizer"),ato=o(" or "),dP=a("a"),nto=o("AlbertTokenizerFast"),sto=o(" (ALBERT model)"),lto=l(),qn=a("li"),vne=a("strong"),ito=o("bart"),dto=o(" \u2014 "),cP=a("a"),cto=o("BartTokenizer"),fto=o(" or "),fP=a("a"),mto=o("BartTokenizerFast"),gto=o(" (BART model)"),hto=l(),jn=a("li"),Fne=a("strong"),pto=o("barthez"),uto=o(" \u2014 "),mP=a("a"),_to=o("BarthezTokenizer"),bto=o(" or "),gP=a("a"),vto=o("BarthezTokenizerFast"),Fto=o(" (BARThez model)"),Tto=l(),Vg=a("li"),Tne=a("strong"),Mto=o("bartpho"),Eto=o(" \u2014 "),hP=a("a"),Cto=o("BartphoTokenizer"),wto=o(" (BARTpho model)"),Ato=l(),Dn=a("li"),Mne=a("strong"),Lto=o("bert"),yto=o(" \u2014 "),pP=a("a"),xto=o("BertTokenizer"),$to=o(" or "),uP=a("a"),kto=o("BertTokenizerFast"),Sto=o(" (BERT model)"),Rto=l(),Xg=a("li"),Ene=a("strong"),Pto=o("bert-generation"),Bto=o(" \u2014 "),_P=a("a"),Ito=o("BertGenerationTokenizer"),Nto=o(" (Bert Generation model)"),qto=l(),zg=a("li"),Cne=a("strong"),jto=o("bert-japanese"),Dto=o(" \u2014 "),bP=a("a"),Gto=o("BertJapaneseTokenizer"),Oto=o(" (BertJapanese model)"),Vto=l(),Wg=a("li"),wne=a("strong"),Xto=o("bertweet"),zto=o(" \u2014 "),vP=a("a"),Wto=o("BertweetTokenizer"),Qto=o(" (BERTweet model)"),Hto=l(),Gn=a("li"),Ane=a("strong"),Uto=o("big_bird"),Jto=o(" \u2014 "),FP=a("a"),Yto=o("BigBirdTokenizer"),Kto=o(" or "),TP=a("a"),Zto=o("BigBirdTokenizerFast"),eao=o(" (BigBird model)"),oao=l(),On=a("li"),Lne=a("strong"),rao=o("bigbird_pegasus"),tao=o(" \u2014 "),MP=a("a"),aao=o("PegasusTokenizer"),nao=o(" or "),EP=a("a"),sao=o("PegasusTokenizerFast"),lao=o(" (BigBird-Pegasus model)"),iao=l(),Vn=a("li"),yne=a("strong"),dao=o("blenderbot"),cao=o(" \u2014 "),CP=a("a"),fao=o("BlenderbotTokenizer"),mao=o(" or "),wP=a("a"),gao=o("BlenderbotTokenizerFast"),hao=o(" (Blenderbot model)"),pao=l(),Qg=a("li"),xne=a("strong"),uao=o("blenderbot-small"),_ao=o(" \u2014 "),AP=a("a"),bao=o("BlenderbotSmallTokenizer"),vao=o(" (BlenderbotSmall model)"),Fao=l(),Hg=a("li"),$ne=a("strong"),Tao=o("bloom"),Mao=o(" \u2014 "),LP=a("a"),Eao=o("BloomTokenizerFast"),Cao=o(" (BLOOM model)"),wao=l(),Ug=a("li"),kne=a("strong"),Aao=o("byt5"),Lao=o(" \u2014 "),yP=a("a"),yao=o("ByT5Tokenizer"),xao=o(" (ByT5 model)"),$ao=l(),Xn=a("li"),Sne=a("strong"),kao=o("camembert"),Sao=o(" \u2014 "),xP=a("a"),Rao=o("CamembertTokenizer"),Pao=o(" or "),$P=a("a"),Bao=o("CamembertTokenizerFast"),Iao=o(" (CamemBERT model)"),Nao=l(),Jg=a("li"),Rne=a("strong"),qao=o("canine"),jao=o(" \u2014 "),kP=a("a"),Dao=o("CanineTokenizer"),Gao=o(" (CANINE model)"),Oao=l(),zn=a("li"),Pne=a("strong"),Vao=o("clip"),Xao=o(" \u2014 "),SP=a("a"),zao=o("CLIPTokenizer"),Wao=o(" or "),RP=a("a"),Qao=o("CLIPTokenizerFast"),Hao=o(" (CLIP model)"),Uao=l(),Wn=a("li"),Bne=a("strong"),Jao=o("convbert"),Yao=o(" \u2014 "),PP=a("a"),Kao=o("ConvBertTokenizer"),Zao=o(" or "),BP=a("a"),eno=o("ConvBertTokenizerFast"),ono=o(" (ConvBERT model)"),rno=l(),Qn=a("li"),Ine=a("strong"),tno=o("cpm"),ano=o(" \u2014 "),IP=a("a"),nno=o("CpmTokenizer"),sno=o(" or "),NP=a("a"),lno=o("CpmTokenizerFast"),ino=o(" (CPM model)"),dno=l(),Yg=a("li"),Nne=a("strong"),cno=o("ctrl"),fno=o(" \u2014 "),qP=a("a"),mno=o("CTRLTokenizer"),gno=o(" (CTRL model)"),hno=l(),Hn=a("li"),qne=a("strong"),pno=o("data2vec-text"),uno=o(" \u2014 "),jP=a("a"),_no=o("RobertaTokenizer"),bno=o(" or "),DP=a("a"),vno=o("RobertaTokenizerFast"),Fno=o(" (Data2VecText model)"),Tno=l(),Un=a("li"),jne=a("strong"),Mno=o("deberta"),Eno=o(" \u2014 "),GP=a("a"),Cno=o("DebertaTokenizer"),wno=o(" or "),OP=a("a"),Ano=o("DebertaTokenizerFast"),Lno=o(" (DeBERTa model)"),yno=l(),Jn=a("li"),Dne=a("strong"),xno=o("deberta-v2"),$no=o(" \u2014 "),VP=a("a"),kno=o("DebertaV2Tokenizer"),Sno=o(" or "),XP=a("a"),Rno=o("DebertaV2TokenizerFast"),Pno=o(" (DeBERTa-v2 model)"),Bno=l(),Yn=a("li"),Gne=a("strong"),Ino=o("distilbert"),Nno=o(" \u2014 "),zP=a("a"),qno=o("DistilBertTokenizer"),jno=o(" or "),WP=a("a"),Dno=o("DistilBertTokenizerFast"),Gno=o(" (DistilBERT model)"),Ono=l(),Kn=a("li"),One=a("strong"),Vno=o("dpr"),Xno=o(" \u2014 "),QP=a("a"),zno=o("DPRQuestionEncoderTokenizer"),Wno=o(" or "),HP=a("a"),Qno=o("DPRQuestionEncoderTokenizerFast"),Hno=o(" (DPR model)"),Uno=l(),Zn=a("li"),Vne=a("strong"),Jno=o("electra"),Yno=o(" \u2014 "),UP=a("a"),Kno=o("ElectraTokenizer"),Zno=o(" or "),JP=a("a"),eso=o("ElectraTokenizerFast"),oso=o(" (ELECTRA model)"),rso=l(),Kg=a("li"),Xne=a("strong"),tso=o("flaubert"),aso=o(" \u2014 "),YP=a("a"),nso=o("FlaubertTokenizer"),sso=o(" (FlauBERT model)"),lso=l(),es=a("li"),zne=a("strong"),iso=o("fnet"),dso=o(" \u2014 "),KP=a("a"),cso=o("FNetTokenizer"),fso=o(" or "),ZP=a("a"),mso=o("FNetTokenizerFast"),gso=o(" (FNet model)"),hso=l(),Zg=a("li"),Wne=a("strong"),pso=o("fsmt"),uso=o(" \u2014 "),eB=a("a"),_so=o("FSMTTokenizer"),bso=o(" (FairSeq Machine-Translation model)"),vso=l(),os=a("li"),Qne=a("strong"),Fso=o("funnel"),Tso=o(" \u2014 "),oB=a("a"),Mso=o("FunnelTokenizer"),Eso=o(" or "),rB=a("a"),Cso=o("FunnelTokenizerFast"),wso=o(" (Funnel Transformer model)"),Aso=l(),rs=a("li"),Hne=a("strong"),Lso=o("gpt2"),yso=o(" \u2014 "),tB=a("a"),xso=o("GPT2Tokenizer"),$so=o(" or "),aB=a("a"),kso=o("GPT2TokenizerFast"),Sso=o(" (OpenAI GPT-2 model)"),Rso=l(),ts=a("li"),Une=a("strong"),Pso=o("gpt_neo"),Bso=o(" \u2014 "),nB=a("a"),Iso=o("GPT2Tokenizer"),Nso=o(" or "),sB=a("a"),qso=o("GPT2TokenizerFast"),jso=o(" (GPT Neo model)"),Dso=l(),eh=a("li"),Jne=a("strong"),Gso=o("gpt_neox"),Oso=o(" \u2014 "),lB=a("a"),Vso=o("GPTNeoXTokenizerFast"),Xso=o(" (GPT NeoX model)"),zso=l(),as=a("li"),Yne=a("strong"),Wso=o("gptj"),Qso=o(" \u2014 "),iB=a("a"),Hso=o("GPT2Tokenizer"),Uso=o(" or "),dB=a("a"),Jso=o("GPT2TokenizerFast"),Yso=o(" (GPT-J model)"),Kso=l(),ns=a("li"),Kne=a("strong"),Zso=o("herbert"),elo=o(" \u2014 "),cB=a("a"),olo=o("HerbertTokenizer"),rlo=o(" or "),fB=a("a"),tlo=o("HerbertTokenizerFast"),alo=o(" (HerBERT model)"),nlo=l(),oh=a("li"),Zne=a("strong"),slo=o("hubert"),llo=o(" \u2014 "),mB=a("a"),ilo=o("Wav2Vec2CTCTokenizer"),dlo=o(" (Hubert model)"),clo=l(),ss=a("li"),ese=a("strong"),flo=o("ibert"),mlo=o(" \u2014 "),gB=a("a"),glo=o("RobertaTokenizer"),hlo=o(" or "),hB=a("a"),plo=o("RobertaTokenizerFast"),ulo=o(" (I-BERT model)"),_lo=l(),rh=a("li"),ose=a("strong"),blo=o("jukebox"),vlo=o(" \u2014 "),rse=a("code"),Flo=o("JukeboxTokenizer"),Tlo=o(" (Jukebox model)"),Mlo=l(),ls=a("li"),tse=a("strong"),Elo=o("layoutlm"),Clo=o(" \u2014 "),pB=a("a"),wlo=o("LayoutLMTokenizer"),Alo=o(" or "),uB=a("a"),Llo=o("LayoutLMTokenizerFast"),ylo=o(" (LayoutLM model)"),xlo=l(),is=a("li"),ase=a("strong"),$lo=o("layoutlmv2"),klo=o(" \u2014 "),_B=a("a"),Slo=o("LayoutLMv2Tokenizer"),Rlo=o(" or "),bB=a("a"),Plo=o("LayoutLMv2TokenizerFast"),Blo=o(" (LayoutLMv2 model)"),Ilo=l(),ds=a("li"),nse=a("strong"),Nlo=o("layoutlmv3"),qlo=o(" \u2014 "),vB=a("a"),jlo=o("LayoutLMv3Tokenizer"),Dlo=o(" or "),FB=a("a"),Glo=o("LayoutLMv3TokenizerFast"),Olo=o(" (LayoutLMv3 model)"),Vlo=l(),cs=a("li"),sse=a("strong"),Xlo=o("layoutxlm"),zlo=o(" \u2014 "),TB=a("a"),Wlo=o("LayoutXLMTokenizer"),Qlo=o(" or "),MB=a("a"),Hlo=o("LayoutXLMTokenizerFast"),Ulo=o(" (LayoutXLM model)"),Jlo=l(),fs=a("li"),lse=a("strong"),Ylo=o("led"),Klo=o(" \u2014 "),EB=a("a"),Zlo=o("LEDTokenizer"),eio=o(" or "),CB=a("a"),oio=o("LEDTokenizerFast"),rio=o(" (LED model)"),tio=l(),ms=a("li"),ise=a("strong"),aio=o("longformer"),nio=o(" \u2014 "),wB=a("a"),sio=o("LongformerTokenizer"),lio=o(" or "),AB=a("a"),iio=o("LongformerTokenizerFast"),dio=o(" (Longformer model)"),cio=l(),gs=a("li"),dse=a("strong"),fio=o("longt5"),mio=o(" \u2014 "),LB=a("a"),gio=o("T5Tokenizer"),hio=o(" or "),yB=a("a"),pio=o("T5TokenizerFast"),uio=o(" (LongT5 model)"),_io=l(),th=a("li"),cse=a("strong"),bio=o("luke"),vio=o(" \u2014 "),xB=a("a"),Fio=o("LukeTokenizer"),Tio=o(" (LUKE model)"),Mio=l(),hs=a("li"),fse=a("strong"),Eio=o("lxmert"),Cio=o(" \u2014 "),$B=a("a"),wio=o("LxmertTokenizer"),Aio=o(" or "),kB=a("a"),Lio=o("LxmertTokenizerFast"),yio=o(" (LXMERT model)"),xio=l(),ah=a("li"),mse=a("strong"),$io=o("m2m_100"),kio=o(" \u2014 "),SB=a("a"),Sio=o("M2M100Tokenizer"),Rio=o(" (M2M100 model)"),Pio=l(),nh=a("li"),gse=a("strong"),Bio=o("marian"),Iio=o(" \u2014 "),RB=a("a"),Nio=o("MarianTokenizer"),qio=o(" (Marian model)"),jio=l(),ps=a("li"),hse=a("strong"),Dio=o("mbart"),Gio=o(" \u2014 "),PB=a("a"),Oio=o("MBartTokenizer"),Vio=o(" or "),BB=a("a"),Xio=o("MBartTokenizerFast"),zio=o(" (mBART model)"),Wio=l(),us=a("li"),pse=a("strong"),Qio=o("mbart50"),Hio=o(" \u2014 "),IB=a("a"),Uio=o("MBart50Tokenizer"),Jio=o(" or "),NB=a("a"),Yio=o("MBart50TokenizerFast"),Kio=o(" (mBART-50 model)"),Zio=l(),_s=a("li"),use=a("strong"),edo=o("megatron-bert"),odo=o(" \u2014 "),qB=a("a"),rdo=o("BertTokenizer"),tdo=o(" or "),jB=a("a"),ado=o("BertTokenizerFast"),ndo=o(" (Megatron-BERT model)"),sdo=l(),sh=a("li"),_se=a("strong"),ldo=o("mluke"),ido=o(" \u2014 "),DB=a("a"),ddo=o("MLukeTokenizer"),cdo=o(" (mLUKE model)"),fdo=l(),bs=a("li"),bse=a("strong"),mdo=o("mobilebert"),gdo=o(" \u2014 "),GB=a("a"),hdo=o("MobileBertTokenizer"),pdo=o(" or "),OB=a("a"),udo=o("MobileBertTokenizerFast"),_do=o(" (MobileBERT model)"),bdo=l(),vs=a("li"),vse=a("strong"),vdo=o("mpnet"),Fdo=o(" \u2014 "),VB=a("a"),Tdo=o("MPNetTokenizer"),Mdo=o(" or "),XB=a("a"),Edo=o("MPNetTokenizerFast"),Cdo=o(" (MPNet model)"),wdo=l(),Fs=a("li"),Fse=a("strong"),Ado=o("mt5"),Ldo=o(" \u2014 "),zB=a("a"),ydo=o("MT5Tokenizer"),xdo=o(" or "),WB=a("a"),$do=o("MT5TokenizerFast"),kdo=o(" (MT5 model)"),Sdo=l(),Ts=a("li"),Tse=a("strong"),Rdo=o("nystromformer"),Pdo=o(" \u2014 "),QB=a("a"),Bdo=o("AlbertTokenizer"),Ido=o(" or "),HB=a("a"),Ndo=o("AlbertTokenizerFast"),qdo=o(" (Nystr\xF6mformer model)"),jdo=l(),Ms=a("li"),Mse=a("strong"),Ddo=o("openai-gpt"),Gdo=o(" \u2014 "),UB=a("a"),Odo=o("OpenAIGPTTokenizer"),Vdo=o(" or "),JB=a("a"),Xdo=o("OpenAIGPTTokenizerFast"),zdo=o(" (OpenAI GPT model)"),Wdo=l(),lh=a("li"),Ese=a("strong"),Qdo=o("opt"),Hdo=o(" \u2014 "),YB=a("a"),Udo=o("GPT2Tokenizer"),Jdo=o(" (OPT model)"),Ydo=l(),Es=a("li"),Cse=a("strong"),Kdo=o("pegasus"),Zdo=o(" \u2014 "),KB=a("a"),eco=o("PegasusTokenizer"),oco=o(" or "),ZB=a("a"),rco=o("PegasusTokenizerFast"),tco=o(" (Pegasus model)"),aco=l(),ih=a("li"),wse=a("strong"),nco=o("perceiver"),sco=o(" \u2014 "),eI=a("a"),lco=o("PerceiverTokenizer"),ico=o(" (Perceiver model)"),dco=l(),dh=a("li"),Ase=a("strong"),cco=o("phobert"),fco=o(" \u2014 "),oI=a("a"),mco=o("PhobertTokenizer"),gco=o(" (PhoBERT model)"),hco=l(),ch=a("li"),Lse=a("strong"),pco=o("plbart"),uco=o(" \u2014 "),rI=a("a"),_co=o("PLBartTokenizer"),bco=o(" (PLBart model)"),vco=l(),fh=a("li"),yse=a("strong"),Fco=o("prophetnet"),Tco=o(" \u2014 "),tI=a("a"),Mco=o("ProphetNetTokenizer"),Eco=o(" (ProphetNet model)"),Cco=l(),Cs=a("li"),xse=a("strong"),wco=o("qdqbert"),Aco=o(" \u2014 "),aI=a("a"),Lco=o("BertTokenizer"),yco=o(" or "),nI=a("a"),xco=o("BertTokenizerFast"),$co=o(" (QDQBert model)"),kco=l(),mh=a("li"),$se=a("strong"),Sco=o("rag"),Rco=o(" \u2014 "),sI=a("a"),Pco=o("RagTokenizer"),Bco=o(" (RAG model)"),Ico=l(),ws=a("li"),kse=a("strong"),Nco=o("realm"),qco=o(" \u2014 "),lI=a("a"),jco=o("RealmTokenizer"),Dco=o(" or "),iI=a("a"),Gco=o("RealmTokenizerFast"),Oco=o(" (REALM model)"),Vco=l(),As=a("li"),Sse=a("strong"),Xco=o("reformer"),zco=o(" \u2014 "),dI=a("a"),Wco=o("ReformerTokenizer"),Qco=o(" or "),cI=a("a"),Hco=o("ReformerTokenizerFast"),Uco=o(" (Reformer model)"),Jco=l(),Ls=a("li"),Rse=a("strong"),Yco=o("rembert"),Kco=o(" \u2014 "),fI=a("a"),Zco=o("RemBertTokenizer"),efo=o(" or "),mI=a("a"),ofo=o("RemBertTokenizerFast"),rfo=o(" (RemBERT model)"),tfo=l(),ys=a("li"),Pse=a("strong"),afo=o("retribert"),nfo=o(" \u2014 "),gI=a("a"),sfo=o("RetriBertTokenizer"),lfo=o(" or "),hI=a("a"),ifo=o("RetriBertTokenizerFast"),dfo=o(" (RetriBERT model)"),cfo=l(),xs=a("li"),Bse=a("strong"),ffo=o("roberta"),mfo=o(" \u2014 "),pI=a("a"),gfo=o("RobertaTokenizer"),hfo=o(" or "),uI=a("a"),pfo=o("RobertaTokenizerFast"),ufo=o(" (RoBERTa model)"),_fo=l(),$s=a("li"),Ise=a("strong"),bfo=o("roformer"),vfo=o(" \u2014 "),_I=a("a"),Ffo=o("RoFormerTokenizer"),Tfo=o(" or "),bI=a("a"),Mfo=o("RoFormerTokenizerFast"),Efo=o(" (RoFormer model)"),Cfo=l(),gh=a("li"),Nse=a("strong"),wfo=o("speech_to_text"),Afo=o(" \u2014 "),vI=a("a"),Lfo=o("Speech2TextTokenizer"),yfo=o(" (Speech2Text model)"),xfo=l(),hh=a("li"),qse=a("strong"),$fo=o("speech_to_text_2"),kfo=o(" \u2014 "),FI=a("a"),Sfo=o("Speech2Text2Tokenizer"),Rfo=o(" (Speech2Text2 model)"),Pfo=l(),ks=a("li"),jse=a("strong"),Bfo=o("splinter"),Ifo=o(" \u2014 "),TI=a("a"),Nfo=o("SplinterTokenizer"),qfo=o(" or "),MI=a("a"),jfo=o("SplinterTokenizerFast"),Dfo=o(" (Splinter model)"),Gfo=l(),Ss=a("li"),Dse=a("strong"),Ofo=o("squeezebert"),Vfo=o(" \u2014 "),EI=a("a"),Xfo=o("SqueezeBertTokenizer"),zfo=o(" or "),CI=a("a"),Wfo=o("SqueezeBertTokenizerFast"),Qfo=o(" (SqueezeBERT model)"),Hfo=l(),Rs=a("li"),Gse=a("strong"),Ufo=o("t5"),Jfo=o(" \u2014 "),wI=a("a"),Yfo=o("T5Tokenizer"),Kfo=o(" or "),AI=a("a"),Zfo=o("T5TokenizerFast"),emo=o(" (T5 model)"),omo=l(),ph=a("li"),Ose=a("strong"),rmo=o("tapas"),tmo=o(" \u2014 "),LI=a("a"),amo=o("TapasTokenizer"),nmo=o(" (TAPAS model)"),smo=l(),uh=a("li"),Vse=a("strong"),lmo=o("tapex"),imo=o(" \u2014 "),yI=a("a"),dmo=o("TapexTokenizer"),cmo=o(" (TAPEX model)"),fmo=l(),_h=a("li"),Xse=a("strong"),mmo=o("transfo-xl"),gmo=o(" \u2014 "),xI=a("a"),hmo=o("TransfoXLTokenizer"),pmo=o(" (Transformer-XL model)"),umo=l(),Ps=a("li"),zse=a("strong"),_mo=o("vilt"),bmo=o(" \u2014 "),$I=a("a"),vmo=o("BertTokenizer"),Fmo=o(" or "),kI=a("a"),Tmo=o("BertTokenizerFast"),Mmo=o(" (ViLT model)"),Emo=l(),Bs=a("li"),Wse=a("strong"),Cmo=o("visual_bert"),wmo=o(" \u2014 "),SI=a("a"),Amo=o("BertTokenizer"),Lmo=o(" or "),RI=a("a"),ymo=o("BertTokenizerFast"),xmo=o(" (VisualBERT model)"),$mo=l(),bh=a("li"),Qse=a("strong"),kmo=o("wav2vec2"),Smo=o(" \u2014 "),PI=a("a"),Rmo=o("Wav2Vec2CTCTokenizer"),Pmo=o(" (Wav2Vec2 model)"),Bmo=l(),vh=a("li"),Hse=a("strong"),Imo=o("wav2vec2-conformer"),Nmo=o(" \u2014 "),BI=a("a"),qmo=o("Wav2Vec2CTCTokenizer"),jmo=o(" (Wav2Vec2-Conformer model)"),Dmo=l(),Fh=a("li"),Use=a("strong"),Gmo=o("wav2vec2_phoneme"),Omo=o(" \u2014 "),II=a("a"),Vmo=o("Wav2Vec2PhonemeCTCTokenizer"),Xmo=o(" (Wav2Vec2Phoneme model)"),zmo=l(),Is=a("li"),Jse=a("strong"),Wmo=o("xglm"),Qmo=o(" \u2014 "),NI=a("a"),Hmo=o("XGLMTokenizer"),Umo=o(" or "),qI=a("a"),Jmo=o("XGLMTokenizerFast"),Ymo=o(" (XGLM model)"),Kmo=l(),Th=a("li"),Yse=a("strong"),Zmo=o("xlm"),ego=o(" \u2014 "),jI=a("a"),ogo=o("XLMTokenizer"),rgo=o(" (XLM model)"),tgo=l(),Mh=a("li"),Kse=a("strong"),ago=o("xlm-prophetnet"),ngo=o(" \u2014 "),DI=a("a"),sgo=o("XLMProphetNetTokenizer"),lgo=o(" (XLM-ProphetNet model)"),igo=l(),Ns=a("li"),Zse=a("strong"),dgo=o("xlm-roberta"),cgo=o(" \u2014 "),GI=a("a"),fgo=o("XLMRobertaTokenizer"),mgo=o(" or "),OI=a("a"),ggo=o("XLMRobertaTokenizerFast"),hgo=o(" (XLM-RoBERTa model)"),pgo=l(),qs=a("li"),ele=a("strong"),ugo=o("xlm-roberta-xl"),_go=o(" \u2014 "),VI=a("a"),bgo=o("RobertaTokenizer"),vgo=o(" or "),XI=a("a"),Fgo=o("RobertaTokenizerFast"),Tgo=o(" (XLM-RoBERTa-XL model)"),Mgo=l(),js=a("li"),ole=a("strong"),Ego=o("xlnet"),Cgo=o(" \u2014 "),zI=a("a"),wgo=o("XLNetTokenizer"),Ago=o(" or "),WI=a("a"),Lgo=o("XLNetTokenizerFast"),ygo=o(" (XLNet model)"),xgo=l(),Ds=a("li"),rle=a("strong"),$go=o("yoso"),kgo=o(" \u2014 "),QI=a("a"),Sgo=o("AlbertTokenizer"),Rgo=o(" or "),HI=a("a"),Pgo=o("AlbertTokenizerFast"),Bgo=o(" (YOSO model)"),Igo=l(),F(Eh.$$.fragment),Ngo=l(),Ch=a("div"),F(BA.$$.fragment),qgo=l(),tle=a("p"),jgo=o("Register a new tokenizer in this mapping."),vGe=l(),ki=a("h2"),wh=a("a"),ale=a("span"),F(IA.$$.fragment),Dgo=l(),nle=a("span"),Ggo=o("AutoFeatureExtractor"),FGe=l(),Lo=a("div"),F(NA.$$.fragment),Ogo=l(),qA=a("p"),Vgo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UI=a("a"),Xgo=o("AutoFeatureExtractor.from_pretrained()"),zgo=o(" class method."),Wgo=l(),jA=a("p"),Qgo=o("This class cannot be instantiated directly using "),sle=a("code"),Hgo=o("__init__()"),Ugo=o(" (throws an error)."),Jgo=l(),He=a("div"),F(DA.$$.fragment),Ygo=l(),lle=a("p"),Kgo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Zgo=l(),ka=a("p"),eho=o("The feature extractor class to instantiate is selected based on the "),ile=a("code"),oho=o("model_type"),rho=o(` property of the config object
(either passed as an argument or loaded from `),dle=a("code"),tho=o("pretrained_model_name_or_path"),aho=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),cle=a("code"),nho=o("pretrained_model_name_or_path"),sho=o(":"),lho=l(),Y=a("ul"),Ah=a("li"),fle=a("strong"),iho=o("beit"),dho=o(" \u2014 "),JI=a("a"),cho=o("BeitFeatureExtractor"),fho=o(" (BEiT model)"),mho=l(),Lh=a("li"),mle=a("strong"),gho=o("clip"),hho=o(" \u2014 "),YI=a("a"),pho=o("CLIPFeatureExtractor"),uho=o(" (CLIP model)"),_ho=l(),yh=a("li"),gle=a("strong"),bho=o("convnext"),vho=o(" \u2014 "),KI=a("a"),Fho=o("ConvNextFeatureExtractor"),Tho=o(" (ConvNeXT model)"),Mho=l(),xh=a("li"),hle=a("strong"),Eho=o("cvt"),Cho=o(" \u2014 "),ZI=a("a"),who=o("ConvNextFeatureExtractor"),Aho=o(" (CvT model)"),Lho=l(),$h=a("li"),ple=a("strong"),yho=o("data2vec-audio"),xho=o(" \u2014 "),eN=a("a"),$ho=o("Wav2Vec2FeatureExtractor"),kho=o(" (Data2VecAudio model)"),Sho=l(),kh=a("li"),ule=a("strong"),Rho=o("data2vec-vision"),Pho=o(" \u2014 "),oN=a("a"),Bho=o("BeitFeatureExtractor"),Iho=o(" (Data2VecVision model)"),Nho=l(),Sh=a("li"),_le=a("strong"),qho=o("deit"),jho=o(" \u2014 "),rN=a("a"),Dho=o("DeiTFeatureExtractor"),Gho=o(" (DeiT model)"),Oho=l(),Rh=a("li"),ble=a("strong"),Vho=o("detr"),Xho=o(" \u2014 "),tN=a("a"),zho=o("DetrFeatureExtractor"),Who=o(" (DETR model)"),Qho=l(),Ph=a("li"),vle=a("strong"),Hho=o("dpt"),Uho=o(" \u2014 "),aN=a("a"),Jho=o("DPTFeatureExtractor"),Yho=o(" (DPT model)"),Kho=l(),Bh=a("li"),Fle=a("strong"),Zho=o("flava"),epo=o(" \u2014 "),nN=a("a"),opo=o("FlavaFeatureExtractor"),rpo=o(" (FLAVA model)"),tpo=l(),Ih=a("li"),Tle=a("strong"),apo=o("glpn"),npo=o(" \u2014 "),sN=a("a"),spo=o("GLPNFeatureExtractor"),lpo=o(" (GLPN model)"),ipo=l(),Nh=a("li"),Mle=a("strong"),dpo=o("hubert"),cpo=o(" \u2014 "),lN=a("a"),fpo=o("Wav2Vec2FeatureExtractor"),mpo=o(" (Hubert model)"),gpo=l(),qh=a("li"),Ele=a("strong"),hpo=o("imagegpt"),ppo=o(" \u2014 "),iN=a("a"),upo=o("ImageGPTFeatureExtractor"),_po=o(" (ImageGPT model)"),bpo=l(),jh=a("li"),Cle=a("strong"),vpo=o("layoutlmv2"),Fpo=o(" \u2014 "),dN=a("a"),Tpo=o("LayoutLMv2FeatureExtractor"),Mpo=o(" (LayoutLMv2 model)"),Epo=l(),Dh=a("li"),wle=a("strong"),Cpo=o("layoutlmv3"),wpo=o(" \u2014 "),cN=a("a"),Apo=o("LayoutLMv3FeatureExtractor"),Lpo=o(" (LayoutLMv3 model)"),ypo=l(),Gh=a("li"),Ale=a("strong"),xpo=o("levit"),$po=o(" \u2014 "),fN=a("a"),kpo=o("LevitFeatureExtractor"),Spo=o(" (LeViT model)"),Rpo=l(),Oh=a("li"),Lle=a("strong"),Ppo=o("maskformer"),Bpo=o(" \u2014 "),mN=a("a"),Ipo=o("MaskFormerFeatureExtractor"),Npo=o(" (MaskFormer model)"),qpo=l(),Vh=a("li"),yle=a("strong"),jpo=o("mctct"),Dpo=o(" \u2014 "),gN=a("a"),Gpo=o("MCTCTFeatureExtractor"),Opo=o(" (M-CTC-T model)"),Vpo=l(),Xh=a("li"),xle=a("strong"),Xpo=o("perceiver"),zpo=o(" \u2014 "),hN=a("a"),Wpo=o("PerceiverFeatureExtractor"),Qpo=o(" (Perceiver model)"),Hpo=l(),zh=a("li"),$le=a("strong"),Upo=o("poolformer"),Jpo=o(" \u2014 "),pN=a("a"),Ypo=o("PoolFormerFeatureExtractor"),Kpo=o(" (PoolFormer model)"),Zpo=l(),Wh=a("li"),kle=a("strong"),euo=o("regnet"),ouo=o(" \u2014 "),uN=a("a"),ruo=o("ConvNextFeatureExtractor"),tuo=o(" (RegNet model)"),auo=l(),Qh=a("li"),Sle=a("strong"),nuo=o("resnet"),suo=o(" \u2014 "),_N=a("a"),luo=o("ConvNextFeatureExtractor"),iuo=o(" (ResNet model)"),duo=l(),Hh=a("li"),Rle=a("strong"),cuo=o("segformer"),fuo=o(" \u2014 "),bN=a("a"),muo=o("SegformerFeatureExtractor"),guo=o(" (SegFormer model)"),huo=l(),Uh=a("li"),Ple=a("strong"),puo=o("speech_to_text"),uuo=o(" \u2014 "),vN=a("a"),_uo=o("Speech2TextFeatureExtractor"),buo=o(" (Speech2Text model)"),vuo=l(),Jh=a("li"),Ble=a("strong"),Fuo=o("swin"),Tuo=o(" \u2014 "),FN=a("a"),Muo=o("ViTFeatureExtractor"),Euo=o(" (Swin Transformer model)"),Cuo=l(),Yh=a("li"),Ile=a("strong"),wuo=o("van"),Auo=o(" \u2014 "),TN=a("a"),Luo=o("ConvNextFeatureExtractor"),yuo=o(" (VAN model)"),xuo=l(),Kh=a("li"),Nle=a("strong"),$uo=o("vilt"),kuo=o(" \u2014 "),MN=a("a"),Suo=o("ViltFeatureExtractor"),Ruo=o(" (ViLT model)"),Puo=l(),Zh=a("li"),qle=a("strong"),Buo=o("vit"),Iuo=o(" \u2014 "),EN=a("a"),Nuo=o("ViTFeatureExtractor"),quo=o(" (ViT model)"),juo=l(),ep=a("li"),jle=a("strong"),Duo=o("vit_mae"),Guo=o(" \u2014 "),CN=a("a"),Ouo=o("ViTFeatureExtractor"),Vuo=o(" (ViTMAE model)"),Xuo=l(),op=a("li"),Dle=a("strong"),zuo=o("wav2vec2"),Wuo=o(" \u2014 "),wN=a("a"),Quo=o("Wav2Vec2FeatureExtractor"),Huo=o(" (Wav2Vec2 model)"),Uuo=l(),rp=a("li"),Gle=a("strong"),Juo=o("wav2vec2-conformer"),Yuo=o(" \u2014 "),AN=a("a"),Kuo=o("Wav2Vec2FeatureExtractor"),Zuo=o(" (Wav2Vec2-Conformer model)"),e_o=l(),tp=a("li"),Ole=a("strong"),o_o=o("yolos"),r_o=o(" \u2014 "),LN=a("a"),t_o=o("YolosFeatureExtractor"),a_o=o(" (YOLOS model)"),n_o=l(),F(ap.$$.fragment),s_o=l(),F(np.$$.fragment),l_o=l(),sp=a("div"),F(GA.$$.fragment),i_o=l(),Vle=a("p"),d_o=o("Register a new feature extractor for this class."),TGe=l(),Si=a("h2"),lp=a("a"),Xle=a("span"),F(OA.$$.fragment),c_o=l(),zle=a("span"),f_o=o("AutoProcessor"),MGe=l(),yo=a("div"),F(VA.$$.fragment),m_o=l(),XA=a("p"),g_o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),yN=a("a"),h_o=o("AutoProcessor.from_pretrained()"),p_o=o(" class method."),u_o=l(),zA=a("p"),__o=o("This class cannot be instantiated directly using "),Wle=a("code"),b_o=o("__init__()"),v_o=o(" (throws an error)."),F_o=l(),Ue=a("div"),F(WA.$$.fragment),T_o=l(),Qle=a("p"),M_o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),E_o=l(),Ri=a("p"),C_o=o("The processor class to instantiate is selected based on the "),Hle=a("code"),w_o=o("model_type"),A_o=o(` property of the config object (either
passed as an argument or loaded from `),Ule=a("code"),L_o=o("pretrained_model_name_or_path"),y_o=o(" if possible):"),x_o=l(),he=a("ul"),ip=a("li"),Jle=a("strong"),$_o=o("clip"),k_o=o(" \u2014 "),xN=a("a"),S_o=o("CLIPProcessor"),R_o=o(" (CLIP model)"),P_o=l(),dp=a("li"),Yle=a("strong"),B_o=o("flava"),I_o=o(" \u2014 "),Kle=a("code"),N_o=o("FLAVAProcessor"),q_o=o(" (FLAVA model)"),j_o=l(),cp=a("li"),Zle=a("strong"),D_o=o("layoutlmv2"),G_o=o(" \u2014 "),$N=a("a"),O_o=o("LayoutLMv2Processor"),V_o=o(" (LayoutLMv2 model)"),X_o=l(),fp=a("li"),eie=a("strong"),z_o=o("layoutlmv3"),W_o=o(" \u2014 "),kN=a("a"),Q_o=o("LayoutLMv3Processor"),H_o=o(" (LayoutLMv3 model)"),U_o=l(),mp=a("li"),oie=a("strong"),J_o=o("layoutxlm"),Y_o=o(" \u2014 "),SN=a("a"),K_o=o("LayoutXLMProcessor"),Z_o=o(" (LayoutXLM model)"),e2o=l(),gp=a("li"),rie=a("strong"),o2o=o("sew"),r2o=o(" \u2014 "),RN=a("a"),t2o=o("Wav2Vec2Processor"),a2o=o(" (SEW model)"),n2o=l(),hp=a("li"),tie=a("strong"),s2o=o("sew-d"),l2o=o(" \u2014 "),PN=a("a"),i2o=o("Wav2Vec2Processor"),d2o=o(" (SEW-D model)"),c2o=l(),pp=a("li"),aie=a("strong"),f2o=o("speech_to_text"),m2o=o(" \u2014 "),BN=a("a"),g2o=o("Speech2TextProcessor"),h2o=o(" (Speech2Text model)"),p2o=l(),up=a("li"),nie=a("strong"),u2o=o("speech_to_text_2"),_2o=o(" \u2014 "),IN=a("a"),b2o=o("Speech2Text2Processor"),v2o=o(" (Speech2Text2 model)"),F2o=l(),_p=a("li"),sie=a("strong"),T2o=o("trocr"),M2o=o(" \u2014 "),NN=a("a"),E2o=o("TrOCRProcessor"),C2o=o(" (TrOCR model)"),w2o=l(),bp=a("li"),lie=a("strong"),A2o=o("unispeech"),L2o=o(" \u2014 "),qN=a("a"),y2o=o("Wav2Vec2Processor"),x2o=o(" (UniSpeech model)"),$2o=l(),vp=a("li"),iie=a("strong"),k2o=o("unispeech-sat"),S2o=o(" \u2014 "),jN=a("a"),R2o=o("Wav2Vec2Processor"),P2o=o(" (UniSpeechSat model)"),B2o=l(),Fp=a("li"),die=a("strong"),I2o=o("vilt"),N2o=o(" \u2014 "),DN=a("a"),q2o=o("ViltProcessor"),j2o=o(" (ViLT model)"),D2o=l(),Tp=a("li"),cie=a("strong"),G2o=o("vision-text-dual-encoder"),O2o=o(" \u2014 "),GN=a("a"),V2o=o("VisionTextDualEncoderProcessor"),X2o=o(" (VisionTextDualEncoder model)"),z2o=l(),Mp=a("li"),fie=a("strong"),W2o=o("wav2vec2"),Q2o=o(" \u2014 "),ON=a("a"),H2o=o("Wav2Vec2Processor"),U2o=o(" (Wav2Vec2 model)"),J2o=l(),Ep=a("li"),mie=a("strong"),Y2o=o("wav2vec2-conformer"),K2o=o(" \u2014 "),VN=a("a"),Z2o=o("Wav2Vec2Processor"),e1o=o(" (Wav2Vec2-Conformer model)"),o1o=l(),Cp=a("li"),gie=a("strong"),r1o=o("wavlm"),t1o=o(" \u2014 "),XN=a("a"),a1o=o("Wav2Vec2Processor"),n1o=o(" (WavLM model)"),s1o=l(),F(wp.$$.fragment),l1o=l(),F(Ap.$$.fragment),i1o=l(),Lp=a("div"),F(QA.$$.fragment),d1o=l(),hie=a("p"),c1o=o("Register a new processor for this class."),EGe=l(),Pi=a("h2"),yp=a("a"),pie=a("span"),F(HA.$$.fragment),f1o=l(),uie=a("span"),m1o=o("AutoModel"),CGe=l(),xo=a("div"),F(UA.$$.fragment),g1o=l(),Bi=a("p"),h1o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zN=a("a"),p1o=o("from_pretrained()"),u1o=o(" class method or the "),WN=a("a"),_1o=o("from_config()"),b1o=o(` class
method.`),v1o=l(),JA=a("p"),F1o=o("This class cannot be instantiated directly using "),_ie=a("code"),T1o=o("__init__()"),M1o=o(" (throws an error)."),E1o=l(),nt=a("div"),F(YA.$$.fragment),C1o=l(),bie=a("p"),w1o=o("Instantiates one of the base model classes of the library from a configuration."),A1o=l(),Ii=a("p"),L1o=o(`Note:
Loading a model from its configuration file does `),vie=a("strong"),y1o=o("not"),x1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=a("a"),$1o=o("from_pretrained()"),k1o=o(" to load the model weights."),S1o=l(),F(xp.$$.fragment),R1o=l(),Je=a("div"),F(KA.$$.fragment),P1o=l(),Fie=a("p"),B1o=o("Instantiate one of the base model classes of the library from a pretrained model."),I1o=l(),Sa=a("p"),N1o=o("The model class to instantiate is selected based on the "),Tie=a("code"),q1o=o("model_type"),j1o=o(` property of the config object (either
passed as an argument or loaded from `),Mie=a("code"),D1o=o("pretrained_model_name_or_path"),G1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=a("code"),O1o=o("pretrained_model_name_or_path"),V1o=o(":"),X1o=l(),y=a("ul"),$p=a("li"),Cie=a("strong"),z1o=o("albert"),W1o=o(" \u2014 "),HN=a("a"),Q1o=o("AlbertModel"),H1o=o(" (ALBERT model)"),U1o=l(),kp=a("li"),wie=a("strong"),J1o=o("bart"),Y1o=o(" \u2014 "),UN=a("a"),K1o=o("BartModel"),Z1o=o(" (BART model)"),ebo=l(),Sp=a("li"),Aie=a("strong"),obo=o("beit"),rbo=o(" \u2014 "),JN=a("a"),tbo=o("BeitModel"),abo=o(" (BEiT model)"),nbo=l(),Rp=a("li"),Lie=a("strong"),sbo=o("bert"),lbo=o(" \u2014 "),YN=a("a"),ibo=o("BertModel"),dbo=o(" (BERT model)"),cbo=l(),Pp=a("li"),yie=a("strong"),fbo=o("bert-generation"),mbo=o(" \u2014 "),KN=a("a"),gbo=o("BertGenerationEncoder"),hbo=o(" (Bert Generation model)"),pbo=l(),Bp=a("li"),xie=a("strong"),ubo=o("big_bird"),_bo=o(" \u2014 "),ZN=a("a"),bbo=o("BigBirdModel"),vbo=o(" (BigBird model)"),Fbo=l(),Ip=a("li"),$ie=a("strong"),Tbo=o("bigbird_pegasus"),Mbo=o(" \u2014 "),eq=a("a"),Ebo=o("BigBirdPegasusModel"),Cbo=o(" (BigBird-Pegasus model)"),wbo=l(),Np=a("li"),kie=a("strong"),Abo=o("blenderbot"),Lbo=o(" \u2014 "),oq=a("a"),ybo=o("BlenderbotModel"),xbo=o(" (Blenderbot model)"),$bo=l(),qp=a("li"),Sie=a("strong"),kbo=o("blenderbot-small"),Sbo=o(" \u2014 "),rq=a("a"),Rbo=o("BlenderbotSmallModel"),Pbo=o(" (BlenderbotSmall model)"),Bbo=l(),jp=a("li"),Rie=a("strong"),Ibo=o("bloom"),Nbo=o(" \u2014 "),tq=a("a"),qbo=o("BloomModel"),jbo=o(" (BLOOM model)"),Dbo=l(),Dp=a("li"),Pie=a("strong"),Gbo=o("camembert"),Obo=o(" \u2014 "),aq=a("a"),Vbo=o("CamembertModel"),Xbo=o(" (CamemBERT model)"),zbo=l(),Gp=a("li"),Bie=a("strong"),Wbo=o("canine"),Qbo=o(" \u2014 "),nq=a("a"),Hbo=o("CanineModel"),Ubo=o(" (CANINE model)"),Jbo=l(),Op=a("li"),Iie=a("strong"),Ybo=o("clip"),Kbo=o(" \u2014 "),sq=a("a"),Zbo=o("CLIPModel"),evo=o(" (CLIP model)"),ovo=l(),Vp=a("li"),Nie=a("strong"),rvo=o("convbert"),tvo=o(" \u2014 "),lq=a("a"),avo=o("ConvBertModel"),nvo=o(" (ConvBERT model)"),svo=l(),Xp=a("li"),qie=a("strong"),lvo=o("convnext"),ivo=o(" \u2014 "),iq=a("a"),dvo=o("ConvNextModel"),cvo=o(" (ConvNeXT model)"),fvo=l(),zp=a("li"),jie=a("strong"),mvo=o("ctrl"),gvo=o(" \u2014 "),dq=a("a"),hvo=o("CTRLModel"),pvo=o(" (CTRL model)"),uvo=l(),Wp=a("li"),Die=a("strong"),_vo=o("cvt"),bvo=o(" \u2014 "),cq=a("a"),vvo=o("CvtModel"),Fvo=o(" (CvT model)"),Tvo=l(),Qp=a("li"),Gie=a("strong"),Mvo=o("data2vec-audio"),Evo=o(" \u2014 "),fq=a("a"),Cvo=o("Data2VecAudioModel"),wvo=o(" (Data2VecAudio model)"),Avo=l(),Hp=a("li"),Oie=a("strong"),Lvo=o("data2vec-text"),yvo=o(" \u2014 "),mq=a("a"),xvo=o("Data2VecTextModel"),$vo=o(" (Data2VecText model)"),kvo=l(),Up=a("li"),Vie=a("strong"),Svo=o("data2vec-vision"),Rvo=o(" \u2014 "),gq=a("a"),Pvo=o("Data2VecVisionModel"),Bvo=o(" (Data2VecVision model)"),Ivo=l(),Jp=a("li"),Xie=a("strong"),Nvo=o("deberta"),qvo=o(" \u2014 "),hq=a("a"),jvo=o("DebertaModel"),Dvo=o(" (DeBERTa model)"),Gvo=l(),Yp=a("li"),zie=a("strong"),Ovo=o("deberta-v2"),Vvo=o(" \u2014 "),pq=a("a"),Xvo=o("DebertaV2Model"),zvo=o(" (DeBERTa-v2 model)"),Wvo=l(),Kp=a("li"),Wie=a("strong"),Qvo=o("decision_transformer"),Hvo=o(" \u2014 "),uq=a("a"),Uvo=o("DecisionTransformerModel"),Jvo=o(" (Decision Transformer model)"),Yvo=l(),Zp=a("li"),Qie=a("strong"),Kvo=o("deit"),Zvo=o(" \u2014 "),_q=a("a"),eFo=o("DeiTModel"),oFo=o(" (DeiT model)"),rFo=l(),eu=a("li"),Hie=a("strong"),tFo=o("detr"),aFo=o(" \u2014 "),bq=a("a"),nFo=o("DetrModel"),sFo=o(" (DETR model)"),lFo=l(),ou=a("li"),Uie=a("strong"),iFo=o("distilbert"),dFo=o(" \u2014 "),vq=a("a"),cFo=o("DistilBertModel"),fFo=o(" (DistilBERT model)"),mFo=l(),ru=a("li"),Jie=a("strong"),gFo=o("dpr"),hFo=o(" \u2014 "),Fq=a("a"),pFo=o("DPRQuestionEncoder"),uFo=o(" (DPR model)"),_Fo=l(),tu=a("li"),Yie=a("strong"),bFo=o("dpt"),vFo=o(" \u2014 "),Tq=a("a"),FFo=o("DPTModel"),TFo=o(" (DPT model)"),MFo=l(),au=a("li"),Kie=a("strong"),EFo=o("electra"),CFo=o(" \u2014 "),Mq=a("a"),wFo=o("ElectraModel"),AFo=o(" (ELECTRA model)"),LFo=l(),nu=a("li"),Zie=a("strong"),yFo=o("flaubert"),xFo=o(" \u2014 "),Eq=a("a"),$Fo=o("FlaubertModel"),kFo=o(" (FlauBERT model)"),SFo=l(),su=a("li"),ede=a("strong"),RFo=o("flava"),PFo=o(" \u2014 "),Cq=a("a"),BFo=o("FlavaModel"),IFo=o(" (FLAVA model)"),NFo=l(),lu=a("li"),ode=a("strong"),qFo=o("fnet"),jFo=o(" \u2014 "),wq=a("a"),DFo=o("FNetModel"),GFo=o(" (FNet model)"),OFo=l(),iu=a("li"),rde=a("strong"),VFo=o("fsmt"),XFo=o(" \u2014 "),Aq=a("a"),zFo=o("FSMTModel"),WFo=o(" (FairSeq Machine-Translation model)"),QFo=l(),Gs=a("li"),tde=a("strong"),HFo=o("funnel"),UFo=o(" \u2014 "),Lq=a("a"),JFo=o("FunnelModel"),YFo=o(" or "),yq=a("a"),KFo=o("FunnelBaseModel"),ZFo=o(" (Funnel Transformer model)"),e6o=l(),du=a("li"),ade=a("strong"),o6o=o("glpn"),r6o=o(" \u2014 "),xq=a("a"),t6o=o("GLPNModel"),a6o=o(" (GLPN model)"),n6o=l(),cu=a("li"),nde=a("strong"),s6o=o("gpt2"),l6o=o(" \u2014 "),$q=a("a"),i6o=o("GPT2Model"),d6o=o(" (OpenAI GPT-2 model)"),c6o=l(),fu=a("li"),sde=a("strong"),f6o=o("gpt_neo"),m6o=o(" \u2014 "),kq=a("a"),g6o=o("GPTNeoModel"),h6o=o(" (GPT Neo model)"),p6o=l(),mu=a("li"),lde=a("strong"),u6o=o("gpt_neox"),_6o=o(" \u2014 "),Sq=a("a"),b6o=o("GPTNeoXModel"),v6o=o(" (GPT NeoX model)"),F6o=l(),gu=a("li"),ide=a("strong"),T6o=o("gptj"),M6o=o(" \u2014 "),Rq=a("a"),E6o=o("GPTJModel"),C6o=o(" (GPT-J model)"),w6o=l(),hu=a("li"),dde=a("strong"),A6o=o("hubert"),L6o=o(" \u2014 "),Pq=a("a"),y6o=o("HubertModel"),x6o=o(" (Hubert model)"),$6o=l(),pu=a("li"),cde=a("strong"),k6o=o("ibert"),S6o=o(" \u2014 "),Bq=a("a"),R6o=o("IBertModel"),P6o=o(" (I-BERT model)"),B6o=l(),uu=a("li"),fde=a("strong"),I6o=o("imagegpt"),N6o=o(" \u2014 "),Iq=a("a"),q6o=o("ImageGPTModel"),j6o=o(" (ImageGPT model)"),D6o=l(),_u=a("li"),mde=a("strong"),G6o=o("jukebox"),O6o=o(" \u2014 "),gde=a("code"),V6o=o("JukeboxModel"),X6o=o(" (Jukebox model)"),z6o=l(),bu=a("li"),hde=a("strong"),W6o=o("layoutlm"),Q6o=o(" \u2014 "),Nq=a("a"),H6o=o("LayoutLMModel"),U6o=o(" (LayoutLM model)"),J6o=l(),vu=a("li"),pde=a("strong"),Y6o=o("layoutlmv2"),K6o=o(" \u2014 "),qq=a("a"),Z6o=o("LayoutLMv2Model"),eTo=o(" (LayoutLMv2 model)"),oTo=l(),Fu=a("li"),ude=a("strong"),rTo=o("layoutlmv3"),tTo=o(" \u2014 "),jq=a("a"),aTo=o("LayoutLMv3Model"),nTo=o(" (LayoutLMv3 model)"),sTo=l(),Tu=a("li"),_de=a("strong"),lTo=o("led"),iTo=o(" \u2014 "),Dq=a("a"),dTo=o("LEDModel"),cTo=o(" (LED model)"),fTo=l(),Mu=a("li"),bde=a("strong"),mTo=o("levit"),gTo=o(" \u2014 "),Gq=a("a"),hTo=o("LevitModel"),pTo=o(" (LeViT model)"),uTo=l(),Eu=a("li"),vde=a("strong"),_To=o("longformer"),bTo=o(" \u2014 "),Oq=a("a"),vTo=o("LongformerModel"),FTo=o(" (Longformer model)"),TTo=l(),Cu=a("li"),Fde=a("strong"),MTo=o("longt5"),ETo=o(" \u2014 "),Vq=a("a"),CTo=o("LongT5Model"),wTo=o(" (LongT5 model)"),ATo=l(),wu=a("li"),Tde=a("strong"),LTo=o("luke"),yTo=o(" \u2014 "),Xq=a("a"),xTo=o("LukeModel"),$To=o(" (LUKE model)"),kTo=l(),Au=a("li"),Mde=a("strong"),STo=o("lxmert"),RTo=o(" \u2014 "),zq=a("a"),PTo=o("LxmertModel"),BTo=o(" (LXMERT model)"),ITo=l(),Lu=a("li"),Ede=a("strong"),NTo=o("m2m_100"),qTo=o(" \u2014 "),Wq=a("a"),jTo=o("M2M100Model"),DTo=o(" (M2M100 model)"),GTo=l(),yu=a("li"),Cde=a("strong"),OTo=o("marian"),VTo=o(" \u2014 "),Qq=a("a"),XTo=o("MarianModel"),zTo=o(" (Marian model)"),WTo=l(),xu=a("li"),wde=a("strong"),QTo=o("maskformer"),HTo=o(" \u2014 "),Hq=a("a"),UTo=o("MaskFormerModel"),JTo=o(" (MaskFormer model)"),YTo=l(),$u=a("li"),Ade=a("strong"),KTo=o("mbart"),ZTo=o(" \u2014 "),Uq=a("a"),e7o=o("MBartModel"),o7o=o(" (mBART model)"),r7o=l(),ku=a("li"),Lde=a("strong"),t7o=o("mctct"),a7o=o(" \u2014 "),Jq=a("a"),n7o=o("MCTCTModel"),s7o=o(" (M-CTC-T model)"),l7o=l(),Su=a("li"),yde=a("strong"),i7o=o("megatron-bert"),d7o=o(" \u2014 "),Yq=a("a"),c7o=o("MegatronBertModel"),f7o=o(" (Megatron-BERT model)"),m7o=l(),Ru=a("li"),xde=a("strong"),g7o=o("mobilebert"),h7o=o(" \u2014 "),Kq=a("a"),p7o=o("MobileBertModel"),u7o=o(" (MobileBERT model)"),_7o=l(),Pu=a("li"),$de=a("strong"),b7o=o("mpnet"),v7o=o(" \u2014 "),Zq=a("a"),F7o=o("MPNetModel"),T7o=o(" (MPNet model)"),M7o=l(),Bu=a("li"),kde=a("strong"),E7o=o("mt5"),C7o=o(" \u2014 "),ej=a("a"),w7o=o("MT5Model"),A7o=o(" (MT5 model)"),L7o=l(),Iu=a("li"),Sde=a("strong"),y7o=o("nystromformer"),x7o=o(" \u2014 "),oj=a("a"),$7o=o("NystromformerModel"),k7o=o(" (Nystr\xF6mformer model)"),S7o=l(),Nu=a("li"),Rde=a("strong"),R7o=o("openai-gpt"),P7o=o(" \u2014 "),rj=a("a"),B7o=o("OpenAIGPTModel"),I7o=o(" (OpenAI GPT model)"),N7o=l(),qu=a("li"),Pde=a("strong"),q7o=o("opt"),j7o=o(" \u2014 "),tj=a("a"),D7o=o("OPTModel"),G7o=o(" (OPT model)"),O7o=l(),ju=a("li"),Bde=a("strong"),V7o=o("pegasus"),X7o=o(" \u2014 "),aj=a("a"),z7o=o("PegasusModel"),W7o=o(" (Pegasus model)"),Q7o=l(),Du=a("li"),Ide=a("strong"),H7o=o("perceiver"),U7o=o(" \u2014 "),nj=a("a"),J7o=o("PerceiverModel"),Y7o=o(" (Perceiver model)"),K7o=l(),Gu=a("li"),Nde=a("strong"),Z7o=o("plbart"),e8o=o(" \u2014 "),sj=a("a"),o8o=o("PLBartModel"),r8o=o(" (PLBart model)"),t8o=l(),Ou=a("li"),qde=a("strong"),a8o=o("poolformer"),n8o=o(" \u2014 "),lj=a("a"),s8o=o("PoolFormerModel"),l8o=o(" (PoolFormer model)"),i8o=l(),Vu=a("li"),jde=a("strong"),d8o=o("prophetnet"),c8o=o(" \u2014 "),ij=a("a"),f8o=o("ProphetNetModel"),m8o=o(" (ProphetNet model)"),g8o=l(),Xu=a("li"),Dde=a("strong"),h8o=o("qdqbert"),p8o=o(" \u2014 "),dj=a("a"),u8o=o("QDQBertModel"),_8o=o(" (QDQBert model)"),b8o=l(),zu=a("li"),Gde=a("strong"),v8o=o("reformer"),F8o=o(" \u2014 "),cj=a("a"),T8o=o("ReformerModel"),M8o=o(" (Reformer model)"),E8o=l(),Wu=a("li"),Ode=a("strong"),C8o=o("regnet"),w8o=o(" \u2014 "),fj=a("a"),A8o=o("RegNetModel"),L8o=o(" (RegNet model)"),y8o=l(),Qu=a("li"),Vde=a("strong"),x8o=o("rembert"),$8o=o(" \u2014 "),mj=a("a"),k8o=o("RemBertModel"),S8o=o(" (RemBERT model)"),R8o=l(),Hu=a("li"),Xde=a("strong"),P8o=o("resnet"),B8o=o(" \u2014 "),gj=a("a"),I8o=o("ResNetModel"),N8o=o(" (ResNet model)"),q8o=l(),Uu=a("li"),zde=a("strong"),j8o=o("retribert"),D8o=o(" \u2014 "),hj=a("a"),G8o=o("RetriBertModel"),O8o=o(" (RetriBERT model)"),V8o=l(),Ju=a("li"),Wde=a("strong"),X8o=o("roberta"),z8o=o(" \u2014 "),pj=a("a"),W8o=o("RobertaModel"),Q8o=o(" (RoBERTa model)"),H8o=l(),Yu=a("li"),Qde=a("strong"),U8o=o("roformer"),J8o=o(" \u2014 "),uj=a("a"),Y8o=o("RoFormerModel"),K8o=o(" (RoFormer model)"),Z8o=l(),Ku=a("li"),Hde=a("strong"),eMo=o("segformer"),oMo=o(" \u2014 "),_j=a("a"),rMo=o("SegformerModel"),tMo=o(" (SegFormer model)"),aMo=l(),Zu=a("li"),Ude=a("strong"),nMo=o("sew"),sMo=o(" \u2014 "),bj=a("a"),lMo=o("SEWModel"),iMo=o(" (SEW model)"),dMo=l(),e_=a("li"),Jde=a("strong"),cMo=o("sew-d"),fMo=o(" \u2014 "),vj=a("a"),mMo=o("SEWDModel"),gMo=o(" (SEW-D model)"),hMo=l(),o_=a("li"),Yde=a("strong"),pMo=o("speech_to_text"),uMo=o(" \u2014 "),Fj=a("a"),_Mo=o("Speech2TextModel"),bMo=o(" (Speech2Text model)"),vMo=l(),r_=a("li"),Kde=a("strong"),FMo=o("splinter"),TMo=o(" \u2014 "),Tj=a("a"),MMo=o("SplinterModel"),EMo=o(" (Splinter model)"),CMo=l(),t_=a("li"),Zde=a("strong"),wMo=o("squeezebert"),AMo=o(" \u2014 "),Mj=a("a"),LMo=o("SqueezeBertModel"),yMo=o(" (SqueezeBERT model)"),xMo=l(),a_=a("li"),ece=a("strong"),$Mo=o("swin"),kMo=o(" \u2014 "),Ej=a("a"),SMo=o("SwinModel"),RMo=o(" (Swin Transformer model)"),PMo=l(),n_=a("li"),oce=a("strong"),BMo=o("t5"),IMo=o(" \u2014 "),Cj=a("a"),NMo=o("T5Model"),qMo=o(" (T5 model)"),jMo=l(),s_=a("li"),rce=a("strong"),DMo=o("tapas"),GMo=o(" \u2014 "),wj=a("a"),OMo=o("TapasModel"),VMo=o(" (TAPAS model)"),XMo=l(),l_=a("li"),tce=a("strong"),zMo=o("trajectory_transformer"),WMo=o(" \u2014 "),Aj=a("a"),QMo=o("TrajectoryTransformerModel"),HMo=o(" (Trajectory Transformer model)"),UMo=l(),i_=a("li"),ace=a("strong"),JMo=o("transfo-xl"),YMo=o(" \u2014 "),Lj=a("a"),KMo=o("TransfoXLModel"),ZMo=o(" (Transformer-XL model)"),eEo=l(),d_=a("li"),nce=a("strong"),oEo=o("unispeech"),rEo=o(" \u2014 "),yj=a("a"),tEo=o("UniSpeechModel"),aEo=o(" (UniSpeech model)"),nEo=l(),c_=a("li"),sce=a("strong"),sEo=o("unispeech-sat"),lEo=o(" \u2014 "),xj=a("a"),iEo=o("UniSpeechSatModel"),dEo=o(" (UniSpeechSat model)"),cEo=l(),f_=a("li"),lce=a("strong"),fEo=o("van"),mEo=o(" \u2014 "),$j=a("a"),gEo=o("VanModel"),hEo=o(" (VAN model)"),pEo=l(),m_=a("li"),ice=a("strong"),uEo=o("vilt"),_Eo=o(" \u2014 "),kj=a("a"),bEo=o("ViltModel"),vEo=o(" (ViLT model)"),FEo=l(),g_=a("li"),dce=a("strong"),TEo=o("vision-text-dual-encoder"),MEo=o(" \u2014 "),Sj=a("a"),EEo=o("VisionTextDualEncoderModel"),CEo=o(" (VisionTextDualEncoder model)"),wEo=l(),h_=a("li"),cce=a("strong"),AEo=o("visual_bert"),LEo=o(" \u2014 "),Rj=a("a"),yEo=o("VisualBertModel"),xEo=o(" (VisualBERT model)"),$Eo=l(),p_=a("li"),fce=a("strong"),kEo=o("vit"),SEo=o(" \u2014 "),Pj=a("a"),REo=o("ViTModel"),PEo=o(" (ViT model)"),BEo=l(),u_=a("li"),mce=a("strong"),IEo=o("vit_mae"),NEo=o(" \u2014 "),Bj=a("a"),qEo=o("ViTMAEModel"),jEo=o(" (ViTMAE model)"),DEo=l(),__=a("li"),gce=a("strong"),GEo=o("wav2vec2"),OEo=o(" \u2014 "),Ij=a("a"),VEo=o("Wav2Vec2Model"),XEo=o(" (Wav2Vec2 model)"),zEo=l(),b_=a("li"),hce=a("strong"),WEo=o("wav2vec2-conformer"),QEo=o(" \u2014 "),Nj=a("a"),HEo=o("Wav2Vec2ConformerModel"),UEo=o(" (Wav2Vec2-Conformer model)"),JEo=l(),v_=a("li"),pce=a("strong"),YEo=o("wavlm"),KEo=o(" \u2014 "),qj=a("a"),ZEo=o("WavLMModel"),e4o=o(" (WavLM model)"),o4o=l(),F_=a("li"),uce=a("strong"),r4o=o("xglm"),t4o=o(" \u2014 "),jj=a("a"),a4o=o("XGLMModel"),n4o=o(" (XGLM model)"),s4o=l(),T_=a("li"),_ce=a("strong"),l4o=o("xlm"),i4o=o(" \u2014 "),Dj=a("a"),d4o=o("XLMModel"),c4o=o(" (XLM model)"),f4o=l(),M_=a("li"),bce=a("strong"),m4o=o("xlm-prophetnet"),g4o=o(" \u2014 "),Gj=a("a"),h4o=o("XLMProphetNetModel"),p4o=o(" (XLM-ProphetNet model)"),u4o=l(),E_=a("li"),vce=a("strong"),_4o=o("xlm-roberta"),b4o=o(" \u2014 "),Oj=a("a"),v4o=o("XLMRobertaModel"),F4o=o(" (XLM-RoBERTa model)"),T4o=l(),C_=a("li"),Fce=a("strong"),M4o=o("xlm-roberta-xl"),E4o=o(" \u2014 "),Vj=a("a"),C4o=o("XLMRobertaXLModel"),w4o=o(" (XLM-RoBERTa-XL model)"),A4o=l(),w_=a("li"),Tce=a("strong"),L4o=o("xlnet"),y4o=o(" \u2014 "),Xj=a("a"),x4o=o("XLNetModel"),$4o=o(" (XLNet model)"),k4o=l(),A_=a("li"),Mce=a("strong"),S4o=o("yolos"),R4o=o(" \u2014 "),zj=a("a"),P4o=o("YolosModel"),B4o=o(" (YOLOS model)"),I4o=l(),L_=a("li"),Ece=a("strong"),N4o=o("yoso"),q4o=o(" \u2014 "),Wj=a("a"),j4o=o("YosoModel"),D4o=o(" (YOSO model)"),G4o=l(),y_=a("p"),O4o=o("The model is set in evaluation mode by default using "),Cce=a("code"),V4o=o("model.eval()"),X4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wce=a("code"),z4o=o("model.train()"),W4o=l(),F(x_.$$.fragment),wGe=l(),Ni=a("h2"),$_=a("a"),Ace=a("span"),F(ZA.$$.fragment),Q4o=l(),Lce=a("span"),H4o=o("AutoModelForPreTraining"),AGe=l(),$o=a("div"),F(eL.$$.fragment),U4o=l(),qi=a("p"),J4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qj=a("a"),Y4o=o("from_pretrained()"),K4o=o(" class method or the "),Hj=a("a"),Z4o=o("from_config()"),eCo=o(` class
method.`),oCo=l(),oL=a("p"),rCo=o("This class cannot be instantiated directly using "),yce=a("code"),tCo=o("__init__()"),aCo=o(" (throws an error)."),nCo=l(),st=a("div"),F(rL.$$.fragment),sCo=l(),xce=a("p"),lCo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iCo=l(),ji=a("p"),dCo=o(`Note:
Loading a model from its configuration file does `),$ce=a("strong"),cCo=o("not"),fCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uj=a("a"),mCo=o("from_pretrained()"),gCo=o(" to load the model weights."),hCo=l(),F(k_.$$.fragment),pCo=l(),Ye=a("div"),F(tL.$$.fragment),uCo=l(),kce=a("p"),_Co=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),bCo=l(),Ra=a("p"),vCo=o("The model class to instantiate is selected based on the "),Sce=a("code"),FCo=o("model_type"),TCo=o(` property of the config object (either
passed as an argument or loaded from `),Rce=a("code"),MCo=o("pretrained_model_name_or_path"),ECo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pce=a("code"),CCo=o("pretrained_model_name_or_path"),wCo=o(":"),ACo=l(),G=a("ul"),S_=a("li"),Bce=a("strong"),LCo=o("albert"),yCo=o(" \u2014 "),Jj=a("a"),xCo=o("AlbertForPreTraining"),$Co=o(" (ALBERT model)"),kCo=l(),R_=a("li"),Ice=a("strong"),SCo=o("bart"),RCo=o(" \u2014 "),Yj=a("a"),PCo=o("BartForConditionalGeneration"),BCo=o(" (BART model)"),ICo=l(),P_=a("li"),Nce=a("strong"),NCo=o("bert"),qCo=o(" \u2014 "),Kj=a("a"),jCo=o("BertForPreTraining"),DCo=o(" (BERT model)"),GCo=l(),B_=a("li"),qce=a("strong"),OCo=o("big_bird"),VCo=o(" \u2014 "),Zj=a("a"),XCo=o("BigBirdForPreTraining"),zCo=o(" (BigBird model)"),WCo=l(),I_=a("li"),jce=a("strong"),QCo=o("bloom"),HCo=o(" \u2014 "),eD=a("a"),UCo=o("BloomForCausalLM"),JCo=o(" (BLOOM model)"),YCo=l(),N_=a("li"),Dce=a("strong"),KCo=o("camembert"),ZCo=o(" \u2014 "),oD=a("a"),e5o=o("CamembertForMaskedLM"),o5o=o(" (CamemBERT model)"),r5o=l(),q_=a("li"),Gce=a("strong"),t5o=o("ctrl"),a5o=o(" \u2014 "),rD=a("a"),n5o=o("CTRLLMHeadModel"),s5o=o(" (CTRL model)"),l5o=l(),j_=a("li"),Oce=a("strong"),i5o=o("data2vec-text"),d5o=o(" \u2014 "),tD=a("a"),c5o=o("Data2VecTextForMaskedLM"),f5o=o(" (Data2VecText model)"),m5o=l(),D_=a("li"),Vce=a("strong"),g5o=o("deberta"),h5o=o(" \u2014 "),aD=a("a"),p5o=o("DebertaForMaskedLM"),u5o=o(" (DeBERTa model)"),_5o=l(),G_=a("li"),Xce=a("strong"),b5o=o("deberta-v2"),v5o=o(" \u2014 "),nD=a("a"),F5o=o("DebertaV2ForMaskedLM"),T5o=o(" (DeBERTa-v2 model)"),M5o=l(),O_=a("li"),zce=a("strong"),E5o=o("distilbert"),C5o=o(" \u2014 "),sD=a("a"),w5o=o("DistilBertForMaskedLM"),A5o=o(" (DistilBERT model)"),L5o=l(),V_=a("li"),Wce=a("strong"),y5o=o("electra"),x5o=o(" \u2014 "),lD=a("a"),$5o=o("ElectraForPreTraining"),k5o=o(" (ELECTRA model)"),S5o=l(),X_=a("li"),Qce=a("strong"),R5o=o("flaubert"),P5o=o(" \u2014 "),iD=a("a"),B5o=o("FlaubertWithLMHeadModel"),I5o=o(" (FlauBERT model)"),N5o=l(),z_=a("li"),Hce=a("strong"),q5o=o("flava"),j5o=o(" \u2014 "),dD=a("a"),D5o=o("FlavaForPreTraining"),G5o=o(" (FLAVA model)"),O5o=l(),W_=a("li"),Uce=a("strong"),V5o=o("fnet"),X5o=o(" \u2014 "),cD=a("a"),z5o=o("FNetForPreTraining"),W5o=o(" (FNet model)"),Q5o=l(),Q_=a("li"),Jce=a("strong"),H5o=o("fsmt"),U5o=o(" \u2014 "),fD=a("a"),J5o=o("FSMTForConditionalGeneration"),Y5o=o(" (FairSeq Machine-Translation model)"),K5o=l(),H_=a("li"),Yce=a("strong"),Z5o=o("funnel"),e3o=o(" \u2014 "),mD=a("a"),o3o=o("FunnelForPreTraining"),r3o=o(" (Funnel Transformer model)"),t3o=l(),U_=a("li"),Kce=a("strong"),a3o=o("gpt2"),n3o=o(" \u2014 "),gD=a("a"),s3o=o("GPT2LMHeadModel"),l3o=o(" (OpenAI GPT-2 model)"),i3o=l(),J_=a("li"),Zce=a("strong"),d3o=o("ibert"),c3o=o(" \u2014 "),hD=a("a"),f3o=o("IBertForMaskedLM"),m3o=o(" (I-BERT model)"),g3o=l(),Y_=a("li"),efe=a("strong"),h3o=o("layoutlm"),p3o=o(" \u2014 "),pD=a("a"),u3o=o("LayoutLMForMaskedLM"),_3o=o(" (LayoutLM model)"),b3o=l(),K_=a("li"),ofe=a("strong"),v3o=o("longformer"),F3o=o(" \u2014 "),uD=a("a"),T3o=o("LongformerForMaskedLM"),M3o=o(" (Longformer model)"),E3o=l(),Z_=a("li"),rfe=a("strong"),C3o=o("lxmert"),w3o=o(" \u2014 "),_D=a("a"),A3o=o("LxmertForPreTraining"),L3o=o(" (LXMERT model)"),y3o=l(),e2=a("li"),tfe=a("strong"),x3o=o("megatron-bert"),$3o=o(" \u2014 "),bD=a("a"),k3o=o("MegatronBertForPreTraining"),S3o=o(" (Megatron-BERT model)"),R3o=l(),o2=a("li"),afe=a("strong"),P3o=o("mobilebert"),B3o=o(" \u2014 "),vD=a("a"),I3o=o("MobileBertForPreTraining"),N3o=o(" (MobileBERT model)"),q3o=l(),r2=a("li"),nfe=a("strong"),j3o=o("mpnet"),D3o=o(" \u2014 "),FD=a("a"),G3o=o("MPNetForMaskedLM"),O3o=o(" (MPNet model)"),V3o=l(),t2=a("li"),sfe=a("strong"),X3o=o("openai-gpt"),z3o=o(" \u2014 "),TD=a("a"),W3o=o("OpenAIGPTLMHeadModel"),Q3o=o(" (OpenAI GPT model)"),H3o=l(),a2=a("li"),lfe=a("strong"),U3o=o("retribert"),J3o=o(" \u2014 "),MD=a("a"),Y3o=o("RetriBertModel"),K3o=o(" (RetriBERT model)"),Z3o=l(),n2=a("li"),ife=a("strong"),e0o=o("roberta"),o0o=o(" \u2014 "),ED=a("a"),r0o=o("RobertaForMaskedLM"),t0o=o(" (RoBERTa model)"),a0o=l(),s2=a("li"),dfe=a("strong"),n0o=o("splinter"),s0o=o(" \u2014 "),CD=a("a"),l0o=o("SplinterForPreTraining"),i0o=o(" (Splinter model)"),d0o=l(),l2=a("li"),cfe=a("strong"),c0o=o("squeezebert"),f0o=o(" \u2014 "),wD=a("a"),m0o=o("SqueezeBertForMaskedLM"),g0o=o(" (SqueezeBERT model)"),h0o=l(),i2=a("li"),ffe=a("strong"),p0o=o("t5"),u0o=o(" \u2014 "),AD=a("a"),_0o=o("T5ForConditionalGeneration"),b0o=o(" (T5 model)"),v0o=l(),d2=a("li"),mfe=a("strong"),F0o=o("tapas"),T0o=o(" \u2014 "),LD=a("a"),M0o=o("TapasForMaskedLM"),E0o=o(" (TAPAS model)"),C0o=l(),c2=a("li"),gfe=a("strong"),w0o=o("transfo-xl"),A0o=o(" \u2014 "),yD=a("a"),L0o=o("TransfoXLLMHeadModel"),y0o=o(" (Transformer-XL model)"),x0o=l(),f2=a("li"),hfe=a("strong"),$0o=o("unispeech"),k0o=o(" \u2014 "),xD=a("a"),S0o=o("UniSpeechForPreTraining"),R0o=o(" (UniSpeech model)"),P0o=l(),m2=a("li"),pfe=a("strong"),B0o=o("unispeech-sat"),I0o=o(" \u2014 "),$D=a("a"),N0o=o("UniSpeechSatForPreTraining"),q0o=o(" (UniSpeechSat model)"),j0o=l(),g2=a("li"),ufe=a("strong"),D0o=o("visual_bert"),G0o=o(" \u2014 "),kD=a("a"),O0o=o("VisualBertForPreTraining"),V0o=o(" (VisualBERT model)"),X0o=l(),h2=a("li"),_fe=a("strong"),z0o=o("vit_mae"),W0o=o(" \u2014 "),SD=a("a"),Q0o=o("ViTMAEForPreTraining"),H0o=o(" (ViTMAE model)"),U0o=l(),p2=a("li"),bfe=a("strong"),J0o=o("wav2vec2"),Y0o=o(" \u2014 "),RD=a("a"),K0o=o("Wav2Vec2ForPreTraining"),Z0o=o(" (Wav2Vec2 model)"),ewo=l(),u2=a("li"),vfe=a("strong"),owo=o("wav2vec2-conformer"),rwo=o(" \u2014 "),PD=a("a"),two=o("Wav2Vec2ConformerForPreTraining"),awo=o(" (Wav2Vec2-Conformer model)"),nwo=l(),_2=a("li"),Ffe=a("strong"),swo=o("xlm"),lwo=o(" \u2014 "),BD=a("a"),iwo=o("XLMWithLMHeadModel"),dwo=o(" (XLM model)"),cwo=l(),b2=a("li"),Tfe=a("strong"),fwo=o("xlm-roberta"),mwo=o(" \u2014 "),ID=a("a"),gwo=o("XLMRobertaForMaskedLM"),hwo=o(" (XLM-RoBERTa model)"),pwo=l(),v2=a("li"),Mfe=a("strong"),uwo=o("xlm-roberta-xl"),_wo=o(" \u2014 "),ND=a("a"),bwo=o("XLMRobertaXLForMaskedLM"),vwo=o(" (XLM-RoBERTa-XL model)"),Fwo=l(),F2=a("li"),Efe=a("strong"),Two=o("xlnet"),Mwo=o(" \u2014 "),qD=a("a"),Ewo=o("XLNetLMHeadModel"),Cwo=o(" (XLNet model)"),wwo=l(),T2=a("p"),Awo=o("The model is set in evaluation mode by default using "),Cfe=a("code"),Lwo=o("model.eval()"),ywo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=a("code"),xwo=o("model.train()"),$wo=l(),F(M2.$$.fragment),LGe=l(),Di=a("h2"),E2=a("a"),Afe=a("span"),F(aL.$$.fragment),kwo=l(),Lfe=a("span"),Swo=o("AutoModelForCausalLM"),yGe=l(),ko=a("div"),F(nL.$$.fragment),Rwo=l(),Gi=a("p"),Pwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jD=a("a"),Bwo=o("from_pretrained()"),Iwo=o(" class method or the "),DD=a("a"),Nwo=o("from_config()"),qwo=o(` class
method.`),jwo=l(),sL=a("p"),Dwo=o("This class cannot be instantiated directly using "),yfe=a("code"),Gwo=o("__init__()"),Owo=o(" (throws an error)."),Vwo=l(),lt=a("div"),F(lL.$$.fragment),Xwo=l(),xfe=a("p"),zwo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Wwo=l(),Oi=a("p"),Qwo=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),Hwo=o("not"),Uwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GD=a("a"),Jwo=o("from_pretrained()"),Ywo=o(" to load the model weights."),Kwo=l(),F(C2.$$.fragment),Zwo=l(),Ke=a("div"),F(iL.$$.fragment),eAo=l(),kfe=a("p"),oAo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rAo=l(),Pa=a("p"),tAo=o("The model class to instantiate is selected based on the "),Sfe=a("code"),aAo=o("model_type"),nAo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),sAo=o("pretrained_model_name_or_path"),lAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=a("code"),iAo=o("pretrained_model_name_or_path"),dAo=o(":"),cAo=l(),z=a("ul"),w2=a("li"),Bfe=a("strong"),fAo=o("bart"),mAo=o(" \u2014 "),OD=a("a"),gAo=o("BartForCausalLM"),hAo=o(" (BART model)"),pAo=l(),A2=a("li"),Ife=a("strong"),uAo=o("bert"),_Ao=o(" \u2014 "),VD=a("a"),bAo=o("BertLMHeadModel"),vAo=o(" (BERT model)"),FAo=l(),L2=a("li"),Nfe=a("strong"),TAo=o("bert-generation"),MAo=o(" \u2014 "),XD=a("a"),EAo=o("BertGenerationDecoder"),CAo=o(" (Bert Generation model)"),wAo=l(),y2=a("li"),qfe=a("strong"),AAo=o("big_bird"),LAo=o(" \u2014 "),zD=a("a"),yAo=o("BigBirdForCausalLM"),xAo=o(" (BigBird model)"),$Ao=l(),x2=a("li"),jfe=a("strong"),kAo=o("bigbird_pegasus"),SAo=o(" \u2014 "),WD=a("a"),RAo=o("BigBirdPegasusForCausalLM"),PAo=o(" (BigBird-Pegasus model)"),BAo=l(),$2=a("li"),Dfe=a("strong"),IAo=o("blenderbot"),NAo=o(" \u2014 "),QD=a("a"),qAo=o("BlenderbotForCausalLM"),jAo=o(" (Blenderbot model)"),DAo=l(),k2=a("li"),Gfe=a("strong"),GAo=o("blenderbot-small"),OAo=o(" \u2014 "),HD=a("a"),VAo=o("BlenderbotSmallForCausalLM"),XAo=o(" (BlenderbotSmall model)"),zAo=l(),S2=a("li"),Ofe=a("strong"),WAo=o("bloom"),QAo=o(" \u2014 "),UD=a("a"),HAo=o("BloomForCausalLM"),UAo=o(" (BLOOM model)"),JAo=l(),R2=a("li"),Vfe=a("strong"),YAo=o("camembert"),KAo=o(" \u2014 "),JD=a("a"),ZAo=o("CamembertForCausalLM"),eLo=o(" (CamemBERT model)"),oLo=l(),P2=a("li"),Xfe=a("strong"),rLo=o("ctrl"),tLo=o(" \u2014 "),YD=a("a"),aLo=o("CTRLLMHeadModel"),nLo=o(" (CTRL model)"),sLo=l(),B2=a("li"),zfe=a("strong"),lLo=o("data2vec-text"),iLo=o(" \u2014 "),KD=a("a"),dLo=o("Data2VecTextForCausalLM"),cLo=o(" (Data2VecText model)"),fLo=l(),I2=a("li"),Wfe=a("strong"),mLo=o("electra"),gLo=o(" \u2014 "),ZD=a("a"),hLo=o("ElectraForCausalLM"),pLo=o(" (ELECTRA model)"),uLo=l(),N2=a("li"),Qfe=a("strong"),_Lo=o("gpt2"),bLo=o(" \u2014 "),eG=a("a"),vLo=o("GPT2LMHeadModel"),FLo=o(" (OpenAI GPT-2 model)"),TLo=l(),q2=a("li"),Hfe=a("strong"),MLo=o("gpt_neo"),ELo=o(" \u2014 "),oG=a("a"),CLo=o("GPTNeoForCausalLM"),wLo=o(" (GPT Neo model)"),ALo=l(),j2=a("li"),Ufe=a("strong"),LLo=o("gpt_neox"),yLo=o(" \u2014 "),rG=a("a"),xLo=o("GPTNeoXForCausalLM"),$Lo=o(" (GPT NeoX model)"),kLo=l(),D2=a("li"),Jfe=a("strong"),SLo=o("gptj"),RLo=o(" \u2014 "),tG=a("a"),PLo=o("GPTJForCausalLM"),BLo=o(" (GPT-J model)"),ILo=l(),G2=a("li"),Yfe=a("strong"),NLo=o("marian"),qLo=o(" \u2014 "),aG=a("a"),jLo=o("MarianForCausalLM"),DLo=o(" (Marian model)"),GLo=l(),O2=a("li"),Kfe=a("strong"),OLo=o("mbart"),VLo=o(" \u2014 "),nG=a("a"),XLo=o("MBartForCausalLM"),zLo=o(" (mBART model)"),WLo=l(),V2=a("li"),Zfe=a("strong"),QLo=o("megatron-bert"),HLo=o(" \u2014 "),sG=a("a"),ULo=o("MegatronBertForCausalLM"),JLo=o(" (Megatron-BERT model)"),YLo=l(),X2=a("li"),eme=a("strong"),KLo=o("openai-gpt"),ZLo=o(" \u2014 "),lG=a("a"),eyo=o("OpenAIGPTLMHeadModel"),oyo=o(" (OpenAI GPT model)"),ryo=l(),z2=a("li"),ome=a("strong"),tyo=o("opt"),ayo=o(" \u2014 "),iG=a("a"),nyo=o("OPTForCausalLM"),syo=o(" (OPT model)"),lyo=l(),W2=a("li"),rme=a("strong"),iyo=o("pegasus"),dyo=o(" \u2014 "),dG=a("a"),cyo=o("PegasusForCausalLM"),fyo=o(" (Pegasus model)"),myo=l(),Q2=a("li"),tme=a("strong"),gyo=o("plbart"),hyo=o(" \u2014 "),cG=a("a"),pyo=o("PLBartForCausalLM"),uyo=o(" (PLBart model)"),_yo=l(),H2=a("li"),ame=a("strong"),byo=o("prophetnet"),vyo=o(" \u2014 "),fG=a("a"),Fyo=o("ProphetNetForCausalLM"),Tyo=o(" (ProphetNet model)"),Myo=l(),U2=a("li"),nme=a("strong"),Eyo=o("qdqbert"),Cyo=o(" \u2014 "),mG=a("a"),wyo=o("QDQBertLMHeadModel"),Ayo=o(" (QDQBert model)"),Lyo=l(),J2=a("li"),sme=a("strong"),yyo=o("reformer"),xyo=o(" \u2014 "),gG=a("a"),$yo=o("ReformerModelWithLMHead"),kyo=o(" (Reformer model)"),Syo=l(),Y2=a("li"),lme=a("strong"),Ryo=o("rembert"),Pyo=o(" \u2014 "),hG=a("a"),Byo=o("RemBertForCausalLM"),Iyo=o(" (RemBERT model)"),Nyo=l(),K2=a("li"),ime=a("strong"),qyo=o("roberta"),jyo=o(" \u2014 "),pG=a("a"),Dyo=o("RobertaForCausalLM"),Gyo=o(" (RoBERTa model)"),Oyo=l(),Z2=a("li"),dme=a("strong"),Vyo=o("roformer"),Xyo=o(" \u2014 "),uG=a("a"),zyo=o("RoFormerForCausalLM"),Wyo=o(" (RoFormer model)"),Qyo=l(),e1=a("li"),cme=a("strong"),Hyo=o("speech_to_text_2"),Uyo=o(" \u2014 "),_G=a("a"),Jyo=o("Speech2Text2ForCausalLM"),Yyo=o(" (Speech2Text2 model)"),Kyo=l(),o1=a("li"),fme=a("strong"),Zyo=o("transfo-xl"),e9o=o(" \u2014 "),bG=a("a"),o9o=o("TransfoXLLMHeadModel"),r9o=o(" (Transformer-XL model)"),t9o=l(),r1=a("li"),mme=a("strong"),a9o=o("trocr"),n9o=o(" \u2014 "),vG=a("a"),s9o=o("TrOCRForCausalLM"),l9o=o(" (TrOCR model)"),i9o=l(),t1=a("li"),gme=a("strong"),d9o=o("xglm"),c9o=o(" \u2014 "),FG=a("a"),f9o=o("XGLMForCausalLM"),m9o=o(" (XGLM model)"),g9o=l(),a1=a("li"),hme=a("strong"),h9o=o("xlm"),p9o=o(" \u2014 "),TG=a("a"),u9o=o("XLMWithLMHeadModel"),_9o=o(" (XLM model)"),b9o=l(),n1=a("li"),pme=a("strong"),v9o=o("xlm-prophetnet"),F9o=o(" \u2014 "),MG=a("a"),T9o=o("XLMProphetNetForCausalLM"),M9o=o(" (XLM-ProphetNet model)"),E9o=l(),s1=a("li"),ume=a("strong"),C9o=o("xlm-roberta"),w9o=o(" \u2014 "),EG=a("a"),A9o=o("XLMRobertaForCausalLM"),L9o=o(" (XLM-RoBERTa model)"),y9o=l(),l1=a("li"),_me=a("strong"),x9o=o("xlm-roberta-xl"),$9o=o(" \u2014 "),CG=a("a"),k9o=o("XLMRobertaXLForCausalLM"),S9o=o(" (XLM-RoBERTa-XL model)"),R9o=l(),i1=a("li"),bme=a("strong"),P9o=o("xlnet"),B9o=o(" \u2014 "),wG=a("a"),I9o=o("XLNetLMHeadModel"),N9o=o(" (XLNet model)"),q9o=l(),d1=a("p"),j9o=o("The model is set in evaluation mode by default using "),vme=a("code"),D9o=o("model.eval()"),G9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=a("code"),O9o=o("model.train()"),V9o=l(),F(c1.$$.fragment),xGe=l(),Vi=a("h2"),f1=a("a"),Tme=a("span"),F(dL.$$.fragment),X9o=l(),Mme=a("span"),z9o=o("AutoModelForMaskedLM"),$Ge=l(),So=a("div"),F(cL.$$.fragment),W9o=l(),Xi=a("p"),Q9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AG=a("a"),H9o=o("from_pretrained()"),U9o=o(" class method or the "),LG=a("a"),J9o=o("from_config()"),Y9o=o(` class
method.`),K9o=l(),fL=a("p"),Z9o=o("This class cannot be instantiated directly using "),Eme=a("code"),exo=o("__init__()"),oxo=o(" (throws an error)."),rxo=l(),it=a("div"),F(mL.$$.fragment),txo=l(),Cme=a("p"),axo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nxo=l(),zi=a("p"),sxo=o(`Note:
Loading a model from its configuration file does `),wme=a("strong"),lxo=o("not"),ixo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=a("a"),dxo=o("from_pretrained()"),cxo=o(" to load the model weights."),fxo=l(),F(m1.$$.fragment),mxo=l(),Ze=a("div"),F(gL.$$.fragment),gxo=l(),Ame=a("p"),hxo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pxo=l(),Ba=a("p"),uxo=o("The model class to instantiate is selected based on the "),Lme=a("code"),_xo=o("model_type"),bxo=o(` property of the config object (either
passed as an argument or loaded from `),yme=a("code"),vxo=o("pretrained_model_name_or_path"),Fxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=a("code"),Txo=o("pretrained_model_name_or_path"),Mxo=o(":"),Exo=l(),Q=a("ul"),g1=a("li"),$me=a("strong"),Cxo=o("albert"),wxo=o(" \u2014 "),xG=a("a"),Axo=o("AlbertForMaskedLM"),Lxo=o(" (ALBERT model)"),yxo=l(),h1=a("li"),kme=a("strong"),xxo=o("bart"),$xo=o(" \u2014 "),$G=a("a"),kxo=o("BartForConditionalGeneration"),Sxo=o(" (BART model)"),Rxo=l(),p1=a("li"),Sme=a("strong"),Pxo=o("bert"),Bxo=o(" \u2014 "),kG=a("a"),Ixo=o("BertForMaskedLM"),Nxo=o(" (BERT model)"),qxo=l(),u1=a("li"),Rme=a("strong"),jxo=o("big_bird"),Dxo=o(" \u2014 "),SG=a("a"),Gxo=o("BigBirdForMaskedLM"),Oxo=o(" (BigBird model)"),Vxo=l(),_1=a("li"),Pme=a("strong"),Xxo=o("camembert"),zxo=o(" \u2014 "),RG=a("a"),Wxo=o("CamembertForMaskedLM"),Qxo=o(" (CamemBERT model)"),Hxo=l(),b1=a("li"),Bme=a("strong"),Uxo=o("convbert"),Jxo=o(" \u2014 "),PG=a("a"),Yxo=o("ConvBertForMaskedLM"),Kxo=o(" (ConvBERT model)"),Zxo=l(),v1=a("li"),Ime=a("strong"),e$o=o("data2vec-text"),o$o=o(" \u2014 "),BG=a("a"),r$o=o("Data2VecTextForMaskedLM"),t$o=o(" (Data2VecText model)"),a$o=l(),F1=a("li"),Nme=a("strong"),n$o=o("deberta"),s$o=o(" \u2014 "),IG=a("a"),l$o=o("DebertaForMaskedLM"),i$o=o(" (DeBERTa model)"),d$o=l(),T1=a("li"),qme=a("strong"),c$o=o("deberta-v2"),f$o=o(" \u2014 "),NG=a("a"),m$o=o("DebertaV2ForMaskedLM"),g$o=o(" (DeBERTa-v2 model)"),h$o=l(),M1=a("li"),jme=a("strong"),p$o=o("distilbert"),u$o=o(" \u2014 "),qG=a("a"),_$o=o("DistilBertForMaskedLM"),b$o=o(" (DistilBERT model)"),v$o=l(),E1=a("li"),Dme=a("strong"),F$o=o("electra"),T$o=o(" \u2014 "),jG=a("a"),M$o=o("ElectraForMaskedLM"),E$o=o(" (ELECTRA model)"),C$o=l(),C1=a("li"),Gme=a("strong"),w$o=o("flaubert"),A$o=o(" \u2014 "),DG=a("a"),L$o=o("FlaubertWithLMHeadModel"),y$o=o(" (FlauBERT model)"),x$o=l(),w1=a("li"),Ome=a("strong"),$$o=o("fnet"),k$o=o(" \u2014 "),GG=a("a"),S$o=o("FNetForMaskedLM"),R$o=o(" (FNet model)"),P$o=l(),A1=a("li"),Vme=a("strong"),B$o=o("funnel"),I$o=o(" \u2014 "),OG=a("a"),N$o=o("FunnelForMaskedLM"),q$o=o(" (Funnel Transformer model)"),j$o=l(),L1=a("li"),Xme=a("strong"),D$o=o("ibert"),G$o=o(" \u2014 "),VG=a("a"),O$o=o("IBertForMaskedLM"),V$o=o(" (I-BERT model)"),X$o=l(),y1=a("li"),zme=a("strong"),z$o=o("layoutlm"),W$o=o(" \u2014 "),XG=a("a"),Q$o=o("LayoutLMForMaskedLM"),H$o=o(" (LayoutLM model)"),U$o=l(),x1=a("li"),Wme=a("strong"),J$o=o("longformer"),Y$o=o(" \u2014 "),zG=a("a"),K$o=o("LongformerForMaskedLM"),Z$o=o(" (Longformer model)"),eko=l(),$1=a("li"),Qme=a("strong"),oko=o("luke"),rko=o(" \u2014 "),WG=a("a"),tko=o("LukeForMaskedLM"),ako=o(" (LUKE model)"),nko=l(),k1=a("li"),Hme=a("strong"),sko=o("mbart"),lko=o(" \u2014 "),QG=a("a"),iko=o("MBartForConditionalGeneration"),dko=o(" (mBART model)"),cko=l(),S1=a("li"),Ume=a("strong"),fko=o("megatron-bert"),mko=o(" \u2014 "),HG=a("a"),gko=o("MegatronBertForMaskedLM"),hko=o(" (Megatron-BERT model)"),pko=l(),R1=a("li"),Jme=a("strong"),uko=o("mobilebert"),_ko=o(" \u2014 "),UG=a("a"),bko=o("MobileBertForMaskedLM"),vko=o(" (MobileBERT model)"),Fko=l(),P1=a("li"),Yme=a("strong"),Tko=o("mpnet"),Mko=o(" \u2014 "),JG=a("a"),Eko=o("MPNetForMaskedLM"),Cko=o(" (MPNet model)"),wko=l(),B1=a("li"),Kme=a("strong"),Ako=o("nystromformer"),Lko=o(" \u2014 "),YG=a("a"),yko=o("NystromformerForMaskedLM"),xko=o(" (Nystr\xF6mformer model)"),$ko=l(),I1=a("li"),Zme=a("strong"),kko=o("perceiver"),Sko=o(" \u2014 "),KG=a("a"),Rko=o("PerceiverForMaskedLM"),Pko=o(" (Perceiver model)"),Bko=l(),N1=a("li"),ege=a("strong"),Iko=o("qdqbert"),Nko=o(" \u2014 "),ZG=a("a"),qko=o("QDQBertForMaskedLM"),jko=o(" (QDQBert model)"),Dko=l(),q1=a("li"),oge=a("strong"),Gko=o("reformer"),Oko=o(" \u2014 "),eO=a("a"),Vko=o("ReformerForMaskedLM"),Xko=o(" (Reformer model)"),zko=l(),j1=a("li"),rge=a("strong"),Wko=o("rembert"),Qko=o(" \u2014 "),oO=a("a"),Hko=o("RemBertForMaskedLM"),Uko=o(" (RemBERT model)"),Jko=l(),D1=a("li"),tge=a("strong"),Yko=o("roberta"),Kko=o(" \u2014 "),rO=a("a"),Zko=o("RobertaForMaskedLM"),eSo=o(" (RoBERTa model)"),oSo=l(),G1=a("li"),age=a("strong"),rSo=o("roformer"),tSo=o(" \u2014 "),tO=a("a"),aSo=o("RoFormerForMaskedLM"),nSo=o(" (RoFormer model)"),sSo=l(),O1=a("li"),nge=a("strong"),lSo=o("squeezebert"),iSo=o(" \u2014 "),aO=a("a"),dSo=o("SqueezeBertForMaskedLM"),cSo=o(" (SqueezeBERT model)"),fSo=l(),V1=a("li"),sge=a("strong"),mSo=o("tapas"),gSo=o(" \u2014 "),nO=a("a"),hSo=o("TapasForMaskedLM"),pSo=o(" (TAPAS model)"),uSo=l(),X1=a("li"),lge=a("strong"),_So=o("wav2vec2"),bSo=o(" \u2014 "),ige=a("code"),vSo=o("Wav2Vec2ForMaskedLM"),FSo=o(" (Wav2Vec2 model)"),TSo=l(),z1=a("li"),dge=a("strong"),MSo=o("xlm"),ESo=o(" \u2014 "),sO=a("a"),CSo=o("XLMWithLMHeadModel"),wSo=o(" (XLM model)"),ASo=l(),W1=a("li"),cge=a("strong"),LSo=o("xlm-roberta"),ySo=o(" \u2014 "),lO=a("a"),xSo=o("XLMRobertaForMaskedLM"),$So=o(" (XLM-RoBERTa model)"),kSo=l(),Q1=a("li"),fge=a("strong"),SSo=o("xlm-roberta-xl"),RSo=o(" \u2014 "),iO=a("a"),PSo=o("XLMRobertaXLForMaskedLM"),BSo=o(" (XLM-RoBERTa-XL model)"),ISo=l(),H1=a("li"),mge=a("strong"),NSo=o("yoso"),qSo=o(" \u2014 "),dO=a("a"),jSo=o("YosoForMaskedLM"),DSo=o(" (YOSO model)"),GSo=l(),U1=a("p"),OSo=o("The model is set in evaluation mode by default using "),gge=a("code"),VSo=o("model.eval()"),XSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=a("code"),zSo=o("model.train()"),WSo=l(),F(J1.$$.fragment),kGe=l(),Wi=a("h2"),Y1=a("a"),pge=a("span"),F(hL.$$.fragment),QSo=l(),uge=a("span"),HSo=o("AutoModelForSeq2SeqLM"),SGe=l(),Ro=a("div"),F(pL.$$.fragment),USo=l(),Qi=a("p"),JSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cO=a("a"),YSo=o("from_pretrained()"),KSo=o(" class method or the "),fO=a("a"),ZSo=o("from_config()"),eRo=o(` class
method.`),oRo=l(),uL=a("p"),rRo=o("This class cannot be instantiated directly using "),_ge=a("code"),tRo=o("__init__()"),aRo=o(" (throws an error)."),nRo=l(),dt=a("div"),F(_L.$$.fragment),sRo=l(),bge=a("p"),lRo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iRo=l(),Hi=a("p"),dRo=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),cRo=o("not"),fRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),mRo=o("from_pretrained()"),gRo=o(" to load the model weights."),hRo=l(),F(K1.$$.fragment),pRo=l(),eo=a("div"),F(bL.$$.fragment),uRo=l(),Fge=a("p"),_Ro=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bRo=l(),Ia=a("p"),vRo=o("The model class to instantiate is selected based on the "),Tge=a("code"),FRo=o("model_type"),TRo=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),MRo=o("pretrained_model_name_or_path"),ERo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),CRo=o("pretrained_model_name_or_path"),wRo=o(":"),ARo=l(),pe=a("ul"),Z1=a("li"),Cge=a("strong"),LRo=o("bart"),yRo=o(" \u2014 "),gO=a("a"),xRo=o("BartForConditionalGeneration"),$Ro=o(" (BART model)"),kRo=l(),eb=a("li"),wge=a("strong"),SRo=o("bigbird_pegasus"),RRo=o(" \u2014 "),hO=a("a"),PRo=o("BigBirdPegasusForConditionalGeneration"),BRo=o(" (BigBird-Pegasus model)"),IRo=l(),ob=a("li"),Age=a("strong"),NRo=o("blenderbot"),qRo=o(" \u2014 "),pO=a("a"),jRo=o("BlenderbotForConditionalGeneration"),DRo=o(" (Blenderbot model)"),GRo=l(),rb=a("li"),Lge=a("strong"),ORo=o("blenderbot-small"),VRo=o(" \u2014 "),uO=a("a"),XRo=o("BlenderbotSmallForConditionalGeneration"),zRo=o(" (BlenderbotSmall model)"),WRo=l(),tb=a("li"),yge=a("strong"),QRo=o("encoder-decoder"),HRo=o(" \u2014 "),_O=a("a"),URo=o("EncoderDecoderModel"),JRo=o(" (Encoder decoder model)"),YRo=l(),ab=a("li"),xge=a("strong"),KRo=o("fsmt"),ZRo=o(" \u2014 "),bO=a("a"),ePo=o("FSMTForConditionalGeneration"),oPo=o(" (FairSeq Machine-Translation model)"),rPo=l(),nb=a("li"),$ge=a("strong"),tPo=o("led"),aPo=o(" \u2014 "),vO=a("a"),nPo=o("LEDForConditionalGeneration"),sPo=o(" (LED model)"),lPo=l(),sb=a("li"),kge=a("strong"),iPo=o("longt5"),dPo=o(" \u2014 "),FO=a("a"),cPo=o("LongT5ForConditionalGeneration"),fPo=o(" (LongT5 model)"),mPo=l(),lb=a("li"),Sge=a("strong"),gPo=o("m2m_100"),hPo=o(" \u2014 "),TO=a("a"),pPo=o("M2M100ForConditionalGeneration"),uPo=o(" (M2M100 model)"),_Po=l(),ib=a("li"),Rge=a("strong"),bPo=o("marian"),vPo=o(" \u2014 "),MO=a("a"),FPo=o("MarianMTModel"),TPo=o(" (Marian model)"),MPo=l(),db=a("li"),Pge=a("strong"),EPo=o("mbart"),CPo=o(" \u2014 "),EO=a("a"),wPo=o("MBartForConditionalGeneration"),APo=o(" (mBART model)"),LPo=l(),cb=a("li"),Bge=a("strong"),yPo=o("mt5"),xPo=o(" \u2014 "),CO=a("a"),$Po=o("MT5ForConditionalGeneration"),kPo=o(" (MT5 model)"),SPo=l(),fb=a("li"),Ige=a("strong"),RPo=o("pegasus"),PPo=o(" \u2014 "),wO=a("a"),BPo=o("PegasusForConditionalGeneration"),IPo=o(" (Pegasus model)"),NPo=l(),mb=a("li"),Nge=a("strong"),qPo=o("plbart"),jPo=o(" \u2014 "),AO=a("a"),DPo=o("PLBartForConditionalGeneration"),GPo=o(" (PLBart model)"),OPo=l(),gb=a("li"),qge=a("strong"),VPo=o("prophetnet"),XPo=o(" \u2014 "),LO=a("a"),zPo=o("ProphetNetForConditionalGeneration"),WPo=o(" (ProphetNet model)"),QPo=l(),hb=a("li"),jge=a("strong"),HPo=o("t5"),UPo=o(" \u2014 "),yO=a("a"),JPo=o("T5ForConditionalGeneration"),YPo=o(" (T5 model)"),KPo=l(),pb=a("li"),Dge=a("strong"),ZPo=o("xlm-prophetnet"),eBo=o(" \u2014 "),xO=a("a"),oBo=o("XLMProphetNetForConditionalGeneration"),rBo=o(" (XLM-ProphetNet model)"),tBo=l(),ub=a("p"),aBo=o("The model is set in evaluation mode by default using "),Gge=a("code"),nBo=o("model.eval()"),sBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=a("code"),lBo=o("model.train()"),iBo=l(),F(_b.$$.fragment),RGe=l(),Ui=a("h2"),bb=a("a"),Vge=a("span"),F(vL.$$.fragment),dBo=l(),Xge=a("span"),cBo=o("AutoModelForSequenceClassification"),PGe=l(),Po=a("div"),F(FL.$$.fragment),fBo=l(),Ji=a("p"),mBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$O=a("a"),gBo=o("from_pretrained()"),hBo=o(" class method or the "),kO=a("a"),pBo=o("from_config()"),uBo=o(` class
method.`),_Bo=l(),TL=a("p"),bBo=o("This class cannot be instantiated directly using "),zge=a("code"),vBo=o("__init__()"),FBo=o(" (throws an error)."),TBo=l(),ct=a("div"),F(ML.$$.fragment),MBo=l(),Wge=a("p"),EBo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CBo=l(),Yi=a("p"),wBo=o(`Note:
Loading a model from its configuration file does `),Qge=a("strong"),ABo=o("not"),LBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SO=a("a"),yBo=o("from_pretrained()"),xBo=o(" to load the model weights."),$Bo=l(),F(vb.$$.fragment),kBo=l(),oo=a("div"),F(EL.$$.fragment),SBo=l(),Hge=a("p"),RBo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PBo=l(),Na=a("p"),BBo=o("The model class to instantiate is selected based on the "),Uge=a("code"),IBo=o("model_type"),NBo=o(` property of the config object (either
passed as an argument or loaded from `),Jge=a("code"),qBo=o("pretrained_model_name_or_path"),jBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=a("code"),DBo=o("pretrained_model_name_or_path"),GBo=o(":"),OBo=l(),N=a("ul"),Fb=a("li"),Kge=a("strong"),VBo=o("albert"),XBo=o(" \u2014 "),RO=a("a"),zBo=o("AlbertForSequenceClassification"),WBo=o(" (ALBERT model)"),QBo=l(),Tb=a("li"),Zge=a("strong"),HBo=o("bart"),UBo=o(" \u2014 "),PO=a("a"),JBo=o("BartForSequenceClassification"),YBo=o(" (BART model)"),KBo=l(),Mb=a("li"),ehe=a("strong"),ZBo=o("bert"),eIo=o(" \u2014 "),BO=a("a"),oIo=o("BertForSequenceClassification"),rIo=o(" (BERT model)"),tIo=l(),Eb=a("li"),ohe=a("strong"),aIo=o("big_bird"),nIo=o(" \u2014 "),IO=a("a"),sIo=o("BigBirdForSequenceClassification"),lIo=o(" (BigBird model)"),iIo=l(),Cb=a("li"),rhe=a("strong"),dIo=o("bigbird_pegasus"),cIo=o(" \u2014 "),NO=a("a"),fIo=o("BigBirdPegasusForSequenceClassification"),mIo=o(" (BigBird-Pegasus model)"),gIo=l(),wb=a("li"),the=a("strong"),hIo=o("bloom"),pIo=o(" \u2014 "),qO=a("a"),uIo=o("BloomForSequenceClassification"),_Io=o(" (BLOOM model)"),bIo=l(),Ab=a("li"),ahe=a("strong"),vIo=o("camembert"),FIo=o(" \u2014 "),jO=a("a"),TIo=o("CamembertForSequenceClassification"),MIo=o(" (CamemBERT model)"),EIo=l(),Lb=a("li"),nhe=a("strong"),CIo=o("canine"),wIo=o(" \u2014 "),DO=a("a"),AIo=o("CanineForSequenceClassification"),LIo=o(" (CANINE model)"),yIo=l(),yb=a("li"),she=a("strong"),xIo=o("convbert"),$Io=o(" \u2014 "),GO=a("a"),kIo=o("ConvBertForSequenceClassification"),SIo=o(" (ConvBERT model)"),RIo=l(),xb=a("li"),lhe=a("strong"),PIo=o("ctrl"),BIo=o(" \u2014 "),OO=a("a"),IIo=o("CTRLForSequenceClassification"),NIo=o(" (CTRL model)"),qIo=l(),$b=a("li"),ihe=a("strong"),jIo=o("data2vec-text"),DIo=o(" \u2014 "),VO=a("a"),GIo=o("Data2VecTextForSequenceClassification"),OIo=o(" (Data2VecText model)"),VIo=l(),kb=a("li"),dhe=a("strong"),XIo=o("deberta"),zIo=o(" \u2014 "),XO=a("a"),WIo=o("DebertaForSequenceClassification"),QIo=o(" (DeBERTa model)"),HIo=l(),Sb=a("li"),che=a("strong"),UIo=o("deberta-v2"),JIo=o(" \u2014 "),zO=a("a"),YIo=o("DebertaV2ForSequenceClassification"),KIo=o(" (DeBERTa-v2 model)"),ZIo=l(),Rb=a("li"),fhe=a("strong"),eNo=o("distilbert"),oNo=o(" \u2014 "),WO=a("a"),rNo=o("DistilBertForSequenceClassification"),tNo=o(" (DistilBERT model)"),aNo=l(),Pb=a("li"),mhe=a("strong"),nNo=o("electra"),sNo=o(" \u2014 "),QO=a("a"),lNo=o("ElectraForSequenceClassification"),iNo=o(" (ELECTRA model)"),dNo=l(),Bb=a("li"),ghe=a("strong"),cNo=o("flaubert"),fNo=o(" \u2014 "),HO=a("a"),mNo=o("FlaubertForSequenceClassification"),gNo=o(" (FlauBERT model)"),hNo=l(),Ib=a("li"),hhe=a("strong"),pNo=o("fnet"),uNo=o(" \u2014 "),UO=a("a"),_No=o("FNetForSequenceClassification"),bNo=o(" (FNet model)"),vNo=l(),Nb=a("li"),phe=a("strong"),FNo=o("funnel"),TNo=o(" \u2014 "),JO=a("a"),MNo=o("FunnelForSequenceClassification"),ENo=o(" (Funnel Transformer model)"),CNo=l(),qb=a("li"),uhe=a("strong"),wNo=o("gpt2"),ANo=o(" \u2014 "),YO=a("a"),LNo=o("GPT2ForSequenceClassification"),yNo=o(" (OpenAI GPT-2 model)"),xNo=l(),jb=a("li"),_he=a("strong"),$No=o("gpt_neo"),kNo=o(" \u2014 "),KO=a("a"),SNo=o("GPTNeoForSequenceClassification"),RNo=o(" (GPT Neo model)"),PNo=l(),Db=a("li"),bhe=a("strong"),BNo=o("gptj"),INo=o(" \u2014 "),ZO=a("a"),NNo=o("GPTJForSequenceClassification"),qNo=o(" (GPT-J model)"),jNo=l(),Gb=a("li"),vhe=a("strong"),DNo=o("ibert"),GNo=o(" \u2014 "),eV=a("a"),ONo=o("IBertForSequenceClassification"),VNo=o(" (I-BERT model)"),XNo=l(),Ob=a("li"),Fhe=a("strong"),zNo=o("layoutlm"),WNo=o(" \u2014 "),oV=a("a"),QNo=o("LayoutLMForSequenceClassification"),HNo=o(" (LayoutLM model)"),UNo=l(),Vb=a("li"),The=a("strong"),JNo=o("layoutlmv2"),YNo=o(" \u2014 "),rV=a("a"),KNo=o("LayoutLMv2ForSequenceClassification"),ZNo=o(" (LayoutLMv2 model)"),eqo=l(),Xb=a("li"),Mhe=a("strong"),oqo=o("layoutlmv3"),rqo=o(" \u2014 "),tV=a("a"),tqo=o("LayoutLMv3ForSequenceClassification"),aqo=o(" (LayoutLMv3 model)"),nqo=l(),zb=a("li"),Ehe=a("strong"),sqo=o("led"),lqo=o(" \u2014 "),aV=a("a"),iqo=o("LEDForSequenceClassification"),dqo=o(" (LED model)"),cqo=l(),Wb=a("li"),Che=a("strong"),fqo=o("longformer"),mqo=o(" \u2014 "),nV=a("a"),gqo=o("LongformerForSequenceClassification"),hqo=o(" (Longformer model)"),pqo=l(),Qb=a("li"),whe=a("strong"),uqo=o("mbart"),_qo=o(" \u2014 "),sV=a("a"),bqo=o("MBartForSequenceClassification"),vqo=o(" (mBART model)"),Fqo=l(),Hb=a("li"),Ahe=a("strong"),Tqo=o("megatron-bert"),Mqo=o(" \u2014 "),lV=a("a"),Eqo=o("MegatronBertForSequenceClassification"),Cqo=o(" (Megatron-BERT model)"),wqo=l(),Ub=a("li"),Lhe=a("strong"),Aqo=o("mobilebert"),Lqo=o(" \u2014 "),iV=a("a"),yqo=o("MobileBertForSequenceClassification"),xqo=o(" (MobileBERT model)"),$qo=l(),Jb=a("li"),yhe=a("strong"),kqo=o("mpnet"),Sqo=o(" \u2014 "),dV=a("a"),Rqo=o("MPNetForSequenceClassification"),Pqo=o(" (MPNet model)"),Bqo=l(),Yb=a("li"),xhe=a("strong"),Iqo=o("nystromformer"),Nqo=o(" \u2014 "),cV=a("a"),qqo=o("NystromformerForSequenceClassification"),jqo=o(" (Nystr\xF6mformer model)"),Dqo=l(),Kb=a("li"),$he=a("strong"),Gqo=o("openai-gpt"),Oqo=o(" \u2014 "),fV=a("a"),Vqo=o("OpenAIGPTForSequenceClassification"),Xqo=o(" (OpenAI GPT model)"),zqo=l(),Zb=a("li"),khe=a("strong"),Wqo=o("perceiver"),Qqo=o(" \u2014 "),mV=a("a"),Hqo=o("PerceiverForSequenceClassification"),Uqo=o(" (Perceiver model)"),Jqo=l(),ev=a("li"),She=a("strong"),Yqo=o("plbart"),Kqo=o(" \u2014 "),gV=a("a"),Zqo=o("PLBartForSequenceClassification"),ejo=o(" (PLBart model)"),ojo=l(),ov=a("li"),Rhe=a("strong"),rjo=o("qdqbert"),tjo=o(" \u2014 "),hV=a("a"),ajo=o("QDQBertForSequenceClassification"),njo=o(" (QDQBert model)"),sjo=l(),rv=a("li"),Phe=a("strong"),ljo=o("reformer"),ijo=o(" \u2014 "),pV=a("a"),djo=o("ReformerForSequenceClassification"),cjo=o(" (Reformer model)"),fjo=l(),tv=a("li"),Bhe=a("strong"),mjo=o("rembert"),gjo=o(" \u2014 "),uV=a("a"),hjo=o("RemBertForSequenceClassification"),pjo=o(" (RemBERT model)"),ujo=l(),av=a("li"),Ihe=a("strong"),_jo=o("roberta"),bjo=o(" \u2014 "),_V=a("a"),vjo=o("RobertaForSequenceClassification"),Fjo=o(" (RoBERTa model)"),Tjo=l(),nv=a("li"),Nhe=a("strong"),Mjo=o("roformer"),Ejo=o(" \u2014 "),bV=a("a"),Cjo=o("RoFormerForSequenceClassification"),wjo=o(" (RoFormer model)"),Ajo=l(),sv=a("li"),qhe=a("strong"),Ljo=o("squeezebert"),yjo=o(" \u2014 "),vV=a("a"),xjo=o("SqueezeBertForSequenceClassification"),$jo=o(" (SqueezeBERT model)"),kjo=l(),lv=a("li"),jhe=a("strong"),Sjo=o("tapas"),Rjo=o(" \u2014 "),FV=a("a"),Pjo=o("TapasForSequenceClassification"),Bjo=o(" (TAPAS model)"),Ijo=l(),iv=a("li"),Dhe=a("strong"),Njo=o("transfo-xl"),qjo=o(" \u2014 "),TV=a("a"),jjo=o("TransfoXLForSequenceClassification"),Djo=o(" (Transformer-XL model)"),Gjo=l(),dv=a("li"),Ghe=a("strong"),Ojo=o("xlm"),Vjo=o(" \u2014 "),MV=a("a"),Xjo=o("XLMForSequenceClassification"),zjo=o(" (XLM model)"),Wjo=l(),cv=a("li"),Ohe=a("strong"),Qjo=o("xlm-roberta"),Hjo=o(" \u2014 "),EV=a("a"),Ujo=o("XLMRobertaForSequenceClassification"),Jjo=o(" (XLM-RoBERTa model)"),Yjo=l(),fv=a("li"),Vhe=a("strong"),Kjo=o("xlm-roberta-xl"),Zjo=o(" \u2014 "),CV=a("a"),eDo=o("XLMRobertaXLForSequenceClassification"),oDo=o(" (XLM-RoBERTa-XL model)"),rDo=l(),mv=a("li"),Xhe=a("strong"),tDo=o("xlnet"),aDo=o(" \u2014 "),wV=a("a"),nDo=o("XLNetForSequenceClassification"),sDo=o(" (XLNet model)"),lDo=l(),gv=a("li"),zhe=a("strong"),iDo=o("yoso"),dDo=o(" \u2014 "),AV=a("a"),cDo=o("YosoForSequenceClassification"),fDo=o(" (YOSO model)"),mDo=l(),hv=a("p"),gDo=o("The model is set in evaluation mode by default using "),Whe=a("code"),hDo=o("model.eval()"),pDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=a("code"),uDo=o("model.train()"),_Do=l(),F(pv.$$.fragment),BGe=l(),Ki=a("h2"),uv=a("a"),Hhe=a("span"),F(CL.$$.fragment),bDo=l(),Uhe=a("span"),vDo=o("AutoModelForMultipleChoice"),IGe=l(),Bo=a("div"),F(wL.$$.fragment),FDo=l(),Zi=a("p"),TDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LV=a("a"),MDo=o("from_pretrained()"),EDo=o(" class method or the "),yV=a("a"),CDo=o("from_config()"),wDo=o(` class
method.`),ADo=l(),AL=a("p"),LDo=o("This class cannot be instantiated directly using "),Jhe=a("code"),yDo=o("__init__()"),xDo=o(" (throws an error)."),$Do=l(),ft=a("div"),F(LL.$$.fragment),kDo=l(),Yhe=a("p"),SDo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RDo=l(),ed=a("p"),PDo=o(`Note:
Loading a model from its configuration file does `),Khe=a("strong"),BDo=o("not"),IDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),NDo=o("from_pretrained()"),qDo=o(" to load the model weights."),jDo=l(),F(_v.$$.fragment),DDo=l(),ro=a("div"),F(yL.$$.fragment),GDo=l(),Zhe=a("p"),ODo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VDo=l(),qa=a("p"),XDo=o("The model class to instantiate is selected based on the "),epe=a("code"),zDo=o("model_type"),WDo=o(` property of the config object (either
passed as an argument or loaded from `),ope=a("code"),QDo=o("pretrained_model_name_or_path"),HDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=a("code"),UDo=o("pretrained_model_name_or_path"),JDo=o(":"),YDo=l(),Z=a("ul"),bv=a("li"),tpe=a("strong"),KDo=o("albert"),ZDo=o(" \u2014 "),$V=a("a"),eGo=o("AlbertForMultipleChoice"),oGo=o(" (ALBERT model)"),rGo=l(),vv=a("li"),ape=a("strong"),tGo=o("bert"),aGo=o(" \u2014 "),kV=a("a"),nGo=o("BertForMultipleChoice"),sGo=o(" (BERT model)"),lGo=l(),Fv=a("li"),npe=a("strong"),iGo=o("big_bird"),dGo=o(" \u2014 "),SV=a("a"),cGo=o("BigBirdForMultipleChoice"),fGo=o(" (BigBird model)"),mGo=l(),Tv=a("li"),spe=a("strong"),gGo=o("camembert"),hGo=o(" \u2014 "),RV=a("a"),pGo=o("CamembertForMultipleChoice"),uGo=o(" (CamemBERT model)"),_Go=l(),Mv=a("li"),lpe=a("strong"),bGo=o("canine"),vGo=o(" \u2014 "),PV=a("a"),FGo=o("CanineForMultipleChoice"),TGo=o(" (CANINE model)"),MGo=l(),Ev=a("li"),ipe=a("strong"),EGo=o("convbert"),CGo=o(" \u2014 "),BV=a("a"),wGo=o("ConvBertForMultipleChoice"),AGo=o(" (ConvBERT model)"),LGo=l(),Cv=a("li"),dpe=a("strong"),yGo=o("data2vec-text"),xGo=o(" \u2014 "),IV=a("a"),$Go=o("Data2VecTextForMultipleChoice"),kGo=o(" (Data2VecText model)"),SGo=l(),wv=a("li"),cpe=a("strong"),RGo=o("deberta-v2"),PGo=o(" \u2014 "),NV=a("a"),BGo=o("DebertaV2ForMultipleChoice"),IGo=o(" (DeBERTa-v2 model)"),NGo=l(),Av=a("li"),fpe=a("strong"),qGo=o("distilbert"),jGo=o(" \u2014 "),qV=a("a"),DGo=o("DistilBertForMultipleChoice"),GGo=o(" (DistilBERT model)"),OGo=l(),Lv=a("li"),mpe=a("strong"),VGo=o("electra"),XGo=o(" \u2014 "),jV=a("a"),zGo=o("ElectraForMultipleChoice"),WGo=o(" (ELECTRA model)"),QGo=l(),yv=a("li"),gpe=a("strong"),HGo=o("flaubert"),UGo=o(" \u2014 "),DV=a("a"),JGo=o("FlaubertForMultipleChoice"),YGo=o(" (FlauBERT model)"),KGo=l(),xv=a("li"),hpe=a("strong"),ZGo=o("fnet"),eOo=o(" \u2014 "),GV=a("a"),oOo=o("FNetForMultipleChoice"),rOo=o(" (FNet model)"),tOo=l(),$v=a("li"),ppe=a("strong"),aOo=o("funnel"),nOo=o(" \u2014 "),OV=a("a"),sOo=o("FunnelForMultipleChoice"),lOo=o(" (Funnel Transformer model)"),iOo=l(),kv=a("li"),upe=a("strong"),dOo=o("ibert"),cOo=o(" \u2014 "),VV=a("a"),fOo=o("IBertForMultipleChoice"),mOo=o(" (I-BERT model)"),gOo=l(),Sv=a("li"),_pe=a("strong"),hOo=o("longformer"),pOo=o(" \u2014 "),XV=a("a"),uOo=o("LongformerForMultipleChoice"),_Oo=o(" (Longformer model)"),bOo=l(),Rv=a("li"),bpe=a("strong"),vOo=o("megatron-bert"),FOo=o(" \u2014 "),zV=a("a"),TOo=o("MegatronBertForMultipleChoice"),MOo=o(" (Megatron-BERT model)"),EOo=l(),Pv=a("li"),vpe=a("strong"),COo=o("mobilebert"),wOo=o(" \u2014 "),WV=a("a"),AOo=o("MobileBertForMultipleChoice"),LOo=o(" (MobileBERT model)"),yOo=l(),Bv=a("li"),Fpe=a("strong"),xOo=o("mpnet"),$Oo=o(" \u2014 "),QV=a("a"),kOo=o("MPNetForMultipleChoice"),SOo=o(" (MPNet model)"),ROo=l(),Iv=a("li"),Tpe=a("strong"),POo=o("nystromformer"),BOo=o(" \u2014 "),HV=a("a"),IOo=o("NystromformerForMultipleChoice"),NOo=o(" (Nystr\xF6mformer model)"),qOo=l(),Nv=a("li"),Mpe=a("strong"),jOo=o("qdqbert"),DOo=o(" \u2014 "),UV=a("a"),GOo=o("QDQBertForMultipleChoice"),OOo=o(" (QDQBert model)"),VOo=l(),qv=a("li"),Epe=a("strong"),XOo=o("rembert"),zOo=o(" \u2014 "),JV=a("a"),WOo=o("RemBertForMultipleChoice"),QOo=o(" (RemBERT model)"),HOo=l(),jv=a("li"),Cpe=a("strong"),UOo=o("roberta"),JOo=o(" \u2014 "),YV=a("a"),YOo=o("RobertaForMultipleChoice"),KOo=o(" (RoBERTa model)"),ZOo=l(),Dv=a("li"),wpe=a("strong"),eVo=o("roformer"),oVo=o(" \u2014 "),KV=a("a"),rVo=o("RoFormerForMultipleChoice"),tVo=o(" (RoFormer model)"),aVo=l(),Gv=a("li"),Ape=a("strong"),nVo=o("squeezebert"),sVo=o(" \u2014 "),ZV=a("a"),lVo=o("SqueezeBertForMultipleChoice"),iVo=o(" (SqueezeBERT model)"),dVo=l(),Ov=a("li"),Lpe=a("strong"),cVo=o("xlm"),fVo=o(" \u2014 "),eX=a("a"),mVo=o("XLMForMultipleChoice"),gVo=o(" (XLM model)"),hVo=l(),Vv=a("li"),ype=a("strong"),pVo=o("xlm-roberta"),uVo=o(" \u2014 "),oX=a("a"),_Vo=o("XLMRobertaForMultipleChoice"),bVo=o(" (XLM-RoBERTa model)"),vVo=l(),Xv=a("li"),xpe=a("strong"),FVo=o("xlm-roberta-xl"),TVo=o(" \u2014 "),rX=a("a"),MVo=o("XLMRobertaXLForMultipleChoice"),EVo=o(" (XLM-RoBERTa-XL model)"),CVo=l(),zv=a("li"),$pe=a("strong"),wVo=o("xlnet"),AVo=o(" \u2014 "),tX=a("a"),LVo=o("XLNetForMultipleChoice"),yVo=o(" (XLNet model)"),xVo=l(),Wv=a("li"),kpe=a("strong"),$Vo=o("yoso"),kVo=o(" \u2014 "),aX=a("a"),SVo=o("YosoForMultipleChoice"),RVo=o(" (YOSO model)"),PVo=l(),Qv=a("p"),BVo=o("The model is set in evaluation mode by default using "),Spe=a("code"),IVo=o("model.eval()"),NVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=a("code"),qVo=o("model.train()"),jVo=l(),F(Hv.$$.fragment),NGe=l(),od=a("h2"),Uv=a("a"),Ppe=a("span"),F(xL.$$.fragment),DVo=l(),Bpe=a("span"),GVo=o("AutoModelForNextSentencePrediction"),qGe=l(),Io=a("div"),F($L.$$.fragment),OVo=l(),rd=a("p"),VVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nX=a("a"),XVo=o("from_pretrained()"),zVo=o(" class method or the "),sX=a("a"),WVo=o("from_config()"),QVo=o(` class
method.`),HVo=l(),kL=a("p"),UVo=o("This class cannot be instantiated directly using "),Ipe=a("code"),JVo=o("__init__()"),YVo=o(" (throws an error)."),KVo=l(),mt=a("div"),F(SL.$$.fragment),ZVo=l(),Npe=a("p"),eXo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oXo=l(),td=a("p"),rXo=o(`Note:
Loading a model from its configuration file does `),qpe=a("strong"),tXo=o("not"),aXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),nXo=o("from_pretrained()"),sXo=o(" to load the model weights."),lXo=l(),F(Jv.$$.fragment),iXo=l(),to=a("div"),F(RL.$$.fragment),dXo=l(),jpe=a("p"),cXo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fXo=l(),ja=a("p"),mXo=o("The model class to instantiate is selected based on the "),Dpe=a("code"),gXo=o("model_type"),hXo=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),pXo=o("pretrained_model_name_or_path"),uXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),_Xo=o("pretrained_model_name_or_path"),bXo=o(":"),vXo=l(),Zr=a("ul"),Yv=a("li"),Vpe=a("strong"),FXo=o("bert"),TXo=o(" \u2014 "),iX=a("a"),MXo=o("BertForNextSentencePrediction"),EXo=o(" (BERT model)"),CXo=l(),Kv=a("li"),Xpe=a("strong"),wXo=o("fnet"),AXo=o(" \u2014 "),dX=a("a"),LXo=o("FNetForNextSentencePrediction"),yXo=o(" (FNet model)"),xXo=l(),Zv=a("li"),zpe=a("strong"),$Xo=o("megatron-bert"),kXo=o(" \u2014 "),cX=a("a"),SXo=o("MegatronBertForNextSentencePrediction"),RXo=o(" (Megatron-BERT model)"),PXo=l(),eF=a("li"),Wpe=a("strong"),BXo=o("mobilebert"),IXo=o(" \u2014 "),fX=a("a"),NXo=o("MobileBertForNextSentencePrediction"),qXo=o(" (MobileBERT model)"),jXo=l(),oF=a("li"),Qpe=a("strong"),DXo=o("qdqbert"),GXo=o(" \u2014 "),mX=a("a"),OXo=o("QDQBertForNextSentencePrediction"),VXo=o(" (QDQBert model)"),XXo=l(),rF=a("p"),zXo=o("The model is set in evaluation mode by default using "),Hpe=a("code"),WXo=o("model.eval()"),QXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=a("code"),HXo=o("model.train()"),UXo=l(),F(tF.$$.fragment),jGe=l(),ad=a("h2"),aF=a("a"),Jpe=a("span"),F(PL.$$.fragment),JXo=l(),Ype=a("span"),YXo=o("AutoModelForTokenClassification"),DGe=l(),No=a("div"),F(BL.$$.fragment),KXo=l(),nd=a("p"),ZXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gX=a("a"),ezo=o("from_pretrained()"),ozo=o(" class method or the "),hX=a("a"),rzo=o("from_config()"),tzo=o(` class
method.`),azo=l(),IL=a("p"),nzo=o("This class cannot be instantiated directly using "),Kpe=a("code"),szo=o("__init__()"),lzo=o(" (throws an error)."),izo=l(),gt=a("div"),F(NL.$$.fragment),dzo=l(),Zpe=a("p"),czo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fzo=l(),sd=a("p"),mzo=o(`Note:
Loading a model from its configuration file does `),eue=a("strong"),gzo=o("not"),hzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),pzo=o("from_pretrained()"),uzo=o(" to load the model weights."),_zo=l(),F(nF.$$.fragment),bzo=l(),ao=a("div"),F(qL.$$.fragment),vzo=l(),oue=a("p"),Fzo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Tzo=l(),Da=a("p"),Mzo=o("The model class to instantiate is selected based on the "),rue=a("code"),Ezo=o("model_type"),Czo=o(` property of the config object (either
passed as an argument or loaded from `),tue=a("code"),wzo=o("pretrained_model_name_or_path"),Azo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=a("code"),Lzo=o("pretrained_model_name_or_path"),yzo=o(":"),xzo=l(),H=a("ul"),sF=a("li"),nue=a("strong"),$zo=o("albert"),kzo=o(" \u2014 "),uX=a("a"),Szo=o("AlbertForTokenClassification"),Rzo=o(" (ALBERT model)"),Pzo=l(),lF=a("li"),sue=a("strong"),Bzo=o("bert"),Izo=o(" \u2014 "),_X=a("a"),Nzo=o("BertForTokenClassification"),qzo=o(" (BERT model)"),jzo=l(),iF=a("li"),lue=a("strong"),Dzo=o("big_bird"),Gzo=o(" \u2014 "),bX=a("a"),Ozo=o("BigBirdForTokenClassification"),Vzo=o(" (BigBird model)"),Xzo=l(),dF=a("li"),iue=a("strong"),zzo=o("bloom"),Wzo=o(" \u2014 "),vX=a("a"),Qzo=o("BloomForTokenClassification"),Hzo=o(" (BLOOM model)"),Uzo=l(),cF=a("li"),due=a("strong"),Jzo=o("camembert"),Yzo=o(" \u2014 "),FX=a("a"),Kzo=o("CamembertForTokenClassification"),Zzo=o(" (CamemBERT model)"),eWo=l(),fF=a("li"),cue=a("strong"),oWo=o("canine"),rWo=o(" \u2014 "),TX=a("a"),tWo=o("CanineForTokenClassification"),aWo=o(" (CANINE model)"),nWo=l(),mF=a("li"),fue=a("strong"),sWo=o("convbert"),lWo=o(" \u2014 "),MX=a("a"),iWo=o("ConvBertForTokenClassification"),dWo=o(" (ConvBERT model)"),cWo=l(),gF=a("li"),mue=a("strong"),fWo=o("data2vec-text"),mWo=o(" \u2014 "),EX=a("a"),gWo=o("Data2VecTextForTokenClassification"),hWo=o(" (Data2VecText model)"),pWo=l(),hF=a("li"),gue=a("strong"),uWo=o("deberta"),_Wo=o(" \u2014 "),CX=a("a"),bWo=o("DebertaForTokenClassification"),vWo=o(" (DeBERTa model)"),FWo=l(),pF=a("li"),hue=a("strong"),TWo=o("deberta-v2"),MWo=o(" \u2014 "),wX=a("a"),EWo=o("DebertaV2ForTokenClassification"),CWo=o(" (DeBERTa-v2 model)"),wWo=l(),uF=a("li"),pue=a("strong"),AWo=o("distilbert"),LWo=o(" \u2014 "),AX=a("a"),yWo=o("DistilBertForTokenClassification"),xWo=o(" (DistilBERT model)"),$Wo=l(),_F=a("li"),uue=a("strong"),kWo=o("electra"),SWo=o(" \u2014 "),LX=a("a"),RWo=o("ElectraForTokenClassification"),PWo=o(" (ELECTRA model)"),BWo=l(),bF=a("li"),_ue=a("strong"),IWo=o("flaubert"),NWo=o(" \u2014 "),yX=a("a"),qWo=o("FlaubertForTokenClassification"),jWo=o(" (FlauBERT model)"),DWo=l(),vF=a("li"),bue=a("strong"),GWo=o("fnet"),OWo=o(" \u2014 "),xX=a("a"),VWo=o("FNetForTokenClassification"),XWo=o(" (FNet model)"),zWo=l(),FF=a("li"),vue=a("strong"),WWo=o("funnel"),QWo=o(" \u2014 "),$X=a("a"),HWo=o("FunnelForTokenClassification"),UWo=o(" (Funnel Transformer model)"),JWo=l(),TF=a("li"),Fue=a("strong"),YWo=o("gpt2"),KWo=o(" \u2014 "),kX=a("a"),ZWo=o("GPT2ForTokenClassification"),eQo=o(" (OpenAI GPT-2 model)"),oQo=l(),MF=a("li"),Tue=a("strong"),rQo=o("ibert"),tQo=o(" \u2014 "),SX=a("a"),aQo=o("IBertForTokenClassification"),nQo=o(" (I-BERT model)"),sQo=l(),EF=a("li"),Mue=a("strong"),lQo=o("layoutlm"),iQo=o(" \u2014 "),RX=a("a"),dQo=o("LayoutLMForTokenClassification"),cQo=o(" (LayoutLM model)"),fQo=l(),CF=a("li"),Eue=a("strong"),mQo=o("layoutlmv2"),gQo=o(" \u2014 "),PX=a("a"),hQo=o("LayoutLMv2ForTokenClassification"),pQo=o(" (LayoutLMv2 model)"),uQo=l(),wF=a("li"),Cue=a("strong"),_Qo=o("layoutlmv3"),bQo=o(" \u2014 "),BX=a("a"),vQo=o("LayoutLMv3ForTokenClassification"),FQo=o(" (LayoutLMv3 model)"),TQo=l(),AF=a("li"),wue=a("strong"),MQo=o("longformer"),EQo=o(" \u2014 "),IX=a("a"),CQo=o("LongformerForTokenClassification"),wQo=o(" (Longformer model)"),AQo=l(),LF=a("li"),Aue=a("strong"),LQo=o("megatron-bert"),yQo=o(" \u2014 "),NX=a("a"),xQo=o("MegatronBertForTokenClassification"),$Qo=o(" (Megatron-BERT model)"),kQo=l(),yF=a("li"),Lue=a("strong"),SQo=o("mobilebert"),RQo=o(" \u2014 "),qX=a("a"),PQo=o("MobileBertForTokenClassification"),BQo=o(" (MobileBERT model)"),IQo=l(),xF=a("li"),yue=a("strong"),NQo=o("mpnet"),qQo=o(" \u2014 "),jX=a("a"),jQo=o("MPNetForTokenClassification"),DQo=o(" (MPNet model)"),GQo=l(),$F=a("li"),xue=a("strong"),OQo=o("nystromformer"),VQo=o(" \u2014 "),DX=a("a"),XQo=o("NystromformerForTokenClassification"),zQo=o(" (Nystr\xF6mformer model)"),WQo=l(),kF=a("li"),$ue=a("strong"),QQo=o("qdqbert"),HQo=o(" \u2014 "),GX=a("a"),UQo=o("QDQBertForTokenClassification"),JQo=o(" (QDQBert model)"),YQo=l(),SF=a("li"),kue=a("strong"),KQo=o("rembert"),ZQo=o(" \u2014 "),OX=a("a"),eHo=o("RemBertForTokenClassification"),oHo=o(" (RemBERT model)"),rHo=l(),RF=a("li"),Sue=a("strong"),tHo=o("roberta"),aHo=o(" \u2014 "),VX=a("a"),nHo=o("RobertaForTokenClassification"),sHo=o(" (RoBERTa model)"),lHo=l(),PF=a("li"),Rue=a("strong"),iHo=o("roformer"),dHo=o(" \u2014 "),XX=a("a"),cHo=o("RoFormerForTokenClassification"),fHo=o(" (RoFormer model)"),mHo=l(),BF=a("li"),Pue=a("strong"),gHo=o("squeezebert"),hHo=o(" \u2014 "),zX=a("a"),pHo=o("SqueezeBertForTokenClassification"),uHo=o(" (SqueezeBERT model)"),_Ho=l(),IF=a("li"),Bue=a("strong"),bHo=o("xlm"),vHo=o(" \u2014 "),WX=a("a"),FHo=o("XLMForTokenClassification"),THo=o(" (XLM model)"),MHo=l(),NF=a("li"),Iue=a("strong"),EHo=o("xlm-roberta"),CHo=o(" \u2014 "),QX=a("a"),wHo=o("XLMRobertaForTokenClassification"),AHo=o(" (XLM-RoBERTa model)"),LHo=l(),qF=a("li"),Nue=a("strong"),yHo=o("xlm-roberta-xl"),xHo=o(" \u2014 "),HX=a("a"),$Ho=o("XLMRobertaXLForTokenClassification"),kHo=o(" (XLM-RoBERTa-XL model)"),SHo=l(),jF=a("li"),que=a("strong"),RHo=o("xlnet"),PHo=o(" \u2014 "),UX=a("a"),BHo=o("XLNetForTokenClassification"),IHo=o(" (XLNet model)"),NHo=l(),DF=a("li"),jue=a("strong"),qHo=o("yoso"),jHo=o(" \u2014 "),JX=a("a"),DHo=o("YosoForTokenClassification"),GHo=o(" (YOSO model)"),OHo=l(),GF=a("p"),VHo=o("The model is set in evaluation mode by default using "),Due=a("code"),XHo=o("model.eval()"),zHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=a("code"),WHo=o("model.train()"),QHo=l(),F(OF.$$.fragment),GGe=l(),ld=a("h2"),VF=a("a"),Oue=a("span"),F(jL.$$.fragment),HHo=l(),Vue=a("span"),UHo=o("AutoModelForQuestionAnswering"),OGe=l(),qo=a("div"),F(DL.$$.fragment),JHo=l(),id=a("p"),YHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),YX=a("a"),KHo=o("from_pretrained()"),ZHo=o(" class method or the "),KX=a("a"),eUo=o("from_config()"),oUo=o(` class
method.`),rUo=l(),GL=a("p"),tUo=o("This class cannot be instantiated directly using "),Xue=a("code"),aUo=o("__init__()"),nUo=o(" (throws an error)."),sUo=l(),ht=a("div"),F(OL.$$.fragment),lUo=l(),zue=a("p"),iUo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dUo=l(),dd=a("p"),cUo=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),fUo=o("not"),mUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),gUo=o("from_pretrained()"),hUo=o(" to load the model weights."),pUo=l(),F(XF.$$.fragment),uUo=l(),no=a("div"),F(VL.$$.fragment),_Uo=l(),Que=a("p"),bUo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vUo=l(),Ga=a("p"),FUo=o("The model class to instantiate is selected based on the "),Hue=a("code"),TUo=o("model_type"),MUo=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),EUo=o("pretrained_model_name_or_path"),CUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),wUo=o("pretrained_model_name_or_path"),AUo=o(":"),LUo=l(),V=a("ul"),zF=a("li"),Yue=a("strong"),yUo=o("albert"),xUo=o(" \u2014 "),ez=a("a"),$Uo=o("AlbertForQuestionAnswering"),kUo=o(" (ALBERT model)"),SUo=l(),WF=a("li"),Kue=a("strong"),RUo=o("bart"),PUo=o(" \u2014 "),oz=a("a"),BUo=o("BartForQuestionAnswering"),IUo=o(" (BART model)"),NUo=l(),QF=a("li"),Zue=a("strong"),qUo=o("bert"),jUo=o(" \u2014 "),rz=a("a"),DUo=o("BertForQuestionAnswering"),GUo=o(" (BERT model)"),OUo=l(),HF=a("li"),e_e=a("strong"),VUo=o("big_bird"),XUo=o(" \u2014 "),tz=a("a"),zUo=o("BigBirdForQuestionAnswering"),WUo=o(" (BigBird model)"),QUo=l(),UF=a("li"),o_e=a("strong"),HUo=o("bigbird_pegasus"),UUo=o(" \u2014 "),az=a("a"),JUo=o("BigBirdPegasusForQuestionAnswering"),YUo=o(" (BigBird-Pegasus model)"),KUo=l(),JF=a("li"),r_e=a("strong"),ZUo=o("camembert"),eJo=o(" \u2014 "),nz=a("a"),oJo=o("CamembertForQuestionAnswering"),rJo=o(" (CamemBERT model)"),tJo=l(),YF=a("li"),t_e=a("strong"),aJo=o("canine"),nJo=o(" \u2014 "),sz=a("a"),sJo=o("CanineForQuestionAnswering"),lJo=o(" (CANINE model)"),iJo=l(),KF=a("li"),a_e=a("strong"),dJo=o("convbert"),cJo=o(" \u2014 "),lz=a("a"),fJo=o("ConvBertForQuestionAnswering"),mJo=o(" (ConvBERT model)"),gJo=l(),ZF=a("li"),n_e=a("strong"),hJo=o("data2vec-text"),pJo=o(" \u2014 "),iz=a("a"),uJo=o("Data2VecTextForQuestionAnswering"),_Jo=o(" (Data2VecText model)"),bJo=l(),e6=a("li"),s_e=a("strong"),vJo=o("deberta"),FJo=o(" \u2014 "),dz=a("a"),TJo=o("DebertaForQuestionAnswering"),MJo=o(" (DeBERTa model)"),EJo=l(),o6=a("li"),l_e=a("strong"),CJo=o("deberta-v2"),wJo=o(" \u2014 "),cz=a("a"),AJo=o("DebertaV2ForQuestionAnswering"),LJo=o(" (DeBERTa-v2 model)"),yJo=l(),r6=a("li"),i_e=a("strong"),xJo=o("distilbert"),$Jo=o(" \u2014 "),fz=a("a"),kJo=o("DistilBertForQuestionAnswering"),SJo=o(" (DistilBERT model)"),RJo=l(),t6=a("li"),d_e=a("strong"),PJo=o("electra"),BJo=o(" \u2014 "),mz=a("a"),IJo=o("ElectraForQuestionAnswering"),NJo=o(" (ELECTRA model)"),qJo=l(),a6=a("li"),c_e=a("strong"),jJo=o("flaubert"),DJo=o(" \u2014 "),gz=a("a"),GJo=o("FlaubertForQuestionAnsweringSimple"),OJo=o(" (FlauBERT model)"),VJo=l(),n6=a("li"),f_e=a("strong"),XJo=o("fnet"),zJo=o(" \u2014 "),hz=a("a"),WJo=o("FNetForQuestionAnswering"),QJo=o(" (FNet model)"),HJo=l(),s6=a("li"),m_e=a("strong"),UJo=o("funnel"),JJo=o(" \u2014 "),pz=a("a"),YJo=o("FunnelForQuestionAnswering"),KJo=o(" (Funnel Transformer model)"),ZJo=l(),l6=a("li"),g_e=a("strong"),eYo=o("gptj"),oYo=o(" \u2014 "),uz=a("a"),rYo=o("GPTJForQuestionAnswering"),tYo=o(" (GPT-J model)"),aYo=l(),i6=a("li"),h_e=a("strong"),nYo=o("ibert"),sYo=o(" \u2014 "),_z=a("a"),lYo=o("IBertForQuestionAnswering"),iYo=o(" (I-BERT model)"),dYo=l(),d6=a("li"),p_e=a("strong"),cYo=o("layoutlmv2"),fYo=o(" \u2014 "),bz=a("a"),mYo=o("LayoutLMv2ForQuestionAnswering"),gYo=o(" (LayoutLMv2 model)"),hYo=l(),c6=a("li"),u_e=a("strong"),pYo=o("layoutlmv3"),uYo=o(" \u2014 "),vz=a("a"),_Yo=o("LayoutLMv3ForQuestionAnswering"),bYo=o(" (LayoutLMv3 model)"),vYo=l(),f6=a("li"),__e=a("strong"),FYo=o("led"),TYo=o(" \u2014 "),Fz=a("a"),MYo=o("LEDForQuestionAnswering"),EYo=o(" (LED model)"),CYo=l(),m6=a("li"),b_e=a("strong"),wYo=o("longformer"),AYo=o(" \u2014 "),Tz=a("a"),LYo=o("LongformerForQuestionAnswering"),yYo=o(" (Longformer model)"),xYo=l(),g6=a("li"),v_e=a("strong"),$Yo=o("lxmert"),kYo=o(" \u2014 "),Mz=a("a"),SYo=o("LxmertForQuestionAnswering"),RYo=o(" (LXMERT model)"),PYo=l(),h6=a("li"),F_e=a("strong"),BYo=o("mbart"),IYo=o(" \u2014 "),Ez=a("a"),NYo=o("MBartForQuestionAnswering"),qYo=o(" (mBART model)"),jYo=l(),p6=a("li"),T_e=a("strong"),DYo=o("megatron-bert"),GYo=o(" \u2014 "),Cz=a("a"),OYo=o("MegatronBertForQuestionAnswering"),VYo=o(" (Megatron-BERT model)"),XYo=l(),u6=a("li"),M_e=a("strong"),zYo=o("mobilebert"),WYo=o(" \u2014 "),wz=a("a"),QYo=o("MobileBertForQuestionAnswering"),HYo=o(" (MobileBERT model)"),UYo=l(),_6=a("li"),E_e=a("strong"),JYo=o("mpnet"),YYo=o(" \u2014 "),Az=a("a"),KYo=o("MPNetForQuestionAnswering"),ZYo=o(" (MPNet model)"),eKo=l(),b6=a("li"),C_e=a("strong"),oKo=o("nystromformer"),rKo=o(" \u2014 "),Lz=a("a"),tKo=o("NystromformerForQuestionAnswering"),aKo=o(" (Nystr\xF6mformer model)"),nKo=l(),v6=a("li"),w_e=a("strong"),sKo=o("qdqbert"),lKo=o(" \u2014 "),yz=a("a"),iKo=o("QDQBertForQuestionAnswering"),dKo=o(" (QDQBert model)"),cKo=l(),F6=a("li"),A_e=a("strong"),fKo=o("reformer"),mKo=o(" \u2014 "),xz=a("a"),gKo=o("ReformerForQuestionAnswering"),hKo=o(" (Reformer model)"),pKo=l(),T6=a("li"),L_e=a("strong"),uKo=o("rembert"),_Ko=o(" \u2014 "),$z=a("a"),bKo=o("RemBertForQuestionAnswering"),vKo=o(" (RemBERT model)"),FKo=l(),M6=a("li"),y_e=a("strong"),TKo=o("roberta"),MKo=o(" \u2014 "),kz=a("a"),EKo=o("RobertaForQuestionAnswering"),CKo=o(" (RoBERTa model)"),wKo=l(),E6=a("li"),x_e=a("strong"),AKo=o("roformer"),LKo=o(" \u2014 "),Sz=a("a"),yKo=o("RoFormerForQuestionAnswering"),xKo=o(" (RoFormer model)"),$Ko=l(),C6=a("li"),$_e=a("strong"),kKo=o("splinter"),SKo=o(" \u2014 "),Rz=a("a"),RKo=o("SplinterForQuestionAnswering"),PKo=o(" (Splinter model)"),BKo=l(),w6=a("li"),k_e=a("strong"),IKo=o("squeezebert"),NKo=o(" \u2014 "),Pz=a("a"),qKo=o("SqueezeBertForQuestionAnswering"),jKo=o(" (SqueezeBERT model)"),DKo=l(),A6=a("li"),S_e=a("strong"),GKo=o("xlm"),OKo=o(" \u2014 "),Bz=a("a"),VKo=o("XLMForQuestionAnsweringSimple"),XKo=o(" (XLM model)"),zKo=l(),L6=a("li"),R_e=a("strong"),WKo=o("xlm-roberta"),QKo=o(" \u2014 "),Iz=a("a"),HKo=o("XLMRobertaForQuestionAnswering"),UKo=o(" (XLM-RoBERTa model)"),JKo=l(),y6=a("li"),P_e=a("strong"),YKo=o("xlm-roberta-xl"),KKo=o(" \u2014 "),Nz=a("a"),ZKo=o("XLMRobertaXLForQuestionAnswering"),eZo=o(" (XLM-RoBERTa-XL model)"),oZo=l(),x6=a("li"),B_e=a("strong"),rZo=o("xlnet"),tZo=o(" \u2014 "),qz=a("a"),aZo=o("XLNetForQuestionAnsweringSimple"),nZo=o(" (XLNet model)"),sZo=l(),$6=a("li"),I_e=a("strong"),lZo=o("yoso"),iZo=o(" \u2014 "),jz=a("a"),dZo=o("YosoForQuestionAnswering"),cZo=o(" (YOSO model)"),fZo=l(),k6=a("p"),mZo=o("The model is set in evaluation mode by default using "),N_e=a("code"),gZo=o("model.eval()"),hZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=a("code"),pZo=o("model.train()"),uZo=l(),F(S6.$$.fragment),VGe=l(),cd=a("h2"),R6=a("a"),j_e=a("span"),F(XL.$$.fragment),_Zo=l(),D_e=a("span"),bZo=o("AutoModelForTableQuestionAnswering"),XGe=l(),jo=a("div"),F(zL.$$.fragment),vZo=l(),fd=a("p"),FZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Dz=a("a"),TZo=o("from_pretrained()"),MZo=o(" class method or the "),Gz=a("a"),EZo=o("from_config()"),CZo=o(` class
method.`),wZo=l(),WL=a("p"),AZo=o("This class cannot be instantiated directly using "),G_e=a("code"),LZo=o("__init__()"),yZo=o(" (throws an error)."),xZo=l(),pt=a("div"),F(QL.$$.fragment),$Zo=l(),O_e=a("p"),kZo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),SZo=l(),md=a("p"),RZo=o(`Note:
Loading a model from its configuration file does `),V_e=a("strong"),PZo=o("not"),BZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),IZo=o("from_pretrained()"),NZo=o(" to load the model weights."),qZo=l(),F(P6.$$.fragment),jZo=l(),so=a("div"),F(HL.$$.fragment),DZo=l(),X_e=a("p"),GZo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),OZo=l(),Oa=a("p"),VZo=o("The model class to instantiate is selected based on the "),z_e=a("code"),XZo=o("model_type"),zZo=o(` property of the config object (either
passed as an argument or loaded from `),W_e=a("code"),WZo=o("pretrained_model_name_or_path"),QZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=a("code"),HZo=o("pretrained_model_name_or_path"),UZo=o(":"),JZo=l(),H_e=a("ul"),B6=a("li"),U_e=a("strong"),YZo=o("tapas"),KZo=o(" \u2014 "),Vz=a("a"),ZZo=o("TapasForQuestionAnswering"),eer=o(" (TAPAS model)"),oer=l(),I6=a("p"),rer=o("The model is set in evaluation mode by default using "),J_e=a("code"),ter=o("model.eval()"),aer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y_e=a("code"),ner=o("model.train()"),ser=l(),F(N6.$$.fragment),zGe=l(),gd=a("h2"),q6=a("a"),K_e=a("span"),F(UL.$$.fragment),ler=l(),Z_e=a("span"),ier=o("AutoModelForImageClassification"),WGe=l(),Do=a("div"),F(JL.$$.fragment),der=l(),hd=a("p"),cer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Xz=a("a"),fer=o("from_pretrained()"),mer=o(" class method or the "),zz=a("a"),ger=o("from_config()"),her=o(` class
method.`),per=l(),YL=a("p"),uer=o("This class cannot be instantiated directly using "),e2e=a("code"),_er=o("__init__()"),ber=o(" (throws an error)."),ver=l(),ut=a("div"),F(KL.$$.fragment),Fer=l(),o2e=a("p"),Ter=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mer=l(),pd=a("p"),Eer=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),Cer=o("not"),wer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=a("a"),Aer=o("from_pretrained()"),Ler=o(" to load the model weights."),yer=l(),F(j6.$$.fragment),xer=l(),lo=a("div"),F(ZL.$$.fragment),$er=l(),t2e=a("p"),ker=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ser=l(),Va=a("p"),Rer=o("The model class to instantiate is selected based on the "),a2e=a("code"),Per=o("model_type"),Ber=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),Ier=o("pretrained_model_name_or_path"),Ner=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),qer=o("pretrained_model_name_or_path"),jer=o(":"),Der=l(),Fe=a("ul"),D6=a("li"),l2e=a("strong"),Ger=o("beit"),Oer=o(" \u2014 "),Qz=a("a"),Ver=o("BeitForImageClassification"),Xer=o(" (BEiT model)"),zer=l(),G6=a("li"),i2e=a("strong"),Wer=o("convnext"),Qer=o(" \u2014 "),Hz=a("a"),Her=o("ConvNextForImageClassification"),Uer=o(" (ConvNeXT model)"),Jer=l(),O6=a("li"),d2e=a("strong"),Yer=o("cvt"),Ker=o(" \u2014 "),Uz=a("a"),Zer=o("CvtForImageClassification"),eor=o(" (CvT model)"),oor=l(),V6=a("li"),c2e=a("strong"),ror=o("data2vec-vision"),tor=o(" \u2014 "),Jz=a("a"),aor=o("Data2VecVisionForImageClassification"),nor=o(" (Data2VecVision model)"),sor=l(),Os=a("li"),f2e=a("strong"),lor=o("deit"),ior=o(" \u2014 "),Yz=a("a"),dor=o("DeiTForImageClassification"),cor=o(" or "),Kz=a("a"),mor=o("DeiTForImageClassificationWithTeacher"),gor=o(" (DeiT model)"),hor=l(),X6=a("li"),m2e=a("strong"),por=o("imagegpt"),uor=o(" \u2014 "),Zz=a("a"),_or=o("ImageGPTForImageClassification"),bor=o(" (ImageGPT model)"),vor=l(),Vs=a("li"),g2e=a("strong"),For=o("levit"),Tor=o(" \u2014 "),eW=a("a"),Mor=o("LevitForImageClassification"),Eor=o(" or "),oW=a("a"),Cor=o("LevitForImageClassificationWithTeacher"),wor=o(" (LeViT model)"),Aor=l(),_t=a("li"),h2e=a("strong"),Lor=o("perceiver"),yor=o(" \u2014 "),rW=a("a"),xor=o("PerceiverForImageClassificationLearned"),$or=o(" or "),tW=a("a"),kor=o("PerceiverForImageClassificationFourier"),Sor=o(" or "),aW=a("a"),Ror=o("PerceiverForImageClassificationConvProcessing"),Por=o(" (Perceiver model)"),Bor=l(),z6=a("li"),p2e=a("strong"),Ior=o("poolformer"),Nor=o(" \u2014 "),nW=a("a"),qor=o("PoolFormerForImageClassification"),jor=o(" (PoolFormer model)"),Dor=l(),W6=a("li"),u2e=a("strong"),Gor=o("regnet"),Oor=o(" \u2014 "),sW=a("a"),Vor=o("RegNetForImageClassification"),Xor=o(" (RegNet model)"),zor=l(),Q6=a("li"),_2e=a("strong"),Wor=o("resnet"),Qor=o(" \u2014 "),lW=a("a"),Hor=o("ResNetForImageClassification"),Uor=o(" (ResNet model)"),Jor=l(),H6=a("li"),b2e=a("strong"),Yor=o("segformer"),Kor=o(" \u2014 "),iW=a("a"),Zor=o("SegformerForImageClassification"),err=o(" (SegFormer model)"),orr=l(),U6=a("li"),v2e=a("strong"),rrr=o("swin"),trr=o(" \u2014 "),dW=a("a"),arr=o("SwinForImageClassification"),nrr=o(" (Swin Transformer model)"),srr=l(),J6=a("li"),F2e=a("strong"),lrr=o("van"),irr=o(" \u2014 "),cW=a("a"),drr=o("VanForImageClassification"),crr=o(" (VAN model)"),frr=l(),Y6=a("li"),T2e=a("strong"),mrr=o("vit"),grr=o(" \u2014 "),fW=a("a"),hrr=o("ViTForImageClassification"),prr=o(" (ViT model)"),urr=l(),K6=a("p"),_rr=o("The model is set in evaluation mode by default using "),M2e=a("code"),brr=o("model.eval()"),vrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E2e=a("code"),Frr=o("model.train()"),Trr=l(),F(Z6.$$.fragment),QGe=l(),ud=a("h2"),eT=a("a"),C2e=a("span"),F(ey.$$.fragment),Mrr=l(),w2e=a("span"),Err=o("AutoModelForVision2Seq"),HGe=l(),Go=a("div"),F(oy.$$.fragment),Crr=l(),_d=a("p"),wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mW=a("a"),Arr=o("from_pretrained()"),Lrr=o(" class method or the "),gW=a("a"),yrr=o("from_config()"),xrr=o(` class
method.`),$rr=l(),ry=a("p"),krr=o("This class cannot be instantiated directly using "),A2e=a("code"),Srr=o("__init__()"),Rrr=o(" (throws an error)."),Prr=l(),bt=a("div"),F(ty.$$.fragment),Brr=l(),L2e=a("p"),Irr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Nrr=l(),bd=a("p"),qrr=o(`Note:
Loading a model from its configuration file does `),y2e=a("strong"),jrr=o("not"),Drr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=a("a"),Grr=o("from_pretrained()"),Orr=o(" to load the model weights."),Vrr=l(),F(oT.$$.fragment),Xrr=l(),io=a("div"),F(ay.$$.fragment),zrr=l(),x2e=a("p"),Wrr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qrr=l(),Xa=a("p"),Hrr=o("The model class to instantiate is selected based on the "),$2e=a("code"),Urr=o("model_type"),Jrr=o(` property of the config object (either
passed as an argument or loaded from `),k2e=a("code"),Yrr=o("pretrained_model_name_or_path"),Krr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=a("code"),Zrr=o("pretrained_model_name_or_path"),etr=o(":"),otr=l(),R2e=a("ul"),rT=a("li"),P2e=a("strong"),rtr=o("vision-encoder-decoder"),ttr=o(" \u2014 "),pW=a("a"),atr=o("VisionEncoderDecoderModel"),ntr=o(" (Vision Encoder decoder model)"),str=l(),tT=a("p"),ltr=o("The model is set in evaluation mode by default using "),B2e=a("code"),itr=o("model.eval()"),dtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=a("code"),ctr=o("model.train()"),ftr=l(),F(aT.$$.fragment),UGe=l(),vd=a("h2"),nT=a("a"),N2e=a("span"),F(ny.$$.fragment),mtr=l(),q2e=a("span"),gtr=o("AutoModelForVisualQuestionAnswering"),JGe=l(),Oo=a("div"),F(sy.$$.fragment),htr=l(),Fd=a("p"),ptr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),uW=a("a"),utr=o("from_pretrained()"),_tr=o(" class method or the "),_W=a("a"),btr=o("from_config()"),vtr=o(` class
method.`),Ftr=l(),ly=a("p"),Ttr=o("This class cannot be instantiated directly using "),j2e=a("code"),Mtr=o("__init__()"),Etr=o(" (throws an error)."),Ctr=l(),vt=a("div"),F(iy.$$.fragment),wtr=l(),D2e=a("p"),Atr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Ltr=l(),Td=a("p"),ytr=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),xtr=o("not"),$tr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),ktr=o("from_pretrained()"),Str=o(" to load the model weights."),Rtr=l(),F(sT.$$.fragment),Ptr=l(),co=a("div"),F(dy.$$.fragment),Btr=l(),O2e=a("p"),Itr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Ntr=l(),za=a("p"),qtr=o("The model class to instantiate is selected based on the "),V2e=a("code"),jtr=o("model_type"),Dtr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),Gtr=o("pretrained_model_name_or_path"),Otr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),Vtr=o("pretrained_model_name_or_path"),Xtr=o(":"),ztr=l(),W2e=a("ul"),lT=a("li"),Q2e=a("strong"),Wtr=o("vilt"),Qtr=o(" \u2014 "),vW=a("a"),Htr=o("ViltForQuestionAnswering"),Utr=o(" (ViLT model)"),Jtr=l(),iT=a("p"),Ytr=o("The model is set in evaluation mode by default using "),H2e=a("code"),Ktr=o("model.eval()"),Ztr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=a("code"),ear=o("model.train()"),oar=l(),F(dT.$$.fragment),YGe=l(),Md=a("h2"),cT=a("a"),J2e=a("span"),F(cy.$$.fragment),rar=l(),Y2e=a("span"),tar=o("AutoModelForAudioClassification"),KGe=l(),Vo=a("div"),F(fy.$$.fragment),aar=l(),Ed=a("p"),nar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),FW=a("a"),sar=o("from_pretrained()"),lar=o(" class method or the "),TW=a("a"),iar=o("from_config()"),dar=o(` class
method.`),car=l(),my=a("p"),far=o("This class cannot be instantiated directly using "),K2e=a("code"),mar=o("__init__()"),gar=o(" (throws an error)."),har=l(),Ft=a("div"),F(gy.$$.fragment),par=l(),Z2e=a("p"),uar=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_ar=l(),Cd=a("p"),bar=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),Far=o("not"),Tar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),Mar=o("from_pretrained()"),Ear=o(" to load the model weights."),Car=l(),F(fT.$$.fragment),war=l(),fo=a("div"),F(hy.$$.fragment),Aar=l(),o1e=a("p"),Lar=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),yar=l(),Wa=a("p"),xar=o("The model class to instantiate is selected based on the "),r1e=a("code"),$ar=o("model_type"),kar=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),Sar=o("pretrained_model_name_or_path"),Rar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),Par=o("pretrained_model_name_or_path"),Bar=o(":"),Iar=l(),Pe=a("ul"),mT=a("li"),n1e=a("strong"),Nar=o("data2vec-audio"),qar=o(" \u2014 "),EW=a("a"),jar=o("Data2VecAudioForSequenceClassification"),Dar=o(" (Data2VecAudio model)"),Gar=l(),gT=a("li"),s1e=a("strong"),Oar=o("hubert"),Var=o(" \u2014 "),CW=a("a"),Xar=o("HubertForSequenceClassification"),zar=o(" (Hubert model)"),War=l(),hT=a("li"),l1e=a("strong"),Qar=o("sew"),Har=o(" \u2014 "),wW=a("a"),Uar=o("SEWForSequenceClassification"),Jar=o(" (SEW model)"),Yar=l(),pT=a("li"),i1e=a("strong"),Kar=o("sew-d"),Zar=o(" \u2014 "),AW=a("a"),enr=o("SEWDForSequenceClassification"),onr=o(" (SEW-D model)"),rnr=l(),uT=a("li"),d1e=a("strong"),tnr=o("unispeech"),anr=o(" \u2014 "),LW=a("a"),nnr=o("UniSpeechForSequenceClassification"),snr=o(" (UniSpeech model)"),lnr=l(),_T=a("li"),c1e=a("strong"),inr=o("unispeech-sat"),dnr=o(" \u2014 "),yW=a("a"),cnr=o("UniSpeechSatForSequenceClassification"),fnr=o(" (UniSpeechSat model)"),mnr=l(),bT=a("li"),f1e=a("strong"),gnr=o("wav2vec2"),hnr=o(" \u2014 "),xW=a("a"),pnr=o("Wav2Vec2ForSequenceClassification"),unr=o(" (Wav2Vec2 model)"),_nr=l(),vT=a("li"),m1e=a("strong"),bnr=o("wav2vec2-conformer"),vnr=o(" \u2014 "),$W=a("a"),Fnr=o("Wav2Vec2ConformerForSequenceClassification"),Tnr=o(" (Wav2Vec2-Conformer model)"),Mnr=l(),FT=a("li"),g1e=a("strong"),Enr=o("wavlm"),Cnr=o(" \u2014 "),kW=a("a"),wnr=o("WavLMForSequenceClassification"),Anr=o(" (WavLM model)"),Lnr=l(),TT=a("p"),ynr=o("The model is set in evaluation mode by default using "),h1e=a("code"),xnr=o("model.eval()"),$nr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=a("code"),knr=o("model.train()"),Snr=l(),F(MT.$$.fragment),ZGe=l(),wd=a("h2"),ET=a("a"),u1e=a("span"),F(py.$$.fragment),Rnr=l(),_1e=a("span"),Pnr=o("AutoModelForAudioFrameClassification"),eOe=l(),Xo=a("div"),F(uy.$$.fragment),Bnr=l(),Ad=a("p"),Inr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),SW=a("a"),Nnr=o("from_pretrained()"),qnr=o(" class method or the "),RW=a("a"),jnr=o("from_config()"),Dnr=o(` class
method.`),Gnr=l(),_y=a("p"),Onr=o("This class cannot be instantiated directly using "),b1e=a("code"),Vnr=o("__init__()"),Xnr=o(" (throws an error)."),znr=l(),Tt=a("div"),F(by.$$.fragment),Wnr=l(),v1e=a("p"),Qnr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Hnr=l(),Ld=a("p"),Unr=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),Jnr=o("not"),Ynr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),Knr=o("from_pretrained()"),Znr=o(" to load the model weights."),esr=l(),F(CT.$$.fragment),osr=l(),mo=a("div"),F(vy.$$.fragment),rsr=l(),T1e=a("p"),tsr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),asr=l(),Qa=a("p"),nsr=o("The model class to instantiate is selected based on the "),M1e=a("code"),ssr=o("model_type"),lsr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),isr=o("pretrained_model_name_or_path"),dsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),csr=o("pretrained_model_name_or_path"),fsr=o(":"),msr=l(),et=a("ul"),wT=a("li"),w1e=a("strong"),gsr=o("data2vec-audio"),hsr=o(" \u2014 "),BW=a("a"),psr=o("Data2VecAudioForAudioFrameClassification"),usr=o(" (Data2VecAudio model)"),_sr=l(),AT=a("li"),A1e=a("strong"),bsr=o("unispeech-sat"),vsr=o(" \u2014 "),IW=a("a"),Fsr=o("UniSpeechSatForAudioFrameClassification"),Tsr=o(" (UniSpeechSat model)"),Msr=l(),LT=a("li"),L1e=a("strong"),Esr=o("wav2vec2"),Csr=o(" \u2014 "),NW=a("a"),wsr=o("Wav2Vec2ForAudioFrameClassification"),Asr=o(" (Wav2Vec2 model)"),Lsr=l(),yT=a("li"),y1e=a("strong"),ysr=o("wav2vec2-conformer"),xsr=o(" \u2014 "),qW=a("a"),$sr=o("Wav2Vec2ConformerForAudioFrameClassification"),ksr=o(" (Wav2Vec2-Conformer model)"),Ssr=l(),xT=a("li"),x1e=a("strong"),Rsr=o("wavlm"),Psr=o(" \u2014 "),jW=a("a"),Bsr=o("WavLMForAudioFrameClassification"),Isr=o(" (WavLM model)"),Nsr=l(),$T=a("p"),qsr=o("The model is set in evaluation mode by default using "),$1e=a("code"),jsr=o("model.eval()"),Dsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k1e=a("code"),Gsr=o("model.train()"),Osr=l(),F(kT.$$.fragment),oOe=l(),yd=a("h2"),ST=a("a"),S1e=a("span"),F(Fy.$$.fragment),Vsr=l(),R1e=a("span"),Xsr=o("AutoModelForCTC"),rOe=l(),zo=a("div"),F(Ty.$$.fragment),zsr=l(),xd=a("p"),Wsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),DW=a("a"),Qsr=o("from_pretrained()"),Hsr=o(" class method or the "),GW=a("a"),Usr=o("from_config()"),Jsr=o(` class
method.`),Ysr=l(),My=a("p"),Ksr=o("This class cannot be instantiated directly using "),P1e=a("code"),Zsr=o("__init__()"),elr=o(" (throws an error)."),olr=l(),Mt=a("div"),F(Ey.$$.fragment),rlr=l(),B1e=a("p"),tlr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),alr=l(),$d=a("p"),nlr=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),slr=o("not"),llr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),ilr=o("from_pretrained()"),dlr=o(" to load the model weights."),clr=l(),F(RT.$$.fragment),flr=l(),go=a("div"),F(Cy.$$.fragment),mlr=l(),N1e=a("p"),glr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hlr=l(),Ha=a("p"),plr=o("The model class to instantiate is selected based on the "),q1e=a("code"),ulr=o("model_type"),_lr=o(` property of the config object (either
passed as an argument or loaded from `),j1e=a("code"),blr=o("pretrained_model_name_or_path"),vlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=a("code"),Flr=o("pretrained_model_name_or_path"),Tlr=o(":"),Mlr=l(),Le=a("ul"),PT=a("li"),G1e=a("strong"),Elr=o("data2vec-audio"),Clr=o(" \u2014 "),VW=a("a"),wlr=o("Data2VecAudioForCTC"),Alr=o(" (Data2VecAudio model)"),Llr=l(),BT=a("li"),O1e=a("strong"),ylr=o("hubert"),xlr=o(" \u2014 "),XW=a("a"),$lr=o("HubertForCTC"),klr=o(" (Hubert model)"),Slr=l(),IT=a("li"),V1e=a("strong"),Rlr=o("mctct"),Plr=o(" \u2014 "),zW=a("a"),Blr=o("MCTCTForCTC"),Ilr=o(" (M-CTC-T model)"),Nlr=l(),NT=a("li"),X1e=a("strong"),qlr=o("sew"),jlr=o(" \u2014 "),WW=a("a"),Dlr=o("SEWForCTC"),Glr=o(" (SEW model)"),Olr=l(),qT=a("li"),z1e=a("strong"),Vlr=o("sew-d"),Xlr=o(" \u2014 "),QW=a("a"),zlr=o("SEWDForCTC"),Wlr=o(" (SEW-D model)"),Qlr=l(),jT=a("li"),W1e=a("strong"),Hlr=o("unispeech"),Ulr=o(" \u2014 "),HW=a("a"),Jlr=o("UniSpeechForCTC"),Ylr=o(" (UniSpeech model)"),Klr=l(),DT=a("li"),Q1e=a("strong"),Zlr=o("unispeech-sat"),eir=o(" \u2014 "),UW=a("a"),oir=o("UniSpeechSatForCTC"),rir=o(" (UniSpeechSat model)"),tir=l(),GT=a("li"),H1e=a("strong"),air=o("wav2vec2"),nir=o(" \u2014 "),JW=a("a"),sir=o("Wav2Vec2ForCTC"),lir=o(" (Wav2Vec2 model)"),iir=l(),OT=a("li"),U1e=a("strong"),dir=o("wav2vec2-conformer"),cir=o(" \u2014 "),YW=a("a"),fir=o("Wav2Vec2ConformerForCTC"),mir=o(" (Wav2Vec2-Conformer model)"),gir=l(),VT=a("li"),J1e=a("strong"),hir=o("wavlm"),pir=o(" \u2014 "),KW=a("a"),uir=o("WavLMForCTC"),_ir=o(" (WavLM model)"),bir=l(),XT=a("p"),vir=o("The model is set in evaluation mode by default using "),Y1e=a("code"),Fir=o("model.eval()"),Tir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=a("code"),Mir=o("model.train()"),Eir=l(),F(zT.$$.fragment),tOe=l(),kd=a("h2"),WT=a("a"),Z1e=a("span"),F(wy.$$.fragment),Cir=l(),ebe=a("span"),wir=o("AutoModelForSpeechSeq2Seq"),aOe=l(),Wo=a("div"),F(Ay.$$.fragment),Air=l(),Sd=a("p"),Lir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZW=a("a"),yir=o("from_pretrained()"),xir=o(" class method or the "),eQ=a("a"),$ir=o("from_config()"),kir=o(` class
method.`),Sir=l(),Ly=a("p"),Rir=o("This class cannot be instantiated directly using "),obe=a("code"),Pir=o("__init__()"),Bir=o(" (throws an error)."),Iir=l(),Et=a("div"),F(yy.$$.fragment),Nir=l(),rbe=a("p"),qir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jir=l(),Rd=a("p"),Dir=o(`Note:
Loading a model from its configuration file does `),tbe=a("strong"),Gir=o("not"),Oir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=a("a"),Vir=o("from_pretrained()"),Xir=o(" to load the model weights."),zir=l(),F(QT.$$.fragment),Wir=l(),ho=a("div"),F(xy.$$.fragment),Qir=l(),abe=a("p"),Hir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Uir=l(),Ua=a("p"),Jir=o("The model class to instantiate is selected based on the "),nbe=a("code"),Yir=o("model_type"),Kir=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),Zir=o("pretrained_model_name_or_path"),edr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),odr=o("pretrained_model_name_or_path"),rdr=o(":"),tdr=l(),$y=a("ul"),HT=a("li"),ibe=a("strong"),adr=o("speech-encoder-decoder"),ndr=o(" \u2014 "),rQ=a("a"),sdr=o("SpeechEncoderDecoderModel"),ldr=o(" (Speech Encoder decoder model)"),idr=l(),UT=a("li"),dbe=a("strong"),ddr=o("speech_to_text"),cdr=o(" \u2014 "),tQ=a("a"),fdr=o("Speech2TextForConditionalGeneration"),mdr=o(" (Speech2Text model)"),gdr=l(),JT=a("p"),hdr=o("The model is set in evaluation mode by default using "),cbe=a("code"),pdr=o("model.eval()"),udr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fbe=a("code"),_dr=o("model.train()"),bdr=l(),F(YT.$$.fragment),nOe=l(),Pd=a("h2"),KT=a("a"),mbe=a("span"),F(ky.$$.fragment),vdr=l(),gbe=a("span"),Fdr=o("AutoModelForAudioXVector"),sOe=l(),Qo=a("div"),F(Sy.$$.fragment),Tdr=l(),Bd=a("p"),Mdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),aQ=a("a"),Edr=o("from_pretrained()"),Cdr=o(" class method or the "),nQ=a("a"),wdr=o("from_config()"),Adr=o(` class
method.`),Ldr=l(),Ry=a("p"),ydr=o("This class cannot be instantiated directly using "),hbe=a("code"),xdr=o("__init__()"),$dr=o(" (throws an error)."),kdr=l(),Ct=a("div"),F(Py.$$.fragment),Sdr=l(),pbe=a("p"),Rdr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Pdr=l(),Id=a("p"),Bdr=o(`Note:
Loading a model from its configuration file does `),ube=a("strong"),Idr=o("not"),Ndr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),qdr=o("from_pretrained()"),jdr=o(" to load the model weights."),Ddr=l(),F(ZT.$$.fragment),Gdr=l(),po=a("div"),F(By.$$.fragment),Odr=l(),_be=a("p"),Vdr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Xdr=l(),Ja=a("p"),zdr=o("The model class to instantiate is selected based on the "),bbe=a("code"),Wdr=o("model_type"),Qdr=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),Hdr=o("pretrained_model_name_or_path"),Udr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),Jdr=o("pretrained_model_name_or_path"),Ydr=o(":"),Kdr=l(),ot=a("ul"),e7=a("li"),Tbe=a("strong"),Zdr=o("data2vec-audio"),ecr=o(" \u2014 "),lQ=a("a"),ocr=o("Data2VecAudioForXVector"),rcr=o(" (Data2VecAudio model)"),tcr=l(),o7=a("li"),Mbe=a("strong"),acr=o("unispeech-sat"),ncr=o(" \u2014 "),iQ=a("a"),scr=o("UniSpeechSatForXVector"),lcr=o(" (UniSpeechSat model)"),icr=l(),r7=a("li"),Ebe=a("strong"),dcr=o("wav2vec2"),ccr=o(" \u2014 "),dQ=a("a"),fcr=o("Wav2Vec2ForXVector"),mcr=o(" (Wav2Vec2 model)"),gcr=l(),t7=a("li"),Cbe=a("strong"),hcr=o("wav2vec2-conformer"),pcr=o(" \u2014 "),cQ=a("a"),ucr=o("Wav2Vec2ConformerForXVector"),_cr=o(" (Wav2Vec2-Conformer model)"),bcr=l(),a7=a("li"),wbe=a("strong"),vcr=o("wavlm"),Fcr=o(" \u2014 "),fQ=a("a"),Tcr=o("WavLMForXVector"),Mcr=o(" (WavLM model)"),Ecr=l(),n7=a("p"),Ccr=o("The model is set in evaluation mode by default using "),Abe=a("code"),wcr=o("model.eval()"),Acr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lbe=a("code"),Lcr=o("model.train()"),ycr=l(),F(s7.$$.fragment),lOe=l(),Nd=a("h2"),l7=a("a"),ybe=a("span"),F(Iy.$$.fragment),xcr=l(),xbe=a("span"),$cr=o("AutoModelForMaskedImageModeling"),iOe=l(),Ho=a("div"),F(Ny.$$.fragment),kcr=l(),qd=a("p"),Scr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mQ=a("a"),Rcr=o("from_pretrained()"),Pcr=o(" class method or the "),gQ=a("a"),Bcr=o("from_config()"),Icr=o(` class
method.`),Ncr=l(),qy=a("p"),qcr=o("This class cannot be instantiated directly using "),$be=a("code"),jcr=o("__init__()"),Dcr=o(" (throws an error)."),Gcr=l(),wt=a("div"),F(jy.$$.fragment),Ocr=l(),kbe=a("p"),Vcr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Xcr=l(),jd=a("p"),zcr=o(`Note:
Loading a model from its configuration file does `),Sbe=a("strong"),Wcr=o("not"),Qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hQ=a("a"),Hcr=o("from_pretrained()"),Ucr=o(" to load the model weights."),Jcr=l(),F(i7.$$.fragment),Ycr=l(),uo=a("div"),F(Dy.$$.fragment),Kcr=l(),Rbe=a("p"),Zcr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),efr=l(),Ya=a("p"),ofr=o("The model class to instantiate is selected based on the "),Pbe=a("code"),rfr=o("model_type"),tfr=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),afr=o("pretrained_model_name_or_path"),nfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=a("code"),sfr=o("pretrained_model_name_or_path"),lfr=o(":"),ifr=l(),Dd=a("ul"),d7=a("li"),Nbe=a("strong"),dfr=o("deit"),cfr=o(" \u2014 "),pQ=a("a"),ffr=o("DeiTForMaskedImageModeling"),mfr=o(" (DeiT model)"),gfr=l(),c7=a("li"),qbe=a("strong"),hfr=o("swin"),pfr=o(" \u2014 "),uQ=a("a"),ufr=o("SwinForMaskedImageModeling"),_fr=o(" (Swin Transformer model)"),bfr=l(),f7=a("li"),jbe=a("strong"),vfr=o("vit"),Ffr=o(" \u2014 "),_Q=a("a"),Tfr=o("ViTForMaskedImageModeling"),Mfr=o(" (ViT model)"),Efr=l(),m7=a("p"),Cfr=o("The model is set in evaluation mode by default using "),Dbe=a("code"),wfr=o("model.eval()"),Afr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gbe=a("code"),Lfr=o("model.train()"),yfr=l(),F(g7.$$.fragment),dOe=l(),Gd=a("h2"),h7=a("a"),Obe=a("span"),F(Gy.$$.fragment),xfr=l(),Vbe=a("span"),$fr=o("AutoModelForObjectDetection"),cOe=l(),Uo=a("div"),F(Oy.$$.fragment),kfr=l(),Od=a("p"),Sfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),bQ=a("a"),Rfr=o("from_pretrained()"),Pfr=o(" class method or the "),vQ=a("a"),Bfr=o("from_config()"),Ifr=o(` class
method.`),Nfr=l(),Vy=a("p"),qfr=o("This class cannot be instantiated directly using "),Xbe=a("code"),jfr=o("__init__()"),Dfr=o(" (throws an error)."),Gfr=l(),At=a("div"),F(Xy.$$.fragment),Ofr=l(),zbe=a("p"),Vfr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Xfr=l(),Vd=a("p"),zfr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),Wfr=o("not"),Qfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),Hfr=o("from_pretrained()"),Ufr=o(" to load the model weights."),Jfr=l(),F(p7.$$.fragment),Yfr=l(),_o=a("div"),F(zy.$$.fragment),Kfr=l(),Qbe=a("p"),Zfr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),emr=l(),Ka=a("p"),omr=o("The model class to instantiate is selected based on the "),Hbe=a("code"),rmr=o("model_type"),tmr=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),smr=o("pretrained_model_name_or_path"),lmr=o(":"),imr=l(),Wy=a("ul"),u7=a("li"),Ybe=a("strong"),dmr=o("detr"),cmr=o(" \u2014 "),TQ=a("a"),fmr=o("DetrForObjectDetection"),mmr=o(" (DETR model)"),gmr=l(),_7=a("li"),Kbe=a("strong"),hmr=o("yolos"),pmr=o(" \u2014 "),MQ=a("a"),umr=o("YolosForObjectDetection"),_mr=o(" (YOLOS model)"),bmr=l(),b7=a("p"),vmr=o("The model is set in evaluation mode by default using "),Zbe=a("code"),Fmr=o("model.eval()"),Tmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eve=a("code"),Mmr=o("model.train()"),Emr=l(),F(v7.$$.fragment),fOe=l(),Xd=a("h2"),F7=a("a"),ove=a("span"),F(Qy.$$.fragment),Cmr=l(),rve=a("span"),wmr=o("AutoModelForImageSegmentation"),mOe=l(),Jo=a("div"),F(Hy.$$.fragment),Amr=l(),zd=a("p"),Lmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),EQ=a("a"),ymr=o("from_pretrained()"),xmr=o(" class method or the "),CQ=a("a"),$mr=o("from_config()"),kmr=o(` class
method.`),Smr=l(),Uy=a("p"),Rmr=o("This class cannot be instantiated directly using "),tve=a("code"),Pmr=o("__init__()"),Bmr=o(" (throws an error)."),Imr=l(),Lt=a("div"),F(Jy.$$.fragment),Nmr=l(),ave=a("p"),qmr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jmr=l(),Wd=a("p"),Dmr=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),Gmr=o("not"),Omr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),Vmr=o("from_pretrained()"),Xmr=o(" to load the model weights."),zmr=l(),F(T7.$$.fragment),Wmr=l(),bo=a("div"),F(Yy.$$.fragment),Qmr=l(),sve=a("p"),Hmr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Umr=l(),Za=a("p"),Jmr=o("The model class to instantiate is selected based on the "),lve=a("code"),Ymr=o("model_type"),Kmr=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),Zmr=o("pretrained_model_name_or_path"),egr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),ogr=o("pretrained_model_name_or_path"),rgr=o(":"),tgr=l(),cve=a("ul"),M7=a("li"),fve=a("strong"),agr=o("detr"),ngr=o(" \u2014 "),AQ=a("a"),sgr=o("DetrForSegmentation"),lgr=o(" (DETR model)"),igr=l(),E7=a("p"),dgr=o("The model is set in evaluation mode by default using "),mve=a("code"),cgr=o("model.eval()"),fgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gve=a("code"),mgr=o("model.train()"),ggr=l(),F(C7.$$.fragment),gOe=l(),Qd=a("h2"),w7=a("a"),hve=a("span"),F(Ky.$$.fragment),hgr=l(),pve=a("span"),pgr=o("AutoModelForSemanticSegmentation"),hOe=l(),Yo=a("div"),F(Zy.$$.fragment),ugr=l(),Hd=a("p"),_gr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),LQ=a("a"),bgr=o("from_pretrained()"),vgr=o(" class method or the "),yQ=a("a"),Fgr=o("from_config()"),Tgr=o(` class
method.`),Mgr=l(),e9=a("p"),Egr=o("This class cannot be instantiated directly using "),uve=a("code"),Cgr=o("__init__()"),wgr=o(" (throws an error)."),Agr=l(),yt=a("div"),F(o9.$$.fragment),Lgr=l(),_ve=a("p"),ygr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),xgr=l(),Ud=a("p"),$gr=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),kgr=o("not"),Sgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),Rgr=o("from_pretrained()"),Pgr=o(" to load the model weights."),Bgr=l(),F(A7.$$.fragment),Igr=l(),vo=a("div"),F(r9.$$.fragment),Ngr=l(),vve=a("p"),qgr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),jgr=l(),en=a("p"),Dgr=o("The model class to instantiate is selected based on the "),Fve=a("code"),Ggr=o("model_type"),Ogr=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),Vgr=o("pretrained_model_name_or_path"),Xgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),zgr=o("pretrained_model_name_or_path"),Wgr=o(":"),Qgr=l(),on=a("ul"),L7=a("li"),Eve=a("strong"),Hgr=o("beit"),Ugr=o(" \u2014 "),$Q=a("a"),Jgr=o("BeitForSemanticSegmentation"),Ygr=o(" (BEiT model)"),Kgr=l(),y7=a("li"),Cve=a("strong"),Zgr=o("data2vec-vision"),ehr=o(" \u2014 "),kQ=a("a"),ohr=o("Data2VecVisionForSemanticSegmentation"),rhr=o(" (Data2VecVision model)"),thr=l(),x7=a("li"),wve=a("strong"),ahr=o("dpt"),nhr=o(" \u2014 "),SQ=a("a"),shr=o("DPTForSemanticSegmentation"),lhr=o(" (DPT model)"),ihr=l(),$7=a("li"),Ave=a("strong"),dhr=o("segformer"),chr=o(" \u2014 "),RQ=a("a"),fhr=o("SegformerForSemanticSegmentation"),mhr=o(" (SegFormer model)"),ghr=l(),k7=a("p"),hhr=o("The model is set in evaluation mode by default using "),Lve=a("code"),phr=o("model.eval()"),uhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yve=a("code"),_hr=o("model.train()"),bhr=l(),F(S7.$$.fragment),pOe=l(),Jd=a("h2"),R7=a("a"),xve=a("span"),F(t9.$$.fragment),vhr=l(),$ve=a("span"),Fhr=o("AutoModelForInstanceSegmentation"),uOe=l(),Ko=a("div"),F(a9.$$.fragment),Thr=l(),Yd=a("p"),Mhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),PQ=a("a"),Ehr=o("from_pretrained()"),Chr=o(" class method or the "),BQ=a("a"),whr=o("from_config()"),Ahr=o(` class
method.`),Lhr=l(),n9=a("p"),yhr=o("This class cannot be instantiated directly using "),kve=a("code"),xhr=o("__init__()"),$hr=o(" (throws an error)."),khr=l(),xt=a("div"),F(s9.$$.fragment),Shr=l(),Sve=a("p"),Rhr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Phr=l(),Kd=a("p"),Bhr=o(`Note:
Loading a model from its configuration file does `),Rve=a("strong"),Ihr=o("not"),Nhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),qhr=o("from_pretrained()"),jhr=o(" to load the model weights."),Dhr=l(),F(P7.$$.fragment),Ghr=l(),Fo=a("div"),F(l9.$$.fragment),Ohr=l(),Pve=a("p"),Vhr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Xhr=l(),rn=a("p"),zhr=o("The model class to instantiate is selected based on the "),Bve=a("code"),Whr=o("model_type"),Qhr=o(` property of the config object (either
passed as an argument or loaded from `),Ive=a("code"),Hhr=o("pretrained_model_name_or_path"),Uhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=a("code"),Jhr=o("pretrained_model_name_or_path"),Yhr=o(":"),Khr=l(),qve=a("ul"),B7=a("li"),jve=a("strong"),Zhr=o("maskformer"),epr=o(" \u2014 "),NQ=a("a"),opr=o("MaskFormerForInstanceSegmentation"),rpr=o(" (MaskFormer model)"),tpr=l(),I7=a("p"),apr=o("The model is set in evaluation mode by default using "),Dve=a("code"),npr=o("model.eval()"),spr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gve=a("code"),lpr=o("model.train()"),ipr=l(),F(N7.$$.fragment),_Oe=l(),Zd=a("h2"),q7=a("a"),Ove=a("span"),F(i9.$$.fragment),dpr=l(),Vve=a("span"),cpr=o("TFAutoModel"),bOe=l(),Zo=a("div"),F(d9.$$.fragment),fpr=l(),ec=a("p"),mpr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qQ=a("a"),gpr=o("from_pretrained()"),hpr=o(" class method or the "),jQ=a("a"),ppr=o("from_config()"),upr=o(` class
method.`),_pr=l(),c9=a("p"),bpr=o("This class cannot be instantiated directly using "),Xve=a("code"),vpr=o("__init__()"),Fpr=o(" (throws an error)."),Tpr=l(),$t=a("div"),F(f9.$$.fragment),Mpr=l(),zve=a("p"),Epr=o("Instantiates one of the base model classes of the library from a configuration."),Cpr=l(),oc=a("p"),wpr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),Apr=o("not"),Lpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),ypr=o("from_pretrained()"),xpr=o(" to load the model weights."),$pr=l(),F(j7.$$.fragment),kpr=l(),Lr=a("div"),F(m9.$$.fragment),Spr=l(),Qve=a("p"),Rpr=o("Instantiate one of the base model classes of the library from a pretrained model."),Ppr=l(),tn=a("p"),Bpr=o("The model class to instantiate is selected based on the "),Hve=a("code"),Ipr=o("model_type"),Npr=o(` property of the config object (either
passed as an argument or loaded from `),Uve=a("code"),qpr=o("pretrained_model_name_or_path"),jpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=a("code"),Dpr=o("pretrained_model_name_or_path"),Gpr=o(":"),Opr=l(),q=a("ul"),D7=a("li"),Yve=a("strong"),Vpr=o("albert"),Xpr=o(" \u2014 "),GQ=a("a"),zpr=o("TFAlbertModel"),Wpr=o(" (ALBERT model)"),Qpr=l(),G7=a("li"),Kve=a("strong"),Hpr=o("bart"),Upr=o(" \u2014 "),OQ=a("a"),Jpr=o("TFBartModel"),Ypr=o(" (BART model)"),Kpr=l(),O7=a("li"),Zve=a("strong"),Zpr=o("bert"),eur=o(" \u2014 "),VQ=a("a"),our=o("TFBertModel"),rur=o(" (BERT model)"),tur=l(),V7=a("li"),eFe=a("strong"),aur=o("blenderbot"),nur=o(" \u2014 "),XQ=a("a"),sur=o("TFBlenderbotModel"),lur=o(" (Blenderbot model)"),iur=l(),X7=a("li"),oFe=a("strong"),dur=o("blenderbot-small"),cur=o(" \u2014 "),zQ=a("a"),fur=o("TFBlenderbotSmallModel"),mur=o(" (BlenderbotSmall model)"),gur=l(),z7=a("li"),rFe=a("strong"),hur=o("camembert"),pur=o(" \u2014 "),WQ=a("a"),uur=o("TFCamembertModel"),_ur=o(" (CamemBERT model)"),bur=l(),W7=a("li"),tFe=a("strong"),vur=o("clip"),Fur=o(" \u2014 "),QQ=a("a"),Tur=o("TFCLIPModel"),Mur=o(" (CLIP model)"),Eur=l(),Q7=a("li"),aFe=a("strong"),Cur=o("convbert"),wur=o(" \u2014 "),HQ=a("a"),Aur=o("TFConvBertModel"),Lur=o(" (ConvBERT model)"),yur=l(),H7=a("li"),nFe=a("strong"),xur=o("convnext"),$ur=o(" \u2014 "),UQ=a("a"),kur=o("TFConvNextModel"),Sur=o(" (ConvNeXT model)"),Rur=l(),U7=a("li"),sFe=a("strong"),Pur=o("ctrl"),Bur=o(" \u2014 "),JQ=a("a"),Iur=o("TFCTRLModel"),Nur=o(" (CTRL model)"),qur=l(),J7=a("li"),lFe=a("strong"),jur=o("data2vec-vision"),Dur=o(" \u2014 "),YQ=a("a"),Gur=o("TFData2VecVisionModel"),Our=o(" (Data2VecVision model)"),Vur=l(),Y7=a("li"),iFe=a("strong"),Xur=o("deberta"),zur=o(" \u2014 "),KQ=a("a"),Wur=o("TFDebertaModel"),Qur=o(" (DeBERTa model)"),Hur=l(),K7=a("li"),dFe=a("strong"),Uur=o("deberta-v2"),Jur=o(" \u2014 "),ZQ=a("a"),Yur=o("TFDebertaV2Model"),Kur=o(" (DeBERTa-v2 model)"),Zur=l(),Z7=a("li"),cFe=a("strong"),e_r=o("distilbert"),o_r=o(" \u2014 "),eH=a("a"),r_r=o("TFDistilBertModel"),t_r=o(" (DistilBERT model)"),a_r=l(),e8=a("li"),fFe=a("strong"),n_r=o("dpr"),s_r=o(" \u2014 "),oH=a("a"),l_r=o("TFDPRQuestionEncoder"),i_r=o(" (DPR model)"),d_r=l(),o8=a("li"),mFe=a("strong"),c_r=o("electra"),f_r=o(" \u2014 "),rH=a("a"),m_r=o("TFElectraModel"),g_r=o(" (ELECTRA model)"),h_r=l(),r8=a("li"),gFe=a("strong"),p_r=o("flaubert"),u_r=o(" \u2014 "),tH=a("a"),__r=o("TFFlaubertModel"),b_r=o(" (FlauBERT model)"),v_r=l(),Xs=a("li"),hFe=a("strong"),F_r=o("funnel"),T_r=o(" \u2014 "),aH=a("a"),M_r=o("TFFunnelModel"),E_r=o(" or "),nH=a("a"),C_r=o("TFFunnelBaseModel"),w_r=o(" (Funnel Transformer model)"),A_r=l(),t8=a("li"),pFe=a("strong"),L_r=o("gpt2"),y_r=o(" \u2014 "),sH=a("a"),x_r=o("TFGPT2Model"),$_r=o(" (OpenAI GPT-2 model)"),k_r=l(),a8=a("li"),uFe=a("strong"),S_r=o("gptj"),R_r=o(" \u2014 "),lH=a("a"),P_r=o("TFGPTJModel"),B_r=o(" (GPT-J model)"),I_r=l(),n8=a("li"),_Fe=a("strong"),N_r=o("hubert"),q_r=o(" \u2014 "),iH=a("a"),j_r=o("TFHubertModel"),D_r=o(" (Hubert model)"),G_r=l(),s8=a("li"),bFe=a("strong"),O_r=o("layoutlm"),V_r=o(" \u2014 "),dH=a("a"),X_r=o("TFLayoutLMModel"),z_r=o(" (LayoutLM model)"),W_r=l(),l8=a("li"),vFe=a("strong"),Q_r=o("led"),H_r=o(" \u2014 "),cH=a("a"),U_r=o("TFLEDModel"),J_r=o(" (LED model)"),Y_r=l(),i8=a("li"),FFe=a("strong"),K_r=o("longformer"),Z_r=o(" \u2014 "),fH=a("a"),e2r=o("TFLongformerModel"),o2r=o(" (Longformer model)"),r2r=l(),d8=a("li"),TFe=a("strong"),t2r=o("lxmert"),a2r=o(" \u2014 "),mH=a("a"),n2r=o("TFLxmertModel"),s2r=o(" (LXMERT model)"),l2r=l(),c8=a("li"),MFe=a("strong"),i2r=o("marian"),d2r=o(" \u2014 "),gH=a("a"),c2r=o("TFMarianModel"),f2r=o(" (Marian model)"),m2r=l(),f8=a("li"),EFe=a("strong"),g2r=o("mbart"),h2r=o(" \u2014 "),hH=a("a"),p2r=o("TFMBartModel"),u2r=o(" (mBART model)"),_2r=l(),m8=a("li"),CFe=a("strong"),b2r=o("mobilebert"),v2r=o(" \u2014 "),pH=a("a"),F2r=o("TFMobileBertModel"),T2r=o(" (MobileBERT model)"),M2r=l(),g8=a("li"),wFe=a("strong"),E2r=o("mpnet"),C2r=o(" \u2014 "),uH=a("a"),w2r=o("TFMPNetModel"),A2r=o(" (MPNet model)"),L2r=l(),h8=a("li"),AFe=a("strong"),y2r=o("mt5"),x2r=o(" \u2014 "),_H=a("a"),$2r=o("TFMT5Model"),k2r=o(" (MT5 model)"),S2r=l(),p8=a("li"),LFe=a("strong"),R2r=o("openai-gpt"),P2r=o(" \u2014 "),bH=a("a"),B2r=o("TFOpenAIGPTModel"),I2r=o(" (OpenAI GPT model)"),N2r=l(),u8=a("li"),yFe=a("strong"),q2r=o("opt"),j2r=o(" \u2014 "),vH=a("a"),D2r=o("TFOPTModel"),G2r=o(" (OPT model)"),O2r=l(),_8=a("li"),xFe=a("strong"),V2r=o("pegasus"),X2r=o(" \u2014 "),FH=a("a"),z2r=o("TFPegasusModel"),W2r=o(" (Pegasus model)"),Q2r=l(),b8=a("li"),$Fe=a("strong"),H2r=o("rembert"),U2r=o(" \u2014 "),TH=a("a"),J2r=o("TFRemBertModel"),Y2r=o(" (RemBERT model)"),K2r=l(),v8=a("li"),kFe=a("strong"),Z2r=o("roberta"),e1r=o(" \u2014 "),MH=a("a"),o1r=o("TFRobertaModel"),r1r=o(" (RoBERTa model)"),t1r=l(),F8=a("li"),SFe=a("strong"),a1r=o("roformer"),n1r=o(" \u2014 "),EH=a("a"),s1r=o("TFRoFormerModel"),l1r=o(" (RoFormer model)"),i1r=l(),T8=a("li"),RFe=a("strong"),d1r=o("speech_to_text"),c1r=o(" \u2014 "),CH=a("a"),f1r=o("TFSpeech2TextModel"),m1r=o(" (Speech2Text model)"),g1r=l(),M8=a("li"),PFe=a("strong"),h1r=o("swin"),p1r=o(" \u2014 "),wH=a("a"),u1r=o("TFSwinModel"),_1r=o(" (Swin Transformer model)"),b1r=l(),E8=a("li"),BFe=a("strong"),v1r=o("t5"),F1r=o(" \u2014 "),AH=a("a"),T1r=o("TFT5Model"),M1r=o(" (T5 model)"),E1r=l(),C8=a("li"),IFe=a("strong"),C1r=o("tapas"),w1r=o(" \u2014 "),LH=a("a"),A1r=o("TFTapasModel"),L1r=o(" (TAPAS model)"),y1r=l(),w8=a("li"),NFe=a("strong"),x1r=o("transfo-xl"),$1r=o(" \u2014 "),yH=a("a"),k1r=o("TFTransfoXLModel"),S1r=o(" (Transformer-XL model)"),R1r=l(),A8=a("li"),qFe=a("strong"),P1r=o("vit"),B1r=o(" \u2014 "),xH=a("a"),I1r=o("TFViTModel"),N1r=o(" (ViT model)"),q1r=l(),L8=a("li"),jFe=a("strong"),j1r=o("vit_mae"),D1r=o(" \u2014 "),$H=a("a"),G1r=o("TFViTMAEModel"),O1r=o(" (ViTMAE model)"),V1r=l(),y8=a("li"),DFe=a("strong"),X1r=o("wav2vec2"),z1r=o(" \u2014 "),kH=a("a"),W1r=o("TFWav2Vec2Model"),Q1r=o(" (Wav2Vec2 model)"),H1r=l(),x8=a("li"),GFe=a("strong"),U1r=o("xlm"),J1r=o(" \u2014 "),SH=a("a"),Y1r=o("TFXLMModel"),K1r=o(" (XLM model)"),Z1r=l(),$8=a("li"),OFe=a("strong"),ebr=o("xlm-roberta"),obr=o(" \u2014 "),RH=a("a"),rbr=o("TFXLMRobertaModel"),tbr=o(" (XLM-RoBERTa model)"),abr=l(),k8=a("li"),VFe=a("strong"),nbr=o("xlnet"),sbr=o(" \u2014 "),PH=a("a"),lbr=o("TFXLNetModel"),ibr=o(" (XLNet model)"),dbr=l(),F(S8.$$.fragment),vOe=l(),rc=a("h2"),R8=a("a"),XFe=a("span"),F(g9.$$.fragment),cbr=l(),zFe=a("span"),fbr=o("TFAutoModelForPreTraining"),FOe=l(),er=a("div"),F(h9.$$.fragment),mbr=l(),tc=a("p"),gbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BH=a("a"),hbr=o("from_pretrained()"),pbr=o(" class method or the "),IH=a("a"),ubr=o("from_config()"),_br=o(` class
method.`),bbr=l(),p9=a("p"),vbr=o("This class cannot be instantiated directly using "),WFe=a("code"),Fbr=o("__init__()"),Tbr=o(" (throws an error)."),Mbr=l(),kt=a("div"),F(u9.$$.fragment),Ebr=l(),QFe=a("p"),Cbr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wbr=l(),ac=a("p"),Abr=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),Lbr=o("not"),ybr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),xbr=o("from_pretrained()"),$br=o(" to load the model weights."),kbr=l(),F(P8.$$.fragment),Sbr=l(),yr=a("div"),F(_9.$$.fragment),Rbr=l(),UFe=a("p"),Pbr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Bbr=l(),an=a("p"),Ibr=o("The model class to instantiate is selected based on the "),JFe=a("code"),Nbr=o("model_type"),qbr=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),jbr=o("pretrained_model_name_or_path"),Dbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),Gbr=o("pretrained_model_name_or_path"),Obr=o(":"),Vbr=l(),se=a("ul"),B8=a("li"),ZFe=a("strong"),Xbr=o("albert"),zbr=o(" \u2014 "),qH=a("a"),Wbr=o("TFAlbertForPreTraining"),Qbr=o(" (ALBERT model)"),Hbr=l(),I8=a("li"),e6e=a("strong"),Ubr=o("bart"),Jbr=o(" \u2014 "),jH=a("a"),Ybr=o("TFBartForConditionalGeneration"),Kbr=o(" (BART model)"),Zbr=l(),N8=a("li"),o6e=a("strong"),evr=o("bert"),ovr=o(" \u2014 "),DH=a("a"),rvr=o("TFBertForPreTraining"),tvr=o(" (BERT model)"),avr=l(),q8=a("li"),r6e=a("strong"),nvr=o("camembert"),svr=o(" \u2014 "),GH=a("a"),lvr=o("TFCamembertForMaskedLM"),ivr=o(" (CamemBERT model)"),dvr=l(),j8=a("li"),t6e=a("strong"),cvr=o("ctrl"),fvr=o(" \u2014 "),OH=a("a"),mvr=o("TFCTRLLMHeadModel"),gvr=o(" (CTRL model)"),hvr=l(),D8=a("li"),a6e=a("strong"),pvr=o("distilbert"),uvr=o(" \u2014 "),VH=a("a"),_vr=o("TFDistilBertForMaskedLM"),bvr=o(" (DistilBERT model)"),vvr=l(),G8=a("li"),n6e=a("strong"),Fvr=o("electra"),Tvr=o(" \u2014 "),XH=a("a"),Mvr=o("TFElectraForPreTraining"),Evr=o(" (ELECTRA model)"),Cvr=l(),O8=a("li"),s6e=a("strong"),wvr=o("flaubert"),Avr=o(" \u2014 "),zH=a("a"),Lvr=o("TFFlaubertWithLMHeadModel"),yvr=o(" (FlauBERT model)"),xvr=l(),V8=a("li"),l6e=a("strong"),$vr=o("funnel"),kvr=o(" \u2014 "),WH=a("a"),Svr=o("TFFunnelForPreTraining"),Rvr=o(" (Funnel Transformer model)"),Pvr=l(),X8=a("li"),i6e=a("strong"),Bvr=o("gpt2"),Ivr=o(" \u2014 "),QH=a("a"),Nvr=o("TFGPT2LMHeadModel"),qvr=o(" (OpenAI GPT-2 model)"),jvr=l(),z8=a("li"),d6e=a("strong"),Dvr=o("layoutlm"),Gvr=o(" \u2014 "),HH=a("a"),Ovr=o("TFLayoutLMForMaskedLM"),Vvr=o(" (LayoutLM model)"),Xvr=l(),W8=a("li"),c6e=a("strong"),zvr=o("lxmert"),Wvr=o(" \u2014 "),UH=a("a"),Qvr=o("TFLxmertForPreTraining"),Hvr=o(" (LXMERT model)"),Uvr=l(),Q8=a("li"),f6e=a("strong"),Jvr=o("mobilebert"),Yvr=o(" \u2014 "),JH=a("a"),Kvr=o("TFMobileBertForPreTraining"),Zvr=o(" (MobileBERT model)"),eFr=l(),H8=a("li"),m6e=a("strong"),oFr=o("mpnet"),rFr=o(" \u2014 "),YH=a("a"),tFr=o("TFMPNetForMaskedLM"),aFr=o(" (MPNet model)"),nFr=l(),U8=a("li"),g6e=a("strong"),sFr=o("openai-gpt"),lFr=o(" \u2014 "),KH=a("a"),iFr=o("TFOpenAIGPTLMHeadModel"),dFr=o(" (OpenAI GPT model)"),cFr=l(),J8=a("li"),h6e=a("strong"),fFr=o("roberta"),mFr=o(" \u2014 "),ZH=a("a"),gFr=o("TFRobertaForMaskedLM"),hFr=o(" (RoBERTa model)"),pFr=l(),Y8=a("li"),p6e=a("strong"),uFr=o("t5"),_Fr=o(" \u2014 "),eU=a("a"),bFr=o("TFT5ForConditionalGeneration"),vFr=o(" (T5 model)"),FFr=l(),K8=a("li"),u6e=a("strong"),TFr=o("tapas"),MFr=o(" \u2014 "),oU=a("a"),EFr=o("TFTapasForMaskedLM"),CFr=o(" (TAPAS model)"),wFr=l(),Z8=a("li"),_6e=a("strong"),AFr=o("transfo-xl"),LFr=o(" \u2014 "),rU=a("a"),yFr=o("TFTransfoXLLMHeadModel"),xFr=o(" (Transformer-XL model)"),$Fr=l(),eM=a("li"),b6e=a("strong"),kFr=o("vit_mae"),SFr=o(" \u2014 "),tU=a("a"),RFr=o("TFViTMAEForPreTraining"),PFr=o(" (ViTMAE model)"),BFr=l(),oM=a("li"),v6e=a("strong"),IFr=o("xlm"),NFr=o(" \u2014 "),aU=a("a"),qFr=o("TFXLMWithLMHeadModel"),jFr=o(" (XLM model)"),DFr=l(),rM=a("li"),F6e=a("strong"),GFr=o("xlm-roberta"),OFr=o(" \u2014 "),nU=a("a"),VFr=o("TFXLMRobertaForMaskedLM"),XFr=o(" (XLM-RoBERTa model)"),zFr=l(),tM=a("li"),T6e=a("strong"),WFr=o("xlnet"),QFr=o(" \u2014 "),sU=a("a"),HFr=o("TFXLNetLMHeadModel"),UFr=o(" (XLNet model)"),JFr=l(),F(aM.$$.fragment),TOe=l(),nc=a("h2"),nM=a("a"),M6e=a("span"),F(b9.$$.fragment),YFr=l(),E6e=a("span"),KFr=o("TFAutoModelForCausalLM"),MOe=l(),or=a("div"),F(v9.$$.fragment),ZFr=l(),sc=a("p"),e6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lU=a("a"),o6r=o("from_pretrained()"),r6r=o(" class method or the "),iU=a("a"),t6r=o("from_config()"),a6r=o(` class
method.`),n6r=l(),F9=a("p"),s6r=o("This class cannot be instantiated directly using "),C6e=a("code"),l6r=o("__init__()"),i6r=o(" (throws an error)."),d6r=l(),St=a("div"),F(T9.$$.fragment),c6r=l(),w6e=a("p"),f6r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),m6r=l(),lc=a("p"),g6r=o(`Note:
Loading a model from its configuration file does `),A6e=a("strong"),h6r=o("not"),p6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),u6r=o("from_pretrained()"),_6r=o(" to load the model weights."),b6r=l(),F(sM.$$.fragment),v6r=l(),xr=a("div"),F(M9.$$.fragment),F6r=l(),L6e=a("p"),T6r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),M6r=l(),nn=a("p"),E6r=o("The model class to instantiate is selected based on the "),y6e=a("code"),C6r=o("model_type"),w6r=o(` property of the config object (either
passed as an argument or loaded from `),x6e=a("code"),A6r=o("pretrained_model_name_or_path"),L6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=a("code"),y6r=o("pretrained_model_name_or_path"),x6r=o(":"),$6r=l(),Me=a("ul"),lM=a("li"),k6e=a("strong"),k6r=o("bert"),S6r=o(" \u2014 "),cU=a("a"),R6r=o("TFBertLMHeadModel"),P6r=o(" (BERT model)"),B6r=l(),iM=a("li"),S6e=a("strong"),I6r=o("camembert"),N6r=o(" \u2014 "),fU=a("a"),q6r=o("TFCamembertForCausalLM"),j6r=o(" (CamemBERT model)"),D6r=l(),dM=a("li"),R6e=a("strong"),G6r=o("ctrl"),O6r=o(" \u2014 "),mU=a("a"),V6r=o("TFCTRLLMHeadModel"),X6r=o(" (CTRL model)"),z6r=l(),cM=a("li"),P6e=a("strong"),W6r=o("gpt2"),Q6r=o(" \u2014 "),gU=a("a"),H6r=o("TFGPT2LMHeadModel"),U6r=o(" (OpenAI GPT-2 model)"),J6r=l(),fM=a("li"),B6e=a("strong"),Y6r=o("gptj"),K6r=o(" \u2014 "),hU=a("a"),Z6r=o("TFGPTJForCausalLM"),eTr=o(" (GPT-J model)"),oTr=l(),mM=a("li"),I6e=a("strong"),rTr=o("openai-gpt"),tTr=o(" \u2014 "),pU=a("a"),aTr=o("TFOpenAIGPTLMHeadModel"),nTr=o(" (OpenAI GPT model)"),sTr=l(),gM=a("li"),N6e=a("strong"),lTr=o("opt"),iTr=o(" \u2014 "),uU=a("a"),dTr=o("TFOPTForCausalLM"),cTr=o(" (OPT model)"),fTr=l(),hM=a("li"),q6e=a("strong"),mTr=o("rembert"),gTr=o(" \u2014 "),_U=a("a"),hTr=o("TFRemBertForCausalLM"),pTr=o(" (RemBERT model)"),uTr=l(),pM=a("li"),j6e=a("strong"),_Tr=o("roberta"),bTr=o(" \u2014 "),bU=a("a"),vTr=o("TFRobertaForCausalLM"),FTr=o(" (RoBERTa model)"),TTr=l(),uM=a("li"),D6e=a("strong"),MTr=o("roformer"),ETr=o(" \u2014 "),vU=a("a"),CTr=o("TFRoFormerForCausalLM"),wTr=o(" (RoFormer model)"),ATr=l(),_M=a("li"),G6e=a("strong"),LTr=o("transfo-xl"),yTr=o(" \u2014 "),FU=a("a"),xTr=o("TFTransfoXLLMHeadModel"),$Tr=o(" (Transformer-XL model)"),kTr=l(),bM=a("li"),O6e=a("strong"),STr=o("xlm"),RTr=o(" \u2014 "),TU=a("a"),PTr=o("TFXLMWithLMHeadModel"),BTr=o(" (XLM model)"),ITr=l(),vM=a("li"),V6e=a("strong"),NTr=o("xlnet"),qTr=o(" \u2014 "),MU=a("a"),jTr=o("TFXLNetLMHeadModel"),DTr=o(" (XLNet model)"),GTr=l(),F(FM.$$.fragment),EOe=l(),ic=a("h2"),TM=a("a"),X6e=a("span"),F(E9.$$.fragment),OTr=l(),z6e=a("span"),VTr=o("TFAutoModelForImageClassification"),COe=l(),rr=a("div"),F(C9.$$.fragment),XTr=l(),dc=a("p"),zTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EU=a("a"),WTr=o("from_pretrained()"),QTr=o(" class method or the "),CU=a("a"),HTr=o("from_config()"),UTr=o(` class
method.`),JTr=l(),w9=a("p"),YTr=o("This class cannot be instantiated directly using "),W6e=a("code"),KTr=o("__init__()"),ZTr=o(" (throws an error)."),e7r=l(),Rt=a("div"),F(A9.$$.fragment),o7r=l(),Q6e=a("p"),r7r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),t7r=l(),cc=a("p"),a7r=o(`Note:
Loading a model from its configuration file does `),H6e=a("strong"),n7r=o("not"),s7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),l7r=o("from_pretrained()"),i7r=o(" to load the model weights."),d7r=l(),F(MM.$$.fragment),c7r=l(),$r=a("div"),F(L9.$$.fragment),f7r=l(),U6e=a("p"),m7r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),g7r=l(),sn=a("p"),h7r=o("The model class to instantiate is selected based on the "),J6e=a("code"),p7r=o("model_type"),u7r=o(` property of the config object (either
passed as an argument or loaded from `),Y6e=a("code"),_7r=o("pretrained_model_name_or_path"),b7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=a("code"),v7r=o("pretrained_model_name_or_path"),F7r=o(":"),T7r=l(),ln=a("ul"),EM=a("li"),Z6e=a("strong"),M7r=o("convnext"),E7r=o(" \u2014 "),AU=a("a"),C7r=o("TFConvNextForImageClassification"),w7r=o(" (ConvNeXT model)"),A7r=l(),CM=a("li"),eTe=a("strong"),L7r=o("data2vec-vision"),y7r=o(" \u2014 "),LU=a("a"),x7r=o("TFData2VecVisionForImageClassification"),$7r=o(" (Data2VecVision model)"),k7r=l(),wM=a("li"),oTe=a("strong"),S7r=o("swin"),R7r=o(" \u2014 "),yU=a("a"),P7r=o("TFSwinForImageClassification"),B7r=o(" (Swin Transformer model)"),I7r=l(),AM=a("li"),rTe=a("strong"),N7r=o("vit"),q7r=o(" \u2014 "),xU=a("a"),j7r=o("TFViTForImageClassification"),D7r=o(" (ViT model)"),G7r=l(),F(LM.$$.fragment),wOe=l(),fc=a("h2"),yM=a("a"),tTe=a("span"),F(y9.$$.fragment),O7r=l(),aTe=a("span"),V7r=o("TFAutoModelForMaskedLM"),AOe=l(),tr=a("div"),F(x9.$$.fragment),X7r=l(),mc=a("p"),z7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$U=a("a"),W7r=o("from_pretrained()"),Q7r=o(" class method or the "),kU=a("a"),H7r=o("from_config()"),U7r=o(` class
method.`),J7r=l(),$9=a("p"),Y7r=o("This class cannot be instantiated directly using "),nTe=a("code"),K7r=o("__init__()"),Z7r=o(" (throws an error)."),e8r=l(),Pt=a("div"),F(k9.$$.fragment),o8r=l(),sTe=a("p"),r8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),t8r=l(),gc=a("p"),a8r=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),n8r=o("not"),s8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),l8r=o("from_pretrained()"),i8r=o(" to load the model weights."),d8r=l(),F(xM.$$.fragment),c8r=l(),kr=a("div"),F(S9.$$.fragment),f8r=l(),iTe=a("p"),m8r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),g8r=l(),dn=a("p"),h8r=o("The model class to instantiate is selected based on the "),dTe=a("code"),p8r=o("model_type"),u8r=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),_8r=o("pretrained_model_name_or_path"),b8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),v8r=o("pretrained_model_name_or_path"),F8r=o(":"),T8r=l(),ie=a("ul"),$M=a("li"),mTe=a("strong"),M8r=o("albert"),E8r=o(" \u2014 "),RU=a("a"),C8r=o("TFAlbertForMaskedLM"),w8r=o(" (ALBERT model)"),A8r=l(),kM=a("li"),gTe=a("strong"),L8r=o("bert"),y8r=o(" \u2014 "),PU=a("a"),x8r=o("TFBertForMaskedLM"),$8r=o(" (BERT model)"),k8r=l(),SM=a("li"),hTe=a("strong"),S8r=o("camembert"),R8r=o(" \u2014 "),BU=a("a"),P8r=o("TFCamembertForMaskedLM"),B8r=o(" (CamemBERT model)"),I8r=l(),RM=a("li"),pTe=a("strong"),N8r=o("convbert"),q8r=o(" \u2014 "),IU=a("a"),j8r=o("TFConvBertForMaskedLM"),D8r=o(" (ConvBERT model)"),G8r=l(),PM=a("li"),uTe=a("strong"),O8r=o("deberta"),V8r=o(" \u2014 "),NU=a("a"),X8r=o("TFDebertaForMaskedLM"),z8r=o(" (DeBERTa model)"),W8r=l(),BM=a("li"),_Te=a("strong"),Q8r=o("deberta-v2"),H8r=o(" \u2014 "),qU=a("a"),U8r=o("TFDebertaV2ForMaskedLM"),J8r=o(" (DeBERTa-v2 model)"),Y8r=l(),IM=a("li"),bTe=a("strong"),K8r=o("distilbert"),Z8r=o(" \u2014 "),jU=a("a"),eMr=o("TFDistilBertForMaskedLM"),oMr=o(" (DistilBERT model)"),rMr=l(),NM=a("li"),vTe=a("strong"),tMr=o("electra"),aMr=o(" \u2014 "),DU=a("a"),nMr=o("TFElectraForMaskedLM"),sMr=o(" (ELECTRA model)"),lMr=l(),qM=a("li"),FTe=a("strong"),iMr=o("flaubert"),dMr=o(" \u2014 "),GU=a("a"),cMr=o("TFFlaubertWithLMHeadModel"),fMr=o(" (FlauBERT model)"),mMr=l(),jM=a("li"),TTe=a("strong"),gMr=o("funnel"),hMr=o(" \u2014 "),OU=a("a"),pMr=o("TFFunnelForMaskedLM"),uMr=o(" (Funnel Transformer model)"),_Mr=l(),DM=a("li"),MTe=a("strong"),bMr=o("layoutlm"),vMr=o(" \u2014 "),VU=a("a"),FMr=o("TFLayoutLMForMaskedLM"),TMr=o(" (LayoutLM model)"),MMr=l(),GM=a("li"),ETe=a("strong"),EMr=o("longformer"),CMr=o(" \u2014 "),XU=a("a"),wMr=o("TFLongformerForMaskedLM"),AMr=o(" (Longformer model)"),LMr=l(),OM=a("li"),CTe=a("strong"),yMr=o("mobilebert"),xMr=o(" \u2014 "),zU=a("a"),$Mr=o("TFMobileBertForMaskedLM"),kMr=o(" (MobileBERT model)"),SMr=l(),VM=a("li"),wTe=a("strong"),RMr=o("mpnet"),PMr=o(" \u2014 "),WU=a("a"),BMr=o("TFMPNetForMaskedLM"),IMr=o(" (MPNet model)"),NMr=l(),XM=a("li"),ATe=a("strong"),qMr=o("rembert"),jMr=o(" \u2014 "),QU=a("a"),DMr=o("TFRemBertForMaskedLM"),GMr=o(" (RemBERT model)"),OMr=l(),zM=a("li"),LTe=a("strong"),VMr=o("roberta"),XMr=o(" \u2014 "),HU=a("a"),zMr=o("TFRobertaForMaskedLM"),WMr=o(" (RoBERTa model)"),QMr=l(),WM=a("li"),yTe=a("strong"),HMr=o("roformer"),UMr=o(" \u2014 "),UU=a("a"),JMr=o("TFRoFormerForMaskedLM"),YMr=o(" (RoFormer model)"),KMr=l(),QM=a("li"),xTe=a("strong"),ZMr=o("tapas"),eEr=o(" \u2014 "),JU=a("a"),oEr=o("TFTapasForMaskedLM"),rEr=o(" (TAPAS model)"),tEr=l(),HM=a("li"),$Te=a("strong"),aEr=o("xlm"),nEr=o(" \u2014 "),YU=a("a"),sEr=o("TFXLMWithLMHeadModel"),lEr=o(" (XLM model)"),iEr=l(),UM=a("li"),kTe=a("strong"),dEr=o("xlm-roberta"),cEr=o(" \u2014 "),KU=a("a"),fEr=o("TFXLMRobertaForMaskedLM"),mEr=o(" (XLM-RoBERTa model)"),gEr=l(),F(JM.$$.fragment),LOe=l(),hc=a("h2"),YM=a("a"),STe=a("span"),F(R9.$$.fragment),hEr=l(),RTe=a("span"),pEr=o("TFAutoModelForSeq2SeqLM"),yOe=l(),ar=a("div"),F(P9.$$.fragment),uEr=l(),pc=a("p"),_Er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZU=a("a"),bEr=o("from_pretrained()"),vEr=o(" class method or the "),eJ=a("a"),FEr=o("from_config()"),TEr=o(` class
method.`),MEr=l(),B9=a("p"),EEr=o("This class cannot be instantiated directly using "),PTe=a("code"),CEr=o("__init__()"),wEr=o(" (throws an error)."),AEr=l(),Bt=a("div"),F(I9.$$.fragment),LEr=l(),BTe=a("p"),yEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xEr=l(),uc=a("p"),$Er=o(`Note:
Loading a model from its configuration file does `),ITe=a("strong"),kEr=o("not"),SEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),REr=o("from_pretrained()"),PEr=o(" to load the model weights."),BEr=l(),F(KM.$$.fragment),IEr=l(),Sr=a("div"),F(N9.$$.fragment),NEr=l(),NTe=a("p"),qEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jEr=l(),cn=a("p"),DEr=o("The model class to instantiate is selected based on the "),qTe=a("code"),GEr=o("model_type"),OEr=o(` property of the config object (either
passed as an argument or loaded from `),jTe=a("code"),VEr=o("pretrained_model_name_or_path"),XEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),zEr=o("pretrained_model_name_or_path"),WEr=o(":"),QEr=l(),ye=a("ul"),ZM=a("li"),GTe=a("strong"),HEr=o("bart"),UEr=o(" \u2014 "),rJ=a("a"),JEr=o("TFBartForConditionalGeneration"),YEr=o(" (BART model)"),KEr=l(),eE=a("li"),OTe=a("strong"),ZEr=o("blenderbot"),e4r=o(" \u2014 "),tJ=a("a"),o4r=o("TFBlenderbotForConditionalGeneration"),r4r=o(" (Blenderbot model)"),t4r=l(),oE=a("li"),VTe=a("strong"),a4r=o("blenderbot-small"),n4r=o(" \u2014 "),aJ=a("a"),s4r=o("TFBlenderbotSmallForConditionalGeneration"),l4r=o(" (BlenderbotSmall model)"),i4r=l(),rE=a("li"),XTe=a("strong"),d4r=o("encoder-decoder"),c4r=o(" \u2014 "),nJ=a("a"),f4r=o("TFEncoderDecoderModel"),m4r=o(" (Encoder decoder model)"),g4r=l(),tE=a("li"),zTe=a("strong"),h4r=o("led"),p4r=o(" \u2014 "),sJ=a("a"),u4r=o("TFLEDForConditionalGeneration"),_4r=o(" (LED model)"),b4r=l(),aE=a("li"),WTe=a("strong"),v4r=o("marian"),F4r=o(" \u2014 "),lJ=a("a"),T4r=o("TFMarianMTModel"),M4r=o(" (Marian model)"),E4r=l(),nE=a("li"),QTe=a("strong"),C4r=o("mbart"),w4r=o(" \u2014 "),iJ=a("a"),A4r=o("TFMBartForConditionalGeneration"),L4r=o(" (mBART model)"),y4r=l(),sE=a("li"),HTe=a("strong"),x4r=o("mt5"),$4r=o(" \u2014 "),dJ=a("a"),k4r=o("TFMT5ForConditionalGeneration"),S4r=o(" (MT5 model)"),R4r=l(),lE=a("li"),UTe=a("strong"),P4r=o("pegasus"),B4r=o(" \u2014 "),cJ=a("a"),I4r=o("TFPegasusForConditionalGeneration"),N4r=o(" (Pegasus model)"),q4r=l(),iE=a("li"),JTe=a("strong"),j4r=o("t5"),D4r=o(" \u2014 "),fJ=a("a"),G4r=o("TFT5ForConditionalGeneration"),O4r=o(" (T5 model)"),V4r=l(),F(dE.$$.fragment),xOe=l(),_c=a("h2"),cE=a("a"),YTe=a("span"),F(q9.$$.fragment),X4r=l(),KTe=a("span"),z4r=o("TFAutoModelForSequenceClassification"),$Oe=l(),nr=a("div"),F(j9.$$.fragment),W4r=l(),bc=a("p"),Q4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mJ=a("a"),H4r=o("from_pretrained()"),U4r=o(" class method or the "),gJ=a("a"),J4r=o("from_config()"),Y4r=o(` class
method.`),K4r=l(),D9=a("p"),Z4r=o("This class cannot be instantiated directly using "),ZTe=a("code"),eCr=o("__init__()"),oCr=o(" (throws an error)."),rCr=l(),It=a("div"),F(G9.$$.fragment),tCr=l(),e7e=a("p"),aCr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nCr=l(),vc=a("p"),sCr=o(`Note:
Loading a model from its configuration file does `),o7e=a("strong"),lCr=o("not"),iCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),dCr=o("from_pretrained()"),cCr=o(" to load the model weights."),fCr=l(),F(fE.$$.fragment),mCr=l(),Rr=a("div"),F(O9.$$.fragment),gCr=l(),r7e=a("p"),hCr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pCr=l(),fn=a("p"),uCr=o("The model class to instantiate is selected based on the "),t7e=a("code"),_Cr=o("model_type"),bCr=o(` property of the config object (either
passed as an argument or loaded from `),a7e=a("code"),vCr=o("pretrained_model_name_or_path"),FCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n7e=a("code"),TCr=o("pretrained_model_name_or_path"),MCr=o(":"),ECr=l(),te=a("ul"),mE=a("li"),s7e=a("strong"),CCr=o("albert"),wCr=o(" \u2014 "),pJ=a("a"),ACr=o("TFAlbertForSequenceClassification"),LCr=o(" (ALBERT model)"),yCr=l(),gE=a("li"),l7e=a("strong"),xCr=o("bert"),$Cr=o(" \u2014 "),uJ=a("a"),kCr=o("TFBertForSequenceClassification"),SCr=o(" (BERT model)"),RCr=l(),hE=a("li"),i7e=a("strong"),PCr=o("camembert"),BCr=o(" \u2014 "),_J=a("a"),ICr=o("TFCamembertForSequenceClassification"),NCr=o(" (CamemBERT model)"),qCr=l(),pE=a("li"),d7e=a("strong"),jCr=o("convbert"),DCr=o(" \u2014 "),bJ=a("a"),GCr=o("TFConvBertForSequenceClassification"),OCr=o(" (ConvBERT model)"),VCr=l(),uE=a("li"),c7e=a("strong"),XCr=o("ctrl"),zCr=o(" \u2014 "),vJ=a("a"),WCr=o("TFCTRLForSequenceClassification"),QCr=o(" (CTRL model)"),HCr=l(),_E=a("li"),f7e=a("strong"),UCr=o("deberta"),JCr=o(" \u2014 "),FJ=a("a"),YCr=o("TFDebertaForSequenceClassification"),KCr=o(" (DeBERTa model)"),ZCr=l(),bE=a("li"),m7e=a("strong"),e5r=o("deberta-v2"),o5r=o(" \u2014 "),TJ=a("a"),r5r=o("TFDebertaV2ForSequenceClassification"),t5r=o(" (DeBERTa-v2 model)"),a5r=l(),vE=a("li"),g7e=a("strong"),n5r=o("distilbert"),s5r=o(" \u2014 "),MJ=a("a"),l5r=o("TFDistilBertForSequenceClassification"),i5r=o(" (DistilBERT model)"),d5r=l(),FE=a("li"),h7e=a("strong"),c5r=o("electra"),f5r=o(" \u2014 "),EJ=a("a"),m5r=o("TFElectraForSequenceClassification"),g5r=o(" (ELECTRA model)"),h5r=l(),TE=a("li"),p7e=a("strong"),p5r=o("flaubert"),u5r=o(" \u2014 "),CJ=a("a"),_5r=o("TFFlaubertForSequenceClassification"),b5r=o(" (FlauBERT model)"),v5r=l(),ME=a("li"),u7e=a("strong"),F5r=o("funnel"),T5r=o(" \u2014 "),wJ=a("a"),M5r=o("TFFunnelForSequenceClassification"),E5r=o(" (Funnel Transformer model)"),C5r=l(),EE=a("li"),_7e=a("strong"),w5r=o("gpt2"),A5r=o(" \u2014 "),AJ=a("a"),L5r=o("TFGPT2ForSequenceClassification"),y5r=o(" (OpenAI GPT-2 model)"),x5r=l(),CE=a("li"),b7e=a("strong"),$5r=o("gptj"),k5r=o(" \u2014 "),LJ=a("a"),S5r=o("TFGPTJForSequenceClassification"),R5r=o(" (GPT-J model)"),P5r=l(),wE=a("li"),v7e=a("strong"),B5r=o("layoutlm"),I5r=o(" \u2014 "),yJ=a("a"),N5r=o("TFLayoutLMForSequenceClassification"),q5r=o(" (LayoutLM model)"),j5r=l(),AE=a("li"),F7e=a("strong"),D5r=o("longformer"),G5r=o(" \u2014 "),xJ=a("a"),O5r=o("TFLongformerForSequenceClassification"),V5r=o(" (Longformer model)"),X5r=l(),LE=a("li"),T7e=a("strong"),z5r=o("mobilebert"),W5r=o(" \u2014 "),$J=a("a"),Q5r=o("TFMobileBertForSequenceClassification"),H5r=o(" (MobileBERT model)"),U5r=l(),yE=a("li"),M7e=a("strong"),J5r=o("mpnet"),Y5r=o(" \u2014 "),kJ=a("a"),K5r=o("TFMPNetForSequenceClassification"),Z5r=o(" (MPNet model)"),e3r=l(),xE=a("li"),E7e=a("strong"),o3r=o("openai-gpt"),r3r=o(" \u2014 "),SJ=a("a"),t3r=o("TFOpenAIGPTForSequenceClassification"),a3r=o(" (OpenAI GPT model)"),n3r=l(),$E=a("li"),C7e=a("strong"),s3r=o("rembert"),l3r=o(" \u2014 "),RJ=a("a"),i3r=o("TFRemBertForSequenceClassification"),d3r=o(" (RemBERT model)"),c3r=l(),kE=a("li"),w7e=a("strong"),f3r=o("roberta"),m3r=o(" \u2014 "),PJ=a("a"),g3r=o("TFRobertaForSequenceClassification"),h3r=o(" (RoBERTa model)"),p3r=l(),SE=a("li"),A7e=a("strong"),u3r=o("roformer"),_3r=o(" \u2014 "),BJ=a("a"),b3r=o("TFRoFormerForSequenceClassification"),v3r=o(" (RoFormer model)"),F3r=l(),RE=a("li"),L7e=a("strong"),T3r=o("tapas"),M3r=o(" \u2014 "),IJ=a("a"),E3r=o("TFTapasForSequenceClassification"),C3r=o(" (TAPAS model)"),w3r=l(),PE=a("li"),y7e=a("strong"),A3r=o("transfo-xl"),L3r=o(" \u2014 "),NJ=a("a"),y3r=o("TFTransfoXLForSequenceClassification"),x3r=o(" (Transformer-XL model)"),$3r=l(),BE=a("li"),x7e=a("strong"),k3r=o("xlm"),S3r=o(" \u2014 "),qJ=a("a"),R3r=o("TFXLMForSequenceClassification"),P3r=o(" (XLM model)"),B3r=l(),IE=a("li"),$7e=a("strong"),I3r=o("xlm-roberta"),N3r=o(" \u2014 "),jJ=a("a"),q3r=o("TFXLMRobertaForSequenceClassification"),j3r=o(" (XLM-RoBERTa model)"),D3r=l(),NE=a("li"),k7e=a("strong"),G3r=o("xlnet"),O3r=o(" \u2014 "),DJ=a("a"),V3r=o("TFXLNetForSequenceClassification"),X3r=o(" (XLNet model)"),z3r=l(),F(qE.$$.fragment),kOe=l(),Fc=a("h2"),jE=a("a"),S7e=a("span"),F(V9.$$.fragment),W3r=l(),R7e=a("span"),Q3r=o("TFAutoModelForMultipleChoice"),SOe=l(),sr=a("div"),F(X9.$$.fragment),H3r=l(),Tc=a("p"),U3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GJ=a("a"),J3r=o("from_pretrained()"),Y3r=o(" class method or the "),OJ=a("a"),K3r=o("from_config()"),Z3r=o(` class
method.`),e0r=l(),z9=a("p"),o0r=o("This class cannot be instantiated directly using "),P7e=a("code"),r0r=o("__init__()"),t0r=o(" (throws an error)."),a0r=l(),Nt=a("div"),F(W9.$$.fragment),n0r=l(),B7e=a("p"),s0r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),l0r=l(),Mc=a("p"),i0r=o(`Note:
Loading a model from its configuration file does `),I7e=a("strong"),d0r=o("not"),c0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),f0r=o("from_pretrained()"),m0r=o(" to load the model weights."),g0r=l(),F(DE.$$.fragment),h0r=l(),Pr=a("div"),F(Q9.$$.fragment),p0r=l(),N7e=a("p"),u0r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_0r=l(),mn=a("p"),b0r=o("The model class to instantiate is selected based on the "),q7e=a("code"),v0r=o("model_type"),F0r=o(` property of the config object (either
passed as an argument or loaded from `),j7e=a("code"),T0r=o("pretrained_model_name_or_path"),M0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=a("code"),E0r=o("pretrained_model_name_or_path"),C0r=o(":"),w0r=l(),ue=a("ul"),GE=a("li"),G7e=a("strong"),A0r=o("albert"),L0r=o(" \u2014 "),XJ=a("a"),y0r=o("TFAlbertForMultipleChoice"),x0r=o(" (ALBERT model)"),$0r=l(),OE=a("li"),O7e=a("strong"),k0r=o("bert"),S0r=o(" \u2014 "),zJ=a("a"),R0r=o("TFBertForMultipleChoice"),P0r=o(" (BERT model)"),B0r=l(),VE=a("li"),V7e=a("strong"),I0r=o("camembert"),N0r=o(" \u2014 "),WJ=a("a"),q0r=o("TFCamembertForMultipleChoice"),j0r=o(" (CamemBERT model)"),D0r=l(),XE=a("li"),X7e=a("strong"),G0r=o("convbert"),O0r=o(" \u2014 "),QJ=a("a"),V0r=o("TFConvBertForMultipleChoice"),X0r=o(" (ConvBERT model)"),z0r=l(),zE=a("li"),z7e=a("strong"),W0r=o("distilbert"),Q0r=o(" \u2014 "),HJ=a("a"),H0r=o("TFDistilBertForMultipleChoice"),U0r=o(" (DistilBERT model)"),J0r=l(),WE=a("li"),W7e=a("strong"),Y0r=o("electra"),K0r=o(" \u2014 "),UJ=a("a"),Z0r=o("TFElectraForMultipleChoice"),ewr=o(" (ELECTRA model)"),owr=l(),QE=a("li"),Q7e=a("strong"),rwr=o("flaubert"),twr=o(" \u2014 "),JJ=a("a"),awr=o("TFFlaubertForMultipleChoice"),nwr=o(" (FlauBERT model)"),swr=l(),HE=a("li"),H7e=a("strong"),lwr=o("funnel"),iwr=o(" \u2014 "),YJ=a("a"),dwr=o("TFFunnelForMultipleChoice"),cwr=o(" (Funnel Transformer model)"),fwr=l(),UE=a("li"),U7e=a("strong"),mwr=o("longformer"),gwr=o(" \u2014 "),KJ=a("a"),hwr=o("TFLongformerForMultipleChoice"),pwr=o(" (Longformer model)"),uwr=l(),JE=a("li"),J7e=a("strong"),_wr=o("mobilebert"),bwr=o(" \u2014 "),ZJ=a("a"),vwr=o("TFMobileBertForMultipleChoice"),Fwr=o(" (MobileBERT model)"),Twr=l(),YE=a("li"),Y7e=a("strong"),Mwr=o("mpnet"),Ewr=o(" \u2014 "),eY=a("a"),Cwr=o("TFMPNetForMultipleChoice"),wwr=o(" (MPNet model)"),Awr=l(),KE=a("li"),K7e=a("strong"),Lwr=o("rembert"),ywr=o(" \u2014 "),oY=a("a"),xwr=o("TFRemBertForMultipleChoice"),$wr=o(" (RemBERT model)"),kwr=l(),ZE=a("li"),Z7e=a("strong"),Swr=o("roberta"),Rwr=o(" \u2014 "),rY=a("a"),Pwr=o("TFRobertaForMultipleChoice"),Bwr=o(" (RoBERTa model)"),Iwr=l(),e4=a("li"),e8e=a("strong"),Nwr=o("roformer"),qwr=o(" \u2014 "),tY=a("a"),jwr=o("TFRoFormerForMultipleChoice"),Dwr=o(" (RoFormer model)"),Gwr=l(),o4=a("li"),o8e=a("strong"),Owr=o("xlm"),Vwr=o(" \u2014 "),aY=a("a"),Xwr=o("TFXLMForMultipleChoice"),zwr=o(" (XLM model)"),Wwr=l(),r4=a("li"),r8e=a("strong"),Qwr=o("xlm-roberta"),Hwr=o(" \u2014 "),nY=a("a"),Uwr=o("TFXLMRobertaForMultipleChoice"),Jwr=o(" (XLM-RoBERTa model)"),Ywr=l(),t4=a("li"),t8e=a("strong"),Kwr=o("xlnet"),Zwr=o(" \u2014 "),sY=a("a"),eAr=o("TFXLNetForMultipleChoice"),oAr=o(" (XLNet model)"),rAr=l(),F(a4.$$.fragment),ROe=l(),Ec=a("h2"),n4=a("a"),a8e=a("span"),F(H9.$$.fragment),tAr=l(),n8e=a("span"),aAr=o("TFAutoModelForNextSentencePrediction"),POe=l(),lr=a("div"),F(U9.$$.fragment),nAr=l(),Cc=a("p"),sAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lY=a("a"),lAr=o("from_pretrained()"),iAr=o(" class method or the "),iY=a("a"),dAr=o("from_config()"),cAr=o(` class
method.`),fAr=l(),J9=a("p"),mAr=o("This class cannot be instantiated directly using "),s8e=a("code"),gAr=o("__init__()"),hAr=o(" (throws an error)."),pAr=l(),qt=a("div"),F(Y9.$$.fragment),uAr=l(),l8e=a("p"),_Ar=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bAr=l(),wc=a("p"),vAr=o(`Note:
Loading a model from its configuration file does `),i8e=a("strong"),FAr=o("not"),TAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),MAr=o("from_pretrained()"),EAr=o(" to load the model weights."),CAr=l(),F(s4.$$.fragment),wAr=l(),Br=a("div"),F(K9.$$.fragment),AAr=l(),d8e=a("p"),LAr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yAr=l(),gn=a("p"),xAr=o("The model class to instantiate is selected based on the "),c8e=a("code"),$Ar=o("model_type"),kAr=o(` property of the config object (either
passed as an argument or loaded from `),f8e=a("code"),SAr=o("pretrained_model_name_or_path"),RAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m8e=a("code"),PAr=o("pretrained_model_name_or_path"),BAr=o(":"),IAr=l(),Z9=a("ul"),l4=a("li"),g8e=a("strong"),NAr=o("bert"),qAr=o(" \u2014 "),cY=a("a"),jAr=o("TFBertForNextSentencePrediction"),DAr=o(" (BERT model)"),GAr=l(),i4=a("li"),h8e=a("strong"),OAr=o("mobilebert"),VAr=o(" \u2014 "),fY=a("a"),XAr=o("TFMobileBertForNextSentencePrediction"),zAr=o(" (MobileBERT model)"),WAr=l(),F(d4.$$.fragment),BOe=l(),Ac=a("h2"),c4=a("a"),p8e=a("span"),F(ex.$$.fragment),QAr=l(),u8e=a("span"),HAr=o("TFAutoModelForTableQuestionAnswering"),IOe=l(),ir=a("div"),F(ox.$$.fragment),UAr=l(),Lc=a("p"),JAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),mY=a("a"),YAr=o("from_pretrained()"),KAr=o(" class method or the "),gY=a("a"),ZAr=o("from_config()"),eLr=o(` class
method.`),oLr=l(),rx=a("p"),rLr=o("This class cannot be instantiated directly using "),_8e=a("code"),tLr=o("__init__()"),aLr=o(" (throws an error)."),nLr=l(),jt=a("div"),F(tx.$$.fragment),sLr=l(),b8e=a("p"),lLr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iLr=l(),yc=a("p"),dLr=o(`Note:
Loading a model from its configuration file does `),v8e=a("strong"),cLr=o("not"),fLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),mLr=o("from_pretrained()"),gLr=o(" to load the model weights."),hLr=l(),F(f4.$$.fragment),pLr=l(),Ir=a("div"),F(ax.$$.fragment),uLr=l(),F8e=a("p"),_Lr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bLr=l(),hn=a("p"),vLr=o("The model class to instantiate is selected based on the "),T8e=a("code"),FLr=o("model_type"),TLr=o(` property of the config object (either
passed as an argument or loaded from `),M8e=a("code"),MLr=o("pretrained_model_name_or_path"),ELr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E8e=a("code"),CLr=o("pretrained_model_name_or_path"),wLr=o(":"),ALr=l(),C8e=a("ul"),m4=a("li"),w8e=a("strong"),LLr=o("tapas"),yLr=o(" \u2014 "),pY=a("a"),xLr=o("TFTapasForQuestionAnswering"),$Lr=o(" (TAPAS model)"),kLr=l(),F(g4.$$.fragment),NOe=l(),xc=a("h2"),h4=a("a"),A8e=a("span"),F(nx.$$.fragment),SLr=l(),L8e=a("span"),RLr=o("TFAutoModelForTokenClassification"),qOe=l(),dr=a("div"),F(sx.$$.fragment),PLr=l(),$c=a("p"),BLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uY=a("a"),ILr=o("from_pretrained()"),NLr=o(" class method or the "),_Y=a("a"),qLr=o("from_config()"),jLr=o(` class
method.`),DLr=l(),lx=a("p"),GLr=o("This class cannot be instantiated directly using "),y8e=a("code"),OLr=o("__init__()"),VLr=o(" (throws an error)."),XLr=l(),Dt=a("div"),F(ix.$$.fragment),zLr=l(),x8e=a("p"),WLr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QLr=l(),kc=a("p"),HLr=o(`Note:
Loading a model from its configuration file does `),$8e=a("strong"),ULr=o("not"),JLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),YLr=o("from_pretrained()"),KLr=o(" to load the model weights."),ZLr=l(),F(p4.$$.fragment),eyr=l(),Nr=a("div"),F(dx.$$.fragment),oyr=l(),k8e=a("p"),ryr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tyr=l(),pn=a("p"),ayr=o("The model class to instantiate is selected based on the "),S8e=a("code"),nyr=o("model_type"),syr=o(` property of the config object (either
passed as an argument or loaded from `),R8e=a("code"),lyr=o("pretrained_model_name_or_path"),iyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P8e=a("code"),dyr=o("pretrained_model_name_or_path"),cyr=o(":"),fyr=l(),de=a("ul"),u4=a("li"),B8e=a("strong"),myr=o("albert"),gyr=o(" \u2014 "),vY=a("a"),hyr=o("TFAlbertForTokenClassification"),pyr=o(" (ALBERT model)"),uyr=l(),_4=a("li"),I8e=a("strong"),_yr=o("bert"),byr=o(" \u2014 "),FY=a("a"),vyr=o("TFBertForTokenClassification"),Fyr=o(" (BERT model)"),Tyr=l(),b4=a("li"),N8e=a("strong"),Myr=o("camembert"),Eyr=o(" \u2014 "),TY=a("a"),Cyr=o("TFCamembertForTokenClassification"),wyr=o(" (CamemBERT model)"),Ayr=l(),v4=a("li"),q8e=a("strong"),Lyr=o("convbert"),yyr=o(" \u2014 "),MY=a("a"),xyr=o("TFConvBertForTokenClassification"),$yr=o(" (ConvBERT model)"),kyr=l(),F4=a("li"),j8e=a("strong"),Syr=o("deberta"),Ryr=o(" \u2014 "),EY=a("a"),Pyr=o("TFDebertaForTokenClassification"),Byr=o(" (DeBERTa model)"),Iyr=l(),T4=a("li"),D8e=a("strong"),Nyr=o("deberta-v2"),qyr=o(" \u2014 "),CY=a("a"),jyr=o("TFDebertaV2ForTokenClassification"),Dyr=o(" (DeBERTa-v2 model)"),Gyr=l(),M4=a("li"),G8e=a("strong"),Oyr=o("distilbert"),Vyr=o(" \u2014 "),wY=a("a"),Xyr=o("TFDistilBertForTokenClassification"),zyr=o(" (DistilBERT model)"),Wyr=l(),E4=a("li"),O8e=a("strong"),Qyr=o("electra"),Hyr=o(" \u2014 "),AY=a("a"),Uyr=o("TFElectraForTokenClassification"),Jyr=o(" (ELECTRA model)"),Yyr=l(),C4=a("li"),V8e=a("strong"),Kyr=o("flaubert"),Zyr=o(" \u2014 "),LY=a("a"),e9r=o("TFFlaubertForTokenClassification"),o9r=o(" (FlauBERT model)"),r9r=l(),w4=a("li"),X8e=a("strong"),t9r=o("funnel"),a9r=o(" \u2014 "),yY=a("a"),n9r=o("TFFunnelForTokenClassification"),s9r=o(" (Funnel Transformer model)"),l9r=l(),A4=a("li"),z8e=a("strong"),i9r=o("layoutlm"),d9r=o(" \u2014 "),xY=a("a"),c9r=o("TFLayoutLMForTokenClassification"),f9r=o(" (LayoutLM model)"),m9r=l(),L4=a("li"),W8e=a("strong"),g9r=o("longformer"),h9r=o(" \u2014 "),$Y=a("a"),p9r=o("TFLongformerForTokenClassification"),u9r=o(" (Longformer model)"),_9r=l(),y4=a("li"),Q8e=a("strong"),b9r=o("mobilebert"),v9r=o(" \u2014 "),kY=a("a"),F9r=o("TFMobileBertForTokenClassification"),T9r=o(" (MobileBERT model)"),M9r=l(),x4=a("li"),H8e=a("strong"),E9r=o("mpnet"),C9r=o(" \u2014 "),SY=a("a"),w9r=o("TFMPNetForTokenClassification"),A9r=o(" (MPNet model)"),L9r=l(),$4=a("li"),U8e=a("strong"),y9r=o("rembert"),x9r=o(" \u2014 "),RY=a("a"),$9r=o("TFRemBertForTokenClassification"),k9r=o(" (RemBERT model)"),S9r=l(),k4=a("li"),J8e=a("strong"),R9r=o("roberta"),P9r=o(" \u2014 "),PY=a("a"),B9r=o("TFRobertaForTokenClassification"),I9r=o(" (RoBERTa model)"),N9r=l(),S4=a("li"),Y8e=a("strong"),q9r=o("roformer"),j9r=o(" \u2014 "),BY=a("a"),D9r=o("TFRoFormerForTokenClassification"),G9r=o(" (RoFormer model)"),O9r=l(),R4=a("li"),K8e=a("strong"),V9r=o("xlm"),X9r=o(" \u2014 "),IY=a("a"),z9r=o("TFXLMForTokenClassification"),W9r=o(" (XLM model)"),Q9r=l(),P4=a("li"),Z8e=a("strong"),H9r=o("xlm-roberta"),U9r=o(" \u2014 "),NY=a("a"),J9r=o("TFXLMRobertaForTokenClassification"),Y9r=o(" (XLM-RoBERTa model)"),K9r=l(),B4=a("li"),eMe=a("strong"),Z9r=o("xlnet"),exr=o(" \u2014 "),qY=a("a"),oxr=o("TFXLNetForTokenClassification"),rxr=o(" (XLNet model)"),txr=l(),F(I4.$$.fragment),jOe=l(),Sc=a("h2"),N4=a("a"),oMe=a("span"),F(cx.$$.fragment),axr=l(),rMe=a("span"),nxr=o("TFAutoModelForQuestionAnswering"),DOe=l(),cr=a("div"),F(fx.$$.fragment),sxr=l(),Rc=a("p"),lxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jY=a("a"),ixr=o("from_pretrained()"),dxr=o(" class method or the "),DY=a("a"),cxr=o("from_config()"),fxr=o(` class
method.`),mxr=l(),mx=a("p"),gxr=o("This class cannot be instantiated directly using "),tMe=a("code"),hxr=o("__init__()"),pxr=o(" (throws an error)."),uxr=l(),Gt=a("div"),F(gx.$$.fragment),_xr=l(),aMe=a("p"),bxr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vxr=l(),Pc=a("p"),Fxr=o(`Note:
Loading a model from its configuration file does `),nMe=a("strong"),Txr=o("not"),Mxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),Exr=o("from_pretrained()"),Cxr=o(" to load the model weights."),wxr=l(),F(q4.$$.fragment),Axr=l(),qr=a("div"),F(hx.$$.fragment),Lxr=l(),sMe=a("p"),yxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xxr=l(),un=a("p"),$xr=o("The model class to instantiate is selected based on the "),lMe=a("code"),kxr=o("model_type"),Sxr=o(` property of the config object (either
passed as an argument or loaded from `),iMe=a("code"),Rxr=o("pretrained_model_name_or_path"),Pxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=a("code"),Bxr=o("pretrained_model_name_or_path"),Ixr=o(":"),Nxr=l(),ce=a("ul"),j4=a("li"),cMe=a("strong"),qxr=o("albert"),jxr=o(" \u2014 "),OY=a("a"),Dxr=o("TFAlbertForQuestionAnswering"),Gxr=o(" (ALBERT model)"),Oxr=l(),D4=a("li"),fMe=a("strong"),Vxr=o("bert"),Xxr=o(" \u2014 "),VY=a("a"),zxr=o("TFBertForQuestionAnswering"),Wxr=o(" (BERT model)"),Qxr=l(),G4=a("li"),mMe=a("strong"),Hxr=o("camembert"),Uxr=o(" \u2014 "),XY=a("a"),Jxr=o("TFCamembertForQuestionAnswering"),Yxr=o(" (CamemBERT model)"),Kxr=l(),O4=a("li"),gMe=a("strong"),Zxr=o("convbert"),e$r=o(" \u2014 "),zY=a("a"),o$r=o("TFConvBertForQuestionAnswering"),r$r=o(" (ConvBERT model)"),t$r=l(),V4=a("li"),hMe=a("strong"),a$r=o("deberta"),n$r=o(" \u2014 "),WY=a("a"),s$r=o("TFDebertaForQuestionAnswering"),l$r=o(" (DeBERTa model)"),i$r=l(),X4=a("li"),pMe=a("strong"),d$r=o("deberta-v2"),c$r=o(" \u2014 "),QY=a("a"),f$r=o("TFDebertaV2ForQuestionAnswering"),m$r=o(" (DeBERTa-v2 model)"),g$r=l(),z4=a("li"),uMe=a("strong"),h$r=o("distilbert"),p$r=o(" \u2014 "),HY=a("a"),u$r=o("TFDistilBertForQuestionAnswering"),_$r=o(" (DistilBERT model)"),b$r=l(),W4=a("li"),_Me=a("strong"),v$r=o("electra"),F$r=o(" \u2014 "),UY=a("a"),T$r=o("TFElectraForQuestionAnswering"),M$r=o(" (ELECTRA model)"),E$r=l(),Q4=a("li"),bMe=a("strong"),C$r=o("flaubert"),w$r=o(" \u2014 "),JY=a("a"),A$r=o("TFFlaubertForQuestionAnsweringSimple"),L$r=o(" (FlauBERT model)"),y$r=l(),H4=a("li"),vMe=a("strong"),x$r=o("funnel"),$$r=o(" \u2014 "),YY=a("a"),k$r=o("TFFunnelForQuestionAnswering"),S$r=o(" (Funnel Transformer model)"),R$r=l(),U4=a("li"),FMe=a("strong"),P$r=o("gptj"),B$r=o(" \u2014 "),KY=a("a"),I$r=o("TFGPTJForQuestionAnswering"),N$r=o(" (GPT-J model)"),q$r=l(),J4=a("li"),TMe=a("strong"),j$r=o("longformer"),D$r=o(" \u2014 "),ZY=a("a"),G$r=o("TFLongformerForQuestionAnswering"),O$r=o(" (Longformer model)"),V$r=l(),Y4=a("li"),MMe=a("strong"),X$r=o("mobilebert"),z$r=o(" \u2014 "),eK=a("a"),W$r=o("TFMobileBertForQuestionAnswering"),Q$r=o(" (MobileBERT model)"),H$r=l(),K4=a("li"),EMe=a("strong"),U$r=o("mpnet"),J$r=o(" \u2014 "),oK=a("a"),Y$r=o("TFMPNetForQuestionAnswering"),K$r=o(" (MPNet model)"),Z$r=l(),Z4=a("li"),CMe=a("strong"),ekr=o("rembert"),okr=o(" \u2014 "),rK=a("a"),rkr=o("TFRemBertForQuestionAnswering"),tkr=o(" (RemBERT model)"),akr=l(),eC=a("li"),wMe=a("strong"),nkr=o("roberta"),skr=o(" \u2014 "),tK=a("a"),lkr=o("TFRobertaForQuestionAnswering"),ikr=o(" (RoBERTa model)"),dkr=l(),oC=a("li"),AMe=a("strong"),ckr=o("roformer"),fkr=o(" \u2014 "),aK=a("a"),mkr=o("TFRoFormerForQuestionAnswering"),gkr=o(" (RoFormer model)"),hkr=l(),rC=a("li"),LMe=a("strong"),pkr=o("xlm"),ukr=o(" \u2014 "),nK=a("a"),_kr=o("TFXLMForQuestionAnsweringSimple"),bkr=o(" (XLM model)"),vkr=l(),tC=a("li"),yMe=a("strong"),Fkr=o("xlm-roberta"),Tkr=o(" \u2014 "),sK=a("a"),Mkr=o("TFXLMRobertaForQuestionAnswering"),Ekr=o(" (XLM-RoBERTa model)"),Ckr=l(),aC=a("li"),xMe=a("strong"),wkr=o("xlnet"),Akr=o(" \u2014 "),lK=a("a"),Lkr=o("TFXLNetForQuestionAnsweringSimple"),ykr=o(" (XLNet model)"),xkr=l(),F(nC.$$.fragment),GOe=l(),Bc=a("h2"),sC=a("a"),$Me=a("span"),F(px.$$.fragment),$kr=l(),kMe=a("span"),kkr=o("TFAutoModelForVision2Seq"),OOe=l(),fr=a("div"),F(ux.$$.fragment),Skr=l(),Ic=a("p"),Rkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iK=a("a"),Pkr=o("from_pretrained()"),Bkr=o(" class method or the "),dK=a("a"),Ikr=o("from_config()"),Nkr=o(` class
method.`),qkr=l(),_x=a("p"),jkr=o("This class cannot be instantiated directly using "),SMe=a("code"),Dkr=o("__init__()"),Gkr=o(" (throws an error)."),Okr=l(),Ot=a("div"),F(bx.$$.fragment),Vkr=l(),RMe=a("p"),Xkr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zkr=l(),Nc=a("p"),Wkr=o(`Note:
Loading a model from its configuration file does `),PMe=a("strong"),Qkr=o("not"),Hkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),Ukr=o("from_pretrained()"),Jkr=o(" to load the model weights."),Ykr=l(),F(lC.$$.fragment),Kkr=l(),jr=a("div"),F(vx.$$.fragment),Zkr=l(),BMe=a("p"),eSr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oSr=l(),_n=a("p"),rSr=o("The model class to instantiate is selected based on the "),IMe=a("code"),tSr=o("model_type"),aSr=o(` property of the config object (either
passed as an argument or loaded from `),NMe=a("code"),nSr=o("pretrained_model_name_or_path"),sSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=a("code"),lSr=o("pretrained_model_name_or_path"),iSr=o(":"),dSr=l(),jMe=a("ul"),iC=a("li"),DMe=a("strong"),cSr=o("vision-encoder-decoder"),fSr=o(" \u2014 "),fK=a("a"),mSr=o("TFVisionEncoderDecoderModel"),gSr=o(" (Vision Encoder decoder model)"),hSr=l(),F(dC.$$.fragment),VOe=l(),qc=a("h2"),cC=a("a"),GMe=a("span"),F(Fx.$$.fragment),pSr=l(),OMe=a("span"),uSr=o("TFAutoModelForSpeechSeq2Seq"),XOe=l(),mr=a("div"),F(Tx.$$.fragment),_Sr=l(),jc=a("p"),bSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mK=a("a"),vSr=o("from_pretrained()"),FSr=o(" class method or the "),gK=a("a"),TSr=o("from_config()"),MSr=o(` class
method.`),ESr=l(),Mx=a("p"),CSr=o("This class cannot be instantiated directly using "),VMe=a("code"),wSr=o("__init__()"),ASr=o(" (throws an error)."),LSr=l(),Vt=a("div"),F(Ex.$$.fragment),ySr=l(),XMe=a("p"),xSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$Sr=l(),Dc=a("p"),kSr=o(`Note:
Loading a model from its configuration file does `),zMe=a("strong"),SSr=o("not"),RSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),PSr=o("from_pretrained()"),BSr=o(" to load the model weights."),ISr=l(),F(fC.$$.fragment),NSr=l(),Dr=a("div"),F(Cx.$$.fragment),qSr=l(),WMe=a("p"),jSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),DSr=l(),bn=a("p"),GSr=o("The model class to instantiate is selected based on the "),QMe=a("code"),OSr=o("model_type"),VSr=o(` property of the config object (either
passed as an argument or loaded from `),HMe=a("code"),XSr=o("pretrained_model_name_or_path"),zSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=a("code"),WSr=o("pretrained_model_name_or_path"),QSr=o(":"),HSr=l(),JMe=a("ul"),mC=a("li"),YMe=a("strong"),USr=o("speech_to_text"),JSr=o(" \u2014 "),pK=a("a"),YSr=o("TFSpeech2TextForConditionalGeneration"),KSr=o(" (Speech2Text model)"),ZSr=l(),F(gC.$$.fragment),zOe=l(),Gc=a("h2"),hC=a("a"),KMe=a("span"),F(wx.$$.fragment),eRr=l(),ZMe=a("span"),oRr=o("FlaxAutoModel"),WOe=l(),gr=a("div"),F(Ax.$$.fragment),rRr=l(),Oc=a("p"),tRr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uK=a("a"),aRr=o("from_pretrained()"),nRr=o(" class method or the "),_K=a("a"),sRr=o("from_config()"),lRr=o(` class
method.`),iRr=l(),Lx=a("p"),dRr=o("This class cannot be instantiated directly using "),eEe=a("code"),cRr=o("__init__()"),fRr=o(" (throws an error)."),mRr=l(),Xt=a("div"),F(yx.$$.fragment),gRr=l(),oEe=a("p"),hRr=o("Instantiates one of the base model classes of the library from a configuration."),pRr=l(),Vc=a("p"),uRr=o(`Note:
Loading a model from its configuration file does `),rEe=a("strong"),_Rr=o("not"),bRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=a("a"),vRr=o("from_pretrained()"),FRr=o(" to load the model weights."),TRr=l(),F(pC.$$.fragment),MRr=l(),Gr=a("div"),F(xx.$$.fragment),ERr=l(),tEe=a("p"),CRr=o("Instantiate one of the base model classes of the library from a pretrained model."),wRr=l(),vn=a("p"),ARr=o("The model class to instantiate is selected based on the "),aEe=a("code"),LRr=o("model_type"),yRr=o(` property of the config object (either
passed as an argument or loaded from `),nEe=a("code"),xRr=o("pretrained_model_name_or_path"),$Rr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=a("code"),kRr=o("pretrained_model_name_or_path"),SRr=o(":"),RRr=l(),oe=a("ul"),uC=a("li"),lEe=a("strong"),PRr=o("albert"),BRr=o(" \u2014 "),vK=a("a"),IRr=o("FlaxAlbertModel"),NRr=o(" (ALBERT model)"),qRr=l(),_C=a("li"),iEe=a("strong"),jRr=o("bart"),DRr=o(" \u2014 "),FK=a("a"),GRr=o("FlaxBartModel"),ORr=o(" (BART model)"),VRr=l(),bC=a("li"),dEe=a("strong"),XRr=o("beit"),zRr=o(" \u2014 "),TK=a("a"),WRr=o("FlaxBeitModel"),QRr=o(" (BEiT model)"),HRr=l(),vC=a("li"),cEe=a("strong"),URr=o("bert"),JRr=o(" \u2014 "),MK=a("a"),YRr=o("FlaxBertModel"),KRr=o(" (BERT model)"),ZRr=l(),FC=a("li"),fEe=a("strong"),ePr=o("big_bird"),oPr=o(" \u2014 "),EK=a("a"),rPr=o("FlaxBigBirdModel"),tPr=o(" (BigBird model)"),aPr=l(),TC=a("li"),mEe=a("strong"),nPr=o("blenderbot"),sPr=o(" \u2014 "),CK=a("a"),lPr=o("FlaxBlenderbotModel"),iPr=o(" (Blenderbot model)"),dPr=l(),MC=a("li"),gEe=a("strong"),cPr=o("blenderbot-small"),fPr=o(" \u2014 "),wK=a("a"),mPr=o("FlaxBlenderbotSmallModel"),gPr=o(" (BlenderbotSmall model)"),hPr=l(),EC=a("li"),hEe=a("strong"),pPr=o("clip"),uPr=o(" \u2014 "),AK=a("a"),_Pr=o("FlaxCLIPModel"),bPr=o(" (CLIP model)"),vPr=l(),CC=a("li"),pEe=a("strong"),FPr=o("distilbert"),TPr=o(" \u2014 "),LK=a("a"),MPr=o("FlaxDistilBertModel"),EPr=o(" (DistilBERT model)"),CPr=l(),wC=a("li"),uEe=a("strong"),wPr=o("electra"),APr=o(" \u2014 "),yK=a("a"),LPr=o("FlaxElectraModel"),yPr=o(" (ELECTRA model)"),xPr=l(),AC=a("li"),_Ee=a("strong"),$Pr=o("gpt2"),kPr=o(" \u2014 "),xK=a("a"),SPr=o("FlaxGPT2Model"),RPr=o(" (OpenAI GPT-2 model)"),PPr=l(),LC=a("li"),bEe=a("strong"),BPr=o("gpt_neo"),IPr=o(" \u2014 "),$K=a("a"),NPr=o("FlaxGPTNeoModel"),qPr=o(" (GPT Neo model)"),jPr=l(),yC=a("li"),vEe=a("strong"),DPr=o("gptj"),GPr=o(" \u2014 "),kK=a("a"),OPr=o("FlaxGPTJModel"),VPr=o(" (GPT-J model)"),XPr=l(),xC=a("li"),FEe=a("strong"),zPr=o("longt5"),WPr=o(" \u2014 "),SK=a("a"),QPr=o("FlaxLongT5Model"),HPr=o(" (LongT5 model)"),UPr=l(),$C=a("li"),TEe=a("strong"),JPr=o("marian"),YPr=o(" \u2014 "),RK=a("a"),KPr=o("FlaxMarianModel"),ZPr=o(" (Marian model)"),eBr=l(),kC=a("li"),MEe=a("strong"),oBr=o("mbart"),rBr=o(" \u2014 "),PK=a("a"),tBr=o("FlaxMBartModel"),aBr=o(" (mBART model)"),nBr=l(),SC=a("li"),EEe=a("strong"),sBr=o("mt5"),lBr=o(" \u2014 "),BK=a("a"),iBr=o("FlaxMT5Model"),dBr=o(" (MT5 model)"),cBr=l(),RC=a("li"),CEe=a("strong"),fBr=o("opt"),mBr=o(" \u2014 "),IK=a("a"),gBr=o("FlaxOPTModel"),hBr=o(" (OPT model)"),pBr=l(),PC=a("li"),wEe=a("strong"),uBr=o("pegasus"),_Br=o(" \u2014 "),NK=a("a"),bBr=o("FlaxPegasusModel"),vBr=o(" (Pegasus model)"),FBr=l(),BC=a("li"),AEe=a("strong"),TBr=o("roberta"),MBr=o(" \u2014 "),qK=a("a"),EBr=o("FlaxRobertaModel"),CBr=o(" (RoBERTa model)"),wBr=l(),IC=a("li"),LEe=a("strong"),ABr=o("roformer"),LBr=o(" \u2014 "),jK=a("a"),yBr=o("FlaxRoFormerModel"),xBr=o(" (RoFormer model)"),$Br=l(),NC=a("li"),yEe=a("strong"),kBr=o("t5"),SBr=o(" \u2014 "),DK=a("a"),RBr=o("FlaxT5Model"),PBr=o(" (T5 model)"),BBr=l(),qC=a("li"),xEe=a("strong"),IBr=o("vision-text-dual-encoder"),NBr=o(" \u2014 "),GK=a("a"),qBr=o("FlaxVisionTextDualEncoderModel"),jBr=o(" (VisionTextDualEncoder model)"),DBr=l(),jC=a("li"),$Ee=a("strong"),GBr=o("vit"),OBr=o(" \u2014 "),OK=a("a"),VBr=o("FlaxViTModel"),XBr=o(" (ViT model)"),zBr=l(),DC=a("li"),kEe=a("strong"),WBr=o("wav2vec2"),QBr=o(" \u2014 "),VK=a("a"),HBr=o("FlaxWav2Vec2Model"),UBr=o(" (Wav2Vec2 model)"),JBr=l(),GC=a("li"),SEe=a("strong"),YBr=o("xglm"),KBr=o(" \u2014 "),XK=a("a"),ZBr=o("FlaxXGLMModel"),eIr=o(" (XGLM model)"),oIr=l(),OC=a("li"),REe=a("strong"),rIr=o("xlm-roberta"),tIr=o(" \u2014 "),zK=a("a"),aIr=o("FlaxXLMRobertaModel"),nIr=o(" (XLM-RoBERTa model)"),sIr=l(),F(VC.$$.fragment),QOe=l(),Xc=a("h2"),XC=a("a"),PEe=a("span"),F($x.$$.fragment),lIr=l(),BEe=a("span"),iIr=o("FlaxAutoModelForCausalLM"),HOe=l(),hr=a("div"),F(kx.$$.fragment),dIr=l(),zc=a("p"),cIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WK=a("a"),fIr=o("from_pretrained()"),mIr=o(" class method or the "),QK=a("a"),gIr=o("from_config()"),hIr=o(` class
method.`),pIr=l(),Sx=a("p"),uIr=o("This class cannot be instantiated directly using "),IEe=a("code"),_Ir=o("__init__()"),bIr=o(" (throws an error)."),vIr=l(),zt=a("div"),F(Rx.$$.fragment),FIr=l(),NEe=a("p"),TIr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MIr=l(),Wc=a("p"),EIr=o(`Note:
Loading a model from its configuration file does `),qEe=a("strong"),CIr=o("not"),wIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),AIr=o("from_pretrained()"),LIr=o(" to load the model weights."),yIr=l(),F(zC.$$.fragment),xIr=l(),Or=a("div"),F(Px.$$.fragment),$Ir=l(),jEe=a("p"),kIr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),SIr=l(),Fn=a("p"),RIr=o("The model class to instantiate is selected based on the "),DEe=a("code"),PIr=o("model_type"),BIr=o(` property of the config object (either
passed as an argument or loaded from `),GEe=a("code"),IIr=o("pretrained_model_name_or_path"),NIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=a("code"),qIr=o("pretrained_model_name_or_path"),jIr=o(":"),DIr=l(),xe=a("ul"),WC=a("li"),VEe=a("strong"),GIr=o("bart"),OIr=o(" \u2014 "),UK=a("a"),VIr=o("FlaxBartForCausalLM"),XIr=o(" (BART model)"),zIr=l(),QC=a("li"),XEe=a("strong"),WIr=o("bert"),QIr=o(" \u2014 "),JK=a("a"),HIr=o("FlaxBertForCausalLM"),UIr=o(" (BERT model)"),JIr=l(),HC=a("li"),zEe=a("strong"),YIr=o("big_bird"),KIr=o(" \u2014 "),YK=a("a"),ZIr=o("FlaxBigBirdForCausalLM"),eNr=o(" (BigBird model)"),oNr=l(),UC=a("li"),WEe=a("strong"),rNr=o("electra"),tNr=o(" \u2014 "),KK=a("a"),aNr=o("FlaxElectraForCausalLM"),nNr=o(" (ELECTRA model)"),sNr=l(),JC=a("li"),QEe=a("strong"),lNr=o("gpt2"),iNr=o(" \u2014 "),ZK=a("a"),dNr=o("FlaxGPT2LMHeadModel"),cNr=o(" (OpenAI GPT-2 model)"),fNr=l(),YC=a("li"),HEe=a("strong"),mNr=o("gpt_neo"),gNr=o(" \u2014 "),eZ=a("a"),hNr=o("FlaxGPTNeoForCausalLM"),pNr=o(" (GPT Neo model)"),uNr=l(),KC=a("li"),UEe=a("strong"),_Nr=o("gptj"),bNr=o(" \u2014 "),oZ=a("a"),vNr=o("FlaxGPTJForCausalLM"),FNr=o(" (GPT-J model)"),TNr=l(),ZC=a("li"),JEe=a("strong"),MNr=o("opt"),ENr=o(" \u2014 "),rZ=a("a"),CNr=o("FlaxOPTForCausalLM"),wNr=o(" (OPT model)"),ANr=l(),e5=a("li"),YEe=a("strong"),LNr=o("roberta"),yNr=o(" \u2014 "),tZ=a("a"),xNr=o("FlaxRobertaForCausalLM"),$Nr=o(" (RoBERTa model)"),kNr=l(),o5=a("li"),KEe=a("strong"),SNr=o("xglm"),RNr=o(" \u2014 "),aZ=a("a"),PNr=o("FlaxXGLMForCausalLM"),BNr=o(" (XGLM model)"),INr=l(),F(r5.$$.fragment),UOe=l(),Qc=a("h2"),t5=a("a"),ZEe=a("span"),F(Bx.$$.fragment),NNr=l(),e4e=a("span"),qNr=o("FlaxAutoModelForPreTraining"),JOe=l(),pr=a("div"),F(Ix.$$.fragment),jNr=l(),Hc=a("p"),DNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nZ=a("a"),GNr=o("from_pretrained()"),ONr=o(" class method or the "),sZ=a("a"),VNr=o("from_config()"),XNr=o(` class
method.`),zNr=l(),Nx=a("p"),WNr=o("This class cannot be instantiated directly using "),o4e=a("code"),QNr=o("__init__()"),HNr=o(" (throws an error)."),UNr=l(),Wt=a("div"),F(qx.$$.fragment),JNr=l(),r4e=a("p"),YNr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KNr=l(),Uc=a("p"),ZNr=o(`Note:
Loading a model from its configuration file does `),t4e=a("strong"),eqr=o("not"),oqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),rqr=o("from_pretrained()"),tqr=o(" to load the model weights."),aqr=l(),F(a5.$$.fragment),nqr=l(),Vr=a("div"),F(jx.$$.fragment),sqr=l(),a4e=a("p"),lqr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),iqr=l(),Tn=a("p"),dqr=o("The model class to instantiate is selected based on the "),n4e=a("code"),cqr=o("model_type"),fqr=o(` property of the config object (either
passed as an argument or loaded from `),s4e=a("code"),mqr=o("pretrained_model_name_or_path"),gqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=a("code"),hqr=o("pretrained_model_name_or_path"),pqr=o(":"),uqr=l(),Ee=a("ul"),n5=a("li"),i4e=a("strong"),_qr=o("albert"),bqr=o(" \u2014 "),iZ=a("a"),vqr=o("FlaxAlbertForPreTraining"),Fqr=o(" (ALBERT model)"),Tqr=l(),s5=a("li"),d4e=a("strong"),Mqr=o("bart"),Eqr=o(" \u2014 "),dZ=a("a"),Cqr=o("FlaxBartForConditionalGeneration"),wqr=o(" (BART model)"),Aqr=l(),l5=a("li"),c4e=a("strong"),Lqr=o("bert"),yqr=o(" \u2014 "),cZ=a("a"),xqr=o("FlaxBertForPreTraining"),$qr=o(" (BERT model)"),kqr=l(),i5=a("li"),f4e=a("strong"),Sqr=o("big_bird"),Rqr=o(" \u2014 "),fZ=a("a"),Pqr=o("FlaxBigBirdForPreTraining"),Bqr=o(" (BigBird model)"),Iqr=l(),d5=a("li"),m4e=a("strong"),Nqr=o("electra"),qqr=o(" \u2014 "),mZ=a("a"),jqr=o("FlaxElectraForPreTraining"),Dqr=o(" (ELECTRA model)"),Gqr=l(),c5=a("li"),g4e=a("strong"),Oqr=o("longt5"),Vqr=o(" \u2014 "),gZ=a("a"),Xqr=o("FlaxLongT5ForConditionalGeneration"),zqr=o(" (LongT5 model)"),Wqr=l(),f5=a("li"),h4e=a("strong"),Qqr=o("mbart"),Hqr=o(" \u2014 "),hZ=a("a"),Uqr=o("FlaxMBartForConditionalGeneration"),Jqr=o(" (mBART model)"),Yqr=l(),m5=a("li"),p4e=a("strong"),Kqr=o("mt5"),Zqr=o(" \u2014 "),pZ=a("a"),ejr=o("FlaxMT5ForConditionalGeneration"),ojr=o(" (MT5 model)"),rjr=l(),g5=a("li"),u4e=a("strong"),tjr=o("roberta"),ajr=o(" \u2014 "),uZ=a("a"),njr=o("FlaxRobertaForMaskedLM"),sjr=o(" (RoBERTa model)"),ljr=l(),h5=a("li"),_4e=a("strong"),ijr=o("roformer"),djr=o(" \u2014 "),_Z=a("a"),cjr=o("FlaxRoFormerForMaskedLM"),fjr=o(" (RoFormer model)"),mjr=l(),p5=a("li"),b4e=a("strong"),gjr=o("t5"),hjr=o(" \u2014 "),bZ=a("a"),pjr=o("FlaxT5ForConditionalGeneration"),ujr=o(" (T5 model)"),_jr=l(),u5=a("li"),v4e=a("strong"),bjr=o("wav2vec2"),vjr=o(" \u2014 "),vZ=a("a"),Fjr=o("FlaxWav2Vec2ForPreTraining"),Tjr=o(" (Wav2Vec2 model)"),Mjr=l(),_5=a("li"),F4e=a("strong"),Ejr=o("xlm-roberta"),Cjr=o(" \u2014 "),FZ=a("a"),wjr=o("FlaxXLMRobertaForMaskedLM"),Ajr=o(" (XLM-RoBERTa model)"),Ljr=l(),F(b5.$$.fragment),YOe=l(),Jc=a("h2"),v5=a("a"),T4e=a("span"),F(Dx.$$.fragment),yjr=l(),M4e=a("span"),xjr=o("FlaxAutoModelForMaskedLM"),KOe=l(),ur=a("div"),F(Gx.$$.fragment),$jr=l(),Yc=a("p"),kjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TZ=a("a"),Sjr=o("from_pretrained()"),Rjr=o(" class method or the "),MZ=a("a"),Pjr=o("from_config()"),Bjr=o(` class
method.`),Ijr=l(),Ox=a("p"),Njr=o("This class cannot be instantiated directly using "),E4e=a("code"),qjr=o("__init__()"),jjr=o(" (throws an error)."),Djr=l(),Qt=a("div"),F(Vx.$$.fragment),Gjr=l(),C4e=a("p"),Ojr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vjr=l(),Kc=a("p"),Xjr=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),zjr=o("not"),Wjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),Qjr=o("from_pretrained()"),Hjr=o(" to load the model weights."),Ujr=l(),F(F5.$$.fragment),Jjr=l(),Xr=a("div"),F(Xx.$$.fragment),Yjr=l(),A4e=a("p"),Kjr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Zjr=l(),Mn=a("p"),eDr=o("The model class to instantiate is selected based on the "),L4e=a("code"),oDr=o("model_type"),rDr=o(` property of the config object (either
passed as an argument or loaded from `),y4e=a("code"),tDr=o("pretrained_model_name_or_path"),aDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=a("code"),nDr=o("pretrained_model_name_or_path"),sDr=o(":"),lDr=l(),$e=a("ul"),T5=a("li"),$4e=a("strong"),iDr=o("albert"),dDr=o(" \u2014 "),CZ=a("a"),cDr=o("FlaxAlbertForMaskedLM"),fDr=o(" (ALBERT model)"),mDr=l(),M5=a("li"),k4e=a("strong"),gDr=o("bart"),hDr=o(" \u2014 "),wZ=a("a"),pDr=o("FlaxBartForConditionalGeneration"),uDr=o(" (BART model)"),_Dr=l(),E5=a("li"),S4e=a("strong"),bDr=o("bert"),vDr=o(" \u2014 "),AZ=a("a"),FDr=o("FlaxBertForMaskedLM"),TDr=o(" (BERT model)"),MDr=l(),C5=a("li"),R4e=a("strong"),EDr=o("big_bird"),CDr=o(" \u2014 "),LZ=a("a"),wDr=o("FlaxBigBirdForMaskedLM"),ADr=o(" (BigBird model)"),LDr=l(),w5=a("li"),P4e=a("strong"),yDr=o("distilbert"),xDr=o(" \u2014 "),yZ=a("a"),$Dr=o("FlaxDistilBertForMaskedLM"),kDr=o(" (DistilBERT model)"),SDr=l(),A5=a("li"),B4e=a("strong"),RDr=o("electra"),PDr=o(" \u2014 "),xZ=a("a"),BDr=o("FlaxElectraForMaskedLM"),IDr=o(" (ELECTRA model)"),NDr=l(),L5=a("li"),I4e=a("strong"),qDr=o("mbart"),jDr=o(" \u2014 "),$Z=a("a"),DDr=o("FlaxMBartForConditionalGeneration"),GDr=o(" (mBART model)"),ODr=l(),y5=a("li"),N4e=a("strong"),VDr=o("roberta"),XDr=o(" \u2014 "),kZ=a("a"),zDr=o("FlaxRobertaForMaskedLM"),WDr=o(" (RoBERTa model)"),QDr=l(),x5=a("li"),q4e=a("strong"),HDr=o("roformer"),UDr=o(" \u2014 "),SZ=a("a"),JDr=o("FlaxRoFormerForMaskedLM"),YDr=o(" (RoFormer model)"),KDr=l(),$5=a("li"),j4e=a("strong"),ZDr=o("xlm-roberta"),eGr=o(" \u2014 "),RZ=a("a"),oGr=o("FlaxXLMRobertaForMaskedLM"),rGr=o(" (XLM-RoBERTa model)"),tGr=l(),F(k5.$$.fragment),ZOe=l(),Zc=a("h2"),S5=a("a"),D4e=a("span"),F(zx.$$.fragment),aGr=l(),G4e=a("span"),nGr=o("FlaxAutoModelForSeq2SeqLM"),eVe=l(),_r=a("div"),F(Wx.$$.fragment),sGr=l(),ef=a("p"),lGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PZ=a("a"),iGr=o("from_pretrained()"),dGr=o(" class method or the "),BZ=a("a"),cGr=o("from_config()"),fGr=o(` class
method.`),mGr=l(),Qx=a("p"),gGr=o("This class cannot be instantiated directly using "),O4e=a("code"),hGr=o("__init__()"),pGr=o(" (throws an error)."),uGr=l(),Ht=a("div"),F(Hx.$$.fragment),_Gr=l(),V4e=a("p"),bGr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vGr=l(),of=a("p"),FGr=o(`Note:
Loading a model from its configuration file does `),X4e=a("strong"),TGr=o("not"),MGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IZ=a("a"),EGr=o("from_pretrained()"),CGr=o(" to load the model weights."),wGr=l(),F(R5.$$.fragment),AGr=l(),zr=a("div"),F(Ux.$$.fragment),LGr=l(),z4e=a("p"),yGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xGr=l(),En=a("p"),$Gr=o("The model class to instantiate is selected based on the "),W4e=a("code"),kGr=o("model_type"),SGr=o(` property of the config object (either
passed as an argument or loaded from `),Q4e=a("code"),RGr=o("pretrained_model_name_or_path"),PGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=a("code"),BGr=o("pretrained_model_name_or_path"),IGr=o(":"),NGr=l(),ke=a("ul"),P5=a("li"),U4e=a("strong"),qGr=o("bart"),jGr=o(" \u2014 "),NZ=a("a"),DGr=o("FlaxBartForConditionalGeneration"),GGr=o(" (BART model)"),OGr=l(),B5=a("li"),J4e=a("strong"),VGr=o("blenderbot"),XGr=o(" \u2014 "),qZ=a("a"),zGr=o("FlaxBlenderbotForConditionalGeneration"),WGr=o(" (Blenderbot model)"),QGr=l(),I5=a("li"),Y4e=a("strong"),HGr=o("blenderbot-small"),UGr=o(" \u2014 "),jZ=a("a"),JGr=o("FlaxBlenderbotSmallForConditionalGeneration"),YGr=o(" (BlenderbotSmall model)"),KGr=l(),N5=a("li"),K4e=a("strong"),ZGr=o("encoder-decoder"),eOr=o(" \u2014 "),DZ=a("a"),oOr=o("FlaxEncoderDecoderModel"),rOr=o(" (Encoder decoder model)"),tOr=l(),q5=a("li"),Z4e=a("strong"),aOr=o("longt5"),nOr=o(" \u2014 "),GZ=a("a"),sOr=o("FlaxLongT5ForConditionalGeneration"),lOr=o(" (LongT5 model)"),iOr=l(),j5=a("li"),eCe=a("strong"),dOr=o("marian"),cOr=o(" \u2014 "),OZ=a("a"),fOr=o("FlaxMarianMTModel"),mOr=o(" (Marian model)"),gOr=l(),D5=a("li"),oCe=a("strong"),hOr=o("mbart"),pOr=o(" \u2014 "),VZ=a("a"),uOr=o("FlaxMBartForConditionalGeneration"),_Or=o(" (mBART model)"),bOr=l(),G5=a("li"),rCe=a("strong"),vOr=o("mt5"),FOr=o(" \u2014 "),XZ=a("a"),TOr=o("FlaxMT5ForConditionalGeneration"),MOr=o(" (MT5 model)"),EOr=l(),O5=a("li"),tCe=a("strong"),COr=o("pegasus"),wOr=o(" \u2014 "),zZ=a("a"),AOr=o("FlaxPegasusForConditionalGeneration"),LOr=o(" (Pegasus model)"),yOr=l(),V5=a("li"),aCe=a("strong"),xOr=o("t5"),$Or=o(" \u2014 "),WZ=a("a"),kOr=o("FlaxT5ForConditionalGeneration"),SOr=o(" (T5 model)"),ROr=l(),F(X5.$$.fragment),oVe=l(),rf=a("h2"),z5=a("a"),nCe=a("span"),F(Jx.$$.fragment),POr=l(),sCe=a("span"),BOr=o("FlaxAutoModelForSequenceClassification"),rVe=l(),br=a("div"),F(Yx.$$.fragment),IOr=l(),tf=a("p"),NOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QZ=a("a"),qOr=o("from_pretrained()"),jOr=o(" class method or the "),HZ=a("a"),DOr=o("from_config()"),GOr=o(` class
method.`),OOr=l(),Kx=a("p"),VOr=o("This class cannot be instantiated directly using "),lCe=a("code"),XOr=o("__init__()"),zOr=o(" (throws an error)."),WOr=l(),Ut=a("div"),F(Zx.$$.fragment),QOr=l(),iCe=a("p"),HOr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),UOr=l(),af=a("p"),JOr=o(`Note:
Loading a model from its configuration file does `),dCe=a("strong"),YOr=o("not"),KOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=a("a"),ZOr=o("from_pretrained()"),eVr=o(" to load the model weights."),oVr=l(),F(W5.$$.fragment),rVr=l(),Wr=a("div"),F(e$.$$.fragment),tVr=l(),cCe=a("p"),aVr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nVr=l(),Cn=a("p"),sVr=o("The model class to instantiate is selected based on the "),fCe=a("code"),lVr=o("model_type"),iVr=o(` property of the config object (either
passed as an argument or loaded from `),mCe=a("code"),dVr=o("pretrained_model_name_or_path"),cVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=a("code"),fVr=o("pretrained_model_name_or_path"),mVr=o(":"),gVr=l(),Se=a("ul"),Q5=a("li"),hCe=a("strong"),hVr=o("albert"),pVr=o(" \u2014 "),JZ=a("a"),uVr=o("FlaxAlbertForSequenceClassification"),_Vr=o(" (ALBERT model)"),bVr=l(),H5=a("li"),pCe=a("strong"),vVr=o("bart"),FVr=o(" \u2014 "),YZ=a("a"),TVr=o("FlaxBartForSequenceClassification"),MVr=o(" (BART model)"),EVr=l(),U5=a("li"),uCe=a("strong"),CVr=o("bert"),wVr=o(" \u2014 "),KZ=a("a"),AVr=o("FlaxBertForSequenceClassification"),LVr=o(" (BERT model)"),yVr=l(),J5=a("li"),_Ce=a("strong"),xVr=o("big_bird"),$Vr=o(" \u2014 "),ZZ=a("a"),kVr=o("FlaxBigBirdForSequenceClassification"),SVr=o(" (BigBird model)"),RVr=l(),Y5=a("li"),bCe=a("strong"),PVr=o("distilbert"),BVr=o(" \u2014 "),eee=a("a"),IVr=o("FlaxDistilBertForSequenceClassification"),NVr=o(" (DistilBERT model)"),qVr=l(),K5=a("li"),vCe=a("strong"),jVr=o("electra"),DVr=o(" \u2014 "),oee=a("a"),GVr=o("FlaxElectraForSequenceClassification"),OVr=o(" (ELECTRA model)"),VVr=l(),Z5=a("li"),FCe=a("strong"),XVr=o("mbart"),zVr=o(" \u2014 "),ree=a("a"),WVr=o("FlaxMBartForSequenceClassification"),QVr=o(" (mBART model)"),HVr=l(),e3=a("li"),TCe=a("strong"),UVr=o("roberta"),JVr=o(" \u2014 "),tee=a("a"),YVr=o("FlaxRobertaForSequenceClassification"),KVr=o(" (RoBERTa model)"),ZVr=l(),o3=a("li"),MCe=a("strong"),eXr=o("roformer"),oXr=o(" \u2014 "),aee=a("a"),rXr=o("FlaxRoFormerForSequenceClassification"),tXr=o(" (RoFormer model)"),aXr=l(),r3=a("li"),ECe=a("strong"),nXr=o("xlm-roberta"),sXr=o(" \u2014 "),nee=a("a"),lXr=o("FlaxXLMRobertaForSequenceClassification"),iXr=o(" (XLM-RoBERTa model)"),dXr=l(),F(t3.$$.fragment),tVe=l(),nf=a("h2"),a3=a("a"),CCe=a("span"),F(o$.$$.fragment),cXr=l(),wCe=a("span"),fXr=o("FlaxAutoModelForQuestionAnswering"),aVe=l(),vr=a("div"),F(r$.$$.fragment),mXr=l(),sf=a("p"),gXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),see=a("a"),hXr=o("from_pretrained()"),pXr=o(" class method or the "),lee=a("a"),uXr=o("from_config()"),_Xr=o(` class
method.`),bXr=l(),t$=a("p"),vXr=o("This class cannot be instantiated directly using "),ACe=a("code"),FXr=o("__init__()"),TXr=o(" (throws an error)."),MXr=l(),Jt=a("div"),F(a$.$$.fragment),EXr=l(),LCe=a("p"),CXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wXr=l(),lf=a("p"),AXr=o(`Note:
Loading a model from its configuration file does `),yCe=a("strong"),LXr=o("not"),yXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=a("a"),xXr=o("from_pretrained()"),$Xr=o(" to load the model weights."),kXr=l(),F(n3.$$.fragment),SXr=l(),Qr=a("div"),F(n$.$$.fragment),RXr=l(),xCe=a("p"),PXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BXr=l(),wn=a("p"),IXr=o("The model class to instantiate is selected based on the "),$Ce=a("code"),NXr=o("model_type"),qXr=o(` property of the config object (either
passed as an argument or loaded from `),kCe=a("code"),jXr=o("pretrained_model_name_or_path"),DXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=a("code"),GXr=o("pretrained_model_name_or_path"),OXr=o(":"),VXr=l(),Re=a("ul"),s3=a("li"),RCe=a("strong"),XXr=o("albert"),zXr=o(" \u2014 "),dee=a("a"),WXr=o("FlaxAlbertForQuestionAnswering"),QXr=o(" (ALBERT model)"),HXr=l(),l3=a("li"),PCe=a("strong"),UXr=o("bart"),JXr=o(" \u2014 "),cee=a("a"),YXr=o("FlaxBartForQuestionAnswering"),KXr=o(" (BART model)"),ZXr=l(),i3=a("li"),BCe=a("strong"),ezr=o("bert"),ozr=o(" \u2014 "),fee=a("a"),rzr=o("FlaxBertForQuestionAnswering"),tzr=o(" (BERT model)"),azr=l(),d3=a("li"),ICe=a("strong"),nzr=o("big_bird"),szr=o(" \u2014 "),mee=a("a"),lzr=o("FlaxBigBirdForQuestionAnswering"),izr=o(" (BigBird model)"),dzr=l(),c3=a("li"),NCe=a("strong"),czr=o("distilbert"),fzr=o(" \u2014 "),gee=a("a"),mzr=o("FlaxDistilBertForQuestionAnswering"),gzr=o(" (DistilBERT model)"),hzr=l(),f3=a("li"),qCe=a("strong"),pzr=o("electra"),uzr=o(" \u2014 "),hee=a("a"),_zr=o("FlaxElectraForQuestionAnswering"),bzr=o(" (ELECTRA model)"),vzr=l(),m3=a("li"),jCe=a("strong"),Fzr=o("mbart"),Tzr=o(" \u2014 "),pee=a("a"),Mzr=o("FlaxMBartForQuestionAnswering"),Ezr=o(" (mBART model)"),Czr=l(),g3=a("li"),DCe=a("strong"),wzr=o("roberta"),Azr=o(" \u2014 "),uee=a("a"),Lzr=o("FlaxRobertaForQuestionAnswering"),yzr=o(" (RoBERTa model)"),xzr=l(),h3=a("li"),GCe=a("strong"),$zr=o("roformer"),kzr=o(" \u2014 "),_ee=a("a"),Szr=o("FlaxRoFormerForQuestionAnswering"),Rzr=o(" (RoFormer model)"),Pzr=l(),p3=a("li"),OCe=a("strong"),Bzr=o("xlm-roberta"),Izr=o(" \u2014 "),bee=a("a"),Nzr=o("FlaxXLMRobertaForQuestionAnswering"),qzr=o(" (XLM-RoBERTa model)"),jzr=l(),F(u3.$$.fragment),nVe=l(),df=a("h2"),_3=a("a"),VCe=a("span"),F(s$.$$.fragment),Dzr=l(),XCe=a("span"),Gzr=o("FlaxAutoModelForTokenClassification"),sVe=l(),Fr=a("div"),F(l$.$$.fragment),Ozr=l(),cf=a("p"),Vzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vee=a("a"),Xzr=o("from_pretrained()"),zzr=o(" class method or the "),Fee=a("a"),Wzr=o("from_config()"),Qzr=o(` class
method.`),Hzr=l(),i$=a("p"),Uzr=o("This class cannot be instantiated directly using "),zCe=a("code"),Jzr=o("__init__()"),Yzr=o(" (throws an error)."),Kzr=l(),Yt=a("div"),F(d$.$$.fragment),Zzr=l(),WCe=a("p"),eWr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),oWr=l(),ff=a("p"),rWr=o(`Note:
Loading a model from its configuration file does `),QCe=a("strong"),tWr=o("not"),aWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=a("a"),nWr=o("from_pretrained()"),sWr=o(" to load the model weights."),lWr=l(),F(b3.$$.fragment),iWr=l(),Hr=a("div"),F(c$.$$.fragment),dWr=l(),HCe=a("p"),cWr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fWr=l(),An=a("p"),mWr=o("The model class to instantiate is selected based on the "),UCe=a("code"),gWr=o("model_type"),hWr=o(` property of the config object (either
passed as an argument or loaded from `),JCe=a("code"),pWr=o("pretrained_model_name_or_path"),uWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=a("code"),_Wr=o("pretrained_model_name_or_path"),bWr=o(":"),vWr=l(),Ve=a("ul"),v3=a("li"),KCe=a("strong"),FWr=o("albert"),TWr=o(" \u2014 "),Mee=a("a"),MWr=o("FlaxAlbertForTokenClassification"),EWr=o(" (ALBERT model)"),CWr=l(),F3=a("li"),ZCe=a("strong"),wWr=o("bert"),AWr=o(" \u2014 "),Eee=a("a"),LWr=o("FlaxBertForTokenClassification"),yWr=o(" (BERT model)"),xWr=l(),T3=a("li"),e5e=a("strong"),$Wr=o("big_bird"),kWr=o(" \u2014 "),Cee=a("a"),SWr=o("FlaxBigBirdForTokenClassification"),RWr=o(" (BigBird model)"),PWr=l(),M3=a("li"),o5e=a("strong"),BWr=o("distilbert"),IWr=o(" \u2014 "),wee=a("a"),NWr=o("FlaxDistilBertForTokenClassification"),qWr=o(" (DistilBERT model)"),jWr=l(),E3=a("li"),r5e=a("strong"),DWr=o("electra"),GWr=o(" \u2014 "),Aee=a("a"),OWr=o("FlaxElectraForTokenClassification"),VWr=o(" (ELECTRA model)"),XWr=l(),C3=a("li"),t5e=a("strong"),zWr=o("roberta"),WWr=o(" \u2014 "),Lee=a("a"),QWr=o("FlaxRobertaForTokenClassification"),HWr=o(" (RoBERTa model)"),UWr=l(),w3=a("li"),a5e=a("strong"),JWr=o("roformer"),YWr=o(" \u2014 "),yee=a("a"),KWr=o("FlaxRoFormerForTokenClassification"),ZWr=o(" (RoFormer model)"),eQr=l(),A3=a("li"),n5e=a("strong"),oQr=o("xlm-roberta"),rQr=o(" \u2014 "),xee=a("a"),tQr=o("FlaxXLMRobertaForTokenClassification"),aQr=o(" (XLM-RoBERTa model)"),nQr=l(),F(L3.$$.fragment),lVe=l(),mf=a("h2"),y3=a("a"),s5e=a("span"),F(f$.$$.fragment),sQr=l(),l5e=a("span"),lQr=o("FlaxAutoModelForMultipleChoice"),iVe=l(),Tr=a("div"),F(m$.$$.fragment),iQr=l(),gf=a("p"),dQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$ee=a("a"),cQr=o("from_pretrained()"),fQr=o(" class method or the "),kee=a("a"),mQr=o("from_config()"),gQr=o(` class
method.`),hQr=l(),g$=a("p"),pQr=o("This class cannot be instantiated directly using "),i5e=a("code"),uQr=o("__init__()"),_Qr=o(" (throws an error)."),bQr=l(),Kt=a("div"),F(h$.$$.fragment),vQr=l(),d5e=a("p"),FQr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TQr=l(),hf=a("p"),MQr=o(`Note:
Loading a model from its configuration file does `),c5e=a("strong"),EQr=o("not"),CQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),See=a("a"),wQr=o("from_pretrained()"),AQr=o(" to load the model weights."),LQr=l(),F(x3.$$.fragment),yQr=l(),Ur=a("div"),F(p$.$$.fragment),xQr=l(),f5e=a("p"),$Qr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kQr=l(),Ln=a("p"),SQr=o("The model class to instantiate is selected based on the "),m5e=a("code"),RQr=o("model_type"),PQr=o(` property of the config object (either
passed as an argument or loaded from `),g5e=a("code"),BQr=o("pretrained_model_name_or_path"),IQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=a("code"),NQr=o("pretrained_model_name_or_path"),qQr=o(":"),jQr=l(),Xe=a("ul"),$3=a("li"),p5e=a("strong"),DQr=o("albert"),GQr=o(" \u2014 "),Ree=a("a"),OQr=o("FlaxAlbertForMultipleChoice"),VQr=o(" (ALBERT model)"),XQr=l(),k3=a("li"),u5e=a("strong"),zQr=o("bert"),WQr=o(" \u2014 "),Pee=a("a"),QQr=o("FlaxBertForMultipleChoice"),HQr=o(" (BERT model)"),UQr=l(),S3=a("li"),_5e=a("strong"),JQr=o("big_bird"),YQr=o(" \u2014 "),Bee=a("a"),KQr=o("FlaxBigBirdForMultipleChoice"),ZQr=o(" (BigBird model)"),eHr=l(),R3=a("li"),b5e=a("strong"),oHr=o("distilbert"),rHr=o(" \u2014 "),Iee=a("a"),tHr=o("FlaxDistilBertForMultipleChoice"),aHr=o(" (DistilBERT model)"),nHr=l(),P3=a("li"),v5e=a("strong"),sHr=o("electra"),lHr=o(" \u2014 "),Nee=a("a"),iHr=o("FlaxElectraForMultipleChoice"),dHr=o(" (ELECTRA model)"),cHr=l(),B3=a("li"),F5e=a("strong"),fHr=o("roberta"),mHr=o(" \u2014 "),qee=a("a"),gHr=o("FlaxRobertaForMultipleChoice"),hHr=o(" (RoBERTa model)"),pHr=l(),I3=a("li"),T5e=a("strong"),uHr=o("roformer"),_Hr=o(" \u2014 "),jee=a("a"),bHr=o("FlaxRoFormerForMultipleChoice"),vHr=o(" (RoFormer model)"),FHr=l(),N3=a("li"),M5e=a("strong"),THr=o("xlm-roberta"),MHr=o(" \u2014 "),Dee=a("a"),EHr=o("FlaxXLMRobertaForMultipleChoice"),CHr=o(" (XLM-RoBERTa model)"),wHr=l(),F(q3.$$.fragment),dVe=l(),pf=a("h2"),j3=a("a"),E5e=a("span"),F(u$.$$.fragment),AHr=l(),C5e=a("span"),LHr=o("FlaxAutoModelForNextSentencePrediction"),cVe=l(),Mr=a("div"),F(_$.$$.fragment),yHr=l(),uf=a("p"),xHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Gee=a("a"),$Hr=o("from_pretrained()"),kHr=o(" class method or the "),Oee=a("a"),SHr=o("from_config()"),RHr=o(` class
method.`),PHr=l(),b$=a("p"),BHr=o("This class cannot be instantiated directly using "),w5e=a("code"),IHr=o("__init__()"),NHr=o(" (throws an error)."),qHr=l(),Zt=a("div"),F(v$.$$.fragment),jHr=l(),A5e=a("p"),DHr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),GHr=l(),_f=a("p"),OHr=o(`Note:
Loading a model from its configuration file does `),L5e=a("strong"),VHr=o("not"),XHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=a("a"),zHr=o("from_pretrained()"),WHr=o(" to load the model weights."),QHr=l(),F(D3.$$.fragment),HHr=l(),Jr=a("div"),F(F$.$$.fragment),UHr=l(),y5e=a("p"),JHr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),YHr=l(),yn=a("p"),KHr=o("The model class to instantiate is selected based on the "),x5e=a("code"),ZHr=o("model_type"),eUr=o(` property of the config object (either
passed as an argument or loaded from `),$5e=a("code"),oUr=o("pretrained_model_name_or_path"),rUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=a("code"),tUr=o("pretrained_model_name_or_path"),aUr=o(":"),nUr=l(),S5e=a("ul"),G3=a("li"),R5e=a("strong"),sUr=o("bert"),lUr=o(" \u2014 "),Xee=a("a"),iUr=o("FlaxBertForNextSentencePrediction"),dUr=o(" (BERT model)"),cUr=l(),F(O3.$$.fragment),fVe=l(),bf=a("h2"),V3=a("a"),P5e=a("span"),F(T$.$$.fragment),fUr=l(),B5e=a("span"),mUr=o("FlaxAutoModelForImageClassification"),mVe=l(),Er=a("div"),F(M$.$$.fragment),gUr=l(),vf=a("p"),hUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zee=a("a"),pUr=o("from_pretrained()"),uUr=o(" class method or the "),Wee=a("a"),_Ur=o("from_config()"),bUr=o(` class
method.`),vUr=l(),E$=a("p"),FUr=o("This class cannot be instantiated directly using "),I5e=a("code"),TUr=o("__init__()"),MUr=o(" (throws an error)."),EUr=l(),ea=a("div"),F(C$.$$.fragment),CUr=l(),N5e=a("p"),wUr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),AUr=l(),Ff=a("p"),LUr=o(`Note:
Loading a model from its configuration file does `),q5e=a("strong"),yUr=o("not"),xUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=a("a"),$Ur=o("from_pretrained()"),kUr=o(" to load the model weights."),SUr=l(),F(X3.$$.fragment),RUr=l(),Yr=a("div"),F(w$.$$.fragment),PUr=l(),j5e=a("p"),BUr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),IUr=l(),xn=a("p"),NUr=o("The model class to instantiate is selected based on the "),D5e=a("code"),qUr=o("model_type"),jUr=o(` property of the config object (either
passed as an argument or loaded from `),G5e=a("code"),DUr=o("pretrained_model_name_or_path"),GUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O5e=a("code"),OUr=o("pretrained_model_name_or_path"),VUr=o(":"),XUr=l(),A$=a("ul"),z3=a("li"),V5e=a("strong"),zUr=o("beit"),WUr=o(" \u2014 "),Hee=a("a"),QUr=o("FlaxBeitForImageClassification"),HUr=o(" (BEiT model)"),UUr=l(),W3=a("li"),X5e=a("strong"),JUr=o("vit"),YUr=o(" \u2014 "),Uee=a("a"),KUr=o("FlaxViTForImageClassification"),ZUr=o(" (ViT model)"),eJr=l(),F(Q3.$$.fragment),gVe=l(),Tf=a("h2"),H3=a("a"),z5e=a("span"),F(L$.$$.fragment),oJr=l(),W5e=a("span"),rJr=o("FlaxAutoModelForVision2Seq"),hVe=l(),Cr=a("div"),F(y$.$$.fragment),tJr=l(),Mf=a("p"),aJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Jee=a("a"),nJr=o("from_pretrained()"),sJr=o(" class method or the "),Yee=a("a"),lJr=o("from_config()"),iJr=o(` class
method.`),dJr=l(),x$=a("p"),cJr=o("This class cannot be instantiated directly using "),Q5e=a("code"),fJr=o("__init__()"),mJr=o(" (throws an error)."),gJr=l(),oa=a("div"),F($$.$$.fragment),hJr=l(),H5e=a("p"),pJr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uJr=l(),Ef=a("p"),_Jr=o(`Note:
Loading a model from its configuration file does `),U5e=a("strong"),bJr=o("not"),vJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=a("a"),FJr=o("from_pretrained()"),TJr=o(" to load the model weights."),MJr=l(),F(U3.$$.fragment),EJr=l(),Kr=a("div"),F(k$.$$.fragment),CJr=l(),J5e=a("p"),wJr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),AJr=l(),$n=a("p"),LJr=o("The model class to instantiate is selected based on the "),Y5e=a("code"),yJr=o("model_type"),xJr=o(` property of the config object (either
passed as an argument or loaded from `),K5e=a("code"),$Jr=o("pretrained_model_name_or_path"),kJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=a("code"),SJr=o("pretrained_model_name_or_path"),RJr=o(":"),PJr=l(),e3e=a("ul"),J3=a("li"),o3e=a("strong"),BJr=o("vision-encoder-decoder"),IJr=o(" \u2014 "),Zee=a("a"),NJr=o("FlaxVisionEncoderDecoderModel"),qJr=o(" (Vision Encoder decoder model)"),jJr=l(),F(Y3.$$.fragment),this.h()},l(f){const _=Uqt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var S$=s(p);m=n(S$,"A",{id:!0,class:!0,href:!0});var r3e=s(m);u=n(r3e,"SPAN",{});var t3e=s(u);T(d.$$.fragment,t3e),t3e.forEach(t),r3e.forEach(t),h=i(S$),Eo=n(S$,"SPAN",{});var a3e=s(Eo);Fi=r(a3e,"Auto Classes"),a3e.forEach(t),S$.forEach(t),Lf=i(f),at=n(f,"P",{});var R$=s(at);Ti=r(R$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=n(R$,"CODE",{});var n3e=s(Mi);bA=r(n3e,"from_pretrained()"),n3e.forEach(t),yf=r(R$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),R$.forEach(t),Oe=i(f),We=n(f,"P",{});var kn=s(We);Ei=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var s3e=s(Sn);vA=r(s3e,"AutoConfig"),s3e.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var l3e=s(Pn);FA=r(l3e,"AutoModel"),l3e.forEach(t),Ci=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var i3e=s(Bn);TA=r(i3e,"AutoTokenizer"),i3e.forEach(t),wi=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),xf=i(f),T(ya.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var P$=s(Ae);Hk=r(P$,"will create a model that is an instance of "),Ai=n(P$,"A",{href:!0});var d3e=s(Ai);Uk=r(d3e,"BertModel"),d3e.forEach(t),Jk=r(P$,"."),P$.forEach(t),Co=i(f),xa=n(f,"P",{});var B$=s(xa);Yk=r(B$,"There is one class of "),$f=n(B$,"CODE",{});var c3e=s($f);Kk=r(c3e,"AutoModel"),c3e.forEach(t),wze=r(B$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),B$.forEach(t),cGe=i(f),Li=n(f,"H2",{class:!0});var I$=s(Li);kf=n(I$,"A",{id:!0,class:!0,href:!0});var f3e=s(kf);Hre=n(f3e,"SPAN",{});var m3e=s(Hre);T(MA.$$.fragment,m3e),m3e.forEach(t),f3e.forEach(t),Aze=i(I$),Ure=n(I$,"SPAN",{});var g3e=s(Ure);Lze=r(g3e,"Extending the Auto Classes"),g3e.forEach(t),I$.forEach(t),fGe=i(f),In=n(f,"P",{});var Cf=s(In);yze=r(Cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Jre=n(Cf,"CODE",{});var h3e=s(Jre);xze=r(h3e,"NewModel"),h3e.forEach(t),$ze=r(Cf,", make sure you have a "),Yre=n(Cf,"CODE",{});var p3e=s(Yre);kze=r(p3e,"NewModelConfig"),p3e.forEach(t),Sze=r(Cf,` then you can add those to the auto
classes like this:`),Cf.forEach(t),mGe=i(f),T(EA.$$.fragment,f),gGe=i(f),Zk=n(f,"P",{});var u3e=s(Zk);Rze=r(u3e,"You will then be able to use the auto classes like you would usually do!"),u3e.forEach(t),hGe=i(f),T(Sf.$$.fragment,f),pGe=i(f),yi=n(f,"H2",{class:!0});var N$=s(yi);Rf=n(N$,"A",{id:!0,class:!0,href:!0});var _3e=s(Rf);Kre=n(_3e,"SPAN",{});var b3e=s(Kre);T(CA.$$.fragment,b3e),b3e.forEach(t),_3e.forEach(t),Pze=i(N$),Zre=n(N$,"SPAN",{});var v3e=s(Zre);Bze=r(v3e,"AutoConfig"),v3e.forEach(t),N$.forEach(t),uGe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(wA.$$.fragment,rt),Ize=i(rt),AA=n(rt,"P",{});var q$=s(AA);Nze=r(q$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),eS=n(q$,"A",{href:!0});var F3e=s(eS);qze=r(F3e,"from_pretrained()"),F3e.forEach(t),jze=r(q$," class method."),q$.forEach(t),Dze=i(rt),LA=n(rt,"P",{});var j$=s(LA);Gze=r(j$,"This class cannot be instantiated directly using "),ete=n(j$,"CODE",{});var T3e=s(ete);Oze=r(T3e,"__init__()"),T3e.forEach(t),Vze=r(j$," (throws an error)."),j$.forEach(t),Xze=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(yA.$$.fragment,tt),zze=i(tt),ote=n(tt,"P",{});var M3e=s(ote);Wze=r(M3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),M3e.forEach(t),Qze=i(tt),xi=n(tt,"P",{});var wf=s(xi);Hze=r(wf,"The configuration class to instantiate is selected based on the "),rte=n(wf,"CODE",{});var E3e=s(rte);Uze=r(E3e,"model_type"),E3e.forEach(t),Jze=r(wf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tte=n(wf,"CODE",{});var C3e=s(tte);Yze=r(C3e,"pretrained_model_name_or_path"),C3e.forEach(t),Kze=r(wf,":"),wf.forEach(t),Zze=i(tt),A=n(tt,"UL",{});var L=s(A);Pf=n(L,"LI",{});var K3=s(Pf);ate=n(K3,"STRONG",{});var w3e=s(ate);eWe=r(w3e,"albert"),w3e.forEach(t),oWe=r(K3," \u2014 "),oS=n(K3,"A",{href:!0});var A3e=s(oS);rWe=r(A3e,"AlbertConfig"),A3e.forEach(t),tWe=r(K3," (ALBERT model)"),K3.forEach(t),aWe=i(L),Bf=n(L,"LI",{});var Z3=s(Bf);nte=n(Z3,"STRONG",{});var L3e=s(nte);nWe=r(L3e,"bart"),L3e.forEach(t),sWe=r(Z3," \u2014 "),rS=n(Z3,"A",{href:!0});var y3e=s(rS);lWe=r(y3e,"BartConfig"),y3e.forEach(t),iWe=r(Z3," (BART model)"),Z3.forEach(t),dWe=i(L),If=n(L,"LI",{});var e0=s(If);ste=n(e0,"STRONG",{});var x3e=s(ste);cWe=r(x3e,"beit"),x3e.forEach(t),fWe=r(e0," \u2014 "),tS=n(e0,"A",{href:!0});var $3e=s(tS);mWe=r($3e,"BeitConfig"),$3e.forEach(t),gWe=r(e0," (BEiT model)"),e0.forEach(t),hWe=i(L),Nf=n(L,"LI",{});var o0=s(Nf);lte=n(o0,"STRONG",{});var k3e=s(lte);pWe=r(k3e,"bert"),k3e.forEach(t),uWe=r(o0," \u2014 "),aS=n(o0,"A",{href:!0});var S3e=s(aS);_We=r(S3e,"BertConfig"),S3e.forEach(t),bWe=r(o0," (BERT model)"),o0.forEach(t),vWe=i(L),qf=n(L,"LI",{});var r0=s(qf);ite=n(r0,"STRONG",{});var R3e=s(ite);FWe=r(R3e,"bert-generation"),R3e.forEach(t),TWe=r(r0," \u2014 "),nS=n(r0,"A",{href:!0});var P3e=s(nS);MWe=r(P3e,"BertGenerationConfig"),P3e.forEach(t),EWe=r(r0," (Bert Generation model)"),r0.forEach(t),CWe=i(L),jf=n(L,"LI",{});var t0=s(jf);dte=n(t0,"STRONG",{});var B3e=s(dte);wWe=r(B3e,"big_bird"),B3e.forEach(t),AWe=r(t0," \u2014 "),sS=n(t0,"A",{href:!0});var I3e=s(sS);LWe=r(I3e,"BigBirdConfig"),I3e.forEach(t),yWe=r(t0," (BigBird model)"),t0.forEach(t),xWe=i(L),Df=n(L,"LI",{});var a0=s(Df);cte=n(a0,"STRONG",{});var N3e=s(cte);$We=r(N3e,"bigbird_pegasus"),N3e.forEach(t),kWe=r(a0," \u2014 "),lS=n(a0,"A",{href:!0});var q3e=s(lS);SWe=r(q3e,"BigBirdPegasusConfig"),q3e.forEach(t),RWe=r(a0," (BigBird-Pegasus model)"),a0.forEach(t),PWe=i(L),Gf=n(L,"LI",{});var n0=s(Gf);fte=n(n0,"STRONG",{});var j3e=s(fte);BWe=r(j3e,"blenderbot"),j3e.forEach(t),IWe=r(n0," \u2014 "),iS=n(n0,"A",{href:!0});var D3e=s(iS);NWe=r(D3e,"BlenderbotConfig"),D3e.forEach(t),qWe=r(n0," (Blenderbot model)"),n0.forEach(t),jWe=i(L),Of=n(L,"LI",{});var s0=s(Of);mte=n(s0,"STRONG",{});var G3e=s(mte);DWe=r(G3e,"blenderbot-small"),G3e.forEach(t),GWe=r(s0," \u2014 "),dS=n(s0,"A",{href:!0});var O3e=s(dS);OWe=r(O3e,"BlenderbotSmallConfig"),O3e.forEach(t),VWe=r(s0," (BlenderbotSmall model)"),s0.forEach(t),XWe=i(L),Vf=n(L,"LI",{});var l0=s(Vf);gte=n(l0,"STRONG",{});var V3e=s(gte);zWe=r(V3e,"bloom"),V3e.forEach(t),WWe=r(l0," \u2014 "),cS=n(l0,"A",{href:!0});var X3e=s(cS);QWe=r(X3e,"BloomConfig"),X3e.forEach(t),HWe=r(l0," (BLOOM model)"),l0.forEach(t),UWe=i(L),Xf=n(L,"LI",{});var i0=s(Xf);hte=n(i0,"STRONG",{});var z3e=s(hte);JWe=r(z3e,"camembert"),z3e.forEach(t),YWe=r(i0," \u2014 "),fS=n(i0,"A",{href:!0});var W3e=s(fS);KWe=r(W3e,"CamembertConfig"),W3e.forEach(t),ZWe=r(i0," (CamemBERT model)"),i0.forEach(t),eQe=i(L),zf=n(L,"LI",{});var d0=s(zf);pte=n(d0,"STRONG",{});var Q3e=s(pte);oQe=r(Q3e,"canine"),Q3e.forEach(t),rQe=r(d0," \u2014 "),mS=n(d0,"A",{href:!0});var H3e=s(mS);tQe=r(H3e,"CanineConfig"),H3e.forEach(t),aQe=r(d0," (CANINE model)"),d0.forEach(t),nQe=i(L),Wf=n(L,"LI",{});var c0=s(Wf);ute=n(c0,"STRONG",{});var U3e=s(ute);sQe=r(U3e,"clip"),U3e.forEach(t),lQe=r(c0," \u2014 "),gS=n(c0,"A",{href:!0});var J3e=s(gS);iQe=r(J3e,"CLIPConfig"),J3e.forEach(t),dQe=r(c0," (CLIP model)"),c0.forEach(t),cQe=i(L),Qf=n(L,"LI",{});var f0=s(Qf);_te=n(f0,"STRONG",{});var Y3e=s(_te);fQe=r(Y3e,"convbert"),Y3e.forEach(t),mQe=r(f0," \u2014 "),hS=n(f0,"A",{href:!0});var K3e=s(hS);gQe=r(K3e,"ConvBertConfig"),K3e.forEach(t),hQe=r(f0," (ConvBERT model)"),f0.forEach(t),pQe=i(L),Hf=n(L,"LI",{});var m0=s(Hf);bte=n(m0,"STRONG",{});var Z3e=s(bte);uQe=r(Z3e,"convnext"),Z3e.forEach(t),_Qe=r(m0," \u2014 "),pS=n(m0,"A",{href:!0});var e0e=s(pS);bQe=r(e0e,"ConvNextConfig"),e0e.forEach(t),vQe=r(m0," (ConvNeXT model)"),m0.forEach(t),FQe=i(L),Uf=n(L,"LI",{});var g0=s(Uf);vte=n(g0,"STRONG",{});var o0e=s(vte);TQe=r(o0e,"ctrl"),o0e.forEach(t),MQe=r(g0," \u2014 "),uS=n(g0,"A",{href:!0});var r0e=s(uS);EQe=r(r0e,"CTRLConfig"),r0e.forEach(t),CQe=r(g0," (CTRL model)"),g0.forEach(t),wQe=i(L),Jf=n(L,"LI",{});var h0=s(Jf);Fte=n(h0,"STRONG",{});var t0e=s(Fte);AQe=r(t0e,"cvt"),t0e.forEach(t),LQe=r(h0," \u2014 "),_S=n(h0,"A",{href:!0});var a0e=s(_S);yQe=r(a0e,"CvtConfig"),a0e.forEach(t),xQe=r(h0," (CvT model)"),h0.forEach(t),$Qe=i(L),Yf=n(L,"LI",{});var p0=s(Yf);Tte=n(p0,"STRONG",{});var n0e=s(Tte);kQe=r(n0e,"data2vec-audio"),n0e.forEach(t),SQe=r(p0," \u2014 "),bS=n(p0,"A",{href:!0});var s0e=s(bS);RQe=r(s0e,"Data2VecAudioConfig"),s0e.forEach(t),PQe=r(p0," (Data2VecAudio model)"),p0.forEach(t),BQe=i(L),Kf=n(L,"LI",{});var u0=s(Kf);Mte=n(u0,"STRONG",{});var l0e=s(Mte);IQe=r(l0e,"data2vec-text"),l0e.forEach(t),NQe=r(u0," \u2014 "),vS=n(u0,"A",{href:!0});var i0e=s(vS);qQe=r(i0e,"Data2VecTextConfig"),i0e.forEach(t),jQe=r(u0," (Data2VecText model)"),u0.forEach(t),DQe=i(L),Zf=n(L,"LI",{});var _0=s(Zf);Ete=n(_0,"STRONG",{});var d0e=s(Ete);GQe=r(d0e,"data2vec-vision"),d0e.forEach(t),OQe=r(_0," \u2014 "),FS=n(_0,"A",{href:!0});var c0e=s(FS);VQe=r(c0e,"Data2VecVisionConfig"),c0e.forEach(t),XQe=r(_0," (Data2VecVision model)"),_0.forEach(t),zQe=i(L),em=n(L,"LI",{});var b0=s(em);Cte=n(b0,"STRONG",{});var f0e=s(Cte);WQe=r(f0e,"deberta"),f0e.forEach(t),QQe=r(b0," \u2014 "),TS=n(b0,"A",{href:!0});var m0e=s(TS);HQe=r(m0e,"DebertaConfig"),m0e.forEach(t),UQe=r(b0," (DeBERTa model)"),b0.forEach(t),JQe=i(L),om=n(L,"LI",{});var v0=s(om);wte=n(v0,"STRONG",{});var g0e=s(wte);YQe=r(g0e,"deberta-v2"),g0e.forEach(t),KQe=r(v0," \u2014 "),MS=n(v0,"A",{href:!0});var h0e=s(MS);ZQe=r(h0e,"DebertaV2Config"),h0e.forEach(t),eHe=r(v0," (DeBERTa-v2 model)"),v0.forEach(t),oHe=i(L),rm=n(L,"LI",{});var F0=s(rm);Ate=n(F0,"STRONG",{});var p0e=s(Ate);rHe=r(p0e,"decision_transformer"),p0e.forEach(t),tHe=r(F0," \u2014 "),ES=n(F0,"A",{href:!0});var u0e=s(ES);aHe=r(u0e,"DecisionTransformerConfig"),u0e.forEach(t),nHe=r(F0," (Decision Transformer model)"),F0.forEach(t),sHe=i(L),tm=n(L,"LI",{});var T0=s(tm);Lte=n(T0,"STRONG",{});var GJr=s(Lte);lHe=r(GJr,"deit"),GJr.forEach(t),iHe=r(T0," \u2014 "),CS=n(T0,"A",{href:!0});var OJr=s(CS);dHe=r(OJr,"DeiTConfig"),OJr.forEach(t),cHe=r(T0," (DeiT model)"),T0.forEach(t),fHe=i(L),am=n(L,"LI",{});var _0e=s(am);yte=n(_0e,"STRONG",{});var VJr=s(yte);mHe=r(VJr,"detr"),VJr.forEach(t),gHe=r(_0e," \u2014 "),wS=n(_0e,"A",{href:!0});var XJr=s(wS);hHe=r(XJr,"DetrConfig"),XJr.forEach(t),pHe=r(_0e," (DETR model)"),_0e.forEach(t),uHe=i(L),nm=n(L,"LI",{});var b0e=s(nm);xte=n(b0e,"STRONG",{});var zJr=s(xte);_He=r(zJr,"distilbert"),zJr.forEach(t),bHe=r(b0e," \u2014 "),AS=n(b0e,"A",{href:!0});var WJr=s(AS);vHe=r(WJr,"DistilBertConfig"),WJr.forEach(t),FHe=r(b0e," (DistilBERT model)"),b0e.forEach(t),THe=i(L),sm=n(L,"LI",{});var v0e=s(sm);$te=n(v0e,"STRONG",{});var QJr=s($te);MHe=r(QJr,"dpr"),QJr.forEach(t),EHe=r(v0e," \u2014 "),LS=n(v0e,"A",{href:!0});var HJr=s(LS);CHe=r(HJr,"DPRConfig"),HJr.forEach(t),wHe=r(v0e," (DPR model)"),v0e.forEach(t),AHe=i(L),lm=n(L,"LI",{});var F0e=s(lm);kte=n(F0e,"STRONG",{});var UJr=s(kte);LHe=r(UJr,"dpt"),UJr.forEach(t),yHe=r(F0e," \u2014 "),yS=n(F0e,"A",{href:!0});var JJr=s(yS);xHe=r(JJr,"DPTConfig"),JJr.forEach(t),$He=r(F0e," (DPT model)"),F0e.forEach(t),kHe=i(L),im=n(L,"LI",{});var T0e=s(im);Ste=n(T0e,"STRONG",{});var YJr=s(Ste);SHe=r(YJr,"electra"),YJr.forEach(t),RHe=r(T0e," \u2014 "),xS=n(T0e,"A",{href:!0});var KJr=s(xS);PHe=r(KJr,"ElectraConfig"),KJr.forEach(t),BHe=r(T0e," (ELECTRA model)"),T0e.forEach(t),IHe=i(L),dm=n(L,"LI",{});var M0e=s(dm);Rte=n(M0e,"STRONG",{});var ZJr=s(Rte);NHe=r(ZJr,"encoder-decoder"),ZJr.forEach(t),qHe=r(M0e," \u2014 "),$S=n(M0e,"A",{href:!0});var eYr=s($S);jHe=r(eYr,"EncoderDecoderConfig"),eYr.forEach(t),DHe=r(M0e," (Encoder decoder model)"),M0e.forEach(t),GHe=i(L),cm=n(L,"LI",{});var E0e=s(cm);Pte=n(E0e,"STRONG",{});var oYr=s(Pte);OHe=r(oYr,"flaubert"),oYr.forEach(t),VHe=r(E0e," \u2014 "),kS=n(E0e,"A",{href:!0});var rYr=s(kS);XHe=r(rYr,"FlaubertConfig"),rYr.forEach(t),zHe=r(E0e," (FlauBERT model)"),E0e.forEach(t),WHe=i(L),fm=n(L,"LI",{});var C0e=s(fm);Bte=n(C0e,"STRONG",{});var tYr=s(Bte);QHe=r(tYr,"flava"),tYr.forEach(t),HHe=r(C0e," \u2014 "),SS=n(C0e,"A",{href:!0});var aYr=s(SS);UHe=r(aYr,"FlavaConfig"),aYr.forEach(t),JHe=r(C0e," (FLAVA model)"),C0e.forEach(t),YHe=i(L),mm=n(L,"LI",{});var w0e=s(mm);Ite=n(w0e,"STRONG",{});var nYr=s(Ite);KHe=r(nYr,"fnet"),nYr.forEach(t),ZHe=r(w0e," \u2014 "),RS=n(w0e,"A",{href:!0});var sYr=s(RS);eUe=r(sYr,"FNetConfig"),sYr.forEach(t),oUe=r(w0e," (FNet model)"),w0e.forEach(t),rUe=i(L),gm=n(L,"LI",{});var A0e=s(gm);Nte=n(A0e,"STRONG",{});var lYr=s(Nte);tUe=r(lYr,"fsmt"),lYr.forEach(t),aUe=r(A0e," \u2014 "),PS=n(A0e,"A",{href:!0});var iYr=s(PS);nUe=r(iYr,"FSMTConfig"),iYr.forEach(t),sUe=r(A0e," (FairSeq Machine-Translation model)"),A0e.forEach(t),lUe=i(L),hm=n(L,"LI",{});var L0e=s(hm);qte=n(L0e,"STRONG",{});var dYr=s(qte);iUe=r(dYr,"funnel"),dYr.forEach(t),dUe=r(L0e," \u2014 "),BS=n(L0e,"A",{href:!0});var cYr=s(BS);cUe=r(cYr,"FunnelConfig"),cYr.forEach(t),fUe=r(L0e," (Funnel Transformer model)"),L0e.forEach(t),mUe=i(L),pm=n(L,"LI",{});var y0e=s(pm);jte=n(y0e,"STRONG",{});var fYr=s(jte);gUe=r(fYr,"glpn"),fYr.forEach(t),hUe=r(y0e," \u2014 "),IS=n(y0e,"A",{href:!0});var mYr=s(IS);pUe=r(mYr,"GLPNConfig"),mYr.forEach(t),uUe=r(y0e," (GLPN model)"),y0e.forEach(t),_Ue=i(L),um=n(L,"LI",{});var x0e=s(um);Dte=n(x0e,"STRONG",{});var gYr=s(Dte);bUe=r(gYr,"gpt2"),gYr.forEach(t),vUe=r(x0e," \u2014 "),NS=n(x0e,"A",{href:!0});var hYr=s(NS);FUe=r(hYr,"GPT2Config"),hYr.forEach(t),TUe=r(x0e," (OpenAI GPT-2 model)"),x0e.forEach(t),MUe=i(L),_m=n(L,"LI",{});var $0e=s(_m);Gte=n($0e,"STRONG",{});var pYr=s(Gte);EUe=r(pYr,"gpt_neo"),pYr.forEach(t),CUe=r($0e," \u2014 "),qS=n($0e,"A",{href:!0});var uYr=s(qS);wUe=r(uYr,"GPTNeoConfig"),uYr.forEach(t),AUe=r($0e," (GPT Neo model)"),$0e.forEach(t),LUe=i(L),bm=n(L,"LI",{});var k0e=s(bm);Ote=n(k0e,"STRONG",{});var _Yr=s(Ote);yUe=r(_Yr,"gpt_neox"),_Yr.forEach(t),xUe=r(k0e," \u2014 "),jS=n(k0e,"A",{href:!0});var bYr=s(jS);$Ue=r(bYr,"GPTNeoXConfig"),bYr.forEach(t),kUe=r(k0e," (GPT NeoX model)"),k0e.forEach(t),SUe=i(L),vm=n(L,"LI",{});var S0e=s(vm);Vte=n(S0e,"STRONG",{});var vYr=s(Vte);RUe=r(vYr,"gptj"),vYr.forEach(t),PUe=r(S0e," \u2014 "),DS=n(S0e,"A",{href:!0});var FYr=s(DS);BUe=r(FYr,"GPTJConfig"),FYr.forEach(t),IUe=r(S0e," (GPT-J model)"),S0e.forEach(t),NUe=i(L),Fm=n(L,"LI",{});var R0e=s(Fm);Xte=n(R0e,"STRONG",{});var TYr=s(Xte);qUe=r(TYr,"hubert"),TYr.forEach(t),jUe=r(R0e," \u2014 "),GS=n(R0e,"A",{href:!0});var MYr=s(GS);DUe=r(MYr,"HubertConfig"),MYr.forEach(t),GUe=r(R0e," (Hubert model)"),R0e.forEach(t),OUe=i(L),Tm=n(L,"LI",{});var P0e=s(Tm);zte=n(P0e,"STRONG",{});var EYr=s(zte);VUe=r(EYr,"ibert"),EYr.forEach(t),XUe=r(P0e," \u2014 "),OS=n(P0e,"A",{href:!0});var CYr=s(OS);zUe=r(CYr,"IBertConfig"),CYr.forEach(t),WUe=r(P0e," (I-BERT model)"),P0e.forEach(t),QUe=i(L),Mm=n(L,"LI",{});var B0e=s(Mm);Wte=n(B0e,"STRONG",{});var wYr=s(Wte);HUe=r(wYr,"imagegpt"),wYr.forEach(t),UUe=r(B0e," \u2014 "),VS=n(B0e,"A",{href:!0});var AYr=s(VS);JUe=r(AYr,"ImageGPTConfig"),AYr.forEach(t),YUe=r(B0e," (ImageGPT model)"),B0e.forEach(t),KUe=i(L),Em=n(L,"LI",{});var I0e=s(Em);Qte=n(I0e,"STRONG",{});var LYr=s(Qte);ZUe=r(LYr,"jukebox"),LYr.forEach(t),eJe=r(I0e," \u2014 "),XS=n(I0e,"A",{href:!0});var yYr=s(XS);oJe=r(yYr,"JukeboxConfig"),yYr.forEach(t),rJe=r(I0e," (Jukebox model)"),I0e.forEach(t),tJe=i(L),Cm=n(L,"LI",{});var N0e=s(Cm);Hte=n(N0e,"STRONG",{});var xYr=s(Hte);aJe=r(xYr,"layoutlm"),xYr.forEach(t),nJe=r(N0e," \u2014 "),zS=n(N0e,"A",{href:!0});var $Yr=s(zS);sJe=r($Yr,"LayoutLMConfig"),$Yr.forEach(t),lJe=r(N0e," (LayoutLM model)"),N0e.forEach(t),iJe=i(L),wm=n(L,"LI",{});var q0e=s(wm);Ute=n(q0e,"STRONG",{});var kYr=s(Ute);dJe=r(kYr,"layoutlmv2"),kYr.forEach(t),cJe=r(q0e," \u2014 "),WS=n(q0e,"A",{href:!0});var SYr=s(WS);fJe=r(SYr,"LayoutLMv2Config"),SYr.forEach(t),mJe=r(q0e," (LayoutLMv2 model)"),q0e.forEach(t),gJe=i(L),Am=n(L,"LI",{});var j0e=s(Am);Jte=n(j0e,"STRONG",{});var RYr=s(Jte);hJe=r(RYr,"layoutlmv3"),RYr.forEach(t),pJe=r(j0e," \u2014 "),QS=n(j0e,"A",{href:!0});var PYr=s(QS);uJe=r(PYr,"LayoutLMv3Config"),PYr.forEach(t),_Je=r(j0e," (LayoutLMv3 model)"),j0e.forEach(t),bJe=i(L),Lm=n(L,"LI",{});var D0e=s(Lm);Yte=n(D0e,"STRONG",{});var BYr=s(Yte);vJe=r(BYr,"led"),BYr.forEach(t),FJe=r(D0e," \u2014 "),HS=n(D0e,"A",{href:!0});var IYr=s(HS);TJe=r(IYr,"LEDConfig"),IYr.forEach(t),MJe=r(D0e," (LED model)"),D0e.forEach(t),EJe=i(L),ym=n(L,"LI",{});var G0e=s(ym);Kte=n(G0e,"STRONG",{});var NYr=s(Kte);CJe=r(NYr,"levit"),NYr.forEach(t),wJe=r(G0e," \u2014 "),US=n(G0e,"A",{href:!0});var qYr=s(US);AJe=r(qYr,"LevitConfig"),qYr.forEach(t),LJe=r(G0e," (LeViT model)"),G0e.forEach(t),yJe=i(L),xm=n(L,"LI",{});var O0e=s(xm);Zte=n(O0e,"STRONG",{});var jYr=s(Zte);xJe=r(jYr,"longformer"),jYr.forEach(t),$Je=r(O0e," \u2014 "),JS=n(O0e,"A",{href:!0});var DYr=s(JS);kJe=r(DYr,"LongformerConfig"),DYr.forEach(t),SJe=r(O0e," (Longformer model)"),O0e.forEach(t),RJe=i(L),$m=n(L,"LI",{});var V0e=s($m);eae=n(V0e,"STRONG",{});var GYr=s(eae);PJe=r(GYr,"longt5"),GYr.forEach(t),BJe=r(V0e," \u2014 "),YS=n(V0e,"A",{href:!0});var OYr=s(YS);IJe=r(OYr,"LongT5Config"),OYr.forEach(t),NJe=r(V0e," (LongT5 model)"),V0e.forEach(t),qJe=i(L),km=n(L,"LI",{});var X0e=s(km);oae=n(X0e,"STRONG",{});var VYr=s(oae);jJe=r(VYr,"luke"),VYr.forEach(t),DJe=r(X0e," \u2014 "),KS=n(X0e,"A",{href:!0});var XYr=s(KS);GJe=r(XYr,"LukeConfig"),XYr.forEach(t),OJe=r(X0e," (LUKE model)"),X0e.forEach(t),VJe=i(L),Sm=n(L,"LI",{});var z0e=s(Sm);rae=n(z0e,"STRONG",{});var zYr=s(rae);XJe=r(zYr,"lxmert"),zYr.forEach(t),zJe=r(z0e," \u2014 "),ZS=n(z0e,"A",{href:!0});var WYr=s(ZS);WJe=r(WYr,"LxmertConfig"),WYr.forEach(t),QJe=r(z0e," (LXMERT model)"),z0e.forEach(t),HJe=i(L),Rm=n(L,"LI",{});var W0e=s(Rm);tae=n(W0e,"STRONG",{});var QYr=s(tae);UJe=r(QYr,"m2m_100"),QYr.forEach(t),JJe=r(W0e," \u2014 "),eR=n(W0e,"A",{href:!0});var HYr=s(eR);YJe=r(HYr,"M2M100Config"),HYr.forEach(t),KJe=r(W0e," (M2M100 model)"),W0e.forEach(t),ZJe=i(L),Pm=n(L,"LI",{});var Q0e=s(Pm);aae=n(Q0e,"STRONG",{});var UYr=s(aae);eYe=r(UYr,"marian"),UYr.forEach(t),oYe=r(Q0e," \u2014 "),oR=n(Q0e,"A",{href:!0});var JYr=s(oR);rYe=r(JYr,"MarianConfig"),JYr.forEach(t),tYe=r(Q0e," (Marian model)"),Q0e.forEach(t),aYe=i(L),Bm=n(L,"LI",{});var H0e=s(Bm);nae=n(H0e,"STRONG",{});var YYr=s(nae);nYe=r(YYr,"maskformer"),YYr.forEach(t),sYe=r(H0e," \u2014 "),rR=n(H0e,"A",{href:!0});var KYr=s(rR);lYe=r(KYr,"MaskFormerConfig"),KYr.forEach(t),iYe=r(H0e," (MaskFormer model)"),H0e.forEach(t),dYe=i(L),Im=n(L,"LI",{});var U0e=s(Im);sae=n(U0e,"STRONG",{});var ZYr=s(sae);cYe=r(ZYr,"mbart"),ZYr.forEach(t),fYe=r(U0e," \u2014 "),tR=n(U0e,"A",{href:!0});var eKr=s(tR);mYe=r(eKr,"MBartConfig"),eKr.forEach(t),gYe=r(U0e," (mBART model)"),U0e.forEach(t),hYe=i(L),Nm=n(L,"LI",{});var J0e=s(Nm);lae=n(J0e,"STRONG",{});var oKr=s(lae);pYe=r(oKr,"mctct"),oKr.forEach(t),uYe=r(J0e," \u2014 "),aR=n(J0e,"A",{href:!0});var rKr=s(aR);_Ye=r(rKr,"MCTCTConfig"),rKr.forEach(t),bYe=r(J0e," (M-CTC-T model)"),J0e.forEach(t),vYe=i(L),qm=n(L,"LI",{});var Y0e=s(qm);iae=n(Y0e,"STRONG",{});var tKr=s(iae);FYe=r(tKr,"megatron-bert"),tKr.forEach(t),TYe=r(Y0e," \u2014 "),nR=n(Y0e,"A",{href:!0});var aKr=s(nR);MYe=r(aKr,"MegatronBertConfig"),aKr.forEach(t),EYe=r(Y0e," (Megatron-BERT model)"),Y0e.forEach(t),CYe=i(L),jm=n(L,"LI",{});var K0e=s(jm);dae=n(K0e,"STRONG",{});var nKr=s(dae);wYe=r(nKr,"mobilebert"),nKr.forEach(t),AYe=r(K0e," \u2014 "),sR=n(K0e,"A",{href:!0});var sKr=s(sR);LYe=r(sKr,"MobileBertConfig"),sKr.forEach(t),yYe=r(K0e," (MobileBERT model)"),K0e.forEach(t),xYe=i(L),Dm=n(L,"LI",{});var Z0e=s(Dm);cae=n(Z0e,"STRONG",{});var lKr=s(cae);$Ye=r(lKr,"mpnet"),lKr.forEach(t),kYe=r(Z0e," \u2014 "),lR=n(Z0e,"A",{href:!0});var iKr=s(lR);SYe=r(iKr,"MPNetConfig"),iKr.forEach(t),RYe=r(Z0e," (MPNet model)"),Z0e.forEach(t),PYe=i(L),Gm=n(L,"LI",{});var ewe=s(Gm);fae=n(ewe,"STRONG",{});var dKr=s(fae);BYe=r(dKr,"mt5"),dKr.forEach(t),IYe=r(ewe," \u2014 "),iR=n(ewe,"A",{href:!0});var cKr=s(iR);NYe=r(cKr,"MT5Config"),cKr.forEach(t),qYe=r(ewe," (MT5 model)"),ewe.forEach(t),jYe=i(L),Om=n(L,"LI",{});var owe=s(Om);mae=n(owe,"STRONG",{});var fKr=s(mae);DYe=r(fKr,"nystromformer"),fKr.forEach(t),GYe=r(owe," \u2014 "),dR=n(owe,"A",{href:!0});var mKr=s(dR);OYe=r(mKr,"NystromformerConfig"),mKr.forEach(t),VYe=r(owe," (Nystr\xF6mformer model)"),owe.forEach(t),XYe=i(L),Vm=n(L,"LI",{});var rwe=s(Vm);gae=n(rwe,"STRONG",{});var gKr=s(gae);zYe=r(gKr,"openai-gpt"),gKr.forEach(t),WYe=r(rwe," \u2014 "),cR=n(rwe,"A",{href:!0});var hKr=s(cR);QYe=r(hKr,"OpenAIGPTConfig"),hKr.forEach(t),HYe=r(rwe," (OpenAI GPT model)"),rwe.forEach(t),UYe=i(L),Xm=n(L,"LI",{});var twe=s(Xm);hae=n(twe,"STRONG",{});var pKr=s(hae);JYe=r(pKr,"opt"),pKr.forEach(t),YYe=r(twe," \u2014 "),fR=n(twe,"A",{href:!0});var uKr=s(fR);KYe=r(uKr,"OPTConfig"),uKr.forEach(t),ZYe=r(twe," (OPT model)"),twe.forEach(t),eKe=i(L),zm=n(L,"LI",{});var awe=s(zm);pae=n(awe,"STRONG",{});var _Kr=s(pae);oKe=r(_Kr,"pegasus"),_Kr.forEach(t),rKe=r(awe," \u2014 "),mR=n(awe,"A",{href:!0});var bKr=s(mR);tKe=r(bKr,"PegasusConfig"),bKr.forEach(t),aKe=r(awe," (Pegasus model)"),awe.forEach(t),nKe=i(L),Wm=n(L,"LI",{});var nwe=s(Wm);uae=n(nwe,"STRONG",{});var vKr=s(uae);sKe=r(vKr,"perceiver"),vKr.forEach(t),lKe=r(nwe," \u2014 "),gR=n(nwe,"A",{href:!0});var FKr=s(gR);iKe=r(FKr,"PerceiverConfig"),FKr.forEach(t),dKe=r(nwe," (Perceiver model)"),nwe.forEach(t),cKe=i(L),Qm=n(L,"LI",{});var swe=s(Qm);_ae=n(swe,"STRONG",{});var TKr=s(_ae);fKe=r(TKr,"plbart"),TKr.forEach(t),mKe=r(swe," \u2014 "),hR=n(swe,"A",{href:!0});var MKr=s(hR);gKe=r(MKr,"PLBartConfig"),MKr.forEach(t),hKe=r(swe," (PLBart model)"),swe.forEach(t),pKe=i(L),Hm=n(L,"LI",{});var lwe=s(Hm);bae=n(lwe,"STRONG",{});var EKr=s(bae);uKe=r(EKr,"poolformer"),EKr.forEach(t),_Ke=r(lwe," \u2014 "),pR=n(lwe,"A",{href:!0});var CKr=s(pR);bKe=r(CKr,"PoolFormerConfig"),CKr.forEach(t),vKe=r(lwe," (PoolFormer model)"),lwe.forEach(t),FKe=i(L),Um=n(L,"LI",{});var iwe=s(Um);vae=n(iwe,"STRONG",{});var wKr=s(vae);TKe=r(wKr,"prophetnet"),wKr.forEach(t),MKe=r(iwe," \u2014 "),uR=n(iwe,"A",{href:!0});var AKr=s(uR);EKe=r(AKr,"ProphetNetConfig"),AKr.forEach(t),CKe=r(iwe," (ProphetNet model)"),iwe.forEach(t),wKe=i(L),Jm=n(L,"LI",{});var dwe=s(Jm);Fae=n(dwe,"STRONG",{});var LKr=s(Fae);AKe=r(LKr,"qdqbert"),LKr.forEach(t),LKe=r(dwe," \u2014 "),_R=n(dwe,"A",{href:!0});var yKr=s(_R);yKe=r(yKr,"QDQBertConfig"),yKr.forEach(t),xKe=r(dwe," (QDQBert model)"),dwe.forEach(t),$Ke=i(L),Ym=n(L,"LI",{});var cwe=s(Ym);Tae=n(cwe,"STRONG",{});var xKr=s(Tae);kKe=r(xKr,"rag"),xKr.forEach(t),SKe=r(cwe," \u2014 "),bR=n(cwe,"A",{href:!0});var $Kr=s(bR);RKe=r($Kr,"RagConfig"),$Kr.forEach(t),PKe=r(cwe," (RAG model)"),cwe.forEach(t),BKe=i(L),Km=n(L,"LI",{});var fwe=s(Km);Mae=n(fwe,"STRONG",{});var kKr=s(Mae);IKe=r(kKr,"realm"),kKr.forEach(t),NKe=r(fwe," \u2014 "),vR=n(fwe,"A",{href:!0});var SKr=s(vR);qKe=r(SKr,"RealmConfig"),SKr.forEach(t),jKe=r(fwe," (REALM model)"),fwe.forEach(t),DKe=i(L),Zm=n(L,"LI",{});var mwe=s(Zm);Eae=n(mwe,"STRONG",{});var RKr=s(Eae);GKe=r(RKr,"reformer"),RKr.forEach(t),OKe=r(mwe," \u2014 "),FR=n(mwe,"A",{href:!0});var PKr=s(FR);VKe=r(PKr,"ReformerConfig"),PKr.forEach(t),XKe=r(mwe," (Reformer model)"),mwe.forEach(t),zKe=i(L),eg=n(L,"LI",{});var gwe=s(eg);Cae=n(gwe,"STRONG",{});var BKr=s(Cae);WKe=r(BKr,"regnet"),BKr.forEach(t),QKe=r(gwe," \u2014 "),TR=n(gwe,"A",{href:!0});var IKr=s(TR);HKe=r(IKr,"RegNetConfig"),IKr.forEach(t),UKe=r(gwe," (RegNet model)"),gwe.forEach(t),JKe=i(L),og=n(L,"LI",{});var hwe=s(og);wae=n(hwe,"STRONG",{});var NKr=s(wae);YKe=r(NKr,"rembert"),NKr.forEach(t),KKe=r(hwe," \u2014 "),MR=n(hwe,"A",{href:!0});var qKr=s(MR);ZKe=r(qKr,"RemBertConfig"),qKr.forEach(t),eZe=r(hwe," (RemBERT model)"),hwe.forEach(t),oZe=i(L),rg=n(L,"LI",{});var pwe=s(rg);Aae=n(pwe,"STRONG",{});var jKr=s(Aae);rZe=r(jKr,"resnet"),jKr.forEach(t),tZe=r(pwe," \u2014 "),ER=n(pwe,"A",{href:!0});var DKr=s(ER);aZe=r(DKr,"ResNetConfig"),DKr.forEach(t),nZe=r(pwe," (ResNet model)"),pwe.forEach(t),sZe=i(L),tg=n(L,"LI",{});var uwe=s(tg);Lae=n(uwe,"STRONG",{});var GKr=s(Lae);lZe=r(GKr,"retribert"),GKr.forEach(t),iZe=r(uwe," \u2014 "),CR=n(uwe,"A",{href:!0});var OKr=s(CR);dZe=r(OKr,"RetriBertConfig"),OKr.forEach(t),cZe=r(uwe," (RetriBERT model)"),uwe.forEach(t),fZe=i(L),ag=n(L,"LI",{});var _we=s(ag);yae=n(_we,"STRONG",{});var VKr=s(yae);mZe=r(VKr,"roberta"),VKr.forEach(t),gZe=r(_we," \u2014 "),wR=n(_we,"A",{href:!0});var XKr=s(wR);hZe=r(XKr,"RobertaConfig"),XKr.forEach(t),pZe=r(_we," (RoBERTa model)"),_we.forEach(t),uZe=i(L),ng=n(L,"LI",{});var bwe=s(ng);xae=n(bwe,"STRONG",{});var zKr=s(xae);_Ze=r(zKr,"roformer"),zKr.forEach(t),bZe=r(bwe," \u2014 "),AR=n(bwe,"A",{href:!0});var WKr=s(AR);vZe=r(WKr,"RoFormerConfig"),WKr.forEach(t),FZe=r(bwe," (RoFormer model)"),bwe.forEach(t),TZe=i(L),sg=n(L,"LI",{});var vwe=s(sg);$ae=n(vwe,"STRONG",{});var QKr=s($ae);MZe=r(QKr,"segformer"),QKr.forEach(t),EZe=r(vwe," \u2014 "),LR=n(vwe,"A",{href:!0});var HKr=s(LR);CZe=r(HKr,"SegformerConfig"),HKr.forEach(t),wZe=r(vwe," (SegFormer model)"),vwe.forEach(t),AZe=i(L),lg=n(L,"LI",{});var Fwe=s(lg);kae=n(Fwe,"STRONG",{});var UKr=s(kae);LZe=r(UKr,"sew"),UKr.forEach(t),yZe=r(Fwe," \u2014 "),yR=n(Fwe,"A",{href:!0});var JKr=s(yR);xZe=r(JKr,"SEWConfig"),JKr.forEach(t),$Ze=r(Fwe," (SEW model)"),Fwe.forEach(t),kZe=i(L),ig=n(L,"LI",{});var Twe=s(ig);Sae=n(Twe,"STRONG",{});var YKr=s(Sae);SZe=r(YKr,"sew-d"),YKr.forEach(t),RZe=r(Twe," \u2014 "),xR=n(Twe,"A",{href:!0});var KKr=s(xR);PZe=r(KKr,"SEWDConfig"),KKr.forEach(t),BZe=r(Twe," (SEW-D model)"),Twe.forEach(t),IZe=i(L),dg=n(L,"LI",{});var Mwe=s(dg);Rae=n(Mwe,"STRONG",{});var ZKr=s(Rae);NZe=r(ZKr,"speech-encoder-decoder"),ZKr.forEach(t),qZe=r(Mwe," \u2014 "),$R=n(Mwe,"A",{href:!0});var eZr=s($R);jZe=r(eZr,"SpeechEncoderDecoderConfig"),eZr.forEach(t),DZe=r(Mwe," (Speech Encoder decoder model)"),Mwe.forEach(t),GZe=i(L),cg=n(L,"LI",{});var Ewe=s(cg);Pae=n(Ewe,"STRONG",{});var oZr=s(Pae);OZe=r(oZr,"speech_to_text"),oZr.forEach(t),VZe=r(Ewe," \u2014 "),kR=n(Ewe,"A",{href:!0});var rZr=s(kR);XZe=r(rZr,"Speech2TextConfig"),rZr.forEach(t),zZe=r(Ewe," (Speech2Text model)"),Ewe.forEach(t),WZe=i(L),fg=n(L,"LI",{});var Cwe=s(fg);Bae=n(Cwe,"STRONG",{});var tZr=s(Bae);QZe=r(tZr,"speech_to_text_2"),tZr.forEach(t),HZe=r(Cwe," \u2014 "),SR=n(Cwe,"A",{href:!0});var aZr=s(SR);UZe=r(aZr,"Speech2Text2Config"),aZr.forEach(t),JZe=r(Cwe," (Speech2Text2 model)"),Cwe.forEach(t),YZe=i(L),mg=n(L,"LI",{});var wwe=s(mg);Iae=n(wwe,"STRONG",{});var nZr=s(Iae);KZe=r(nZr,"splinter"),nZr.forEach(t),ZZe=r(wwe," \u2014 "),RR=n(wwe,"A",{href:!0});var sZr=s(RR);eeo=r(sZr,"SplinterConfig"),sZr.forEach(t),oeo=r(wwe," (Splinter model)"),wwe.forEach(t),reo=i(L),gg=n(L,"LI",{});var Awe=s(gg);Nae=n(Awe,"STRONG",{});var lZr=s(Nae);teo=r(lZr,"squeezebert"),lZr.forEach(t),aeo=r(Awe," \u2014 "),PR=n(Awe,"A",{href:!0});var iZr=s(PR);neo=r(iZr,"SqueezeBertConfig"),iZr.forEach(t),seo=r(Awe," (SqueezeBERT model)"),Awe.forEach(t),leo=i(L),hg=n(L,"LI",{});var Lwe=s(hg);qae=n(Lwe,"STRONG",{});var dZr=s(qae);ieo=r(dZr,"swin"),dZr.forEach(t),deo=r(Lwe," \u2014 "),BR=n(Lwe,"A",{href:!0});var cZr=s(BR);ceo=r(cZr,"SwinConfig"),cZr.forEach(t),feo=r(Lwe," (Swin Transformer model)"),Lwe.forEach(t),meo=i(L),pg=n(L,"LI",{});var ywe=s(pg);jae=n(ywe,"STRONG",{});var fZr=s(jae);geo=r(fZr,"t5"),fZr.forEach(t),heo=r(ywe," \u2014 "),IR=n(ywe,"A",{href:!0});var mZr=s(IR);peo=r(mZr,"T5Config"),mZr.forEach(t),ueo=r(ywe," (T5 model)"),ywe.forEach(t),_eo=i(L),ug=n(L,"LI",{});var xwe=s(ug);Dae=n(xwe,"STRONG",{});var gZr=s(Dae);beo=r(gZr,"tapas"),gZr.forEach(t),veo=r(xwe," \u2014 "),NR=n(xwe,"A",{href:!0});var hZr=s(NR);Feo=r(hZr,"TapasConfig"),hZr.forEach(t),Teo=r(xwe," (TAPAS model)"),xwe.forEach(t),Meo=i(L),_g=n(L,"LI",{});var $we=s(_g);Gae=n($we,"STRONG",{});var pZr=s(Gae);Eeo=r(pZr,"trajectory_transformer"),pZr.forEach(t),Ceo=r($we," \u2014 "),qR=n($we,"A",{href:!0});var uZr=s(qR);weo=r(uZr,"TrajectoryTransformerConfig"),uZr.forEach(t),Aeo=r($we," (Trajectory Transformer model)"),$we.forEach(t),Leo=i(L),bg=n(L,"LI",{});var kwe=s(bg);Oae=n(kwe,"STRONG",{});var _Zr=s(Oae);yeo=r(_Zr,"transfo-xl"),_Zr.forEach(t),xeo=r(kwe," \u2014 "),jR=n(kwe,"A",{href:!0});var bZr=s(jR);$eo=r(bZr,"TransfoXLConfig"),bZr.forEach(t),keo=r(kwe," (Transformer-XL model)"),kwe.forEach(t),Seo=i(L),vg=n(L,"LI",{});var Swe=s(vg);Vae=n(Swe,"STRONG",{});var vZr=s(Vae);Reo=r(vZr,"trocr"),vZr.forEach(t),Peo=r(Swe," \u2014 "),DR=n(Swe,"A",{href:!0});var FZr=s(DR);Beo=r(FZr,"TrOCRConfig"),FZr.forEach(t),Ieo=r(Swe," (TrOCR model)"),Swe.forEach(t),Neo=i(L),Fg=n(L,"LI",{});var Rwe=s(Fg);Xae=n(Rwe,"STRONG",{});var TZr=s(Xae);qeo=r(TZr,"unispeech"),TZr.forEach(t),jeo=r(Rwe," \u2014 "),GR=n(Rwe,"A",{href:!0});var MZr=s(GR);Deo=r(MZr,"UniSpeechConfig"),MZr.forEach(t),Geo=r(Rwe," (UniSpeech model)"),Rwe.forEach(t),Oeo=i(L),Tg=n(L,"LI",{});var Pwe=s(Tg);zae=n(Pwe,"STRONG",{});var EZr=s(zae);Veo=r(EZr,"unispeech-sat"),EZr.forEach(t),Xeo=r(Pwe," \u2014 "),OR=n(Pwe,"A",{href:!0});var CZr=s(OR);zeo=r(CZr,"UniSpeechSatConfig"),CZr.forEach(t),Weo=r(Pwe," (UniSpeechSat model)"),Pwe.forEach(t),Qeo=i(L),Mg=n(L,"LI",{});var Bwe=s(Mg);Wae=n(Bwe,"STRONG",{});var wZr=s(Wae);Heo=r(wZr,"van"),wZr.forEach(t),Ueo=r(Bwe," \u2014 "),VR=n(Bwe,"A",{href:!0});var AZr=s(VR);Jeo=r(AZr,"VanConfig"),AZr.forEach(t),Yeo=r(Bwe," (VAN model)"),Bwe.forEach(t),Keo=i(L),Eg=n(L,"LI",{});var Iwe=s(Eg);Qae=n(Iwe,"STRONG",{});var LZr=s(Qae);Zeo=r(LZr,"vilt"),LZr.forEach(t),eoo=r(Iwe," \u2014 "),XR=n(Iwe,"A",{href:!0});var yZr=s(XR);ooo=r(yZr,"ViltConfig"),yZr.forEach(t),roo=r(Iwe," (ViLT model)"),Iwe.forEach(t),too=i(L),Cg=n(L,"LI",{});var Nwe=s(Cg);Hae=n(Nwe,"STRONG",{});var xZr=s(Hae);aoo=r(xZr,"vision-encoder-decoder"),xZr.forEach(t),noo=r(Nwe," \u2014 "),zR=n(Nwe,"A",{href:!0});var $Zr=s(zR);soo=r($Zr,"VisionEncoderDecoderConfig"),$Zr.forEach(t),loo=r(Nwe," (Vision Encoder decoder model)"),Nwe.forEach(t),ioo=i(L),wg=n(L,"LI",{});var qwe=s(wg);Uae=n(qwe,"STRONG",{});var kZr=s(Uae);doo=r(kZr,"vision-text-dual-encoder"),kZr.forEach(t),coo=r(qwe," \u2014 "),WR=n(qwe,"A",{href:!0});var SZr=s(WR);foo=r(SZr,"VisionTextDualEncoderConfig"),SZr.forEach(t),moo=r(qwe," (VisionTextDualEncoder model)"),qwe.forEach(t),goo=i(L),Ag=n(L,"LI",{});var jwe=s(Ag);Jae=n(jwe,"STRONG",{});var RZr=s(Jae);hoo=r(RZr,"visual_bert"),RZr.forEach(t),poo=r(jwe," \u2014 "),QR=n(jwe,"A",{href:!0});var PZr=s(QR);uoo=r(PZr,"VisualBertConfig"),PZr.forEach(t),_oo=r(jwe," (VisualBERT model)"),jwe.forEach(t),boo=i(L),Lg=n(L,"LI",{});var Dwe=s(Lg);Yae=n(Dwe,"STRONG",{});var BZr=s(Yae);voo=r(BZr,"vit"),BZr.forEach(t),Foo=r(Dwe," \u2014 "),HR=n(Dwe,"A",{href:!0});var IZr=s(HR);Too=r(IZr,"ViTConfig"),IZr.forEach(t),Moo=r(Dwe," (ViT model)"),Dwe.forEach(t),Eoo=i(L),yg=n(L,"LI",{});var Gwe=s(yg);Kae=n(Gwe,"STRONG",{});var NZr=s(Kae);Coo=r(NZr,"vit_mae"),NZr.forEach(t),woo=r(Gwe," \u2014 "),UR=n(Gwe,"A",{href:!0});var qZr=s(UR);Aoo=r(qZr,"ViTMAEConfig"),qZr.forEach(t),Loo=r(Gwe," (ViTMAE model)"),Gwe.forEach(t),yoo=i(L),xg=n(L,"LI",{});var Owe=s(xg);Zae=n(Owe,"STRONG",{});var jZr=s(Zae);xoo=r(jZr,"wav2vec2"),jZr.forEach(t),$oo=r(Owe," \u2014 "),JR=n(Owe,"A",{href:!0});var DZr=s(JR);koo=r(DZr,"Wav2Vec2Config"),DZr.forEach(t),Soo=r(Owe," (Wav2Vec2 model)"),Owe.forEach(t),Roo=i(L),$g=n(L,"LI",{});var Vwe=s($g);ene=n(Vwe,"STRONG",{});var GZr=s(ene);Poo=r(GZr,"wav2vec2-conformer"),GZr.forEach(t),Boo=r(Vwe," \u2014 "),YR=n(Vwe,"A",{href:!0});var OZr=s(YR);Ioo=r(OZr,"Wav2Vec2ConformerConfig"),OZr.forEach(t),Noo=r(Vwe," (Wav2Vec2-Conformer model)"),Vwe.forEach(t),qoo=i(L),kg=n(L,"LI",{});var Xwe=s(kg);one=n(Xwe,"STRONG",{});var VZr=s(one);joo=r(VZr,"wavlm"),VZr.forEach(t),Doo=r(Xwe," \u2014 "),KR=n(Xwe,"A",{href:!0});var XZr=s(KR);Goo=r(XZr,"WavLMConfig"),XZr.forEach(t),Ooo=r(Xwe," (WavLM model)"),Xwe.forEach(t),Voo=i(L),Sg=n(L,"LI",{});var zwe=s(Sg);rne=n(zwe,"STRONG",{});var zZr=s(rne);Xoo=r(zZr,"xglm"),zZr.forEach(t),zoo=r(zwe," \u2014 "),ZR=n(zwe,"A",{href:!0});var WZr=s(ZR);Woo=r(WZr,"XGLMConfig"),WZr.forEach(t),Qoo=r(zwe," (XGLM model)"),zwe.forEach(t),Hoo=i(L),Rg=n(L,"LI",{});var Wwe=s(Rg);tne=n(Wwe,"STRONG",{});var QZr=s(tne);Uoo=r(QZr,"xlm"),QZr.forEach(t),Joo=r(Wwe," \u2014 "),eP=n(Wwe,"A",{href:!0});var HZr=s(eP);Yoo=r(HZr,"XLMConfig"),HZr.forEach(t),Koo=r(Wwe," (XLM model)"),Wwe.forEach(t),Zoo=i(L),Pg=n(L,"LI",{});var Qwe=s(Pg);ane=n(Qwe,"STRONG",{});var UZr=s(ane);ero=r(UZr,"xlm-prophetnet"),UZr.forEach(t),oro=r(Qwe," \u2014 "),oP=n(Qwe,"A",{href:!0});var JZr=s(oP);rro=r(JZr,"XLMProphetNetConfig"),JZr.forEach(t),tro=r(Qwe," (XLM-ProphetNet model)"),Qwe.forEach(t),aro=i(L),Bg=n(L,"LI",{});var Hwe=s(Bg);nne=n(Hwe,"STRONG",{});var YZr=s(nne);nro=r(YZr,"xlm-roberta"),YZr.forEach(t),sro=r(Hwe," \u2014 "),rP=n(Hwe,"A",{href:!0});var KZr=s(rP);lro=r(KZr,"XLMRobertaConfig"),KZr.forEach(t),iro=r(Hwe," (XLM-RoBERTa model)"),Hwe.forEach(t),dro=i(L),Ig=n(L,"LI",{});var Uwe=s(Ig);sne=n(Uwe,"STRONG",{});var ZZr=s(sne);cro=r(ZZr,"xlm-roberta-xl"),ZZr.forEach(t),fro=r(Uwe," \u2014 "),tP=n(Uwe,"A",{href:!0});var eet=s(tP);mro=r(eet,"XLMRobertaXLConfig"),eet.forEach(t),gro=r(Uwe," (XLM-RoBERTa-XL model)"),Uwe.forEach(t),hro=i(L),Ng=n(L,"LI",{});var Jwe=s(Ng);lne=n(Jwe,"STRONG",{});var oet=s(lne);pro=r(oet,"xlnet"),oet.forEach(t),uro=r(Jwe," \u2014 "),aP=n(Jwe,"A",{href:!0});var ret=s(aP);_ro=r(ret,"XLNetConfig"),ret.forEach(t),bro=r(Jwe," (XLNet model)"),Jwe.forEach(t),vro=i(L),qg=n(L,"LI",{});var Ywe=s(qg);ine=n(Ywe,"STRONG",{});var tet=s(ine);Fro=r(tet,"yolos"),tet.forEach(t),Tro=r(Ywe," \u2014 "),nP=n(Ywe,"A",{href:!0});var aet=s(nP);Mro=r(aet,"YolosConfig"),aet.forEach(t),Ero=r(Ywe," (YOLOS model)"),Ywe.forEach(t),Cro=i(L),jg=n(L,"LI",{});var Kwe=s(jg);dne=n(Kwe,"STRONG",{});var net=s(dne);wro=r(net,"yoso"),net.forEach(t),Aro=r(Kwe," \u2014 "),sP=n(Kwe,"A",{href:!0});var set=s(sP);Lro=r(set,"YosoConfig"),set.forEach(t),yro=r(Kwe," (YOSO model)"),Kwe.forEach(t),L.forEach(t),xro=i(tt),T(Dg.$$.fragment,tt),tt.forEach(t),$ro=i(rt),Gg=n(rt,"DIV",{class:!0});var uVe=s(Gg);T(xA.$$.fragment,uVe),kro=i(uVe),cne=n(uVe,"P",{});var iet=s(cne);Sro=r(iet,"Register a new configuration for this class."),iet.forEach(t),uVe.forEach(t),rt.forEach(t),_Ge=i(f),$i=n(f,"H2",{class:!0});var _Ve=s($i);Og=n(_Ve,"A",{id:!0,class:!0,href:!0});var det=s(Og);fne=n(det,"SPAN",{});var cet=s(fne);T($A.$$.fragment,cet),cet.forEach(t),det.forEach(t),Rro=i(_Ve),mne=n(_Ve,"SPAN",{});var fet=s(mne);Pro=r(fet,"AutoTokenizer"),fet.forEach(t),_Ve.forEach(t),bGe=i(f),Ao=n(f,"DIV",{class:!0});var zs=s(Ao);T(kA.$$.fragment,zs),Bro=i(zs),SA=n(zs,"P",{});var bVe=s(SA);Iro=r(bVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lP=n(bVe,"A",{href:!0});var met=s(lP);Nro=r(met,"AutoTokenizer.from_pretrained()"),met.forEach(t),qro=r(bVe," class method."),bVe.forEach(t),jro=i(zs),RA=n(zs,"P",{});var vVe=s(RA);Dro=r(vVe,"This class cannot be instantiated directly using "),gne=n(vVe,"CODE",{});var get=s(gne);Gro=r(get,"__init__()"),get.forEach(t),Oro=r(vVe," (throws an error)."),vVe.forEach(t),Vro=i(zs),Ar=n(zs,"DIV",{class:!0});var Ws=s(Ar);T(PA.$$.fragment,Ws),Xro=i(Ws),hne=n(Ws,"P",{});var het=s(hne);zro=r(het,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),het.forEach(t),Wro=i(Ws),$a=n(Ws,"P",{});var M0=s($a);Qro=r(M0,"The tokenizer class to instantiate is selected based on the "),pne=n(M0,"CODE",{});var pet=s(pne);Hro=r(pet,"model_type"),pet.forEach(t),Uro=r(M0,` property of the config object (either
passed as an argument or loaded from `),une=n(M0,"CODE",{});var uet=s(une);Jro=r(uet,"pretrained_model_name_or_path"),uet.forEach(t),Yro=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ne=n(M0,"CODE",{});var _et=s(_ne);Kro=r(_et,"pretrained_model_name_or_path"),_et.forEach(t),Zro=r(M0,":"),M0.forEach(t),eto=i(Ws),k=n(Ws,"UL",{});var S=s(k);Nn=n(S,"LI",{});var D$=s(Nn);bne=n(D$,"STRONG",{});var bet=s(bne);oto=r(bet,"albert"),bet.forEach(t),rto=r(D$," \u2014 "),iP=n(D$,"A",{href:!0});var vet=s(iP);tto=r(vet,"AlbertTokenizer"),vet.forEach(t),ato=r(D$," or "),dP=n(D$,"A",{href:!0});var Fet=s(dP);nto=r(Fet,"AlbertTokenizerFast"),Fet.forEach(t),sto=r(D$," (ALBERT model)"),D$.forEach(t),lto=i(S),qn=n(S,"LI",{});var G$=s(qn);vne=n(G$,"STRONG",{});var Tet=s(vne);ito=r(Tet,"bart"),Tet.forEach(t),dto=r(G$," \u2014 "),cP=n(G$,"A",{href:!0});var Met=s(cP);cto=r(Met,"BartTokenizer"),Met.forEach(t),fto=r(G$," or "),fP=n(G$,"A",{href:!0});var Eet=s(fP);mto=r(Eet,"BartTokenizerFast"),Eet.forEach(t),gto=r(G$," (BART model)"),G$.forEach(t),hto=i(S),jn=n(S,"LI",{});var O$=s(jn);Fne=n(O$,"STRONG",{});var Cet=s(Fne);pto=r(Cet,"barthez"),Cet.forEach(t),uto=r(O$," \u2014 "),mP=n(O$,"A",{href:!0});var wet=s(mP);_to=r(wet,"BarthezTokenizer"),wet.forEach(t),bto=r(O$," or "),gP=n(O$,"A",{href:!0});var Aet=s(gP);vto=r(Aet,"BarthezTokenizerFast"),Aet.forEach(t),Fto=r(O$," (BARThez model)"),O$.forEach(t),Tto=i(S),Vg=n(S,"LI",{});var Zwe=s(Vg);Tne=n(Zwe,"STRONG",{});var Let=s(Tne);Mto=r(Let,"bartpho"),Let.forEach(t),Eto=r(Zwe," \u2014 "),hP=n(Zwe,"A",{href:!0});var yet=s(hP);Cto=r(yet,"BartphoTokenizer"),yet.forEach(t),wto=r(Zwe," (BARTpho model)"),Zwe.forEach(t),Ato=i(S),Dn=n(S,"LI",{});var V$=s(Dn);Mne=n(V$,"STRONG",{});var xet=s(Mne);Lto=r(xet,"bert"),xet.forEach(t),yto=r(V$," \u2014 "),pP=n(V$,"A",{href:!0});var $et=s(pP);xto=r($et,"BertTokenizer"),$et.forEach(t),$to=r(V$," or "),uP=n(V$,"A",{href:!0});var ket=s(uP);kto=r(ket,"BertTokenizerFast"),ket.forEach(t),Sto=r(V$," (BERT model)"),V$.forEach(t),Rto=i(S),Xg=n(S,"LI",{});var eAe=s(Xg);Ene=n(eAe,"STRONG",{});var Set=s(Ene);Pto=r(Set,"bert-generation"),Set.forEach(t),Bto=r(eAe," \u2014 "),_P=n(eAe,"A",{href:!0});var Ret=s(_P);Ito=r(Ret,"BertGenerationTokenizer"),Ret.forEach(t),Nto=r(eAe," (Bert Generation model)"),eAe.forEach(t),qto=i(S),zg=n(S,"LI",{});var oAe=s(zg);Cne=n(oAe,"STRONG",{});var Pet=s(Cne);jto=r(Pet,"bert-japanese"),Pet.forEach(t),Dto=r(oAe," \u2014 "),bP=n(oAe,"A",{href:!0});var Bet=s(bP);Gto=r(Bet,"BertJapaneseTokenizer"),Bet.forEach(t),Oto=r(oAe," (BertJapanese model)"),oAe.forEach(t),Vto=i(S),Wg=n(S,"LI",{});var rAe=s(Wg);wne=n(rAe,"STRONG",{});var Iet=s(wne);Xto=r(Iet,"bertweet"),Iet.forEach(t),zto=r(rAe," \u2014 "),vP=n(rAe,"A",{href:!0});var Net=s(vP);Wto=r(Net,"BertweetTokenizer"),Net.forEach(t),Qto=r(rAe," (BERTweet model)"),rAe.forEach(t),Hto=i(S),Gn=n(S,"LI",{});var X$=s(Gn);Ane=n(X$,"STRONG",{});var qet=s(Ane);Uto=r(qet,"big_bird"),qet.forEach(t),Jto=r(X$," \u2014 "),FP=n(X$,"A",{href:!0});var jet=s(FP);Yto=r(jet,"BigBirdTokenizer"),jet.forEach(t),Kto=r(X$," or "),TP=n(X$,"A",{href:!0});var Det=s(TP);Zto=r(Det,"BigBirdTokenizerFast"),Det.forEach(t),eao=r(X$," (BigBird model)"),X$.forEach(t),oao=i(S),On=n(S,"LI",{});var z$=s(On);Lne=n(z$,"STRONG",{});var Get=s(Lne);rao=r(Get,"bigbird_pegasus"),Get.forEach(t),tao=r(z$," \u2014 "),MP=n(z$,"A",{href:!0});var Oet=s(MP);aao=r(Oet,"PegasusTokenizer"),Oet.forEach(t),nao=r(z$," or "),EP=n(z$,"A",{href:!0});var Vet=s(EP);sao=r(Vet,"PegasusTokenizerFast"),Vet.forEach(t),lao=r(z$," (BigBird-Pegasus model)"),z$.forEach(t),iao=i(S),Vn=n(S,"LI",{});var W$=s(Vn);yne=n(W$,"STRONG",{});var Xet=s(yne);dao=r(Xet,"blenderbot"),Xet.forEach(t),cao=r(W$," \u2014 "),CP=n(W$,"A",{href:!0});var zet=s(CP);fao=r(zet,"BlenderbotTokenizer"),zet.forEach(t),mao=r(W$," or "),wP=n(W$,"A",{href:!0});var Wet=s(wP);gao=r(Wet,"BlenderbotTokenizerFast"),Wet.forEach(t),hao=r(W$," (Blenderbot model)"),W$.forEach(t),pao=i(S),Qg=n(S,"LI",{});var tAe=s(Qg);xne=n(tAe,"STRONG",{});var Qet=s(xne);uao=r(Qet,"blenderbot-small"),Qet.forEach(t),_ao=r(tAe," \u2014 "),AP=n(tAe,"A",{href:!0});var Het=s(AP);bao=r(Het,"BlenderbotSmallTokenizer"),Het.forEach(t),vao=r(tAe," (BlenderbotSmall model)"),tAe.forEach(t),Fao=i(S),Hg=n(S,"LI",{});var aAe=s(Hg);$ne=n(aAe,"STRONG",{});var Uet=s($ne);Tao=r(Uet,"bloom"),Uet.forEach(t),Mao=r(aAe," \u2014 "),LP=n(aAe,"A",{href:!0});var Jet=s(LP);Eao=r(Jet,"BloomTokenizerFast"),Jet.forEach(t),Cao=r(aAe," (BLOOM model)"),aAe.forEach(t),wao=i(S),Ug=n(S,"LI",{});var nAe=s(Ug);kne=n(nAe,"STRONG",{});var Yet=s(kne);Aao=r(Yet,"byt5"),Yet.forEach(t),Lao=r(nAe," \u2014 "),yP=n(nAe,"A",{href:!0});var Ket=s(yP);yao=r(Ket,"ByT5Tokenizer"),Ket.forEach(t),xao=r(nAe," (ByT5 model)"),nAe.forEach(t),$ao=i(S),Xn=n(S,"LI",{});var Q$=s(Xn);Sne=n(Q$,"STRONG",{});var Zet=s(Sne);kao=r(Zet,"camembert"),Zet.forEach(t),Sao=r(Q$," \u2014 "),xP=n(Q$,"A",{href:!0});var eot=s(xP);Rao=r(eot,"CamembertTokenizer"),eot.forEach(t),Pao=r(Q$," or "),$P=n(Q$,"A",{href:!0});var oot=s($P);Bao=r(oot,"CamembertTokenizerFast"),oot.forEach(t),Iao=r(Q$," (CamemBERT model)"),Q$.forEach(t),Nao=i(S),Jg=n(S,"LI",{});var sAe=s(Jg);Rne=n(sAe,"STRONG",{});var rot=s(Rne);qao=r(rot,"canine"),rot.forEach(t),jao=r(sAe," \u2014 "),kP=n(sAe,"A",{href:!0});var tot=s(kP);Dao=r(tot,"CanineTokenizer"),tot.forEach(t),Gao=r(sAe," (CANINE model)"),sAe.forEach(t),Oao=i(S),zn=n(S,"LI",{});var H$=s(zn);Pne=n(H$,"STRONG",{});var aot=s(Pne);Vao=r(aot,"clip"),aot.forEach(t),Xao=r(H$," \u2014 "),SP=n(H$,"A",{href:!0});var not=s(SP);zao=r(not,"CLIPTokenizer"),not.forEach(t),Wao=r(H$," or "),RP=n(H$,"A",{href:!0});var sot=s(RP);Qao=r(sot,"CLIPTokenizerFast"),sot.forEach(t),Hao=r(H$," (CLIP model)"),H$.forEach(t),Uao=i(S),Wn=n(S,"LI",{});var U$=s(Wn);Bne=n(U$,"STRONG",{});var lot=s(Bne);Jao=r(lot,"convbert"),lot.forEach(t),Yao=r(U$," \u2014 "),PP=n(U$,"A",{href:!0});var iot=s(PP);Kao=r(iot,"ConvBertTokenizer"),iot.forEach(t),Zao=r(U$," or "),BP=n(U$,"A",{href:!0});var dot=s(BP);eno=r(dot,"ConvBertTokenizerFast"),dot.forEach(t),ono=r(U$," (ConvBERT model)"),U$.forEach(t),rno=i(S),Qn=n(S,"LI",{});var J$=s(Qn);Ine=n(J$,"STRONG",{});var cot=s(Ine);tno=r(cot,"cpm"),cot.forEach(t),ano=r(J$," \u2014 "),IP=n(J$,"A",{href:!0});var fot=s(IP);nno=r(fot,"CpmTokenizer"),fot.forEach(t),sno=r(J$," or "),NP=n(J$,"A",{href:!0});var mot=s(NP);lno=r(mot,"CpmTokenizerFast"),mot.forEach(t),ino=r(J$," (CPM model)"),J$.forEach(t),dno=i(S),Yg=n(S,"LI",{});var lAe=s(Yg);Nne=n(lAe,"STRONG",{});var got=s(Nne);cno=r(got,"ctrl"),got.forEach(t),fno=r(lAe," \u2014 "),qP=n(lAe,"A",{href:!0});var hot=s(qP);mno=r(hot,"CTRLTokenizer"),hot.forEach(t),gno=r(lAe," (CTRL model)"),lAe.forEach(t),hno=i(S),Hn=n(S,"LI",{});var Y$=s(Hn);qne=n(Y$,"STRONG",{});var pot=s(qne);pno=r(pot,"data2vec-text"),pot.forEach(t),uno=r(Y$," \u2014 "),jP=n(Y$,"A",{href:!0});var uot=s(jP);_no=r(uot,"RobertaTokenizer"),uot.forEach(t),bno=r(Y$," or "),DP=n(Y$,"A",{href:!0});var _ot=s(DP);vno=r(_ot,"RobertaTokenizerFast"),_ot.forEach(t),Fno=r(Y$," (Data2VecText model)"),Y$.forEach(t),Tno=i(S),Un=n(S,"LI",{});var K$=s(Un);jne=n(K$,"STRONG",{});var bot=s(jne);Mno=r(bot,"deberta"),bot.forEach(t),Eno=r(K$," \u2014 "),GP=n(K$,"A",{href:!0});var vot=s(GP);Cno=r(vot,"DebertaTokenizer"),vot.forEach(t),wno=r(K$," or "),OP=n(K$,"A",{href:!0});var Fot=s(OP);Ano=r(Fot,"DebertaTokenizerFast"),Fot.forEach(t),Lno=r(K$," (DeBERTa model)"),K$.forEach(t),yno=i(S),Jn=n(S,"LI",{});var Z$=s(Jn);Dne=n(Z$,"STRONG",{});var Tot=s(Dne);xno=r(Tot,"deberta-v2"),Tot.forEach(t),$no=r(Z$," \u2014 "),VP=n(Z$,"A",{href:!0});var Mot=s(VP);kno=r(Mot,"DebertaV2Tokenizer"),Mot.forEach(t),Sno=r(Z$," or "),XP=n(Z$,"A",{href:!0});var Eot=s(XP);Rno=r(Eot,"DebertaV2TokenizerFast"),Eot.forEach(t),Pno=r(Z$," (DeBERTa-v2 model)"),Z$.forEach(t),Bno=i(S),Yn=n(S,"LI",{});var ek=s(Yn);Gne=n(ek,"STRONG",{});var Cot=s(Gne);Ino=r(Cot,"distilbert"),Cot.forEach(t),Nno=r(ek," \u2014 "),zP=n(ek,"A",{href:!0});var wot=s(zP);qno=r(wot,"DistilBertTokenizer"),wot.forEach(t),jno=r(ek," or "),WP=n(ek,"A",{href:!0});var Aot=s(WP);Dno=r(Aot,"DistilBertTokenizerFast"),Aot.forEach(t),Gno=r(ek," (DistilBERT model)"),ek.forEach(t),Ono=i(S),Kn=n(S,"LI",{});var ok=s(Kn);One=n(ok,"STRONG",{});var Lot=s(One);Vno=r(Lot,"dpr"),Lot.forEach(t),Xno=r(ok," \u2014 "),QP=n(ok,"A",{href:!0});var yot=s(QP);zno=r(yot,"DPRQuestionEncoderTokenizer"),yot.forEach(t),Wno=r(ok," or "),HP=n(ok,"A",{href:!0});var xot=s(HP);Qno=r(xot,"DPRQuestionEncoderTokenizerFast"),xot.forEach(t),Hno=r(ok," (DPR model)"),ok.forEach(t),Uno=i(S),Zn=n(S,"LI",{});var rk=s(Zn);Vne=n(rk,"STRONG",{});var $ot=s(Vne);Jno=r($ot,"electra"),$ot.forEach(t),Yno=r(rk," \u2014 "),UP=n(rk,"A",{href:!0});var kot=s(UP);Kno=r(kot,"ElectraTokenizer"),kot.forEach(t),Zno=r(rk," or "),JP=n(rk,"A",{href:!0});var Sot=s(JP);eso=r(Sot,"ElectraTokenizerFast"),Sot.forEach(t),oso=r(rk," (ELECTRA model)"),rk.forEach(t),rso=i(S),Kg=n(S,"LI",{});var iAe=s(Kg);Xne=n(iAe,"STRONG",{});var Rot=s(Xne);tso=r(Rot,"flaubert"),Rot.forEach(t),aso=r(iAe," \u2014 "),YP=n(iAe,"A",{href:!0});var Pot=s(YP);nso=r(Pot,"FlaubertTokenizer"),Pot.forEach(t),sso=r(iAe," (FlauBERT model)"),iAe.forEach(t),lso=i(S),es=n(S,"LI",{});var tk=s(es);zne=n(tk,"STRONG",{});var Bot=s(zne);iso=r(Bot,"fnet"),Bot.forEach(t),dso=r(tk," \u2014 "),KP=n(tk,"A",{href:!0});var Iot=s(KP);cso=r(Iot,"FNetTokenizer"),Iot.forEach(t),fso=r(tk," or "),ZP=n(tk,"A",{href:!0});var Not=s(ZP);mso=r(Not,"FNetTokenizerFast"),Not.forEach(t),gso=r(tk," (FNet model)"),tk.forEach(t),hso=i(S),Zg=n(S,"LI",{});var dAe=s(Zg);Wne=n(dAe,"STRONG",{});var qot=s(Wne);pso=r(qot,"fsmt"),qot.forEach(t),uso=r(dAe," \u2014 "),eB=n(dAe,"A",{href:!0});var jot=s(eB);_so=r(jot,"FSMTTokenizer"),jot.forEach(t),bso=r(dAe," (FairSeq Machine-Translation model)"),dAe.forEach(t),vso=i(S),os=n(S,"LI",{});var ak=s(os);Qne=n(ak,"STRONG",{});var Dot=s(Qne);Fso=r(Dot,"funnel"),Dot.forEach(t),Tso=r(ak," \u2014 "),oB=n(ak,"A",{href:!0});var Got=s(oB);Mso=r(Got,"FunnelTokenizer"),Got.forEach(t),Eso=r(ak," or "),rB=n(ak,"A",{href:!0});var Oot=s(rB);Cso=r(Oot,"FunnelTokenizerFast"),Oot.forEach(t),wso=r(ak," (Funnel Transformer model)"),ak.forEach(t),Aso=i(S),rs=n(S,"LI",{});var nk=s(rs);Hne=n(nk,"STRONG",{});var Vot=s(Hne);Lso=r(Vot,"gpt2"),Vot.forEach(t),yso=r(nk," \u2014 "),tB=n(nk,"A",{href:!0});var Xot=s(tB);xso=r(Xot,"GPT2Tokenizer"),Xot.forEach(t),$so=r(nk," or "),aB=n(nk,"A",{href:!0});var zot=s(aB);kso=r(zot,"GPT2TokenizerFast"),zot.forEach(t),Sso=r(nk," (OpenAI GPT-2 model)"),nk.forEach(t),Rso=i(S),ts=n(S,"LI",{});var sk=s(ts);Une=n(sk,"STRONG",{});var Wot=s(Une);Pso=r(Wot,"gpt_neo"),Wot.forEach(t),Bso=r(sk," \u2014 "),nB=n(sk,"A",{href:!0});var Qot=s(nB);Iso=r(Qot,"GPT2Tokenizer"),Qot.forEach(t),Nso=r(sk," or "),sB=n(sk,"A",{href:!0});var Hot=s(sB);qso=r(Hot,"GPT2TokenizerFast"),Hot.forEach(t),jso=r(sk," (GPT Neo model)"),sk.forEach(t),Dso=i(S),eh=n(S,"LI",{});var cAe=s(eh);Jne=n(cAe,"STRONG",{});var Uot=s(Jne);Gso=r(Uot,"gpt_neox"),Uot.forEach(t),Oso=r(cAe," \u2014 "),lB=n(cAe,"A",{href:!0});var Jot=s(lB);Vso=r(Jot,"GPTNeoXTokenizerFast"),Jot.forEach(t),Xso=r(cAe," (GPT NeoX model)"),cAe.forEach(t),zso=i(S),as=n(S,"LI",{});var lk=s(as);Yne=n(lk,"STRONG",{});var Yot=s(Yne);Wso=r(Yot,"gptj"),Yot.forEach(t),Qso=r(lk," \u2014 "),iB=n(lk,"A",{href:!0});var Kot=s(iB);Hso=r(Kot,"GPT2Tokenizer"),Kot.forEach(t),Uso=r(lk," or "),dB=n(lk,"A",{href:!0});var Zot=s(dB);Jso=r(Zot,"GPT2TokenizerFast"),Zot.forEach(t),Yso=r(lk," (GPT-J model)"),lk.forEach(t),Kso=i(S),ns=n(S,"LI",{});var ik=s(ns);Kne=n(ik,"STRONG",{});var ert=s(Kne);Zso=r(ert,"herbert"),ert.forEach(t),elo=r(ik," \u2014 "),cB=n(ik,"A",{href:!0});var ort=s(cB);olo=r(ort,"HerbertTokenizer"),ort.forEach(t),rlo=r(ik," or "),fB=n(ik,"A",{href:!0});var rrt=s(fB);tlo=r(rrt,"HerbertTokenizerFast"),rrt.forEach(t),alo=r(ik," (HerBERT model)"),ik.forEach(t),nlo=i(S),oh=n(S,"LI",{});var fAe=s(oh);Zne=n(fAe,"STRONG",{});var trt=s(Zne);slo=r(trt,"hubert"),trt.forEach(t),llo=r(fAe," \u2014 "),mB=n(fAe,"A",{href:!0});var art=s(mB);ilo=r(art,"Wav2Vec2CTCTokenizer"),art.forEach(t),dlo=r(fAe," (Hubert model)"),fAe.forEach(t),clo=i(S),ss=n(S,"LI",{});var dk=s(ss);ese=n(dk,"STRONG",{});var nrt=s(ese);flo=r(nrt,"ibert"),nrt.forEach(t),mlo=r(dk," \u2014 "),gB=n(dk,"A",{href:!0});var srt=s(gB);glo=r(srt,"RobertaTokenizer"),srt.forEach(t),hlo=r(dk," or "),hB=n(dk,"A",{href:!0});var lrt=s(hB);plo=r(lrt,"RobertaTokenizerFast"),lrt.forEach(t),ulo=r(dk," (I-BERT model)"),dk.forEach(t),_lo=i(S),rh=n(S,"LI",{});var mAe=s(rh);ose=n(mAe,"STRONG",{});var irt=s(ose);blo=r(irt,"jukebox"),irt.forEach(t),vlo=r(mAe," \u2014 "),rse=n(mAe,"CODE",{});var drt=s(rse);Flo=r(drt,"JukeboxTokenizer"),drt.forEach(t),Tlo=r(mAe," (Jukebox model)"),mAe.forEach(t),Mlo=i(S),ls=n(S,"LI",{});var ck=s(ls);tse=n(ck,"STRONG",{});var crt=s(tse);Elo=r(crt,"layoutlm"),crt.forEach(t),Clo=r(ck," \u2014 "),pB=n(ck,"A",{href:!0});var frt=s(pB);wlo=r(frt,"LayoutLMTokenizer"),frt.forEach(t),Alo=r(ck," or "),uB=n(ck,"A",{href:!0});var mrt=s(uB);Llo=r(mrt,"LayoutLMTokenizerFast"),mrt.forEach(t),ylo=r(ck," (LayoutLM model)"),ck.forEach(t),xlo=i(S),is=n(S,"LI",{});var fk=s(is);ase=n(fk,"STRONG",{});var grt=s(ase);$lo=r(grt,"layoutlmv2"),grt.forEach(t),klo=r(fk," \u2014 "),_B=n(fk,"A",{href:!0});var hrt=s(_B);Slo=r(hrt,"LayoutLMv2Tokenizer"),hrt.forEach(t),Rlo=r(fk," or "),bB=n(fk,"A",{href:!0});var prt=s(bB);Plo=r(prt,"LayoutLMv2TokenizerFast"),prt.forEach(t),Blo=r(fk," (LayoutLMv2 model)"),fk.forEach(t),Ilo=i(S),ds=n(S,"LI",{});var mk=s(ds);nse=n(mk,"STRONG",{});var urt=s(nse);Nlo=r(urt,"layoutlmv3"),urt.forEach(t),qlo=r(mk," \u2014 "),vB=n(mk,"A",{href:!0});var _rt=s(vB);jlo=r(_rt,"LayoutLMv3Tokenizer"),_rt.forEach(t),Dlo=r(mk," or "),FB=n(mk,"A",{href:!0});var brt=s(FB);Glo=r(brt,"LayoutLMv3TokenizerFast"),brt.forEach(t),Olo=r(mk," (LayoutLMv3 model)"),mk.forEach(t),Vlo=i(S),cs=n(S,"LI",{});var gk=s(cs);sse=n(gk,"STRONG",{});var vrt=s(sse);Xlo=r(vrt,"layoutxlm"),vrt.forEach(t),zlo=r(gk," \u2014 "),TB=n(gk,"A",{href:!0});var Frt=s(TB);Wlo=r(Frt,"LayoutXLMTokenizer"),Frt.forEach(t),Qlo=r(gk," or "),MB=n(gk,"A",{href:!0});var Trt=s(MB);Hlo=r(Trt,"LayoutXLMTokenizerFast"),Trt.forEach(t),Ulo=r(gk," (LayoutXLM model)"),gk.forEach(t),Jlo=i(S),fs=n(S,"LI",{});var hk=s(fs);lse=n(hk,"STRONG",{});var Mrt=s(lse);Ylo=r(Mrt,"led"),Mrt.forEach(t),Klo=r(hk," \u2014 "),EB=n(hk,"A",{href:!0});var Ert=s(EB);Zlo=r(Ert,"LEDTokenizer"),Ert.forEach(t),eio=r(hk," or "),CB=n(hk,"A",{href:!0});var Crt=s(CB);oio=r(Crt,"LEDTokenizerFast"),Crt.forEach(t),rio=r(hk," (LED model)"),hk.forEach(t),tio=i(S),ms=n(S,"LI",{});var pk=s(ms);ise=n(pk,"STRONG",{});var wrt=s(ise);aio=r(wrt,"longformer"),wrt.forEach(t),nio=r(pk," \u2014 "),wB=n(pk,"A",{href:!0});var Art=s(wB);sio=r(Art,"LongformerTokenizer"),Art.forEach(t),lio=r(pk," or "),AB=n(pk,"A",{href:!0});var Lrt=s(AB);iio=r(Lrt,"LongformerTokenizerFast"),Lrt.forEach(t),dio=r(pk," (Longformer model)"),pk.forEach(t),cio=i(S),gs=n(S,"LI",{});var uk=s(gs);dse=n(uk,"STRONG",{});var yrt=s(dse);fio=r(yrt,"longt5"),yrt.forEach(t),mio=r(uk," \u2014 "),LB=n(uk,"A",{href:!0});var xrt=s(LB);gio=r(xrt,"T5Tokenizer"),xrt.forEach(t),hio=r(uk," or "),yB=n(uk,"A",{href:!0});var $rt=s(yB);pio=r($rt,"T5TokenizerFast"),$rt.forEach(t),uio=r(uk," (LongT5 model)"),uk.forEach(t),_io=i(S),th=n(S,"LI",{});var gAe=s(th);cse=n(gAe,"STRONG",{});var krt=s(cse);bio=r(krt,"luke"),krt.forEach(t),vio=r(gAe," \u2014 "),xB=n(gAe,"A",{href:!0});var Srt=s(xB);Fio=r(Srt,"LukeTokenizer"),Srt.forEach(t),Tio=r(gAe," (LUKE model)"),gAe.forEach(t),Mio=i(S),hs=n(S,"LI",{});var _k=s(hs);fse=n(_k,"STRONG",{});var Rrt=s(fse);Eio=r(Rrt,"lxmert"),Rrt.forEach(t),Cio=r(_k," \u2014 "),$B=n(_k,"A",{href:!0});var Prt=s($B);wio=r(Prt,"LxmertTokenizer"),Prt.forEach(t),Aio=r(_k," or "),kB=n(_k,"A",{href:!0});var Brt=s(kB);Lio=r(Brt,"LxmertTokenizerFast"),Brt.forEach(t),yio=r(_k," (LXMERT model)"),_k.forEach(t),xio=i(S),ah=n(S,"LI",{});var hAe=s(ah);mse=n(hAe,"STRONG",{});var Irt=s(mse);$io=r(Irt,"m2m_100"),Irt.forEach(t),kio=r(hAe," \u2014 "),SB=n(hAe,"A",{href:!0});var Nrt=s(SB);Sio=r(Nrt,"M2M100Tokenizer"),Nrt.forEach(t),Rio=r(hAe," (M2M100 model)"),hAe.forEach(t),Pio=i(S),nh=n(S,"LI",{});var pAe=s(nh);gse=n(pAe,"STRONG",{});var qrt=s(gse);Bio=r(qrt,"marian"),qrt.forEach(t),Iio=r(pAe," \u2014 "),RB=n(pAe,"A",{href:!0});var jrt=s(RB);Nio=r(jrt,"MarianTokenizer"),jrt.forEach(t),qio=r(pAe," (Marian model)"),pAe.forEach(t),jio=i(S),ps=n(S,"LI",{});var bk=s(ps);hse=n(bk,"STRONG",{});var Drt=s(hse);Dio=r(Drt,"mbart"),Drt.forEach(t),Gio=r(bk," \u2014 "),PB=n(bk,"A",{href:!0});var Grt=s(PB);Oio=r(Grt,"MBartTokenizer"),Grt.forEach(t),Vio=r(bk," or "),BB=n(bk,"A",{href:!0});var Ort=s(BB);Xio=r(Ort,"MBartTokenizerFast"),Ort.forEach(t),zio=r(bk," (mBART model)"),bk.forEach(t),Wio=i(S),us=n(S,"LI",{});var vk=s(us);pse=n(vk,"STRONG",{});var Vrt=s(pse);Qio=r(Vrt,"mbart50"),Vrt.forEach(t),Hio=r(vk," \u2014 "),IB=n(vk,"A",{href:!0});var Xrt=s(IB);Uio=r(Xrt,"MBart50Tokenizer"),Xrt.forEach(t),Jio=r(vk," or "),NB=n(vk,"A",{href:!0});var zrt=s(NB);Yio=r(zrt,"MBart50TokenizerFast"),zrt.forEach(t),Kio=r(vk," (mBART-50 model)"),vk.forEach(t),Zio=i(S),_s=n(S,"LI",{});var Fk=s(_s);use=n(Fk,"STRONG",{});var Wrt=s(use);edo=r(Wrt,"megatron-bert"),Wrt.forEach(t),odo=r(Fk," \u2014 "),qB=n(Fk,"A",{href:!0});var Qrt=s(qB);rdo=r(Qrt,"BertTokenizer"),Qrt.forEach(t),tdo=r(Fk," or "),jB=n(Fk,"A",{href:!0});var Hrt=s(jB);ado=r(Hrt,"BertTokenizerFast"),Hrt.forEach(t),ndo=r(Fk," (Megatron-BERT model)"),Fk.forEach(t),sdo=i(S),sh=n(S,"LI",{});var uAe=s(sh);_se=n(uAe,"STRONG",{});var Urt=s(_se);ldo=r(Urt,"mluke"),Urt.forEach(t),ido=r(uAe," \u2014 "),DB=n(uAe,"A",{href:!0});var Jrt=s(DB);ddo=r(Jrt,"MLukeTokenizer"),Jrt.forEach(t),cdo=r(uAe," (mLUKE model)"),uAe.forEach(t),fdo=i(S),bs=n(S,"LI",{});var Tk=s(bs);bse=n(Tk,"STRONG",{});var Yrt=s(bse);mdo=r(Yrt,"mobilebert"),Yrt.forEach(t),gdo=r(Tk," \u2014 "),GB=n(Tk,"A",{href:!0});var Krt=s(GB);hdo=r(Krt,"MobileBertTokenizer"),Krt.forEach(t),pdo=r(Tk," or "),OB=n(Tk,"A",{href:!0});var Zrt=s(OB);udo=r(Zrt,"MobileBertTokenizerFast"),Zrt.forEach(t),_do=r(Tk," (MobileBERT model)"),Tk.forEach(t),bdo=i(S),vs=n(S,"LI",{});var Mk=s(vs);vse=n(Mk,"STRONG",{});var ett=s(vse);vdo=r(ett,"mpnet"),ett.forEach(t),Fdo=r(Mk," \u2014 "),VB=n(Mk,"A",{href:!0});var ott=s(VB);Tdo=r(ott,"MPNetTokenizer"),ott.forEach(t),Mdo=r(Mk," or "),XB=n(Mk,"A",{href:!0});var rtt=s(XB);Edo=r(rtt,"MPNetTokenizerFast"),rtt.forEach(t),Cdo=r(Mk," (MPNet model)"),Mk.forEach(t),wdo=i(S),Fs=n(S,"LI",{});var Ek=s(Fs);Fse=n(Ek,"STRONG",{});var ttt=s(Fse);Ado=r(ttt,"mt5"),ttt.forEach(t),Ldo=r(Ek," \u2014 "),zB=n(Ek,"A",{href:!0});var att=s(zB);ydo=r(att,"MT5Tokenizer"),att.forEach(t),xdo=r(Ek," or "),WB=n(Ek,"A",{href:!0});var ntt=s(WB);$do=r(ntt,"MT5TokenizerFast"),ntt.forEach(t),kdo=r(Ek," (MT5 model)"),Ek.forEach(t),Sdo=i(S),Ts=n(S,"LI",{});var Ck=s(Ts);Tse=n(Ck,"STRONG",{});var stt=s(Tse);Rdo=r(stt,"nystromformer"),stt.forEach(t),Pdo=r(Ck," \u2014 "),QB=n(Ck,"A",{href:!0});var ltt=s(QB);Bdo=r(ltt,"AlbertTokenizer"),ltt.forEach(t),Ido=r(Ck," or "),HB=n(Ck,"A",{href:!0});var itt=s(HB);Ndo=r(itt,"AlbertTokenizerFast"),itt.forEach(t),qdo=r(Ck," (Nystr\xF6mformer model)"),Ck.forEach(t),jdo=i(S),Ms=n(S,"LI",{});var wk=s(Ms);Mse=n(wk,"STRONG",{});var dtt=s(Mse);Ddo=r(dtt,"openai-gpt"),dtt.forEach(t),Gdo=r(wk," \u2014 "),UB=n(wk,"A",{href:!0});var ctt=s(UB);Odo=r(ctt,"OpenAIGPTTokenizer"),ctt.forEach(t),Vdo=r(wk," or "),JB=n(wk,"A",{href:!0});var ftt=s(JB);Xdo=r(ftt,"OpenAIGPTTokenizerFast"),ftt.forEach(t),zdo=r(wk," (OpenAI GPT model)"),wk.forEach(t),Wdo=i(S),lh=n(S,"LI",{});var _Ae=s(lh);Ese=n(_Ae,"STRONG",{});var mtt=s(Ese);Qdo=r(mtt,"opt"),mtt.forEach(t),Hdo=r(_Ae," \u2014 "),YB=n(_Ae,"A",{href:!0});var gtt=s(YB);Udo=r(gtt,"GPT2Tokenizer"),gtt.forEach(t),Jdo=r(_Ae," (OPT model)"),_Ae.forEach(t),Ydo=i(S),Es=n(S,"LI",{});var Ak=s(Es);Cse=n(Ak,"STRONG",{});var htt=s(Cse);Kdo=r(htt,"pegasus"),htt.forEach(t),Zdo=r(Ak," \u2014 "),KB=n(Ak,"A",{href:!0});var ptt=s(KB);eco=r(ptt,"PegasusTokenizer"),ptt.forEach(t),oco=r(Ak," or "),ZB=n(Ak,"A",{href:!0});var utt=s(ZB);rco=r(utt,"PegasusTokenizerFast"),utt.forEach(t),tco=r(Ak," (Pegasus model)"),Ak.forEach(t),aco=i(S),ih=n(S,"LI",{});var bAe=s(ih);wse=n(bAe,"STRONG",{});var _tt=s(wse);nco=r(_tt,"perceiver"),_tt.forEach(t),sco=r(bAe," \u2014 "),eI=n(bAe,"A",{href:!0});var btt=s(eI);lco=r(btt,"PerceiverTokenizer"),btt.forEach(t),ico=r(bAe," (Perceiver model)"),bAe.forEach(t),dco=i(S),dh=n(S,"LI",{});var vAe=s(dh);Ase=n(vAe,"STRONG",{});var vtt=s(Ase);cco=r(vtt,"phobert"),vtt.forEach(t),fco=r(vAe," \u2014 "),oI=n(vAe,"A",{href:!0});var Ftt=s(oI);mco=r(Ftt,"PhobertTokenizer"),Ftt.forEach(t),gco=r(vAe," (PhoBERT model)"),vAe.forEach(t),hco=i(S),ch=n(S,"LI",{});var FAe=s(ch);Lse=n(FAe,"STRONG",{});var Ttt=s(Lse);pco=r(Ttt,"plbart"),Ttt.forEach(t),uco=r(FAe," \u2014 "),rI=n(FAe,"A",{href:!0});var Mtt=s(rI);_co=r(Mtt,"PLBartTokenizer"),Mtt.forEach(t),bco=r(FAe," (PLBart model)"),FAe.forEach(t),vco=i(S),fh=n(S,"LI",{});var TAe=s(fh);yse=n(TAe,"STRONG",{});var Ett=s(yse);Fco=r(Ett,"prophetnet"),Ett.forEach(t),Tco=r(TAe," \u2014 "),tI=n(TAe,"A",{href:!0});var Ctt=s(tI);Mco=r(Ctt,"ProphetNetTokenizer"),Ctt.forEach(t),Eco=r(TAe," (ProphetNet model)"),TAe.forEach(t),Cco=i(S),Cs=n(S,"LI",{});var Lk=s(Cs);xse=n(Lk,"STRONG",{});var wtt=s(xse);wco=r(wtt,"qdqbert"),wtt.forEach(t),Aco=r(Lk," \u2014 "),aI=n(Lk,"A",{href:!0});var Att=s(aI);Lco=r(Att,"BertTokenizer"),Att.forEach(t),yco=r(Lk," or "),nI=n(Lk,"A",{href:!0});var Ltt=s(nI);xco=r(Ltt,"BertTokenizerFast"),Ltt.forEach(t),$co=r(Lk," (QDQBert model)"),Lk.forEach(t),kco=i(S),mh=n(S,"LI",{});var MAe=s(mh);$se=n(MAe,"STRONG",{});var ytt=s($se);Sco=r(ytt,"rag"),ytt.forEach(t),Rco=r(MAe," \u2014 "),sI=n(MAe,"A",{href:!0});var xtt=s(sI);Pco=r(xtt,"RagTokenizer"),xtt.forEach(t),Bco=r(MAe," (RAG model)"),MAe.forEach(t),Ico=i(S),ws=n(S,"LI",{});var yk=s(ws);kse=n(yk,"STRONG",{});var $tt=s(kse);Nco=r($tt,"realm"),$tt.forEach(t),qco=r(yk," \u2014 "),lI=n(yk,"A",{href:!0});var ktt=s(lI);jco=r(ktt,"RealmTokenizer"),ktt.forEach(t),Dco=r(yk," or "),iI=n(yk,"A",{href:!0});var Stt=s(iI);Gco=r(Stt,"RealmTokenizerFast"),Stt.forEach(t),Oco=r(yk," (REALM model)"),yk.forEach(t),Vco=i(S),As=n(S,"LI",{});var xk=s(As);Sse=n(xk,"STRONG",{});var Rtt=s(Sse);Xco=r(Rtt,"reformer"),Rtt.forEach(t),zco=r(xk," \u2014 "),dI=n(xk,"A",{href:!0});var Ptt=s(dI);Wco=r(Ptt,"ReformerTokenizer"),Ptt.forEach(t),Qco=r(xk," or "),cI=n(xk,"A",{href:!0});var Btt=s(cI);Hco=r(Btt,"ReformerTokenizerFast"),Btt.forEach(t),Uco=r(xk," (Reformer model)"),xk.forEach(t),Jco=i(S),Ls=n(S,"LI",{});var $k=s(Ls);Rse=n($k,"STRONG",{});var Itt=s(Rse);Yco=r(Itt,"rembert"),Itt.forEach(t),Kco=r($k," \u2014 "),fI=n($k,"A",{href:!0});var Ntt=s(fI);Zco=r(Ntt,"RemBertTokenizer"),Ntt.forEach(t),efo=r($k," or "),mI=n($k,"A",{href:!0});var qtt=s(mI);ofo=r(qtt,"RemBertTokenizerFast"),qtt.forEach(t),rfo=r($k," (RemBERT model)"),$k.forEach(t),tfo=i(S),ys=n(S,"LI",{});var kk=s(ys);Pse=n(kk,"STRONG",{});var jtt=s(Pse);afo=r(jtt,"retribert"),jtt.forEach(t),nfo=r(kk," \u2014 "),gI=n(kk,"A",{href:!0});var Dtt=s(gI);sfo=r(Dtt,"RetriBertTokenizer"),Dtt.forEach(t),lfo=r(kk," or "),hI=n(kk,"A",{href:!0});var Gtt=s(hI);ifo=r(Gtt,"RetriBertTokenizerFast"),Gtt.forEach(t),dfo=r(kk," (RetriBERT model)"),kk.forEach(t),cfo=i(S),xs=n(S,"LI",{});var Sk=s(xs);Bse=n(Sk,"STRONG",{});var Ott=s(Bse);ffo=r(Ott,"roberta"),Ott.forEach(t),mfo=r(Sk," \u2014 "),pI=n(Sk,"A",{href:!0});var Vtt=s(pI);gfo=r(Vtt,"RobertaTokenizer"),Vtt.forEach(t),hfo=r(Sk," or "),uI=n(Sk,"A",{href:!0});var Xtt=s(uI);pfo=r(Xtt,"RobertaTokenizerFast"),Xtt.forEach(t),ufo=r(Sk," (RoBERTa model)"),Sk.forEach(t),_fo=i(S),$s=n(S,"LI",{});var Rk=s($s);Ise=n(Rk,"STRONG",{});var ztt=s(Ise);bfo=r(ztt,"roformer"),ztt.forEach(t),vfo=r(Rk," \u2014 "),_I=n(Rk,"A",{href:!0});var Wtt=s(_I);Ffo=r(Wtt,"RoFormerTokenizer"),Wtt.forEach(t),Tfo=r(Rk," or "),bI=n(Rk,"A",{href:!0});var Qtt=s(bI);Mfo=r(Qtt,"RoFormerTokenizerFast"),Qtt.forEach(t),Efo=r(Rk," (RoFormer model)"),Rk.forEach(t),Cfo=i(S),gh=n(S,"LI",{});var EAe=s(gh);Nse=n(EAe,"STRONG",{});var Htt=s(Nse);wfo=r(Htt,"speech_to_text"),Htt.forEach(t),Afo=r(EAe," \u2014 "),vI=n(EAe,"A",{href:!0});var Utt=s(vI);Lfo=r(Utt,"Speech2TextTokenizer"),Utt.forEach(t),yfo=r(EAe," (Speech2Text model)"),EAe.forEach(t),xfo=i(S),hh=n(S,"LI",{});var CAe=s(hh);qse=n(CAe,"STRONG",{});var Jtt=s(qse);$fo=r(Jtt,"speech_to_text_2"),Jtt.forEach(t),kfo=r(CAe," \u2014 "),FI=n(CAe,"A",{href:!0});var Ytt=s(FI);Sfo=r(Ytt,"Speech2Text2Tokenizer"),Ytt.forEach(t),Rfo=r(CAe," (Speech2Text2 model)"),CAe.forEach(t),Pfo=i(S),ks=n(S,"LI",{});var Pk=s(ks);jse=n(Pk,"STRONG",{});var Ktt=s(jse);Bfo=r(Ktt,"splinter"),Ktt.forEach(t),Ifo=r(Pk," \u2014 "),TI=n(Pk,"A",{href:!0});var Ztt=s(TI);Nfo=r(Ztt,"SplinterTokenizer"),Ztt.forEach(t),qfo=r(Pk," or "),MI=n(Pk,"A",{href:!0});var eat=s(MI);jfo=r(eat,"SplinterTokenizerFast"),eat.forEach(t),Dfo=r(Pk," (Splinter model)"),Pk.forEach(t),Gfo=i(S),Ss=n(S,"LI",{});var Bk=s(Ss);Dse=n(Bk,"STRONG",{});var oat=s(Dse);Ofo=r(oat,"squeezebert"),oat.forEach(t),Vfo=r(Bk," \u2014 "),EI=n(Bk,"A",{href:!0});var rat=s(EI);Xfo=r(rat,"SqueezeBertTokenizer"),rat.forEach(t),zfo=r(Bk," or "),CI=n(Bk,"A",{href:!0});var tat=s(CI);Wfo=r(tat,"SqueezeBertTokenizerFast"),tat.forEach(t),Qfo=r(Bk," (SqueezeBERT model)"),Bk.forEach(t),Hfo=i(S),Rs=n(S,"LI",{});var Ik=s(Rs);Gse=n(Ik,"STRONG",{});var aat=s(Gse);Ufo=r(aat,"t5"),aat.forEach(t),Jfo=r(Ik," \u2014 "),wI=n(Ik,"A",{href:!0});var nat=s(wI);Yfo=r(nat,"T5Tokenizer"),nat.forEach(t),Kfo=r(Ik," or "),AI=n(Ik,"A",{href:!0});var sat=s(AI);Zfo=r(sat,"T5TokenizerFast"),sat.forEach(t),emo=r(Ik," (T5 model)"),Ik.forEach(t),omo=i(S),ph=n(S,"LI",{});var wAe=s(ph);Ose=n(wAe,"STRONG",{});var lat=s(Ose);rmo=r(lat,"tapas"),lat.forEach(t),tmo=r(wAe," \u2014 "),LI=n(wAe,"A",{href:!0});var iat=s(LI);amo=r(iat,"TapasTokenizer"),iat.forEach(t),nmo=r(wAe," (TAPAS model)"),wAe.forEach(t),smo=i(S),uh=n(S,"LI",{});var AAe=s(uh);Vse=n(AAe,"STRONG",{});var dat=s(Vse);lmo=r(dat,"tapex"),dat.forEach(t),imo=r(AAe," \u2014 "),yI=n(AAe,"A",{href:!0});var cat=s(yI);dmo=r(cat,"TapexTokenizer"),cat.forEach(t),cmo=r(AAe," (TAPEX model)"),AAe.forEach(t),fmo=i(S),_h=n(S,"LI",{});var LAe=s(_h);Xse=n(LAe,"STRONG",{});var fat=s(Xse);mmo=r(fat,"transfo-xl"),fat.forEach(t),gmo=r(LAe," \u2014 "),xI=n(LAe,"A",{href:!0});var mat=s(xI);hmo=r(mat,"TransfoXLTokenizer"),mat.forEach(t),pmo=r(LAe," (Transformer-XL model)"),LAe.forEach(t),umo=i(S),Ps=n(S,"LI",{});var Nk=s(Ps);zse=n(Nk,"STRONG",{});var gat=s(zse);_mo=r(gat,"vilt"),gat.forEach(t),bmo=r(Nk," \u2014 "),$I=n(Nk,"A",{href:!0});var hat=s($I);vmo=r(hat,"BertTokenizer"),hat.forEach(t),Fmo=r(Nk," or "),kI=n(Nk,"A",{href:!0});var pat=s(kI);Tmo=r(pat,"BertTokenizerFast"),pat.forEach(t),Mmo=r(Nk," (ViLT model)"),Nk.forEach(t),Emo=i(S),Bs=n(S,"LI",{});var qk=s(Bs);Wse=n(qk,"STRONG",{});var uat=s(Wse);Cmo=r(uat,"visual_bert"),uat.forEach(t),wmo=r(qk," \u2014 "),SI=n(qk,"A",{href:!0});var _at=s(SI);Amo=r(_at,"BertTokenizer"),_at.forEach(t),Lmo=r(qk," or "),RI=n(qk,"A",{href:!0});var bat=s(RI);ymo=r(bat,"BertTokenizerFast"),bat.forEach(t),xmo=r(qk," (VisualBERT model)"),qk.forEach(t),$mo=i(S),bh=n(S,"LI",{});var yAe=s(bh);Qse=n(yAe,"STRONG",{});var vat=s(Qse);kmo=r(vat,"wav2vec2"),vat.forEach(t),Smo=r(yAe," \u2014 "),PI=n(yAe,"A",{href:!0});var Fat=s(PI);Rmo=r(Fat,"Wav2Vec2CTCTokenizer"),Fat.forEach(t),Pmo=r(yAe," (Wav2Vec2 model)"),yAe.forEach(t),Bmo=i(S),vh=n(S,"LI",{});var xAe=s(vh);Hse=n(xAe,"STRONG",{});var Tat=s(Hse);Imo=r(Tat,"wav2vec2-conformer"),Tat.forEach(t),Nmo=r(xAe," \u2014 "),BI=n(xAe,"A",{href:!0});var Mat=s(BI);qmo=r(Mat,"Wav2Vec2CTCTokenizer"),Mat.forEach(t),jmo=r(xAe," (Wav2Vec2-Conformer model)"),xAe.forEach(t),Dmo=i(S),Fh=n(S,"LI",{});var $Ae=s(Fh);Use=n($Ae,"STRONG",{});var Eat=s(Use);Gmo=r(Eat,"wav2vec2_phoneme"),Eat.forEach(t),Omo=r($Ae," \u2014 "),II=n($Ae,"A",{href:!0});var Cat=s(II);Vmo=r(Cat,"Wav2Vec2PhonemeCTCTokenizer"),Cat.forEach(t),Xmo=r($Ae," (Wav2Vec2Phoneme model)"),$Ae.forEach(t),zmo=i(S),Is=n(S,"LI",{});var jk=s(Is);Jse=n(jk,"STRONG",{});var wat=s(Jse);Wmo=r(wat,"xglm"),wat.forEach(t),Qmo=r(jk," \u2014 "),NI=n(jk,"A",{href:!0});var Aat=s(NI);Hmo=r(Aat,"XGLMTokenizer"),Aat.forEach(t),Umo=r(jk," or "),qI=n(jk,"A",{href:!0});var Lat=s(qI);Jmo=r(Lat,"XGLMTokenizerFast"),Lat.forEach(t),Ymo=r(jk," (XGLM model)"),jk.forEach(t),Kmo=i(S),Th=n(S,"LI",{});var kAe=s(Th);Yse=n(kAe,"STRONG",{});var yat=s(Yse);Zmo=r(yat,"xlm"),yat.forEach(t),ego=r(kAe," \u2014 "),jI=n(kAe,"A",{href:!0});var xat=s(jI);ogo=r(xat,"XLMTokenizer"),xat.forEach(t),rgo=r(kAe," (XLM model)"),kAe.forEach(t),tgo=i(S),Mh=n(S,"LI",{});var SAe=s(Mh);Kse=n(SAe,"STRONG",{});var $at=s(Kse);ago=r($at,"xlm-prophetnet"),$at.forEach(t),ngo=r(SAe," \u2014 "),DI=n(SAe,"A",{href:!0});var kat=s(DI);sgo=r(kat,"XLMProphetNetTokenizer"),kat.forEach(t),lgo=r(SAe," (XLM-ProphetNet model)"),SAe.forEach(t),igo=i(S),Ns=n(S,"LI",{});var Dk=s(Ns);Zse=n(Dk,"STRONG",{});var Sat=s(Zse);dgo=r(Sat,"xlm-roberta"),Sat.forEach(t),cgo=r(Dk," \u2014 "),GI=n(Dk,"A",{href:!0});var Rat=s(GI);fgo=r(Rat,"XLMRobertaTokenizer"),Rat.forEach(t),mgo=r(Dk," or "),OI=n(Dk,"A",{href:!0});var Pat=s(OI);ggo=r(Pat,"XLMRobertaTokenizerFast"),Pat.forEach(t),hgo=r(Dk," (XLM-RoBERTa model)"),Dk.forEach(t),pgo=i(S),qs=n(S,"LI",{});var Gk=s(qs);ele=n(Gk,"STRONG",{});var Bat=s(ele);ugo=r(Bat,"xlm-roberta-xl"),Bat.forEach(t),_go=r(Gk," \u2014 "),VI=n(Gk,"A",{href:!0});var Iat=s(VI);bgo=r(Iat,"RobertaTokenizer"),Iat.forEach(t),vgo=r(Gk," or "),XI=n(Gk,"A",{href:!0});var Nat=s(XI);Fgo=r(Nat,"RobertaTokenizerFast"),Nat.forEach(t),Tgo=r(Gk," (XLM-RoBERTa-XL model)"),Gk.forEach(t),Mgo=i(S),js=n(S,"LI",{});var Ok=s(js);ole=n(Ok,"STRONG",{});var qat=s(ole);Ego=r(qat,"xlnet"),qat.forEach(t),Cgo=r(Ok," \u2014 "),zI=n(Ok,"A",{href:!0});var jat=s(zI);wgo=r(jat,"XLNetTokenizer"),jat.forEach(t),Ago=r(Ok," or "),WI=n(Ok,"A",{href:!0});var Dat=s(WI);Lgo=r(Dat,"XLNetTokenizerFast"),Dat.forEach(t),ygo=r(Ok," (XLNet model)"),Ok.forEach(t),xgo=i(S),Ds=n(S,"LI",{});var Vk=s(Ds);rle=n(Vk,"STRONG",{});var Gat=s(rle);$go=r(Gat,"yoso"),Gat.forEach(t),kgo=r(Vk," \u2014 "),QI=n(Vk,"A",{href:!0});var Oat=s(QI);Sgo=r(Oat,"AlbertTokenizer"),Oat.forEach(t),Rgo=r(Vk," or "),HI=n(Vk,"A",{href:!0});var Vat=s(HI);Pgo=r(Vat,"AlbertTokenizerFast"),Vat.forEach(t),Bgo=r(Vk," (YOSO model)"),Vk.forEach(t),S.forEach(t),Igo=i(Ws),T(Eh.$$.fragment,Ws),Ws.forEach(t),Ngo=i(zs),Ch=n(zs,"DIV",{class:!0});var FVe=s(Ch);T(BA.$$.fragment,FVe),qgo=i(FVe),tle=n(FVe,"P",{});var Xat=s(tle);jgo=r(Xat,"Register a new tokenizer in this mapping."),Xat.forEach(t),FVe.forEach(t),zs.forEach(t),vGe=i(f),ki=n(f,"H2",{class:!0});var TVe=s(ki);wh=n(TVe,"A",{id:!0,class:!0,href:!0});var zat=s(wh);ale=n(zat,"SPAN",{});var Wat=s(ale);T(IA.$$.fragment,Wat),Wat.forEach(t),zat.forEach(t),Dgo=i(TVe),nle=n(TVe,"SPAN",{});var Qat=s(nle);Ggo=r(Qat,"AutoFeatureExtractor"),Qat.forEach(t),TVe.forEach(t),FGe=i(f),Lo=n(f,"DIV",{class:!0});var Qs=s(Lo);T(NA.$$.fragment,Qs),Ogo=i(Qs),qA=n(Qs,"P",{});var MVe=s(qA);Vgo=r(MVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UI=n(MVe,"A",{href:!0});var Hat=s(UI);Xgo=r(Hat,"AutoFeatureExtractor.from_pretrained()"),Hat.forEach(t),zgo=r(MVe," class method."),MVe.forEach(t),Wgo=i(Qs),jA=n(Qs,"P",{});var EVe=s(jA);Qgo=r(EVe,"This class cannot be instantiated directly using "),sle=n(EVe,"CODE",{});var Uat=s(sle);Hgo=r(Uat,"__init__()"),Uat.forEach(t),Ugo=r(EVe," (throws an error)."),EVe.forEach(t),Jgo=i(Qs),He=n(Qs,"DIV",{class:!0});var ra=s(He);T(DA.$$.fragment,ra),Ygo=i(ra),lle=n(ra,"P",{});var Jat=s(lle);Kgo=r(Jat,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Jat.forEach(t),Zgo=i(ra),ka=n(ra,"P",{});var E0=s(ka);eho=r(E0,"The feature extractor class to instantiate is selected based on the "),ile=n(E0,"CODE",{});var Yat=s(ile);oho=r(Yat,"model_type"),Yat.forEach(t),rho=r(E0,` property of the config object
(either passed as an argument or loaded from `),dle=n(E0,"CODE",{});var Kat=s(dle);tho=r(Kat,"pretrained_model_name_or_path"),Kat.forEach(t),aho=r(E0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),cle=n(E0,"CODE",{});var Zat=s(cle);nho=r(Zat,"pretrained_model_name_or_path"),Zat.forEach(t),sho=r(E0,":"),E0.forEach(t),lho=i(ra),Y=n(ra,"UL",{});var K=s(Y);Ah=n(K,"LI",{});var RAe=s(Ah);fle=n(RAe,"STRONG",{});var ent=s(fle);iho=r(ent,"beit"),ent.forEach(t),dho=r(RAe," \u2014 "),JI=n(RAe,"A",{href:!0});var ont=s(JI);cho=r(ont,"BeitFeatureExtractor"),ont.forEach(t),fho=r(RAe," (BEiT model)"),RAe.forEach(t),mho=i(K),Lh=n(K,"LI",{});var PAe=s(Lh);mle=n(PAe,"STRONG",{});var rnt=s(mle);gho=r(rnt,"clip"),rnt.forEach(t),hho=r(PAe," \u2014 "),YI=n(PAe,"A",{href:!0});var tnt=s(YI);pho=r(tnt,"CLIPFeatureExtractor"),tnt.forEach(t),uho=r(PAe," (CLIP model)"),PAe.forEach(t),_ho=i(K),yh=n(K,"LI",{});var BAe=s(yh);gle=n(BAe,"STRONG",{});var ant=s(gle);bho=r(ant,"convnext"),ant.forEach(t),vho=r(BAe," \u2014 "),KI=n(BAe,"A",{href:!0});var nnt=s(KI);Fho=r(nnt,"ConvNextFeatureExtractor"),nnt.forEach(t),Tho=r(BAe," (ConvNeXT model)"),BAe.forEach(t),Mho=i(K),xh=n(K,"LI",{});var IAe=s(xh);hle=n(IAe,"STRONG",{});var snt=s(hle);Eho=r(snt,"cvt"),snt.forEach(t),Cho=r(IAe," \u2014 "),ZI=n(IAe,"A",{href:!0});var lnt=s(ZI);who=r(lnt,"ConvNextFeatureExtractor"),lnt.forEach(t),Aho=r(IAe," (CvT model)"),IAe.forEach(t),Lho=i(K),$h=n(K,"LI",{});var NAe=s($h);ple=n(NAe,"STRONG",{});var int=s(ple);yho=r(int,"data2vec-audio"),int.forEach(t),xho=r(NAe," \u2014 "),eN=n(NAe,"A",{href:!0});var dnt=s(eN);$ho=r(dnt,"Wav2Vec2FeatureExtractor"),dnt.forEach(t),kho=r(NAe," (Data2VecAudio model)"),NAe.forEach(t),Sho=i(K),kh=n(K,"LI",{});var qAe=s(kh);ule=n(qAe,"STRONG",{});var cnt=s(ule);Rho=r(cnt,"data2vec-vision"),cnt.forEach(t),Pho=r(qAe," \u2014 "),oN=n(qAe,"A",{href:!0});var fnt=s(oN);Bho=r(fnt,"BeitFeatureExtractor"),fnt.forEach(t),Iho=r(qAe," (Data2VecVision model)"),qAe.forEach(t),Nho=i(K),Sh=n(K,"LI",{});var jAe=s(Sh);_le=n(jAe,"STRONG",{});var mnt=s(_le);qho=r(mnt,"deit"),mnt.forEach(t),jho=r(jAe," \u2014 "),rN=n(jAe,"A",{href:!0});var gnt=s(rN);Dho=r(gnt,"DeiTFeatureExtractor"),gnt.forEach(t),Gho=r(jAe," (DeiT model)"),jAe.forEach(t),Oho=i(K),Rh=n(K,"LI",{});var DAe=s(Rh);ble=n(DAe,"STRONG",{});var hnt=s(ble);Vho=r(hnt,"detr"),hnt.forEach(t),Xho=r(DAe," \u2014 "),tN=n(DAe,"A",{href:!0});var pnt=s(tN);zho=r(pnt,"DetrFeatureExtractor"),pnt.forEach(t),Who=r(DAe," (DETR model)"),DAe.forEach(t),Qho=i(K),Ph=n(K,"LI",{});var GAe=s(Ph);vle=n(GAe,"STRONG",{});var unt=s(vle);Hho=r(unt,"dpt"),unt.forEach(t),Uho=r(GAe," \u2014 "),aN=n(GAe,"A",{href:!0});var _nt=s(aN);Jho=r(_nt,"DPTFeatureExtractor"),_nt.forEach(t),Yho=r(GAe," (DPT model)"),GAe.forEach(t),Kho=i(K),Bh=n(K,"LI",{});var OAe=s(Bh);Fle=n(OAe,"STRONG",{});var bnt=s(Fle);Zho=r(bnt,"flava"),bnt.forEach(t),epo=r(OAe," \u2014 "),nN=n(OAe,"A",{href:!0});var vnt=s(nN);opo=r(vnt,"FlavaFeatureExtractor"),vnt.forEach(t),rpo=r(OAe," (FLAVA model)"),OAe.forEach(t),tpo=i(K),Ih=n(K,"LI",{});var VAe=s(Ih);Tle=n(VAe,"STRONG",{});var Fnt=s(Tle);apo=r(Fnt,"glpn"),Fnt.forEach(t),npo=r(VAe," \u2014 "),sN=n(VAe,"A",{href:!0});var Tnt=s(sN);spo=r(Tnt,"GLPNFeatureExtractor"),Tnt.forEach(t),lpo=r(VAe," (GLPN model)"),VAe.forEach(t),ipo=i(K),Nh=n(K,"LI",{});var XAe=s(Nh);Mle=n(XAe,"STRONG",{});var Mnt=s(Mle);dpo=r(Mnt,"hubert"),Mnt.forEach(t),cpo=r(XAe," \u2014 "),lN=n(XAe,"A",{href:!0});var Ent=s(lN);fpo=r(Ent,"Wav2Vec2FeatureExtractor"),Ent.forEach(t),mpo=r(XAe," (Hubert model)"),XAe.forEach(t),gpo=i(K),qh=n(K,"LI",{});var zAe=s(qh);Ele=n(zAe,"STRONG",{});var Cnt=s(Ele);hpo=r(Cnt,"imagegpt"),Cnt.forEach(t),ppo=r(zAe," \u2014 "),iN=n(zAe,"A",{href:!0});var wnt=s(iN);upo=r(wnt,"ImageGPTFeatureExtractor"),wnt.forEach(t),_po=r(zAe," (ImageGPT model)"),zAe.forEach(t),bpo=i(K),jh=n(K,"LI",{});var WAe=s(jh);Cle=n(WAe,"STRONG",{});var Ant=s(Cle);vpo=r(Ant,"layoutlmv2"),Ant.forEach(t),Fpo=r(WAe," \u2014 "),dN=n(WAe,"A",{href:!0});var Lnt=s(dN);Tpo=r(Lnt,"LayoutLMv2FeatureExtractor"),Lnt.forEach(t),Mpo=r(WAe," (LayoutLMv2 model)"),WAe.forEach(t),Epo=i(K),Dh=n(K,"LI",{});var QAe=s(Dh);wle=n(QAe,"STRONG",{});var ynt=s(wle);Cpo=r(ynt,"layoutlmv3"),ynt.forEach(t),wpo=r(QAe," \u2014 "),cN=n(QAe,"A",{href:!0});var xnt=s(cN);Apo=r(xnt,"LayoutLMv3FeatureExtractor"),xnt.forEach(t),Lpo=r(QAe," (LayoutLMv3 model)"),QAe.forEach(t),ypo=i(K),Gh=n(K,"LI",{});var HAe=s(Gh);Ale=n(HAe,"STRONG",{});var $nt=s(Ale);xpo=r($nt,"levit"),$nt.forEach(t),$po=r(HAe," \u2014 "),fN=n(HAe,"A",{href:!0});var knt=s(fN);kpo=r(knt,"LevitFeatureExtractor"),knt.forEach(t),Spo=r(HAe," (LeViT model)"),HAe.forEach(t),Rpo=i(K),Oh=n(K,"LI",{});var UAe=s(Oh);Lle=n(UAe,"STRONG",{});var Snt=s(Lle);Ppo=r(Snt,"maskformer"),Snt.forEach(t),Bpo=r(UAe," \u2014 "),mN=n(UAe,"A",{href:!0});var Rnt=s(mN);Ipo=r(Rnt,"MaskFormerFeatureExtractor"),Rnt.forEach(t),Npo=r(UAe," (MaskFormer model)"),UAe.forEach(t),qpo=i(K),Vh=n(K,"LI",{});var JAe=s(Vh);yle=n(JAe,"STRONG",{});var Pnt=s(yle);jpo=r(Pnt,"mctct"),Pnt.forEach(t),Dpo=r(JAe," \u2014 "),gN=n(JAe,"A",{href:!0});var Bnt=s(gN);Gpo=r(Bnt,"MCTCTFeatureExtractor"),Bnt.forEach(t),Opo=r(JAe," (M-CTC-T model)"),JAe.forEach(t),Vpo=i(K),Xh=n(K,"LI",{});var YAe=s(Xh);xle=n(YAe,"STRONG",{});var Int=s(xle);Xpo=r(Int,"perceiver"),Int.forEach(t),zpo=r(YAe," \u2014 "),hN=n(YAe,"A",{href:!0});var Nnt=s(hN);Wpo=r(Nnt,"PerceiverFeatureExtractor"),Nnt.forEach(t),Qpo=r(YAe," (Perceiver model)"),YAe.forEach(t),Hpo=i(K),zh=n(K,"LI",{});var KAe=s(zh);$le=n(KAe,"STRONG",{});var qnt=s($le);Upo=r(qnt,"poolformer"),qnt.forEach(t),Jpo=r(KAe," \u2014 "),pN=n(KAe,"A",{href:!0});var jnt=s(pN);Ypo=r(jnt,"PoolFormerFeatureExtractor"),jnt.forEach(t),Kpo=r(KAe," (PoolFormer model)"),KAe.forEach(t),Zpo=i(K),Wh=n(K,"LI",{});var ZAe=s(Wh);kle=n(ZAe,"STRONG",{});var Dnt=s(kle);euo=r(Dnt,"regnet"),Dnt.forEach(t),ouo=r(ZAe," \u2014 "),uN=n(ZAe,"A",{href:!0});var Gnt=s(uN);ruo=r(Gnt,"ConvNextFeatureExtractor"),Gnt.forEach(t),tuo=r(ZAe," (RegNet model)"),ZAe.forEach(t),auo=i(K),Qh=n(K,"LI",{});var eLe=s(Qh);Sle=n(eLe,"STRONG",{});var Ont=s(Sle);nuo=r(Ont,"resnet"),Ont.forEach(t),suo=r(eLe," \u2014 "),_N=n(eLe,"A",{href:!0});var Vnt=s(_N);luo=r(Vnt,"ConvNextFeatureExtractor"),Vnt.forEach(t),iuo=r(eLe," (ResNet model)"),eLe.forEach(t),duo=i(K),Hh=n(K,"LI",{});var oLe=s(Hh);Rle=n(oLe,"STRONG",{});var Xnt=s(Rle);cuo=r(Xnt,"segformer"),Xnt.forEach(t),fuo=r(oLe," \u2014 "),bN=n(oLe,"A",{href:!0});var znt=s(bN);muo=r(znt,"SegformerFeatureExtractor"),znt.forEach(t),guo=r(oLe," (SegFormer model)"),oLe.forEach(t),huo=i(K),Uh=n(K,"LI",{});var rLe=s(Uh);Ple=n(rLe,"STRONG",{});var Wnt=s(Ple);puo=r(Wnt,"speech_to_text"),Wnt.forEach(t),uuo=r(rLe," \u2014 "),vN=n(rLe,"A",{href:!0});var Qnt=s(vN);_uo=r(Qnt,"Speech2TextFeatureExtractor"),Qnt.forEach(t),buo=r(rLe," (Speech2Text model)"),rLe.forEach(t),vuo=i(K),Jh=n(K,"LI",{});var tLe=s(Jh);Ble=n(tLe,"STRONG",{});var Hnt=s(Ble);Fuo=r(Hnt,"swin"),Hnt.forEach(t),Tuo=r(tLe," \u2014 "),FN=n(tLe,"A",{href:!0});var Unt=s(FN);Muo=r(Unt,"ViTFeatureExtractor"),Unt.forEach(t),Euo=r(tLe," (Swin Transformer model)"),tLe.forEach(t),Cuo=i(K),Yh=n(K,"LI",{});var aLe=s(Yh);Ile=n(aLe,"STRONG",{});var Jnt=s(Ile);wuo=r(Jnt,"van"),Jnt.forEach(t),Auo=r(aLe," \u2014 "),TN=n(aLe,"A",{href:!0});var Ynt=s(TN);Luo=r(Ynt,"ConvNextFeatureExtractor"),Ynt.forEach(t),yuo=r(aLe," (VAN model)"),aLe.forEach(t),xuo=i(K),Kh=n(K,"LI",{});var nLe=s(Kh);Nle=n(nLe,"STRONG",{});var Knt=s(Nle);$uo=r(Knt,"vilt"),Knt.forEach(t),kuo=r(nLe," \u2014 "),MN=n(nLe,"A",{href:!0});var Znt=s(MN);Suo=r(Znt,"ViltFeatureExtractor"),Znt.forEach(t),Ruo=r(nLe," (ViLT model)"),nLe.forEach(t),Puo=i(K),Zh=n(K,"LI",{});var sLe=s(Zh);qle=n(sLe,"STRONG",{});var est=s(qle);Buo=r(est,"vit"),est.forEach(t),Iuo=r(sLe," \u2014 "),EN=n(sLe,"A",{href:!0});var ost=s(EN);Nuo=r(ost,"ViTFeatureExtractor"),ost.forEach(t),quo=r(sLe," (ViT model)"),sLe.forEach(t),juo=i(K),ep=n(K,"LI",{});var lLe=s(ep);jle=n(lLe,"STRONG",{});var rst=s(jle);Duo=r(rst,"vit_mae"),rst.forEach(t),Guo=r(lLe," \u2014 "),CN=n(lLe,"A",{href:!0});var tst=s(CN);Ouo=r(tst,"ViTFeatureExtractor"),tst.forEach(t),Vuo=r(lLe," (ViTMAE model)"),lLe.forEach(t),Xuo=i(K),op=n(K,"LI",{});var iLe=s(op);Dle=n(iLe,"STRONG",{});var ast=s(Dle);zuo=r(ast,"wav2vec2"),ast.forEach(t),Wuo=r(iLe," \u2014 "),wN=n(iLe,"A",{href:!0});var nst=s(wN);Quo=r(nst,"Wav2Vec2FeatureExtractor"),nst.forEach(t),Huo=r(iLe," (Wav2Vec2 model)"),iLe.forEach(t),Uuo=i(K),rp=n(K,"LI",{});var dLe=s(rp);Gle=n(dLe,"STRONG",{});var sst=s(Gle);Juo=r(sst,"wav2vec2-conformer"),sst.forEach(t),Yuo=r(dLe," \u2014 "),AN=n(dLe,"A",{href:!0});var lst=s(AN);Kuo=r(lst,"Wav2Vec2FeatureExtractor"),lst.forEach(t),Zuo=r(dLe," (Wav2Vec2-Conformer model)"),dLe.forEach(t),e_o=i(K),tp=n(K,"LI",{});var cLe=s(tp);Ole=n(cLe,"STRONG",{});var ist=s(Ole);o_o=r(ist,"yolos"),ist.forEach(t),r_o=r(cLe," \u2014 "),LN=n(cLe,"A",{href:!0});var dst=s(LN);t_o=r(dst,"YolosFeatureExtractor"),dst.forEach(t),a_o=r(cLe," (YOLOS model)"),cLe.forEach(t),K.forEach(t),n_o=i(ra),T(ap.$$.fragment,ra),s_o=i(ra),T(np.$$.fragment,ra),ra.forEach(t),l_o=i(Qs),sp=n(Qs,"DIV",{class:!0});var CVe=s(sp);T(GA.$$.fragment,CVe),i_o=i(CVe),Vle=n(CVe,"P",{});var cst=s(Vle);d_o=r(cst,"Register a new feature extractor for this class."),cst.forEach(t),CVe.forEach(t),Qs.forEach(t),TGe=i(f),Si=n(f,"H2",{class:!0});var wVe=s(Si);lp=n(wVe,"A",{id:!0,class:!0,href:!0});var fst=s(lp);Xle=n(fst,"SPAN",{});var mst=s(Xle);T(OA.$$.fragment,mst),mst.forEach(t),fst.forEach(t),c_o=i(wVe),zle=n(wVe,"SPAN",{});var gst=s(zle);f_o=r(gst,"AutoProcessor"),gst.forEach(t),wVe.forEach(t),MGe=i(f),yo=n(f,"DIV",{class:!0});var Hs=s(yo);T(VA.$$.fragment,Hs),m_o=i(Hs),XA=n(Hs,"P",{});var AVe=s(XA);g_o=r(AVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),yN=n(AVe,"A",{href:!0});var hst=s(yN);h_o=r(hst,"AutoProcessor.from_pretrained()"),hst.forEach(t),p_o=r(AVe," class method."),AVe.forEach(t),u_o=i(Hs),zA=n(Hs,"P",{});var LVe=s(zA);__o=r(LVe,"This class cannot be instantiated directly using "),Wle=n(LVe,"CODE",{});var pst=s(Wle);b_o=r(pst,"__init__()"),pst.forEach(t),v_o=r(LVe," (throws an error)."),LVe.forEach(t),F_o=i(Hs),Ue=n(Hs,"DIV",{class:!0});var ta=s(Ue);T(WA.$$.fragment,ta),T_o=i(ta),Qle=n(ta,"P",{});var ust=s(Qle);M_o=r(ust,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ust.forEach(t),E_o=i(ta),Ri=n(ta,"P",{});var eoe=s(Ri);C_o=r(eoe,"The processor class to instantiate is selected based on the "),Hle=n(eoe,"CODE",{});var _st=s(Hle);w_o=r(_st,"model_type"),_st.forEach(t),A_o=r(eoe,` property of the config object (either
passed as an argument or loaded from `),Ule=n(eoe,"CODE",{});var bst=s(Ule);L_o=r(bst,"pretrained_model_name_or_path"),bst.forEach(t),y_o=r(eoe," if possible):"),eoe.forEach(t),x_o=i(ta),he=n(ta,"UL",{});var _e=s(he);ip=n(_e,"LI",{});var fLe=s(ip);Jle=n(fLe,"STRONG",{});var vst=s(Jle);$_o=r(vst,"clip"),vst.forEach(t),k_o=r(fLe," \u2014 "),xN=n(fLe,"A",{href:!0});var Fst=s(xN);S_o=r(Fst,"CLIPProcessor"),Fst.forEach(t),R_o=r(fLe," (CLIP model)"),fLe.forEach(t),P_o=i(_e),dp=n(_e,"LI",{});var mLe=s(dp);Yle=n(mLe,"STRONG",{});var Tst=s(Yle);B_o=r(Tst,"flava"),Tst.forEach(t),I_o=r(mLe," \u2014 "),Kle=n(mLe,"CODE",{});var Mst=s(Kle);N_o=r(Mst,"FLAVAProcessor"),Mst.forEach(t),q_o=r(mLe," (FLAVA model)"),mLe.forEach(t),j_o=i(_e),cp=n(_e,"LI",{});var gLe=s(cp);Zle=n(gLe,"STRONG",{});var Est=s(Zle);D_o=r(Est,"layoutlmv2"),Est.forEach(t),G_o=r(gLe," \u2014 "),$N=n(gLe,"A",{href:!0});var Cst=s($N);O_o=r(Cst,"LayoutLMv2Processor"),Cst.forEach(t),V_o=r(gLe," (LayoutLMv2 model)"),gLe.forEach(t),X_o=i(_e),fp=n(_e,"LI",{});var hLe=s(fp);eie=n(hLe,"STRONG",{});var wst=s(eie);z_o=r(wst,"layoutlmv3"),wst.forEach(t),W_o=r(hLe," \u2014 "),kN=n(hLe,"A",{href:!0});var Ast=s(kN);Q_o=r(Ast,"LayoutLMv3Processor"),Ast.forEach(t),H_o=r(hLe," (LayoutLMv3 model)"),hLe.forEach(t),U_o=i(_e),mp=n(_e,"LI",{});var pLe=s(mp);oie=n(pLe,"STRONG",{});var Lst=s(oie);J_o=r(Lst,"layoutxlm"),Lst.forEach(t),Y_o=r(pLe," \u2014 "),SN=n(pLe,"A",{href:!0});var yst=s(SN);K_o=r(yst,"LayoutXLMProcessor"),yst.forEach(t),Z_o=r(pLe," (LayoutXLM model)"),pLe.forEach(t),e2o=i(_e),gp=n(_e,"LI",{});var uLe=s(gp);rie=n(uLe,"STRONG",{});var xst=s(rie);o2o=r(xst,"sew"),xst.forEach(t),r2o=r(uLe," \u2014 "),RN=n(uLe,"A",{href:!0});var $st=s(RN);t2o=r($st,"Wav2Vec2Processor"),$st.forEach(t),a2o=r(uLe," (SEW model)"),uLe.forEach(t),n2o=i(_e),hp=n(_e,"LI",{});var _Le=s(hp);tie=n(_Le,"STRONG",{});var kst=s(tie);s2o=r(kst,"sew-d"),kst.forEach(t),l2o=r(_Le," \u2014 "),PN=n(_Le,"A",{href:!0});var Sst=s(PN);i2o=r(Sst,"Wav2Vec2Processor"),Sst.forEach(t),d2o=r(_Le," (SEW-D model)"),_Le.forEach(t),c2o=i(_e),pp=n(_e,"LI",{});var bLe=s(pp);aie=n(bLe,"STRONG",{});var Rst=s(aie);f2o=r(Rst,"speech_to_text"),Rst.forEach(t),m2o=r(bLe," \u2014 "),BN=n(bLe,"A",{href:!0});var Pst=s(BN);g2o=r(Pst,"Speech2TextProcessor"),Pst.forEach(t),h2o=r(bLe," (Speech2Text model)"),bLe.forEach(t),p2o=i(_e),up=n(_e,"LI",{});var vLe=s(up);nie=n(vLe,"STRONG",{});var Bst=s(nie);u2o=r(Bst,"speech_to_text_2"),Bst.forEach(t),_2o=r(vLe," \u2014 "),IN=n(vLe,"A",{href:!0});var Ist=s(IN);b2o=r(Ist,"Speech2Text2Processor"),Ist.forEach(t),v2o=r(vLe," (Speech2Text2 model)"),vLe.forEach(t),F2o=i(_e),_p=n(_e,"LI",{});var FLe=s(_p);sie=n(FLe,"STRONG",{});var Nst=s(sie);T2o=r(Nst,"trocr"),Nst.forEach(t),M2o=r(FLe," \u2014 "),NN=n(FLe,"A",{href:!0});var qst=s(NN);E2o=r(qst,"TrOCRProcessor"),qst.forEach(t),C2o=r(FLe," (TrOCR model)"),FLe.forEach(t),w2o=i(_e),bp=n(_e,"LI",{});var TLe=s(bp);lie=n(TLe,"STRONG",{});var jst=s(lie);A2o=r(jst,"unispeech"),jst.forEach(t),L2o=r(TLe," \u2014 "),qN=n(TLe,"A",{href:!0});var Dst=s(qN);y2o=r(Dst,"Wav2Vec2Processor"),Dst.forEach(t),x2o=r(TLe," (UniSpeech model)"),TLe.forEach(t),$2o=i(_e),vp=n(_e,"LI",{});var MLe=s(vp);iie=n(MLe,"STRONG",{});var Gst=s(iie);k2o=r(Gst,"unispeech-sat"),Gst.forEach(t),S2o=r(MLe," \u2014 "),jN=n(MLe,"A",{href:!0});var Ost=s(jN);R2o=r(Ost,"Wav2Vec2Processor"),Ost.forEach(t),P2o=r(MLe," (UniSpeechSat model)"),MLe.forEach(t),B2o=i(_e),Fp=n(_e,"LI",{});var ELe=s(Fp);die=n(ELe,"STRONG",{});var Vst=s(die);I2o=r(Vst,"vilt"),Vst.forEach(t),N2o=r(ELe," \u2014 "),DN=n(ELe,"A",{href:!0});var Xst=s(DN);q2o=r(Xst,"ViltProcessor"),Xst.forEach(t),j2o=r(ELe," (ViLT model)"),ELe.forEach(t),D2o=i(_e),Tp=n(_e,"LI",{});var CLe=s(Tp);cie=n(CLe,"STRONG",{});var zst=s(cie);G2o=r(zst,"vision-text-dual-encoder"),zst.forEach(t),O2o=r(CLe," \u2014 "),GN=n(CLe,"A",{href:!0});var Wst=s(GN);V2o=r(Wst,"VisionTextDualEncoderProcessor"),Wst.forEach(t),X2o=r(CLe," (VisionTextDualEncoder model)"),CLe.forEach(t),z2o=i(_e),Mp=n(_e,"LI",{});var wLe=s(Mp);fie=n(wLe,"STRONG",{});var Qst=s(fie);W2o=r(Qst,"wav2vec2"),Qst.forEach(t),Q2o=r(wLe," \u2014 "),ON=n(wLe,"A",{href:!0});var Hst=s(ON);H2o=r(Hst,"Wav2Vec2Processor"),Hst.forEach(t),U2o=r(wLe," (Wav2Vec2 model)"),wLe.forEach(t),J2o=i(_e),Ep=n(_e,"LI",{});var ALe=s(Ep);mie=n(ALe,"STRONG",{});var Ust=s(mie);Y2o=r(Ust,"wav2vec2-conformer"),Ust.forEach(t),K2o=r(ALe," \u2014 "),VN=n(ALe,"A",{href:!0});var Jst=s(VN);Z2o=r(Jst,"Wav2Vec2Processor"),Jst.forEach(t),e1o=r(ALe," (Wav2Vec2-Conformer model)"),ALe.forEach(t),o1o=i(_e),Cp=n(_e,"LI",{});var LLe=s(Cp);gie=n(LLe,"STRONG",{});var Yst=s(gie);r1o=r(Yst,"wavlm"),Yst.forEach(t),t1o=r(LLe," \u2014 "),XN=n(LLe,"A",{href:!0});var Kst=s(XN);a1o=r(Kst,"Wav2Vec2Processor"),Kst.forEach(t),n1o=r(LLe," (WavLM model)"),LLe.forEach(t),_e.forEach(t),s1o=i(ta),T(wp.$$.fragment,ta),l1o=i(ta),T(Ap.$$.fragment,ta),ta.forEach(t),i1o=i(Hs),Lp=n(Hs,"DIV",{class:!0});var yVe=s(Lp);T(QA.$$.fragment,yVe),d1o=i(yVe),hie=n(yVe,"P",{});var Zst=s(hie);c1o=r(Zst,"Register a new processor for this class."),Zst.forEach(t),yVe.forEach(t),Hs.forEach(t),EGe=i(f),Pi=n(f,"H2",{class:!0});var xVe=s(Pi);yp=n(xVe,"A",{id:!0,class:!0,href:!0});var elt=s(yp);pie=n(elt,"SPAN",{});var olt=s(pie);T(HA.$$.fragment,olt),olt.forEach(t),elt.forEach(t),f1o=i(xVe),uie=n(xVe,"SPAN",{});var rlt=s(uie);m1o=r(rlt,"AutoModel"),rlt.forEach(t),xVe.forEach(t),CGe=i(f),xo=n(f,"DIV",{class:!0});var Us=s(xo);T(UA.$$.fragment,Us),g1o=i(Us),Bi=n(Us,"P",{});var ooe=s(Bi);h1o=r(ooe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zN=n(ooe,"A",{href:!0});var tlt=s(zN);p1o=r(tlt,"from_pretrained()"),tlt.forEach(t),u1o=r(ooe," class method or the "),WN=n(ooe,"A",{href:!0});var alt=s(WN);_1o=r(alt,"from_config()"),alt.forEach(t),b1o=r(ooe,` class
method.`),ooe.forEach(t),v1o=i(Us),JA=n(Us,"P",{});var $Ve=s(JA);F1o=r($Ve,"This class cannot be instantiated directly using "),_ie=n($Ve,"CODE",{});var nlt=s(_ie);T1o=r(nlt,"__init__()"),nlt.forEach(t),M1o=r($Ve," (throws an error)."),$Ve.forEach(t),E1o=i(Us),nt=n(Us,"DIV",{class:!0});var C0=s(nt);T(YA.$$.fragment,C0),C1o=i(C0),bie=n(C0,"P",{});var slt=s(bie);w1o=r(slt,"Instantiates one of the base model classes of the library from a configuration."),slt.forEach(t),A1o=i(C0),Ii=n(C0,"P",{});var roe=s(Ii);L1o=r(roe,`Note:
Loading a model from its configuration file does `),vie=n(roe,"STRONG",{});var llt=s(vie);y1o=r(llt,"not"),llt.forEach(t),x1o=r(roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=n(roe,"A",{href:!0});var ilt=s(QN);$1o=r(ilt,"from_pretrained()"),ilt.forEach(t),k1o=r(roe," to load the model weights."),roe.forEach(t),S1o=i(C0),T(xp.$$.fragment,C0),C0.forEach(t),R1o=i(Us),Je=n(Us,"DIV",{class:!0});var aa=s(Je);T(KA.$$.fragment,aa),P1o=i(aa),Fie=n(aa,"P",{});var dlt=s(Fie);B1o=r(dlt,"Instantiate one of the base model classes of the library from a pretrained model."),dlt.forEach(t),I1o=i(aa),Sa=n(aa,"P",{});var w0=s(Sa);N1o=r(w0,"The model class to instantiate is selected based on the "),Tie=n(w0,"CODE",{});var clt=s(Tie);q1o=r(clt,"model_type"),clt.forEach(t),j1o=r(w0,` property of the config object (either
passed as an argument or loaded from `),Mie=n(w0,"CODE",{});var flt=s(Mie);D1o=r(flt,"pretrained_model_name_or_path"),flt.forEach(t),G1o=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=n(w0,"CODE",{});var mlt=s(Eie);O1o=r(mlt,"pretrained_model_name_or_path"),mlt.forEach(t),V1o=r(w0,":"),w0.forEach(t),X1o=i(aa),y=n(aa,"UL",{});var $=s(y);$p=n($,"LI",{});var yLe=s($p);Cie=n(yLe,"STRONG",{});var glt=s(Cie);z1o=r(glt,"albert"),glt.forEach(t),W1o=r(yLe," \u2014 "),HN=n(yLe,"A",{href:!0});var hlt=s(HN);Q1o=r(hlt,"AlbertModel"),hlt.forEach(t),H1o=r(yLe," (ALBERT model)"),yLe.forEach(t),U1o=i($),kp=n($,"LI",{});var xLe=s(kp);wie=n(xLe,"STRONG",{});var plt=s(wie);J1o=r(plt,"bart"),plt.forEach(t),Y1o=r(xLe," \u2014 "),UN=n(xLe,"A",{href:!0});var ult=s(UN);K1o=r(ult,"BartModel"),ult.forEach(t),Z1o=r(xLe," (BART model)"),xLe.forEach(t),ebo=i($),Sp=n($,"LI",{});var $Le=s(Sp);Aie=n($Le,"STRONG",{});var _lt=s(Aie);obo=r(_lt,"beit"),_lt.forEach(t),rbo=r($Le," \u2014 "),JN=n($Le,"A",{href:!0});var blt=s(JN);tbo=r(blt,"BeitModel"),blt.forEach(t),abo=r($Le," (BEiT model)"),$Le.forEach(t),nbo=i($),Rp=n($,"LI",{});var kLe=s(Rp);Lie=n(kLe,"STRONG",{});var vlt=s(Lie);sbo=r(vlt,"bert"),vlt.forEach(t),lbo=r(kLe," \u2014 "),YN=n(kLe,"A",{href:!0});var Flt=s(YN);ibo=r(Flt,"BertModel"),Flt.forEach(t),dbo=r(kLe," (BERT model)"),kLe.forEach(t),cbo=i($),Pp=n($,"LI",{});var SLe=s(Pp);yie=n(SLe,"STRONG",{});var Tlt=s(yie);fbo=r(Tlt,"bert-generation"),Tlt.forEach(t),mbo=r(SLe," \u2014 "),KN=n(SLe,"A",{href:!0});var Mlt=s(KN);gbo=r(Mlt,"BertGenerationEncoder"),Mlt.forEach(t),hbo=r(SLe," (Bert Generation model)"),SLe.forEach(t),pbo=i($),Bp=n($,"LI",{});var RLe=s(Bp);xie=n(RLe,"STRONG",{});var Elt=s(xie);ubo=r(Elt,"big_bird"),Elt.forEach(t),_bo=r(RLe," \u2014 "),ZN=n(RLe,"A",{href:!0});var Clt=s(ZN);bbo=r(Clt,"BigBirdModel"),Clt.forEach(t),vbo=r(RLe," (BigBird model)"),RLe.forEach(t),Fbo=i($),Ip=n($,"LI",{});var PLe=s(Ip);$ie=n(PLe,"STRONG",{});var wlt=s($ie);Tbo=r(wlt,"bigbird_pegasus"),wlt.forEach(t),Mbo=r(PLe," \u2014 "),eq=n(PLe,"A",{href:!0});var Alt=s(eq);Ebo=r(Alt,"BigBirdPegasusModel"),Alt.forEach(t),Cbo=r(PLe," (BigBird-Pegasus model)"),PLe.forEach(t),wbo=i($),Np=n($,"LI",{});var BLe=s(Np);kie=n(BLe,"STRONG",{});var Llt=s(kie);Abo=r(Llt,"blenderbot"),Llt.forEach(t),Lbo=r(BLe," \u2014 "),oq=n(BLe,"A",{href:!0});var ylt=s(oq);ybo=r(ylt,"BlenderbotModel"),ylt.forEach(t),xbo=r(BLe," (Blenderbot model)"),BLe.forEach(t),$bo=i($),qp=n($,"LI",{});var ILe=s(qp);Sie=n(ILe,"STRONG",{});var xlt=s(Sie);kbo=r(xlt,"blenderbot-small"),xlt.forEach(t),Sbo=r(ILe," \u2014 "),rq=n(ILe,"A",{href:!0});var $lt=s(rq);Rbo=r($lt,"BlenderbotSmallModel"),$lt.forEach(t),Pbo=r(ILe," (BlenderbotSmall model)"),ILe.forEach(t),Bbo=i($),jp=n($,"LI",{});var NLe=s(jp);Rie=n(NLe,"STRONG",{});var klt=s(Rie);Ibo=r(klt,"bloom"),klt.forEach(t),Nbo=r(NLe," \u2014 "),tq=n(NLe,"A",{href:!0});var Slt=s(tq);qbo=r(Slt,"BloomModel"),Slt.forEach(t),jbo=r(NLe," (BLOOM model)"),NLe.forEach(t),Dbo=i($),Dp=n($,"LI",{});var qLe=s(Dp);Pie=n(qLe,"STRONG",{});var Rlt=s(Pie);Gbo=r(Rlt,"camembert"),Rlt.forEach(t),Obo=r(qLe," \u2014 "),aq=n(qLe,"A",{href:!0});var Plt=s(aq);Vbo=r(Plt,"CamembertModel"),Plt.forEach(t),Xbo=r(qLe," (CamemBERT model)"),qLe.forEach(t),zbo=i($),Gp=n($,"LI",{});var jLe=s(Gp);Bie=n(jLe,"STRONG",{});var Blt=s(Bie);Wbo=r(Blt,"canine"),Blt.forEach(t),Qbo=r(jLe," \u2014 "),nq=n(jLe,"A",{href:!0});var Ilt=s(nq);Hbo=r(Ilt,"CanineModel"),Ilt.forEach(t),Ubo=r(jLe," (CANINE model)"),jLe.forEach(t),Jbo=i($),Op=n($,"LI",{});var DLe=s(Op);Iie=n(DLe,"STRONG",{});var Nlt=s(Iie);Ybo=r(Nlt,"clip"),Nlt.forEach(t),Kbo=r(DLe," \u2014 "),sq=n(DLe,"A",{href:!0});var qlt=s(sq);Zbo=r(qlt,"CLIPModel"),qlt.forEach(t),evo=r(DLe," (CLIP model)"),DLe.forEach(t),ovo=i($),Vp=n($,"LI",{});var GLe=s(Vp);Nie=n(GLe,"STRONG",{});var jlt=s(Nie);rvo=r(jlt,"convbert"),jlt.forEach(t),tvo=r(GLe," \u2014 "),lq=n(GLe,"A",{href:!0});var Dlt=s(lq);avo=r(Dlt,"ConvBertModel"),Dlt.forEach(t),nvo=r(GLe," (ConvBERT model)"),GLe.forEach(t),svo=i($),Xp=n($,"LI",{});var OLe=s(Xp);qie=n(OLe,"STRONG",{});var Glt=s(qie);lvo=r(Glt,"convnext"),Glt.forEach(t),ivo=r(OLe," \u2014 "),iq=n(OLe,"A",{href:!0});var Olt=s(iq);dvo=r(Olt,"ConvNextModel"),Olt.forEach(t),cvo=r(OLe," (ConvNeXT model)"),OLe.forEach(t),fvo=i($),zp=n($,"LI",{});var VLe=s(zp);jie=n(VLe,"STRONG",{});var Vlt=s(jie);mvo=r(Vlt,"ctrl"),Vlt.forEach(t),gvo=r(VLe," \u2014 "),dq=n(VLe,"A",{href:!0});var Xlt=s(dq);hvo=r(Xlt,"CTRLModel"),Xlt.forEach(t),pvo=r(VLe," (CTRL model)"),VLe.forEach(t),uvo=i($),Wp=n($,"LI",{});var XLe=s(Wp);Die=n(XLe,"STRONG",{});var zlt=s(Die);_vo=r(zlt,"cvt"),zlt.forEach(t),bvo=r(XLe," \u2014 "),cq=n(XLe,"A",{href:!0});var Wlt=s(cq);vvo=r(Wlt,"CvtModel"),Wlt.forEach(t),Fvo=r(XLe," (CvT model)"),XLe.forEach(t),Tvo=i($),Qp=n($,"LI",{});var zLe=s(Qp);Gie=n(zLe,"STRONG",{});var Qlt=s(Gie);Mvo=r(Qlt,"data2vec-audio"),Qlt.forEach(t),Evo=r(zLe," \u2014 "),fq=n(zLe,"A",{href:!0});var Hlt=s(fq);Cvo=r(Hlt,"Data2VecAudioModel"),Hlt.forEach(t),wvo=r(zLe," (Data2VecAudio model)"),zLe.forEach(t),Avo=i($),Hp=n($,"LI",{});var WLe=s(Hp);Oie=n(WLe,"STRONG",{});var Ult=s(Oie);Lvo=r(Ult,"data2vec-text"),Ult.forEach(t),yvo=r(WLe," \u2014 "),mq=n(WLe,"A",{href:!0});var Jlt=s(mq);xvo=r(Jlt,"Data2VecTextModel"),Jlt.forEach(t),$vo=r(WLe," (Data2VecText model)"),WLe.forEach(t),kvo=i($),Up=n($,"LI",{});var QLe=s(Up);Vie=n(QLe,"STRONG",{});var Ylt=s(Vie);Svo=r(Ylt,"data2vec-vision"),Ylt.forEach(t),Rvo=r(QLe," \u2014 "),gq=n(QLe,"A",{href:!0});var Klt=s(gq);Pvo=r(Klt,"Data2VecVisionModel"),Klt.forEach(t),Bvo=r(QLe," (Data2VecVision model)"),QLe.forEach(t),Ivo=i($),Jp=n($,"LI",{});var HLe=s(Jp);Xie=n(HLe,"STRONG",{});var Zlt=s(Xie);Nvo=r(Zlt,"deberta"),Zlt.forEach(t),qvo=r(HLe," \u2014 "),hq=n(HLe,"A",{href:!0});var eit=s(hq);jvo=r(eit,"DebertaModel"),eit.forEach(t),Dvo=r(HLe," (DeBERTa model)"),HLe.forEach(t),Gvo=i($),Yp=n($,"LI",{});var ULe=s(Yp);zie=n(ULe,"STRONG",{});var oit=s(zie);Ovo=r(oit,"deberta-v2"),oit.forEach(t),Vvo=r(ULe," \u2014 "),pq=n(ULe,"A",{href:!0});var rit=s(pq);Xvo=r(rit,"DebertaV2Model"),rit.forEach(t),zvo=r(ULe," (DeBERTa-v2 model)"),ULe.forEach(t),Wvo=i($),Kp=n($,"LI",{});var JLe=s(Kp);Wie=n(JLe,"STRONG",{});var tit=s(Wie);Qvo=r(tit,"decision_transformer"),tit.forEach(t),Hvo=r(JLe," \u2014 "),uq=n(JLe,"A",{href:!0});var ait=s(uq);Uvo=r(ait,"DecisionTransformerModel"),ait.forEach(t),Jvo=r(JLe," (Decision Transformer model)"),JLe.forEach(t),Yvo=i($),Zp=n($,"LI",{});var YLe=s(Zp);Qie=n(YLe,"STRONG",{});var nit=s(Qie);Kvo=r(nit,"deit"),nit.forEach(t),Zvo=r(YLe," \u2014 "),_q=n(YLe,"A",{href:!0});var sit=s(_q);eFo=r(sit,"DeiTModel"),sit.forEach(t),oFo=r(YLe," (DeiT model)"),YLe.forEach(t),rFo=i($),eu=n($,"LI",{});var KLe=s(eu);Hie=n(KLe,"STRONG",{});var lit=s(Hie);tFo=r(lit,"detr"),lit.forEach(t),aFo=r(KLe," \u2014 "),bq=n(KLe,"A",{href:!0});var iit=s(bq);nFo=r(iit,"DetrModel"),iit.forEach(t),sFo=r(KLe," (DETR model)"),KLe.forEach(t),lFo=i($),ou=n($,"LI",{});var ZLe=s(ou);Uie=n(ZLe,"STRONG",{});var dit=s(Uie);iFo=r(dit,"distilbert"),dit.forEach(t),dFo=r(ZLe," \u2014 "),vq=n(ZLe,"A",{href:!0});var cit=s(vq);cFo=r(cit,"DistilBertModel"),cit.forEach(t),fFo=r(ZLe," (DistilBERT model)"),ZLe.forEach(t),mFo=i($),ru=n($,"LI",{});var eye=s(ru);Jie=n(eye,"STRONG",{});var fit=s(Jie);gFo=r(fit,"dpr"),fit.forEach(t),hFo=r(eye," \u2014 "),Fq=n(eye,"A",{href:!0});var mit=s(Fq);pFo=r(mit,"DPRQuestionEncoder"),mit.forEach(t),uFo=r(eye," (DPR model)"),eye.forEach(t),_Fo=i($),tu=n($,"LI",{});var oye=s(tu);Yie=n(oye,"STRONG",{});var git=s(Yie);bFo=r(git,"dpt"),git.forEach(t),vFo=r(oye," \u2014 "),Tq=n(oye,"A",{href:!0});var hit=s(Tq);FFo=r(hit,"DPTModel"),hit.forEach(t),TFo=r(oye," (DPT model)"),oye.forEach(t),MFo=i($),au=n($,"LI",{});var rye=s(au);Kie=n(rye,"STRONG",{});var pit=s(Kie);EFo=r(pit,"electra"),pit.forEach(t),CFo=r(rye," \u2014 "),Mq=n(rye,"A",{href:!0});var uit=s(Mq);wFo=r(uit,"ElectraModel"),uit.forEach(t),AFo=r(rye," (ELECTRA model)"),rye.forEach(t),LFo=i($),nu=n($,"LI",{});var tye=s(nu);Zie=n(tye,"STRONG",{});var _it=s(Zie);yFo=r(_it,"flaubert"),_it.forEach(t),xFo=r(tye," \u2014 "),Eq=n(tye,"A",{href:!0});var bit=s(Eq);$Fo=r(bit,"FlaubertModel"),bit.forEach(t),kFo=r(tye," (FlauBERT model)"),tye.forEach(t),SFo=i($),su=n($,"LI",{});var aye=s(su);ede=n(aye,"STRONG",{});var vit=s(ede);RFo=r(vit,"flava"),vit.forEach(t),PFo=r(aye," \u2014 "),Cq=n(aye,"A",{href:!0});var Fit=s(Cq);BFo=r(Fit,"FlavaModel"),Fit.forEach(t),IFo=r(aye," (FLAVA model)"),aye.forEach(t),NFo=i($),lu=n($,"LI",{});var nye=s(lu);ode=n(nye,"STRONG",{});var Tit=s(ode);qFo=r(Tit,"fnet"),Tit.forEach(t),jFo=r(nye," \u2014 "),wq=n(nye,"A",{href:!0});var Mit=s(wq);DFo=r(Mit,"FNetModel"),Mit.forEach(t),GFo=r(nye," (FNet model)"),nye.forEach(t),OFo=i($),iu=n($,"LI",{});var sye=s(iu);rde=n(sye,"STRONG",{});var Eit=s(rde);VFo=r(Eit,"fsmt"),Eit.forEach(t),XFo=r(sye," \u2014 "),Aq=n(sye,"A",{href:!0});var Cit=s(Aq);zFo=r(Cit,"FSMTModel"),Cit.forEach(t),WFo=r(sye," (FairSeq Machine-Translation model)"),sye.forEach(t),QFo=i($),Gs=n($,"LI",{});var Xk=s(Gs);tde=n(Xk,"STRONG",{});var wit=s(tde);HFo=r(wit,"funnel"),wit.forEach(t),UFo=r(Xk," \u2014 "),Lq=n(Xk,"A",{href:!0});var Ait=s(Lq);JFo=r(Ait,"FunnelModel"),Ait.forEach(t),YFo=r(Xk," or "),yq=n(Xk,"A",{href:!0});var Lit=s(yq);KFo=r(Lit,"FunnelBaseModel"),Lit.forEach(t),ZFo=r(Xk," (Funnel Transformer model)"),Xk.forEach(t),e6o=i($),du=n($,"LI",{});var lye=s(du);ade=n(lye,"STRONG",{});var yit=s(ade);o6o=r(yit,"glpn"),yit.forEach(t),r6o=r(lye," \u2014 "),xq=n(lye,"A",{href:!0});var xit=s(xq);t6o=r(xit,"GLPNModel"),xit.forEach(t),a6o=r(lye," (GLPN model)"),lye.forEach(t),n6o=i($),cu=n($,"LI",{});var iye=s(cu);nde=n(iye,"STRONG",{});var $it=s(nde);s6o=r($it,"gpt2"),$it.forEach(t),l6o=r(iye," \u2014 "),$q=n(iye,"A",{href:!0});var kit=s($q);i6o=r(kit,"GPT2Model"),kit.forEach(t),d6o=r(iye," (OpenAI GPT-2 model)"),iye.forEach(t),c6o=i($),fu=n($,"LI",{});var dye=s(fu);sde=n(dye,"STRONG",{});var Sit=s(sde);f6o=r(Sit,"gpt_neo"),Sit.forEach(t),m6o=r(dye," \u2014 "),kq=n(dye,"A",{href:!0});var Rit=s(kq);g6o=r(Rit,"GPTNeoModel"),Rit.forEach(t),h6o=r(dye," (GPT Neo model)"),dye.forEach(t),p6o=i($),mu=n($,"LI",{});var cye=s(mu);lde=n(cye,"STRONG",{});var Pit=s(lde);u6o=r(Pit,"gpt_neox"),Pit.forEach(t),_6o=r(cye," \u2014 "),Sq=n(cye,"A",{href:!0});var Bit=s(Sq);b6o=r(Bit,"GPTNeoXModel"),Bit.forEach(t),v6o=r(cye," (GPT NeoX model)"),cye.forEach(t),F6o=i($),gu=n($,"LI",{});var fye=s(gu);ide=n(fye,"STRONG",{});var Iit=s(ide);T6o=r(Iit,"gptj"),Iit.forEach(t),M6o=r(fye," \u2014 "),Rq=n(fye,"A",{href:!0});var Nit=s(Rq);E6o=r(Nit,"GPTJModel"),Nit.forEach(t),C6o=r(fye," (GPT-J model)"),fye.forEach(t),w6o=i($),hu=n($,"LI",{});var mye=s(hu);dde=n(mye,"STRONG",{});var qit=s(dde);A6o=r(qit,"hubert"),qit.forEach(t),L6o=r(mye," \u2014 "),Pq=n(mye,"A",{href:!0});var jit=s(Pq);y6o=r(jit,"HubertModel"),jit.forEach(t),x6o=r(mye," (Hubert model)"),mye.forEach(t),$6o=i($),pu=n($,"LI",{});var gye=s(pu);cde=n(gye,"STRONG",{});var Dit=s(cde);k6o=r(Dit,"ibert"),Dit.forEach(t),S6o=r(gye," \u2014 "),Bq=n(gye,"A",{href:!0});var Git=s(Bq);R6o=r(Git,"IBertModel"),Git.forEach(t),P6o=r(gye," (I-BERT model)"),gye.forEach(t),B6o=i($),uu=n($,"LI",{});var hye=s(uu);fde=n(hye,"STRONG",{});var Oit=s(fde);I6o=r(Oit,"imagegpt"),Oit.forEach(t),N6o=r(hye," \u2014 "),Iq=n(hye,"A",{href:!0});var Vit=s(Iq);q6o=r(Vit,"ImageGPTModel"),Vit.forEach(t),j6o=r(hye," (ImageGPT model)"),hye.forEach(t),D6o=i($),_u=n($,"LI",{});var pye=s(_u);mde=n(pye,"STRONG",{});var Xit=s(mde);G6o=r(Xit,"jukebox"),Xit.forEach(t),O6o=r(pye," \u2014 "),gde=n(pye,"CODE",{});var zit=s(gde);V6o=r(zit,"JukeboxModel"),zit.forEach(t),X6o=r(pye," (Jukebox model)"),pye.forEach(t),z6o=i($),bu=n($,"LI",{});var uye=s(bu);hde=n(uye,"STRONG",{});var Wit=s(hde);W6o=r(Wit,"layoutlm"),Wit.forEach(t),Q6o=r(uye," \u2014 "),Nq=n(uye,"A",{href:!0});var Qit=s(Nq);H6o=r(Qit,"LayoutLMModel"),Qit.forEach(t),U6o=r(uye," (LayoutLM model)"),uye.forEach(t),J6o=i($),vu=n($,"LI",{});var _ye=s(vu);pde=n(_ye,"STRONG",{});var Hit=s(pde);Y6o=r(Hit,"layoutlmv2"),Hit.forEach(t),K6o=r(_ye," \u2014 "),qq=n(_ye,"A",{href:!0});var Uit=s(qq);Z6o=r(Uit,"LayoutLMv2Model"),Uit.forEach(t),eTo=r(_ye," (LayoutLMv2 model)"),_ye.forEach(t),oTo=i($),Fu=n($,"LI",{});var bye=s(Fu);ude=n(bye,"STRONG",{});var Jit=s(ude);rTo=r(Jit,"layoutlmv3"),Jit.forEach(t),tTo=r(bye," \u2014 "),jq=n(bye,"A",{href:!0});var Yit=s(jq);aTo=r(Yit,"LayoutLMv3Model"),Yit.forEach(t),nTo=r(bye," (LayoutLMv3 model)"),bye.forEach(t),sTo=i($),Tu=n($,"LI",{});var vye=s(Tu);_de=n(vye,"STRONG",{});var Kit=s(_de);lTo=r(Kit,"led"),Kit.forEach(t),iTo=r(vye," \u2014 "),Dq=n(vye,"A",{href:!0});var Zit=s(Dq);dTo=r(Zit,"LEDModel"),Zit.forEach(t),cTo=r(vye," (LED model)"),vye.forEach(t),fTo=i($),Mu=n($,"LI",{});var Fye=s(Mu);bde=n(Fye,"STRONG",{});var edt=s(bde);mTo=r(edt,"levit"),edt.forEach(t),gTo=r(Fye," \u2014 "),Gq=n(Fye,"A",{href:!0});var odt=s(Gq);hTo=r(odt,"LevitModel"),odt.forEach(t),pTo=r(Fye," (LeViT model)"),Fye.forEach(t),uTo=i($),Eu=n($,"LI",{});var Tye=s(Eu);vde=n(Tye,"STRONG",{});var rdt=s(vde);_To=r(rdt,"longformer"),rdt.forEach(t),bTo=r(Tye," \u2014 "),Oq=n(Tye,"A",{href:!0});var tdt=s(Oq);vTo=r(tdt,"LongformerModel"),tdt.forEach(t),FTo=r(Tye," (Longformer model)"),Tye.forEach(t),TTo=i($),Cu=n($,"LI",{});var Mye=s(Cu);Fde=n(Mye,"STRONG",{});var adt=s(Fde);MTo=r(adt,"longt5"),adt.forEach(t),ETo=r(Mye," \u2014 "),Vq=n(Mye,"A",{href:!0});var ndt=s(Vq);CTo=r(ndt,"LongT5Model"),ndt.forEach(t),wTo=r(Mye," (LongT5 model)"),Mye.forEach(t),ATo=i($),wu=n($,"LI",{});var Eye=s(wu);Tde=n(Eye,"STRONG",{});var sdt=s(Tde);LTo=r(sdt,"luke"),sdt.forEach(t),yTo=r(Eye," \u2014 "),Xq=n(Eye,"A",{href:!0});var ldt=s(Xq);xTo=r(ldt,"LukeModel"),ldt.forEach(t),$To=r(Eye," (LUKE model)"),Eye.forEach(t),kTo=i($),Au=n($,"LI",{});var Cye=s(Au);Mde=n(Cye,"STRONG",{});var idt=s(Mde);STo=r(idt,"lxmert"),idt.forEach(t),RTo=r(Cye," \u2014 "),zq=n(Cye,"A",{href:!0});var ddt=s(zq);PTo=r(ddt,"LxmertModel"),ddt.forEach(t),BTo=r(Cye," (LXMERT model)"),Cye.forEach(t),ITo=i($),Lu=n($,"LI",{});var wye=s(Lu);Ede=n(wye,"STRONG",{});var cdt=s(Ede);NTo=r(cdt,"m2m_100"),cdt.forEach(t),qTo=r(wye," \u2014 "),Wq=n(wye,"A",{href:!0});var fdt=s(Wq);jTo=r(fdt,"M2M100Model"),fdt.forEach(t),DTo=r(wye," (M2M100 model)"),wye.forEach(t),GTo=i($),yu=n($,"LI",{});var Aye=s(yu);Cde=n(Aye,"STRONG",{});var mdt=s(Cde);OTo=r(mdt,"marian"),mdt.forEach(t),VTo=r(Aye," \u2014 "),Qq=n(Aye,"A",{href:!0});var gdt=s(Qq);XTo=r(gdt,"MarianModel"),gdt.forEach(t),zTo=r(Aye," (Marian model)"),Aye.forEach(t),WTo=i($),xu=n($,"LI",{});var Lye=s(xu);wde=n(Lye,"STRONG",{});var hdt=s(wde);QTo=r(hdt,"maskformer"),hdt.forEach(t),HTo=r(Lye," \u2014 "),Hq=n(Lye,"A",{href:!0});var pdt=s(Hq);UTo=r(pdt,"MaskFormerModel"),pdt.forEach(t),JTo=r(Lye," (MaskFormer model)"),Lye.forEach(t),YTo=i($),$u=n($,"LI",{});var yye=s($u);Ade=n(yye,"STRONG",{});var udt=s(Ade);KTo=r(udt,"mbart"),udt.forEach(t),ZTo=r(yye," \u2014 "),Uq=n(yye,"A",{href:!0});var _dt=s(Uq);e7o=r(_dt,"MBartModel"),_dt.forEach(t),o7o=r(yye," (mBART model)"),yye.forEach(t),r7o=i($),ku=n($,"LI",{});var xye=s(ku);Lde=n(xye,"STRONG",{});var bdt=s(Lde);t7o=r(bdt,"mctct"),bdt.forEach(t),a7o=r(xye," \u2014 "),Jq=n(xye,"A",{href:!0});var vdt=s(Jq);n7o=r(vdt,"MCTCTModel"),vdt.forEach(t),s7o=r(xye," (M-CTC-T model)"),xye.forEach(t),l7o=i($),Su=n($,"LI",{});var $ye=s(Su);yde=n($ye,"STRONG",{});var Fdt=s(yde);i7o=r(Fdt,"megatron-bert"),Fdt.forEach(t),d7o=r($ye," \u2014 "),Yq=n($ye,"A",{href:!0});var Tdt=s(Yq);c7o=r(Tdt,"MegatronBertModel"),Tdt.forEach(t),f7o=r($ye," (Megatron-BERT model)"),$ye.forEach(t),m7o=i($),Ru=n($,"LI",{});var kye=s(Ru);xde=n(kye,"STRONG",{});var Mdt=s(xde);g7o=r(Mdt,"mobilebert"),Mdt.forEach(t),h7o=r(kye," \u2014 "),Kq=n(kye,"A",{href:!0});var Edt=s(Kq);p7o=r(Edt,"MobileBertModel"),Edt.forEach(t),u7o=r(kye," (MobileBERT model)"),kye.forEach(t),_7o=i($),Pu=n($,"LI",{});var Sye=s(Pu);$de=n(Sye,"STRONG",{});var Cdt=s($de);b7o=r(Cdt,"mpnet"),Cdt.forEach(t),v7o=r(Sye," \u2014 "),Zq=n(Sye,"A",{href:!0});var wdt=s(Zq);F7o=r(wdt,"MPNetModel"),wdt.forEach(t),T7o=r(Sye," (MPNet model)"),Sye.forEach(t),M7o=i($),Bu=n($,"LI",{});var Rye=s(Bu);kde=n(Rye,"STRONG",{});var Adt=s(kde);E7o=r(Adt,"mt5"),Adt.forEach(t),C7o=r(Rye," \u2014 "),ej=n(Rye,"A",{href:!0});var Ldt=s(ej);w7o=r(Ldt,"MT5Model"),Ldt.forEach(t),A7o=r(Rye," (MT5 model)"),Rye.forEach(t),L7o=i($),Iu=n($,"LI",{});var Pye=s(Iu);Sde=n(Pye,"STRONG",{});var ydt=s(Sde);y7o=r(ydt,"nystromformer"),ydt.forEach(t),x7o=r(Pye," \u2014 "),oj=n(Pye,"A",{href:!0});var xdt=s(oj);$7o=r(xdt,"NystromformerModel"),xdt.forEach(t),k7o=r(Pye," (Nystr\xF6mformer model)"),Pye.forEach(t),S7o=i($),Nu=n($,"LI",{});var Bye=s(Nu);Rde=n(Bye,"STRONG",{});var $dt=s(Rde);R7o=r($dt,"openai-gpt"),$dt.forEach(t),P7o=r(Bye," \u2014 "),rj=n(Bye,"A",{href:!0});var kdt=s(rj);B7o=r(kdt,"OpenAIGPTModel"),kdt.forEach(t),I7o=r(Bye," (OpenAI GPT model)"),Bye.forEach(t),N7o=i($),qu=n($,"LI",{});var Iye=s(qu);Pde=n(Iye,"STRONG",{});var Sdt=s(Pde);q7o=r(Sdt,"opt"),Sdt.forEach(t),j7o=r(Iye," \u2014 "),tj=n(Iye,"A",{href:!0});var Rdt=s(tj);D7o=r(Rdt,"OPTModel"),Rdt.forEach(t),G7o=r(Iye," (OPT model)"),Iye.forEach(t),O7o=i($),ju=n($,"LI",{});var Nye=s(ju);Bde=n(Nye,"STRONG",{});var Pdt=s(Bde);V7o=r(Pdt,"pegasus"),Pdt.forEach(t),X7o=r(Nye," \u2014 "),aj=n(Nye,"A",{href:!0});var Bdt=s(aj);z7o=r(Bdt,"PegasusModel"),Bdt.forEach(t),W7o=r(Nye," (Pegasus model)"),Nye.forEach(t),Q7o=i($),Du=n($,"LI",{});var qye=s(Du);Ide=n(qye,"STRONG",{});var Idt=s(Ide);H7o=r(Idt,"perceiver"),Idt.forEach(t),U7o=r(qye," \u2014 "),nj=n(qye,"A",{href:!0});var Ndt=s(nj);J7o=r(Ndt,"PerceiverModel"),Ndt.forEach(t),Y7o=r(qye," (Perceiver model)"),qye.forEach(t),K7o=i($),Gu=n($,"LI",{});var jye=s(Gu);Nde=n(jye,"STRONG",{});var qdt=s(Nde);Z7o=r(qdt,"plbart"),qdt.forEach(t),e8o=r(jye," \u2014 "),sj=n(jye,"A",{href:!0});var jdt=s(sj);o8o=r(jdt,"PLBartModel"),jdt.forEach(t),r8o=r(jye," (PLBart model)"),jye.forEach(t),t8o=i($),Ou=n($,"LI",{});var Dye=s(Ou);qde=n(Dye,"STRONG",{});var Ddt=s(qde);a8o=r(Ddt,"poolformer"),Ddt.forEach(t),n8o=r(Dye," \u2014 "),lj=n(Dye,"A",{href:!0});var Gdt=s(lj);s8o=r(Gdt,"PoolFormerModel"),Gdt.forEach(t),l8o=r(Dye," (PoolFormer model)"),Dye.forEach(t),i8o=i($),Vu=n($,"LI",{});var Gye=s(Vu);jde=n(Gye,"STRONG",{});var Odt=s(jde);d8o=r(Odt,"prophetnet"),Odt.forEach(t),c8o=r(Gye," \u2014 "),ij=n(Gye,"A",{href:!0});var Vdt=s(ij);f8o=r(Vdt,"ProphetNetModel"),Vdt.forEach(t),m8o=r(Gye," (ProphetNet model)"),Gye.forEach(t),g8o=i($),Xu=n($,"LI",{});var Oye=s(Xu);Dde=n(Oye,"STRONG",{});var Xdt=s(Dde);h8o=r(Xdt,"qdqbert"),Xdt.forEach(t),p8o=r(Oye," \u2014 "),dj=n(Oye,"A",{href:!0});var zdt=s(dj);u8o=r(zdt,"QDQBertModel"),zdt.forEach(t),_8o=r(Oye," (QDQBert model)"),Oye.forEach(t),b8o=i($),zu=n($,"LI",{});var Vye=s(zu);Gde=n(Vye,"STRONG",{});var Wdt=s(Gde);v8o=r(Wdt,"reformer"),Wdt.forEach(t),F8o=r(Vye," \u2014 "),cj=n(Vye,"A",{href:!0});var Qdt=s(cj);T8o=r(Qdt,"ReformerModel"),Qdt.forEach(t),M8o=r(Vye," (Reformer model)"),Vye.forEach(t),E8o=i($),Wu=n($,"LI",{});var Xye=s(Wu);Ode=n(Xye,"STRONG",{});var Hdt=s(Ode);C8o=r(Hdt,"regnet"),Hdt.forEach(t),w8o=r(Xye," \u2014 "),fj=n(Xye,"A",{href:!0});var Udt=s(fj);A8o=r(Udt,"RegNetModel"),Udt.forEach(t),L8o=r(Xye," (RegNet model)"),Xye.forEach(t),y8o=i($),Qu=n($,"LI",{});var zye=s(Qu);Vde=n(zye,"STRONG",{});var Jdt=s(Vde);x8o=r(Jdt,"rembert"),Jdt.forEach(t),$8o=r(zye," \u2014 "),mj=n(zye,"A",{href:!0});var Ydt=s(mj);k8o=r(Ydt,"RemBertModel"),Ydt.forEach(t),S8o=r(zye," (RemBERT model)"),zye.forEach(t),R8o=i($),Hu=n($,"LI",{});var Wye=s(Hu);Xde=n(Wye,"STRONG",{});var Kdt=s(Xde);P8o=r(Kdt,"resnet"),Kdt.forEach(t),B8o=r(Wye," \u2014 "),gj=n(Wye,"A",{href:!0});var Zdt=s(gj);I8o=r(Zdt,"ResNetModel"),Zdt.forEach(t),N8o=r(Wye," (ResNet model)"),Wye.forEach(t),q8o=i($),Uu=n($,"LI",{});var Qye=s(Uu);zde=n(Qye,"STRONG",{});var ect=s(zde);j8o=r(ect,"retribert"),ect.forEach(t),D8o=r(Qye," \u2014 "),hj=n(Qye,"A",{href:!0});var oct=s(hj);G8o=r(oct,"RetriBertModel"),oct.forEach(t),O8o=r(Qye," (RetriBERT model)"),Qye.forEach(t),V8o=i($),Ju=n($,"LI",{});var Hye=s(Ju);Wde=n(Hye,"STRONG",{});var rct=s(Wde);X8o=r(rct,"roberta"),rct.forEach(t),z8o=r(Hye," \u2014 "),pj=n(Hye,"A",{href:!0});var tct=s(pj);W8o=r(tct,"RobertaModel"),tct.forEach(t),Q8o=r(Hye," (RoBERTa model)"),Hye.forEach(t),H8o=i($),Yu=n($,"LI",{});var Uye=s(Yu);Qde=n(Uye,"STRONG",{});var act=s(Qde);U8o=r(act,"roformer"),act.forEach(t),J8o=r(Uye," \u2014 "),uj=n(Uye,"A",{href:!0});var nct=s(uj);Y8o=r(nct,"RoFormerModel"),nct.forEach(t),K8o=r(Uye," (RoFormer model)"),Uye.forEach(t),Z8o=i($),Ku=n($,"LI",{});var Jye=s(Ku);Hde=n(Jye,"STRONG",{});var sct=s(Hde);eMo=r(sct,"segformer"),sct.forEach(t),oMo=r(Jye," \u2014 "),_j=n(Jye,"A",{href:!0});var lct=s(_j);rMo=r(lct,"SegformerModel"),lct.forEach(t),tMo=r(Jye," (SegFormer model)"),Jye.forEach(t),aMo=i($),Zu=n($,"LI",{});var Yye=s(Zu);Ude=n(Yye,"STRONG",{});var ict=s(Ude);nMo=r(ict,"sew"),ict.forEach(t),sMo=r(Yye," \u2014 "),bj=n(Yye,"A",{href:!0});var dct=s(bj);lMo=r(dct,"SEWModel"),dct.forEach(t),iMo=r(Yye," (SEW model)"),Yye.forEach(t),dMo=i($),e_=n($,"LI",{});var Kye=s(e_);Jde=n(Kye,"STRONG",{});var cct=s(Jde);cMo=r(cct,"sew-d"),cct.forEach(t),fMo=r(Kye," \u2014 "),vj=n(Kye,"A",{href:!0});var fct=s(vj);mMo=r(fct,"SEWDModel"),fct.forEach(t),gMo=r(Kye," (SEW-D model)"),Kye.forEach(t),hMo=i($),o_=n($,"LI",{});var Zye=s(o_);Yde=n(Zye,"STRONG",{});var mct=s(Yde);pMo=r(mct,"speech_to_text"),mct.forEach(t),uMo=r(Zye," \u2014 "),Fj=n(Zye,"A",{href:!0});var gct=s(Fj);_Mo=r(gct,"Speech2TextModel"),gct.forEach(t),bMo=r(Zye," (Speech2Text model)"),Zye.forEach(t),vMo=i($),r_=n($,"LI",{});var e9e=s(r_);Kde=n(e9e,"STRONG",{});var hct=s(Kde);FMo=r(hct,"splinter"),hct.forEach(t),TMo=r(e9e," \u2014 "),Tj=n(e9e,"A",{href:!0});var pct=s(Tj);MMo=r(pct,"SplinterModel"),pct.forEach(t),EMo=r(e9e," (Splinter model)"),e9e.forEach(t),CMo=i($),t_=n($,"LI",{});var o9e=s(t_);Zde=n(o9e,"STRONG",{});var uct=s(Zde);wMo=r(uct,"squeezebert"),uct.forEach(t),AMo=r(o9e," \u2014 "),Mj=n(o9e,"A",{href:!0});var _ct=s(Mj);LMo=r(_ct,"SqueezeBertModel"),_ct.forEach(t),yMo=r(o9e," (SqueezeBERT model)"),o9e.forEach(t),xMo=i($),a_=n($,"LI",{});var r9e=s(a_);ece=n(r9e,"STRONG",{});var bct=s(ece);$Mo=r(bct,"swin"),bct.forEach(t),kMo=r(r9e," \u2014 "),Ej=n(r9e,"A",{href:!0});var vct=s(Ej);SMo=r(vct,"SwinModel"),vct.forEach(t),RMo=r(r9e," (Swin Transformer model)"),r9e.forEach(t),PMo=i($),n_=n($,"LI",{});var t9e=s(n_);oce=n(t9e,"STRONG",{});var Fct=s(oce);BMo=r(Fct,"t5"),Fct.forEach(t),IMo=r(t9e," \u2014 "),Cj=n(t9e,"A",{href:!0});var Tct=s(Cj);NMo=r(Tct,"T5Model"),Tct.forEach(t),qMo=r(t9e," (T5 model)"),t9e.forEach(t),jMo=i($),s_=n($,"LI",{});var a9e=s(s_);rce=n(a9e,"STRONG",{});var Mct=s(rce);DMo=r(Mct,"tapas"),Mct.forEach(t),GMo=r(a9e," \u2014 "),wj=n(a9e,"A",{href:!0});var Ect=s(wj);OMo=r(Ect,"TapasModel"),Ect.forEach(t),VMo=r(a9e," (TAPAS model)"),a9e.forEach(t),XMo=i($),l_=n($,"LI",{});var n9e=s(l_);tce=n(n9e,"STRONG",{});var Cct=s(tce);zMo=r(Cct,"trajectory_transformer"),Cct.forEach(t),WMo=r(n9e," \u2014 "),Aj=n(n9e,"A",{href:!0});var wct=s(Aj);QMo=r(wct,"TrajectoryTransformerModel"),wct.forEach(t),HMo=r(n9e," (Trajectory Transformer model)"),n9e.forEach(t),UMo=i($),i_=n($,"LI",{});var s9e=s(i_);ace=n(s9e,"STRONG",{});var Act=s(ace);JMo=r(Act,"transfo-xl"),Act.forEach(t),YMo=r(s9e," \u2014 "),Lj=n(s9e,"A",{href:!0});var Lct=s(Lj);KMo=r(Lct,"TransfoXLModel"),Lct.forEach(t),ZMo=r(s9e," (Transformer-XL model)"),s9e.forEach(t),eEo=i($),d_=n($,"LI",{});var l9e=s(d_);nce=n(l9e,"STRONG",{});var yct=s(nce);oEo=r(yct,"unispeech"),yct.forEach(t),rEo=r(l9e," \u2014 "),yj=n(l9e,"A",{href:!0});var xct=s(yj);tEo=r(xct,"UniSpeechModel"),xct.forEach(t),aEo=r(l9e," (UniSpeech model)"),l9e.forEach(t),nEo=i($),c_=n($,"LI",{});var i9e=s(c_);sce=n(i9e,"STRONG",{});var $ct=s(sce);sEo=r($ct,"unispeech-sat"),$ct.forEach(t),lEo=r(i9e," \u2014 "),xj=n(i9e,"A",{href:!0});var kct=s(xj);iEo=r(kct,"UniSpeechSatModel"),kct.forEach(t),dEo=r(i9e," (UniSpeechSat model)"),i9e.forEach(t),cEo=i($),f_=n($,"LI",{});var d9e=s(f_);lce=n(d9e,"STRONG",{});var Sct=s(lce);fEo=r(Sct,"van"),Sct.forEach(t),mEo=r(d9e," \u2014 "),$j=n(d9e,"A",{href:!0});var Rct=s($j);gEo=r(Rct,"VanModel"),Rct.forEach(t),hEo=r(d9e," (VAN model)"),d9e.forEach(t),pEo=i($),m_=n($,"LI",{});var c9e=s(m_);ice=n(c9e,"STRONG",{});var Pct=s(ice);uEo=r(Pct,"vilt"),Pct.forEach(t),_Eo=r(c9e," \u2014 "),kj=n(c9e,"A",{href:!0});var Bct=s(kj);bEo=r(Bct,"ViltModel"),Bct.forEach(t),vEo=r(c9e," (ViLT model)"),c9e.forEach(t),FEo=i($),g_=n($,"LI",{});var f9e=s(g_);dce=n(f9e,"STRONG",{});var Ict=s(dce);TEo=r(Ict,"vision-text-dual-encoder"),Ict.forEach(t),MEo=r(f9e," \u2014 "),Sj=n(f9e,"A",{href:!0});var Nct=s(Sj);EEo=r(Nct,"VisionTextDualEncoderModel"),Nct.forEach(t),CEo=r(f9e," (VisionTextDualEncoder model)"),f9e.forEach(t),wEo=i($),h_=n($,"LI",{});var m9e=s(h_);cce=n(m9e,"STRONG",{});var qct=s(cce);AEo=r(qct,"visual_bert"),qct.forEach(t),LEo=r(m9e," \u2014 "),Rj=n(m9e,"A",{href:!0});var jct=s(Rj);yEo=r(jct,"VisualBertModel"),jct.forEach(t),xEo=r(m9e," (VisualBERT model)"),m9e.forEach(t),$Eo=i($),p_=n($,"LI",{});var g9e=s(p_);fce=n(g9e,"STRONG",{});var Dct=s(fce);kEo=r(Dct,"vit"),Dct.forEach(t),SEo=r(g9e," \u2014 "),Pj=n(g9e,"A",{href:!0});var Gct=s(Pj);REo=r(Gct,"ViTModel"),Gct.forEach(t),PEo=r(g9e," (ViT model)"),g9e.forEach(t),BEo=i($),u_=n($,"LI",{});var h9e=s(u_);mce=n(h9e,"STRONG",{});var Oct=s(mce);IEo=r(Oct,"vit_mae"),Oct.forEach(t),NEo=r(h9e," \u2014 "),Bj=n(h9e,"A",{href:!0});var Vct=s(Bj);qEo=r(Vct,"ViTMAEModel"),Vct.forEach(t),jEo=r(h9e," (ViTMAE model)"),h9e.forEach(t),DEo=i($),__=n($,"LI",{});var p9e=s(__);gce=n(p9e,"STRONG",{});var Xct=s(gce);GEo=r(Xct,"wav2vec2"),Xct.forEach(t),OEo=r(p9e," \u2014 "),Ij=n(p9e,"A",{href:!0});var zct=s(Ij);VEo=r(zct,"Wav2Vec2Model"),zct.forEach(t),XEo=r(p9e," (Wav2Vec2 model)"),p9e.forEach(t),zEo=i($),b_=n($,"LI",{});var u9e=s(b_);hce=n(u9e,"STRONG",{});var Wct=s(hce);WEo=r(Wct,"wav2vec2-conformer"),Wct.forEach(t),QEo=r(u9e," \u2014 "),Nj=n(u9e,"A",{href:!0});var Qct=s(Nj);HEo=r(Qct,"Wav2Vec2ConformerModel"),Qct.forEach(t),UEo=r(u9e," (Wav2Vec2-Conformer model)"),u9e.forEach(t),JEo=i($),v_=n($,"LI",{});var _9e=s(v_);pce=n(_9e,"STRONG",{});var Hct=s(pce);YEo=r(Hct,"wavlm"),Hct.forEach(t),KEo=r(_9e," \u2014 "),qj=n(_9e,"A",{href:!0});var Uct=s(qj);ZEo=r(Uct,"WavLMModel"),Uct.forEach(t),e4o=r(_9e," (WavLM model)"),_9e.forEach(t),o4o=i($),F_=n($,"LI",{});var b9e=s(F_);uce=n(b9e,"STRONG",{});var Jct=s(uce);r4o=r(Jct,"xglm"),Jct.forEach(t),t4o=r(b9e," \u2014 "),jj=n(b9e,"A",{href:!0});var Yct=s(jj);a4o=r(Yct,"XGLMModel"),Yct.forEach(t),n4o=r(b9e," (XGLM model)"),b9e.forEach(t),s4o=i($),T_=n($,"LI",{});var v9e=s(T_);_ce=n(v9e,"STRONG",{});var Kct=s(_ce);l4o=r(Kct,"xlm"),Kct.forEach(t),i4o=r(v9e," \u2014 "),Dj=n(v9e,"A",{href:!0});var Zct=s(Dj);d4o=r(Zct,"XLMModel"),Zct.forEach(t),c4o=r(v9e," (XLM model)"),v9e.forEach(t),f4o=i($),M_=n($,"LI",{});var F9e=s(M_);bce=n(F9e,"STRONG",{});var eft=s(bce);m4o=r(eft,"xlm-prophetnet"),eft.forEach(t),g4o=r(F9e," \u2014 "),Gj=n(F9e,"A",{href:!0});var oft=s(Gj);h4o=r(oft,"XLMProphetNetModel"),oft.forEach(t),p4o=r(F9e," (XLM-ProphetNet model)"),F9e.forEach(t),u4o=i($),E_=n($,"LI",{});var T9e=s(E_);vce=n(T9e,"STRONG",{});var rft=s(vce);_4o=r(rft,"xlm-roberta"),rft.forEach(t),b4o=r(T9e," \u2014 "),Oj=n(T9e,"A",{href:!0});var tft=s(Oj);v4o=r(tft,"XLMRobertaModel"),tft.forEach(t),F4o=r(T9e," (XLM-RoBERTa model)"),T9e.forEach(t),T4o=i($),C_=n($,"LI",{});var M9e=s(C_);Fce=n(M9e,"STRONG",{});var aft=s(Fce);M4o=r(aft,"xlm-roberta-xl"),aft.forEach(t),E4o=r(M9e," \u2014 "),Vj=n(M9e,"A",{href:!0});var nft=s(Vj);C4o=r(nft,"XLMRobertaXLModel"),nft.forEach(t),w4o=r(M9e," (XLM-RoBERTa-XL model)"),M9e.forEach(t),A4o=i($),w_=n($,"LI",{});var E9e=s(w_);Tce=n(E9e,"STRONG",{});var sft=s(Tce);L4o=r(sft,"xlnet"),sft.forEach(t),y4o=r(E9e," \u2014 "),Xj=n(E9e,"A",{href:!0});var lft=s(Xj);x4o=r(lft,"XLNetModel"),lft.forEach(t),$4o=r(E9e," (XLNet model)"),E9e.forEach(t),k4o=i($),A_=n($,"LI",{});var C9e=s(A_);Mce=n(C9e,"STRONG",{});var ift=s(Mce);S4o=r(ift,"yolos"),ift.forEach(t),R4o=r(C9e," \u2014 "),zj=n(C9e,"A",{href:!0});var dft=s(zj);P4o=r(dft,"YolosModel"),dft.forEach(t),B4o=r(C9e," (YOLOS model)"),C9e.forEach(t),I4o=i($),L_=n($,"LI",{});var w9e=s(L_);Ece=n(w9e,"STRONG",{});var cft=s(Ece);N4o=r(cft,"yoso"),cft.forEach(t),q4o=r(w9e," \u2014 "),Wj=n(w9e,"A",{href:!0});var fft=s(Wj);j4o=r(fft,"YosoModel"),fft.forEach(t),D4o=r(w9e," (YOSO model)"),w9e.forEach(t),$.forEach(t),G4o=i(aa),y_=n(aa,"P",{});var A9e=s(y_);O4o=r(A9e,"The model is set in evaluation mode by default using "),Cce=n(A9e,"CODE",{});var mft=s(Cce);V4o=r(mft,"model.eval()"),mft.forEach(t),X4o=r(A9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wce=n(A9e,"CODE",{});var gft=s(wce);z4o=r(gft,"model.train()"),gft.forEach(t),A9e.forEach(t),W4o=i(aa),T(x_.$$.fragment,aa),aa.forEach(t),Us.forEach(t),wGe=i(f),Ni=n(f,"H2",{class:!0});var kVe=s(Ni);$_=n(kVe,"A",{id:!0,class:!0,href:!0});var hft=s($_);Ace=n(hft,"SPAN",{});var pft=s(Ace);T(ZA.$$.fragment,pft),pft.forEach(t),hft.forEach(t),Q4o=i(kVe),Lce=n(kVe,"SPAN",{});var uft=s(Lce);H4o=r(uft,"AutoModelForPreTraining"),uft.forEach(t),kVe.forEach(t),AGe=i(f),$o=n(f,"DIV",{class:!0});var Js=s($o);T(eL.$$.fragment,Js),U4o=i(Js),qi=n(Js,"P",{});var toe=s(qi);J4o=r(toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qj=n(toe,"A",{href:!0});var _ft=s(Qj);Y4o=r(_ft,"from_pretrained()"),_ft.forEach(t),K4o=r(toe," class method or the "),Hj=n(toe,"A",{href:!0});var bft=s(Hj);Z4o=r(bft,"from_config()"),bft.forEach(t),eCo=r(toe,` class
method.`),toe.forEach(t),oCo=i(Js),oL=n(Js,"P",{});var SVe=s(oL);rCo=r(SVe,"This class cannot be instantiated directly using "),yce=n(SVe,"CODE",{});var vft=s(yce);tCo=r(vft,"__init__()"),vft.forEach(t),aCo=r(SVe," (throws an error)."),SVe.forEach(t),nCo=i(Js),st=n(Js,"DIV",{class:!0});var A0=s(st);T(rL.$$.fragment,A0),sCo=i(A0),xce=n(A0,"P",{});var Fft=s(xce);lCo=r(Fft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fft.forEach(t),iCo=i(A0),ji=n(A0,"P",{});var aoe=s(ji);dCo=r(aoe,`Note:
Loading a model from its configuration file does `),$ce=n(aoe,"STRONG",{});var Tft=s($ce);cCo=r(Tft,"not"),Tft.forEach(t),fCo=r(aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uj=n(aoe,"A",{href:!0});var Mft=s(Uj);mCo=r(Mft,"from_pretrained()"),Mft.forEach(t),gCo=r(aoe," to load the model weights."),aoe.forEach(t),hCo=i(A0),T(k_.$$.fragment,A0),A0.forEach(t),pCo=i(Js),Ye=n(Js,"DIV",{class:!0});var na=s(Ye);T(tL.$$.fragment,na),uCo=i(na),kce=n(na,"P",{});var Eft=s(kce);_Co=r(Eft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Eft.forEach(t),bCo=i(na),Ra=n(na,"P",{});var L0=s(Ra);vCo=r(L0,"The model class to instantiate is selected based on the "),Sce=n(L0,"CODE",{});var Cft=s(Sce);FCo=r(Cft,"model_type"),Cft.forEach(t),TCo=r(L0,` property of the config object (either
passed as an argument or loaded from `),Rce=n(L0,"CODE",{});var wft=s(Rce);MCo=r(wft,"pretrained_model_name_or_path"),wft.forEach(t),ECo=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pce=n(L0,"CODE",{});var Aft=s(Pce);CCo=r(Aft,"pretrained_model_name_or_path"),Aft.forEach(t),wCo=r(L0,":"),L0.forEach(t),ACo=i(na),G=n(na,"UL",{});var O=s(G);S_=n(O,"LI",{});var L9e=s(S_);Bce=n(L9e,"STRONG",{});var Lft=s(Bce);LCo=r(Lft,"albert"),Lft.forEach(t),yCo=r(L9e," \u2014 "),Jj=n(L9e,"A",{href:!0});var yft=s(Jj);xCo=r(yft,"AlbertForPreTraining"),yft.forEach(t),$Co=r(L9e," (ALBERT model)"),L9e.forEach(t),kCo=i(O),R_=n(O,"LI",{});var y9e=s(R_);Ice=n(y9e,"STRONG",{});var xft=s(Ice);SCo=r(xft,"bart"),xft.forEach(t),RCo=r(y9e," \u2014 "),Yj=n(y9e,"A",{href:!0});var $ft=s(Yj);PCo=r($ft,"BartForConditionalGeneration"),$ft.forEach(t),BCo=r(y9e," (BART model)"),y9e.forEach(t),ICo=i(O),P_=n(O,"LI",{});var x9e=s(P_);Nce=n(x9e,"STRONG",{});var kft=s(Nce);NCo=r(kft,"bert"),kft.forEach(t),qCo=r(x9e," \u2014 "),Kj=n(x9e,"A",{href:!0});var Sft=s(Kj);jCo=r(Sft,"BertForPreTraining"),Sft.forEach(t),DCo=r(x9e," (BERT model)"),x9e.forEach(t),GCo=i(O),B_=n(O,"LI",{});var $9e=s(B_);qce=n($9e,"STRONG",{});var Rft=s(qce);OCo=r(Rft,"big_bird"),Rft.forEach(t),VCo=r($9e," \u2014 "),Zj=n($9e,"A",{href:!0});var Pft=s(Zj);XCo=r(Pft,"BigBirdForPreTraining"),Pft.forEach(t),zCo=r($9e," (BigBird model)"),$9e.forEach(t),WCo=i(O),I_=n(O,"LI",{});var k9e=s(I_);jce=n(k9e,"STRONG",{});var Bft=s(jce);QCo=r(Bft,"bloom"),Bft.forEach(t),HCo=r(k9e," \u2014 "),eD=n(k9e,"A",{href:!0});var Ift=s(eD);UCo=r(Ift,"BloomForCausalLM"),Ift.forEach(t),JCo=r(k9e," (BLOOM model)"),k9e.forEach(t),YCo=i(O),N_=n(O,"LI",{});var S9e=s(N_);Dce=n(S9e,"STRONG",{});var Nft=s(Dce);KCo=r(Nft,"camembert"),Nft.forEach(t),ZCo=r(S9e," \u2014 "),oD=n(S9e,"A",{href:!0});var qft=s(oD);e5o=r(qft,"CamembertForMaskedLM"),qft.forEach(t),o5o=r(S9e," (CamemBERT model)"),S9e.forEach(t),r5o=i(O),q_=n(O,"LI",{});var R9e=s(q_);Gce=n(R9e,"STRONG",{});var jft=s(Gce);t5o=r(jft,"ctrl"),jft.forEach(t),a5o=r(R9e," \u2014 "),rD=n(R9e,"A",{href:!0});var Dft=s(rD);n5o=r(Dft,"CTRLLMHeadModel"),Dft.forEach(t),s5o=r(R9e," (CTRL model)"),R9e.forEach(t),l5o=i(O),j_=n(O,"LI",{});var P9e=s(j_);Oce=n(P9e,"STRONG",{});var Gft=s(Oce);i5o=r(Gft,"data2vec-text"),Gft.forEach(t),d5o=r(P9e," \u2014 "),tD=n(P9e,"A",{href:!0});var Oft=s(tD);c5o=r(Oft,"Data2VecTextForMaskedLM"),Oft.forEach(t),f5o=r(P9e," (Data2VecText model)"),P9e.forEach(t),m5o=i(O),D_=n(O,"LI",{});var B9e=s(D_);Vce=n(B9e,"STRONG",{});var Vft=s(Vce);g5o=r(Vft,"deberta"),Vft.forEach(t),h5o=r(B9e," \u2014 "),aD=n(B9e,"A",{href:!0});var Xft=s(aD);p5o=r(Xft,"DebertaForMaskedLM"),Xft.forEach(t),u5o=r(B9e," (DeBERTa model)"),B9e.forEach(t),_5o=i(O),G_=n(O,"LI",{});var I9e=s(G_);Xce=n(I9e,"STRONG",{});var zft=s(Xce);b5o=r(zft,"deberta-v2"),zft.forEach(t),v5o=r(I9e," \u2014 "),nD=n(I9e,"A",{href:!0});var Wft=s(nD);F5o=r(Wft,"DebertaV2ForMaskedLM"),Wft.forEach(t),T5o=r(I9e," (DeBERTa-v2 model)"),I9e.forEach(t),M5o=i(O),O_=n(O,"LI",{});var N9e=s(O_);zce=n(N9e,"STRONG",{});var Qft=s(zce);E5o=r(Qft,"distilbert"),Qft.forEach(t),C5o=r(N9e," \u2014 "),sD=n(N9e,"A",{href:!0});var Hft=s(sD);w5o=r(Hft,"DistilBertForMaskedLM"),Hft.forEach(t),A5o=r(N9e," (DistilBERT model)"),N9e.forEach(t),L5o=i(O),V_=n(O,"LI",{});var q9e=s(V_);Wce=n(q9e,"STRONG",{});var Uft=s(Wce);y5o=r(Uft,"electra"),Uft.forEach(t),x5o=r(q9e," \u2014 "),lD=n(q9e,"A",{href:!0});var Jft=s(lD);$5o=r(Jft,"ElectraForPreTraining"),Jft.forEach(t),k5o=r(q9e," (ELECTRA model)"),q9e.forEach(t),S5o=i(O),X_=n(O,"LI",{});var j9e=s(X_);Qce=n(j9e,"STRONG",{});var Yft=s(Qce);R5o=r(Yft,"flaubert"),Yft.forEach(t),P5o=r(j9e," \u2014 "),iD=n(j9e,"A",{href:!0});var Kft=s(iD);B5o=r(Kft,"FlaubertWithLMHeadModel"),Kft.forEach(t),I5o=r(j9e," (FlauBERT model)"),j9e.forEach(t),N5o=i(O),z_=n(O,"LI",{});var D9e=s(z_);Hce=n(D9e,"STRONG",{});var Zft=s(Hce);q5o=r(Zft,"flava"),Zft.forEach(t),j5o=r(D9e," \u2014 "),dD=n(D9e,"A",{href:!0});var emt=s(dD);D5o=r(emt,"FlavaForPreTraining"),emt.forEach(t),G5o=r(D9e," (FLAVA model)"),D9e.forEach(t),O5o=i(O),W_=n(O,"LI",{});var G9e=s(W_);Uce=n(G9e,"STRONG",{});var omt=s(Uce);V5o=r(omt,"fnet"),omt.forEach(t),X5o=r(G9e," \u2014 "),cD=n(G9e,"A",{href:!0});var rmt=s(cD);z5o=r(rmt,"FNetForPreTraining"),rmt.forEach(t),W5o=r(G9e," (FNet model)"),G9e.forEach(t),Q5o=i(O),Q_=n(O,"LI",{});var O9e=s(Q_);Jce=n(O9e,"STRONG",{});var tmt=s(Jce);H5o=r(tmt,"fsmt"),tmt.forEach(t),U5o=r(O9e," \u2014 "),fD=n(O9e,"A",{href:!0});var amt=s(fD);J5o=r(amt,"FSMTForConditionalGeneration"),amt.forEach(t),Y5o=r(O9e," (FairSeq Machine-Translation model)"),O9e.forEach(t),K5o=i(O),H_=n(O,"LI",{});var V9e=s(H_);Yce=n(V9e,"STRONG",{});var nmt=s(Yce);Z5o=r(nmt,"funnel"),nmt.forEach(t),e3o=r(V9e," \u2014 "),mD=n(V9e,"A",{href:!0});var smt=s(mD);o3o=r(smt,"FunnelForPreTraining"),smt.forEach(t),r3o=r(V9e," (Funnel Transformer model)"),V9e.forEach(t),t3o=i(O),U_=n(O,"LI",{});var X9e=s(U_);Kce=n(X9e,"STRONG",{});var lmt=s(Kce);a3o=r(lmt,"gpt2"),lmt.forEach(t),n3o=r(X9e," \u2014 "),gD=n(X9e,"A",{href:!0});var imt=s(gD);s3o=r(imt,"GPT2LMHeadModel"),imt.forEach(t),l3o=r(X9e," (OpenAI GPT-2 model)"),X9e.forEach(t),i3o=i(O),J_=n(O,"LI",{});var z9e=s(J_);Zce=n(z9e,"STRONG",{});var dmt=s(Zce);d3o=r(dmt,"ibert"),dmt.forEach(t),c3o=r(z9e," \u2014 "),hD=n(z9e,"A",{href:!0});var cmt=s(hD);f3o=r(cmt,"IBertForMaskedLM"),cmt.forEach(t),m3o=r(z9e," (I-BERT model)"),z9e.forEach(t),g3o=i(O),Y_=n(O,"LI",{});var W9e=s(Y_);efe=n(W9e,"STRONG",{});var fmt=s(efe);h3o=r(fmt,"layoutlm"),fmt.forEach(t),p3o=r(W9e," \u2014 "),pD=n(W9e,"A",{href:!0});var mmt=s(pD);u3o=r(mmt,"LayoutLMForMaskedLM"),mmt.forEach(t),_3o=r(W9e," (LayoutLM model)"),W9e.forEach(t),b3o=i(O),K_=n(O,"LI",{});var Q9e=s(K_);ofe=n(Q9e,"STRONG",{});var gmt=s(ofe);v3o=r(gmt,"longformer"),gmt.forEach(t),F3o=r(Q9e," \u2014 "),uD=n(Q9e,"A",{href:!0});var hmt=s(uD);T3o=r(hmt,"LongformerForMaskedLM"),hmt.forEach(t),M3o=r(Q9e," (Longformer model)"),Q9e.forEach(t),E3o=i(O),Z_=n(O,"LI",{});var H9e=s(Z_);rfe=n(H9e,"STRONG",{});var pmt=s(rfe);C3o=r(pmt,"lxmert"),pmt.forEach(t),w3o=r(H9e," \u2014 "),_D=n(H9e,"A",{href:!0});var umt=s(_D);A3o=r(umt,"LxmertForPreTraining"),umt.forEach(t),L3o=r(H9e," (LXMERT model)"),H9e.forEach(t),y3o=i(O),e2=n(O,"LI",{});var U9e=s(e2);tfe=n(U9e,"STRONG",{});var _mt=s(tfe);x3o=r(_mt,"megatron-bert"),_mt.forEach(t),$3o=r(U9e," \u2014 "),bD=n(U9e,"A",{href:!0});var bmt=s(bD);k3o=r(bmt,"MegatronBertForPreTraining"),bmt.forEach(t),S3o=r(U9e," (Megatron-BERT model)"),U9e.forEach(t),R3o=i(O),o2=n(O,"LI",{});var J9e=s(o2);afe=n(J9e,"STRONG",{});var vmt=s(afe);P3o=r(vmt,"mobilebert"),vmt.forEach(t),B3o=r(J9e," \u2014 "),vD=n(J9e,"A",{href:!0});var Fmt=s(vD);I3o=r(Fmt,"MobileBertForPreTraining"),Fmt.forEach(t),N3o=r(J9e," (MobileBERT model)"),J9e.forEach(t),q3o=i(O),r2=n(O,"LI",{});var Y9e=s(r2);nfe=n(Y9e,"STRONG",{});var Tmt=s(nfe);j3o=r(Tmt,"mpnet"),Tmt.forEach(t),D3o=r(Y9e," \u2014 "),FD=n(Y9e,"A",{href:!0});var Mmt=s(FD);G3o=r(Mmt,"MPNetForMaskedLM"),Mmt.forEach(t),O3o=r(Y9e," (MPNet model)"),Y9e.forEach(t),V3o=i(O),t2=n(O,"LI",{});var K9e=s(t2);sfe=n(K9e,"STRONG",{});var Emt=s(sfe);X3o=r(Emt,"openai-gpt"),Emt.forEach(t),z3o=r(K9e," \u2014 "),TD=n(K9e,"A",{href:!0});var Cmt=s(TD);W3o=r(Cmt,"OpenAIGPTLMHeadModel"),Cmt.forEach(t),Q3o=r(K9e," (OpenAI GPT model)"),K9e.forEach(t),H3o=i(O),a2=n(O,"LI",{});var Z9e=s(a2);lfe=n(Z9e,"STRONG",{});var wmt=s(lfe);U3o=r(wmt,"retribert"),wmt.forEach(t),J3o=r(Z9e," \u2014 "),MD=n(Z9e,"A",{href:!0});var Amt=s(MD);Y3o=r(Amt,"RetriBertModel"),Amt.forEach(t),K3o=r(Z9e," (RetriBERT model)"),Z9e.forEach(t),Z3o=i(O),n2=n(O,"LI",{});var exe=s(n2);ife=n(exe,"STRONG",{});var Lmt=s(ife);e0o=r(Lmt,"roberta"),Lmt.forEach(t),o0o=r(exe," \u2014 "),ED=n(exe,"A",{href:!0});var ymt=s(ED);r0o=r(ymt,"RobertaForMaskedLM"),ymt.forEach(t),t0o=r(exe," (RoBERTa model)"),exe.forEach(t),a0o=i(O),s2=n(O,"LI",{});var oxe=s(s2);dfe=n(oxe,"STRONG",{});var xmt=s(dfe);n0o=r(xmt,"splinter"),xmt.forEach(t),s0o=r(oxe," \u2014 "),CD=n(oxe,"A",{href:!0});var $mt=s(CD);l0o=r($mt,"SplinterForPreTraining"),$mt.forEach(t),i0o=r(oxe," (Splinter model)"),oxe.forEach(t),d0o=i(O),l2=n(O,"LI",{});var rxe=s(l2);cfe=n(rxe,"STRONG",{});var kmt=s(cfe);c0o=r(kmt,"squeezebert"),kmt.forEach(t),f0o=r(rxe," \u2014 "),wD=n(rxe,"A",{href:!0});var Smt=s(wD);m0o=r(Smt,"SqueezeBertForMaskedLM"),Smt.forEach(t),g0o=r(rxe," (SqueezeBERT model)"),rxe.forEach(t),h0o=i(O),i2=n(O,"LI",{});var txe=s(i2);ffe=n(txe,"STRONG",{});var Rmt=s(ffe);p0o=r(Rmt,"t5"),Rmt.forEach(t),u0o=r(txe," \u2014 "),AD=n(txe,"A",{href:!0});var Pmt=s(AD);_0o=r(Pmt,"T5ForConditionalGeneration"),Pmt.forEach(t),b0o=r(txe," (T5 model)"),txe.forEach(t),v0o=i(O),d2=n(O,"LI",{});var axe=s(d2);mfe=n(axe,"STRONG",{});var Bmt=s(mfe);F0o=r(Bmt,"tapas"),Bmt.forEach(t),T0o=r(axe," \u2014 "),LD=n(axe,"A",{href:!0});var Imt=s(LD);M0o=r(Imt,"TapasForMaskedLM"),Imt.forEach(t),E0o=r(axe," (TAPAS model)"),axe.forEach(t),C0o=i(O),c2=n(O,"LI",{});var nxe=s(c2);gfe=n(nxe,"STRONG",{});var Nmt=s(gfe);w0o=r(Nmt,"transfo-xl"),Nmt.forEach(t),A0o=r(nxe," \u2014 "),yD=n(nxe,"A",{href:!0});var qmt=s(yD);L0o=r(qmt,"TransfoXLLMHeadModel"),qmt.forEach(t),y0o=r(nxe," (Transformer-XL model)"),nxe.forEach(t),x0o=i(O),f2=n(O,"LI",{});var sxe=s(f2);hfe=n(sxe,"STRONG",{});var jmt=s(hfe);$0o=r(jmt,"unispeech"),jmt.forEach(t),k0o=r(sxe," \u2014 "),xD=n(sxe,"A",{href:!0});var Dmt=s(xD);S0o=r(Dmt,"UniSpeechForPreTraining"),Dmt.forEach(t),R0o=r(sxe," (UniSpeech model)"),sxe.forEach(t),P0o=i(O),m2=n(O,"LI",{});var lxe=s(m2);pfe=n(lxe,"STRONG",{});var Gmt=s(pfe);B0o=r(Gmt,"unispeech-sat"),Gmt.forEach(t),I0o=r(lxe," \u2014 "),$D=n(lxe,"A",{href:!0});var Omt=s($D);N0o=r(Omt,"UniSpeechSatForPreTraining"),Omt.forEach(t),q0o=r(lxe," (UniSpeechSat model)"),lxe.forEach(t),j0o=i(O),g2=n(O,"LI",{});var ixe=s(g2);ufe=n(ixe,"STRONG",{});var Vmt=s(ufe);D0o=r(Vmt,"visual_bert"),Vmt.forEach(t),G0o=r(ixe," \u2014 "),kD=n(ixe,"A",{href:!0});var Xmt=s(kD);O0o=r(Xmt,"VisualBertForPreTraining"),Xmt.forEach(t),V0o=r(ixe," (VisualBERT model)"),ixe.forEach(t),X0o=i(O),h2=n(O,"LI",{});var dxe=s(h2);_fe=n(dxe,"STRONG",{});var zmt=s(_fe);z0o=r(zmt,"vit_mae"),zmt.forEach(t),W0o=r(dxe," \u2014 "),SD=n(dxe,"A",{href:!0});var Wmt=s(SD);Q0o=r(Wmt,"ViTMAEForPreTraining"),Wmt.forEach(t),H0o=r(dxe," (ViTMAE model)"),dxe.forEach(t),U0o=i(O),p2=n(O,"LI",{});var cxe=s(p2);bfe=n(cxe,"STRONG",{});var Qmt=s(bfe);J0o=r(Qmt,"wav2vec2"),Qmt.forEach(t),Y0o=r(cxe," \u2014 "),RD=n(cxe,"A",{href:!0});var Hmt=s(RD);K0o=r(Hmt,"Wav2Vec2ForPreTraining"),Hmt.forEach(t),Z0o=r(cxe," (Wav2Vec2 model)"),cxe.forEach(t),ewo=i(O),u2=n(O,"LI",{});var fxe=s(u2);vfe=n(fxe,"STRONG",{});var Umt=s(vfe);owo=r(Umt,"wav2vec2-conformer"),Umt.forEach(t),rwo=r(fxe," \u2014 "),PD=n(fxe,"A",{href:!0});var Jmt=s(PD);two=r(Jmt,"Wav2Vec2ConformerForPreTraining"),Jmt.forEach(t),awo=r(fxe," (Wav2Vec2-Conformer model)"),fxe.forEach(t),nwo=i(O),_2=n(O,"LI",{});var mxe=s(_2);Ffe=n(mxe,"STRONG",{});var Ymt=s(Ffe);swo=r(Ymt,"xlm"),Ymt.forEach(t),lwo=r(mxe," \u2014 "),BD=n(mxe,"A",{href:!0});var Kmt=s(BD);iwo=r(Kmt,"XLMWithLMHeadModel"),Kmt.forEach(t),dwo=r(mxe," (XLM model)"),mxe.forEach(t),cwo=i(O),b2=n(O,"LI",{});var gxe=s(b2);Tfe=n(gxe,"STRONG",{});var Zmt=s(Tfe);fwo=r(Zmt,"xlm-roberta"),Zmt.forEach(t),mwo=r(gxe," \u2014 "),ID=n(gxe,"A",{href:!0});var egt=s(ID);gwo=r(egt,"XLMRobertaForMaskedLM"),egt.forEach(t),hwo=r(gxe," (XLM-RoBERTa model)"),gxe.forEach(t),pwo=i(O),v2=n(O,"LI",{});var hxe=s(v2);Mfe=n(hxe,"STRONG",{});var ogt=s(Mfe);uwo=r(ogt,"xlm-roberta-xl"),ogt.forEach(t),_wo=r(hxe," \u2014 "),ND=n(hxe,"A",{href:!0});var rgt=s(ND);bwo=r(rgt,"XLMRobertaXLForMaskedLM"),rgt.forEach(t),vwo=r(hxe," (XLM-RoBERTa-XL model)"),hxe.forEach(t),Fwo=i(O),F2=n(O,"LI",{});var pxe=s(F2);Efe=n(pxe,"STRONG",{});var tgt=s(Efe);Two=r(tgt,"xlnet"),tgt.forEach(t),Mwo=r(pxe," \u2014 "),qD=n(pxe,"A",{href:!0});var agt=s(qD);Ewo=r(agt,"XLNetLMHeadModel"),agt.forEach(t),Cwo=r(pxe," (XLNet model)"),pxe.forEach(t),O.forEach(t),wwo=i(na),T2=n(na,"P",{});var uxe=s(T2);Awo=r(uxe,"The model is set in evaluation mode by default using "),Cfe=n(uxe,"CODE",{});var ngt=s(Cfe);Lwo=r(ngt,"model.eval()"),ngt.forEach(t),ywo=r(uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=n(uxe,"CODE",{});var sgt=s(wfe);xwo=r(sgt,"model.train()"),sgt.forEach(t),uxe.forEach(t),$wo=i(na),T(M2.$$.fragment,na),na.forEach(t),Js.forEach(t),LGe=i(f),Di=n(f,"H2",{class:!0});var RVe=s(Di);E2=n(RVe,"A",{id:!0,class:!0,href:!0});var lgt=s(E2);Afe=n(lgt,"SPAN",{});var igt=s(Afe);T(aL.$$.fragment,igt),igt.forEach(t),lgt.forEach(t),kwo=i(RVe),Lfe=n(RVe,"SPAN",{});var dgt=s(Lfe);Swo=r(dgt,"AutoModelForCausalLM"),dgt.forEach(t),RVe.forEach(t),yGe=i(f),ko=n(f,"DIV",{class:!0});var Ys=s(ko);T(nL.$$.fragment,Ys),Rwo=i(Ys),Gi=n(Ys,"P",{});var noe=s(Gi);Pwo=r(noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jD=n(noe,"A",{href:!0});var cgt=s(jD);Bwo=r(cgt,"from_pretrained()"),cgt.forEach(t),Iwo=r(noe," class method or the "),DD=n(noe,"A",{href:!0});var fgt=s(DD);Nwo=r(fgt,"from_config()"),fgt.forEach(t),qwo=r(noe,` class
method.`),noe.forEach(t),jwo=i(Ys),sL=n(Ys,"P",{});var PVe=s(sL);Dwo=r(PVe,"This class cannot be instantiated directly using "),yfe=n(PVe,"CODE",{});var mgt=s(yfe);Gwo=r(mgt,"__init__()"),mgt.forEach(t),Owo=r(PVe," (throws an error)."),PVe.forEach(t),Vwo=i(Ys),lt=n(Ys,"DIV",{class:!0});var y0=s(lt);T(lL.$$.fragment,y0),Xwo=i(y0),xfe=n(y0,"P",{});var ggt=s(xfe);zwo=r(ggt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ggt.forEach(t),Wwo=i(y0),Oi=n(y0,"P",{});var soe=s(Oi);Qwo=r(soe,`Note:
Loading a model from its configuration file does `),$fe=n(soe,"STRONG",{});var hgt=s($fe);Hwo=r(hgt,"not"),hgt.forEach(t),Uwo=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),GD=n(soe,"A",{href:!0});var pgt=s(GD);Jwo=r(pgt,"from_pretrained()"),pgt.forEach(t),Ywo=r(soe," to load the model weights."),soe.forEach(t),Kwo=i(y0),T(C2.$$.fragment,y0),y0.forEach(t),Zwo=i(Ys),Ke=n(Ys,"DIV",{class:!0});var sa=s(Ke);T(iL.$$.fragment,sa),eAo=i(sa),kfe=n(sa,"P",{});var ugt=s(kfe);oAo=r(ugt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ugt.forEach(t),rAo=i(sa),Pa=n(sa,"P",{});var x0=s(Pa);tAo=r(x0,"The model class to instantiate is selected based on the "),Sfe=n(x0,"CODE",{});var _gt=s(Sfe);aAo=r(_gt,"model_type"),_gt.forEach(t),nAo=r(x0,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(x0,"CODE",{});var bgt=s(Rfe);sAo=r(bgt,"pretrained_model_name_or_path"),bgt.forEach(t),lAo=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=n(x0,"CODE",{});var vgt=s(Pfe);iAo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),dAo=r(x0,":"),x0.forEach(t),cAo=i(sa),z=n(sa,"UL",{});var W=s(z);w2=n(W,"LI",{});var _xe=s(w2);Bfe=n(_xe,"STRONG",{});var Fgt=s(Bfe);fAo=r(Fgt,"bart"),Fgt.forEach(t),mAo=r(_xe," \u2014 "),OD=n(_xe,"A",{href:!0});var Tgt=s(OD);gAo=r(Tgt,"BartForCausalLM"),Tgt.forEach(t),hAo=r(_xe," (BART model)"),_xe.forEach(t),pAo=i(W),A2=n(W,"LI",{});var bxe=s(A2);Ife=n(bxe,"STRONG",{});var Mgt=s(Ife);uAo=r(Mgt,"bert"),Mgt.forEach(t),_Ao=r(bxe," \u2014 "),VD=n(bxe,"A",{href:!0});var Egt=s(VD);bAo=r(Egt,"BertLMHeadModel"),Egt.forEach(t),vAo=r(bxe," (BERT model)"),bxe.forEach(t),FAo=i(W),L2=n(W,"LI",{});var vxe=s(L2);Nfe=n(vxe,"STRONG",{});var Cgt=s(Nfe);TAo=r(Cgt,"bert-generation"),Cgt.forEach(t),MAo=r(vxe," \u2014 "),XD=n(vxe,"A",{href:!0});var wgt=s(XD);EAo=r(wgt,"BertGenerationDecoder"),wgt.forEach(t),CAo=r(vxe," (Bert Generation model)"),vxe.forEach(t),wAo=i(W),y2=n(W,"LI",{});var Fxe=s(y2);qfe=n(Fxe,"STRONG",{});var Agt=s(qfe);AAo=r(Agt,"big_bird"),Agt.forEach(t),LAo=r(Fxe," \u2014 "),zD=n(Fxe,"A",{href:!0});var Lgt=s(zD);yAo=r(Lgt,"BigBirdForCausalLM"),Lgt.forEach(t),xAo=r(Fxe," (BigBird model)"),Fxe.forEach(t),$Ao=i(W),x2=n(W,"LI",{});var Txe=s(x2);jfe=n(Txe,"STRONG",{});var ygt=s(jfe);kAo=r(ygt,"bigbird_pegasus"),ygt.forEach(t),SAo=r(Txe," \u2014 "),WD=n(Txe,"A",{href:!0});var xgt=s(WD);RAo=r(xgt,"BigBirdPegasusForCausalLM"),xgt.forEach(t),PAo=r(Txe," (BigBird-Pegasus model)"),Txe.forEach(t),BAo=i(W),$2=n(W,"LI",{});var Mxe=s($2);Dfe=n(Mxe,"STRONG",{});var $gt=s(Dfe);IAo=r($gt,"blenderbot"),$gt.forEach(t),NAo=r(Mxe," \u2014 "),QD=n(Mxe,"A",{href:!0});var kgt=s(QD);qAo=r(kgt,"BlenderbotForCausalLM"),kgt.forEach(t),jAo=r(Mxe," (Blenderbot model)"),Mxe.forEach(t),DAo=i(W),k2=n(W,"LI",{});var Exe=s(k2);Gfe=n(Exe,"STRONG",{});var Sgt=s(Gfe);GAo=r(Sgt,"blenderbot-small"),Sgt.forEach(t),OAo=r(Exe," \u2014 "),HD=n(Exe,"A",{href:!0});var Rgt=s(HD);VAo=r(Rgt,"BlenderbotSmallForCausalLM"),Rgt.forEach(t),XAo=r(Exe," (BlenderbotSmall model)"),Exe.forEach(t),zAo=i(W),S2=n(W,"LI",{});var Cxe=s(S2);Ofe=n(Cxe,"STRONG",{});var Pgt=s(Ofe);WAo=r(Pgt,"bloom"),Pgt.forEach(t),QAo=r(Cxe," \u2014 "),UD=n(Cxe,"A",{href:!0});var Bgt=s(UD);HAo=r(Bgt,"BloomForCausalLM"),Bgt.forEach(t),UAo=r(Cxe," (BLOOM model)"),Cxe.forEach(t),JAo=i(W),R2=n(W,"LI",{});var wxe=s(R2);Vfe=n(wxe,"STRONG",{});var Igt=s(Vfe);YAo=r(Igt,"camembert"),Igt.forEach(t),KAo=r(wxe," \u2014 "),JD=n(wxe,"A",{href:!0});var Ngt=s(JD);ZAo=r(Ngt,"CamembertForCausalLM"),Ngt.forEach(t),eLo=r(wxe," (CamemBERT model)"),wxe.forEach(t),oLo=i(W),P2=n(W,"LI",{});var Axe=s(P2);Xfe=n(Axe,"STRONG",{});var qgt=s(Xfe);rLo=r(qgt,"ctrl"),qgt.forEach(t),tLo=r(Axe," \u2014 "),YD=n(Axe,"A",{href:!0});var jgt=s(YD);aLo=r(jgt,"CTRLLMHeadModel"),jgt.forEach(t),nLo=r(Axe," (CTRL model)"),Axe.forEach(t),sLo=i(W),B2=n(W,"LI",{});var Lxe=s(B2);zfe=n(Lxe,"STRONG",{});var Dgt=s(zfe);lLo=r(Dgt,"data2vec-text"),Dgt.forEach(t),iLo=r(Lxe," \u2014 "),KD=n(Lxe,"A",{href:!0});var Ggt=s(KD);dLo=r(Ggt,"Data2VecTextForCausalLM"),Ggt.forEach(t),cLo=r(Lxe," (Data2VecText model)"),Lxe.forEach(t),fLo=i(W),I2=n(W,"LI",{});var yxe=s(I2);Wfe=n(yxe,"STRONG",{});var Ogt=s(Wfe);mLo=r(Ogt,"electra"),Ogt.forEach(t),gLo=r(yxe," \u2014 "),ZD=n(yxe,"A",{href:!0});var Vgt=s(ZD);hLo=r(Vgt,"ElectraForCausalLM"),Vgt.forEach(t),pLo=r(yxe," (ELECTRA model)"),yxe.forEach(t),uLo=i(W),N2=n(W,"LI",{});var xxe=s(N2);Qfe=n(xxe,"STRONG",{});var Xgt=s(Qfe);_Lo=r(Xgt,"gpt2"),Xgt.forEach(t),bLo=r(xxe," \u2014 "),eG=n(xxe,"A",{href:!0});var zgt=s(eG);vLo=r(zgt,"GPT2LMHeadModel"),zgt.forEach(t),FLo=r(xxe," (OpenAI GPT-2 model)"),xxe.forEach(t),TLo=i(W),q2=n(W,"LI",{});var $xe=s(q2);Hfe=n($xe,"STRONG",{});var Wgt=s(Hfe);MLo=r(Wgt,"gpt_neo"),Wgt.forEach(t),ELo=r($xe," \u2014 "),oG=n($xe,"A",{href:!0});var Qgt=s(oG);CLo=r(Qgt,"GPTNeoForCausalLM"),Qgt.forEach(t),wLo=r($xe," (GPT Neo model)"),$xe.forEach(t),ALo=i(W),j2=n(W,"LI",{});var kxe=s(j2);Ufe=n(kxe,"STRONG",{});var Hgt=s(Ufe);LLo=r(Hgt,"gpt_neox"),Hgt.forEach(t),yLo=r(kxe," \u2014 "),rG=n(kxe,"A",{href:!0});var Ugt=s(rG);xLo=r(Ugt,"GPTNeoXForCausalLM"),Ugt.forEach(t),$Lo=r(kxe," (GPT NeoX model)"),kxe.forEach(t),kLo=i(W),D2=n(W,"LI",{});var Sxe=s(D2);Jfe=n(Sxe,"STRONG",{});var Jgt=s(Jfe);SLo=r(Jgt,"gptj"),Jgt.forEach(t),RLo=r(Sxe," \u2014 "),tG=n(Sxe,"A",{href:!0});var Ygt=s(tG);PLo=r(Ygt,"GPTJForCausalLM"),Ygt.forEach(t),BLo=r(Sxe," (GPT-J model)"),Sxe.forEach(t),ILo=i(W),G2=n(W,"LI",{});var Rxe=s(G2);Yfe=n(Rxe,"STRONG",{});var Kgt=s(Yfe);NLo=r(Kgt,"marian"),Kgt.forEach(t),qLo=r(Rxe," \u2014 "),aG=n(Rxe,"A",{href:!0});var Zgt=s(aG);jLo=r(Zgt,"MarianForCausalLM"),Zgt.forEach(t),DLo=r(Rxe," (Marian model)"),Rxe.forEach(t),GLo=i(W),O2=n(W,"LI",{});var Pxe=s(O2);Kfe=n(Pxe,"STRONG",{});var eht=s(Kfe);OLo=r(eht,"mbart"),eht.forEach(t),VLo=r(Pxe," \u2014 "),nG=n(Pxe,"A",{href:!0});var oht=s(nG);XLo=r(oht,"MBartForCausalLM"),oht.forEach(t),zLo=r(Pxe," (mBART model)"),Pxe.forEach(t),WLo=i(W),V2=n(W,"LI",{});var Bxe=s(V2);Zfe=n(Bxe,"STRONG",{});var rht=s(Zfe);QLo=r(rht,"megatron-bert"),rht.forEach(t),HLo=r(Bxe," \u2014 "),sG=n(Bxe,"A",{href:!0});var tht=s(sG);ULo=r(tht,"MegatronBertForCausalLM"),tht.forEach(t),JLo=r(Bxe," (Megatron-BERT model)"),Bxe.forEach(t),YLo=i(W),X2=n(W,"LI",{});var Ixe=s(X2);eme=n(Ixe,"STRONG",{});var aht=s(eme);KLo=r(aht,"openai-gpt"),aht.forEach(t),ZLo=r(Ixe," \u2014 "),lG=n(Ixe,"A",{href:!0});var nht=s(lG);eyo=r(nht,"OpenAIGPTLMHeadModel"),nht.forEach(t),oyo=r(Ixe," (OpenAI GPT model)"),Ixe.forEach(t),ryo=i(W),z2=n(W,"LI",{});var Nxe=s(z2);ome=n(Nxe,"STRONG",{});var sht=s(ome);tyo=r(sht,"opt"),sht.forEach(t),ayo=r(Nxe," \u2014 "),iG=n(Nxe,"A",{href:!0});var lht=s(iG);nyo=r(lht,"OPTForCausalLM"),lht.forEach(t),syo=r(Nxe," (OPT model)"),Nxe.forEach(t),lyo=i(W),W2=n(W,"LI",{});var qxe=s(W2);rme=n(qxe,"STRONG",{});var iht=s(rme);iyo=r(iht,"pegasus"),iht.forEach(t),dyo=r(qxe," \u2014 "),dG=n(qxe,"A",{href:!0});var dht=s(dG);cyo=r(dht,"PegasusForCausalLM"),dht.forEach(t),fyo=r(qxe," (Pegasus model)"),qxe.forEach(t),myo=i(W),Q2=n(W,"LI",{});var jxe=s(Q2);tme=n(jxe,"STRONG",{});var cht=s(tme);gyo=r(cht,"plbart"),cht.forEach(t),hyo=r(jxe," \u2014 "),cG=n(jxe,"A",{href:!0});var fht=s(cG);pyo=r(fht,"PLBartForCausalLM"),fht.forEach(t),uyo=r(jxe," (PLBart model)"),jxe.forEach(t),_yo=i(W),H2=n(W,"LI",{});var Dxe=s(H2);ame=n(Dxe,"STRONG",{});var mht=s(ame);byo=r(mht,"prophetnet"),mht.forEach(t),vyo=r(Dxe," \u2014 "),fG=n(Dxe,"A",{href:!0});var ght=s(fG);Fyo=r(ght,"ProphetNetForCausalLM"),ght.forEach(t),Tyo=r(Dxe," (ProphetNet model)"),Dxe.forEach(t),Myo=i(W),U2=n(W,"LI",{});var Gxe=s(U2);nme=n(Gxe,"STRONG",{});var hht=s(nme);Eyo=r(hht,"qdqbert"),hht.forEach(t),Cyo=r(Gxe," \u2014 "),mG=n(Gxe,"A",{href:!0});var pht=s(mG);wyo=r(pht,"QDQBertLMHeadModel"),pht.forEach(t),Ayo=r(Gxe," (QDQBert model)"),Gxe.forEach(t),Lyo=i(W),J2=n(W,"LI",{});var Oxe=s(J2);sme=n(Oxe,"STRONG",{});var uht=s(sme);yyo=r(uht,"reformer"),uht.forEach(t),xyo=r(Oxe," \u2014 "),gG=n(Oxe,"A",{href:!0});var _ht=s(gG);$yo=r(_ht,"ReformerModelWithLMHead"),_ht.forEach(t),kyo=r(Oxe," (Reformer model)"),Oxe.forEach(t),Syo=i(W),Y2=n(W,"LI",{});var Vxe=s(Y2);lme=n(Vxe,"STRONG",{});var bht=s(lme);Ryo=r(bht,"rembert"),bht.forEach(t),Pyo=r(Vxe," \u2014 "),hG=n(Vxe,"A",{href:!0});var vht=s(hG);Byo=r(vht,"RemBertForCausalLM"),vht.forEach(t),Iyo=r(Vxe," (RemBERT model)"),Vxe.forEach(t),Nyo=i(W),K2=n(W,"LI",{});var Xxe=s(K2);ime=n(Xxe,"STRONG",{});var Fht=s(ime);qyo=r(Fht,"roberta"),Fht.forEach(t),jyo=r(Xxe," \u2014 "),pG=n(Xxe,"A",{href:!0});var Tht=s(pG);Dyo=r(Tht,"RobertaForCausalLM"),Tht.forEach(t),Gyo=r(Xxe," (RoBERTa model)"),Xxe.forEach(t),Oyo=i(W),Z2=n(W,"LI",{});var zxe=s(Z2);dme=n(zxe,"STRONG",{});var Mht=s(dme);Vyo=r(Mht,"roformer"),Mht.forEach(t),Xyo=r(zxe," \u2014 "),uG=n(zxe,"A",{href:!0});var Eht=s(uG);zyo=r(Eht,"RoFormerForCausalLM"),Eht.forEach(t),Wyo=r(zxe," (RoFormer model)"),zxe.forEach(t),Qyo=i(W),e1=n(W,"LI",{});var Wxe=s(e1);cme=n(Wxe,"STRONG",{});var Cht=s(cme);Hyo=r(Cht,"speech_to_text_2"),Cht.forEach(t),Uyo=r(Wxe," \u2014 "),_G=n(Wxe,"A",{href:!0});var wht=s(_G);Jyo=r(wht,"Speech2Text2ForCausalLM"),wht.forEach(t),Yyo=r(Wxe," (Speech2Text2 model)"),Wxe.forEach(t),Kyo=i(W),o1=n(W,"LI",{});var Qxe=s(o1);fme=n(Qxe,"STRONG",{});var Aht=s(fme);Zyo=r(Aht,"transfo-xl"),Aht.forEach(t),e9o=r(Qxe," \u2014 "),bG=n(Qxe,"A",{href:!0});var Lht=s(bG);o9o=r(Lht,"TransfoXLLMHeadModel"),Lht.forEach(t),r9o=r(Qxe," (Transformer-XL model)"),Qxe.forEach(t),t9o=i(W),r1=n(W,"LI",{});var Hxe=s(r1);mme=n(Hxe,"STRONG",{});var yht=s(mme);a9o=r(yht,"trocr"),yht.forEach(t),n9o=r(Hxe," \u2014 "),vG=n(Hxe,"A",{href:!0});var xht=s(vG);s9o=r(xht,"TrOCRForCausalLM"),xht.forEach(t),l9o=r(Hxe," (TrOCR model)"),Hxe.forEach(t),i9o=i(W),t1=n(W,"LI",{});var Uxe=s(t1);gme=n(Uxe,"STRONG",{});var $ht=s(gme);d9o=r($ht,"xglm"),$ht.forEach(t),c9o=r(Uxe," \u2014 "),FG=n(Uxe,"A",{href:!0});var kht=s(FG);f9o=r(kht,"XGLMForCausalLM"),kht.forEach(t),m9o=r(Uxe," (XGLM model)"),Uxe.forEach(t),g9o=i(W),a1=n(W,"LI",{});var Jxe=s(a1);hme=n(Jxe,"STRONG",{});var Sht=s(hme);h9o=r(Sht,"xlm"),Sht.forEach(t),p9o=r(Jxe," \u2014 "),TG=n(Jxe,"A",{href:!0});var Rht=s(TG);u9o=r(Rht,"XLMWithLMHeadModel"),Rht.forEach(t),_9o=r(Jxe," (XLM model)"),Jxe.forEach(t),b9o=i(W),n1=n(W,"LI",{});var Yxe=s(n1);pme=n(Yxe,"STRONG",{});var Pht=s(pme);v9o=r(Pht,"xlm-prophetnet"),Pht.forEach(t),F9o=r(Yxe," \u2014 "),MG=n(Yxe,"A",{href:!0});var Bht=s(MG);T9o=r(Bht,"XLMProphetNetForCausalLM"),Bht.forEach(t),M9o=r(Yxe," (XLM-ProphetNet model)"),Yxe.forEach(t),E9o=i(W),s1=n(W,"LI",{});var Kxe=s(s1);ume=n(Kxe,"STRONG",{});var Iht=s(ume);C9o=r(Iht,"xlm-roberta"),Iht.forEach(t),w9o=r(Kxe," \u2014 "),EG=n(Kxe,"A",{href:!0});var Nht=s(EG);A9o=r(Nht,"XLMRobertaForCausalLM"),Nht.forEach(t),L9o=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),y9o=i(W),l1=n(W,"LI",{});var Zxe=s(l1);_me=n(Zxe,"STRONG",{});var qht=s(_me);x9o=r(qht,"xlm-roberta-xl"),qht.forEach(t),$9o=r(Zxe," \u2014 "),CG=n(Zxe,"A",{href:!0});var jht=s(CG);k9o=r(jht,"XLMRobertaXLForCausalLM"),jht.forEach(t),S9o=r(Zxe," (XLM-RoBERTa-XL model)"),Zxe.forEach(t),R9o=i(W),i1=n(W,"LI",{});var e$e=s(i1);bme=n(e$e,"STRONG",{});var Dht=s(bme);P9o=r(Dht,"xlnet"),Dht.forEach(t),B9o=r(e$e," \u2014 "),wG=n(e$e,"A",{href:!0});var Ght=s(wG);I9o=r(Ght,"XLNetLMHeadModel"),Ght.forEach(t),N9o=r(e$e," (XLNet model)"),e$e.forEach(t),W.forEach(t),q9o=i(sa),d1=n(sa,"P",{});var o$e=s(d1);j9o=r(o$e,"The model is set in evaluation mode by default using "),vme=n(o$e,"CODE",{});var Oht=s(vme);D9o=r(Oht,"model.eval()"),Oht.forEach(t),G9o=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=n(o$e,"CODE",{});var Vht=s(Fme);O9o=r(Vht,"model.train()"),Vht.forEach(t),o$e.forEach(t),V9o=i(sa),T(c1.$$.fragment,sa),sa.forEach(t),Ys.forEach(t),xGe=i(f),Vi=n(f,"H2",{class:!0});var BVe=s(Vi);f1=n(BVe,"A",{id:!0,class:!0,href:!0});var Xht=s(f1);Tme=n(Xht,"SPAN",{});var zht=s(Tme);T(dL.$$.fragment,zht),zht.forEach(t),Xht.forEach(t),X9o=i(BVe),Mme=n(BVe,"SPAN",{});var Wht=s(Mme);z9o=r(Wht,"AutoModelForMaskedLM"),Wht.forEach(t),BVe.forEach(t),$Ge=i(f),So=n(f,"DIV",{class:!0});var Ks=s(So);T(cL.$$.fragment,Ks),W9o=i(Ks),Xi=n(Ks,"P",{});var loe=s(Xi);Q9o=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AG=n(loe,"A",{href:!0});var Qht=s(AG);H9o=r(Qht,"from_pretrained()"),Qht.forEach(t),U9o=r(loe," class method or the "),LG=n(loe,"A",{href:!0});var Hht=s(LG);J9o=r(Hht,"from_config()"),Hht.forEach(t),Y9o=r(loe,` class
method.`),loe.forEach(t),K9o=i(Ks),fL=n(Ks,"P",{});var IVe=s(fL);Z9o=r(IVe,"This class cannot be instantiated directly using "),Eme=n(IVe,"CODE",{});var Uht=s(Eme);exo=r(Uht,"__init__()"),Uht.forEach(t),oxo=r(IVe," (throws an error)."),IVe.forEach(t),rxo=i(Ks),it=n(Ks,"DIV",{class:!0});var $0=s(it);T(mL.$$.fragment,$0),txo=i($0),Cme=n($0,"P",{});var Jht=s(Cme);axo=r(Jht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Jht.forEach(t),nxo=i($0),zi=n($0,"P",{});var ioe=s(zi);sxo=r(ioe,`Note:
Loading a model from its configuration file does `),wme=n(ioe,"STRONG",{});var Yht=s(wme);lxo=r(Yht,"not"),Yht.forEach(t),ixo=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=n(ioe,"A",{href:!0});var Kht=s(yG);dxo=r(Kht,"from_pretrained()"),Kht.forEach(t),cxo=r(ioe," to load the model weights."),ioe.forEach(t),fxo=i($0),T(m1.$$.fragment,$0),$0.forEach(t),mxo=i(Ks),Ze=n(Ks,"DIV",{class:!0});var la=s(Ze);T(gL.$$.fragment,la),gxo=i(la),Ame=n(la,"P",{});var Zht=s(Ame);hxo=r(Zht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Zht.forEach(t),pxo=i(la),Ba=n(la,"P",{});var k0=s(Ba);uxo=r(k0,"The model class to instantiate is selected based on the "),Lme=n(k0,"CODE",{});var ept=s(Lme);_xo=r(ept,"model_type"),ept.forEach(t),bxo=r(k0,` property of the config object (either
passed as an argument or loaded from `),yme=n(k0,"CODE",{});var opt=s(yme);vxo=r(opt,"pretrained_model_name_or_path"),opt.forEach(t),Fxo=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=n(k0,"CODE",{});var rpt=s(xme);Txo=r(rpt,"pretrained_model_name_or_path"),rpt.forEach(t),Mxo=r(k0,":"),k0.forEach(t),Exo=i(la),Q=n(la,"UL",{});var U=s(Q);g1=n(U,"LI",{});var r$e=s(g1);$me=n(r$e,"STRONG",{});var tpt=s($me);Cxo=r(tpt,"albert"),tpt.forEach(t),wxo=r(r$e," \u2014 "),xG=n(r$e,"A",{href:!0});var apt=s(xG);Axo=r(apt,"AlbertForMaskedLM"),apt.forEach(t),Lxo=r(r$e," (ALBERT model)"),r$e.forEach(t),yxo=i(U),h1=n(U,"LI",{});var t$e=s(h1);kme=n(t$e,"STRONG",{});var npt=s(kme);xxo=r(npt,"bart"),npt.forEach(t),$xo=r(t$e," \u2014 "),$G=n(t$e,"A",{href:!0});var spt=s($G);kxo=r(spt,"BartForConditionalGeneration"),spt.forEach(t),Sxo=r(t$e," (BART model)"),t$e.forEach(t),Rxo=i(U),p1=n(U,"LI",{});var a$e=s(p1);Sme=n(a$e,"STRONG",{});var lpt=s(Sme);Pxo=r(lpt,"bert"),lpt.forEach(t),Bxo=r(a$e," \u2014 "),kG=n(a$e,"A",{href:!0});var ipt=s(kG);Ixo=r(ipt,"BertForMaskedLM"),ipt.forEach(t),Nxo=r(a$e," (BERT model)"),a$e.forEach(t),qxo=i(U),u1=n(U,"LI",{});var n$e=s(u1);Rme=n(n$e,"STRONG",{});var dpt=s(Rme);jxo=r(dpt,"big_bird"),dpt.forEach(t),Dxo=r(n$e," \u2014 "),SG=n(n$e,"A",{href:!0});var cpt=s(SG);Gxo=r(cpt,"BigBirdForMaskedLM"),cpt.forEach(t),Oxo=r(n$e," (BigBird model)"),n$e.forEach(t),Vxo=i(U),_1=n(U,"LI",{});var s$e=s(_1);Pme=n(s$e,"STRONG",{});var fpt=s(Pme);Xxo=r(fpt,"camembert"),fpt.forEach(t),zxo=r(s$e," \u2014 "),RG=n(s$e,"A",{href:!0});var mpt=s(RG);Wxo=r(mpt,"CamembertForMaskedLM"),mpt.forEach(t),Qxo=r(s$e," (CamemBERT model)"),s$e.forEach(t),Hxo=i(U),b1=n(U,"LI",{});var l$e=s(b1);Bme=n(l$e,"STRONG",{});var gpt=s(Bme);Uxo=r(gpt,"convbert"),gpt.forEach(t),Jxo=r(l$e," \u2014 "),PG=n(l$e,"A",{href:!0});var hpt=s(PG);Yxo=r(hpt,"ConvBertForMaskedLM"),hpt.forEach(t),Kxo=r(l$e," (ConvBERT model)"),l$e.forEach(t),Zxo=i(U),v1=n(U,"LI",{});var i$e=s(v1);Ime=n(i$e,"STRONG",{});var ppt=s(Ime);e$o=r(ppt,"data2vec-text"),ppt.forEach(t),o$o=r(i$e," \u2014 "),BG=n(i$e,"A",{href:!0});var upt=s(BG);r$o=r(upt,"Data2VecTextForMaskedLM"),upt.forEach(t),t$o=r(i$e," (Data2VecText model)"),i$e.forEach(t),a$o=i(U),F1=n(U,"LI",{});var d$e=s(F1);Nme=n(d$e,"STRONG",{});var _pt=s(Nme);n$o=r(_pt,"deberta"),_pt.forEach(t),s$o=r(d$e," \u2014 "),IG=n(d$e,"A",{href:!0});var bpt=s(IG);l$o=r(bpt,"DebertaForMaskedLM"),bpt.forEach(t),i$o=r(d$e," (DeBERTa model)"),d$e.forEach(t),d$o=i(U),T1=n(U,"LI",{});var c$e=s(T1);qme=n(c$e,"STRONG",{});var vpt=s(qme);c$o=r(vpt,"deberta-v2"),vpt.forEach(t),f$o=r(c$e," \u2014 "),NG=n(c$e,"A",{href:!0});var Fpt=s(NG);m$o=r(Fpt,"DebertaV2ForMaskedLM"),Fpt.forEach(t),g$o=r(c$e," (DeBERTa-v2 model)"),c$e.forEach(t),h$o=i(U),M1=n(U,"LI",{});var f$e=s(M1);jme=n(f$e,"STRONG",{});var Tpt=s(jme);p$o=r(Tpt,"distilbert"),Tpt.forEach(t),u$o=r(f$e," \u2014 "),qG=n(f$e,"A",{href:!0});var Mpt=s(qG);_$o=r(Mpt,"DistilBertForMaskedLM"),Mpt.forEach(t),b$o=r(f$e," (DistilBERT model)"),f$e.forEach(t),v$o=i(U),E1=n(U,"LI",{});var m$e=s(E1);Dme=n(m$e,"STRONG",{});var Ept=s(Dme);F$o=r(Ept,"electra"),Ept.forEach(t),T$o=r(m$e," \u2014 "),jG=n(m$e,"A",{href:!0});var Cpt=s(jG);M$o=r(Cpt,"ElectraForMaskedLM"),Cpt.forEach(t),E$o=r(m$e," (ELECTRA model)"),m$e.forEach(t),C$o=i(U),C1=n(U,"LI",{});var g$e=s(C1);Gme=n(g$e,"STRONG",{});var wpt=s(Gme);w$o=r(wpt,"flaubert"),wpt.forEach(t),A$o=r(g$e," \u2014 "),DG=n(g$e,"A",{href:!0});var Apt=s(DG);L$o=r(Apt,"FlaubertWithLMHeadModel"),Apt.forEach(t),y$o=r(g$e," (FlauBERT model)"),g$e.forEach(t),x$o=i(U),w1=n(U,"LI",{});var h$e=s(w1);Ome=n(h$e,"STRONG",{});var Lpt=s(Ome);$$o=r(Lpt,"fnet"),Lpt.forEach(t),k$o=r(h$e," \u2014 "),GG=n(h$e,"A",{href:!0});var ypt=s(GG);S$o=r(ypt,"FNetForMaskedLM"),ypt.forEach(t),R$o=r(h$e," (FNet model)"),h$e.forEach(t),P$o=i(U),A1=n(U,"LI",{});var p$e=s(A1);Vme=n(p$e,"STRONG",{});var xpt=s(Vme);B$o=r(xpt,"funnel"),xpt.forEach(t),I$o=r(p$e," \u2014 "),OG=n(p$e,"A",{href:!0});var $pt=s(OG);N$o=r($pt,"FunnelForMaskedLM"),$pt.forEach(t),q$o=r(p$e," (Funnel Transformer model)"),p$e.forEach(t),j$o=i(U),L1=n(U,"LI",{});var u$e=s(L1);Xme=n(u$e,"STRONG",{});var kpt=s(Xme);D$o=r(kpt,"ibert"),kpt.forEach(t),G$o=r(u$e," \u2014 "),VG=n(u$e,"A",{href:!0});var Spt=s(VG);O$o=r(Spt,"IBertForMaskedLM"),Spt.forEach(t),V$o=r(u$e," (I-BERT model)"),u$e.forEach(t),X$o=i(U),y1=n(U,"LI",{});var _$e=s(y1);zme=n(_$e,"STRONG",{});var Rpt=s(zme);z$o=r(Rpt,"layoutlm"),Rpt.forEach(t),W$o=r(_$e," \u2014 "),XG=n(_$e,"A",{href:!0});var Ppt=s(XG);Q$o=r(Ppt,"LayoutLMForMaskedLM"),Ppt.forEach(t),H$o=r(_$e," (LayoutLM model)"),_$e.forEach(t),U$o=i(U),x1=n(U,"LI",{});var b$e=s(x1);Wme=n(b$e,"STRONG",{});var Bpt=s(Wme);J$o=r(Bpt,"longformer"),Bpt.forEach(t),Y$o=r(b$e," \u2014 "),zG=n(b$e,"A",{href:!0});var Ipt=s(zG);K$o=r(Ipt,"LongformerForMaskedLM"),Ipt.forEach(t),Z$o=r(b$e," (Longformer model)"),b$e.forEach(t),eko=i(U),$1=n(U,"LI",{});var v$e=s($1);Qme=n(v$e,"STRONG",{});var Npt=s(Qme);oko=r(Npt,"luke"),Npt.forEach(t),rko=r(v$e," \u2014 "),WG=n(v$e,"A",{href:!0});var qpt=s(WG);tko=r(qpt,"LukeForMaskedLM"),qpt.forEach(t),ako=r(v$e," (LUKE model)"),v$e.forEach(t),nko=i(U),k1=n(U,"LI",{});var F$e=s(k1);Hme=n(F$e,"STRONG",{});var jpt=s(Hme);sko=r(jpt,"mbart"),jpt.forEach(t),lko=r(F$e," \u2014 "),QG=n(F$e,"A",{href:!0});var Dpt=s(QG);iko=r(Dpt,"MBartForConditionalGeneration"),Dpt.forEach(t),dko=r(F$e," (mBART model)"),F$e.forEach(t),cko=i(U),S1=n(U,"LI",{});var T$e=s(S1);Ume=n(T$e,"STRONG",{});var Gpt=s(Ume);fko=r(Gpt,"megatron-bert"),Gpt.forEach(t),mko=r(T$e," \u2014 "),HG=n(T$e,"A",{href:!0});var Opt=s(HG);gko=r(Opt,"MegatronBertForMaskedLM"),Opt.forEach(t),hko=r(T$e," (Megatron-BERT model)"),T$e.forEach(t),pko=i(U),R1=n(U,"LI",{});var M$e=s(R1);Jme=n(M$e,"STRONG",{});var Vpt=s(Jme);uko=r(Vpt,"mobilebert"),Vpt.forEach(t),_ko=r(M$e," \u2014 "),UG=n(M$e,"A",{href:!0});var Xpt=s(UG);bko=r(Xpt,"MobileBertForMaskedLM"),Xpt.forEach(t),vko=r(M$e," (MobileBERT model)"),M$e.forEach(t),Fko=i(U),P1=n(U,"LI",{});var E$e=s(P1);Yme=n(E$e,"STRONG",{});var zpt=s(Yme);Tko=r(zpt,"mpnet"),zpt.forEach(t),Mko=r(E$e," \u2014 "),JG=n(E$e,"A",{href:!0});var Wpt=s(JG);Eko=r(Wpt,"MPNetForMaskedLM"),Wpt.forEach(t),Cko=r(E$e," (MPNet model)"),E$e.forEach(t),wko=i(U),B1=n(U,"LI",{});var C$e=s(B1);Kme=n(C$e,"STRONG",{});var Qpt=s(Kme);Ako=r(Qpt,"nystromformer"),Qpt.forEach(t),Lko=r(C$e," \u2014 "),YG=n(C$e,"A",{href:!0});var Hpt=s(YG);yko=r(Hpt,"NystromformerForMaskedLM"),Hpt.forEach(t),xko=r(C$e," (Nystr\xF6mformer model)"),C$e.forEach(t),$ko=i(U),I1=n(U,"LI",{});var w$e=s(I1);Zme=n(w$e,"STRONG",{});var Upt=s(Zme);kko=r(Upt,"perceiver"),Upt.forEach(t),Sko=r(w$e," \u2014 "),KG=n(w$e,"A",{href:!0});var Jpt=s(KG);Rko=r(Jpt,"PerceiverForMaskedLM"),Jpt.forEach(t),Pko=r(w$e," (Perceiver model)"),w$e.forEach(t),Bko=i(U),N1=n(U,"LI",{});var A$e=s(N1);ege=n(A$e,"STRONG",{});var Ypt=s(ege);Iko=r(Ypt,"qdqbert"),Ypt.forEach(t),Nko=r(A$e," \u2014 "),ZG=n(A$e,"A",{href:!0});var Kpt=s(ZG);qko=r(Kpt,"QDQBertForMaskedLM"),Kpt.forEach(t),jko=r(A$e," (QDQBert model)"),A$e.forEach(t),Dko=i(U),q1=n(U,"LI",{});var L$e=s(q1);oge=n(L$e,"STRONG",{});var Zpt=s(oge);Gko=r(Zpt,"reformer"),Zpt.forEach(t),Oko=r(L$e," \u2014 "),eO=n(L$e,"A",{href:!0});var eut=s(eO);Vko=r(eut,"ReformerForMaskedLM"),eut.forEach(t),Xko=r(L$e," (Reformer model)"),L$e.forEach(t),zko=i(U),j1=n(U,"LI",{});var y$e=s(j1);rge=n(y$e,"STRONG",{});var out=s(rge);Wko=r(out,"rembert"),out.forEach(t),Qko=r(y$e," \u2014 "),oO=n(y$e,"A",{href:!0});var rut=s(oO);Hko=r(rut,"RemBertForMaskedLM"),rut.forEach(t),Uko=r(y$e," (RemBERT model)"),y$e.forEach(t),Jko=i(U),D1=n(U,"LI",{});var x$e=s(D1);tge=n(x$e,"STRONG",{});var tut=s(tge);Yko=r(tut,"roberta"),tut.forEach(t),Kko=r(x$e," \u2014 "),rO=n(x$e,"A",{href:!0});var aut=s(rO);Zko=r(aut,"RobertaForMaskedLM"),aut.forEach(t),eSo=r(x$e," (RoBERTa model)"),x$e.forEach(t),oSo=i(U),G1=n(U,"LI",{});var $$e=s(G1);age=n($$e,"STRONG",{});var nut=s(age);rSo=r(nut,"roformer"),nut.forEach(t),tSo=r($$e," \u2014 "),tO=n($$e,"A",{href:!0});var sut=s(tO);aSo=r(sut,"RoFormerForMaskedLM"),sut.forEach(t),nSo=r($$e," (RoFormer model)"),$$e.forEach(t),sSo=i(U),O1=n(U,"LI",{});var k$e=s(O1);nge=n(k$e,"STRONG",{});var lut=s(nge);lSo=r(lut,"squeezebert"),lut.forEach(t),iSo=r(k$e," \u2014 "),aO=n(k$e,"A",{href:!0});var iut=s(aO);dSo=r(iut,"SqueezeBertForMaskedLM"),iut.forEach(t),cSo=r(k$e," (SqueezeBERT model)"),k$e.forEach(t),fSo=i(U),V1=n(U,"LI",{});var S$e=s(V1);sge=n(S$e,"STRONG",{});var dut=s(sge);mSo=r(dut,"tapas"),dut.forEach(t),gSo=r(S$e," \u2014 "),nO=n(S$e,"A",{href:!0});var cut=s(nO);hSo=r(cut,"TapasForMaskedLM"),cut.forEach(t),pSo=r(S$e," (TAPAS model)"),S$e.forEach(t),uSo=i(U),X1=n(U,"LI",{});var R$e=s(X1);lge=n(R$e,"STRONG",{});var fut=s(lge);_So=r(fut,"wav2vec2"),fut.forEach(t),bSo=r(R$e," \u2014 "),ige=n(R$e,"CODE",{});var mut=s(ige);vSo=r(mut,"Wav2Vec2ForMaskedLM"),mut.forEach(t),FSo=r(R$e," (Wav2Vec2 model)"),R$e.forEach(t),TSo=i(U),z1=n(U,"LI",{});var P$e=s(z1);dge=n(P$e,"STRONG",{});var gut=s(dge);MSo=r(gut,"xlm"),gut.forEach(t),ESo=r(P$e," \u2014 "),sO=n(P$e,"A",{href:!0});var hut=s(sO);CSo=r(hut,"XLMWithLMHeadModel"),hut.forEach(t),wSo=r(P$e," (XLM model)"),P$e.forEach(t),ASo=i(U),W1=n(U,"LI",{});var B$e=s(W1);cge=n(B$e,"STRONG",{});var put=s(cge);LSo=r(put,"xlm-roberta"),put.forEach(t),ySo=r(B$e," \u2014 "),lO=n(B$e,"A",{href:!0});var uut=s(lO);xSo=r(uut,"XLMRobertaForMaskedLM"),uut.forEach(t),$So=r(B$e," (XLM-RoBERTa model)"),B$e.forEach(t),kSo=i(U),Q1=n(U,"LI",{});var I$e=s(Q1);fge=n(I$e,"STRONG",{});var _ut=s(fge);SSo=r(_ut,"xlm-roberta-xl"),_ut.forEach(t),RSo=r(I$e," \u2014 "),iO=n(I$e,"A",{href:!0});var but=s(iO);PSo=r(but,"XLMRobertaXLForMaskedLM"),but.forEach(t),BSo=r(I$e," (XLM-RoBERTa-XL model)"),I$e.forEach(t),ISo=i(U),H1=n(U,"LI",{});var N$e=s(H1);mge=n(N$e,"STRONG",{});var vut=s(mge);NSo=r(vut,"yoso"),vut.forEach(t),qSo=r(N$e," \u2014 "),dO=n(N$e,"A",{href:!0});var Fut=s(dO);jSo=r(Fut,"YosoForMaskedLM"),Fut.forEach(t),DSo=r(N$e," (YOSO model)"),N$e.forEach(t),U.forEach(t),GSo=i(la),U1=n(la,"P",{});var q$e=s(U1);OSo=r(q$e,"The model is set in evaluation mode by default using "),gge=n(q$e,"CODE",{});var Tut=s(gge);VSo=r(Tut,"model.eval()"),Tut.forEach(t),XSo=r(q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=n(q$e,"CODE",{});var Mut=s(hge);zSo=r(Mut,"model.train()"),Mut.forEach(t),q$e.forEach(t),WSo=i(la),T(J1.$$.fragment,la),la.forEach(t),Ks.forEach(t),kGe=i(f),Wi=n(f,"H2",{class:!0});var NVe=s(Wi);Y1=n(NVe,"A",{id:!0,class:!0,href:!0});var Eut=s(Y1);pge=n(Eut,"SPAN",{});var Cut=s(pge);T(hL.$$.fragment,Cut),Cut.forEach(t),Eut.forEach(t),QSo=i(NVe),uge=n(NVe,"SPAN",{});var wut=s(uge);HSo=r(wut,"AutoModelForSeq2SeqLM"),wut.forEach(t),NVe.forEach(t),SGe=i(f),Ro=n(f,"DIV",{class:!0});var Zs=s(Ro);T(pL.$$.fragment,Zs),USo=i(Zs),Qi=n(Zs,"P",{});var doe=s(Qi);JSo=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cO=n(doe,"A",{href:!0});var Aut=s(cO);YSo=r(Aut,"from_pretrained()"),Aut.forEach(t),KSo=r(doe," class method or the "),fO=n(doe,"A",{href:!0});var Lut=s(fO);ZSo=r(Lut,"from_config()"),Lut.forEach(t),eRo=r(doe,` class
method.`),doe.forEach(t),oRo=i(Zs),uL=n(Zs,"P",{});var qVe=s(uL);rRo=r(qVe,"This class cannot be instantiated directly using "),_ge=n(qVe,"CODE",{});var yut=s(_ge);tRo=r(yut,"__init__()"),yut.forEach(t),aRo=r(qVe," (throws an error)."),qVe.forEach(t),nRo=i(Zs),dt=n(Zs,"DIV",{class:!0});var S0=s(dt);T(_L.$$.fragment,S0),sRo=i(S0),bge=n(S0,"P",{});var xut=s(bge);lRo=r(xut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xut.forEach(t),iRo=i(S0),Hi=n(S0,"P",{});var coe=s(Hi);dRo=r(coe,`Note:
Loading a model from its configuration file does `),vge=n(coe,"STRONG",{});var $ut=s(vge);cRo=r($ut,"not"),$ut.forEach(t),fRo=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(coe,"A",{href:!0});var kut=s(mO);mRo=r(kut,"from_pretrained()"),kut.forEach(t),gRo=r(coe," to load the model weights."),coe.forEach(t),hRo=i(S0),T(K1.$$.fragment,S0),S0.forEach(t),pRo=i(Zs),eo=n(Zs,"DIV",{class:!0});var ia=s(eo);T(bL.$$.fragment,ia),uRo=i(ia),Fge=n(ia,"P",{});var Sut=s(Fge);_Ro=r(Sut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Sut.forEach(t),bRo=i(ia),Ia=n(ia,"P",{});var R0=s(Ia);vRo=r(R0,"The model class to instantiate is selected based on the "),Tge=n(R0,"CODE",{});var Rut=s(Tge);FRo=r(Rut,"model_type"),Rut.forEach(t),TRo=r(R0,` property of the config object (either
passed as an argument or loaded from `),Mge=n(R0,"CODE",{});var Put=s(Mge);MRo=r(Put,"pretrained_model_name_or_path"),Put.forEach(t),ERo=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(R0,"CODE",{});var But=s(Ege);CRo=r(But,"pretrained_model_name_or_path"),But.forEach(t),wRo=r(R0,":"),R0.forEach(t),ARo=i(ia),pe=n(ia,"UL",{});var be=s(pe);Z1=n(be,"LI",{});var j$e=s(Z1);Cge=n(j$e,"STRONG",{});var Iut=s(Cge);LRo=r(Iut,"bart"),Iut.forEach(t),yRo=r(j$e," \u2014 "),gO=n(j$e,"A",{href:!0});var Nut=s(gO);xRo=r(Nut,"BartForConditionalGeneration"),Nut.forEach(t),$Ro=r(j$e," (BART model)"),j$e.forEach(t),kRo=i(be),eb=n(be,"LI",{});var D$e=s(eb);wge=n(D$e,"STRONG",{});var qut=s(wge);SRo=r(qut,"bigbird_pegasus"),qut.forEach(t),RRo=r(D$e," \u2014 "),hO=n(D$e,"A",{href:!0});var jut=s(hO);PRo=r(jut,"BigBirdPegasusForConditionalGeneration"),jut.forEach(t),BRo=r(D$e," (BigBird-Pegasus model)"),D$e.forEach(t),IRo=i(be),ob=n(be,"LI",{});var G$e=s(ob);Age=n(G$e,"STRONG",{});var Dut=s(Age);NRo=r(Dut,"blenderbot"),Dut.forEach(t),qRo=r(G$e," \u2014 "),pO=n(G$e,"A",{href:!0});var Gut=s(pO);jRo=r(Gut,"BlenderbotForConditionalGeneration"),Gut.forEach(t),DRo=r(G$e," (Blenderbot model)"),G$e.forEach(t),GRo=i(be),rb=n(be,"LI",{});var O$e=s(rb);Lge=n(O$e,"STRONG",{});var Out=s(Lge);ORo=r(Out,"blenderbot-small"),Out.forEach(t),VRo=r(O$e," \u2014 "),uO=n(O$e,"A",{href:!0});var Vut=s(uO);XRo=r(Vut,"BlenderbotSmallForConditionalGeneration"),Vut.forEach(t),zRo=r(O$e," (BlenderbotSmall model)"),O$e.forEach(t),WRo=i(be),tb=n(be,"LI",{});var V$e=s(tb);yge=n(V$e,"STRONG",{});var Xut=s(yge);QRo=r(Xut,"encoder-decoder"),Xut.forEach(t),HRo=r(V$e," \u2014 "),_O=n(V$e,"A",{href:!0});var zut=s(_O);URo=r(zut,"EncoderDecoderModel"),zut.forEach(t),JRo=r(V$e," (Encoder decoder model)"),V$e.forEach(t),YRo=i(be),ab=n(be,"LI",{});var X$e=s(ab);xge=n(X$e,"STRONG",{});var Wut=s(xge);KRo=r(Wut,"fsmt"),Wut.forEach(t),ZRo=r(X$e," \u2014 "),bO=n(X$e,"A",{href:!0});var Qut=s(bO);ePo=r(Qut,"FSMTForConditionalGeneration"),Qut.forEach(t),oPo=r(X$e," (FairSeq Machine-Translation model)"),X$e.forEach(t),rPo=i(be),nb=n(be,"LI",{});var z$e=s(nb);$ge=n(z$e,"STRONG",{});var Hut=s($ge);tPo=r(Hut,"led"),Hut.forEach(t),aPo=r(z$e," \u2014 "),vO=n(z$e,"A",{href:!0});var Uut=s(vO);nPo=r(Uut,"LEDForConditionalGeneration"),Uut.forEach(t),sPo=r(z$e," (LED model)"),z$e.forEach(t),lPo=i(be),sb=n(be,"LI",{});var W$e=s(sb);kge=n(W$e,"STRONG",{});var Jut=s(kge);iPo=r(Jut,"longt5"),Jut.forEach(t),dPo=r(W$e," \u2014 "),FO=n(W$e,"A",{href:!0});var Yut=s(FO);cPo=r(Yut,"LongT5ForConditionalGeneration"),Yut.forEach(t),fPo=r(W$e," (LongT5 model)"),W$e.forEach(t),mPo=i(be),lb=n(be,"LI",{});var Q$e=s(lb);Sge=n(Q$e,"STRONG",{});var Kut=s(Sge);gPo=r(Kut,"m2m_100"),Kut.forEach(t),hPo=r(Q$e," \u2014 "),TO=n(Q$e,"A",{href:!0});var Zut=s(TO);pPo=r(Zut,"M2M100ForConditionalGeneration"),Zut.forEach(t),uPo=r(Q$e," (M2M100 model)"),Q$e.forEach(t),_Po=i(be),ib=n(be,"LI",{});var H$e=s(ib);Rge=n(H$e,"STRONG",{});var e_t=s(Rge);bPo=r(e_t,"marian"),e_t.forEach(t),vPo=r(H$e," \u2014 "),MO=n(H$e,"A",{href:!0});var o_t=s(MO);FPo=r(o_t,"MarianMTModel"),o_t.forEach(t),TPo=r(H$e," (Marian model)"),H$e.forEach(t),MPo=i(be),db=n(be,"LI",{});var U$e=s(db);Pge=n(U$e,"STRONG",{});var r_t=s(Pge);EPo=r(r_t,"mbart"),r_t.forEach(t),CPo=r(U$e," \u2014 "),EO=n(U$e,"A",{href:!0});var t_t=s(EO);wPo=r(t_t,"MBartForConditionalGeneration"),t_t.forEach(t),APo=r(U$e," (mBART model)"),U$e.forEach(t),LPo=i(be),cb=n(be,"LI",{});var J$e=s(cb);Bge=n(J$e,"STRONG",{});var a_t=s(Bge);yPo=r(a_t,"mt5"),a_t.forEach(t),xPo=r(J$e," \u2014 "),CO=n(J$e,"A",{href:!0});var n_t=s(CO);$Po=r(n_t,"MT5ForConditionalGeneration"),n_t.forEach(t),kPo=r(J$e," (MT5 model)"),J$e.forEach(t),SPo=i(be),fb=n(be,"LI",{});var Y$e=s(fb);Ige=n(Y$e,"STRONG",{});var s_t=s(Ige);RPo=r(s_t,"pegasus"),s_t.forEach(t),PPo=r(Y$e," \u2014 "),wO=n(Y$e,"A",{href:!0});var l_t=s(wO);BPo=r(l_t,"PegasusForConditionalGeneration"),l_t.forEach(t),IPo=r(Y$e," (Pegasus model)"),Y$e.forEach(t),NPo=i(be),mb=n(be,"LI",{});var K$e=s(mb);Nge=n(K$e,"STRONG",{});var i_t=s(Nge);qPo=r(i_t,"plbart"),i_t.forEach(t),jPo=r(K$e," \u2014 "),AO=n(K$e,"A",{href:!0});var d_t=s(AO);DPo=r(d_t,"PLBartForConditionalGeneration"),d_t.forEach(t),GPo=r(K$e," (PLBart model)"),K$e.forEach(t),OPo=i(be),gb=n(be,"LI",{});var Z$e=s(gb);qge=n(Z$e,"STRONG",{});var c_t=s(qge);VPo=r(c_t,"prophetnet"),c_t.forEach(t),XPo=r(Z$e," \u2014 "),LO=n(Z$e,"A",{href:!0});var f_t=s(LO);zPo=r(f_t,"ProphetNetForConditionalGeneration"),f_t.forEach(t),WPo=r(Z$e," (ProphetNet model)"),Z$e.forEach(t),QPo=i(be),hb=n(be,"LI",{});var eke=s(hb);jge=n(eke,"STRONG",{});var m_t=s(jge);HPo=r(m_t,"t5"),m_t.forEach(t),UPo=r(eke," \u2014 "),yO=n(eke,"A",{href:!0});var g_t=s(yO);JPo=r(g_t,"T5ForConditionalGeneration"),g_t.forEach(t),YPo=r(eke," (T5 model)"),eke.forEach(t),KPo=i(be),pb=n(be,"LI",{});var oke=s(pb);Dge=n(oke,"STRONG",{});var h_t=s(Dge);ZPo=r(h_t,"xlm-prophetnet"),h_t.forEach(t),eBo=r(oke," \u2014 "),xO=n(oke,"A",{href:!0});var p_t=s(xO);oBo=r(p_t,"XLMProphetNetForConditionalGeneration"),p_t.forEach(t),rBo=r(oke," (XLM-ProphetNet model)"),oke.forEach(t),be.forEach(t),tBo=i(ia),ub=n(ia,"P",{});var rke=s(ub);aBo=r(rke,"The model is set in evaluation mode by default using "),Gge=n(rke,"CODE",{});var u_t=s(Gge);nBo=r(u_t,"model.eval()"),u_t.forEach(t),sBo=r(rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=n(rke,"CODE",{});var __t=s(Oge);lBo=r(__t,"model.train()"),__t.forEach(t),rke.forEach(t),iBo=i(ia),T(_b.$$.fragment,ia),ia.forEach(t),Zs.forEach(t),RGe=i(f),Ui=n(f,"H2",{class:!0});var jVe=s(Ui);bb=n(jVe,"A",{id:!0,class:!0,href:!0});var b_t=s(bb);Vge=n(b_t,"SPAN",{});var v_t=s(Vge);T(vL.$$.fragment,v_t),v_t.forEach(t),b_t.forEach(t),dBo=i(jVe),Xge=n(jVe,"SPAN",{});var F_t=s(Xge);cBo=r(F_t,"AutoModelForSequenceClassification"),F_t.forEach(t),jVe.forEach(t),PGe=i(f),Po=n(f,"DIV",{class:!0});var el=s(Po);T(FL.$$.fragment,el),fBo=i(el),Ji=n(el,"P",{});var foe=s(Ji);mBo=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$O=n(foe,"A",{href:!0});var T_t=s($O);gBo=r(T_t,"from_pretrained()"),T_t.forEach(t),hBo=r(foe," class method or the "),kO=n(foe,"A",{href:!0});var M_t=s(kO);pBo=r(M_t,"from_config()"),M_t.forEach(t),uBo=r(foe,` class
method.`),foe.forEach(t),_Bo=i(el),TL=n(el,"P",{});var DVe=s(TL);bBo=r(DVe,"This class cannot be instantiated directly using "),zge=n(DVe,"CODE",{});var E_t=s(zge);vBo=r(E_t,"__init__()"),E_t.forEach(t),FBo=r(DVe," (throws an error)."),DVe.forEach(t),TBo=i(el),ct=n(el,"DIV",{class:!0});var P0=s(ct);T(ML.$$.fragment,P0),MBo=i(P0),Wge=n(P0,"P",{});var C_t=s(Wge);EBo=r(C_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),C_t.forEach(t),CBo=i(P0),Yi=n(P0,"P",{});var moe=s(Yi);wBo=r(moe,`Note:
Loading a model from its configuration file does `),Qge=n(moe,"STRONG",{});var w_t=s(Qge);ABo=r(w_t,"not"),w_t.forEach(t),LBo=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SO=n(moe,"A",{href:!0});var A_t=s(SO);yBo=r(A_t,"from_pretrained()"),A_t.forEach(t),xBo=r(moe," to load the model weights."),moe.forEach(t),$Bo=i(P0),T(vb.$$.fragment,P0),P0.forEach(t),kBo=i(el),oo=n(el,"DIV",{class:!0});var da=s(oo);T(EL.$$.fragment,da),SBo=i(da),Hge=n(da,"P",{});var L_t=s(Hge);RBo=r(L_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L_t.forEach(t),PBo=i(da),Na=n(da,"P",{});var B0=s(Na);BBo=r(B0,"The model class to instantiate is selected based on the "),Uge=n(B0,"CODE",{});var y_t=s(Uge);IBo=r(y_t,"model_type"),y_t.forEach(t),NBo=r(B0,` property of the config object (either
passed as an argument or loaded from `),Jge=n(B0,"CODE",{});var x_t=s(Jge);qBo=r(x_t,"pretrained_model_name_or_path"),x_t.forEach(t),jBo=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=n(B0,"CODE",{});var $_t=s(Yge);DBo=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),GBo=r(B0,":"),B0.forEach(t),OBo=i(da),N=n(da,"UL",{});var j=s(N);Fb=n(j,"LI",{});var tke=s(Fb);Kge=n(tke,"STRONG",{});var k_t=s(Kge);VBo=r(k_t,"albert"),k_t.forEach(t),XBo=r(tke," \u2014 "),RO=n(tke,"A",{href:!0});var S_t=s(RO);zBo=r(S_t,"AlbertForSequenceClassification"),S_t.forEach(t),WBo=r(tke," (ALBERT model)"),tke.forEach(t),QBo=i(j),Tb=n(j,"LI",{});var ake=s(Tb);Zge=n(ake,"STRONG",{});var R_t=s(Zge);HBo=r(R_t,"bart"),R_t.forEach(t),UBo=r(ake," \u2014 "),PO=n(ake,"A",{href:!0});var P_t=s(PO);JBo=r(P_t,"BartForSequenceClassification"),P_t.forEach(t),YBo=r(ake," (BART model)"),ake.forEach(t),KBo=i(j),Mb=n(j,"LI",{});var nke=s(Mb);ehe=n(nke,"STRONG",{});var B_t=s(ehe);ZBo=r(B_t,"bert"),B_t.forEach(t),eIo=r(nke," \u2014 "),BO=n(nke,"A",{href:!0});var I_t=s(BO);oIo=r(I_t,"BertForSequenceClassification"),I_t.forEach(t),rIo=r(nke," (BERT model)"),nke.forEach(t),tIo=i(j),Eb=n(j,"LI",{});var ske=s(Eb);ohe=n(ske,"STRONG",{});var N_t=s(ohe);aIo=r(N_t,"big_bird"),N_t.forEach(t),nIo=r(ske," \u2014 "),IO=n(ske,"A",{href:!0});var q_t=s(IO);sIo=r(q_t,"BigBirdForSequenceClassification"),q_t.forEach(t),lIo=r(ske," (BigBird model)"),ske.forEach(t),iIo=i(j),Cb=n(j,"LI",{});var lke=s(Cb);rhe=n(lke,"STRONG",{});var j_t=s(rhe);dIo=r(j_t,"bigbird_pegasus"),j_t.forEach(t),cIo=r(lke," \u2014 "),NO=n(lke,"A",{href:!0});var D_t=s(NO);fIo=r(D_t,"BigBirdPegasusForSequenceClassification"),D_t.forEach(t),mIo=r(lke," (BigBird-Pegasus model)"),lke.forEach(t),gIo=i(j),wb=n(j,"LI",{});var ike=s(wb);the=n(ike,"STRONG",{});var G_t=s(the);hIo=r(G_t,"bloom"),G_t.forEach(t),pIo=r(ike," \u2014 "),qO=n(ike,"A",{href:!0});var O_t=s(qO);uIo=r(O_t,"BloomForSequenceClassification"),O_t.forEach(t),_Io=r(ike," (BLOOM model)"),ike.forEach(t),bIo=i(j),Ab=n(j,"LI",{});var dke=s(Ab);ahe=n(dke,"STRONG",{});var V_t=s(ahe);vIo=r(V_t,"camembert"),V_t.forEach(t),FIo=r(dke," \u2014 "),jO=n(dke,"A",{href:!0});var X_t=s(jO);TIo=r(X_t,"CamembertForSequenceClassification"),X_t.forEach(t),MIo=r(dke," (CamemBERT model)"),dke.forEach(t),EIo=i(j),Lb=n(j,"LI",{});var cke=s(Lb);nhe=n(cke,"STRONG",{});var z_t=s(nhe);CIo=r(z_t,"canine"),z_t.forEach(t),wIo=r(cke," \u2014 "),DO=n(cke,"A",{href:!0});var W_t=s(DO);AIo=r(W_t,"CanineForSequenceClassification"),W_t.forEach(t),LIo=r(cke," (CANINE model)"),cke.forEach(t),yIo=i(j),yb=n(j,"LI",{});var fke=s(yb);she=n(fke,"STRONG",{});var Q_t=s(she);xIo=r(Q_t,"convbert"),Q_t.forEach(t),$Io=r(fke," \u2014 "),GO=n(fke,"A",{href:!0});var H_t=s(GO);kIo=r(H_t,"ConvBertForSequenceClassification"),H_t.forEach(t),SIo=r(fke," (ConvBERT model)"),fke.forEach(t),RIo=i(j),xb=n(j,"LI",{});var mke=s(xb);lhe=n(mke,"STRONG",{});var U_t=s(lhe);PIo=r(U_t,"ctrl"),U_t.forEach(t),BIo=r(mke," \u2014 "),OO=n(mke,"A",{href:!0});var J_t=s(OO);IIo=r(J_t,"CTRLForSequenceClassification"),J_t.forEach(t),NIo=r(mke," (CTRL model)"),mke.forEach(t),qIo=i(j),$b=n(j,"LI",{});var gke=s($b);ihe=n(gke,"STRONG",{});var Y_t=s(ihe);jIo=r(Y_t,"data2vec-text"),Y_t.forEach(t),DIo=r(gke," \u2014 "),VO=n(gke,"A",{href:!0});var K_t=s(VO);GIo=r(K_t,"Data2VecTextForSequenceClassification"),K_t.forEach(t),OIo=r(gke," (Data2VecText model)"),gke.forEach(t),VIo=i(j),kb=n(j,"LI",{});var hke=s(kb);dhe=n(hke,"STRONG",{});var Z_t=s(dhe);XIo=r(Z_t,"deberta"),Z_t.forEach(t),zIo=r(hke," \u2014 "),XO=n(hke,"A",{href:!0});var e2t=s(XO);WIo=r(e2t,"DebertaForSequenceClassification"),e2t.forEach(t),QIo=r(hke," (DeBERTa model)"),hke.forEach(t),HIo=i(j),Sb=n(j,"LI",{});var pke=s(Sb);che=n(pke,"STRONG",{});var o2t=s(che);UIo=r(o2t,"deberta-v2"),o2t.forEach(t),JIo=r(pke," \u2014 "),zO=n(pke,"A",{href:!0});var r2t=s(zO);YIo=r(r2t,"DebertaV2ForSequenceClassification"),r2t.forEach(t),KIo=r(pke," (DeBERTa-v2 model)"),pke.forEach(t),ZIo=i(j),Rb=n(j,"LI",{});var uke=s(Rb);fhe=n(uke,"STRONG",{});var t2t=s(fhe);eNo=r(t2t,"distilbert"),t2t.forEach(t),oNo=r(uke," \u2014 "),WO=n(uke,"A",{href:!0});var a2t=s(WO);rNo=r(a2t,"DistilBertForSequenceClassification"),a2t.forEach(t),tNo=r(uke," (DistilBERT model)"),uke.forEach(t),aNo=i(j),Pb=n(j,"LI",{});var _ke=s(Pb);mhe=n(_ke,"STRONG",{});var n2t=s(mhe);nNo=r(n2t,"electra"),n2t.forEach(t),sNo=r(_ke," \u2014 "),QO=n(_ke,"A",{href:!0});var s2t=s(QO);lNo=r(s2t,"ElectraForSequenceClassification"),s2t.forEach(t),iNo=r(_ke," (ELECTRA model)"),_ke.forEach(t),dNo=i(j),Bb=n(j,"LI",{});var bke=s(Bb);ghe=n(bke,"STRONG",{});var l2t=s(ghe);cNo=r(l2t,"flaubert"),l2t.forEach(t),fNo=r(bke," \u2014 "),HO=n(bke,"A",{href:!0});var i2t=s(HO);mNo=r(i2t,"FlaubertForSequenceClassification"),i2t.forEach(t),gNo=r(bke," (FlauBERT model)"),bke.forEach(t),hNo=i(j),Ib=n(j,"LI",{});var vke=s(Ib);hhe=n(vke,"STRONG",{});var d2t=s(hhe);pNo=r(d2t,"fnet"),d2t.forEach(t),uNo=r(vke," \u2014 "),UO=n(vke,"A",{href:!0});var c2t=s(UO);_No=r(c2t,"FNetForSequenceClassification"),c2t.forEach(t),bNo=r(vke," (FNet model)"),vke.forEach(t),vNo=i(j),Nb=n(j,"LI",{});var Fke=s(Nb);phe=n(Fke,"STRONG",{});var f2t=s(phe);FNo=r(f2t,"funnel"),f2t.forEach(t),TNo=r(Fke," \u2014 "),JO=n(Fke,"A",{href:!0});var m2t=s(JO);MNo=r(m2t,"FunnelForSequenceClassification"),m2t.forEach(t),ENo=r(Fke," (Funnel Transformer model)"),Fke.forEach(t),CNo=i(j),qb=n(j,"LI",{});var Tke=s(qb);uhe=n(Tke,"STRONG",{});var g2t=s(uhe);wNo=r(g2t,"gpt2"),g2t.forEach(t),ANo=r(Tke," \u2014 "),YO=n(Tke,"A",{href:!0});var h2t=s(YO);LNo=r(h2t,"GPT2ForSequenceClassification"),h2t.forEach(t),yNo=r(Tke," (OpenAI GPT-2 model)"),Tke.forEach(t),xNo=i(j),jb=n(j,"LI",{});var Mke=s(jb);_he=n(Mke,"STRONG",{});var p2t=s(_he);$No=r(p2t,"gpt_neo"),p2t.forEach(t),kNo=r(Mke," \u2014 "),KO=n(Mke,"A",{href:!0});var u2t=s(KO);SNo=r(u2t,"GPTNeoForSequenceClassification"),u2t.forEach(t),RNo=r(Mke," (GPT Neo model)"),Mke.forEach(t),PNo=i(j),Db=n(j,"LI",{});var Eke=s(Db);bhe=n(Eke,"STRONG",{});var _2t=s(bhe);BNo=r(_2t,"gptj"),_2t.forEach(t),INo=r(Eke," \u2014 "),ZO=n(Eke,"A",{href:!0});var b2t=s(ZO);NNo=r(b2t,"GPTJForSequenceClassification"),b2t.forEach(t),qNo=r(Eke," (GPT-J model)"),Eke.forEach(t),jNo=i(j),Gb=n(j,"LI",{});var Cke=s(Gb);vhe=n(Cke,"STRONG",{});var v2t=s(vhe);DNo=r(v2t,"ibert"),v2t.forEach(t),GNo=r(Cke," \u2014 "),eV=n(Cke,"A",{href:!0});var F2t=s(eV);ONo=r(F2t,"IBertForSequenceClassification"),F2t.forEach(t),VNo=r(Cke," (I-BERT model)"),Cke.forEach(t),XNo=i(j),Ob=n(j,"LI",{});var wke=s(Ob);Fhe=n(wke,"STRONG",{});var T2t=s(Fhe);zNo=r(T2t,"layoutlm"),T2t.forEach(t),WNo=r(wke," \u2014 "),oV=n(wke,"A",{href:!0});var M2t=s(oV);QNo=r(M2t,"LayoutLMForSequenceClassification"),M2t.forEach(t),HNo=r(wke," (LayoutLM model)"),wke.forEach(t),UNo=i(j),Vb=n(j,"LI",{});var Ake=s(Vb);The=n(Ake,"STRONG",{});var E2t=s(The);JNo=r(E2t,"layoutlmv2"),E2t.forEach(t),YNo=r(Ake," \u2014 "),rV=n(Ake,"A",{href:!0});var C2t=s(rV);KNo=r(C2t,"LayoutLMv2ForSequenceClassification"),C2t.forEach(t),ZNo=r(Ake," (LayoutLMv2 model)"),Ake.forEach(t),eqo=i(j),Xb=n(j,"LI",{});var Lke=s(Xb);Mhe=n(Lke,"STRONG",{});var w2t=s(Mhe);oqo=r(w2t,"layoutlmv3"),w2t.forEach(t),rqo=r(Lke," \u2014 "),tV=n(Lke,"A",{href:!0});var A2t=s(tV);tqo=r(A2t,"LayoutLMv3ForSequenceClassification"),A2t.forEach(t),aqo=r(Lke," (LayoutLMv3 model)"),Lke.forEach(t),nqo=i(j),zb=n(j,"LI",{});var yke=s(zb);Ehe=n(yke,"STRONG",{});var L2t=s(Ehe);sqo=r(L2t,"led"),L2t.forEach(t),lqo=r(yke," \u2014 "),aV=n(yke,"A",{href:!0});var y2t=s(aV);iqo=r(y2t,"LEDForSequenceClassification"),y2t.forEach(t),dqo=r(yke," (LED model)"),yke.forEach(t),cqo=i(j),Wb=n(j,"LI",{});var xke=s(Wb);Che=n(xke,"STRONG",{});var x2t=s(Che);fqo=r(x2t,"longformer"),x2t.forEach(t),mqo=r(xke," \u2014 "),nV=n(xke,"A",{href:!0});var $2t=s(nV);gqo=r($2t,"LongformerForSequenceClassification"),$2t.forEach(t),hqo=r(xke," (Longformer model)"),xke.forEach(t),pqo=i(j),Qb=n(j,"LI",{});var $ke=s(Qb);whe=n($ke,"STRONG",{});var k2t=s(whe);uqo=r(k2t,"mbart"),k2t.forEach(t),_qo=r($ke," \u2014 "),sV=n($ke,"A",{href:!0});var S2t=s(sV);bqo=r(S2t,"MBartForSequenceClassification"),S2t.forEach(t),vqo=r($ke," (mBART model)"),$ke.forEach(t),Fqo=i(j),Hb=n(j,"LI",{});var kke=s(Hb);Ahe=n(kke,"STRONG",{});var R2t=s(Ahe);Tqo=r(R2t,"megatron-bert"),R2t.forEach(t),Mqo=r(kke," \u2014 "),lV=n(kke,"A",{href:!0});var P2t=s(lV);Eqo=r(P2t,"MegatronBertForSequenceClassification"),P2t.forEach(t),Cqo=r(kke," (Megatron-BERT model)"),kke.forEach(t),wqo=i(j),Ub=n(j,"LI",{});var Ske=s(Ub);Lhe=n(Ske,"STRONG",{});var B2t=s(Lhe);Aqo=r(B2t,"mobilebert"),B2t.forEach(t),Lqo=r(Ske," \u2014 "),iV=n(Ske,"A",{href:!0});var I2t=s(iV);yqo=r(I2t,"MobileBertForSequenceClassification"),I2t.forEach(t),xqo=r(Ske," (MobileBERT model)"),Ske.forEach(t),$qo=i(j),Jb=n(j,"LI",{});var Rke=s(Jb);yhe=n(Rke,"STRONG",{});var N2t=s(yhe);kqo=r(N2t,"mpnet"),N2t.forEach(t),Sqo=r(Rke," \u2014 "),dV=n(Rke,"A",{href:!0});var q2t=s(dV);Rqo=r(q2t,"MPNetForSequenceClassification"),q2t.forEach(t),Pqo=r(Rke," (MPNet model)"),Rke.forEach(t),Bqo=i(j),Yb=n(j,"LI",{});var Pke=s(Yb);xhe=n(Pke,"STRONG",{});var j2t=s(xhe);Iqo=r(j2t,"nystromformer"),j2t.forEach(t),Nqo=r(Pke," \u2014 "),cV=n(Pke,"A",{href:!0});var D2t=s(cV);qqo=r(D2t,"NystromformerForSequenceClassification"),D2t.forEach(t),jqo=r(Pke," (Nystr\xF6mformer model)"),Pke.forEach(t),Dqo=i(j),Kb=n(j,"LI",{});var Bke=s(Kb);$he=n(Bke,"STRONG",{});var G2t=s($he);Gqo=r(G2t,"openai-gpt"),G2t.forEach(t),Oqo=r(Bke," \u2014 "),fV=n(Bke,"A",{href:!0});var O2t=s(fV);Vqo=r(O2t,"OpenAIGPTForSequenceClassification"),O2t.forEach(t),Xqo=r(Bke," (OpenAI GPT model)"),Bke.forEach(t),zqo=i(j),Zb=n(j,"LI",{});var Ike=s(Zb);khe=n(Ike,"STRONG",{});var V2t=s(khe);Wqo=r(V2t,"perceiver"),V2t.forEach(t),Qqo=r(Ike," \u2014 "),mV=n(Ike,"A",{href:!0});var X2t=s(mV);Hqo=r(X2t,"PerceiverForSequenceClassification"),X2t.forEach(t),Uqo=r(Ike," (Perceiver model)"),Ike.forEach(t),Jqo=i(j),ev=n(j,"LI",{});var Nke=s(ev);She=n(Nke,"STRONG",{});var z2t=s(She);Yqo=r(z2t,"plbart"),z2t.forEach(t),Kqo=r(Nke," \u2014 "),gV=n(Nke,"A",{href:!0});var W2t=s(gV);Zqo=r(W2t,"PLBartForSequenceClassification"),W2t.forEach(t),ejo=r(Nke," (PLBart model)"),Nke.forEach(t),ojo=i(j),ov=n(j,"LI",{});var qke=s(ov);Rhe=n(qke,"STRONG",{});var Q2t=s(Rhe);rjo=r(Q2t,"qdqbert"),Q2t.forEach(t),tjo=r(qke," \u2014 "),hV=n(qke,"A",{href:!0});var H2t=s(hV);ajo=r(H2t,"QDQBertForSequenceClassification"),H2t.forEach(t),njo=r(qke," (QDQBert model)"),qke.forEach(t),sjo=i(j),rv=n(j,"LI",{});var jke=s(rv);Phe=n(jke,"STRONG",{});var U2t=s(Phe);ljo=r(U2t,"reformer"),U2t.forEach(t),ijo=r(jke," \u2014 "),pV=n(jke,"A",{href:!0});var J2t=s(pV);djo=r(J2t,"ReformerForSequenceClassification"),J2t.forEach(t),cjo=r(jke," (Reformer model)"),jke.forEach(t),fjo=i(j),tv=n(j,"LI",{});var Dke=s(tv);Bhe=n(Dke,"STRONG",{});var Y2t=s(Bhe);mjo=r(Y2t,"rembert"),Y2t.forEach(t),gjo=r(Dke," \u2014 "),uV=n(Dke,"A",{href:!0});var K2t=s(uV);hjo=r(K2t,"RemBertForSequenceClassification"),K2t.forEach(t),pjo=r(Dke," (RemBERT model)"),Dke.forEach(t),ujo=i(j),av=n(j,"LI",{});var Gke=s(av);Ihe=n(Gke,"STRONG",{});var Z2t=s(Ihe);_jo=r(Z2t,"roberta"),Z2t.forEach(t),bjo=r(Gke," \u2014 "),_V=n(Gke,"A",{href:!0});var e1t=s(_V);vjo=r(e1t,"RobertaForSequenceClassification"),e1t.forEach(t),Fjo=r(Gke," (RoBERTa model)"),Gke.forEach(t),Tjo=i(j),nv=n(j,"LI",{});var Oke=s(nv);Nhe=n(Oke,"STRONG",{});var o1t=s(Nhe);Mjo=r(o1t,"roformer"),o1t.forEach(t),Ejo=r(Oke," \u2014 "),bV=n(Oke,"A",{href:!0});var r1t=s(bV);Cjo=r(r1t,"RoFormerForSequenceClassification"),r1t.forEach(t),wjo=r(Oke," (RoFormer model)"),Oke.forEach(t),Ajo=i(j),sv=n(j,"LI",{});var Vke=s(sv);qhe=n(Vke,"STRONG",{});var t1t=s(qhe);Ljo=r(t1t,"squeezebert"),t1t.forEach(t),yjo=r(Vke," \u2014 "),vV=n(Vke,"A",{href:!0});var a1t=s(vV);xjo=r(a1t,"SqueezeBertForSequenceClassification"),a1t.forEach(t),$jo=r(Vke," (SqueezeBERT model)"),Vke.forEach(t),kjo=i(j),lv=n(j,"LI",{});var Xke=s(lv);jhe=n(Xke,"STRONG",{});var n1t=s(jhe);Sjo=r(n1t,"tapas"),n1t.forEach(t),Rjo=r(Xke," \u2014 "),FV=n(Xke,"A",{href:!0});var s1t=s(FV);Pjo=r(s1t,"TapasForSequenceClassification"),s1t.forEach(t),Bjo=r(Xke," (TAPAS model)"),Xke.forEach(t),Ijo=i(j),iv=n(j,"LI",{});var zke=s(iv);Dhe=n(zke,"STRONG",{});var l1t=s(Dhe);Njo=r(l1t,"transfo-xl"),l1t.forEach(t),qjo=r(zke," \u2014 "),TV=n(zke,"A",{href:!0});var i1t=s(TV);jjo=r(i1t,"TransfoXLForSequenceClassification"),i1t.forEach(t),Djo=r(zke," (Transformer-XL model)"),zke.forEach(t),Gjo=i(j),dv=n(j,"LI",{});var Wke=s(dv);Ghe=n(Wke,"STRONG",{});var d1t=s(Ghe);Ojo=r(d1t,"xlm"),d1t.forEach(t),Vjo=r(Wke," \u2014 "),MV=n(Wke,"A",{href:!0});var c1t=s(MV);Xjo=r(c1t,"XLMForSequenceClassification"),c1t.forEach(t),zjo=r(Wke," (XLM model)"),Wke.forEach(t),Wjo=i(j),cv=n(j,"LI",{});var Qke=s(cv);Ohe=n(Qke,"STRONG",{});var f1t=s(Ohe);Qjo=r(f1t,"xlm-roberta"),f1t.forEach(t),Hjo=r(Qke," \u2014 "),EV=n(Qke,"A",{href:!0});var m1t=s(EV);Ujo=r(m1t,"XLMRobertaForSequenceClassification"),m1t.forEach(t),Jjo=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),Yjo=i(j),fv=n(j,"LI",{});var Hke=s(fv);Vhe=n(Hke,"STRONG",{});var g1t=s(Vhe);Kjo=r(g1t,"xlm-roberta-xl"),g1t.forEach(t),Zjo=r(Hke," \u2014 "),CV=n(Hke,"A",{href:!0});var h1t=s(CV);eDo=r(h1t,"XLMRobertaXLForSequenceClassification"),h1t.forEach(t),oDo=r(Hke," (XLM-RoBERTa-XL model)"),Hke.forEach(t),rDo=i(j),mv=n(j,"LI",{});var Uke=s(mv);Xhe=n(Uke,"STRONG",{});var p1t=s(Xhe);tDo=r(p1t,"xlnet"),p1t.forEach(t),aDo=r(Uke," \u2014 "),wV=n(Uke,"A",{href:!0});var u1t=s(wV);nDo=r(u1t,"XLNetForSequenceClassification"),u1t.forEach(t),sDo=r(Uke," (XLNet model)"),Uke.forEach(t),lDo=i(j),gv=n(j,"LI",{});var Jke=s(gv);zhe=n(Jke,"STRONG",{});var _1t=s(zhe);iDo=r(_1t,"yoso"),_1t.forEach(t),dDo=r(Jke," \u2014 "),AV=n(Jke,"A",{href:!0});var b1t=s(AV);cDo=r(b1t,"YosoForSequenceClassification"),b1t.forEach(t),fDo=r(Jke," (YOSO model)"),Jke.forEach(t),j.forEach(t),mDo=i(da),hv=n(da,"P",{});var Yke=s(hv);gDo=r(Yke,"The model is set in evaluation mode by default using "),Whe=n(Yke,"CODE",{});var v1t=s(Whe);hDo=r(v1t,"model.eval()"),v1t.forEach(t),pDo=r(Yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=n(Yke,"CODE",{});var F1t=s(Qhe);uDo=r(F1t,"model.train()"),F1t.forEach(t),Yke.forEach(t),_Do=i(da),T(pv.$$.fragment,da),da.forEach(t),el.forEach(t),BGe=i(f),Ki=n(f,"H2",{class:!0});var GVe=s(Ki);uv=n(GVe,"A",{id:!0,class:!0,href:!0});var T1t=s(uv);Hhe=n(T1t,"SPAN",{});var M1t=s(Hhe);T(CL.$$.fragment,M1t),M1t.forEach(t),T1t.forEach(t),bDo=i(GVe),Uhe=n(GVe,"SPAN",{});var E1t=s(Uhe);vDo=r(E1t,"AutoModelForMultipleChoice"),E1t.forEach(t),GVe.forEach(t),IGe=i(f),Bo=n(f,"DIV",{class:!0});var ol=s(Bo);T(wL.$$.fragment,ol),FDo=i(ol),Zi=n(ol,"P",{});var goe=s(Zi);TDo=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LV=n(goe,"A",{href:!0});var C1t=s(LV);MDo=r(C1t,"from_pretrained()"),C1t.forEach(t),EDo=r(goe," class method or the "),yV=n(goe,"A",{href:!0});var w1t=s(yV);CDo=r(w1t,"from_config()"),w1t.forEach(t),wDo=r(goe,` class
method.`),goe.forEach(t),ADo=i(ol),AL=n(ol,"P",{});var OVe=s(AL);LDo=r(OVe,"This class cannot be instantiated directly using "),Jhe=n(OVe,"CODE",{});var A1t=s(Jhe);yDo=r(A1t,"__init__()"),A1t.forEach(t),xDo=r(OVe," (throws an error)."),OVe.forEach(t),$Do=i(ol),ft=n(ol,"DIV",{class:!0});var I0=s(ft);T(LL.$$.fragment,I0),kDo=i(I0),Yhe=n(I0,"P",{});var L1t=s(Yhe);SDo=r(L1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),L1t.forEach(t),RDo=i(I0),ed=n(I0,"P",{});var hoe=s(ed);PDo=r(hoe,`Note:
Loading a model from its configuration file does `),Khe=n(hoe,"STRONG",{});var y1t=s(Khe);BDo=r(y1t,"not"),y1t.forEach(t),IDo=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(hoe,"A",{href:!0});var x1t=s(xV);NDo=r(x1t,"from_pretrained()"),x1t.forEach(t),qDo=r(hoe," to load the model weights."),hoe.forEach(t),jDo=i(I0),T(_v.$$.fragment,I0),I0.forEach(t),DDo=i(ol),ro=n(ol,"DIV",{class:!0});var ca=s(ro);T(yL.$$.fragment,ca),GDo=i(ca),Zhe=n(ca,"P",{});var $1t=s(Zhe);ODo=r($1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$1t.forEach(t),VDo=i(ca),qa=n(ca,"P",{});var N0=s(qa);XDo=r(N0,"The model class to instantiate is selected based on the "),epe=n(N0,"CODE",{});var k1t=s(epe);zDo=r(k1t,"model_type"),k1t.forEach(t),WDo=r(N0,` property of the config object (either
passed as an argument or loaded from `),ope=n(N0,"CODE",{});var S1t=s(ope);QDo=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),HDo=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=n(N0,"CODE",{});var R1t=s(rpe);UDo=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),JDo=r(N0,":"),N0.forEach(t),YDo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);bv=n(ee,"LI",{});var Kke=s(bv);tpe=n(Kke,"STRONG",{});var P1t=s(tpe);KDo=r(P1t,"albert"),P1t.forEach(t),ZDo=r(Kke," \u2014 "),$V=n(Kke,"A",{href:!0});var B1t=s($V);eGo=r(B1t,"AlbertForMultipleChoice"),B1t.forEach(t),oGo=r(Kke," (ALBERT model)"),Kke.forEach(t),rGo=i(ee),vv=n(ee,"LI",{});var Zke=s(vv);ape=n(Zke,"STRONG",{});var I1t=s(ape);tGo=r(I1t,"bert"),I1t.forEach(t),aGo=r(Zke," \u2014 "),kV=n(Zke,"A",{href:!0});var N1t=s(kV);nGo=r(N1t,"BertForMultipleChoice"),N1t.forEach(t),sGo=r(Zke," (BERT model)"),Zke.forEach(t),lGo=i(ee),Fv=n(ee,"LI",{});var eSe=s(Fv);npe=n(eSe,"STRONG",{});var q1t=s(npe);iGo=r(q1t,"big_bird"),q1t.forEach(t),dGo=r(eSe," \u2014 "),SV=n(eSe,"A",{href:!0});var j1t=s(SV);cGo=r(j1t,"BigBirdForMultipleChoice"),j1t.forEach(t),fGo=r(eSe," (BigBird model)"),eSe.forEach(t),mGo=i(ee),Tv=n(ee,"LI",{});var oSe=s(Tv);spe=n(oSe,"STRONG",{});var D1t=s(spe);gGo=r(D1t,"camembert"),D1t.forEach(t),hGo=r(oSe," \u2014 "),RV=n(oSe,"A",{href:!0});var G1t=s(RV);pGo=r(G1t,"CamembertForMultipleChoice"),G1t.forEach(t),uGo=r(oSe," (CamemBERT model)"),oSe.forEach(t),_Go=i(ee),Mv=n(ee,"LI",{});var rSe=s(Mv);lpe=n(rSe,"STRONG",{});var O1t=s(lpe);bGo=r(O1t,"canine"),O1t.forEach(t),vGo=r(rSe," \u2014 "),PV=n(rSe,"A",{href:!0});var V1t=s(PV);FGo=r(V1t,"CanineForMultipleChoice"),V1t.forEach(t),TGo=r(rSe," (CANINE model)"),rSe.forEach(t),MGo=i(ee),Ev=n(ee,"LI",{});var tSe=s(Ev);ipe=n(tSe,"STRONG",{});var X1t=s(ipe);EGo=r(X1t,"convbert"),X1t.forEach(t),CGo=r(tSe," \u2014 "),BV=n(tSe,"A",{href:!0});var z1t=s(BV);wGo=r(z1t,"ConvBertForMultipleChoice"),z1t.forEach(t),AGo=r(tSe," (ConvBERT model)"),tSe.forEach(t),LGo=i(ee),Cv=n(ee,"LI",{});var aSe=s(Cv);dpe=n(aSe,"STRONG",{});var W1t=s(dpe);yGo=r(W1t,"data2vec-text"),W1t.forEach(t),xGo=r(aSe," \u2014 "),IV=n(aSe,"A",{href:!0});var Q1t=s(IV);$Go=r(Q1t,"Data2VecTextForMultipleChoice"),Q1t.forEach(t),kGo=r(aSe," (Data2VecText model)"),aSe.forEach(t),SGo=i(ee),wv=n(ee,"LI",{});var nSe=s(wv);cpe=n(nSe,"STRONG",{});var H1t=s(cpe);RGo=r(H1t,"deberta-v2"),H1t.forEach(t),PGo=r(nSe," \u2014 "),NV=n(nSe,"A",{href:!0});var U1t=s(NV);BGo=r(U1t,"DebertaV2ForMultipleChoice"),U1t.forEach(t),IGo=r(nSe," (DeBERTa-v2 model)"),nSe.forEach(t),NGo=i(ee),Av=n(ee,"LI",{});var sSe=s(Av);fpe=n(sSe,"STRONG",{});var J1t=s(fpe);qGo=r(J1t,"distilbert"),J1t.forEach(t),jGo=r(sSe," \u2014 "),qV=n(sSe,"A",{href:!0});var Y1t=s(qV);DGo=r(Y1t,"DistilBertForMultipleChoice"),Y1t.forEach(t),GGo=r(sSe," (DistilBERT model)"),sSe.forEach(t),OGo=i(ee),Lv=n(ee,"LI",{});var lSe=s(Lv);mpe=n(lSe,"STRONG",{});var K1t=s(mpe);VGo=r(K1t,"electra"),K1t.forEach(t),XGo=r(lSe," \u2014 "),jV=n(lSe,"A",{href:!0});var Z1t=s(jV);zGo=r(Z1t,"ElectraForMultipleChoice"),Z1t.forEach(t),WGo=r(lSe," (ELECTRA model)"),lSe.forEach(t),QGo=i(ee),yv=n(ee,"LI",{});var iSe=s(yv);gpe=n(iSe,"STRONG",{});var ebt=s(gpe);HGo=r(ebt,"flaubert"),ebt.forEach(t),UGo=r(iSe," \u2014 "),DV=n(iSe,"A",{href:!0});var obt=s(DV);JGo=r(obt,"FlaubertForMultipleChoice"),obt.forEach(t),YGo=r(iSe," (FlauBERT model)"),iSe.forEach(t),KGo=i(ee),xv=n(ee,"LI",{});var dSe=s(xv);hpe=n(dSe,"STRONG",{});var rbt=s(hpe);ZGo=r(rbt,"fnet"),rbt.forEach(t),eOo=r(dSe," \u2014 "),GV=n(dSe,"A",{href:!0});var tbt=s(GV);oOo=r(tbt,"FNetForMultipleChoice"),tbt.forEach(t),rOo=r(dSe," (FNet model)"),dSe.forEach(t),tOo=i(ee),$v=n(ee,"LI",{});var cSe=s($v);ppe=n(cSe,"STRONG",{});var abt=s(ppe);aOo=r(abt,"funnel"),abt.forEach(t),nOo=r(cSe," \u2014 "),OV=n(cSe,"A",{href:!0});var nbt=s(OV);sOo=r(nbt,"FunnelForMultipleChoice"),nbt.forEach(t),lOo=r(cSe," (Funnel Transformer model)"),cSe.forEach(t),iOo=i(ee),kv=n(ee,"LI",{});var fSe=s(kv);upe=n(fSe,"STRONG",{});var sbt=s(upe);dOo=r(sbt,"ibert"),sbt.forEach(t),cOo=r(fSe," \u2014 "),VV=n(fSe,"A",{href:!0});var lbt=s(VV);fOo=r(lbt,"IBertForMultipleChoice"),lbt.forEach(t),mOo=r(fSe," (I-BERT model)"),fSe.forEach(t),gOo=i(ee),Sv=n(ee,"LI",{});var mSe=s(Sv);_pe=n(mSe,"STRONG",{});var ibt=s(_pe);hOo=r(ibt,"longformer"),ibt.forEach(t),pOo=r(mSe," \u2014 "),XV=n(mSe,"A",{href:!0});var dbt=s(XV);uOo=r(dbt,"LongformerForMultipleChoice"),dbt.forEach(t),_Oo=r(mSe," (Longformer model)"),mSe.forEach(t),bOo=i(ee),Rv=n(ee,"LI",{});var gSe=s(Rv);bpe=n(gSe,"STRONG",{});var cbt=s(bpe);vOo=r(cbt,"megatron-bert"),cbt.forEach(t),FOo=r(gSe," \u2014 "),zV=n(gSe,"A",{href:!0});var fbt=s(zV);TOo=r(fbt,"MegatronBertForMultipleChoice"),fbt.forEach(t),MOo=r(gSe," (Megatron-BERT model)"),gSe.forEach(t),EOo=i(ee),Pv=n(ee,"LI",{});var hSe=s(Pv);vpe=n(hSe,"STRONG",{});var mbt=s(vpe);COo=r(mbt,"mobilebert"),mbt.forEach(t),wOo=r(hSe," \u2014 "),WV=n(hSe,"A",{href:!0});var gbt=s(WV);AOo=r(gbt,"MobileBertForMultipleChoice"),gbt.forEach(t),LOo=r(hSe," (MobileBERT model)"),hSe.forEach(t),yOo=i(ee),Bv=n(ee,"LI",{});var pSe=s(Bv);Fpe=n(pSe,"STRONG",{});var hbt=s(Fpe);xOo=r(hbt,"mpnet"),hbt.forEach(t),$Oo=r(pSe," \u2014 "),QV=n(pSe,"A",{href:!0});var pbt=s(QV);kOo=r(pbt,"MPNetForMultipleChoice"),pbt.forEach(t),SOo=r(pSe," (MPNet model)"),pSe.forEach(t),ROo=i(ee),Iv=n(ee,"LI",{});var uSe=s(Iv);Tpe=n(uSe,"STRONG",{});var ubt=s(Tpe);POo=r(ubt,"nystromformer"),ubt.forEach(t),BOo=r(uSe," \u2014 "),HV=n(uSe,"A",{href:!0});var _bt=s(HV);IOo=r(_bt,"NystromformerForMultipleChoice"),_bt.forEach(t),NOo=r(uSe," (Nystr\xF6mformer model)"),uSe.forEach(t),qOo=i(ee),Nv=n(ee,"LI",{});var _Se=s(Nv);Mpe=n(_Se,"STRONG",{});var bbt=s(Mpe);jOo=r(bbt,"qdqbert"),bbt.forEach(t),DOo=r(_Se," \u2014 "),UV=n(_Se,"A",{href:!0});var vbt=s(UV);GOo=r(vbt,"QDQBertForMultipleChoice"),vbt.forEach(t),OOo=r(_Se," (QDQBert model)"),_Se.forEach(t),VOo=i(ee),qv=n(ee,"LI",{});var bSe=s(qv);Epe=n(bSe,"STRONG",{});var Fbt=s(Epe);XOo=r(Fbt,"rembert"),Fbt.forEach(t),zOo=r(bSe," \u2014 "),JV=n(bSe,"A",{href:!0});var Tbt=s(JV);WOo=r(Tbt,"RemBertForMultipleChoice"),Tbt.forEach(t),QOo=r(bSe," (RemBERT model)"),bSe.forEach(t),HOo=i(ee),jv=n(ee,"LI",{});var vSe=s(jv);Cpe=n(vSe,"STRONG",{});var Mbt=s(Cpe);UOo=r(Mbt,"roberta"),Mbt.forEach(t),JOo=r(vSe," \u2014 "),YV=n(vSe,"A",{href:!0});var Ebt=s(YV);YOo=r(Ebt,"RobertaForMultipleChoice"),Ebt.forEach(t),KOo=r(vSe," (RoBERTa model)"),vSe.forEach(t),ZOo=i(ee),Dv=n(ee,"LI",{});var FSe=s(Dv);wpe=n(FSe,"STRONG",{});var Cbt=s(wpe);eVo=r(Cbt,"roformer"),Cbt.forEach(t),oVo=r(FSe," \u2014 "),KV=n(FSe,"A",{href:!0});var wbt=s(KV);rVo=r(wbt,"RoFormerForMultipleChoice"),wbt.forEach(t),tVo=r(FSe," (RoFormer model)"),FSe.forEach(t),aVo=i(ee),Gv=n(ee,"LI",{});var TSe=s(Gv);Ape=n(TSe,"STRONG",{});var Abt=s(Ape);nVo=r(Abt,"squeezebert"),Abt.forEach(t),sVo=r(TSe," \u2014 "),ZV=n(TSe,"A",{href:!0});var Lbt=s(ZV);lVo=r(Lbt,"SqueezeBertForMultipleChoice"),Lbt.forEach(t),iVo=r(TSe," (SqueezeBERT model)"),TSe.forEach(t),dVo=i(ee),Ov=n(ee,"LI",{});var MSe=s(Ov);Lpe=n(MSe,"STRONG",{});var ybt=s(Lpe);cVo=r(ybt,"xlm"),ybt.forEach(t),fVo=r(MSe," \u2014 "),eX=n(MSe,"A",{href:!0});var xbt=s(eX);mVo=r(xbt,"XLMForMultipleChoice"),xbt.forEach(t),gVo=r(MSe," (XLM model)"),MSe.forEach(t),hVo=i(ee),Vv=n(ee,"LI",{});var ESe=s(Vv);ype=n(ESe,"STRONG",{});var $bt=s(ype);pVo=r($bt,"xlm-roberta"),$bt.forEach(t),uVo=r(ESe," \u2014 "),oX=n(ESe,"A",{href:!0});var kbt=s(oX);_Vo=r(kbt,"XLMRobertaForMultipleChoice"),kbt.forEach(t),bVo=r(ESe," (XLM-RoBERTa model)"),ESe.forEach(t),vVo=i(ee),Xv=n(ee,"LI",{});var CSe=s(Xv);xpe=n(CSe,"STRONG",{});var Sbt=s(xpe);FVo=r(Sbt,"xlm-roberta-xl"),Sbt.forEach(t),TVo=r(CSe," \u2014 "),rX=n(CSe,"A",{href:!0});var Rbt=s(rX);MVo=r(Rbt,"XLMRobertaXLForMultipleChoice"),Rbt.forEach(t),EVo=r(CSe," (XLM-RoBERTa-XL model)"),CSe.forEach(t),CVo=i(ee),zv=n(ee,"LI",{});var wSe=s(zv);$pe=n(wSe,"STRONG",{});var Pbt=s($pe);wVo=r(Pbt,"xlnet"),Pbt.forEach(t),AVo=r(wSe," \u2014 "),tX=n(wSe,"A",{href:!0});var Bbt=s(tX);LVo=r(Bbt,"XLNetForMultipleChoice"),Bbt.forEach(t),yVo=r(wSe," (XLNet model)"),wSe.forEach(t),xVo=i(ee),Wv=n(ee,"LI",{});var ASe=s(Wv);kpe=n(ASe,"STRONG",{});var Ibt=s(kpe);$Vo=r(Ibt,"yoso"),Ibt.forEach(t),kVo=r(ASe," \u2014 "),aX=n(ASe,"A",{href:!0});var Nbt=s(aX);SVo=r(Nbt,"YosoForMultipleChoice"),Nbt.forEach(t),RVo=r(ASe," (YOSO model)"),ASe.forEach(t),ee.forEach(t),PVo=i(ca),Qv=n(ca,"P",{});var LSe=s(Qv);BVo=r(LSe,"The model is set in evaluation mode by default using "),Spe=n(LSe,"CODE",{});var qbt=s(Spe);IVo=r(qbt,"model.eval()"),qbt.forEach(t),NVo=r(LSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=n(LSe,"CODE",{});var jbt=s(Rpe);qVo=r(jbt,"model.train()"),jbt.forEach(t),LSe.forEach(t),jVo=i(ca),T(Hv.$$.fragment,ca),ca.forEach(t),ol.forEach(t),NGe=i(f),od=n(f,"H2",{class:!0});var VVe=s(od);Uv=n(VVe,"A",{id:!0,class:!0,href:!0});var Dbt=s(Uv);Ppe=n(Dbt,"SPAN",{});var Gbt=s(Ppe);T(xL.$$.fragment,Gbt),Gbt.forEach(t),Dbt.forEach(t),DVo=i(VVe),Bpe=n(VVe,"SPAN",{});var Obt=s(Bpe);GVo=r(Obt,"AutoModelForNextSentencePrediction"),Obt.forEach(t),VVe.forEach(t),qGe=i(f),Io=n(f,"DIV",{class:!0});var rl=s(Io);T($L.$$.fragment,rl),OVo=i(rl),rd=n(rl,"P",{});var poe=s(rd);VVo=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nX=n(poe,"A",{href:!0});var Vbt=s(nX);XVo=r(Vbt,"from_pretrained()"),Vbt.forEach(t),zVo=r(poe," class method or the "),sX=n(poe,"A",{href:!0});var Xbt=s(sX);WVo=r(Xbt,"from_config()"),Xbt.forEach(t),QVo=r(poe,` class
method.`),poe.forEach(t),HVo=i(rl),kL=n(rl,"P",{});var XVe=s(kL);UVo=r(XVe,"This class cannot be instantiated directly using "),Ipe=n(XVe,"CODE",{});var zbt=s(Ipe);JVo=r(zbt,"__init__()"),zbt.forEach(t),YVo=r(XVe," (throws an error)."),XVe.forEach(t),KVo=i(rl),mt=n(rl,"DIV",{class:!0});var q0=s(mt);T(SL.$$.fragment,q0),ZVo=i(q0),Npe=n(q0,"P",{});var Wbt=s(Npe);eXo=r(Wbt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Wbt.forEach(t),oXo=i(q0),td=n(q0,"P",{});var uoe=s(td);rXo=r(uoe,`Note:
Loading a model from its configuration file does `),qpe=n(uoe,"STRONG",{});var Qbt=s(qpe);tXo=r(Qbt,"not"),Qbt.forEach(t),aXo=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(uoe,"A",{href:!0});var Hbt=s(lX);nXo=r(Hbt,"from_pretrained()"),Hbt.forEach(t),sXo=r(uoe," to load the model weights."),uoe.forEach(t),lXo=i(q0),T(Jv.$$.fragment,q0),q0.forEach(t),iXo=i(rl),to=n(rl,"DIV",{class:!0});var fa=s(to);T(RL.$$.fragment,fa),dXo=i(fa),jpe=n(fa,"P",{});var Ubt=s(jpe);cXo=r(Ubt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ubt.forEach(t),fXo=i(fa),ja=n(fa,"P",{});var j0=s(ja);mXo=r(j0,"The model class to instantiate is selected based on the "),Dpe=n(j0,"CODE",{});var Jbt=s(Dpe);gXo=r(Jbt,"model_type"),Jbt.forEach(t),hXo=r(j0,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(j0,"CODE",{});var Ybt=s(Gpe);pXo=r(Ybt,"pretrained_model_name_or_path"),Ybt.forEach(t),uXo=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(j0,"CODE",{});var Kbt=s(Ope);_Xo=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),bXo=r(j0,":"),j0.forEach(t),vXo=i(fa),Zr=n(fa,"UL",{});var tl=s(Zr);Yv=n(tl,"LI",{});var ySe=s(Yv);Vpe=n(ySe,"STRONG",{});var Zbt=s(Vpe);FXo=r(Zbt,"bert"),Zbt.forEach(t),TXo=r(ySe," \u2014 "),iX=n(ySe,"A",{href:!0});var evt=s(iX);MXo=r(evt,"BertForNextSentencePrediction"),evt.forEach(t),EXo=r(ySe," (BERT model)"),ySe.forEach(t),CXo=i(tl),Kv=n(tl,"LI",{});var xSe=s(Kv);Xpe=n(xSe,"STRONG",{});var ovt=s(Xpe);wXo=r(ovt,"fnet"),ovt.forEach(t),AXo=r(xSe," \u2014 "),dX=n(xSe,"A",{href:!0});var rvt=s(dX);LXo=r(rvt,"FNetForNextSentencePrediction"),rvt.forEach(t),yXo=r(xSe," (FNet model)"),xSe.forEach(t),xXo=i(tl),Zv=n(tl,"LI",{});var $Se=s(Zv);zpe=n($Se,"STRONG",{});var tvt=s(zpe);$Xo=r(tvt,"megatron-bert"),tvt.forEach(t),kXo=r($Se," \u2014 "),cX=n($Se,"A",{href:!0});var avt=s(cX);SXo=r(avt,"MegatronBertForNextSentencePrediction"),avt.forEach(t),RXo=r($Se," (Megatron-BERT model)"),$Se.forEach(t),PXo=i(tl),eF=n(tl,"LI",{});var kSe=s(eF);Wpe=n(kSe,"STRONG",{});var nvt=s(Wpe);BXo=r(nvt,"mobilebert"),nvt.forEach(t),IXo=r(kSe," \u2014 "),fX=n(kSe,"A",{href:!0});var svt=s(fX);NXo=r(svt,"MobileBertForNextSentencePrediction"),svt.forEach(t),qXo=r(kSe," (MobileBERT model)"),kSe.forEach(t),jXo=i(tl),oF=n(tl,"LI",{});var SSe=s(oF);Qpe=n(SSe,"STRONG",{});var lvt=s(Qpe);DXo=r(lvt,"qdqbert"),lvt.forEach(t),GXo=r(SSe," \u2014 "),mX=n(SSe,"A",{href:!0});var ivt=s(mX);OXo=r(ivt,"QDQBertForNextSentencePrediction"),ivt.forEach(t),VXo=r(SSe," (QDQBert model)"),SSe.forEach(t),tl.forEach(t),XXo=i(fa),rF=n(fa,"P",{});var RSe=s(rF);zXo=r(RSe,"The model is set in evaluation mode by default using "),Hpe=n(RSe,"CODE",{});var dvt=s(Hpe);WXo=r(dvt,"model.eval()"),dvt.forEach(t),QXo=r(RSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=n(RSe,"CODE",{});var cvt=s(Upe);HXo=r(cvt,"model.train()"),cvt.forEach(t),RSe.forEach(t),UXo=i(fa),T(tF.$$.fragment,fa),fa.forEach(t),rl.forEach(t),jGe=i(f),ad=n(f,"H2",{class:!0});var zVe=s(ad);aF=n(zVe,"A",{id:!0,class:!0,href:!0});var fvt=s(aF);Jpe=n(fvt,"SPAN",{});var mvt=s(Jpe);T(PL.$$.fragment,mvt),mvt.forEach(t),fvt.forEach(t),JXo=i(zVe),Ype=n(zVe,"SPAN",{});var gvt=s(Ype);YXo=r(gvt,"AutoModelForTokenClassification"),gvt.forEach(t),zVe.forEach(t),DGe=i(f),No=n(f,"DIV",{class:!0});var al=s(No);T(BL.$$.fragment,al),KXo=i(al),nd=n(al,"P",{});var _oe=s(nd);ZXo=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gX=n(_oe,"A",{href:!0});var hvt=s(gX);ezo=r(hvt,"from_pretrained()"),hvt.forEach(t),ozo=r(_oe," class method or the "),hX=n(_oe,"A",{href:!0});var pvt=s(hX);rzo=r(pvt,"from_config()"),pvt.forEach(t),tzo=r(_oe,` class
method.`),_oe.forEach(t),azo=i(al),IL=n(al,"P",{});var WVe=s(IL);nzo=r(WVe,"This class cannot be instantiated directly using "),Kpe=n(WVe,"CODE",{});var uvt=s(Kpe);szo=r(uvt,"__init__()"),uvt.forEach(t),lzo=r(WVe," (throws an error)."),WVe.forEach(t),izo=i(al),gt=n(al,"DIV",{class:!0});var D0=s(gt);T(NL.$$.fragment,D0),dzo=i(D0),Zpe=n(D0,"P",{});var _vt=s(Zpe);czo=r(_vt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_vt.forEach(t),fzo=i(D0),sd=n(D0,"P",{});var boe=s(sd);mzo=r(boe,`Note:
Loading a model from its configuration file does `),eue=n(boe,"STRONG",{});var bvt=s(eue);gzo=r(bvt,"not"),bvt.forEach(t),hzo=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(boe,"A",{href:!0});var vvt=s(pX);pzo=r(vvt,"from_pretrained()"),vvt.forEach(t),uzo=r(boe," to load the model weights."),boe.forEach(t),_zo=i(D0),T(nF.$$.fragment,D0),D0.forEach(t),bzo=i(al),ao=n(al,"DIV",{class:!0});var ma=s(ao);T(qL.$$.fragment,ma),vzo=i(ma),oue=n(ma,"P",{});var Fvt=s(oue);Fzo=r(Fvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Fvt.forEach(t),Tzo=i(ma),Da=n(ma,"P",{});var G0=s(Da);Mzo=r(G0,"The model class to instantiate is selected based on the "),rue=n(G0,"CODE",{});var Tvt=s(rue);Ezo=r(Tvt,"model_type"),Tvt.forEach(t),Czo=r(G0,` property of the config object (either
passed as an argument or loaded from `),tue=n(G0,"CODE",{});var Mvt=s(tue);wzo=r(Mvt,"pretrained_model_name_or_path"),Mvt.forEach(t),Azo=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=n(G0,"CODE",{});var Evt=s(aue);Lzo=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),yzo=r(G0,":"),G0.forEach(t),xzo=i(ma),H=n(ma,"UL",{});var J=s(H);sF=n(J,"LI",{});var PSe=s(sF);nue=n(PSe,"STRONG",{});var Cvt=s(nue);$zo=r(Cvt,"albert"),Cvt.forEach(t),kzo=r(PSe," \u2014 "),uX=n(PSe,"A",{href:!0});var wvt=s(uX);Szo=r(wvt,"AlbertForTokenClassification"),wvt.forEach(t),Rzo=r(PSe," (ALBERT model)"),PSe.forEach(t),Pzo=i(J),lF=n(J,"LI",{});var BSe=s(lF);sue=n(BSe,"STRONG",{});var Avt=s(sue);Bzo=r(Avt,"bert"),Avt.forEach(t),Izo=r(BSe," \u2014 "),_X=n(BSe,"A",{href:!0});var Lvt=s(_X);Nzo=r(Lvt,"BertForTokenClassification"),Lvt.forEach(t),qzo=r(BSe," (BERT model)"),BSe.forEach(t),jzo=i(J),iF=n(J,"LI",{});var ISe=s(iF);lue=n(ISe,"STRONG",{});var yvt=s(lue);Dzo=r(yvt,"big_bird"),yvt.forEach(t),Gzo=r(ISe," \u2014 "),bX=n(ISe,"A",{href:!0});var xvt=s(bX);Ozo=r(xvt,"BigBirdForTokenClassification"),xvt.forEach(t),Vzo=r(ISe," (BigBird model)"),ISe.forEach(t),Xzo=i(J),dF=n(J,"LI",{});var NSe=s(dF);iue=n(NSe,"STRONG",{});var $vt=s(iue);zzo=r($vt,"bloom"),$vt.forEach(t),Wzo=r(NSe," \u2014 "),vX=n(NSe,"A",{href:!0});var kvt=s(vX);Qzo=r(kvt,"BloomForTokenClassification"),kvt.forEach(t),Hzo=r(NSe," (BLOOM model)"),NSe.forEach(t),Uzo=i(J),cF=n(J,"LI",{});var qSe=s(cF);due=n(qSe,"STRONG",{});var Svt=s(due);Jzo=r(Svt,"camembert"),Svt.forEach(t),Yzo=r(qSe," \u2014 "),FX=n(qSe,"A",{href:!0});var Rvt=s(FX);Kzo=r(Rvt,"CamembertForTokenClassification"),Rvt.forEach(t),Zzo=r(qSe," (CamemBERT model)"),qSe.forEach(t),eWo=i(J),fF=n(J,"LI",{});var jSe=s(fF);cue=n(jSe,"STRONG",{});var Pvt=s(cue);oWo=r(Pvt,"canine"),Pvt.forEach(t),rWo=r(jSe," \u2014 "),TX=n(jSe,"A",{href:!0});var Bvt=s(TX);tWo=r(Bvt,"CanineForTokenClassification"),Bvt.forEach(t),aWo=r(jSe," (CANINE model)"),jSe.forEach(t),nWo=i(J),mF=n(J,"LI",{});var DSe=s(mF);fue=n(DSe,"STRONG",{});var Ivt=s(fue);sWo=r(Ivt,"convbert"),Ivt.forEach(t),lWo=r(DSe," \u2014 "),MX=n(DSe,"A",{href:!0});var Nvt=s(MX);iWo=r(Nvt,"ConvBertForTokenClassification"),Nvt.forEach(t),dWo=r(DSe," (ConvBERT model)"),DSe.forEach(t),cWo=i(J),gF=n(J,"LI",{});var GSe=s(gF);mue=n(GSe,"STRONG",{});var qvt=s(mue);fWo=r(qvt,"data2vec-text"),qvt.forEach(t),mWo=r(GSe," \u2014 "),EX=n(GSe,"A",{href:!0});var jvt=s(EX);gWo=r(jvt,"Data2VecTextForTokenClassification"),jvt.forEach(t),hWo=r(GSe," (Data2VecText model)"),GSe.forEach(t),pWo=i(J),hF=n(J,"LI",{});var OSe=s(hF);gue=n(OSe,"STRONG",{});var Dvt=s(gue);uWo=r(Dvt,"deberta"),Dvt.forEach(t),_Wo=r(OSe," \u2014 "),CX=n(OSe,"A",{href:!0});var Gvt=s(CX);bWo=r(Gvt,"DebertaForTokenClassification"),Gvt.forEach(t),vWo=r(OSe," (DeBERTa model)"),OSe.forEach(t),FWo=i(J),pF=n(J,"LI",{});var VSe=s(pF);hue=n(VSe,"STRONG",{});var Ovt=s(hue);TWo=r(Ovt,"deberta-v2"),Ovt.forEach(t),MWo=r(VSe," \u2014 "),wX=n(VSe,"A",{href:!0});var Vvt=s(wX);EWo=r(Vvt,"DebertaV2ForTokenClassification"),Vvt.forEach(t),CWo=r(VSe," (DeBERTa-v2 model)"),VSe.forEach(t),wWo=i(J),uF=n(J,"LI",{});var XSe=s(uF);pue=n(XSe,"STRONG",{});var Xvt=s(pue);AWo=r(Xvt,"distilbert"),Xvt.forEach(t),LWo=r(XSe," \u2014 "),AX=n(XSe,"A",{href:!0});var zvt=s(AX);yWo=r(zvt,"DistilBertForTokenClassification"),zvt.forEach(t),xWo=r(XSe," (DistilBERT model)"),XSe.forEach(t),$Wo=i(J),_F=n(J,"LI",{});var zSe=s(_F);uue=n(zSe,"STRONG",{});var Wvt=s(uue);kWo=r(Wvt,"electra"),Wvt.forEach(t),SWo=r(zSe," \u2014 "),LX=n(zSe,"A",{href:!0});var Qvt=s(LX);RWo=r(Qvt,"ElectraForTokenClassification"),Qvt.forEach(t),PWo=r(zSe," (ELECTRA model)"),zSe.forEach(t),BWo=i(J),bF=n(J,"LI",{});var WSe=s(bF);_ue=n(WSe,"STRONG",{});var Hvt=s(_ue);IWo=r(Hvt,"flaubert"),Hvt.forEach(t),NWo=r(WSe," \u2014 "),yX=n(WSe,"A",{href:!0});var Uvt=s(yX);qWo=r(Uvt,"FlaubertForTokenClassification"),Uvt.forEach(t),jWo=r(WSe," (FlauBERT model)"),WSe.forEach(t),DWo=i(J),vF=n(J,"LI",{});var QSe=s(vF);bue=n(QSe,"STRONG",{});var Jvt=s(bue);GWo=r(Jvt,"fnet"),Jvt.forEach(t),OWo=r(QSe," \u2014 "),xX=n(QSe,"A",{href:!0});var Yvt=s(xX);VWo=r(Yvt,"FNetForTokenClassification"),Yvt.forEach(t),XWo=r(QSe," (FNet model)"),QSe.forEach(t),zWo=i(J),FF=n(J,"LI",{});var HSe=s(FF);vue=n(HSe,"STRONG",{});var Kvt=s(vue);WWo=r(Kvt,"funnel"),Kvt.forEach(t),QWo=r(HSe," \u2014 "),$X=n(HSe,"A",{href:!0});var Zvt=s($X);HWo=r(Zvt,"FunnelForTokenClassification"),Zvt.forEach(t),UWo=r(HSe," (Funnel Transformer model)"),HSe.forEach(t),JWo=i(J),TF=n(J,"LI",{});var USe=s(TF);Fue=n(USe,"STRONG",{});var eFt=s(Fue);YWo=r(eFt,"gpt2"),eFt.forEach(t),KWo=r(USe," \u2014 "),kX=n(USe,"A",{href:!0});var oFt=s(kX);ZWo=r(oFt,"GPT2ForTokenClassification"),oFt.forEach(t),eQo=r(USe," (OpenAI GPT-2 model)"),USe.forEach(t),oQo=i(J),MF=n(J,"LI",{});var JSe=s(MF);Tue=n(JSe,"STRONG",{});var rFt=s(Tue);rQo=r(rFt,"ibert"),rFt.forEach(t),tQo=r(JSe," \u2014 "),SX=n(JSe,"A",{href:!0});var tFt=s(SX);aQo=r(tFt,"IBertForTokenClassification"),tFt.forEach(t),nQo=r(JSe," (I-BERT model)"),JSe.forEach(t),sQo=i(J),EF=n(J,"LI",{});var YSe=s(EF);Mue=n(YSe,"STRONG",{});var aFt=s(Mue);lQo=r(aFt,"layoutlm"),aFt.forEach(t),iQo=r(YSe," \u2014 "),RX=n(YSe,"A",{href:!0});var nFt=s(RX);dQo=r(nFt,"LayoutLMForTokenClassification"),nFt.forEach(t),cQo=r(YSe," (LayoutLM model)"),YSe.forEach(t),fQo=i(J),CF=n(J,"LI",{});var KSe=s(CF);Eue=n(KSe,"STRONG",{});var sFt=s(Eue);mQo=r(sFt,"layoutlmv2"),sFt.forEach(t),gQo=r(KSe," \u2014 "),PX=n(KSe,"A",{href:!0});var lFt=s(PX);hQo=r(lFt,"LayoutLMv2ForTokenClassification"),lFt.forEach(t),pQo=r(KSe," (LayoutLMv2 model)"),KSe.forEach(t),uQo=i(J),wF=n(J,"LI",{});var ZSe=s(wF);Cue=n(ZSe,"STRONG",{});var iFt=s(Cue);_Qo=r(iFt,"layoutlmv3"),iFt.forEach(t),bQo=r(ZSe," \u2014 "),BX=n(ZSe,"A",{href:!0});var dFt=s(BX);vQo=r(dFt,"LayoutLMv3ForTokenClassification"),dFt.forEach(t),FQo=r(ZSe," (LayoutLMv3 model)"),ZSe.forEach(t),TQo=i(J),AF=n(J,"LI",{});var eRe=s(AF);wue=n(eRe,"STRONG",{});var cFt=s(wue);MQo=r(cFt,"longformer"),cFt.forEach(t),EQo=r(eRe," \u2014 "),IX=n(eRe,"A",{href:!0});var fFt=s(IX);CQo=r(fFt,"LongformerForTokenClassification"),fFt.forEach(t),wQo=r(eRe," (Longformer model)"),eRe.forEach(t),AQo=i(J),LF=n(J,"LI",{});var oRe=s(LF);Aue=n(oRe,"STRONG",{});var mFt=s(Aue);LQo=r(mFt,"megatron-bert"),mFt.forEach(t),yQo=r(oRe," \u2014 "),NX=n(oRe,"A",{href:!0});var gFt=s(NX);xQo=r(gFt,"MegatronBertForTokenClassification"),gFt.forEach(t),$Qo=r(oRe," (Megatron-BERT model)"),oRe.forEach(t),kQo=i(J),yF=n(J,"LI",{});var rRe=s(yF);Lue=n(rRe,"STRONG",{});var hFt=s(Lue);SQo=r(hFt,"mobilebert"),hFt.forEach(t),RQo=r(rRe," \u2014 "),qX=n(rRe,"A",{href:!0});var pFt=s(qX);PQo=r(pFt,"MobileBertForTokenClassification"),pFt.forEach(t),BQo=r(rRe," (MobileBERT model)"),rRe.forEach(t),IQo=i(J),xF=n(J,"LI",{});var tRe=s(xF);yue=n(tRe,"STRONG",{});var uFt=s(yue);NQo=r(uFt,"mpnet"),uFt.forEach(t),qQo=r(tRe," \u2014 "),jX=n(tRe,"A",{href:!0});var _Ft=s(jX);jQo=r(_Ft,"MPNetForTokenClassification"),_Ft.forEach(t),DQo=r(tRe," (MPNet model)"),tRe.forEach(t),GQo=i(J),$F=n(J,"LI",{});var aRe=s($F);xue=n(aRe,"STRONG",{});var bFt=s(xue);OQo=r(bFt,"nystromformer"),bFt.forEach(t),VQo=r(aRe," \u2014 "),DX=n(aRe,"A",{href:!0});var vFt=s(DX);XQo=r(vFt,"NystromformerForTokenClassification"),vFt.forEach(t),zQo=r(aRe," (Nystr\xF6mformer model)"),aRe.forEach(t),WQo=i(J),kF=n(J,"LI",{});var nRe=s(kF);$ue=n(nRe,"STRONG",{});var FFt=s($ue);QQo=r(FFt,"qdqbert"),FFt.forEach(t),HQo=r(nRe," \u2014 "),GX=n(nRe,"A",{href:!0});var TFt=s(GX);UQo=r(TFt,"QDQBertForTokenClassification"),TFt.forEach(t),JQo=r(nRe," (QDQBert model)"),nRe.forEach(t),YQo=i(J),SF=n(J,"LI",{});var sRe=s(SF);kue=n(sRe,"STRONG",{});var MFt=s(kue);KQo=r(MFt,"rembert"),MFt.forEach(t),ZQo=r(sRe," \u2014 "),OX=n(sRe,"A",{href:!0});var EFt=s(OX);eHo=r(EFt,"RemBertForTokenClassification"),EFt.forEach(t),oHo=r(sRe," (RemBERT model)"),sRe.forEach(t),rHo=i(J),RF=n(J,"LI",{});var lRe=s(RF);Sue=n(lRe,"STRONG",{});var CFt=s(Sue);tHo=r(CFt,"roberta"),CFt.forEach(t),aHo=r(lRe," \u2014 "),VX=n(lRe,"A",{href:!0});var wFt=s(VX);nHo=r(wFt,"RobertaForTokenClassification"),wFt.forEach(t),sHo=r(lRe," (RoBERTa model)"),lRe.forEach(t),lHo=i(J),PF=n(J,"LI",{});var iRe=s(PF);Rue=n(iRe,"STRONG",{});var AFt=s(Rue);iHo=r(AFt,"roformer"),AFt.forEach(t),dHo=r(iRe," \u2014 "),XX=n(iRe,"A",{href:!0});var LFt=s(XX);cHo=r(LFt,"RoFormerForTokenClassification"),LFt.forEach(t),fHo=r(iRe," (RoFormer model)"),iRe.forEach(t),mHo=i(J),BF=n(J,"LI",{});var dRe=s(BF);Pue=n(dRe,"STRONG",{});var yFt=s(Pue);gHo=r(yFt,"squeezebert"),yFt.forEach(t),hHo=r(dRe," \u2014 "),zX=n(dRe,"A",{href:!0});var xFt=s(zX);pHo=r(xFt,"SqueezeBertForTokenClassification"),xFt.forEach(t),uHo=r(dRe," (SqueezeBERT model)"),dRe.forEach(t),_Ho=i(J),IF=n(J,"LI",{});var cRe=s(IF);Bue=n(cRe,"STRONG",{});var $Ft=s(Bue);bHo=r($Ft,"xlm"),$Ft.forEach(t),vHo=r(cRe," \u2014 "),WX=n(cRe,"A",{href:!0});var kFt=s(WX);FHo=r(kFt,"XLMForTokenClassification"),kFt.forEach(t),THo=r(cRe," (XLM model)"),cRe.forEach(t),MHo=i(J),NF=n(J,"LI",{});var fRe=s(NF);Iue=n(fRe,"STRONG",{});var SFt=s(Iue);EHo=r(SFt,"xlm-roberta"),SFt.forEach(t),CHo=r(fRe," \u2014 "),QX=n(fRe,"A",{href:!0});var RFt=s(QX);wHo=r(RFt,"XLMRobertaForTokenClassification"),RFt.forEach(t),AHo=r(fRe," (XLM-RoBERTa model)"),fRe.forEach(t),LHo=i(J),qF=n(J,"LI",{});var mRe=s(qF);Nue=n(mRe,"STRONG",{});var PFt=s(Nue);yHo=r(PFt,"xlm-roberta-xl"),PFt.forEach(t),xHo=r(mRe," \u2014 "),HX=n(mRe,"A",{href:!0});var BFt=s(HX);$Ho=r(BFt,"XLMRobertaXLForTokenClassification"),BFt.forEach(t),kHo=r(mRe," (XLM-RoBERTa-XL model)"),mRe.forEach(t),SHo=i(J),jF=n(J,"LI",{});var gRe=s(jF);que=n(gRe,"STRONG",{});var IFt=s(que);RHo=r(IFt,"xlnet"),IFt.forEach(t),PHo=r(gRe," \u2014 "),UX=n(gRe,"A",{href:!0});var NFt=s(UX);BHo=r(NFt,"XLNetForTokenClassification"),NFt.forEach(t),IHo=r(gRe," (XLNet model)"),gRe.forEach(t),NHo=i(J),DF=n(J,"LI",{});var hRe=s(DF);jue=n(hRe,"STRONG",{});var qFt=s(jue);qHo=r(qFt,"yoso"),qFt.forEach(t),jHo=r(hRe," \u2014 "),JX=n(hRe,"A",{href:!0});var jFt=s(JX);DHo=r(jFt,"YosoForTokenClassification"),jFt.forEach(t),GHo=r(hRe," (YOSO model)"),hRe.forEach(t),J.forEach(t),OHo=i(ma),GF=n(ma,"P",{});var pRe=s(GF);VHo=r(pRe,"The model is set in evaluation mode by default using "),Due=n(pRe,"CODE",{});var DFt=s(Due);XHo=r(DFt,"model.eval()"),DFt.forEach(t),zHo=r(pRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=n(pRe,"CODE",{});var GFt=s(Gue);WHo=r(GFt,"model.train()"),GFt.forEach(t),pRe.forEach(t),QHo=i(ma),T(OF.$$.fragment,ma),ma.forEach(t),al.forEach(t),GGe=i(f),ld=n(f,"H2",{class:!0});var QVe=s(ld);VF=n(QVe,"A",{id:!0,class:!0,href:!0});var OFt=s(VF);Oue=n(OFt,"SPAN",{});var VFt=s(Oue);T(jL.$$.fragment,VFt),VFt.forEach(t),OFt.forEach(t),HHo=i(QVe),Vue=n(QVe,"SPAN",{});var XFt=s(Vue);UHo=r(XFt,"AutoModelForQuestionAnswering"),XFt.forEach(t),QVe.forEach(t),OGe=i(f),qo=n(f,"DIV",{class:!0});var nl=s(qo);T(DL.$$.fragment,nl),JHo=i(nl),id=n(nl,"P",{});var voe=s(id);YHo=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),YX=n(voe,"A",{href:!0});var zFt=s(YX);KHo=r(zFt,"from_pretrained()"),zFt.forEach(t),ZHo=r(voe," class method or the "),KX=n(voe,"A",{href:!0});var WFt=s(KX);eUo=r(WFt,"from_config()"),WFt.forEach(t),oUo=r(voe,` class
method.`),voe.forEach(t),rUo=i(nl),GL=n(nl,"P",{});var HVe=s(GL);tUo=r(HVe,"This class cannot be instantiated directly using "),Xue=n(HVe,"CODE",{});var QFt=s(Xue);aUo=r(QFt,"__init__()"),QFt.forEach(t),nUo=r(HVe," (throws an error)."),HVe.forEach(t),sUo=i(nl),ht=n(nl,"DIV",{class:!0});var O0=s(ht);T(OL.$$.fragment,O0),lUo=i(O0),zue=n(O0,"P",{});var HFt=s(zue);iUo=r(HFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),HFt.forEach(t),dUo=i(O0),dd=n(O0,"P",{});var Foe=s(dd);cUo=r(Foe,`Note:
Loading a model from its configuration file does `),Wue=n(Foe,"STRONG",{});var UFt=s(Wue);fUo=r(UFt,"not"),UFt.forEach(t),mUo=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(Foe,"A",{href:!0});var JFt=s(ZX);gUo=r(JFt,"from_pretrained()"),JFt.forEach(t),hUo=r(Foe," to load the model weights."),Foe.forEach(t),pUo=i(O0),T(XF.$$.fragment,O0),O0.forEach(t),uUo=i(nl),no=n(nl,"DIV",{class:!0});var ga=s(no);T(VL.$$.fragment,ga),_Uo=i(ga),Que=n(ga,"P",{});var YFt=s(Que);bUo=r(YFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),YFt.forEach(t),vUo=i(ga),Ga=n(ga,"P",{});var V0=s(Ga);FUo=r(V0,"The model class to instantiate is selected based on the "),Hue=n(V0,"CODE",{});var KFt=s(Hue);TUo=r(KFt,"model_type"),KFt.forEach(t),MUo=r(V0,` property of the config object (either
passed as an argument or loaded from `),Uue=n(V0,"CODE",{});var ZFt=s(Uue);EUo=r(ZFt,"pretrained_model_name_or_path"),ZFt.forEach(t),CUo=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(V0,"CODE",{});var e6t=s(Jue);wUo=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),AUo=r(V0,":"),V0.forEach(t),LUo=i(ga),V=n(ga,"UL",{});var X=s(V);zF=n(X,"LI",{});var uRe=s(zF);Yue=n(uRe,"STRONG",{});var o6t=s(Yue);yUo=r(o6t,"albert"),o6t.forEach(t),xUo=r(uRe," \u2014 "),ez=n(uRe,"A",{href:!0});var r6t=s(ez);$Uo=r(r6t,"AlbertForQuestionAnswering"),r6t.forEach(t),kUo=r(uRe," (ALBERT model)"),uRe.forEach(t),SUo=i(X),WF=n(X,"LI",{});var _Re=s(WF);Kue=n(_Re,"STRONG",{});var t6t=s(Kue);RUo=r(t6t,"bart"),t6t.forEach(t),PUo=r(_Re," \u2014 "),oz=n(_Re,"A",{href:!0});var a6t=s(oz);BUo=r(a6t,"BartForQuestionAnswering"),a6t.forEach(t),IUo=r(_Re," (BART model)"),_Re.forEach(t),NUo=i(X),QF=n(X,"LI",{});var bRe=s(QF);Zue=n(bRe,"STRONG",{});var n6t=s(Zue);qUo=r(n6t,"bert"),n6t.forEach(t),jUo=r(bRe," \u2014 "),rz=n(bRe,"A",{href:!0});var s6t=s(rz);DUo=r(s6t,"BertForQuestionAnswering"),s6t.forEach(t),GUo=r(bRe," (BERT model)"),bRe.forEach(t),OUo=i(X),HF=n(X,"LI",{});var vRe=s(HF);e_e=n(vRe,"STRONG",{});var l6t=s(e_e);VUo=r(l6t,"big_bird"),l6t.forEach(t),XUo=r(vRe," \u2014 "),tz=n(vRe,"A",{href:!0});var i6t=s(tz);zUo=r(i6t,"BigBirdForQuestionAnswering"),i6t.forEach(t),WUo=r(vRe," (BigBird model)"),vRe.forEach(t),QUo=i(X),UF=n(X,"LI",{});var FRe=s(UF);o_e=n(FRe,"STRONG",{});var d6t=s(o_e);HUo=r(d6t,"bigbird_pegasus"),d6t.forEach(t),UUo=r(FRe," \u2014 "),az=n(FRe,"A",{href:!0});var c6t=s(az);JUo=r(c6t,"BigBirdPegasusForQuestionAnswering"),c6t.forEach(t),YUo=r(FRe," (BigBird-Pegasus model)"),FRe.forEach(t),KUo=i(X),JF=n(X,"LI",{});var TRe=s(JF);r_e=n(TRe,"STRONG",{});var f6t=s(r_e);ZUo=r(f6t,"camembert"),f6t.forEach(t),eJo=r(TRe," \u2014 "),nz=n(TRe,"A",{href:!0});var m6t=s(nz);oJo=r(m6t,"CamembertForQuestionAnswering"),m6t.forEach(t),rJo=r(TRe," (CamemBERT model)"),TRe.forEach(t),tJo=i(X),YF=n(X,"LI",{});var MRe=s(YF);t_e=n(MRe,"STRONG",{});var g6t=s(t_e);aJo=r(g6t,"canine"),g6t.forEach(t),nJo=r(MRe," \u2014 "),sz=n(MRe,"A",{href:!0});var h6t=s(sz);sJo=r(h6t,"CanineForQuestionAnswering"),h6t.forEach(t),lJo=r(MRe," (CANINE model)"),MRe.forEach(t),iJo=i(X),KF=n(X,"LI",{});var ERe=s(KF);a_e=n(ERe,"STRONG",{});var p6t=s(a_e);dJo=r(p6t,"convbert"),p6t.forEach(t),cJo=r(ERe," \u2014 "),lz=n(ERe,"A",{href:!0});var u6t=s(lz);fJo=r(u6t,"ConvBertForQuestionAnswering"),u6t.forEach(t),mJo=r(ERe," (ConvBERT model)"),ERe.forEach(t),gJo=i(X),ZF=n(X,"LI",{});var CRe=s(ZF);n_e=n(CRe,"STRONG",{});var _6t=s(n_e);hJo=r(_6t,"data2vec-text"),_6t.forEach(t),pJo=r(CRe," \u2014 "),iz=n(CRe,"A",{href:!0});var b6t=s(iz);uJo=r(b6t,"Data2VecTextForQuestionAnswering"),b6t.forEach(t),_Jo=r(CRe," (Data2VecText model)"),CRe.forEach(t),bJo=i(X),e6=n(X,"LI",{});var wRe=s(e6);s_e=n(wRe,"STRONG",{});var v6t=s(s_e);vJo=r(v6t,"deberta"),v6t.forEach(t),FJo=r(wRe," \u2014 "),dz=n(wRe,"A",{href:!0});var F6t=s(dz);TJo=r(F6t,"DebertaForQuestionAnswering"),F6t.forEach(t),MJo=r(wRe," (DeBERTa model)"),wRe.forEach(t),EJo=i(X),o6=n(X,"LI",{});var ARe=s(o6);l_e=n(ARe,"STRONG",{});var T6t=s(l_e);CJo=r(T6t,"deberta-v2"),T6t.forEach(t),wJo=r(ARe," \u2014 "),cz=n(ARe,"A",{href:!0});var M6t=s(cz);AJo=r(M6t,"DebertaV2ForQuestionAnswering"),M6t.forEach(t),LJo=r(ARe," (DeBERTa-v2 model)"),ARe.forEach(t),yJo=i(X),r6=n(X,"LI",{});var LRe=s(r6);i_e=n(LRe,"STRONG",{});var E6t=s(i_e);xJo=r(E6t,"distilbert"),E6t.forEach(t),$Jo=r(LRe," \u2014 "),fz=n(LRe,"A",{href:!0});var C6t=s(fz);kJo=r(C6t,"DistilBertForQuestionAnswering"),C6t.forEach(t),SJo=r(LRe," (DistilBERT model)"),LRe.forEach(t),RJo=i(X),t6=n(X,"LI",{});var yRe=s(t6);d_e=n(yRe,"STRONG",{});var w6t=s(d_e);PJo=r(w6t,"electra"),w6t.forEach(t),BJo=r(yRe," \u2014 "),mz=n(yRe,"A",{href:!0});var A6t=s(mz);IJo=r(A6t,"ElectraForQuestionAnswering"),A6t.forEach(t),NJo=r(yRe," (ELECTRA model)"),yRe.forEach(t),qJo=i(X),a6=n(X,"LI",{});var xRe=s(a6);c_e=n(xRe,"STRONG",{});var L6t=s(c_e);jJo=r(L6t,"flaubert"),L6t.forEach(t),DJo=r(xRe," \u2014 "),gz=n(xRe,"A",{href:!0});var y6t=s(gz);GJo=r(y6t,"FlaubertForQuestionAnsweringSimple"),y6t.forEach(t),OJo=r(xRe," (FlauBERT model)"),xRe.forEach(t),VJo=i(X),n6=n(X,"LI",{});var $Re=s(n6);f_e=n($Re,"STRONG",{});var x6t=s(f_e);XJo=r(x6t,"fnet"),x6t.forEach(t),zJo=r($Re," \u2014 "),hz=n($Re,"A",{href:!0});var $6t=s(hz);WJo=r($6t,"FNetForQuestionAnswering"),$6t.forEach(t),QJo=r($Re," (FNet model)"),$Re.forEach(t),HJo=i(X),s6=n(X,"LI",{});var kRe=s(s6);m_e=n(kRe,"STRONG",{});var k6t=s(m_e);UJo=r(k6t,"funnel"),k6t.forEach(t),JJo=r(kRe," \u2014 "),pz=n(kRe,"A",{href:!0});var S6t=s(pz);YJo=r(S6t,"FunnelForQuestionAnswering"),S6t.forEach(t),KJo=r(kRe," (Funnel Transformer model)"),kRe.forEach(t),ZJo=i(X),l6=n(X,"LI",{});var SRe=s(l6);g_e=n(SRe,"STRONG",{});var R6t=s(g_e);eYo=r(R6t,"gptj"),R6t.forEach(t),oYo=r(SRe," \u2014 "),uz=n(SRe,"A",{href:!0});var P6t=s(uz);rYo=r(P6t,"GPTJForQuestionAnswering"),P6t.forEach(t),tYo=r(SRe," (GPT-J model)"),SRe.forEach(t),aYo=i(X),i6=n(X,"LI",{});var RRe=s(i6);h_e=n(RRe,"STRONG",{});var B6t=s(h_e);nYo=r(B6t,"ibert"),B6t.forEach(t),sYo=r(RRe," \u2014 "),_z=n(RRe,"A",{href:!0});var I6t=s(_z);lYo=r(I6t,"IBertForQuestionAnswering"),I6t.forEach(t),iYo=r(RRe," (I-BERT model)"),RRe.forEach(t),dYo=i(X),d6=n(X,"LI",{});var PRe=s(d6);p_e=n(PRe,"STRONG",{});var N6t=s(p_e);cYo=r(N6t,"layoutlmv2"),N6t.forEach(t),fYo=r(PRe," \u2014 "),bz=n(PRe,"A",{href:!0});var q6t=s(bz);mYo=r(q6t,"LayoutLMv2ForQuestionAnswering"),q6t.forEach(t),gYo=r(PRe," (LayoutLMv2 model)"),PRe.forEach(t),hYo=i(X),c6=n(X,"LI",{});var BRe=s(c6);u_e=n(BRe,"STRONG",{});var j6t=s(u_e);pYo=r(j6t,"layoutlmv3"),j6t.forEach(t),uYo=r(BRe," \u2014 "),vz=n(BRe,"A",{href:!0});var D6t=s(vz);_Yo=r(D6t,"LayoutLMv3ForQuestionAnswering"),D6t.forEach(t),bYo=r(BRe," (LayoutLMv3 model)"),BRe.forEach(t),vYo=i(X),f6=n(X,"LI",{});var IRe=s(f6);__e=n(IRe,"STRONG",{});var G6t=s(__e);FYo=r(G6t,"led"),G6t.forEach(t),TYo=r(IRe," \u2014 "),Fz=n(IRe,"A",{href:!0});var O6t=s(Fz);MYo=r(O6t,"LEDForQuestionAnswering"),O6t.forEach(t),EYo=r(IRe," (LED model)"),IRe.forEach(t),CYo=i(X),m6=n(X,"LI",{});var NRe=s(m6);b_e=n(NRe,"STRONG",{});var V6t=s(b_e);wYo=r(V6t,"longformer"),V6t.forEach(t),AYo=r(NRe," \u2014 "),Tz=n(NRe,"A",{href:!0});var X6t=s(Tz);LYo=r(X6t,"LongformerForQuestionAnswering"),X6t.forEach(t),yYo=r(NRe," (Longformer model)"),NRe.forEach(t),xYo=i(X),g6=n(X,"LI",{});var qRe=s(g6);v_e=n(qRe,"STRONG",{});var z6t=s(v_e);$Yo=r(z6t,"lxmert"),z6t.forEach(t),kYo=r(qRe," \u2014 "),Mz=n(qRe,"A",{href:!0});var W6t=s(Mz);SYo=r(W6t,"LxmertForQuestionAnswering"),W6t.forEach(t),RYo=r(qRe," (LXMERT model)"),qRe.forEach(t),PYo=i(X),h6=n(X,"LI",{});var jRe=s(h6);F_e=n(jRe,"STRONG",{});var Q6t=s(F_e);BYo=r(Q6t,"mbart"),Q6t.forEach(t),IYo=r(jRe," \u2014 "),Ez=n(jRe,"A",{href:!0});var H6t=s(Ez);NYo=r(H6t,"MBartForQuestionAnswering"),H6t.forEach(t),qYo=r(jRe," (mBART model)"),jRe.forEach(t),jYo=i(X),p6=n(X,"LI",{});var DRe=s(p6);T_e=n(DRe,"STRONG",{});var U6t=s(T_e);DYo=r(U6t,"megatron-bert"),U6t.forEach(t),GYo=r(DRe," \u2014 "),Cz=n(DRe,"A",{href:!0});var J6t=s(Cz);OYo=r(J6t,"MegatronBertForQuestionAnswering"),J6t.forEach(t),VYo=r(DRe," (Megatron-BERT model)"),DRe.forEach(t),XYo=i(X),u6=n(X,"LI",{});var GRe=s(u6);M_e=n(GRe,"STRONG",{});var Y6t=s(M_e);zYo=r(Y6t,"mobilebert"),Y6t.forEach(t),WYo=r(GRe," \u2014 "),wz=n(GRe,"A",{href:!0});var K6t=s(wz);QYo=r(K6t,"MobileBertForQuestionAnswering"),K6t.forEach(t),HYo=r(GRe," (MobileBERT model)"),GRe.forEach(t),UYo=i(X),_6=n(X,"LI",{});var ORe=s(_6);E_e=n(ORe,"STRONG",{});var Z6t=s(E_e);JYo=r(Z6t,"mpnet"),Z6t.forEach(t),YYo=r(ORe," \u2014 "),Az=n(ORe,"A",{href:!0});var eTt=s(Az);KYo=r(eTt,"MPNetForQuestionAnswering"),eTt.forEach(t),ZYo=r(ORe," (MPNet model)"),ORe.forEach(t),eKo=i(X),b6=n(X,"LI",{});var VRe=s(b6);C_e=n(VRe,"STRONG",{});var oTt=s(C_e);oKo=r(oTt,"nystromformer"),oTt.forEach(t),rKo=r(VRe," \u2014 "),Lz=n(VRe,"A",{href:!0});var rTt=s(Lz);tKo=r(rTt,"NystromformerForQuestionAnswering"),rTt.forEach(t),aKo=r(VRe," (Nystr\xF6mformer model)"),VRe.forEach(t),nKo=i(X),v6=n(X,"LI",{});var XRe=s(v6);w_e=n(XRe,"STRONG",{});var tTt=s(w_e);sKo=r(tTt,"qdqbert"),tTt.forEach(t),lKo=r(XRe," \u2014 "),yz=n(XRe,"A",{href:!0});var aTt=s(yz);iKo=r(aTt,"QDQBertForQuestionAnswering"),aTt.forEach(t),dKo=r(XRe," (QDQBert model)"),XRe.forEach(t),cKo=i(X),F6=n(X,"LI",{});var zRe=s(F6);A_e=n(zRe,"STRONG",{});var nTt=s(A_e);fKo=r(nTt,"reformer"),nTt.forEach(t),mKo=r(zRe," \u2014 "),xz=n(zRe,"A",{href:!0});var sTt=s(xz);gKo=r(sTt,"ReformerForQuestionAnswering"),sTt.forEach(t),hKo=r(zRe," (Reformer model)"),zRe.forEach(t),pKo=i(X),T6=n(X,"LI",{});var WRe=s(T6);L_e=n(WRe,"STRONG",{});var lTt=s(L_e);uKo=r(lTt,"rembert"),lTt.forEach(t),_Ko=r(WRe," \u2014 "),$z=n(WRe,"A",{href:!0});var iTt=s($z);bKo=r(iTt,"RemBertForQuestionAnswering"),iTt.forEach(t),vKo=r(WRe," (RemBERT model)"),WRe.forEach(t),FKo=i(X),M6=n(X,"LI",{});var QRe=s(M6);y_e=n(QRe,"STRONG",{});var dTt=s(y_e);TKo=r(dTt,"roberta"),dTt.forEach(t),MKo=r(QRe," \u2014 "),kz=n(QRe,"A",{href:!0});var cTt=s(kz);EKo=r(cTt,"RobertaForQuestionAnswering"),cTt.forEach(t),CKo=r(QRe," (RoBERTa model)"),QRe.forEach(t),wKo=i(X),E6=n(X,"LI",{});var HRe=s(E6);x_e=n(HRe,"STRONG",{});var fTt=s(x_e);AKo=r(fTt,"roformer"),fTt.forEach(t),LKo=r(HRe," \u2014 "),Sz=n(HRe,"A",{href:!0});var mTt=s(Sz);yKo=r(mTt,"RoFormerForQuestionAnswering"),mTt.forEach(t),xKo=r(HRe," (RoFormer model)"),HRe.forEach(t),$Ko=i(X),C6=n(X,"LI",{});var URe=s(C6);$_e=n(URe,"STRONG",{});var gTt=s($_e);kKo=r(gTt,"splinter"),gTt.forEach(t),SKo=r(URe," \u2014 "),Rz=n(URe,"A",{href:!0});var hTt=s(Rz);RKo=r(hTt,"SplinterForQuestionAnswering"),hTt.forEach(t),PKo=r(URe," (Splinter model)"),URe.forEach(t),BKo=i(X),w6=n(X,"LI",{});var JRe=s(w6);k_e=n(JRe,"STRONG",{});var pTt=s(k_e);IKo=r(pTt,"squeezebert"),pTt.forEach(t),NKo=r(JRe," \u2014 "),Pz=n(JRe,"A",{href:!0});var uTt=s(Pz);qKo=r(uTt,"SqueezeBertForQuestionAnswering"),uTt.forEach(t),jKo=r(JRe," (SqueezeBERT model)"),JRe.forEach(t),DKo=i(X),A6=n(X,"LI",{});var YRe=s(A6);S_e=n(YRe,"STRONG",{});var _Tt=s(S_e);GKo=r(_Tt,"xlm"),_Tt.forEach(t),OKo=r(YRe," \u2014 "),Bz=n(YRe,"A",{href:!0});var bTt=s(Bz);VKo=r(bTt,"XLMForQuestionAnsweringSimple"),bTt.forEach(t),XKo=r(YRe," (XLM model)"),YRe.forEach(t),zKo=i(X),L6=n(X,"LI",{});var KRe=s(L6);R_e=n(KRe,"STRONG",{});var vTt=s(R_e);WKo=r(vTt,"xlm-roberta"),vTt.forEach(t),QKo=r(KRe," \u2014 "),Iz=n(KRe,"A",{href:!0});var FTt=s(Iz);HKo=r(FTt,"XLMRobertaForQuestionAnswering"),FTt.forEach(t),UKo=r(KRe," (XLM-RoBERTa model)"),KRe.forEach(t),JKo=i(X),y6=n(X,"LI",{});var ZRe=s(y6);P_e=n(ZRe,"STRONG",{});var TTt=s(P_e);YKo=r(TTt,"xlm-roberta-xl"),TTt.forEach(t),KKo=r(ZRe," \u2014 "),Nz=n(ZRe,"A",{href:!0});var MTt=s(Nz);ZKo=r(MTt,"XLMRobertaXLForQuestionAnswering"),MTt.forEach(t),eZo=r(ZRe," (XLM-RoBERTa-XL model)"),ZRe.forEach(t),oZo=i(X),x6=n(X,"LI",{});var ePe=s(x6);B_e=n(ePe,"STRONG",{});var ETt=s(B_e);rZo=r(ETt,"xlnet"),ETt.forEach(t),tZo=r(ePe," \u2014 "),qz=n(ePe,"A",{href:!0});var CTt=s(qz);aZo=r(CTt,"XLNetForQuestionAnsweringSimple"),CTt.forEach(t),nZo=r(ePe," (XLNet model)"),ePe.forEach(t),sZo=i(X),$6=n(X,"LI",{});var oPe=s($6);I_e=n(oPe,"STRONG",{});var wTt=s(I_e);lZo=r(wTt,"yoso"),wTt.forEach(t),iZo=r(oPe," \u2014 "),jz=n(oPe,"A",{href:!0});var ATt=s(jz);dZo=r(ATt,"YosoForQuestionAnswering"),ATt.forEach(t),cZo=r(oPe," (YOSO model)"),oPe.forEach(t),X.forEach(t),fZo=i(ga),k6=n(ga,"P",{});var rPe=s(k6);mZo=r(rPe,"The model is set in evaluation mode by default using "),N_e=n(rPe,"CODE",{});var LTt=s(N_e);gZo=r(LTt,"model.eval()"),LTt.forEach(t),hZo=r(rPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=n(rPe,"CODE",{});var yTt=s(q_e);pZo=r(yTt,"model.train()"),yTt.forEach(t),rPe.forEach(t),uZo=i(ga),T(S6.$$.fragment,ga),ga.forEach(t),nl.forEach(t),VGe=i(f),cd=n(f,"H2",{class:!0});var UVe=s(cd);R6=n(UVe,"A",{id:!0,class:!0,href:!0});var xTt=s(R6);j_e=n(xTt,"SPAN",{});var $Tt=s(j_e);T(XL.$$.fragment,$Tt),$Tt.forEach(t),xTt.forEach(t),_Zo=i(UVe),D_e=n(UVe,"SPAN",{});var kTt=s(D_e);bZo=r(kTt,"AutoModelForTableQuestionAnswering"),kTt.forEach(t),UVe.forEach(t),XGe=i(f),jo=n(f,"DIV",{class:!0});var sl=s(jo);T(zL.$$.fragment,sl),vZo=i(sl),fd=n(sl,"P",{});var Toe=s(fd);FZo=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Dz=n(Toe,"A",{href:!0});var STt=s(Dz);TZo=r(STt,"from_pretrained()"),STt.forEach(t),MZo=r(Toe," class method or the "),Gz=n(Toe,"A",{href:!0});var RTt=s(Gz);EZo=r(RTt,"from_config()"),RTt.forEach(t),CZo=r(Toe,` class
method.`),Toe.forEach(t),wZo=i(sl),WL=n(sl,"P",{});var JVe=s(WL);AZo=r(JVe,"This class cannot be instantiated directly using "),G_e=n(JVe,"CODE",{});var PTt=s(G_e);LZo=r(PTt,"__init__()"),PTt.forEach(t),yZo=r(JVe," (throws an error)."),JVe.forEach(t),xZo=i(sl),pt=n(sl,"DIV",{class:!0});var X0=s(pt);T(QL.$$.fragment,X0),$Zo=i(X0),O_e=n(X0,"P",{});var BTt=s(O_e);kZo=r(BTt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BTt.forEach(t),SZo=i(X0),md=n(X0,"P",{});var Moe=s(md);RZo=r(Moe,`Note:
Loading a model from its configuration file does `),V_e=n(Moe,"STRONG",{});var ITt=s(V_e);PZo=r(ITt,"not"),ITt.forEach(t),BZo=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(Moe,"A",{href:!0});var NTt=s(Oz);IZo=r(NTt,"from_pretrained()"),NTt.forEach(t),NZo=r(Moe," to load the model weights."),Moe.forEach(t),qZo=i(X0),T(P6.$$.fragment,X0),X0.forEach(t),jZo=i(sl),so=n(sl,"DIV",{class:!0});var ha=s(so);T(HL.$$.fragment,ha),DZo=i(ha),X_e=n(ha,"P",{});var qTt=s(X_e);GZo=r(qTt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qTt.forEach(t),OZo=i(ha),Oa=n(ha,"P",{});var z0=s(Oa);VZo=r(z0,"The model class to instantiate is selected based on the "),z_e=n(z0,"CODE",{});var jTt=s(z_e);XZo=r(jTt,"model_type"),jTt.forEach(t),zZo=r(z0,` property of the config object (either
passed as an argument or loaded from `),W_e=n(z0,"CODE",{});var DTt=s(W_e);WZo=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),QZo=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=n(z0,"CODE",{});var GTt=s(Q_e);HZo=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),UZo=r(z0,":"),z0.forEach(t),JZo=i(ha),H_e=n(ha,"UL",{});var OTt=s(H_e);B6=n(OTt,"LI",{});var tPe=s(B6);U_e=n(tPe,"STRONG",{});var VTt=s(U_e);YZo=r(VTt,"tapas"),VTt.forEach(t),KZo=r(tPe," \u2014 "),Vz=n(tPe,"A",{href:!0});var XTt=s(Vz);ZZo=r(XTt,"TapasForQuestionAnswering"),XTt.forEach(t),eer=r(tPe," (TAPAS model)"),tPe.forEach(t),OTt.forEach(t),oer=i(ha),I6=n(ha,"P",{});var aPe=s(I6);rer=r(aPe,"The model is set in evaluation mode by default using "),J_e=n(aPe,"CODE",{});var zTt=s(J_e);ter=r(zTt,"model.eval()"),zTt.forEach(t),aer=r(aPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y_e=n(aPe,"CODE",{});var WTt=s(Y_e);ner=r(WTt,"model.train()"),WTt.forEach(t),aPe.forEach(t),ser=i(ha),T(N6.$$.fragment,ha),ha.forEach(t),sl.forEach(t),zGe=i(f),gd=n(f,"H2",{class:!0});var YVe=s(gd);q6=n(YVe,"A",{id:!0,class:!0,href:!0});var QTt=s(q6);K_e=n(QTt,"SPAN",{});var HTt=s(K_e);T(UL.$$.fragment,HTt),HTt.forEach(t),QTt.forEach(t),ler=i(YVe),Z_e=n(YVe,"SPAN",{});var UTt=s(Z_e);ier=r(UTt,"AutoModelForImageClassification"),UTt.forEach(t),YVe.forEach(t),WGe=i(f),Do=n(f,"DIV",{class:!0});var ll=s(Do);T(JL.$$.fragment,ll),der=i(ll),hd=n(ll,"P",{});var Eoe=s(hd);cer=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Xz=n(Eoe,"A",{href:!0});var JTt=s(Xz);fer=r(JTt,"from_pretrained()"),JTt.forEach(t),mer=r(Eoe," class method or the "),zz=n(Eoe,"A",{href:!0});var YTt=s(zz);ger=r(YTt,"from_config()"),YTt.forEach(t),her=r(Eoe,` class
method.`),Eoe.forEach(t),per=i(ll),YL=n(ll,"P",{});var KVe=s(YL);uer=r(KVe,"This class cannot be instantiated directly using "),e2e=n(KVe,"CODE",{});var KTt=s(e2e);_er=r(KTt,"__init__()"),KTt.forEach(t),ber=r(KVe," (throws an error)."),KVe.forEach(t),ver=i(ll),ut=n(ll,"DIV",{class:!0});var W0=s(ut);T(KL.$$.fragment,W0),Fer=i(W0),o2e=n(W0,"P",{});var ZTt=s(o2e);Ter=r(ZTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZTt.forEach(t),Mer=i(W0),pd=n(W0,"P",{});var Coe=s(pd);Eer=r(Coe,`Note:
Loading a model from its configuration file does `),r2e=n(Coe,"STRONG",{});var e7t=s(r2e);Cer=r(e7t,"not"),e7t.forEach(t),wer=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=n(Coe,"A",{href:!0});var o7t=s(Wz);Aer=r(o7t,"from_pretrained()"),o7t.forEach(t),Ler=r(Coe," to load the model weights."),Coe.forEach(t),yer=i(W0),T(j6.$$.fragment,W0),W0.forEach(t),xer=i(ll),lo=n(ll,"DIV",{class:!0});var pa=s(lo);T(ZL.$$.fragment,pa),$er=i(pa),t2e=n(pa,"P",{});var r7t=s(t2e);ker=r(r7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),r7t.forEach(t),Ser=i(pa),Va=n(pa,"P",{});var Q0=s(Va);Rer=r(Q0,"The model class to instantiate is selected based on the "),a2e=n(Q0,"CODE",{});var t7t=s(a2e);Per=r(t7t,"model_type"),t7t.forEach(t),Ber=r(Q0,` property of the config object (either
passed as an argument or loaded from `),n2e=n(Q0,"CODE",{});var a7t=s(n2e);Ier=r(a7t,"pretrained_model_name_or_path"),a7t.forEach(t),Ner=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(Q0,"CODE",{});var n7t=s(s2e);qer=r(n7t,"pretrained_model_name_or_path"),n7t.forEach(t),jer=r(Q0,":"),Q0.forEach(t),Der=i(pa),Fe=n(pa,"UL",{});var Te=s(Fe);D6=n(Te,"LI",{});var nPe=s(D6);l2e=n(nPe,"STRONG",{});var s7t=s(l2e);Ger=r(s7t,"beit"),s7t.forEach(t),Oer=r(nPe," \u2014 "),Qz=n(nPe,"A",{href:!0});var l7t=s(Qz);Ver=r(l7t,"BeitForImageClassification"),l7t.forEach(t),Xer=r(nPe," (BEiT model)"),nPe.forEach(t),zer=i(Te),G6=n(Te,"LI",{});var sPe=s(G6);i2e=n(sPe,"STRONG",{});var i7t=s(i2e);Wer=r(i7t,"convnext"),i7t.forEach(t),Qer=r(sPe," \u2014 "),Hz=n(sPe,"A",{href:!0});var d7t=s(Hz);Her=r(d7t,"ConvNextForImageClassification"),d7t.forEach(t),Uer=r(sPe," (ConvNeXT model)"),sPe.forEach(t),Jer=i(Te),O6=n(Te,"LI",{});var lPe=s(O6);d2e=n(lPe,"STRONG",{});var c7t=s(d2e);Yer=r(c7t,"cvt"),c7t.forEach(t),Ker=r(lPe," \u2014 "),Uz=n(lPe,"A",{href:!0});var f7t=s(Uz);Zer=r(f7t,"CvtForImageClassification"),f7t.forEach(t),eor=r(lPe," (CvT model)"),lPe.forEach(t),oor=i(Te),V6=n(Te,"LI",{});var iPe=s(V6);c2e=n(iPe,"STRONG",{});var m7t=s(c2e);ror=r(m7t,"data2vec-vision"),m7t.forEach(t),tor=r(iPe," \u2014 "),Jz=n(iPe,"A",{href:!0});var g7t=s(Jz);aor=r(g7t,"Data2VecVisionForImageClassification"),g7t.forEach(t),nor=r(iPe," (Data2VecVision model)"),iPe.forEach(t),sor=i(Te),Os=n(Te,"LI",{});var zk=s(Os);f2e=n(zk,"STRONG",{});var h7t=s(f2e);lor=r(h7t,"deit"),h7t.forEach(t),ior=r(zk," \u2014 "),Yz=n(zk,"A",{href:!0});var p7t=s(Yz);dor=r(p7t,"DeiTForImageClassification"),p7t.forEach(t),cor=r(zk," or "),Kz=n(zk,"A",{href:!0});var u7t=s(Kz);mor=r(u7t,"DeiTForImageClassificationWithTeacher"),u7t.forEach(t),gor=r(zk," (DeiT model)"),zk.forEach(t),hor=i(Te),X6=n(Te,"LI",{});var dPe=s(X6);m2e=n(dPe,"STRONG",{});var _7t=s(m2e);por=r(_7t,"imagegpt"),_7t.forEach(t),uor=r(dPe," \u2014 "),Zz=n(dPe,"A",{href:!0});var b7t=s(Zz);_or=r(b7t,"ImageGPTForImageClassification"),b7t.forEach(t),bor=r(dPe," (ImageGPT model)"),dPe.forEach(t),vor=i(Te),Vs=n(Te,"LI",{});var Wk=s(Vs);g2e=n(Wk,"STRONG",{});var v7t=s(g2e);For=r(v7t,"levit"),v7t.forEach(t),Tor=r(Wk," \u2014 "),eW=n(Wk,"A",{href:!0});var F7t=s(eW);Mor=r(F7t,"LevitForImageClassification"),F7t.forEach(t),Eor=r(Wk," or "),oW=n(Wk,"A",{href:!0});var T7t=s(oW);Cor=r(T7t,"LevitForImageClassificationWithTeacher"),T7t.forEach(t),wor=r(Wk," (LeViT model)"),Wk.forEach(t),Aor=i(Te),_t=n(Te,"LI",{});var Af=s(_t);h2e=n(Af,"STRONG",{});var M7t=s(h2e);Lor=r(M7t,"perceiver"),M7t.forEach(t),yor=r(Af," \u2014 "),rW=n(Af,"A",{href:!0});var E7t=s(rW);xor=r(E7t,"PerceiverForImageClassificationLearned"),E7t.forEach(t),$or=r(Af," or "),tW=n(Af,"A",{href:!0});var C7t=s(tW);kor=r(C7t,"PerceiverForImageClassificationFourier"),C7t.forEach(t),Sor=r(Af," or "),aW=n(Af,"A",{href:!0});var w7t=s(aW);Ror=r(w7t,"PerceiverForImageClassificationConvProcessing"),w7t.forEach(t),Por=r(Af," (Perceiver model)"),Af.forEach(t),Bor=i(Te),z6=n(Te,"LI",{});var cPe=s(z6);p2e=n(cPe,"STRONG",{});var A7t=s(p2e);Ior=r(A7t,"poolformer"),A7t.forEach(t),Nor=r(cPe," \u2014 "),nW=n(cPe,"A",{href:!0});var L7t=s(nW);qor=r(L7t,"PoolFormerForImageClassification"),L7t.forEach(t),jor=r(cPe," (PoolFormer model)"),cPe.forEach(t),Dor=i(Te),W6=n(Te,"LI",{});var fPe=s(W6);u2e=n(fPe,"STRONG",{});var y7t=s(u2e);Gor=r(y7t,"regnet"),y7t.forEach(t),Oor=r(fPe," \u2014 "),sW=n(fPe,"A",{href:!0});var x7t=s(sW);Vor=r(x7t,"RegNetForImageClassification"),x7t.forEach(t),Xor=r(fPe," (RegNet model)"),fPe.forEach(t),zor=i(Te),Q6=n(Te,"LI",{});var mPe=s(Q6);_2e=n(mPe,"STRONG",{});var $7t=s(_2e);Wor=r($7t,"resnet"),$7t.forEach(t),Qor=r(mPe," \u2014 "),lW=n(mPe,"A",{href:!0});var k7t=s(lW);Hor=r(k7t,"ResNetForImageClassification"),k7t.forEach(t),Uor=r(mPe," (ResNet model)"),mPe.forEach(t),Jor=i(Te),H6=n(Te,"LI",{});var gPe=s(H6);b2e=n(gPe,"STRONG",{});var S7t=s(b2e);Yor=r(S7t,"segformer"),S7t.forEach(t),Kor=r(gPe," \u2014 "),iW=n(gPe,"A",{href:!0});var R7t=s(iW);Zor=r(R7t,"SegformerForImageClassification"),R7t.forEach(t),err=r(gPe," (SegFormer model)"),gPe.forEach(t),orr=i(Te),U6=n(Te,"LI",{});var hPe=s(U6);v2e=n(hPe,"STRONG",{});var P7t=s(v2e);rrr=r(P7t,"swin"),P7t.forEach(t),trr=r(hPe," \u2014 "),dW=n(hPe,"A",{href:!0});var B7t=s(dW);arr=r(B7t,"SwinForImageClassification"),B7t.forEach(t),nrr=r(hPe," (Swin Transformer model)"),hPe.forEach(t),srr=i(Te),J6=n(Te,"LI",{});var pPe=s(J6);F2e=n(pPe,"STRONG",{});var I7t=s(F2e);lrr=r(I7t,"van"),I7t.forEach(t),irr=r(pPe," \u2014 "),cW=n(pPe,"A",{href:!0});var N7t=s(cW);drr=r(N7t,"VanForImageClassification"),N7t.forEach(t),crr=r(pPe," (VAN model)"),pPe.forEach(t),frr=i(Te),Y6=n(Te,"LI",{});var uPe=s(Y6);T2e=n(uPe,"STRONG",{});var q7t=s(T2e);mrr=r(q7t,"vit"),q7t.forEach(t),grr=r(uPe," \u2014 "),fW=n(uPe,"A",{href:!0});var j7t=s(fW);hrr=r(j7t,"ViTForImageClassification"),j7t.forEach(t),prr=r(uPe," (ViT model)"),uPe.forEach(t),Te.forEach(t),urr=i(pa),K6=n(pa,"P",{});var _Pe=s(K6);_rr=r(_Pe,"The model is set in evaluation mode by default using "),M2e=n(_Pe,"CODE",{});var D7t=s(M2e);brr=r(D7t,"model.eval()"),D7t.forEach(t),vrr=r(_Pe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E2e=n(_Pe,"CODE",{});var G7t=s(E2e);Frr=r(G7t,"model.train()"),G7t.forEach(t),_Pe.forEach(t),Trr=i(pa),T(Z6.$$.fragment,pa),pa.forEach(t),ll.forEach(t),QGe=i(f),ud=n(f,"H2",{class:!0});var ZVe=s(ud);eT=n(ZVe,"A",{id:!0,class:!0,href:!0});var O7t=s(eT);C2e=n(O7t,"SPAN",{});var V7t=s(C2e);T(ey.$$.fragment,V7t),V7t.forEach(t),O7t.forEach(t),Mrr=i(ZVe),w2e=n(ZVe,"SPAN",{});var X7t=s(w2e);Err=r(X7t,"AutoModelForVision2Seq"),X7t.forEach(t),ZVe.forEach(t),HGe=i(f),Go=n(f,"DIV",{class:!0});var il=s(Go);T(oy.$$.fragment,il),Crr=i(il),_d=n(il,"P",{});var woe=s(_d);wrr=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mW=n(woe,"A",{href:!0});var z7t=s(mW);Arr=r(z7t,"from_pretrained()"),z7t.forEach(t),Lrr=r(woe," class method or the "),gW=n(woe,"A",{href:!0});var W7t=s(gW);yrr=r(W7t,"from_config()"),W7t.forEach(t),xrr=r(woe,` class
method.`),woe.forEach(t),$rr=i(il),ry=n(il,"P",{});var eXe=s(ry);krr=r(eXe,"This class cannot be instantiated directly using "),A2e=n(eXe,"CODE",{});var Q7t=s(A2e);Srr=r(Q7t,"__init__()"),Q7t.forEach(t),Rrr=r(eXe," (throws an error)."),eXe.forEach(t),Prr=i(il),bt=n(il,"DIV",{class:!0});var H0=s(bt);T(ty.$$.fragment,H0),Brr=i(H0),L2e=n(H0,"P",{});var H7t=s(L2e);Irr=r(H7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),H7t.forEach(t),Nrr=i(H0),bd=n(H0,"P",{});var Aoe=s(bd);qrr=r(Aoe,`Note:
Loading a model from its configuration file does `),y2e=n(Aoe,"STRONG",{});var U7t=s(y2e);jrr=r(U7t,"not"),U7t.forEach(t),Drr=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=n(Aoe,"A",{href:!0});var J7t=s(hW);Grr=r(J7t,"from_pretrained()"),J7t.forEach(t),Orr=r(Aoe," to load the model weights."),Aoe.forEach(t),Vrr=i(H0),T(oT.$$.fragment,H0),H0.forEach(t),Xrr=i(il),io=n(il,"DIV",{class:!0});var ua=s(io);T(ay.$$.fragment,ua),zrr=i(ua),x2e=n(ua,"P",{});var Y7t=s(x2e);Wrr=r(Y7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Y7t.forEach(t),Qrr=i(ua),Xa=n(ua,"P",{});var U0=s(Xa);Hrr=r(U0,"The model class to instantiate is selected based on the "),$2e=n(U0,"CODE",{});var K7t=s($2e);Urr=r(K7t,"model_type"),K7t.forEach(t),Jrr=r(U0,` property of the config object (either
passed as an argument or loaded from `),k2e=n(U0,"CODE",{});var Z7t=s(k2e);Yrr=r(Z7t,"pretrained_model_name_or_path"),Z7t.forEach(t),Krr=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=n(U0,"CODE",{});var e8t=s(S2e);Zrr=r(e8t,"pretrained_model_name_or_path"),e8t.forEach(t),etr=r(U0,":"),U0.forEach(t),otr=i(ua),R2e=n(ua,"UL",{});var o8t=s(R2e);rT=n(o8t,"LI",{});var bPe=s(rT);P2e=n(bPe,"STRONG",{});var r8t=s(P2e);rtr=r(r8t,"vision-encoder-decoder"),r8t.forEach(t),ttr=r(bPe," \u2014 "),pW=n(bPe,"A",{href:!0});var t8t=s(pW);atr=r(t8t,"VisionEncoderDecoderModel"),t8t.forEach(t),ntr=r(bPe," (Vision Encoder decoder model)"),bPe.forEach(t),o8t.forEach(t),str=i(ua),tT=n(ua,"P",{});var vPe=s(tT);ltr=r(vPe,"The model is set in evaluation mode by default using "),B2e=n(vPe,"CODE",{});var a8t=s(B2e);itr=r(a8t,"model.eval()"),a8t.forEach(t),dtr=r(vPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=n(vPe,"CODE",{});var n8t=s(I2e);ctr=r(n8t,"model.train()"),n8t.forEach(t),vPe.forEach(t),ftr=i(ua),T(aT.$$.fragment,ua),ua.forEach(t),il.forEach(t),UGe=i(f),vd=n(f,"H2",{class:!0});var oXe=s(vd);nT=n(oXe,"A",{id:!0,class:!0,href:!0});var s8t=s(nT);N2e=n(s8t,"SPAN",{});var l8t=s(N2e);T(ny.$$.fragment,l8t),l8t.forEach(t),s8t.forEach(t),mtr=i(oXe),q2e=n(oXe,"SPAN",{});var i8t=s(q2e);gtr=r(i8t,"AutoModelForVisualQuestionAnswering"),i8t.forEach(t),oXe.forEach(t),JGe=i(f),Oo=n(f,"DIV",{class:!0});var dl=s(Oo);T(sy.$$.fragment,dl),htr=i(dl),Fd=n(dl,"P",{});var Loe=s(Fd);ptr=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),uW=n(Loe,"A",{href:!0});var d8t=s(uW);utr=r(d8t,"from_pretrained()"),d8t.forEach(t),_tr=r(Loe," class method or the "),_W=n(Loe,"A",{href:!0});var c8t=s(_W);btr=r(c8t,"from_config()"),c8t.forEach(t),vtr=r(Loe,` class
method.`),Loe.forEach(t),Ftr=i(dl),ly=n(dl,"P",{});var rXe=s(ly);Ttr=r(rXe,"This class cannot be instantiated directly using "),j2e=n(rXe,"CODE",{});var f8t=s(j2e);Mtr=r(f8t,"__init__()"),f8t.forEach(t),Etr=r(rXe," (throws an error)."),rXe.forEach(t),Ctr=i(dl),vt=n(dl,"DIV",{class:!0});var J0=s(vt);T(iy.$$.fragment,J0),wtr=i(J0),D2e=n(J0,"P",{});var m8t=s(D2e);Atr=r(m8t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),m8t.forEach(t),Ltr=i(J0),Td=n(J0,"P",{});var yoe=s(Td);ytr=r(yoe,`Note:
Loading a model from its configuration file does `),G2e=n(yoe,"STRONG",{});var g8t=s(G2e);xtr=r(g8t,"not"),g8t.forEach(t),$tr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(yoe,"A",{href:!0});var h8t=s(bW);ktr=r(h8t,"from_pretrained()"),h8t.forEach(t),Str=r(yoe," to load the model weights."),yoe.forEach(t),Rtr=i(J0),T(sT.$$.fragment,J0),J0.forEach(t),Ptr=i(dl),co=n(dl,"DIV",{class:!0});var _a=s(co);T(dy.$$.fragment,_a),Btr=i(_a),O2e=n(_a,"P",{});var p8t=s(O2e);Itr=r(p8t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),p8t.forEach(t),Ntr=i(_a),za=n(_a,"P",{});var Y0=s(za);qtr=r(Y0,"The model class to instantiate is selected based on the "),V2e=n(Y0,"CODE",{});var u8t=s(V2e);jtr=r(u8t,"model_type"),u8t.forEach(t),Dtr=r(Y0,` property of the config object (either
passed as an argument or loaded from `),X2e=n(Y0,"CODE",{});var _8t=s(X2e);Gtr=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),Otr=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(Y0,"CODE",{});var b8t=s(z2e);Vtr=r(b8t,"pretrained_model_name_or_path"),b8t.forEach(t),Xtr=r(Y0,":"),Y0.forEach(t),ztr=i(_a),W2e=n(_a,"UL",{});var v8t=s(W2e);lT=n(v8t,"LI",{});var FPe=s(lT);Q2e=n(FPe,"STRONG",{});var F8t=s(Q2e);Wtr=r(F8t,"vilt"),F8t.forEach(t),Qtr=r(FPe," \u2014 "),vW=n(FPe,"A",{href:!0});var T8t=s(vW);Htr=r(T8t,"ViltForQuestionAnswering"),T8t.forEach(t),Utr=r(FPe," (ViLT model)"),FPe.forEach(t),v8t.forEach(t),Jtr=i(_a),iT=n(_a,"P",{});var TPe=s(iT);Ytr=r(TPe,"The model is set in evaluation mode by default using "),H2e=n(TPe,"CODE",{});var M8t=s(H2e);Ktr=r(M8t,"model.eval()"),M8t.forEach(t),Ztr=r(TPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=n(TPe,"CODE",{});var E8t=s(U2e);ear=r(E8t,"model.train()"),E8t.forEach(t),TPe.forEach(t),oar=i(_a),T(dT.$$.fragment,_a),_a.forEach(t),dl.forEach(t),YGe=i(f),Md=n(f,"H2",{class:!0});var tXe=s(Md);cT=n(tXe,"A",{id:!0,class:!0,href:!0});var C8t=s(cT);J2e=n(C8t,"SPAN",{});var w8t=s(J2e);T(cy.$$.fragment,w8t),w8t.forEach(t),C8t.forEach(t),rar=i(tXe),Y2e=n(tXe,"SPAN",{});var A8t=s(Y2e);tar=r(A8t,"AutoModelForAudioClassification"),A8t.forEach(t),tXe.forEach(t),KGe=i(f),Vo=n(f,"DIV",{class:!0});var cl=s(Vo);T(fy.$$.fragment,cl),aar=i(cl),Ed=n(cl,"P",{});var xoe=s(Ed);nar=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),FW=n(xoe,"A",{href:!0});var L8t=s(FW);sar=r(L8t,"from_pretrained()"),L8t.forEach(t),lar=r(xoe," class method or the "),TW=n(xoe,"A",{href:!0});var y8t=s(TW);iar=r(y8t,"from_config()"),y8t.forEach(t),dar=r(xoe,` class
method.`),xoe.forEach(t),car=i(cl),my=n(cl,"P",{});var aXe=s(my);far=r(aXe,"This class cannot be instantiated directly using "),K2e=n(aXe,"CODE",{});var x8t=s(K2e);mar=r(x8t,"__init__()"),x8t.forEach(t),gar=r(aXe," (throws an error)."),aXe.forEach(t),har=i(cl),Ft=n(cl,"DIV",{class:!0});var K0=s(Ft);T(gy.$$.fragment,K0),par=i(K0),Z2e=n(K0,"P",{});var $8t=s(Z2e);uar=r($8t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),$8t.forEach(t),_ar=i(K0),Cd=n(K0,"P",{});var $oe=s(Cd);bar=r($oe,`Note:
Loading a model from its configuration file does `),e1e=n($oe,"STRONG",{});var k8t=s(e1e);Far=r(k8t,"not"),k8t.forEach(t),Tar=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n($oe,"A",{href:!0});var S8t=s(MW);Mar=r(S8t,"from_pretrained()"),S8t.forEach(t),Ear=r($oe," to load the model weights."),$oe.forEach(t),Car=i(K0),T(fT.$$.fragment,K0),K0.forEach(t),war=i(cl),fo=n(cl,"DIV",{class:!0});var ba=s(fo);T(hy.$$.fragment,ba),Aar=i(ba),o1e=n(ba,"P",{});var R8t=s(o1e);Lar=r(R8t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),R8t.forEach(t),yar=i(ba),Wa=n(ba,"P",{});var Z0=s(Wa);xar=r(Z0,"The model class to instantiate is selected based on the "),r1e=n(Z0,"CODE",{});var P8t=s(r1e);$ar=r(P8t,"model_type"),P8t.forEach(t),kar=r(Z0,` property of the config object (either
passed as an argument or loaded from `),t1e=n(Z0,"CODE",{});var B8t=s(t1e);Sar=r(B8t,"pretrained_model_name_or_path"),B8t.forEach(t),Rar=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(Z0,"CODE",{});var I8t=s(a1e);Par=r(I8t,"pretrained_model_name_or_path"),I8t.forEach(t),Bar=r(Z0,":"),Z0.forEach(t),Iar=i(ba),Pe=n(ba,"UL",{});var ze=s(Pe);mT=n(ze,"LI",{});var MPe=s(mT);n1e=n(MPe,"STRONG",{});var N8t=s(n1e);Nar=r(N8t,"data2vec-audio"),N8t.forEach(t),qar=r(MPe," \u2014 "),EW=n(MPe,"A",{href:!0});var q8t=s(EW);jar=r(q8t,"Data2VecAudioForSequenceClassification"),q8t.forEach(t),Dar=r(MPe," (Data2VecAudio model)"),MPe.forEach(t),Gar=i(ze),gT=n(ze,"LI",{});var EPe=s(gT);s1e=n(EPe,"STRONG",{});var j8t=s(s1e);Oar=r(j8t,"hubert"),j8t.forEach(t),Var=r(EPe," \u2014 "),CW=n(EPe,"A",{href:!0});var D8t=s(CW);Xar=r(D8t,"HubertForSequenceClassification"),D8t.forEach(t),zar=r(EPe," (Hubert model)"),EPe.forEach(t),War=i(ze),hT=n(ze,"LI",{});var CPe=s(hT);l1e=n(CPe,"STRONG",{});var G8t=s(l1e);Qar=r(G8t,"sew"),G8t.forEach(t),Har=r(CPe," \u2014 "),wW=n(CPe,"A",{href:!0});var O8t=s(wW);Uar=r(O8t,"SEWForSequenceClassification"),O8t.forEach(t),Jar=r(CPe," (SEW model)"),CPe.forEach(t),Yar=i(ze),pT=n(ze,"LI",{});var wPe=s(pT);i1e=n(wPe,"STRONG",{});var V8t=s(i1e);Kar=r(V8t,"sew-d"),V8t.forEach(t),Zar=r(wPe," \u2014 "),AW=n(wPe,"A",{href:!0});var X8t=s(AW);enr=r(X8t,"SEWDForSequenceClassification"),X8t.forEach(t),onr=r(wPe," (SEW-D model)"),wPe.forEach(t),rnr=i(ze),uT=n(ze,"LI",{});var APe=s(uT);d1e=n(APe,"STRONG",{});var z8t=s(d1e);tnr=r(z8t,"unispeech"),z8t.forEach(t),anr=r(APe," \u2014 "),LW=n(APe,"A",{href:!0});var W8t=s(LW);nnr=r(W8t,"UniSpeechForSequenceClassification"),W8t.forEach(t),snr=r(APe," (UniSpeech model)"),APe.forEach(t),lnr=i(ze),_T=n(ze,"LI",{});var LPe=s(_T);c1e=n(LPe,"STRONG",{});var Q8t=s(c1e);inr=r(Q8t,"unispeech-sat"),Q8t.forEach(t),dnr=r(LPe," \u2014 "),yW=n(LPe,"A",{href:!0});var H8t=s(yW);cnr=r(H8t,"UniSpeechSatForSequenceClassification"),H8t.forEach(t),fnr=r(LPe," (UniSpeechSat model)"),LPe.forEach(t),mnr=i(ze),bT=n(ze,"LI",{});var yPe=s(bT);f1e=n(yPe,"STRONG",{});var U8t=s(f1e);gnr=r(U8t,"wav2vec2"),U8t.forEach(t),hnr=r(yPe," \u2014 "),xW=n(yPe,"A",{href:!0});var J8t=s(xW);pnr=r(J8t,"Wav2Vec2ForSequenceClassification"),J8t.forEach(t),unr=r(yPe," (Wav2Vec2 model)"),yPe.forEach(t),_nr=i(ze),vT=n(ze,"LI",{});var xPe=s(vT);m1e=n(xPe,"STRONG",{});var Y8t=s(m1e);bnr=r(Y8t,"wav2vec2-conformer"),Y8t.forEach(t),vnr=r(xPe," \u2014 "),$W=n(xPe,"A",{href:!0});var K8t=s($W);Fnr=r(K8t,"Wav2Vec2ConformerForSequenceClassification"),K8t.forEach(t),Tnr=r(xPe," (Wav2Vec2-Conformer model)"),xPe.forEach(t),Mnr=i(ze),FT=n(ze,"LI",{});var $Pe=s(FT);g1e=n($Pe,"STRONG",{});var Z8t=s(g1e);Enr=r(Z8t,"wavlm"),Z8t.forEach(t),Cnr=r($Pe," \u2014 "),kW=n($Pe,"A",{href:!0});var eMt=s(kW);wnr=r(eMt,"WavLMForSequenceClassification"),eMt.forEach(t),Anr=r($Pe," (WavLM model)"),$Pe.forEach(t),ze.forEach(t),Lnr=i(ba),TT=n(ba,"P",{});var kPe=s(TT);ynr=r(kPe,"The model is set in evaluation mode by default using "),h1e=n(kPe,"CODE",{});var oMt=s(h1e);xnr=r(oMt,"model.eval()"),oMt.forEach(t),$nr=r(kPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=n(kPe,"CODE",{});var rMt=s(p1e);knr=r(rMt,"model.train()"),rMt.forEach(t),kPe.forEach(t),Snr=i(ba),T(MT.$$.fragment,ba),ba.forEach(t),cl.forEach(t),ZGe=i(f),wd=n(f,"H2",{class:!0});var nXe=s(wd);ET=n(nXe,"A",{id:!0,class:!0,href:!0});var tMt=s(ET);u1e=n(tMt,"SPAN",{});var aMt=s(u1e);T(py.$$.fragment,aMt),aMt.forEach(t),tMt.forEach(t),Rnr=i(nXe),_1e=n(nXe,"SPAN",{});var nMt=s(_1e);Pnr=r(nMt,"AutoModelForAudioFrameClassification"),nMt.forEach(t),nXe.forEach(t),eOe=i(f),Xo=n(f,"DIV",{class:!0});var fl=s(Xo);T(uy.$$.fragment,fl),Bnr=i(fl),Ad=n(fl,"P",{});var koe=s(Ad);Inr=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),SW=n(koe,"A",{href:!0});var sMt=s(SW);Nnr=r(sMt,"from_pretrained()"),sMt.forEach(t),qnr=r(koe," class method or the "),RW=n(koe,"A",{href:!0});var lMt=s(RW);jnr=r(lMt,"from_config()"),lMt.forEach(t),Dnr=r(koe,` class
method.`),koe.forEach(t),Gnr=i(fl),_y=n(fl,"P",{});var sXe=s(_y);Onr=r(sXe,"This class cannot be instantiated directly using "),b1e=n(sXe,"CODE",{});var iMt=s(b1e);Vnr=r(iMt,"__init__()"),iMt.forEach(t),Xnr=r(sXe," (throws an error)."),sXe.forEach(t),znr=i(fl),Tt=n(fl,"DIV",{class:!0});var ew=s(Tt);T(by.$$.fragment,ew),Wnr=i(ew),v1e=n(ew,"P",{});var dMt=s(v1e);Qnr=r(dMt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),dMt.forEach(t),Hnr=i(ew),Ld=n(ew,"P",{});var Soe=s(Ld);Unr=r(Soe,`Note:
Loading a model from its configuration file does `),F1e=n(Soe,"STRONG",{});var cMt=s(F1e);Jnr=r(cMt,"not"),cMt.forEach(t),Ynr=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(Soe,"A",{href:!0});var fMt=s(PW);Knr=r(fMt,"from_pretrained()"),fMt.forEach(t),Znr=r(Soe," to load the model weights."),Soe.forEach(t),esr=i(ew),T(CT.$$.fragment,ew),ew.forEach(t),osr=i(fl),mo=n(fl,"DIV",{class:!0});var va=s(mo);T(vy.$$.fragment,va),rsr=i(va),T1e=n(va,"P",{});var mMt=s(T1e);tsr=r(mMt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),mMt.forEach(t),asr=i(va),Qa=n(va,"P",{});var ow=s(Qa);nsr=r(ow,"The model class to instantiate is selected based on the "),M1e=n(ow,"CODE",{});var gMt=s(M1e);ssr=r(gMt,"model_type"),gMt.forEach(t),lsr=r(ow,` property of the config object (either
passed as an argument or loaded from `),E1e=n(ow,"CODE",{});var hMt=s(E1e);isr=r(hMt,"pretrained_model_name_or_path"),hMt.forEach(t),dsr=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(ow,"CODE",{});var pMt=s(C1e);csr=r(pMt,"pretrained_model_name_or_path"),pMt.forEach(t),fsr=r(ow,":"),ow.forEach(t),msr=i(va),et=n(va,"UL",{});var ml=s(et);wT=n(ml,"LI",{});var SPe=s(wT);w1e=n(SPe,"STRONG",{});var uMt=s(w1e);gsr=r(uMt,"data2vec-audio"),uMt.forEach(t),hsr=r(SPe," \u2014 "),BW=n(SPe,"A",{href:!0});var _Mt=s(BW);psr=r(_Mt,"Data2VecAudioForAudioFrameClassification"),_Mt.forEach(t),usr=r(SPe," (Data2VecAudio model)"),SPe.forEach(t),_sr=i(ml),AT=n(ml,"LI",{});var RPe=s(AT);A1e=n(RPe,"STRONG",{});var bMt=s(A1e);bsr=r(bMt,"unispeech-sat"),bMt.forEach(t),vsr=r(RPe," \u2014 "),IW=n(RPe,"A",{href:!0});var vMt=s(IW);Fsr=r(vMt,"UniSpeechSatForAudioFrameClassification"),vMt.forEach(t),Tsr=r(RPe," (UniSpeechSat model)"),RPe.forEach(t),Msr=i(ml),LT=n(ml,"LI",{});var PPe=s(LT);L1e=n(PPe,"STRONG",{});var FMt=s(L1e);Esr=r(FMt,"wav2vec2"),FMt.forEach(t),Csr=r(PPe," \u2014 "),NW=n(PPe,"A",{href:!0});var TMt=s(NW);wsr=r(TMt,"Wav2Vec2ForAudioFrameClassification"),TMt.forEach(t),Asr=r(PPe," (Wav2Vec2 model)"),PPe.forEach(t),Lsr=i(ml),yT=n(ml,"LI",{});var BPe=s(yT);y1e=n(BPe,"STRONG",{});var MMt=s(y1e);ysr=r(MMt,"wav2vec2-conformer"),MMt.forEach(t),xsr=r(BPe," \u2014 "),qW=n(BPe,"A",{href:!0});var EMt=s(qW);$sr=r(EMt,"Wav2Vec2ConformerForAudioFrameClassification"),EMt.forEach(t),ksr=r(BPe," (Wav2Vec2-Conformer model)"),BPe.forEach(t),Ssr=i(ml),xT=n(ml,"LI",{});var IPe=s(xT);x1e=n(IPe,"STRONG",{});var CMt=s(x1e);Rsr=r(CMt,"wavlm"),CMt.forEach(t),Psr=r(IPe," \u2014 "),jW=n(IPe,"A",{href:!0});var wMt=s(jW);Bsr=r(wMt,"WavLMForAudioFrameClassification"),wMt.forEach(t),Isr=r(IPe," (WavLM model)"),IPe.forEach(t),ml.forEach(t),Nsr=i(va),$T=n(va,"P",{});var NPe=s($T);qsr=r(NPe,"The model is set in evaluation mode by default using "),$1e=n(NPe,"CODE",{});var AMt=s($1e);jsr=r(AMt,"model.eval()"),AMt.forEach(t),Dsr=r(NPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k1e=n(NPe,"CODE",{});var LMt=s(k1e);Gsr=r(LMt,"model.train()"),LMt.forEach(t),NPe.forEach(t),Osr=i(va),T(kT.$$.fragment,va),va.forEach(t),fl.forEach(t),oOe=i(f),yd=n(f,"H2",{class:!0});var lXe=s(yd);ST=n(lXe,"A",{id:!0,class:!0,href:!0});var yMt=s(ST);S1e=n(yMt,"SPAN",{});var xMt=s(S1e);T(Fy.$$.fragment,xMt),xMt.forEach(t),yMt.forEach(t),Vsr=i(lXe),R1e=n(lXe,"SPAN",{});var $Mt=s(R1e);Xsr=r($Mt,"AutoModelForCTC"),$Mt.forEach(t),lXe.forEach(t),rOe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(Ty.$$.fragment,gl),zsr=i(gl),xd=n(gl,"P",{});var Roe=s(xd);Wsr=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),DW=n(Roe,"A",{href:!0});var kMt=s(DW);Qsr=r(kMt,"from_pretrained()"),kMt.forEach(t),Hsr=r(Roe," class method or the "),GW=n(Roe,"A",{href:!0});var SMt=s(GW);Usr=r(SMt,"from_config()"),SMt.forEach(t),Jsr=r(Roe,` class
method.`),Roe.forEach(t),Ysr=i(gl),My=n(gl,"P",{});var iXe=s(My);Ksr=r(iXe,"This class cannot be instantiated directly using "),P1e=n(iXe,"CODE",{});var RMt=s(P1e);Zsr=r(RMt,"__init__()"),RMt.forEach(t),elr=r(iXe," (throws an error)."),iXe.forEach(t),olr=i(gl),Mt=n(gl,"DIV",{class:!0});var rw=s(Mt);T(Ey.$$.fragment,rw),rlr=i(rw),B1e=n(rw,"P",{});var PMt=s(B1e);tlr=r(PMt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),PMt.forEach(t),alr=i(rw),$d=n(rw,"P",{});var Poe=s($d);nlr=r(Poe,`Note:
Loading a model from its configuration file does `),I1e=n(Poe,"STRONG",{});var BMt=s(I1e);slr=r(BMt,"not"),BMt.forEach(t),llr=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(Poe,"A",{href:!0});var IMt=s(OW);ilr=r(IMt,"from_pretrained()"),IMt.forEach(t),dlr=r(Poe," to load the model weights."),Poe.forEach(t),clr=i(rw),T(RT.$$.fragment,rw),rw.forEach(t),flr=i(gl),go=n(gl,"DIV",{class:!0});var Fa=s(go);T(Cy.$$.fragment,Fa),mlr=i(Fa),N1e=n(Fa,"P",{});var NMt=s(N1e);glr=r(NMt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),NMt.forEach(t),hlr=i(Fa),Ha=n(Fa,"P",{});var tw=s(Ha);plr=r(tw,"The model class to instantiate is selected based on the "),q1e=n(tw,"CODE",{});var qMt=s(q1e);ulr=r(qMt,"model_type"),qMt.forEach(t),_lr=r(tw,` property of the config object (either
passed as an argument or loaded from `),j1e=n(tw,"CODE",{});var jMt=s(j1e);blr=r(jMt,"pretrained_model_name_or_path"),jMt.forEach(t),vlr=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=n(tw,"CODE",{});var DMt=s(D1e);Flr=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),Tlr=r(tw,":"),tw.forEach(t),Mlr=i(Fa),Le=n(Fa,"UL",{});var Be=s(Le);PT=n(Be,"LI",{});var qPe=s(PT);G1e=n(qPe,"STRONG",{});var GMt=s(G1e);Elr=r(GMt,"data2vec-audio"),GMt.forEach(t),Clr=r(qPe," \u2014 "),VW=n(qPe,"A",{href:!0});var OMt=s(VW);wlr=r(OMt,"Data2VecAudioForCTC"),OMt.forEach(t),Alr=r(qPe," (Data2VecAudio model)"),qPe.forEach(t),Llr=i(Be),BT=n(Be,"LI",{});var jPe=s(BT);O1e=n(jPe,"STRONG",{});var VMt=s(O1e);ylr=r(VMt,"hubert"),VMt.forEach(t),xlr=r(jPe," \u2014 "),XW=n(jPe,"A",{href:!0});var XMt=s(XW);$lr=r(XMt,"HubertForCTC"),XMt.forEach(t),klr=r(jPe," (Hubert model)"),jPe.forEach(t),Slr=i(Be),IT=n(Be,"LI",{});var DPe=s(IT);V1e=n(DPe,"STRONG",{});var zMt=s(V1e);Rlr=r(zMt,"mctct"),zMt.forEach(t),Plr=r(DPe," \u2014 "),zW=n(DPe,"A",{href:!0});var WMt=s(zW);Blr=r(WMt,"MCTCTForCTC"),WMt.forEach(t),Ilr=r(DPe," (M-CTC-T model)"),DPe.forEach(t),Nlr=i(Be),NT=n(Be,"LI",{});var GPe=s(NT);X1e=n(GPe,"STRONG",{});var QMt=s(X1e);qlr=r(QMt,"sew"),QMt.forEach(t),jlr=r(GPe," \u2014 "),WW=n(GPe,"A",{href:!0});var HMt=s(WW);Dlr=r(HMt,"SEWForCTC"),HMt.forEach(t),Glr=r(GPe," (SEW model)"),GPe.forEach(t),Olr=i(Be),qT=n(Be,"LI",{});var OPe=s(qT);z1e=n(OPe,"STRONG",{});var UMt=s(z1e);Vlr=r(UMt,"sew-d"),UMt.forEach(t),Xlr=r(OPe," \u2014 "),QW=n(OPe,"A",{href:!0});var JMt=s(QW);zlr=r(JMt,"SEWDForCTC"),JMt.forEach(t),Wlr=r(OPe," (SEW-D model)"),OPe.forEach(t),Qlr=i(Be),jT=n(Be,"LI",{});var VPe=s(jT);W1e=n(VPe,"STRONG",{});var YMt=s(W1e);Hlr=r(YMt,"unispeech"),YMt.forEach(t),Ulr=r(VPe," \u2014 "),HW=n(VPe,"A",{href:!0});var KMt=s(HW);Jlr=r(KMt,"UniSpeechForCTC"),KMt.forEach(t),Ylr=r(VPe," (UniSpeech model)"),VPe.forEach(t),Klr=i(Be),DT=n(Be,"LI",{});var XPe=s(DT);Q1e=n(XPe,"STRONG",{});var ZMt=s(Q1e);Zlr=r(ZMt,"unispeech-sat"),ZMt.forEach(t),eir=r(XPe," \u2014 "),UW=n(XPe,"A",{href:!0});var eEt=s(UW);oir=r(eEt,"UniSpeechSatForCTC"),eEt.forEach(t),rir=r(XPe," (UniSpeechSat model)"),XPe.forEach(t),tir=i(Be),GT=n(Be,"LI",{});var zPe=s(GT);H1e=n(zPe,"STRONG",{});var oEt=s(H1e);air=r(oEt,"wav2vec2"),oEt.forEach(t),nir=r(zPe," \u2014 "),JW=n(zPe,"A",{href:!0});var rEt=s(JW);sir=r(rEt,"Wav2Vec2ForCTC"),rEt.forEach(t),lir=r(zPe," (Wav2Vec2 model)"),zPe.forEach(t),iir=i(Be),OT=n(Be,"LI",{});var WPe=s(OT);U1e=n(WPe,"STRONG",{});var tEt=s(U1e);dir=r(tEt,"wav2vec2-conformer"),tEt.forEach(t),cir=r(WPe," \u2014 "),YW=n(WPe,"A",{href:!0});var aEt=s(YW);fir=r(aEt,"Wav2Vec2ConformerForCTC"),aEt.forEach(t),mir=r(WPe," (Wav2Vec2-Conformer model)"),WPe.forEach(t),gir=i(Be),VT=n(Be,"LI",{});var QPe=s(VT);J1e=n(QPe,"STRONG",{});var nEt=s(J1e);hir=r(nEt,"wavlm"),nEt.forEach(t),pir=r(QPe," \u2014 "),KW=n(QPe,"A",{href:!0});var sEt=s(KW);uir=r(sEt,"WavLMForCTC"),sEt.forEach(t),_ir=r(QPe," (WavLM model)"),QPe.forEach(t),Be.forEach(t),bir=i(Fa),XT=n(Fa,"P",{});var HPe=s(XT);vir=r(HPe,"The model is set in evaluation mode by default using "),Y1e=n(HPe,"CODE",{});var lEt=s(Y1e);Fir=r(lEt,"model.eval()"),lEt.forEach(t),Tir=r(HPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=n(HPe,"CODE",{});var iEt=s(K1e);Mir=r(iEt,"model.train()"),iEt.forEach(t),HPe.forEach(t),Eir=i(Fa),T(zT.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),tOe=i(f),kd=n(f,"H2",{class:!0});var dXe=s(kd);WT=n(dXe,"A",{id:!0,class:!0,href:!0});var dEt=s(WT);Z1e=n(dEt,"SPAN",{});var cEt=s(Z1e);T(wy.$$.fragment,cEt),cEt.forEach(t),dEt.forEach(t),Cir=i(dXe),ebe=n(dXe,"SPAN",{});var fEt=s(ebe);wir=r(fEt,"AutoModelForSpeechSeq2Seq"),fEt.forEach(t),dXe.forEach(t),aOe=i(f),Wo=n(f,"DIV",{class:!0});var hl=s(Wo);T(Ay.$$.fragment,hl),Air=i(hl),Sd=n(hl,"P",{});var Boe=s(Sd);Lir=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZW=n(Boe,"A",{href:!0});var mEt=s(ZW);yir=r(mEt,"from_pretrained()"),mEt.forEach(t),xir=r(Boe," class method or the "),eQ=n(Boe,"A",{href:!0});var gEt=s(eQ);$ir=r(gEt,"from_config()"),gEt.forEach(t),kir=r(Boe,` class
method.`),Boe.forEach(t),Sir=i(hl),Ly=n(hl,"P",{});var cXe=s(Ly);Rir=r(cXe,"This class cannot be instantiated directly using "),obe=n(cXe,"CODE",{});var hEt=s(obe);Pir=r(hEt,"__init__()"),hEt.forEach(t),Bir=r(cXe," (throws an error)."),cXe.forEach(t),Iir=i(hl),Et=n(hl,"DIV",{class:!0});var aw=s(Et);T(yy.$$.fragment,aw),Nir=i(aw),rbe=n(aw,"P",{});var pEt=s(rbe);qir=r(pEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pEt.forEach(t),jir=i(aw),Rd=n(aw,"P",{});var Ioe=s(Rd);Dir=r(Ioe,`Note:
Loading a model from its configuration file does `),tbe=n(Ioe,"STRONG",{});var uEt=s(tbe);Gir=r(uEt,"not"),uEt.forEach(t),Oir=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=n(Ioe,"A",{href:!0});var _Et=s(oQ);Vir=r(_Et,"from_pretrained()"),_Et.forEach(t),Xir=r(Ioe," to load the model weights."),Ioe.forEach(t),zir=i(aw),T(QT.$$.fragment,aw),aw.forEach(t),Wir=i(hl),ho=n(hl,"DIV",{class:!0});var Ta=s(ho);T(xy.$$.fragment,Ta),Qir=i(Ta),abe=n(Ta,"P",{});var bEt=s(abe);Hir=r(bEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),bEt.forEach(t),Uir=i(Ta),Ua=n(Ta,"P",{});var nw=s(Ua);Jir=r(nw,"The model class to instantiate is selected based on the "),nbe=n(nw,"CODE",{});var vEt=s(nbe);Yir=r(vEt,"model_type"),vEt.forEach(t),Kir=r(nw,` property of the config object (either
passed as an argument or loaded from `),sbe=n(nw,"CODE",{});var FEt=s(sbe);Zir=r(FEt,"pretrained_model_name_or_path"),FEt.forEach(t),edr=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n(nw,"CODE",{});var TEt=s(lbe);odr=r(TEt,"pretrained_model_name_or_path"),TEt.forEach(t),rdr=r(nw,":"),nw.forEach(t),tdr=i(Ta),$y=n(Ta,"UL",{});var fXe=s($y);HT=n(fXe,"LI",{});var UPe=s(HT);ibe=n(UPe,"STRONG",{});var MEt=s(ibe);adr=r(MEt,"speech-encoder-decoder"),MEt.forEach(t),ndr=r(UPe," \u2014 "),rQ=n(UPe,"A",{href:!0});var EEt=s(rQ);sdr=r(EEt,"SpeechEncoderDecoderModel"),EEt.forEach(t),ldr=r(UPe," (Speech Encoder decoder model)"),UPe.forEach(t),idr=i(fXe),UT=n(fXe,"LI",{});var JPe=s(UT);dbe=n(JPe,"STRONG",{});var CEt=s(dbe);ddr=r(CEt,"speech_to_text"),CEt.forEach(t),cdr=r(JPe," \u2014 "),tQ=n(JPe,"A",{href:!0});var wEt=s(tQ);fdr=r(wEt,"Speech2TextForConditionalGeneration"),wEt.forEach(t),mdr=r(JPe," (Speech2Text model)"),JPe.forEach(t),fXe.forEach(t),gdr=i(Ta),JT=n(Ta,"P",{});var YPe=s(JT);hdr=r(YPe,"The model is set in evaluation mode by default using "),cbe=n(YPe,"CODE",{});var AEt=s(cbe);pdr=r(AEt,"model.eval()"),AEt.forEach(t),udr=r(YPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fbe=n(YPe,"CODE",{});var LEt=s(fbe);_dr=r(LEt,"model.train()"),LEt.forEach(t),YPe.forEach(t),bdr=i(Ta),T(YT.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),nOe=i(f),Pd=n(f,"H2",{class:!0});var mXe=s(Pd);KT=n(mXe,"A",{id:!0,class:!0,href:!0});var yEt=s(KT);mbe=n(yEt,"SPAN",{});var xEt=s(mbe);T(ky.$$.fragment,xEt),xEt.forEach(t),yEt.forEach(t),vdr=i(mXe),gbe=n(mXe,"SPAN",{});var $Et=s(gbe);Fdr=r($Et,"AutoModelForAudioXVector"),$Et.forEach(t),mXe.forEach(t),sOe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(Sy.$$.fragment,pl),Tdr=i(pl),Bd=n(pl,"P",{});var Noe=s(Bd);Mdr=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),aQ=n(Noe,"A",{href:!0});var kEt=s(aQ);Edr=r(kEt,"from_pretrained()"),kEt.forEach(t),Cdr=r(Noe," class method or the "),nQ=n(Noe,"A",{href:!0});var SEt=s(nQ);wdr=r(SEt,"from_config()"),SEt.forEach(t),Adr=r(Noe,` class
method.`),Noe.forEach(t),Ldr=i(pl),Ry=n(pl,"P",{});var gXe=s(Ry);ydr=r(gXe,"This class cannot be instantiated directly using "),hbe=n(gXe,"CODE",{});var REt=s(hbe);xdr=r(REt,"__init__()"),REt.forEach(t),$dr=r(gXe," (throws an error)."),gXe.forEach(t),kdr=i(pl),Ct=n(pl,"DIV",{class:!0});var sw=s(Ct);T(Py.$$.fragment,sw),Sdr=i(sw),pbe=n(sw,"P",{});var PEt=s(pbe);Rdr=r(PEt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),PEt.forEach(t),Pdr=i(sw),Id=n(sw,"P",{});var qoe=s(Id);Bdr=r(qoe,`Note:
Loading a model from its configuration file does `),ube=n(qoe,"STRONG",{});var BEt=s(ube);Idr=r(BEt,"not"),BEt.forEach(t),Ndr=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(qoe,"A",{href:!0});var IEt=s(sQ);qdr=r(IEt,"from_pretrained()"),IEt.forEach(t),jdr=r(qoe," to load the model weights."),qoe.forEach(t),Ddr=i(sw),T(ZT.$$.fragment,sw),sw.forEach(t),Gdr=i(pl),po=n(pl,"DIV",{class:!0});var Ma=s(po);T(By.$$.fragment,Ma),Odr=i(Ma),_be=n(Ma,"P",{});var NEt=s(_be);Vdr=r(NEt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),NEt.forEach(t),Xdr=i(Ma),Ja=n(Ma,"P",{});var lw=s(Ja);zdr=r(lw,"The model class to instantiate is selected based on the "),bbe=n(lw,"CODE",{});var qEt=s(bbe);Wdr=r(qEt,"model_type"),qEt.forEach(t),Qdr=r(lw,` property of the config object (either
passed as an argument or loaded from `),vbe=n(lw,"CODE",{});var jEt=s(vbe);Hdr=r(jEt,"pretrained_model_name_or_path"),jEt.forEach(t),Udr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(lw,"CODE",{});var DEt=s(Fbe);Jdr=r(DEt,"pretrained_model_name_or_path"),DEt.forEach(t),Ydr=r(lw,":"),lw.forEach(t),Kdr=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);e7=n(ul,"LI",{});var KPe=s(e7);Tbe=n(KPe,"STRONG",{});var GEt=s(Tbe);Zdr=r(GEt,"data2vec-audio"),GEt.forEach(t),ecr=r(KPe," \u2014 "),lQ=n(KPe,"A",{href:!0});var OEt=s(lQ);ocr=r(OEt,"Data2VecAudioForXVector"),OEt.forEach(t),rcr=r(KPe," (Data2VecAudio model)"),KPe.forEach(t),tcr=i(ul),o7=n(ul,"LI",{});var ZPe=s(o7);Mbe=n(ZPe,"STRONG",{});var VEt=s(Mbe);acr=r(VEt,"unispeech-sat"),VEt.forEach(t),ncr=r(ZPe," \u2014 "),iQ=n(ZPe,"A",{href:!0});var XEt=s(iQ);scr=r(XEt,"UniSpeechSatForXVector"),XEt.forEach(t),lcr=r(ZPe," (UniSpeechSat model)"),ZPe.forEach(t),icr=i(ul),r7=n(ul,"LI",{});var eBe=s(r7);Ebe=n(eBe,"STRONG",{});var zEt=s(Ebe);dcr=r(zEt,"wav2vec2"),zEt.forEach(t),ccr=r(eBe," \u2014 "),dQ=n(eBe,"A",{href:!0});var WEt=s(dQ);fcr=r(WEt,"Wav2Vec2ForXVector"),WEt.forEach(t),mcr=r(eBe," (Wav2Vec2 model)"),eBe.forEach(t),gcr=i(ul),t7=n(ul,"LI",{});var oBe=s(t7);Cbe=n(oBe,"STRONG",{});var QEt=s(Cbe);hcr=r(QEt,"wav2vec2-conformer"),QEt.forEach(t),pcr=r(oBe," \u2014 "),cQ=n(oBe,"A",{href:!0});var HEt=s(cQ);ucr=r(HEt,"Wav2Vec2ConformerForXVector"),HEt.forEach(t),_cr=r(oBe," (Wav2Vec2-Conformer model)"),oBe.forEach(t),bcr=i(ul),a7=n(ul,"LI",{});var rBe=s(a7);wbe=n(rBe,"STRONG",{});var UEt=s(wbe);vcr=r(UEt,"wavlm"),UEt.forEach(t),Fcr=r(rBe," \u2014 "),fQ=n(rBe,"A",{href:!0});var JEt=s(fQ);Tcr=r(JEt,"WavLMForXVector"),JEt.forEach(t),Mcr=r(rBe," (WavLM model)"),rBe.forEach(t),ul.forEach(t),Ecr=i(Ma),n7=n(Ma,"P",{});var tBe=s(n7);Ccr=r(tBe,"The model is set in evaluation mode by default using "),Abe=n(tBe,"CODE",{});var YEt=s(Abe);wcr=r(YEt,"model.eval()"),YEt.forEach(t),Acr=r(tBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lbe=n(tBe,"CODE",{});var KEt=s(Lbe);Lcr=r(KEt,"model.train()"),KEt.forEach(t),tBe.forEach(t),ycr=i(Ma),T(s7.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),lOe=i(f),Nd=n(f,"H2",{class:!0});var hXe=s(Nd);l7=n(hXe,"A",{id:!0,class:!0,href:!0});var ZEt=s(l7);ybe=n(ZEt,"SPAN",{});var e4t=s(ybe);T(Iy.$$.fragment,e4t),e4t.forEach(t),ZEt.forEach(t),xcr=i(hXe),xbe=n(hXe,"SPAN",{});var o4t=s(xbe);$cr=r(o4t,"AutoModelForMaskedImageModeling"),o4t.forEach(t),hXe.forEach(t),iOe=i(f),Ho=n(f,"DIV",{class:!0});var _l=s(Ho);T(Ny.$$.fragment,_l),kcr=i(_l),qd=n(_l,"P",{});var joe=s(qd);Scr=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mQ=n(joe,"A",{href:!0});var r4t=s(mQ);Rcr=r(r4t,"from_pretrained()"),r4t.forEach(t),Pcr=r(joe," class method or the "),gQ=n(joe,"A",{href:!0});var t4t=s(gQ);Bcr=r(t4t,"from_config()"),t4t.forEach(t),Icr=r(joe,` class
method.`),joe.forEach(t),Ncr=i(_l),qy=n(_l,"P",{});var pXe=s(qy);qcr=r(pXe,"This class cannot be instantiated directly using "),$be=n(pXe,"CODE",{});var a4t=s($be);jcr=r(a4t,"__init__()"),a4t.forEach(t),Dcr=r(pXe," (throws an error)."),pXe.forEach(t),Gcr=i(_l),wt=n(_l,"DIV",{class:!0});var iw=s(wt);T(jy.$$.fragment,iw),Ocr=i(iw),kbe=n(iw,"P",{});var n4t=s(kbe);Vcr=r(n4t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),n4t.forEach(t),Xcr=i(iw),jd=n(iw,"P",{});var Doe=s(jd);zcr=r(Doe,`Note:
Loading a model from its configuration file does `),Sbe=n(Doe,"STRONG",{});var s4t=s(Sbe);Wcr=r(s4t,"not"),s4t.forEach(t),Qcr=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hQ=n(Doe,"A",{href:!0});var l4t=s(hQ);Hcr=r(l4t,"from_pretrained()"),l4t.forEach(t),Ucr=r(Doe," to load the model weights."),Doe.forEach(t),Jcr=i(iw),T(i7.$$.fragment,iw),iw.forEach(t),Ycr=i(_l),uo=n(_l,"DIV",{class:!0});var Ea=s(uo);T(Dy.$$.fragment,Ea),Kcr=i(Ea),Rbe=n(Ea,"P",{});var i4t=s(Rbe);Zcr=r(i4t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),i4t.forEach(t),efr=i(Ea),Ya=n(Ea,"P",{});var dw=s(Ya);ofr=r(dw,"The model class to instantiate is selected based on the "),Pbe=n(dw,"CODE",{});var d4t=s(Pbe);rfr=r(d4t,"model_type"),d4t.forEach(t),tfr=r(dw,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(dw,"CODE",{});var c4t=s(Bbe);afr=r(c4t,"pretrained_model_name_or_path"),c4t.forEach(t),nfr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=n(dw,"CODE",{});var f4t=s(Ibe);sfr=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),lfr=r(dw,":"),dw.forEach(t),ifr=i(Ea),Dd=n(Ea,"UL",{});var Goe=s(Dd);d7=n(Goe,"LI",{});var aBe=s(d7);Nbe=n(aBe,"STRONG",{});var m4t=s(Nbe);dfr=r(m4t,"deit"),m4t.forEach(t),cfr=r(aBe," \u2014 "),pQ=n(aBe,"A",{href:!0});var g4t=s(pQ);ffr=r(g4t,"DeiTForMaskedImageModeling"),g4t.forEach(t),mfr=r(aBe," (DeiT model)"),aBe.forEach(t),gfr=i(Goe),c7=n(Goe,"LI",{});var nBe=s(c7);qbe=n(nBe,"STRONG",{});var h4t=s(qbe);hfr=r(h4t,"swin"),h4t.forEach(t),pfr=r(nBe," \u2014 "),uQ=n(nBe,"A",{href:!0});var p4t=s(uQ);ufr=r(p4t,"SwinForMaskedImageModeling"),p4t.forEach(t),_fr=r(nBe," (Swin Transformer model)"),nBe.forEach(t),bfr=i(Goe),f7=n(Goe,"LI",{});var sBe=s(f7);jbe=n(sBe,"STRONG",{});var u4t=s(jbe);vfr=r(u4t,"vit"),u4t.forEach(t),Ffr=r(sBe," \u2014 "),_Q=n(sBe,"A",{href:!0});var _4t=s(_Q);Tfr=r(_4t,"ViTForMaskedImageModeling"),_4t.forEach(t),Mfr=r(sBe," (ViT model)"),sBe.forEach(t),Goe.forEach(t),Efr=i(Ea),m7=n(Ea,"P",{});var lBe=s(m7);Cfr=r(lBe,"The model is set in evaluation mode by default using "),Dbe=n(lBe,"CODE",{});var b4t=s(Dbe);wfr=r(b4t,"model.eval()"),b4t.forEach(t),Afr=r(lBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gbe=n(lBe,"CODE",{});var v4t=s(Gbe);Lfr=r(v4t,"model.train()"),v4t.forEach(t),lBe.forEach(t),yfr=i(Ea),T(g7.$$.fragment,Ea),Ea.forEach(t),_l.forEach(t),dOe=i(f),Gd=n(f,"H2",{class:!0});var uXe=s(Gd);h7=n(uXe,"A",{id:!0,class:!0,href:!0});var F4t=s(h7);Obe=n(F4t,"SPAN",{});var T4t=s(Obe);T(Gy.$$.fragment,T4t),T4t.forEach(t),F4t.forEach(t),xfr=i(uXe),Vbe=n(uXe,"SPAN",{});var M4t=s(Vbe);$fr=r(M4t,"AutoModelForObjectDetection"),M4t.forEach(t),uXe.forEach(t),cOe=i(f),Uo=n(f,"DIV",{class:!0});var bl=s(Uo);T(Oy.$$.fragment,bl),kfr=i(bl),Od=n(bl,"P",{});var Ooe=s(Od);Sfr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),bQ=n(Ooe,"A",{href:!0});var E4t=s(bQ);Rfr=r(E4t,"from_pretrained()"),E4t.forEach(t),Pfr=r(Ooe," class method or the "),vQ=n(Ooe,"A",{href:!0});var C4t=s(vQ);Bfr=r(C4t,"from_config()"),C4t.forEach(t),Ifr=r(Ooe,` class
method.`),Ooe.forEach(t),Nfr=i(bl),Vy=n(bl,"P",{});var _Xe=s(Vy);qfr=r(_Xe,"This class cannot be instantiated directly using "),Xbe=n(_Xe,"CODE",{});var w4t=s(Xbe);jfr=r(w4t,"__init__()"),w4t.forEach(t),Dfr=r(_Xe," (throws an error)."),_Xe.forEach(t),Gfr=i(bl),At=n(bl,"DIV",{class:!0});var cw=s(At);T(Xy.$$.fragment,cw),Ofr=i(cw),zbe=n(cw,"P",{});var A4t=s(zbe);Vfr=r(A4t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),A4t.forEach(t),Xfr=i(cw),Vd=n(cw,"P",{});var Voe=s(Vd);zfr=r(Voe,`Note:
Loading a model from its configuration file does `),Wbe=n(Voe,"STRONG",{});var L4t=s(Wbe);Wfr=r(L4t,"not"),L4t.forEach(t),Qfr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(Voe,"A",{href:!0});var y4t=s(FQ);Hfr=r(y4t,"from_pretrained()"),y4t.forEach(t),Ufr=r(Voe," to load the model weights."),Voe.forEach(t),Jfr=i(cw),T(p7.$$.fragment,cw),cw.forEach(t),Yfr=i(bl),_o=n(bl,"DIV",{class:!0});var Ca=s(_o);T(zy.$$.fragment,Ca),Kfr=i(Ca),Qbe=n(Ca,"P",{});var x4t=s(Qbe);Zfr=r(x4t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),x4t.forEach(t),emr=i(Ca),Ka=n(Ca,"P",{});var fw=s(Ka);omr=r(fw,"The model class to instantiate is selected based on the "),Hbe=n(fw,"CODE",{});var $4t=s(Hbe);rmr=r($4t,"model_type"),$4t.forEach(t),tmr=r(fw,` property of the config object (either
passed as an argument or loaded from `),Ube=n(fw,"CODE",{});var k4t=s(Ube);amr=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),nmr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(fw,"CODE",{});var S4t=s(Jbe);smr=r(S4t,"pretrained_model_name_or_path"),S4t.forEach(t),lmr=r(fw,":"),fw.forEach(t),imr=i(Ca),Wy=n(Ca,"UL",{});var bXe=s(Wy);u7=n(bXe,"LI",{});var iBe=s(u7);Ybe=n(iBe,"STRONG",{});var R4t=s(Ybe);dmr=r(R4t,"detr"),R4t.forEach(t),cmr=r(iBe," \u2014 "),TQ=n(iBe,"A",{href:!0});var P4t=s(TQ);fmr=r(P4t,"DetrForObjectDetection"),P4t.forEach(t),mmr=r(iBe," (DETR model)"),iBe.forEach(t),gmr=i(bXe),_7=n(bXe,"LI",{});var dBe=s(_7);Kbe=n(dBe,"STRONG",{});var B4t=s(Kbe);hmr=r(B4t,"yolos"),B4t.forEach(t),pmr=r(dBe," \u2014 "),MQ=n(dBe,"A",{href:!0});var I4t=s(MQ);umr=r(I4t,"YolosForObjectDetection"),I4t.forEach(t),_mr=r(dBe," (YOLOS model)"),dBe.forEach(t),bXe.forEach(t),bmr=i(Ca),b7=n(Ca,"P",{});var cBe=s(b7);vmr=r(cBe,"The model is set in evaluation mode by default using "),Zbe=n(cBe,"CODE",{});var N4t=s(Zbe);Fmr=r(N4t,"model.eval()"),N4t.forEach(t),Tmr=r(cBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eve=n(cBe,"CODE",{});var q4t=s(eve);Mmr=r(q4t,"model.train()"),q4t.forEach(t),cBe.forEach(t),Emr=i(Ca),T(v7.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),fOe=i(f),Xd=n(f,"H2",{class:!0});var vXe=s(Xd);F7=n(vXe,"A",{id:!0,class:!0,href:!0});var j4t=s(F7);ove=n(j4t,"SPAN",{});var D4t=s(ove);T(Qy.$$.fragment,D4t),D4t.forEach(t),j4t.forEach(t),Cmr=i(vXe),rve=n(vXe,"SPAN",{});var G4t=s(rve);wmr=r(G4t,"AutoModelForImageSegmentation"),G4t.forEach(t),vXe.forEach(t),mOe=i(f),Jo=n(f,"DIV",{class:!0});var vl=s(Jo);T(Hy.$$.fragment,vl),Amr=i(vl),zd=n(vl,"P",{});var Xoe=s(zd);Lmr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),EQ=n(Xoe,"A",{href:!0});var O4t=s(EQ);ymr=r(O4t,"from_pretrained()"),O4t.forEach(t),xmr=r(Xoe," class method or the "),CQ=n(Xoe,"A",{href:!0});var V4t=s(CQ);$mr=r(V4t,"from_config()"),V4t.forEach(t),kmr=r(Xoe,` class
method.`),Xoe.forEach(t),Smr=i(vl),Uy=n(vl,"P",{});var FXe=s(Uy);Rmr=r(FXe,"This class cannot be instantiated directly using "),tve=n(FXe,"CODE",{});var X4t=s(tve);Pmr=r(X4t,"__init__()"),X4t.forEach(t),Bmr=r(FXe," (throws an error)."),FXe.forEach(t),Imr=i(vl),Lt=n(vl,"DIV",{class:!0});var mw=s(Lt);T(Jy.$$.fragment,mw),Nmr=i(mw),ave=n(mw,"P",{});var z4t=s(ave);qmr=r(z4t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),z4t.forEach(t),jmr=i(mw),Wd=n(mw,"P",{});var zoe=s(Wd);Dmr=r(zoe,`Note:
Loading a model from its configuration file does `),nve=n(zoe,"STRONG",{});var W4t=s(nve);Gmr=r(W4t,"not"),W4t.forEach(t),Omr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(zoe,"A",{href:!0});var Q4t=s(wQ);Vmr=r(Q4t,"from_pretrained()"),Q4t.forEach(t),Xmr=r(zoe," to load the model weights."),zoe.forEach(t),zmr=i(mw),T(T7.$$.fragment,mw),mw.forEach(t),Wmr=i(vl),bo=n(vl,"DIV",{class:!0});var wa=s(bo);T(Yy.$$.fragment,wa),Qmr=i(wa),sve=n(wa,"P",{});var H4t=s(sve);Hmr=r(H4t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),H4t.forEach(t),Umr=i(wa),Za=n(wa,"P",{});var gw=s(Za);Jmr=r(gw,"The model class to instantiate is selected based on the "),lve=n(gw,"CODE",{});var U4t=s(lve);Ymr=r(U4t,"model_type"),U4t.forEach(t),Kmr=r(gw,` property of the config object (either
passed as an argument or loaded from `),ive=n(gw,"CODE",{});var J4t=s(ive);Zmr=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),egr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(gw,"CODE",{});var Y4t=s(dve);ogr=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),rgr=r(gw,":"),gw.forEach(t),tgr=i(wa),cve=n(wa,"UL",{});var K4t=s(cve);M7=n(K4t,"LI",{});var fBe=s(M7);fve=n(fBe,"STRONG",{});var Z4t=s(fve);agr=r(Z4t,"detr"),Z4t.forEach(t),ngr=r(fBe," \u2014 "),AQ=n(fBe,"A",{href:!0});var eCt=s(AQ);sgr=r(eCt,"DetrForSegmentation"),eCt.forEach(t),lgr=r(fBe," (DETR model)"),fBe.forEach(t),K4t.forEach(t),igr=i(wa),E7=n(wa,"P",{});var mBe=s(E7);dgr=r(mBe,"The model is set in evaluation mode by default using "),mve=n(mBe,"CODE",{});var oCt=s(mve);cgr=r(oCt,"model.eval()"),oCt.forEach(t),fgr=r(mBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gve=n(mBe,"CODE",{});var rCt=s(gve);mgr=r(rCt,"model.train()"),rCt.forEach(t),mBe.forEach(t),ggr=i(wa),T(C7.$$.fragment,wa),wa.forEach(t),vl.forEach(t),gOe=i(f),Qd=n(f,"H2",{class:!0});var TXe=s(Qd);w7=n(TXe,"A",{id:!0,class:!0,href:!0});var tCt=s(w7);hve=n(tCt,"SPAN",{});var aCt=s(hve);T(Ky.$$.fragment,aCt),aCt.forEach(t),tCt.forEach(t),hgr=i(TXe),pve=n(TXe,"SPAN",{});var nCt=s(pve);pgr=r(nCt,"AutoModelForSemanticSegmentation"),nCt.forEach(t),TXe.forEach(t),hOe=i(f),Yo=n(f,"DIV",{class:!0});var Fl=s(Yo);T(Zy.$$.fragment,Fl),ugr=i(Fl),Hd=n(Fl,"P",{});var Woe=s(Hd);_gr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),LQ=n(Woe,"A",{href:!0});var sCt=s(LQ);bgr=r(sCt,"from_pretrained()"),sCt.forEach(t),vgr=r(Woe," class method or the "),yQ=n(Woe,"A",{href:!0});var lCt=s(yQ);Fgr=r(lCt,"from_config()"),lCt.forEach(t),Tgr=r(Woe,` class
method.`),Woe.forEach(t),Mgr=i(Fl),e9=n(Fl,"P",{});var MXe=s(e9);Egr=r(MXe,"This class cannot be instantiated directly using "),uve=n(MXe,"CODE",{});var iCt=s(uve);Cgr=r(iCt,"__init__()"),iCt.forEach(t),wgr=r(MXe," (throws an error)."),MXe.forEach(t),Agr=i(Fl),yt=n(Fl,"DIV",{class:!0});var hw=s(yt);T(o9.$$.fragment,hw),Lgr=i(hw),_ve=n(hw,"P",{});var dCt=s(_ve);ygr=r(dCt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),dCt.forEach(t),xgr=i(hw),Ud=n(hw,"P",{});var Qoe=s(Ud);$gr=r(Qoe,`Note:
Loading a model from its configuration file does `),bve=n(Qoe,"STRONG",{});var cCt=s(bve);kgr=r(cCt,"not"),cCt.forEach(t),Sgr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(Qoe,"A",{href:!0});var fCt=s(xQ);Rgr=r(fCt,"from_pretrained()"),fCt.forEach(t),Pgr=r(Qoe," to load the model weights."),Qoe.forEach(t),Bgr=i(hw),T(A7.$$.fragment,hw),hw.forEach(t),Igr=i(Fl),vo=n(Fl,"DIV",{class:!0});var Aa=s(vo);T(r9.$$.fragment,Aa),Ngr=i(Aa),vve=n(Aa,"P",{});var mCt=s(vve);qgr=r(mCt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mCt.forEach(t),jgr=i(Aa),en=n(Aa,"P",{});var pw=s(en);Dgr=r(pw,"The model class to instantiate is selected based on the "),Fve=n(pw,"CODE",{});var gCt=s(Fve);Ggr=r(gCt,"model_type"),gCt.forEach(t),Ogr=r(pw,` property of the config object (either
passed as an argument or loaded from `),Tve=n(pw,"CODE",{});var hCt=s(Tve);Vgr=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),Xgr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(pw,"CODE",{});var pCt=s(Mve);zgr=r(pCt,"pretrained_model_name_or_path"),pCt.forEach(t),Wgr=r(pw,":"),pw.forEach(t),Qgr=i(Aa),on=n(Aa,"UL",{});var uw=s(on);L7=n(uw,"LI",{});var gBe=s(L7);Eve=n(gBe,"STRONG",{});var uCt=s(Eve);Hgr=r(uCt,"beit"),uCt.forEach(t),Ugr=r(gBe," \u2014 "),$Q=n(gBe,"A",{href:!0});var _Ct=s($Q);Jgr=r(_Ct,"BeitForSemanticSegmentation"),_Ct.forEach(t),Ygr=r(gBe," (BEiT model)"),gBe.forEach(t),Kgr=i(uw),y7=n(uw,"LI",{});var hBe=s(y7);Cve=n(hBe,"STRONG",{});var bCt=s(Cve);Zgr=r(bCt,"data2vec-vision"),bCt.forEach(t),ehr=r(hBe," \u2014 "),kQ=n(hBe,"A",{href:!0});var vCt=s(kQ);ohr=r(vCt,"Data2VecVisionForSemanticSegmentation"),vCt.forEach(t),rhr=r(hBe," (Data2VecVision model)"),hBe.forEach(t),thr=i(uw),x7=n(uw,"LI",{});var pBe=s(x7);wve=n(pBe,"STRONG",{});var FCt=s(wve);ahr=r(FCt,"dpt"),FCt.forEach(t),nhr=r(pBe," \u2014 "),SQ=n(pBe,"A",{href:!0});var TCt=s(SQ);shr=r(TCt,"DPTForSemanticSegmentation"),TCt.forEach(t),lhr=r(pBe," (DPT model)"),pBe.forEach(t),ihr=i(uw),$7=n(uw,"LI",{});var uBe=s($7);Ave=n(uBe,"STRONG",{});var MCt=s(Ave);dhr=r(MCt,"segformer"),MCt.forEach(t),chr=r(uBe," \u2014 "),RQ=n(uBe,"A",{href:!0});var ECt=s(RQ);fhr=r(ECt,"SegformerForSemanticSegmentation"),ECt.forEach(t),mhr=r(uBe," (SegFormer model)"),uBe.forEach(t),uw.forEach(t),ghr=i(Aa),k7=n(Aa,"P",{});var _Be=s(k7);hhr=r(_Be,"The model is set in evaluation mode by default using "),Lve=n(_Be,"CODE",{});var CCt=s(Lve);phr=r(CCt,"model.eval()"),CCt.forEach(t),uhr=r(_Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yve=n(_Be,"CODE",{});var wCt=s(yve);_hr=r(wCt,"model.train()"),wCt.forEach(t),_Be.forEach(t),bhr=i(Aa),T(S7.$$.fragment,Aa),Aa.forEach(t),Fl.forEach(t),pOe=i(f),Jd=n(f,"H2",{class:!0});var EXe=s(Jd);R7=n(EXe,"A",{id:!0,class:!0,href:!0});var ACt=s(R7);xve=n(ACt,"SPAN",{});var LCt=s(xve);T(t9.$$.fragment,LCt),LCt.forEach(t),ACt.forEach(t),vhr=i(EXe),$ve=n(EXe,"SPAN",{});var yCt=s($ve);Fhr=r(yCt,"AutoModelForInstanceSegmentation"),yCt.forEach(t),EXe.forEach(t),uOe=i(f),Ko=n(f,"DIV",{class:!0});var Tl=s(Ko);T(a9.$$.fragment,Tl),Thr=i(Tl),Yd=n(Tl,"P",{});var Hoe=s(Yd);Mhr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),PQ=n(Hoe,"A",{href:!0});var xCt=s(PQ);Ehr=r(xCt,"from_pretrained()"),xCt.forEach(t),Chr=r(Hoe," class method or the "),BQ=n(Hoe,"A",{href:!0});var $Ct=s(BQ);whr=r($Ct,"from_config()"),$Ct.forEach(t),Ahr=r(Hoe,` class
method.`),Hoe.forEach(t),Lhr=i(Tl),n9=n(Tl,"P",{});var CXe=s(n9);yhr=r(CXe,"This class cannot be instantiated directly using "),kve=n(CXe,"CODE",{});var kCt=s(kve);xhr=r(kCt,"__init__()"),kCt.forEach(t),$hr=r(CXe," (throws an error)."),CXe.forEach(t),khr=i(Tl),xt=n(Tl,"DIV",{class:!0});var _w=s(xt);T(s9.$$.fragment,_w),Shr=i(_w),Sve=n(_w,"P",{});var SCt=s(Sve);Rhr=r(SCt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),SCt.forEach(t),Phr=i(_w),Kd=n(_w,"P",{});var Uoe=s(Kd);Bhr=r(Uoe,`Note:
Loading a model from its configuration file does `),Rve=n(Uoe,"STRONG",{});var RCt=s(Rve);Ihr=r(RCt,"not"),RCt.forEach(t),Nhr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(Uoe,"A",{href:!0});var PCt=s(IQ);qhr=r(PCt,"from_pretrained()"),PCt.forEach(t),jhr=r(Uoe," to load the model weights."),Uoe.forEach(t),Dhr=i(_w),T(P7.$$.fragment,_w),_w.forEach(t),Ghr=i(Tl),Fo=n(Tl,"DIV",{class:!0});var La=s(Fo);T(l9.$$.fragment,La),Ohr=i(La),Pve=n(La,"P",{});var BCt=s(Pve);Vhr=r(BCt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),BCt.forEach(t),Xhr=i(La),rn=n(La,"P",{});var bw=s(rn);zhr=r(bw,"The model class to instantiate is selected based on the "),Bve=n(bw,"CODE",{});var ICt=s(Bve);Whr=r(ICt,"model_type"),ICt.forEach(t),Qhr=r(bw,` property of the config object (either
passed as an argument or loaded from `),Ive=n(bw,"CODE",{});var NCt=s(Ive);Hhr=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),Uhr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=n(bw,"CODE",{});var qCt=s(Nve);Jhr=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),Yhr=r(bw,":"),bw.forEach(t),Khr=i(La),qve=n(La,"UL",{});var jCt=s(qve);B7=n(jCt,"LI",{});var bBe=s(B7);jve=n(bBe,"STRONG",{});var DCt=s(jve);Zhr=r(DCt,"maskformer"),DCt.forEach(t),epr=r(bBe," \u2014 "),NQ=n(bBe,"A",{href:!0});var GCt=s(NQ);opr=r(GCt,"MaskFormerForInstanceSegmentation"),GCt.forEach(t),rpr=r(bBe," (MaskFormer model)"),bBe.forEach(t),jCt.forEach(t),tpr=i(La),I7=n(La,"P",{});var vBe=s(I7);apr=r(vBe,"The model is set in evaluation mode by default using "),Dve=n(vBe,"CODE",{});var OCt=s(Dve);npr=r(OCt,"model.eval()"),OCt.forEach(t),spr=r(vBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gve=n(vBe,"CODE",{});var VCt=s(Gve);lpr=r(VCt,"model.train()"),VCt.forEach(t),vBe.forEach(t),ipr=i(La),T(N7.$$.fragment,La),La.forEach(t),Tl.forEach(t),_Oe=i(f),Zd=n(f,"H2",{class:!0});var wXe=s(Zd);q7=n(wXe,"A",{id:!0,class:!0,href:!0});var XCt=s(q7);Ove=n(XCt,"SPAN",{});var zCt=s(Ove);T(i9.$$.fragment,zCt),zCt.forEach(t),XCt.forEach(t),dpr=i(wXe),Vve=n(wXe,"SPAN",{});var WCt=s(Vve);cpr=r(WCt,"TFAutoModel"),WCt.forEach(t),wXe.forEach(t),bOe=i(f),Zo=n(f,"DIV",{class:!0});var Ml=s(Zo);T(d9.$$.fragment,Ml),fpr=i(Ml),ec=n(Ml,"P",{});var Joe=s(ec);mpr=r(Joe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qQ=n(Joe,"A",{href:!0});var QCt=s(qQ);gpr=r(QCt,"from_pretrained()"),QCt.forEach(t),hpr=r(Joe," class method or the "),jQ=n(Joe,"A",{href:!0});var HCt=s(jQ);ppr=r(HCt,"from_config()"),HCt.forEach(t),upr=r(Joe,` class
method.`),Joe.forEach(t),_pr=i(Ml),c9=n(Ml,"P",{});var AXe=s(c9);bpr=r(AXe,"This class cannot be instantiated directly using "),Xve=n(AXe,"CODE",{});var UCt=s(Xve);vpr=r(UCt,"__init__()"),UCt.forEach(t),Fpr=r(AXe," (throws an error)."),AXe.forEach(t),Tpr=i(Ml),$t=n(Ml,"DIV",{class:!0});var vw=s($t);T(f9.$$.fragment,vw),Mpr=i(vw),zve=n(vw,"P",{});var JCt=s(zve);Epr=r(JCt,"Instantiates one of the base model classes of the library from a configuration."),JCt.forEach(t),Cpr=i(vw),oc=n(vw,"P",{});var Yoe=s(oc);wpr=r(Yoe,`Note:
Loading a model from its configuration file does `),Wve=n(Yoe,"STRONG",{});var YCt=s(Wve);Apr=r(YCt,"not"),YCt.forEach(t),Lpr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(Yoe,"A",{href:!0});var KCt=s(DQ);ypr=r(KCt,"from_pretrained()"),KCt.forEach(t),xpr=r(Yoe," to load the model weights."),Yoe.forEach(t),$pr=i(vw),T(j7.$$.fragment,vw),vw.forEach(t),kpr=i(Ml),Lr=n(Ml,"DIV",{class:!0});var El=s(Lr);T(m9.$$.fragment,El),Spr=i(El),Qve=n(El,"P",{});var ZCt=s(Qve);Rpr=r(ZCt,"Instantiate one of the base model classes of the library from a pretrained model."),ZCt.forEach(t),Ppr=i(El),tn=n(El,"P",{});var Fw=s(tn);Bpr=r(Fw,"The model class to instantiate is selected based on the "),Hve=n(Fw,"CODE",{});var e5t=s(Hve);Ipr=r(e5t,"model_type"),e5t.forEach(t),Npr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Uve=n(Fw,"CODE",{});var o5t=s(Uve);qpr=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),jpr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=n(Fw,"CODE",{});var r5t=s(Jve);Dpr=r(r5t,"pretrained_model_name_or_path"),r5t.forEach(t),Gpr=r(Fw,":"),Fw.forEach(t),Opr=i(El),q=n(El,"UL",{});var D=s(q);D7=n(D,"LI",{});var FBe=s(D7);Yve=n(FBe,"STRONG",{});var t5t=s(Yve);Vpr=r(t5t,"albert"),t5t.forEach(t),Xpr=r(FBe," \u2014 "),GQ=n(FBe,"A",{href:!0});var a5t=s(GQ);zpr=r(a5t,"TFAlbertModel"),a5t.forEach(t),Wpr=r(FBe," (ALBERT model)"),FBe.forEach(t),Qpr=i(D),G7=n(D,"LI",{});var TBe=s(G7);Kve=n(TBe,"STRONG",{});var n5t=s(Kve);Hpr=r(n5t,"bart"),n5t.forEach(t),Upr=r(TBe," \u2014 "),OQ=n(TBe,"A",{href:!0});var s5t=s(OQ);Jpr=r(s5t,"TFBartModel"),s5t.forEach(t),Ypr=r(TBe," (BART model)"),TBe.forEach(t),Kpr=i(D),O7=n(D,"LI",{});var MBe=s(O7);Zve=n(MBe,"STRONG",{});var l5t=s(Zve);Zpr=r(l5t,"bert"),l5t.forEach(t),eur=r(MBe," \u2014 "),VQ=n(MBe,"A",{href:!0});var i5t=s(VQ);our=r(i5t,"TFBertModel"),i5t.forEach(t),rur=r(MBe," (BERT model)"),MBe.forEach(t),tur=i(D),V7=n(D,"LI",{});var EBe=s(V7);eFe=n(EBe,"STRONG",{});var d5t=s(eFe);aur=r(d5t,"blenderbot"),d5t.forEach(t),nur=r(EBe," \u2014 "),XQ=n(EBe,"A",{href:!0});var c5t=s(XQ);sur=r(c5t,"TFBlenderbotModel"),c5t.forEach(t),lur=r(EBe," (Blenderbot model)"),EBe.forEach(t),iur=i(D),X7=n(D,"LI",{});var CBe=s(X7);oFe=n(CBe,"STRONG",{});var f5t=s(oFe);dur=r(f5t,"blenderbot-small"),f5t.forEach(t),cur=r(CBe," \u2014 "),zQ=n(CBe,"A",{href:!0});var m5t=s(zQ);fur=r(m5t,"TFBlenderbotSmallModel"),m5t.forEach(t),mur=r(CBe," (BlenderbotSmall model)"),CBe.forEach(t),gur=i(D),z7=n(D,"LI",{});var wBe=s(z7);rFe=n(wBe,"STRONG",{});var g5t=s(rFe);hur=r(g5t,"camembert"),g5t.forEach(t),pur=r(wBe," \u2014 "),WQ=n(wBe,"A",{href:!0});var h5t=s(WQ);uur=r(h5t,"TFCamembertModel"),h5t.forEach(t),_ur=r(wBe," (CamemBERT model)"),wBe.forEach(t),bur=i(D),W7=n(D,"LI",{});var ABe=s(W7);tFe=n(ABe,"STRONG",{});var p5t=s(tFe);vur=r(p5t,"clip"),p5t.forEach(t),Fur=r(ABe," \u2014 "),QQ=n(ABe,"A",{href:!0});var u5t=s(QQ);Tur=r(u5t,"TFCLIPModel"),u5t.forEach(t),Mur=r(ABe," (CLIP model)"),ABe.forEach(t),Eur=i(D),Q7=n(D,"LI",{});var LBe=s(Q7);aFe=n(LBe,"STRONG",{});var _5t=s(aFe);Cur=r(_5t,"convbert"),_5t.forEach(t),wur=r(LBe," \u2014 "),HQ=n(LBe,"A",{href:!0});var b5t=s(HQ);Aur=r(b5t,"TFConvBertModel"),b5t.forEach(t),Lur=r(LBe," (ConvBERT model)"),LBe.forEach(t),yur=i(D),H7=n(D,"LI",{});var yBe=s(H7);nFe=n(yBe,"STRONG",{});var v5t=s(nFe);xur=r(v5t,"convnext"),v5t.forEach(t),$ur=r(yBe," \u2014 "),UQ=n(yBe,"A",{href:!0});var F5t=s(UQ);kur=r(F5t,"TFConvNextModel"),F5t.forEach(t),Sur=r(yBe," (ConvNeXT model)"),yBe.forEach(t),Rur=i(D),U7=n(D,"LI",{});var xBe=s(U7);sFe=n(xBe,"STRONG",{});var T5t=s(sFe);Pur=r(T5t,"ctrl"),T5t.forEach(t),Bur=r(xBe," \u2014 "),JQ=n(xBe,"A",{href:!0});var M5t=s(JQ);Iur=r(M5t,"TFCTRLModel"),M5t.forEach(t),Nur=r(xBe," (CTRL model)"),xBe.forEach(t),qur=i(D),J7=n(D,"LI",{});var $Be=s(J7);lFe=n($Be,"STRONG",{});var E5t=s(lFe);jur=r(E5t,"data2vec-vision"),E5t.forEach(t),Dur=r($Be," \u2014 "),YQ=n($Be,"A",{href:!0});var C5t=s(YQ);Gur=r(C5t,"TFData2VecVisionModel"),C5t.forEach(t),Our=r($Be," (Data2VecVision model)"),$Be.forEach(t),Vur=i(D),Y7=n(D,"LI",{});var kBe=s(Y7);iFe=n(kBe,"STRONG",{});var w5t=s(iFe);Xur=r(w5t,"deberta"),w5t.forEach(t),zur=r(kBe," \u2014 "),KQ=n(kBe,"A",{href:!0});var A5t=s(KQ);Wur=r(A5t,"TFDebertaModel"),A5t.forEach(t),Qur=r(kBe," (DeBERTa model)"),kBe.forEach(t),Hur=i(D),K7=n(D,"LI",{});var SBe=s(K7);dFe=n(SBe,"STRONG",{});var L5t=s(dFe);Uur=r(L5t,"deberta-v2"),L5t.forEach(t),Jur=r(SBe," \u2014 "),ZQ=n(SBe,"A",{href:!0});var y5t=s(ZQ);Yur=r(y5t,"TFDebertaV2Model"),y5t.forEach(t),Kur=r(SBe," (DeBERTa-v2 model)"),SBe.forEach(t),Zur=i(D),Z7=n(D,"LI",{});var RBe=s(Z7);cFe=n(RBe,"STRONG",{});var x5t=s(cFe);e_r=r(x5t,"distilbert"),x5t.forEach(t),o_r=r(RBe," \u2014 "),eH=n(RBe,"A",{href:!0});var $5t=s(eH);r_r=r($5t,"TFDistilBertModel"),$5t.forEach(t),t_r=r(RBe," (DistilBERT model)"),RBe.forEach(t),a_r=i(D),e8=n(D,"LI",{});var PBe=s(e8);fFe=n(PBe,"STRONG",{});var k5t=s(fFe);n_r=r(k5t,"dpr"),k5t.forEach(t),s_r=r(PBe," \u2014 "),oH=n(PBe,"A",{href:!0});var S5t=s(oH);l_r=r(S5t,"TFDPRQuestionEncoder"),S5t.forEach(t),i_r=r(PBe," (DPR model)"),PBe.forEach(t),d_r=i(D),o8=n(D,"LI",{});var BBe=s(o8);mFe=n(BBe,"STRONG",{});var R5t=s(mFe);c_r=r(R5t,"electra"),R5t.forEach(t),f_r=r(BBe," \u2014 "),rH=n(BBe,"A",{href:!0});var P5t=s(rH);m_r=r(P5t,"TFElectraModel"),P5t.forEach(t),g_r=r(BBe," (ELECTRA model)"),BBe.forEach(t),h_r=i(D),r8=n(D,"LI",{});var IBe=s(r8);gFe=n(IBe,"STRONG",{});var B5t=s(gFe);p_r=r(B5t,"flaubert"),B5t.forEach(t),u_r=r(IBe," \u2014 "),tH=n(IBe,"A",{href:!0});var I5t=s(tH);__r=r(I5t,"TFFlaubertModel"),I5t.forEach(t),b_r=r(IBe," (FlauBERT model)"),IBe.forEach(t),v_r=i(D),Xs=n(D,"LI",{});var Qk=s(Xs);hFe=n(Qk,"STRONG",{});var N5t=s(hFe);F_r=r(N5t,"funnel"),N5t.forEach(t),T_r=r(Qk," \u2014 "),aH=n(Qk,"A",{href:!0});var q5t=s(aH);M_r=r(q5t,"TFFunnelModel"),q5t.forEach(t),E_r=r(Qk," or "),nH=n(Qk,"A",{href:!0});var j5t=s(nH);C_r=r(j5t,"TFFunnelBaseModel"),j5t.forEach(t),w_r=r(Qk," (Funnel Transformer model)"),Qk.forEach(t),A_r=i(D),t8=n(D,"LI",{});var NBe=s(t8);pFe=n(NBe,"STRONG",{});var D5t=s(pFe);L_r=r(D5t,"gpt2"),D5t.forEach(t),y_r=r(NBe," \u2014 "),sH=n(NBe,"A",{href:!0});var G5t=s(sH);x_r=r(G5t,"TFGPT2Model"),G5t.forEach(t),$_r=r(NBe," (OpenAI GPT-2 model)"),NBe.forEach(t),k_r=i(D),a8=n(D,"LI",{});var qBe=s(a8);uFe=n(qBe,"STRONG",{});var O5t=s(uFe);S_r=r(O5t,"gptj"),O5t.forEach(t),R_r=r(qBe," \u2014 "),lH=n(qBe,"A",{href:!0});var V5t=s(lH);P_r=r(V5t,"TFGPTJModel"),V5t.forEach(t),B_r=r(qBe," (GPT-J model)"),qBe.forEach(t),I_r=i(D),n8=n(D,"LI",{});var jBe=s(n8);_Fe=n(jBe,"STRONG",{});var X5t=s(_Fe);N_r=r(X5t,"hubert"),X5t.forEach(t),q_r=r(jBe," \u2014 "),iH=n(jBe,"A",{href:!0});var z5t=s(iH);j_r=r(z5t,"TFHubertModel"),z5t.forEach(t),D_r=r(jBe," (Hubert model)"),jBe.forEach(t),G_r=i(D),s8=n(D,"LI",{});var DBe=s(s8);bFe=n(DBe,"STRONG",{});var W5t=s(bFe);O_r=r(W5t,"layoutlm"),W5t.forEach(t),V_r=r(DBe," \u2014 "),dH=n(DBe,"A",{href:!0});var Q5t=s(dH);X_r=r(Q5t,"TFLayoutLMModel"),Q5t.forEach(t),z_r=r(DBe," (LayoutLM model)"),DBe.forEach(t),W_r=i(D),l8=n(D,"LI",{});var GBe=s(l8);vFe=n(GBe,"STRONG",{});var H5t=s(vFe);Q_r=r(H5t,"led"),H5t.forEach(t),H_r=r(GBe," \u2014 "),cH=n(GBe,"A",{href:!0});var U5t=s(cH);U_r=r(U5t,"TFLEDModel"),U5t.forEach(t),J_r=r(GBe," (LED model)"),GBe.forEach(t),Y_r=i(D),i8=n(D,"LI",{});var OBe=s(i8);FFe=n(OBe,"STRONG",{});var J5t=s(FFe);K_r=r(J5t,"longformer"),J5t.forEach(t),Z_r=r(OBe," \u2014 "),fH=n(OBe,"A",{href:!0});var Y5t=s(fH);e2r=r(Y5t,"TFLongformerModel"),Y5t.forEach(t),o2r=r(OBe," (Longformer model)"),OBe.forEach(t),r2r=i(D),d8=n(D,"LI",{});var VBe=s(d8);TFe=n(VBe,"STRONG",{});var K5t=s(TFe);t2r=r(K5t,"lxmert"),K5t.forEach(t),a2r=r(VBe," \u2014 "),mH=n(VBe,"A",{href:!0});var Z5t=s(mH);n2r=r(Z5t,"TFLxmertModel"),Z5t.forEach(t),s2r=r(VBe," (LXMERT model)"),VBe.forEach(t),l2r=i(D),c8=n(D,"LI",{});var XBe=s(c8);MFe=n(XBe,"STRONG",{});var e3t=s(MFe);i2r=r(e3t,"marian"),e3t.forEach(t),d2r=r(XBe," \u2014 "),gH=n(XBe,"A",{href:!0});var o3t=s(gH);c2r=r(o3t,"TFMarianModel"),o3t.forEach(t),f2r=r(XBe," (Marian model)"),XBe.forEach(t),m2r=i(D),f8=n(D,"LI",{});var zBe=s(f8);EFe=n(zBe,"STRONG",{});var r3t=s(EFe);g2r=r(r3t,"mbart"),r3t.forEach(t),h2r=r(zBe," \u2014 "),hH=n(zBe,"A",{href:!0});var t3t=s(hH);p2r=r(t3t,"TFMBartModel"),t3t.forEach(t),u2r=r(zBe," (mBART model)"),zBe.forEach(t),_2r=i(D),m8=n(D,"LI",{});var WBe=s(m8);CFe=n(WBe,"STRONG",{});var a3t=s(CFe);b2r=r(a3t,"mobilebert"),a3t.forEach(t),v2r=r(WBe," \u2014 "),pH=n(WBe,"A",{href:!0});var n3t=s(pH);F2r=r(n3t,"TFMobileBertModel"),n3t.forEach(t),T2r=r(WBe," (MobileBERT model)"),WBe.forEach(t),M2r=i(D),g8=n(D,"LI",{});var QBe=s(g8);wFe=n(QBe,"STRONG",{});var s3t=s(wFe);E2r=r(s3t,"mpnet"),s3t.forEach(t),C2r=r(QBe," \u2014 "),uH=n(QBe,"A",{href:!0});var l3t=s(uH);w2r=r(l3t,"TFMPNetModel"),l3t.forEach(t),A2r=r(QBe," (MPNet model)"),QBe.forEach(t),L2r=i(D),h8=n(D,"LI",{});var HBe=s(h8);AFe=n(HBe,"STRONG",{});var i3t=s(AFe);y2r=r(i3t,"mt5"),i3t.forEach(t),x2r=r(HBe," \u2014 "),_H=n(HBe,"A",{href:!0});var d3t=s(_H);$2r=r(d3t,"TFMT5Model"),d3t.forEach(t),k2r=r(HBe," (MT5 model)"),HBe.forEach(t),S2r=i(D),p8=n(D,"LI",{});var UBe=s(p8);LFe=n(UBe,"STRONG",{});var c3t=s(LFe);R2r=r(c3t,"openai-gpt"),c3t.forEach(t),P2r=r(UBe," \u2014 "),bH=n(UBe,"A",{href:!0});var f3t=s(bH);B2r=r(f3t,"TFOpenAIGPTModel"),f3t.forEach(t),I2r=r(UBe," (OpenAI GPT model)"),UBe.forEach(t),N2r=i(D),u8=n(D,"LI",{});var JBe=s(u8);yFe=n(JBe,"STRONG",{});var m3t=s(yFe);q2r=r(m3t,"opt"),m3t.forEach(t),j2r=r(JBe," \u2014 "),vH=n(JBe,"A",{href:!0});var g3t=s(vH);D2r=r(g3t,"TFOPTModel"),g3t.forEach(t),G2r=r(JBe," (OPT model)"),JBe.forEach(t),O2r=i(D),_8=n(D,"LI",{});var YBe=s(_8);xFe=n(YBe,"STRONG",{});var h3t=s(xFe);V2r=r(h3t,"pegasus"),h3t.forEach(t),X2r=r(YBe," \u2014 "),FH=n(YBe,"A",{href:!0});var p3t=s(FH);z2r=r(p3t,"TFPegasusModel"),p3t.forEach(t),W2r=r(YBe," (Pegasus model)"),YBe.forEach(t),Q2r=i(D),b8=n(D,"LI",{});var KBe=s(b8);$Fe=n(KBe,"STRONG",{});var u3t=s($Fe);H2r=r(u3t,"rembert"),u3t.forEach(t),U2r=r(KBe," \u2014 "),TH=n(KBe,"A",{href:!0});var _3t=s(TH);J2r=r(_3t,"TFRemBertModel"),_3t.forEach(t),Y2r=r(KBe," (RemBERT model)"),KBe.forEach(t),K2r=i(D),v8=n(D,"LI",{});var ZBe=s(v8);kFe=n(ZBe,"STRONG",{});var b3t=s(kFe);Z2r=r(b3t,"roberta"),b3t.forEach(t),e1r=r(ZBe," \u2014 "),MH=n(ZBe,"A",{href:!0});var v3t=s(MH);o1r=r(v3t,"TFRobertaModel"),v3t.forEach(t),r1r=r(ZBe," (RoBERTa model)"),ZBe.forEach(t),t1r=i(D),F8=n(D,"LI",{});var eIe=s(F8);SFe=n(eIe,"STRONG",{});var F3t=s(SFe);a1r=r(F3t,"roformer"),F3t.forEach(t),n1r=r(eIe," \u2014 "),EH=n(eIe,"A",{href:!0});var T3t=s(EH);s1r=r(T3t,"TFRoFormerModel"),T3t.forEach(t),l1r=r(eIe," (RoFormer model)"),eIe.forEach(t),i1r=i(D),T8=n(D,"LI",{});var oIe=s(T8);RFe=n(oIe,"STRONG",{});var M3t=s(RFe);d1r=r(M3t,"speech_to_text"),M3t.forEach(t),c1r=r(oIe," \u2014 "),CH=n(oIe,"A",{href:!0});var E3t=s(CH);f1r=r(E3t,"TFSpeech2TextModel"),E3t.forEach(t),m1r=r(oIe," (Speech2Text model)"),oIe.forEach(t),g1r=i(D),M8=n(D,"LI",{});var rIe=s(M8);PFe=n(rIe,"STRONG",{});var C3t=s(PFe);h1r=r(C3t,"swin"),C3t.forEach(t),p1r=r(rIe," \u2014 "),wH=n(rIe,"A",{href:!0});var w3t=s(wH);u1r=r(w3t,"TFSwinModel"),w3t.forEach(t),_1r=r(rIe," (Swin Transformer model)"),rIe.forEach(t),b1r=i(D),E8=n(D,"LI",{});var tIe=s(E8);BFe=n(tIe,"STRONG",{});var A3t=s(BFe);v1r=r(A3t,"t5"),A3t.forEach(t),F1r=r(tIe," \u2014 "),AH=n(tIe,"A",{href:!0});var L3t=s(AH);T1r=r(L3t,"TFT5Model"),L3t.forEach(t),M1r=r(tIe," (T5 model)"),tIe.forEach(t),E1r=i(D),C8=n(D,"LI",{});var aIe=s(C8);IFe=n(aIe,"STRONG",{});var y3t=s(IFe);C1r=r(y3t,"tapas"),y3t.forEach(t),w1r=r(aIe," \u2014 "),LH=n(aIe,"A",{href:!0});var x3t=s(LH);A1r=r(x3t,"TFTapasModel"),x3t.forEach(t),L1r=r(aIe," (TAPAS model)"),aIe.forEach(t),y1r=i(D),w8=n(D,"LI",{});var nIe=s(w8);NFe=n(nIe,"STRONG",{});var $3t=s(NFe);x1r=r($3t,"transfo-xl"),$3t.forEach(t),$1r=r(nIe," \u2014 "),yH=n(nIe,"A",{href:!0});var k3t=s(yH);k1r=r(k3t,"TFTransfoXLModel"),k3t.forEach(t),S1r=r(nIe," (Transformer-XL model)"),nIe.forEach(t),R1r=i(D),A8=n(D,"LI",{});var sIe=s(A8);qFe=n(sIe,"STRONG",{});var S3t=s(qFe);P1r=r(S3t,"vit"),S3t.forEach(t),B1r=r(sIe," \u2014 "),xH=n(sIe,"A",{href:!0});var R3t=s(xH);I1r=r(R3t,"TFViTModel"),R3t.forEach(t),N1r=r(sIe," (ViT model)"),sIe.forEach(t),q1r=i(D),L8=n(D,"LI",{});var lIe=s(L8);jFe=n(lIe,"STRONG",{});var P3t=s(jFe);j1r=r(P3t,"vit_mae"),P3t.forEach(t),D1r=r(lIe," \u2014 "),$H=n(lIe,"A",{href:!0});var B3t=s($H);G1r=r(B3t,"TFViTMAEModel"),B3t.forEach(t),O1r=r(lIe," (ViTMAE model)"),lIe.forEach(t),V1r=i(D),y8=n(D,"LI",{});var iIe=s(y8);DFe=n(iIe,"STRONG",{});var I3t=s(DFe);X1r=r(I3t,"wav2vec2"),I3t.forEach(t),z1r=r(iIe," \u2014 "),kH=n(iIe,"A",{href:!0});var N3t=s(kH);W1r=r(N3t,"TFWav2Vec2Model"),N3t.forEach(t),Q1r=r(iIe," (Wav2Vec2 model)"),iIe.forEach(t),H1r=i(D),x8=n(D,"LI",{});var dIe=s(x8);GFe=n(dIe,"STRONG",{});var q3t=s(GFe);U1r=r(q3t,"xlm"),q3t.forEach(t),J1r=r(dIe," \u2014 "),SH=n(dIe,"A",{href:!0});var j3t=s(SH);Y1r=r(j3t,"TFXLMModel"),j3t.forEach(t),K1r=r(dIe," (XLM model)"),dIe.forEach(t),Z1r=i(D),$8=n(D,"LI",{});var cIe=s($8);OFe=n(cIe,"STRONG",{});var D3t=s(OFe);ebr=r(D3t,"xlm-roberta"),D3t.forEach(t),obr=r(cIe," \u2014 "),RH=n(cIe,"A",{href:!0});var G3t=s(RH);rbr=r(G3t,"TFXLMRobertaModel"),G3t.forEach(t),tbr=r(cIe," (XLM-RoBERTa model)"),cIe.forEach(t),abr=i(D),k8=n(D,"LI",{});var fIe=s(k8);VFe=n(fIe,"STRONG",{});var O3t=s(VFe);nbr=r(O3t,"xlnet"),O3t.forEach(t),sbr=r(fIe," \u2014 "),PH=n(fIe,"A",{href:!0});var V3t=s(PH);lbr=r(V3t,"TFXLNetModel"),V3t.forEach(t),ibr=r(fIe," (XLNet model)"),fIe.forEach(t),D.forEach(t),dbr=i(El),T(S8.$$.fragment,El),El.forEach(t),Ml.forEach(t),vOe=i(f),rc=n(f,"H2",{class:!0});var LXe=s(rc);R8=n(LXe,"A",{id:!0,class:!0,href:!0});var X3t=s(R8);XFe=n(X3t,"SPAN",{});var z3t=s(XFe);T(g9.$$.fragment,z3t),z3t.forEach(t),X3t.forEach(t),cbr=i(LXe),zFe=n(LXe,"SPAN",{});var W3t=s(zFe);fbr=r(W3t,"TFAutoModelForPreTraining"),W3t.forEach(t),LXe.forEach(t),FOe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(h9.$$.fragment,Cl),mbr=i(Cl),tc=n(Cl,"P",{});var Koe=s(tc);gbr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BH=n(Koe,"A",{href:!0});var Q3t=s(BH);hbr=r(Q3t,"from_pretrained()"),Q3t.forEach(t),pbr=r(Koe," class method or the "),IH=n(Koe,"A",{href:!0});var H3t=s(IH);ubr=r(H3t,"from_config()"),H3t.forEach(t),_br=r(Koe,` class
method.`),Koe.forEach(t),bbr=i(Cl),p9=n(Cl,"P",{});var yXe=s(p9);vbr=r(yXe,"This class cannot be instantiated directly using "),WFe=n(yXe,"CODE",{});var U3t=s(WFe);Fbr=r(U3t,"__init__()"),U3t.forEach(t),Tbr=r(yXe," (throws an error)."),yXe.forEach(t),Mbr=i(Cl),kt=n(Cl,"DIV",{class:!0});var Tw=s(kt);T(u9.$$.fragment,Tw),Ebr=i(Tw),QFe=n(Tw,"P",{});var J3t=s(QFe);Cbr=r(J3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),J3t.forEach(t),wbr=i(Tw),ac=n(Tw,"P",{});var Zoe=s(ac);Abr=r(Zoe,`Note:
Loading a model from its configuration file does `),HFe=n(Zoe,"STRONG",{});var Y3t=s(HFe);Lbr=r(Y3t,"not"),Y3t.forEach(t),ybr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(Zoe,"A",{href:!0});var K3t=s(NH);xbr=r(K3t,"from_pretrained()"),K3t.forEach(t),$br=r(Zoe," to load the model weights."),Zoe.forEach(t),kbr=i(Tw),T(P8.$$.fragment,Tw),Tw.forEach(t),Sbr=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(_9.$$.fragment,wl),Rbr=i(wl),UFe=n(wl,"P",{});var Z3t=s(UFe);Pbr=r(Z3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Z3t.forEach(t),Bbr=i(wl),an=n(wl,"P",{});var Mw=s(an);Ibr=r(Mw,"The model class to instantiate is selected based on the "),JFe=n(Mw,"CODE",{});var e0t=s(JFe);Nbr=r(e0t,"model_type"),e0t.forEach(t),qbr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),YFe=n(Mw,"CODE",{});var o0t=s(YFe);jbr=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),Dbr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(Mw,"CODE",{});var r0t=s(KFe);Gbr=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),Obr=r(Mw,":"),Mw.forEach(t),Vbr=i(wl),se=n(wl,"UL",{});var le=s(se);B8=n(le,"LI",{});var mIe=s(B8);ZFe=n(mIe,"STRONG",{});var t0t=s(ZFe);Xbr=r(t0t,"albert"),t0t.forEach(t),zbr=r(mIe," \u2014 "),qH=n(mIe,"A",{href:!0});var a0t=s(qH);Wbr=r(a0t,"TFAlbertForPreTraining"),a0t.forEach(t),Qbr=r(mIe," (ALBERT model)"),mIe.forEach(t),Hbr=i(le),I8=n(le,"LI",{});var gIe=s(I8);e6e=n(gIe,"STRONG",{});var n0t=s(e6e);Ubr=r(n0t,"bart"),n0t.forEach(t),Jbr=r(gIe," \u2014 "),jH=n(gIe,"A",{href:!0});var s0t=s(jH);Ybr=r(s0t,"TFBartForConditionalGeneration"),s0t.forEach(t),Kbr=r(gIe," (BART model)"),gIe.forEach(t),Zbr=i(le),N8=n(le,"LI",{});var hIe=s(N8);o6e=n(hIe,"STRONG",{});var l0t=s(o6e);evr=r(l0t,"bert"),l0t.forEach(t),ovr=r(hIe," \u2014 "),DH=n(hIe,"A",{href:!0});var i0t=s(DH);rvr=r(i0t,"TFBertForPreTraining"),i0t.forEach(t),tvr=r(hIe," (BERT model)"),hIe.forEach(t),avr=i(le),q8=n(le,"LI",{});var pIe=s(q8);r6e=n(pIe,"STRONG",{});var d0t=s(r6e);nvr=r(d0t,"camembert"),d0t.forEach(t),svr=r(pIe," \u2014 "),GH=n(pIe,"A",{href:!0});var c0t=s(GH);lvr=r(c0t,"TFCamembertForMaskedLM"),c0t.forEach(t),ivr=r(pIe," (CamemBERT model)"),pIe.forEach(t),dvr=i(le),j8=n(le,"LI",{});var uIe=s(j8);t6e=n(uIe,"STRONG",{});var f0t=s(t6e);cvr=r(f0t,"ctrl"),f0t.forEach(t),fvr=r(uIe," \u2014 "),OH=n(uIe,"A",{href:!0});var m0t=s(OH);mvr=r(m0t,"TFCTRLLMHeadModel"),m0t.forEach(t),gvr=r(uIe," (CTRL model)"),uIe.forEach(t),hvr=i(le),D8=n(le,"LI",{});var _Ie=s(D8);a6e=n(_Ie,"STRONG",{});var g0t=s(a6e);pvr=r(g0t,"distilbert"),g0t.forEach(t),uvr=r(_Ie," \u2014 "),VH=n(_Ie,"A",{href:!0});var h0t=s(VH);_vr=r(h0t,"TFDistilBertForMaskedLM"),h0t.forEach(t),bvr=r(_Ie," (DistilBERT model)"),_Ie.forEach(t),vvr=i(le),G8=n(le,"LI",{});var bIe=s(G8);n6e=n(bIe,"STRONG",{});var p0t=s(n6e);Fvr=r(p0t,"electra"),p0t.forEach(t),Tvr=r(bIe," \u2014 "),XH=n(bIe,"A",{href:!0});var u0t=s(XH);Mvr=r(u0t,"TFElectraForPreTraining"),u0t.forEach(t),Evr=r(bIe," (ELECTRA model)"),bIe.forEach(t),Cvr=i(le),O8=n(le,"LI",{});var vIe=s(O8);s6e=n(vIe,"STRONG",{});var _0t=s(s6e);wvr=r(_0t,"flaubert"),_0t.forEach(t),Avr=r(vIe," \u2014 "),zH=n(vIe,"A",{href:!0});var b0t=s(zH);Lvr=r(b0t,"TFFlaubertWithLMHeadModel"),b0t.forEach(t),yvr=r(vIe," (FlauBERT model)"),vIe.forEach(t),xvr=i(le),V8=n(le,"LI",{});var FIe=s(V8);l6e=n(FIe,"STRONG",{});var v0t=s(l6e);$vr=r(v0t,"funnel"),v0t.forEach(t),kvr=r(FIe," \u2014 "),WH=n(FIe,"A",{href:!0});var F0t=s(WH);Svr=r(F0t,"TFFunnelForPreTraining"),F0t.forEach(t),Rvr=r(FIe," (Funnel Transformer model)"),FIe.forEach(t),Pvr=i(le),X8=n(le,"LI",{});var TIe=s(X8);i6e=n(TIe,"STRONG",{});var T0t=s(i6e);Bvr=r(T0t,"gpt2"),T0t.forEach(t),Ivr=r(TIe," \u2014 "),QH=n(TIe,"A",{href:!0});var M0t=s(QH);Nvr=r(M0t,"TFGPT2LMHeadModel"),M0t.forEach(t),qvr=r(TIe," (OpenAI GPT-2 model)"),TIe.forEach(t),jvr=i(le),z8=n(le,"LI",{});var MIe=s(z8);d6e=n(MIe,"STRONG",{});var E0t=s(d6e);Dvr=r(E0t,"layoutlm"),E0t.forEach(t),Gvr=r(MIe," \u2014 "),HH=n(MIe,"A",{href:!0});var C0t=s(HH);Ovr=r(C0t,"TFLayoutLMForMaskedLM"),C0t.forEach(t),Vvr=r(MIe," (LayoutLM model)"),MIe.forEach(t),Xvr=i(le),W8=n(le,"LI",{});var EIe=s(W8);c6e=n(EIe,"STRONG",{});var w0t=s(c6e);zvr=r(w0t,"lxmert"),w0t.forEach(t),Wvr=r(EIe," \u2014 "),UH=n(EIe,"A",{href:!0});var A0t=s(UH);Qvr=r(A0t,"TFLxmertForPreTraining"),A0t.forEach(t),Hvr=r(EIe," (LXMERT model)"),EIe.forEach(t),Uvr=i(le),Q8=n(le,"LI",{});var CIe=s(Q8);f6e=n(CIe,"STRONG",{});var L0t=s(f6e);Jvr=r(L0t,"mobilebert"),L0t.forEach(t),Yvr=r(CIe," \u2014 "),JH=n(CIe,"A",{href:!0});var y0t=s(JH);Kvr=r(y0t,"TFMobileBertForPreTraining"),y0t.forEach(t),Zvr=r(CIe," (MobileBERT model)"),CIe.forEach(t),eFr=i(le),H8=n(le,"LI",{});var wIe=s(H8);m6e=n(wIe,"STRONG",{});var x0t=s(m6e);oFr=r(x0t,"mpnet"),x0t.forEach(t),rFr=r(wIe," \u2014 "),YH=n(wIe,"A",{href:!0});var $0t=s(YH);tFr=r($0t,"TFMPNetForMaskedLM"),$0t.forEach(t),aFr=r(wIe," (MPNet model)"),wIe.forEach(t),nFr=i(le),U8=n(le,"LI",{});var AIe=s(U8);g6e=n(AIe,"STRONG",{});var k0t=s(g6e);sFr=r(k0t,"openai-gpt"),k0t.forEach(t),lFr=r(AIe," \u2014 "),KH=n(AIe,"A",{href:!0});var S0t=s(KH);iFr=r(S0t,"TFOpenAIGPTLMHeadModel"),S0t.forEach(t),dFr=r(AIe," (OpenAI GPT model)"),AIe.forEach(t),cFr=i(le),J8=n(le,"LI",{});var LIe=s(J8);h6e=n(LIe,"STRONG",{});var R0t=s(h6e);fFr=r(R0t,"roberta"),R0t.forEach(t),mFr=r(LIe," \u2014 "),ZH=n(LIe,"A",{href:!0});var P0t=s(ZH);gFr=r(P0t,"TFRobertaForMaskedLM"),P0t.forEach(t),hFr=r(LIe," (RoBERTa model)"),LIe.forEach(t),pFr=i(le),Y8=n(le,"LI",{});var yIe=s(Y8);p6e=n(yIe,"STRONG",{});var B0t=s(p6e);uFr=r(B0t,"t5"),B0t.forEach(t),_Fr=r(yIe," \u2014 "),eU=n(yIe,"A",{href:!0});var I0t=s(eU);bFr=r(I0t,"TFT5ForConditionalGeneration"),I0t.forEach(t),vFr=r(yIe," (T5 model)"),yIe.forEach(t),FFr=i(le),K8=n(le,"LI",{});var xIe=s(K8);u6e=n(xIe,"STRONG",{});var N0t=s(u6e);TFr=r(N0t,"tapas"),N0t.forEach(t),MFr=r(xIe," \u2014 "),oU=n(xIe,"A",{href:!0});var q0t=s(oU);EFr=r(q0t,"TFTapasForMaskedLM"),q0t.forEach(t),CFr=r(xIe," (TAPAS model)"),xIe.forEach(t),wFr=i(le),Z8=n(le,"LI",{});var $Ie=s(Z8);_6e=n($Ie,"STRONG",{});var j0t=s(_6e);AFr=r(j0t,"transfo-xl"),j0t.forEach(t),LFr=r($Ie," \u2014 "),rU=n($Ie,"A",{href:!0});var D0t=s(rU);yFr=r(D0t,"TFTransfoXLLMHeadModel"),D0t.forEach(t),xFr=r($Ie," (Transformer-XL model)"),$Ie.forEach(t),$Fr=i(le),eM=n(le,"LI",{});var kIe=s(eM);b6e=n(kIe,"STRONG",{});var G0t=s(b6e);kFr=r(G0t,"vit_mae"),G0t.forEach(t),SFr=r(kIe," \u2014 "),tU=n(kIe,"A",{href:!0});var O0t=s(tU);RFr=r(O0t,"TFViTMAEForPreTraining"),O0t.forEach(t),PFr=r(kIe," (ViTMAE model)"),kIe.forEach(t),BFr=i(le),oM=n(le,"LI",{});var SIe=s(oM);v6e=n(SIe,"STRONG",{});var V0t=s(v6e);IFr=r(V0t,"xlm"),V0t.forEach(t),NFr=r(SIe," \u2014 "),aU=n(SIe,"A",{href:!0});var X0t=s(aU);qFr=r(X0t,"TFXLMWithLMHeadModel"),X0t.forEach(t),jFr=r(SIe," (XLM model)"),SIe.forEach(t),DFr=i(le),rM=n(le,"LI",{});var RIe=s(rM);F6e=n(RIe,"STRONG",{});var z0t=s(F6e);GFr=r(z0t,"xlm-roberta"),z0t.forEach(t),OFr=r(RIe," \u2014 "),nU=n(RIe,"A",{href:!0});var W0t=s(nU);VFr=r(W0t,"TFXLMRobertaForMaskedLM"),W0t.forEach(t),XFr=r(RIe," (XLM-RoBERTa model)"),RIe.forEach(t),zFr=i(le),tM=n(le,"LI",{});var PIe=s(tM);T6e=n(PIe,"STRONG",{});var Q0t=s(T6e);WFr=r(Q0t,"xlnet"),Q0t.forEach(t),QFr=r(PIe," \u2014 "),sU=n(PIe,"A",{href:!0});var H0t=s(sU);HFr=r(H0t,"TFXLNetLMHeadModel"),H0t.forEach(t),UFr=r(PIe," (XLNet model)"),PIe.forEach(t),le.forEach(t),JFr=i(wl),T(aM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),TOe=i(f),nc=n(f,"H2",{class:!0});var xXe=s(nc);nM=n(xXe,"A",{id:!0,class:!0,href:!0});var U0t=s(nM);M6e=n(U0t,"SPAN",{});var J0t=s(M6e);T(b9.$$.fragment,J0t),J0t.forEach(t),U0t.forEach(t),YFr=i(xXe),E6e=n(xXe,"SPAN",{});var Y0t=s(E6e);KFr=r(Y0t,"TFAutoModelForCausalLM"),Y0t.forEach(t),xXe.forEach(t),MOe=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(v9.$$.fragment,Al),ZFr=i(Al),sc=n(Al,"P",{});var ere=s(sc);e6r=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lU=n(ere,"A",{href:!0});var K0t=s(lU);o6r=r(K0t,"from_pretrained()"),K0t.forEach(t),r6r=r(ere," class method or the "),iU=n(ere,"A",{href:!0});var Z0t=s(iU);t6r=r(Z0t,"from_config()"),Z0t.forEach(t),a6r=r(ere,` class
method.`),ere.forEach(t),n6r=i(Al),F9=n(Al,"P",{});var $Xe=s(F9);s6r=r($Xe,"This class cannot be instantiated directly using "),C6e=n($Xe,"CODE",{});var ewt=s(C6e);l6r=r(ewt,"__init__()"),ewt.forEach(t),i6r=r($Xe," (throws an error)."),$Xe.forEach(t),d6r=i(Al),St=n(Al,"DIV",{class:!0});var Ew=s(St);T(T9.$$.fragment,Ew),c6r=i(Ew),w6e=n(Ew,"P",{});var owt=s(w6e);f6r=r(owt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),owt.forEach(t),m6r=i(Ew),lc=n(Ew,"P",{});var ore=s(lc);g6r=r(ore,`Note:
Loading a model from its configuration file does `),A6e=n(ore,"STRONG",{});var rwt=s(A6e);h6r=r(rwt,"not"),rwt.forEach(t),p6r=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(ore,"A",{href:!0});var twt=s(dU);u6r=r(twt,"from_pretrained()"),twt.forEach(t),_6r=r(ore," to load the model weights."),ore.forEach(t),b6r=i(Ew),T(sM.$$.fragment,Ew),Ew.forEach(t),v6r=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(M9.$$.fragment,Ll),F6r=i(Ll),L6e=n(Ll,"P",{});var awt=s(L6e);T6r=r(awt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),awt.forEach(t),M6r=i(Ll),nn=n(Ll,"P",{});var Cw=s(nn);E6r=r(Cw,"The model class to instantiate is selected based on the "),y6e=n(Cw,"CODE",{});var nwt=s(y6e);C6r=r(nwt,"model_type"),nwt.forEach(t),w6r=r(Cw,` property of the config object (either
passed as an argument or loaded from `),x6e=n(Cw,"CODE",{});var swt=s(x6e);A6r=r(swt,"pretrained_model_name_or_path"),swt.forEach(t),L6r=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=n(Cw,"CODE",{});var lwt=s($6e);y6r=r(lwt,"pretrained_model_name_or_path"),lwt.forEach(t),x6r=r(Cw,":"),Cw.forEach(t),$6r=i(Ll),Me=n(Ll,"UL",{});var Ce=s(Me);lM=n(Ce,"LI",{});var BIe=s(lM);k6e=n(BIe,"STRONG",{});var iwt=s(k6e);k6r=r(iwt,"bert"),iwt.forEach(t),S6r=r(BIe," \u2014 "),cU=n(BIe,"A",{href:!0});var dwt=s(cU);R6r=r(dwt,"TFBertLMHeadModel"),dwt.forEach(t),P6r=r(BIe," (BERT model)"),BIe.forEach(t),B6r=i(Ce),iM=n(Ce,"LI",{});var IIe=s(iM);S6e=n(IIe,"STRONG",{});var cwt=s(S6e);I6r=r(cwt,"camembert"),cwt.forEach(t),N6r=r(IIe," \u2014 "),fU=n(IIe,"A",{href:!0});var fwt=s(fU);q6r=r(fwt,"TFCamembertForCausalLM"),fwt.forEach(t),j6r=r(IIe," (CamemBERT model)"),IIe.forEach(t),D6r=i(Ce),dM=n(Ce,"LI",{});var NIe=s(dM);R6e=n(NIe,"STRONG",{});var mwt=s(R6e);G6r=r(mwt,"ctrl"),mwt.forEach(t),O6r=r(NIe," \u2014 "),mU=n(NIe,"A",{href:!0});var gwt=s(mU);V6r=r(gwt,"TFCTRLLMHeadModel"),gwt.forEach(t),X6r=r(NIe," (CTRL model)"),NIe.forEach(t),z6r=i(Ce),cM=n(Ce,"LI",{});var qIe=s(cM);P6e=n(qIe,"STRONG",{});var hwt=s(P6e);W6r=r(hwt,"gpt2"),hwt.forEach(t),Q6r=r(qIe," \u2014 "),gU=n(qIe,"A",{href:!0});var pwt=s(gU);H6r=r(pwt,"TFGPT2LMHeadModel"),pwt.forEach(t),U6r=r(qIe," (OpenAI GPT-2 model)"),qIe.forEach(t),J6r=i(Ce),fM=n(Ce,"LI",{});var jIe=s(fM);B6e=n(jIe,"STRONG",{});var uwt=s(B6e);Y6r=r(uwt,"gptj"),uwt.forEach(t),K6r=r(jIe," \u2014 "),hU=n(jIe,"A",{href:!0});var _wt=s(hU);Z6r=r(_wt,"TFGPTJForCausalLM"),_wt.forEach(t),eTr=r(jIe," (GPT-J model)"),jIe.forEach(t),oTr=i(Ce),mM=n(Ce,"LI",{});var DIe=s(mM);I6e=n(DIe,"STRONG",{});var bwt=s(I6e);rTr=r(bwt,"openai-gpt"),bwt.forEach(t),tTr=r(DIe," \u2014 "),pU=n(DIe,"A",{href:!0});var vwt=s(pU);aTr=r(vwt,"TFOpenAIGPTLMHeadModel"),vwt.forEach(t),nTr=r(DIe," (OpenAI GPT model)"),DIe.forEach(t),sTr=i(Ce),gM=n(Ce,"LI",{});var GIe=s(gM);N6e=n(GIe,"STRONG",{});var Fwt=s(N6e);lTr=r(Fwt,"opt"),Fwt.forEach(t),iTr=r(GIe," \u2014 "),uU=n(GIe,"A",{href:!0});var Twt=s(uU);dTr=r(Twt,"TFOPTForCausalLM"),Twt.forEach(t),cTr=r(GIe," (OPT model)"),GIe.forEach(t),fTr=i(Ce),hM=n(Ce,"LI",{});var OIe=s(hM);q6e=n(OIe,"STRONG",{});var Mwt=s(q6e);mTr=r(Mwt,"rembert"),Mwt.forEach(t),gTr=r(OIe," \u2014 "),_U=n(OIe,"A",{href:!0});var Ewt=s(_U);hTr=r(Ewt,"TFRemBertForCausalLM"),Ewt.forEach(t),pTr=r(OIe," (RemBERT model)"),OIe.forEach(t),uTr=i(Ce),pM=n(Ce,"LI",{});var VIe=s(pM);j6e=n(VIe,"STRONG",{});var Cwt=s(j6e);_Tr=r(Cwt,"roberta"),Cwt.forEach(t),bTr=r(VIe," \u2014 "),bU=n(VIe,"A",{href:!0});var wwt=s(bU);vTr=r(wwt,"TFRobertaForCausalLM"),wwt.forEach(t),FTr=r(VIe," (RoBERTa model)"),VIe.forEach(t),TTr=i(Ce),uM=n(Ce,"LI",{});var XIe=s(uM);D6e=n(XIe,"STRONG",{});var Awt=s(D6e);MTr=r(Awt,"roformer"),Awt.forEach(t),ETr=r(XIe," \u2014 "),vU=n(XIe,"A",{href:!0});var Lwt=s(vU);CTr=r(Lwt,"TFRoFormerForCausalLM"),Lwt.forEach(t),wTr=r(XIe," (RoFormer model)"),XIe.forEach(t),ATr=i(Ce),_M=n(Ce,"LI",{});var zIe=s(_M);G6e=n(zIe,"STRONG",{});var ywt=s(G6e);LTr=r(ywt,"transfo-xl"),ywt.forEach(t),yTr=r(zIe," \u2014 "),FU=n(zIe,"A",{href:!0});var xwt=s(FU);xTr=r(xwt,"TFTransfoXLLMHeadModel"),xwt.forEach(t),$Tr=r(zIe," (Transformer-XL model)"),zIe.forEach(t),kTr=i(Ce),bM=n(Ce,"LI",{});var WIe=s(bM);O6e=n(WIe,"STRONG",{});var $wt=s(O6e);STr=r($wt,"xlm"),$wt.forEach(t),RTr=r(WIe," \u2014 "),TU=n(WIe,"A",{href:!0});var kwt=s(TU);PTr=r(kwt,"TFXLMWithLMHeadModel"),kwt.forEach(t),BTr=r(WIe," (XLM model)"),WIe.forEach(t),ITr=i(Ce),vM=n(Ce,"LI",{});var QIe=s(vM);V6e=n(QIe,"STRONG",{});var Swt=s(V6e);NTr=r(Swt,"xlnet"),Swt.forEach(t),qTr=r(QIe," \u2014 "),MU=n(QIe,"A",{href:!0});var Rwt=s(MU);jTr=r(Rwt,"TFXLNetLMHeadModel"),Rwt.forEach(t),DTr=r(QIe," (XLNet model)"),QIe.forEach(t),Ce.forEach(t),GTr=i(Ll),T(FM.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),EOe=i(f),ic=n(f,"H2",{class:!0});var kXe=s(ic);TM=n(kXe,"A",{id:!0,class:!0,href:!0});var Pwt=s(TM);X6e=n(Pwt,"SPAN",{});var Bwt=s(X6e);T(E9.$$.fragment,Bwt),Bwt.forEach(t),Pwt.forEach(t),OTr=i(kXe),z6e=n(kXe,"SPAN",{});var Iwt=s(z6e);VTr=r(Iwt,"TFAutoModelForImageClassification"),Iwt.forEach(t),kXe.forEach(t),COe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(C9.$$.fragment,yl),XTr=i(yl),dc=n(yl,"P",{});var rre=s(dc);zTr=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EU=n(rre,"A",{href:!0});var Nwt=s(EU);WTr=r(Nwt,"from_pretrained()"),Nwt.forEach(t),QTr=r(rre," class method or the "),CU=n(rre,"A",{href:!0});var qwt=s(CU);HTr=r(qwt,"from_config()"),qwt.forEach(t),UTr=r(rre,` class
method.`),rre.forEach(t),JTr=i(yl),w9=n(yl,"P",{});var SXe=s(w9);YTr=r(SXe,"This class cannot be instantiated directly using "),W6e=n(SXe,"CODE",{});var jwt=s(W6e);KTr=r(jwt,"__init__()"),jwt.forEach(t),ZTr=r(SXe," (throws an error)."),SXe.forEach(t),e7r=i(yl),Rt=n(yl,"DIV",{class:!0});var ww=s(Rt);T(A9.$$.fragment,ww),o7r=i(ww),Q6e=n(ww,"P",{});var Dwt=s(Q6e);r7r=r(Dwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Dwt.forEach(t),t7r=i(ww),cc=n(ww,"P",{});var tre=s(cc);a7r=r(tre,`Note:
Loading a model from its configuration file does `),H6e=n(tre,"STRONG",{});var Gwt=s(H6e);n7r=r(Gwt,"not"),Gwt.forEach(t),s7r=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(tre,"A",{href:!0});var Owt=s(wU);l7r=r(Owt,"from_pretrained()"),Owt.forEach(t),i7r=r(tre," to load the model weights."),tre.forEach(t),d7r=i(ww),T(MM.$$.fragment,ww),ww.forEach(t),c7r=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(L9.$$.fragment,xl),f7r=i(xl),U6e=n(xl,"P",{});var Vwt=s(U6e);m7r=r(Vwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Vwt.forEach(t),g7r=i(xl),sn=n(xl,"P",{});var Aw=s(sn);h7r=r(Aw,"The model class to instantiate is selected based on the "),J6e=n(Aw,"CODE",{});var Xwt=s(J6e);p7r=r(Xwt,"model_type"),Xwt.forEach(t),u7r=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Y6e=n(Aw,"CODE",{});var zwt=s(Y6e);_7r=r(zwt,"pretrained_model_name_or_path"),zwt.forEach(t),b7r=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=n(Aw,"CODE",{});var Wwt=s(K6e);v7r=r(Wwt,"pretrained_model_name_or_path"),Wwt.forEach(t),F7r=r(Aw,":"),Aw.forEach(t),T7r=i(xl),ln=n(xl,"UL",{});var Lw=s(ln);EM=n(Lw,"LI",{});var HIe=s(EM);Z6e=n(HIe,"STRONG",{});var Qwt=s(Z6e);M7r=r(Qwt,"convnext"),Qwt.forEach(t),E7r=r(HIe," \u2014 "),AU=n(HIe,"A",{href:!0});var Hwt=s(AU);C7r=r(Hwt,"TFConvNextForImageClassification"),Hwt.forEach(t),w7r=r(HIe," (ConvNeXT model)"),HIe.forEach(t),A7r=i(Lw),CM=n(Lw,"LI",{});var UIe=s(CM);eTe=n(UIe,"STRONG",{});var Uwt=s(eTe);L7r=r(Uwt,"data2vec-vision"),Uwt.forEach(t),y7r=r(UIe," \u2014 "),LU=n(UIe,"A",{href:!0});var Jwt=s(LU);x7r=r(Jwt,"TFData2VecVisionForImageClassification"),Jwt.forEach(t),$7r=r(UIe," (Data2VecVision model)"),UIe.forEach(t),k7r=i(Lw),wM=n(Lw,"LI",{});var JIe=s(wM);oTe=n(JIe,"STRONG",{});var Ywt=s(oTe);S7r=r(Ywt,"swin"),Ywt.forEach(t),R7r=r(JIe," \u2014 "),yU=n(JIe,"A",{href:!0});var Kwt=s(yU);P7r=r(Kwt,"TFSwinForImageClassification"),Kwt.forEach(t),B7r=r(JIe," (Swin Transformer model)"),JIe.forEach(t),I7r=i(Lw),AM=n(Lw,"LI",{});var YIe=s(AM);rTe=n(YIe,"STRONG",{});var Zwt=s(rTe);N7r=r(Zwt,"vit"),Zwt.forEach(t),q7r=r(YIe," \u2014 "),xU=n(YIe,"A",{href:!0});var eAt=s(xU);j7r=r(eAt,"TFViTForImageClassification"),eAt.forEach(t),D7r=r(YIe," (ViT model)"),YIe.forEach(t),Lw.forEach(t),G7r=i(xl),T(LM.$$.fragment,xl),xl.forEach(t),yl.forEach(t),wOe=i(f),fc=n(f,"H2",{class:!0});var RXe=s(fc);yM=n(RXe,"A",{id:!0,class:!0,href:!0});var oAt=s(yM);tTe=n(oAt,"SPAN",{});var rAt=s(tTe);T(y9.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),O7r=i(RXe),aTe=n(RXe,"SPAN",{});var tAt=s(aTe);V7r=r(tAt,"TFAutoModelForMaskedLM"),tAt.forEach(t),RXe.forEach(t),AOe=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T(x9.$$.fragment,$l),X7r=i($l),mc=n($l,"P",{});var are=s(mc);z7r=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$U=n(are,"A",{href:!0});var aAt=s($U);W7r=r(aAt,"from_pretrained()"),aAt.forEach(t),Q7r=r(are," class method or the "),kU=n(are,"A",{href:!0});var nAt=s(kU);H7r=r(nAt,"from_config()"),nAt.forEach(t),U7r=r(are,` class
method.`),are.forEach(t),J7r=i($l),$9=n($l,"P",{});var PXe=s($9);Y7r=r(PXe,"This class cannot be instantiated directly using "),nTe=n(PXe,"CODE",{});var sAt=s(nTe);K7r=r(sAt,"__init__()"),sAt.forEach(t),Z7r=r(PXe," (throws an error)."),PXe.forEach(t),e8r=i($l),Pt=n($l,"DIV",{class:!0});var yw=s(Pt);T(k9.$$.fragment,yw),o8r=i(yw),sTe=n(yw,"P",{});var lAt=s(sTe);r8r=r(lAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lAt.forEach(t),t8r=i(yw),gc=n(yw,"P",{});var nre=s(gc);a8r=r(nre,`Note:
Loading a model from its configuration file does `),lTe=n(nre,"STRONG",{});var iAt=s(lTe);n8r=r(iAt,"not"),iAt.forEach(t),s8r=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(nre,"A",{href:!0});var dAt=s(SU);l8r=r(dAt,"from_pretrained()"),dAt.forEach(t),i8r=r(nre," to load the model weights."),nre.forEach(t),d8r=i(yw),T(xM.$$.fragment,yw),yw.forEach(t),c8r=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(S9.$$.fragment,kl),f8r=i(kl),iTe=n(kl,"P",{});var cAt=s(iTe);m8r=r(cAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cAt.forEach(t),g8r=i(kl),dn=n(kl,"P",{});var xw=s(dn);h8r=r(xw,"The model class to instantiate is selected based on the "),dTe=n(xw,"CODE",{});var fAt=s(dTe);p8r=r(fAt,"model_type"),fAt.forEach(t),u8r=r(xw,` property of the config object (either
passed as an argument or loaded from `),cTe=n(xw,"CODE",{});var mAt=s(cTe);_8r=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),b8r=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n(xw,"CODE",{});var gAt=s(fTe);v8r=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),F8r=r(xw,":"),xw.forEach(t),T8r=i(kl),ie=n(kl,"UL",{});var fe=s(ie);$M=n(fe,"LI",{});var KIe=s($M);mTe=n(KIe,"STRONG",{});var hAt=s(mTe);M8r=r(hAt,"albert"),hAt.forEach(t),E8r=r(KIe," \u2014 "),RU=n(KIe,"A",{href:!0});var pAt=s(RU);C8r=r(pAt,"TFAlbertForMaskedLM"),pAt.forEach(t),w8r=r(KIe," (ALBERT model)"),KIe.forEach(t),A8r=i(fe),kM=n(fe,"LI",{});var ZIe=s(kM);gTe=n(ZIe,"STRONG",{});var uAt=s(gTe);L8r=r(uAt,"bert"),uAt.forEach(t),y8r=r(ZIe," \u2014 "),PU=n(ZIe,"A",{href:!0});var _At=s(PU);x8r=r(_At,"TFBertForMaskedLM"),_At.forEach(t),$8r=r(ZIe," (BERT model)"),ZIe.forEach(t),k8r=i(fe),SM=n(fe,"LI",{});var eNe=s(SM);hTe=n(eNe,"STRONG",{});var bAt=s(hTe);S8r=r(bAt,"camembert"),bAt.forEach(t),R8r=r(eNe," \u2014 "),BU=n(eNe,"A",{href:!0});var vAt=s(BU);P8r=r(vAt,"TFCamembertForMaskedLM"),vAt.forEach(t),B8r=r(eNe," (CamemBERT model)"),eNe.forEach(t),I8r=i(fe),RM=n(fe,"LI",{});var oNe=s(RM);pTe=n(oNe,"STRONG",{});var FAt=s(pTe);N8r=r(FAt,"convbert"),FAt.forEach(t),q8r=r(oNe," \u2014 "),IU=n(oNe,"A",{href:!0});var TAt=s(IU);j8r=r(TAt,"TFConvBertForMaskedLM"),TAt.forEach(t),D8r=r(oNe," (ConvBERT model)"),oNe.forEach(t),G8r=i(fe),PM=n(fe,"LI",{});var rNe=s(PM);uTe=n(rNe,"STRONG",{});var MAt=s(uTe);O8r=r(MAt,"deberta"),MAt.forEach(t),V8r=r(rNe," \u2014 "),NU=n(rNe,"A",{href:!0});var EAt=s(NU);X8r=r(EAt,"TFDebertaForMaskedLM"),EAt.forEach(t),z8r=r(rNe," (DeBERTa model)"),rNe.forEach(t),W8r=i(fe),BM=n(fe,"LI",{});var tNe=s(BM);_Te=n(tNe,"STRONG",{});var CAt=s(_Te);Q8r=r(CAt,"deberta-v2"),CAt.forEach(t),H8r=r(tNe," \u2014 "),qU=n(tNe,"A",{href:!0});var wAt=s(qU);U8r=r(wAt,"TFDebertaV2ForMaskedLM"),wAt.forEach(t),J8r=r(tNe," (DeBERTa-v2 model)"),tNe.forEach(t),Y8r=i(fe),IM=n(fe,"LI",{});var aNe=s(IM);bTe=n(aNe,"STRONG",{});var AAt=s(bTe);K8r=r(AAt,"distilbert"),AAt.forEach(t),Z8r=r(aNe," \u2014 "),jU=n(aNe,"A",{href:!0});var LAt=s(jU);eMr=r(LAt,"TFDistilBertForMaskedLM"),LAt.forEach(t),oMr=r(aNe," (DistilBERT model)"),aNe.forEach(t),rMr=i(fe),NM=n(fe,"LI",{});var nNe=s(NM);vTe=n(nNe,"STRONG",{});var yAt=s(vTe);tMr=r(yAt,"electra"),yAt.forEach(t),aMr=r(nNe," \u2014 "),DU=n(nNe,"A",{href:!0});var xAt=s(DU);nMr=r(xAt,"TFElectraForMaskedLM"),xAt.forEach(t),sMr=r(nNe," (ELECTRA model)"),nNe.forEach(t),lMr=i(fe),qM=n(fe,"LI",{});var sNe=s(qM);FTe=n(sNe,"STRONG",{});var $At=s(FTe);iMr=r($At,"flaubert"),$At.forEach(t),dMr=r(sNe," \u2014 "),GU=n(sNe,"A",{href:!0});var kAt=s(GU);cMr=r(kAt,"TFFlaubertWithLMHeadModel"),kAt.forEach(t),fMr=r(sNe," (FlauBERT model)"),sNe.forEach(t),mMr=i(fe),jM=n(fe,"LI",{});var lNe=s(jM);TTe=n(lNe,"STRONG",{});var SAt=s(TTe);gMr=r(SAt,"funnel"),SAt.forEach(t),hMr=r(lNe," \u2014 "),OU=n(lNe,"A",{href:!0});var RAt=s(OU);pMr=r(RAt,"TFFunnelForMaskedLM"),RAt.forEach(t),uMr=r(lNe," (Funnel Transformer model)"),lNe.forEach(t),_Mr=i(fe),DM=n(fe,"LI",{});var iNe=s(DM);MTe=n(iNe,"STRONG",{});var PAt=s(MTe);bMr=r(PAt,"layoutlm"),PAt.forEach(t),vMr=r(iNe," \u2014 "),VU=n(iNe,"A",{href:!0});var BAt=s(VU);FMr=r(BAt,"TFLayoutLMForMaskedLM"),BAt.forEach(t),TMr=r(iNe," (LayoutLM model)"),iNe.forEach(t),MMr=i(fe),GM=n(fe,"LI",{});var dNe=s(GM);ETe=n(dNe,"STRONG",{});var IAt=s(ETe);EMr=r(IAt,"longformer"),IAt.forEach(t),CMr=r(dNe," \u2014 "),XU=n(dNe,"A",{href:!0});var NAt=s(XU);wMr=r(NAt,"TFLongformerForMaskedLM"),NAt.forEach(t),AMr=r(dNe," (Longformer model)"),dNe.forEach(t),LMr=i(fe),OM=n(fe,"LI",{});var cNe=s(OM);CTe=n(cNe,"STRONG",{});var qAt=s(CTe);yMr=r(qAt,"mobilebert"),qAt.forEach(t),xMr=r(cNe," \u2014 "),zU=n(cNe,"A",{href:!0});var jAt=s(zU);$Mr=r(jAt,"TFMobileBertForMaskedLM"),jAt.forEach(t),kMr=r(cNe," (MobileBERT model)"),cNe.forEach(t),SMr=i(fe),VM=n(fe,"LI",{});var fNe=s(VM);wTe=n(fNe,"STRONG",{});var DAt=s(wTe);RMr=r(DAt,"mpnet"),DAt.forEach(t),PMr=r(fNe," \u2014 "),WU=n(fNe,"A",{href:!0});var GAt=s(WU);BMr=r(GAt,"TFMPNetForMaskedLM"),GAt.forEach(t),IMr=r(fNe," (MPNet model)"),fNe.forEach(t),NMr=i(fe),XM=n(fe,"LI",{});var mNe=s(XM);ATe=n(mNe,"STRONG",{});var OAt=s(ATe);qMr=r(OAt,"rembert"),OAt.forEach(t),jMr=r(mNe," \u2014 "),QU=n(mNe,"A",{href:!0});var VAt=s(QU);DMr=r(VAt,"TFRemBertForMaskedLM"),VAt.forEach(t),GMr=r(mNe," (RemBERT model)"),mNe.forEach(t),OMr=i(fe),zM=n(fe,"LI",{});var gNe=s(zM);LTe=n(gNe,"STRONG",{});var XAt=s(LTe);VMr=r(XAt,"roberta"),XAt.forEach(t),XMr=r(gNe," \u2014 "),HU=n(gNe,"A",{href:!0});var zAt=s(HU);zMr=r(zAt,"TFRobertaForMaskedLM"),zAt.forEach(t),WMr=r(gNe," (RoBERTa model)"),gNe.forEach(t),QMr=i(fe),WM=n(fe,"LI",{});var hNe=s(WM);yTe=n(hNe,"STRONG",{});var WAt=s(yTe);HMr=r(WAt,"roformer"),WAt.forEach(t),UMr=r(hNe," \u2014 "),UU=n(hNe,"A",{href:!0});var QAt=s(UU);JMr=r(QAt,"TFRoFormerForMaskedLM"),QAt.forEach(t),YMr=r(hNe," (RoFormer model)"),hNe.forEach(t),KMr=i(fe),QM=n(fe,"LI",{});var pNe=s(QM);xTe=n(pNe,"STRONG",{});var HAt=s(xTe);ZMr=r(HAt,"tapas"),HAt.forEach(t),eEr=r(pNe," \u2014 "),JU=n(pNe,"A",{href:!0});var UAt=s(JU);oEr=r(UAt,"TFTapasForMaskedLM"),UAt.forEach(t),rEr=r(pNe," (TAPAS model)"),pNe.forEach(t),tEr=i(fe),HM=n(fe,"LI",{});var uNe=s(HM);$Te=n(uNe,"STRONG",{});var JAt=s($Te);aEr=r(JAt,"xlm"),JAt.forEach(t),nEr=r(uNe," \u2014 "),YU=n(uNe,"A",{href:!0});var YAt=s(YU);sEr=r(YAt,"TFXLMWithLMHeadModel"),YAt.forEach(t),lEr=r(uNe," (XLM model)"),uNe.forEach(t),iEr=i(fe),UM=n(fe,"LI",{});var _Ne=s(UM);kTe=n(_Ne,"STRONG",{});var KAt=s(kTe);dEr=r(KAt,"xlm-roberta"),KAt.forEach(t),cEr=r(_Ne," \u2014 "),KU=n(_Ne,"A",{href:!0});var ZAt=s(KU);fEr=r(ZAt,"TFXLMRobertaForMaskedLM"),ZAt.forEach(t),mEr=r(_Ne," (XLM-RoBERTa model)"),_Ne.forEach(t),fe.forEach(t),gEr=i(kl),T(JM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),LOe=i(f),hc=n(f,"H2",{class:!0});var BXe=s(hc);YM=n(BXe,"A",{id:!0,class:!0,href:!0});var eLt=s(YM);STe=n(eLt,"SPAN",{});var oLt=s(STe);T(R9.$$.fragment,oLt),oLt.forEach(t),eLt.forEach(t),hEr=i(BXe),RTe=n(BXe,"SPAN",{});var rLt=s(RTe);pEr=r(rLt,"TFAutoModelForSeq2SeqLM"),rLt.forEach(t),BXe.forEach(t),yOe=i(f),ar=n(f,"DIV",{class:!0});var Sl=s(ar);T(P9.$$.fragment,Sl),uEr=i(Sl),pc=n(Sl,"P",{});var sre=s(pc);_Er=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZU=n(sre,"A",{href:!0});var tLt=s(ZU);bEr=r(tLt,"from_pretrained()"),tLt.forEach(t),vEr=r(sre," class method or the "),eJ=n(sre,"A",{href:!0});var aLt=s(eJ);FEr=r(aLt,"from_config()"),aLt.forEach(t),TEr=r(sre,` class
method.`),sre.forEach(t),MEr=i(Sl),B9=n(Sl,"P",{});var IXe=s(B9);EEr=r(IXe,"This class cannot be instantiated directly using "),PTe=n(IXe,"CODE",{});var nLt=s(PTe);CEr=r(nLt,"__init__()"),nLt.forEach(t),wEr=r(IXe," (throws an error)."),IXe.forEach(t),AEr=i(Sl),Bt=n(Sl,"DIV",{class:!0});var $w=s(Bt);T(I9.$$.fragment,$w),LEr=i($w),BTe=n($w,"P",{});var sLt=s(BTe);yEr=r(sLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sLt.forEach(t),xEr=i($w),uc=n($w,"P",{});var lre=s(uc);$Er=r(lre,`Note:
Loading a model from its configuration file does `),ITe=n(lre,"STRONG",{});var lLt=s(ITe);kEr=r(lLt,"not"),lLt.forEach(t),SEr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(lre,"A",{href:!0});var iLt=s(oJ);REr=r(iLt,"from_pretrained()"),iLt.forEach(t),PEr=r(lre," to load the model weights."),lre.forEach(t),BEr=i($w),T(KM.$$.fragment,$w),$w.forEach(t),IEr=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(N9.$$.fragment,Rl),NEr=i(Rl),NTe=n(Rl,"P",{});var dLt=s(NTe);qEr=r(dLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dLt.forEach(t),jEr=i(Rl),cn=n(Rl,"P",{});var kw=s(cn);DEr=r(kw,"The model class to instantiate is selected based on the "),qTe=n(kw,"CODE",{});var cLt=s(qTe);GEr=r(cLt,"model_type"),cLt.forEach(t),OEr=r(kw,` property of the config object (either
passed as an argument or loaded from `),jTe=n(kw,"CODE",{});var fLt=s(jTe);VEr=r(fLt,"pretrained_model_name_or_path"),fLt.forEach(t),XEr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(kw,"CODE",{});var mLt=s(DTe);zEr=r(mLt,"pretrained_model_name_or_path"),mLt.forEach(t),WEr=r(kw,":"),kw.forEach(t),QEr=i(Rl),ye=n(Rl,"UL",{});var Ie=s(ye);ZM=n(Ie,"LI",{});var bNe=s(ZM);GTe=n(bNe,"STRONG",{});var gLt=s(GTe);HEr=r(gLt,"bart"),gLt.forEach(t),UEr=r(bNe," \u2014 "),rJ=n(bNe,"A",{href:!0});var hLt=s(rJ);JEr=r(hLt,"TFBartForConditionalGeneration"),hLt.forEach(t),YEr=r(bNe," (BART model)"),bNe.forEach(t),KEr=i(Ie),eE=n(Ie,"LI",{});var vNe=s(eE);OTe=n(vNe,"STRONG",{});var pLt=s(OTe);ZEr=r(pLt,"blenderbot"),pLt.forEach(t),e4r=r(vNe," \u2014 "),tJ=n(vNe,"A",{href:!0});var uLt=s(tJ);o4r=r(uLt,"TFBlenderbotForConditionalGeneration"),uLt.forEach(t),r4r=r(vNe," (Blenderbot model)"),vNe.forEach(t),t4r=i(Ie),oE=n(Ie,"LI",{});var FNe=s(oE);VTe=n(FNe,"STRONG",{});var _Lt=s(VTe);a4r=r(_Lt,"blenderbot-small"),_Lt.forEach(t),n4r=r(FNe," \u2014 "),aJ=n(FNe,"A",{href:!0});var bLt=s(aJ);s4r=r(bLt,"TFBlenderbotSmallForConditionalGeneration"),bLt.forEach(t),l4r=r(FNe," (BlenderbotSmall model)"),FNe.forEach(t),i4r=i(Ie),rE=n(Ie,"LI",{});var TNe=s(rE);XTe=n(TNe,"STRONG",{});var vLt=s(XTe);d4r=r(vLt,"encoder-decoder"),vLt.forEach(t),c4r=r(TNe," \u2014 "),nJ=n(TNe,"A",{href:!0});var FLt=s(nJ);f4r=r(FLt,"TFEncoderDecoderModel"),FLt.forEach(t),m4r=r(TNe," (Encoder decoder model)"),TNe.forEach(t),g4r=i(Ie),tE=n(Ie,"LI",{});var MNe=s(tE);zTe=n(MNe,"STRONG",{});var TLt=s(zTe);h4r=r(TLt,"led"),TLt.forEach(t),p4r=r(MNe," \u2014 "),sJ=n(MNe,"A",{href:!0});var MLt=s(sJ);u4r=r(MLt,"TFLEDForConditionalGeneration"),MLt.forEach(t),_4r=r(MNe," (LED model)"),MNe.forEach(t),b4r=i(Ie),aE=n(Ie,"LI",{});var ENe=s(aE);WTe=n(ENe,"STRONG",{});var ELt=s(WTe);v4r=r(ELt,"marian"),ELt.forEach(t),F4r=r(ENe," \u2014 "),lJ=n(ENe,"A",{href:!0});var CLt=s(lJ);T4r=r(CLt,"TFMarianMTModel"),CLt.forEach(t),M4r=r(ENe," (Marian model)"),ENe.forEach(t),E4r=i(Ie),nE=n(Ie,"LI",{});var CNe=s(nE);QTe=n(CNe,"STRONG",{});var wLt=s(QTe);C4r=r(wLt,"mbart"),wLt.forEach(t),w4r=r(CNe," \u2014 "),iJ=n(CNe,"A",{href:!0});var ALt=s(iJ);A4r=r(ALt,"TFMBartForConditionalGeneration"),ALt.forEach(t),L4r=r(CNe," (mBART model)"),CNe.forEach(t),y4r=i(Ie),sE=n(Ie,"LI",{});var wNe=s(sE);HTe=n(wNe,"STRONG",{});var LLt=s(HTe);x4r=r(LLt,"mt5"),LLt.forEach(t),$4r=r(wNe," \u2014 "),dJ=n(wNe,"A",{href:!0});var yLt=s(dJ);k4r=r(yLt,"TFMT5ForConditionalGeneration"),yLt.forEach(t),S4r=r(wNe," (MT5 model)"),wNe.forEach(t),R4r=i(Ie),lE=n(Ie,"LI",{});var ANe=s(lE);UTe=n(ANe,"STRONG",{});var xLt=s(UTe);P4r=r(xLt,"pegasus"),xLt.forEach(t),B4r=r(ANe," \u2014 "),cJ=n(ANe,"A",{href:!0});var $Lt=s(cJ);I4r=r($Lt,"TFPegasusForConditionalGeneration"),$Lt.forEach(t),N4r=r(ANe," (Pegasus model)"),ANe.forEach(t),q4r=i(Ie),iE=n(Ie,"LI",{});var LNe=s(iE);JTe=n(LNe,"STRONG",{});var kLt=s(JTe);j4r=r(kLt,"t5"),kLt.forEach(t),D4r=r(LNe," \u2014 "),fJ=n(LNe,"A",{href:!0});var SLt=s(fJ);G4r=r(SLt,"TFT5ForConditionalGeneration"),SLt.forEach(t),O4r=r(LNe," (T5 model)"),LNe.forEach(t),Ie.forEach(t),V4r=i(Rl),T(dE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),xOe=i(f),_c=n(f,"H2",{class:!0});var NXe=s(_c);cE=n(NXe,"A",{id:!0,class:!0,href:!0});var RLt=s(cE);YTe=n(RLt,"SPAN",{});var PLt=s(YTe);T(q9.$$.fragment,PLt),PLt.forEach(t),RLt.forEach(t),X4r=i(NXe),KTe=n(NXe,"SPAN",{});var BLt=s(KTe);z4r=r(BLt,"TFAutoModelForSequenceClassification"),BLt.forEach(t),NXe.forEach(t),$Oe=i(f),nr=n(f,"DIV",{class:!0});var Pl=s(nr);T(j9.$$.fragment,Pl),W4r=i(Pl),bc=n(Pl,"P",{});var ire=s(bc);Q4r=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mJ=n(ire,"A",{href:!0});var ILt=s(mJ);H4r=r(ILt,"from_pretrained()"),ILt.forEach(t),U4r=r(ire," class method or the "),gJ=n(ire,"A",{href:!0});var NLt=s(gJ);J4r=r(NLt,"from_config()"),NLt.forEach(t),Y4r=r(ire,` class
method.`),ire.forEach(t),K4r=i(Pl),D9=n(Pl,"P",{});var qXe=s(D9);Z4r=r(qXe,"This class cannot be instantiated directly using "),ZTe=n(qXe,"CODE",{});var qLt=s(ZTe);eCr=r(qLt,"__init__()"),qLt.forEach(t),oCr=r(qXe," (throws an error)."),qXe.forEach(t),rCr=i(Pl),It=n(Pl,"DIV",{class:!0});var Sw=s(It);T(G9.$$.fragment,Sw),tCr=i(Sw),e7e=n(Sw,"P",{});var jLt=s(e7e);aCr=r(jLt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jLt.forEach(t),nCr=i(Sw),vc=n(Sw,"P",{});var dre=s(vc);sCr=r(dre,`Note:
Loading a model from its configuration file does `),o7e=n(dre,"STRONG",{});var DLt=s(o7e);lCr=r(DLt,"not"),DLt.forEach(t),iCr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(dre,"A",{href:!0});var GLt=s(hJ);dCr=r(GLt,"from_pretrained()"),GLt.forEach(t),cCr=r(dre," to load the model weights."),dre.forEach(t),fCr=i(Sw),T(fE.$$.fragment,Sw),Sw.forEach(t),mCr=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(O9.$$.fragment,Bl),gCr=i(Bl),r7e=n(Bl,"P",{});var OLt=s(r7e);hCr=r(OLt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),OLt.forEach(t),pCr=i(Bl),fn=n(Bl,"P",{});var Rw=s(fn);uCr=r(Rw,"The model class to instantiate is selected based on the "),t7e=n(Rw,"CODE",{});var VLt=s(t7e);_Cr=r(VLt,"model_type"),VLt.forEach(t),bCr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),a7e=n(Rw,"CODE",{});var XLt=s(a7e);vCr=r(XLt,"pretrained_model_name_or_path"),XLt.forEach(t),FCr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n7e=n(Rw,"CODE",{});var zLt=s(n7e);TCr=r(zLt,"pretrained_model_name_or_path"),zLt.forEach(t),MCr=r(Rw,":"),Rw.forEach(t),ECr=i(Bl),te=n(Bl,"UL",{});var ne=s(te);mE=n(ne,"LI",{});var yNe=s(mE);s7e=n(yNe,"STRONG",{});var WLt=s(s7e);CCr=r(WLt,"albert"),WLt.forEach(t),wCr=r(yNe," \u2014 "),pJ=n(yNe,"A",{href:!0});var QLt=s(pJ);ACr=r(QLt,"TFAlbertForSequenceClassification"),QLt.forEach(t),LCr=r(yNe," (ALBERT model)"),yNe.forEach(t),yCr=i(ne),gE=n(ne,"LI",{});var xNe=s(gE);l7e=n(xNe,"STRONG",{});var HLt=s(l7e);xCr=r(HLt,"bert"),HLt.forEach(t),$Cr=r(xNe," \u2014 "),uJ=n(xNe,"A",{href:!0});var ULt=s(uJ);kCr=r(ULt,"TFBertForSequenceClassification"),ULt.forEach(t),SCr=r(xNe," (BERT model)"),xNe.forEach(t),RCr=i(ne),hE=n(ne,"LI",{});var $Ne=s(hE);i7e=n($Ne,"STRONG",{});var JLt=s(i7e);PCr=r(JLt,"camembert"),JLt.forEach(t),BCr=r($Ne," \u2014 "),_J=n($Ne,"A",{href:!0});var YLt=s(_J);ICr=r(YLt,"TFCamembertForSequenceClassification"),YLt.forEach(t),NCr=r($Ne," (CamemBERT model)"),$Ne.forEach(t),qCr=i(ne),pE=n(ne,"LI",{});var kNe=s(pE);d7e=n(kNe,"STRONG",{});var KLt=s(d7e);jCr=r(KLt,"convbert"),KLt.forEach(t),DCr=r(kNe," \u2014 "),bJ=n(kNe,"A",{href:!0});var ZLt=s(bJ);GCr=r(ZLt,"TFConvBertForSequenceClassification"),ZLt.forEach(t),OCr=r(kNe," (ConvBERT model)"),kNe.forEach(t),VCr=i(ne),uE=n(ne,"LI",{});var SNe=s(uE);c7e=n(SNe,"STRONG",{});var eyt=s(c7e);XCr=r(eyt,"ctrl"),eyt.forEach(t),zCr=r(SNe," \u2014 "),vJ=n(SNe,"A",{href:!0});var oyt=s(vJ);WCr=r(oyt,"TFCTRLForSequenceClassification"),oyt.forEach(t),QCr=r(SNe," (CTRL model)"),SNe.forEach(t),HCr=i(ne),_E=n(ne,"LI",{});var RNe=s(_E);f7e=n(RNe,"STRONG",{});var ryt=s(f7e);UCr=r(ryt,"deberta"),ryt.forEach(t),JCr=r(RNe," \u2014 "),FJ=n(RNe,"A",{href:!0});var tyt=s(FJ);YCr=r(tyt,"TFDebertaForSequenceClassification"),tyt.forEach(t),KCr=r(RNe," (DeBERTa model)"),RNe.forEach(t),ZCr=i(ne),bE=n(ne,"LI",{});var PNe=s(bE);m7e=n(PNe,"STRONG",{});var ayt=s(m7e);e5r=r(ayt,"deberta-v2"),ayt.forEach(t),o5r=r(PNe," \u2014 "),TJ=n(PNe,"A",{href:!0});var nyt=s(TJ);r5r=r(nyt,"TFDebertaV2ForSequenceClassification"),nyt.forEach(t),t5r=r(PNe," (DeBERTa-v2 model)"),PNe.forEach(t),a5r=i(ne),vE=n(ne,"LI",{});var BNe=s(vE);g7e=n(BNe,"STRONG",{});var syt=s(g7e);n5r=r(syt,"distilbert"),syt.forEach(t),s5r=r(BNe," \u2014 "),MJ=n(BNe,"A",{href:!0});var lyt=s(MJ);l5r=r(lyt,"TFDistilBertForSequenceClassification"),lyt.forEach(t),i5r=r(BNe," (DistilBERT model)"),BNe.forEach(t),d5r=i(ne),FE=n(ne,"LI",{});var INe=s(FE);h7e=n(INe,"STRONG",{});var iyt=s(h7e);c5r=r(iyt,"electra"),iyt.forEach(t),f5r=r(INe," \u2014 "),EJ=n(INe,"A",{href:!0});var dyt=s(EJ);m5r=r(dyt,"TFElectraForSequenceClassification"),dyt.forEach(t),g5r=r(INe," (ELECTRA model)"),INe.forEach(t),h5r=i(ne),TE=n(ne,"LI",{});var NNe=s(TE);p7e=n(NNe,"STRONG",{});var cyt=s(p7e);p5r=r(cyt,"flaubert"),cyt.forEach(t),u5r=r(NNe," \u2014 "),CJ=n(NNe,"A",{href:!0});var fyt=s(CJ);_5r=r(fyt,"TFFlaubertForSequenceClassification"),fyt.forEach(t),b5r=r(NNe," (FlauBERT model)"),NNe.forEach(t),v5r=i(ne),ME=n(ne,"LI",{});var qNe=s(ME);u7e=n(qNe,"STRONG",{});var myt=s(u7e);F5r=r(myt,"funnel"),myt.forEach(t),T5r=r(qNe," \u2014 "),wJ=n(qNe,"A",{href:!0});var gyt=s(wJ);M5r=r(gyt,"TFFunnelForSequenceClassification"),gyt.forEach(t),E5r=r(qNe," (Funnel Transformer model)"),qNe.forEach(t),C5r=i(ne),EE=n(ne,"LI",{});var jNe=s(EE);_7e=n(jNe,"STRONG",{});var hyt=s(_7e);w5r=r(hyt,"gpt2"),hyt.forEach(t),A5r=r(jNe," \u2014 "),AJ=n(jNe,"A",{href:!0});var pyt=s(AJ);L5r=r(pyt,"TFGPT2ForSequenceClassification"),pyt.forEach(t),y5r=r(jNe," (OpenAI GPT-2 model)"),jNe.forEach(t),x5r=i(ne),CE=n(ne,"LI",{});var DNe=s(CE);b7e=n(DNe,"STRONG",{});var uyt=s(b7e);$5r=r(uyt,"gptj"),uyt.forEach(t),k5r=r(DNe," \u2014 "),LJ=n(DNe,"A",{href:!0});var _yt=s(LJ);S5r=r(_yt,"TFGPTJForSequenceClassification"),_yt.forEach(t),R5r=r(DNe," (GPT-J model)"),DNe.forEach(t),P5r=i(ne),wE=n(ne,"LI",{});var GNe=s(wE);v7e=n(GNe,"STRONG",{});var byt=s(v7e);B5r=r(byt,"layoutlm"),byt.forEach(t),I5r=r(GNe," \u2014 "),yJ=n(GNe,"A",{href:!0});var vyt=s(yJ);N5r=r(vyt,"TFLayoutLMForSequenceClassification"),vyt.forEach(t),q5r=r(GNe," (LayoutLM model)"),GNe.forEach(t),j5r=i(ne),AE=n(ne,"LI",{});var ONe=s(AE);F7e=n(ONe,"STRONG",{});var Fyt=s(F7e);D5r=r(Fyt,"longformer"),Fyt.forEach(t),G5r=r(ONe," \u2014 "),xJ=n(ONe,"A",{href:!0});var Tyt=s(xJ);O5r=r(Tyt,"TFLongformerForSequenceClassification"),Tyt.forEach(t),V5r=r(ONe," (Longformer model)"),ONe.forEach(t),X5r=i(ne),LE=n(ne,"LI",{});var VNe=s(LE);T7e=n(VNe,"STRONG",{});var Myt=s(T7e);z5r=r(Myt,"mobilebert"),Myt.forEach(t),W5r=r(VNe," \u2014 "),$J=n(VNe,"A",{href:!0});var Eyt=s($J);Q5r=r(Eyt,"TFMobileBertForSequenceClassification"),Eyt.forEach(t),H5r=r(VNe," (MobileBERT model)"),VNe.forEach(t),U5r=i(ne),yE=n(ne,"LI",{});var XNe=s(yE);M7e=n(XNe,"STRONG",{});var Cyt=s(M7e);J5r=r(Cyt,"mpnet"),Cyt.forEach(t),Y5r=r(XNe," \u2014 "),kJ=n(XNe,"A",{href:!0});var wyt=s(kJ);K5r=r(wyt,"TFMPNetForSequenceClassification"),wyt.forEach(t),Z5r=r(XNe," (MPNet model)"),XNe.forEach(t),e3r=i(ne),xE=n(ne,"LI",{});var zNe=s(xE);E7e=n(zNe,"STRONG",{});var Ayt=s(E7e);o3r=r(Ayt,"openai-gpt"),Ayt.forEach(t),r3r=r(zNe," \u2014 "),SJ=n(zNe,"A",{href:!0});var Lyt=s(SJ);t3r=r(Lyt,"TFOpenAIGPTForSequenceClassification"),Lyt.forEach(t),a3r=r(zNe," (OpenAI GPT model)"),zNe.forEach(t),n3r=i(ne),$E=n(ne,"LI",{});var WNe=s($E);C7e=n(WNe,"STRONG",{});var yyt=s(C7e);s3r=r(yyt,"rembert"),yyt.forEach(t),l3r=r(WNe," \u2014 "),RJ=n(WNe,"A",{href:!0});var xyt=s(RJ);i3r=r(xyt,"TFRemBertForSequenceClassification"),xyt.forEach(t),d3r=r(WNe," (RemBERT model)"),WNe.forEach(t),c3r=i(ne),kE=n(ne,"LI",{});var QNe=s(kE);w7e=n(QNe,"STRONG",{});var $yt=s(w7e);f3r=r($yt,"roberta"),$yt.forEach(t),m3r=r(QNe," \u2014 "),PJ=n(QNe,"A",{href:!0});var kyt=s(PJ);g3r=r(kyt,"TFRobertaForSequenceClassification"),kyt.forEach(t),h3r=r(QNe," (RoBERTa model)"),QNe.forEach(t),p3r=i(ne),SE=n(ne,"LI",{});var HNe=s(SE);A7e=n(HNe,"STRONG",{});var Syt=s(A7e);u3r=r(Syt,"roformer"),Syt.forEach(t),_3r=r(HNe," \u2014 "),BJ=n(HNe,"A",{href:!0});var Ryt=s(BJ);b3r=r(Ryt,"TFRoFormerForSequenceClassification"),Ryt.forEach(t),v3r=r(HNe," (RoFormer model)"),HNe.forEach(t),F3r=i(ne),RE=n(ne,"LI",{});var UNe=s(RE);L7e=n(UNe,"STRONG",{});var Pyt=s(L7e);T3r=r(Pyt,"tapas"),Pyt.forEach(t),M3r=r(UNe," \u2014 "),IJ=n(UNe,"A",{href:!0});var Byt=s(IJ);E3r=r(Byt,"TFTapasForSequenceClassification"),Byt.forEach(t),C3r=r(UNe," (TAPAS model)"),UNe.forEach(t),w3r=i(ne),PE=n(ne,"LI",{});var JNe=s(PE);y7e=n(JNe,"STRONG",{});var Iyt=s(y7e);A3r=r(Iyt,"transfo-xl"),Iyt.forEach(t),L3r=r(JNe," \u2014 "),NJ=n(JNe,"A",{href:!0});var Nyt=s(NJ);y3r=r(Nyt,"TFTransfoXLForSequenceClassification"),Nyt.forEach(t),x3r=r(JNe," (Transformer-XL model)"),JNe.forEach(t),$3r=i(ne),BE=n(ne,"LI",{});var YNe=s(BE);x7e=n(YNe,"STRONG",{});var qyt=s(x7e);k3r=r(qyt,"xlm"),qyt.forEach(t),S3r=r(YNe," \u2014 "),qJ=n(YNe,"A",{href:!0});var jyt=s(qJ);R3r=r(jyt,"TFXLMForSequenceClassification"),jyt.forEach(t),P3r=r(YNe," (XLM model)"),YNe.forEach(t),B3r=i(ne),IE=n(ne,"LI",{});var KNe=s(IE);$7e=n(KNe,"STRONG",{});var Dyt=s($7e);I3r=r(Dyt,"xlm-roberta"),Dyt.forEach(t),N3r=r(KNe," \u2014 "),jJ=n(KNe,"A",{href:!0});var Gyt=s(jJ);q3r=r(Gyt,"TFXLMRobertaForSequenceClassification"),Gyt.forEach(t),j3r=r(KNe," (XLM-RoBERTa model)"),KNe.forEach(t),D3r=i(ne),NE=n(ne,"LI",{});var ZNe=s(NE);k7e=n(ZNe,"STRONG",{});var Oyt=s(k7e);G3r=r(Oyt,"xlnet"),Oyt.forEach(t),O3r=r(ZNe," \u2014 "),DJ=n(ZNe,"A",{href:!0});var Vyt=s(DJ);V3r=r(Vyt,"TFXLNetForSequenceClassification"),Vyt.forEach(t),X3r=r(ZNe," (XLNet model)"),ZNe.forEach(t),ne.forEach(t),z3r=i(Bl),T(qE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),kOe=i(f),Fc=n(f,"H2",{class:!0});var jXe=s(Fc);jE=n(jXe,"A",{id:!0,class:!0,href:!0});var Xyt=s(jE);S7e=n(Xyt,"SPAN",{});var zyt=s(S7e);T(V9.$$.fragment,zyt),zyt.forEach(t),Xyt.forEach(t),W3r=i(jXe),R7e=n(jXe,"SPAN",{});var Wyt=s(R7e);Q3r=r(Wyt,"TFAutoModelForMultipleChoice"),Wyt.forEach(t),jXe.forEach(t),SOe=i(f),sr=n(f,"DIV",{class:!0});var Il=s(sr);T(X9.$$.fragment,Il),H3r=i(Il),Tc=n(Il,"P",{});var cre=s(Tc);U3r=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GJ=n(cre,"A",{href:!0});var Qyt=s(GJ);J3r=r(Qyt,"from_pretrained()"),Qyt.forEach(t),Y3r=r(cre," class method or the "),OJ=n(cre,"A",{href:!0});var Hyt=s(OJ);K3r=r(Hyt,"from_config()"),Hyt.forEach(t),Z3r=r(cre,` class
method.`),cre.forEach(t),e0r=i(Il),z9=n(Il,"P",{});var DXe=s(z9);o0r=r(DXe,"This class cannot be instantiated directly using "),P7e=n(DXe,"CODE",{});var Uyt=s(P7e);r0r=r(Uyt,"__init__()"),Uyt.forEach(t),t0r=r(DXe," (throws an error)."),DXe.forEach(t),a0r=i(Il),Nt=n(Il,"DIV",{class:!0});var Pw=s(Nt);T(W9.$$.fragment,Pw),n0r=i(Pw),B7e=n(Pw,"P",{});var Jyt=s(B7e);s0r=r(Jyt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jyt.forEach(t),l0r=i(Pw),Mc=n(Pw,"P",{});var fre=s(Mc);i0r=r(fre,`Note:
Loading a model from its configuration file does `),I7e=n(fre,"STRONG",{});var Yyt=s(I7e);d0r=r(Yyt,"not"),Yyt.forEach(t),c0r=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(fre,"A",{href:!0});var Kyt=s(VJ);f0r=r(Kyt,"from_pretrained()"),Kyt.forEach(t),m0r=r(fre," to load the model weights."),fre.forEach(t),g0r=i(Pw),T(DE.$$.fragment,Pw),Pw.forEach(t),h0r=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(Q9.$$.fragment,Nl),p0r=i(Nl),N7e=n(Nl,"P",{});var Zyt=s(N7e);u0r=r(Zyt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zyt.forEach(t),_0r=i(Nl),mn=n(Nl,"P",{});var Bw=s(mn);b0r=r(Bw,"The model class to instantiate is selected based on the "),q7e=n(Bw,"CODE",{});var e9t=s(q7e);v0r=r(e9t,"model_type"),e9t.forEach(t),F0r=r(Bw,` property of the config object (either
passed as an argument or loaded from `),j7e=n(Bw,"CODE",{});var o9t=s(j7e);T0r=r(o9t,"pretrained_model_name_or_path"),o9t.forEach(t),M0r=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=n(Bw,"CODE",{});var r9t=s(D7e);E0r=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),C0r=r(Bw,":"),Bw.forEach(t),w0r=i(Nl),ue=n(Nl,"UL",{});var ve=s(ue);GE=n(ve,"LI",{});var eqe=s(GE);G7e=n(eqe,"STRONG",{});var t9t=s(G7e);A0r=r(t9t,"albert"),t9t.forEach(t),L0r=r(eqe," \u2014 "),XJ=n(eqe,"A",{href:!0});var a9t=s(XJ);y0r=r(a9t,"TFAlbertForMultipleChoice"),a9t.forEach(t),x0r=r(eqe," (ALBERT model)"),eqe.forEach(t),$0r=i(ve),OE=n(ve,"LI",{});var oqe=s(OE);O7e=n(oqe,"STRONG",{});var n9t=s(O7e);k0r=r(n9t,"bert"),n9t.forEach(t),S0r=r(oqe," \u2014 "),zJ=n(oqe,"A",{href:!0});var s9t=s(zJ);R0r=r(s9t,"TFBertForMultipleChoice"),s9t.forEach(t),P0r=r(oqe," (BERT model)"),oqe.forEach(t),B0r=i(ve),VE=n(ve,"LI",{});var rqe=s(VE);V7e=n(rqe,"STRONG",{});var l9t=s(V7e);I0r=r(l9t,"camembert"),l9t.forEach(t),N0r=r(rqe," \u2014 "),WJ=n(rqe,"A",{href:!0});var i9t=s(WJ);q0r=r(i9t,"TFCamembertForMultipleChoice"),i9t.forEach(t),j0r=r(rqe," (CamemBERT model)"),rqe.forEach(t),D0r=i(ve),XE=n(ve,"LI",{});var tqe=s(XE);X7e=n(tqe,"STRONG",{});var d9t=s(X7e);G0r=r(d9t,"convbert"),d9t.forEach(t),O0r=r(tqe," \u2014 "),QJ=n(tqe,"A",{href:!0});var c9t=s(QJ);V0r=r(c9t,"TFConvBertForMultipleChoice"),c9t.forEach(t),X0r=r(tqe," (ConvBERT model)"),tqe.forEach(t),z0r=i(ve),zE=n(ve,"LI",{});var aqe=s(zE);z7e=n(aqe,"STRONG",{});var f9t=s(z7e);W0r=r(f9t,"distilbert"),f9t.forEach(t),Q0r=r(aqe," \u2014 "),HJ=n(aqe,"A",{href:!0});var m9t=s(HJ);H0r=r(m9t,"TFDistilBertForMultipleChoice"),m9t.forEach(t),U0r=r(aqe," (DistilBERT model)"),aqe.forEach(t),J0r=i(ve),WE=n(ve,"LI",{});var nqe=s(WE);W7e=n(nqe,"STRONG",{});var g9t=s(W7e);Y0r=r(g9t,"electra"),g9t.forEach(t),K0r=r(nqe," \u2014 "),UJ=n(nqe,"A",{href:!0});var h9t=s(UJ);Z0r=r(h9t,"TFElectraForMultipleChoice"),h9t.forEach(t),ewr=r(nqe," (ELECTRA model)"),nqe.forEach(t),owr=i(ve),QE=n(ve,"LI",{});var sqe=s(QE);Q7e=n(sqe,"STRONG",{});var p9t=s(Q7e);rwr=r(p9t,"flaubert"),p9t.forEach(t),twr=r(sqe," \u2014 "),JJ=n(sqe,"A",{href:!0});var u9t=s(JJ);awr=r(u9t,"TFFlaubertForMultipleChoice"),u9t.forEach(t),nwr=r(sqe," (FlauBERT model)"),sqe.forEach(t),swr=i(ve),HE=n(ve,"LI",{});var lqe=s(HE);H7e=n(lqe,"STRONG",{});var _9t=s(H7e);lwr=r(_9t,"funnel"),_9t.forEach(t),iwr=r(lqe," \u2014 "),YJ=n(lqe,"A",{href:!0});var b9t=s(YJ);dwr=r(b9t,"TFFunnelForMultipleChoice"),b9t.forEach(t),cwr=r(lqe," (Funnel Transformer model)"),lqe.forEach(t),fwr=i(ve),UE=n(ve,"LI",{});var iqe=s(UE);U7e=n(iqe,"STRONG",{});var v9t=s(U7e);mwr=r(v9t,"longformer"),v9t.forEach(t),gwr=r(iqe," \u2014 "),KJ=n(iqe,"A",{href:!0});var F9t=s(KJ);hwr=r(F9t,"TFLongformerForMultipleChoice"),F9t.forEach(t),pwr=r(iqe," (Longformer model)"),iqe.forEach(t),uwr=i(ve),JE=n(ve,"LI",{});var dqe=s(JE);J7e=n(dqe,"STRONG",{});var T9t=s(J7e);_wr=r(T9t,"mobilebert"),T9t.forEach(t),bwr=r(dqe," \u2014 "),ZJ=n(dqe,"A",{href:!0});var M9t=s(ZJ);vwr=r(M9t,"TFMobileBertForMultipleChoice"),M9t.forEach(t),Fwr=r(dqe," (MobileBERT model)"),dqe.forEach(t),Twr=i(ve),YE=n(ve,"LI",{});var cqe=s(YE);Y7e=n(cqe,"STRONG",{});var E9t=s(Y7e);Mwr=r(E9t,"mpnet"),E9t.forEach(t),Ewr=r(cqe," \u2014 "),eY=n(cqe,"A",{href:!0});var C9t=s(eY);Cwr=r(C9t,"TFMPNetForMultipleChoice"),C9t.forEach(t),wwr=r(cqe," (MPNet model)"),cqe.forEach(t),Awr=i(ve),KE=n(ve,"LI",{});var fqe=s(KE);K7e=n(fqe,"STRONG",{});var w9t=s(K7e);Lwr=r(w9t,"rembert"),w9t.forEach(t),ywr=r(fqe," \u2014 "),oY=n(fqe,"A",{href:!0});var A9t=s(oY);xwr=r(A9t,"TFRemBertForMultipleChoice"),A9t.forEach(t),$wr=r(fqe," (RemBERT model)"),fqe.forEach(t),kwr=i(ve),ZE=n(ve,"LI",{});var mqe=s(ZE);Z7e=n(mqe,"STRONG",{});var L9t=s(Z7e);Swr=r(L9t,"roberta"),L9t.forEach(t),Rwr=r(mqe," \u2014 "),rY=n(mqe,"A",{href:!0});var y9t=s(rY);Pwr=r(y9t,"TFRobertaForMultipleChoice"),y9t.forEach(t),Bwr=r(mqe," (RoBERTa model)"),mqe.forEach(t),Iwr=i(ve),e4=n(ve,"LI",{});var gqe=s(e4);e8e=n(gqe,"STRONG",{});var x9t=s(e8e);Nwr=r(x9t,"roformer"),x9t.forEach(t),qwr=r(gqe," \u2014 "),tY=n(gqe,"A",{href:!0});var $9t=s(tY);jwr=r($9t,"TFRoFormerForMultipleChoice"),$9t.forEach(t),Dwr=r(gqe," (RoFormer model)"),gqe.forEach(t),Gwr=i(ve),o4=n(ve,"LI",{});var hqe=s(o4);o8e=n(hqe,"STRONG",{});var k9t=s(o8e);Owr=r(k9t,"xlm"),k9t.forEach(t),Vwr=r(hqe," \u2014 "),aY=n(hqe,"A",{href:!0});var S9t=s(aY);Xwr=r(S9t,"TFXLMForMultipleChoice"),S9t.forEach(t),zwr=r(hqe," (XLM model)"),hqe.forEach(t),Wwr=i(ve),r4=n(ve,"LI",{});var pqe=s(r4);r8e=n(pqe,"STRONG",{});var R9t=s(r8e);Qwr=r(R9t,"xlm-roberta"),R9t.forEach(t),Hwr=r(pqe," \u2014 "),nY=n(pqe,"A",{href:!0});var P9t=s(nY);Uwr=r(P9t,"TFXLMRobertaForMultipleChoice"),P9t.forEach(t),Jwr=r(pqe," (XLM-RoBERTa model)"),pqe.forEach(t),Ywr=i(ve),t4=n(ve,"LI",{});var uqe=s(t4);t8e=n(uqe,"STRONG",{});var B9t=s(t8e);Kwr=r(B9t,"xlnet"),B9t.forEach(t),Zwr=r(uqe," \u2014 "),sY=n(uqe,"A",{href:!0});var I9t=s(sY);eAr=r(I9t,"TFXLNetForMultipleChoice"),I9t.forEach(t),oAr=r(uqe," (XLNet model)"),uqe.forEach(t),ve.forEach(t),rAr=i(Nl),T(a4.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),ROe=i(f),Ec=n(f,"H2",{class:!0});var GXe=s(Ec);n4=n(GXe,"A",{id:!0,class:!0,href:!0});var N9t=s(n4);a8e=n(N9t,"SPAN",{});var q9t=s(a8e);T(H9.$$.fragment,q9t),q9t.forEach(t),N9t.forEach(t),tAr=i(GXe),n8e=n(GXe,"SPAN",{});var j9t=s(n8e);aAr=r(j9t,"TFAutoModelForNextSentencePrediction"),j9t.forEach(t),GXe.forEach(t),POe=i(f),lr=n(f,"DIV",{class:!0});var ql=s(lr);T(U9.$$.fragment,ql),nAr=i(ql),Cc=n(ql,"P",{});var mre=s(Cc);sAr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lY=n(mre,"A",{href:!0});var D9t=s(lY);lAr=r(D9t,"from_pretrained()"),D9t.forEach(t),iAr=r(mre," class method or the "),iY=n(mre,"A",{href:!0});var G9t=s(iY);dAr=r(G9t,"from_config()"),G9t.forEach(t),cAr=r(mre,` class
method.`),mre.forEach(t),fAr=i(ql),J9=n(ql,"P",{});var OXe=s(J9);mAr=r(OXe,"This class cannot be instantiated directly using "),s8e=n(OXe,"CODE",{});var O9t=s(s8e);gAr=r(O9t,"__init__()"),O9t.forEach(t),hAr=r(OXe," (throws an error)."),OXe.forEach(t),pAr=i(ql),qt=n(ql,"DIV",{class:!0});var Iw=s(qt);T(Y9.$$.fragment,Iw),uAr=i(Iw),l8e=n(Iw,"P",{});var V9t=s(l8e);_Ar=r(V9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),V9t.forEach(t),bAr=i(Iw),wc=n(Iw,"P",{});var gre=s(wc);vAr=r(gre,`Note:
Loading a model from its configuration file does `),i8e=n(gre,"STRONG",{});var X9t=s(i8e);FAr=r(X9t,"not"),X9t.forEach(t),TAr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(gre,"A",{href:!0});var z9t=s(dY);MAr=r(z9t,"from_pretrained()"),z9t.forEach(t),EAr=r(gre," to load the model weights."),gre.forEach(t),CAr=i(Iw),T(s4.$$.fragment,Iw),Iw.forEach(t),wAr=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(K9.$$.fragment,jl),AAr=i(jl),d8e=n(jl,"P",{});var W9t=s(d8e);LAr=r(W9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),W9t.forEach(t),yAr=i(jl),gn=n(jl,"P",{});var Nw=s(gn);xAr=r(Nw,"The model class to instantiate is selected based on the "),c8e=n(Nw,"CODE",{});var Q9t=s(c8e);$Ar=r(Q9t,"model_type"),Q9t.forEach(t),kAr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),f8e=n(Nw,"CODE",{});var H9t=s(f8e);SAr=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),RAr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m8e=n(Nw,"CODE",{});var U9t=s(m8e);PAr=r(U9t,"pretrained_model_name_or_path"),U9t.forEach(t),BAr=r(Nw,":"),Nw.forEach(t),IAr=i(jl),Z9=n(jl,"UL",{});var VXe=s(Z9);l4=n(VXe,"LI",{});var _qe=s(l4);g8e=n(_qe,"STRONG",{});var J9t=s(g8e);NAr=r(J9t,"bert"),J9t.forEach(t),qAr=r(_qe," \u2014 "),cY=n(_qe,"A",{href:!0});var Y9t=s(cY);jAr=r(Y9t,"TFBertForNextSentencePrediction"),Y9t.forEach(t),DAr=r(_qe," (BERT model)"),_qe.forEach(t),GAr=i(VXe),i4=n(VXe,"LI",{});var bqe=s(i4);h8e=n(bqe,"STRONG",{});var K9t=s(h8e);OAr=r(K9t,"mobilebert"),K9t.forEach(t),VAr=r(bqe," \u2014 "),fY=n(bqe,"A",{href:!0});var Z9t=s(fY);XAr=r(Z9t,"TFMobileBertForNextSentencePrediction"),Z9t.forEach(t),zAr=r(bqe," (MobileBERT model)"),bqe.forEach(t),VXe.forEach(t),WAr=i(jl),T(d4.$$.fragment,jl),jl.forEach(t),ql.forEach(t),BOe=i(f),Ac=n(f,"H2",{class:!0});var XXe=s(Ac);c4=n(XXe,"A",{id:!0,class:!0,href:!0});var ext=s(c4);p8e=n(ext,"SPAN",{});var oxt=s(p8e);T(ex.$$.fragment,oxt),oxt.forEach(t),ext.forEach(t),QAr=i(XXe),u8e=n(XXe,"SPAN",{});var rxt=s(u8e);HAr=r(rxt,"TFAutoModelForTableQuestionAnswering"),rxt.forEach(t),XXe.forEach(t),IOe=i(f),ir=n(f,"DIV",{class:!0});var Dl=s(ir);T(ox.$$.fragment,Dl),UAr=i(Dl),Lc=n(Dl,"P",{});var hre=s(Lc);JAr=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),mY=n(hre,"A",{href:!0});var txt=s(mY);YAr=r(txt,"from_pretrained()"),txt.forEach(t),KAr=r(hre," class method or the "),gY=n(hre,"A",{href:!0});var axt=s(gY);ZAr=r(axt,"from_config()"),axt.forEach(t),eLr=r(hre,` class
method.`),hre.forEach(t),oLr=i(Dl),rx=n(Dl,"P",{});var zXe=s(rx);rLr=r(zXe,"This class cannot be instantiated directly using "),_8e=n(zXe,"CODE",{});var nxt=s(_8e);tLr=r(nxt,"__init__()"),nxt.forEach(t),aLr=r(zXe," (throws an error)."),zXe.forEach(t),nLr=i(Dl),jt=n(Dl,"DIV",{class:!0});var qw=s(jt);T(tx.$$.fragment,qw),sLr=i(qw),b8e=n(qw,"P",{});var sxt=s(b8e);lLr=r(sxt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sxt.forEach(t),iLr=i(qw),yc=n(qw,"P",{});var pre=s(yc);dLr=r(pre,`Note:
Loading a model from its configuration file does `),v8e=n(pre,"STRONG",{});var lxt=s(v8e);cLr=r(lxt,"not"),lxt.forEach(t),fLr=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(pre,"A",{href:!0});var ixt=s(hY);mLr=r(ixt,"from_pretrained()"),ixt.forEach(t),gLr=r(pre," to load the model weights."),pre.forEach(t),hLr=i(qw),T(f4.$$.fragment,qw),qw.forEach(t),pLr=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(ax.$$.fragment,Gl),uLr=i(Gl),F8e=n(Gl,"P",{});var dxt=s(F8e);_Lr=r(dxt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dxt.forEach(t),bLr=i(Gl),hn=n(Gl,"P",{});var jw=s(hn);vLr=r(jw,"The model class to instantiate is selected based on the "),T8e=n(jw,"CODE",{});var cxt=s(T8e);FLr=r(cxt,"model_type"),cxt.forEach(t),TLr=r(jw,` property of the config object (either
passed as an argument or loaded from `),M8e=n(jw,"CODE",{});var fxt=s(M8e);MLr=r(fxt,"pretrained_model_name_or_path"),fxt.forEach(t),ELr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E8e=n(jw,"CODE",{});var mxt=s(E8e);CLr=r(mxt,"pretrained_model_name_or_path"),mxt.forEach(t),wLr=r(jw,":"),jw.forEach(t),ALr=i(Gl),C8e=n(Gl,"UL",{});var gxt=s(C8e);m4=n(gxt,"LI",{});var vqe=s(m4);w8e=n(vqe,"STRONG",{});var hxt=s(w8e);LLr=r(hxt,"tapas"),hxt.forEach(t),yLr=r(vqe," \u2014 "),pY=n(vqe,"A",{href:!0});var pxt=s(pY);xLr=r(pxt,"TFTapasForQuestionAnswering"),pxt.forEach(t),$Lr=r(vqe," (TAPAS model)"),vqe.forEach(t),gxt.forEach(t),kLr=i(Gl),T(g4.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),NOe=i(f),xc=n(f,"H2",{class:!0});var WXe=s(xc);h4=n(WXe,"A",{id:!0,class:!0,href:!0});var uxt=s(h4);A8e=n(uxt,"SPAN",{});var _xt=s(A8e);T(nx.$$.fragment,_xt),_xt.forEach(t),uxt.forEach(t),SLr=i(WXe),L8e=n(WXe,"SPAN",{});var bxt=s(L8e);RLr=r(bxt,"TFAutoModelForTokenClassification"),bxt.forEach(t),WXe.forEach(t),qOe=i(f),dr=n(f,"DIV",{class:!0});var Ol=s(dr);T(sx.$$.fragment,Ol),PLr=i(Ol),$c=n(Ol,"P",{});var ure=s($c);BLr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uY=n(ure,"A",{href:!0});var vxt=s(uY);ILr=r(vxt,"from_pretrained()"),vxt.forEach(t),NLr=r(ure," class method or the "),_Y=n(ure,"A",{href:!0});var Fxt=s(_Y);qLr=r(Fxt,"from_config()"),Fxt.forEach(t),jLr=r(ure,` class
method.`),ure.forEach(t),DLr=i(Ol),lx=n(Ol,"P",{});var QXe=s(lx);GLr=r(QXe,"This class cannot be instantiated directly using "),y8e=n(QXe,"CODE",{});var Txt=s(y8e);OLr=r(Txt,"__init__()"),Txt.forEach(t),VLr=r(QXe," (throws an error)."),QXe.forEach(t),XLr=i(Ol),Dt=n(Ol,"DIV",{class:!0});var Dw=s(Dt);T(ix.$$.fragment,Dw),zLr=i(Dw),x8e=n(Dw,"P",{});var Mxt=s(x8e);WLr=r(Mxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mxt.forEach(t),QLr=i(Dw),kc=n(Dw,"P",{});var _re=s(kc);HLr=r(_re,`Note:
Loading a model from its configuration file does `),$8e=n(_re,"STRONG",{});var Ext=s($8e);ULr=r(Ext,"not"),Ext.forEach(t),JLr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(_re,"A",{href:!0});var Cxt=s(bY);YLr=r(Cxt,"from_pretrained()"),Cxt.forEach(t),KLr=r(_re," to load the model weights."),_re.forEach(t),ZLr=i(Dw),T(p4.$$.fragment,Dw),Dw.forEach(t),eyr=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(dx.$$.fragment,Vl),oyr=i(Vl),k8e=n(Vl,"P",{});var wxt=s(k8e);ryr=r(wxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wxt.forEach(t),tyr=i(Vl),pn=n(Vl,"P",{});var Gw=s(pn);ayr=r(Gw,"The model class to instantiate is selected based on the "),S8e=n(Gw,"CODE",{});var Axt=s(S8e);nyr=r(Axt,"model_type"),Axt.forEach(t),syr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),R8e=n(Gw,"CODE",{});var Lxt=s(R8e);lyr=r(Lxt,"pretrained_model_name_or_path"),Lxt.forEach(t),iyr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P8e=n(Gw,"CODE",{});var yxt=s(P8e);dyr=r(yxt,"pretrained_model_name_or_path"),yxt.forEach(t),cyr=r(Gw,":"),Gw.forEach(t),fyr=i(Vl),de=n(Vl,"UL",{});var me=s(de);u4=n(me,"LI",{});var Fqe=s(u4);B8e=n(Fqe,"STRONG",{});var xxt=s(B8e);myr=r(xxt,"albert"),xxt.forEach(t),gyr=r(Fqe," \u2014 "),vY=n(Fqe,"A",{href:!0});var $xt=s(vY);hyr=r($xt,"TFAlbertForTokenClassification"),$xt.forEach(t),pyr=r(Fqe," (ALBERT model)"),Fqe.forEach(t),uyr=i(me),_4=n(me,"LI",{});var Tqe=s(_4);I8e=n(Tqe,"STRONG",{});var kxt=s(I8e);_yr=r(kxt,"bert"),kxt.forEach(t),byr=r(Tqe," \u2014 "),FY=n(Tqe,"A",{href:!0});var Sxt=s(FY);vyr=r(Sxt,"TFBertForTokenClassification"),Sxt.forEach(t),Fyr=r(Tqe," (BERT model)"),Tqe.forEach(t),Tyr=i(me),b4=n(me,"LI",{});var Mqe=s(b4);N8e=n(Mqe,"STRONG",{});var Rxt=s(N8e);Myr=r(Rxt,"camembert"),Rxt.forEach(t),Eyr=r(Mqe," \u2014 "),TY=n(Mqe,"A",{href:!0});var Pxt=s(TY);Cyr=r(Pxt,"TFCamembertForTokenClassification"),Pxt.forEach(t),wyr=r(Mqe," (CamemBERT model)"),Mqe.forEach(t),Ayr=i(me),v4=n(me,"LI",{});var Eqe=s(v4);q8e=n(Eqe,"STRONG",{});var Bxt=s(q8e);Lyr=r(Bxt,"convbert"),Bxt.forEach(t),yyr=r(Eqe," \u2014 "),MY=n(Eqe,"A",{href:!0});var Ixt=s(MY);xyr=r(Ixt,"TFConvBertForTokenClassification"),Ixt.forEach(t),$yr=r(Eqe," (ConvBERT model)"),Eqe.forEach(t),kyr=i(me),F4=n(me,"LI",{});var Cqe=s(F4);j8e=n(Cqe,"STRONG",{});var Nxt=s(j8e);Syr=r(Nxt,"deberta"),Nxt.forEach(t),Ryr=r(Cqe," \u2014 "),EY=n(Cqe,"A",{href:!0});var qxt=s(EY);Pyr=r(qxt,"TFDebertaForTokenClassification"),qxt.forEach(t),Byr=r(Cqe," (DeBERTa model)"),Cqe.forEach(t),Iyr=i(me),T4=n(me,"LI",{});var wqe=s(T4);D8e=n(wqe,"STRONG",{});var jxt=s(D8e);Nyr=r(jxt,"deberta-v2"),jxt.forEach(t),qyr=r(wqe," \u2014 "),CY=n(wqe,"A",{href:!0});var Dxt=s(CY);jyr=r(Dxt,"TFDebertaV2ForTokenClassification"),Dxt.forEach(t),Dyr=r(wqe," (DeBERTa-v2 model)"),wqe.forEach(t),Gyr=i(me),M4=n(me,"LI",{});var Aqe=s(M4);G8e=n(Aqe,"STRONG",{});var Gxt=s(G8e);Oyr=r(Gxt,"distilbert"),Gxt.forEach(t),Vyr=r(Aqe," \u2014 "),wY=n(Aqe,"A",{href:!0});var Oxt=s(wY);Xyr=r(Oxt,"TFDistilBertForTokenClassification"),Oxt.forEach(t),zyr=r(Aqe," (DistilBERT model)"),Aqe.forEach(t),Wyr=i(me),E4=n(me,"LI",{});var Lqe=s(E4);O8e=n(Lqe,"STRONG",{});var Vxt=s(O8e);Qyr=r(Vxt,"electra"),Vxt.forEach(t),Hyr=r(Lqe," \u2014 "),AY=n(Lqe,"A",{href:!0});var Xxt=s(AY);Uyr=r(Xxt,"TFElectraForTokenClassification"),Xxt.forEach(t),Jyr=r(Lqe," (ELECTRA model)"),Lqe.forEach(t),Yyr=i(me),C4=n(me,"LI",{});var yqe=s(C4);V8e=n(yqe,"STRONG",{});var zxt=s(V8e);Kyr=r(zxt,"flaubert"),zxt.forEach(t),Zyr=r(yqe," \u2014 "),LY=n(yqe,"A",{href:!0});var Wxt=s(LY);e9r=r(Wxt,"TFFlaubertForTokenClassification"),Wxt.forEach(t),o9r=r(yqe," (FlauBERT model)"),yqe.forEach(t),r9r=i(me),w4=n(me,"LI",{});var xqe=s(w4);X8e=n(xqe,"STRONG",{});var Qxt=s(X8e);t9r=r(Qxt,"funnel"),Qxt.forEach(t),a9r=r(xqe," \u2014 "),yY=n(xqe,"A",{href:!0});var Hxt=s(yY);n9r=r(Hxt,"TFFunnelForTokenClassification"),Hxt.forEach(t),s9r=r(xqe," (Funnel Transformer model)"),xqe.forEach(t),l9r=i(me),A4=n(me,"LI",{});var $qe=s(A4);z8e=n($qe,"STRONG",{});var Uxt=s(z8e);i9r=r(Uxt,"layoutlm"),Uxt.forEach(t),d9r=r($qe," \u2014 "),xY=n($qe,"A",{href:!0});var Jxt=s(xY);c9r=r(Jxt,"TFLayoutLMForTokenClassification"),Jxt.forEach(t),f9r=r($qe," (LayoutLM model)"),$qe.forEach(t),m9r=i(me),L4=n(me,"LI",{});var kqe=s(L4);W8e=n(kqe,"STRONG",{});var Yxt=s(W8e);g9r=r(Yxt,"longformer"),Yxt.forEach(t),h9r=r(kqe," \u2014 "),$Y=n(kqe,"A",{href:!0});var Kxt=s($Y);p9r=r(Kxt,"TFLongformerForTokenClassification"),Kxt.forEach(t),u9r=r(kqe," (Longformer model)"),kqe.forEach(t),_9r=i(me),y4=n(me,"LI",{});var Sqe=s(y4);Q8e=n(Sqe,"STRONG",{});var Zxt=s(Q8e);b9r=r(Zxt,"mobilebert"),Zxt.forEach(t),v9r=r(Sqe," \u2014 "),kY=n(Sqe,"A",{href:!0});var e$t=s(kY);F9r=r(e$t,"TFMobileBertForTokenClassification"),e$t.forEach(t),T9r=r(Sqe," (MobileBERT model)"),Sqe.forEach(t),M9r=i(me),x4=n(me,"LI",{});var Rqe=s(x4);H8e=n(Rqe,"STRONG",{});var o$t=s(H8e);E9r=r(o$t,"mpnet"),o$t.forEach(t),C9r=r(Rqe," \u2014 "),SY=n(Rqe,"A",{href:!0});var r$t=s(SY);w9r=r(r$t,"TFMPNetForTokenClassification"),r$t.forEach(t),A9r=r(Rqe," (MPNet model)"),Rqe.forEach(t),L9r=i(me),$4=n(me,"LI",{});var Pqe=s($4);U8e=n(Pqe,"STRONG",{});var t$t=s(U8e);y9r=r(t$t,"rembert"),t$t.forEach(t),x9r=r(Pqe," \u2014 "),RY=n(Pqe,"A",{href:!0});var a$t=s(RY);$9r=r(a$t,"TFRemBertForTokenClassification"),a$t.forEach(t),k9r=r(Pqe," (RemBERT model)"),Pqe.forEach(t),S9r=i(me),k4=n(me,"LI",{});var Bqe=s(k4);J8e=n(Bqe,"STRONG",{});var n$t=s(J8e);R9r=r(n$t,"roberta"),n$t.forEach(t),P9r=r(Bqe," \u2014 "),PY=n(Bqe,"A",{href:!0});var s$t=s(PY);B9r=r(s$t,"TFRobertaForTokenClassification"),s$t.forEach(t),I9r=r(Bqe," (RoBERTa model)"),Bqe.forEach(t),N9r=i(me),S4=n(me,"LI",{});var Iqe=s(S4);Y8e=n(Iqe,"STRONG",{});var l$t=s(Y8e);q9r=r(l$t,"roformer"),l$t.forEach(t),j9r=r(Iqe," \u2014 "),BY=n(Iqe,"A",{href:!0});var i$t=s(BY);D9r=r(i$t,"TFRoFormerForTokenClassification"),i$t.forEach(t),G9r=r(Iqe," (RoFormer model)"),Iqe.forEach(t),O9r=i(me),R4=n(me,"LI",{});var Nqe=s(R4);K8e=n(Nqe,"STRONG",{});var d$t=s(K8e);V9r=r(d$t,"xlm"),d$t.forEach(t),X9r=r(Nqe," \u2014 "),IY=n(Nqe,"A",{href:!0});var c$t=s(IY);z9r=r(c$t,"TFXLMForTokenClassification"),c$t.forEach(t),W9r=r(Nqe," (XLM model)"),Nqe.forEach(t),Q9r=i(me),P4=n(me,"LI",{});var qqe=s(P4);Z8e=n(qqe,"STRONG",{});var f$t=s(Z8e);H9r=r(f$t,"xlm-roberta"),f$t.forEach(t),U9r=r(qqe," \u2014 "),NY=n(qqe,"A",{href:!0});var m$t=s(NY);J9r=r(m$t,"TFXLMRobertaForTokenClassification"),m$t.forEach(t),Y9r=r(qqe," (XLM-RoBERTa model)"),qqe.forEach(t),K9r=i(me),B4=n(me,"LI",{});var jqe=s(B4);eMe=n(jqe,"STRONG",{});var g$t=s(eMe);Z9r=r(g$t,"xlnet"),g$t.forEach(t),exr=r(jqe," \u2014 "),qY=n(jqe,"A",{href:!0});var h$t=s(qY);oxr=r(h$t,"TFXLNetForTokenClassification"),h$t.forEach(t),rxr=r(jqe," (XLNet model)"),jqe.forEach(t),me.forEach(t),txr=i(Vl),T(I4.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),jOe=i(f),Sc=n(f,"H2",{class:!0});var HXe=s(Sc);N4=n(HXe,"A",{id:!0,class:!0,href:!0});var p$t=s(N4);oMe=n(p$t,"SPAN",{});var u$t=s(oMe);T(cx.$$.fragment,u$t),u$t.forEach(t),p$t.forEach(t),axr=i(HXe),rMe=n(HXe,"SPAN",{});var _$t=s(rMe);nxr=r(_$t,"TFAutoModelForQuestionAnswering"),_$t.forEach(t),HXe.forEach(t),DOe=i(f),cr=n(f,"DIV",{class:!0});var Xl=s(cr);T(fx.$$.fragment,Xl),sxr=i(Xl),Rc=n(Xl,"P",{});var bre=s(Rc);lxr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jY=n(bre,"A",{href:!0});var b$t=s(jY);ixr=r(b$t,"from_pretrained()"),b$t.forEach(t),dxr=r(bre," class method or the "),DY=n(bre,"A",{href:!0});var v$t=s(DY);cxr=r(v$t,"from_config()"),v$t.forEach(t),fxr=r(bre,` class
method.`),bre.forEach(t),mxr=i(Xl),mx=n(Xl,"P",{});var UXe=s(mx);gxr=r(UXe,"This class cannot be instantiated directly using "),tMe=n(UXe,"CODE",{});var F$t=s(tMe);hxr=r(F$t,"__init__()"),F$t.forEach(t),pxr=r(UXe," (throws an error)."),UXe.forEach(t),uxr=i(Xl),Gt=n(Xl,"DIV",{class:!0});var Ow=s(Gt);T(gx.$$.fragment,Ow),_xr=i(Ow),aMe=n(Ow,"P",{});var T$t=s(aMe);bxr=r(T$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),T$t.forEach(t),vxr=i(Ow),Pc=n(Ow,"P",{});var vre=s(Pc);Fxr=r(vre,`Note:
Loading a model from its configuration file does `),nMe=n(vre,"STRONG",{});var M$t=s(nMe);Txr=r(M$t,"not"),M$t.forEach(t),Mxr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(vre,"A",{href:!0});var E$t=s(GY);Exr=r(E$t,"from_pretrained()"),E$t.forEach(t),Cxr=r(vre," to load the model weights."),vre.forEach(t),wxr=i(Ow),T(q4.$$.fragment,Ow),Ow.forEach(t),Axr=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(hx.$$.fragment,zl),Lxr=i(zl),sMe=n(zl,"P",{});var C$t=s(sMe);yxr=r(C$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),C$t.forEach(t),xxr=i(zl),un=n(zl,"P",{});var Vw=s(un);$xr=r(Vw,"The model class to instantiate is selected based on the "),lMe=n(Vw,"CODE",{});var w$t=s(lMe);kxr=r(w$t,"model_type"),w$t.forEach(t),Sxr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),iMe=n(Vw,"CODE",{});var A$t=s(iMe);Rxr=r(A$t,"pretrained_model_name_or_path"),A$t.forEach(t),Pxr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=n(Vw,"CODE",{});var L$t=s(dMe);Bxr=r(L$t,"pretrained_model_name_or_path"),L$t.forEach(t),Ixr=r(Vw,":"),Vw.forEach(t),Nxr=i(zl),ce=n(zl,"UL",{});var ge=s(ce);j4=n(ge,"LI",{});var Dqe=s(j4);cMe=n(Dqe,"STRONG",{});var y$t=s(cMe);qxr=r(y$t,"albert"),y$t.forEach(t),jxr=r(Dqe," \u2014 "),OY=n(Dqe,"A",{href:!0});var x$t=s(OY);Dxr=r(x$t,"TFAlbertForQuestionAnswering"),x$t.forEach(t),Gxr=r(Dqe," (ALBERT model)"),Dqe.forEach(t),Oxr=i(ge),D4=n(ge,"LI",{});var Gqe=s(D4);fMe=n(Gqe,"STRONG",{});var $$t=s(fMe);Vxr=r($$t,"bert"),$$t.forEach(t),Xxr=r(Gqe," \u2014 "),VY=n(Gqe,"A",{href:!0});var k$t=s(VY);zxr=r(k$t,"TFBertForQuestionAnswering"),k$t.forEach(t),Wxr=r(Gqe," (BERT model)"),Gqe.forEach(t),Qxr=i(ge),G4=n(ge,"LI",{});var Oqe=s(G4);mMe=n(Oqe,"STRONG",{});var S$t=s(mMe);Hxr=r(S$t,"camembert"),S$t.forEach(t),Uxr=r(Oqe," \u2014 "),XY=n(Oqe,"A",{href:!0});var R$t=s(XY);Jxr=r(R$t,"TFCamembertForQuestionAnswering"),R$t.forEach(t),Yxr=r(Oqe," (CamemBERT model)"),Oqe.forEach(t),Kxr=i(ge),O4=n(ge,"LI",{});var Vqe=s(O4);gMe=n(Vqe,"STRONG",{});var P$t=s(gMe);Zxr=r(P$t,"convbert"),P$t.forEach(t),e$r=r(Vqe," \u2014 "),zY=n(Vqe,"A",{href:!0});var B$t=s(zY);o$r=r(B$t,"TFConvBertForQuestionAnswering"),B$t.forEach(t),r$r=r(Vqe," (ConvBERT model)"),Vqe.forEach(t),t$r=i(ge),V4=n(ge,"LI",{});var Xqe=s(V4);hMe=n(Xqe,"STRONG",{});var I$t=s(hMe);a$r=r(I$t,"deberta"),I$t.forEach(t),n$r=r(Xqe," \u2014 "),WY=n(Xqe,"A",{href:!0});var N$t=s(WY);s$r=r(N$t,"TFDebertaForQuestionAnswering"),N$t.forEach(t),l$r=r(Xqe," (DeBERTa model)"),Xqe.forEach(t),i$r=i(ge),X4=n(ge,"LI",{});var zqe=s(X4);pMe=n(zqe,"STRONG",{});var q$t=s(pMe);d$r=r(q$t,"deberta-v2"),q$t.forEach(t),c$r=r(zqe," \u2014 "),QY=n(zqe,"A",{href:!0});var j$t=s(QY);f$r=r(j$t,"TFDebertaV2ForQuestionAnswering"),j$t.forEach(t),m$r=r(zqe," (DeBERTa-v2 model)"),zqe.forEach(t),g$r=i(ge),z4=n(ge,"LI",{});var Wqe=s(z4);uMe=n(Wqe,"STRONG",{});var D$t=s(uMe);h$r=r(D$t,"distilbert"),D$t.forEach(t),p$r=r(Wqe," \u2014 "),HY=n(Wqe,"A",{href:!0});var G$t=s(HY);u$r=r(G$t,"TFDistilBertForQuestionAnswering"),G$t.forEach(t),_$r=r(Wqe," (DistilBERT model)"),Wqe.forEach(t),b$r=i(ge),W4=n(ge,"LI",{});var Qqe=s(W4);_Me=n(Qqe,"STRONG",{});var O$t=s(_Me);v$r=r(O$t,"electra"),O$t.forEach(t),F$r=r(Qqe," \u2014 "),UY=n(Qqe,"A",{href:!0});var V$t=s(UY);T$r=r(V$t,"TFElectraForQuestionAnswering"),V$t.forEach(t),M$r=r(Qqe," (ELECTRA model)"),Qqe.forEach(t),E$r=i(ge),Q4=n(ge,"LI",{});var Hqe=s(Q4);bMe=n(Hqe,"STRONG",{});var X$t=s(bMe);C$r=r(X$t,"flaubert"),X$t.forEach(t),w$r=r(Hqe," \u2014 "),JY=n(Hqe,"A",{href:!0});var z$t=s(JY);A$r=r(z$t,"TFFlaubertForQuestionAnsweringSimple"),z$t.forEach(t),L$r=r(Hqe," (FlauBERT model)"),Hqe.forEach(t),y$r=i(ge),H4=n(ge,"LI",{});var Uqe=s(H4);vMe=n(Uqe,"STRONG",{});var W$t=s(vMe);x$r=r(W$t,"funnel"),W$t.forEach(t),$$r=r(Uqe," \u2014 "),YY=n(Uqe,"A",{href:!0});var Q$t=s(YY);k$r=r(Q$t,"TFFunnelForQuestionAnswering"),Q$t.forEach(t),S$r=r(Uqe," (Funnel Transformer model)"),Uqe.forEach(t),R$r=i(ge),U4=n(ge,"LI",{});var Jqe=s(U4);FMe=n(Jqe,"STRONG",{});var H$t=s(FMe);P$r=r(H$t,"gptj"),H$t.forEach(t),B$r=r(Jqe," \u2014 "),KY=n(Jqe,"A",{href:!0});var U$t=s(KY);I$r=r(U$t,"TFGPTJForQuestionAnswering"),U$t.forEach(t),N$r=r(Jqe," (GPT-J model)"),Jqe.forEach(t),q$r=i(ge),J4=n(ge,"LI",{});var Yqe=s(J4);TMe=n(Yqe,"STRONG",{});var J$t=s(TMe);j$r=r(J$t,"longformer"),J$t.forEach(t),D$r=r(Yqe," \u2014 "),ZY=n(Yqe,"A",{href:!0});var Y$t=s(ZY);G$r=r(Y$t,"TFLongformerForQuestionAnswering"),Y$t.forEach(t),O$r=r(Yqe," (Longformer model)"),Yqe.forEach(t),V$r=i(ge),Y4=n(ge,"LI",{});var Kqe=s(Y4);MMe=n(Kqe,"STRONG",{});var K$t=s(MMe);X$r=r(K$t,"mobilebert"),K$t.forEach(t),z$r=r(Kqe," \u2014 "),eK=n(Kqe,"A",{href:!0});var Z$t=s(eK);W$r=r(Z$t,"TFMobileBertForQuestionAnswering"),Z$t.forEach(t),Q$r=r(Kqe," (MobileBERT model)"),Kqe.forEach(t),H$r=i(ge),K4=n(ge,"LI",{});var Zqe=s(K4);EMe=n(Zqe,"STRONG",{});var ekt=s(EMe);U$r=r(ekt,"mpnet"),ekt.forEach(t),J$r=r(Zqe," \u2014 "),oK=n(Zqe,"A",{href:!0});var okt=s(oK);Y$r=r(okt,"TFMPNetForQuestionAnswering"),okt.forEach(t),K$r=r(Zqe," (MPNet model)"),Zqe.forEach(t),Z$r=i(ge),Z4=n(ge,"LI",{});var eje=s(Z4);CMe=n(eje,"STRONG",{});var rkt=s(CMe);ekr=r(rkt,"rembert"),rkt.forEach(t),okr=r(eje," \u2014 "),rK=n(eje,"A",{href:!0});var tkt=s(rK);rkr=r(tkt,"TFRemBertForQuestionAnswering"),tkt.forEach(t),tkr=r(eje," (RemBERT model)"),eje.forEach(t),akr=i(ge),eC=n(ge,"LI",{});var oje=s(eC);wMe=n(oje,"STRONG",{});var akt=s(wMe);nkr=r(akt,"roberta"),akt.forEach(t),skr=r(oje," \u2014 "),tK=n(oje,"A",{href:!0});var nkt=s(tK);lkr=r(nkt,"TFRobertaForQuestionAnswering"),nkt.forEach(t),ikr=r(oje," (RoBERTa model)"),oje.forEach(t),dkr=i(ge),oC=n(ge,"LI",{});var rje=s(oC);AMe=n(rje,"STRONG",{});var skt=s(AMe);ckr=r(skt,"roformer"),skt.forEach(t),fkr=r(rje," \u2014 "),aK=n(rje,"A",{href:!0});var lkt=s(aK);mkr=r(lkt,"TFRoFormerForQuestionAnswering"),lkt.forEach(t),gkr=r(rje," (RoFormer model)"),rje.forEach(t),hkr=i(ge),rC=n(ge,"LI",{});var tje=s(rC);LMe=n(tje,"STRONG",{});var ikt=s(LMe);pkr=r(ikt,"xlm"),ikt.forEach(t),ukr=r(tje," \u2014 "),nK=n(tje,"A",{href:!0});var dkt=s(nK);_kr=r(dkt,"TFXLMForQuestionAnsweringSimple"),dkt.forEach(t),bkr=r(tje," (XLM model)"),tje.forEach(t),vkr=i(ge),tC=n(ge,"LI",{});var aje=s(tC);yMe=n(aje,"STRONG",{});var ckt=s(yMe);Fkr=r(ckt,"xlm-roberta"),ckt.forEach(t),Tkr=r(aje," \u2014 "),sK=n(aje,"A",{href:!0});var fkt=s(sK);Mkr=r(fkt,"TFXLMRobertaForQuestionAnswering"),fkt.forEach(t),Ekr=r(aje," (XLM-RoBERTa model)"),aje.forEach(t),Ckr=i(ge),aC=n(ge,"LI",{});var nje=s(aC);xMe=n(nje,"STRONG",{});var mkt=s(xMe);wkr=r(mkt,"xlnet"),mkt.forEach(t),Akr=r(nje," \u2014 "),lK=n(nje,"A",{href:!0});var gkt=s(lK);Lkr=r(gkt,"TFXLNetForQuestionAnsweringSimple"),gkt.forEach(t),ykr=r(nje," (XLNet model)"),nje.forEach(t),ge.forEach(t),xkr=i(zl),T(nC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),GOe=i(f),Bc=n(f,"H2",{class:!0});var JXe=s(Bc);sC=n(JXe,"A",{id:!0,class:!0,href:!0});var hkt=s(sC);$Me=n(hkt,"SPAN",{});var pkt=s($Me);T(px.$$.fragment,pkt),pkt.forEach(t),hkt.forEach(t),$kr=i(JXe),kMe=n(JXe,"SPAN",{});var ukt=s(kMe);kkr=r(ukt,"TFAutoModelForVision2Seq"),ukt.forEach(t),JXe.forEach(t),OOe=i(f),fr=n(f,"DIV",{class:!0});var Wl=s(fr);T(ux.$$.fragment,Wl),Skr=i(Wl),Ic=n(Wl,"P",{});var Fre=s(Ic);Rkr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iK=n(Fre,"A",{href:!0});var _kt=s(iK);Pkr=r(_kt,"from_pretrained()"),_kt.forEach(t),Bkr=r(Fre," class method or the "),dK=n(Fre,"A",{href:!0});var bkt=s(dK);Ikr=r(bkt,"from_config()"),bkt.forEach(t),Nkr=r(Fre,` class
method.`),Fre.forEach(t),qkr=i(Wl),_x=n(Wl,"P",{});var YXe=s(_x);jkr=r(YXe,"This class cannot be instantiated directly using "),SMe=n(YXe,"CODE",{});var vkt=s(SMe);Dkr=r(vkt,"__init__()"),vkt.forEach(t),Gkr=r(YXe," (throws an error)."),YXe.forEach(t),Okr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var Xw=s(Ot);T(bx.$$.fragment,Xw),Vkr=i(Xw),RMe=n(Xw,"P",{});var Fkt=s(RMe);Xkr=r(Fkt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Fkt.forEach(t),zkr=i(Xw),Nc=n(Xw,"P",{});var Tre=s(Nc);Wkr=r(Tre,`Note:
Loading a model from its configuration file does `),PMe=n(Tre,"STRONG",{});var Tkt=s(PMe);Qkr=r(Tkt,"not"),Tkt.forEach(t),Hkr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(Tre,"A",{href:!0});var Mkt=s(cK);Ukr=r(Mkt,"from_pretrained()"),Mkt.forEach(t),Jkr=r(Tre," to load the model weights."),Tre.forEach(t),Ykr=i(Xw),T(lC.$$.fragment,Xw),Xw.forEach(t),Kkr=i(Wl),jr=n(Wl,"DIV",{class:!0});var Ql=s(jr);T(vx.$$.fragment,Ql),Zkr=i(Ql),BMe=n(Ql,"P",{});var Ekt=s(BMe);eSr=r(Ekt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ekt.forEach(t),oSr=i(Ql),_n=n(Ql,"P",{});var zw=s(_n);rSr=r(zw,"The model class to instantiate is selected based on the "),IMe=n(zw,"CODE",{});var Ckt=s(IMe);tSr=r(Ckt,"model_type"),Ckt.forEach(t),aSr=r(zw,` property of the config object (either
passed as an argument or loaded from `),NMe=n(zw,"CODE",{});var wkt=s(NMe);nSr=r(wkt,"pretrained_model_name_or_path"),wkt.forEach(t),sSr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=n(zw,"CODE",{});var Akt=s(qMe);lSr=r(Akt,"pretrained_model_name_or_path"),Akt.forEach(t),iSr=r(zw,":"),zw.forEach(t),dSr=i(Ql),jMe=n(Ql,"UL",{});var Lkt=s(jMe);iC=n(Lkt,"LI",{});var sje=s(iC);DMe=n(sje,"STRONG",{});var ykt=s(DMe);cSr=r(ykt,"vision-encoder-decoder"),ykt.forEach(t),fSr=r(sje," \u2014 "),fK=n(sje,"A",{href:!0});var xkt=s(fK);mSr=r(xkt,"TFVisionEncoderDecoderModel"),xkt.forEach(t),gSr=r(sje," (Vision Encoder decoder model)"),sje.forEach(t),Lkt.forEach(t),hSr=i(Ql),T(dC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),VOe=i(f),qc=n(f,"H2",{class:!0});var KXe=s(qc);cC=n(KXe,"A",{id:!0,class:!0,href:!0});var $kt=s(cC);GMe=n($kt,"SPAN",{});var kkt=s(GMe);T(Fx.$$.fragment,kkt),kkt.forEach(t),$kt.forEach(t),pSr=i(KXe),OMe=n(KXe,"SPAN",{});var Skt=s(OMe);uSr=r(Skt,"TFAutoModelForSpeechSeq2Seq"),Skt.forEach(t),KXe.forEach(t),XOe=i(f),mr=n(f,"DIV",{class:!0});var Hl=s(mr);T(Tx.$$.fragment,Hl),_Sr=i(Hl),jc=n(Hl,"P",{});var Mre=s(jc);bSr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mK=n(Mre,"A",{href:!0});var Rkt=s(mK);vSr=r(Rkt,"from_pretrained()"),Rkt.forEach(t),FSr=r(Mre," class method or the "),gK=n(Mre,"A",{href:!0});var Pkt=s(gK);TSr=r(Pkt,"from_config()"),Pkt.forEach(t),MSr=r(Mre,` class
method.`),Mre.forEach(t),ESr=i(Hl),Mx=n(Hl,"P",{});var ZXe=s(Mx);CSr=r(ZXe,"This class cannot be instantiated directly using "),VMe=n(ZXe,"CODE",{});var Bkt=s(VMe);wSr=r(Bkt,"__init__()"),Bkt.forEach(t),ASr=r(ZXe," (throws an error)."),ZXe.forEach(t),LSr=i(Hl),Vt=n(Hl,"DIV",{class:!0});var Ww=s(Vt);T(Ex.$$.fragment,Ww),ySr=i(Ww),XMe=n(Ww,"P",{});var Ikt=s(XMe);xSr=r(Ikt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ikt.forEach(t),$Sr=i(Ww),Dc=n(Ww,"P",{});var Ere=s(Dc);kSr=r(Ere,`Note:
Loading a model from its configuration file does `),zMe=n(Ere,"STRONG",{});var Nkt=s(zMe);SSr=r(Nkt,"not"),Nkt.forEach(t),RSr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(Ere,"A",{href:!0});var qkt=s(hK);PSr=r(qkt,"from_pretrained()"),qkt.forEach(t),BSr=r(Ere," to load the model weights."),Ere.forEach(t),ISr=i(Ww),T(fC.$$.fragment,Ww),Ww.forEach(t),NSr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T(Cx.$$.fragment,Ul),qSr=i(Ul),WMe=n(Ul,"P",{});var jkt=s(WMe);jSr=r(jkt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jkt.forEach(t),DSr=i(Ul),bn=n(Ul,"P",{});var Qw=s(bn);GSr=r(Qw,"The model class to instantiate is selected based on the "),QMe=n(Qw,"CODE",{});var Dkt=s(QMe);OSr=r(Dkt,"model_type"),Dkt.forEach(t),VSr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),HMe=n(Qw,"CODE",{});var Gkt=s(HMe);XSr=r(Gkt,"pretrained_model_name_or_path"),Gkt.forEach(t),zSr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=n(Qw,"CODE",{});var Okt=s(UMe);WSr=r(Okt,"pretrained_model_name_or_path"),Okt.forEach(t),QSr=r(Qw,":"),Qw.forEach(t),HSr=i(Ul),JMe=n(Ul,"UL",{});var Vkt=s(JMe);mC=n(Vkt,"LI",{});var lje=s(mC);YMe=n(lje,"STRONG",{});var Xkt=s(YMe);USr=r(Xkt,"speech_to_text"),Xkt.forEach(t),JSr=r(lje," \u2014 "),pK=n(lje,"A",{href:!0});var zkt=s(pK);YSr=r(zkt,"TFSpeech2TextForConditionalGeneration"),zkt.forEach(t),KSr=r(lje," (Speech2Text model)"),lje.forEach(t),Vkt.forEach(t),ZSr=i(Ul),T(gC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),zOe=i(f),Gc=n(f,"H2",{class:!0});var eze=s(Gc);hC=n(eze,"A",{id:!0,class:!0,href:!0});var Wkt=s(hC);KMe=n(Wkt,"SPAN",{});var Qkt=s(KMe);T(wx.$$.fragment,Qkt),Qkt.forEach(t),Wkt.forEach(t),eRr=i(eze),ZMe=n(eze,"SPAN",{});var Hkt=s(ZMe);oRr=r(Hkt,"FlaxAutoModel"),Hkt.forEach(t),eze.forEach(t),WOe=i(f),gr=n(f,"DIV",{class:!0});var Jl=s(gr);T(Ax.$$.fragment,Jl),rRr=i(Jl),Oc=n(Jl,"P",{});var Cre=s(Oc);tRr=r(Cre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uK=n(Cre,"A",{href:!0});var Ukt=s(uK);aRr=r(Ukt,"from_pretrained()"),Ukt.forEach(t),nRr=r(Cre," class method or the "),_K=n(Cre,"A",{href:!0});var Jkt=s(_K);sRr=r(Jkt,"from_config()"),Jkt.forEach(t),lRr=r(Cre,` class
method.`),Cre.forEach(t),iRr=i(Jl),Lx=n(Jl,"P",{});var oze=s(Lx);dRr=r(oze,"This class cannot be instantiated directly using "),eEe=n(oze,"CODE",{});var Ykt=s(eEe);cRr=r(Ykt,"__init__()"),Ykt.forEach(t),fRr=r(oze," (throws an error)."),oze.forEach(t),mRr=i(Jl),Xt=n(Jl,"DIV",{class:!0});var Hw=s(Xt);T(yx.$$.fragment,Hw),gRr=i(Hw),oEe=n(Hw,"P",{});var Kkt=s(oEe);hRr=r(Kkt,"Instantiates one of the base model classes of the library from a configuration."),Kkt.forEach(t),pRr=i(Hw),Vc=n(Hw,"P",{});var wre=s(Vc);uRr=r(wre,`Note:
Loading a model from its configuration file does `),rEe=n(wre,"STRONG",{});var Zkt=s(rEe);_Rr=r(Zkt,"not"),Zkt.forEach(t),bRr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=n(wre,"A",{href:!0});var eSt=s(bK);vRr=r(eSt,"from_pretrained()"),eSt.forEach(t),FRr=r(wre," to load the model weights."),wre.forEach(t),TRr=i(Hw),T(pC.$$.fragment,Hw),Hw.forEach(t),MRr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(xx.$$.fragment,Yl),ERr=i(Yl),tEe=n(Yl,"P",{});var oSt=s(tEe);CRr=r(oSt,"Instantiate one of the base model classes of the library from a pretrained model."),oSt.forEach(t),wRr=i(Yl),vn=n(Yl,"P",{});var Uw=s(vn);ARr=r(Uw,"The model class to instantiate is selected based on the "),aEe=n(Uw,"CODE",{});var rSt=s(aEe);LRr=r(rSt,"model_type"),rSt.forEach(t),yRr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),nEe=n(Uw,"CODE",{});var tSt=s(nEe);xRr=r(tSt,"pretrained_model_name_or_path"),tSt.forEach(t),$Rr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=n(Uw,"CODE",{});var aSt=s(sEe);kRr=r(aSt,"pretrained_model_name_or_path"),aSt.forEach(t),SRr=r(Uw,":"),Uw.forEach(t),RRr=i(Yl),oe=n(Yl,"UL",{});var ae=s(oe);uC=n(ae,"LI",{});var ije=s(uC);lEe=n(ije,"STRONG",{});var nSt=s(lEe);PRr=r(nSt,"albert"),nSt.forEach(t),BRr=r(ije," \u2014 "),vK=n(ije,"A",{href:!0});var sSt=s(vK);IRr=r(sSt,"FlaxAlbertModel"),sSt.forEach(t),NRr=r(ije," (ALBERT model)"),ije.forEach(t),qRr=i(ae),_C=n(ae,"LI",{});var dje=s(_C);iEe=n(dje,"STRONG",{});var lSt=s(iEe);jRr=r(lSt,"bart"),lSt.forEach(t),DRr=r(dje," \u2014 "),FK=n(dje,"A",{href:!0});var iSt=s(FK);GRr=r(iSt,"FlaxBartModel"),iSt.forEach(t),ORr=r(dje," (BART model)"),dje.forEach(t),VRr=i(ae),bC=n(ae,"LI",{});var cje=s(bC);dEe=n(cje,"STRONG",{});var dSt=s(dEe);XRr=r(dSt,"beit"),dSt.forEach(t),zRr=r(cje," \u2014 "),TK=n(cje,"A",{href:!0});var cSt=s(TK);WRr=r(cSt,"FlaxBeitModel"),cSt.forEach(t),QRr=r(cje," (BEiT model)"),cje.forEach(t),HRr=i(ae),vC=n(ae,"LI",{});var fje=s(vC);cEe=n(fje,"STRONG",{});var fSt=s(cEe);URr=r(fSt,"bert"),fSt.forEach(t),JRr=r(fje," \u2014 "),MK=n(fje,"A",{href:!0});var mSt=s(MK);YRr=r(mSt,"FlaxBertModel"),mSt.forEach(t),KRr=r(fje," (BERT model)"),fje.forEach(t),ZRr=i(ae),FC=n(ae,"LI",{});var mje=s(FC);fEe=n(mje,"STRONG",{});var gSt=s(fEe);ePr=r(gSt,"big_bird"),gSt.forEach(t),oPr=r(mje," \u2014 "),EK=n(mje,"A",{href:!0});var hSt=s(EK);rPr=r(hSt,"FlaxBigBirdModel"),hSt.forEach(t),tPr=r(mje," (BigBird model)"),mje.forEach(t),aPr=i(ae),TC=n(ae,"LI",{});var gje=s(TC);mEe=n(gje,"STRONG",{});var pSt=s(mEe);nPr=r(pSt,"blenderbot"),pSt.forEach(t),sPr=r(gje," \u2014 "),CK=n(gje,"A",{href:!0});var uSt=s(CK);lPr=r(uSt,"FlaxBlenderbotModel"),uSt.forEach(t),iPr=r(gje," (Blenderbot model)"),gje.forEach(t),dPr=i(ae),MC=n(ae,"LI",{});var hje=s(MC);gEe=n(hje,"STRONG",{});var _St=s(gEe);cPr=r(_St,"blenderbot-small"),_St.forEach(t),fPr=r(hje," \u2014 "),wK=n(hje,"A",{href:!0});var bSt=s(wK);mPr=r(bSt,"FlaxBlenderbotSmallModel"),bSt.forEach(t),gPr=r(hje," (BlenderbotSmall model)"),hje.forEach(t),hPr=i(ae),EC=n(ae,"LI",{});var pje=s(EC);hEe=n(pje,"STRONG",{});var vSt=s(hEe);pPr=r(vSt,"clip"),vSt.forEach(t),uPr=r(pje," \u2014 "),AK=n(pje,"A",{href:!0});var FSt=s(AK);_Pr=r(FSt,"FlaxCLIPModel"),FSt.forEach(t),bPr=r(pje," (CLIP model)"),pje.forEach(t),vPr=i(ae),CC=n(ae,"LI",{});var uje=s(CC);pEe=n(uje,"STRONG",{});var TSt=s(pEe);FPr=r(TSt,"distilbert"),TSt.forEach(t),TPr=r(uje," \u2014 "),LK=n(uje,"A",{href:!0});var MSt=s(LK);MPr=r(MSt,"FlaxDistilBertModel"),MSt.forEach(t),EPr=r(uje," (DistilBERT model)"),uje.forEach(t),CPr=i(ae),wC=n(ae,"LI",{});var _je=s(wC);uEe=n(_je,"STRONG",{});var ESt=s(uEe);wPr=r(ESt,"electra"),ESt.forEach(t),APr=r(_je," \u2014 "),yK=n(_je,"A",{href:!0});var CSt=s(yK);LPr=r(CSt,"FlaxElectraModel"),CSt.forEach(t),yPr=r(_je," (ELECTRA model)"),_je.forEach(t),xPr=i(ae),AC=n(ae,"LI",{});var bje=s(AC);_Ee=n(bje,"STRONG",{});var wSt=s(_Ee);$Pr=r(wSt,"gpt2"),wSt.forEach(t),kPr=r(bje," \u2014 "),xK=n(bje,"A",{href:!0});var ASt=s(xK);SPr=r(ASt,"FlaxGPT2Model"),ASt.forEach(t),RPr=r(bje," (OpenAI GPT-2 model)"),bje.forEach(t),PPr=i(ae),LC=n(ae,"LI",{});var vje=s(LC);bEe=n(vje,"STRONG",{});var LSt=s(bEe);BPr=r(LSt,"gpt_neo"),LSt.forEach(t),IPr=r(vje," \u2014 "),$K=n(vje,"A",{href:!0});var ySt=s($K);NPr=r(ySt,"FlaxGPTNeoModel"),ySt.forEach(t),qPr=r(vje," (GPT Neo model)"),vje.forEach(t),jPr=i(ae),yC=n(ae,"LI",{});var Fje=s(yC);vEe=n(Fje,"STRONG",{});var xSt=s(vEe);DPr=r(xSt,"gptj"),xSt.forEach(t),GPr=r(Fje," \u2014 "),kK=n(Fje,"A",{href:!0});var $St=s(kK);OPr=r($St,"FlaxGPTJModel"),$St.forEach(t),VPr=r(Fje," (GPT-J model)"),Fje.forEach(t),XPr=i(ae),xC=n(ae,"LI",{});var Tje=s(xC);FEe=n(Tje,"STRONG",{});var kSt=s(FEe);zPr=r(kSt,"longt5"),kSt.forEach(t),WPr=r(Tje," \u2014 "),SK=n(Tje,"A",{href:!0});var SSt=s(SK);QPr=r(SSt,"FlaxLongT5Model"),SSt.forEach(t),HPr=r(Tje," (LongT5 model)"),Tje.forEach(t),UPr=i(ae),$C=n(ae,"LI",{});var Mje=s($C);TEe=n(Mje,"STRONG",{});var RSt=s(TEe);JPr=r(RSt,"marian"),RSt.forEach(t),YPr=r(Mje," \u2014 "),RK=n(Mje,"A",{href:!0});var PSt=s(RK);KPr=r(PSt,"FlaxMarianModel"),PSt.forEach(t),ZPr=r(Mje," (Marian model)"),Mje.forEach(t),eBr=i(ae),kC=n(ae,"LI",{});var Eje=s(kC);MEe=n(Eje,"STRONG",{});var BSt=s(MEe);oBr=r(BSt,"mbart"),BSt.forEach(t),rBr=r(Eje," \u2014 "),PK=n(Eje,"A",{href:!0});var ISt=s(PK);tBr=r(ISt,"FlaxMBartModel"),ISt.forEach(t),aBr=r(Eje," (mBART model)"),Eje.forEach(t),nBr=i(ae),SC=n(ae,"LI",{});var Cje=s(SC);EEe=n(Cje,"STRONG",{});var NSt=s(EEe);sBr=r(NSt,"mt5"),NSt.forEach(t),lBr=r(Cje," \u2014 "),BK=n(Cje,"A",{href:!0});var qSt=s(BK);iBr=r(qSt,"FlaxMT5Model"),qSt.forEach(t),dBr=r(Cje," (MT5 model)"),Cje.forEach(t),cBr=i(ae),RC=n(ae,"LI",{});var wje=s(RC);CEe=n(wje,"STRONG",{});var jSt=s(CEe);fBr=r(jSt,"opt"),jSt.forEach(t),mBr=r(wje," \u2014 "),IK=n(wje,"A",{href:!0});var DSt=s(IK);gBr=r(DSt,"FlaxOPTModel"),DSt.forEach(t),hBr=r(wje," (OPT model)"),wje.forEach(t),pBr=i(ae),PC=n(ae,"LI",{});var Aje=s(PC);wEe=n(Aje,"STRONG",{});var GSt=s(wEe);uBr=r(GSt,"pegasus"),GSt.forEach(t),_Br=r(Aje," \u2014 "),NK=n(Aje,"A",{href:!0});var OSt=s(NK);bBr=r(OSt,"FlaxPegasusModel"),OSt.forEach(t),vBr=r(Aje," (Pegasus model)"),Aje.forEach(t),FBr=i(ae),BC=n(ae,"LI",{});var Lje=s(BC);AEe=n(Lje,"STRONG",{});var VSt=s(AEe);TBr=r(VSt,"roberta"),VSt.forEach(t),MBr=r(Lje," \u2014 "),qK=n(Lje,"A",{href:!0});var XSt=s(qK);EBr=r(XSt,"FlaxRobertaModel"),XSt.forEach(t),CBr=r(Lje," (RoBERTa model)"),Lje.forEach(t),wBr=i(ae),IC=n(ae,"LI",{});var yje=s(IC);LEe=n(yje,"STRONG",{});var zSt=s(LEe);ABr=r(zSt,"roformer"),zSt.forEach(t),LBr=r(yje," \u2014 "),jK=n(yje,"A",{href:!0});var WSt=s(jK);yBr=r(WSt,"FlaxRoFormerModel"),WSt.forEach(t),xBr=r(yje," (RoFormer model)"),yje.forEach(t),$Br=i(ae),NC=n(ae,"LI",{});var xje=s(NC);yEe=n(xje,"STRONG",{});var QSt=s(yEe);kBr=r(QSt,"t5"),QSt.forEach(t),SBr=r(xje," \u2014 "),DK=n(xje,"A",{href:!0});var HSt=s(DK);RBr=r(HSt,"FlaxT5Model"),HSt.forEach(t),PBr=r(xje," (T5 model)"),xje.forEach(t),BBr=i(ae),qC=n(ae,"LI",{});var $je=s(qC);xEe=n($je,"STRONG",{});var USt=s(xEe);IBr=r(USt,"vision-text-dual-encoder"),USt.forEach(t),NBr=r($je," \u2014 "),GK=n($je,"A",{href:!0});var JSt=s(GK);qBr=r(JSt,"FlaxVisionTextDualEncoderModel"),JSt.forEach(t),jBr=r($je," (VisionTextDualEncoder model)"),$je.forEach(t),DBr=i(ae),jC=n(ae,"LI",{});var kje=s(jC);$Ee=n(kje,"STRONG",{});var YSt=s($Ee);GBr=r(YSt,"vit"),YSt.forEach(t),OBr=r(kje," \u2014 "),OK=n(kje,"A",{href:!0});var KSt=s(OK);VBr=r(KSt,"FlaxViTModel"),KSt.forEach(t),XBr=r(kje," (ViT model)"),kje.forEach(t),zBr=i(ae),DC=n(ae,"LI",{});var Sje=s(DC);kEe=n(Sje,"STRONG",{});var ZSt=s(kEe);WBr=r(ZSt,"wav2vec2"),ZSt.forEach(t),QBr=r(Sje," \u2014 "),VK=n(Sje,"A",{href:!0});var eRt=s(VK);HBr=r(eRt,"FlaxWav2Vec2Model"),eRt.forEach(t),UBr=r(Sje," (Wav2Vec2 model)"),Sje.forEach(t),JBr=i(ae),GC=n(ae,"LI",{});var Rje=s(GC);SEe=n(Rje,"STRONG",{});var oRt=s(SEe);YBr=r(oRt,"xglm"),oRt.forEach(t),KBr=r(Rje," \u2014 "),XK=n(Rje,"A",{href:!0});var rRt=s(XK);ZBr=r(rRt,"FlaxXGLMModel"),rRt.forEach(t),eIr=r(Rje," (XGLM model)"),Rje.forEach(t),oIr=i(ae),OC=n(ae,"LI",{});var Pje=s(OC);REe=n(Pje,"STRONG",{});var tRt=s(REe);rIr=r(tRt,"xlm-roberta"),tRt.forEach(t),tIr=r(Pje," \u2014 "),zK=n(Pje,"A",{href:!0});var aRt=s(zK);aIr=r(aRt,"FlaxXLMRobertaModel"),aRt.forEach(t),nIr=r(Pje," (XLM-RoBERTa model)"),Pje.forEach(t),ae.forEach(t),sIr=i(Yl),T(VC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),QOe=i(f),Xc=n(f,"H2",{class:!0});var rze=s(Xc);XC=n(rze,"A",{id:!0,class:!0,href:!0});var nRt=s(XC);PEe=n(nRt,"SPAN",{});var sRt=s(PEe);T($x.$$.fragment,sRt),sRt.forEach(t),nRt.forEach(t),lIr=i(rze),BEe=n(rze,"SPAN",{});var lRt=s(BEe);iIr=r(lRt,"FlaxAutoModelForCausalLM"),lRt.forEach(t),rze.forEach(t),HOe=i(f),hr=n(f,"DIV",{class:!0});var Kl=s(hr);T(kx.$$.fragment,Kl),dIr=i(Kl),zc=n(Kl,"P",{});var Are=s(zc);cIr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WK=n(Are,"A",{href:!0});var iRt=s(WK);fIr=r(iRt,"from_pretrained()"),iRt.forEach(t),mIr=r(Are," class method or the "),QK=n(Are,"A",{href:!0});var dRt=s(QK);gIr=r(dRt,"from_config()"),dRt.forEach(t),hIr=r(Are,` class
method.`),Are.forEach(t),pIr=i(Kl),Sx=n(Kl,"P",{});var tze=s(Sx);uIr=r(tze,"This class cannot be instantiated directly using "),IEe=n(tze,"CODE",{});var cRt=s(IEe);_Ir=r(cRt,"__init__()"),cRt.forEach(t),bIr=r(tze," (throws an error)."),tze.forEach(t),vIr=i(Kl),zt=n(Kl,"DIV",{class:!0});var Jw=s(zt);T(Rx.$$.fragment,Jw),FIr=i(Jw),NEe=n(Jw,"P",{});var fRt=s(NEe);TIr=r(fRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fRt.forEach(t),MIr=i(Jw),Wc=n(Jw,"P",{});var Lre=s(Wc);EIr=r(Lre,`Note:
Loading a model from its configuration file does `),qEe=n(Lre,"STRONG",{});var mRt=s(qEe);CIr=r(mRt,"not"),mRt.forEach(t),wIr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(Lre,"A",{href:!0});var gRt=s(HK);AIr=r(gRt,"from_pretrained()"),gRt.forEach(t),LIr=r(Lre," to load the model weights."),Lre.forEach(t),yIr=i(Jw),T(zC.$$.fragment,Jw),Jw.forEach(t),xIr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(Px.$$.fragment,Zl),$Ir=i(Zl),jEe=n(Zl,"P",{});var hRt=s(jEe);kIr=r(hRt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hRt.forEach(t),SIr=i(Zl),Fn=n(Zl,"P",{});var Yw=s(Fn);RIr=r(Yw,"The model class to instantiate is selected based on the "),DEe=n(Yw,"CODE",{});var pRt=s(DEe);PIr=r(pRt,"model_type"),pRt.forEach(t),BIr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),GEe=n(Yw,"CODE",{});var uRt=s(GEe);IIr=r(uRt,"pretrained_model_name_or_path"),uRt.forEach(t),NIr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=n(Yw,"CODE",{});var _Rt=s(OEe);qIr=r(_Rt,"pretrained_model_name_or_path"),_Rt.forEach(t),jIr=r(Yw,":"),Yw.forEach(t),DIr=i(Zl),xe=n(Zl,"UL",{});var Ne=s(xe);WC=n(Ne,"LI",{});var Bje=s(WC);VEe=n(Bje,"STRONG",{});var bRt=s(VEe);GIr=r(bRt,"bart"),bRt.forEach(t),OIr=r(Bje," \u2014 "),UK=n(Bje,"A",{href:!0});var vRt=s(UK);VIr=r(vRt,"FlaxBartForCausalLM"),vRt.forEach(t),XIr=r(Bje," (BART model)"),Bje.forEach(t),zIr=i(Ne),QC=n(Ne,"LI",{});var Ije=s(QC);XEe=n(Ije,"STRONG",{});var FRt=s(XEe);WIr=r(FRt,"bert"),FRt.forEach(t),QIr=r(Ije," \u2014 "),JK=n(Ije,"A",{href:!0});var TRt=s(JK);HIr=r(TRt,"FlaxBertForCausalLM"),TRt.forEach(t),UIr=r(Ije," (BERT model)"),Ije.forEach(t),JIr=i(Ne),HC=n(Ne,"LI",{});var Nje=s(HC);zEe=n(Nje,"STRONG",{});var MRt=s(zEe);YIr=r(MRt,"big_bird"),MRt.forEach(t),KIr=r(Nje," \u2014 "),YK=n(Nje,"A",{href:!0});var ERt=s(YK);ZIr=r(ERt,"FlaxBigBirdForCausalLM"),ERt.forEach(t),eNr=r(Nje," (BigBird model)"),Nje.forEach(t),oNr=i(Ne),UC=n(Ne,"LI",{});var qje=s(UC);WEe=n(qje,"STRONG",{});var CRt=s(WEe);rNr=r(CRt,"electra"),CRt.forEach(t),tNr=r(qje," \u2014 "),KK=n(qje,"A",{href:!0});var wRt=s(KK);aNr=r(wRt,"FlaxElectraForCausalLM"),wRt.forEach(t),nNr=r(qje," (ELECTRA model)"),qje.forEach(t),sNr=i(Ne),JC=n(Ne,"LI",{});var jje=s(JC);QEe=n(jje,"STRONG",{});var ARt=s(QEe);lNr=r(ARt,"gpt2"),ARt.forEach(t),iNr=r(jje," \u2014 "),ZK=n(jje,"A",{href:!0});var LRt=s(ZK);dNr=r(LRt,"FlaxGPT2LMHeadModel"),LRt.forEach(t),cNr=r(jje," (OpenAI GPT-2 model)"),jje.forEach(t),fNr=i(Ne),YC=n(Ne,"LI",{});var Dje=s(YC);HEe=n(Dje,"STRONG",{});var yRt=s(HEe);mNr=r(yRt,"gpt_neo"),yRt.forEach(t),gNr=r(Dje," \u2014 "),eZ=n(Dje,"A",{href:!0});var xRt=s(eZ);hNr=r(xRt,"FlaxGPTNeoForCausalLM"),xRt.forEach(t),pNr=r(Dje," (GPT Neo model)"),Dje.forEach(t),uNr=i(Ne),KC=n(Ne,"LI",{});var Gje=s(KC);UEe=n(Gje,"STRONG",{});var $Rt=s(UEe);_Nr=r($Rt,"gptj"),$Rt.forEach(t),bNr=r(Gje," \u2014 "),oZ=n(Gje,"A",{href:!0});var kRt=s(oZ);vNr=r(kRt,"FlaxGPTJForCausalLM"),kRt.forEach(t),FNr=r(Gje," (GPT-J model)"),Gje.forEach(t),TNr=i(Ne),ZC=n(Ne,"LI",{});var Oje=s(ZC);JEe=n(Oje,"STRONG",{});var SRt=s(JEe);MNr=r(SRt,"opt"),SRt.forEach(t),ENr=r(Oje," \u2014 "),rZ=n(Oje,"A",{href:!0});var RRt=s(rZ);CNr=r(RRt,"FlaxOPTForCausalLM"),RRt.forEach(t),wNr=r(Oje," (OPT model)"),Oje.forEach(t),ANr=i(Ne),e5=n(Ne,"LI",{});var Vje=s(e5);YEe=n(Vje,"STRONG",{});var PRt=s(YEe);LNr=r(PRt,"roberta"),PRt.forEach(t),yNr=r(Vje," \u2014 "),tZ=n(Vje,"A",{href:!0});var BRt=s(tZ);xNr=r(BRt,"FlaxRobertaForCausalLM"),BRt.forEach(t),$Nr=r(Vje," (RoBERTa model)"),Vje.forEach(t),kNr=i(Ne),o5=n(Ne,"LI",{});var Xje=s(o5);KEe=n(Xje,"STRONG",{});var IRt=s(KEe);SNr=r(IRt,"xglm"),IRt.forEach(t),RNr=r(Xje," \u2014 "),aZ=n(Xje,"A",{href:!0});var NRt=s(aZ);PNr=r(NRt,"FlaxXGLMForCausalLM"),NRt.forEach(t),BNr=r(Xje," (XGLM model)"),Xje.forEach(t),Ne.forEach(t),INr=i(Zl),T(r5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),UOe=i(f),Qc=n(f,"H2",{class:!0});var aze=s(Qc);t5=n(aze,"A",{id:!0,class:!0,href:!0});var qRt=s(t5);ZEe=n(qRt,"SPAN",{});var jRt=s(ZEe);T(Bx.$$.fragment,jRt),jRt.forEach(t),qRt.forEach(t),NNr=i(aze),e4e=n(aze,"SPAN",{});var DRt=s(e4e);qNr=r(DRt,"FlaxAutoModelForPreTraining"),DRt.forEach(t),aze.forEach(t),JOe=i(f),pr=n(f,"DIV",{class:!0});var ei=s(pr);T(Ix.$$.fragment,ei),jNr=i(ei),Hc=n(ei,"P",{});var yre=s(Hc);DNr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nZ=n(yre,"A",{href:!0});var GRt=s(nZ);GNr=r(GRt,"from_pretrained()"),GRt.forEach(t),ONr=r(yre," class method or the "),sZ=n(yre,"A",{href:!0});var ORt=s(sZ);VNr=r(ORt,"from_config()"),ORt.forEach(t),XNr=r(yre,` class
method.`),yre.forEach(t),zNr=i(ei),Nx=n(ei,"P",{});var nze=s(Nx);WNr=r(nze,"This class cannot be instantiated directly using "),o4e=n(nze,"CODE",{});var VRt=s(o4e);QNr=r(VRt,"__init__()"),VRt.forEach(t),HNr=r(nze," (throws an error)."),nze.forEach(t),UNr=i(ei),Wt=n(ei,"DIV",{class:!0});var Kw=s(Wt);T(qx.$$.fragment,Kw),JNr=i(Kw),r4e=n(Kw,"P",{});var XRt=s(r4e);YNr=r(XRt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),XRt.forEach(t),KNr=i(Kw),Uc=n(Kw,"P",{});var xre=s(Uc);ZNr=r(xre,`Note:
Loading a model from its configuration file does `),t4e=n(xre,"STRONG",{});var zRt=s(t4e);eqr=r(zRt,"not"),zRt.forEach(t),oqr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(xre,"A",{href:!0});var WRt=s(lZ);rqr=r(WRt,"from_pretrained()"),WRt.forEach(t),tqr=r(xre," to load the model weights."),xre.forEach(t),aqr=i(Kw),T(a5.$$.fragment,Kw),Kw.forEach(t),nqr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(jx.$$.fragment,oi),sqr=i(oi),a4e=n(oi,"P",{});var QRt=s(a4e);lqr=r(QRt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),QRt.forEach(t),iqr=i(oi),Tn=n(oi,"P",{});var Zw=s(Tn);dqr=r(Zw,"The model class to instantiate is selected based on the "),n4e=n(Zw,"CODE",{});var HRt=s(n4e);cqr=r(HRt,"model_type"),HRt.forEach(t),fqr=r(Zw,` property of the config object (either
passed as an argument or loaded from `),s4e=n(Zw,"CODE",{});var URt=s(s4e);mqr=r(URt,"pretrained_model_name_or_path"),URt.forEach(t),gqr=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=n(Zw,"CODE",{});var JRt=s(l4e);hqr=r(JRt,"pretrained_model_name_or_path"),JRt.forEach(t),pqr=r(Zw,":"),Zw.forEach(t),uqr=i(oi),Ee=n(oi,"UL",{});var we=s(Ee);n5=n(we,"LI",{});var zje=s(n5);i4e=n(zje,"STRONG",{});var YRt=s(i4e);_qr=r(YRt,"albert"),YRt.forEach(t),bqr=r(zje," \u2014 "),iZ=n(zje,"A",{href:!0});var KRt=s(iZ);vqr=r(KRt,"FlaxAlbertForPreTraining"),KRt.forEach(t),Fqr=r(zje," (ALBERT model)"),zje.forEach(t),Tqr=i(we),s5=n(we,"LI",{});var Wje=s(s5);d4e=n(Wje,"STRONG",{});var ZRt=s(d4e);Mqr=r(ZRt,"bart"),ZRt.forEach(t),Eqr=r(Wje," \u2014 "),dZ=n(Wje,"A",{href:!0});var ePt=s(dZ);Cqr=r(ePt,"FlaxBartForConditionalGeneration"),ePt.forEach(t),wqr=r(Wje," (BART model)"),Wje.forEach(t),Aqr=i(we),l5=n(we,"LI",{});var Qje=s(l5);c4e=n(Qje,"STRONG",{});var oPt=s(c4e);Lqr=r(oPt,"bert"),oPt.forEach(t),yqr=r(Qje," \u2014 "),cZ=n(Qje,"A",{href:!0});var rPt=s(cZ);xqr=r(rPt,"FlaxBertForPreTraining"),rPt.forEach(t),$qr=r(Qje," (BERT model)"),Qje.forEach(t),kqr=i(we),i5=n(we,"LI",{});var Hje=s(i5);f4e=n(Hje,"STRONG",{});var tPt=s(f4e);Sqr=r(tPt,"big_bird"),tPt.forEach(t),Rqr=r(Hje," \u2014 "),fZ=n(Hje,"A",{href:!0});var aPt=s(fZ);Pqr=r(aPt,"FlaxBigBirdForPreTraining"),aPt.forEach(t),Bqr=r(Hje," (BigBird model)"),Hje.forEach(t),Iqr=i(we),d5=n(we,"LI",{});var Uje=s(d5);m4e=n(Uje,"STRONG",{});var nPt=s(m4e);Nqr=r(nPt,"electra"),nPt.forEach(t),qqr=r(Uje," \u2014 "),mZ=n(Uje,"A",{href:!0});var sPt=s(mZ);jqr=r(sPt,"FlaxElectraForPreTraining"),sPt.forEach(t),Dqr=r(Uje," (ELECTRA model)"),Uje.forEach(t),Gqr=i(we),c5=n(we,"LI",{});var Jje=s(c5);g4e=n(Jje,"STRONG",{});var lPt=s(g4e);Oqr=r(lPt,"longt5"),lPt.forEach(t),Vqr=r(Jje," \u2014 "),gZ=n(Jje,"A",{href:!0});var iPt=s(gZ);Xqr=r(iPt,"FlaxLongT5ForConditionalGeneration"),iPt.forEach(t),zqr=r(Jje," (LongT5 model)"),Jje.forEach(t),Wqr=i(we),f5=n(we,"LI",{});var Yje=s(f5);h4e=n(Yje,"STRONG",{});var dPt=s(h4e);Qqr=r(dPt,"mbart"),dPt.forEach(t),Hqr=r(Yje," \u2014 "),hZ=n(Yje,"A",{href:!0});var cPt=s(hZ);Uqr=r(cPt,"FlaxMBartForConditionalGeneration"),cPt.forEach(t),Jqr=r(Yje," (mBART model)"),Yje.forEach(t),Yqr=i(we),m5=n(we,"LI",{});var Kje=s(m5);p4e=n(Kje,"STRONG",{});var fPt=s(p4e);Kqr=r(fPt,"mt5"),fPt.forEach(t),Zqr=r(Kje," \u2014 "),pZ=n(Kje,"A",{href:!0});var mPt=s(pZ);ejr=r(mPt,"FlaxMT5ForConditionalGeneration"),mPt.forEach(t),ojr=r(Kje," (MT5 model)"),Kje.forEach(t),rjr=i(we),g5=n(we,"LI",{});var Zje=s(g5);u4e=n(Zje,"STRONG",{});var gPt=s(u4e);tjr=r(gPt,"roberta"),gPt.forEach(t),ajr=r(Zje," \u2014 "),uZ=n(Zje,"A",{href:!0});var hPt=s(uZ);njr=r(hPt,"FlaxRobertaForMaskedLM"),hPt.forEach(t),sjr=r(Zje," (RoBERTa model)"),Zje.forEach(t),ljr=i(we),h5=n(we,"LI",{});var eDe=s(h5);_4e=n(eDe,"STRONG",{});var pPt=s(_4e);ijr=r(pPt,"roformer"),pPt.forEach(t),djr=r(eDe," \u2014 "),_Z=n(eDe,"A",{href:!0});var uPt=s(_Z);cjr=r(uPt,"FlaxRoFormerForMaskedLM"),uPt.forEach(t),fjr=r(eDe," (RoFormer model)"),eDe.forEach(t),mjr=i(we),p5=n(we,"LI",{});var oDe=s(p5);b4e=n(oDe,"STRONG",{});var _Pt=s(b4e);gjr=r(_Pt,"t5"),_Pt.forEach(t),hjr=r(oDe," \u2014 "),bZ=n(oDe,"A",{href:!0});var bPt=s(bZ);pjr=r(bPt,"FlaxT5ForConditionalGeneration"),bPt.forEach(t),ujr=r(oDe," (T5 model)"),oDe.forEach(t),_jr=i(we),u5=n(we,"LI",{});var rDe=s(u5);v4e=n(rDe,"STRONG",{});var vPt=s(v4e);bjr=r(vPt,"wav2vec2"),vPt.forEach(t),vjr=r(rDe," \u2014 "),vZ=n(rDe,"A",{href:!0});var FPt=s(vZ);Fjr=r(FPt,"FlaxWav2Vec2ForPreTraining"),FPt.forEach(t),Tjr=r(rDe," (Wav2Vec2 model)"),rDe.forEach(t),Mjr=i(we),_5=n(we,"LI",{});var tDe=s(_5);F4e=n(tDe,"STRONG",{});var TPt=s(F4e);Ejr=r(TPt,"xlm-roberta"),TPt.forEach(t),Cjr=r(tDe," \u2014 "),FZ=n(tDe,"A",{href:!0});var MPt=s(FZ);wjr=r(MPt,"FlaxXLMRobertaForMaskedLM"),MPt.forEach(t),Ajr=r(tDe," (XLM-RoBERTa model)"),tDe.forEach(t),we.forEach(t),Ljr=i(oi),T(b5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),YOe=i(f),Jc=n(f,"H2",{class:!0});var sze=s(Jc);v5=n(sze,"A",{id:!0,class:!0,href:!0});var EPt=s(v5);T4e=n(EPt,"SPAN",{});var CPt=s(T4e);T(Dx.$$.fragment,CPt),CPt.forEach(t),EPt.forEach(t),yjr=i(sze),M4e=n(sze,"SPAN",{});var wPt=s(M4e);xjr=r(wPt,"FlaxAutoModelForMaskedLM"),wPt.forEach(t),sze.forEach(t),KOe=i(f),ur=n(f,"DIV",{class:!0});var ri=s(ur);T(Gx.$$.fragment,ri),$jr=i(ri),Yc=n(ri,"P",{});var $re=s(Yc);kjr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TZ=n($re,"A",{href:!0});var APt=s(TZ);Sjr=r(APt,"from_pretrained()"),APt.forEach(t),Rjr=r($re," class method or the "),MZ=n($re,"A",{href:!0});var LPt=s(MZ);Pjr=r(LPt,"from_config()"),LPt.forEach(t),Bjr=r($re,` class
method.`),$re.forEach(t),Ijr=i(ri),Ox=n(ri,"P",{});var lze=s(Ox);Njr=r(lze,"This class cannot be instantiated directly using "),E4e=n(lze,"CODE",{});var yPt=s(E4e);qjr=r(yPt,"__init__()"),yPt.forEach(t),jjr=r(lze," (throws an error)."),lze.forEach(t),Djr=i(ri),Qt=n(ri,"DIV",{class:!0});var eA=s(Qt);T(Vx.$$.fragment,eA),Gjr=i(eA),C4e=n(eA,"P",{});var xPt=s(C4e);Ojr=r(xPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xPt.forEach(t),Vjr=i(eA),Kc=n(eA,"P",{});var kre=s(Kc);Xjr=r(kre,`Note:
Loading a model from its configuration file does `),w4e=n(kre,"STRONG",{});var $Pt=s(w4e);zjr=r($Pt,"not"),$Pt.forEach(t),Wjr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(kre,"A",{href:!0});var kPt=s(EZ);Qjr=r(kPt,"from_pretrained()"),kPt.forEach(t),Hjr=r(kre," to load the model weights."),kre.forEach(t),Ujr=i(eA),T(F5.$$.fragment,eA),eA.forEach(t),Jjr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(Xx.$$.fragment,ti),Yjr=i(ti),A4e=n(ti,"P",{});var SPt=s(A4e);Kjr=r(SPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),SPt.forEach(t),Zjr=i(ti),Mn=n(ti,"P",{});var oA=s(Mn);eDr=r(oA,"The model class to instantiate is selected based on the "),L4e=n(oA,"CODE",{});var RPt=s(L4e);oDr=r(RPt,"model_type"),RPt.forEach(t),rDr=r(oA,` property of the config object (either
passed as an argument or loaded from `),y4e=n(oA,"CODE",{});var PPt=s(y4e);tDr=r(PPt,"pretrained_model_name_or_path"),PPt.forEach(t),aDr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=n(oA,"CODE",{});var BPt=s(x4e);nDr=r(BPt,"pretrained_model_name_or_path"),BPt.forEach(t),sDr=r(oA,":"),oA.forEach(t),lDr=i(ti),$e=n(ti,"UL",{});var qe=s($e);T5=n(qe,"LI",{});var aDe=s(T5);$4e=n(aDe,"STRONG",{});var IPt=s($4e);iDr=r(IPt,"albert"),IPt.forEach(t),dDr=r(aDe," \u2014 "),CZ=n(aDe,"A",{href:!0});var NPt=s(CZ);cDr=r(NPt,"FlaxAlbertForMaskedLM"),NPt.forEach(t),fDr=r(aDe," (ALBERT model)"),aDe.forEach(t),mDr=i(qe),M5=n(qe,"LI",{});var nDe=s(M5);k4e=n(nDe,"STRONG",{});var qPt=s(k4e);gDr=r(qPt,"bart"),qPt.forEach(t),hDr=r(nDe," \u2014 "),wZ=n(nDe,"A",{href:!0});var jPt=s(wZ);pDr=r(jPt,"FlaxBartForConditionalGeneration"),jPt.forEach(t),uDr=r(nDe," (BART model)"),nDe.forEach(t),_Dr=i(qe),E5=n(qe,"LI",{});var sDe=s(E5);S4e=n(sDe,"STRONG",{});var DPt=s(S4e);bDr=r(DPt,"bert"),DPt.forEach(t),vDr=r(sDe," \u2014 "),AZ=n(sDe,"A",{href:!0});var GPt=s(AZ);FDr=r(GPt,"FlaxBertForMaskedLM"),GPt.forEach(t),TDr=r(sDe," (BERT model)"),sDe.forEach(t),MDr=i(qe),C5=n(qe,"LI",{});var lDe=s(C5);R4e=n(lDe,"STRONG",{});var OPt=s(R4e);EDr=r(OPt,"big_bird"),OPt.forEach(t),CDr=r(lDe," \u2014 "),LZ=n(lDe,"A",{href:!0});var VPt=s(LZ);wDr=r(VPt,"FlaxBigBirdForMaskedLM"),VPt.forEach(t),ADr=r(lDe," (BigBird model)"),lDe.forEach(t),LDr=i(qe),w5=n(qe,"LI",{});var iDe=s(w5);P4e=n(iDe,"STRONG",{});var XPt=s(P4e);yDr=r(XPt,"distilbert"),XPt.forEach(t),xDr=r(iDe," \u2014 "),yZ=n(iDe,"A",{href:!0});var zPt=s(yZ);$Dr=r(zPt,"FlaxDistilBertForMaskedLM"),zPt.forEach(t),kDr=r(iDe," (DistilBERT model)"),iDe.forEach(t),SDr=i(qe),A5=n(qe,"LI",{});var dDe=s(A5);B4e=n(dDe,"STRONG",{});var WPt=s(B4e);RDr=r(WPt,"electra"),WPt.forEach(t),PDr=r(dDe," \u2014 "),xZ=n(dDe,"A",{href:!0});var QPt=s(xZ);BDr=r(QPt,"FlaxElectraForMaskedLM"),QPt.forEach(t),IDr=r(dDe," (ELECTRA model)"),dDe.forEach(t),NDr=i(qe),L5=n(qe,"LI",{});var cDe=s(L5);I4e=n(cDe,"STRONG",{});var HPt=s(I4e);qDr=r(HPt,"mbart"),HPt.forEach(t),jDr=r(cDe," \u2014 "),$Z=n(cDe,"A",{href:!0});var UPt=s($Z);DDr=r(UPt,"FlaxMBartForConditionalGeneration"),UPt.forEach(t),GDr=r(cDe," (mBART model)"),cDe.forEach(t),ODr=i(qe),y5=n(qe,"LI",{});var fDe=s(y5);N4e=n(fDe,"STRONG",{});var JPt=s(N4e);VDr=r(JPt,"roberta"),JPt.forEach(t),XDr=r(fDe," \u2014 "),kZ=n(fDe,"A",{href:!0});var YPt=s(kZ);zDr=r(YPt,"FlaxRobertaForMaskedLM"),YPt.forEach(t),WDr=r(fDe," (RoBERTa model)"),fDe.forEach(t),QDr=i(qe),x5=n(qe,"LI",{});var mDe=s(x5);q4e=n(mDe,"STRONG",{});var KPt=s(q4e);HDr=r(KPt,"roformer"),KPt.forEach(t),UDr=r(mDe," \u2014 "),SZ=n(mDe,"A",{href:!0});var ZPt=s(SZ);JDr=r(ZPt,"FlaxRoFormerForMaskedLM"),ZPt.forEach(t),YDr=r(mDe," (RoFormer model)"),mDe.forEach(t),KDr=i(qe),$5=n(qe,"LI",{});var gDe=s($5);j4e=n(gDe,"STRONG",{});var eBt=s(j4e);ZDr=r(eBt,"xlm-roberta"),eBt.forEach(t),eGr=r(gDe," \u2014 "),RZ=n(gDe,"A",{href:!0});var oBt=s(RZ);oGr=r(oBt,"FlaxXLMRobertaForMaskedLM"),oBt.forEach(t),rGr=r(gDe," (XLM-RoBERTa model)"),gDe.forEach(t),qe.forEach(t),tGr=i(ti),T(k5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),ZOe=i(f),Zc=n(f,"H2",{class:!0});var ize=s(Zc);S5=n(ize,"A",{id:!0,class:!0,href:!0});var rBt=s(S5);D4e=n(rBt,"SPAN",{});var tBt=s(D4e);T(zx.$$.fragment,tBt),tBt.forEach(t),rBt.forEach(t),aGr=i(ize),G4e=n(ize,"SPAN",{});var aBt=s(G4e);nGr=r(aBt,"FlaxAutoModelForSeq2SeqLM"),aBt.forEach(t),ize.forEach(t),eVe=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(Wx.$$.fragment,ai),sGr=i(ai),ef=n(ai,"P",{});var Sre=s(ef);lGr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PZ=n(Sre,"A",{href:!0});var nBt=s(PZ);iGr=r(nBt,"from_pretrained()"),nBt.forEach(t),dGr=r(Sre," class method or the "),BZ=n(Sre,"A",{href:!0});var sBt=s(BZ);cGr=r(sBt,"from_config()"),sBt.forEach(t),fGr=r(Sre,` class
method.`),Sre.forEach(t),mGr=i(ai),Qx=n(ai,"P",{});var dze=s(Qx);gGr=r(dze,"This class cannot be instantiated directly using "),O4e=n(dze,"CODE",{});var lBt=s(O4e);hGr=r(lBt,"__init__()"),lBt.forEach(t),pGr=r(dze," (throws an error)."),dze.forEach(t),uGr=i(ai),Ht=n(ai,"DIV",{class:!0});var rA=s(Ht);T(Hx.$$.fragment,rA),_Gr=i(rA),V4e=n(rA,"P",{});var iBt=s(V4e);bGr=r(iBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iBt.forEach(t),vGr=i(rA),of=n(rA,"P",{});var Rre=s(of);FGr=r(Rre,`Note:
Loading a model from its configuration file does `),X4e=n(Rre,"STRONG",{});var dBt=s(X4e);TGr=r(dBt,"not"),dBt.forEach(t),MGr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),IZ=n(Rre,"A",{href:!0});var cBt=s(IZ);EGr=r(cBt,"from_pretrained()"),cBt.forEach(t),CGr=r(Rre," to load the model weights."),Rre.forEach(t),wGr=i(rA),T(R5.$$.fragment,rA),rA.forEach(t),AGr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(Ux.$$.fragment,ni),LGr=i(ni),z4e=n(ni,"P",{});var fBt=s(z4e);yGr=r(fBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fBt.forEach(t),xGr=i(ni),En=n(ni,"P",{});var tA=s(En);$Gr=r(tA,"The model class to instantiate is selected based on the "),W4e=n(tA,"CODE",{});var mBt=s(W4e);kGr=r(mBt,"model_type"),mBt.forEach(t),SGr=r(tA,` property of the config object (either
passed as an argument or loaded from `),Q4e=n(tA,"CODE",{});var gBt=s(Q4e);RGr=r(gBt,"pretrained_model_name_or_path"),gBt.forEach(t),PGr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=n(tA,"CODE",{});var hBt=s(H4e);BGr=r(hBt,"pretrained_model_name_or_path"),hBt.forEach(t),IGr=r(tA,":"),tA.forEach(t),NGr=i(ni),ke=n(ni,"UL",{});var je=s(ke);P5=n(je,"LI",{});var hDe=s(P5);U4e=n(hDe,"STRONG",{});var pBt=s(U4e);qGr=r(pBt,"bart"),pBt.forEach(t),jGr=r(hDe," \u2014 "),NZ=n(hDe,"A",{href:!0});var uBt=s(NZ);DGr=r(uBt,"FlaxBartForConditionalGeneration"),uBt.forEach(t),GGr=r(hDe," (BART model)"),hDe.forEach(t),OGr=i(je),B5=n(je,"LI",{});var pDe=s(B5);J4e=n(pDe,"STRONG",{});var _Bt=s(J4e);VGr=r(_Bt,"blenderbot"),_Bt.forEach(t),XGr=r(pDe," \u2014 "),qZ=n(pDe,"A",{href:!0});var bBt=s(qZ);zGr=r(bBt,"FlaxBlenderbotForConditionalGeneration"),bBt.forEach(t),WGr=r(pDe," (Blenderbot model)"),pDe.forEach(t),QGr=i(je),I5=n(je,"LI",{});var uDe=s(I5);Y4e=n(uDe,"STRONG",{});var vBt=s(Y4e);HGr=r(vBt,"blenderbot-small"),vBt.forEach(t),UGr=r(uDe," \u2014 "),jZ=n(uDe,"A",{href:!0});var FBt=s(jZ);JGr=r(FBt,"FlaxBlenderbotSmallForConditionalGeneration"),FBt.forEach(t),YGr=r(uDe," (BlenderbotSmall model)"),uDe.forEach(t),KGr=i(je),N5=n(je,"LI",{});var _De=s(N5);K4e=n(_De,"STRONG",{});var TBt=s(K4e);ZGr=r(TBt,"encoder-decoder"),TBt.forEach(t),eOr=r(_De," \u2014 "),DZ=n(_De,"A",{href:!0});var MBt=s(DZ);oOr=r(MBt,"FlaxEncoderDecoderModel"),MBt.forEach(t),rOr=r(_De," (Encoder decoder model)"),_De.forEach(t),tOr=i(je),q5=n(je,"LI",{});var bDe=s(q5);Z4e=n(bDe,"STRONG",{});var EBt=s(Z4e);aOr=r(EBt,"longt5"),EBt.forEach(t),nOr=r(bDe," \u2014 "),GZ=n(bDe,"A",{href:!0});var CBt=s(GZ);sOr=r(CBt,"FlaxLongT5ForConditionalGeneration"),CBt.forEach(t),lOr=r(bDe," (LongT5 model)"),bDe.forEach(t),iOr=i(je),j5=n(je,"LI",{});var vDe=s(j5);eCe=n(vDe,"STRONG",{});var wBt=s(eCe);dOr=r(wBt,"marian"),wBt.forEach(t),cOr=r(vDe," \u2014 "),OZ=n(vDe,"A",{href:!0});var ABt=s(OZ);fOr=r(ABt,"FlaxMarianMTModel"),ABt.forEach(t),mOr=r(vDe," (Marian model)"),vDe.forEach(t),gOr=i(je),D5=n(je,"LI",{});var FDe=s(D5);oCe=n(FDe,"STRONG",{});var LBt=s(oCe);hOr=r(LBt,"mbart"),LBt.forEach(t),pOr=r(FDe," \u2014 "),VZ=n(FDe,"A",{href:!0});var yBt=s(VZ);uOr=r(yBt,"FlaxMBartForConditionalGeneration"),yBt.forEach(t),_Or=r(FDe," (mBART model)"),FDe.forEach(t),bOr=i(je),G5=n(je,"LI",{});var TDe=s(G5);rCe=n(TDe,"STRONG",{});var xBt=s(rCe);vOr=r(xBt,"mt5"),xBt.forEach(t),FOr=r(TDe," \u2014 "),XZ=n(TDe,"A",{href:!0});var $Bt=s(XZ);TOr=r($Bt,"FlaxMT5ForConditionalGeneration"),$Bt.forEach(t),MOr=r(TDe," (MT5 model)"),TDe.forEach(t),EOr=i(je),O5=n(je,"LI",{});var MDe=s(O5);tCe=n(MDe,"STRONG",{});var kBt=s(tCe);COr=r(kBt,"pegasus"),kBt.forEach(t),wOr=r(MDe," \u2014 "),zZ=n(MDe,"A",{href:!0});var SBt=s(zZ);AOr=r(SBt,"FlaxPegasusForConditionalGeneration"),SBt.forEach(t),LOr=r(MDe," (Pegasus model)"),MDe.forEach(t),yOr=i(je),V5=n(je,"LI",{});var EDe=s(V5);aCe=n(EDe,"STRONG",{});var RBt=s(aCe);xOr=r(RBt,"t5"),RBt.forEach(t),$Or=r(EDe," \u2014 "),WZ=n(EDe,"A",{href:!0});var PBt=s(WZ);kOr=r(PBt,"FlaxT5ForConditionalGeneration"),PBt.forEach(t),SOr=r(EDe," (T5 model)"),EDe.forEach(t),je.forEach(t),ROr=i(ni),T(X5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),oVe=i(f),rf=n(f,"H2",{class:!0});var cze=s(rf);z5=n(cze,"A",{id:!0,class:!0,href:!0});var BBt=s(z5);nCe=n(BBt,"SPAN",{});var IBt=s(nCe);T(Jx.$$.fragment,IBt),IBt.forEach(t),BBt.forEach(t),POr=i(cze),sCe=n(cze,"SPAN",{});var NBt=s(sCe);BOr=r(NBt,"FlaxAutoModelForSequenceClassification"),NBt.forEach(t),cze.forEach(t),rVe=i(f),br=n(f,"DIV",{class:!0});var si=s(br);T(Yx.$$.fragment,si),IOr=i(si),tf=n(si,"P",{});var Pre=s(tf);NOr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QZ=n(Pre,"A",{href:!0});var qBt=s(QZ);qOr=r(qBt,"from_pretrained()"),qBt.forEach(t),jOr=r(Pre," class method or the "),HZ=n(Pre,"A",{href:!0});var jBt=s(HZ);DOr=r(jBt,"from_config()"),jBt.forEach(t),GOr=r(Pre,` class
method.`),Pre.forEach(t),OOr=i(si),Kx=n(si,"P",{});var fze=s(Kx);VOr=r(fze,"This class cannot be instantiated directly using "),lCe=n(fze,"CODE",{});var DBt=s(lCe);XOr=r(DBt,"__init__()"),DBt.forEach(t),zOr=r(fze," (throws an error)."),fze.forEach(t),WOr=i(si),Ut=n(si,"DIV",{class:!0});var aA=s(Ut);T(Zx.$$.fragment,aA),QOr=i(aA),iCe=n(aA,"P",{});var GBt=s(iCe);HOr=r(GBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GBt.forEach(t),UOr=i(aA),af=n(aA,"P",{});var Bre=s(af);JOr=r(Bre,`Note:
Loading a model from its configuration file does `),dCe=n(Bre,"STRONG",{});var OBt=s(dCe);YOr=r(OBt,"not"),OBt.forEach(t),KOr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=n(Bre,"A",{href:!0});var VBt=s(UZ);ZOr=r(VBt,"from_pretrained()"),VBt.forEach(t),eVr=r(Bre," to load the model weights."),Bre.forEach(t),oVr=i(aA),T(W5.$$.fragment,aA),aA.forEach(t),rVr=i(si),Wr=n(si,"DIV",{class:!0});var li=s(Wr);T(e$.$$.fragment,li),tVr=i(li),cCe=n(li,"P",{});var XBt=s(cCe);aVr=r(XBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XBt.forEach(t),nVr=i(li),Cn=n(li,"P",{});var nA=s(Cn);sVr=r(nA,"The model class to instantiate is selected based on the "),fCe=n(nA,"CODE",{});var zBt=s(fCe);lVr=r(zBt,"model_type"),zBt.forEach(t),iVr=r(nA,` property of the config object (either
passed as an argument or loaded from `),mCe=n(nA,"CODE",{});var WBt=s(mCe);dVr=r(WBt,"pretrained_model_name_or_path"),WBt.forEach(t),cVr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=n(nA,"CODE",{});var QBt=s(gCe);fVr=r(QBt,"pretrained_model_name_or_path"),QBt.forEach(t),mVr=r(nA,":"),nA.forEach(t),gVr=i(li),Se=n(li,"UL",{});var De=s(Se);Q5=n(De,"LI",{});var CDe=s(Q5);hCe=n(CDe,"STRONG",{});var HBt=s(hCe);hVr=r(HBt,"albert"),HBt.forEach(t),pVr=r(CDe," \u2014 "),JZ=n(CDe,"A",{href:!0});var UBt=s(JZ);uVr=r(UBt,"FlaxAlbertForSequenceClassification"),UBt.forEach(t),_Vr=r(CDe," (ALBERT model)"),CDe.forEach(t),bVr=i(De),H5=n(De,"LI",{});var wDe=s(H5);pCe=n(wDe,"STRONG",{});var JBt=s(pCe);vVr=r(JBt,"bart"),JBt.forEach(t),FVr=r(wDe," \u2014 "),YZ=n(wDe,"A",{href:!0});var YBt=s(YZ);TVr=r(YBt,"FlaxBartForSequenceClassification"),YBt.forEach(t),MVr=r(wDe," (BART model)"),wDe.forEach(t),EVr=i(De),U5=n(De,"LI",{});var ADe=s(U5);uCe=n(ADe,"STRONG",{});var KBt=s(uCe);CVr=r(KBt,"bert"),KBt.forEach(t),wVr=r(ADe," \u2014 "),KZ=n(ADe,"A",{href:!0});var ZBt=s(KZ);AVr=r(ZBt,"FlaxBertForSequenceClassification"),ZBt.forEach(t),LVr=r(ADe," (BERT model)"),ADe.forEach(t),yVr=i(De),J5=n(De,"LI",{});var LDe=s(J5);_Ce=n(LDe,"STRONG",{});var eIt=s(_Ce);xVr=r(eIt,"big_bird"),eIt.forEach(t),$Vr=r(LDe," \u2014 "),ZZ=n(LDe,"A",{href:!0});var oIt=s(ZZ);kVr=r(oIt,"FlaxBigBirdForSequenceClassification"),oIt.forEach(t),SVr=r(LDe," (BigBird model)"),LDe.forEach(t),RVr=i(De),Y5=n(De,"LI",{});var yDe=s(Y5);bCe=n(yDe,"STRONG",{});var rIt=s(bCe);PVr=r(rIt,"distilbert"),rIt.forEach(t),BVr=r(yDe," \u2014 "),eee=n(yDe,"A",{href:!0});var tIt=s(eee);IVr=r(tIt,"FlaxDistilBertForSequenceClassification"),tIt.forEach(t),NVr=r(yDe," (DistilBERT model)"),yDe.forEach(t),qVr=i(De),K5=n(De,"LI",{});var xDe=s(K5);vCe=n(xDe,"STRONG",{});var aIt=s(vCe);jVr=r(aIt,"electra"),aIt.forEach(t),DVr=r(xDe," \u2014 "),oee=n(xDe,"A",{href:!0});var nIt=s(oee);GVr=r(nIt,"FlaxElectraForSequenceClassification"),nIt.forEach(t),OVr=r(xDe," (ELECTRA model)"),xDe.forEach(t),VVr=i(De),Z5=n(De,"LI",{});var $De=s(Z5);FCe=n($De,"STRONG",{});var sIt=s(FCe);XVr=r(sIt,"mbart"),sIt.forEach(t),zVr=r($De," \u2014 "),ree=n($De,"A",{href:!0});var lIt=s(ree);WVr=r(lIt,"FlaxMBartForSequenceClassification"),lIt.forEach(t),QVr=r($De," (mBART model)"),$De.forEach(t),HVr=i(De),e3=n(De,"LI",{});var kDe=s(e3);TCe=n(kDe,"STRONG",{});var iIt=s(TCe);UVr=r(iIt,"roberta"),iIt.forEach(t),JVr=r(kDe," \u2014 "),tee=n(kDe,"A",{href:!0});var dIt=s(tee);YVr=r(dIt,"FlaxRobertaForSequenceClassification"),dIt.forEach(t),KVr=r(kDe," (RoBERTa model)"),kDe.forEach(t),ZVr=i(De),o3=n(De,"LI",{});var SDe=s(o3);MCe=n(SDe,"STRONG",{});var cIt=s(MCe);eXr=r(cIt,"roformer"),cIt.forEach(t),oXr=r(SDe," \u2014 "),aee=n(SDe,"A",{href:!0});var fIt=s(aee);rXr=r(fIt,"FlaxRoFormerForSequenceClassification"),fIt.forEach(t),tXr=r(SDe," (RoFormer model)"),SDe.forEach(t),aXr=i(De),r3=n(De,"LI",{});var RDe=s(r3);ECe=n(RDe,"STRONG",{});var mIt=s(ECe);nXr=r(mIt,"xlm-roberta"),mIt.forEach(t),sXr=r(RDe," \u2014 "),nee=n(RDe,"A",{href:!0});var gIt=s(nee);lXr=r(gIt,"FlaxXLMRobertaForSequenceClassification"),gIt.forEach(t),iXr=r(RDe," (XLM-RoBERTa model)"),RDe.forEach(t),De.forEach(t),dXr=i(li),T(t3.$$.fragment,li),li.forEach(t),si.forEach(t),tVe=i(f),nf=n(f,"H2",{class:!0});var mze=s(nf);a3=n(mze,"A",{id:!0,class:!0,href:!0});var hIt=s(a3);CCe=n(hIt,"SPAN",{});var pIt=s(CCe);T(o$.$$.fragment,pIt),pIt.forEach(t),hIt.forEach(t),cXr=i(mze),wCe=n(mze,"SPAN",{});var uIt=s(wCe);fXr=r(uIt,"FlaxAutoModelForQuestionAnswering"),uIt.forEach(t),mze.forEach(t),aVe=i(f),vr=n(f,"DIV",{class:!0});var ii=s(vr);T(r$.$$.fragment,ii),mXr=i(ii),sf=n(ii,"P",{});var Ire=s(sf);gXr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),see=n(Ire,"A",{href:!0});var _It=s(see);hXr=r(_It,"from_pretrained()"),_It.forEach(t),pXr=r(Ire," class method or the "),lee=n(Ire,"A",{href:!0});var bIt=s(lee);uXr=r(bIt,"from_config()"),bIt.forEach(t),_Xr=r(Ire,` class
method.`),Ire.forEach(t),bXr=i(ii),t$=n(ii,"P",{});var gze=s(t$);vXr=r(gze,"This class cannot be instantiated directly using "),ACe=n(gze,"CODE",{});var vIt=s(ACe);FXr=r(vIt,"__init__()"),vIt.forEach(t),TXr=r(gze," (throws an error)."),gze.forEach(t),MXr=i(ii),Jt=n(ii,"DIV",{class:!0});var sA=s(Jt);T(a$.$$.fragment,sA),EXr=i(sA),LCe=n(sA,"P",{});var FIt=s(LCe);CXr=r(FIt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),FIt.forEach(t),wXr=i(sA),lf=n(sA,"P",{});var Nre=s(lf);AXr=r(Nre,`Note:
Loading a model from its configuration file does `),yCe=n(Nre,"STRONG",{});var TIt=s(yCe);LXr=r(TIt,"not"),TIt.forEach(t),yXr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=n(Nre,"A",{href:!0});var MIt=s(iee);xXr=r(MIt,"from_pretrained()"),MIt.forEach(t),$Xr=r(Nre," to load the model weights."),Nre.forEach(t),kXr=i(sA),T(n3.$$.fragment,sA),sA.forEach(t),SXr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(n$.$$.fragment,di),RXr=i(di),xCe=n(di,"P",{});var EIt=s(xCe);PXr=r(EIt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),EIt.forEach(t),BXr=i(di),wn=n(di,"P",{});var lA=s(wn);IXr=r(lA,"The model class to instantiate is selected based on the "),$Ce=n(lA,"CODE",{});var CIt=s($Ce);NXr=r(CIt,"model_type"),CIt.forEach(t),qXr=r(lA,` property of the config object (either
passed as an argument or loaded from `),kCe=n(lA,"CODE",{});var wIt=s(kCe);jXr=r(wIt,"pretrained_model_name_or_path"),wIt.forEach(t),DXr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=n(lA,"CODE",{});var AIt=s(SCe);GXr=r(AIt,"pretrained_model_name_or_path"),AIt.forEach(t),OXr=r(lA,":"),lA.forEach(t),VXr=i(di),Re=n(di,"UL",{});var Ge=s(Re);s3=n(Ge,"LI",{});var PDe=s(s3);RCe=n(PDe,"STRONG",{});var LIt=s(RCe);XXr=r(LIt,"albert"),LIt.forEach(t),zXr=r(PDe," \u2014 "),dee=n(PDe,"A",{href:!0});var yIt=s(dee);WXr=r(yIt,"FlaxAlbertForQuestionAnswering"),yIt.forEach(t),QXr=r(PDe," (ALBERT model)"),PDe.forEach(t),HXr=i(Ge),l3=n(Ge,"LI",{});var BDe=s(l3);PCe=n(BDe,"STRONG",{});var xIt=s(PCe);UXr=r(xIt,"bart"),xIt.forEach(t),JXr=r(BDe," \u2014 "),cee=n(BDe,"A",{href:!0});var $It=s(cee);YXr=r($It,"FlaxBartForQuestionAnswering"),$It.forEach(t),KXr=r(BDe," (BART model)"),BDe.forEach(t),ZXr=i(Ge),i3=n(Ge,"LI",{});var IDe=s(i3);BCe=n(IDe,"STRONG",{});var kIt=s(BCe);ezr=r(kIt,"bert"),kIt.forEach(t),ozr=r(IDe," \u2014 "),fee=n(IDe,"A",{href:!0});var SIt=s(fee);rzr=r(SIt,"FlaxBertForQuestionAnswering"),SIt.forEach(t),tzr=r(IDe," (BERT model)"),IDe.forEach(t),azr=i(Ge),d3=n(Ge,"LI",{});var NDe=s(d3);ICe=n(NDe,"STRONG",{});var RIt=s(ICe);nzr=r(RIt,"big_bird"),RIt.forEach(t),szr=r(NDe," \u2014 "),mee=n(NDe,"A",{href:!0});var PIt=s(mee);lzr=r(PIt,"FlaxBigBirdForQuestionAnswering"),PIt.forEach(t),izr=r(NDe," (BigBird model)"),NDe.forEach(t),dzr=i(Ge),c3=n(Ge,"LI",{});var qDe=s(c3);NCe=n(qDe,"STRONG",{});var BIt=s(NCe);czr=r(BIt,"distilbert"),BIt.forEach(t),fzr=r(qDe," \u2014 "),gee=n(qDe,"A",{href:!0});var IIt=s(gee);mzr=r(IIt,"FlaxDistilBertForQuestionAnswering"),IIt.forEach(t),gzr=r(qDe," (DistilBERT model)"),qDe.forEach(t),hzr=i(Ge),f3=n(Ge,"LI",{});var jDe=s(f3);qCe=n(jDe,"STRONG",{});var NIt=s(qCe);pzr=r(NIt,"electra"),NIt.forEach(t),uzr=r(jDe," \u2014 "),hee=n(jDe,"A",{href:!0});var qIt=s(hee);_zr=r(qIt,"FlaxElectraForQuestionAnswering"),qIt.forEach(t),bzr=r(jDe," (ELECTRA model)"),jDe.forEach(t),vzr=i(Ge),m3=n(Ge,"LI",{});var DDe=s(m3);jCe=n(DDe,"STRONG",{});var jIt=s(jCe);Fzr=r(jIt,"mbart"),jIt.forEach(t),Tzr=r(DDe," \u2014 "),pee=n(DDe,"A",{href:!0});var DIt=s(pee);Mzr=r(DIt,"FlaxMBartForQuestionAnswering"),DIt.forEach(t),Ezr=r(DDe," (mBART model)"),DDe.forEach(t),Czr=i(Ge),g3=n(Ge,"LI",{});var GDe=s(g3);DCe=n(GDe,"STRONG",{});var GIt=s(DCe);wzr=r(GIt,"roberta"),GIt.forEach(t),Azr=r(GDe," \u2014 "),uee=n(GDe,"A",{href:!0});var OIt=s(uee);Lzr=r(OIt,"FlaxRobertaForQuestionAnswering"),OIt.forEach(t),yzr=r(GDe," (RoBERTa model)"),GDe.forEach(t),xzr=i(Ge),h3=n(Ge,"LI",{});var ODe=s(h3);GCe=n(ODe,"STRONG",{});var VIt=s(GCe);$zr=r(VIt,"roformer"),VIt.forEach(t),kzr=r(ODe," \u2014 "),_ee=n(ODe,"A",{href:!0});var XIt=s(_ee);Szr=r(XIt,"FlaxRoFormerForQuestionAnswering"),XIt.forEach(t),Rzr=r(ODe," (RoFormer model)"),ODe.forEach(t),Pzr=i(Ge),p3=n(Ge,"LI",{});var VDe=s(p3);OCe=n(VDe,"STRONG",{});var zIt=s(OCe);Bzr=r(zIt,"xlm-roberta"),zIt.forEach(t),Izr=r(VDe," \u2014 "),bee=n(VDe,"A",{href:!0});var WIt=s(bee);Nzr=r(WIt,"FlaxXLMRobertaForQuestionAnswering"),WIt.forEach(t),qzr=r(VDe," (XLM-RoBERTa model)"),VDe.forEach(t),Ge.forEach(t),jzr=i(di),T(u3.$$.fragment,di),di.forEach(t),ii.forEach(t),nVe=i(f),df=n(f,"H2",{class:!0});var hze=s(df);_3=n(hze,"A",{id:!0,class:!0,href:!0});var QIt=s(_3);VCe=n(QIt,"SPAN",{});var HIt=s(VCe);T(s$.$$.fragment,HIt),HIt.forEach(t),QIt.forEach(t),Dzr=i(hze),XCe=n(hze,"SPAN",{});var UIt=s(XCe);Gzr=r(UIt,"FlaxAutoModelForTokenClassification"),UIt.forEach(t),hze.forEach(t),sVe=i(f),Fr=n(f,"DIV",{class:!0});var ci=s(Fr);T(l$.$$.fragment,ci),Ozr=i(ci),cf=n(ci,"P",{});var qre=s(cf);Vzr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vee=n(qre,"A",{href:!0});var JIt=s(vee);Xzr=r(JIt,"from_pretrained()"),JIt.forEach(t),zzr=r(qre," class method or the "),Fee=n(qre,"A",{href:!0});var YIt=s(Fee);Wzr=r(YIt,"from_config()"),YIt.forEach(t),Qzr=r(qre,` class
method.`),qre.forEach(t),Hzr=i(ci),i$=n(ci,"P",{});var pze=s(i$);Uzr=r(pze,"This class cannot be instantiated directly using "),zCe=n(pze,"CODE",{});var KIt=s(zCe);Jzr=r(KIt,"__init__()"),KIt.forEach(t),Yzr=r(pze," (throws an error)."),pze.forEach(t),Kzr=i(ci),Yt=n(ci,"DIV",{class:!0});var iA=s(Yt);T(d$.$$.fragment,iA),Zzr=i(iA),WCe=n(iA,"P",{});var ZIt=s(WCe);eWr=r(ZIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ZIt.forEach(t),oWr=i(iA),ff=n(iA,"P",{});var jre=s(ff);rWr=r(jre,`Note:
Loading a model from its configuration file does `),QCe=n(jre,"STRONG",{});var eNt=s(QCe);tWr=r(eNt,"not"),eNt.forEach(t),aWr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=n(jre,"A",{href:!0});var oNt=s(Tee);nWr=r(oNt,"from_pretrained()"),oNt.forEach(t),sWr=r(jre," to load the model weights."),jre.forEach(t),lWr=i(iA),T(b3.$$.fragment,iA),iA.forEach(t),iWr=i(ci),Hr=n(ci,"DIV",{class:!0});var fi=s(Hr);T(c$.$$.fragment,fi),dWr=i(fi),HCe=n(fi,"P",{});var rNt=s(HCe);cWr=r(rNt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rNt.forEach(t),fWr=i(fi),An=n(fi,"P",{});var dA=s(An);mWr=r(dA,"The model class to instantiate is selected based on the "),UCe=n(dA,"CODE",{});var tNt=s(UCe);gWr=r(tNt,"model_type"),tNt.forEach(t),hWr=r(dA,` property of the config object (either
passed as an argument or loaded from `),JCe=n(dA,"CODE",{});var aNt=s(JCe);pWr=r(aNt,"pretrained_model_name_or_path"),aNt.forEach(t),uWr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=n(dA,"CODE",{});var nNt=s(YCe);_Wr=r(nNt,"pretrained_model_name_or_path"),nNt.forEach(t),bWr=r(dA,":"),dA.forEach(t),vWr=i(fi),Ve=n(fi,"UL",{});var To=s(Ve);v3=n(To,"LI",{});var XDe=s(v3);KCe=n(XDe,"STRONG",{});var sNt=s(KCe);FWr=r(sNt,"albert"),sNt.forEach(t),TWr=r(XDe," \u2014 "),Mee=n(XDe,"A",{href:!0});var lNt=s(Mee);MWr=r(lNt,"FlaxAlbertForTokenClassification"),lNt.forEach(t),EWr=r(XDe," (ALBERT model)"),XDe.forEach(t),CWr=i(To),F3=n(To,"LI",{});var zDe=s(F3);ZCe=n(zDe,"STRONG",{});var iNt=s(ZCe);wWr=r(iNt,"bert"),iNt.forEach(t),AWr=r(zDe," \u2014 "),Eee=n(zDe,"A",{href:!0});var dNt=s(Eee);LWr=r(dNt,"FlaxBertForTokenClassification"),dNt.forEach(t),yWr=r(zDe," (BERT model)"),zDe.forEach(t),xWr=i(To),T3=n(To,"LI",{});var WDe=s(T3);e5e=n(WDe,"STRONG",{});var cNt=s(e5e);$Wr=r(cNt,"big_bird"),cNt.forEach(t),kWr=r(WDe," \u2014 "),Cee=n(WDe,"A",{href:!0});var fNt=s(Cee);SWr=r(fNt,"FlaxBigBirdForTokenClassification"),fNt.forEach(t),RWr=r(WDe," (BigBird model)"),WDe.forEach(t),PWr=i(To),M3=n(To,"LI",{});var QDe=s(M3);o5e=n(QDe,"STRONG",{});var mNt=s(o5e);BWr=r(mNt,"distilbert"),mNt.forEach(t),IWr=r(QDe," \u2014 "),wee=n(QDe,"A",{href:!0});var gNt=s(wee);NWr=r(gNt,"FlaxDistilBertForTokenClassification"),gNt.forEach(t),qWr=r(QDe," (DistilBERT model)"),QDe.forEach(t),jWr=i(To),E3=n(To,"LI",{});var HDe=s(E3);r5e=n(HDe,"STRONG",{});var hNt=s(r5e);DWr=r(hNt,"electra"),hNt.forEach(t),GWr=r(HDe," \u2014 "),Aee=n(HDe,"A",{href:!0});var pNt=s(Aee);OWr=r(pNt,"FlaxElectraForTokenClassification"),pNt.forEach(t),VWr=r(HDe," (ELECTRA model)"),HDe.forEach(t),XWr=i(To),C3=n(To,"LI",{});var UDe=s(C3);t5e=n(UDe,"STRONG",{});var uNt=s(t5e);zWr=r(uNt,"roberta"),uNt.forEach(t),WWr=r(UDe," \u2014 "),Lee=n(UDe,"A",{href:!0});var _Nt=s(Lee);QWr=r(_Nt,"FlaxRobertaForTokenClassification"),_Nt.forEach(t),HWr=r(UDe," (RoBERTa model)"),UDe.forEach(t),UWr=i(To),w3=n(To,"LI",{});var JDe=s(w3);a5e=n(JDe,"STRONG",{});var bNt=s(a5e);JWr=r(bNt,"roformer"),bNt.forEach(t),YWr=r(JDe," \u2014 "),yee=n(JDe,"A",{href:!0});var vNt=s(yee);KWr=r(vNt,"FlaxRoFormerForTokenClassification"),vNt.forEach(t),ZWr=r(JDe," (RoFormer model)"),JDe.forEach(t),eQr=i(To),A3=n(To,"LI",{});var YDe=s(A3);n5e=n(YDe,"STRONG",{});var FNt=s(n5e);oQr=r(FNt,"xlm-roberta"),FNt.forEach(t),rQr=r(YDe," \u2014 "),xee=n(YDe,"A",{href:!0});var TNt=s(xee);tQr=r(TNt,"FlaxXLMRobertaForTokenClassification"),TNt.forEach(t),aQr=r(YDe," (XLM-RoBERTa model)"),YDe.forEach(t),To.forEach(t),nQr=i(fi),T(L3.$$.fragment,fi),fi.forEach(t),ci.forEach(t),lVe=i(f),mf=n(f,"H2",{class:!0});var uze=s(mf);y3=n(uze,"A",{id:!0,class:!0,href:!0});var MNt=s(y3);s5e=n(MNt,"SPAN",{});var ENt=s(s5e);T(f$.$$.fragment,ENt),ENt.forEach(t),MNt.forEach(t),sQr=i(uze),l5e=n(uze,"SPAN",{});var CNt=s(l5e);lQr=r(CNt,"FlaxAutoModelForMultipleChoice"),CNt.forEach(t),uze.forEach(t),iVe=i(f),Tr=n(f,"DIV",{class:!0});var mi=s(Tr);T(m$.$$.fragment,mi),iQr=i(mi),gf=n(mi,"P",{});var Dre=s(gf);dQr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$ee=n(Dre,"A",{href:!0});var wNt=s($ee);cQr=r(wNt,"from_pretrained()"),wNt.forEach(t),fQr=r(Dre," class method or the "),kee=n(Dre,"A",{href:!0});var ANt=s(kee);mQr=r(ANt,"from_config()"),ANt.forEach(t),gQr=r(Dre,` class
method.`),Dre.forEach(t),hQr=i(mi),g$=n(mi,"P",{});var _ze=s(g$);pQr=r(_ze,"This class cannot be instantiated directly using "),i5e=n(_ze,"CODE",{});var LNt=s(i5e);uQr=r(LNt,"__init__()"),LNt.forEach(t),_Qr=r(_ze," (throws an error)."),_ze.forEach(t),bQr=i(mi),Kt=n(mi,"DIV",{class:!0});var cA=s(Kt);T(h$.$$.fragment,cA),vQr=i(cA),d5e=n(cA,"P",{});var yNt=s(d5e);FQr=r(yNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yNt.forEach(t),TQr=i(cA),hf=n(cA,"P",{});var Gre=s(hf);MQr=r(Gre,`Note:
Loading a model from its configuration file does `),c5e=n(Gre,"STRONG",{});var xNt=s(c5e);EQr=r(xNt,"not"),xNt.forEach(t),CQr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),See=n(Gre,"A",{href:!0});var $Nt=s(See);wQr=r($Nt,"from_pretrained()"),$Nt.forEach(t),AQr=r(Gre," to load the model weights."),Gre.forEach(t),LQr=i(cA),T(x3.$$.fragment,cA),cA.forEach(t),yQr=i(mi),Ur=n(mi,"DIV",{class:!0});var gi=s(Ur);T(p$.$$.fragment,gi),xQr=i(gi),f5e=n(gi,"P",{});var kNt=s(f5e);$Qr=r(kNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kNt.forEach(t),kQr=i(gi),Ln=n(gi,"P",{});var fA=s(Ln);SQr=r(fA,"The model class to instantiate is selected based on the "),m5e=n(fA,"CODE",{});var SNt=s(m5e);RQr=r(SNt,"model_type"),SNt.forEach(t),PQr=r(fA,` property of the config object (either
passed as an argument or loaded from `),g5e=n(fA,"CODE",{});var RNt=s(g5e);BQr=r(RNt,"pretrained_model_name_or_path"),RNt.forEach(t),IQr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=n(fA,"CODE",{});var PNt=s(h5e);NQr=r(PNt,"pretrained_model_name_or_path"),PNt.forEach(t),qQr=r(fA,":"),fA.forEach(t),jQr=i(gi),Xe=n(gi,"UL",{});var Mo=s(Xe);$3=n(Mo,"LI",{});var KDe=s($3);p5e=n(KDe,"STRONG",{});var BNt=s(p5e);DQr=r(BNt,"albert"),BNt.forEach(t),GQr=r(KDe," \u2014 "),Ree=n(KDe,"A",{href:!0});var INt=s(Ree);OQr=r(INt,"FlaxAlbertForMultipleChoice"),INt.forEach(t),VQr=r(KDe," (ALBERT model)"),KDe.forEach(t),XQr=i(Mo),k3=n(Mo,"LI",{});var ZDe=s(k3);u5e=n(ZDe,"STRONG",{});var NNt=s(u5e);zQr=r(NNt,"bert"),NNt.forEach(t),WQr=r(ZDe," \u2014 "),Pee=n(ZDe,"A",{href:!0});var qNt=s(Pee);QQr=r(qNt,"FlaxBertForMultipleChoice"),qNt.forEach(t),HQr=r(ZDe," (BERT model)"),ZDe.forEach(t),UQr=i(Mo),S3=n(Mo,"LI",{});var eGe=s(S3);_5e=n(eGe,"STRONG",{});var jNt=s(_5e);JQr=r(jNt,"big_bird"),jNt.forEach(t),YQr=r(eGe," \u2014 "),Bee=n(eGe,"A",{href:!0});var DNt=s(Bee);KQr=r(DNt,"FlaxBigBirdForMultipleChoice"),DNt.forEach(t),ZQr=r(eGe," (BigBird model)"),eGe.forEach(t),eHr=i(Mo),R3=n(Mo,"LI",{});var oGe=s(R3);b5e=n(oGe,"STRONG",{});var GNt=s(b5e);oHr=r(GNt,"distilbert"),GNt.forEach(t),rHr=r(oGe," \u2014 "),Iee=n(oGe,"A",{href:!0});var ONt=s(Iee);tHr=r(ONt,"FlaxDistilBertForMultipleChoice"),ONt.forEach(t),aHr=r(oGe," (DistilBERT model)"),oGe.forEach(t),nHr=i(Mo),P3=n(Mo,"LI",{});var rGe=s(P3);v5e=n(rGe,"STRONG",{});var VNt=s(v5e);sHr=r(VNt,"electra"),VNt.forEach(t),lHr=r(rGe," \u2014 "),Nee=n(rGe,"A",{href:!0});var XNt=s(Nee);iHr=r(XNt,"FlaxElectraForMultipleChoice"),XNt.forEach(t),dHr=r(rGe," (ELECTRA model)"),rGe.forEach(t),cHr=i(Mo),B3=n(Mo,"LI",{});var tGe=s(B3);F5e=n(tGe,"STRONG",{});var zNt=s(F5e);fHr=r(zNt,"roberta"),zNt.forEach(t),mHr=r(tGe," \u2014 "),qee=n(tGe,"A",{href:!0});var WNt=s(qee);gHr=r(WNt,"FlaxRobertaForMultipleChoice"),WNt.forEach(t),hHr=r(tGe," (RoBERTa model)"),tGe.forEach(t),pHr=i(Mo),I3=n(Mo,"LI",{});var aGe=s(I3);T5e=n(aGe,"STRONG",{});var QNt=s(T5e);uHr=r(QNt,"roformer"),QNt.forEach(t),_Hr=r(aGe," \u2014 "),jee=n(aGe,"A",{href:!0});var HNt=s(jee);bHr=r(HNt,"FlaxRoFormerForMultipleChoice"),HNt.forEach(t),vHr=r(aGe," (RoFormer model)"),aGe.forEach(t),FHr=i(Mo),N3=n(Mo,"LI",{});var nGe=s(N3);M5e=n(nGe,"STRONG",{});var UNt=s(M5e);THr=r(UNt,"xlm-roberta"),UNt.forEach(t),MHr=r(nGe," \u2014 "),Dee=n(nGe,"A",{href:!0});var JNt=s(Dee);EHr=r(JNt,"FlaxXLMRobertaForMultipleChoice"),JNt.forEach(t),CHr=r(nGe," (XLM-RoBERTa model)"),nGe.forEach(t),Mo.forEach(t),wHr=i(gi),T(q3.$$.fragment,gi),gi.forEach(t),mi.forEach(t),dVe=i(f),pf=n(f,"H2",{class:!0});var bze=s(pf);j3=n(bze,"A",{id:!0,class:!0,href:!0});var YNt=s(j3);E5e=n(YNt,"SPAN",{});var KNt=s(E5e);T(u$.$$.fragment,KNt),KNt.forEach(t),YNt.forEach(t),AHr=i(bze),C5e=n(bze,"SPAN",{});var ZNt=s(C5e);LHr=r(ZNt,"FlaxAutoModelForNextSentencePrediction"),ZNt.forEach(t),bze.forEach(t),cVe=i(f),Mr=n(f,"DIV",{class:!0});var hi=s(Mr);T(_$.$$.fragment,hi),yHr=i(hi),uf=n(hi,"P",{});var Ore=s(uf);xHr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Gee=n(Ore,"A",{href:!0});var eqt=s(Gee);$Hr=r(eqt,"from_pretrained()"),eqt.forEach(t),kHr=r(Ore," class method or the "),Oee=n(Ore,"A",{href:!0});var oqt=s(Oee);SHr=r(oqt,"from_config()"),oqt.forEach(t),RHr=r(Ore,` class
method.`),Ore.forEach(t),PHr=i(hi),b$=n(hi,"P",{});var vze=s(b$);BHr=r(vze,"This class cannot be instantiated directly using "),w5e=n(vze,"CODE",{});var rqt=s(w5e);IHr=r(rqt,"__init__()"),rqt.forEach(t),NHr=r(vze," (throws an error)."),vze.forEach(t),qHr=i(hi),Zt=n(hi,"DIV",{class:!0});var mA=s(Zt);T(v$.$$.fragment,mA),jHr=i(mA),A5e=n(mA,"P",{});var tqt=s(A5e);DHr=r(tqt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tqt.forEach(t),GHr=i(mA),_f=n(mA,"P",{});var Vre=s(_f);OHr=r(Vre,`Note:
Loading a model from its configuration file does `),L5e=n(Vre,"STRONG",{});var aqt=s(L5e);VHr=r(aqt,"not"),aqt.forEach(t),XHr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=n(Vre,"A",{href:!0});var nqt=s(Vee);zHr=r(nqt,"from_pretrained()"),nqt.forEach(t),WHr=r(Vre," to load the model weights."),Vre.forEach(t),QHr=i(mA),T(D3.$$.fragment,mA),mA.forEach(t),HHr=i(hi),Jr=n(hi,"DIV",{class:!0});var pi=s(Jr);T(F$.$$.fragment,pi),UHr=i(pi),y5e=n(pi,"P",{});var sqt=s(y5e);JHr=r(sqt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sqt.forEach(t),YHr=i(pi),yn=n(pi,"P",{});var gA=s(yn);KHr=r(gA,"The model class to instantiate is selected based on the "),x5e=n(gA,"CODE",{});var lqt=s(x5e);ZHr=r(lqt,"model_type"),lqt.forEach(t),eUr=r(gA,` property of the config object (either
passed as an argument or loaded from `),$5e=n(gA,"CODE",{});var iqt=s($5e);oUr=r(iqt,"pretrained_model_name_or_path"),iqt.forEach(t),rUr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=n(gA,"CODE",{});var dqt=s(k5e);tUr=r(dqt,"pretrained_model_name_or_path"),dqt.forEach(t),aUr=r(gA,":"),gA.forEach(t),nUr=i(pi),S5e=n(pi,"UL",{});var cqt=s(S5e);G3=n(cqt,"LI",{});var sGe=s(G3);R5e=n(sGe,"STRONG",{});var fqt=s(R5e);sUr=r(fqt,"bert"),fqt.forEach(t),lUr=r(sGe," \u2014 "),Xee=n(sGe,"A",{href:!0});var mqt=s(Xee);iUr=r(mqt,"FlaxBertForNextSentencePrediction"),mqt.forEach(t),dUr=r(sGe," (BERT model)"),sGe.forEach(t),cqt.forEach(t),cUr=i(pi),T(O3.$$.fragment,pi),pi.forEach(t),hi.forEach(t),fVe=i(f),bf=n(f,"H2",{class:!0});var Fze=s(bf);V3=n(Fze,"A",{id:!0,class:!0,href:!0});var gqt=s(V3);P5e=n(gqt,"SPAN",{});var hqt=s(P5e);T(T$.$$.fragment,hqt),hqt.forEach(t),gqt.forEach(t),fUr=i(Fze),B5e=n(Fze,"SPAN",{});var pqt=s(B5e);mUr=r(pqt,"FlaxAutoModelForImageClassification"),pqt.forEach(t),Fze.forEach(t),mVe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(M$.$$.fragment,ui),gUr=i(ui),vf=n(ui,"P",{});var Xre=s(vf);hUr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zee=n(Xre,"A",{href:!0});var uqt=s(zee);pUr=r(uqt,"from_pretrained()"),uqt.forEach(t),uUr=r(Xre," class method or the "),Wee=n(Xre,"A",{href:!0});var _qt=s(Wee);_Ur=r(_qt,"from_config()"),_qt.forEach(t),bUr=r(Xre,` class
method.`),Xre.forEach(t),vUr=i(ui),E$=n(ui,"P",{});var Tze=s(E$);FUr=r(Tze,"This class cannot be instantiated directly using "),I5e=n(Tze,"CODE",{});var bqt=s(I5e);TUr=r(bqt,"__init__()"),bqt.forEach(t),MUr=r(Tze," (throws an error)."),Tze.forEach(t),EUr=i(ui),ea=n(ui,"DIV",{class:!0});var hA=s(ea);T(C$.$$.fragment,hA),CUr=i(hA),N5e=n(hA,"P",{});var vqt=s(N5e);wUr=r(vqt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vqt.forEach(t),AUr=i(hA),Ff=n(hA,"P",{});var zre=s(Ff);LUr=r(zre,`Note:
Loading a model from its configuration file does `),q5e=n(zre,"STRONG",{});var Fqt=s(q5e);yUr=r(Fqt,"not"),Fqt.forEach(t),xUr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=n(zre,"A",{href:!0});var Tqt=s(Qee);$Ur=r(Tqt,"from_pretrained()"),Tqt.forEach(t),kUr=r(zre," to load the model weights."),zre.forEach(t),SUr=i(hA),T(X3.$$.fragment,hA),hA.forEach(t),RUr=i(ui),Yr=n(ui,"DIV",{class:!0});var _i=s(Yr);T(w$.$$.fragment,_i),PUr=i(_i),j5e=n(_i,"P",{});var Mqt=s(j5e);BUr=r(Mqt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mqt.forEach(t),IUr=i(_i),xn=n(_i,"P",{});var pA=s(xn);NUr=r(pA,"The model class to instantiate is selected based on the "),D5e=n(pA,"CODE",{});var Eqt=s(D5e);qUr=r(Eqt,"model_type"),Eqt.forEach(t),jUr=r(pA,` property of the config object (either
passed as an argument or loaded from `),G5e=n(pA,"CODE",{});var Cqt=s(G5e);DUr=r(Cqt,"pretrained_model_name_or_path"),Cqt.forEach(t),GUr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O5e=n(pA,"CODE",{});var wqt=s(O5e);OUr=r(wqt,"pretrained_model_name_or_path"),wqt.forEach(t),VUr=r(pA,":"),pA.forEach(t),XUr=i(_i),A$=n(_i,"UL",{});var Mze=s(A$);z3=n(Mze,"LI",{});var lGe=s(z3);V5e=n(lGe,"STRONG",{});var Aqt=s(V5e);zUr=r(Aqt,"beit"),Aqt.forEach(t),WUr=r(lGe," \u2014 "),Hee=n(lGe,"A",{href:!0});var Lqt=s(Hee);QUr=r(Lqt,"FlaxBeitForImageClassification"),Lqt.forEach(t),HUr=r(lGe," (BEiT model)"),lGe.forEach(t),UUr=i(Mze),W3=n(Mze,"LI",{});var iGe=s(W3);X5e=n(iGe,"STRONG",{});var yqt=s(X5e);JUr=r(yqt,"vit"),yqt.forEach(t),YUr=r(iGe," \u2014 "),Uee=n(iGe,"A",{href:!0});var xqt=s(Uee);KUr=r(xqt,"FlaxViTForImageClassification"),xqt.forEach(t),ZUr=r(iGe," (ViT model)"),iGe.forEach(t),Mze.forEach(t),eJr=i(_i),T(Q3.$$.fragment,_i),_i.forEach(t),ui.forEach(t),gVe=i(f),Tf=n(f,"H2",{class:!0});var Eze=s(Tf);H3=n(Eze,"A",{id:!0,class:!0,href:!0});var $qt=s(H3);z5e=n($qt,"SPAN",{});var kqt=s(z5e);T(L$.$$.fragment,kqt),kqt.forEach(t),$qt.forEach(t),oJr=i(Eze),W5e=n(Eze,"SPAN",{});var Sqt=s(W5e);rJr=r(Sqt,"FlaxAutoModelForVision2Seq"),Sqt.forEach(t),Eze.forEach(t),hVe=i(f),Cr=n(f,"DIV",{class:!0});var bi=s(Cr);T(y$.$$.fragment,bi),tJr=i(bi),Mf=n(bi,"P",{});var Wre=s(Mf);aJr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Jee=n(Wre,"A",{href:!0});var Rqt=s(Jee);nJr=r(Rqt,"from_pretrained()"),Rqt.forEach(t),sJr=r(Wre," class method or the "),Yee=n(Wre,"A",{href:!0});var Pqt=s(Yee);lJr=r(Pqt,"from_config()"),Pqt.forEach(t),iJr=r(Wre,` class
method.`),Wre.forEach(t),dJr=i(bi),x$=n(bi,"P",{});var Cze=s(x$);cJr=r(Cze,"This class cannot be instantiated directly using "),Q5e=n(Cze,"CODE",{});var Bqt=s(Q5e);fJr=r(Bqt,"__init__()"),Bqt.forEach(t),mJr=r(Cze," (throws an error)."),Cze.forEach(t),gJr=i(bi),oa=n(bi,"DIV",{class:!0});var uA=s(oa);T($$.$$.fragment,uA),hJr=i(uA),H5e=n(uA,"P",{});var Iqt=s(H5e);pJr=r(Iqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Iqt.forEach(t),uJr=i(uA),Ef=n(uA,"P",{});var Qre=s(Ef);_Jr=r(Qre,`Note:
Loading a model from its configuration file does `),U5e=n(Qre,"STRONG",{});var Nqt=s(U5e);bJr=r(Nqt,"not"),Nqt.forEach(t),vJr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=n(Qre,"A",{href:!0});var qqt=s(Kee);FJr=r(qqt,"from_pretrained()"),qqt.forEach(t),TJr=r(Qre," to load the model weights."),Qre.forEach(t),MJr=i(uA),T(U3.$$.fragment,uA),uA.forEach(t),EJr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(k$.$$.fragment,vi),CJr=i(vi),J5e=n(vi,"P",{});var jqt=s(J5e);wJr=r(jqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jqt.forEach(t),AJr=i(vi),$n=n(vi,"P",{});var _A=s($n);LJr=r(_A,"The model class to instantiate is selected based on the "),Y5e=n(_A,"CODE",{});var Dqt=s(Y5e);yJr=r(Dqt,"model_type"),Dqt.forEach(t),xJr=r(_A,` property of the config object (either
passed as an argument or loaded from `),K5e=n(_A,"CODE",{});var Gqt=s(K5e);$Jr=r(Gqt,"pretrained_model_name_or_path"),Gqt.forEach(t),kJr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=n(_A,"CODE",{});var Oqt=s(Z5e);SJr=r(Oqt,"pretrained_model_name_or_path"),Oqt.forEach(t),RJr=r(_A,":"),_A.forEach(t),PJr=i(vi),e3e=n(vi,"UL",{});var Vqt=s(e3e);J3=n(Vqt,"LI",{});var dGe=s(J3);o3e=n(dGe,"STRONG",{});var Xqt=s(o3e);BJr=r(Xqt,"vision-encoder-decoder"),Xqt.forEach(t),IJr=r(dGe," \u2014 "),Zee=n(dGe,"A",{href:!0});var zqt=s(Zee);NJr=r(zqt,"FlaxVisionEncoderDecoderModel"),zqt.forEach(t),qJr=r(dGe," (Vision Encoder decoder model)"),dGe.forEach(t),Vqt.forEach(t),jJr=i(vi),T(Y3.$$.fragment,vi),vi.forEach(t),bi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(YDt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoTokenizer"),c(Ai,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel"),c(kf,"id","extending-the-auto-classes"),c(kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kf,"href","#extending-the-auto-classes"),c(Li,"class","relative group"),c(Rf,"id","transformers.AutoConfig"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#transformers.AutoConfig"),c(yi,"class","relative group"),c(eS,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(oS,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig"),c(rS,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig"),c(tS,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig"),c(aS,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig"),c(nS,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(sS,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig"),c(lS,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(iS,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(dS,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(cS,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig"),c(fS,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig"),c(mS,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig"),c(gS,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig"),c(hS,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig"),c(pS,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig"),c(uS,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig"),c(_S,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig"),c(bS,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(vS,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(FS,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(TS,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig"),c(MS,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(ES,"href","/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(CS,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig"),c(wS,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig"),c(AS,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig"),c(LS,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig"),c(yS,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig"),c(xS,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig"),c($S,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(kS,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig"),c(SS,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig"),c(RS,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig"),c(PS,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig"),c(BS,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig"),c(IS,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNConfig"),c(NS,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config"),c(qS,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(jS,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(DS,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig"),c(GS,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig"),c(OS,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig"),c(VS,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(XS,"href","/docs/transformers/pr_17826/en/model_doc/jukebox#transformers.JukeboxConfig"),c(zS,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(WS,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(QS,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(HS,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig"),c(US,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig"),c(JS,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig"),c(YS,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config"),c(KS,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig"),c(ZS,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig"),c(eR,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config"),c(oR,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig"),c(rR,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(tR,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig"),c(aR,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig"),c(nR,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(sR,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(lR,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig"),c(iR,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config"),c(dR,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(cR,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(fR,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig"),c(mR,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig"),c(gR,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig"),c(hR,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig"),c(pR,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(uR,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(_R,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(bR,"href","/docs/transformers/pr_17826/en/model_doc/rag#transformers.RagConfig"),c(vR,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmConfig"),c(FR,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig"),c(TR,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig"),c(MR,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig"),c(ER,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig"),c(CR,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig"),c(wR,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig"),c(AR,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig"),c(LR,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig"),c(yR,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig"),c(xR,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig"),c($R,"href","/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(kR,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(SR,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(RR,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig"),c(PR,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(BR,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig"),c(IR,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config"),c(NR,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig"),c(qR,"href","/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(jR,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(DR,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRConfig"),c(GR,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(OR,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(VR,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig"),c(XR,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig"),c(zR,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(WR,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(QR,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(HR,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig"),c(UR,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(JR,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(YR,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(KR,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig"),c(ZR,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig"),c(eP,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig"),c(oP,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(rP,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(tP,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(aP,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig"),c(nP,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig"),c(sP,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Og,"id","transformers.AutoTokenizer"),c(Og,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Og,"href","#transformers.AutoTokenizer"),c($i,"class","relative group"),c(lP,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(iP,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(dP,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(cP,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartTokenizer"),c(fP,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartTokenizerFast"),c(mP,"href","/docs/transformers/pr_17826/en/model_doc/barthez#transformers.BarthezTokenizer"),c(gP,"href","/docs/transformers/pr_17826/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(hP,"href","/docs/transformers/pr_17826/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(pP,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(uP,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(_P,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(bP,"href","/docs/transformers/pr_17826/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(vP,"href","/docs/transformers/pr_17826/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(FP,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(TP,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(MP,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(EP,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(CP,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(wP,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(AP,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(LP,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(yP,"href","/docs/transformers/pr_17826/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(xP,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertTokenizer"),c($P,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(kP,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineTokenizer"),c(SP,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizer"),c(RP,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(PP,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(BP,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(IP,"href","/docs/transformers/pr_17826/en/model_doc/cpm#transformers.CpmTokenizer"),c(NP,"href","/docs/transformers/pr_17826/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(qP,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(jP,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DP,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GP,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaTokenizer"),c(OP,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(VP,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(XP,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(zP,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(WP,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(QP,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(HP,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(UP,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraTokenizer"),c(JP,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(YP,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(KP,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetTokenizer"),c(ZP,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(eB,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(oB,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelTokenizer"),c(rB,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(tB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lB,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(iB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(dB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(cB,"href","/docs/transformers/pr_17826/en/model_doc/herbert#transformers.HerbertTokenizer"),c(fB,"href","/docs/transformers/pr_17826/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(mB,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pB,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(uB,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(_B,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(bB,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(vB,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(FB,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(TB,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(MB,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(EB,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDTokenizer"),c(CB,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDTokenizerFast"),c(wB,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerTokenizer"),c(AB,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(LB,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Tokenizer"),c(yB,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5TokenizerFast"),c(xB,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeTokenizer"),c($B,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(kB,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(SB,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(RB,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianTokenizer"),c(PB,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartTokenizer"),c(BB,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(IB,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(NB,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(qB,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(jB,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(DB,"href","/docs/transformers/pr_17826/en/model_doc/mluke#transformers.MLukeTokenizer"),c(GB,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(OB,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(VB,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(XB,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(zB,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Tokenizer"),c(WB,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5TokenizerFast"),c(QB,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(HB,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(UB,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(JB,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(YB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KB,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ZB,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(eI,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(oI,"href","/docs/transformers/pr_17826/en/model_doc/phobert#transformers.PhobertTokenizer"),c(rI,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartTokenizer"),c(tI,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(aI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(nI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(sI,"href","/docs/transformers/pr_17826/en/model_doc/rag#transformers.RagTokenizer"),c(lI,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmTokenizer"),c(iI,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmTokenizerFast"),c(dI,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerTokenizer"),c(cI,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(fI,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertTokenizer"),c(mI,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(gI,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(hI,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(pI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_I,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(bI,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(vI,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(FI,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(TI,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterTokenizer"),c(MI,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(EI,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(CI,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(wI,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Tokenizer"),c(AI,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5TokenizerFast"),c(LI,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasTokenizer"),c(yI,"href","/docs/transformers/pr_17826/en/model_doc/tapex#transformers.TapexTokenizer"),c(xI,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c($I,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(kI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(SI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(RI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(PI,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BI,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(II,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(NI,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMTokenizer"),c(qI,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(jI,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMTokenizer"),c(DI,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(GI,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(OI,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(VI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zI,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(WI,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(QI,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(HI,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoFeatureExtractor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoFeatureExtractor"),c(ki,"class","relative group"),c(UI,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(JI,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(YI,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(KI,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oN,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rN,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(tN,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(aN,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(nN,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(sN,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(lN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iN,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(dN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(cN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(fN,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(mN,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(gN,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(hN,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(pN,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(EN,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(AN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(LN,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"id","transformers.AutoProcessor"),c(lp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lp,"href","#transformers.AutoProcessor"),c(Si,"class","relative group"),c(yN,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(xN,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPProcessor"),c($N,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(kN,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(SN,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(RN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BN,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(IN,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(NN,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRProcessor"),c(qN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DN,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltProcessor"),c(GN,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(ON,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yp,"id","transformers.AutoModel"),c(yp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yp,"href","#transformers.AutoModel"),c(Pi,"class","relative group"),c(zN,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WN,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QN,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HN,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertModel"),c(UN,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartModel"),c(JN,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitModel"),c(YN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel"),c(KN,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(ZN,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdModel"),c(eq,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(oq,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(rq,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(tq,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomModel"),c(aq,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertModel"),c(nq,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineModel"),c(sq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPModel"),c(lq,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertModel"),c(iq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextModel"),c(dq,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLModel"),c(cq,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtModel"),c(fq,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(mq,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(gq,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(hq,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaModel"),c(pq,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(uq,"href","/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(_q,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTModel"),c(bq,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrModel"),c(vq,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertModel"),c(Fq,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Tq,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTModel"),c(Mq,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraModel"),c(Eq,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertModel"),c(Cq,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaModel"),c(wq,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetModel"),c(Aq,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTModel"),c(Lq,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelModel"),c(yq,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelBaseModel"),c(xq,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNModel"),c($q,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Model"),c(kq,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Sq,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Rq,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJModel"),c(Pq,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertModel"),c(Bq,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertModel"),c(Iq,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Nq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(qq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(jq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Dq,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDModel"),c(Gq,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitModel"),c(Oq,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerModel"),c(Vq,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Model"),c(Xq,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeModel"),c(zq,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertModel"),c(Wq,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model"),c(Qq,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianModel"),c(Hq,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Uq,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartModel"),c(Jq,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTModel"),c(Yq,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Kq,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Zq,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetModel"),c(ej,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Model"),c(oj,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerModel"),c(rj,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(tj,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTModel"),c(aj,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusModel"),c(nj,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverModel"),c(sj,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartModel"),c(lj,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerModel"),c(ij,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(dj,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertModel"),c(cj,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModel"),c(fj,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetModel"),c(mj,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertModel"),c(gj,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetModel"),c(hj,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel"),c(pj,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaModel"),c(uj,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerModel"),c(_j,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerModel"),c(bj,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWModel"),c(vj,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDModel"),c(Fj,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Tj,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterModel"),c(Mj,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Ej,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinModel"),c(Cj,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Model"),c(wj,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasModel"),c(Aj,"href","/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Lj,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(yj,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechModel"),c(xj,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c($j,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanModel"),c(kj,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltModel"),c(Sj,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Rj,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Pj,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTModel"),c(Bj,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Ij,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Nj,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(qj,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMModel"),c(jj,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMModel"),c(Dj,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMModel"),c(Gj,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Oj,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Vj,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Xj,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetModel"),c(zj,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosModel"),c(Wj,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($_,"id","transformers.AutoModelForPreTraining"),c($_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($_,"href","#transformers.AutoModelForPreTraining"),c(Ni,"class","relative group"),c(Qj,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hj,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uj,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jj,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Yj,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForPreTraining"),c(Zj,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(eD,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM"),c(oD,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(rD,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(tD,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(aD,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(nD,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(sD,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(lD,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForPreTraining"),c(iD,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(dD,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaForPreTraining"),c(cD,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForPreTraining"),c(fD,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(mD,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(gD,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(hD,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(pD,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(uD,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(_D,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(bD,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(vD,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(FD,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(TD,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(MD,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel"),c(ED,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(CD,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(wD,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(AD,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(yD,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xD,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c($D,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(kD,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(SD,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(RD,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(PD,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(BD,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ID,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ND,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(qD,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E2,"id","transformers.AutoModelForCausalLM"),c(E2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E2,"href","#transformers.AutoModelForCausalLM"),c(Di,"class","relative group"),c(jD,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DD,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GD,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OD,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForCausalLM"),c(VD,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertLMHeadModel"),c(XD,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(zD,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(WD,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(QD,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(HD,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(UD,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM"),c(JD,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(YD,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(KD,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(ZD,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForCausalLM"),c(eG,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(oG,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(rG,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(tG,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(aG,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianForCausalLM"),c(nG,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForCausalLM"),c(sG,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(lG,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(iG,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForCausalLM"),c(dG,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(cG,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(fG,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(mG,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(gG,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(hG,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(pG,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(uG,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(_G,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(bG,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(vG,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(FG,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(TG,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(MG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(EG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(CG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(wG,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f1,"id","transformers.AutoModelForMaskedLM"),c(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f1,"href","#transformers.AutoModelForMaskedLM"),c(Vi,"class","relative group"),c(AG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xG,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMaskedLM"),c($G,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(kG,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMaskedLM"),c(SG,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(RG,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(PG,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(BG,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(IG,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(NG,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(qG,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(jG,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(DG,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(GG,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(OG,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(VG,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(XG,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(zG,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(WG,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeForMaskedLM"),c(QG,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(HG,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(UG,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(JG,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(YG,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(KG,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(eO,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(oO,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(rO,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tO,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(aO,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(nO,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(sO,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(lO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(iO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(dO,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y1,"id","transformers.AutoModelForSeq2SeqLM"),c(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Wi,"class","relative group"),c(cO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gO,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hO,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(pO,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(uO,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(_O,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(bO,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(vO,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(FO,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(TO,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(MO,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianMTModel"),c(EO,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(AO,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(LO,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(yO,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(xO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bb,"id","transformers.AutoModelForSequenceClassification"),c(bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bb,"href","#transformers.AutoModelForSequenceClassification"),c(Ui,"class","relative group"),c($O,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RO,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(PO,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForSequenceClassification"),c(BO,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForSequenceClassification"),c(IO,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(NO,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uv,"id","transformers.AutoModelForMultipleChoice"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForMultipleChoice"),c(Ki,"class","relative group"),c(LV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(kV,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMultipleChoice"),c(SV,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(RV,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(PV,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(BV,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(IV,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(NV,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(qV,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(jV,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(DV,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(GV,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(OV,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(VV,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(XV,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(zV,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(WV,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(QV,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(eX,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(oX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(rX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(tX,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(aX,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForNextSentencePrediction"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForNextSentencePrediction"),c(od,"class","relative group"),c(nX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iX,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(dX,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(cX,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(fX,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(mX,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aF,"id","transformers.AutoModelForTokenClassification"),c(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aF,"href","#transformers.AutoModelForTokenClassification"),c(ad,"class","relative group"),c(gX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uX,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(_X,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForTokenClassification"),c(bX,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(vX,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(FX,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(TX,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForTokenClassification"),c(MX,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(EX,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(CX,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(wX,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(AX,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(LX,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(yX,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(xX,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForTokenClassification"),c($X,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(kX,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(SX,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(RX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(PX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(BX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(IX,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(NX,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(qX,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(jX,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(DX,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(GX,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(OX,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(VX,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(XX,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(zX,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(WX,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(QX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(HX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(UX,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(JX,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VF,"id","transformers.AutoModelForQuestionAnswering"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.AutoModelForQuestionAnswering"),c(ld,"class","relative group"),c(YX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(oz,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(rz,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(tz,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(az,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(nz,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(sz,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(cz,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(hz,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Iz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(jz,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R6,"id","transformers.AutoModelForTableQuestionAnswering"),c(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(cd,"class","relative group"),c(Dz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vz,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q6,"id","transformers.AutoModelForImageClassification"),c(q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q6,"href","#transformers.AutoModelForImageClassification"),c(gd,"class","relative group"),c(Xz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qz,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForImageClassification"),c(Hz,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Uz,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtForImageClassification"),c(Jz,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(Yz,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Kz,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Zz,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(eW,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassification"),c(oW,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(rW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(tW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(aW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(nW,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(sW,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(lW,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(iW,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(dW,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForImageClassification"),c(cW,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanForImageClassification"),c(fW,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForVision2Seq"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForVision2Seq"),c(ud,"class","relative group"),c(mW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pW,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(vd,"class","relative group"),c(uW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForAudioClassification"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForAudioClassification"),c(Md,"class","relative group"),c(FW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c($W,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForAudioFrameClassification"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForAudioFrameClassification"),c(wd,"class","relative group"),c(SW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(IW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(NW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(qW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(jW,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForCTC"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForCTC"),c(yd,"class","relative group"),c(DW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(XW,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForCTC"),c(zW,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTForCTC"),c(WW,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForCTC"),c(QW,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForCTC"),c(HW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(UW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(JW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(YW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(KW,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(kd,"class","relative group"),c(ZW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rQ,"href","/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(tQ,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KT,"id","transformers.AutoModelForAudioXVector"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.AutoModelForAudioXVector"),c(Pd,"class","relative group"),c(aQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lQ,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(iQ,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(dQ,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(cQ,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(fQ,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l7,"id","transformers.AutoModelForMaskedImageModeling"),c(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l7,"href","#transformers.AutoModelForMaskedImageModeling"),c(Nd,"class","relative group"),c(mQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pQ,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(uQ,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(_Q,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h7,"id","transformers.AutoModelForObjectDetection"),c(h7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h7,"href","#transformers.AutoModelForObjectDetection"),c(Gd,"class","relative group"),c(bQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForObjectDetection"),c(MQ,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F7,"id","transformers.AutoModelForImageSegmentation"),c(F7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F7,"href","#transformers.AutoModelForImageSegmentation"),c(Xd,"class","relative group"),c(EQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w7,"id","transformers.AutoModelForSemanticSegmentation"),c(w7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Qd,"class","relative group"),c(LQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(kQ,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(SQ,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(RQ,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R7,"id","transformers.AutoModelForInstanceSegmentation"),c(R7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R7,"href","#transformers.AutoModelForInstanceSegmentation"),c(Jd,"class","relative group"),c(PQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NQ,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q7,"id","transformers.TFAutoModel"),c(q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q7,"href","#transformers.TFAutoModel"),c(Zd,"class","relative group"),c(qQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertModel"),c(OQ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartModel"),c(VQ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertModel"),c(XQ,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(zQ,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(WQ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertModel"),c(QQ,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.TFCLIPModel"),c(HQ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertModel"),c(UQ,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextModel"),c(JQ,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLModel"),c(YQ,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(KQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaModel"),c(ZQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(eH,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(oH,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(rH,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraModel"),c(tH,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(aH,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelModel"),c(nH,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(sH,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2Model"),c(lH,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJModel"),c(iH,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.TFHubertModel"),c(dH,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(cH,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDModel"),c(fH,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerModel"),c(mH,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertModel"),c(gH,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianModel"),c(hH,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartModel"),c(pH,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(uH,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetModel"),c(_H,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5Model"),c(bH,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(vH,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTModel"),c(FH,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusModel"),c(TH,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertModel"),c(MH,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaModel"),c(EH,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerModel"),c(CH,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(wH,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinModel"),c(AH,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5Model"),c(LH,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasModel"),c(yH,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(xH,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTModel"),c($H,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(kH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(SH,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMModel"),c(RH,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(PH,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R8,"id","transformers.TFAutoModelForPreTraining"),c(R8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R8,"href","#transformers.TFAutoModelForPreTraining"),c(rc,"class","relative group"),c(BH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(jH,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(DH,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForPreTraining"),c(GH,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(OH,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(VH,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(XH,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(zH,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(WH,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(QH,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(HH,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(UH,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(JH,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(YH,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(KH,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(ZH,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(eU,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(oU,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(rU,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(tU,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(aU,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(nU,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(sU,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nM,"id","transformers.TFAutoModelForCausalLM"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.TFAutoModelForCausalLM"),c(nc,"class","relative group"),c(lU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(fU,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(mU,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(gU,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(hU,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(pU,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(uU,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(_U,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(bU,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(vU,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(FU,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(TU,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(MU,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModelForImageClassification"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModelForImageClassification"),c(ic,"class","relative group"),c(EU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(LU,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(yU,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(xU,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yM,"id","transformers.TFAutoModelForMaskedLM"),c(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yM,"href","#transformers.TFAutoModelForMaskedLM"),c(fc,"class","relative group"),c($U,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(PU,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(BU,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(IU,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(NU,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(qU,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(jU,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(DU,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(GU,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(OU,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(VU,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(XU,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(zU,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(WU,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(QU,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(HU,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(UU,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(JU,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(YU,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(KU,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(hc,"class","relative group"),c(ZU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(tJ,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(aJ,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(nJ,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(sJ,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianMTModel"),c(iJ,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(cJ,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(fJ,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForSequenceClassification"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForSequenceClassification"),c(_c,"class","relative group"),c(mJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(uJ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(_J,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(bJ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c($J,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(NJ,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(qJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(jJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(DJ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.TFAutoModelForMultipleChoice"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Fc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(zJ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(WJ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(QJ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(HJ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(UJ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(eY,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(oY,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(rY,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(tY,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(aY,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(nY,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(sY,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(n4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ec,"class","relative group"),c(lY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(fY,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ac,"class","relative group"),c(mY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForTokenClassification"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForTokenClassification"),c(xc,"class","relative group"),c(uY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(FY,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(TY,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(MY,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(EY,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(CY,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(wY,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(AY,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(LY,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(yY,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(xY,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c($Y,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(kY,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(SY,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(RY,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(PY,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(BY,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(IY,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(NY,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(qY,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.TFAutoModelForQuestionAnswering"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Sc,"class","relative group"),c(jY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(VY,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(QY,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(YY,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(sK,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sC,"id","transformers.TFAutoModelForVision2Seq"),c(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sC,"href","#transformers.TFAutoModelForVision2Seq"),c(Bc,"class","relative group"),c(iK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fK,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(qc,"class","relative group"),c(mK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hC,"id","transformers.FlaxAutoModel"),c(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hC,"href","#transformers.FlaxAutoModel"),c(Gc,"class","relative group"),c(uK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vK,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertModel"),c(FK,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartModel"),c(TK,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitModel"),c(MK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertModel"),c(EK,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(CK,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(wK,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(AK,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.FlaxCLIPModel"),c(LK,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(yK,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraModel"),c(xK,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c($K,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(kK,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(SK,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(RK,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianModel"),c(PK,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartModel"),c(BK,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5Model"),c(IK,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTModel"),c(NK,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(qK,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(jK,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(DK,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5Model"),c(GK,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(OK,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTModel"),c(VK,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(XK,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(zK,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.FlaxAutoModelForCausalLM"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(WK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(JK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(YK,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(KK,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(ZK,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(eZ,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(oZ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(rZ,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(tZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(aZ,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.FlaxAutoModelForPreTraining"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Qc,"class","relative group"),c(nZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(dZ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(cZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(fZ,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(mZ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(gZ,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(hZ,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(pZ,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(uZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(_Z,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(bZ,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(vZ,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(FZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.FlaxAutoModelForMaskedLM"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Jc,"class","relative group"),c(TZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(AZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(LZ,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(yZ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(xZ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c($Z,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(kZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(SZ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(RZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Zc,"class","relative group"),c(PZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NZ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qZ,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(jZ,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(DZ,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(GZ,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(VZ,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zZ,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(rf,"class","relative group"),c(QZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JZ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(YZ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(KZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(ZZ,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(eee,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(oee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(ree,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(tee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(aee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(nee,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(see,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dee,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(cee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(fee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(mee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(gee,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(hee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(pee,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(uee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(_ee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(bee,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_3,"id","transformers.FlaxAutoModelForTokenClassification"),c(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(df,"class","relative group"),c(vee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mee,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Eee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Cee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(wee,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Aee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Lee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(yee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(xee,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(mf,"class","relative group"),c($ee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(See,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ree,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Pee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Bee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(qee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(jee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(j3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(pf,"class","relative group"),c(Gee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.FlaxAutoModelForImageClassification"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.FlaxAutoModelForImageClassification"),c(bf,"class","relative group"),c(zee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hee,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Uee,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.FlaxAutoModelForVision2Seq"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Tf,"class","relative group"),c(Jee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zee,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,Fi),b(f,Lf,_),b(f,at,_),e(at,Ti),e(at,Mi),e(Mi,bA),e(at,yf),b(f,Oe,_),b(f,We,_),e(We,Ei),e(We,Sn),e(Sn,vA),e(We,Rn),e(We,Pn),e(Pn,FA),e(We,Ci),e(We,Bn),e(Bn,TA),e(We,wi),b(f,xf,_),M(ya,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,Hk),e(Ae,Ai),e(Ai,Uk),e(Ae,Jk),b(f,Co,_),b(f,xa,_),e(xa,Yk),e(xa,$f),e($f,Kk),e(xa,wze),b(f,cGe,_),b(f,Li,_),e(Li,kf),e(kf,Hre),M(MA,Hre,null),e(Li,Aze),e(Li,Ure),e(Ure,Lze),b(f,fGe,_),b(f,In,_),e(In,yze),e(In,Jre),e(Jre,xze),e(In,$ze),e(In,Yre),e(Yre,kze),e(In,Sze),b(f,mGe,_),M(EA,f,_),b(f,gGe,_),b(f,Zk,_),e(Zk,Rze),b(f,hGe,_),M(Sf,f,_),b(f,pGe,_),b(f,yi,_),e(yi,Rf),e(Rf,Kre),M(CA,Kre,null),e(yi,Pze),e(yi,Zre),e(Zre,Bze),b(f,uGe,_),b(f,wo,_),M(wA,wo,null),e(wo,Ize),e(wo,AA),e(AA,Nze),e(AA,eS),e(eS,qze),e(AA,jze),e(wo,Dze),e(wo,LA),e(LA,Gze),e(LA,ete),e(ete,Oze),e(LA,Vze),e(wo,Xze),e(wo,wr),M(yA,wr,null),e(wr,zze),e(wr,ote),e(ote,Wze),e(wr,Qze),e(wr,xi),e(xi,Hze),e(xi,rte),e(rte,Uze),e(xi,Jze),e(xi,tte),e(tte,Yze),e(xi,Kze),e(wr,Zze),e(wr,A),e(A,Pf),e(Pf,ate),e(ate,eWe),e(Pf,oWe),e(Pf,oS),e(oS,rWe),e(Pf,tWe),e(A,aWe),e(A,Bf),e(Bf,nte),e(nte,nWe),e(Bf,sWe),e(Bf,rS),e(rS,lWe),e(Bf,iWe),e(A,dWe),e(A,If),e(If,ste),e(ste,cWe),e(If,fWe),e(If,tS),e(tS,mWe),e(If,gWe),e(A,hWe),e(A,Nf),e(Nf,lte),e(lte,pWe),e(Nf,uWe),e(Nf,aS),e(aS,_We),e(Nf,bWe),e(A,vWe),e(A,qf),e(qf,ite),e(ite,FWe),e(qf,TWe),e(qf,nS),e(nS,MWe),e(qf,EWe),e(A,CWe),e(A,jf),e(jf,dte),e(dte,wWe),e(jf,AWe),e(jf,sS),e(sS,LWe),e(jf,yWe),e(A,xWe),e(A,Df),e(Df,cte),e(cte,$We),e(Df,kWe),e(Df,lS),e(lS,SWe),e(Df,RWe),e(A,PWe),e(A,Gf),e(Gf,fte),e(fte,BWe),e(Gf,IWe),e(Gf,iS),e(iS,NWe),e(Gf,qWe),e(A,jWe),e(A,Of),e(Of,mte),e(mte,DWe),e(Of,GWe),e(Of,dS),e(dS,OWe),e(Of,VWe),e(A,XWe),e(A,Vf),e(Vf,gte),e(gte,zWe),e(Vf,WWe),e(Vf,cS),e(cS,QWe),e(Vf,HWe),e(A,UWe),e(A,Xf),e(Xf,hte),e(hte,JWe),e(Xf,YWe),e(Xf,fS),e(fS,KWe),e(Xf,ZWe),e(A,eQe),e(A,zf),e(zf,pte),e(pte,oQe),e(zf,rQe),e(zf,mS),e(mS,tQe),e(zf,aQe),e(A,nQe),e(A,Wf),e(Wf,ute),e(ute,sQe),e(Wf,lQe),e(Wf,gS),e(gS,iQe),e(Wf,dQe),e(A,cQe),e(A,Qf),e(Qf,_te),e(_te,fQe),e(Qf,mQe),e(Qf,hS),e(hS,gQe),e(Qf,hQe),e(A,pQe),e(A,Hf),e(Hf,bte),e(bte,uQe),e(Hf,_Qe),e(Hf,pS),e(pS,bQe),e(Hf,vQe),e(A,FQe),e(A,Uf),e(Uf,vte),e(vte,TQe),e(Uf,MQe),e(Uf,uS),e(uS,EQe),e(Uf,CQe),e(A,wQe),e(A,Jf),e(Jf,Fte),e(Fte,AQe),e(Jf,LQe),e(Jf,_S),e(_S,yQe),e(Jf,xQe),e(A,$Qe),e(A,Yf),e(Yf,Tte),e(Tte,kQe),e(Yf,SQe),e(Yf,bS),e(bS,RQe),e(Yf,PQe),e(A,BQe),e(A,Kf),e(Kf,Mte),e(Mte,IQe),e(Kf,NQe),e(Kf,vS),e(vS,qQe),e(Kf,jQe),e(A,DQe),e(A,Zf),e(Zf,Ete),e(Ete,GQe),e(Zf,OQe),e(Zf,FS),e(FS,VQe),e(Zf,XQe),e(A,zQe),e(A,em),e(em,Cte),e(Cte,WQe),e(em,QQe),e(em,TS),e(TS,HQe),e(em,UQe),e(A,JQe),e(A,om),e(om,wte),e(wte,YQe),e(om,KQe),e(om,MS),e(MS,ZQe),e(om,eHe),e(A,oHe),e(A,rm),e(rm,Ate),e(Ate,rHe),e(rm,tHe),e(rm,ES),e(ES,aHe),e(rm,nHe),e(A,sHe),e(A,tm),e(tm,Lte),e(Lte,lHe),e(tm,iHe),e(tm,CS),e(CS,dHe),e(tm,cHe),e(A,fHe),e(A,am),e(am,yte),e(yte,mHe),e(am,gHe),e(am,wS),e(wS,hHe),e(am,pHe),e(A,uHe),e(A,nm),e(nm,xte),e(xte,_He),e(nm,bHe),e(nm,AS),e(AS,vHe),e(nm,FHe),e(A,THe),e(A,sm),e(sm,$te),e($te,MHe),e(sm,EHe),e(sm,LS),e(LS,CHe),e(sm,wHe),e(A,AHe),e(A,lm),e(lm,kte),e(kte,LHe),e(lm,yHe),e(lm,yS),e(yS,xHe),e(lm,$He),e(A,kHe),e(A,im),e(im,Ste),e(Ste,SHe),e(im,RHe),e(im,xS),e(xS,PHe),e(im,BHe),e(A,IHe),e(A,dm),e(dm,Rte),e(Rte,NHe),e(dm,qHe),e(dm,$S),e($S,jHe),e(dm,DHe),e(A,GHe),e(A,cm),e(cm,Pte),e(Pte,OHe),e(cm,VHe),e(cm,kS),e(kS,XHe),e(cm,zHe),e(A,WHe),e(A,fm),e(fm,Bte),e(Bte,QHe),e(fm,HHe),e(fm,SS),e(SS,UHe),e(fm,JHe),e(A,YHe),e(A,mm),e(mm,Ite),e(Ite,KHe),e(mm,ZHe),e(mm,RS),e(RS,eUe),e(mm,oUe),e(A,rUe),e(A,gm),e(gm,Nte),e(Nte,tUe),e(gm,aUe),e(gm,PS),e(PS,nUe),e(gm,sUe),e(A,lUe),e(A,hm),e(hm,qte),e(qte,iUe),e(hm,dUe),e(hm,BS),e(BS,cUe),e(hm,fUe),e(A,mUe),e(A,pm),e(pm,jte),e(jte,gUe),e(pm,hUe),e(pm,IS),e(IS,pUe),e(pm,uUe),e(A,_Ue),e(A,um),e(um,Dte),e(Dte,bUe),e(um,vUe),e(um,NS),e(NS,FUe),e(um,TUe),e(A,MUe),e(A,_m),e(_m,Gte),e(Gte,EUe),e(_m,CUe),e(_m,qS),e(qS,wUe),e(_m,AUe),e(A,LUe),e(A,bm),e(bm,Ote),e(Ote,yUe),e(bm,xUe),e(bm,jS),e(jS,$Ue),e(bm,kUe),e(A,SUe),e(A,vm),e(vm,Vte),e(Vte,RUe),e(vm,PUe),e(vm,DS),e(DS,BUe),e(vm,IUe),e(A,NUe),e(A,Fm),e(Fm,Xte),e(Xte,qUe),e(Fm,jUe),e(Fm,GS),e(GS,DUe),e(Fm,GUe),e(A,OUe),e(A,Tm),e(Tm,zte),e(zte,VUe),e(Tm,XUe),e(Tm,OS),e(OS,zUe),e(Tm,WUe),e(A,QUe),e(A,Mm),e(Mm,Wte),e(Wte,HUe),e(Mm,UUe),e(Mm,VS),e(VS,JUe),e(Mm,YUe),e(A,KUe),e(A,Em),e(Em,Qte),e(Qte,ZUe),e(Em,eJe),e(Em,XS),e(XS,oJe),e(Em,rJe),e(A,tJe),e(A,Cm),e(Cm,Hte),e(Hte,aJe),e(Cm,nJe),e(Cm,zS),e(zS,sJe),e(Cm,lJe),e(A,iJe),e(A,wm),e(wm,Ute),e(Ute,dJe),e(wm,cJe),e(wm,WS),e(WS,fJe),e(wm,mJe),e(A,gJe),e(A,Am),e(Am,Jte),e(Jte,hJe),e(Am,pJe),e(Am,QS),e(QS,uJe),e(Am,_Je),e(A,bJe),e(A,Lm),e(Lm,Yte),e(Yte,vJe),e(Lm,FJe),e(Lm,HS),e(HS,TJe),e(Lm,MJe),e(A,EJe),e(A,ym),e(ym,Kte),e(Kte,CJe),e(ym,wJe),e(ym,US),e(US,AJe),e(ym,LJe),e(A,yJe),e(A,xm),e(xm,Zte),e(Zte,xJe),e(xm,$Je),e(xm,JS),e(JS,kJe),e(xm,SJe),e(A,RJe),e(A,$m),e($m,eae),e(eae,PJe),e($m,BJe),e($m,YS),e(YS,IJe),e($m,NJe),e(A,qJe),e(A,km),e(km,oae),e(oae,jJe),e(km,DJe),e(km,KS),e(KS,GJe),e(km,OJe),e(A,VJe),e(A,Sm),e(Sm,rae),e(rae,XJe),e(Sm,zJe),e(Sm,ZS),e(ZS,WJe),e(Sm,QJe),e(A,HJe),e(A,Rm),e(Rm,tae),e(tae,UJe),e(Rm,JJe),e(Rm,eR),e(eR,YJe),e(Rm,KJe),e(A,ZJe),e(A,Pm),e(Pm,aae),e(aae,eYe),e(Pm,oYe),e(Pm,oR),e(oR,rYe),e(Pm,tYe),e(A,aYe),e(A,Bm),e(Bm,nae),e(nae,nYe),e(Bm,sYe),e(Bm,rR),e(rR,lYe),e(Bm,iYe),e(A,dYe),e(A,Im),e(Im,sae),e(sae,cYe),e(Im,fYe),e(Im,tR),e(tR,mYe),e(Im,gYe),e(A,hYe),e(A,Nm),e(Nm,lae),e(lae,pYe),e(Nm,uYe),e(Nm,aR),e(aR,_Ye),e(Nm,bYe),e(A,vYe),e(A,qm),e(qm,iae),e(iae,FYe),e(qm,TYe),e(qm,nR),e(nR,MYe),e(qm,EYe),e(A,CYe),e(A,jm),e(jm,dae),e(dae,wYe),e(jm,AYe),e(jm,sR),e(sR,LYe),e(jm,yYe),e(A,xYe),e(A,Dm),e(Dm,cae),e(cae,$Ye),e(Dm,kYe),e(Dm,lR),e(lR,SYe),e(Dm,RYe),e(A,PYe),e(A,Gm),e(Gm,fae),e(fae,BYe),e(Gm,IYe),e(Gm,iR),e(iR,NYe),e(Gm,qYe),e(A,jYe),e(A,Om),e(Om,mae),e(mae,DYe),e(Om,GYe),e(Om,dR),e(dR,OYe),e(Om,VYe),e(A,XYe),e(A,Vm),e(Vm,gae),e(gae,zYe),e(Vm,WYe),e(Vm,cR),e(cR,QYe),e(Vm,HYe),e(A,UYe),e(A,Xm),e(Xm,hae),e(hae,JYe),e(Xm,YYe),e(Xm,fR),e(fR,KYe),e(Xm,ZYe),e(A,eKe),e(A,zm),e(zm,pae),e(pae,oKe),e(zm,rKe),e(zm,mR),e(mR,tKe),e(zm,aKe),e(A,nKe),e(A,Wm),e(Wm,uae),e(uae,sKe),e(Wm,lKe),e(Wm,gR),e(gR,iKe),e(Wm,dKe),e(A,cKe),e(A,Qm),e(Qm,_ae),e(_ae,fKe),e(Qm,mKe),e(Qm,hR),e(hR,gKe),e(Qm,hKe),e(A,pKe),e(A,Hm),e(Hm,bae),e(bae,uKe),e(Hm,_Ke),e(Hm,pR),e(pR,bKe),e(Hm,vKe),e(A,FKe),e(A,Um),e(Um,vae),e(vae,TKe),e(Um,MKe),e(Um,uR),e(uR,EKe),e(Um,CKe),e(A,wKe),e(A,Jm),e(Jm,Fae),e(Fae,AKe),e(Jm,LKe),e(Jm,_R),e(_R,yKe),e(Jm,xKe),e(A,$Ke),e(A,Ym),e(Ym,Tae),e(Tae,kKe),e(Ym,SKe),e(Ym,bR),e(bR,RKe),e(Ym,PKe),e(A,BKe),e(A,Km),e(Km,Mae),e(Mae,IKe),e(Km,NKe),e(Km,vR),e(vR,qKe),e(Km,jKe),e(A,DKe),e(A,Zm),e(Zm,Eae),e(Eae,GKe),e(Zm,OKe),e(Zm,FR),e(FR,VKe),e(Zm,XKe),e(A,zKe),e(A,eg),e(eg,Cae),e(Cae,WKe),e(eg,QKe),e(eg,TR),e(TR,HKe),e(eg,UKe),e(A,JKe),e(A,og),e(og,wae),e(wae,YKe),e(og,KKe),e(og,MR),e(MR,ZKe),e(og,eZe),e(A,oZe),e(A,rg),e(rg,Aae),e(Aae,rZe),e(rg,tZe),e(rg,ER),e(ER,aZe),e(rg,nZe),e(A,sZe),e(A,tg),e(tg,Lae),e(Lae,lZe),e(tg,iZe),e(tg,CR),e(CR,dZe),e(tg,cZe),e(A,fZe),e(A,ag),e(ag,yae),e(yae,mZe),e(ag,gZe),e(ag,wR),e(wR,hZe),e(ag,pZe),e(A,uZe),e(A,ng),e(ng,xae),e(xae,_Ze),e(ng,bZe),e(ng,AR),e(AR,vZe),e(ng,FZe),e(A,TZe),e(A,sg),e(sg,$ae),e($ae,MZe),e(sg,EZe),e(sg,LR),e(LR,CZe),e(sg,wZe),e(A,AZe),e(A,lg),e(lg,kae),e(kae,LZe),e(lg,yZe),e(lg,yR),e(yR,xZe),e(lg,$Ze),e(A,kZe),e(A,ig),e(ig,Sae),e(Sae,SZe),e(ig,RZe),e(ig,xR),e(xR,PZe),e(ig,BZe),e(A,IZe),e(A,dg),e(dg,Rae),e(Rae,NZe),e(dg,qZe),e(dg,$R),e($R,jZe),e(dg,DZe),e(A,GZe),e(A,cg),e(cg,Pae),e(Pae,OZe),e(cg,VZe),e(cg,kR),e(kR,XZe),e(cg,zZe),e(A,WZe),e(A,fg),e(fg,Bae),e(Bae,QZe),e(fg,HZe),e(fg,SR),e(SR,UZe),e(fg,JZe),e(A,YZe),e(A,mg),e(mg,Iae),e(Iae,KZe),e(mg,ZZe),e(mg,RR),e(RR,eeo),e(mg,oeo),e(A,reo),e(A,gg),e(gg,Nae),e(Nae,teo),e(gg,aeo),e(gg,PR),e(PR,neo),e(gg,seo),e(A,leo),e(A,hg),e(hg,qae),e(qae,ieo),e(hg,deo),e(hg,BR),e(BR,ceo),e(hg,feo),e(A,meo),e(A,pg),e(pg,jae),e(jae,geo),e(pg,heo),e(pg,IR),e(IR,peo),e(pg,ueo),e(A,_eo),e(A,ug),e(ug,Dae),e(Dae,beo),e(ug,veo),e(ug,NR),e(NR,Feo),e(ug,Teo),e(A,Meo),e(A,_g),e(_g,Gae),e(Gae,Eeo),e(_g,Ceo),e(_g,qR),e(qR,weo),e(_g,Aeo),e(A,Leo),e(A,bg),e(bg,Oae),e(Oae,yeo),e(bg,xeo),e(bg,jR),e(jR,$eo),e(bg,keo),e(A,Seo),e(A,vg),e(vg,Vae),e(Vae,Reo),e(vg,Peo),e(vg,DR),e(DR,Beo),e(vg,Ieo),e(A,Neo),e(A,Fg),e(Fg,Xae),e(Xae,qeo),e(Fg,jeo),e(Fg,GR),e(GR,Deo),e(Fg,Geo),e(A,Oeo),e(A,Tg),e(Tg,zae),e(zae,Veo),e(Tg,Xeo),e(Tg,OR),e(OR,zeo),e(Tg,Weo),e(A,Qeo),e(A,Mg),e(Mg,Wae),e(Wae,Heo),e(Mg,Ueo),e(Mg,VR),e(VR,Jeo),e(Mg,Yeo),e(A,Keo),e(A,Eg),e(Eg,Qae),e(Qae,Zeo),e(Eg,eoo),e(Eg,XR),e(XR,ooo),e(Eg,roo),e(A,too),e(A,Cg),e(Cg,Hae),e(Hae,aoo),e(Cg,noo),e(Cg,zR),e(zR,soo),e(Cg,loo),e(A,ioo),e(A,wg),e(wg,Uae),e(Uae,doo),e(wg,coo),e(wg,WR),e(WR,foo),e(wg,moo),e(A,goo),e(A,Ag),e(Ag,Jae),e(Jae,hoo),e(Ag,poo),e(Ag,QR),e(QR,uoo),e(Ag,_oo),e(A,boo),e(A,Lg),e(Lg,Yae),e(Yae,voo),e(Lg,Foo),e(Lg,HR),e(HR,Too),e(Lg,Moo),e(A,Eoo),e(A,yg),e(yg,Kae),e(Kae,Coo),e(yg,woo),e(yg,UR),e(UR,Aoo),e(yg,Loo),e(A,yoo),e(A,xg),e(xg,Zae),e(Zae,xoo),e(xg,$oo),e(xg,JR),e(JR,koo),e(xg,Soo),e(A,Roo),e(A,$g),e($g,ene),e(ene,Poo),e($g,Boo),e($g,YR),e(YR,Ioo),e($g,Noo),e(A,qoo),e(A,kg),e(kg,one),e(one,joo),e(kg,Doo),e(kg,KR),e(KR,Goo),e(kg,Ooo),e(A,Voo),e(A,Sg),e(Sg,rne),e(rne,Xoo),e(Sg,zoo),e(Sg,ZR),e(ZR,Woo),e(Sg,Qoo),e(A,Hoo),e(A,Rg),e(Rg,tne),e(tne,Uoo),e(Rg,Joo),e(Rg,eP),e(eP,Yoo),e(Rg,Koo),e(A,Zoo),e(A,Pg),e(Pg,ane),e(ane,ero),e(Pg,oro),e(Pg,oP),e(oP,rro),e(Pg,tro),e(A,aro),e(A,Bg),e(Bg,nne),e(nne,nro),e(Bg,sro),e(Bg,rP),e(rP,lro),e(Bg,iro),e(A,dro),e(A,Ig),e(Ig,sne),e(sne,cro),e(Ig,fro),e(Ig,tP),e(tP,mro),e(Ig,gro),e(A,hro),e(A,Ng),e(Ng,lne),e(lne,pro),e(Ng,uro),e(Ng,aP),e(aP,_ro),e(Ng,bro),e(A,vro),e(A,qg),e(qg,ine),e(ine,Fro),e(qg,Tro),e(qg,nP),e(nP,Mro),e(qg,Ero),e(A,Cro),e(A,jg),e(jg,dne),e(dne,wro),e(jg,Aro),e(jg,sP),e(sP,Lro),e(jg,yro),e(wr,xro),M(Dg,wr,null),e(wo,$ro),e(wo,Gg),M(xA,Gg,null),e(Gg,kro),e(Gg,cne),e(cne,Sro),b(f,_Ge,_),b(f,$i,_),e($i,Og),e(Og,fne),M($A,fne,null),e($i,Rro),e($i,mne),e(mne,Pro),b(f,bGe,_),b(f,Ao,_),M(kA,Ao,null),e(Ao,Bro),e(Ao,SA),e(SA,Iro),e(SA,lP),e(lP,Nro),e(SA,qro),e(Ao,jro),e(Ao,RA),e(RA,Dro),e(RA,gne),e(gne,Gro),e(RA,Oro),e(Ao,Vro),e(Ao,Ar),M(PA,Ar,null),e(Ar,Xro),e(Ar,hne),e(hne,zro),e(Ar,Wro),e(Ar,$a),e($a,Qro),e($a,pne),e(pne,Hro),e($a,Uro),e($a,une),e(une,Jro),e($a,Yro),e($a,_ne),e(_ne,Kro),e($a,Zro),e(Ar,eto),e(Ar,k),e(k,Nn),e(Nn,bne),e(bne,oto),e(Nn,rto),e(Nn,iP),e(iP,tto),e(Nn,ato),e(Nn,dP),e(dP,nto),e(Nn,sto),e(k,lto),e(k,qn),e(qn,vne),e(vne,ito),e(qn,dto),e(qn,cP),e(cP,cto),e(qn,fto),e(qn,fP),e(fP,mto),e(qn,gto),e(k,hto),e(k,jn),e(jn,Fne),e(Fne,pto),e(jn,uto),e(jn,mP),e(mP,_to),e(jn,bto),e(jn,gP),e(gP,vto),e(jn,Fto),e(k,Tto),e(k,Vg),e(Vg,Tne),e(Tne,Mto),e(Vg,Eto),e(Vg,hP),e(hP,Cto),e(Vg,wto),e(k,Ato),e(k,Dn),e(Dn,Mne),e(Mne,Lto),e(Dn,yto),e(Dn,pP),e(pP,xto),e(Dn,$to),e(Dn,uP),e(uP,kto),e(Dn,Sto),e(k,Rto),e(k,Xg),e(Xg,Ene),e(Ene,Pto),e(Xg,Bto),e(Xg,_P),e(_P,Ito),e(Xg,Nto),e(k,qto),e(k,zg),e(zg,Cne),e(Cne,jto),e(zg,Dto),e(zg,bP),e(bP,Gto),e(zg,Oto),e(k,Vto),e(k,Wg),e(Wg,wne),e(wne,Xto),e(Wg,zto),e(Wg,vP),e(vP,Wto),e(Wg,Qto),e(k,Hto),e(k,Gn),e(Gn,Ane),e(Ane,Uto),e(Gn,Jto),e(Gn,FP),e(FP,Yto),e(Gn,Kto),e(Gn,TP),e(TP,Zto),e(Gn,eao),e(k,oao),e(k,On),e(On,Lne),e(Lne,rao),e(On,tao),e(On,MP),e(MP,aao),e(On,nao),e(On,EP),e(EP,sao),e(On,lao),e(k,iao),e(k,Vn),e(Vn,yne),e(yne,dao),e(Vn,cao),e(Vn,CP),e(CP,fao),e(Vn,mao),e(Vn,wP),e(wP,gao),e(Vn,hao),e(k,pao),e(k,Qg),e(Qg,xne),e(xne,uao),e(Qg,_ao),e(Qg,AP),e(AP,bao),e(Qg,vao),e(k,Fao),e(k,Hg),e(Hg,$ne),e($ne,Tao),e(Hg,Mao),e(Hg,LP),e(LP,Eao),e(Hg,Cao),e(k,wao),e(k,Ug),e(Ug,kne),e(kne,Aao),e(Ug,Lao),e(Ug,yP),e(yP,yao),e(Ug,xao),e(k,$ao),e(k,Xn),e(Xn,Sne),e(Sne,kao),e(Xn,Sao),e(Xn,xP),e(xP,Rao),e(Xn,Pao),e(Xn,$P),e($P,Bao),e(Xn,Iao),e(k,Nao),e(k,Jg),e(Jg,Rne),e(Rne,qao),e(Jg,jao),e(Jg,kP),e(kP,Dao),e(Jg,Gao),e(k,Oao),e(k,zn),e(zn,Pne),e(Pne,Vao),e(zn,Xao),e(zn,SP),e(SP,zao),e(zn,Wao),e(zn,RP),e(RP,Qao),e(zn,Hao),e(k,Uao),e(k,Wn),e(Wn,Bne),e(Bne,Jao),e(Wn,Yao),e(Wn,PP),e(PP,Kao),e(Wn,Zao),e(Wn,BP),e(BP,eno),e(Wn,ono),e(k,rno),e(k,Qn),e(Qn,Ine),e(Ine,tno),e(Qn,ano),e(Qn,IP),e(IP,nno),e(Qn,sno),e(Qn,NP),e(NP,lno),e(Qn,ino),e(k,dno),e(k,Yg),e(Yg,Nne),e(Nne,cno),e(Yg,fno),e(Yg,qP),e(qP,mno),e(Yg,gno),e(k,hno),e(k,Hn),e(Hn,qne),e(qne,pno),e(Hn,uno),e(Hn,jP),e(jP,_no),e(Hn,bno),e(Hn,DP),e(DP,vno),e(Hn,Fno),e(k,Tno),e(k,Un),e(Un,jne),e(jne,Mno),e(Un,Eno),e(Un,GP),e(GP,Cno),e(Un,wno),e(Un,OP),e(OP,Ano),e(Un,Lno),e(k,yno),e(k,Jn),e(Jn,Dne),e(Dne,xno),e(Jn,$no),e(Jn,VP),e(VP,kno),e(Jn,Sno),e(Jn,XP),e(XP,Rno),e(Jn,Pno),e(k,Bno),e(k,Yn),e(Yn,Gne),e(Gne,Ino),e(Yn,Nno),e(Yn,zP),e(zP,qno),e(Yn,jno),e(Yn,WP),e(WP,Dno),e(Yn,Gno),e(k,Ono),e(k,Kn),e(Kn,One),e(One,Vno),e(Kn,Xno),e(Kn,QP),e(QP,zno),e(Kn,Wno),e(Kn,HP),e(HP,Qno),e(Kn,Hno),e(k,Uno),e(k,Zn),e(Zn,Vne),e(Vne,Jno),e(Zn,Yno),e(Zn,UP),e(UP,Kno),e(Zn,Zno),e(Zn,JP),e(JP,eso),e(Zn,oso),e(k,rso),e(k,Kg),e(Kg,Xne),e(Xne,tso),e(Kg,aso),e(Kg,YP),e(YP,nso),e(Kg,sso),e(k,lso),e(k,es),e(es,zne),e(zne,iso),e(es,dso),e(es,KP),e(KP,cso),e(es,fso),e(es,ZP),e(ZP,mso),e(es,gso),e(k,hso),e(k,Zg),e(Zg,Wne),e(Wne,pso),e(Zg,uso),e(Zg,eB),e(eB,_so),e(Zg,bso),e(k,vso),e(k,os),e(os,Qne),e(Qne,Fso),e(os,Tso),e(os,oB),e(oB,Mso),e(os,Eso),e(os,rB),e(rB,Cso),e(os,wso),e(k,Aso),e(k,rs),e(rs,Hne),e(Hne,Lso),e(rs,yso),e(rs,tB),e(tB,xso),e(rs,$so),e(rs,aB),e(aB,kso),e(rs,Sso),e(k,Rso),e(k,ts),e(ts,Une),e(Une,Pso),e(ts,Bso),e(ts,nB),e(nB,Iso),e(ts,Nso),e(ts,sB),e(sB,qso),e(ts,jso),e(k,Dso),e(k,eh),e(eh,Jne),e(Jne,Gso),e(eh,Oso),e(eh,lB),e(lB,Vso),e(eh,Xso),e(k,zso),e(k,as),e(as,Yne),e(Yne,Wso),e(as,Qso),e(as,iB),e(iB,Hso),e(as,Uso),e(as,dB),e(dB,Jso),e(as,Yso),e(k,Kso),e(k,ns),e(ns,Kne),e(Kne,Zso),e(ns,elo),e(ns,cB),e(cB,olo),e(ns,rlo),e(ns,fB),e(fB,tlo),e(ns,alo),e(k,nlo),e(k,oh),e(oh,Zne),e(Zne,slo),e(oh,llo),e(oh,mB),e(mB,ilo),e(oh,dlo),e(k,clo),e(k,ss),e(ss,ese),e(ese,flo),e(ss,mlo),e(ss,gB),e(gB,glo),e(ss,hlo),e(ss,hB),e(hB,plo),e(ss,ulo),e(k,_lo),e(k,rh),e(rh,ose),e(ose,blo),e(rh,vlo),e(rh,rse),e(rse,Flo),e(rh,Tlo),e(k,Mlo),e(k,ls),e(ls,tse),e(tse,Elo),e(ls,Clo),e(ls,pB),e(pB,wlo),e(ls,Alo),e(ls,uB),e(uB,Llo),e(ls,ylo),e(k,xlo),e(k,is),e(is,ase),e(ase,$lo),e(is,klo),e(is,_B),e(_B,Slo),e(is,Rlo),e(is,bB),e(bB,Plo),e(is,Blo),e(k,Ilo),e(k,ds),e(ds,nse),e(nse,Nlo),e(ds,qlo),e(ds,vB),e(vB,jlo),e(ds,Dlo),e(ds,FB),e(FB,Glo),e(ds,Olo),e(k,Vlo),e(k,cs),e(cs,sse),e(sse,Xlo),e(cs,zlo),e(cs,TB),e(TB,Wlo),e(cs,Qlo),e(cs,MB),e(MB,Hlo),e(cs,Ulo),e(k,Jlo),e(k,fs),e(fs,lse),e(lse,Ylo),e(fs,Klo),e(fs,EB),e(EB,Zlo),e(fs,eio),e(fs,CB),e(CB,oio),e(fs,rio),e(k,tio),e(k,ms),e(ms,ise),e(ise,aio),e(ms,nio),e(ms,wB),e(wB,sio),e(ms,lio),e(ms,AB),e(AB,iio),e(ms,dio),e(k,cio),e(k,gs),e(gs,dse),e(dse,fio),e(gs,mio),e(gs,LB),e(LB,gio),e(gs,hio),e(gs,yB),e(yB,pio),e(gs,uio),e(k,_io),e(k,th),e(th,cse),e(cse,bio),e(th,vio),e(th,xB),e(xB,Fio),e(th,Tio),e(k,Mio),e(k,hs),e(hs,fse),e(fse,Eio),e(hs,Cio),e(hs,$B),e($B,wio),e(hs,Aio),e(hs,kB),e(kB,Lio),e(hs,yio),e(k,xio),e(k,ah),e(ah,mse),e(mse,$io),e(ah,kio),e(ah,SB),e(SB,Sio),e(ah,Rio),e(k,Pio),e(k,nh),e(nh,gse),e(gse,Bio),e(nh,Iio),e(nh,RB),e(RB,Nio),e(nh,qio),e(k,jio),e(k,ps),e(ps,hse),e(hse,Dio),e(ps,Gio),e(ps,PB),e(PB,Oio),e(ps,Vio),e(ps,BB),e(BB,Xio),e(ps,zio),e(k,Wio),e(k,us),e(us,pse),e(pse,Qio),e(us,Hio),e(us,IB),e(IB,Uio),e(us,Jio),e(us,NB),e(NB,Yio),e(us,Kio),e(k,Zio),e(k,_s),e(_s,use),e(use,edo),e(_s,odo),e(_s,qB),e(qB,rdo),e(_s,tdo),e(_s,jB),e(jB,ado),e(_s,ndo),e(k,sdo),e(k,sh),e(sh,_se),e(_se,ldo),e(sh,ido),e(sh,DB),e(DB,ddo),e(sh,cdo),e(k,fdo),e(k,bs),e(bs,bse),e(bse,mdo),e(bs,gdo),e(bs,GB),e(GB,hdo),e(bs,pdo),e(bs,OB),e(OB,udo),e(bs,_do),e(k,bdo),e(k,vs),e(vs,vse),e(vse,vdo),e(vs,Fdo),e(vs,VB),e(VB,Tdo),e(vs,Mdo),e(vs,XB),e(XB,Edo),e(vs,Cdo),e(k,wdo),e(k,Fs),e(Fs,Fse),e(Fse,Ado),e(Fs,Ldo),e(Fs,zB),e(zB,ydo),e(Fs,xdo),e(Fs,WB),e(WB,$do),e(Fs,kdo),e(k,Sdo),e(k,Ts),e(Ts,Tse),e(Tse,Rdo),e(Ts,Pdo),e(Ts,QB),e(QB,Bdo),e(Ts,Ido),e(Ts,HB),e(HB,Ndo),e(Ts,qdo),e(k,jdo),e(k,Ms),e(Ms,Mse),e(Mse,Ddo),e(Ms,Gdo),e(Ms,UB),e(UB,Odo),e(Ms,Vdo),e(Ms,JB),e(JB,Xdo),e(Ms,zdo),e(k,Wdo),e(k,lh),e(lh,Ese),e(Ese,Qdo),e(lh,Hdo),e(lh,YB),e(YB,Udo),e(lh,Jdo),e(k,Ydo),e(k,Es),e(Es,Cse),e(Cse,Kdo),e(Es,Zdo),e(Es,KB),e(KB,eco),e(Es,oco),e(Es,ZB),e(ZB,rco),e(Es,tco),e(k,aco),e(k,ih),e(ih,wse),e(wse,nco),e(ih,sco),e(ih,eI),e(eI,lco),e(ih,ico),e(k,dco),e(k,dh),e(dh,Ase),e(Ase,cco),e(dh,fco),e(dh,oI),e(oI,mco),e(dh,gco),e(k,hco),e(k,ch),e(ch,Lse),e(Lse,pco),e(ch,uco),e(ch,rI),e(rI,_co),e(ch,bco),e(k,vco),e(k,fh),e(fh,yse),e(yse,Fco),e(fh,Tco),e(fh,tI),e(tI,Mco),e(fh,Eco),e(k,Cco),e(k,Cs),e(Cs,xse),e(xse,wco),e(Cs,Aco),e(Cs,aI),e(aI,Lco),e(Cs,yco),e(Cs,nI),e(nI,xco),e(Cs,$co),e(k,kco),e(k,mh),e(mh,$se),e($se,Sco),e(mh,Rco),e(mh,sI),e(sI,Pco),e(mh,Bco),e(k,Ico),e(k,ws),e(ws,kse),e(kse,Nco),e(ws,qco),e(ws,lI),e(lI,jco),e(ws,Dco),e(ws,iI),e(iI,Gco),e(ws,Oco),e(k,Vco),e(k,As),e(As,Sse),e(Sse,Xco),e(As,zco),e(As,dI),e(dI,Wco),e(As,Qco),e(As,cI),e(cI,Hco),e(As,Uco),e(k,Jco),e(k,Ls),e(Ls,Rse),e(Rse,Yco),e(Ls,Kco),e(Ls,fI),e(fI,Zco),e(Ls,efo),e(Ls,mI),e(mI,ofo),e(Ls,rfo),e(k,tfo),e(k,ys),e(ys,Pse),e(Pse,afo),e(ys,nfo),e(ys,gI),e(gI,sfo),e(ys,lfo),e(ys,hI),e(hI,ifo),e(ys,dfo),e(k,cfo),e(k,xs),e(xs,Bse),e(Bse,ffo),e(xs,mfo),e(xs,pI),e(pI,gfo),e(xs,hfo),e(xs,uI),e(uI,pfo),e(xs,ufo),e(k,_fo),e(k,$s),e($s,Ise),e(Ise,bfo),e($s,vfo),e($s,_I),e(_I,Ffo),e($s,Tfo),e($s,bI),e(bI,Mfo),e($s,Efo),e(k,Cfo),e(k,gh),e(gh,Nse),e(Nse,wfo),e(gh,Afo),e(gh,vI),e(vI,Lfo),e(gh,yfo),e(k,xfo),e(k,hh),e(hh,qse),e(qse,$fo),e(hh,kfo),e(hh,FI),e(FI,Sfo),e(hh,Rfo),e(k,Pfo),e(k,ks),e(ks,jse),e(jse,Bfo),e(ks,Ifo),e(ks,TI),e(TI,Nfo),e(ks,qfo),e(ks,MI),e(MI,jfo),e(ks,Dfo),e(k,Gfo),e(k,Ss),e(Ss,Dse),e(Dse,Ofo),e(Ss,Vfo),e(Ss,EI),e(EI,Xfo),e(Ss,zfo),e(Ss,CI),e(CI,Wfo),e(Ss,Qfo),e(k,Hfo),e(k,Rs),e(Rs,Gse),e(Gse,Ufo),e(Rs,Jfo),e(Rs,wI),e(wI,Yfo),e(Rs,Kfo),e(Rs,AI),e(AI,Zfo),e(Rs,emo),e(k,omo),e(k,ph),e(ph,Ose),e(Ose,rmo),e(ph,tmo),e(ph,LI),e(LI,amo),e(ph,nmo),e(k,smo),e(k,uh),e(uh,Vse),e(Vse,lmo),e(uh,imo),e(uh,yI),e(yI,dmo),e(uh,cmo),e(k,fmo),e(k,_h),e(_h,Xse),e(Xse,mmo),e(_h,gmo),e(_h,xI),e(xI,hmo),e(_h,pmo),e(k,umo),e(k,Ps),e(Ps,zse),e(zse,_mo),e(Ps,bmo),e(Ps,$I),e($I,vmo),e(Ps,Fmo),e(Ps,kI),e(kI,Tmo),e(Ps,Mmo),e(k,Emo),e(k,Bs),e(Bs,Wse),e(Wse,Cmo),e(Bs,wmo),e(Bs,SI),e(SI,Amo),e(Bs,Lmo),e(Bs,RI),e(RI,ymo),e(Bs,xmo),e(k,$mo),e(k,bh),e(bh,Qse),e(Qse,kmo),e(bh,Smo),e(bh,PI),e(PI,Rmo),e(bh,Pmo),e(k,Bmo),e(k,vh),e(vh,Hse),e(Hse,Imo),e(vh,Nmo),e(vh,BI),e(BI,qmo),e(vh,jmo),e(k,Dmo),e(k,Fh),e(Fh,Use),e(Use,Gmo),e(Fh,Omo),e(Fh,II),e(II,Vmo),e(Fh,Xmo),e(k,zmo),e(k,Is),e(Is,Jse),e(Jse,Wmo),e(Is,Qmo),e(Is,NI),e(NI,Hmo),e(Is,Umo),e(Is,qI),e(qI,Jmo),e(Is,Ymo),e(k,Kmo),e(k,Th),e(Th,Yse),e(Yse,Zmo),e(Th,ego),e(Th,jI),e(jI,ogo),e(Th,rgo),e(k,tgo),e(k,Mh),e(Mh,Kse),e(Kse,ago),e(Mh,ngo),e(Mh,DI),e(DI,sgo),e(Mh,lgo),e(k,igo),e(k,Ns),e(Ns,Zse),e(Zse,dgo),e(Ns,cgo),e(Ns,GI),e(GI,fgo),e(Ns,mgo),e(Ns,OI),e(OI,ggo),e(Ns,hgo),e(k,pgo),e(k,qs),e(qs,ele),e(ele,ugo),e(qs,_go),e(qs,VI),e(VI,bgo),e(qs,vgo),e(qs,XI),e(XI,Fgo),e(qs,Tgo),e(k,Mgo),e(k,js),e(js,ole),e(ole,Ego),e(js,Cgo),e(js,zI),e(zI,wgo),e(js,Ago),e(js,WI),e(WI,Lgo),e(js,ygo),e(k,xgo),e(k,Ds),e(Ds,rle),e(rle,$go),e(Ds,kgo),e(Ds,QI),e(QI,Sgo),e(Ds,Rgo),e(Ds,HI),e(HI,Pgo),e(Ds,Bgo),e(Ar,Igo),M(Eh,Ar,null),e(Ao,Ngo),e(Ao,Ch),M(BA,Ch,null),e(Ch,qgo),e(Ch,tle),e(tle,jgo),b(f,vGe,_),b(f,ki,_),e(ki,wh),e(wh,ale),M(IA,ale,null),e(ki,Dgo),e(ki,nle),e(nle,Ggo),b(f,FGe,_),b(f,Lo,_),M(NA,Lo,null),e(Lo,Ogo),e(Lo,qA),e(qA,Vgo),e(qA,UI),e(UI,Xgo),e(qA,zgo),e(Lo,Wgo),e(Lo,jA),e(jA,Qgo),e(jA,sle),e(sle,Hgo),e(jA,Ugo),e(Lo,Jgo),e(Lo,He),M(DA,He,null),e(He,Ygo),e(He,lle),e(lle,Kgo),e(He,Zgo),e(He,ka),e(ka,eho),e(ka,ile),e(ile,oho),e(ka,rho),e(ka,dle),e(dle,tho),e(ka,aho),e(ka,cle),e(cle,nho),e(ka,sho),e(He,lho),e(He,Y),e(Y,Ah),e(Ah,fle),e(fle,iho),e(Ah,dho),e(Ah,JI),e(JI,cho),e(Ah,fho),e(Y,mho),e(Y,Lh),e(Lh,mle),e(mle,gho),e(Lh,hho),e(Lh,YI),e(YI,pho),e(Lh,uho),e(Y,_ho),e(Y,yh),e(yh,gle),e(gle,bho),e(yh,vho),e(yh,KI),e(KI,Fho),e(yh,Tho),e(Y,Mho),e(Y,xh),e(xh,hle),e(hle,Eho),e(xh,Cho),e(xh,ZI),e(ZI,who),e(xh,Aho),e(Y,Lho),e(Y,$h),e($h,ple),e(ple,yho),e($h,xho),e($h,eN),e(eN,$ho),e($h,kho),e(Y,Sho),e(Y,kh),e(kh,ule),e(ule,Rho),e(kh,Pho),e(kh,oN),e(oN,Bho),e(kh,Iho),e(Y,Nho),e(Y,Sh),e(Sh,_le),e(_le,qho),e(Sh,jho),e(Sh,rN),e(rN,Dho),e(Sh,Gho),e(Y,Oho),e(Y,Rh),e(Rh,ble),e(ble,Vho),e(Rh,Xho),e(Rh,tN),e(tN,zho),e(Rh,Who),e(Y,Qho),e(Y,Ph),e(Ph,vle),e(vle,Hho),e(Ph,Uho),e(Ph,aN),e(aN,Jho),e(Ph,Yho),e(Y,Kho),e(Y,Bh),e(Bh,Fle),e(Fle,Zho),e(Bh,epo),e(Bh,nN),e(nN,opo),e(Bh,rpo),e(Y,tpo),e(Y,Ih),e(Ih,Tle),e(Tle,apo),e(Ih,npo),e(Ih,sN),e(sN,spo),e(Ih,lpo),e(Y,ipo),e(Y,Nh),e(Nh,Mle),e(Mle,dpo),e(Nh,cpo),e(Nh,lN),e(lN,fpo),e(Nh,mpo),e(Y,gpo),e(Y,qh),e(qh,Ele),e(Ele,hpo),e(qh,ppo),e(qh,iN),e(iN,upo),e(qh,_po),e(Y,bpo),e(Y,jh),e(jh,Cle),e(Cle,vpo),e(jh,Fpo),e(jh,dN),e(dN,Tpo),e(jh,Mpo),e(Y,Epo),e(Y,Dh),e(Dh,wle),e(wle,Cpo),e(Dh,wpo),e(Dh,cN),e(cN,Apo),e(Dh,Lpo),e(Y,ypo),e(Y,Gh),e(Gh,Ale),e(Ale,xpo),e(Gh,$po),e(Gh,fN),e(fN,kpo),e(Gh,Spo),e(Y,Rpo),e(Y,Oh),e(Oh,Lle),e(Lle,Ppo),e(Oh,Bpo),e(Oh,mN),e(mN,Ipo),e(Oh,Npo),e(Y,qpo),e(Y,Vh),e(Vh,yle),e(yle,jpo),e(Vh,Dpo),e(Vh,gN),e(gN,Gpo),e(Vh,Opo),e(Y,Vpo),e(Y,Xh),e(Xh,xle),e(xle,Xpo),e(Xh,zpo),e(Xh,hN),e(hN,Wpo),e(Xh,Qpo),e(Y,Hpo),e(Y,zh),e(zh,$le),e($le,Upo),e(zh,Jpo),e(zh,pN),e(pN,Ypo),e(zh,Kpo),e(Y,Zpo),e(Y,Wh),e(Wh,kle),e(kle,euo),e(Wh,ouo),e(Wh,uN),e(uN,ruo),e(Wh,tuo),e(Y,auo),e(Y,Qh),e(Qh,Sle),e(Sle,nuo),e(Qh,suo),e(Qh,_N),e(_N,luo),e(Qh,iuo),e(Y,duo),e(Y,Hh),e(Hh,Rle),e(Rle,cuo),e(Hh,fuo),e(Hh,bN),e(bN,muo),e(Hh,guo),e(Y,huo),e(Y,Uh),e(Uh,Ple),e(Ple,puo),e(Uh,uuo),e(Uh,vN),e(vN,_uo),e(Uh,buo),e(Y,vuo),e(Y,Jh),e(Jh,Ble),e(Ble,Fuo),e(Jh,Tuo),e(Jh,FN),e(FN,Muo),e(Jh,Euo),e(Y,Cuo),e(Y,Yh),e(Yh,Ile),e(Ile,wuo),e(Yh,Auo),e(Yh,TN),e(TN,Luo),e(Yh,yuo),e(Y,xuo),e(Y,Kh),e(Kh,Nle),e(Nle,$uo),e(Kh,kuo),e(Kh,MN),e(MN,Suo),e(Kh,Ruo),e(Y,Puo),e(Y,Zh),e(Zh,qle),e(qle,Buo),e(Zh,Iuo),e(Zh,EN),e(EN,Nuo),e(Zh,quo),e(Y,juo),e(Y,ep),e(ep,jle),e(jle,Duo),e(ep,Guo),e(ep,CN),e(CN,Ouo),e(ep,Vuo),e(Y,Xuo),e(Y,op),e(op,Dle),e(Dle,zuo),e(op,Wuo),e(op,wN),e(wN,Quo),e(op,Huo),e(Y,Uuo),e(Y,rp),e(rp,Gle),e(Gle,Juo),e(rp,Yuo),e(rp,AN),e(AN,Kuo),e(rp,Zuo),e(Y,e_o),e(Y,tp),e(tp,Ole),e(Ole,o_o),e(tp,r_o),e(tp,LN),e(LN,t_o),e(tp,a_o),e(He,n_o),M(ap,He,null),e(He,s_o),M(np,He,null),e(Lo,l_o),e(Lo,sp),M(GA,sp,null),e(sp,i_o),e(sp,Vle),e(Vle,d_o),b(f,TGe,_),b(f,Si,_),e(Si,lp),e(lp,Xle),M(OA,Xle,null),e(Si,c_o),e(Si,zle),e(zle,f_o),b(f,MGe,_),b(f,yo,_),M(VA,yo,null),e(yo,m_o),e(yo,XA),e(XA,g_o),e(XA,yN),e(yN,h_o),e(XA,p_o),e(yo,u_o),e(yo,zA),e(zA,__o),e(zA,Wle),e(Wle,b_o),e(zA,v_o),e(yo,F_o),e(yo,Ue),M(WA,Ue,null),e(Ue,T_o),e(Ue,Qle),e(Qle,M_o),e(Ue,E_o),e(Ue,Ri),e(Ri,C_o),e(Ri,Hle),e(Hle,w_o),e(Ri,A_o),e(Ri,Ule),e(Ule,L_o),e(Ri,y_o),e(Ue,x_o),e(Ue,he),e(he,ip),e(ip,Jle),e(Jle,$_o),e(ip,k_o),e(ip,xN),e(xN,S_o),e(ip,R_o),e(he,P_o),e(he,dp),e(dp,Yle),e(Yle,B_o),e(dp,I_o),e(dp,Kle),e(Kle,N_o),e(dp,q_o),e(he,j_o),e(he,cp),e(cp,Zle),e(Zle,D_o),e(cp,G_o),e(cp,$N),e($N,O_o),e(cp,V_o),e(he,X_o),e(he,fp),e(fp,eie),e(eie,z_o),e(fp,W_o),e(fp,kN),e(kN,Q_o),e(fp,H_o),e(he,U_o),e(he,mp),e(mp,oie),e(oie,J_o),e(mp,Y_o),e(mp,SN),e(SN,K_o),e(mp,Z_o),e(he,e2o),e(he,gp),e(gp,rie),e(rie,o2o),e(gp,r2o),e(gp,RN),e(RN,t2o),e(gp,a2o),e(he,n2o),e(he,hp),e(hp,tie),e(tie,s2o),e(hp,l2o),e(hp,PN),e(PN,i2o),e(hp,d2o),e(he,c2o),e(he,pp),e(pp,aie),e(aie,f2o),e(pp,m2o),e(pp,BN),e(BN,g2o),e(pp,h2o),e(he,p2o),e(he,up),e(up,nie),e(nie,u2o),e(up,_2o),e(up,IN),e(IN,b2o),e(up,v2o),e(he,F2o),e(he,_p),e(_p,sie),e(sie,T2o),e(_p,M2o),e(_p,NN),e(NN,E2o),e(_p,C2o),e(he,w2o),e(he,bp),e(bp,lie),e(lie,A2o),e(bp,L2o),e(bp,qN),e(qN,y2o),e(bp,x2o),e(he,$2o),e(he,vp),e(vp,iie),e(iie,k2o),e(vp,S2o),e(vp,jN),e(jN,R2o),e(vp,P2o),e(he,B2o),e(he,Fp),e(Fp,die),e(die,I2o),e(Fp,N2o),e(Fp,DN),e(DN,q2o),e(Fp,j2o),e(he,D2o),e(he,Tp),e(Tp,cie),e(cie,G2o),e(Tp,O2o),e(Tp,GN),e(GN,V2o),e(Tp,X2o),e(he,z2o),e(he,Mp),e(Mp,fie),e(fie,W2o),e(Mp,Q2o),e(Mp,ON),e(ON,H2o),e(Mp,U2o),e(he,J2o),e(he,Ep),e(Ep,mie),e(mie,Y2o),e(Ep,K2o),e(Ep,VN),e(VN,Z2o),e(Ep,e1o),e(he,o1o),e(he,Cp),e(Cp,gie),e(gie,r1o),e(Cp,t1o),e(Cp,XN),e(XN,a1o),e(Cp,n1o),e(Ue,s1o),M(wp,Ue,null),e(Ue,l1o),M(Ap,Ue,null),e(yo,i1o),e(yo,Lp),M(QA,Lp,null),e(Lp,d1o),e(Lp,hie),e(hie,c1o),b(f,EGe,_),b(f,Pi,_),e(Pi,yp),e(yp,pie),M(HA,pie,null),e(Pi,f1o),e(Pi,uie),e(uie,m1o),b(f,CGe,_),b(f,xo,_),M(UA,xo,null),e(xo,g1o),e(xo,Bi),e(Bi,h1o),e(Bi,zN),e(zN,p1o),e(Bi,u1o),e(Bi,WN),e(WN,_1o),e(Bi,b1o),e(xo,v1o),e(xo,JA),e(JA,F1o),e(JA,_ie),e(_ie,T1o),e(JA,M1o),e(xo,E1o),e(xo,nt),M(YA,nt,null),e(nt,C1o),e(nt,bie),e(bie,w1o),e(nt,A1o),e(nt,Ii),e(Ii,L1o),e(Ii,vie),e(vie,y1o),e(Ii,x1o),e(Ii,QN),e(QN,$1o),e(Ii,k1o),e(nt,S1o),M(xp,nt,null),e(xo,R1o),e(xo,Je),M(KA,Je,null),e(Je,P1o),e(Je,Fie),e(Fie,B1o),e(Je,I1o),e(Je,Sa),e(Sa,N1o),e(Sa,Tie),e(Tie,q1o),e(Sa,j1o),e(Sa,Mie),e(Mie,D1o),e(Sa,G1o),e(Sa,Eie),e(Eie,O1o),e(Sa,V1o),e(Je,X1o),e(Je,y),e(y,$p),e($p,Cie),e(Cie,z1o),e($p,W1o),e($p,HN),e(HN,Q1o),e($p,H1o),e(y,U1o),e(y,kp),e(kp,wie),e(wie,J1o),e(kp,Y1o),e(kp,UN),e(UN,K1o),e(kp,Z1o),e(y,ebo),e(y,Sp),e(Sp,Aie),e(Aie,obo),e(Sp,rbo),e(Sp,JN),e(JN,tbo),e(Sp,abo),e(y,nbo),e(y,Rp),e(Rp,Lie),e(Lie,sbo),e(Rp,lbo),e(Rp,YN),e(YN,ibo),e(Rp,dbo),e(y,cbo),e(y,Pp),e(Pp,yie),e(yie,fbo),e(Pp,mbo),e(Pp,KN),e(KN,gbo),e(Pp,hbo),e(y,pbo),e(y,Bp),e(Bp,xie),e(xie,ubo),e(Bp,_bo),e(Bp,ZN),e(ZN,bbo),e(Bp,vbo),e(y,Fbo),e(y,Ip),e(Ip,$ie),e($ie,Tbo),e(Ip,Mbo),e(Ip,eq),e(eq,Ebo),e(Ip,Cbo),e(y,wbo),e(y,Np),e(Np,kie),e(kie,Abo),e(Np,Lbo),e(Np,oq),e(oq,ybo),e(Np,xbo),e(y,$bo),e(y,qp),e(qp,Sie),e(Sie,kbo),e(qp,Sbo),e(qp,rq),e(rq,Rbo),e(qp,Pbo),e(y,Bbo),e(y,jp),e(jp,Rie),e(Rie,Ibo),e(jp,Nbo),e(jp,tq),e(tq,qbo),e(jp,jbo),e(y,Dbo),e(y,Dp),e(Dp,Pie),e(Pie,Gbo),e(Dp,Obo),e(Dp,aq),e(aq,Vbo),e(Dp,Xbo),e(y,zbo),e(y,Gp),e(Gp,Bie),e(Bie,Wbo),e(Gp,Qbo),e(Gp,nq),e(nq,Hbo),e(Gp,Ubo),e(y,Jbo),e(y,Op),e(Op,Iie),e(Iie,Ybo),e(Op,Kbo),e(Op,sq),e(sq,Zbo),e(Op,evo),e(y,ovo),e(y,Vp),e(Vp,Nie),e(Nie,rvo),e(Vp,tvo),e(Vp,lq),e(lq,avo),e(Vp,nvo),e(y,svo),e(y,Xp),e(Xp,qie),e(qie,lvo),e(Xp,ivo),e(Xp,iq),e(iq,dvo),e(Xp,cvo),e(y,fvo),e(y,zp),e(zp,jie),e(jie,mvo),e(zp,gvo),e(zp,dq),e(dq,hvo),e(zp,pvo),e(y,uvo),e(y,Wp),e(Wp,Die),e(Die,_vo),e(Wp,bvo),e(Wp,cq),e(cq,vvo),e(Wp,Fvo),e(y,Tvo),e(y,Qp),e(Qp,Gie),e(Gie,Mvo),e(Qp,Evo),e(Qp,fq),e(fq,Cvo),e(Qp,wvo),e(y,Avo),e(y,Hp),e(Hp,Oie),e(Oie,Lvo),e(Hp,yvo),e(Hp,mq),e(mq,xvo),e(Hp,$vo),e(y,kvo),e(y,Up),e(Up,Vie),e(Vie,Svo),e(Up,Rvo),e(Up,gq),e(gq,Pvo),e(Up,Bvo),e(y,Ivo),e(y,Jp),e(Jp,Xie),e(Xie,Nvo),e(Jp,qvo),e(Jp,hq),e(hq,jvo),e(Jp,Dvo),e(y,Gvo),e(y,Yp),e(Yp,zie),e(zie,Ovo),e(Yp,Vvo),e(Yp,pq),e(pq,Xvo),e(Yp,zvo),e(y,Wvo),e(y,Kp),e(Kp,Wie),e(Wie,Qvo),e(Kp,Hvo),e(Kp,uq),e(uq,Uvo),e(Kp,Jvo),e(y,Yvo),e(y,Zp),e(Zp,Qie),e(Qie,Kvo),e(Zp,Zvo),e(Zp,_q),e(_q,eFo),e(Zp,oFo),e(y,rFo),e(y,eu),e(eu,Hie),e(Hie,tFo),e(eu,aFo),e(eu,bq),e(bq,nFo),e(eu,sFo),e(y,lFo),e(y,ou),e(ou,Uie),e(Uie,iFo),e(ou,dFo),e(ou,vq),e(vq,cFo),e(ou,fFo),e(y,mFo),e(y,ru),e(ru,Jie),e(Jie,gFo),e(ru,hFo),e(ru,Fq),e(Fq,pFo),e(ru,uFo),e(y,_Fo),e(y,tu),e(tu,Yie),e(Yie,bFo),e(tu,vFo),e(tu,Tq),e(Tq,FFo),e(tu,TFo),e(y,MFo),e(y,au),e(au,Kie),e(Kie,EFo),e(au,CFo),e(au,Mq),e(Mq,wFo),e(au,AFo),e(y,LFo),e(y,nu),e(nu,Zie),e(Zie,yFo),e(nu,xFo),e(nu,Eq),e(Eq,$Fo),e(nu,kFo),e(y,SFo),e(y,su),e(su,ede),e(ede,RFo),e(su,PFo),e(su,Cq),e(Cq,BFo),e(su,IFo),e(y,NFo),e(y,lu),e(lu,ode),e(ode,qFo),e(lu,jFo),e(lu,wq),e(wq,DFo),e(lu,GFo),e(y,OFo),e(y,iu),e(iu,rde),e(rde,VFo),e(iu,XFo),e(iu,Aq),e(Aq,zFo),e(iu,WFo),e(y,QFo),e(y,Gs),e(Gs,tde),e(tde,HFo),e(Gs,UFo),e(Gs,Lq),e(Lq,JFo),e(Gs,YFo),e(Gs,yq),e(yq,KFo),e(Gs,ZFo),e(y,e6o),e(y,du),e(du,ade),e(ade,o6o),e(du,r6o),e(du,xq),e(xq,t6o),e(du,a6o),e(y,n6o),e(y,cu),e(cu,nde),e(nde,s6o),e(cu,l6o),e(cu,$q),e($q,i6o),e(cu,d6o),e(y,c6o),e(y,fu),e(fu,sde),e(sde,f6o),e(fu,m6o),e(fu,kq),e(kq,g6o),e(fu,h6o),e(y,p6o),e(y,mu),e(mu,lde),e(lde,u6o),e(mu,_6o),e(mu,Sq),e(Sq,b6o),e(mu,v6o),e(y,F6o),e(y,gu),e(gu,ide),e(ide,T6o),e(gu,M6o),e(gu,Rq),e(Rq,E6o),e(gu,C6o),e(y,w6o),e(y,hu),e(hu,dde),e(dde,A6o),e(hu,L6o),e(hu,Pq),e(Pq,y6o),e(hu,x6o),e(y,$6o),e(y,pu),e(pu,cde),e(cde,k6o),e(pu,S6o),e(pu,Bq),e(Bq,R6o),e(pu,P6o),e(y,B6o),e(y,uu),e(uu,fde),e(fde,I6o),e(uu,N6o),e(uu,Iq),e(Iq,q6o),e(uu,j6o),e(y,D6o),e(y,_u),e(_u,mde),e(mde,G6o),e(_u,O6o),e(_u,gde),e(gde,V6o),e(_u,X6o),e(y,z6o),e(y,bu),e(bu,hde),e(hde,W6o),e(bu,Q6o),e(bu,Nq),e(Nq,H6o),e(bu,U6o),e(y,J6o),e(y,vu),e(vu,pde),e(pde,Y6o),e(vu,K6o),e(vu,qq),e(qq,Z6o),e(vu,eTo),e(y,oTo),e(y,Fu),e(Fu,ude),e(ude,rTo),e(Fu,tTo),e(Fu,jq),e(jq,aTo),e(Fu,nTo),e(y,sTo),e(y,Tu),e(Tu,_de),e(_de,lTo),e(Tu,iTo),e(Tu,Dq),e(Dq,dTo),e(Tu,cTo),e(y,fTo),e(y,Mu),e(Mu,bde),e(bde,mTo),e(Mu,gTo),e(Mu,Gq),e(Gq,hTo),e(Mu,pTo),e(y,uTo),e(y,Eu),e(Eu,vde),e(vde,_To),e(Eu,bTo),e(Eu,Oq),e(Oq,vTo),e(Eu,FTo),e(y,TTo),e(y,Cu),e(Cu,Fde),e(Fde,MTo),e(Cu,ETo),e(Cu,Vq),e(Vq,CTo),e(Cu,wTo),e(y,ATo),e(y,wu),e(wu,Tde),e(Tde,LTo),e(wu,yTo),e(wu,Xq),e(Xq,xTo),e(wu,$To),e(y,kTo),e(y,Au),e(Au,Mde),e(Mde,STo),e(Au,RTo),e(Au,zq),e(zq,PTo),e(Au,BTo),e(y,ITo),e(y,Lu),e(Lu,Ede),e(Ede,NTo),e(Lu,qTo),e(Lu,Wq),e(Wq,jTo),e(Lu,DTo),e(y,GTo),e(y,yu),e(yu,Cde),e(Cde,OTo),e(yu,VTo),e(yu,Qq),e(Qq,XTo),e(yu,zTo),e(y,WTo),e(y,xu),e(xu,wde),e(wde,QTo),e(xu,HTo),e(xu,Hq),e(Hq,UTo),e(xu,JTo),e(y,YTo),e(y,$u),e($u,Ade),e(Ade,KTo),e($u,ZTo),e($u,Uq),e(Uq,e7o),e($u,o7o),e(y,r7o),e(y,ku),e(ku,Lde),e(Lde,t7o),e(ku,a7o),e(ku,Jq),e(Jq,n7o),e(ku,s7o),e(y,l7o),e(y,Su),e(Su,yde),e(yde,i7o),e(Su,d7o),e(Su,Yq),e(Yq,c7o),e(Su,f7o),e(y,m7o),e(y,Ru),e(Ru,xde),e(xde,g7o),e(Ru,h7o),e(Ru,Kq),e(Kq,p7o),e(Ru,u7o),e(y,_7o),e(y,Pu),e(Pu,$de),e($de,b7o),e(Pu,v7o),e(Pu,Zq),e(Zq,F7o),e(Pu,T7o),e(y,M7o),e(y,Bu),e(Bu,kde),e(kde,E7o),e(Bu,C7o),e(Bu,ej),e(ej,w7o),e(Bu,A7o),e(y,L7o),e(y,Iu),e(Iu,Sde),e(Sde,y7o),e(Iu,x7o),e(Iu,oj),e(oj,$7o),e(Iu,k7o),e(y,S7o),e(y,Nu),e(Nu,Rde),e(Rde,R7o),e(Nu,P7o),e(Nu,rj),e(rj,B7o),e(Nu,I7o),e(y,N7o),e(y,qu),e(qu,Pde),e(Pde,q7o),e(qu,j7o),e(qu,tj),e(tj,D7o),e(qu,G7o),e(y,O7o),e(y,ju),e(ju,Bde),e(Bde,V7o),e(ju,X7o),e(ju,aj),e(aj,z7o),e(ju,W7o),e(y,Q7o),e(y,Du),e(Du,Ide),e(Ide,H7o),e(Du,U7o),e(Du,nj),e(nj,J7o),e(Du,Y7o),e(y,K7o),e(y,Gu),e(Gu,Nde),e(Nde,Z7o),e(Gu,e8o),e(Gu,sj),e(sj,o8o),e(Gu,r8o),e(y,t8o),e(y,Ou),e(Ou,qde),e(qde,a8o),e(Ou,n8o),e(Ou,lj),e(lj,s8o),e(Ou,l8o),e(y,i8o),e(y,Vu),e(Vu,jde),e(jde,d8o),e(Vu,c8o),e(Vu,ij),e(ij,f8o),e(Vu,m8o),e(y,g8o),e(y,Xu),e(Xu,Dde),e(Dde,h8o),e(Xu,p8o),e(Xu,dj),e(dj,u8o),e(Xu,_8o),e(y,b8o),e(y,zu),e(zu,Gde),e(Gde,v8o),e(zu,F8o),e(zu,cj),e(cj,T8o),e(zu,M8o),e(y,E8o),e(y,Wu),e(Wu,Ode),e(Ode,C8o),e(Wu,w8o),e(Wu,fj),e(fj,A8o),e(Wu,L8o),e(y,y8o),e(y,Qu),e(Qu,Vde),e(Vde,x8o),e(Qu,$8o),e(Qu,mj),e(mj,k8o),e(Qu,S8o),e(y,R8o),e(y,Hu),e(Hu,Xde),e(Xde,P8o),e(Hu,B8o),e(Hu,gj),e(gj,I8o),e(Hu,N8o),e(y,q8o),e(y,Uu),e(Uu,zde),e(zde,j8o),e(Uu,D8o),e(Uu,hj),e(hj,G8o),e(Uu,O8o),e(y,V8o),e(y,Ju),e(Ju,Wde),e(Wde,X8o),e(Ju,z8o),e(Ju,pj),e(pj,W8o),e(Ju,Q8o),e(y,H8o),e(y,Yu),e(Yu,Qde),e(Qde,U8o),e(Yu,J8o),e(Yu,uj),e(uj,Y8o),e(Yu,K8o),e(y,Z8o),e(y,Ku),e(Ku,Hde),e(Hde,eMo),e(Ku,oMo),e(Ku,_j),e(_j,rMo),e(Ku,tMo),e(y,aMo),e(y,Zu),e(Zu,Ude),e(Ude,nMo),e(Zu,sMo),e(Zu,bj),e(bj,lMo),e(Zu,iMo),e(y,dMo),e(y,e_),e(e_,Jde),e(Jde,cMo),e(e_,fMo),e(e_,vj),e(vj,mMo),e(e_,gMo),e(y,hMo),e(y,o_),e(o_,Yde),e(Yde,pMo),e(o_,uMo),e(o_,Fj),e(Fj,_Mo),e(o_,bMo),e(y,vMo),e(y,r_),e(r_,Kde),e(Kde,FMo),e(r_,TMo),e(r_,Tj),e(Tj,MMo),e(r_,EMo),e(y,CMo),e(y,t_),e(t_,Zde),e(Zde,wMo),e(t_,AMo),e(t_,Mj),e(Mj,LMo),e(t_,yMo),e(y,xMo),e(y,a_),e(a_,ece),e(ece,$Mo),e(a_,kMo),e(a_,Ej),e(Ej,SMo),e(a_,RMo),e(y,PMo),e(y,n_),e(n_,oce),e(oce,BMo),e(n_,IMo),e(n_,Cj),e(Cj,NMo),e(n_,qMo),e(y,jMo),e(y,s_),e(s_,rce),e(rce,DMo),e(s_,GMo),e(s_,wj),e(wj,OMo),e(s_,VMo),e(y,XMo),e(y,l_),e(l_,tce),e(tce,zMo),e(l_,WMo),e(l_,Aj),e(Aj,QMo),e(l_,HMo),e(y,UMo),e(y,i_),e(i_,ace),e(ace,JMo),e(i_,YMo),e(i_,Lj),e(Lj,KMo),e(i_,ZMo),e(y,eEo),e(y,d_),e(d_,nce),e(nce,oEo),e(d_,rEo),e(d_,yj),e(yj,tEo),e(d_,aEo),e(y,nEo),e(y,c_),e(c_,sce),e(sce,sEo),e(c_,lEo),e(c_,xj),e(xj,iEo),e(c_,dEo),e(y,cEo),e(y,f_),e(f_,lce),e(lce,fEo),e(f_,mEo),e(f_,$j),e($j,gEo),e(f_,hEo),e(y,pEo),e(y,m_),e(m_,ice),e(ice,uEo),e(m_,_Eo),e(m_,kj),e(kj,bEo),e(m_,vEo),e(y,FEo),e(y,g_),e(g_,dce),e(dce,TEo),e(g_,MEo),e(g_,Sj),e(Sj,EEo),e(g_,CEo),e(y,wEo),e(y,h_),e(h_,cce),e(cce,AEo),e(h_,LEo),e(h_,Rj),e(Rj,yEo),e(h_,xEo),e(y,$Eo),e(y,p_),e(p_,fce),e(fce,kEo),e(p_,SEo),e(p_,Pj),e(Pj,REo),e(p_,PEo),e(y,BEo),e(y,u_),e(u_,mce),e(mce,IEo),e(u_,NEo),e(u_,Bj),e(Bj,qEo),e(u_,jEo),e(y,DEo),e(y,__),e(__,gce),e(gce,GEo),e(__,OEo),e(__,Ij),e(Ij,VEo),e(__,XEo),e(y,zEo),e(y,b_),e(b_,hce),e(hce,WEo),e(b_,QEo),e(b_,Nj),e(Nj,HEo),e(b_,UEo),e(y,JEo),e(y,v_),e(v_,pce),e(pce,YEo),e(v_,KEo),e(v_,qj),e(qj,ZEo),e(v_,e4o),e(y,o4o),e(y,F_),e(F_,uce),e(uce,r4o),e(F_,t4o),e(F_,jj),e(jj,a4o),e(F_,n4o),e(y,s4o),e(y,T_),e(T_,_ce),e(_ce,l4o),e(T_,i4o),e(T_,Dj),e(Dj,d4o),e(T_,c4o),e(y,f4o),e(y,M_),e(M_,bce),e(bce,m4o),e(M_,g4o),e(M_,Gj),e(Gj,h4o),e(M_,p4o),e(y,u4o),e(y,E_),e(E_,vce),e(vce,_4o),e(E_,b4o),e(E_,Oj),e(Oj,v4o),e(E_,F4o),e(y,T4o),e(y,C_),e(C_,Fce),e(Fce,M4o),e(C_,E4o),e(C_,Vj),e(Vj,C4o),e(C_,w4o),e(y,A4o),e(y,w_),e(w_,Tce),e(Tce,L4o),e(w_,y4o),e(w_,Xj),e(Xj,x4o),e(w_,$4o),e(y,k4o),e(y,A_),e(A_,Mce),e(Mce,S4o),e(A_,R4o),e(A_,zj),e(zj,P4o),e(A_,B4o),e(y,I4o),e(y,L_),e(L_,Ece),e(Ece,N4o),e(L_,q4o),e(L_,Wj),e(Wj,j4o),e(L_,D4o),e(Je,G4o),e(Je,y_),e(y_,O4o),e(y_,Cce),e(Cce,V4o),e(y_,X4o),e(y_,wce),e(wce,z4o),e(Je,W4o),M(x_,Je,null),b(f,wGe,_),b(f,Ni,_),e(Ni,$_),e($_,Ace),M(ZA,Ace,null),e(Ni,Q4o),e(Ni,Lce),e(Lce,H4o),b(f,AGe,_),b(f,$o,_),M(eL,$o,null),e($o,U4o),e($o,qi),e(qi,J4o),e(qi,Qj),e(Qj,Y4o),e(qi,K4o),e(qi,Hj),e(Hj,Z4o),e(qi,eCo),e($o,oCo),e($o,oL),e(oL,rCo),e(oL,yce),e(yce,tCo),e(oL,aCo),e($o,nCo),e($o,st),M(rL,st,null),e(st,sCo),e(st,xce),e(xce,lCo),e(st,iCo),e(st,ji),e(ji,dCo),e(ji,$ce),e($ce,cCo),e(ji,fCo),e(ji,Uj),e(Uj,mCo),e(ji,gCo),e(st,hCo),M(k_,st,null),e($o,pCo),e($o,Ye),M(tL,Ye,null),e(Ye,uCo),e(Ye,kce),e(kce,_Co),e(Ye,bCo),e(Ye,Ra),e(Ra,vCo),e(Ra,Sce),e(Sce,FCo),e(Ra,TCo),e(Ra,Rce),e(Rce,MCo),e(Ra,ECo),e(Ra,Pce),e(Pce,CCo),e(Ra,wCo),e(Ye,ACo),e(Ye,G),e(G,S_),e(S_,Bce),e(Bce,LCo),e(S_,yCo),e(S_,Jj),e(Jj,xCo),e(S_,$Co),e(G,kCo),e(G,R_),e(R_,Ice),e(Ice,SCo),e(R_,RCo),e(R_,Yj),e(Yj,PCo),e(R_,BCo),e(G,ICo),e(G,P_),e(P_,Nce),e(Nce,NCo),e(P_,qCo),e(P_,Kj),e(Kj,jCo),e(P_,DCo),e(G,GCo),e(G,B_),e(B_,qce),e(qce,OCo),e(B_,VCo),e(B_,Zj),e(Zj,XCo),e(B_,zCo),e(G,WCo),e(G,I_),e(I_,jce),e(jce,QCo),e(I_,HCo),e(I_,eD),e(eD,UCo),e(I_,JCo),e(G,YCo),e(G,N_),e(N_,Dce),e(Dce,KCo),e(N_,ZCo),e(N_,oD),e(oD,e5o),e(N_,o5o),e(G,r5o),e(G,q_),e(q_,Gce),e(Gce,t5o),e(q_,a5o),e(q_,rD),e(rD,n5o),e(q_,s5o),e(G,l5o),e(G,j_),e(j_,Oce),e(Oce,i5o),e(j_,d5o),e(j_,tD),e(tD,c5o),e(j_,f5o),e(G,m5o),e(G,D_),e(D_,Vce),e(Vce,g5o),e(D_,h5o),e(D_,aD),e(aD,p5o),e(D_,u5o),e(G,_5o),e(G,G_),e(G_,Xce),e(Xce,b5o),e(G_,v5o),e(G_,nD),e(nD,F5o),e(G_,T5o),e(G,M5o),e(G,O_),e(O_,zce),e(zce,E5o),e(O_,C5o),e(O_,sD),e(sD,w5o),e(O_,A5o),e(G,L5o),e(G,V_),e(V_,Wce),e(Wce,y5o),e(V_,x5o),e(V_,lD),e(lD,$5o),e(V_,k5o),e(G,S5o),e(G,X_),e(X_,Qce),e(Qce,R5o),e(X_,P5o),e(X_,iD),e(iD,B5o),e(X_,I5o),e(G,N5o),e(G,z_),e(z_,Hce),e(Hce,q5o),e(z_,j5o),e(z_,dD),e(dD,D5o),e(z_,G5o),e(G,O5o),e(G,W_),e(W_,Uce),e(Uce,V5o),e(W_,X5o),e(W_,cD),e(cD,z5o),e(W_,W5o),e(G,Q5o),e(G,Q_),e(Q_,Jce),e(Jce,H5o),e(Q_,U5o),e(Q_,fD),e(fD,J5o),e(Q_,Y5o),e(G,K5o),e(G,H_),e(H_,Yce),e(Yce,Z5o),e(H_,e3o),e(H_,mD),e(mD,o3o),e(H_,r3o),e(G,t3o),e(G,U_),e(U_,Kce),e(Kce,a3o),e(U_,n3o),e(U_,gD),e(gD,s3o),e(U_,l3o),e(G,i3o),e(G,J_),e(J_,Zce),e(Zce,d3o),e(J_,c3o),e(J_,hD),e(hD,f3o),e(J_,m3o),e(G,g3o),e(G,Y_),e(Y_,efe),e(efe,h3o),e(Y_,p3o),e(Y_,pD),e(pD,u3o),e(Y_,_3o),e(G,b3o),e(G,K_),e(K_,ofe),e(ofe,v3o),e(K_,F3o),e(K_,uD),e(uD,T3o),e(K_,M3o),e(G,E3o),e(G,Z_),e(Z_,rfe),e(rfe,C3o),e(Z_,w3o),e(Z_,_D),e(_D,A3o),e(Z_,L3o),e(G,y3o),e(G,e2),e(e2,tfe),e(tfe,x3o),e(e2,$3o),e(e2,bD),e(bD,k3o),e(e2,S3o),e(G,R3o),e(G,o2),e(o2,afe),e(afe,P3o),e(o2,B3o),e(o2,vD),e(vD,I3o),e(o2,N3o),e(G,q3o),e(G,r2),e(r2,nfe),e(nfe,j3o),e(r2,D3o),e(r2,FD),e(FD,G3o),e(r2,O3o),e(G,V3o),e(G,t2),e(t2,sfe),e(sfe,X3o),e(t2,z3o),e(t2,TD),e(TD,W3o),e(t2,Q3o),e(G,H3o),e(G,a2),e(a2,lfe),e(lfe,U3o),e(a2,J3o),e(a2,MD),e(MD,Y3o),e(a2,K3o),e(G,Z3o),e(G,n2),e(n2,ife),e(ife,e0o),e(n2,o0o),e(n2,ED),e(ED,r0o),e(n2,t0o),e(G,a0o),e(G,s2),e(s2,dfe),e(dfe,n0o),e(s2,s0o),e(s2,CD),e(CD,l0o),e(s2,i0o),e(G,d0o),e(G,l2),e(l2,cfe),e(cfe,c0o),e(l2,f0o),e(l2,wD),e(wD,m0o),e(l2,g0o),e(G,h0o),e(G,i2),e(i2,ffe),e(ffe,p0o),e(i2,u0o),e(i2,AD),e(AD,_0o),e(i2,b0o),e(G,v0o),e(G,d2),e(d2,mfe),e(mfe,F0o),e(d2,T0o),e(d2,LD),e(LD,M0o),e(d2,E0o),e(G,C0o),e(G,c2),e(c2,gfe),e(gfe,w0o),e(c2,A0o),e(c2,yD),e(yD,L0o),e(c2,y0o),e(G,x0o),e(G,f2),e(f2,hfe),e(hfe,$0o),e(f2,k0o),e(f2,xD),e(xD,S0o),e(f2,R0o),e(G,P0o),e(G,m2),e(m2,pfe),e(pfe,B0o),e(m2,I0o),e(m2,$D),e($D,N0o),e(m2,q0o),e(G,j0o),e(G,g2),e(g2,ufe),e(ufe,D0o),e(g2,G0o),e(g2,kD),e(kD,O0o),e(g2,V0o),e(G,X0o),e(G,h2),e(h2,_fe),e(_fe,z0o),e(h2,W0o),e(h2,SD),e(SD,Q0o),e(h2,H0o),e(G,U0o),e(G,p2),e(p2,bfe),e(bfe,J0o),e(p2,Y0o),e(p2,RD),e(RD,K0o),e(p2,Z0o),e(G,ewo),e(G,u2),e(u2,vfe),e(vfe,owo),e(u2,rwo),e(u2,PD),e(PD,two),e(u2,awo),e(G,nwo),e(G,_2),e(_2,Ffe),e(Ffe,swo),e(_2,lwo),e(_2,BD),e(BD,iwo),e(_2,dwo),e(G,cwo),e(G,b2),e(b2,Tfe),e(Tfe,fwo),e(b2,mwo),e(b2,ID),e(ID,gwo),e(b2,hwo),e(G,pwo),e(G,v2),e(v2,Mfe),e(Mfe,uwo),e(v2,_wo),e(v2,ND),e(ND,bwo),e(v2,vwo),e(G,Fwo),e(G,F2),e(F2,Efe),e(Efe,Two),e(F2,Mwo),e(F2,qD),e(qD,Ewo),e(F2,Cwo),e(Ye,wwo),e(Ye,T2),e(T2,Awo),e(T2,Cfe),e(Cfe,Lwo),e(T2,ywo),e(T2,wfe),e(wfe,xwo),e(Ye,$wo),M(M2,Ye,null),b(f,LGe,_),b(f,Di,_),e(Di,E2),e(E2,Afe),M(aL,Afe,null),e(Di,kwo),e(Di,Lfe),e(Lfe,Swo),b(f,yGe,_),b(f,ko,_),M(nL,ko,null),e(ko,Rwo),e(ko,Gi),e(Gi,Pwo),e(Gi,jD),e(jD,Bwo),e(Gi,Iwo),e(Gi,DD),e(DD,Nwo),e(Gi,qwo),e(ko,jwo),e(ko,sL),e(sL,Dwo),e(sL,yfe),e(yfe,Gwo),e(sL,Owo),e(ko,Vwo),e(ko,lt),M(lL,lt,null),e(lt,Xwo),e(lt,xfe),e(xfe,zwo),e(lt,Wwo),e(lt,Oi),e(Oi,Qwo),e(Oi,$fe),e($fe,Hwo),e(Oi,Uwo),e(Oi,GD),e(GD,Jwo),e(Oi,Ywo),e(lt,Kwo),M(C2,lt,null),e(ko,Zwo),e(ko,Ke),M(iL,Ke,null),e(Ke,eAo),e(Ke,kfe),e(kfe,oAo),e(Ke,rAo),e(Ke,Pa),e(Pa,tAo),e(Pa,Sfe),e(Sfe,aAo),e(Pa,nAo),e(Pa,Rfe),e(Rfe,sAo),e(Pa,lAo),e(Pa,Pfe),e(Pfe,iAo),e(Pa,dAo),e(Ke,cAo),e(Ke,z),e(z,w2),e(w2,Bfe),e(Bfe,fAo),e(w2,mAo),e(w2,OD),e(OD,gAo),e(w2,hAo),e(z,pAo),e(z,A2),e(A2,Ife),e(Ife,uAo),e(A2,_Ao),e(A2,VD),e(VD,bAo),e(A2,vAo),e(z,FAo),e(z,L2),e(L2,Nfe),e(Nfe,TAo),e(L2,MAo),e(L2,XD),e(XD,EAo),e(L2,CAo),e(z,wAo),e(z,y2),e(y2,qfe),e(qfe,AAo),e(y2,LAo),e(y2,zD),e(zD,yAo),e(y2,xAo),e(z,$Ao),e(z,x2),e(x2,jfe),e(jfe,kAo),e(x2,SAo),e(x2,WD),e(WD,RAo),e(x2,PAo),e(z,BAo),e(z,$2),e($2,Dfe),e(Dfe,IAo),e($2,NAo),e($2,QD),e(QD,qAo),e($2,jAo),e(z,DAo),e(z,k2),e(k2,Gfe),e(Gfe,GAo),e(k2,OAo),e(k2,HD),e(HD,VAo),e(k2,XAo),e(z,zAo),e(z,S2),e(S2,Ofe),e(Ofe,WAo),e(S2,QAo),e(S2,UD),e(UD,HAo),e(S2,UAo),e(z,JAo),e(z,R2),e(R2,Vfe),e(Vfe,YAo),e(R2,KAo),e(R2,JD),e(JD,ZAo),e(R2,eLo),e(z,oLo),e(z,P2),e(P2,Xfe),e(Xfe,rLo),e(P2,tLo),e(P2,YD),e(YD,aLo),e(P2,nLo),e(z,sLo),e(z,B2),e(B2,zfe),e(zfe,lLo),e(B2,iLo),e(B2,KD),e(KD,dLo),e(B2,cLo),e(z,fLo),e(z,I2),e(I2,Wfe),e(Wfe,mLo),e(I2,gLo),e(I2,ZD),e(ZD,hLo),e(I2,pLo),e(z,uLo),e(z,N2),e(N2,Qfe),e(Qfe,_Lo),e(N2,bLo),e(N2,eG),e(eG,vLo),e(N2,FLo),e(z,TLo),e(z,q2),e(q2,Hfe),e(Hfe,MLo),e(q2,ELo),e(q2,oG),e(oG,CLo),e(q2,wLo),e(z,ALo),e(z,j2),e(j2,Ufe),e(Ufe,LLo),e(j2,yLo),e(j2,rG),e(rG,xLo),e(j2,$Lo),e(z,kLo),e(z,D2),e(D2,Jfe),e(Jfe,SLo),e(D2,RLo),e(D2,tG),e(tG,PLo),e(D2,BLo),e(z,ILo),e(z,G2),e(G2,Yfe),e(Yfe,NLo),e(G2,qLo),e(G2,aG),e(aG,jLo),e(G2,DLo),e(z,GLo),e(z,O2),e(O2,Kfe),e(Kfe,OLo),e(O2,VLo),e(O2,nG),e(nG,XLo),e(O2,zLo),e(z,WLo),e(z,V2),e(V2,Zfe),e(Zfe,QLo),e(V2,HLo),e(V2,sG),e(sG,ULo),e(V2,JLo),e(z,YLo),e(z,X2),e(X2,eme),e(eme,KLo),e(X2,ZLo),e(X2,lG),e(lG,eyo),e(X2,oyo),e(z,ryo),e(z,z2),e(z2,ome),e(ome,tyo),e(z2,ayo),e(z2,iG),e(iG,nyo),e(z2,syo),e(z,lyo),e(z,W2),e(W2,rme),e(rme,iyo),e(W2,dyo),e(W2,dG),e(dG,cyo),e(W2,fyo),e(z,myo),e(z,Q2),e(Q2,tme),e(tme,gyo),e(Q2,hyo),e(Q2,cG),e(cG,pyo),e(Q2,uyo),e(z,_yo),e(z,H2),e(H2,ame),e(ame,byo),e(H2,vyo),e(H2,fG),e(fG,Fyo),e(H2,Tyo),e(z,Myo),e(z,U2),e(U2,nme),e(nme,Eyo),e(U2,Cyo),e(U2,mG),e(mG,wyo),e(U2,Ayo),e(z,Lyo),e(z,J2),e(J2,sme),e(sme,yyo),e(J2,xyo),e(J2,gG),e(gG,$yo),e(J2,kyo),e(z,Syo),e(z,Y2),e(Y2,lme),e(lme,Ryo),e(Y2,Pyo),e(Y2,hG),e(hG,Byo),e(Y2,Iyo),e(z,Nyo),e(z,K2),e(K2,ime),e(ime,qyo),e(K2,jyo),e(K2,pG),e(pG,Dyo),e(K2,Gyo),e(z,Oyo),e(z,Z2),e(Z2,dme),e(dme,Vyo),e(Z2,Xyo),e(Z2,uG),e(uG,zyo),e(Z2,Wyo),e(z,Qyo),e(z,e1),e(e1,cme),e(cme,Hyo),e(e1,Uyo),e(e1,_G),e(_G,Jyo),e(e1,Yyo),e(z,Kyo),e(z,o1),e(o1,fme),e(fme,Zyo),e(o1,e9o),e(o1,bG),e(bG,o9o),e(o1,r9o),e(z,t9o),e(z,r1),e(r1,mme),e(mme,a9o),e(r1,n9o),e(r1,vG),e(vG,s9o),e(r1,l9o),e(z,i9o),e(z,t1),e(t1,gme),e(gme,d9o),e(t1,c9o),e(t1,FG),e(FG,f9o),e(t1,m9o),e(z,g9o),e(z,a1),e(a1,hme),e(hme,h9o),e(a1,p9o),e(a1,TG),e(TG,u9o),e(a1,_9o),e(z,b9o),e(z,n1),e(n1,pme),e(pme,v9o),e(n1,F9o),e(n1,MG),e(MG,T9o),e(n1,M9o),e(z,E9o),e(z,s1),e(s1,ume),e(ume,C9o),e(s1,w9o),e(s1,EG),e(EG,A9o),e(s1,L9o),e(z,y9o),e(z,l1),e(l1,_me),e(_me,x9o),e(l1,$9o),e(l1,CG),e(CG,k9o),e(l1,S9o),e(z,R9o),e(z,i1),e(i1,bme),e(bme,P9o),e(i1,B9o),e(i1,wG),e(wG,I9o),e(i1,N9o),e(Ke,q9o),e(Ke,d1),e(d1,j9o),e(d1,vme),e(vme,D9o),e(d1,G9o),e(d1,Fme),e(Fme,O9o),e(Ke,V9o),M(c1,Ke,null),b(f,xGe,_),b(f,Vi,_),e(Vi,f1),e(f1,Tme),M(dL,Tme,null),e(Vi,X9o),e(Vi,Mme),e(Mme,z9o),b(f,$Ge,_),b(f,So,_),M(cL,So,null),e(So,W9o),e(So,Xi),e(Xi,Q9o),e(Xi,AG),e(AG,H9o),e(Xi,U9o),e(Xi,LG),e(LG,J9o),e(Xi,Y9o),e(So,K9o),e(So,fL),e(fL,Z9o),e(fL,Eme),e(Eme,exo),e(fL,oxo),e(So,rxo),e(So,it),M(mL,it,null),e(it,txo),e(it,Cme),e(Cme,axo),e(it,nxo),e(it,zi),e(zi,sxo),e(zi,wme),e(wme,lxo),e(zi,ixo),e(zi,yG),e(yG,dxo),e(zi,cxo),e(it,fxo),M(m1,it,null),e(So,mxo),e(So,Ze),M(gL,Ze,null),e(Ze,gxo),e(Ze,Ame),e(Ame,hxo),e(Ze,pxo),e(Ze,Ba),e(Ba,uxo),e(Ba,Lme),e(Lme,_xo),e(Ba,bxo),e(Ba,yme),e(yme,vxo),e(Ba,Fxo),e(Ba,xme),e(xme,Txo),e(Ba,Mxo),e(Ze,Exo),e(Ze,Q),e(Q,g1),e(g1,$me),e($me,Cxo),e(g1,wxo),e(g1,xG),e(xG,Axo),e(g1,Lxo),e(Q,yxo),e(Q,h1),e(h1,kme),e(kme,xxo),e(h1,$xo),e(h1,$G),e($G,kxo),e(h1,Sxo),e(Q,Rxo),e(Q,p1),e(p1,Sme),e(Sme,Pxo),e(p1,Bxo),e(p1,kG),e(kG,Ixo),e(p1,Nxo),e(Q,qxo),e(Q,u1),e(u1,Rme),e(Rme,jxo),e(u1,Dxo),e(u1,SG),e(SG,Gxo),e(u1,Oxo),e(Q,Vxo),e(Q,_1),e(_1,Pme),e(Pme,Xxo),e(_1,zxo),e(_1,RG),e(RG,Wxo),e(_1,Qxo),e(Q,Hxo),e(Q,b1),e(b1,Bme),e(Bme,Uxo),e(b1,Jxo),e(b1,PG),e(PG,Yxo),e(b1,Kxo),e(Q,Zxo),e(Q,v1),e(v1,Ime),e(Ime,e$o),e(v1,o$o),e(v1,BG),e(BG,r$o),e(v1,t$o),e(Q,a$o),e(Q,F1),e(F1,Nme),e(Nme,n$o),e(F1,s$o),e(F1,IG),e(IG,l$o),e(F1,i$o),e(Q,d$o),e(Q,T1),e(T1,qme),e(qme,c$o),e(T1,f$o),e(T1,NG),e(NG,m$o),e(T1,g$o),e(Q,h$o),e(Q,M1),e(M1,jme),e(jme,p$o),e(M1,u$o),e(M1,qG),e(qG,_$o),e(M1,b$o),e(Q,v$o),e(Q,E1),e(E1,Dme),e(Dme,F$o),e(E1,T$o),e(E1,jG),e(jG,M$o),e(E1,E$o),e(Q,C$o),e(Q,C1),e(C1,Gme),e(Gme,w$o),e(C1,A$o),e(C1,DG),e(DG,L$o),e(C1,y$o),e(Q,x$o),e(Q,w1),e(w1,Ome),e(Ome,$$o),e(w1,k$o),e(w1,GG),e(GG,S$o),e(w1,R$o),e(Q,P$o),e(Q,A1),e(A1,Vme),e(Vme,B$o),e(A1,I$o),e(A1,OG),e(OG,N$o),e(A1,q$o),e(Q,j$o),e(Q,L1),e(L1,Xme),e(Xme,D$o),e(L1,G$o),e(L1,VG),e(VG,O$o),e(L1,V$o),e(Q,X$o),e(Q,y1),e(y1,zme),e(zme,z$o),e(y1,W$o),e(y1,XG),e(XG,Q$o),e(y1,H$o),e(Q,U$o),e(Q,x1),e(x1,Wme),e(Wme,J$o),e(x1,Y$o),e(x1,zG),e(zG,K$o),e(x1,Z$o),e(Q,eko),e(Q,$1),e($1,Qme),e(Qme,oko),e($1,rko),e($1,WG),e(WG,tko),e($1,ako),e(Q,nko),e(Q,k1),e(k1,Hme),e(Hme,sko),e(k1,lko),e(k1,QG),e(QG,iko),e(k1,dko),e(Q,cko),e(Q,S1),e(S1,Ume),e(Ume,fko),e(S1,mko),e(S1,HG),e(HG,gko),e(S1,hko),e(Q,pko),e(Q,R1),e(R1,Jme),e(Jme,uko),e(R1,_ko),e(R1,UG),e(UG,bko),e(R1,vko),e(Q,Fko),e(Q,P1),e(P1,Yme),e(Yme,Tko),e(P1,Mko),e(P1,JG),e(JG,Eko),e(P1,Cko),e(Q,wko),e(Q,B1),e(B1,Kme),e(Kme,Ako),e(B1,Lko),e(B1,YG),e(YG,yko),e(B1,xko),e(Q,$ko),e(Q,I1),e(I1,Zme),e(Zme,kko),e(I1,Sko),e(I1,KG),e(KG,Rko),e(I1,Pko),e(Q,Bko),e(Q,N1),e(N1,ege),e(ege,Iko),e(N1,Nko),e(N1,ZG),e(ZG,qko),e(N1,jko),e(Q,Dko),e(Q,q1),e(q1,oge),e(oge,Gko),e(q1,Oko),e(q1,eO),e(eO,Vko),e(q1,Xko),e(Q,zko),e(Q,j1),e(j1,rge),e(rge,Wko),e(j1,Qko),e(j1,oO),e(oO,Hko),e(j1,Uko),e(Q,Jko),e(Q,D1),e(D1,tge),e(tge,Yko),e(D1,Kko),e(D1,rO),e(rO,Zko),e(D1,eSo),e(Q,oSo),e(Q,G1),e(G1,age),e(age,rSo),e(G1,tSo),e(G1,tO),e(tO,aSo),e(G1,nSo),e(Q,sSo),e(Q,O1),e(O1,nge),e(nge,lSo),e(O1,iSo),e(O1,aO),e(aO,dSo),e(O1,cSo),e(Q,fSo),e(Q,V1),e(V1,sge),e(sge,mSo),e(V1,gSo),e(V1,nO),e(nO,hSo),e(V1,pSo),e(Q,uSo),e(Q,X1),e(X1,lge),e(lge,_So),e(X1,bSo),e(X1,ige),e(ige,vSo),e(X1,FSo),e(Q,TSo),e(Q,z1),e(z1,dge),e(dge,MSo),e(z1,ESo),e(z1,sO),e(sO,CSo),e(z1,wSo),e(Q,ASo),e(Q,W1),e(W1,cge),e(cge,LSo),e(W1,ySo),e(W1,lO),e(lO,xSo),e(W1,$So),e(Q,kSo),e(Q,Q1),e(Q1,fge),e(fge,SSo),e(Q1,RSo),e(Q1,iO),e(iO,PSo),e(Q1,BSo),e(Q,ISo),e(Q,H1),e(H1,mge),e(mge,NSo),e(H1,qSo),e(H1,dO),e(dO,jSo),e(H1,DSo),e(Ze,GSo),e(Ze,U1),e(U1,OSo),e(U1,gge),e(gge,VSo),e(U1,XSo),e(U1,hge),e(hge,zSo),e(Ze,WSo),M(J1,Ze,null),b(f,kGe,_),b(f,Wi,_),e(Wi,Y1),e(Y1,pge),M(hL,pge,null),e(Wi,QSo),e(Wi,uge),e(uge,HSo),b(f,SGe,_),b(f,Ro,_),M(pL,Ro,null),e(Ro,USo),e(Ro,Qi),e(Qi,JSo),e(Qi,cO),e(cO,YSo),e(Qi,KSo),e(Qi,fO),e(fO,ZSo),e(Qi,eRo),e(Ro,oRo),e(Ro,uL),e(uL,rRo),e(uL,_ge),e(_ge,tRo),e(uL,aRo),e(Ro,nRo),e(Ro,dt),M(_L,dt,null),e(dt,sRo),e(dt,bge),e(bge,lRo),e(dt,iRo),e(dt,Hi),e(Hi,dRo),e(Hi,vge),e(vge,cRo),e(Hi,fRo),e(Hi,mO),e(mO,mRo),e(Hi,gRo),e(dt,hRo),M(K1,dt,null),e(Ro,pRo),e(Ro,eo),M(bL,eo,null),e(eo,uRo),e(eo,Fge),e(Fge,_Ro),e(eo,bRo),e(eo,Ia),e(Ia,vRo),e(Ia,Tge),e(Tge,FRo),e(Ia,TRo),e(Ia,Mge),e(Mge,MRo),e(Ia,ERo),e(Ia,Ege),e(Ege,CRo),e(Ia,wRo),e(eo,ARo),e(eo,pe),e(pe,Z1),e(Z1,Cge),e(Cge,LRo),e(Z1,yRo),e(Z1,gO),e(gO,xRo),e(Z1,$Ro),e(pe,kRo),e(pe,eb),e(eb,wge),e(wge,SRo),e(eb,RRo),e(eb,hO),e(hO,PRo),e(eb,BRo),e(pe,IRo),e(pe,ob),e(ob,Age),e(Age,NRo),e(ob,qRo),e(ob,pO),e(pO,jRo),e(ob,DRo),e(pe,GRo),e(pe,rb),e(rb,Lge),e(Lge,ORo),e(rb,VRo),e(rb,uO),e(uO,XRo),e(rb,zRo),e(pe,WRo),e(pe,tb),e(tb,yge),e(yge,QRo),e(tb,HRo),e(tb,_O),e(_O,URo),e(tb,JRo),e(pe,YRo),e(pe,ab),e(ab,xge),e(xge,KRo),e(ab,ZRo),e(ab,bO),e(bO,ePo),e(ab,oPo),e(pe,rPo),e(pe,nb),e(nb,$ge),e($ge,tPo),e(nb,aPo),e(nb,vO),e(vO,nPo),e(nb,sPo),e(pe,lPo),e(pe,sb),e(sb,kge),e(kge,iPo),e(sb,dPo),e(sb,FO),e(FO,cPo),e(sb,fPo),e(pe,mPo),e(pe,lb),e(lb,Sge),e(Sge,gPo),e(lb,hPo),e(lb,TO),e(TO,pPo),e(lb,uPo),e(pe,_Po),e(pe,ib),e(ib,Rge),e(Rge,bPo),e(ib,vPo),e(ib,MO),e(MO,FPo),e(ib,TPo),e(pe,MPo),e(pe,db),e(db,Pge),e(Pge,EPo),e(db,CPo),e(db,EO),e(EO,wPo),e(db,APo),e(pe,LPo),e(pe,cb),e(cb,Bge),e(Bge,yPo),e(cb,xPo),e(cb,CO),e(CO,$Po),e(cb,kPo),e(pe,SPo),e(pe,fb),e(fb,Ige),e(Ige,RPo),e(fb,PPo),e(fb,wO),e(wO,BPo),e(fb,IPo),e(pe,NPo),e(pe,mb),e(mb,Nge),e(Nge,qPo),e(mb,jPo),e(mb,AO),e(AO,DPo),e(mb,GPo),e(pe,OPo),e(pe,gb),e(gb,qge),e(qge,VPo),e(gb,XPo),e(gb,LO),e(LO,zPo),e(gb,WPo),e(pe,QPo),e(pe,hb),e(hb,jge),e(jge,HPo),e(hb,UPo),e(hb,yO),e(yO,JPo),e(hb,YPo),e(pe,KPo),e(pe,pb),e(pb,Dge),e(Dge,ZPo),e(pb,eBo),e(pb,xO),e(xO,oBo),e(pb,rBo),e(eo,tBo),e(eo,ub),e(ub,aBo),e(ub,Gge),e(Gge,nBo),e(ub,sBo),e(ub,Oge),e(Oge,lBo),e(eo,iBo),M(_b,eo,null),b(f,RGe,_),b(f,Ui,_),e(Ui,bb),e(bb,Vge),M(vL,Vge,null),e(Ui,dBo),e(Ui,Xge),e(Xge,cBo),b(f,PGe,_),b(f,Po,_),M(FL,Po,null),e(Po,fBo),e(Po,Ji),e(Ji,mBo),e(Ji,$O),e($O,gBo),e(Ji,hBo),e(Ji,kO),e(kO,pBo),e(Ji,uBo),e(Po,_Bo),e(Po,TL),e(TL,bBo),e(TL,zge),e(zge,vBo),e(TL,FBo),e(Po,TBo),e(Po,ct),M(ML,ct,null),e(ct,MBo),e(ct,Wge),e(Wge,EBo),e(ct,CBo),e(ct,Yi),e(Yi,wBo),e(Yi,Qge),e(Qge,ABo),e(Yi,LBo),e(Yi,SO),e(SO,yBo),e(Yi,xBo),e(ct,$Bo),M(vb,ct,null),e(Po,kBo),e(Po,oo),M(EL,oo,null),e(oo,SBo),e(oo,Hge),e(Hge,RBo),e(oo,PBo),e(oo,Na),e(Na,BBo),e(Na,Uge),e(Uge,IBo),e(Na,NBo),e(Na,Jge),e(Jge,qBo),e(Na,jBo),e(Na,Yge),e(Yge,DBo),e(Na,GBo),e(oo,OBo),e(oo,N),e(N,Fb),e(Fb,Kge),e(Kge,VBo),e(Fb,XBo),e(Fb,RO),e(RO,zBo),e(Fb,WBo),e(N,QBo),e(N,Tb),e(Tb,Zge),e(Zge,HBo),e(Tb,UBo),e(Tb,PO),e(PO,JBo),e(Tb,YBo),e(N,KBo),e(N,Mb),e(Mb,ehe),e(ehe,ZBo),e(Mb,eIo),e(Mb,BO),e(BO,oIo),e(Mb,rIo),e(N,tIo),e(N,Eb),e(Eb,ohe),e(ohe,aIo),e(Eb,nIo),e(Eb,IO),e(IO,sIo),e(Eb,lIo),e(N,iIo),e(N,Cb),e(Cb,rhe),e(rhe,dIo),e(Cb,cIo),e(Cb,NO),e(NO,fIo),e(Cb,mIo),e(N,gIo),e(N,wb),e(wb,the),e(the,hIo),e(wb,pIo),e(wb,qO),e(qO,uIo),e(wb,_Io),e(N,bIo),e(N,Ab),e(Ab,ahe),e(ahe,vIo),e(Ab,FIo),e(Ab,jO),e(jO,TIo),e(Ab,MIo),e(N,EIo),e(N,Lb),e(Lb,nhe),e(nhe,CIo),e(Lb,wIo),e(Lb,DO),e(DO,AIo),e(Lb,LIo),e(N,yIo),e(N,yb),e(yb,she),e(she,xIo),e(yb,$Io),e(yb,GO),e(GO,kIo),e(yb,SIo),e(N,RIo),e(N,xb),e(xb,lhe),e(lhe,PIo),e(xb,BIo),e(xb,OO),e(OO,IIo),e(xb,NIo),e(N,qIo),e(N,$b),e($b,ihe),e(ihe,jIo),e($b,DIo),e($b,VO),e(VO,GIo),e($b,OIo),e(N,VIo),e(N,kb),e(kb,dhe),e(dhe,XIo),e(kb,zIo),e(kb,XO),e(XO,WIo),e(kb,QIo),e(N,HIo),e(N,Sb),e(Sb,che),e(che,UIo),e(Sb,JIo),e(Sb,zO),e(zO,YIo),e(Sb,KIo),e(N,ZIo),e(N,Rb),e(Rb,fhe),e(fhe,eNo),e(Rb,oNo),e(Rb,WO),e(WO,rNo),e(Rb,tNo),e(N,aNo),e(N,Pb),e(Pb,mhe),e(mhe,nNo),e(Pb,sNo),e(Pb,QO),e(QO,lNo),e(Pb,iNo),e(N,dNo),e(N,Bb),e(Bb,ghe),e(ghe,cNo),e(Bb,fNo),e(Bb,HO),e(HO,mNo),e(Bb,gNo),e(N,hNo),e(N,Ib),e(Ib,hhe),e(hhe,pNo),e(Ib,uNo),e(Ib,UO),e(UO,_No),e(Ib,bNo),e(N,vNo),e(N,Nb),e(Nb,phe),e(phe,FNo),e(Nb,TNo),e(Nb,JO),e(JO,MNo),e(Nb,ENo),e(N,CNo),e(N,qb),e(qb,uhe),e(uhe,wNo),e(qb,ANo),e(qb,YO),e(YO,LNo),e(qb,yNo),e(N,xNo),e(N,jb),e(jb,_he),e(_he,$No),e(jb,kNo),e(jb,KO),e(KO,SNo),e(jb,RNo),e(N,PNo),e(N,Db),e(Db,bhe),e(bhe,BNo),e(Db,INo),e(Db,ZO),e(ZO,NNo),e(Db,qNo),e(N,jNo),e(N,Gb),e(Gb,vhe),e(vhe,DNo),e(Gb,GNo),e(Gb,eV),e(eV,ONo),e(Gb,VNo),e(N,XNo),e(N,Ob),e(Ob,Fhe),e(Fhe,zNo),e(Ob,WNo),e(Ob,oV),e(oV,QNo),e(Ob,HNo),e(N,UNo),e(N,Vb),e(Vb,The),e(The,JNo),e(Vb,YNo),e(Vb,rV),e(rV,KNo),e(Vb,ZNo),e(N,eqo),e(N,Xb),e(Xb,Mhe),e(Mhe,oqo),e(Xb,rqo),e(Xb,tV),e(tV,tqo),e(Xb,aqo),e(N,nqo),e(N,zb),e(zb,Ehe),e(Ehe,sqo),e(zb,lqo),e(zb,aV),e(aV,iqo),e(zb,dqo),e(N,cqo),e(N,Wb),e(Wb,Che),e(Che,fqo),e(Wb,mqo),e(Wb,nV),e(nV,gqo),e(Wb,hqo),e(N,pqo),e(N,Qb),e(Qb,whe),e(whe,uqo),e(Qb,_qo),e(Qb,sV),e(sV,bqo),e(Qb,vqo),e(N,Fqo),e(N,Hb),e(Hb,Ahe),e(Ahe,Tqo),e(Hb,Mqo),e(Hb,lV),e(lV,Eqo),e(Hb,Cqo),e(N,wqo),e(N,Ub),e(Ub,Lhe),e(Lhe,Aqo),e(Ub,Lqo),e(Ub,iV),e(iV,yqo),e(Ub,xqo),e(N,$qo),e(N,Jb),e(Jb,yhe),e(yhe,kqo),e(Jb,Sqo),e(Jb,dV),e(dV,Rqo),e(Jb,Pqo),e(N,Bqo),e(N,Yb),e(Yb,xhe),e(xhe,Iqo),e(Yb,Nqo),e(Yb,cV),e(cV,qqo),e(Yb,jqo),e(N,Dqo),e(N,Kb),e(Kb,$he),e($he,Gqo),e(Kb,Oqo),e(Kb,fV),e(fV,Vqo),e(Kb,Xqo),e(N,zqo),e(N,Zb),e(Zb,khe),e(khe,Wqo),e(Zb,Qqo),e(Zb,mV),e(mV,Hqo),e(Zb,Uqo),e(N,Jqo),e(N,ev),e(ev,She),e(She,Yqo),e(ev,Kqo),e(ev,gV),e(gV,Zqo),e(ev,ejo),e(N,ojo),e(N,ov),e(ov,Rhe),e(Rhe,rjo),e(ov,tjo),e(ov,hV),e(hV,ajo),e(ov,njo),e(N,sjo),e(N,rv),e(rv,Phe),e(Phe,ljo),e(rv,ijo),e(rv,pV),e(pV,djo),e(rv,cjo),e(N,fjo),e(N,tv),e(tv,Bhe),e(Bhe,mjo),e(tv,gjo),e(tv,uV),e(uV,hjo),e(tv,pjo),e(N,ujo),e(N,av),e(av,Ihe),e(Ihe,_jo),e(av,bjo),e(av,_V),e(_V,vjo),e(av,Fjo),e(N,Tjo),e(N,nv),e(nv,Nhe),e(Nhe,Mjo),e(nv,Ejo),e(nv,bV),e(bV,Cjo),e(nv,wjo),e(N,Ajo),e(N,sv),e(sv,qhe),e(qhe,Ljo),e(sv,yjo),e(sv,vV),e(vV,xjo),e(sv,$jo),e(N,kjo),e(N,lv),e(lv,jhe),e(jhe,Sjo),e(lv,Rjo),e(lv,FV),e(FV,Pjo),e(lv,Bjo),e(N,Ijo),e(N,iv),e(iv,Dhe),e(Dhe,Njo),e(iv,qjo),e(iv,TV),e(TV,jjo),e(iv,Djo),e(N,Gjo),e(N,dv),e(dv,Ghe),e(Ghe,Ojo),e(dv,Vjo),e(dv,MV),e(MV,Xjo),e(dv,zjo),e(N,Wjo),e(N,cv),e(cv,Ohe),e(Ohe,Qjo),e(cv,Hjo),e(cv,EV),e(EV,Ujo),e(cv,Jjo),e(N,Yjo),e(N,fv),e(fv,Vhe),e(Vhe,Kjo),e(fv,Zjo),e(fv,CV),e(CV,eDo),e(fv,oDo),e(N,rDo),e(N,mv),e(mv,Xhe),e(Xhe,tDo),e(mv,aDo),e(mv,wV),e(wV,nDo),e(mv,sDo),e(N,lDo),e(N,gv),e(gv,zhe),e(zhe,iDo),e(gv,dDo),e(gv,AV),e(AV,cDo),e(gv,fDo),e(oo,mDo),e(oo,hv),e(hv,gDo),e(hv,Whe),e(Whe,hDo),e(hv,pDo),e(hv,Qhe),e(Qhe,uDo),e(oo,_Do),M(pv,oo,null),b(f,BGe,_),b(f,Ki,_),e(Ki,uv),e(uv,Hhe),M(CL,Hhe,null),e(Ki,bDo),e(Ki,Uhe),e(Uhe,vDo),b(f,IGe,_),b(f,Bo,_),M(wL,Bo,null),e(Bo,FDo),e(Bo,Zi),e(Zi,TDo),e(Zi,LV),e(LV,MDo),e(Zi,EDo),e(Zi,yV),e(yV,CDo),e(Zi,wDo),e(Bo,ADo),e(Bo,AL),e(AL,LDo),e(AL,Jhe),e(Jhe,yDo),e(AL,xDo),e(Bo,$Do),e(Bo,ft),M(LL,ft,null),e(ft,kDo),e(ft,Yhe),e(Yhe,SDo),e(ft,RDo),e(ft,ed),e(ed,PDo),e(ed,Khe),e(Khe,BDo),e(ed,IDo),e(ed,xV),e(xV,NDo),e(ed,qDo),e(ft,jDo),M(_v,ft,null),e(Bo,DDo),e(Bo,ro),M(yL,ro,null),e(ro,GDo),e(ro,Zhe),e(Zhe,ODo),e(ro,VDo),e(ro,qa),e(qa,XDo),e(qa,epe),e(epe,zDo),e(qa,WDo),e(qa,ope),e(ope,QDo),e(qa,HDo),e(qa,rpe),e(rpe,UDo),e(qa,JDo),e(ro,YDo),e(ro,Z),e(Z,bv),e(bv,tpe),e(tpe,KDo),e(bv,ZDo),e(bv,$V),e($V,eGo),e(bv,oGo),e(Z,rGo),e(Z,vv),e(vv,ape),e(ape,tGo),e(vv,aGo),e(vv,kV),e(kV,nGo),e(vv,sGo),e(Z,lGo),e(Z,Fv),e(Fv,npe),e(npe,iGo),e(Fv,dGo),e(Fv,SV),e(SV,cGo),e(Fv,fGo),e(Z,mGo),e(Z,Tv),e(Tv,spe),e(spe,gGo),e(Tv,hGo),e(Tv,RV),e(RV,pGo),e(Tv,uGo),e(Z,_Go),e(Z,Mv),e(Mv,lpe),e(lpe,bGo),e(Mv,vGo),e(Mv,PV),e(PV,FGo),e(Mv,TGo),e(Z,MGo),e(Z,Ev),e(Ev,ipe),e(ipe,EGo),e(Ev,CGo),e(Ev,BV),e(BV,wGo),e(Ev,AGo),e(Z,LGo),e(Z,Cv),e(Cv,dpe),e(dpe,yGo),e(Cv,xGo),e(Cv,IV),e(IV,$Go),e(Cv,kGo),e(Z,SGo),e(Z,wv),e(wv,cpe),e(cpe,RGo),e(wv,PGo),e(wv,NV),e(NV,BGo),e(wv,IGo),e(Z,NGo),e(Z,Av),e(Av,fpe),e(fpe,qGo),e(Av,jGo),e(Av,qV),e(qV,DGo),e(Av,GGo),e(Z,OGo),e(Z,Lv),e(Lv,mpe),e(mpe,VGo),e(Lv,XGo),e(Lv,jV),e(jV,zGo),e(Lv,WGo),e(Z,QGo),e(Z,yv),e(yv,gpe),e(gpe,HGo),e(yv,UGo),e(yv,DV),e(DV,JGo),e(yv,YGo),e(Z,KGo),e(Z,xv),e(xv,hpe),e(hpe,ZGo),e(xv,eOo),e(xv,GV),e(GV,oOo),e(xv,rOo),e(Z,tOo),e(Z,$v),e($v,ppe),e(ppe,aOo),e($v,nOo),e($v,OV),e(OV,sOo),e($v,lOo),e(Z,iOo),e(Z,kv),e(kv,upe),e(upe,dOo),e(kv,cOo),e(kv,VV),e(VV,fOo),e(kv,mOo),e(Z,gOo),e(Z,Sv),e(Sv,_pe),e(_pe,hOo),e(Sv,pOo),e(Sv,XV),e(XV,uOo),e(Sv,_Oo),e(Z,bOo),e(Z,Rv),e(Rv,bpe),e(bpe,vOo),e(Rv,FOo),e(Rv,zV),e(zV,TOo),e(Rv,MOo),e(Z,EOo),e(Z,Pv),e(Pv,vpe),e(vpe,COo),e(Pv,wOo),e(Pv,WV),e(WV,AOo),e(Pv,LOo),e(Z,yOo),e(Z,Bv),e(Bv,Fpe),e(Fpe,xOo),e(Bv,$Oo),e(Bv,QV),e(QV,kOo),e(Bv,SOo),e(Z,ROo),e(Z,Iv),e(Iv,Tpe),e(Tpe,POo),e(Iv,BOo),e(Iv,HV),e(HV,IOo),e(Iv,NOo),e(Z,qOo),e(Z,Nv),e(Nv,Mpe),e(Mpe,jOo),e(Nv,DOo),e(Nv,UV),e(UV,GOo),e(Nv,OOo),e(Z,VOo),e(Z,qv),e(qv,Epe),e(Epe,XOo),e(qv,zOo),e(qv,JV),e(JV,WOo),e(qv,QOo),e(Z,HOo),e(Z,jv),e(jv,Cpe),e(Cpe,UOo),e(jv,JOo),e(jv,YV),e(YV,YOo),e(jv,KOo),e(Z,ZOo),e(Z,Dv),e(Dv,wpe),e(wpe,eVo),e(Dv,oVo),e(Dv,KV),e(KV,rVo),e(Dv,tVo),e(Z,aVo),e(Z,Gv),e(Gv,Ape),e(Ape,nVo),e(Gv,sVo),e(Gv,ZV),e(ZV,lVo),e(Gv,iVo),e(Z,dVo),e(Z,Ov),e(Ov,Lpe),e(Lpe,cVo),e(Ov,fVo),e(Ov,eX),e(eX,mVo),e(Ov,gVo),e(Z,hVo),e(Z,Vv),e(Vv,ype),e(ype,pVo),e(Vv,uVo),e(Vv,oX),e(oX,_Vo),e(Vv,bVo),e(Z,vVo),e(Z,Xv),e(Xv,xpe),e(xpe,FVo),e(Xv,TVo),e(Xv,rX),e(rX,MVo),e(Xv,EVo),e(Z,CVo),e(Z,zv),e(zv,$pe),e($pe,wVo),e(zv,AVo),e(zv,tX),e(tX,LVo),e(zv,yVo),e(Z,xVo),e(Z,Wv),e(Wv,kpe),e(kpe,$Vo),e(Wv,kVo),e(Wv,aX),e(aX,SVo),e(Wv,RVo),e(ro,PVo),e(ro,Qv),e(Qv,BVo),e(Qv,Spe),e(Spe,IVo),e(Qv,NVo),e(Qv,Rpe),e(Rpe,qVo),e(ro,jVo),M(Hv,ro,null),b(f,NGe,_),b(f,od,_),e(od,Uv),e(Uv,Ppe),M(xL,Ppe,null),e(od,DVo),e(od,Bpe),e(Bpe,GVo),b(f,qGe,_),b(f,Io,_),M($L,Io,null),e(Io,OVo),e(Io,rd),e(rd,VVo),e(rd,nX),e(nX,XVo),e(rd,zVo),e(rd,sX),e(sX,WVo),e(rd,QVo),e(Io,HVo),e(Io,kL),e(kL,UVo),e(kL,Ipe),e(Ipe,JVo),e(kL,YVo),e(Io,KVo),e(Io,mt),M(SL,mt,null),e(mt,ZVo),e(mt,Npe),e(Npe,eXo),e(mt,oXo),e(mt,td),e(td,rXo),e(td,qpe),e(qpe,tXo),e(td,aXo),e(td,lX),e(lX,nXo),e(td,sXo),e(mt,lXo),M(Jv,mt,null),e(Io,iXo),e(Io,to),M(RL,to,null),e(to,dXo),e(to,jpe),e(jpe,cXo),e(to,fXo),e(to,ja),e(ja,mXo),e(ja,Dpe),e(Dpe,gXo),e(ja,hXo),e(ja,Gpe),e(Gpe,pXo),e(ja,uXo),e(ja,Ope),e(Ope,_Xo),e(ja,bXo),e(to,vXo),e(to,Zr),e(Zr,Yv),e(Yv,Vpe),e(Vpe,FXo),e(Yv,TXo),e(Yv,iX),e(iX,MXo),e(Yv,EXo),e(Zr,CXo),e(Zr,Kv),e(Kv,Xpe),e(Xpe,wXo),e(Kv,AXo),e(Kv,dX),e(dX,LXo),e(Kv,yXo),e(Zr,xXo),e(Zr,Zv),e(Zv,zpe),e(zpe,$Xo),e(Zv,kXo),e(Zv,cX),e(cX,SXo),e(Zv,RXo),e(Zr,PXo),e(Zr,eF),e(eF,Wpe),e(Wpe,BXo),e(eF,IXo),e(eF,fX),e(fX,NXo),e(eF,qXo),e(Zr,jXo),e(Zr,oF),e(oF,Qpe),e(Qpe,DXo),e(oF,GXo),e(oF,mX),e(mX,OXo),e(oF,VXo),e(to,XXo),e(to,rF),e(rF,zXo),e(rF,Hpe),e(Hpe,WXo),e(rF,QXo),e(rF,Upe),e(Upe,HXo),e(to,UXo),M(tF,to,null),b(f,jGe,_),b(f,ad,_),e(ad,aF),e(aF,Jpe),M(PL,Jpe,null),e(ad,JXo),e(ad,Ype),e(Ype,YXo),b(f,DGe,_),b(f,No,_),M(BL,No,null),e(No,KXo),e(No,nd),e(nd,ZXo),e(nd,gX),e(gX,ezo),e(nd,ozo),e(nd,hX),e(hX,rzo),e(nd,tzo),e(No,azo),e(No,IL),e(IL,nzo),e(IL,Kpe),e(Kpe,szo),e(IL,lzo),e(No,izo),e(No,gt),M(NL,gt,null),e(gt,dzo),e(gt,Zpe),e(Zpe,czo),e(gt,fzo),e(gt,sd),e(sd,mzo),e(sd,eue),e(eue,gzo),e(sd,hzo),e(sd,pX),e(pX,pzo),e(sd,uzo),e(gt,_zo),M(nF,gt,null),e(No,bzo),e(No,ao),M(qL,ao,null),e(ao,vzo),e(ao,oue),e(oue,Fzo),e(ao,Tzo),e(ao,Da),e(Da,Mzo),e(Da,rue),e(rue,Ezo),e(Da,Czo),e(Da,tue),e(tue,wzo),e(Da,Azo),e(Da,aue),e(aue,Lzo),e(Da,yzo),e(ao,xzo),e(ao,H),e(H,sF),e(sF,nue),e(nue,$zo),e(sF,kzo),e(sF,uX),e(uX,Szo),e(sF,Rzo),e(H,Pzo),e(H,lF),e(lF,sue),e(sue,Bzo),e(lF,Izo),e(lF,_X),e(_X,Nzo),e(lF,qzo),e(H,jzo),e(H,iF),e(iF,lue),e(lue,Dzo),e(iF,Gzo),e(iF,bX),e(bX,Ozo),e(iF,Vzo),e(H,Xzo),e(H,dF),e(dF,iue),e(iue,zzo),e(dF,Wzo),e(dF,vX),e(vX,Qzo),e(dF,Hzo),e(H,Uzo),e(H,cF),e(cF,due),e(due,Jzo),e(cF,Yzo),e(cF,FX),e(FX,Kzo),e(cF,Zzo),e(H,eWo),e(H,fF),e(fF,cue),e(cue,oWo),e(fF,rWo),e(fF,TX),e(TX,tWo),e(fF,aWo),e(H,nWo),e(H,mF),e(mF,fue),e(fue,sWo),e(mF,lWo),e(mF,MX),e(MX,iWo),e(mF,dWo),e(H,cWo),e(H,gF),e(gF,mue),e(mue,fWo),e(gF,mWo),e(gF,EX),e(EX,gWo),e(gF,hWo),e(H,pWo),e(H,hF),e(hF,gue),e(gue,uWo),e(hF,_Wo),e(hF,CX),e(CX,bWo),e(hF,vWo),e(H,FWo),e(H,pF),e(pF,hue),e(hue,TWo),e(pF,MWo),e(pF,wX),e(wX,EWo),e(pF,CWo),e(H,wWo),e(H,uF),e(uF,pue),e(pue,AWo),e(uF,LWo),e(uF,AX),e(AX,yWo),e(uF,xWo),e(H,$Wo),e(H,_F),e(_F,uue),e(uue,kWo),e(_F,SWo),e(_F,LX),e(LX,RWo),e(_F,PWo),e(H,BWo),e(H,bF),e(bF,_ue),e(_ue,IWo),e(bF,NWo),e(bF,yX),e(yX,qWo),e(bF,jWo),e(H,DWo),e(H,vF),e(vF,bue),e(bue,GWo),e(vF,OWo),e(vF,xX),e(xX,VWo),e(vF,XWo),e(H,zWo),e(H,FF),e(FF,vue),e(vue,WWo),e(FF,QWo),e(FF,$X),e($X,HWo),e(FF,UWo),e(H,JWo),e(H,TF),e(TF,Fue),e(Fue,YWo),e(TF,KWo),e(TF,kX),e(kX,ZWo),e(TF,eQo),e(H,oQo),e(H,MF),e(MF,Tue),e(Tue,rQo),e(MF,tQo),e(MF,SX),e(SX,aQo),e(MF,nQo),e(H,sQo),e(H,EF),e(EF,Mue),e(Mue,lQo),e(EF,iQo),e(EF,RX),e(RX,dQo),e(EF,cQo),e(H,fQo),e(H,CF),e(CF,Eue),e(Eue,mQo),e(CF,gQo),e(CF,PX),e(PX,hQo),e(CF,pQo),e(H,uQo),e(H,wF),e(wF,Cue),e(Cue,_Qo),e(wF,bQo),e(wF,BX),e(BX,vQo),e(wF,FQo),e(H,TQo),e(H,AF),e(AF,wue),e(wue,MQo),e(AF,EQo),e(AF,IX),e(IX,CQo),e(AF,wQo),e(H,AQo),e(H,LF),e(LF,Aue),e(Aue,LQo),e(LF,yQo),e(LF,NX),e(NX,xQo),e(LF,$Qo),e(H,kQo),e(H,yF),e(yF,Lue),e(Lue,SQo),e(yF,RQo),e(yF,qX),e(qX,PQo),e(yF,BQo),e(H,IQo),e(H,xF),e(xF,yue),e(yue,NQo),e(xF,qQo),e(xF,jX),e(jX,jQo),e(xF,DQo),e(H,GQo),e(H,$F),e($F,xue),e(xue,OQo),e($F,VQo),e($F,DX),e(DX,XQo),e($F,zQo),e(H,WQo),e(H,kF),e(kF,$ue),e($ue,QQo),e(kF,HQo),e(kF,GX),e(GX,UQo),e(kF,JQo),e(H,YQo),e(H,SF),e(SF,kue),e(kue,KQo),e(SF,ZQo),e(SF,OX),e(OX,eHo),e(SF,oHo),e(H,rHo),e(H,RF),e(RF,Sue),e(Sue,tHo),e(RF,aHo),e(RF,VX),e(VX,nHo),e(RF,sHo),e(H,lHo),e(H,PF),e(PF,Rue),e(Rue,iHo),e(PF,dHo),e(PF,XX),e(XX,cHo),e(PF,fHo),e(H,mHo),e(H,BF),e(BF,Pue),e(Pue,gHo),e(BF,hHo),e(BF,zX),e(zX,pHo),e(BF,uHo),e(H,_Ho),e(H,IF),e(IF,Bue),e(Bue,bHo),e(IF,vHo),e(IF,WX),e(WX,FHo),e(IF,THo),e(H,MHo),e(H,NF),e(NF,Iue),e(Iue,EHo),e(NF,CHo),e(NF,QX),e(QX,wHo),e(NF,AHo),e(H,LHo),e(H,qF),e(qF,Nue),e(Nue,yHo),e(qF,xHo),e(qF,HX),e(HX,$Ho),e(qF,kHo),e(H,SHo),e(H,jF),e(jF,que),e(que,RHo),e(jF,PHo),e(jF,UX),e(UX,BHo),e(jF,IHo),e(H,NHo),e(H,DF),e(DF,jue),e(jue,qHo),e(DF,jHo),e(DF,JX),e(JX,DHo),e(DF,GHo),e(ao,OHo),e(ao,GF),e(GF,VHo),e(GF,Due),e(Due,XHo),e(GF,zHo),e(GF,Gue),e(Gue,WHo),e(ao,QHo),M(OF,ao,null),b(f,GGe,_),b(f,ld,_),e(ld,VF),e(VF,Oue),M(jL,Oue,null),e(ld,HHo),e(ld,Vue),e(Vue,UHo),b(f,OGe,_),b(f,qo,_),M(DL,qo,null),e(qo,JHo),e(qo,id),e(id,YHo),e(id,YX),e(YX,KHo),e(id,ZHo),e(id,KX),e(KX,eUo),e(id,oUo),e(qo,rUo),e(qo,GL),e(GL,tUo),e(GL,Xue),e(Xue,aUo),e(GL,nUo),e(qo,sUo),e(qo,ht),M(OL,ht,null),e(ht,lUo),e(ht,zue),e(zue,iUo),e(ht,dUo),e(ht,dd),e(dd,cUo),e(dd,Wue),e(Wue,fUo),e(dd,mUo),e(dd,ZX),e(ZX,gUo),e(dd,hUo),e(ht,pUo),M(XF,ht,null),e(qo,uUo),e(qo,no),M(VL,no,null),e(no,_Uo),e(no,Que),e(Que,bUo),e(no,vUo),e(no,Ga),e(Ga,FUo),e(Ga,Hue),e(Hue,TUo),e(Ga,MUo),e(Ga,Uue),e(Uue,EUo),e(Ga,CUo),e(Ga,Jue),e(Jue,wUo),e(Ga,AUo),e(no,LUo),e(no,V),e(V,zF),e(zF,Yue),e(Yue,yUo),e(zF,xUo),e(zF,ez),e(ez,$Uo),e(zF,kUo),e(V,SUo),e(V,WF),e(WF,Kue),e(Kue,RUo),e(WF,PUo),e(WF,oz),e(oz,BUo),e(WF,IUo),e(V,NUo),e(V,QF),e(QF,Zue),e(Zue,qUo),e(QF,jUo),e(QF,rz),e(rz,DUo),e(QF,GUo),e(V,OUo),e(V,HF),e(HF,e_e),e(e_e,VUo),e(HF,XUo),e(HF,tz),e(tz,zUo),e(HF,WUo),e(V,QUo),e(V,UF),e(UF,o_e),e(o_e,HUo),e(UF,UUo),e(UF,az),e(az,JUo),e(UF,YUo),e(V,KUo),e(V,JF),e(JF,r_e),e(r_e,ZUo),e(JF,eJo),e(JF,nz),e(nz,oJo),e(JF,rJo),e(V,tJo),e(V,YF),e(YF,t_e),e(t_e,aJo),e(YF,nJo),e(YF,sz),e(sz,sJo),e(YF,lJo),e(V,iJo),e(V,KF),e(KF,a_e),e(a_e,dJo),e(KF,cJo),e(KF,lz),e(lz,fJo),e(KF,mJo),e(V,gJo),e(V,ZF),e(ZF,n_e),e(n_e,hJo),e(ZF,pJo),e(ZF,iz),e(iz,uJo),e(ZF,_Jo),e(V,bJo),e(V,e6),e(e6,s_e),e(s_e,vJo),e(e6,FJo),e(e6,dz),e(dz,TJo),e(e6,MJo),e(V,EJo),e(V,o6),e(o6,l_e),e(l_e,CJo),e(o6,wJo),e(o6,cz),e(cz,AJo),e(o6,LJo),e(V,yJo),e(V,r6),e(r6,i_e),e(i_e,xJo),e(r6,$Jo),e(r6,fz),e(fz,kJo),e(r6,SJo),e(V,RJo),e(V,t6),e(t6,d_e),e(d_e,PJo),e(t6,BJo),e(t6,mz),e(mz,IJo),e(t6,NJo),e(V,qJo),e(V,a6),e(a6,c_e),e(c_e,jJo),e(a6,DJo),e(a6,gz),e(gz,GJo),e(a6,OJo),e(V,VJo),e(V,n6),e(n6,f_e),e(f_e,XJo),e(n6,zJo),e(n6,hz),e(hz,WJo),e(n6,QJo),e(V,HJo),e(V,s6),e(s6,m_e),e(m_e,UJo),e(s6,JJo),e(s6,pz),e(pz,YJo),e(s6,KJo),e(V,ZJo),e(V,l6),e(l6,g_e),e(g_e,eYo),e(l6,oYo),e(l6,uz),e(uz,rYo),e(l6,tYo),e(V,aYo),e(V,i6),e(i6,h_e),e(h_e,nYo),e(i6,sYo),e(i6,_z),e(_z,lYo),e(i6,iYo),e(V,dYo),e(V,d6),e(d6,p_e),e(p_e,cYo),e(d6,fYo),e(d6,bz),e(bz,mYo),e(d6,gYo),e(V,hYo),e(V,c6),e(c6,u_e),e(u_e,pYo),e(c6,uYo),e(c6,vz),e(vz,_Yo),e(c6,bYo),e(V,vYo),e(V,f6),e(f6,__e),e(__e,FYo),e(f6,TYo),e(f6,Fz),e(Fz,MYo),e(f6,EYo),e(V,CYo),e(V,m6),e(m6,b_e),e(b_e,wYo),e(m6,AYo),e(m6,Tz),e(Tz,LYo),e(m6,yYo),e(V,xYo),e(V,g6),e(g6,v_e),e(v_e,$Yo),e(g6,kYo),e(g6,Mz),e(Mz,SYo),e(g6,RYo),e(V,PYo),e(V,h6),e(h6,F_e),e(F_e,BYo),e(h6,IYo),e(h6,Ez),e(Ez,NYo),e(h6,qYo),e(V,jYo),e(V,p6),e(p6,T_e),e(T_e,DYo),e(p6,GYo),e(p6,Cz),e(Cz,OYo),e(p6,VYo),e(V,XYo),e(V,u6),e(u6,M_e),e(M_e,zYo),e(u6,WYo),e(u6,wz),e(wz,QYo),e(u6,HYo),e(V,UYo),e(V,_6),e(_6,E_e),e(E_e,JYo),e(_6,YYo),e(_6,Az),e(Az,KYo),e(_6,ZYo),e(V,eKo),e(V,b6),e(b6,C_e),e(C_e,oKo),e(b6,rKo),e(b6,Lz),e(Lz,tKo),e(b6,aKo),e(V,nKo),e(V,v6),e(v6,w_e),e(w_e,sKo),e(v6,lKo),e(v6,yz),e(yz,iKo),e(v6,dKo),e(V,cKo),e(V,F6),e(F6,A_e),e(A_e,fKo),e(F6,mKo),e(F6,xz),e(xz,gKo),e(F6,hKo),e(V,pKo),e(V,T6),e(T6,L_e),e(L_e,uKo),e(T6,_Ko),e(T6,$z),e($z,bKo),e(T6,vKo),e(V,FKo),e(V,M6),e(M6,y_e),e(y_e,TKo),e(M6,MKo),e(M6,kz),e(kz,EKo),e(M6,CKo),e(V,wKo),e(V,E6),e(E6,x_e),e(x_e,AKo),e(E6,LKo),e(E6,Sz),e(Sz,yKo),e(E6,xKo),e(V,$Ko),e(V,C6),e(C6,$_e),e($_e,kKo),e(C6,SKo),e(C6,Rz),e(Rz,RKo),e(C6,PKo),e(V,BKo),e(V,w6),e(w6,k_e),e(k_e,IKo),e(w6,NKo),e(w6,Pz),e(Pz,qKo),e(w6,jKo),e(V,DKo),e(V,A6),e(A6,S_e),e(S_e,GKo),e(A6,OKo),e(A6,Bz),e(Bz,VKo),e(A6,XKo),e(V,zKo),e(V,L6),e(L6,R_e),e(R_e,WKo),e(L6,QKo),e(L6,Iz),e(Iz,HKo),e(L6,UKo),e(V,JKo),e(V,y6),e(y6,P_e),e(P_e,YKo),e(y6,KKo),e(y6,Nz),e(Nz,ZKo),e(y6,eZo),e(V,oZo),e(V,x6),e(x6,B_e),e(B_e,rZo),e(x6,tZo),e(x6,qz),e(qz,aZo),e(x6,nZo),e(V,sZo),e(V,$6),e($6,I_e),e(I_e,lZo),e($6,iZo),e($6,jz),e(jz,dZo),e($6,cZo),e(no,fZo),e(no,k6),e(k6,mZo),e(k6,N_e),e(N_e,gZo),e(k6,hZo),e(k6,q_e),e(q_e,pZo),e(no,uZo),M(S6,no,null),b(f,VGe,_),b(f,cd,_),e(cd,R6),e(R6,j_e),M(XL,j_e,null),e(cd,_Zo),e(cd,D_e),e(D_e,bZo),b(f,XGe,_),b(f,jo,_),M(zL,jo,null),e(jo,vZo),e(jo,fd),e(fd,FZo),e(fd,Dz),e(Dz,TZo),e(fd,MZo),e(fd,Gz),e(Gz,EZo),e(fd,CZo),e(jo,wZo),e(jo,WL),e(WL,AZo),e(WL,G_e),e(G_e,LZo),e(WL,yZo),e(jo,xZo),e(jo,pt),M(QL,pt,null),e(pt,$Zo),e(pt,O_e),e(O_e,kZo),e(pt,SZo),e(pt,md),e(md,RZo),e(md,V_e),e(V_e,PZo),e(md,BZo),e(md,Oz),e(Oz,IZo),e(md,NZo),e(pt,qZo),M(P6,pt,null),e(jo,jZo),e(jo,so),M(HL,so,null),e(so,DZo),e(so,X_e),e(X_e,GZo),e(so,OZo),e(so,Oa),e(Oa,VZo),e(Oa,z_e),e(z_e,XZo),e(Oa,zZo),e(Oa,W_e),e(W_e,WZo),e(Oa,QZo),e(Oa,Q_e),e(Q_e,HZo),e(Oa,UZo),e(so,JZo),e(so,H_e),e(H_e,B6),e(B6,U_e),e(U_e,YZo),e(B6,KZo),e(B6,Vz),e(Vz,ZZo),e(B6,eer),e(so,oer),e(so,I6),e(I6,rer),e(I6,J_e),e(J_e,ter),e(I6,aer),e(I6,Y_e),e(Y_e,ner),e(so,ser),M(N6,so,null),b(f,zGe,_),b(f,gd,_),e(gd,q6),e(q6,K_e),M(UL,K_e,null),e(gd,ler),e(gd,Z_e),e(Z_e,ier),b(f,WGe,_),b(f,Do,_),M(JL,Do,null),e(Do,der),e(Do,hd),e(hd,cer),e(hd,Xz),e(Xz,fer),e(hd,mer),e(hd,zz),e(zz,ger),e(hd,her),e(Do,per),e(Do,YL),e(YL,uer),e(YL,e2e),e(e2e,_er),e(YL,ber),e(Do,ver),e(Do,ut),M(KL,ut,null),e(ut,Fer),e(ut,o2e),e(o2e,Ter),e(ut,Mer),e(ut,pd),e(pd,Eer),e(pd,r2e),e(r2e,Cer),e(pd,wer),e(pd,Wz),e(Wz,Aer),e(pd,Ler),e(ut,yer),M(j6,ut,null),e(Do,xer),e(Do,lo),M(ZL,lo,null),e(lo,$er),e(lo,t2e),e(t2e,ker),e(lo,Ser),e(lo,Va),e(Va,Rer),e(Va,a2e),e(a2e,Per),e(Va,Ber),e(Va,n2e),e(n2e,Ier),e(Va,Ner),e(Va,s2e),e(s2e,qer),e(Va,jer),e(lo,Der),e(lo,Fe),e(Fe,D6),e(D6,l2e),e(l2e,Ger),e(D6,Oer),e(D6,Qz),e(Qz,Ver),e(D6,Xer),e(Fe,zer),e(Fe,G6),e(G6,i2e),e(i2e,Wer),e(G6,Qer),e(G6,Hz),e(Hz,Her),e(G6,Uer),e(Fe,Jer),e(Fe,O6),e(O6,d2e),e(d2e,Yer),e(O6,Ker),e(O6,Uz),e(Uz,Zer),e(O6,eor),e(Fe,oor),e(Fe,V6),e(V6,c2e),e(c2e,ror),e(V6,tor),e(V6,Jz),e(Jz,aor),e(V6,nor),e(Fe,sor),e(Fe,Os),e(Os,f2e),e(f2e,lor),e(Os,ior),e(Os,Yz),e(Yz,dor),e(Os,cor),e(Os,Kz),e(Kz,mor),e(Os,gor),e(Fe,hor),e(Fe,X6),e(X6,m2e),e(m2e,por),e(X6,uor),e(X6,Zz),e(Zz,_or),e(X6,bor),e(Fe,vor),e(Fe,Vs),e(Vs,g2e),e(g2e,For),e(Vs,Tor),e(Vs,eW),e(eW,Mor),e(Vs,Eor),e(Vs,oW),e(oW,Cor),e(Vs,wor),e(Fe,Aor),e(Fe,_t),e(_t,h2e),e(h2e,Lor),e(_t,yor),e(_t,rW),e(rW,xor),e(_t,$or),e(_t,tW),e(tW,kor),e(_t,Sor),e(_t,aW),e(aW,Ror),e(_t,Por),e(Fe,Bor),e(Fe,z6),e(z6,p2e),e(p2e,Ior),e(z6,Nor),e(z6,nW),e(nW,qor),e(z6,jor),e(Fe,Dor),e(Fe,W6),e(W6,u2e),e(u2e,Gor),e(W6,Oor),e(W6,sW),e(sW,Vor),e(W6,Xor),e(Fe,zor),e(Fe,Q6),e(Q6,_2e),e(_2e,Wor),e(Q6,Qor),e(Q6,lW),e(lW,Hor),e(Q6,Uor),e(Fe,Jor),e(Fe,H6),e(H6,b2e),e(b2e,Yor),e(H6,Kor),e(H6,iW),e(iW,Zor),e(H6,err),e(Fe,orr),e(Fe,U6),e(U6,v2e),e(v2e,rrr),e(U6,trr),e(U6,dW),e(dW,arr),e(U6,nrr),e(Fe,srr),e(Fe,J6),e(J6,F2e),e(F2e,lrr),e(J6,irr),e(J6,cW),e(cW,drr),e(J6,crr),e(Fe,frr),e(Fe,Y6),e(Y6,T2e),e(T2e,mrr),e(Y6,grr),e(Y6,fW),e(fW,hrr),e(Y6,prr),e(lo,urr),e(lo,K6),e(K6,_rr),e(K6,M2e),e(M2e,brr),e(K6,vrr),e(K6,E2e),e(E2e,Frr),e(lo,Trr),M(Z6,lo,null),b(f,QGe,_),b(f,ud,_),e(ud,eT),e(eT,C2e),M(ey,C2e,null),e(ud,Mrr),e(ud,w2e),e(w2e,Err),b(f,HGe,_),b(f,Go,_),M(oy,Go,null),e(Go,Crr),e(Go,_d),e(_d,wrr),e(_d,mW),e(mW,Arr),e(_d,Lrr),e(_d,gW),e(gW,yrr),e(_d,xrr),e(Go,$rr),e(Go,ry),e(ry,krr),e(ry,A2e),e(A2e,Srr),e(ry,Rrr),e(Go,Prr),e(Go,bt),M(ty,bt,null),e(bt,Brr),e(bt,L2e),e(L2e,Irr),e(bt,Nrr),e(bt,bd),e(bd,qrr),e(bd,y2e),e(y2e,jrr),e(bd,Drr),e(bd,hW),e(hW,Grr),e(bd,Orr),e(bt,Vrr),M(oT,bt,null),e(Go,Xrr),e(Go,io),M(ay,io,null),e(io,zrr),e(io,x2e),e(x2e,Wrr),e(io,Qrr),e(io,Xa),e(Xa,Hrr),e(Xa,$2e),e($2e,Urr),e(Xa,Jrr),e(Xa,k2e),e(k2e,Yrr),e(Xa,Krr),e(Xa,S2e),e(S2e,Zrr),e(Xa,etr),e(io,otr),e(io,R2e),e(R2e,rT),e(rT,P2e),e(P2e,rtr),e(rT,ttr),e(rT,pW),e(pW,atr),e(rT,ntr),e(io,str),e(io,tT),e(tT,ltr),e(tT,B2e),e(B2e,itr),e(tT,dtr),e(tT,I2e),e(I2e,ctr),e(io,ftr),M(aT,io,null),b(f,UGe,_),b(f,vd,_),e(vd,nT),e(nT,N2e),M(ny,N2e,null),e(vd,mtr),e(vd,q2e),e(q2e,gtr),b(f,JGe,_),b(f,Oo,_),M(sy,Oo,null),e(Oo,htr),e(Oo,Fd),e(Fd,ptr),e(Fd,uW),e(uW,utr),e(Fd,_tr),e(Fd,_W),e(_W,btr),e(Fd,vtr),e(Oo,Ftr),e(Oo,ly),e(ly,Ttr),e(ly,j2e),e(j2e,Mtr),e(ly,Etr),e(Oo,Ctr),e(Oo,vt),M(iy,vt,null),e(vt,wtr),e(vt,D2e),e(D2e,Atr),e(vt,Ltr),e(vt,Td),e(Td,ytr),e(Td,G2e),e(G2e,xtr),e(Td,$tr),e(Td,bW),e(bW,ktr),e(Td,Str),e(vt,Rtr),M(sT,vt,null),e(Oo,Ptr),e(Oo,co),M(dy,co,null),e(co,Btr),e(co,O2e),e(O2e,Itr),e(co,Ntr),e(co,za),e(za,qtr),e(za,V2e),e(V2e,jtr),e(za,Dtr),e(za,X2e),e(X2e,Gtr),e(za,Otr),e(za,z2e),e(z2e,Vtr),e(za,Xtr),e(co,ztr),e(co,W2e),e(W2e,lT),e(lT,Q2e),e(Q2e,Wtr),e(lT,Qtr),e(lT,vW),e(vW,Htr),e(lT,Utr),e(co,Jtr),e(co,iT),e(iT,Ytr),e(iT,H2e),e(H2e,Ktr),e(iT,Ztr),e(iT,U2e),e(U2e,ear),e(co,oar),M(dT,co,null),b(f,YGe,_),b(f,Md,_),e(Md,cT),e(cT,J2e),M(cy,J2e,null),e(Md,rar),e(Md,Y2e),e(Y2e,tar),b(f,KGe,_),b(f,Vo,_),M(fy,Vo,null),e(Vo,aar),e(Vo,Ed),e(Ed,nar),e(Ed,FW),e(FW,sar),e(Ed,lar),e(Ed,TW),e(TW,iar),e(Ed,dar),e(Vo,car),e(Vo,my),e(my,far),e(my,K2e),e(K2e,mar),e(my,gar),e(Vo,har),e(Vo,Ft),M(gy,Ft,null),e(Ft,par),e(Ft,Z2e),e(Z2e,uar),e(Ft,_ar),e(Ft,Cd),e(Cd,bar),e(Cd,e1e),e(e1e,Far),e(Cd,Tar),e(Cd,MW),e(MW,Mar),e(Cd,Ear),e(Ft,Car),M(fT,Ft,null),e(Vo,war),e(Vo,fo),M(hy,fo,null),e(fo,Aar),e(fo,o1e),e(o1e,Lar),e(fo,yar),e(fo,Wa),e(Wa,xar),e(Wa,r1e),e(r1e,$ar),e(Wa,kar),e(Wa,t1e),e(t1e,Sar),e(Wa,Rar),e(Wa,a1e),e(a1e,Par),e(Wa,Bar),e(fo,Iar),e(fo,Pe),e(Pe,mT),e(mT,n1e),e(n1e,Nar),e(mT,qar),e(mT,EW),e(EW,jar),e(mT,Dar),e(Pe,Gar),e(Pe,gT),e(gT,s1e),e(s1e,Oar),e(gT,Var),e(gT,CW),e(CW,Xar),e(gT,zar),e(Pe,War),e(Pe,hT),e(hT,l1e),e(l1e,Qar),e(hT,Har),e(hT,wW),e(wW,Uar),e(hT,Jar),e(Pe,Yar),e(Pe,pT),e(pT,i1e),e(i1e,Kar),e(pT,Zar),e(pT,AW),e(AW,enr),e(pT,onr),e(Pe,rnr),e(Pe,uT),e(uT,d1e),e(d1e,tnr),e(uT,anr),e(uT,LW),e(LW,nnr),e(uT,snr),e(Pe,lnr),e(Pe,_T),e(_T,c1e),e(c1e,inr),e(_T,dnr),e(_T,yW),e(yW,cnr),e(_T,fnr),e(Pe,mnr),e(Pe,bT),e(bT,f1e),e(f1e,gnr),e(bT,hnr),e(bT,xW),e(xW,pnr),e(bT,unr),e(Pe,_nr),e(Pe,vT),e(vT,m1e),e(m1e,bnr),e(vT,vnr),e(vT,$W),e($W,Fnr),e(vT,Tnr),e(Pe,Mnr),e(Pe,FT),e(FT,g1e),e(g1e,Enr),e(FT,Cnr),e(FT,kW),e(kW,wnr),e(FT,Anr),e(fo,Lnr),e(fo,TT),e(TT,ynr),e(TT,h1e),e(h1e,xnr),e(TT,$nr),e(TT,p1e),e(p1e,knr),e(fo,Snr),M(MT,fo,null),b(f,ZGe,_),b(f,wd,_),e(wd,ET),e(ET,u1e),M(py,u1e,null),e(wd,Rnr),e(wd,_1e),e(_1e,Pnr),b(f,eOe,_),b(f,Xo,_),M(uy,Xo,null),e(Xo,Bnr),e(Xo,Ad),e(Ad,Inr),e(Ad,SW),e(SW,Nnr),e(Ad,qnr),e(Ad,RW),e(RW,jnr),e(Ad,Dnr),e(Xo,Gnr),e(Xo,_y),e(_y,Onr),e(_y,b1e),e(b1e,Vnr),e(_y,Xnr),e(Xo,znr),e(Xo,Tt),M(by,Tt,null),e(Tt,Wnr),e(Tt,v1e),e(v1e,Qnr),e(Tt,Hnr),e(Tt,Ld),e(Ld,Unr),e(Ld,F1e),e(F1e,Jnr),e(Ld,Ynr),e(Ld,PW),e(PW,Knr),e(Ld,Znr),e(Tt,esr),M(CT,Tt,null),e(Xo,osr),e(Xo,mo),M(vy,mo,null),e(mo,rsr),e(mo,T1e),e(T1e,tsr),e(mo,asr),e(mo,Qa),e(Qa,nsr),e(Qa,M1e),e(M1e,ssr),e(Qa,lsr),e(Qa,E1e),e(E1e,isr),e(Qa,dsr),e(Qa,C1e),e(C1e,csr),e(Qa,fsr),e(mo,msr),e(mo,et),e(et,wT),e(wT,w1e),e(w1e,gsr),e(wT,hsr),e(wT,BW),e(BW,psr),e(wT,usr),e(et,_sr),e(et,AT),e(AT,A1e),e(A1e,bsr),e(AT,vsr),e(AT,IW),e(IW,Fsr),e(AT,Tsr),e(et,Msr),e(et,LT),e(LT,L1e),e(L1e,Esr),e(LT,Csr),e(LT,NW),e(NW,wsr),e(LT,Asr),e(et,Lsr),e(et,yT),e(yT,y1e),e(y1e,ysr),e(yT,xsr),e(yT,qW),e(qW,$sr),e(yT,ksr),e(et,Ssr),e(et,xT),e(xT,x1e),e(x1e,Rsr),e(xT,Psr),e(xT,jW),e(jW,Bsr),e(xT,Isr),e(mo,Nsr),e(mo,$T),e($T,qsr),e($T,$1e),e($1e,jsr),e($T,Dsr),e($T,k1e),e(k1e,Gsr),e(mo,Osr),M(kT,mo,null),b(f,oOe,_),b(f,yd,_),e(yd,ST),e(ST,S1e),M(Fy,S1e,null),e(yd,Vsr),e(yd,R1e),e(R1e,Xsr),b(f,rOe,_),b(f,zo,_),M(Ty,zo,null),e(zo,zsr),e(zo,xd),e(xd,Wsr),e(xd,DW),e(DW,Qsr),e(xd,Hsr),e(xd,GW),e(GW,Usr),e(xd,Jsr),e(zo,Ysr),e(zo,My),e(My,Ksr),e(My,P1e),e(P1e,Zsr),e(My,elr),e(zo,olr),e(zo,Mt),M(Ey,Mt,null),e(Mt,rlr),e(Mt,B1e),e(B1e,tlr),e(Mt,alr),e(Mt,$d),e($d,nlr),e($d,I1e),e(I1e,slr),e($d,llr),e($d,OW),e(OW,ilr),e($d,dlr),e(Mt,clr),M(RT,Mt,null),e(zo,flr),e(zo,go),M(Cy,go,null),e(go,mlr),e(go,N1e),e(N1e,glr),e(go,hlr),e(go,Ha),e(Ha,plr),e(Ha,q1e),e(q1e,ulr),e(Ha,_lr),e(Ha,j1e),e(j1e,blr),e(Ha,vlr),e(Ha,D1e),e(D1e,Flr),e(Ha,Tlr),e(go,Mlr),e(go,Le),e(Le,PT),e(PT,G1e),e(G1e,Elr),e(PT,Clr),e(PT,VW),e(VW,wlr),e(PT,Alr),e(Le,Llr),e(Le,BT),e(BT,O1e),e(O1e,ylr),e(BT,xlr),e(BT,XW),e(XW,$lr),e(BT,klr),e(Le,Slr),e(Le,IT),e(IT,V1e),e(V1e,Rlr),e(IT,Plr),e(IT,zW),e(zW,Blr),e(IT,Ilr),e(Le,Nlr),e(Le,NT),e(NT,X1e),e(X1e,qlr),e(NT,jlr),e(NT,WW),e(WW,Dlr),e(NT,Glr),e(Le,Olr),e(Le,qT),e(qT,z1e),e(z1e,Vlr),e(qT,Xlr),e(qT,QW),e(QW,zlr),e(qT,Wlr),e(Le,Qlr),e(Le,jT),e(jT,W1e),e(W1e,Hlr),e(jT,Ulr),e(jT,HW),e(HW,Jlr),e(jT,Ylr),e(Le,Klr),e(Le,DT),e(DT,Q1e),e(Q1e,Zlr),e(DT,eir),e(DT,UW),e(UW,oir),e(DT,rir),e(Le,tir),e(Le,GT),e(GT,H1e),e(H1e,air),e(GT,nir),e(GT,JW),e(JW,sir),e(GT,lir),e(Le,iir),e(Le,OT),e(OT,U1e),e(U1e,dir),e(OT,cir),e(OT,YW),e(YW,fir),e(OT,mir),e(Le,gir),e(Le,VT),e(VT,J1e),e(J1e,hir),e(VT,pir),e(VT,KW),e(KW,uir),e(VT,_ir),e(go,bir),e(go,XT),e(XT,vir),e(XT,Y1e),e(Y1e,Fir),e(XT,Tir),e(XT,K1e),e(K1e,Mir),e(go,Eir),M(zT,go,null),b(f,tOe,_),b(f,kd,_),e(kd,WT),e(WT,Z1e),M(wy,Z1e,null),e(kd,Cir),e(kd,ebe),e(ebe,wir),b(f,aOe,_),b(f,Wo,_),M(Ay,Wo,null),e(Wo,Air),e(Wo,Sd),e(Sd,Lir),e(Sd,ZW),e(ZW,yir),e(Sd,xir),e(Sd,eQ),e(eQ,$ir),e(Sd,kir),e(Wo,Sir),e(Wo,Ly),e(Ly,Rir),e(Ly,obe),e(obe,Pir),e(Ly,Bir),e(Wo,Iir),e(Wo,Et),M(yy,Et,null),e(Et,Nir),e(Et,rbe),e(rbe,qir),e(Et,jir),e(Et,Rd),e(Rd,Dir),e(Rd,tbe),e(tbe,Gir),e(Rd,Oir),e(Rd,oQ),e(oQ,Vir),e(Rd,Xir),e(Et,zir),M(QT,Et,null),e(Wo,Wir),e(Wo,ho),M(xy,ho,null),e(ho,Qir),e(ho,abe),e(abe,Hir),e(ho,Uir),e(ho,Ua),e(Ua,Jir),e(Ua,nbe),e(nbe,Yir),e(Ua,Kir),e(Ua,sbe),e(sbe,Zir),e(Ua,edr),e(Ua,lbe),e(lbe,odr),e(Ua,rdr),e(ho,tdr),e(ho,$y),e($y,HT),e(HT,ibe),e(ibe,adr),e(HT,ndr),e(HT,rQ),e(rQ,sdr),e(HT,ldr),e($y,idr),e($y,UT),e(UT,dbe),e(dbe,ddr),e(UT,cdr),e(UT,tQ),e(tQ,fdr),e(UT,mdr),e(ho,gdr),e(ho,JT),e(JT,hdr),e(JT,cbe),e(cbe,pdr),e(JT,udr),e(JT,fbe),e(fbe,_dr),e(ho,bdr),M(YT,ho,null),b(f,nOe,_),b(f,Pd,_),e(Pd,KT),e(KT,mbe),M(ky,mbe,null),e(Pd,vdr),e(Pd,gbe),e(gbe,Fdr),b(f,sOe,_),b(f,Qo,_),M(Sy,Qo,null),e(Qo,Tdr),e(Qo,Bd),e(Bd,Mdr),e(Bd,aQ),e(aQ,Edr),e(Bd,Cdr),e(Bd,nQ),e(nQ,wdr),e(Bd,Adr),e(Qo,Ldr),e(Qo,Ry),e(Ry,ydr),e(Ry,hbe),e(hbe,xdr),e(Ry,$dr),e(Qo,kdr),e(Qo,Ct),M(Py,Ct,null),e(Ct,Sdr),e(Ct,pbe),e(pbe,Rdr),e(Ct,Pdr),e(Ct,Id),e(Id,Bdr),e(Id,ube),e(ube,Idr),e(Id,Ndr),e(Id,sQ),e(sQ,qdr),e(Id,jdr),e(Ct,Ddr),M(ZT,Ct,null),e(Qo,Gdr),e(Qo,po),M(By,po,null),e(po,Odr),e(po,_be),e(_be,Vdr),e(po,Xdr),e(po,Ja),e(Ja,zdr),e(Ja,bbe),e(bbe,Wdr),e(Ja,Qdr),e(Ja,vbe),e(vbe,Hdr),e(Ja,Udr),e(Ja,Fbe),e(Fbe,Jdr),e(Ja,Ydr),e(po,Kdr),e(po,ot),e(ot,e7),e(e7,Tbe),e(Tbe,Zdr),e(e7,ecr),e(e7,lQ),e(lQ,ocr),e(e7,rcr),e(ot,tcr),e(ot,o7),e(o7,Mbe),e(Mbe,acr),e(o7,ncr),e(o7,iQ),e(iQ,scr),e(o7,lcr),e(ot,icr),e(ot,r7),e(r7,Ebe),e(Ebe,dcr),e(r7,ccr),e(r7,dQ),e(dQ,fcr),e(r7,mcr),e(ot,gcr),e(ot,t7),e(t7,Cbe),e(Cbe,hcr),e(t7,pcr),e(t7,cQ),e(cQ,ucr),e(t7,_cr),e(ot,bcr),e(ot,a7),e(a7,wbe),e(wbe,vcr),e(a7,Fcr),e(a7,fQ),e(fQ,Tcr),e(a7,Mcr),e(po,Ecr),e(po,n7),e(n7,Ccr),e(n7,Abe),e(Abe,wcr),e(n7,Acr),e(n7,Lbe),e(Lbe,Lcr),e(po,ycr),M(s7,po,null),b(f,lOe,_),b(f,Nd,_),e(Nd,l7),e(l7,ybe),M(Iy,ybe,null),e(Nd,xcr),e(Nd,xbe),e(xbe,$cr),b(f,iOe,_),b(f,Ho,_),M(Ny,Ho,null),e(Ho,kcr),e(Ho,qd),e(qd,Scr),e(qd,mQ),e(mQ,Rcr),e(qd,Pcr),e(qd,gQ),e(gQ,Bcr),e(qd,Icr),e(Ho,Ncr),e(Ho,qy),e(qy,qcr),e(qy,$be),e($be,jcr),e(qy,Dcr),e(Ho,Gcr),e(Ho,wt),M(jy,wt,null),e(wt,Ocr),e(wt,kbe),e(kbe,Vcr),e(wt,Xcr),e(wt,jd),e(jd,zcr),e(jd,Sbe),e(Sbe,Wcr),e(jd,Qcr),e(jd,hQ),e(hQ,Hcr),e(jd,Ucr),e(wt,Jcr),M(i7,wt,null),e(Ho,Ycr),e(Ho,uo),M(Dy,uo,null),e(uo,Kcr),e(uo,Rbe),e(Rbe,Zcr),e(uo,efr),e(uo,Ya),e(Ya,ofr),e(Ya,Pbe),e(Pbe,rfr),e(Ya,tfr),e(Ya,Bbe),e(Bbe,afr),e(Ya,nfr),e(Ya,Ibe),e(Ibe,sfr),e(Ya,lfr),e(uo,ifr),e(uo,Dd),e(Dd,d7),e(d7,Nbe),e(Nbe,dfr),e(d7,cfr),e(d7,pQ),e(pQ,ffr),e(d7,mfr),e(Dd,gfr),e(Dd,c7),e(c7,qbe),e(qbe,hfr),e(c7,pfr),e(c7,uQ),e(uQ,ufr),e(c7,_fr),e(Dd,bfr),e(Dd,f7),e(f7,jbe),e(jbe,vfr),e(f7,Ffr),e(f7,_Q),e(_Q,Tfr),e(f7,Mfr),e(uo,Efr),e(uo,m7),e(m7,Cfr),e(m7,Dbe),e(Dbe,wfr),e(m7,Afr),e(m7,Gbe),e(Gbe,Lfr),e(uo,yfr),M(g7,uo,null),b(f,dOe,_),b(f,Gd,_),e(Gd,h7),e(h7,Obe),M(Gy,Obe,null),e(Gd,xfr),e(Gd,Vbe),e(Vbe,$fr),b(f,cOe,_),b(f,Uo,_),M(Oy,Uo,null),e(Uo,kfr),e(Uo,Od),e(Od,Sfr),e(Od,bQ),e(bQ,Rfr),e(Od,Pfr),e(Od,vQ),e(vQ,Bfr),e(Od,Ifr),e(Uo,Nfr),e(Uo,Vy),e(Vy,qfr),e(Vy,Xbe),e(Xbe,jfr),e(Vy,Dfr),e(Uo,Gfr),e(Uo,At),M(Xy,At,null),e(At,Ofr),e(At,zbe),e(zbe,Vfr),e(At,Xfr),e(At,Vd),e(Vd,zfr),e(Vd,Wbe),e(Wbe,Wfr),e(Vd,Qfr),e(Vd,FQ),e(FQ,Hfr),e(Vd,Ufr),e(At,Jfr),M(p7,At,null),e(Uo,Yfr),e(Uo,_o),M(zy,_o,null),e(_o,Kfr),e(_o,Qbe),e(Qbe,Zfr),e(_o,emr),e(_o,Ka),e(Ka,omr),e(Ka,Hbe),e(Hbe,rmr),e(Ka,tmr),e(Ka,Ube),e(Ube,amr),e(Ka,nmr),e(Ka,Jbe),e(Jbe,smr),e(Ka,lmr),e(_o,imr),e(_o,Wy),e(Wy,u7),e(u7,Ybe),e(Ybe,dmr),e(u7,cmr),e(u7,TQ),e(TQ,fmr),e(u7,mmr),e(Wy,gmr),e(Wy,_7),e(_7,Kbe),e(Kbe,hmr),e(_7,pmr),e(_7,MQ),e(MQ,umr),e(_7,_mr),e(_o,bmr),e(_o,b7),e(b7,vmr),e(b7,Zbe),e(Zbe,Fmr),e(b7,Tmr),e(b7,eve),e(eve,Mmr),e(_o,Emr),M(v7,_o,null),b(f,fOe,_),b(f,Xd,_),e(Xd,F7),e(F7,ove),M(Qy,ove,null),e(Xd,Cmr),e(Xd,rve),e(rve,wmr),b(f,mOe,_),b(f,Jo,_),M(Hy,Jo,null),e(Jo,Amr),e(Jo,zd),e(zd,Lmr),e(zd,EQ),e(EQ,ymr),e(zd,xmr),e(zd,CQ),e(CQ,$mr),e(zd,kmr),e(Jo,Smr),e(Jo,Uy),e(Uy,Rmr),e(Uy,tve),e(tve,Pmr),e(Uy,Bmr),e(Jo,Imr),e(Jo,Lt),M(Jy,Lt,null),e(Lt,Nmr),e(Lt,ave),e(ave,qmr),e(Lt,jmr),e(Lt,Wd),e(Wd,Dmr),e(Wd,nve),e(nve,Gmr),e(Wd,Omr),e(Wd,wQ),e(wQ,Vmr),e(Wd,Xmr),e(Lt,zmr),M(T7,Lt,null),e(Jo,Wmr),e(Jo,bo),M(Yy,bo,null),e(bo,Qmr),e(bo,sve),e(sve,Hmr),e(bo,Umr),e(bo,Za),e(Za,Jmr),e(Za,lve),e(lve,Ymr),e(Za,Kmr),e(Za,ive),e(ive,Zmr),e(Za,egr),e(Za,dve),e(dve,ogr),e(Za,rgr),e(bo,tgr),e(bo,cve),e(cve,M7),e(M7,fve),e(fve,agr),e(M7,ngr),e(M7,AQ),e(AQ,sgr),e(M7,lgr),e(bo,igr),e(bo,E7),e(E7,dgr),e(E7,mve),e(mve,cgr),e(E7,fgr),e(E7,gve),e(gve,mgr),e(bo,ggr),M(C7,bo,null),b(f,gOe,_),b(f,Qd,_),e(Qd,w7),e(w7,hve),M(Ky,hve,null),e(Qd,hgr),e(Qd,pve),e(pve,pgr),b(f,hOe,_),b(f,Yo,_),M(Zy,Yo,null),e(Yo,ugr),e(Yo,Hd),e(Hd,_gr),e(Hd,LQ),e(LQ,bgr),e(Hd,vgr),e(Hd,yQ),e(yQ,Fgr),e(Hd,Tgr),e(Yo,Mgr),e(Yo,e9),e(e9,Egr),e(e9,uve),e(uve,Cgr),e(e9,wgr),e(Yo,Agr),e(Yo,yt),M(o9,yt,null),e(yt,Lgr),e(yt,_ve),e(_ve,ygr),e(yt,xgr),e(yt,Ud),e(Ud,$gr),e(Ud,bve),e(bve,kgr),e(Ud,Sgr),e(Ud,xQ),e(xQ,Rgr),e(Ud,Pgr),e(yt,Bgr),M(A7,yt,null),e(Yo,Igr),e(Yo,vo),M(r9,vo,null),e(vo,Ngr),e(vo,vve),e(vve,qgr),e(vo,jgr),e(vo,en),e(en,Dgr),e(en,Fve),e(Fve,Ggr),e(en,Ogr),e(en,Tve),e(Tve,Vgr),e(en,Xgr),e(en,Mve),e(Mve,zgr),e(en,Wgr),e(vo,Qgr),e(vo,on),e(on,L7),e(L7,Eve),e(Eve,Hgr),e(L7,Ugr),e(L7,$Q),e($Q,Jgr),e(L7,Ygr),e(on,Kgr),e(on,y7),e(y7,Cve),e(Cve,Zgr),e(y7,ehr),e(y7,kQ),e(kQ,ohr),e(y7,rhr),e(on,thr),e(on,x7),e(x7,wve),e(wve,ahr),e(x7,nhr),e(x7,SQ),e(SQ,shr),e(x7,lhr),e(on,ihr),e(on,$7),e($7,Ave),e(Ave,dhr),e($7,chr),e($7,RQ),e(RQ,fhr),e($7,mhr),e(vo,ghr),e(vo,k7),e(k7,hhr),e(k7,Lve),e(Lve,phr),e(k7,uhr),e(k7,yve),e(yve,_hr),e(vo,bhr),M(S7,vo,null),b(f,pOe,_),b(f,Jd,_),e(Jd,R7),e(R7,xve),M(t9,xve,null),e(Jd,vhr),e(Jd,$ve),e($ve,Fhr),b(f,uOe,_),b(f,Ko,_),M(a9,Ko,null),e(Ko,Thr),e(Ko,Yd),e(Yd,Mhr),e(Yd,PQ),e(PQ,Ehr),e(Yd,Chr),e(Yd,BQ),e(BQ,whr),e(Yd,Ahr),e(Ko,Lhr),e(Ko,n9),e(n9,yhr),e(n9,kve),e(kve,xhr),e(n9,$hr),e(Ko,khr),e(Ko,xt),M(s9,xt,null),e(xt,Shr),e(xt,Sve),e(Sve,Rhr),e(xt,Phr),e(xt,Kd),e(Kd,Bhr),e(Kd,Rve),e(Rve,Ihr),e(Kd,Nhr),e(Kd,IQ),e(IQ,qhr),e(Kd,jhr),e(xt,Dhr),M(P7,xt,null),e(Ko,Ghr),e(Ko,Fo),M(l9,Fo,null),e(Fo,Ohr),e(Fo,Pve),e(Pve,Vhr),e(Fo,Xhr),e(Fo,rn),e(rn,zhr),e(rn,Bve),e(Bve,Whr),e(rn,Qhr),e(rn,Ive),e(Ive,Hhr),e(rn,Uhr),e(rn,Nve),e(Nve,Jhr),e(rn,Yhr),e(Fo,Khr),e(Fo,qve),e(qve,B7),e(B7,jve),e(jve,Zhr),e(B7,epr),e(B7,NQ),e(NQ,opr),e(B7,rpr),e(Fo,tpr),e(Fo,I7),e(I7,apr),e(I7,Dve),e(Dve,npr),e(I7,spr),e(I7,Gve),e(Gve,lpr),e(Fo,ipr),M(N7,Fo,null),b(f,_Oe,_),b(f,Zd,_),e(Zd,q7),e(q7,Ove),M(i9,Ove,null),e(Zd,dpr),e(Zd,Vve),e(Vve,cpr),b(f,bOe,_),b(f,Zo,_),M(d9,Zo,null),e(Zo,fpr),e(Zo,ec),e(ec,mpr),e(ec,qQ),e(qQ,gpr),e(ec,hpr),e(ec,jQ),e(jQ,ppr),e(ec,upr),e(Zo,_pr),e(Zo,c9),e(c9,bpr),e(c9,Xve),e(Xve,vpr),e(c9,Fpr),e(Zo,Tpr),e(Zo,$t),M(f9,$t,null),e($t,Mpr),e($t,zve),e(zve,Epr),e($t,Cpr),e($t,oc),e(oc,wpr),e(oc,Wve),e(Wve,Apr),e(oc,Lpr),e(oc,DQ),e(DQ,ypr),e(oc,xpr),e($t,$pr),M(j7,$t,null),e(Zo,kpr),e(Zo,Lr),M(m9,Lr,null),e(Lr,Spr),e(Lr,Qve),e(Qve,Rpr),e(Lr,Ppr),e(Lr,tn),e(tn,Bpr),e(tn,Hve),e(Hve,Ipr),e(tn,Npr),e(tn,Uve),e(Uve,qpr),e(tn,jpr),e(tn,Jve),e(Jve,Dpr),e(tn,Gpr),e(Lr,Opr),e(Lr,q),e(q,D7),e(D7,Yve),e(Yve,Vpr),e(D7,Xpr),e(D7,GQ),e(GQ,zpr),e(D7,Wpr),e(q,Qpr),e(q,G7),e(G7,Kve),e(Kve,Hpr),e(G7,Upr),e(G7,OQ),e(OQ,Jpr),e(G7,Ypr),e(q,Kpr),e(q,O7),e(O7,Zve),e(Zve,Zpr),e(O7,eur),e(O7,VQ),e(VQ,our),e(O7,rur),e(q,tur),e(q,V7),e(V7,eFe),e(eFe,aur),e(V7,nur),e(V7,XQ),e(XQ,sur),e(V7,lur),e(q,iur),e(q,X7),e(X7,oFe),e(oFe,dur),e(X7,cur),e(X7,zQ),e(zQ,fur),e(X7,mur),e(q,gur),e(q,z7),e(z7,rFe),e(rFe,hur),e(z7,pur),e(z7,WQ),e(WQ,uur),e(z7,_ur),e(q,bur),e(q,W7),e(W7,tFe),e(tFe,vur),e(W7,Fur),e(W7,QQ),e(QQ,Tur),e(W7,Mur),e(q,Eur),e(q,Q7),e(Q7,aFe),e(aFe,Cur),e(Q7,wur),e(Q7,HQ),e(HQ,Aur),e(Q7,Lur),e(q,yur),e(q,H7),e(H7,nFe),e(nFe,xur),e(H7,$ur),e(H7,UQ),e(UQ,kur),e(H7,Sur),e(q,Rur),e(q,U7),e(U7,sFe),e(sFe,Pur),e(U7,Bur),e(U7,JQ),e(JQ,Iur),e(U7,Nur),e(q,qur),e(q,J7),e(J7,lFe),e(lFe,jur),e(J7,Dur),e(J7,YQ),e(YQ,Gur),e(J7,Our),e(q,Vur),e(q,Y7),e(Y7,iFe),e(iFe,Xur),e(Y7,zur),e(Y7,KQ),e(KQ,Wur),e(Y7,Qur),e(q,Hur),e(q,K7),e(K7,dFe),e(dFe,Uur),e(K7,Jur),e(K7,ZQ),e(ZQ,Yur),e(K7,Kur),e(q,Zur),e(q,Z7),e(Z7,cFe),e(cFe,e_r),e(Z7,o_r),e(Z7,eH),e(eH,r_r),e(Z7,t_r),e(q,a_r),e(q,e8),e(e8,fFe),e(fFe,n_r),e(e8,s_r),e(e8,oH),e(oH,l_r),e(e8,i_r),e(q,d_r),e(q,o8),e(o8,mFe),e(mFe,c_r),e(o8,f_r),e(o8,rH),e(rH,m_r),e(o8,g_r),e(q,h_r),e(q,r8),e(r8,gFe),e(gFe,p_r),e(r8,u_r),e(r8,tH),e(tH,__r),e(r8,b_r),e(q,v_r),e(q,Xs),e(Xs,hFe),e(hFe,F_r),e(Xs,T_r),e(Xs,aH),e(aH,M_r),e(Xs,E_r),e(Xs,nH),e(nH,C_r),e(Xs,w_r),e(q,A_r),e(q,t8),e(t8,pFe),e(pFe,L_r),e(t8,y_r),e(t8,sH),e(sH,x_r),e(t8,$_r),e(q,k_r),e(q,a8),e(a8,uFe),e(uFe,S_r),e(a8,R_r),e(a8,lH),e(lH,P_r),e(a8,B_r),e(q,I_r),e(q,n8),e(n8,_Fe),e(_Fe,N_r),e(n8,q_r),e(n8,iH),e(iH,j_r),e(n8,D_r),e(q,G_r),e(q,s8),e(s8,bFe),e(bFe,O_r),e(s8,V_r),e(s8,dH),e(dH,X_r),e(s8,z_r),e(q,W_r),e(q,l8),e(l8,vFe),e(vFe,Q_r),e(l8,H_r),e(l8,cH),e(cH,U_r),e(l8,J_r),e(q,Y_r),e(q,i8),e(i8,FFe),e(FFe,K_r),e(i8,Z_r),e(i8,fH),e(fH,e2r),e(i8,o2r),e(q,r2r),e(q,d8),e(d8,TFe),e(TFe,t2r),e(d8,a2r),e(d8,mH),e(mH,n2r),e(d8,s2r),e(q,l2r),e(q,c8),e(c8,MFe),e(MFe,i2r),e(c8,d2r),e(c8,gH),e(gH,c2r),e(c8,f2r),e(q,m2r),e(q,f8),e(f8,EFe),e(EFe,g2r),e(f8,h2r),e(f8,hH),e(hH,p2r),e(f8,u2r),e(q,_2r),e(q,m8),e(m8,CFe),e(CFe,b2r),e(m8,v2r),e(m8,pH),e(pH,F2r),e(m8,T2r),e(q,M2r),e(q,g8),e(g8,wFe),e(wFe,E2r),e(g8,C2r),e(g8,uH),e(uH,w2r),e(g8,A2r),e(q,L2r),e(q,h8),e(h8,AFe),e(AFe,y2r),e(h8,x2r),e(h8,_H),e(_H,$2r),e(h8,k2r),e(q,S2r),e(q,p8),e(p8,LFe),e(LFe,R2r),e(p8,P2r),e(p8,bH),e(bH,B2r),e(p8,I2r),e(q,N2r),e(q,u8),e(u8,yFe),e(yFe,q2r),e(u8,j2r),e(u8,vH),e(vH,D2r),e(u8,G2r),e(q,O2r),e(q,_8),e(_8,xFe),e(xFe,V2r),e(_8,X2r),e(_8,FH),e(FH,z2r),e(_8,W2r),e(q,Q2r),e(q,b8),e(b8,$Fe),e($Fe,H2r),e(b8,U2r),e(b8,TH),e(TH,J2r),e(b8,Y2r),e(q,K2r),e(q,v8),e(v8,kFe),e(kFe,Z2r),e(v8,e1r),e(v8,MH),e(MH,o1r),e(v8,r1r),e(q,t1r),e(q,F8),e(F8,SFe),e(SFe,a1r),e(F8,n1r),e(F8,EH),e(EH,s1r),e(F8,l1r),e(q,i1r),e(q,T8),e(T8,RFe),e(RFe,d1r),e(T8,c1r),e(T8,CH),e(CH,f1r),e(T8,m1r),e(q,g1r),e(q,M8),e(M8,PFe),e(PFe,h1r),e(M8,p1r),e(M8,wH),e(wH,u1r),e(M8,_1r),e(q,b1r),e(q,E8),e(E8,BFe),e(BFe,v1r),e(E8,F1r),e(E8,AH),e(AH,T1r),e(E8,M1r),e(q,E1r),e(q,C8),e(C8,IFe),e(IFe,C1r),e(C8,w1r),e(C8,LH),e(LH,A1r),e(C8,L1r),e(q,y1r),e(q,w8),e(w8,NFe),e(NFe,x1r),e(w8,$1r),e(w8,yH),e(yH,k1r),e(w8,S1r),e(q,R1r),e(q,A8),e(A8,qFe),e(qFe,P1r),e(A8,B1r),e(A8,xH),e(xH,I1r),e(A8,N1r),e(q,q1r),e(q,L8),e(L8,jFe),e(jFe,j1r),e(L8,D1r),e(L8,$H),e($H,G1r),e(L8,O1r),e(q,V1r),e(q,y8),e(y8,DFe),e(DFe,X1r),e(y8,z1r),e(y8,kH),e(kH,W1r),e(y8,Q1r),e(q,H1r),e(q,x8),e(x8,GFe),e(GFe,U1r),e(x8,J1r),e(x8,SH),e(SH,Y1r),e(x8,K1r),e(q,Z1r),e(q,$8),e($8,OFe),e(OFe,ebr),e($8,obr),e($8,RH),e(RH,rbr),e($8,tbr),e(q,abr),e(q,k8),e(k8,VFe),e(VFe,nbr),e(k8,sbr),e(k8,PH),e(PH,lbr),e(k8,ibr),e(Lr,dbr),M(S8,Lr,null),b(f,vOe,_),b(f,rc,_),e(rc,R8),e(R8,XFe),M(g9,XFe,null),e(rc,cbr),e(rc,zFe),e(zFe,fbr),b(f,FOe,_),b(f,er,_),M(h9,er,null),e(er,mbr),e(er,tc),e(tc,gbr),e(tc,BH),e(BH,hbr),e(tc,pbr),e(tc,IH),e(IH,ubr),e(tc,_br),e(er,bbr),e(er,p9),e(p9,vbr),e(p9,WFe),e(WFe,Fbr),e(p9,Tbr),e(er,Mbr),e(er,kt),M(u9,kt,null),e(kt,Ebr),e(kt,QFe),e(QFe,Cbr),e(kt,wbr),e(kt,ac),e(ac,Abr),e(ac,HFe),e(HFe,Lbr),e(ac,ybr),e(ac,NH),e(NH,xbr),e(ac,$br),e(kt,kbr),M(P8,kt,null),e(er,Sbr),e(er,yr),M(_9,yr,null),e(yr,Rbr),e(yr,UFe),e(UFe,Pbr),e(yr,Bbr),e(yr,an),e(an,Ibr),e(an,JFe),e(JFe,Nbr),e(an,qbr),e(an,YFe),e(YFe,jbr),e(an,Dbr),e(an,KFe),e(KFe,Gbr),e(an,Obr),e(yr,Vbr),e(yr,se),e(se,B8),e(B8,ZFe),e(ZFe,Xbr),e(B8,zbr),e(B8,qH),e(qH,Wbr),e(B8,Qbr),e(se,Hbr),e(se,I8),e(I8,e6e),e(e6e,Ubr),e(I8,Jbr),e(I8,jH),e(jH,Ybr),e(I8,Kbr),e(se,Zbr),e(se,N8),e(N8,o6e),e(o6e,evr),e(N8,ovr),e(N8,DH),e(DH,rvr),e(N8,tvr),e(se,avr),e(se,q8),e(q8,r6e),e(r6e,nvr),e(q8,svr),e(q8,GH),e(GH,lvr),e(q8,ivr),e(se,dvr),e(se,j8),e(j8,t6e),e(t6e,cvr),e(j8,fvr),e(j8,OH),e(OH,mvr),e(j8,gvr),e(se,hvr),e(se,D8),e(D8,a6e),e(a6e,pvr),e(D8,uvr),e(D8,VH),e(VH,_vr),e(D8,bvr),e(se,vvr),e(se,G8),e(G8,n6e),e(n6e,Fvr),e(G8,Tvr),e(G8,XH),e(XH,Mvr),e(G8,Evr),e(se,Cvr),e(se,O8),e(O8,s6e),e(s6e,wvr),e(O8,Avr),e(O8,zH),e(zH,Lvr),e(O8,yvr),e(se,xvr),e(se,V8),e(V8,l6e),e(l6e,$vr),e(V8,kvr),e(V8,WH),e(WH,Svr),e(V8,Rvr),e(se,Pvr),e(se,X8),e(X8,i6e),e(i6e,Bvr),e(X8,Ivr),e(X8,QH),e(QH,Nvr),e(X8,qvr),e(se,jvr),e(se,z8),e(z8,d6e),e(d6e,Dvr),e(z8,Gvr),e(z8,HH),e(HH,Ovr),e(z8,Vvr),e(se,Xvr),e(se,W8),e(W8,c6e),e(c6e,zvr),e(W8,Wvr),e(W8,UH),e(UH,Qvr),e(W8,Hvr),e(se,Uvr),e(se,Q8),e(Q8,f6e),e(f6e,Jvr),e(Q8,Yvr),e(Q8,JH),e(JH,Kvr),e(Q8,Zvr),e(se,eFr),e(se,H8),e(H8,m6e),e(m6e,oFr),e(H8,rFr),e(H8,YH),e(YH,tFr),e(H8,aFr),e(se,nFr),e(se,U8),e(U8,g6e),e(g6e,sFr),e(U8,lFr),e(U8,KH),e(KH,iFr),e(U8,dFr),e(se,cFr),e(se,J8),e(J8,h6e),e(h6e,fFr),e(J8,mFr),e(J8,ZH),e(ZH,gFr),e(J8,hFr),e(se,pFr),e(se,Y8),e(Y8,p6e),e(p6e,uFr),e(Y8,_Fr),e(Y8,eU),e(eU,bFr),e(Y8,vFr),e(se,FFr),e(se,K8),e(K8,u6e),e(u6e,TFr),e(K8,MFr),e(K8,oU),e(oU,EFr),e(K8,CFr),e(se,wFr),e(se,Z8),e(Z8,_6e),e(_6e,AFr),e(Z8,LFr),e(Z8,rU),e(rU,yFr),e(Z8,xFr),e(se,$Fr),e(se,eM),e(eM,b6e),e(b6e,kFr),e(eM,SFr),e(eM,tU),e(tU,RFr),e(eM,PFr),e(se,BFr),e(se,oM),e(oM,v6e),e(v6e,IFr),e(oM,NFr),e(oM,aU),e(aU,qFr),e(oM,jFr),e(se,DFr),e(se,rM),e(rM,F6e),e(F6e,GFr),e(rM,OFr),e(rM,nU),e(nU,VFr),e(rM,XFr),e(se,zFr),e(se,tM),e(tM,T6e),e(T6e,WFr),e(tM,QFr),e(tM,sU),e(sU,HFr),e(tM,UFr),e(yr,JFr),M(aM,yr,null),b(f,TOe,_),b(f,nc,_),e(nc,nM),e(nM,M6e),M(b9,M6e,null),e(nc,YFr),e(nc,E6e),e(E6e,KFr),b(f,MOe,_),b(f,or,_),M(v9,or,null),e(or,ZFr),e(or,sc),e(sc,e6r),e(sc,lU),e(lU,o6r),e(sc,r6r),e(sc,iU),e(iU,t6r),e(sc,a6r),e(or,n6r),e(or,F9),e(F9,s6r),e(F9,C6e),e(C6e,l6r),e(F9,i6r),e(or,d6r),e(or,St),M(T9,St,null),e(St,c6r),e(St,w6e),e(w6e,f6r),e(St,m6r),e(St,lc),e(lc,g6r),e(lc,A6e),e(A6e,h6r),e(lc,p6r),e(lc,dU),e(dU,u6r),e(lc,_6r),e(St,b6r),M(sM,St,null),e(or,v6r),e(or,xr),M(M9,xr,null),e(xr,F6r),e(xr,L6e),e(L6e,T6r),e(xr,M6r),e(xr,nn),e(nn,E6r),e(nn,y6e),e(y6e,C6r),e(nn,w6r),e(nn,x6e),e(x6e,A6r),e(nn,L6r),e(nn,$6e),e($6e,y6r),e(nn,x6r),e(xr,$6r),e(xr,Me),e(Me,lM),e(lM,k6e),e(k6e,k6r),e(lM,S6r),e(lM,cU),e(cU,R6r),e(lM,P6r),e(Me,B6r),e(Me,iM),e(iM,S6e),e(S6e,I6r),e(iM,N6r),e(iM,fU),e(fU,q6r),e(iM,j6r),e(Me,D6r),e(Me,dM),e(dM,R6e),e(R6e,G6r),e(dM,O6r),e(dM,mU),e(mU,V6r),e(dM,X6r),e(Me,z6r),e(Me,cM),e(cM,P6e),e(P6e,W6r),e(cM,Q6r),e(cM,gU),e(gU,H6r),e(cM,U6r),e(Me,J6r),e(Me,fM),e(fM,B6e),e(B6e,Y6r),e(fM,K6r),e(fM,hU),e(hU,Z6r),e(fM,eTr),e(Me,oTr),e(Me,mM),e(mM,I6e),e(I6e,rTr),e(mM,tTr),e(mM,pU),e(pU,aTr),e(mM,nTr),e(Me,sTr),e(Me,gM),e(gM,N6e),e(N6e,lTr),e(gM,iTr),e(gM,uU),e(uU,dTr),e(gM,cTr),e(Me,fTr),e(Me,hM),e(hM,q6e),e(q6e,mTr),e(hM,gTr),e(hM,_U),e(_U,hTr),e(hM,pTr),e(Me,uTr),e(Me,pM),e(pM,j6e),e(j6e,_Tr),e(pM,bTr),e(pM,bU),e(bU,vTr),e(pM,FTr),e(Me,TTr),e(Me,uM),e(uM,D6e),e(D6e,MTr),e(uM,ETr),e(uM,vU),e(vU,CTr),e(uM,wTr),e(Me,ATr),e(Me,_M),e(_M,G6e),e(G6e,LTr),e(_M,yTr),e(_M,FU),e(FU,xTr),e(_M,$Tr),e(Me,kTr),e(Me,bM),e(bM,O6e),e(O6e,STr),e(bM,RTr),e(bM,TU),e(TU,PTr),e(bM,BTr),e(Me,ITr),e(Me,vM),e(vM,V6e),e(V6e,NTr),e(vM,qTr),e(vM,MU),e(MU,jTr),e(vM,DTr),e(xr,GTr),M(FM,xr,null),b(f,EOe,_),b(f,ic,_),e(ic,TM),e(TM,X6e),M(E9,X6e,null),e(ic,OTr),e(ic,z6e),e(z6e,VTr),b(f,COe,_),b(f,rr,_),M(C9,rr,null),e(rr,XTr),e(rr,dc),e(dc,zTr),e(dc,EU),e(EU,WTr),e(dc,QTr),e(dc,CU),e(CU,HTr),e(dc,UTr),e(rr,JTr),e(rr,w9),e(w9,YTr),e(w9,W6e),e(W6e,KTr),e(w9,ZTr),e(rr,e7r),e(rr,Rt),M(A9,Rt,null),e(Rt,o7r),e(Rt,Q6e),e(Q6e,r7r),e(Rt,t7r),e(Rt,cc),e(cc,a7r),e(cc,H6e),e(H6e,n7r),e(cc,s7r),e(cc,wU),e(wU,l7r),e(cc,i7r),e(Rt,d7r),M(MM,Rt,null),e(rr,c7r),e(rr,$r),M(L9,$r,null),e($r,f7r),e($r,U6e),e(U6e,m7r),e($r,g7r),e($r,sn),e(sn,h7r),e(sn,J6e),e(J6e,p7r),e(sn,u7r),e(sn,Y6e),e(Y6e,_7r),e(sn,b7r),e(sn,K6e),e(K6e,v7r),e(sn,F7r),e($r,T7r),e($r,ln),e(ln,EM),e(EM,Z6e),e(Z6e,M7r),e(EM,E7r),e(EM,AU),e(AU,C7r),e(EM,w7r),e(ln,A7r),e(ln,CM),e(CM,eTe),e(eTe,L7r),e(CM,y7r),e(CM,LU),e(LU,x7r),e(CM,$7r),e(ln,k7r),e(ln,wM),e(wM,oTe),e(oTe,S7r),e(wM,R7r),e(wM,yU),e(yU,P7r),e(wM,B7r),e(ln,I7r),e(ln,AM),e(AM,rTe),e(rTe,N7r),e(AM,q7r),e(AM,xU),e(xU,j7r),e(AM,D7r),e($r,G7r),M(LM,$r,null),b(f,wOe,_),b(f,fc,_),e(fc,yM),e(yM,tTe),M(y9,tTe,null),e(fc,O7r),e(fc,aTe),e(aTe,V7r),b(f,AOe,_),b(f,tr,_),M(x9,tr,null),e(tr,X7r),e(tr,mc),e(mc,z7r),e(mc,$U),e($U,W7r),e(mc,Q7r),e(mc,kU),e(kU,H7r),e(mc,U7r),e(tr,J7r),e(tr,$9),e($9,Y7r),e($9,nTe),e(nTe,K7r),e($9,Z7r),e(tr,e8r),e(tr,Pt),M(k9,Pt,null),e(Pt,o8r),e(Pt,sTe),e(sTe,r8r),e(Pt,t8r),e(Pt,gc),e(gc,a8r),e(gc,lTe),e(lTe,n8r),e(gc,s8r),e(gc,SU),e(SU,l8r),e(gc,i8r),e(Pt,d8r),M(xM,Pt,null),e(tr,c8r),e(tr,kr),M(S9,kr,null),e(kr,f8r),e(kr,iTe),e(iTe,m8r),e(kr,g8r),e(kr,dn),e(dn,h8r),e(dn,dTe),e(dTe,p8r),e(dn,u8r),e(dn,cTe),e(cTe,_8r),e(dn,b8r),e(dn,fTe),e(fTe,v8r),e(dn,F8r),e(kr,T8r),e(kr,ie),e(ie,$M),e($M,mTe),e(mTe,M8r),e($M,E8r),e($M,RU),e(RU,C8r),e($M,w8r),e(ie,A8r),e(ie,kM),e(kM,gTe),e(gTe,L8r),e(kM,y8r),e(kM,PU),e(PU,x8r),e(kM,$8r),e(ie,k8r),e(ie,SM),e(SM,hTe),e(hTe,S8r),e(SM,R8r),e(SM,BU),e(BU,P8r),e(SM,B8r),e(ie,I8r),e(ie,RM),e(RM,pTe),e(pTe,N8r),e(RM,q8r),e(RM,IU),e(IU,j8r),e(RM,D8r),e(ie,G8r),e(ie,PM),e(PM,uTe),e(uTe,O8r),e(PM,V8r),e(PM,NU),e(NU,X8r),e(PM,z8r),e(ie,W8r),e(ie,BM),e(BM,_Te),e(_Te,Q8r),e(BM,H8r),e(BM,qU),e(qU,U8r),e(BM,J8r),e(ie,Y8r),e(ie,IM),e(IM,bTe),e(bTe,K8r),e(IM,Z8r),e(IM,jU),e(jU,eMr),e(IM,oMr),e(ie,rMr),e(ie,NM),e(NM,vTe),e(vTe,tMr),e(NM,aMr),e(NM,DU),e(DU,nMr),e(NM,sMr),e(ie,lMr),e(ie,qM),e(qM,FTe),e(FTe,iMr),e(qM,dMr),e(qM,GU),e(GU,cMr),e(qM,fMr),e(ie,mMr),e(ie,jM),e(jM,TTe),e(TTe,gMr),e(jM,hMr),e(jM,OU),e(OU,pMr),e(jM,uMr),e(ie,_Mr),e(ie,DM),e(DM,MTe),e(MTe,bMr),e(DM,vMr),e(DM,VU),e(VU,FMr),e(DM,TMr),e(ie,MMr),e(ie,GM),e(GM,ETe),e(ETe,EMr),e(GM,CMr),e(GM,XU),e(XU,wMr),e(GM,AMr),e(ie,LMr),e(ie,OM),e(OM,CTe),e(CTe,yMr),e(OM,xMr),e(OM,zU),e(zU,$Mr),e(OM,kMr),e(ie,SMr),e(ie,VM),e(VM,wTe),e(wTe,RMr),e(VM,PMr),e(VM,WU),e(WU,BMr),e(VM,IMr),e(ie,NMr),e(ie,XM),e(XM,ATe),e(ATe,qMr),e(XM,jMr),e(XM,QU),e(QU,DMr),e(XM,GMr),e(ie,OMr),e(ie,zM),e(zM,LTe),e(LTe,VMr),e(zM,XMr),e(zM,HU),e(HU,zMr),e(zM,WMr),e(ie,QMr),e(ie,WM),e(WM,yTe),e(yTe,HMr),e(WM,UMr),e(WM,UU),e(UU,JMr),e(WM,YMr),e(ie,KMr),e(ie,QM),e(QM,xTe),e(xTe,ZMr),e(QM,eEr),e(QM,JU),e(JU,oEr),e(QM,rEr),e(ie,tEr),e(ie,HM),e(HM,$Te),e($Te,aEr),e(HM,nEr),e(HM,YU),e(YU,sEr),e(HM,lEr),e(ie,iEr),e(ie,UM),e(UM,kTe),e(kTe,dEr),e(UM,cEr),e(UM,KU),e(KU,fEr),e(UM,mEr),e(kr,gEr),M(JM,kr,null),b(f,LOe,_),b(f,hc,_),e(hc,YM),e(YM,STe),M(R9,STe,null),e(hc,hEr),e(hc,RTe),e(RTe,pEr),b(f,yOe,_),b(f,ar,_),M(P9,ar,null),e(ar,uEr),e(ar,pc),e(pc,_Er),e(pc,ZU),e(ZU,bEr),e(pc,vEr),e(pc,eJ),e(eJ,FEr),e(pc,TEr),e(ar,MEr),e(ar,B9),e(B9,EEr),e(B9,PTe),e(PTe,CEr),e(B9,wEr),e(ar,AEr),e(ar,Bt),M(I9,Bt,null),e(Bt,LEr),e(Bt,BTe),e(BTe,yEr),e(Bt,xEr),e(Bt,uc),e(uc,$Er),e(uc,ITe),e(ITe,kEr),e(uc,SEr),e(uc,oJ),e(oJ,REr),e(uc,PEr),e(Bt,BEr),M(KM,Bt,null),e(ar,IEr),e(ar,Sr),M(N9,Sr,null),e(Sr,NEr),e(Sr,NTe),e(NTe,qEr),e(Sr,jEr),e(Sr,cn),e(cn,DEr),e(cn,qTe),e(qTe,GEr),e(cn,OEr),e(cn,jTe),e(jTe,VEr),e(cn,XEr),e(cn,DTe),e(DTe,zEr),e(cn,WEr),e(Sr,QEr),e(Sr,ye),e(ye,ZM),e(ZM,GTe),e(GTe,HEr),e(ZM,UEr),e(ZM,rJ),e(rJ,JEr),e(ZM,YEr),e(ye,KEr),e(ye,eE),e(eE,OTe),e(OTe,ZEr),e(eE,e4r),e(eE,tJ),e(tJ,o4r),e(eE,r4r),e(ye,t4r),e(ye,oE),e(oE,VTe),e(VTe,a4r),e(oE,n4r),e(oE,aJ),e(aJ,s4r),e(oE,l4r),e(ye,i4r),e(ye,rE),e(rE,XTe),e(XTe,d4r),e(rE,c4r),e(rE,nJ),e(nJ,f4r),e(rE,m4r),e(ye,g4r),e(ye,tE),e(tE,zTe),e(zTe,h4r),e(tE,p4r),e(tE,sJ),e(sJ,u4r),e(tE,_4r),e(ye,b4r),e(ye,aE),e(aE,WTe),e(WTe,v4r),e(aE,F4r),e(aE,lJ),e(lJ,T4r),e(aE,M4r),e(ye,E4r),e(ye,nE),e(nE,QTe),e(QTe,C4r),e(nE,w4r),e(nE,iJ),e(iJ,A4r),e(nE,L4r),e(ye,y4r),e(ye,sE),e(sE,HTe),e(HTe,x4r),e(sE,$4r),e(sE,dJ),e(dJ,k4r),e(sE,S4r),e(ye,R4r),e(ye,lE),e(lE,UTe),e(UTe,P4r),e(lE,B4r),e(lE,cJ),e(cJ,I4r),e(lE,N4r),e(ye,q4r),e(ye,iE),e(iE,JTe),e(JTe,j4r),e(iE,D4r),e(iE,fJ),e(fJ,G4r),e(iE,O4r),e(Sr,V4r),M(dE,Sr,null),b(f,xOe,_),b(f,_c,_),e(_c,cE),e(cE,YTe),M(q9,YTe,null),e(_c,X4r),e(_c,KTe),e(KTe,z4r),b(f,$Oe,_),b(f,nr,_),M(j9,nr,null),e(nr,W4r),e(nr,bc),e(bc,Q4r),e(bc,mJ),e(mJ,H4r),e(bc,U4r),e(bc,gJ),e(gJ,J4r),e(bc,Y4r),e(nr,K4r),e(nr,D9),e(D9,Z4r),e(D9,ZTe),e(ZTe,eCr),e(D9,oCr),e(nr,rCr),e(nr,It),M(G9,It,null),e(It,tCr),e(It,e7e),e(e7e,aCr),e(It,nCr),e(It,vc),e(vc,sCr),e(vc,o7e),e(o7e,lCr),e(vc,iCr),e(vc,hJ),e(hJ,dCr),e(vc,cCr),e(It,fCr),M(fE,It,null),e(nr,mCr),e(nr,Rr),M(O9,Rr,null),e(Rr,gCr),e(Rr,r7e),e(r7e,hCr),e(Rr,pCr),e(Rr,fn),e(fn,uCr),e(fn,t7e),e(t7e,_Cr),e(fn,bCr),e(fn,a7e),e(a7e,vCr),e(fn,FCr),e(fn,n7e),e(n7e,TCr),e(fn,MCr),e(Rr,ECr),e(Rr,te),e(te,mE),e(mE,s7e),e(s7e,CCr),e(mE,wCr),e(mE,pJ),e(pJ,ACr),e(mE,LCr),e(te,yCr),e(te,gE),e(gE,l7e),e(l7e,xCr),e(gE,$Cr),e(gE,uJ),e(uJ,kCr),e(gE,SCr),e(te,RCr),e(te,hE),e(hE,i7e),e(i7e,PCr),e(hE,BCr),e(hE,_J),e(_J,ICr),e(hE,NCr),e(te,qCr),e(te,pE),e(pE,d7e),e(d7e,jCr),e(pE,DCr),e(pE,bJ),e(bJ,GCr),e(pE,OCr),e(te,VCr),e(te,uE),e(uE,c7e),e(c7e,XCr),e(uE,zCr),e(uE,vJ),e(vJ,WCr),e(uE,QCr),e(te,HCr),e(te,_E),e(_E,f7e),e(f7e,UCr),e(_E,JCr),e(_E,FJ),e(FJ,YCr),e(_E,KCr),e(te,ZCr),e(te,bE),e(bE,m7e),e(m7e,e5r),e(bE,o5r),e(bE,TJ),e(TJ,r5r),e(bE,t5r),e(te,a5r),e(te,vE),e(vE,g7e),e(g7e,n5r),e(vE,s5r),e(vE,MJ),e(MJ,l5r),e(vE,i5r),e(te,d5r),e(te,FE),e(FE,h7e),e(h7e,c5r),e(FE,f5r),e(FE,EJ),e(EJ,m5r),e(FE,g5r),e(te,h5r),e(te,TE),e(TE,p7e),e(p7e,p5r),e(TE,u5r),e(TE,CJ),e(CJ,_5r),e(TE,b5r),e(te,v5r),e(te,ME),e(ME,u7e),e(u7e,F5r),e(ME,T5r),e(ME,wJ),e(wJ,M5r),e(ME,E5r),e(te,C5r),e(te,EE),e(EE,_7e),e(_7e,w5r),e(EE,A5r),e(EE,AJ),e(AJ,L5r),e(EE,y5r),e(te,x5r),e(te,CE),e(CE,b7e),e(b7e,$5r),e(CE,k5r),e(CE,LJ),e(LJ,S5r),e(CE,R5r),e(te,P5r),e(te,wE),e(wE,v7e),e(v7e,B5r),e(wE,I5r),e(wE,yJ),e(yJ,N5r),e(wE,q5r),e(te,j5r),e(te,AE),e(AE,F7e),e(F7e,D5r),e(AE,G5r),e(AE,xJ),e(xJ,O5r),e(AE,V5r),e(te,X5r),e(te,LE),e(LE,T7e),e(T7e,z5r),e(LE,W5r),e(LE,$J),e($J,Q5r),e(LE,H5r),e(te,U5r),e(te,yE),e(yE,M7e),e(M7e,J5r),e(yE,Y5r),e(yE,kJ),e(kJ,K5r),e(yE,Z5r),e(te,e3r),e(te,xE),e(xE,E7e),e(E7e,o3r),e(xE,r3r),e(xE,SJ),e(SJ,t3r),e(xE,a3r),e(te,n3r),e(te,$E),e($E,C7e),e(C7e,s3r),e($E,l3r),e($E,RJ),e(RJ,i3r),e($E,d3r),e(te,c3r),e(te,kE),e(kE,w7e),e(w7e,f3r),e(kE,m3r),e(kE,PJ),e(PJ,g3r),e(kE,h3r),e(te,p3r),e(te,SE),e(SE,A7e),e(A7e,u3r),e(SE,_3r),e(SE,BJ),e(BJ,b3r),e(SE,v3r),e(te,F3r),e(te,RE),e(RE,L7e),e(L7e,T3r),e(RE,M3r),e(RE,IJ),e(IJ,E3r),e(RE,C3r),e(te,w3r),e(te,PE),e(PE,y7e),e(y7e,A3r),e(PE,L3r),e(PE,NJ),e(NJ,y3r),e(PE,x3r),e(te,$3r),e(te,BE),e(BE,x7e),e(x7e,k3r),e(BE,S3r),e(BE,qJ),e(qJ,R3r),e(BE,P3r),e(te,B3r),e(te,IE),e(IE,$7e),e($7e,I3r),e(IE,N3r),e(IE,jJ),e(jJ,q3r),e(IE,j3r),e(te,D3r),e(te,NE),e(NE,k7e),e(k7e,G3r),e(NE,O3r),e(NE,DJ),e(DJ,V3r),e(NE,X3r),e(Rr,z3r),M(qE,Rr,null),b(f,kOe,_),b(f,Fc,_),e(Fc,jE),e(jE,S7e),M(V9,S7e,null),e(Fc,W3r),e(Fc,R7e),e(R7e,Q3r),b(f,SOe,_),b(f,sr,_),M(X9,sr,null),e(sr,H3r),e(sr,Tc),e(Tc,U3r),e(Tc,GJ),e(GJ,J3r),e(Tc,Y3r),e(Tc,OJ),e(OJ,K3r),e(Tc,Z3r),e(sr,e0r),e(sr,z9),e(z9,o0r),e(z9,P7e),e(P7e,r0r),e(z9,t0r),e(sr,a0r),e(sr,Nt),M(W9,Nt,null),e(Nt,n0r),e(Nt,B7e),e(B7e,s0r),e(Nt,l0r),e(Nt,Mc),e(Mc,i0r),e(Mc,I7e),e(I7e,d0r),e(Mc,c0r),e(Mc,VJ),e(VJ,f0r),e(Mc,m0r),e(Nt,g0r),M(DE,Nt,null),e(sr,h0r),e(sr,Pr),M(Q9,Pr,null),e(Pr,p0r),e(Pr,N7e),e(N7e,u0r),e(Pr,_0r),e(Pr,mn),e(mn,b0r),e(mn,q7e),e(q7e,v0r),e(mn,F0r),e(mn,j7e),e(j7e,T0r),e(mn,M0r),e(mn,D7e),e(D7e,E0r),e(mn,C0r),e(Pr,w0r),e(Pr,ue),e(ue,GE),e(GE,G7e),e(G7e,A0r),e(GE,L0r),e(GE,XJ),e(XJ,y0r),e(GE,x0r),e(ue,$0r),e(ue,OE),e(OE,O7e),e(O7e,k0r),e(OE,S0r),e(OE,zJ),e(zJ,R0r),e(OE,P0r),e(ue,B0r),e(ue,VE),e(VE,V7e),e(V7e,I0r),e(VE,N0r),e(VE,WJ),e(WJ,q0r),e(VE,j0r),e(ue,D0r),e(ue,XE),e(XE,X7e),e(X7e,G0r),e(XE,O0r),e(XE,QJ),e(QJ,V0r),e(XE,X0r),e(ue,z0r),e(ue,zE),e(zE,z7e),e(z7e,W0r),e(zE,Q0r),e(zE,HJ),e(HJ,H0r),e(zE,U0r),e(ue,J0r),e(ue,WE),e(WE,W7e),e(W7e,Y0r),e(WE,K0r),e(WE,UJ),e(UJ,Z0r),e(WE,ewr),e(ue,owr),e(ue,QE),e(QE,Q7e),e(Q7e,rwr),e(QE,twr),e(QE,JJ),e(JJ,awr),e(QE,nwr),e(ue,swr),e(ue,HE),e(HE,H7e),e(H7e,lwr),e(HE,iwr),e(HE,YJ),e(YJ,dwr),e(HE,cwr),e(ue,fwr),e(ue,UE),e(UE,U7e),e(U7e,mwr),e(UE,gwr),e(UE,KJ),e(KJ,hwr),e(UE,pwr),e(ue,uwr),e(ue,JE),e(JE,J7e),e(J7e,_wr),e(JE,bwr),e(JE,ZJ),e(ZJ,vwr),e(JE,Fwr),e(ue,Twr),e(ue,YE),e(YE,Y7e),e(Y7e,Mwr),e(YE,Ewr),e(YE,eY),e(eY,Cwr),e(YE,wwr),e(ue,Awr),e(ue,KE),e(KE,K7e),e(K7e,Lwr),e(KE,ywr),e(KE,oY),e(oY,xwr),e(KE,$wr),e(ue,kwr),e(ue,ZE),e(ZE,Z7e),e(Z7e,Swr),e(ZE,Rwr),e(ZE,rY),e(rY,Pwr),e(ZE,Bwr),e(ue,Iwr),e(ue,e4),e(e4,e8e),e(e8e,Nwr),e(e4,qwr),e(e4,tY),e(tY,jwr),e(e4,Dwr),e(ue,Gwr),e(ue,o4),e(o4,o8e),e(o8e,Owr),e(o4,Vwr),e(o4,aY),e(aY,Xwr),e(o4,zwr),e(ue,Wwr),e(ue,r4),e(r4,r8e),e(r8e,Qwr),e(r4,Hwr),e(r4,nY),e(nY,Uwr),e(r4,Jwr),e(ue,Ywr),e(ue,t4),e(t4,t8e),e(t8e,Kwr),e(t4,Zwr),e(t4,sY),e(sY,eAr),e(t4,oAr),e(Pr,rAr),M(a4,Pr,null),b(f,ROe,_),b(f,Ec,_),e(Ec,n4),e(n4,a8e),M(H9,a8e,null),e(Ec,tAr),e(Ec,n8e),e(n8e,aAr),b(f,POe,_),b(f,lr,_),M(U9,lr,null),e(lr,nAr),e(lr,Cc),e(Cc,sAr),e(Cc,lY),e(lY,lAr),e(Cc,iAr),e(Cc,iY),e(iY,dAr),e(Cc,cAr),e(lr,fAr),e(lr,J9),e(J9,mAr),e(J9,s8e),e(s8e,gAr),e(J9,hAr),e(lr,pAr),e(lr,qt),M(Y9,qt,null),e(qt,uAr),e(qt,l8e),e(l8e,_Ar),e(qt,bAr),e(qt,wc),e(wc,vAr),e(wc,i8e),e(i8e,FAr),e(wc,TAr),e(wc,dY),e(dY,MAr),e(wc,EAr),e(qt,CAr),M(s4,qt,null),e(lr,wAr),e(lr,Br),M(K9,Br,null),e(Br,AAr),e(Br,d8e),e(d8e,LAr),e(Br,yAr),e(Br,gn),e(gn,xAr),e(gn,c8e),e(c8e,$Ar),e(gn,kAr),e(gn,f8e),e(f8e,SAr),e(gn,RAr),e(gn,m8e),e(m8e,PAr),e(gn,BAr),e(Br,IAr),e(Br,Z9),e(Z9,l4),e(l4,g8e),e(g8e,NAr),e(l4,qAr),e(l4,cY),e(cY,jAr),e(l4,DAr),e(Z9,GAr),e(Z9,i4),e(i4,h8e),e(h8e,OAr),e(i4,VAr),e(i4,fY),e(fY,XAr),e(i4,zAr),e(Br,WAr),M(d4,Br,null),b(f,BOe,_),b(f,Ac,_),e(Ac,c4),e(c4,p8e),M(ex,p8e,null),e(Ac,QAr),e(Ac,u8e),e(u8e,HAr),b(f,IOe,_),b(f,ir,_),M(ox,ir,null),e(ir,UAr),e(ir,Lc),e(Lc,JAr),e(Lc,mY),e(mY,YAr),e(Lc,KAr),e(Lc,gY),e(gY,ZAr),e(Lc,eLr),e(ir,oLr),e(ir,rx),e(rx,rLr),e(rx,_8e),e(_8e,tLr),e(rx,aLr),e(ir,nLr),e(ir,jt),M(tx,jt,null),e(jt,sLr),e(jt,b8e),e(b8e,lLr),e(jt,iLr),e(jt,yc),e(yc,dLr),e(yc,v8e),e(v8e,cLr),e(yc,fLr),e(yc,hY),e(hY,mLr),e(yc,gLr),e(jt,hLr),M(f4,jt,null),e(ir,pLr),e(ir,Ir),M(ax,Ir,null),e(Ir,uLr),e(Ir,F8e),e(F8e,_Lr),e(Ir,bLr),e(Ir,hn),e(hn,vLr),e(hn,T8e),e(T8e,FLr),e(hn,TLr),e(hn,M8e),e(M8e,MLr),e(hn,ELr),e(hn,E8e),e(E8e,CLr),e(hn,wLr),e(Ir,ALr),e(Ir,C8e),e(C8e,m4),e(m4,w8e),e(w8e,LLr),e(m4,yLr),e(m4,pY),e(pY,xLr),e(m4,$Lr),e(Ir,kLr),M(g4,Ir,null),b(f,NOe,_),b(f,xc,_),e(xc,h4),e(h4,A8e),M(nx,A8e,null),e(xc,SLr),e(xc,L8e),e(L8e,RLr),b(f,qOe,_),b(f,dr,_),M(sx,dr,null),e(dr,PLr),e(dr,$c),e($c,BLr),e($c,uY),e(uY,ILr),e($c,NLr),e($c,_Y),e(_Y,qLr),e($c,jLr),e(dr,DLr),e(dr,lx),e(lx,GLr),e(lx,y8e),e(y8e,OLr),e(lx,VLr),e(dr,XLr),e(dr,Dt),M(ix,Dt,null),e(Dt,zLr),e(Dt,x8e),e(x8e,WLr),e(Dt,QLr),e(Dt,kc),e(kc,HLr),e(kc,$8e),e($8e,ULr),e(kc,JLr),e(kc,bY),e(bY,YLr),e(kc,KLr),e(Dt,ZLr),M(p4,Dt,null),e(dr,eyr),e(dr,Nr),M(dx,Nr,null),e(Nr,oyr),e(Nr,k8e),e(k8e,ryr),e(Nr,tyr),e(Nr,pn),e(pn,ayr),e(pn,S8e),e(S8e,nyr),e(pn,syr),e(pn,R8e),e(R8e,lyr),e(pn,iyr),e(pn,P8e),e(P8e,dyr),e(pn,cyr),e(Nr,fyr),e(Nr,de),e(de,u4),e(u4,B8e),e(B8e,myr),e(u4,gyr),e(u4,vY),e(vY,hyr),e(u4,pyr),e(de,uyr),e(de,_4),e(_4,I8e),e(I8e,_yr),e(_4,byr),e(_4,FY),e(FY,vyr),e(_4,Fyr),e(de,Tyr),e(de,b4),e(b4,N8e),e(N8e,Myr),e(b4,Eyr),e(b4,TY),e(TY,Cyr),e(b4,wyr),e(de,Ayr),e(de,v4),e(v4,q8e),e(q8e,Lyr),e(v4,yyr),e(v4,MY),e(MY,xyr),e(v4,$yr),e(de,kyr),e(de,F4),e(F4,j8e),e(j8e,Syr),e(F4,Ryr),e(F4,EY),e(EY,Pyr),e(F4,Byr),e(de,Iyr),e(de,T4),e(T4,D8e),e(D8e,Nyr),e(T4,qyr),e(T4,CY),e(CY,jyr),e(T4,Dyr),e(de,Gyr),e(de,M4),e(M4,G8e),e(G8e,Oyr),e(M4,Vyr),e(M4,wY),e(wY,Xyr),e(M4,zyr),e(de,Wyr),e(de,E4),e(E4,O8e),e(O8e,Qyr),e(E4,Hyr),e(E4,AY),e(AY,Uyr),e(E4,Jyr),e(de,Yyr),e(de,C4),e(C4,V8e),e(V8e,Kyr),e(C4,Zyr),e(C4,LY),e(LY,e9r),e(C4,o9r),e(de,r9r),e(de,w4),e(w4,X8e),e(X8e,t9r),e(w4,a9r),e(w4,yY),e(yY,n9r),e(w4,s9r),e(de,l9r),e(de,A4),e(A4,z8e),e(z8e,i9r),e(A4,d9r),e(A4,xY),e(xY,c9r),e(A4,f9r),e(de,m9r),e(de,L4),e(L4,W8e),e(W8e,g9r),e(L4,h9r),e(L4,$Y),e($Y,p9r),e(L4,u9r),e(de,_9r),e(de,y4),e(y4,Q8e),e(Q8e,b9r),e(y4,v9r),e(y4,kY),e(kY,F9r),e(y4,T9r),e(de,M9r),e(de,x4),e(x4,H8e),e(H8e,E9r),e(x4,C9r),e(x4,SY),e(SY,w9r),e(x4,A9r),e(de,L9r),e(de,$4),e($4,U8e),e(U8e,y9r),e($4,x9r),e($4,RY),e(RY,$9r),e($4,k9r),e(de,S9r),e(de,k4),e(k4,J8e),e(J8e,R9r),e(k4,P9r),e(k4,PY),e(PY,B9r),e(k4,I9r),e(de,N9r),e(de,S4),e(S4,Y8e),e(Y8e,q9r),e(S4,j9r),e(S4,BY),e(BY,D9r),e(S4,G9r),e(de,O9r),e(de,R4),e(R4,K8e),e(K8e,V9r),e(R4,X9r),e(R4,IY),e(IY,z9r),e(R4,W9r),e(de,Q9r),e(de,P4),e(P4,Z8e),e(Z8e,H9r),e(P4,U9r),e(P4,NY),e(NY,J9r),e(P4,Y9r),e(de,K9r),e(de,B4),e(B4,eMe),e(eMe,Z9r),e(B4,exr),e(B4,qY),e(qY,oxr),e(B4,rxr),e(Nr,txr),M(I4,Nr,null),b(f,jOe,_),b(f,Sc,_),e(Sc,N4),e(N4,oMe),M(cx,oMe,null),e(Sc,axr),e(Sc,rMe),e(rMe,nxr),b(f,DOe,_),b(f,cr,_),M(fx,cr,null),e(cr,sxr),e(cr,Rc),e(Rc,lxr),e(Rc,jY),e(jY,ixr),e(Rc,dxr),e(Rc,DY),e(DY,cxr),e(Rc,fxr),e(cr,mxr),e(cr,mx),e(mx,gxr),e(mx,tMe),e(tMe,hxr),e(mx,pxr),e(cr,uxr),e(cr,Gt),M(gx,Gt,null),e(Gt,_xr),e(Gt,aMe),e(aMe,bxr),e(Gt,vxr),e(Gt,Pc),e(Pc,Fxr),e(Pc,nMe),e(nMe,Txr),e(Pc,Mxr),e(Pc,GY),e(GY,Exr),e(Pc,Cxr),e(Gt,wxr),M(q4,Gt,null),e(cr,Axr),e(cr,qr),M(hx,qr,null),e(qr,Lxr),e(qr,sMe),e(sMe,yxr),e(qr,xxr),e(qr,un),e(un,$xr),e(un,lMe),e(lMe,kxr),e(un,Sxr),e(un,iMe),e(iMe,Rxr),e(un,Pxr),e(un,dMe),e(dMe,Bxr),e(un,Ixr),e(qr,Nxr),e(qr,ce),e(ce,j4),e(j4,cMe),e(cMe,qxr),e(j4,jxr),e(j4,OY),e(OY,Dxr),e(j4,Gxr),e(ce,Oxr),e(ce,D4),e(D4,fMe),e(fMe,Vxr),e(D4,Xxr),e(D4,VY),e(VY,zxr),e(D4,Wxr),e(ce,Qxr),e(ce,G4),e(G4,mMe),e(mMe,Hxr),e(G4,Uxr),e(G4,XY),e(XY,Jxr),e(G4,Yxr),e(ce,Kxr),e(ce,O4),e(O4,gMe),e(gMe,Zxr),e(O4,e$r),e(O4,zY),e(zY,o$r),e(O4,r$r),e(ce,t$r),e(ce,V4),e(V4,hMe),e(hMe,a$r),e(V4,n$r),e(V4,WY),e(WY,s$r),e(V4,l$r),e(ce,i$r),e(ce,X4),e(X4,pMe),e(pMe,d$r),e(X4,c$r),e(X4,QY),e(QY,f$r),e(X4,m$r),e(ce,g$r),e(ce,z4),e(z4,uMe),e(uMe,h$r),e(z4,p$r),e(z4,HY),e(HY,u$r),e(z4,_$r),e(ce,b$r),e(ce,W4),e(W4,_Me),e(_Me,v$r),e(W4,F$r),e(W4,UY),e(UY,T$r),e(W4,M$r),e(ce,E$r),e(ce,Q4),e(Q4,bMe),e(bMe,C$r),e(Q4,w$r),e(Q4,JY),e(JY,A$r),e(Q4,L$r),e(ce,y$r),e(ce,H4),e(H4,vMe),e(vMe,x$r),e(H4,$$r),e(H4,YY),e(YY,k$r),e(H4,S$r),e(ce,R$r),e(ce,U4),e(U4,FMe),e(FMe,P$r),e(U4,B$r),e(U4,KY),e(KY,I$r),e(U4,N$r),e(ce,q$r),e(ce,J4),e(J4,TMe),e(TMe,j$r),e(J4,D$r),e(J4,ZY),e(ZY,G$r),e(J4,O$r),e(ce,V$r),e(ce,Y4),e(Y4,MMe),e(MMe,X$r),e(Y4,z$r),e(Y4,eK),e(eK,W$r),e(Y4,Q$r),e(ce,H$r),e(ce,K4),e(K4,EMe),e(EMe,U$r),e(K4,J$r),e(K4,oK),e(oK,Y$r),e(K4,K$r),e(ce,Z$r),e(ce,Z4),e(Z4,CMe),e(CMe,ekr),e(Z4,okr),e(Z4,rK),e(rK,rkr),e(Z4,tkr),e(ce,akr),e(ce,eC),e(eC,wMe),e(wMe,nkr),e(eC,skr),e(eC,tK),e(tK,lkr),e(eC,ikr),e(ce,dkr),e(ce,oC),e(oC,AMe),e(AMe,ckr),e(oC,fkr),e(oC,aK),e(aK,mkr),e(oC,gkr),e(ce,hkr),e(ce,rC),e(rC,LMe),e(LMe,pkr),e(rC,ukr),e(rC,nK),e(nK,_kr),e(rC,bkr),e(ce,vkr),e(ce,tC),e(tC,yMe),e(yMe,Fkr),e(tC,Tkr),e(tC,sK),e(sK,Mkr),e(tC,Ekr),e(ce,Ckr),e(ce,aC),e(aC,xMe),e(xMe,wkr),e(aC,Akr),e(aC,lK),e(lK,Lkr),e(aC,ykr),e(qr,xkr),M(nC,qr,null),b(f,GOe,_),b(f,Bc,_),e(Bc,sC),e(sC,$Me),M(px,$Me,null),e(Bc,$kr),e(Bc,kMe),e(kMe,kkr),b(f,OOe,_),b(f,fr,_),M(ux,fr,null),e(fr,Skr),e(fr,Ic),e(Ic,Rkr),e(Ic,iK),e(iK,Pkr),e(Ic,Bkr),e(Ic,dK),e(dK,Ikr),e(Ic,Nkr),e(fr,qkr),e(fr,_x),e(_x,jkr),e(_x,SMe),e(SMe,Dkr),e(_x,Gkr),e(fr,Okr),e(fr,Ot),M(bx,Ot,null),e(Ot,Vkr),e(Ot,RMe),e(RMe,Xkr),e(Ot,zkr),e(Ot,Nc),e(Nc,Wkr),e(Nc,PMe),e(PMe,Qkr),e(Nc,Hkr),e(Nc,cK),e(cK,Ukr),e(Nc,Jkr),e(Ot,Ykr),M(lC,Ot,null),e(fr,Kkr),e(fr,jr),M(vx,jr,null),e(jr,Zkr),e(jr,BMe),e(BMe,eSr),e(jr,oSr),e(jr,_n),e(_n,rSr),e(_n,IMe),e(IMe,tSr),e(_n,aSr),e(_n,NMe),e(NMe,nSr),e(_n,sSr),e(_n,qMe),e(qMe,lSr),e(_n,iSr),e(jr,dSr),e(jr,jMe),e(jMe,iC),e(iC,DMe),e(DMe,cSr),e(iC,fSr),e(iC,fK),e(fK,mSr),e(iC,gSr),e(jr,hSr),M(dC,jr,null),b(f,VOe,_),b(f,qc,_),e(qc,cC),e(cC,GMe),M(Fx,GMe,null),e(qc,pSr),e(qc,OMe),e(OMe,uSr),b(f,XOe,_),b(f,mr,_),M(Tx,mr,null),e(mr,_Sr),e(mr,jc),e(jc,bSr),e(jc,mK),e(mK,vSr),e(jc,FSr),e(jc,gK),e(gK,TSr),e(jc,MSr),e(mr,ESr),e(mr,Mx),e(Mx,CSr),e(Mx,VMe),e(VMe,wSr),e(Mx,ASr),e(mr,LSr),e(mr,Vt),M(Ex,Vt,null),e(Vt,ySr),e(Vt,XMe),e(XMe,xSr),e(Vt,$Sr),e(Vt,Dc),e(Dc,kSr),e(Dc,zMe),e(zMe,SSr),e(Dc,RSr),e(Dc,hK),e(hK,PSr),e(Dc,BSr),e(Vt,ISr),M(fC,Vt,null),e(mr,NSr),e(mr,Dr),M(Cx,Dr,null),e(Dr,qSr),e(Dr,WMe),e(WMe,jSr),e(Dr,DSr),e(Dr,bn),e(bn,GSr),e(bn,QMe),e(QMe,OSr),e(bn,VSr),e(bn,HMe),e(HMe,XSr),e(bn,zSr),e(bn,UMe),e(UMe,WSr),e(bn,QSr),e(Dr,HSr),e(Dr,JMe),e(JMe,mC),e(mC,YMe),e(YMe,USr),e(mC,JSr),e(mC,pK),e(pK,YSr),e(mC,KSr),e(Dr,ZSr),M(gC,Dr,null),b(f,zOe,_),b(f,Gc,_),e(Gc,hC),e(hC,KMe),M(wx,KMe,null),e(Gc,eRr),e(Gc,ZMe),e(ZMe,oRr),b(f,WOe,_),b(f,gr,_),M(Ax,gr,null),e(gr,rRr),e(gr,Oc),e(Oc,tRr),e(Oc,uK),e(uK,aRr),e(Oc,nRr),e(Oc,_K),e(_K,sRr),e(Oc,lRr),e(gr,iRr),e(gr,Lx),e(Lx,dRr),e(Lx,eEe),e(eEe,cRr),e(Lx,fRr),e(gr,mRr),e(gr,Xt),M(yx,Xt,null),e(Xt,gRr),e(Xt,oEe),e(oEe,hRr),e(Xt,pRr),e(Xt,Vc),e(Vc,uRr),e(Vc,rEe),e(rEe,_Rr),e(Vc,bRr),e(Vc,bK),e(bK,vRr),e(Vc,FRr),e(Xt,TRr),M(pC,Xt,null),e(gr,MRr),e(gr,Gr),M(xx,Gr,null),e(Gr,ERr),e(Gr,tEe),e(tEe,CRr),e(Gr,wRr),e(Gr,vn),e(vn,ARr),e(vn,aEe),e(aEe,LRr),e(vn,yRr),e(vn,nEe),e(nEe,xRr),e(vn,$Rr),e(vn,sEe),e(sEe,kRr),e(vn,SRr),e(Gr,RRr),e(Gr,oe),e(oe,uC),e(uC,lEe),e(lEe,PRr),e(uC,BRr),e(uC,vK),e(vK,IRr),e(uC,NRr),e(oe,qRr),e(oe,_C),e(_C,iEe),e(iEe,jRr),e(_C,DRr),e(_C,FK),e(FK,GRr),e(_C,ORr),e(oe,VRr),e(oe,bC),e(bC,dEe),e(dEe,XRr),e(bC,zRr),e(bC,TK),e(TK,WRr),e(bC,QRr),e(oe,HRr),e(oe,vC),e(vC,cEe),e(cEe,URr),e(vC,JRr),e(vC,MK),e(MK,YRr),e(vC,KRr),e(oe,ZRr),e(oe,FC),e(FC,fEe),e(fEe,ePr),e(FC,oPr),e(FC,EK),e(EK,rPr),e(FC,tPr),e(oe,aPr),e(oe,TC),e(TC,mEe),e(mEe,nPr),e(TC,sPr),e(TC,CK),e(CK,lPr),e(TC,iPr),e(oe,dPr),e(oe,MC),e(MC,gEe),e(gEe,cPr),e(MC,fPr),e(MC,wK),e(wK,mPr),e(MC,gPr),e(oe,hPr),e(oe,EC),e(EC,hEe),e(hEe,pPr),e(EC,uPr),e(EC,AK),e(AK,_Pr),e(EC,bPr),e(oe,vPr),e(oe,CC),e(CC,pEe),e(pEe,FPr),e(CC,TPr),e(CC,LK),e(LK,MPr),e(CC,EPr),e(oe,CPr),e(oe,wC),e(wC,uEe),e(uEe,wPr),e(wC,APr),e(wC,yK),e(yK,LPr),e(wC,yPr),e(oe,xPr),e(oe,AC),e(AC,_Ee),e(_Ee,$Pr),e(AC,kPr),e(AC,xK),e(xK,SPr),e(AC,RPr),e(oe,PPr),e(oe,LC),e(LC,bEe),e(bEe,BPr),e(LC,IPr),e(LC,$K),e($K,NPr),e(LC,qPr),e(oe,jPr),e(oe,yC),e(yC,vEe),e(vEe,DPr),e(yC,GPr),e(yC,kK),e(kK,OPr),e(yC,VPr),e(oe,XPr),e(oe,xC),e(xC,FEe),e(FEe,zPr),e(xC,WPr),e(xC,SK),e(SK,QPr),e(xC,HPr),e(oe,UPr),e(oe,$C),e($C,TEe),e(TEe,JPr),e($C,YPr),e($C,RK),e(RK,KPr),e($C,ZPr),e(oe,eBr),e(oe,kC),e(kC,MEe),e(MEe,oBr),e(kC,rBr),e(kC,PK),e(PK,tBr),e(kC,aBr),e(oe,nBr),e(oe,SC),e(SC,EEe),e(EEe,sBr),e(SC,lBr),e(SC,BK),e(BK,iBr),e(SC,dBr),e(oe,cBr),e(oe,RC),e(RC,CEe),e(CEe,fBr),e(RC,mBr),e(RC,IK),e(IK,gBr),e(RC,hBr),e(oe,pBr),e(oe,PC),e(PC,wEe),e(wEe,uBr),e(PC,_Br),e(PC,NK),e(NK,bBr),e(PC,vBr),e(oe,FBr),e(oe,BC),e(BC,AEe),e(AEe,TBr),e(BC,MBr),e(BC,qK),e(qK,EBr),e(BC,CBr),e(oe,wBr),e(oe,IC),e(IC,LEe),e(LEe,ABr),e(IC,LBr),e(IC,jK),e(jK,yBr),e(IC,xBr),e(oe,$Br),e(oe,NC),e(NC,yEe),e(yEe,kBr),e(NC,SBr),e(NC,DK),e(DK,RBr),e(NC,PBr),e(oe,BBr),e(oe,qC),e(qC,xEe),e(xEe,IBr),e(qC,NBr),e(qC,GK),e(GK,qBr),e(qC,jBr),e(oe,DBr),e(oe,jC),e(jC,$Ee),e($Ee,GBr),e(jC,OBr),e(jC,OK),e(OK,VBr),e(jC,XBr),e(oe,zBr),e(oe,DC),e(DC,kEe),e(kEe,WBr),e(DC,QBr),e(DC,VK),e(VK,HBr),e(DC,UBr),e(oe,JBr),e(oe,GC),e(GC,SEe),e(SEe,YBr),e(GC,KBr),e(GC,XK),e(XK,ZBr),e(GC,eIr),e(oe,oIr),e(oe,OC),e(OC,REe),e(REe,rIr),e(OC,tIr),e(OC,zK),e(zK,aIr),e(OC,nIr),e(Gr,sIr),M(VC,Gr,null),b(f,QOe,_),b(f,Xc,_),e(Xc,XC),e(XC,PEe),M($x,PEe,null),e(Xc,lIr),e(Xc,BEe),e(BEe,iIr),b(f,HOe,_),b(f,hr,_),M(kx,hr,null),e(hr,dIr),e(hr,zc),e(zc,cIr),e(zc,WK),e(WK,fIr),e(zc,mIr),e(zc,QK),e(QK,gIr),e(zc,hIr),e(hr,pIr),e(hr,Sx),e(Sx,uIr),e(Sx,IEe),e(IEe,_Ir),e(Sx,bIr),e(hr,vIr),e(hr,zt),M(Rx,zt,null),e(zt,FIr),e(zt,NEe),e(NEe,TIr),e(zt,MIr),e(zt,Wc),e(Wc,EIr),e(Wc,qEe),e(qEe,CIr),e(Wc,wIr),e(Wc,HK),e(HK,AIr),e(Wc,LIr),e(zt,yIr),M(zC,zt,null),e(hr,xIr),e(hr,Or),M(Px,Or,null),e(Or,$Ir),e(Or,jEe),e(jEe,kIr),e(Or,SIr),e(Or,Fn),e(Fn,RIr),e(Fn,DEe),e(DEe,PIr),e(Fn,BIr),e(Fn,GEe),e(GEe,IIr),e(Fn,NIr),e(Fn,OEe),e(OEe,qIr),e(Fn,jIr),e(Or,DIr),e(Or,xe),e(xe,WC),e(WC,VEe),e(VEe,GIr),e(WC,OIr),e(WC,UK),e(UK,VIr),e(WC,XIr),e(xe,zIr),e(xe,QC),e(QC,XEe),e(XEe,WIr),e(QC,QIr),e(QC,JK),e(JK,HIr),e(QC,UIr),e(xe,JIr),e(xe,HC),e(HC,zEe),e(zEe,YIr),e(HC,KIr),e(HC,YK),e(YK,ZIr),e(HC,eNr),e(xe,oNr),e(xe,UC),e(UC,WEe),e(WEe,rNr),e(UC,tNr),e(UC,KK),e(KK,aNr),e(UC,nNr),e(xe,sNr),e(xe,JC),e(JC,QEe),e(QEe,lNr),e(JC,iNr),e(JC,ZK),e(ZK,dNr),e(JC,cNr),e(xe,fNr),e(xe,YC),e(YC,HEe),e(HEe,mNr),e(YC,gNr),e(YC,eZ),e(eZ,hNr),e(YC,pNr),e(xe,uNr),e(xe,KC),e(KC,UEe),e(UEe,_Nr),e(KC,bNr),e(KC,oZ),e(oZ,vNr),e(KC,FNr),e(xe,TNr),e(xe,ZC),e(ZC,JEe),e(JEe,MNr),e(ZC,ENr),e(ZC,rZ),e(rZ,CNr),e(ZC,wNr),e(xe,ANr),e(xe,e5),e(e5,YEe),e(YEe,LNr),e(e5,yNr),e(e5,tZ),e(tZ,xNr),e(e5,$Nr),e(xe,kNr),e(xe,o5),e(o5,KEe),e(KEe,SNr),e(o5,RNr),e(o5,aZ),e(aZ,PNr),e(o5,BNr),e(Or,INr),M(r5,Or,null),b(f,UOe,_),b(f,Qc,_),e(Qc,t5),e(t5,ZEe),M(Bx,ZEe,null),e(Qc,NNr),e(Qc,e4e),e(e4e,qNr),b(f,JOe,_),b(f,pr,_),M(Ix,pr,null),e(pr,jNr),e(pr,Hc),e(Hc,DNr),e(Hc,nZ),e(nZ,GNr),e(Hc,ONr),e(Hc,sZ),e(sZ,VNr),e(Hc,XNr),e(pr,zNr),e(pr,Nx),e(Nx,WNr),e(Nx,o4e),e(o4e,QNr),e(Nx,HNr),e(pr,UNr),e(pr,Wt),M(qx,Wt,null),e(Wt,JNr),e(Wt,r4e),e(r4e,YNr),e(Wt,KNr),e(Wt,Uc),e(Uc,ZNr),e(Uc,t4e),e(t4e,eqr),e(Uc,oqr),e(Uc,lZ),e(lZ,rqr),e(Uc,tqr),e(Wt,aqr),M(a5,Wt,null),e(pr,nqr),e(pr,Vr),M(jx,Vr,null),e(Vr,sqr),e(Vr,a4e),e(a4e,lqr),e(Vr,iqr),e(Vr,Tn),e(Tn,dqr),e(Tn,n4e),e(n4e,cqr),e(Tn,fqr),e(Tn,s4e),e(s4e,mqr),e(Tn,gqr),e(Tn,l4e),e(l4e,hqr),e(Tn,pqr),e(Vr,uqr),e(Vr,Ee),e(Ee,n5),e(n5,i4e),e(i4e,_qr),e(n5,bqr),e(n5,iZ),e(iZ,vqr),e(n5,Fqr),e(Ee,Tqr),e(Ee,s5),e(s5,d4e),e(d4e,Mqr),e(s5,Eqr),e(s5,dZ),e(dZ,Cqr),e(s5,wqr),e(Ee,Aqr),e(Ee,l5),e(l5,c4e),e(c4e,Lqr),e(l5,yqr),e(l5,cZ),e(cZ,xqr),e(l5,$qr),e(Ee,kqr),e(Ee,i5),e(i5,f4e),e(f4e,Sqr),e(i5,Rqr),e(i5,fZ),e(fZ,Pqr),e(i5,Bqr),e(Ee,Iqr),e(Ee,d5),e(d5,m4e),e(m4e,Nqr),e(d5,qqr),e(d5,mZ),e(mZ,jqr),e(d5,Dqr),e(Ee,Gqr),e(Ee,c5),e(c5,g4e),e(g4e,Oqr),e(c5,Vqr),e(c5,gZ),e(gZ,Xqr),e(c5,zqr),e(Ee,Wqr),e(Ee,f5),e(f5,h4e),e(h4e,Qqr),e(f5,Hqr),e(f5,hZ),e(hZ,Uqr),e(f5,Jqr),e(Ee,Yqr),e(Ee,m5),e(m5,p4e),e(p4e,Kqr),e(m5,Zqr),e(m5,pZ),e(pZ,ejr),e(m5,ojr),e(Ee,rjr),e(Ee,g5),e(g5,u4e),e(u4e,tjr),e(g5,ajr),e(g5,uZ),e(uZ,njr),e(g5,sjr),e(Ee,ljr),e(Ee,h5),e(h5,_4e),e(_4e,ijr),e(h5,djr),e(h5,_Z),e(_Z,cjr),e(h5,fjr),e(Ee,mjr),e(Ee,p5),e(p5,b4e),e(b4e,gjr),e(p5,hjr),e(p5,bZ),e(bZ,pjr),e(p5,ujr),e(Ee,_jr),e(Ee,u5),e(u5,v4e),e(v4e,bjr),e(u5,vjr),e(u5,vZ),e(vZ,Fjr),e(u5,Tjr),e(Ee,Mjr),e(Ee,_5),e(_5,F4e),e(F4e,Ejr),e(_5,Cjr),e(_5,FZ),e(FZ,wjr),e(_5,Ajr),e(Vr,Ljr),M(b5,Vr,null),b(f,YOe,_),b(f,Jc,_),e(Jc,v5),e(v5,T4e),M(Dx,T4e,null),e(Jc,yjr),e(Jc,M4e),e(M4e,xjr),b(f,KOe,_),b(f,ur,_),M(Gx,ur,null),e(ur,$jr),e(ur,Yc),e(Yc,kjr),e(Yc,TZ),e(TZ,Sjr),e(Yc,Rjr),e(Yc,MZ),e(MZ,Pjr),e(Yc,Bjr),e(ur,Ijr),e(ur,Ox),e(Ox,Njr),e(Ox,E4e),e(E4e,qjr),e(Ox,jjr),e(ur,Djr),e(ur,Qt),M(Vx,Qt,null),e(Qt,Gjr),e(Qt,C4e),e(C4e,Ojr),e(Qt,Vjr),e(Qt,Kc),e(Kc,Xjr),e(Kc,w4e),e(w4e,zjr),e(Kc,Wjr),e(Kc,EZ),e(EZ,Qjr),e(Kc,Hjr),e(Qt,Ujr),M(F5,Qt,null),e(ur,Jjr),e(ur,Xr),M(Xx,Xr,null),e(Xr,Yjr),e(Xr,A4e),e(A4e,Kjr),e(Xr,Zjr),e(Xr,Mn),e(Mn,eDr),e(Mn,L4e),e(L4e,oDr),e(Mn,rDr),e(Mn,y4e),e(y4e,tDr),e(Mn,aDr),e(Mn,x4e),e(x4e,nDr),e(Mn,sDr),e(Xr,lDr),e(Xr,$e),e($e,T5),e(T5,$4e),e($4e,iDr),e(T5,dDr),e(T5,CZ),e(CZ,cDr),e(T5,fDr),e($e,mDr),e($e,M5),e(M5,k4e),e(k4e,gDr),e(M5,hDr),e(M5,wZ),e(wZ,pDr),e(M5,uDr),e($e,_Dr),e($e,E5),e(E5,S4e),e(S4e,bDr),e(E5,vDr),e(E5,AZ),e(AZ,FDr),e(E5,TDr),e($e,MDr),e($e,C5),e(C5,R4e),e(R4e,EDr),e(C5,CDr),e(C5,LZ),e(LZ,wDr),e(C5,ADr),e($e,LDr),e($e,w5),e(w5,P4e),e(P4e,yDr),e(w5,xDr),e(w5,yZ),e(yZ,$Dr),e(w5,kDr),e($e,SDr),e($e,A5),e(A5,B4e),e(B4e,RDr),e(A5,PDr),e(A5,xZ),e(xZ,BDr),e(A5,IDr),e($e,NDr),e($e,L5),e(L5,I4e),e(I4e,qDr),e(L5,jDr),e(L5,$Z),e($Z,DDr),e(L5,GDr),e($e,ODr),e($e,y5),e(y5,N4e),e(N4e,VDr),e(y5,XDr),e(y5,kZ),e(kZ,zDr),e(y5,WDr),e($e,QDr),e($e,x5),e(x5,q4e),e(q4e,HDr),e(x5,UDr),e(x5,SZ),e(SZ,JDr),e(x5,YDr),e($e,KDr),e($e,$5),e($5,j4e),e(j4e,ZDr),e($5,eGr),e($5,RZ),e(RZ,oGr),e($5,rGr),e(Xr,tGr),M(k5,Xr,null),b(f,ZOe,_),b(f,Zc,_),e(Zc,S5),e(S5,D4e),M(zx,D4e,null),e(Zc,aGr),e(Zc,G4e),e(G4e,nGr),b(f,eVe,_),b(f,_r,_),M(Wx,_r,null),e(_r,sGr),e(_r,ef),e(ef,lGr),e(ef,PZ),e(PZ,iGr),e(ef,dGr),e(ef,BZ),e(BZ,cGr),e(ef,fGr),e(_r,mGr),e(_r,Qx),e(Qx,gGr),e(Qx,O4e),e(O4e,hGr),e(Qx,pGr),e(_r,uGr),e(_r,Ht),M(Hx,Ht,null),e(Ht,_Gr),e(Ht,V4e),e(V4e,bGr),e(Ht,vGr),e(Ht,of),e(of,FGr),e(of,X4e),e(X4e,TGr),e(of,MGr),e(of,IZ),e(IZ,EGr),e(of,CGr),e(Ht,wGr),M(R5,Ht,null),e(_r,AGr),e(_r,zr),M(Ux,zr,null),e(zr,LGr),e(zr,z4e),e(z4e,yGr),e(zr,xGr),e(zr,En),e(En,$Gr),e(En,W4e),e(W4e,kGr),e(En,SGr),e(En,Q4e),e(Q4e,RGr),e(En,PGr),e(En,H4e),e(H4e,BGr),e(En,IGr),e(zr,NGr),e(zr,ke),e(ke,P5),e(P5,U4e),e(U4e,qGr),e(P5,jGr),e(P5,NZ),e(NZ,DGr),e(P5,GGr),e(ke,OGr),e(ke,B5),e(B5,J4e),e(J4e,VGr),e(B5,XGr),e(B5,qZ),e(qZ,zGr),e(B5,WGr),e(ke,QGr),e(ke,I5),e(I5,Y4e),e(Y4e,HGr),e(I5,UGr),e(I5,jZ),e(jZ,JGr),e(I5,YGr),e(ke,KGr),e(ke,N5),e(N5,K4e),e(K4e,ZGr),e(N5,eOr),e(N5,DZ),e(DZ,oOr),e(N5,rOr),e(ke,tOr),e(ke,q5),e(q5,Z4e),e(Z4e,aOr),e(q5,nOr),e(q5,GZ),e(GZ,sOr),e(q5,lOr),e(ke,iOr),e(ke,j5),e(j5,eCe),e(eCe,dOr),e(j5,cOr),e(j5,OZ),e(OZ,fOr),e(j5,mOr),e(ke,gOr),e(ke,D5),e(D5,oCe),e(oCe,hOr),e(D5,pOr),e(D5,VZ),e(VZ,uOr),e(D5,_Or),e(ke,bOr),e(ke,G5),e(G5,rCe),e(rCe,vOr),e(G5,FOr),e(G5,XZ),e(XZ,TOr),e(G5,MOr),e(ke,EOr),e(ke,O5),e(O5,tCe),e(tCe,COr),e(O5,wOr),e(O5,zZ),e(zZ,AOr),e(O5,LOr),e(ke,yOr),e(ke,V5),e(V5,aCe),e(aCe,xOr),e(V5,$Or),e(V5,WZ),e(WZ,kOr),e(V5,SOr),e(zr,ROr),M(X5,zr,null),b(f,oVe,_),b(f,rf,_),e(rf,z5),e(z5,nCe),M(Jx,nCe,null),e(rf,POr),e(rf,sCe),e(sCe,BOr),b(f,rVe,_),b(f,br,_),M(Yx,br,null),e(br,IOr),e(br,tf),e(tf,NOr),e(tf,QZ),e(QZ,qOr),e(tf,jOr),e(tf,HZ),e(HZ,DOr),e(tf,GOr),e(br,OOr),e(br,Kx),e(Kx,VOr),e(Kx,lCe),e(lCe,XOr),e(Kx,zOr),e(br,WOr),e(br,Ut),M(Zx,Ut,null),e(Ut,QOr),e(Ut,iCe),e(iCe,HOr),e(Ut,UOr),e(Ut,af),e(af,JOr),e(af,dCe),e(dCe,YOr),e(af,KOr),e(af,UZ),e(UZ,ZOr),e(af,eVr),e(Ut,oVr),M(W5,Ut,null),e(br,rVr),e(br,Wr),M(e$,Wr,null),e(Wr,tVr),e(Wr,cCe),e(cCe,aVr),e(Wr,nVr),e(Wr,Cn),e(Cn,sVr),e(Cn,fCe),e(fCe,lVr),e(Cn,iVr),e(Cn,mCe),e(mCe,dVr),e(Cn,cVr),e(Cn,gCe),e(gCe,fVr),e(Cn,mVr),e(Wr,gVr),e(Wr,Se),e(Se,Q5),e(Q5,hCe),e(hCe,hVr),e(Q5,pVr),e(Q5,JZ),e(JZ,uVr),e(Q5,_Vr),e(Se,bVr),e(Se,H5),e(H5,pCe),e(pCe,vVr),e(H5,FVr),e(H5,YZ),e(YZ,TVr),e(H5,MVr),e(Se,EVr),e(Se,U5),e(U5,uCe),e(uCe,CVr),e(U5,wVr),e(U5,KZ),e(KZ,AVr),e(U5,LVr),e(Se,yVr),e(Se,J5),e(J5,_Ce),e(_Ce,xVr),e(J5,$Vr),e(J5,ZZ),e(ZZ,kVr),e(J5,SVr),e(Se,RVr),e(Se,Y5),e(Y5,bCe),e(bCe,PVr),e(Y5,BVr),e(Y5,eee),e(eee,IVr),e(Y5,NVr),e(Se,qVr),e(Se,K5),e(K5,vCe),e(vCe,jVr),e(K5,DVr),e(K5,oee),e(oee,GVr),e(K5,OVr),e(Se,VVr),e(Se,Z5),e(Z5,FCe),e(FCe,XVr),e(Z5,zVr),e(Z5,ree),e(ree,WVr),e(Z5,QVr),e(Se,HVr),e(Se,e3),e(e3,TCe),e(TCe,UVr),e(e3,JVr),e(e3,tee),e(tee,YVr),e(e3,KVr),e(Se,ZVr),e(Se,o3),e(o3,MCe),e(MCe,eXr),e(o3,oXr),e(o3,aee),e(aee,rXr),e(o3,tXr),e(Se,aXr),e(Se,r3),e(r3,ECe),e(ECe,nXr),e(r3,sXr),e(r3,nee),e(nee,lXr),e(r3,iXr),e(Wr,dXr),M(t3,Wr,null),b(f,tVe,_),b(f,nf,_),e(nf,a3),e(a3,CCe),M(o$,CCe,null),e(nf,cXr),e(nf,wCe),e(wCe,fXr),b(f,aVe,_),b(f,vr,_),M(r$,vr,null),e(vr,mXr),e(vr,sf),e(sf,gXr),e(sf,see),e(see,hXr),e(sf,pXr),e(sf,lee),e(lee,uXr),e(sf,_Xr),e(vr,bXr),e(vr,t$),e(t$,vXr),e(t$,ACe),e(ACe,FXr),e(t$,TXr),e(vr,MXr),e(vr,Jt),M(a$,Jt,null),e(Jt,EXr),e(Jt,LCe),e(LCe,CXr),e(Jt,wXr),e(Jt,lf),e(lf,AXr),e(lf,yCe),e(yCe,LXr),e(lf,yXr),e(lf,iee),e(iee,xXr),e(lf,$Xr),e(Jt,kXr),M(n3,Jt,null),e(vr,SXr),e(vr,Qr),M(n$,Qr,null),e(Qr,RXr),e(Qr,xCe),e(xCe,PXr),e(Qr,BXr),e(Qr,wn),e(wn,IXr),e(wn,$Ce),e($Ce,NXr),e(wn,qXr),e(wn,kCe),e(kCe,jXr),e(wn,DXr),e(wn,SCe),e(SCe,GXr),e(wn,OXr),e(Qr,VXr),e(Qr,Re),e(Re,s3),e(s3,RCe),e(RCe,XXr),e(s3,zXr),e(s3,dee),e(dee,WXr),e(s3,QXr),e(Re,HXr),e(Re,l3),e(l3,PCe),e(PCe,UXr),e(l3,JXr),e(l3,cee),e(cee,YXr),e(l3,KXr),e(Re,ZXr),e(Re,i3),e(i3,BCe),e(BCe,ezr),e(i3,ozr),e(i3,fee),e(fee,rzr),e(i3,tzr),e(Re,azr),e(Re,d3),e(d3,ICe),e(ICe,nzr),e(d3,szr),e(d3,mee),e(mee,lzr),e(d3,izr),e(Re,dzr),e(Re,c3),e(c3,NCe),e(NCe,czr),e(c3,fzr),e(c3,gee),e(gee,mzr),e(c3,gzr),e(Re,hzr),e(Re,f3),e(f3,qCe),e(qCe,pzr),e(f3,uzr),e(f3,hee),e(hee,_zr),e(f3,bzr),e(Re,vzr),e(Re,m3),e(m3,jCe),e(jCe,Fzr),e(m3,Tzr),e(m3,pee),e(pee,Mzr),e(m3,Ezr),e(Re,Czr),e(Re,g3),e(g3,DCe),e(DCe,wzr),e(g3,Azr),e(g3,uee),e(uee,Lzr),e(g3,yzr),e(Re,xzr),e(Re,h3),e(h3,GCe),e(GCe,$zr),e(h3,kzr),e(h3,_ee),e(_ee,Szr),e(h3,Rzr),e(Re,Pzr),e(Re,p3),e(p3,OCe),e(OCe,Bzr),e(p3,Izr),e(p3,bee),e(bee,Nzr),e(p3,qzr),e(Qr,jzr),M(u3,Qr,null),b(f,nVe,_),b(f,df,_),e(df,_3),e(_3,VCe),M(s$,VCe,null),e(df,Dzr),e(df,XCe),e(XCe,Gzr),b(f,sVe,_),b(f,Fr,_),M(l$,Fr,null),e(Fr,Ozr),e(Fr,cf),e(cf,Vzr),e(cf,vee),e(vee,Xzr),e(cf,zzr),e(cf,Fee),e(Fee,Wzr),e(cf,Qzr),e(Fr,Hzr),e(Fr,i$),e(i$,Uzr),e(i$,zCe),e(zCe,Jzr),e(i$,Yzr),e(Fr,Kzr),e(Fr,Yt),M(d$,Yt,null),e(Yt,Zzr),e(Yt,WCe),e(WCe,eWr),e(Yt,oWr),e(Yt,ff),e(ff,rWr),e(ff,QCe),e(QCe,tWr),e(ff,aWr),e(ff,Tee),e(Tee,nWr),e(ff,sWr),e(Yt,lWr),M(b3,Yt,null),e(Fr,iWr),e(Fr,Hr),M(c$,Hr,null),e(Hr,dWr),e(Hr,HCe),e(HCe,cWr),e(Hr,fWr),e(Hr,An),e(An,mWr),e(An,UCe),e(UCe,gWr),e(An,hWr),e(An,JCe),e(JCe,pWr),e(An,uWr),e(An,YCe),e(YCe,_Wr),e(An,bWr),e(Hr,vWr),e(Hr,Ve),e(Ve,v3),e(v3,KCe),e(KCe,FWr),e(v3,TWr),e(v3,Mee),e(Mee,MWr),e(v3,EWr),e(Ve,CWr),e(Ve,F3),e(F3,ZCe),e(ZCe,wWr),e(F3,AWr),e(F3,Eee),e(Eee,LWr),e(F3,yWr),e(Ve,xWr),e(Ve,T3),e(T3,e5e),e(e5e,$Wr),e(T3,kWr),e(T3,Cee),e(Cee,SWr),e(T3,RWr),e(Ve,PWr),e(Ve,M3),e(M3,o5e),e(o5e,BWr),e(M3,IWr),e(M3,wee),e(wee,NWr),e(M3,qWr),e(Ve,jWr),e(Ve,E3),e(E3,r5e),e(r5e,DWr),e(E3,GWr),e(E3,Aee),e(Aee,OWr),e(E3,VWr),e(Ve,XWr),e(Ve,C3),e(C3,t5e),e(t5e,zWr),e(C3,WWr),e(C3,Lee),e(Lee,QWr),e(C3,HWr),e(Ve,UWr),e(Ve,w3),e(w3,a5e),e(a5e,JWr),e(w3,YWr),e(w3,yee),e(yee,KWr),e(w3,ZWr),e(Ve,eQr),e(Ve,A3),e(A3,n5e),e(n5e,oQr),e(A3,rQr),e(A3,xee),e(xee,tQr),e(A3,aQr),e(Hr,nQr),M(L3,Hr,null),b(f,lVe,_),b(f,mf,_),e(mf,y3),e(y3,s5e),M(f$,s5e,null),e(mf,sQr),e(mf,l5e),e(l5e,lQr),b(f,iVe,_),b(f,Tr,_),M(m$,Tr,null),e(Tr,iQr),e(Tr,gf),e(gf,dQr),e(gf,$ee),e($ee,cQr),e(gf,fQr),e(gf,kee),e(kee,mQr),e(gf,gQr),e(Tr,hQr),e(Tr,g$),e(g$,pQr),e(g$,i5e),e(i5e,uQr),e(g$,_Qr),e(Tr,bQr),e(Tr,Kt),M(h$,Kt,null),e(Kt,vQr),e(Kt,d5e),e(d5e,FQr),e(Kt,TQr),e(Kt,hf),e(hf,MQr),e(hf,c5e),e(c5e,EQr),e(hf,CQr),e(hf,See),e(See,wQr),e(hf,AQr),e(Kt,LQr),M(x3,Kt,null),e(Tr,yQr),e(Tr,Ur),M(p$,Ur,null),e(Ur,xQr),e(Ur,f5e),e(f5e,$Qr),e(Ur,kQr),e(Ur,Ln),e(Ln,SQr),e(Ln,m5e),e(m5e,RQr),e(Ln,PQr),e(Ln,g5e),e(g5e,BQr),e(Ln,IQr),e(Ln,h5e),e(h5e,NQr),e(Ln,qQr),e(Ur,jQr),e(Ur,Xe),e(Xe,$3),e($3,p5e),e(p5e,DQr),e($3,GQr),e($3,Ree),e(Ree,OQr),e($3,VQr),e(Xe,XQr),e(Xe,k3),e(k3,u5e),e(u5e,zQr),e(k3,WQr),e(k3,Pee),e(Pee,QQr),e(k3,HQr),e(Xe,UQr),e(Xe,S3),e(S3,_5e),e(_5e,JQr),e(S3,YQr),e(S3,Bee),e(Bee,KQr),e(S3,ZQr),e(Xe,eHr),e(Xe,R3),e(R3,b5e),e(b5e,oHr),e(R3,rHr),e(R3,Iee),e(Iee,tHr),e(R3,aHr),e(Xe,nHr),e(Xe,P3),e(P3,v5e),e(v5e,sHr),e(P3,lHr),e(P3,Nee),e(Nee,iHr),e(P3,dHr),e(Xe,cHr),e(Xe,B3),e(B3,F5e),e(F5e,fHr),e(B3,mHr),e(B3,qee),e(qee,gHr),e(B3,hHr),e(Xe,pHr),e(Xe,I3),e(I3,T5e),e(T5e,uHr),e(I3,_Hr),e(I3,jee),e(jee,bHr),e(I3,vHr),e(Xe,FHr),e(Xe,N3),e(N3,M5e),e(M5e,THr),e(N3,MHr),e(N3,Dee),e(Dee,EHr),e(N3,CHr),e(Ur,wHr),M(q3,Ur,null),b(f,dVe,_),b(f,pf,_),e(pf,j3),e(j3,E5e),M(u$,E5e,null),e(pf,AHr),e(pf,C5e),e(C5e,LHr),b(f,cVe,_),b(f,Mr,_),M(_$,Mr,null),e(Mr,yHr),e(Mr,uf),e(uf,xHr),e(uf,Gee),e(Gee,$Hr),e(uf,kHr),e(uf,Oee),e(Oee,SHr),e(uf,RHr),e(Mr,PHr),e(Mr,b$),e(b$,BHr),e(b$,w5e),e(w5e,IHr),e(b$,NHr),e(Mr,qHr),e(Mr,Zt),M(v$,Zt,null),e(Zt,jHr),e(Zt,A5e),e(A5e,DHr),e(Zt,GHr),e(Zt,_f),e(_f,OHr),e(_f,L5e),e(L5e,VHr),e(_f,XHr),e(_f,Vee),e(Vee,zHr),e(_f,WHr),e(Zt,QHr),M(D3,Zt,null),e(Mr,HHr),e(Mr,Jr),M(F$,Jr,null),e(Jr,UHr),e(Jr,y5e),e(y5e,JHr),e(Jr,YHr),e(Jr,yn),e(yn,KHr),e(yn,x5e),e(x5e,ZHr),e(yn,eUr),e(yn,$5e),e($5e,oUr),e(yn,rUr),e(yn,k5e),e(k5e,tUr),e(yn,aUr),e(Jr,nUr),e(Jr,S5e),e(S5e,G3),e(G3,R5e),e(R5e,sUr),e(G3,lUr),e(G3,Xee),e(Xee,iUr),e(G3,dUr),e(Jr,cUr),M(O3,Jr,null),b(f,fVe,_),b(f,bf,_),e(bf,V3),e(V3,P5e),M(T$,P5e,null),e(bf,fUr),e(bf,B5e),e(B5e,mUr),b(f,mVe,_),b(f,Er,_),M(M$,Er,null),e(Er,gUr),e(Er,vf),e(vf,hUr),e(vf,zee),e(zee,pUr),e(vf,uUr),e(vf,Wee),e(Wee,_Ur),e(vf,bUr),e(Er,vUr),e(Er,E$),e(E$,FUr),e(E$,I5e),e(I5e,TUr),e(E$,MUr),e(Er,EUr),e(Er,ea),M(C$,ea,null),e(ea,CUr),e(ea,N5e),e(N5e,wUr),e(ea,AUr),e(ea,Ff),e(Ff,LUr),e(Ff,q5e),e(q5e,yUr),e(Ff,xUr),e(Ff,Qee),e(Qee,$Ur),e(Ff,kUr),e(ea,SUr),M(X3,ea,null),e(Er,RUr),e(Er,Yr),M(w$,Yr,null),e(Yr,PUr),e(Yr,j5e),e(j5e,BUr),e(Yr,IUr),e(Yr,xn),e(xn,NUr),e(xn,D5e),e(D5e,qUr),e(xn,jUr),e(xn,G5e),e(G5e,DUr),e(xn,GUr),e(xn,O5e),e(O5e,OUr),e(xn,VUr),e(Yr,XUr),e(Yr,A$),e(A$,z3),e(z3,V5e),e(V5e,zUr),e(z3,WUr),e(z3,Hee),e(Hee,QUr),e(z3,HUr),e(A$,UUr),e(A$,W3),e(W3,X5e),e(X5e,JUr),e(W3,YUr),e(W3,Uee),e(Uee,KUr),e(W3,ZUr),e(Yr,eJr),M(Q3,Yr,null),b(f,gVe,_),b(f,Tf,_),e(Tf,H3),e(H3,z5e),M(L$,z5e,null),e(Tf,oJr),e(Tf,W5e),e(W5e,rJr),b(f,hVe,_),b(f,Cr,_),M(y$,Cr,null),e(Cr,tJr),e(Cr,Mf),e(Mf,aJr),e(Mf,Jee),e(Jee,nJr),e(Mf,sJr),e(Mf,Yee),e(Yee,lJr),e(Mf,iJr),e(Cr,dJr),e(Cr,x$),e(x$,cJr),e(x$,Q5e),e(Q5e,fJr),e(x$,mJr),e(Cr,gJr),e(Cr,oa),M($$,oa,null),e(oa,hJr),e(oa,H5e),e(H5e,pJr),e(oa,uJr),e(oa,Ef),e(Ef,_Jr),e(Ef,U5e),e(U5e,bJr),e(Ef,vJr),e(Ef,Kee),e(Kee,FJr),e(Ef,TJr),e(oa,MJr),M(U3,oa,null),e(Cr,EJr),e(Cr,Kr),M(k$,Kr,null),e(Kr,CJr),e(Kr,J5e),e(J5e,wJr),e(Kr,AJr),e(Kr,$n),e($n,LJr),e($n,Y5e),e(Y5e,yJr),e($n,xJr),e($n,K5e),e(K5e,$Jr),e($n,kJr),e($n,Z5e),e(Z5e,SJr),e($n,RJr),e(Kr,PJr),e(Kr,e3e),e(e3e,J3),e(J3,o3e),e(o3e,BJr),e(J3,IJr),e(J3,Zee),e(Zee,NJr),e(J3,qJr),e(Kr,jJr),M(Y3,Kr,null),pVe=!0},p(f,[_]){const S$={};_&2&&(S$.$$scope={dirty:_,ctx:f}),Sf.$set(S$);const r3e={};_&2&&(r3e.$$scope={dirty:_,ctx:f}),Dg.$set(r3e);const t3e={};_&2&&(t3e.$$scope={dirty:_,ctx:f}),Eh.$set(t3e);const a3e={};_&2&&(a3e.$$scope={dirty:_,ctx:f}),ap.$set(a3e);const R$={};_&2&&(R$.$$scope={dirty:_,ctx:f}),np.$set(R$);const n3e={};_&2&&(n3e.$$scope={dirty:_,ctx:f}),wp.$set(n3e);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),Ap.$set(kn);const s3e={};_&2&&(s3e.$$scope={dirty:_,ctx:f}),xp.$set(s3e);const l3e={};_&2&&(l3e.$$scope={dirty:_,ctx:f}),x_.$set(l3e);const i3e={};_&2&&(i3e.$$scope={dirty:_,ctx:f}),k_.$set(i3e);const P$={};_&2&&(P$.$$scope={dirty:_,ctx:f}),M2.$set(P$);const d3e={};_&2&&(d3e.$$scope={dirty:_,ctx:f}),C2.$set(d3e);const B$={};_&2&&(B$.$$scope={dirty:_,ctx:f}),c1.$set(B$);const c3e={};_&2&&(c3e.$$scope={dirty:_,ctx:f}),m1.$set(c3e);const I$={};_&2&&(I$.$$scope={dirty:_,ctx:f}),J1.$set(I$);const f3e={};_&2&&(f3e.$$scope={dirty:_,ctx:f}),K1.$set(f3e);const m3e={};_&2&&(m3e.$$scope={dirty:_,ctx:f}),_b.$set(m3e);const g3e={};_&2&&(g3e.$$scope={dirty:_,ctx:f}),vb.$set(g3e);const Cf={};_&2&&(Cf.$$scope={dirty:_,ctx:f}),pv.$set(Cf);const h3e={};_&2&&(h3e.$$scope={dirty:_,ctx:f}),_v.$set(h3e);const p3e={};_&2&&(p3e.$$scope={dirty:_,ctx:f}),Hv.$set(p3e);const u3e={};_&2&&(u3e.$$scope={dirty:_,ctx:f}),Jv.$set(u3e);const N$={};_&2&&(N$.$$scope={dirty:_,ctx:f}),tF.$set(N$);const _3e={};_&2&&(_3e.$$scope={dirty:_,ctx:f}),nF.$set(_3e);const b3e={};_&2&&(b3e.$$scope={dirty:_,ctx:f}),OF.$set(b3e);const v3e={};_&2&&(v3e.$$scope={dirty:_,ctx:f}),XF.$set(v3e);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:f}),S6.$set(rt);const q$={};_&2&&(q$.$$scope={dirty:_,ctx:f}),P6.$set(q$);const F3e={};_&2&&(F3e.$$scope={dirty:_,ctx:f}),N6.$set(F3e);const j$={};_&2&&(j$.$$scope={dirty:_,ctx:f}),j6.$set(j$);const T3e={};_&2&&(T3e.$$scope={dirty:_,ctx:f}),Z6.$set(T3e);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),oT.$set(tt);const M3e={};_&2&&(M3e.$$scope={dirty:_,ctx:f}),aT.$set(M3e);const wf={};_&2&&(wf.$$scope={dirty:_,ctx:f}),sT.$set(wf);const E3e={};_&2&&(E3e.$$scope={dirty:_,ctx:f}),dT.$set(E3e);const C3e={};_&2&&(C3e.$$scope={dirty:_,ctx:f}),fT.$set(C3e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),MT.$set(L);const K3={};_&2&&(K3.$$scope={dirty:_,ctx:f}),CT.$set(K3);const w3e={};_&2&&(w3e.$$scope={dirty:_,ctx:f}),kT.$set(w3e);const A3e={};_&2&&(A3e.$$scope={dirty:_,ctx:f}),RT.$set(A3e);const Z3={};_&2&&(Z3.$$scope={dirty:_,ctx:f}),zT.$set(Z3);const L3e={};_&2&&(L3e.$$scope={dirty:_,ctx:f}),QT.$set(L3e);const y3e={};_&2&&(y3e.$$scope={dirty:_,ctx:f}),YT.$set(y3e);const e0={};_&2&&(e0.$$scope={dirty:_,ctx:f}),ZT.$set(e0);const x3e={};_&2&&(x3e.$$scope={dirty:_,ctx:f}),s7.$set(x3e);const $3e={};_&2&&($3e.$$scope={dirty:_,ctx:f}),i7.$set($3e);const o0={};_&2&&(o0.$$scope={dirty:_,ctx:f}),g7.$set(o0);const k3e={};_&2&&(k3e.$$scope={dirty:_,ctx:f}),p7.$set(k3e);const S3e={};_&2&&(S3e.$$scope={dirty:_,ctx:f}),v7.$set(S3e);const r0={};_&2&&(r0.$$scope={dirty:_,ctx:f}),T7.$set(r0);const R3e={};_&2&&(R3e.$$scope={dirty:_,ctx:f}),C7.$set(R3e);const P3e={};_&2&&(P3e.$$scope={dirty:_,ctx:f}),A7.$set(P3e);const t0={};_&2&&(t0.$$scope={dirty:_,ctx:f}),S7.$set(t0);const B3e={};_&2&&(B3e.$$scope={dirty:_,ctx:f}),P7.$set(B3e);const I3e={};_&2&&(I3e.$$scope={dirty:_,ctx:f}),N7.$set(I3e);const a0={};_&2&&(a0.$$scope={dirty:_,ctx:f}),j7.$set(a0);const N3e={};_&2&&(N3e.$$scope={dirty:_,ctx:f}),S8.$set(N3e);const q3e={};_&2&&(q3e.$$scope={dirty:_,ctx:f}),P8.$set(q3e);const n0={};_&2&&(n0.$$scope={dirty:_,ctx:f}),aM.$set(n0);const j3e={};_&2&&(j3e.$$scope={dirty:_,ctx:f}),sM.$set(j3e);const D3e={};_&2&&(D3e.$$scope={dirty:_,ctx:f}),FM.$set(D3e);const s0={};_&2&&(s0.$$scope={dirty:_,ctx:f}),MM.$set(s0);const G3e={};_&2&&(G3e.$$scope={dirty:_,ctx:f}),LM.$set(G3e);const O3e={};_&2&&(O3e.$$scope={dirty:_,ctx:f}),xM.$set(O3e);const l0={};_&2&&(l0.$$scope={dirty:_,ctx:f}),JM.$set(l0);const V3e={};_&2&&(V3e.$$scope={dirty:_,ctx:f}),KM.$set(V3e);const X3e={};_&2&&(X3e.$$scope={dirty:_,ctx:f}),dE.$set(X3e);const i0={};_&2&&(i0.$$scope={dirty:_,ctx:f}),fE.$set(i0);const z3e={};_&2&&(z3e.$$scope={dirty:_,ctx:f}),qE.$set(z3e);const W3e={};_&2&&(W3e.$$scope={dirty:_,ctx:f}),DE.$set(W3e);const d0={};_&2&&(d0.$$scope={dirty:_,ctx:f}),a4.$set(d0);const Q3e={};_&2&&(Q3e.$$scope={dirty:_,ctx:f}),s4.$set(Q3e);const H3e={};_&2&&(H3e.$$scope={dirty:_,ctx:f}),d4.$set(H3e);const c0={};_&2&&(c0.$$scope={dirty:_,ctx:f}),f4.$set(c0);const U3e={};_&2&&(U3e.$$scope={dirty:_,ctx:f}),g4.$set(U3e);const J3e={};_&2&&(J3e.$$scope={dirty:_,ctx:f}),p4.$set(J3e);const f0={};_&2&&(f0.$$scope={dirty:_,ctx:f}),I4.$set(f0);const Y3e={};_&2&&(Y3e.$$scope={dirty:_,ctx:f}),q4.$set(Y3e);const K3e={};_&2&&(K3e.$$scope={dirty:_,ctx:f}),nC.$set(K3e);const m0={};_&2&&(m0.$$scope={dirty:_,ctx:f}),lC.$set(m0);const Z3e={};_&2&&(Z3e.$$scope={dirty:_,ctx:f}),dC.$set(Z3e);const e0e={};_&2&&(e0e.$$scope={dirty:_,ctx:f}),fC.$set(e0e);const g0={};_&2&&(g0.$$scope={dirty:_,ctx:f}),gC.$set(g0);const o0e={};_&2&&(o0e.$$scope={dirty:_,ctx:f}),pC.$set(o0e);const r0e={};_&2&&(r0e.$$scope={dirty:_,ctx:f}),VC.$set(r0e);const h0={};_&2&&(h0.$$scope={dirty:_,ctx:f}),zC.$set(h0);const t0e={};_&2&&(t0e.$$scope={dirty:_,ctx:f}),r5.$set(t0e);const a0e={};_&2&&(a0e.$$scope={dirty:_,ctx:f}),a5.$set(a0e);const p0={};_&2&&(p0.$$scope={dirty:_,ctx:f}),b5.$set(p0);const n0e={};_&2&&(n0e.$$scope={dirty:_,ctx:f}),F5.$set(n0e);const s0e={};_&2&&(s0e.$$scope={dirty:_,ctx:f}),k5.$set(s0e);const u0={};_&2&&(u0.$$scope={dirty:_,ctx:f}),R5.$set(u0);const l0e={};_&2&&(l0e.$$scope={dirty:_,ctx:f}),X5.$set(l0e);const i0e={};_&2&&(i0e.$$scope={dirty:_,ctx:f}),W5.$set(i0e);const _0={};_&2&&(_0.$$scope={dirty:_,ctx:f}),t3.$set(_0);const d0e={};_&2&&(d0e.$$scope={dirty:_,ctx:f}),n3.$set(d0e);const c0e={};_&2&&(c0e.$$scope={dirty:_,ctx:f}),u3.$set(c0e);const b0={};_&2&&(b0.$$scope={dirty:_,ctx:f}),b3.$set(b0);const f0e={};_&2&&(f0e.$$scope={dirty:_,ctx:f}),L3.$set(f0e);const m0e={};_&2&&(m0e.$$scope={dirty:_,ctx:f}),x3.$set(m0e);const v0={};_&2&&(v0.$$scope={dirty:_,ctx:f}),q3.$set(v0);const g0e={};_&2&&(g0e.$$scope={dirty:_,ctx:f}),D3.$set(g0e);const h0e={};_&2&&(h0e.$$scope={dirty:_,ctx:f}),O3.$set(h0e);const F0={};_&2&&(F0.$$scope={dirty:_,ctx:f}),X3.$set(F0);const p0e={};_&2&&(p0e.$$scope={dirty:_,ctx:f}),Q3.$set(p0e);const u0e={};_&2&&(u0e.$$scope={dirty:_,ctx:f}),U3.$set(u0e);const T0={};_&2&&(T0.$$scope={dirty:_,ctx:f}),Y3.$set(T0)},i(f){pVe||(E(d.$$.fragment,f),E(ya.$$.fragment,f),E(MA.$$.fragment,f),E(EA.$$.fragment,f),E(Sf.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(yA.$$.fragment,f),E(Dg.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(PA.$$.fragment,f),E(Eh.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(DA.$$.fragment,f),E(ap.$$.fragment,f),E(np.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(WA.$$.fragment,f),E(wp.$$.fragment,f),E(Ap.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(YA.$$.fragment,f),E(xp.$$.fragment,f),E(KA.$$.fragment,f),E(x_.$$.fragment,f),E(ZA.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(k_.$$.fragment,f),E(tL.$$.fragment,f),E(M2.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(C2.$$.fragment,f),E(iL.$$.fragment,f),E(c1.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(m1.$$.fragment,f),E(gL.$$.fragment,f),E(J1.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(K1.$$.fragment,f),E(bL.$$.fragment,f),E(_b.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(vb.$$.fragment,f),E(EL.$$.fragment,f),E(pv.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(LL.$$.fragment,f),E(_v.$$.fragment,f),E(yL.$$.fragment,f),E(Hv.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(Jv.$$.fragment,f),E(RL.$$.fragment,f),E(tF.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(nF.$$.fragment,f),E(qL.$$.fragment,f),E(OF.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(XF.$$.fragment,f),E(VL.$$.fragment,f),E(S6.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(P6.$$.fragment,f),E(HL.$$.fragment,f),E(N6.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(j6.$$.fragment,f),E(ZL.$$.fragment,f),E(Z6.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(oT.$$.fragment,f),E(ay.$$.fragment,f),E(aT.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(sT.$$.fragment,f),E(dy.$$.fragment,f),E(dT.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(fT.$$.fragment,f),E(hy.$$.fragment,f),E(MT.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(CT.$$.fragment,f),E(vy.$$.fragment,f),E(kT.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(RT.$$.fragment,f),E(Cy.$$.fragment,f),E(zT.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(QT.$$.fragment,f),E(xy.$$.fragment,f),E(YT.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(ZT.$$.fragment,f),E(By.$$.fragment,f),E(s7.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(i7.$$.fragment,f),E(Dy.$$.fragment,f),E(g7.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(p7.$$.fragment,f),E(zy.$$.fragment,f),E(v7.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(T7.$$.fragment,f),E(Yy.$$.fragment,f),E(C7.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o9.$$.fragment,f),E(A7.$$.fragment,f),E(r9.$$.fragment,f),E(S7.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(P7.$$.fragment,f),E(l9.$$.fragment,f),E(N7.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(j7.$$.fragment,f),E(m9.$$.fragment,f),E(S8.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(u9.$$.fragment,f),E(P8.$$.fragment,f),E(_9.$$.fragment,f),E(aM.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(sM.$$.fragment,f),E(M9.$$.fragment,f),E(FM.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(MM.$$.fragment,f),E(L9.$$.fragment,f),E(LM.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(xM.$$.fragment,f),E(S9.$$.fragment,f),E(JM.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E(KM.$$.fragment,f),E(N9.$$.fragment,f),E(dE.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(fE.$$.fragment,f),E(O9.$$.fragment,f),E(qE.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(W9.$$.fragment,f),E(DE.$$.fragment,f),E(Q9.$$.fragment,f),E(a4.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(s4.$$.fragment,f),E(K9.$$.fragment,f),E(d4.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(f4.$$.fragment,f),E(ax.$$.fragment,f),E(g4.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(p4.$$.fragment,f),E(dx.$$.fragment,f),E(I4.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(q4.$$.fragment,f),E(hx.$$.fragment,f),E(nC.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(lC.$$.fragment,f),E(vx.$$.fragment,f),E(dC.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(fC.$$.fragment,f),E(Cx.$$.fragment,f),E(gC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(pC.$$.fragment,f),E(xx.$$.fragment,f),E(VC.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(zC.$$.fragment,f),E(Px.$$.fragment,f),E(r5.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(a5.$$.fragment,f),E(jx.$$.fragment,f),E(b5.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(F5.$$.fragment,f),E(Xx.$$.fragment,f),E(k5.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(R5.$$.fragment,f),E(Ux.$$.fragment,f),E(X5.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(W5.$$.fragment,f),E(e$.$$.fragment,f),E(t3.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(n3.$$.fragment,f),E(n$.$$.fragment,f),E(u3.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(b3.$$.fragment,f),E(c$.$$.fragment,f),E(L3.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(x3.$$.fragment,f),E(p$.$$.fragment,f),E(q3.$$.fragment,f),E(u$.$$.fragment,f),E(_$.$$.fragment,f),E(v$.$$.fragment,f),E(D3.$$.fragment,f),E(F$.$$.fragment,f),E(O3.$$.fragment,f),E(T$.$$.fragment,f),E(M$.$$.fragment,f),E(C$.$$.fragment,f),E(X3.$$.fragment,f),E(w$.$$.fragment,f),E(Q3.$$.fragment,f),E(L$.$$.fragment,f),E(y$.$$.fragment,f),E($$.$$.fragment,f),E(U3.$$.fragment,f),E(k$.$$.fragment,f),E(Y3.$$.fragment,f),pVe=!0)},o(f){C(d.$$.fragment,f),C(ya.$$.fragment,f),C(MA.$$.fragment,f),C(EA.$$.fragment,f),C(Sf.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(yA.$$.fragment,f),C(Dg.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(PA.$$.fragment,f),C(Eh.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(DA.$$.fragment,f),C(ap.$$.fragment,f),C(np.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(WA.$$.fragment,f),C(wp.$$.fragment,f),C(Ap.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(YA.$$.fragment,f),C(xp.$$.fragment,f),C(KA.$$.fragment,f),C(x_.$$.fragment,f),C(ZA.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(k_.$$.fragment,f),C(tL.$$.fragment,f),C(M2.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(C2.$$.fragment,f),C(iL.$$.fragment,f),C(c1.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(m1.$$.fragment,f),C(gL.$$.fragment,f),C(J1.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(K1.$$.fragment,f),C(bL.$$.fragment,f),C(_b.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(vb.$$.fragment,f),C(EL.$$.fragment,f),C(pv.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(LL.$$.fragment,f),C(_v.$$.fragment,f),C(yL.$$.fragment,f),C(Hv.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(Jv.$$.fragment,f),C(RL.$$.fragment,f),C(tF.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(nF.$$.fragment,f),C(qL.$$.fragment,f),C(OF.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(XF.$$.fragment,f),C(VL.$$.fragment,f),C(S6.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(P6.$$.fragment,f),C(HL.$$.fragment,f),C(N6.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(j6.$$.fragment,f),C(ZL.$$.fragment,f),C(Z6.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(oT.$$.fragment,f),C(ay.$$.fragment,f),C(aT.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(sT.$$.fragment,f),C(dy.$$.fragment,f),C(dT.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(fT.$$.fragment,f),C(hy.$$.fragment,f),C(MT.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(CT.$$.fragment,f),C(vy.$$.fragment,f),C(kT.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(RT.$$.fragment,f),C(Cy.$$.fragment,f),C(zT.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(QT.$$.fragment,f),C(xy.$$.fragment,f),C(YT.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(ZT.$$.fragment,f),C(By.$$.fragment,f),C(s7.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(i7.$$.fragment,f),C(Dy.$$.fragment,f),C(g7.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(p7.$$.fragment,f),C(zy.$$.fragment,f),C(v7.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(T7.$$.fragment,f),C(Yy.$$.fragment,f),C(C7.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o9.$$.fragment,f),C(A7.$$.fragment,f),C(r9.$$.fragment,f),C(S7.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(P7.$$.fragment,f),C(l9.$$.fragment,f),C(N7.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(j7.$$.fragment,f),C(m9.$$.fragment,f),C(S8.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(u9.$$.fragment,f),C(P8.$$.fragment,f),C(_9.$$.fragment,f),C(aM.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(sM.$$.fragment,f),C(M9.$$.fragment,f),C(FM.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(MM.$$.fragment,f),C(L9.$$.fragment,f),C(LM.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(xM.$$.fragment,f),C(S9.$$.fragment,f),C(JM.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C(KM.$$.fragment,f),C(N9.$$.fragment,f),C(dE.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(fE.$$.fragment,f),C(O9.$$.fragment,f),C(qE.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(W9.$$.fragment,f),C(DE.$$.fragment,f),C(Q9.$$.fragment,f),C(a4.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(s4.$$.fragment,f),C(K9.$$.fragment,f),C(d4.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(f4.$$.fragment,f),C(ax.$$.fragment,f),C(g4.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(p4.$$.fragment,f),C(dx.$$.fragment,f),C(I4.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(q4.$$.fragment,f),C(hx.$$.fragment,f),C(nC.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(lC.$$.fragment,f),C(vx.$$.fragment,f),C(dC.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(fC.$$.fragment,f),C(Cx.$$.fragment,f),C(gC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(pC.$$.fragment,f),C(xx.$$.fragment,f),C(VC.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(zC.$$.fragment,f),C(Px.$$.fragment,f),C(r5.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(a5.$$.fragment,f),C(jx.$$.fragment,f),C(b5.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(F5.$$.fragment,f),C(Xx.$$.fragment,f),C(k5.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(R5.$$.fragment,f),C(Ux.$$.fragment,f),C(X5.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(W5.$$.fragment,f),C(e$.$$.fragment,f),C(t3.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(n3.$$.fragment,f),C(n$.$$.fragment,f),C(u3.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(b3.$$.fragment,f),C(c$.$$.fragment,f),C(L3.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(x3.$$.fragment,f),C(p$.$$.fragment,f),C(q3.$$.fragment,f),C(u$.$$.fragment,f),C(_$.$$.fragment,f),C(v$.$$.fragment,f),C(D3.$$.fragment,f),C(F$.$$.fragment,f),C(O3.$$.fragment,f),C(T$.$$.fragment,f),C(M$.$$.fragment,f),C(C$.$$.fragment,f),C(X3.$$.fragment,f),C(w$.$$.fragment,f),C(Q3.$$.fragment,f),C(L$.$$.fragment,f),C(y$.$$.fragment,f),C($$.$$.fragment,f),C(U3.$$.fragment,f),C(k$.$$.fragment,f),C(Y3.$$.fragment,f),pVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Lf),f&&t(at),f&&t(Oe),f&&t(We),f&&t(xf),w(ya,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(cGe),f&&t(Li),w(MA),f&&t(fGe),f&&t(In),f&&t(mGe),w(EA,f),f&&t(gGe),f&&t(Zk),f&&t(hGe),w(Sf,f),f&&t(pGe),f&&t(yi),w(CA),f&&t(uGe),f&&t(wo),w(wA),w(yA),w(Dg),w(xA),f&&t(_Ge),f&&t($i),w($A),f&&t(bGe),f&&t(Ao),w(kA),w(PA),w(Eh),w(BA),f&&t(vGe),f&&t(ki),w(IA),f&&t(FGe),f&&t(Lo),w(NA),w(DA),w(ap),w(np),w(GA),f&&t(TGe),f&&t(Si),w(OA),f&&t(MGe),f&&t(yo),w(VA),w(WA),w(wp),w(Ap),w(QA),f&&t(EGe),f&&t(Pi),w(HA),f&&t(CGe),f&&t(xo),w(UA),w(YA),w(xp),w(KA),w(x_),f&&t(wGe),f&&t(Ni),w(ZA),f&&t(AGe),f&&t($o),w(eL),w(rL),w(k_),w(tL),w(M2),f&&t(LGe),f&&t(Di),w(aL),f&&t(yGe),f&&t(ko),w(nL),w(lL),w(C2),w(iL),w(c1),f&&t(xGe),f&&t(Vi),w(dL),f&&t($Ge),f&&t(So),w(cL),w(mL),w(m1),w(gL),w(J1),f&&t(kGe),f&&t(Wi),w(hL),f&&t(SGe),f&&t(Ro),w(pL),w(_L),w(K1),w(bL),w(_b),f&&t(RGe),f&&t(Ui),w(vL),f&&t(PGe),f&&t(Po),w(FL),w(ML),w(vb),w(EL),w(pv),f&&t(BGe),f&&t(Ki),w(CL),f&&t(IGe),f&&t(Bo),w(wL),w(LL),w(_v),w(yL),w(Hv),f&&t(NGe),f&&t(od),w(xL),f&&t(qGe),f&&t(Io),w($L),w(SL),w(Jv),w(RL),w(tF),f&&t(jGe),f&&t(ad),w(PL),f&&t(DGe),f&&t(No),w(BL),w(NL),w(nF),w(qL),w(OF),f&&t(GGe),f&&t(ld),w(jL),f&&t(OGe),f&&t(qo),w(DL),w(OL),w(XF),w(VL),w(S6),f&&t(VGe),f&&t(cd),w(XL),f&&t(XGe),f&&t(jo),w(zL),w(QL),w(P6),w(HL),w(N6),f&&t(zGe),f&&t(gd),w(UL),f&&t(WGe),f&&t(Do),w(JL),w(KL),w(j6),w(ZL),w(Z6),f&&t(QGe),f&&t(ud),w(ey),f&&t(HGe),f&&t(Go),w(oy),w(ty),w(oT),w(ay),w(aT),f&&t(UGe),f&&t(vd),w(ny),f&&t(JGe),f&&t(Oo),w(sy),w(iy),w(sT),w(dy),w(dT),f&&t(YGe),f&&t(Md),w(cy),f&&t(KGe),f&&t(Vo),w(fy),w(gy),w(fT),w(hy),w(MT),f&&t(ZGe),f&&t(wd),w(py),f&&t(eOe),f&&t(Xo),w(uy),w(by),w(CT),w(vy),w(kT),f&&t(oOe),f&&t(yd),w(Fy),f&&t(rOe),f&&t(zo),w(Ty),w(Ey),w(RT),w(Cy),w(zT),f&&t(tOe),f&&t(kd),w(wy),f&&t(aOe),f&&t(Wo),w(Ay),w(yy),w(QT),w(xy),w(YT),f&&t(nOe),f&&t(Pd),w(ky),f&&t(sOe),f&&t(Qo),w(Sy),w(Py),w(ZT),w(By),w(s7),f&&t(lOe),f&&t(Nd),w(Iy),f&&t(iOe),f&&t(Ho),w(Ny),w(jy),w(i7),w(Dy),w(g7),f&&t(dOe),f&&t(Gd),w(Gy),f&&t(cOe),f&&t(Uo),w(Oy),w(Xy),w(p7),w(zy),w(v7),f&&t(fOe),f&&t(Xd),w(Qy),f&&t(mOe),f&&t(Jo),w(Hy),w(Jy),w(T7),w(Yy),w(C7),f&&t(gOe),f&&t(Qd),w(Ky),f&&t(hOe),f&&t(Yo),w(Zy),w(o9),w(A7),w(r9),w(S7),f&&t(pOe),f&&t(Jd),w(t9),f&&t(uOe),f&&t(Ko),w(a9),w(s9),w(P7),w(l9),w(N7),f&&t(_Oe),f&&t(Zd),w(i9),f&&t(bOe),f&&t(Zo),w(d9),w(f9),w(j7),w(m9),w(S8),f&&t(vOe),f&&t(rc),w(g9),f&&t(FOe),f&&t(er),w(h9),w(u9),w(P8),w(_9),w(aM),f&&t(TOe),f&&t(nc),w(b9),f&&t(MOe),f&&t(or),w(v9),w(T9),w(sM),w(M9),w(FM),f&&t(EOe),f&&t(ic),w(E9),f&&t(COe),f&&t(rr),w(C9),w(A9),w(MM),w(L9),w(LM),f&&t(wOe),f&&t(fc),w(y9),f&&t(AOe),f&&t(tr),w(x9),w(k9),w(xM),w(S9),w(JM),f&&t(LOe),f&&t(hc),w(R9),f&&t(yOe),f&&t(ar),w(P9),w(I9),w(KM),w(N9),w(dE),f&&t(xOe),f&&t(_c),w(q9),f&&t($Oe),f&&t(nr),w(j9),w(G9),w(fE),w(O9),w(qE),f&&t(kOe),f&&t(Fc),w(V9),f&&t(SOe),f&&t(sr),w(X9),w(W9),w(DE),w(Q9),w(a4),f&&t(ROe),f&&t(Ec),w(H9),f&&t(POe),f&&t(lr),w(U9),w(Y9),w(s4),w(K9),w(d4),f&&t(BOe),f&&t(Ac),w(ex),f&&t(IOe),f&&t(ir),w(ox),w(tx),w(f4),w(ax),w(g4),f&&t(NOe),f&&t(xc),w(nx),f&&t(qOe),f&&t(dr),w(sx),w(ix),w(p4),w(dx),w(I4),f&&t(jOe),f&&t(Sc),w(cx),f&&t(DOe),f&&t(cr),w(fx),w(gx),w(q4),w(hx),w(nC),f&&t(GOe),f&&t(Bc),w(px),f&&t(OOe),f&&t(fr),w(ux),w(bx),w(lC),w(vx),w(dC),f&&t(VOe),f&&t(qc),w(Fx),f&&t(XOe),f&&t(mr),w(Tx),w(Ex),w(fC),w(Cx),w(gC),f&&t(zOe),f&&t(Gc),w(wx),f&&t(WOe),f&&t(gr),w(Ax),w(yx),w(pC),w(xx),w(VC),f&&t(QOe),f&&t(Xc),w($x),f&&t(HOe),f&&t(hr),w(kx),w(Rx),w(zC),w(Px),w(r5),f&&t(UOe),f&&t(Qc),w(Bx),f&&t(JOe),f&&t(pr),w(Ix),w(qx),w(a5),w(jx),w(b5),f&&t(YOe),f&&t(Jc),w(Dx),f&&t(KOe),f&&t(ur),w(Gx),w(Vx),w(F5),w(Xx),w(k5),f&&t(ZOe),f&&t(Zc),w(zx),f&&t(eVe),f&&t(_r),w(Wx),w(Hx),w(R5),w(Ux),w(X5),f&&t(oVe),f&&t(rf),w(Jx),f&&t(rVe),f&&t(br),w(Yx),w(Zx),w(W5),w(e$),w(t3),f&&t(tVe),f&&t(nf),w(o$),f&&t(aVe),f&&t(vr),w(r$),w(a$),w(n3),w(n$),w(u3),f&&t(nVe),f&&t(df),w(s$),f&&t(sVe),f&&t(Fr),w(l$),w(d$),w(b3),w(c$),w(L3),f&&t(lVe),f&&t(mf),w(f$),f&&t(iVe),f&&t(Tr),w(m$),w(h$),w(x3),w(p$),w(q3),f&&t(dVe),f&&t(pf),w(u$),f&&t(cVe),f&&t(Mr),w(_$),w(v$),w(D3),w(F$),w(O3),f&&t(fVe),f&&t(bf),w(T$),f&&t(mVe),f&&t(Er),w(M$),w(C$),w(X3),w(w$),w(Q3),f&&t(gVe),f&&t(Tf),w(L$),f&&t(hVe),f&&t(Cr),w(y$),w($$),w(U3),w(k$),w(Y3)}}}const YDt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function KDt(x){return Jqt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class nGt extends Wqt{constructor(g){super();Qqt(this,g,KDt,JDt,Hqt,{})}}export{nGt as default,YDt as metadata};
